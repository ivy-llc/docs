Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 176, 179, 182, 183, 184, 186, 190, 191, 205, 208, 218, 224, 225, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 591, 597, 602, 603, 604, 605, 606, 608, 610, 611, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 734, 736, 738, 739, 744, 745, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893], "notebook": [0, 4, 5, 6, 7, 12, 13, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 48, 57, 808, 827], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 203, 205, 207, 208, 210, 211, 213, 215, 218, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 327, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 396, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 583, 584, 587, 588, 589, 591, 597, 601, 602, 603, 604, 606, 608, 610, 611, 612, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 790, 791, 792, 793, 798, 802, 803, 805, 806, 807, 808, 809, 810, 812, 815, 816, 820, 821, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "dedic": [0, 803, 836, 851, 862, 866, 868], "task": [0, 1, 8, 9, 59, 651, 729, 730, 731, 827, 828, 830, 834, 835, 836, 856, 857, 885, 891, 892], "util": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 34, 37, 38, 39, 40, 56, 59, 68, 91, 209, 387, 458, 642, 812, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 834, 841, 845, 848, 849, 852, 855, 859, 860, 864, 879, 883, 891, 892], "power": [0, 33, 42, 43, 67, 68, 69, 73, 90, 91, 92, 96, 113, 114, 245, 254, 255, 289, 344, 357, 380, 383, 386, 434, 593, 604, 616, 643, 645, 648, 652, 690, 703, 738, 805, 861, 866, 867, 868, 885, 887, 891], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 59, 60, 61, 68, 73, 74, 75, 83, 91, 96, 97, 106, 108, 109, 129, 375, 385, 389, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 505, 510, 556, 566, 606, 628, 629, 631, 636, 637, 645, 646, 648, 649, 650, 691, 707, 716, 717, 718, 720, 722, 723, 725, 727, 802, 808, 815, 821, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 885, 886, 890, 891, 893], "emploi": [0, 25, 891], "build": [0, 5, 14, 15, 26, 30, 31, 33, 40, 42, 43, 46, 47, 48, 49, 54, 56, 61, 79, 85, 114, 656, 763, 764, 765, 766, 806, 807, 808, 827, 828, 834, 837, 843, 844, 852, 854, 863, 865, 868, 869, 870, 872, 875, 879, 883, 885, 887, 890, 891, 892], "The": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 113, 114, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 144, 145, 147, 149, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 181, 183, 184, 185, 188, 189, 191, 192, 194, 195, 196, 197, 203, 204, 205, 206, 207, 209, 210, 211, 212, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 437, 438, 439, 440, 441, 443, 445, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 485, 486, 487, 491, 494, 495, 500, 501, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 582, 584, 587, 588, 591, 593, 594, 597, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 792, 793, 798, 802, 803, 805, 806, 808, 809, 810, 815, 820, 821, 827, 828, 829, 831, 833, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 859, 860, 862, 863, 864, 867, 868, 869, 871, 872, 873, 874, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893], "goal": [0, 31, 56, 258, 643, 833, 836, 875, 885, 891], "accur": [0, 8, 9, 22, 256, 274, 643, 648, 696, 853], "distinguish": 0, "between": [0, 8, 9, 25, 31, 32, 37, 47, 48, 49, 54, 67, 68, 69, 72, 73, 74, 75, 79, 85, 90, 91, 95, 96, 97, 98, 114, 137, 176, 239, 252, 287, 303, 345, 362, 364, 383, 386, 387, 388, 389, 398, 410, 411, 412, 423, 424, 425, 433, 439, 443, 464, 465, 466, 467, 468, 469, 470, 495, 543, 640, 641, 643, 647, 649, 650, 652, 654, 656, 670, 693, 707, 708, 709, 710, 716, 724, 738, 753, 764, 765, 766, 791, 798, 810, 839, 840, 844, 846, 851, 852, 853, 855, 856, 857, 858, 859, 862, 863, 865, 866, 867, 869, 874, 878, 879, 881, 882, 884, 885, 886, 891], "activ": [0, 8, 9, 22, 27, 40, 42, 43, 68, 69, 72, 83, 91, 95, 106, 121, 122, 123, 124, 125, 126, 127, 128, 129, 306, 307, 308, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 606, 647, 674, 677, 805, 806, 825, 827, 834, 835, 844, 850, 860, 861, 868, 879, 885, 888], "therebi": [0, 8, 9, 22, 859], "enhanc": [0, 39, 42, 43, 827, 858, 879], "secur": 0, "usag": [0, 10, 11, 224, 642, 827, 844, 852, 855, 859, 864, 870, 875, 888], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 56, 68, 72, 73, 75, 79, 81, 85, 91, 95, 96, 104, 221, 224, 229, 386, 389, 398, 414, 419, 429, 433, 479, 486, 487, 488, 495, 534, 535, 642, 647, 648, 650, 651, 652, 656, 658, 660, 661, 662, 663, 665, 667, 669, 673, 674, 677, 688, 689, 705, 714, 729, 730, 744, 763, 764, 765, 766, 771, 772, 775, 777, 779, 787, 806, 815, 820, 833, 834, 835, 838, 839, 841, 844, 845, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 864, 867, 870, 878, 879, 885], "dive": [0, 25, 31, 33, 42, 54, 827, 828, 829, 832, 833, 835, 838, 842, 844, 850, 857, 863, 866, 867, 870, 891], "need": [0, 1, 4, 5, 10, 11, 18, 19, 23, 24, 31, 33, 39, 40, 42, 43, 56, 57, 58, 68, 69, 75, 91, 92, 98, 386, 387, 398, 409, 414, 415, 419, 440, 540, 551, 552, 573, 645, 647, 648, 650, 652, 674, 683, 713, 716, 743, 791, 829, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 862, 864, 866, 867, 870, 871, 876, 878, 879, 881, 885, 886, 887, 891], "up": [0, 4, 5, 10, 11, 12, 13, 18, 19, 23, 24, 25, 42, 68, 69, 91, 92, 386, 389, 409, 422, 479, 487, 568, 580, 645, 647, 670, 672, 827, 828, 831, 833, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 874, 875, 876, 878, 886, 891, 892], "our": [0, 4, 5, 8, 9, 10, 11, 18, 19, 22, 23, 24, 25, 27, 29, 31, 34, 35, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 54, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 848, 849, 850, 853, 856, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 874, 875, 878, 890, 891, 893], "necessari": [0, 8, 9, 10, 11, 22, 48, 64, 68, 87, 91, 98, 139, 251, 284, 388, 389, 463, 473, 474, 475, 481, 483, 484, 485, 486, 487, 494, 510, 596, 619, 643, 645, 716, 717, 718, 720, 722, 723, 725, 727, 827, 833, 834, 839, 840, 842, 844, 846, 855, 856, 859, 861, 862, 878, 879], "follow": [0, 1, 5, 8, 9, 10, 11, 22, 25, 36, 37, 38, 40, 42, 43, 46, 47, 48, 54, 57, 58, 68, 69, 70, 72, 73, 79, 85, 91, 92, 93, 95, 96, 145, 176, 179, 224, 234, 251, 258, 284, 286, 293, 294, 330, 380, 386, 388, 389, 392, 409, 422, 430, 468, 483, 495, 512, 514, 571, 572, 573, 603, 604, 627, 630, 632, 633, 634, 640, 641, 642, 643, 645, 646, 647, 648, 652, 656, 674, 677, 689, 695, 705, 738, 744, 763, 764, 765, 766, 806, 810, 829, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 878, 882, 885, 888], "command": [0, 5, 56, 58, 829, 834, 838, 841, 843, 849, 850, 871], "which": [0, 1, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 111, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 164, 166, 168, 174, 176, 179, 181, 184, 191, 203, 208, 212, 217, 219, 222, 223, 224, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 333, 336, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 361, 362, 363, 364, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 396, 398, 409, 410, 411, 412, 414, 415, 419, 420, 429, 430, 431, 433, 438, 441, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 500, 501, 502, 503, 504, 505, 507, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 525, 526, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 579, 580, 585, 586, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 670, 671, 672, 674, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 702, 704, 705, 707, 708, 709, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 727, 728, 737, 738, 739, 740, 745, 747, 748, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 802, 803, 805, 806, 807, 808, 809, 810, 811, 815, 816, 823, 825, 827, 829, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892], "an": [0, 1, 3, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 48, 54, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 176, 179, 182, 186, 190, 191, 221, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 327, 328, 329, 331, 332, 339, 340, 341, 342, 343, 344, 346, 347, 349, 352, 356, 361, 365, 370, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 418, 420, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 441, 442, 467, 468, 472, 473, 474, 475, 479, 480, 481, 483, 490, 494, 495, 501, 503, 507, 509, 510, 512, 513, 514, 517, 519, 520, 522, 525, 526, 531, 532, 533, 534, 535, 536, 537, 540, 541, 544, 549, 551, 552, 560, 563, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 582, 588, 591, 592, 601, 602, 606, 610, 611, 612, 625, 628, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 672, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 738, 751, 753, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 891, 892], "machin": [0, 8, 9, 10, 11, 20, 21, 22, 23, 24, 37, 38, 39, 40, 45, 46, 54, 60, 68, 73, 91, 96, 176, 179, 387, 441, 641, 648, 691, 694, 834, 838, 852, 872, 875, 883, 885, 887, 888, 889, 890, 891], "learn": [0, 8, 9, 10, 11, 22, 25, 27, 29, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 54, 56, 68, 70, 93, 387, 388, 458, 463, 556, 627, 630, 632, 633, 634, 645, 646, 651, 729, 730, 731, 810, 828, 832, 833, 834, 837, 838, 844, 849, 850, 852, 854, 863, 872, 874, 875, 883, 887, 888, 889, 890, 891, 892], "other": [0, 4, 5, 8, 9, 10, 11, 14, 15, 18, 19, 22, 23, 24, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 56, 58, 65, 67, 68, 69, 75, 81, 85, 88, 90, 91, 92, 98, 104, 108, 113, 114, 137, 152, 164, 190, 251, 256, 258, 274, 283, 284, 348, 352, 383, 389, 479, 480, 488, 545, 546, 640, 641, 643, 645, 654, 658, 714, 724, 755, 778, 780, 787, 792, 827, 831, 833, 834, 835, 836, 838, 839, 842, 843, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 866, 868, 869, 870, 871, 872, 875, 878, 879, 881, 883, 884, 885, 891, 892], "essenti": [0, 830, 833, 840, 842, 845, 846, 852, 855, 856, 857, 874, 875, 891], "panda": [0, 25, 56, 58, 875, 882], "matplotlib": [0, 5, 8, 9, 10, 11, 22, 25, 37, 38, 39, 40, 56, 57, 58, 61], "scikit": [0, 25, 387, 458, 875], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 59, 60, 61, 64, 69, 73, 83, 92, 96, 140, 178, 205, 206, 210, 220, 222, 227, 294, 346, 347, 383, 389, 507, 549, 573, 606, 640, 641, 642, 643, 645, 648, 651, 698, 730, 731, 787, 798, 803, 815, 825, 827, 831, 834, 835, 838, 839, 840, 841, 843, 844, 845, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 866, 867, 869, 870, 872, 878, 879, 880, 891], "cryptographi": [0, 5, 25], "These": [0, 25, 49, 68, 91, 387, 389, 398, 440, 494, 533, 647, 648, 674, 683, 684, 827, 830, 832, 833, 834, 835, 838, 842, 844, 846, 847, 851, 852, 855, 856, 859, 864, 865, 867, 868, 869, 870, 872, 874, 875, 876, 879, 885, 889, 891, 892], "tool": [0, 22, 25, 33, 42, 43, 827, 834, 835, 846, 850, 865, 869, 870, 873, 876, 879, 883, 884, 885, 886, 888, 891, 892], "provid": [0, 8, 9, 14, 15, 22, 31, 33, 37, 40, 42, 43, 47, 48, 54, 60, 64, 68, 69, 73, 75, 78, 81, 82, 85, 87, 91, 92, 96, 98, 101, 104, 105, 133, 150, 152, 169, 170, 171, 172, 173, 181, 191, 203, 207, 220, 303, 386, 387, 389, 392, 398, 422, 430, 434, 439, 443, 456, 457, 461, 462, 479, 481, 490, 510, 512, 514, 543, 555, 587, 588, 639, 640, 641, 642, 643, 645, 647, 648, 650, 652, 655, 658, 659, 674, 690, 693, 704, 716, 717, 724, 736, 758, 778, 780, 781, 782, 791, 806, 810, 815, 816, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 859, 860, 862, 866, 868, 870, 874, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 892], "robust": 0, "foundat": [0, 33, 875, 888], "manipul": [0, 68, 91, 855, 856, 860, 862, 864, 869, 874, 885], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 34, 35, 36, 37, 38, 39, 40, 42, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 121, 122, 123, 124, 125, 126, 128, 129, 137, 138, 139, 140, 143, 145, 147, 148, 149, 150, 151, 152, 154, 158, 160, 164, 165, 166, 174, 176, 179, 184, 186, 191, 208, 209, 217, 222, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 331, 332, 339, 341, 346, 347, 349, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 405, 406, 407, 408, 410, 411, 413, 414, 415, 418, 419, 423, 424, 425, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 451, 457, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 478, 479, 480, 481, 482, 485, 486, 487, 490, 491, 492, 494, 495, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 515, 516, 517, 518, 521, 523, 524, 526, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 566, 569, 571, 572, 573, 580, 587, 588, 603, 604, 605, 606, 608, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 793, 805, 806, 810, 820, 821, 827, 831, 833, 834, 840, 841, 842, 843, 844, 846, 849, 854, 857, 859, 862, 864, 866, 867, 868, 869, 876, 878, 885, 891, 892], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 55, 56, 57, 58, 59, 60, 61, 827, 831, 834, 841, 850], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 56, 57, 58, 68, 72, 73, 91, 95, 96, 373, 383, 387, 398, 440, 543, 647, 648, 652, 674, 677, 683, 684, 695, 740, 834, 835, 837, 857, 870], "r": [0, 4, 5, 20, 21, 22, 56, 57, 68, 73, 85, 91, 96, 108, 109, 360, 375, 383, 385, 628, 646, 648, 650, 695, 727, 834, 835, 837, 854, 857, 893], "requir": [0, 5, 8, 9, 10, 11, 22, 37, 38, 39, 40, 47, 56, 57, 58, 61, 67, 68, 85, 90, 91, 285, 298, 302, 387, 389, 440, 441, 495, 643, 648, 650, 683, 684, 685, 724, 790, 798, 803, 821, 829, 833, 834, 839, 841, 843, 844, 845, 846, 847, 848, 850, 851, 853, 856, 857, 858, 859, 860, 862, 864, 866, 870, 879, 885, 891], "txt": [0, 4, 5, 8, 9, 20, 21, 57, 69, 834, 838, 841], "16": [0, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 22, 25, 37, 38, 39, 40, 54, 56, 58, 67, 68, 69, 72, 73, 77, 81, 88, 90, 91, 92, 95, 96, 98, 100, 113, 114, 179, 245, 274, 294, 301, 357, 360, 364, 383, 386, 389, 398, 405, 406, 408, 414, 418, 419, 423, 424, 429, 433, 468, 485, 534, 540, 557, 560, 582, 603, 604, 636, 641, 643, 645, 646, 647, 648, 650, 652, 654, 655, 658, 669, 671, 678, 682, 685, 686, 693, 695, 699, 727, 740, 753, 754, 755, 762, 772, 773, 790, 793, 835, 844, 846, 867], "mb": [0, 8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 56, 58, 61, 843], "25": [0, 22, 25, 54, 56, 57, 58, 67, 68, 69, 73, 74, 77, 81, 84, 90, 91, 92, 95, 96, 99, 100, 104, 113, 114, 129, 148, 234, 235, 245, 251, 253, 264, 269, 284, 289, 292, 294, 297, 298, 299, 304, 326, 380, 388, 398, 429, 464, 467, 534, 543, 571, 572, 588, 603, 640, 643, 645, 648, 649, 652, 653, 658, 661, 678, 682, 687, 703, 708, 733, 740, 744, 751, 753, 754, 755, 772, 773, 775, 780, 836, 842, 854], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 113, 114, 121, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 160, 163, 164, 165, 166, 170, 174, 175, 176, 179, 184, 186, 191, 207, 208, 212, 216, 217, 219, 220, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 336, 337, 339, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 585, 587, 588, 592, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 793, 795, 798, 802, 805, 806, 807, 808, 809, 810, 811, 815, 820, 821, 825, 827, 830, 831, 834, 835, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 862, 863, 864, 866, 867, 868, 869, 870, 875, 876, 878, 879, 880, 893], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 57, 59, 60, 61, 64, 68, 69, 70, 73, 81, 91, 93, 96, 104, 133, 150, 156, 157, 177, 178, 207, 210, 211, 223, 258, 293, 340, 345, 346, 347, 349, 360, 362, 368, 372, 374, 380, 383, 384, 386, 387, 388, 389, 392, 393, 398, 401, 402, 409, 415, 420, 431, 439, 443, 451, 460, 465, 467, 468, 484, 486, 487, 495, 512, 513, 514, 523, 533, 543, 561, 562, 568, 582, 605, 606, 627, 629, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 652, 658, 662, 664, 666, 668, 674, 681, 689, 691, 698, 699, 705, 744, 778, 780, 791, 805, 806, 807, 808, 809, 810, 811, 815, 825, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 891], "eta": [0, 10, 11, 14, 15, 16, 17, 56, 58, 61], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 140, 143, 145, 146, 147, 148, 149, 152, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 174, 176, 179, 180, 184, 186, 191, 204, 207, 209, 212, 217, 218, 219, 220, 222, 223, 224, 226, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 396, 398, 405, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 424, 425, 426, 429, 430, 431, 433, 436, 437, 438, 440, 441, 442, 445, 446, 448, 451, 452, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 478, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 550, 551, 552, 555, 556, 557, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 583, 585, 587, 588, 592, 597, 601, 602, 603, 604, 606, 608, 610, 611, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 793, 795, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 815, 820, 821, 825, 827, 831, 834, 835, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 854, 855, 856, 857, 859, 860, 864, 866, 867, 868, 869, 870, 878, 879], "00": [0, 8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 25, 56, 58, 61, 68, 69, 73, 91, 92, 96, 256, 323, 354, 355, 380, 386, 408, 414, 418, 419, 560, 604, 643, 645, 648, 685, 695, 790, 850, 859], "44": [0, 8, 9, 10, 11, 14, 15, 16, 17, 54, 58, 67, 68, 77, 90, 91, 100, 237, 284, 294, 298, 299, 350, 383, 386, 407, 408, 643, 647, 648, 652, 655, 658, 670, 693, 740, 753, 754, 762, 773], "6": [0, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 35, 37, 38, 39, 40, 42, 43, 54, 56, 57, 58, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 75, 77, 78, 80, 81, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 109, 113, 114, 121, 123, 128, 133, 138, 139, 146, 147, 150, 151, 154, 160, 164, 165, 166, 174, 176, 184, 230, 231, 233, 234, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 281, 282, 283, 284, 286, 287, 288, 290, 291, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 307, 308, 310, 312, 314, 316, 317, 318, 320, 321, 322, 323, 324, 330, 341, 346, 347, 349, 351, 360, 361, 363, 364, 365, 367, 374, 378, 380, 383, 384, 386, 387, 388, 389, 394, 396, 398, 408, 410, 413, 414, 418, 419, 423, 429, 430, 431, 433, 436, 439, 442, 443, 447, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 479, 481, 485, 486, 490, 491, 494, 495, 500, 501, 503, 504, 507, 510, 511, 521, 523, 524, 526, 531, 533, 534, 535, 536, 538, 540, 542, 543, 549, 551, 552, 555, 556, 557, 563, 564, 571, 572, 573, 588, 602, 603, 604, 605, 606, 608, 612, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 677, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 743, 744, 750, 751, 752, 753, 754, 755, 757, 758, 759, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 790, 805, 831, 834, 838, 840, 842, 843, 844, 846, 849, 854, 859, 862, 864, 866, 867, 868], "kb": [0, 8, 9, 10, 11, 14, 15, 16, 17, 20, 21, 22, 56, 58, 61], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 36, 37, 38, 39, 40, 42, 43, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 78, 79, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 143, 145, 147, 148, 150, 151, 152, 153, 154, 158, 159, 160, 163, 164, 165, 166, 170, 174, 176, 184, 186, 191, 205, 207, 208, 219, 222, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 341, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 403, 405, 406, 407, 408, 410, 413, 414, 415, 418, 419, 423, 424, 425, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 492, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 515, 516, 517, 518, 521, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 587, 588, 601, 602, 603, 604, 608, 611, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 793, 806, 820, 821, 825, 827, 831, 833, 834, 838, 839, 840, 842, 843, 844, 846, 848, 849, 852, 854, 857, 859, 864, 866, 867, 868, 869, 878, 879, 892], "45": [0, 5, 10, 11, 14, 15, 16, 17, 54, 56, 58, 67, 68, 81, 90, 91, 93, 95, 100, 114, 235, 239, 251, 294, 295, 354, 355, 368, 383, 386, 398, 408, 418, 429, 534, 540, 626, 632, 643, 646, 648, 650, 658, 693, 722, 754, 755, 773, 790], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 34, 35, 37, 38, 39, 40, 42, 43, 54, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 108, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 137, 138, 139, 145, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 164, 165, 166, 170, 174, 176, 184, 186, 191, 208, 217, 222, 225, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 312, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 341, 344, 346, 347, 349, 351, 353, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 394, 396, 398, 405, 406, 407, 408, 410, 411, 413, 414, 415, 418, 419, 423, 424, 425, 428, 429, 430, 431, 433, 436, 439, 440, 442, 443, 445, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 489, 490, 491, 494, 495, 500, 501, 502, 503, 504, 505, 507, 510, 511, 516, 517, 518, 521, 523, 524, 526, 531, 533, 534, 535, 536, 537, 538, 540, 543, 549, 550, 551, 552, 555, 556, 557, 558, 560, 563, 564, 566, 569, 571, 572, 573, 587, 588, 592, 603, 604, 605, 606, 608, 612, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 702, 703, 704, 707, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 735, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 792, 793, 806, 820, 821, 827, 830, 833, 834, 835, 838, 840, 842, 843, 844, 846, 848, 849, 851, 854, 857, 859, 866, 867, 868, 879, 893], "143": [0, 10, 11, 14, 15, 16, 17, 73, 90, 114, 301, 643, 648, 686, 846], "8": [0, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 37, 38, 39, 40, 54, 56, 58, 61, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 113, 114, 121, 136, 146, 147, 151, 154, 160, 169, 171, 172, 173, 176, 184, 209, 226, 234, 236, 237, 241, 242, 245, 246, 247, 249, 255, 258, 262, 263, 269, 270, 271, 275, 276, 279, 280, 282, 283, 284, 289, 290, 293, 294, 295, 298, 299, 302, 303, 304, 308, 314, 316, 317, 318, 320, 321, 323, 324, 341, 345, 357, 360, 362, 363, 364, 367, 374, 378, 380, 383, 386, 387, 388, 389, 398, 405, 406, 407, 408, 413, 414, 418, 419, 423, 424, 428, 429, 433, 436, 439, 447, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 479, 481, 485, 490, 491, 500, 501, 504, 505, 506, 507, 510, 511, 521, 523, 535, 538, 539, 543, 549, 550, 556, 557, 560, 563, 567, 571, 572, 573, 575, 576, 579, 582, 587, 588, 592, 602, 603, 604, 605, 606, 626, 629, 631, 633, 634, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 661, 665, 666, 668, 669, 670, 671, 674, 680, 681, 682, 684, 685, 686, 688, 689, 690, 693, 695, 696, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 713, 717, 724, 725, 727, 733, 740, 744, 752, 753, 754, 755, 757, 762, 763, 765, 767, 768, 770, 772, 773, 775, 777, 779, 780, 790, 793, 806, 834, 842, 843, 846, 859, 863, 867], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 35, 37, 38, 39, 40, 54, 56, 57, 58, 60, 61, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 114, 123, 124, 125, 126, 137, 138, 139, 148, 151, 152, 170, 176, 179, 209, 231, 234, 237, 241, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 261, 262, 263, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 284, 286, 287, 288, 290, 291, 294, 295, 296, 298, 301, 302, 304, 305, 307, 308, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 329, 330, 341, 345, 349, 351, 352, 360, 361, 362, 364, 366, 367, 374, 378, 380, 383, 384, 386, 387, 388, 389, 394, 398, 405, 406, 407, 408, 413, 414, 418, 419, 423, 428, 429, 430, 431, 433, 436, 439, 452, 464, 465, 466, 467, 469, 470, 473, 474, 475, 479, 481, 485, 490, 491, 494, 495, 500, 501, 503, 504, 506, 507, 510, 511, 521, 523, 524, 531, 534, 535, 537, 538, 543, 549, 551, 552, 556, 557, 560, 571, 572, 573, 580, 587, 588, 603, 606, 626, 627, 629, 630, 631, 632, 633, 634, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 664, 666, 668, 669, 670, 671, 677, 679, 680, 681, 682, 684, 685, 686, 688, 690, 693, 695, 696, 698, 699, 700, 702, 703, 704, 707, 708, 709, 713, 716, 717, 722, 724, 725, 727, 732, 733, 740, 744, 751, 752, 753, 754, 755, 757, 762, 763, 765, 767, 768, 770, 771, 772, 773, 775, 777, 779, 780, 790, 834, 835, 840, 842, 843, 846, 852, 855, 859], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 37, 38, 39, 40, 54, 56, 58, 61, 64, 65, 67, 68, 69, 70, 72, 73, 75, 77, 79, 80, 81, 84, 88, 90, 91, 92, 93, 95, 96, 98, 100, 102, 103, 104, 113, 114, 121, 137, 138, 139, 151, 169, 170, 171, 172, 173, 176, 179, 232, 234, 236, 237, 240, 241, 242, 245, 246, 251, 252, 253, 258, 265, 271, 272, 273, 275, 279, 280, 282, 283, 284, 287, 289, 290, 294, 295, 298, 299, 300, 305, 311, 314, 315, 316, 353, 356, 360, 366, 367, 374, 378, 383, 384, 386, 388, 389, 396, 398, 405, 406, 407, 408, 413, 414, 418, 419, 423, 424, 428, 429, 433, 447, 464, 466, 468, 469, 473, 474, 475, 481, 485, 490, 500, 501, 502, 503, 505, 507, 510, 521, 523, 526, 535, 552, 556, 557, 558, 560, 563, 571, 572, 575, 576, 579, 587, 588, 602, 603, 605, 626, 627, 628, 632, 633, 637, 640, 641, 643, 645, 646, 647, 648, 650, 652, 654, 655, 656, 657, 658, 661, 662, 663, 669, 670, 671, 679, 680, 682, 684, 685, 686, 688, 689, 690, 693, 695, 696, 698, 699, 700, 702, 703, 704, 713, 717, 721, 722, 724, 725, 727, 732, 733, 738, 740, 743, 744, 752, 753, 754, 755, 757, 762, 763, 765, 767, 768, 770, 772, 773, 775, 777, 779, 780, 790, 810, 842, 844, 846, 854, 859, 867, 868, 881], "756": [0, 10, 11, 14, 15, 16, 17], "21": [0, 4, 5, 10, 11, 14, 15, 22, 25, 54, 56, 58, 61, 67, 68, 69, 77, 87, 90, 91, 95, 96, 100, 104, 113, 149, 179, 234, 237, 239, 245, 269, 284, 315, 367, 386, 387, 388, 389, 398, 405, 408, 418, 423, 429, 431, 433, 437, 463, 478, 534, 588, 640, 641, 643, 645, 648, 652, 658, 682, 693, 697, 738, 753, 754, 771, 772, 773, 848, 854], "116": [0, 10, 11, 14, 15, 16, 17], "23": [0, 5, 22, 23, 24, 25, 37, 38, 39, 40, 54, 56, 58, 67, 68, 73, 77, 87, 90, 91, 92, 95, 100, 147, 246, 249, 266, 267, 268, 291, 293, 294, 295, 297, 304, 349, 350, 383, 386, 389, 398, 405, 406, 408, 418, 423, 424, 425, 429, 433, 478, 534, 540, 640, 643, 647, 648, 652, 655, 666, 668, 682, 686, 689, 697, 699, 700, 733, 740, 744, 753, 754, 755, 762, 827, 843, 859, 864], "29": [0, 5, 8, 9, 22, 25, 54, 56, 58, 61, 73, 90, 92, 93, 95, 100, 239, 398, 429, 534, 556, 557, 628, 632, 643, 645, 646, 648, 686, 753, 754, 755], "823": 0, "46": [0, 8, 9, 22, 54, 56, 58, 68, 77, 91, 95, 100, 149, 274, 295, 325, 380, 386, 406, 424, 425, 640, 643, 652, 733, 753, 754], "14": [0, 4, 5, 8, 9, 12, 13, 18, 19, 20, 21, 22, 38, 54, 56, 57, 58, 65, 67, 68, 72, 73, 77, 81, 88, 90, 91, 92, 95, 96, 98, 100, 163, 176, 179, 232, 237, 239, 246, 250, 276, 280, 284, 290, 297, 305, 356, 386, 387, 389, 398, 405, 406, 407, 408, 418, 423, 425, 428, 429, 430, 433, 437, 443, 444, 479, 481, 485, 490, 510, 534, 603, 626, 641, 643, 645, 646, 647, 648, 650, 652, 656, 658, 661, 662, 664, 666, 668, 670, 682, 684, 686, 693, 700, 702, 704, 727, 744, 753, 754, 755, 763, 772, 773, 842, 846, 859], "731": [0, 62, 127], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 33, 35, 36, 37, 38, 39, 40, 42, 43, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 113, 114, 121, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 160, 163, 164, 165, 166, 170, 174, 176, 184, 186, 191, 207, 208, 209, 212, 215, 217, 219, 222, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 331, 332, 339, 341, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 396, 398, 402, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 418, 419, 420, 423, 424, 425, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 452, 454, 457, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 492, 494, 495, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 515, 516, 518, 521, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 585, 587, 588, 592, 601, 602, 603, 604, 605, 606, 608, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 792, 793, 802, 805, 806, 815, 820, 821, 825, 827, 831, 834, 835, 838, 840, 841, 842, 843, 844, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 863, 864, 866, 867, 868, 869, 870, 878, 879, 880, 891, 892], "121": 0, "56": [0, 20, 21, 25, 54, 56, 67, 68, 72, 77, 90, 91, 95, 149, 284, 298, 301, 304, 386, 408, 418, 626, 640, 643, 646, 647, 648, 652, 658, 662, 664, 666, 668, 671, 693, 732, 754, 773, 846], "124": [0, 647, 671], "196": [0, 95, 647, 671], "166": [0, 84, 121, 637], "99": [0, 22, 25, 54, 67, 68, 70, 88, 90, 100, 146, 233, 248, 371, 383, 603, 630, 640, 643, 645, 646, 652, 658, 736, 744, 754, 773], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 33, 35, 37, 38, 39, 40, 54, 56, 57, 58, 61, 67, 68, 69, 72, 73, 77, 81, 90, 91, 92, 95, 96, 98, 100, 104, 114, 234, 238, 241, 246, 256, 293, 294, 300, 364, 383, 386, 387, 389, 405, 406, 418, 423, 424, 428, 429, 433, 442, 478, 479, 481, 485, 490, 492, 510, 534, 535, 550, 556, 557, 563, 572, 588, 643, 645, 647, 648, 649, 650, 652, 654, 655, 656, 658, 661, 662, 670, 671, 682, 685, 686, 687, 688, 689, 693, 697, 698, 699, 700, 702, 704, 707, 717, 722, 723, 725, 727, 738, 740, 750, 753, 754, 755, 762, 763, 771, 772, 773, 780, 842, 843, 844, 846, 854], "71": [0, 54, 67, 90, 95, 250, 290, 429, 643], "To": [0, 1, 8, 9, 20, 21, 22, 23, 24, 25, 27, 29, 33, 37, 38, 39, 40, 42, 43, 54, 57, 58, 59, 109, 258, 388, 467, 597, 643, 645, 805, 833, 834, 838, 839, 840, 841, 844, 846, 848, 849, 850, 852, 853, 856, 857, 858, 859, 860, 867, 868, 869, 871, 878, 879], "ensur": [0, 1, 20, 21, 23, 24, 27, 29, 37, 38, 39, 40, 68, 69, 91, 92, 386, 387, 423, 424, 425, 458, 573, 645, 785, 827, 830, 833, 834, 835, 839, 844, 845, 846, 848, 850, 851, 853, 855, 856, 857, 858, 859, 860, 871, 885], "begin": [0, 10, 11, 38, 68, 91, 295, 388, 389, 463, 479, 495, 496, 497, 498, 499, 643, 652, 732, 743, 790, 834, 838, 843, 857], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 29, 34, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 54, 55, 56, 58, 59, 60, 61, 67, 68, 69, 81, 90, 91, 92, 158, 187, 205, 210, 235, 295, 318, 339, 380, 398, 533, 540, 549, 573, 603, 606, 610, 640, 641, 642, 643, 645, 648, 658, 696, 773, 785, 787, 798, 815, 820, 821, 827, 832, 833, 834, 835, 838, 839, 840, 843, 844, 845, 848, 849, 851, 855, 857, 859, 860, 862, 864, 866, 869, 871, 872, 874, 875, 878, 879, 880, 882, 887, 892], "handl": [0, 4, 5, 12, 13, 54, 56, 62, 66, 67, 68, 84, 85, 89, 90, 91, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 204, 205, 206, 207, 208, 212, 217, 218, 226, 230, 236, 248, 273, 275, 289, 295, 296, 301, 302, 306, 311, 312, 314, 378, 389, 478, 504, 637, 642, 643, 648, 658, 702, 777, 779, 802, 810, 828, 830, 837, 842, 843, 844, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 868, 882, 892], "its": [0, 1, 8, 9, 22, 23, 24, 33, 35, 42, 43, 45, 48, 55, 56, 58, 63, 65, 68, 75, 85, 88, 91, 92, 98, 111, 123, 126, 129, 134, 164, 169, 170, 171, 172, 173, 224, 251, 284, 303, 313, 378, 386, 389, 398, 426, 434, 507, 509, 536, 560, 609, 637, 639, 641, 642, 643, 645, 648, 650, 652, 688, 716, 720, 721, 725, 738, 787, 821, 833, 834, 839, 842, 843, 844, 845, 847, 848, 849, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 869, 870, 872, 878, 884, 885, 891], "backend": [0, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 48, 63, 64, 68, 69, 73, 85, 91, 92, 96, 113, 140, 177, 178, 181, 203, 210, 211, 213, 216, 227, 346, 347, 383, 387, 439, 441, 540, 549, 561, 562, 570, 573, 574, 584, 591, 606, 609, 640, 641, 642, 645, 648, 696, 698, 785, 787, 788, 790, 791, 792, 795, 797, 798, 803, 807, 808, 810, 814, 815, 827, 831, 832, 834, 835, 837, 838, 839, 843, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 861, 862, 863, 865, 866, 869, 872, 874, 878, 879, 880, 885, 888, 891, 892], "jax": [0, 3, 8, 9, 20, 21, 22, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 54, 56, 60, 62, 67, 68, 69, 79, 84, 90, 91, 92, 121, 122, 123, 124, 125, 126, 127, 128, 129, 220, 302, 306, 311, 312, 314, 360, 378, 383, 398, 543, 573, 606, 625, 637, 642, 643, 645, 656, 763, 764, 765, 766, 798, 802, 815, 827, 831, 832, 833, 834, 835, 838, 840, 844, 845, 848, 849, 851, 854, 855, 856, 857, 859, 860, 862, 864, 866, 869, 870, 875, 876, 878, 879, 880, 886, 888, 891, 892], "capabl": [0, 8, 9, 31, 39, 43, 859, 862], "optim": [0, 8, 9, 10, 11, 18, 19, 22, 23, 24, 25, 33, 37, 38, 40, 42, 43, 56, 58, 59, 61, 68, 70, 91, 93, 323, 380, 388, 467, 468, 547, 634, 645, 646, 651, 729, 730, 731, 805, 821, 827, 844, 855, 862, 865, 867, 869, 876, 879, 883, 884, 885, 886, 887, 888, 889, 892], "frontend": [0, 25, 590, 645, 787, 788, 791, 795, 798, 827, 832, 835, 837, 843, 844, 848, 849, 854, 858, 859, 862, 863, 865, 872, 879, 885], "xgb_frontend": 0, "access": [0, 1, 39, 42, 43, 85, 827, 833, 834, 835, 843, 844, 850, 855, 856, 871, 879, 885, 887, 889], "compat": [0, 8, 9, 14, 15, 34, 40, 44, 48, 54, 61, 67, 68, 73, 75, 78, 81, 82, 90, 91, 96, 98, 101, 104, 105, 113, 114, 165, 234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 262, 263, 270, 271, 276, 278, 280, 281, 284, 287, 289, 293, 300, 305, 346, 347, 383, 641, 643, 648, 650, 655, 658, 659, 679, 691, 694, 697, 700, 704, 705, 720, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 825, 834, 840, 851, 856, 857, 860, 864, 870, 875], "manner": [0, 35, 43, 45, 55, 63, 86, 652, 744, 834, 844, 845, 847, 852, 856, 860, 867, 870, 874, 881, 883, 891, 892], "sklearn": [0, 25], "model_select": [0, 25], "timeit": [0, 18, 19, 23, 24, 25, 35, 42, 43, 59, 61], "oper": [0, 8, 9, 33, 34, 37, 38, 39, 40, 42, 43, 44, 48, 55, 58, 64, 65, 67, 68, 69, 72, 73, 81, 85, 87, 88, 90, 91, 92, 95, 96, 104, 114, 129, 148, 149, 191, 221, 229, 234, 236, 245, 248, 251, 258, 273, 275, 284, 285, 289, 293, 296, 301, 313, 321, 341, 342, 343, 375, 378, 380, 385, 386, 388, 389, 400, 401, 402, 403, 405, 406, 407, 413, 414, 415, 419, 423, 424, 425, 426, 428, 429, 431, 433, 434, 463, 500, 502, 549, 556, 557, 558, 606, 637, 640, 641, 642, 643, 645, 647, 648, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 674, 689, 700, 702, 775, 777, 779, 790, 793, 806, 821, 825, 833, 834, 837, 838, 839, 842, 844, 845, 846, 847, 848, 852, 855, 856, 859, 862, 864, 867, 868, 872, 874, 878, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892], "xgb": 0, "functool": [0, 25, 56, 848, 856, 866], "higher": [0, 25, 68, 91, 387, 389, 398, 444, 456, 462, 473, 474, 475, 543, 805, 844, 855, 863, 864, 869, 870, 882, 885, 886, 889, 891, 892], "order": [0, 4, 5, 36, 46, 48, 56, 59, 61, 64, 68, 69, 72, 73, 75, 79, 80, 85, 91, 95, 96, 98, 102, 103, 108, 113, 114, 138, 139, 150, 158, 239, 258, 301, 339, 360, 380, 383, 386, 387, 389, 392, 396, 432, 437, 440, 441, 442, 443, 444, 448, 454, 456, 459, 462, 485, 486, 487, 492, 493, 505, 512, 513, 514, 517, 526, 640, 643, 647, 648, 650, 651, 655, 656, 657, 661, 662, 663, 664, 665, 666, 669, 683, 684, 689, 698, 699, 703, 705, 717, 720, 729, 730, 761, 763, 764, 765, 766, 767, 769, 770, 787, 809, 811, 821, 833, 834, 835, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 867, 869, 870, 874, 881, 884, 885, 886, 888, 891], "callabl": [0, 20, 21, 60, 68, 69, 83, 91, 92, 95, 106, 133, 134, 136, 177, 178, 210, 211, 224, 374, 376, 377, 384, 385, 386, 389, 429, 432, 434, 472, 495, 546, 550, 555, 557, 561, 562, 583, 612, 625, 629, 631, 636, 639, 641, 642, 645, 646, 651, 652, 729, 730, 731, 738, 739, 740, 742, 743, 744, 745, 785, 788, 798, 810, 822, 825, 842, 848, 854, 856, 864, 877, 878, 879, 880], "object": [0, 5, 25, 33, 38, 40, 42, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 114, 117, 118, 140, 144, 145, 155, 167, 176, 179, 187, 190, 225, 283, 520, 568, 584, 628, 640, 641, 642, 645, 646, 652, 654, 735, 736, 737, 739, 740, 741, 747, 748, 749, 750, 757, 785, 787, 788, 795, 796, 797, 803, 804, 806, 807, 808, 815, 820, 839, 840, 842, 843, 852, 853, 856, 857, 859, 862, 866, 869, 877, 878, 879, 880, 885, 891], "tqdm_notebook": [0, 25], "tqdm": [0, 5, 8, 9, 10, 11, 25, 37, 38, 39, 40, 56, 58], "progress": [0, 648, 703, 830, 834, 835, 869], "bar": [0, 834, 849], "jupyt": [0, 1, 5, 875, 887], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 20, 21, 25, 42, 43, 56, 59, 878], "step": [0, 1, 2, 8, 9, 10, 11, 22, 28, 29, 30, 41, 42, 43, 54, 56, 57, 58, 68, 70, 87, 91, 93, 137, 148, 386, 389, 432, 434, 489, 626, 627, 630, 632, 633, 634, 640, 646, 651, 729, 730, 731, 810, 825, 827, 833, 834, 835, 836, 839, 840, 842, 843, 844, 845, 846, 849, 854, 856, 859, 864, 867, 868, 869, 876, 885], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 29, 34, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 54, 55, 56, 57, 58, 59, 61, 64, 68, 90, 91, 92, 138, 139, 140, 151, 187, 264, 268, 318, 386, 387, 414, 419, 435, 603, 640, 641, 643, 645, 652, 738, 787, 815, 820, 821, 827, 833, 839, 844, 845, 848, 851, 855, 856, 857, 859, 860, 862, 864, 866, 867, 869, 872, 880], "pd": [0, 25, 58], "set_backend": [0, 4, 5, 6, 7, 12, 13, 20, 21, 25, 33, 34, 35, 36, 37, 38, 42, 43, 45, 46, 47, 48, 49, 55, 57, 58, 59, 67, 69, 83, 90, 92, 178, 187, 205, 206, 210, 220, 222, 227, 235, 549, 573, 641, 642, 645, 648, 651, 696, 730, 731, 815, 827, 838, 840, 844, 845, 852, 853, 854, 864, 866, 869, 878, 879, 880], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 36, 39, 42, 43, 56, 57, 59, 85, 652, 745, 827, 834, 838, 841, 843, 850, 857, 867, 878, 886], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 34, 36, 37, 38, 39, 40, 42, 43, 56, 58, 63, 69, 70, 85, 92, 93, 108, 389, 500, 573, 587, 588, 591, 592, 615, 626, 627, 630, 632, 633, 634, 645, 646, 647, 651, 652, 670, 673, 729, 730, 731, 739, 740, 744, 749, 750, 798, 803, 809, 810, 815, 821, 827, 833, 834, 835, 837, 838, 839, 842, 843, 844, 846, 851, 853, 854, 856, 857, 859, 862, 864, 866, 867, 869, 870], "jax_enable_x64": [0, 6, 7, 12, 13, 18, 19, 23, 24, 25, 36, 39, 42, 43, 827], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 36, 37, 39, 40, 42, 43, 47, 48, 49, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 136, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 167, 174, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 191, 203, 207, 208, 210, 211, 215, 218, 219, 221, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 380, 383, 384, 386, 387, 388, 389, 392, 398, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 429, 430, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 482, 483, 485, 486, 487, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 525, 526, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 587, 588, 589, 592, 595, 596, 598, 599, 601, 602, 603, 604, 606, 608, 610, 611, 613, 618, 619, 621, 622, 624, 627, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 742, 743, 744, 745, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 792, 793, 795, 806, 807, 808, 809, 810, 812, 815, 817, 818, 820, 821, 825, 827, 831, 834, 840, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 861, 862, 864, 867, 868, 869, 878, 879], "from": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 77, 78, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98, 100, 101, 104, 105, 106, 108, 109, 111, 114, 137, 139, 142, 144, 145, 146, 147, 150, 151, 154, 158, 160, 166, 184, 190, 191, 207, 212, 217, 223, 224, 250, 258, 259, 286, 290, 291, 298, 302, 323, 324, 330, 333, 339, 341, 342, 343, 350, 353, 357, 358, 360, 361, 373, 377, 380, 383, 385, 386, 387, 388, 389, 393, 398, 410, 411, 412, 426, 431, 432, 451, 458, 463, 464, 468, 478, 481, 490, 495, 501, 503, 504, 506, 507, 509, 510, 519, 520, 521, 522, 523, 534, 535, 555, 563, 564, 566, 586, 597, 608, 625, 627, 628, 632, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 654, 655, 656, 658, 659, 661, 669, 670, 679, 682, 698, 702, 703, 704, 714, 717, 720, 723, 729, 730, 731, 733, 744, 745, 746, 752, 753, 754, 755, 759, 762, 763, 765, 771, 772, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 792, 793, 798, 803, 805, 806, 807, 808, 810, 815, 821, 825, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 889, 890, 891, 892], "classification_report": [0, 25], "train_test_split": [0, 25], "usr": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 56, 57, 58, 61, 834], "local": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 47, 48, 49, 56, 57, 58, 61, 392, 517, 568, 645, 828, 834, 838, 841, 849, 852, 857, 859], "lib": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 22, 25, 37, 38, 39, 40, 56, 57, 58, 61], "python3": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 37, 38, 39, 40, 42, 56, 58, 61, 834, 835], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 54, 56, 58, 60, 61, 64, 67, 68, 69, 70, 72, 73, 77, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 137, 147, 148, 149, 233, 241, 242, 245, 246, 249, 256, 261, 263, 269, 271, 273, 284, 290, 297, 298, 303, 312, 345, 346, 347, 350, 354, 355, 357, 359, 360, 362, 363, 364, 366, 367, 371, 374, 383, 386, 389, 398, 405, 406, 407, 408, 418, 423, 424, 428, 429, 430, 431, 433, 463, 475, 478, 481, 485, 490, 500, 501, 510, 531, 534, 535, 538, 540, 543, 556, 557, 558, 560, 563, 564, 566, 571, 572, 580, 588, 592, 597, 603, 605, 617, 620, 632, 640, 643, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 658, 661, 662, 664, 670, 680, 682, 686, 687, 688, 689, 690, 693, 698, 699, 700, 702, 704, 717, 722, 723, 724, 725, 727, 738, 740, 743, 751, 752, 753, 754, 755, 761, 763, 769, 771, 772, 773, 774, 776, 777, 779, 780, 790, 792, 810, 827, 831, 834, 838, 842, 843, 844, 846, 849, 854, 857, 859, 864, 866, 867, 875, 880, 890], "dist": [0, 10, 11, 12, 13, 14, 15, 16, 17, 22, 56, 57, 58, 61], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 37, 38, 39, 40, 43, 56, 57, 58, 61, 819, 831, 834, 843, 856, 870, 871, 885, 887], "except": [0, 10, 11, 14, 15, 16, 17, 22, 23, 24, 34, 37, 38, 39, 40, 57, 58, 61, 68, 69, 75, 77, 82, 85, 91, 92, 96, 100, 105, 165, 346, 347, 352, 371, 383, 389, 393, 398, 479, 503, 507, 520, 539, 540, 555, 573, 590, 606, 612, 641, 645, 648, 650, 654, 655, 659, 694, 714, 716, 724, 753, 754, 755, 761, 781, 782, 785, 788, 792, 835, 836, 837, 838, 839, 843, 844, 845, 847, 849, 851, 855, 856, 860, 861, 862, 866, 870], "py": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 34, 37, 38, 39, 40, 56, 58, 61, 104, 387, 458, 773, 815, 820, 827, 833, 834, 835, 838, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 856, 857, 859, 860, 864, 866, 868, 869], "383": [0, 10, 11, 14, 15, 16, 17, 34], "userwarn": [0, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 23, 24, 34, 37, 38, 39, 40, 61], "current": [0, 5, 10, 11, 14, 15, 16, 17, 22, 23, 24, 33, 34, 37, 38, 39, 40, 42, 43, 56, 57, 63, 68, 69, 85, 91, 114, 133, 177, 178, 181, 198, 199, 200, 201, 202, 203, 209, 210, 211, 212, 217, 219, 387, 389, 439, 440, 495, 503, 561, 562, 565, 568, 570, 574, 585, 586, 606, 639, 641, 642, 645, 648, 652, 683, 732, 742, 743, 787, 791, 807, 808, 815, 816, 821, 824, 825, 827, 829, 833, 834, 835, 838, 840, 842, 843, 844, 845, 848, 849, 850, 852, 855, 856, 857, 858, 859, 862, 864, 869, 870, 876, 878, 885, 891, 892], "39": [0, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 37, 38, 39, 40, 54, 56, 57, 58, 59, 61, 62, 67, 68, 73, 77, 84, 90, 91, 93, 96, 100, 123, 237, 272, 274, 276, 306, 307, 310, 378, 386, 398, 406, 408, 425, 428, 534, 626, 637, 643, 646, 648, 658, 686, 693, 754, 773], "doe": [0, 5, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 33, 34, 37, 38, 39, 40, 42, 55, 57, 67, 68, 69, 75, 85, 90, 91, 98, 108, 158, 285, 287, 295, 339, 380, 387, 388, 398, 399, 440, 467, 468, 539, 540, 544, 573, 640, 643, 645, 648, 650, 683, 722, 785, 821, 831, 833, 835, 837, 840, 843, 844, 846, 847, 849, 850, 851, 852, 855, 856, 857, 859, 862, 864, 866, 867, 870, 872, 875, 878, 881, 885, 886, 892], "support": [0, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 33, 34, 37, 38, 39, 40, 42, 45, 57, 66, 68, 69, 73, 89, 91, 92, 96, 158, 177, 181, 203, 210, 225, 234, 251, 258, 279, 280, 284, 294, 313, 339, 360, 378, 380, 383, 387, 389, 422, 440, 449, 503, 549, 561, 570, 573, 574, 591, 606, 640, 641, 642, 643, 645, 647, 648, 671, 683, 684, 685, 689, 698, 705, 785, 791, 798, 810, 815, 816, 820, 825, 827, 829, 831, 833, 834, 835, 838, 839, 841, 845, 846, 847, 849, 851, 852, 854, 855, 857, 859, 860, 862, 863, 864, 866, 867, 869, 871, 872, 874, 875, 876, 879, 882, 884, 885, 888, 890, 891, 892], "inplac": [0, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 34, 37, 38, 39, 40, 63, 69, 85, 92, 108, 111, 547, 549, 570, 573, 574, 591, 592, 645, 652, 739, 740, 744, 749, 750, 797, 798, 803, 810, 837, 839, 846, 849, 851, 853, 856, 862, 866, 868], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 33, 34, 37, 38, 39, 40, 42, 43, 63, 64, 65, 66, 69, 86, 89, 92, 113, 117, 151, 161, 162, 168, 169, 170, 171, 172, 173, 187, 190, 205, 206, 207, 208, 218, 226, 230, 573, 575, 579, 586, 591, 609, 640, 641, 642, 645, 787, 798, 803, 815, 831, 833, 844, 845, 848, 849, 852, 853, 855, 856, 857, 859, 864, 866, 867, 872, 878, 879, 880, 883, 892], "would": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 34, 36, 37, 38, 39, 40, 42, 43, 46, 48, 50, 58, 64, 66, 68, 87, 89, 91, 98, 124, 128, 139, 225, 386, 389, 414, 419, 473, 474, 481, 483, 485, 486, 487, 494, 498, 510, 637, 642, 716, 717, 718, 720, 722, 723, 725, 727, 792, 802, 806, 827, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 857, 859, 860, 862, 863, 864, 866, 868, 869, 870, 871, 875, 878, 885, 891], "quietli": [0, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40], "new": [0, 1, 10, 11, 14, 15, 16, 17, 18, 19, 23, 24, 26, 27, 29, 31, 34, 37, 38, 39, 40, 42, 43, 44, 58, 60, 63, 68, 69, 70, 75, 76, 85, 87, 91, 92, 93, 96, 98, 99, 141, 144, 146, 147, 152, 153, 154, 159, 160, 197, 220, 240, 286, 288, 292, 345, 350, 362, 367, 383, 386, 389, 398, 422, 471, 479, 480, 494, 500, 507, 540, 556, 557, 558, 560, 563, 564, 566, 587, 588, 591, 593, 600, 603, 604, 610, 627, 630, 632, 633, 634, 640, 641, 642, 643, 645, 646, 647, 650, 652, 653, 674, 686, 693, 716, 720, 724, 737, 749, 750, 751, 803, 806, 809, 810, 815, 821, 828, 830, 833, 834, 835, 836, 837, 839, 840, 842, 843, 844, 846, 847, 849, 850, 853, 855, 856, 857, 858, 859, 860, 862, 863, 866, 869, 871, 872, 874, 875, 876, 878, 883, 887, 891, 892], "when": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 57, 59, 63, 64, 65, 67, 68, 73, 74, 77, 78, 81, 85, 87, 88, 90, 91, 96, 97, 100, 101, 104, 114, 152, 163, 234, 251, 256, 258, 274, 284, 302, 303, 311, 346, 347, 378, 383, 386, 387, 388, 392, 393, 398, 409, 422, 434, 441, 445, 456, 462, 463, 468, 512, 514, 520, 540, 543, 573, 589, 597, 604, 640, 641, 643, 645, 647, 648, 649, 650, 652, 654, 655, 658, 660, 672, 674, 691, 696, 707, 708, 709, 720, 743, 744, 753, 754, 755, 758, 759, 761, 762, 774, 776, 778, 780, 790, 793, 805, 806, 807, 808, 809, 815, 825, 827, 828, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 869, 870, 871, 874, 875, 878, 879, 883, 885, 888, 889, 890, 891], "lead": [0, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 73, 85, 96, 114, 258, 387, 451, 591, 643, 645, 648, 695, 698, 792, 843, 844, 846, 858, 860, 870, 875, 876], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 64, 68, 75, 87, 91, 98, 139, 150, 206, 218, 224, 226, 230, 389, 398, 473, 474, 481, 483, 485, 486, 487, 494, 510, 540, 586, 591, 615, 640, 642, 645, 647, 650, 672, 673, 716, 717, 718, 720, 722, 723, 725, 727, 821, 825, 843, 844, 845, 855, 856, 862, 864, 870, 878, 885, 887, 888, 889], "overhead": [0, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 34, 35, 37, 38, 39, 40, 42, 43, 45, 870, 878, 888], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 37, 38, 39, 40, 42, 45, 47, 49, 54, 55, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 92, 93, 95, 96, 98, 100, 102, 104, 108, 109, 110, 111, 112, 113, 127, 137, 142, 147, 149, 150, 152, 154, 156, 157, 158, 160, 163, 164, 165, 176, 179, 224, 231, 232, 233, 234, 236, 238, 242, 244, 247, 251, 257, 258, 264, 284, 286, 288, 291, 293, 294, 295, 304, 312, 324, 338, 339, 340, 341, 342, 343, 346, 347, 349, 357, 373, 378, 380, 383, 386, 387, 388, 389, 392, 394, 396, 398, 405, 406, 407, 423, 424, 425, 426, 428, 429, 430, 431, 433, 440, 445, 446, 456, 457, 458, 459, 460, 462, 463, 465, 468, 478, 480, 495, 503, 504, 507, 512, 514, 524, 526, 531, 532, 533, 534, 535, 536, 537, 543, 580, 635, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 654, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 677, 678, 679, 680, 682, 683, 684, 685, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 714, 717, 718, 720, 721, 723, 724, 729, 730, 745, 755, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 787, 790, 791, 792, 798, 806, 820, 827, 834, 835, 839, 840, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 866, 868, 869, 870, 874, 876, 878, 880, 882, 884, 891, 892], "appli": [0, 10, 11, 14, 15, 16, 17, 18, 19, 23, 24, 34, 37, 38, 39, 40, 42, 43, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 383, 384, 386, 387, 388, 389, 392, 398, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 422, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 637, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 702, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 738, 741, 744, 745, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 792, 793, 802, 806, 809, 827, 833, 834, 835, 839, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 855, 856, 859, 860, 862, 866, 867, 868, 869, 870, 878, 879, 886], "view": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 68, 75, 91, 113, 144, 155, 389, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 507, 510, 566, 640, 645, 650, 716, 717, 718, 720, 722, 723, 725, 727, 834, 835, 848, 885], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 57, 60, 61, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 109, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 163, 164, 165, 166, 191, 207, 223, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 339, 340, 342, 345, 346, 347, 348, 349, 351, 352, 353, 357, 361, 362, 367, 368, 370, 372, 373, 374, 380, 383, 384, 386, 387, 388, 389, 392, 393, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 422, 423, 424, 425, 430, 431, 432, 434, 439, 441, 443, 445, 446, 453, 455, 457, 458, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 483, 484, 485, 486, 487, 490, 494, 500, 501, 502, 503, 504, 505, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 579, 580, 587, 588, 592, 602, 603, 604, 606, 608, 610, 611, 624, 625, 628, 630, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 670, 671, 674, 677, 678, 679, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 707, 708, 709, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 744, 745, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 805, 806, 808, 809, 815, 821, 825, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 867, 869, 870, 871, 874, 878, 879, 880], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 483, 540, 563, 564, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 674, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 885, 893], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 55, 56, 58, 68, 83, 91, 106, 251, 284, 389, 483, 643, 808, 827, 828, 829, 833, 834, 835, 841, 843, 845, 848, 850, 852, 853, 854, 855, 859, 862, 867, 868, 869, 870, 871, 875, 879], "control": [0, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 50, 68, 91, 158, 307, 339, 378, 380, 386, 389, 410, 411, 412, 478, 504, 591, 640, 645, 648, 681, 842, 844, 845, 854, 855, 856, 857, 862, 866, 867, 872, 878, 885, 891], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 54, 56, 58, 60, 827, 828, 830, 831, 832, 833, 834, 836, 838, 840, 841, 843, 847, 849, 850, 854, 856, 858, 860, 862, 867, 868, 870, 871, 875, 876, 878, 879, 885, 893], "manag": [0, 10, 11, 14, 15, 16, 17, 23, 24, 33, 34, 37, 38, 39, 40, 42, 591, 615, 645, 828, 836, 840, 844, 845, 855, 858, 870, 876, 887, 889], "consid": [0, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 34, 37, 38, 39, 40, 47, 48, 68, 73, 79, 91, 96, 129, 158, 279, 280, 339, 345, 350, 362, 380, 383, 387, 398, 441, 445, 456, 533, 637, 640, 643, 648, 656, 681, 691, 763, 764, 765, 766, 792, 805, 839, 843, 844, 852, 854, 860, 862, 865, 866, 867, 874, 875, 878, 882, 886, 890, 892], "do": [0, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 54, 56, 58, 68, 69, 85, 91, 92, 251, 284, 293, 386, 388, 389, 398, 432, 468, 480, 540, 543, 573, 643, 645, 652, 732, 739, 742, 743, 744, 749, 792, 821, 827, 831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 862, 864, 866, 867, 868, 869, 870, 872, 876, 886, 891, 892], "set_inplace_mod": [0, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 615, 645], "strict": [0, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 591, 615, 645], "should": [0, 1, 6, 7, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 34, 37, 38, 39, 40, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 124, 128, 136, 150, 152, 156, 157, 165, 190, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 313, 324, 340, 346, 347, 359, 363, 364, 365, 366, 370, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 410, 411, 412, 414, 419, 430, 445, 456, 462, 469, 494, 495, 519, 520, 533, 534, 535, 550, 568, 573, 625, 627, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 667, 668, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 704, 705, 720, 736, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 873, 875, 879, 881, 882, 885, 887, 892], "rais": [0, 5, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 57, 58, 64, 68, 69, 77, 79, 82, 85, 87, 91, 92, 98, 100, 102, 105, 139, 165, 254, 289, 346, 347, 357, 383, 386, 388, 389, 393, 398, 420, 431, 468, 473, 474, 481, 483, 485, 486, 487, 494, 503, 510, 520, 539, 540, 549, 573, 591, 593, 604, 606, 612, 616, 641, 643, 645, 648, 650, 654, 655, 656, 658, 659, 688, 690, 704, 716, 717, 718, 720, 722, 723, 724, 725, 727, 753, 754, 755, 761, 766, 774, 776, 781, 782, 785, 792, 810, 835, 838, 840, 844, 845, 848, 855, 856, 860, 861, 864, 866, 871, 875], "error": [0, 5, 10, 11, 14, 15, 16, 17, 22, 23, 24, 25, 34, 37, 38, 39, 40, 48, 59, 61, 67, 68, 72, 85, 90, 91, 95, 121, 253, 301, 346, 347, 354, 355, 383, 387, 388, 389, 398, 399, 456, 462, 464, 466, 503, 540, 544, 591, 637, 643, 645, 647, 648, 658, 677, 696, 699, 774, 776, 792, 810, 824, 828, 832, 833, 834, 835, 838, 839, 840, 843, 844, 845, 846, 850, 851, 856, 859, 860, 861, 866, 870, 876, 885], "whenev": [0, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 806, 835, 840, 843, 844, 848, 855, 858, 859, 861, 867], "attempt": [0, 8, 9, 10, 11, 14, 15, 16, 17, 23, 24, 34, 37, 38, 39, 40, 56, 58, 61, 834, 861, 870], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 34, 37, 38, 39, 40, 56, 57, 58, 61, 824, 834, 835, 861, 878, 879, 880], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 20, 21, 22, 27, 33, 35, 36, 37, 39, 42, 43, 45, 46, 47, 56, 59, 60, 61, 64, 67, 68, 73, 75, 77, 78, 79, 81, 87, 90, 91, 92, 96, 98, 100, 102, 104, 108, 109, 113, 114, 133, 134, 148, 149, 158, 189, 197, 207, 234, 239, 241, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 280, 281, 284, 287, 289, 300, 301, 313, 323, 324, 339, 341, 342, 343, 345, 358, 360, 361, 362, 368, 372, 373, 378, 380, 383, 386, 387, 388, 389, 396, 398, 409, 439, 440, 441, 443, 447, 469, 479, 481, 485, 492, 495, 497, 498, 501, 509, 520, 522, 526, 534, 535, 536, 543, 548, 639, 640, 641, 642, 643, 645, 647, 648, 650, 651, 652, 655, 656, 657, 658, 674, 679, 682, 683, 684, 686, 688, 693, 695, 696, 698, 700, 702, 704, 720, 721, 724, 725, 729, 730, 731, 732, 733, 742, 743, 745, 757, 758, 759, 763, 764, 765, 768, 769, 771, 772, 787, 805, 806, 807, 808, 810, 815, 827, 829, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 845, 846, 850, 851, 852, 853, 855, 856, 859, 862, 864, 866, 867, 869, 871, 874, 875, 878, 879, 883, 885, 886, 890], "datafram": [0, 885], "allow": [0, 8, 9, 22, 25, 40, 42, 43, 54, 68, 81, 91, 104, 148, 289, 387, 398, 459, 536, 540, 583, 640, 643, 645, 657, 658, 769, 776, 790, 791, 792, 793, 807, 808, 821, 825, 827, 833, 835, 836, 839, 840, 843, 844, 848, 850, 852, 853, 854, 855, 856, 857, 859, 862, 864, 866, 870, 872, 875, 878, 879, 880, 883, 885, 889, 890], "u": [0, 4, 5, 18, 19, 56, 58, 60, 61, 68, 73, 87, 91, 96, 108, 109, 149, 387, 451, 458, 460, 648, 652, 678, 684, 685, 698, 740, 827, 828, 834, 835, 837, 842, 843, 850, 853, 855, 856, 857, 858, 859, 860, 862, 868, 870, 875], "leverag": [0, 39, 42, 43, 827, 834, 855, 879, 883, 885], "explor": [0, 8, 9, 10, 11, 22, 25, 27, 29, 33, 37, 38, 39, 42, 43, 48, 49, 50, 833, 834, 835, 844, 849, 862, 865, 869, 885, 888], "expect": [0, 4, 5, 12, 13, 18, 19, 23, 24, 35, 39, 42, 43, 45, 58, 59, 61, 68, 73, 74, 91, 97, 190, 258, 302, 386, 388, 409, 431, 468, 547, 641, 643, 645, 647, 649, 672, 693, 707, 805, 806, 827, 834, 835, 838, 844, 845, 848, 850, 853, 855, 857, 859, 862, 870, 871, 876, 878, 879, 880], "contain": [0, 14, 15, 33, 42, 43, 57, 62, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 174, 176, 177, 178, 179, 182, 183, 184, 186, 188, 191, 208, 210, 211, 212, 217, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 380, 383, 385, 386, 387, 388, 389, 392, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 592, 595, 597, 602, 603, 604, 605, 606, 608, 610, 611, 618, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 739, 740, 741, 744, 745, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 797, 798, 806, 807, 808, 810, 811, 815, 820, 821, 825, 827, 829, 831, 833, 834, 837, 838, 839, 840, 841, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 864, 865, 868, 870, 871, 872, 874, 878, 885, 886, 891], "variou": [0, 8, 9, 25, 36, 46, 48, 54, 827, 830, 833, 834, 835, 838, 843, 844, 847, 848, 851, 853, 854, 856, 857, 858, 859, 871, 881, 883, 884, 885, 888, 891], "among": [0, 8, 9, 85, 842, 843, 859, 862, 876, 885], "pattern": [0, 68, 69, 91, 92, 387, 451, 556, 557, 558, 645, 844, 847, 858, 876], "signal": [0, 68, 91, 330, 380, 386, 400, 401, 402, 403, 408, 409, 418, 434, 806, 884, 885], "credit_card_data": 0, "read_csv": [0, 25, 58], "creditcard": 0, "csv": [0, 25, 58], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 56, 57, 59, 65, 66, 73, 85, 89, 96, 113, 174, 175, 176, 179, 207, 208, 209, 212, 218, 223, 226, 230, 389, 500, 547, 565, 586, 605, 641, 642, 645, 648, 652, 705, 734, 790, 805, 806, 820, 828, 830, 832, 833, 834, 836, 837, 838, 843, 844, 845, 849, 852, 853, 854, 855, 856, 857, 858, 859, 864, 865, 866, 867, 868, 872, 876, 879, 880, 885, 891], "sens": [0, 838, 844, 846, 856, 858, 866], "re": [0, 22, 25, 31, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 49, 56, 58, 59, 61, 68, 69, 78, 91, 101, 111, 224, 330, 380, 387, 389, 461, 496, 497, 556, 642, 645, 648, 650, 655, 700, 721, 760, 762, 828, 829, 833, 834, 835, 836, 837, 838, 841, 844, 849, 854, 855, 856, 857, 858, 860, 862, 866, 869, 870, 873, 874, 875, 885], "work": [0, 1, 8, 9, 22, 40, 42, 43, 54, 55, 57, 61, 63, 68, 91, 108, 398, 543, 648, 652, 699, 739, 740, 744, 749, 750, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 855, 856, 857, 859, 860, 863, 864, 866, 868, 869, 871, 876, 878, 879, 880, 883, 885, 887, 889, 892], "help": [0, 1, 31, 58, 60, 65, 546, 591, 645, 658, 779, 805, 827, 828, 829, 833, 834, 836, 839, 840, 841, 842, 843, 844, 846, 850, 852, 853, 855, 856, 859, 860, 866, 867, 868, 871, 872, 881, 885, 887, 891], "few": [0, 8, 9, 10, 11, 827, 832, 833, 835, 842, 844, 845, 851, 852, 854, 855, 857, 859, 862, 864, 865, 866, 867, 868, 876, 885, 887], "entri": [0, 68, 75, 85, 91, 98, 102, 109, 148, 387, 389, 393, 457, 484, 486, 487, 519, 640, 650, 652, 722, 745, 763, 834, 843, 859, 885], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 61, 64, 65, 68, 69, 73, 75, 77, 79, 87, 88, 91, 92, 96, 98, 100, 102, 108, 109, 123, 126, 138, 139, 149, 151, 166, 205, 222, 223, 224, 313, 330, 378, 380, 386, 387, 388, 389, 392, 393, 396, 398, 409, 422, 446, 453, 455, 460, 468, 480, 507, 512, 520, 521, 526, 533, 580, 591, 625, 628, 637, 640, 641, 642, 645, 646, 647, 648, 650, 654, 674, 682, 688, 698, 702, 720, 724, 753, 754, 755, 763, 787, 790, 791, 792, 793, 798, 821, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 888, 889, 891, 892], "give": [0, 12, 13, 34, 44, 54, 68, 72, 91, 95, 190, 376, 385, 386, 429, 433, 641, 647, 650, 660, 661, 662, 663, 665, 667, 669, 720, 805, 827, 834, 835, 837, 840, 843, 844, 846, 847, 849, 850, 851, 859, 876, 885, 889], "insight": 0, "structur": [0, 25, 43, 85, 88, 114, 176, 179, 553, 645, 649, 652, 710, 736, 745, 833, 835, 836, 839, 842, 852, 857, 858, 859, 860, 867, 868, 884, 885], "type": [0, 6, 7, 18, 19, 22, 27, 29, 33, 39, 42, 43, 48, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 790, 791, 792, 793, 797, 798, 802, 805, 806, 807, 808, 812, 815, 818, 820, 821, 822, 825, 833, 834, 835, 837, 838, 839, 842, 845, 846, 847, 848, 851, 853, 855, 857, 859, 860, 862, 864, 866, 867, 878, 879, 880, 885, 886, 889], "present": [0, 57, 68, 81, 85, 91, 104, 349, 383, 392, 512, 513, 514, 658, 776, 833, 834, 835, 842, 844, 845, 851, 855, 864, 874, 882, 883, 892], "initi": [0, 6, 7, 8, 9, 14, 15, 42, 43, 59, 68, 72, 81, 85, 91, 95, 104, 114, 387, 398, 445, 456, 462, 541, 542, 647, 658, 672, 673, 776, 803, 806, 807, 808, 810, 811, 825, 827, 830, 835, 836, 840, 844, 845, 849, 857, 859, 864, 875, 878, 879, 880, 885, 891, 892], "qualiti": [0, 830, 835], "below": [0, 2, 20, 21, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 47, 48, 49, 54, 57, 58, 59, 64, 68, 73, 91, 96, 104, 156, 157, 158, 258, 268, 291, 339, 340, 349, 380, 383, 389, 503, 640, 643, 648, 682, 702, 780, 828, 831, 833, 834, 837, 838, 842, 843, 844, 845, 846, 848, 849, 852, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 878, 879, 880, 881, 883, 888, 890], "head": [0, 8, 9, 10, 11, 22, 59, 60, 647, 674, 806, 827, 832, 834, 843, 856, 882], "method": [0, 25, 33, 42, 58, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 163, 164, 165, 166, 176, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 386, 387, 388, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 640, 641, 643, 645, 646, 648, 649, 652, 655, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 702, 703, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 743, 744, 745, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 787, 798, 804, 805, 806, 807, 808, 833, 835, 838, 839, 843, 844, 845, 846, 847, 851, 859, 860, 864, 865, 868, 869, 870, 878, 879, 880, 886, 892], "five": [0, 867], "row": [0, 56, 68, 91, 109, 143, 158, 339, 380, 387, 389, 396, 398, 446, 458, 487, 493, 511, 526, 532, 533, 640, 648, 654, 655, 689, 697, 698, 703, 752, 761, 805], "v1": [0, 868], "v2": [0, 868], "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 885], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 25, 74, 97, 226, 642, 649, 707, 708, 709, 821, 834, 843, 845, 857], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 73, 648, 686], "62": [0, 22, 25, 54, 56, 62, 84, 90, 91, 100, 124, 269, 297, 643, 653, 654, 751, 753, 755], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 22, 35, 54, 61, 67, 93, 100, 232, 274, 386, 408, 418, 630, 643, 646, 648, 689, 690, 754, 859, 867], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 290, 643], "66": [0, 5, 22, 37, 38, 39, 40, 54, 56, 58, 81, 91, 92, 93, 386, 418, 556, 557, 630, 645, 646, 648, 658, 693, 773], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 34, 87, 88, 91, 147, 179, 467, 559, 640, 645, 821, 859], "50": [0, 23, 24, 25, 42, 43, 54, 58, 68, 81, 90, 91, 92, 250, 290, 368, 383, 386, 387, 389, 415, 439, 447, 500, 558, 564, 571, 572, 588, 603, 643, 645, 648, 652, 655, 658, 687, 693, 704, 733, 735, 761, 773, 790, 793, 854, 866, 878, 879], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 25, 37, 38, 39, 40, 54, 56, 57, 61, 62, 67, 68, 90, 91, 92, 95, 100, 124, 129, 149, 245, 276, 284, 386, 389, 398, 407, 408, 478, 534, 551, 637, 640, 643, 645, 754, 755, 867], "column": [0, 25, 58, 68, 73, 91, 96, 108, 109, 143, 158, 339, 380, 387, 389, 396, 398, 440, 446, 458, 479, 484, 486, 487, 491, 493, 526, 532, 533, 640, 648, 683, 684, 689, 695, 697, 698, 703, 790, 805], "It": [0, 1, 4, 5, 10, 11, 23, 24, 25, 34, 37, 38, 39, 40, 42, 43, 44, 45, 54, 55, 56, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 340, 346, 347, 348, 349, 354, 355, 359, 361, 363, 364, 365, 366, 370, 378, 380, 383, 386, 387, 388, 389, 392, 393, 398, 399, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 428, 430, 435, 437, 438, 446, 447, 452, 453, 454, 455, 463, 464, 465, 466, 467, 469, 470, 480, 483, 488, 496, 497, 498, 499, 501, 503, 507, 508, 512, 515, 516, 518, 519, 520, 522, 523, 533, 534, 535, 536, 544, 551, 552, 556, 557, 558, 563, 564, 573, 587, 588, 589, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 697, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 731, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 766, 767, 770, 771, 772, 775, 777, 778, 780, 781, 782, 805, 806, 827, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 868, 877, 880, 883, 885, 886, 888, 889, 890, 891, 892], "just": [0, 8, 9, 18, 19, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 56, 58, 68, 73, 81, 96, 108, 111, 158, 339, 380, 387, 455, 640, 648, 658, 691, 773, 798, 806, 827, 831, 834, 835, 836, 838, 840, 843, 844, 845, 846, 847, 849, 852, 853, 855, 856, 857, 859, 864, 866, 867, 870, 875, 876, 879, 885, 886, 891], "verifi": [0, 8, 9, 14, 15, 16, 17, 25, 39, 336, 337, 380, 833, 844, 845, 856, 859, 860], "consist": [0, 8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 42, 43, 81, 85, 251, 258, 284, 386, 387, 430, 440, 643, 648, 658, 683, 684, 773, 807, 808, 830, 838, 839, 843, 844, 850, 855, 864, 874, 886], "complet": [0, 73, 85, 96, 648, 695, 791, 833, 834, 835, 836, 838, 839, 842, 843, 846, 848, 852, 856, 857, 859, 862, 866, 867, 875, 883], "By": [0, 34, 54, 61, 68, 74, 75, 81, 82, 91, 97, 98, 104, 105, 298, 344, 346, 347, 360, 367, 380, 383, 386, 388, 389, 396, 398, 409, 467, 468, 503, 507, 526, 533, 536, 591, 643, 645, 648, 649, 650, 658, 659, 679, 704, 707, 719, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 834, 840, 844, 846, 848, 852, 854, 855, 856, 864, 868, 869, 878], "tail": [0, 882], "last": [0, 5, 35, 40, 42, 45, 64, 68, 72, 73, 74, 75, 78, 80, 81, 82, 85, 87, 91, 95, 96, 97, 98, 103, 104, 105, 109, 113, 148, 149, 152, 207, 324, 352, 380, 383, 386, 387, 388, 389, 396, 398, 415, 420, 430, 431, 432, 443, 467, 485, 495, 497, 503, 507, 526, 534, 535, 640, 642, 647, 648, 649, 650, 655, 657, 658, 659, 673, 674, 679, 682, 693, 702, 704, 708, 709, 714, 717, 720, 721, 722, 724, 758, 759, 767, 769, 770, 771, 772, 781, 782, 806, 815, 835, 838, 840, 841, 844, 846, 855, 857, 859, 862, 864, 870, 876, 879, 885], "well": [0, 22, 25, 42, 43, 56, 57, 58, 92, 388, 467, 569, 645, 648, 697, 792, 829, 833, 835, 841, 843, 844, 848, 855, 856, 857, 859, 868, 869, 879, 884, 885, 886, 890], "readi": [0, 27, 29, 34, 35, 36, 44, 45, 46, 47, 48, 49, 56, 58, 833, 834], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 25, 54, 58, 92, 604, 648, 658, 693, 773], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 22, 25, 35, 54, 56, 67, 68, 73, 81, 90, 91, 92, 95, 96, 100, 113, 246, 254, 269, 271, 284, 294, 295, 298, 360, 363, 383, 386, 398, 405, 407, 408, 418, 423, 424, 425, 429, 433, 534, 556, 557, 643, 645, 648, 652, 658, 661, 682, 689, 693, 733, 744, 753, 754, 755, 771, 773, 787, 848, 867], "79": [0, 54, 56, 68, 69, 91, 92, 95, 100, 113, 251, 386, 408, 418, 429, 551, 552, 643, 645, 755], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 25, 54, 67, 68, 69, 73, 90, 91, 92, 95, 100, 113, 249, 254, 294, 295, 297, 304, 315, 319, 378, 398, 429, 534, 556, 557, 603, 629, 631, 643, 645, 646, 648, 686, 755], "88": [0, 5, 25, 54, 93, 100, 123, 398, 534, 630, 637, 646, 648, 654, 658, 693, 755, 773], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 56, 848], "understand": [0, 31, 32, 33, 37, 54, 60, 831, 832, 833, 834, 835, 837, 838, 841, 846, 847, 851, 857, 858, 863, 876, 881, 891], "composit": [0, 33, 42, 177, 178, 210, 211, 303, 387, 447, 561, 562, 641, 642, 643, 645, 791, 793, 833, 837, 839, 840, 842, 844, 845, 853, 855, 856, 857, 859, 862, 864, 868, 869, 870, 872, 878, 886], "crucial": [0, 845, 854], "proce": [0, 25, 833, 834], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 27, 29, 31, 32, 33, 34, 35, 44, 45, 48, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 166, 167, 182, 186, 190, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 339, 340, 346, 347, 349, 352, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 431, 432, 441, 446, 463, 484, 495, 503, 507, 512, 513, 514, 533, 536, 539, 540, 541, 545, 555, 556, 557, 558, 559, 563, 567, 569, 571, 575, 577, 578, 596, 602, 604, 611, 612, 619, 625, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 738, 739, 741, 742, 749, 751, 755, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 888, 891, 892], "info": [0, 5, 22, 56, 824, 825, 827, 841, 847, 850], "concis": 0, "summari": [0, 85, 180, 553, 641, 645, 834, 835, 859], "includ": [0, 1, 8, 9, 22, 25, 31, 35, 45, 50, 64, 67, 68, 69, 73, 78, 81, 82, 85, 87, 90, 91, 92, 96, 101, 104, 105, 137, 138, 139, 148, 149, 151, 158, 231, 255, 259, 260, 261, 264, 266, 269, 277, 285, 298, 303, 325, 328, 329, 330, 333, 339, 342, 344, 346, 347, 351, 352, 353, 356, 357, 358, 359, 361, 363, 364, 366, 367, 368, 369, 372, 373, 380, 383, 386, 389, 398, 405, 406, 407, 437, 440, 442, 486, 487, 489, 492, 494, 496, 499, 521, 523, 524, 532, 536, 538, 539, 541, 542, 543, 569, 624, 640, 643, 645, 647, 648, 652, 654, 655, 658, 659, 672, 683, 703, 705, 732, 755, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 793, 805, 806, 809, 823, 825, 827, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 862, 864, 875, 878, 879, 882, 883, 885, 887, 890, 891, 892], "number": [0, 56, 58, 59, 60, 61, 64, 65, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 81, 82, 85, 87, 88, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 104, 105, 108, 109, 111, 113, 114, 117, 137, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 158, 164, 169, 170, 171, 172, 173, 175, 176, 179, 182, 183, 184, 186, 188, 191, 215, 216, 217, 231, 232, 233, 234, 235, 237, 239, 240, 247, 249, 251, 252, 254, 256, 257, 258, 264, 265, 266, 268, 272, 274, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 295, 297, 298, 302, 304, 330, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 347, 349, 350, 351, 352, 362, 367, 371, 380, 383, 386, 387, 388, 389, 392, 398, 420, 431, 434, 437, 440, 444, 445, 446, 456, 460, 462, 463, 473, 474, 475, 495, 496, 497, 498, 499, 501, 503, 505, 507, 509, 512, 513, 514, 531, 533, 534, 535, 536, 542, 560, 567, 585, 602, 603, 604, 611, 624, 625, 638, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 654, 655, 656, 658, 659, 660, 667, 668, 670, 672, 674, 679, 683, 684, 685, 691, 696, 698, 702, 703, 704, 707, 713, 715, 716, 718, 719, 721, 722, 724, 726, 728, 729, 730, 731, 752, 756, 761, 763, 764, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 798, 805, 806, 809, 821, 825, 827, 834, 835, 842, 843, 844, 845, 846, 853, 854, 855, 859, 860, 861, 862, 864, 867, 873, 874, 878], "presenc": [0, 785, 842, 855], "null": [0, 834, 849], "each": [0, 18, 19, 22, 23, 24, 25, 35, 36, 37, 42, 43, 45, 46, 47, 49, 56, 62, 64, 65, 67, 68, 69, 70, 72, 73, 75, 78, 79, 81, 85, 88, 90, 91, 92, 93, 95, 96, 98, 101, 102, 104, 108, 109, 111, 113, 114, 122, 123, 125, 126, 127, 129, 133, 150, 164, 176, 179, 224, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 308, 309, 314, 316, 317, 318, 320, 321, 322, 327, 338, 341, 342, 343, 349, 357, 361, 365, 370, 373, 378, 380, 383, 386, 387, 389, 392, 393, 396, 398, 405, 406, 407, 410, 411, 412, 415, 423, 424, 425, 426, 429, 431, 432, 433, 440, 441, 446, 455, 456, 460, 462, 473, 474, 475, 479, 480, 481, 486, 487, 489, 490, 492, 494, 495, 498, 500, 509, 510, 517, 519, 526, 531, 532, 533, 534, 535, 536, 545, 548, 556, 563, 564, 580, 605, 625, 627, 628, 630, 632, 633, 634, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 652, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 678, 679, 680, 683, 684, 685, 688, 690, 691, 692, 694, 696, 697, 698, 703, 715, 719, 721, 722, 724, 726, 728, 738, 745, 752, 761, 763, 764, 766, 772, 773, 780, 787, 790, 792, 798, 806, 809, 810, 811, 821, 825, 830, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 869, 870, 874, 875, 876, 878, 879, 881, 882, 886, 888, 891], "invalu": 0, "plan": [0, 871], "right": [0, 57, 68, 73, 85, 91, 96, 114, 131, 132, 243, 245, 298, 361, 383, 386, 387, 389, 421, 451, 457, 458, 460, 486, 556, 639, 643, 645, 648, 657, 698, 703, 769, 790, 828, 833, 834, 835, 837, 838, 846, 849, 862, 867, 878], "format": [0, 1, 39, 40, 42, 43, 54, 56, 57, 58, 66, 69, 72, 81, 84, 85, 86, 89, 95, 111, 129, 174, 208, 386, 387, 397, 428, 461, 529, 556, 637, 641, 642, 645, 647, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 672, 773, 783, 784, 785, 802, 827, 834, 835, 837, 843, 844, 845, 846, 847, 848, 856, 858, 867, 879, 881, 883, 885, 886], "lt": [0, 4, 5, 8, 9, 10, 11, 20, 21, 22, 27, 29, 33, 37, 38, 39, 40, 54, 56, 58, 114], "core": [0, 5, 8, 9, 37, 38, 40, 56, 57, 58, 60, 61, 68, 91, 108, 111, 215, 387, 445, 456, 461, 462, 642, 834, 845, 849, 859, 869, 874, 883, 884, 885, 886, 890, 892], "frame": [0, 58, 68, 91, 330, 380, 386, 434, 818, 875, 885], "gt": [0, 4, 5, 8, 9, 10, 11, 20, 21, 22, 27, 29, 33, 37, 38, 39, 40, 54, 56, 58, 61, 114, 857, 864], "rangeindex": 0, "284807": 0, "total": [0, 5, 56, 58, 68, 81, 85, 91, 104, 114, 145, 226, 341, 342, 343, 351, 380, 383, 388, 463, 640, 642, 655, 658, 761, 778, 780, 821, 828, 834, 835, 844, 845, 846, 859, 862, 867, 868, 870, 876], "non": [0, 10, 11, 35, 45, 65, 67, 68, 73, 77, 78, 81, 82, 88, 90, 91, 96, 100, 101, 104, 105, 145, 163, 181, 190, 259, 279, 280, 285, 346, 347, 351, 358, 371, 383, 386, 387, 389, 398, 430, 441, 445, 451, 474, 475, 536, 539, 640, 641, 643, 648, 652, 654, 655, 658, 659, 679, 680, 689, 691, 698, 700, 704, 705, 745, 754, 758, 759, 760, 761, 774, 775, 776, 777, 778, 780, 781, 782, 790, 805, 807, 808, 810, 839, 842, 846, 864, 878, 879, 880, 885], "count": [0, 5, 60, 68, 75, 79, 82, 87, 91, 98, 102, 105, 145, 217, 351, 383, 389, 398, 503, 507, 509, 531, 536, 640, 642, 648, 650, 656, 659, 679, 704, 714, 717, 763, 764, 781, 782, 841, 842, 846, 867], "dtype": [0, 4, 5, 12, 13, 20, 21, 25, 29, 35, 37, 38, 39, 40, 54, 57, 64, 65, 68, 69, 72, 73, 77, 78, 81, 85, 87, 88, 90, 91, 92, 95, 96, 100, 101, 104, 113, 116, 117, 118, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 219, 246, 250, 282, 283, 285, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 344, 349, 351, 367, 380, 383, 386, 387, 388, 389, 393, 398, 408, 418, 430, 431, 434, 457, 463, 468, 479, 503, 519, 520, 521, 522, 523, 533, 534, 535, 536, 539, 542, 543, 560, 561, 562, 564, 573, 582, 610, 640, 641, 642, 643, 645, 647, 648, 651, 654, 655, 657, 658, 659, 663, 670, 689, 705, 730, 731, 753, 754, 755, 758, 759, 760, 769, 770, 771, 772, 775, 777, 779, 781, 782, 785, 787, 790, 792, 793, 805, 806, 807, 808, 809, 811, 827, 831, 838, 840, 844, 845, 846, 848, 849, 852, 853, 855, 856, 857, 859, 860, 864, 866, 879], "float64": [0, 37, 38, 65, 68, 77, 81, 87, 88, 90, 91, 92, 100, 104, 137, 145, 146, 163, 166, 170, 171, 176, 177, 180, 181, 186, 187, 191, 193, 194, 200, 203, 285, 357, 383, 388, 398, 463, 468, 533, 582, 640, 641, 645, 648, 654, 684, 685, 689, 705, 754, 755, 772, 787, 790, 791, 844, 857, 859], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 25, 33, 35, 37, 38, 39, 40, 54, 56, 57, 58, 65, 67, 68, 69, 72, 73, 77, 81, 88, 90, 91, 92, 95, 96, 98, 99, 100, 104, 113, 114, 179, 234, 236, 241, 245, 246, 249, 251, 252, 253, 271, 284, 287, 294, 297, 304, 305, 328, 329, 360, 363, 364, 380, 383, 386, 389, 398, 405, 406, 407, 408, 410, 414, 415, 423, 424, 428, 429, 430, 431, 433, 478, 479, 481, 485, 490, 507, 510, 523, 534, 540, 541, 542, 552, 556, 557, 588, 594, 603, 617, 643, 645, 647, 648, 650, 652, 653, 654, 655, 656, 658, 661, 665, 670, 671, 682, 684, 686, 689, 693, 697, 699, 700, 702, 704, 717, 721, 723, 725, 727, 744, 751, 753, 754, 755, 762, 763, 771, 772, 773, 777, 779, 790, 834, 840, 842, 844, 846, 854], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 33, 37, 38, 39, 40, 54, 56, 58, 62, 67, 68, 72, 73, 77, 81, 90, 91, 92, 93, 95, 98, 100, 104, 113, 129, 179, 209, 234, 249, 258, 269, 289, 298, 360, 367, 374, 383, 386, 389, 407, 408, 418, 429, 433, 478, 479, 481, 485, 490, 510, 523, 534, 535, 551, 556, 557, 572, 594, 603, 626, 637, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 655, 656, 658, 661, 662, 670, 671, 682, 686, 693, 697, 699, 702, 727, 731, 744, 753, 754, 755, 762, 763, 771, 772, 773, 842, 844, 846, 856], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 38, 54, 56, 57, 58, 61, 67, 68, 69, 73, 77, 81, 87, 88, 90, 91, 92, 95, 96, 98, 100, 104, 114, 147, 176, 234, 241, 245, 251, 253, 262, 269, 270, 275, 276, 284, 293, 294, 295, 360, 374, 383, 384, 386, 387, 389, 398, 405, 406, 423, 425, 428, 429, 433, 439, 481, 485, 490, 510, 534, 552, 556, 557, 560, 571, 572, 597, 603, 620, 640, 641, 643, 645, 647, 648, 650, 652, 654, 655, 656, 658, 661, 671, 682, 685, 686, 687, 693, 699, 700, 721, 727, 732, 753, 754, 761, 763, 772, 773, 787, 830, 834, 843, 846, 854, 888], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 37, 38, 39, 40, 54, 56, 58, 61, 62, 68, 73, 84, 90, 91, 92, 93, 95, 96, 100, 114, 123, 124, 149, 234, 251, 276, 284, 315, 323, 374, 380, 386, 389, 405, 406, 414, 415, 418, 419, 423, 424, 429, 433, 485, 557, 572, 626, 628, 637, 640, 643, 645, 646, 647, 648, 652, 654, 661, 670, 671, 682, 686, 740, 753, 754, 755, 757, 842], "v17": 0, "18": [0, 4, 5, 16, 17, 22, 23, 24, 25, 37, 38, 39, 40, 54, 56, 58, 67, 68, 77, 90, 91, 92, 95, 96, 100, 104, 124, 246, 251, 293, 297, 306, 307, 360, 378, 383, 386, 389, 408, 414, 418, 419, 423, 429, 433, 485, 602, 637, 643, 648, 654, 658, 665, 682, 688, 693, 700, 753, 754, 755, 772, 773, 777, 842, 844, 846], "v18": 0, "19": [0, 4, 5, 22, 23, 24, 37, 38, 39, 40, 54, 56, 57, 58, 61, 67, 68, 77, 90, 91, 95, 96, 100, 237, 246, 274, 284, 301, 386, 387, 389, 398, 407, 408, 419, 423, 429, 433, 439, 444, 485, 534, 643, 648, 652, 654, 657, 682, 689, 702, 743, 753, 754, 755, 770, 846], "v19": 0, "20": [0, 4, 14, 15, 16, 17, 22, 25, 29, 54, 56, 57, 58, 61, 67, 68, 69, 72, 77, 81, 90, 91, 92, 95, 96, 100, 104, 246, 250, 254, 290, 294, 298, 315, 360, 362, 364, 383, 386, 389, 405, 407, 423, 429, 433, 478, 500, 556, 563, 564, 566, 588, 592, 603, 643, 645, 648, 654, 655, 658, 661, 662, 673, 682, 687, 689, 693, 700, 753, 761, 762, 771, 772, 773, 777, 779, 827, 843, 862, 866], "v20": 0, "22": [0, 5, 22, 25, 37, 38, 39, 40, 54, 56, 58, 61, 62, 67, 68, 69, 77, 81, 84, 91, 92, 95, 100, 124, 129, 246, 254, 315, 319, 378, 386, 387, 388, 389, 394, 398, 405, 406, 408, 423, 424, 425, 429, 433, 439, 463, 478, 524, 534, 557, 588, 624, 637, 643, 647, 648, 652, 655, 658, 670, 671, 682, 687, 693, 697, 740, 750, 753, 754, 755, 762, 772, 773, 834, 842, 848], "26": [0, 5, 22, 37, 38, 39, 40, 54, 56, 58, 61, 67, 68, 76, 77, 91, 92, 93, 100, 246, 251, 297, 386, 387, 408, 444, 454, 571, 626, 643, 645, 646, 647, 648, 652, 653, 658, 669, 682, 693, 700, 733, 751, 753, 754, 773], "27": [0, 22, 25, 54, 56, 61, 67, 68, 73, 77, 90, 91, 92, 95, 96, 100, 104, 245, 246, 249, 289, 297, 298, 357, 383, 386, 408, 418, 572, 602, 643, 645, 648, 652, 658, 688, 693, 703, 733, 740, 754, 773, 777, 790, 893], "28": [0, 22, 25, 40, 42, 43, 54, 56, 58, 61, 67, 68, 72, 76, 90, 91, 92, 95, 96, 100, 104, 250, 253, 274, 290, 386, 387, 408, 418, 439, 540, 571, 626, 643, 645, 646, 647, 648, 649, 653, 658, 662, 664, 666, 668, 669, 671, 693, 710, 751, 753, 754, 755, 773, 777], "30": [0, 22, 25, 37, 38, 39, 40, 54, 56, 67, 68, 69, 91, 92, 100, 104, 114, 284, 315, 360, 368, 383, 386, 389, 408, 418, 429, 478, 500, 524, 556, 558, 563, 564, 571, 572, 588, 597, 603, 643, 645, 648, 652, 658, 687, 693, 741, 753, 754, 772, 773, 777, 792, 805, 821, 830, 843], "int64": [0, 12, 13, 68, 77, 78, 80, 81, 88, 100, 101, 103, 104, 153, 166, 172, 175, 177, 179, 183, 184, 188, 195, 327, 380, 396, 398, 526, 534, 535, 640, 641, 655, 657, 658, 753, 758, 759, 760, 769, 771, 772, 777, 779, 790, 791, 844, 856, 859, 864], "proceed": [0, 56], "within": [0, 10, 11, 25, 27, 29, 33, 42, 43, 63, 68, 91, 137, 345, 362, 383, 386, 392, 423, 424, 425, 430, 433, 473, 474, 475, 517, 640, 654, 755, 821, 830, 833, 835, 836, 839, 843, 844, 856, 857, 858, 859, 868, 870, 879, 881, 882, 886], "significantli": [0, 14, 15, 18, 19, 23, 24, 42, 68, 73, 91, 96, 387, 460, 648, 698, 843, 874, 883], "impact": [0, 830, 843, 859, 868, 887], "isnul": 0, "sum": [0, 8, 9, 10, 11, 56, 58, 67, 68, 69, 72, 73, 74, 81, 85, 90, 91, 92, 95, 96, 97, 104, 108, 113, 114, 224, 234, 276, 300, 343, 367, 380, 383, 387, 388, 389, 392, 398, 429, 439, 463, 464, 465, 466, 467, 468, 469, 470, 500, 517, 539, 540, 557, 587, 588, 642, 643, 645, 647, 648, 649, 658, 670, 677, 689, 698, 702, 705, 707, 772, 773, 805, 807, 820, 827, 842, 844, 852, 854, 855, 856, 864, 878, 879, 880, 882], "quickli": [0, 8, 9, 834, 835, 843, 867, 868, 874, 876, 885, 892], "appropri": [0, 8, 9, 18, 19, 33, 37, 38, 40, 42, 43, 69, 78, 83, 101, 106, 234, 251, 258, 284, 345, 362, 383, 643, 655, 758, 833, 834, 835, 848, 853, 859], "either": [0, 25, 37, 38, 47, 48, 49, 50, 54, 60, 67, 68, 69, 72, 81, 85, 90, 91, 92, 95, 96, 123, 126, 129, 134, 144, 145, 155, 231, 232, 233, 234, 239, 249, 251, 252, 254, 256, 258, 265, 266, 272, 273, 274, 275, 276, 284, 293, 295, 296, 298, 301, 302, 348, 370, 383, 386, 392, 398, 408, 418, 428, 429, 433, 517, 534, 535, 555, 575, 583, 584, 592, 612, 637, 639, 640, 643, 645, 647, 648, 651, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 688, 693, 696, 700, 729, 730, 731, 771, 772, 777, 779, 792, 806, 807, 808, 815, 829, 833, 834, 835, 840, 841, 842, 844, 845, 846, 847, 848, 850, 852, 855, 856, 857, 858, 859, 862, 864, 867, 870, 871, 879, 885], "imput": [0, 68, 91, 387, 445, 456, 462], "remov": [0, 8, 9, 14, 15, 22, 25, 31, 32, 35, 40, 42, 43, 45, 73, 85, 96, 648, 650, 651, 652, 682, 688, 702, 723, 729, 730, 746, 821, 824, 827, 833, 840, 841, 843, 844, 847, 852, 858, 859, 862, 869, 878, 879, 885], "maintain": [0, 80, 103, 657, 767, 770, 827, 834, 835, 838, 850, 855, 857, 858, 859, 874, 884], "integr": [0, 4, 5, 6, 7, 8, 9, 27, 29, 36, 43, 46, 65, 67, 68, 88, 90, 91, 163, 303, 366, 383, 398, 536, 641, 643, 827, 832, 834, 836, 837, 853, 879, 883, 885, 887, 888, 889], "check": [0, 4, 5, 6, 7, 18, 19, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 59, 61, 63, 65, 69, 73, 85, 88, 92, 96, 129, 167, 168, 177, 178, 181, 183, 184, 185, 188, 203, 210, 211, 218, 230, 549, 559, 561, 562, 569, 575, 576, 577, 578, 579, 595, 606, 618, 624, 637, 641, 642, 645, 648, 652, 684, 685, 691, 732, 742, 743, 744, 785, 792, 820, 821, 827, 828, 829, 832, 833, 834, 835, 836, 838, 842, 843, 845, 846, 848, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 871, 878], "A": [0, 8, 9, 42, 43, 57, 64, 65, 68, 69, 75, 77, 81, 82, 85, 88, 90, 91, 92, 95, 96, 98, 100, 102, 105, 108, 109, 114, 133, 134, 136, 143, 151, 158, 164, 205, 224, 286, 288, 292, 324, 335, 339, 341, 342, 343, 345, 359, 362, 366, 367, 380, 383, 386, 387, 388, 389, 392, 393, 398, 401, 415, 429, 432, 434, 441, 449, 454, 457, 465, 469, 480, 483, 501, 505, 506, 512, 513, 514, 515, 519, 520, 521, 522, 523, 531, 540, 543, 548, 550, 559, 568, 571, 572, 603, 604, 605, 608, 636, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 654, 658, 659, 670, 674, 682, 684, 687, 692, 693, 697, 698, 710, 713, 716, 718, 722, 724, 732, 735, 737, 739, 740, 741, 742, 743, 747, 748, 749, 750, 752, 753, 754, 755, 757, 763, 773, 781, 782, 785, 787, 788, 790, 791, 792, 793, 798, 805, 821, 825, 827, 832, 833, 834, 837, 842, 844, 845, 848, 851, 852, 856, 857, 859, 864, 867, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 885, 886], "critic": [0, 8, 9, 37, 38, 40, 42, 43, 649, 711, 825, 885, 891], "grasp": [0, 856], "imbal": 0, "common": [0, 22, 33, 36, 42, 46, 67, 68, 85, 90, 190, 261, 269, 350, 357, 383, 641, 643, 828, 831, 833, 834, 841, 844, 845, 846, 852, 853, 856, 860, 862, 870, 874, 882, 885, 892], "scenario": [0, 39, 844, 854], "call": [0, 4, 5, 8, 9, 18, 19, 27, 29, 33, 35, 36, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 56, 60, 68, 83, 88, 91, 106, 108, 114, 133, 183, 184, 224, 387, 398, 454, 540, 591, 597, 612, 628, 629, 631, 639, 642, 645, 646, 648, 652, 696, 732, 738, 742, 743, 787, 798, 806, 807, 808, 810, 815, 821, 825, 827, 833, 834, 835, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 866, 867, 868, 869, 870, 875, 878, 879, 880, 885, 886, 889], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 34, 35, 40, 42, 43, 44, 45, 49, 54, 55, 61, 62, 65, 67, 68, 73, 78, 79, 81, 82, 84, 90, 91, 96, 101, 104, 105, 108, 109, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 144, 148, 155, 158, 165, 184, 191, 234, 239, 241, 243, 244, 245, 246, 251, 252, 256, 258, 262, 263, 270, 271, 274, 276, 278, 280, 281, 284, 287, 289, 293, 300, 302, 305, 306, 311, 312, 314, 339, 346, 347, 378, 380, 383, 387, 388, 389, 437, 465, 503, 637, 640, 641, 643, 648, 655, 656, 658, 659, 679, 691, 694, 697, 704, 705, 759, 763, 764, 765, 766, 774, 775, 776, 777, 778, 779, 780, 781, 782, 802, 827, 828, 831, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 856, 857, 859, 862, 864, 866, 867, 870, 874, 881, 893], "instanc": [0, 8, 9, 25, 33, 39, 42, 43, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 176, 179, 182, 183, 184, 186, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 383, 386, 387, 388, 389, 392, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 423, 424, 425, 429, 430, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 598, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 640, 641, 643, 645, 646, 647, 648, 649, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 798, 803, 825, 833, 834, 835, 838, 839, 840, 844, 846, 847, 848, 849, 851, 852, 853, 854, 855, 859, 867, 868, 869, 872, 878, 886], "typic": [0, 8, 9, 22, 68, 91, 345, 362, 383, 398, 533, 657, 769, 806, 838, 852, 884, 892], "repres": [0, 64, 67, 68, 72, 73, 90, 91, 95, 96, 111, 136, 150, 152, 175, 233, 234, 237, 240, 249, 251, 258, 284, 297, 301, 302, 327, 341, 342, 343, 360, 377, 380, 383, 385, 386, 387, 388, 389, 392, 393, 396, 429, 433, 447, 461, 463, 468, 495, 506, 512, 513, 514, 519, 525, 532, 568, 639, 640, 641, 643, 645, 647, 648, 670, 671, 672, 686, 693, 696, 697, 792, 805, 809, 821, 834, 839, 844, 862, 866, 882, 883, 886], "ones": [0, 8, 9, 22, 33, 40, 42, 54, 60, 64, 68, 70, 72, 77, 85, 87, 91, 95, 100, 143, 147, 152, 154, 160, 210, 211, 247, 324, 380, 398, 542, 626, 640, 642, 643, 646, 647, 649, 665, 666, 710, 753, 754, 755, 791, 833, 839, 843, 846, 851, 852, 858, 859, 866, 867, 885], "how": [0, 3, 4, 5, 6, 7, 8, 9, 12, 13, 18, 19, 22, 23, 24, 27, 29, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 54, 57, 60, 61, 62, 67, 68, 84, 90, 91, 111, 121, 122, 123, 124, 125, 126, 127, 128, 129, 251, 284, 302, 306, 311, 312, 314, 378, 388, 389, 463, 478, 503, 504, 637, 643, 802, 805, 806, 807, 808, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 874, 876, 881, 885], "approach": [0, 47, 831, 833, 834, 835, 839, 842, 844, 845, 849, 852, 856, 859, 860, 862, 866, 867, 870, 882, 889, 891], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 14, 15, 18, 19, 22, 42, 43, 54, 56, 57, 58, 68, 73, 79, 83, 91, 96, 102, 106, 258, 386, 387, 389, 434, 440, 449, 505, 509, 546, 547, 643, 645, 648, 656, 683, 684, 695, 696, 698, 699, 703, 763, 764, 765, 787, 791, 798, 808, 815, 816, 818, 819, 825, 833, 834, 835, 840, 841, 842, 843, 846, 847, 848, 851, 856, 857, 859, 860, 861, 862, 864, 867, 869, 885, 893], "highli": [0, 57, 833, 885], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 14, 15, 20, 21, 22, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 68, 76, 77, 91, 99, 100, 108, 109, 370, 383, 386, 392, 398, 408, 409, 414, 415, 418, 419, 420, 430, 431, 512, 513, 514, 515, 516, 517, 518, 533, 536, 650, 653, 654, 714, 724, 751, 752, 754, 805, 806, 809, 827, 833, 855, 856, 862, 867, 878, 880, 883], "unifi": [0, 31, 32, 33, 35, 36, 42, 45, 46, 50, 57, 85, 224, 642, 827, 836, 837, 838, 839, 843, 844, 848, 853, 854, 856, 862, 864, 870, 873, 875, 877, 879, 881, 882, 883, 885, 889, 892], "write": [0, 22, 31, 32, 42, 43, 54, 58, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 340, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 369, 370, 371, 378, 380, 383, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 428, 430, 431, 434, 435, 437, 438, 446, 447, 449, 452, 453, 454, 455, 461, 464, 465, 466, 467, 469, 470, 479, 480, 483, 484, 485, 486, 487, 488, 489, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 552, 556, 557, 558, 563, 564, 573, 587, 588, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 751, 752, 753, 754, 755, 757, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 788, 827, 832, 833, 835, 837, 838, 840, 841, 843, 844, 846, 847, 848, 852, 855, 857, 860, 864, 866, 869, 876, 885, 892], "code": [0, 1, 6, 7, 8, 9, 18, 19, 20, 21, 22, 23, 24, 31, 32, 39, 40, 42, 44, 45, 46, 47, 48, 49, 56, 57, 66, 67, 85, 89, 90, 114, 225, 271, 398, 540, 549, 557, 558, 573, 587, 591, 606, 642, 645, 647, 648, 650, 669, 690, 691, 692, 724, 825, 830, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892], "agnost": [0, 31, 32, 33, 34, 42, 43, 44, 48, 54, 827, 839, 844, 851, 864, 866, 869, 870, 891, 892], "underli": [0, 33, 42, 43, 54, 68, 75, 91, 98, 111, 241, 244, 246, 281, 388, 389, 468, 485, 643, 648, 650, 696, 720, 842, 855, 862, 878, 885], "deep": [0, 8, 9, 22, 33, 40, 42, 54, 85, 556, 645, 827, 828, 829, 832, 833, 835, 838, 841, 842, 844, 850, 854, 857, 863, 866, 867, 874, 883, 885, 888, 889, 891, 892], "develop": [0, 8, 9, 10, 11, 22, 27, 41, 42, 43, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 841, 843, 849, 858, 860, 870, 872, 874, 875, 876, 878, 879, 883, 884, 885, 886, 887, 890, 891, 892], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 59, 60, 63, 64, 67, 68, 69, 72, 73, 75, 77, 78, 79, 85, 87, 90, 91, 92, 95, 96, 98, 100, 101, 102, 108, 109, 113, 114, 137, 147, 149, 152, 158, 212, 217, 219, 224, 248, 250, 251, 254, 258, 279, 280, 284, 289, 290, 294, 296, 301, 302, 303, 339, 341, 342, 343, 345, 348, 350, 351, 352, 356, 357, 362, 367, 370, 374, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 402, 403, 409, 410, 411, 412, 415, 420, 422, 430, 431, 440, 441, 445, 455, 456, 458, 462, 463, 464, 468, 469, 473, 474, 475, 485, 486, 487, 489, 495, 498, 502, 503, 512, 514, 519, 520, 521, 522, 523, 533, 538, 539, 540, 541, 542, 543, 545, 548, 549, 550, 559, 565, 570, 574, 585, 586, 595, 606, 618, 628, 640, 642, 643, 645, 646, 647, 648, 650, 652, 654, 655, 656, 670, 671, 672, 674, 677, 679, 683, 684, 685, 688, 689, 691, 694, 695, 698, 699, 703, 704, 705, 713, 714, 717, 721, 723, 733, 738, 743, 744, 745, 753, 754, 755, 758, 759, 760, 761, 763, 765, 785, 787, 790, 791, 792, 793, 798, 805, 808, 811, 812, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893], "tensorflow": [0, 3, 14, 15, 16, 17, 23, 24, 26, 27, 31, 33, 34, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 54, 60, 67, 68, 69, 90, 91, 158, 205, 220, 235, 339, 380, 387, 441, 606, 640, 642, 645, 785, 798, 815, 827, 831, 832, 833, 834, 835, 838, 843, 844, 845, 849, 851, 855, 856, 857, 859, 860, 862, 864, 869, 870, 872, 875, 876, 879, 880, 882, 883, 886, 888, 889, 891, 892], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 14, 15, 18, 19, 20, 21, 26, 28, 29, 31, 32, 40, 42, 43, 54, 61, 294, 346, 347, 383, 643, 810, 827, 832, 833, 839, 844, 845, 848, 851, 852, 855, 856, 857, 862, 864, 869, 870, 872, 875, 876, 878, 879, 882, 886, 888, 889, 891, 892], "flexibl": [0, 842, 844, 851, 854, 860, 862, 885], "particularli": [0, 835, 867, 870, 878, 883], "research": [0, 8, 9, 42, 43, 56, 827, 874, 879, 885, 892], "where": [0, 1, 18, 19, 22, 35, 39, 45, 46, 50, 58, 64, 67, 68, 69, 73, 75, 77, 78, 81, 82, 85, 87, 90, 91, 92, 96, 98, 100, 101, 104, 105, 108, 109, 146, 147, 150, 152, 158, 239, 249, 251, 254, 256, 258, 259, 268, 273, 274, 275, 282, 283, 284, 289, 291, 295, 297, 301, 311, 313, 339, 341, 342, 343, 358, 362, 369, 378, 380, 383, 386, 387, 388, 389, 392, 393, 398, 400, 401, 402, 403, 409, 414, 415, 419, 434, 440, 441, 445, 446, 448, 449, 456, 462, 463, 464, 473, 474, 475, 489, 495, 512, 513, 514, 517, 519, 520, 522, 523, 533, 541, 542, 543, 573, 587, 625, 640, 643, 645, 647, 648, 650, 652, 654, 655, 658, 659, 672, 674, 679, 683, 684, 689, 691, 693, 694, 695, 698, 699, 702, 704, 713, 715, 716, 718, 724, 728, 736, 743, 752, 753, 754, 755, 760, 761, 776, 778, 780, 781, 782, 790, 805, 809, 821, 825, 827, 828, 831, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 847, 848, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 867, 868, 869, 870, 871, 874, 875, 876, 878, 883, 892], "abil": [0, 834, 862, 865, 870, 885], "switch": [0, 42, 54, 798, 840, 848, 852, 853, 892], "differ": [0, 4, 5, 6, 7, 8, 9, 14, 15, 18, 19, 22, 23, 24, 25, 27, 31, 32, 36, 37, 38, 42, 43, 46, 47, 48, 49, 67, 68, 69, 73, 81, 85, 91, 92, 104, 113, 114, 123, 126, 176, 234, 251, 258, 259, 284, 300, 345, 352, 357, 358, 362, 383, 386, 387, 389, 398, 420, 431, 456, 462, 479, 486, 487, 501, 534, 535, 543, 563, 564, 637, 641, 643, 645, 647, 648, 650, 658, 670, 671, 686, 696, 714, 724, 771, 772, 777, 779, 780, 785, 790, 798, 807, 808, 827, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 878, 879, 880, 882, 883, 884, 885, 888, 891, 892], "without": [0, 1, 4, 5, 25, 45, 54, 58, 61, 79, 85, 111, 597, 612, 645, 650, 652, 656, 720, 733, 763, 764, 765, 766, 790, 793, 820, 834, 835, 839, 840, 842, 843, 844, 845, 846, 848, 851, 852, 856, 859, 860, 862, 866, 867, 868, 870, 878, 882, 885, 886, 887, 891], "chang": [0, 4, 5, 6, 7, 25, 33, 43, 56, 57, 58, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 386, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 637, 643, 650, 652, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 698, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 733, 744, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 787, 827, 833, 834, 835, 836, 838, 840, 841, 842, 843, 844, 846, 847, 849, 850, 856, 857, 858, 859, 860, 861, 862, 864, 868, 870, 871, 876, 878, 888, 891], "codebas": [0, 8, 9, 22, 42, 43, 222, 223, 642, 828, 830, 837, 844, 850, 855, 856, 858, 859, 860, 863, 876], "signific": [0, 25, 68, 388, 468, 861, 870, 874, 875, 885], "advantag": [0, 8, 9, 22, 40, 42, 43, 827, 834, 835, 844, 855, 856, 871, 879, 885], "effect": [0, 8, 9, 22, 48, 64, 68, 70, 81, 91, 93, 104, 150, 388, 422, 467, 626, 634, 640, 646, 647, 658, 674, 778, 780, 790, 793, 833, 839, 842, 843, 847, 851, 855, 857, 862, 870, 875], "analyz": [0, 833, 872], "done": [0, 5, 56, 58, 61, 648, 685, 832, 833, 834, 835, 838, 841, 843, 845, 846, 849, 850, 855, 856, 859, 867, 878, 879, 885], "two": [0, 36, 46, 48, 54, 64, 68, 73, 79, 91, 92, 96, 113, 114, 134, 137, 143, 150, 156, 157, 158, 189, 197, 245, 259, 260, 294, 339, 340, 345, 358, 359, 361, 362, 364, 366, 373, 380, 383, 386, 387, 388, 389, 398, 415, 438, 439, 440, 449, 454, 463, 465, 469, 474, 495, 501, 505, 533, 543, 548, 639, 640, 641, 643, 645, 647, 648, 649, 650, 656, 672, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 710, 725, 763, 764, 765, 766, 790, 792, 798, 806, 833, 834, 838, 839, 844, 845, 846, 847, 852, 856, 857, 859, 862, 863, 867, 869, 876, 882, 890], "distinct": [0, 68, 79, 91, 341, 342, 343, 380, 656, 763, 764, 765, 766, 830, 834, 842, 847, 854, 855, 856, 863, 875, 885], "one": [0, 4, 5, 8, 9, 18, 19, 22, 23, 24, 27, 29, 31, 32, 35, 36, 39, 40, 42, 43, 45, 46, 58, 59, 60, 64, 68, 69, 72, 73, 75, 78, 79, 81, 85, 87, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 108, 137, 140, 150, 152, 153, 154, 164, 166, 224, 245, 251, 258, 259, 276, 282, 283, 284, 303, 313, 323, 326, 327, 345, 351, 354, 355, 358, 359, 362, 363, 364, 366, 367, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 398, 408, 410, 414, 415, 418, 419, 422, 430, 435, 437, 446, 455, 469, 473, 474, 475, 479, 485, 486, 487, 492, 494, 499, 502, 512, 513, 514, 519, 524, 534, 535, 538, 539, 540, 541, 542, 543, 545, 583, 587, 588, 590, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 640, 641, 642, 643, 645, 646, 647, 648, 650, 653, 655, 656, 658, 661, 662, 663, 664, 665, 666, 669, 686, 688, 689, 693, 695, 704, 705, 716, 717, 718, 721, 723, 727, 751, 758, 761, 763, 764, 765, 766, 771, 773, 790, 792, 809, 812, 815, 821, 824, 827, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 866, 867, 869, 870, 871, 872, 875, 876, 879, 885, 886, 888, 891], "anoth": [0, 4, 5, 33, 35, 36, 39, 40, 42, 43, 45, 46, 58, 59, 144, 164, 166, 640, 641, 827, 833, 834, 835, 840, 842, 844, 845, 848, 850, 852, 855, 856, 859, 864, 866, 869, 872, 875, 877, 878, 879, 885, 891], "characterist": [0, 841], "clear": [0, 25, 206, 642, 833, 835, 840, 844, 845, 846, 856, 862, 864, 866, 874, 875, 876, 885], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 29, 33, 34, 36, 40, 42, 43, 44, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 113, 114, 121, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 163, 164, 165, 166, 168, 174, 175, 176, 177, 178, 181, 183, 184, 186, 191, 203, 204, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 320, 321, 322, 324, 331, 332, 339, 341, 345, 346, 347, 349, 364, 365, 370, 374, 378, 380, 383, 386, 387, 388, 389, 392, 398, 405, 406, 407, 408, 410, 411, 413, 415, 418, 420, 423, 424, 425, 428, 430, 431, 436, 439, 441, 443, 444, 454, 461, 464, 465, 466, 467, 468, 469, 470, 476, 478, 480, 491, 495, 500, 501, 503, 504, 505, 507, 511, 515, 516, 518, 533, 534, 535, 536, 543, 545, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 583, 584, 586, 587, 588, 592, 593, 594, 597, 600, 601, 602, 603, 604, 606, 608, 610, 611, 612, 616, 617, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 707, 708, 709, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 815, 820, 821, 825, 834, 835, 842, 844, 846, 857, 859, 861, 864, 866, 867, 868, 878, 880], "shape": [0, 4, 5, 6, 7, 12, 13, 14, 15, 22, 25, 27, 29, 35, 36, 37, 38, 42, 43, 48, 54, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 113, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 219, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 346, 347, 348, 349, 350, 352, 354, 355, 357, 359, 361, 363, 364, 365, 366, 370, 371, 373, 378, 380, 383, 386, 387, 388, 389, 392, 393, 394, 396, 398, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 428, 430, 431, 432, 435, 436, 437, 438, 440, 441, 442, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 478, 480, 483, 488, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 551, 552, 556, 557, 558, 560, 563, 564, 567, 573, 580, 587, 588, 598, 607, 609, 621, 625, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 767, 768, 770, 771, 772, 773, 775, 777, 778, 780, 781, 782, 787, 790, 792, 805, 806, 809, 820, 825, 827, 835, 836, 842, 844, 845, 846, 847, 848, 849, 851, 855, 856, 857, 859, 860, 861, 864, 866, 867, 868, 869, 878, 879], "gain": [0, 25, 805, 835, 836, 838, 863, 868, 885], "descript": [0, 1, 2, 51, 52, 53, 58, 61, 64, 67, 68, 73, 90, 91, 96, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 340, 346, 347, 349, 352, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 495, 503, 507, 533, 536, 563, 567, 569, 571, 602, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 833, 835, 847, 854, 855], "describ": [0, 10, 11, 68, 81, 91, 109, 234, 251, 252, 284, 287, 289, 388, 393, 396, 468, 523, 526, 643, 647, 658, 674, 773, 777, 779, 829, 830, 833, 834, 835, 841, 843, 855, 856, 859, 864, 869, 885], "obtain": [0, 42, 43, 61, 68, 91, 330, 380, 386, 426, 647, 674, 792, 856, 878], "mean": [0, 4, 5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 57, 58, 68, 69, 72, 74, 75, 77, 81, 83, 85, 87, 91, 92, 95, 97, 98, 100, 104, 106, 108, 145, 224, 341, 351, 380, 383, 386, 387, 388, 389, 392, 393, 398, 415, 420, 438, 451, 463, 464, 465, 466, 467, 468, 469, 470, 480, 485, 495, 512, 514, 520, 539, 540, 557, 628, 629, 631, 636, 640, 642, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 662, 664, 665, 666, 668, 669, 670, 681, 707, 708, 709, 720, 729, 730, 731, 738, 753, 754, 790, 792, 793, 805, 806, 809, 827, 834, 835, 837, 838, 840, 842, 844, 845, 846, 852, 854, 855, 856, 859, 860, 862, 864, 866, 867, 868, 869, 870, 872, 879, 880, 882, 885], "deviat": [0, 76, 77, 81, 99, 100, 104, 653, 654, 658, 751, 754, 778, 792, 805, 809, 838, 876], "minimum": [0, 56, 67, 68, 69, 75, 78, 81, 90, 91, 92, 98, 101, 104, 231, 259, 286, 310, 342, 346, 347, 357, 378, 380, 383, 389, 398, 495, 531, 535, 541, 593, 594, 603, 604, 616, 617, 643, 645, 650, 655, 658, 713, 759, 774, 776, 790, 792, 793, 798, 844, 861, 882, 888, 892], "maximum": [0, 67, 68, 69, 70, 75, 78, 81, 85, 90, 91, 92, 93, 98, 101, 104, 114, 224, 310, 346, 347, 358, 371, 378, 383, 386, 387, 389, 398, 402, 403, 413, 456, 459, 462, 495, 534, 536, 541, 551, 552, 560, 568, 632, 642, 643, 645, 646, 648, 650, 655, 658, 689, 713, 758, 759, 774, 776, 790, 792, 793, 798, 821, 835, 844, 846, 855, 867, 882, 892], "quartil": 0, "overview": [0, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 841, 843, 857, 859, 863], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 20, 21, 22, 48, 69, 109, 190, 555, 641, 645, 831, 833, 834, 835, 843, 844, 846, 849, 850, 853, 856, 859, 860, 862, 864, 866, 867, 872], "indic": [0, 4, 5, 20, 21, 64, 68, 69, 72, 73, 75, 76, 78, 79, 80, 85, 87, 88, 91, 92, 95, 96, 98, 99, 101, 102, 103, 108, 111, 138, 139, 152, 156, 158, 179, 183, 184, 295, 339, 340, 341, 360, 380, 383, 386, 387, 388, 389, 394, 396, 405, 406, 407, 409, 413, 414, 415, 419, 420, 423, 424, 425, 426, 430, 431, 441, 462, 465, 473, 474, 475, 478, 481, 483, 485, 486, 487, 490, 494, 500, 501, 503, 504, 505, 507, 509, 510, 524, 525, 526, 548, 563, 564, 566, 587, 588, 592, 625, 628, 629, 640, 643, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 657, 661, 663, 664, 665, 666, 669, 674, 691, 705, 716, 717, 718, 720, 721, 722, 723, 725, 727, 732, 735, 737, 739, 740, 741, 743, 747, 748, 749, 750, 751, 752, 758, 759, 760, 761, 763, 765, 767, 769, 770, 787, 788, 790, 792, 806, 812, 820, 821, 823, 834, 843, 851, 854, 856, 869, 878], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 25, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 57, 72, 77, 81, 95, 100, 104, 393, 520, 647, 654, 658, 662, 664, 665, 666, 668, 669, 753, 754, 846, 880, 882], "250": 0, "105092": 0, "min": [0, 54, 58, 65, 68, 69, 73, 81, 88, 91, 92, 96, 104, 156, 158, 176, 179, 283, 339, 342, 347, 380, 383, 387, 389, 441, 500, 541, 557, 587, 588, 603, 640, 641, 643, 645, 648, 658, 689, 695, 698, 699, 705, 882], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 22, 54, 67, 68, 90, 91, 92, 95, 100, 130, 148, 237, 239, 251, 253, 264, 326, 359, 360, 380, 383, 429, 543, 558, 571, 603, 637, 640, 643, 645, 648, 652, 654, 661, 687, 693, 740, 755], "050000": 0, "max": [0, 54, 56, 65, 68, 69, 73, 81, 88, 91, 92, 96, 104, 176, 179, 282, 346, 383, 386, 387, 388, 389, 405, 406, 407, 423, 424, 425, 426, 428, 430, 441, 463, 500, 502, 503, 551, 552, 557, 573, 587, 588, 641, 643, 645, 648, 658, 689, 691, 694, 790, 806, 810, 843, 856, 882], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 859], "receiv": [0, 5, 8, 9, 56, 60, 108, 547, 583, 645, 651, 729, 730, 731, 806, 825, 830, 834, 835, 844, 845, 859, 862], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 68, 79, 251, 258, 284, 293, 399, 544, 591, 615, 643, 645, 656, 763, 764, 765, 766, 833, 841, 842, 843, 844, 855, 856, 857, 859, 862, 864, 870, 882], "associ": [0, 20, 21, 68, 73, 91, 96, 234, 284, 389, 398, 472, 536, 643, 648, 691, 694, 706, 787, 835, 844, 852, 853, 856, 857, 859, 870], "122": [0, 23, 24, 65, 179, 249, 643], "211321": 0, "256": [0, 4, 5, 12, 13, 20, 21, 22, 67, 92, 294, 295, 604, 647, 662, 664, 790], "683288": 0, "250000": 0, "105": [0, 22, 73, 95, 647, 648, 670, 671, 686, 693], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 56, 58, 68, 70, 74, 91, 93, 97, 386, 388, 392, 398, 400, 401, 405, 406, 407, 465, 466, 467, 468, 469, 470, 517, 533, 626, 627, 632, 646, 647, 649, 651, 674, 707, 729, 730, 805, 806], "across": [0, 1, 20, 21, 23, 24, 25, 37, 38, 39, 40, 54, 68, 78, 85, 91, 92, 101, 113, 222, 223, 251, 258, 284, 302, 388, 392, 463, 514, 517, 548, 569, 605, 642, 643, 645, 647, 652, 655, 670, 674, 738, 758, 759, 806, 833, 838, 844, 846, 848, 851, 852, 854, 859, 862, 883, 885, 890], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 55, 56, 58, 59, 61, 63, 64, 68, 69, 72, 73, 75, 77, 82, 83, 85, 86, 87, 90, 91, 92, 95, 96, 98, 100, 105, 106, 108, 109, 137, 145, 152, 156, 157, 158, 212, 219, 251, 255, 283, 284, 339, 340, 352, 371, 380, 383, 386, 387, 388, 389, 398, 420, 429, 431, 432, 433, 441, 446, 456, 457, 459, 462, 463, 484, 495, 503, 509, 539, 545, 548, 565, 585, 586, 603, 610, 611, 625, 628, 640, 642, 643, 645, 646, 647, 648, 650, 651, 652, 654, 655, 659, 670, 673, 674, 679, 691, 696, 697, 700, 705, 717, 721, 723, 729, 730, 731, 732, 733, 734, 743, 744, 745, 746, 752, 755, 760, 785, 787, 790, 791, 792, 793, 805, 806, 812, 815, 821, 823, 825, 827, 828, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 878, 879, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893], "group": [0, 8, 9, 22, 68, 91, 389, 392, 509, 513, 647, 652, 660, 667, 668, 734, 825, 836, 838, 842, 844, 852, 856, 857, 881, 884, 890], "calcul": [0, 4, 5, 25, 56, 67, 68, 69, 74, 81, 85, 90, 91, 92, 96, 97, 104, 114, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 251, 254, 255, 256, 272, 273, 274, 275, 276, 277, 282, 283, 284, 289, 296, 297, 298, 300, 301, 302, 308, 318, 346, 347, 360, 370, 383, 386, 387, 388, 389, 392, 398, 405, 406, 407, 441, 463, 468, 495, 512, 514, 540, 580, 643, 645, 648, 649, 658, 685, 693, 696, 707, 708, 709, 710, 774, 775, 776, 777, 778, 779, 780, 790, 792, 805, 806, 809, 833, 847, 864, 875, 878], "pictur": [0, 58, 827, 833, 864, 874], "vital": [0, 869, 874], "select": [0, 33, 42, 47, 60, 68, 81, 91, 104, 387, 389, 398, 441, 454, 503, 504, 507, 534, 535, 658, 771, 772, 833, 834, 835, 843, 849, 855, 859, 864, 866, 869, 870, 885, 888, 889], "guid": [0, 27, 40, 827, 828, 833, 834, 835, 841, 850, 856, 858, 891], "recogn": [0, 58, 830, 836], "both": [0, 8, 9, 14, 15, 18, 19, 20, 21, 23, 24, 25, 27, 29, 37, 39, 42, 43, 47, 48, 55, 57, 64, 67, 68, 69, 72, 73, 87, 90, 91, 92, 95, 96, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 166, 182, 186, 189, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 340, 346, 347, 349, 350, 352, 357, 362, 380, 383, 386, 387, 389, 393, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 489, 495, 503, 506, 507, 519, 533, 536, 563, 567, 569, 571, 580, 602, 611, 635, 636, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 806, 827, 831, 833, 835, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 855, 856, 859, 862, 864, 866, 867, 868, 869, 870, 878, 879, 885, 888, 890, 891, 892], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 58], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 22, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 56, 61, 66, 68, 69, 75, 89, 91, 92, 98, 108, 109, 218, 225, 226, 230, 234, 251, 252, 258, 266, 267, 284, 287, 293, 295, 386, 389, 392, 410, 411, 412, 432, 473, 474, 475, 481, 483, 485, 486, 487, 488, 490, 494, 500, 501, 510, 512, 514, 546, 566, 573, 591, 642, 643, 645, 648, 650, 654, 696, 716, 717, 718, 720, 722, 723, 725, 727, 755, 833, 834, 835, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 866, 867, 868, 869, 870, 874, 876, 878, 879, 880, 881, 883, 885, 886, 888, 891], "outnumb": 0, "address": [0, 42, 43, 68, 69, 91, 389, 503, 610, 645, 833, 835, 838, 839, 851, 858, 864, 876, 881, 883, 885, 891], "fair": 0, "dure": [0, 18, 19, 22, 23, 24, 35, 37, 42, 45, 47, 48, 66, 70, 81, 85, 89, 93, 104, 225, 386, 410, 411, 412, 591, 612, 626, 627, 632, 642, 645, 646, 647, 648, 651, 658, 670, 688, 729, 730, 731, 778, 780, 798, 809, 810, 825, 834, 842, 844, 845, 848, 852, 853, 855, 856, 857, 858, 859, 862, 870, 878, 885, 886, 891], "similar": [0, 1, 8, 9, 22, 33, 42, 43, 68, 293, 388, 463, 643, 647, 649, 674, 710, 806, 831, 833, 834, 842, 843, 844, 845, 848, 849, 850, 852, 853, 854, 856, 857, 859, 860, 867, 870, 874, 879, 881, 882, 883, 884, 891], "here": [0, 2, 4, 5, 8, 9, 10, 11, 14, 15, 22, 25, 28, 30, 33, 38, 41, 42, 43, 54, 56, 57, 58, 59, 61, 91, 294, 470, 643, 827, 831, 832, 833, 834, 835, 838, 840, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 864, 865, 866, 867, 868, 869, 870, 878, 879, 880, 885, 886, 893], "take": [0, 4, 5, 8, 9, 20, 21, 22, 33, 40, 42, 43, 48, 54, 56, 59, 68, 73, 75, 81, 91, 98, 108, 133, 134, 136, 152, 291, 298, 313, 378, 386, 387, 389, 406, 414, 419, 424, 434, 443, 457, 478, 485, 504, 534, 535, 639, 640, 643, 647, 648, 650, 651, 674, 688, 692, 720, 731, 771, 790, 798, 805, 806, 820, 825, 827, 828, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 862, 864, 866, 868, 869, 870, 871, 876, 878, 879, 882, 883, 891], "random": [0, 8, 9, 14, 15, 18, 19, 22, 23, 24, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 56, 58, 59, 68, 72, 85, 91, 95, 334, 335, 336, 337, 338, 380, 387, 388, 445, 456, 462, 468, 519, 520, 521, 522, 523, 647, 670, 752, 753, 754, 755, 756, 757, 790, 792, 805, 820, 821, 827, 833, 845, 857, 859, 860, 869, 879, 880, 885], "match": [0, 1, 65, 68, 85, 88, 91, 163, 258, 293, 350, 352, 383, 386, 388, 389, 431, 463, 478, 500, 504, 583, 641, 643, 645, 648, 684, 685, 689, 705, 785, 831, 833, 839, 841, 842, 846, 849, 857, 886, 891], "prevent": [0, 68, 70, 81, 91, 93, 104, 388, 468, 568, 626, 627, 632, 645, 646, 647, 658, 670, 775, 779, 805, 810, 833, 835, 843, 844, 848, 855, 856, 860], "being": [0, 8, 9, 10, 11, 14, 15, 22, 42, 43, 54, 68, 85, 91, 106, 113, 117, 137, 387, 389, 451, 479, 495, 597, 640, 645, 647, 648, 672, 685, 787, 793, 805, 834, 835, 838, 839, 840, 842, 844, 845, 846, 849, 851, 853, 855, 856, 857, 859, 860, 862, 864, 867, 870, 875, 876, 881, 883, 884, 885, 886, 891, 892], "bias": [0, 647, 672], "toward": [0, 68, 75, 91, 98, 258, 305, 356, 368, 383, 389, 398, 501, 536, 643, 650, 721, 827, 831, 833, 834, 849, 864, 881, 885], "legit_sampl": 0, "n": [0, 25, 54, 57, 58, 59, 61, 64, 67, 68, 72, 73, 75, 77, 78, 81, 82, 90, 91, 95, 96, 98, 100, 101, 104, 105, 108, 113, 150, 156, 157, 158, 231, 301, 303, 339, 340, 352, 380, 383, 386, 387, 388, 389, 392, 393, 396, 398, 400, 401, 402, 403, 408, 409, 414, 415, 418, 419, 420, 428, 429, 430, 431, 433, 441, 442, 449, 453, 455, 457, 462, 463, 475, 481, 484, 488, 490, 501, 510, 512, 513, 514, 517, 519, 520, 521, 522, 523, 526, 533, 543, 640, 643, 647, 648, 650, 652, 654, 655, 658, 659, 660, 661, 662, 663, 665, 667, 669, 674, 679, 682, 686, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 702, 703, 704, 705, 715, 716, 718, 724, 728, 740, 753, 754, 755, 761, 775, 777, 778, 779, 780, 781, 782, 806, 809, 820, 837, 841, 843, 859, 871, 879], "after": [0, 4, 5, 6, 7, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 42, 43, 57, 68, 69, 70, 72, 76, 85, 91, 92, 93, 95, 99, 197, 298, 315, 319, 368, 378, 383, 386, 387, 389, 409, 410, 411, 412, 429, 433, 454, 484, 495, 573, 627, 630, 632, 633, 634, 641, 643, 645, 646, 647, 652, 653, 660, 661, 662, 663, 665, 667, 669, 670, 743, 751, 810, 815, 827, 833, 834, 835, 838, 840, 841, 843, 844, 846, 848, 851, 854, 857, 859, 863, 871, 878, 879, 885], "combin": [0, 25, 48, 68, 85, 91, 114, 386, 398, 420, 431, 533, 561, 562, 645, 648, 679, 688, 835, 839, 842, 843, 844, 846, 848, 852, 859, 869, 885], "them": [0, 3, 4, 5, 18, 19, 23, 24, 27, 29, 31, 42, 43, 48, 387, 457, 550, 586, 645, 790, 806, 829, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 848, 850, 853, 855, 856, 857, 859, 861, 864, 866, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 885, 887, 891], "achiev": [0, 18, 19, 23, 24, 25, 42, 828, 830, 836, 843, 844, 852, 853, 859, 862, 867, 869, 872], "concaten": [0, 54, 68, 69, 75, 91, 96, 389, 480, 556, 560, 645, 647, 650, 674, 693, 714, 790, 857, 862, 864, 867], "along": [0, 57, 62, 64, 67, 68, 69, 73, 74, 75, 77, 78, 80, 81, 82, 84, 85, 87, 90, 91, 92, 96, 97, 98, 100, 101, 103, 104, 105, 108, 109, 111, 124, 128, 133, 148, 149, 224, 298, 301, 303, 341, 342, 343, 346, 347, 351, 352, 367, 374, 380, 383, 384, 386, 387, 388, 389, 392, 398, 408, 414, 415, 418, 419, 420, 430, 431, 456, 467, 480, 481, 482, 484, 486, 487, 495, 500, 503, 505, 507, 515, 516, 517, 518, 534, 535, 536, 538, 539, 540, 541, 542, 543, 556, 563, 639, 640, 642, 643, 645, 648, 649, 650, 651, 654, 655, 657, 658, 659, 679, 693, 702, 704, 705, 707, 708, 709, 714, 717, 718, 719, 721, 722, 724, 726, 727, 729, 730, 731, 757, 758, 759, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 806, 827, 833, 836, 837, 846, 855, 858, 860, 862, 864, 885], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 22, 25, 57, 58, 59, 62, 64, 67, 68, 69, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 124, 128, 148, 149, 152, 224, 298, 303, 346, 347, 351, 352, 360, 367, 383, 386, 388, 389, 392, 396, 398, 408, 409, 415, 418, 420, 430, 431, 467, 472, 480, 481, 482, 485, 486, 487, 490, 495, 500, 501, 503, 504, 505, 507, 509, 510, 515, 516, 518, 526, 531, 534, 535, 536, 538, 539, 540, 541, 542, 543, 556, 563, 625, 637, 640, 642, 643, 645, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 669, 679, 682, 689, 702, 704, 705, 707, 708, 709, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 757, 758, 759, 763, 765, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 792, 802, 806, 807, 812, 842, 844, 846, 848, 851, 852, 855, 856, 859, 862, 864, 866, 869], "result": [0, 1, 4, 5, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 25, 27, 29, 37, 38, 39, 40, 42, 43, 54, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 190, 191, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 443, 444, 446, 447, 451, 452, 453, 454, 455, 457, 461, 464, 465, 466, 467, 469, 470, 472, 479, 480, 483, 485, 486, 487, 488, 489, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 551, 552, 556, 557, 558, 563, 564, 568, 573, 580, 587, 588, 626, 627, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 735, 738, 739, 741, 745, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 792, 798, 812, 821, 825, 831, 833, 835, 838, 839, 841, 842, 843, 844, 846, 847, 849, 851, 852, 854, 855, 856, 857, 859, 860, 864, 867, 870, 878, 879, 880, 886, 888], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 58, 806, 807, 808, 827, 834, 838, 839, 840, 841, 842, 843, 844, 845, 849, 851, 853, 856, 857, 859, 860, 862, 866, 867, 869, 870, 876, 878, 879, 880, 885], "equal": [0, 6, 7, 64, 65, 67, 68, 69, 73, 74, 75, 77, 79, 80, 81, 85, 88, 90, 91, 92, 96, 97, 98, 100, 103, 109, 113, 114, 143, 145, 146, 147, 153, 154, 163, 243, 245, 249, 254, 256, 265, 266, 287, 289, 294, 297, 298, 302, 341, 342, 343, 345, 362, 380, 383, 386, 387, 389, 392, 398, 409, 430, 457, 481, 490, 503, 507, 510, 515, 516, 518, 536, 545, 548, 625, 640, 641, 643, 645, 648, 649, 650, 654, 655, 656, 657, 658, 682, 690, 691, 694, 696, 702, 707, 713, 715, 720, 722, 728, 755, 761, 763, 764, 765, 766, 767, 770, 775, 777, 778, 779, 780, 798, 805, 806, 841, 842, 844, 846, 848, 857, 859, 882], "unbias": [0, 68, 81, 91, 104, 398, 533, 658, 780], "concat": [0, 12, 13, 54, 59, 69, 75, 85, 98, 224, 560, 642, 645, 650, 728, 857, 862, 864, 878], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 22, 54, 62, 68, 70, 77, 84, 90, 93, 100, 124, 249, 297, 371, 383, 630, 637, 646, 648, 652, 655, 658, 693, 733, 744, 753, 755, 762, 773, 893], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 290, 643], "03": [0, 8, 9, 25, 38, 57, 64, 67, 69, 70, 90, 91, 93, 100, 149, 249, 274, 354, 355, 603, 604, 627, 632, 640, 643, 645, 646, 648, 687, 754], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 790], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 23, 24, 37, 38, 39, 40], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 25, 35, 54, 67, 68, 81, 88, 90, 91, 100, 179, 233, 249, 297, 333, 380, 418, 641, 643, 648, 652, 658, 700, 740, 754, 773], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 25, 54, 67, 77, 88, 90, 91, 100, 114, 179, 246, 641, 648, 658, 700, 754, 755, 779], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 67, 95, 239, 647, 670, 671], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 18, 19, 23, 24, 25, 35, 36, 40, 42, 43, 54, 56, 57, 62, 77, 84, 93, 100, 129, 245, 386, 408, 418, 626, 630, 637, 643, 646, 648, 653, 654, 658, 689, 693, 751, 752, 753, 754, 755, 756, 773, 827, 864, 869, 879], "53": [0, 16, 17, 25, 37, 54, 73, 77, 90, 95, 170, 226, 256, 429, 629, 631, 641, 642, 646, 648, 653, 686, 751, 755], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 14, 15, 18, 19, 23, 24, 27, 29, 31, 39, 42, 43, 48, 54, 55, 64, 68, 69, 91, 92, 108, 136, 148, 149, 333, 380, 386, 431, 560, 639, 640, 645, 647, 672, 673, 674, 821, 833, 835, 836, 838, 839, 841, 843, 844, 846, 847, 852, 854, 855, 856, 858, 862, 863, 867, 878, 879, 881, 891], "predictor": [0, 870], "label": [0, 8, 9, 10, 11, 22, 25, 56, 57, 58, 68, 74, 91, 97, 388, 463, 464, 466, 467, 468, 469, 470, 649, 707, 708, 709, 827, 833, 838, 856, 863, 864, 865, 869, 871, 885], "whether": [0, 31, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 109, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 136, 138, 139, 145, 147, 152, 154, 160, 163, 164, 166, 169, 170, 171, 172, 173, 174, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 191, 203, 207, 208, 210, 211, 213, 215, 218, 219, 221, 224, 225, 227, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 340, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 380, 383, 386, 387, 388, 389, 398, 405, 406, 407, 409, 410, 411, 412, 428, 430, 432, 434, 449, 451, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 483, 485, 486, 487, 490, 494, 501, 503, 504, 505, 507, 510, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 587, 588, 589, 590, 592, 595, 596, 598, 599, 601, 602, 603, 604, 606, 608, 610, 611, 618, 619, 622, 624, 627, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 659, 661, 662, 663, 664, 670, 671, 672, 673, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 697, 702, 707, 708, 709, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 742, 743, 744, 745, 749, 750, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 785, 787, 790, 802, 803, 806, 807, 808, 809, 810, 820, 827, 828, 833, 834, 839, 842, 844, 846, 851, 855, 856, 859, 861, 862, 878, 879], "x": [0, 4, 5, 12, 13, 14, 15, 16, 17, 22, 25, 27, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 183, 184, 186, 191, 207, 208, 210, 212, 217, 218, 219, 223, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 339, 340, 344, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 396, 397, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 437, 438, 440, 442, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 476, 477, 479, 480, 482, 483, 485, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 592, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 624, 625, 627, 628, 629, 631, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 735, 738, 739, 740, 741, 742, 743, 744, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 806, 809, 812, 815, 820, 825, 827, 831, 833, 837, 839, 840, 842, 844, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 864, 866, 867, 868, 869, 878, 879, 880], "y": [0, 25, 42, 43, 54, 55, 57, 58, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 140, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 160, 163, 164, 165, 174, 176, 179, 191, 204, 208, 212, 217, 218, 219, 223, 225, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 345, 346, 347, 353, 361, 362, 363, 364, 365, 370, 372, 374, 378, 380, 383, 386, 387, 388, 389, 392, 398, 406, 408, 410, 411, 415, 418, 420, 424, 430, 437, 441, 447, 454, 461, 463, 464, 466, 467, 468, 469, 470, 480, 482, 491, 495, 503, 504, 505, 507, 511, 515, 516, 518, 526, 532, 533, 534, 535, 536, 539, 541, 542, 543, 545, 548, 551, 552, 555, 556, 558, 559, 560, 563, 564, 565, 569, 571, 572, 573, 575, 576, 579, 580, 585, 592, 593, 594, 597, 600, 601, 603, 604, 606, 608, 610, 611, 612, 616, 617, 620, 623, 624, 625, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 666, 668, 669, 670, 671, 678, 679, 680, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 702, 704, 705, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 735, 738, 739, 741, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 825, 827, 840, 842, 845, 846, 854, 856, 857, 859, 860, 862, 864, 866, 878], "upcom": [0, 865], "phase": [0, 859, 870, 885], "drop": [0, 25, 58, 68, 91, 342, 380, 388, 389, 467, 504, 805, 806, 834, 870], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 302, 643], "length": [0, 8, 9, 20, 21, 56, 57, 64, 68, 74, 75, 85, 91, 97, 98, 108, 109, 114, 137, 145, 150, 325, 328, 329, 344, 352, 380, 383, 386, 387, 389, 393, 396, 408, 409, 414, 415, 418, 419, 420, 430, 431, 432, 434, 446, 455, 495, 504, 521, 526, 625, 640, 645, 647, 648, 649, 650, 656, 674, 698, 699, 707, 720, 763, 790, 806, 859, 867], "valid": [0, 12, 13, 22, 56, 58, 68, 72, 82, 91, 95, 105, 108, 109, 168, 386, 387, 405, 406, 407, 423, 424, 425, 426, 428, 429, 433, 454, 462, 576, 641, 645, 647, 650, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 716, 724, 781, 782, 790, 791, 806, 820, 834, 840, 844, 846, 850, 854, 857, 859, 878, 886], "gener": [0, 1, 10, 11, 12, 13, 22, 31, 35, 40, 42, 43, 45, 48, 56, 58, 60, 61, 64, 67, 68, 72, 77, 83, 87, 90, 91, 95, 100, 106, 109, 137, 148, 149, 158, 166, 251, 254, 264, 265, 280, 284, 293, 323, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 346, 347, 380, 383, 386, 387, 389, 393, 398, 430, 436, 458, 503, 521, 533, 640, 641, 643, 647, 648, 649, 650, 654, 658, 670, 696, 697, 700, 703, 712, 728, 752, 753, 755, 756, 778, 790, 793, 798, 810, 820, 827, 833, 834, 835, 837, 838, 839, 841, 844, 845, 846, 847, 848, 851, 852, 855, 856, 857, 860, 863, 864, 866, 868, 869, 870, 872, 883, 884, 885, 886, 887, 888, 889, 890, 891], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 54, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 176, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 340, 346, 347, 348, 349, 354, 355, 359, 361, 363, 364, 365, 366, 370, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 428, 430, 431, 435, 437, 438, 440, 441, 446, 447, 452, 453, 454, 455, 460, 464, 465, 466, 467, 468, 469, 470, 474, 475, 480, 481, 483, 488, 496, 497, 498, 499, 501, 503, 505, 507, 508, 515, 516, 518, 519, 520, 522, 523, 524, 526, 533, 534, 535, 536, 540, 544, 551, 552, 556, 557, 558, 563, 564, 573, 587, 588, 591, 626, 627, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 885, 887, 891, 892, 893], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 25, 29, 40, 42, 43, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 587, 588, 591, 592, 593, 594, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 792, 793, 798, 803, 805, 806, 807, 808, 809, 810, 811, 815, 816, 820, 821, 823, 825, 827, 833, 839, 847, 848, 851, 856, 857, 859, 860, 864, 866, 867, 878, 879, 880, 886], "test_siz": [0, 25, 56], "specifi": [0, 22, 39, 40, 42, 43, 47, 48, 49, 60, 62, 64, 65, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 81, 82, 84, 85, 88, 90, 91, 92, 95, 96, 97, 98, 100, 101, 104, 105, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 141, 146, 148, 153, 156, 157, 159, 163, 165, 212, 217, 219, 223, 224, 225, 293, 302, 306, 311, 312, 314, 340, 345, 362, 367, 378, 380, 383, 386, 387, 388, 389, 393, 398, 405, 406, 407, 409, 415, 420, 430, 431, 432, 433, 441, 453, 455, 460, 463, 467, 468, 469, 471, 485, 488, 497, 498, 500, 501, 503, 507, 520, 531, 533, 534, 535, 538, 539, 543, 546, 563, 564, 566, 568, 569, 582, 584, 592, 625, 637, 640, 641, 642, 643, 645, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 672, 674, 677, 679, 681, 682, 684, 685, 689, 697, 700, 702, 703, 704, 705, 707, 708, 709, 713, 714, 715, 716, 717, 721, 723, 724, 727, 728, 736, 737, 739, 740, 747, 748, 749, 750, 753, 754, 755, 757, 758, 759, 761, 764, 765, 766, 767, 771, 772, 773, 775, 777, 779, 781, 782, 790, 793, 802, 806, 807, 808, 821, 825, 834, 837, 841, 844, 845, 851, 852, 853, 855, 856, 857, 859, 864, 867, 868, 878, 879, 880, 891], "reserv": [0, 833], "x_train": [0, 25], "x_test": [0, 25], "y_train": [0, 25, 58], "y_test": [0, 25], "random_st": [0, 25, 387, 445], "With": [0, 4, 5, 8, 9, 22, 35, 45, 54, 62, 64, 65, 67, 68, 69, 70, 72, 73, 75, 78, 81, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 163, 164, 165, 166, 168, 174, 175, 176, 179, 186, 191, 192, 193, 194, 195, 205, 208, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 346, 347, 349, 351, 354, 355, 359, 362, 363, 364, 366, 367, 370, 378, 380, 383, 386, 387, 388, 389, 398, 408, 410, 411, 418, 430, 437, 438, 439, 441, 442, 443, 454, 457, 469, 485, 486, 487, 489, 492, 494, 495, 501, 503, 505, 507, 509, 524, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 549, 550, 551, 552, 555, 556, 557, 558, 559, 563, 564, 567, 569, 571, 572, 573, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 677, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 702, 703, 704, 707, 709, 710, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 834, 844, 846, 856, 859, 862, 864, 875, 876, 878, 885, 888], "next": [0, 1, 8, 9, 10, 11, 12, 13, 22, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 56, 58, 68, 91, 176, 359, 363, 368, 372, 383, 641, 805, 810, 827, 833, 834, 835, 840, 844, 846, 847, 849, 850, 853, 865, 866, 867, 876, 885, 887], "convers": [0, 67, 68, 91, 250, 290, 589, 599, 645, 807, 808, 827, 833, 863, 865, 869, 870, 872, 876, 884, 891], "becaus": [0, 37, 45, 47, 57, 68, 386, 409, 785, 834, 835, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 862, 864, 868, 869, 870, 885, 888, 891], "own": [0, 8, 9, 10, 11, 16, 17, 22, 27, 29, 33, 42, 43, 48, 827, 834, 838, 843, 844, 847, 848, 855, 856, 860, 864, 870, 872, 875, 876, 881, 884, 885, 890, 891], "confirm": [0, 4, 5, 57, 830, 833], "been": [0, 8, 9, 10, 11, 22, 23, 24, 27, 29, 37, 39, 42, 43, 68, 69, 77, 91, 92, 100, 207, 294, 389, 502, 556, 557, 558, 642, 643, 645, 654, 752, 820, 821, 833, 835, 838, 840, 842, 843, 844, 845, 847, 848, 851, 852, 855, 859, 864, 866, 870, 871, 878, 885, 892], "correctli": [0, 1, 39, 42, 43, 56, 68, 73, 78, 91, 96, 101, 351, 383, 398, 539, 540, 541, 542, 543, 648, 655, 689, 758, 833, 834, 835, 839, 842, 844, 846, 848, 850, 851, 857, 859, 862, 868, 870, 878, 879], "size": [0, 5, 12, 13, 25, 27, 29, 34, 37, 38, 44, 45, 47, 48, 49, 56, 58, 61, 68, 69, 72, 73, 75, 77, 78, 85, 91, 92, 95, 96, 98, 100, 101, 108, 109, 113, 114, 145, 148, 222, 223, 224, 323, 326, 330, 341, 342, 343, 344, 351, 367, 374, 380, 383, 384, 386, 387, 388, 389, 392, 393, 396, 398, 400, 401, 402, 403, 404, 405, 406, 422, 423, 424, 426, 427, 433, 434, 441, 444, 456, 462, 463, 465, 479, 481, 493, 503, 505, 507, 513, 514, 517, 521, 526, 538, 539, 540, 541, 542, 543, 582, 587, 640, 642, 645, 647, 648, 650, 654, 655, 659, 672, 674, 677, 679, 682, 686, 689, 693, 695, 698, 704, 716, 721, 722, 723, 752, 758, 761, 781, 782, 790, 792, 793, 806, 821, 855, 857, 859, 862, 867, 878, 880], "correct": [0, 18, 19, 27, 29, 38, 48, 54, 56, 58, 81, 104, 197, 387, 458, 641, 650, 658, 713, 778, 780, 787, 790, 831, 833, 835, 837, 842, 843, 844, 845, 848, 849, 851, 852, 855, 857, 859, 879], "787": 0, "197": [0, 67, 239, 643], "success": [0, 22, 648, 658, 702, 777, 779, 830, 834, 843, 875], "prepare_data": [0, 25], "list": [0, 1, 6, 7, 12, 13, 18, 19, 20, 21, 25, 58, 63, 64, 65, 67, 68, 69, 72, 75, 76, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 145, 147, 150, 151, 152, 154, 160, 164, 166, 179, 183, 184, 191, 207, 224, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 360, 361, 362, 368, 369, 370, 372, 373, 374, 383, 386, 387, 389, 396, 405, 406, 407, 409, 410, 411, 412, 423, 424, 425, 426, 430, 432, 436, 441, 445, 448, 455, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 479, 480, 481, 490, 501, 503, 504, 505, 507, 510, 512, 514, 515, 516, 518, 520, 525, 533, 534, 535, 536, 545, 547, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 565, 567, 569, 571, 572, 573, 575, 576, 579, 583, 587, 588, 602, 603, 604, 606, 608, 609, 610, 611, 612, 624, 625, 630, 635, 640, 641, 642, 643, 645, 647, 648, 650, 652, 653, 656, 657, 661, 662, 663, 664, 665, 666, 669, 670, 671, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 700, 702, 707, 708, 709, 713, 714, 717, 720, 721, 722, 723, 724, 727, 728, 732, 733, 734, 735, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 768, 769, 771, 772, 775, 777, 778, 780, 781, 782, 785, 787, 790, 791, 792, 793, 798, 803, 806, 812, 820, 821, 825, 827, 830, 832, 833, 834, 836, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 864, 867, 868, 869, 870, 878, 885, 886, 891, 893], "tupl": [0, 25, 60, 63, 64, 65, 67, 68, 69, 72, 73, 75, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 111, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 139, 145, 147, 151, 152, 154, 158, 160, 164, 165, 166, 177, 178, 179, 183, 184, 190, 191, 197, 207, 210, 211, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 327, 332, 336, 339, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 359, 360, 361, 362, 366, 367, 368, 369, 370, 372, 373, 374, 375, 380, 383, 385, 386, 387, 389, 392, 393, 394, 396, 398, 405, 406, 407, 409, 410, 411, 412, 414, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 440, 441, 445, 449, 451, 456, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 479, 480, 490, 495, 501, 503, 504, 505, 507, 509, 512, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 533, 534, 535, 536, 538, 539, 540, 541, 542, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 592, 602, 603, 604, 605, 606, 608, 609, 610, 611, 624, 625, 626, 627, 628, 630, 632, 635, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 700, 701, 702, 705, 707, 708, 709, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 739, 740, 741, 743, 744, 747, 748, 749, 750, 752, 753, 754, 755, 757, 760, 761, 763, 764, 765, 766, 767, 768, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 792, 805, 806, 808, 820, 821, 839, 844, 851, 852, 855, 857, 859, 864, 867, 868, 870, 878, 879, 880], "thei": [0, 1, 25, 49, 54, 59, 68, 73, 77, 79, 85, 96, 100, 102, 189, 303, 357, 383, 641, 643, 647, 648, 651, 654, 656, 672, 703, 729, 730, 752, 763, 785, 811, 832, 833, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 850, 852, 853, 855, 856, 859, 860, 862, 864, 866, 867, 868, 869, 870, 878, 882, 885, 887, 888, 891, 892], "dimension": [0, 64, 67, 68, 73, 75, 78, 81, 82, 85, 87, 90, 91, 96, 98, 104, 105, 113, 137, 143, 145, 150, 158, 303, 339, 346, 347, 380, 383, 386, 387, 389, 398, 414, 415, 419, 420, 430, 431, 438, 473, 474, 475, 479, 484, 485, 531, 543, 640, 643, 648, 650, 655, 658, 659, 679, 680, 686, 688, 691, 693, 694, 704, 705, 722, 758, 759, 761, 774, 775, 776, 777, 778, 779, 780, 781, 782, 852, 854, 859, 862, 864, 882, 885, 892], "reshap": [0, 4, 5, 42, 43, 58, 59, 68, 72, 73, 75, 85, 91, 95, 96, 98, 371, 383, 386, 387, 389, 405, 406, 407, 410, 423, 424, 425, 428, 437, 454, 479, 485, 625, 645, 647, 648, 650, 663, 665, 669, 689, 705, 855, 856, 859, 862, 864, 866, 869, 882], "float32": [0, 4, 5, 12, 13, 20, 21, 25, 27, 29, 34, 35, 54, 56, 57, 58, 64, 65, 68, 69, 72, 87, 88, 91, 92, 95, 104, 149, 152, 154, 160, 161, 162, 166, 170, 171, 174, 175, 176, 177, 180, 183, 184, 186, 191, 194, 200, 250, 264, 291, 344, 357, 380, 383, 386, 387, 388, 398, 408, 418, 431, 457, 463, 468, 536, 573, 610, 640, 641, 643, 645, 647, 648, 651, 663, 665, 666, 669, 696, 698, 699, 705, 730, 731, 787, 790, 791, 827, 844, 846, 857, 859, 860, 879, 880], "def": [0, 4, 5, 12, 13, 18, 19, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 60, 67, 90, 133, 235, 550, 639, 645, 651, 652, 730, 731, 738, 820, 827, 831, 833, 834, 838, 839, 842, 844, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 864, 866, 867, 868, 869, 878, 879, 880], "isinst": [0, 12, 13, 25, 40, 42, 43, 848, 856, 859, 860, 868, 869], "rang": [0, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 22, 25, 42, 43, 54, 55, 56, 58, 64, 68, 81, 87, 91, 137, 148, 149, 298, 310, 318, 330, 378, 380, 387, 389, 398, 441, 453, 488, 496, 498, 503, 508, 534, 535, 536, 556, 625, 640, 643, 645, 656, 658, 763, 771, 772, 777, 779, 790, 792, 793, 805, 827, 830, 833, 844, 848, 852, 859, 864, 867, 868, 869, 885, 891], "len": [0, 8, 9, 10, 11, 12, 13, 22, 25, 56, 58, 64, 68, 73, 91, 96, 150, 327, 336, 337, 380, 386, 387, 398, 420, 431, 443, 446, 456, 462, 543, 640, 648, 684, 703, 842, 843, 848, 855, 856, 859, 866, 869, 878], "expand_dim": [0, 8, 9, 25, 39, 42, 43, 58, 60, 75, 98, 647, 650, 669, 827, 856, 864, 867, 879], "astyp": [0, 25, 27, 29, 34, 56, 57, 58, 65, 72, 88, 95, 641, 647, 663, 665, 666, 669, 827, 844, 855, 856, 862, 880], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 25, 57, 58, 60, 61, 68, 69, 77, 90, 91, 100, 169, 170, 171, 172, 173, 185, 291, 295, 386, 387, 393, 432, 445, 456, 460, 462, 520, 555, 559, 641, 643, 645, 647, 652, 654, 673, 742, 745, 753, 754, 755, 785, 820, 821, 833, 834, 835, 838, 840, 844, 845, 848, 852, 855, 856, 857, 859, 860, 862, 864, 866, 868, 869, 870, 886], "return": [0, 4, 5, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 792, 793, 797, 798, 803, 805, 806, 808, 810, 815, 816, 820, 821, 822, 823, 824, 825, 827, 834, 835, 839, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 878, 879, 880, 886], "defin": [0, 34, 40, 42, 43, 44, 64, 68, 69, 73, 87, 91, 92, 96, 111, 127, 152, 156, 157, 158, 234, 251, 258, 284, 285, 293, 295, 298, 311, 315, 319, 325, 328, 329, 330, 339, 340, 341, 342, 343, 346, 347, 349, 378, 380, 383, 386, 387, 389, 398, 422, 439, 495, 501, 536, 571, 572, 592, 637, 640, 643, 645, 647, 648, 658, 672, 679, 684, 685, 697, 774, 775, 776, 778, 833, 834, 839, 840, 843, 844, 847, 851, 854, 856, 857, 859, 860, 866, 868, 870, 872, 880, 882, 883, 884, 885, 886, 889, 891, 892], "proper": [0, 827, 833, 856, 879], "adjust": [0, 56, 81, 104, 387, 458, 658, 778, 780, 815, 825], "comput": [0, 8, 9, 22, 39, 40, 42, 43, 49, 50, 55, 56, 58, 62, 67, 68, 69, 70, 72, 73, 74, 79, 81, 84, 85, 90, 91, 92, 93, 95, 96, 97, 104, 108, 109, 111, 124, 128, 224, 234, 241, 244, 246, 251, 252, 253, 258, 259, 260, 262, 263, 269, 270, 271, 278, 279, 280, 281, 283, 284, 287, 292, 293, 311, 315, 319, 325, 328, 329, 341, 342, 343, 346, 347, 349, 353, 355, 358, 360, 361, 365, 367, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 396, 398, 405, 406, 407, 408, 409, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 434, 435, 437, 439, 440, 441, 442, 444, 445, 447, 449, 452, 454, 456, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 489, 492, 505, 512, 514, 525, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 550, 551, 552, 596, 619, 626, 628, 629, 631, 635, 636, 642, 643, 645, 646, 647, 648, 649, 650, 652, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 678, 679, 683, 684, 685, 688, 689, 691, 693, 695, 697, 698, 700, 702, 704, 705, 707, 708, 709, 711, 712, 716, 738, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 787, 792, 806, 809, 821, 827, 834, 842, 843, 844, 852, 854, 856, 859, 861, 862, 864, 867, 870, 872, 875, 876, 878, 879, 881, 883, 885, 886, 888, 889, 891], "most": [0, 5, 8, 9, 25, 33, 42, 43, 85, 87, 108, 111, 152, 387, 440, 596, 619, 640, 645, 648, 683, 684, 824, 827, 832, 833, 834, 839, 842, 843, 844, 845, 849, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 870, 875, 885, 886, 888, 889, 891, 892], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 20, 21, 22, 37, 38, 40, 42, 43, 58, 69, 92, 207, 213, 215, 216, 227, 557, 642, 645, 648, 699, 791, 825, 827, 834, 835, 842, 843, 844, 845, 847, 848, 856, 859, 862, 870, 871, 874, 878, 879, 880, 890, 891], "cpu": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 37, 38, 39, 40, 42, 56, 57, 58, 60, 61, 64, 66, 68, 77, 87, 89, 91, 100, 137, 143, 146, 148, 149, 152, 153, 154, 160, 204, 205, 207, 208, 209, 210, 215, 218, 220, 222, 225, 226, 228, 230, 387, 393, 449, 519, 520, 522, 523, 640, 642, 654, 752, 753, 754, 755, 787, 805, 806, 807, 808, 809, 810, 811, 825, 827, 831, 834, 835, 841, 844, 845, 849, 856, 859, 870, 883, 885, 888, 890], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 56, 58, 60, 61, 207, 209, 210, 213, 216, 218, 220, 222, 223, 226, 228, 230, 642, 825, 827, 834, 835, 843, 845, 866, 871, 883, 885, 888, 889, 890], "tpu": [0, 56, 205, 211, 220, 222, 227, 642, 825, 845, 885, 888], "explicitli": [0, 648, 684, 685, 700, 787, 806, 807, 808, 831, 838, 839, 840, 842, 844, 847, 848, 849, 852, 853, 854, 855, 857, 859, 864, 870, 879, 885], "hardwar": [0, 4, 5, 56, 113, 117, 834, 862, 875, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891], "mai": [0, 1, 8, 9, 66, 67, 68, 73, 79, 80, 89, 90, 96, 103, 113, 114, 137, 144, 155, 225, 251, 252, 258, 263, 271, 279, 280, 284, 285, 287, 302, 346, 347, 383, 415, 555, 591, 640, 642, 643, 645, 648, 656, 657, 658, 696, 705, 763, 764, 765, 766, 767, 770, 774, 775, 776, 778, 790, 821, 832, 833, 834, 835, 838, 842, 843, 844, 848, 849, 852, 853, 854, 856, 857, 859, 862, 865, 866, 868, 876, 892], "vari": [0, 68, 79, 108, 109, 302, 415, 556, 643, 645, 648, 656, 695, 764, 765, 766, 821, 842, 846, 856, 859, 866], "known": [0, 68, 91, 295, 387, 459, 461, 643, 805, 838, 843, 844, 856, 859], "advanc": [0, 31, 54, 834, 836, 884], "set_soft_device_mod": [0, 4, 5, 25, 29, 229, 642, 845], "section": [0, 1, 2, 8, 9, 10, 11, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 62, 68, 79, 91, 123, 386, 389, 420, 431, 481, 490, 510, 656, 763, 764, 765, 766, 827, 828, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 863, 867, 868, 880, 881, 888, 891], "binari": [0, 8, 9, 25, 37, 38, 40, 68, 69, 72, 74, 91, 95, 97, 241, 244, 246, 281, 301, 386, 388, 432, 467, 470, 643, 647, 649, 670, 674, 707], "logist": [0, 25], "gblinear": [0, 25], "booster": [0, 25], "linear": [0, 4, 5, 20, 21, 22, 29, 41, 42, 43, 54, 55, 56, 58, 61, 68, 69, 72, 84, 91, 92, 95, 121, 123, 125, 126, 129, 306, 310, 314, 316, 317, 318, 322, 364, 378, 383, 386, 389, 398, 422, 457, 495, 543, 560, 583, 637, 645, 647, 652, 674, 697, 739, 790, 792, 793, 805, 806, 827, 842, 847, 852, 853, 855, 856, 859, 862, 864, 867, 868, 869, 879, 883, 884, 885, 888], "estim": [0, 68, 91, 360, 383, 398, 533, 825], "rate": [0, 68, 70, 91, 93, 386, 393, 428, 523, 627, 630, 632, 633, 634, 646, 647, 651, 672, 729, 730, 731, 810, 843], "fine": [0, 27, 29, 42, 43, 834, 835, 844, 846, 856, 866, 869, 891], "tune": [0, 27, 29, 42, 43, 890, 891], "regular": [0, 57, 91, 387, 398, 449, 454, 537, 834, 856, 885], "term": [0, 8, 9, 22, 68, 91, 323, 330, 333, 380, 388, 467, 468, 647, 672, 673, 806, 821, 827, 835, 842, 864, 872, 874, 885], "reg_lambda": [0, 25], "reg_alpha": [0, 25], "overfit": [0, 647, 670], "compil": [0, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 37, 38, 40, 42, 43, 46, 59, 61, 302, 643, 798, 834, 856, 860, 864, 870, 872, 879, 881, 884, 885, 886, 889, 892], "param": [0, 18, 19, 23, 24, 25, 42, 56, 57, 58, 60, 85, 91, 92, 114, 546, 563, 564, 645, 812, 827, 869, 879], "n_estim": [0, 25], "100": [0, 5, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 23, 24, 25, 54, 56, 58, 64, 67, 68, 87, 90, 91, 92, 95, 112, 149, 158, 245, 285, 298, 339, 362, 371, 380, 383, 386, 387, 389, 410, 411, 456, 462, 500, 564, 572, 588, 640, 643, 645, 648, 652, 687, 738, 843, 844, 859, 867, 868, 869, 870, 875, 876, 878], "learning_r": [0, 10, 11, 22, 25], "base_margin": [0, 25], "none": [0, 4, 5, 8, 9, 12, 13, 18, 19, 22, 23, 24, 25, 42, 54, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 112, 113, 114, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 179, 181, 182, 183, 184, 186, 188, 191, 203, 206, 207, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 579, 584, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 743, 744, 745, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 793, 798, 802, 803, 805, 806, 807, 808, 809, 810, 811, 814, 815, 819, 821, 825, 827, 831, 834, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 851, 852, 855, 856, 857, 859, 860, 862, 864, 866, 868, 869, 878, 879, 880], "xgb_cl": [0, 25], "better": [0, 18, 19, 25, 45, 54, 60, 61, 833, 837, 856, 857, 860, 862, 863, 866, 867, 868, 876, 888], "ivy_cl": [0, 25], "effici": [0, 12, 13, 18, 19, 20, 21, 23, 24, 31, 32, 34, 35, 42, 43, 44, 45, 68, 73, 91, 96, 387, 388, 451, 467, 596, 619, 645, 648, 691, 827, 834, 835, 842, 852, 853, 855, 859, 861, 864, 867, 870, 879, 885, 887, 888], "fit": [0, 25, 75, 98, 650, 719, 833, 856, 864, 881, 882, 885], "magic": [0, 843], "durat": 0, "70": [0, 25, 54, 56, 68, 91, 92, 386, 408, 418, 564, 588, 648, 658, 693, 773, 875], "m": [0, 5, 18, 19, 20, 21, 22, 23, 24, 25, 42, 55, 57, 59, 61, 64, 68, 73, 77, 90, 91, 96, 100, 113, 150, 156, 157, 158, 278, 339, 340, 380, 386, 387, 388, 389, 393, 409, 440, 445, 446, 448, 449, 464, 475, 486, 487, 501, 519, 520, 521, 522, 523, 640, 648, 652, 654, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 740, 753, 754, 755, 827, 834, 835, 837, 843, 864], "per": [0, 18, 19, 23, 24, 25, 35, 56, 58, 68, 72, 91, 95, 330, 380, 386, 387, 389, 405, 406, 407, 423, 424, 425, 426, 455, 502, 647, 661, 663, 664, 665, 666, 669, 674, 806, 835, 843, 853, 856, 867], "loop": [0, 8, 9, 10, 11, 18, 19, 22, 23, 24, 25, 35, 50, 83, 91, 106, 133, 136, 386, 432, 639, 651, 729, 730, 731, 840, 870, 878], "dev": [0, 4, 5, 18, 19, 20, 21, 23, 24, 25, 35, 56, 58, 61, 66, 85, 89, 212, 219, 642, 827, 834, 845, 849, 852, 866, 868], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 56, 58, 59, 60, 68, 70, 91, 93, 392, 512, 514, 626, 627, 632, 646, 647, 651, 672, 729, 730, 731, 787, 788, 806, 807, 808, 809, 820, 827, 829, 833, 834, 837, 839, 840, 843, 845, 846, 848, 850, 851, 853, 856, 857, 864, 865, 866, 867, 868, 869, 870, 871, 878, 879, 880, 883, 885, 886, 887, 888, 890, 891, 892], "59": [0, 10, 11, 54, 67, 246, 398, 534], "04": [0, 8, 9, 22, 56, 57, 64, 70, 84, 88, 91, 93, 123, 124, 149, 176, 256, 593, 626, 627, 632, 637, 640, 641, 643, 645, 646, 790, 834, 859], "slowest": [0, 45, 68, 75, 91, 98, 389, 485, 650, 720], "took": [0, 18, 19, 90, 291], "87": [0, 25, 54, 93, 95, 245, 274, 398, 429, 534, 626, 643, 646, 790, 849], "longer": [0, 25, 834, 844, 855, 859, 885], "than": [0, 10, 11, 14, 15, 16, 17, 25, 42, 43, 45, 48, 67, 68, 69, 72, 73, 75, 77, 78, 79, 81, 85, 90, 91, 92, 95, 96, 98, 100, 101, 102, 104, 113, 114, 137, 145, 176, 224, 232, 233, 236, 237, 239, 240, 243, 245, 247, 251, 257, 258, 272, 273, 274, 275, 282, 284, 289, 293, 295, 297, 298, 302, 303, 304, 313, 323, 345, 348, 362, 369, 380, 383, 386, 387, 388, 389, 398, 408, 409, 414, 415, 418, 419, 420, 430, 431, 435, 437, 456, 462, 463, 486, 487, 534, 535, 536, 575, 576, 579, 596, 619, 640, 641, 642, 643, 645, 647, 648, 650, 654, 655, 656, 658, 672, 677, 679, 688, 689, 690, 691, 694, 705, 713, 717, 723, 755, 761, 764, 765, 766, 771, 772, 777, 778, 779, 780, 806, 821, 831, 833, 835, 838, 842, 843, 844, 846, 848, 849, 855, 856, 857, 859, 860, 861, 862, 864, 867, 868, 869, 870, 871, 875, 882, 883, 884, 885, 891, 892], "fastest": [0, 45, 68, 75, 91, 98, 387, 389, 454, 485, 650, 720], "could": [0, 8, 9, 23, 24, 42, 43, 48, 79, 656, 763, 764, 765, 766, 833, 834, 835, 838, 843, 844, 846, 853, 855, 856, 857, 859, 864, 866, 867, 868, 875, 876, 885, 890, 891], "intermedi": [0, 55, 883, 884, 885, 886, 891], "cach": [0, 5, 10, 11, 20, 21, 23, 24, 37, 38, 39, 40, 56, 58, 61, 206, 550, 642, 645, 795, 815, 850, 852, 855, 859], "400": [0, 25, 92, 95, 386, 410, 411, 564, 588, 645, 648, 687], "\u00b5": [0, 18, 19, 23, 24, 25, 35], "487": [0, 290, 643, 647, 671], "make": [0, 1, 4, 5, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 34, 42, 43, 44, 56, 60, 68, 91, 386, 430, 815, 827, 830, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 866, 867, 869, 871, 875, 876, 879, 883, 885, 886, 887, 888, 891, 892], "out": [0, 4, 5, 8, 9, 12, 13, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 54, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 174, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 428, 430, 431, 434, 435, 436, 437, 438, 439, 440, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 457, 461, 464, 465, 466, 467, 469, 470, 476, 478, 479, 480, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 547, 551, 552, 556, 557, 558, 560, 563, 564, 573, 583, 587, 588, 626, 627, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876, 878, 879, 885, 892], "respect": [0, 64, 67, 68, 70, 73, 90, 91, 93, 96, 108, 150, 231, 234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 262, 263, 270, 271, 276, 278, 280, 281, 284, 287, 293, 297, 300, 301, 311, 360, 375, 378, 383, 385, 387, 389, 392, 443, 460, 472, 512, 514, 568, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 640, 643, 645, 646, 647, 648, 651, 660, 667, 668, 674, 679, 695, 698, 729, 730, 731, 787, 790, 805, 821, 832, 833, 834, 835, 839, 840, 842, 843, 844, 845, 846, 851, 852, 854, 855, 856, 859, 860, 861, 881, 891], "kei": [0, 8, 9, 10, 11, 18, 19, 22, 35, 36, 42, 43, 58, 60, 63, 68, 72, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 179, 183, 184, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 396, 410, 411, 412, 430, 463, 464, 465, 466, 467, 468, 469, 470, 479, 480, 501, 503, 505, 507, 512, 514, 515, 516, 518, 520, 526, 533, 534, 535, 536, 545, 546, 548, 549, 551, 552, 553, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 645, 647, 651, 652, 661, 662, 663, 664, 670, 671, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 729, 730, 735, 741, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 790, 791, 797, 803, 806, 810, 827, 830, 841, 842, 843, 852, 855, 856, 857, 859, 867, 879, 885, 888, 892], "precis": [0, 25, 68, 73, 91, 96, 176, 264, 284, 291, 298, 357, 383, 387, 398, 441, 533, 596, 619, 641, 643, 645, 648, 684, 685, 689, 696, 698, 699, 705, 798, 843, 856, 861, 862, 889], "recal": [0, 25], "f1": [0, 25, 844], "score": [0, 25, 72, 95, 388, 470, 647, 675, 677, 827], "ivy_pr": [0, 25], "xgb_pred": [0, 25], "nxgbclassifi": [0, 25], "86": [0, 22, 25, 54, 77, 91, 100, 386, 398, 418, 534, 626, 646, 754, 755], "93": [0, 25, 54, 68, 90, 92, 100, 209, 298, 371, 383, 556, 557, 642, 645, 754, 755], "84": [0, 22, 54, 72, 81, 90, 100, 179, 209, 274, 641, 642, 648, 653, 658, 671, 693, 751, 754, 755, 773], "91": [0, 22, 54, 68, 95, 100, 371, 383, 429, 647, 648, 654, 658, 671, 693, 754, 773], "accuraci": [0, 8, 9, 25, 56, 58, 61, 386, 430, 844], "92": [0, 25, 54, 58, 68, 69, 100, 371, 383, 624, 634, 646, 648, 680, 754, 755], "macro": [0, 25], "avg": [0, 25, 386, 405, 407, 428], "weight": [0, 4, 5, 8, 9, 22, 25, 27, 29, 42, 43, 56, 57, 68, 70, 72, 74, 91, 93, 95, 97, 108, 109, 326, 330, 364, 380, 383, 386, 387, 398, 413, 446, 531, 533, 536, 626, 627, 630, 632, 633, 634, 646, 647, 649, 651, 671, 672, 673, 674, 677, 707, 731, 792, 805, 806, 808, 810, 825, 827, 842, 852, 859, 864, 868, 869, 884], "90": [0, 25, 54, 56, 58, 67, 68, 90, 91, 250, 290, 294, 371, 383, 389, 398, 501, 534, 643, 648, 658, 693, 773, 821, 875], "summar": [0, 42, 43, 108, 859], "perfect": [0, 827], "fals": [0, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 29, 33, 34, 42, 45, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 207, 208, 213, 215, 218, 219, 221, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 380, 383, 384, 386, 387, 388, 389, 392, 398, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 525, 526, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 583, 587, 588, 589, 592, 595, 596, 598, 599, 601, 602, 603, 604, 606, 608, 610, 611, 613, 618, 619, 621, 622, 624, 627, 628, 630, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 742, 743, 744, 745, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 788, 790, 791, 792, 793, 798, 802, 803, 806, 807, 808, 810, 812, 815, 820, 821, 822, 825, 827, 831, 834, 838, 840, 843, 844, 845, 846, 848, 849, 855, 856, 857, 859, 861, 862, 864, 867, 868, 869, 878, 879], "posit": [0, 58, 60, 63, 67, 68, 69, 73, 74, 75, 90, 91, 92, 96, 97, 98, 108, 143, 145, 158, 176, 231, 232, 233, 237, 240, 251, 258, 265, 266, 272, 274, 284, 285, 292, 293, 297, 298, 302, 324, 339, 345, 350, 362, 380, 383, 387, 389, 438, 458, 469, 494, 503, 550, 560, 625, 638, 640, 641, 643, 645, 648, 649, 650, 654, 655, 659, 678, 681, 702, 707, 716, 721, 756, 761, 781, 782, 787, 790, 798, 803, 807, 808, 821, 833, 835, 838, 842, 856, 859, 860, 867, 878, 887], "excel": [0, 8, 9, 892], "high": [0, 8, 9, 33, 42, 43, 61, 68, 72, 77, 91, 95, 100, 386, 429, 433, 596, 645, 647, 654, 660, 661, 662, 663, 665, 667, 669, 753, 755, 792, 830, 833, 848, 854, 856, 867, 872, 876, 881, 882, 883, 884, 885, 889, 891, 892], "show": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 31, 37, 42, 43, 44, 45, 47, 54, 56, 58, 59, 590, 599, 622, 645, 827, 833, 834, 835, 841, 843, 846, 850, 855, 856, 859, 861, 870, 878, 885], "trade": [0, 878], "off": [0, 22, 35, 45, 72, 73, 95, 96, 410, 411, 412, 647, 648, 670, 682, 702, 805, 806, 834, 849, 863, 876, 878, 891], "wa": [0, 14, 15, 22, 42, 43, 48, 57, 68, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 111, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 369, 370, 372, 373, 374, 380, 383, 387, 410, 411, 412, 430, 461, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 501, 503, 504, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 612, 624, 630, 635, 643, 645, 652, 658, 659, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 815, 827, 829, 835, 838, 840, 841, 843, 846, 852, 854, 856, 864, 866, 875, 878, 879, 884, 885, 887], "overal": [0, 647, 670, 821, 842, 844, 845, 847, 869, 878, 881, 883, 884, 885], "slightli": [0, 25, 323, 380, 842, 856, 859, 864, 868], "lower": [0, 25, 58, 64, 67, 68, 73, 77, 90, 91, 96, 100, 143, 156, 282, 318, 324, 330, 339, 340, 378, 380, 398, 536, 537, 543, 640, 643, 648, 654, 678, 684, 685, 691, 755, 792, 805, 835, 844, 846, 856, 859, 864, 870, 872, 881, 882, 883, 885, 886, 891, 892], "good": [0, 33, 42, 43, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 857, 859, 860, 862, 864, 865, 868], "due": [0, 35, 42, 43, 45, 59, 61, 284, 294, 389, 503, 643, 834, 838, 843, 848, 855, 856, 875, 878, 879, 885], "97": [0, 20, 21, 25, 54, 68, 70, 90, 93, 100, 237, 371, 383, 630, 643, 646, 754], "suggest": [0, 1, 8, 9, 22, 833, 834, 835, 841, 844, 850, 854, 856, 859, 860, 861, 871], "slight": [0, 42, 43, 844, 859, 868], "edg": [0, 60, 68, 75, 91, 98, 330, 380, 386, 389, 398, 422, 495, 536, 650, 713, 715, 728, 793, 838, 859, 879, 885, 887, 891], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 18, 19, 22, 42, 43, 46, 47, 48, 49, 387, 447, 827, 835, 842, 844, 848, 852, 859, 863, 865, 869, 870, 872, 879, 890, 892], "design": [0, 1, 8, 9, 25, 33, 42, 91, 258, 323, 328, 329, 380, 643, 827, 830, 837, 841, 843, 844, 855, 856, 857, 858, 862, 864, 866, 870, 874, 875, 881, 883, 885, 888, 889, 890], "heatmap": 0, "seaborn": [0, 58], "aesthet": 0, "appeal": 0, "eas": [0, 854, 885], "plot_classification_report": 0, "argument": [0, 8, 9, 14, 15, 22, 37, 39, 40, 42, 43, 45, 47, 48, 49, 54, 56, 58, 60, 63, 64, 67, 68, 69, 73, 85, 86, 90, 91, 92, 108, 109, 114, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 191, 220, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 339, 340, 346, 347, 349, 352, 354, 355, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 423, 424, 425, 430, 432, 434, 441, 495, 503, 507, 533, 536, 540, 546, 547, 549, 550, 555, 557, 558, 563, 567, 569, 571, 573, 583, 587, 588, 602, 606, 611, 612, 625, 635, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 672, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 738, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 798, 803, 806, 807, 808, 815, 820, 823, 827, 833, 837, 838, 839, 840, 841, 842, 846, 847, 850, 852, 857, 859, 860, 862, 864, 866, 867, 872, 874, 878, 879, 880, 885], "plot": [0, 8, 9, 10, 11, 22, 25, 57, 885], "color": [0, 57, 85, 114, 826], "represent": [0, 60, 68, 69, 85, 91, 92, 114, 161, 162, 176, 179, 204, 205, 231, 234, 241, 244, 246, 251, 258, 281, 284, 286, 301, 327, 359, 363, 368, 372, 380, 383, 546, 608, 638, 641, 642, 643, 645, 790, 792, 793, 806, 844, 883, 884, 886, 890, 891], "easi": [0, 1, 42, 43, 56, 834, 835, 839, 840, 842, 852, 854, 857, 859, 862, 875, 883, 885, 891, 892], "assess": [0, 35, 45, 833, 862], "side": [0, 80, 103, 361, 383, 387, 457, 657, 769, 790, 806, 820, 821, 834, 835, 841], "pyplot": [0, 8, 9, 10, 11, 22, 25, 56, 57, 58, 61], "plt": [0, 8, 9, 10, 11, 22, 25, 56, 57, 58, 61], "sn": 0, "model_nam": [0, 8, 9, 58], "ax": [0, 22, 57, 62, 68, 73, 75, 78, 81, 82, 84, 91, 96, 98, 101, 104, 105, 113, 117, 124, 128, 224, 346, 347, 351, 352, 367, 374, 383, 384, 386, 387, 389, 392, 398, 415, 420, 431, 457, 494, 495, 501, 515, 538, 539, 540, 541, 542, 543, 556, 625, 642, 645, 648, 650, 655, 658, 659, 679, 689, 697, 700, 701, 705, 715, 717, 718, 721, 723, 725, 728, 758, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 792, 806, 844, 846, 859, 860, 864, 866], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 54, 56, 57, 58, 68, 72, 83, 91, 95, 106, 108, 109, 113, 360, 375, 383, 385, 387, 441, 573, 591, 606, 628, 645, 646, 647, 652, 671, 673, 740, 785, 806, 827, 829, 830, 833, 834, 835, 837, 839, 840, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 855, 859, 860, 862, 864, 866, 867, 868, 869, 870, 871, 875, 876, 878, 879, 880, 883, 885, 887], "annot": [0, 851], "fmt": 0, "2f": [0, 6, 7, 18, 19, 22], "cmap": 0, "blue": 0, "set_titl": [0, 22, 57, 58], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 42, 43, 55, 56, 58, 68, 75, 91, 98, 313, 330, 378, 380, 389, 485, 506, 650, 652, 720, 735, 739, 740, 741, 744, 749, 750, 828, 835, 837, 842, 843, 848, 860, 864, 866, 867, 876, 881], "figur": [0, 22, 57, 861], "fig": [0, 22, 57, 58], "ax1": [0, 58], "ax2": [0, 58], "subplot": [0, 22, 57, 58], "figsiz": [0, 57, 58], "tight_layout": [0, 58], "observ": [0, 25, 68, 91, 398, 532, 533, 835, 844, 848, 864, 878, 887], "exhibit": [0, 45, 891], "strong": [0, 792, 870, 875, 885], "commend": 0, "impli": [0, 79, 656, 763, 764, 765, 766, 859], "neg": [0, 62, 67, 68, 73, 75, 77, 82, 84, 90, 91, 96, 98, 100, 105, 108, 123, 126, 129, 137, 143, 145, 158, 251, 258, 265, 266, 284, 285, 293, 298, 306, 324, 339, 342, 378, 380, 387, 388, 389, 393, 438, 445, 451, 468, 503, 507, 523, 637, 640, 643, 648, 650, 654, 659, 679, 681, 698, 702, 704, 705, 714, 716, 717, 721, 754, 781, 782, 790, 792, 802, 842, 855], "depend": [0, 5, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 47, 64, 65, 68, 69, 73, 79, 80, 88, 91, 96, 103, 104, 134, 140, 163, 231, 232, 233, 236, 237, 238, 239, 248, 249, 251, 254, 256, 272, 273, 274, 275, 284, 286, 289, 296, 297, 301, 302, 370, 383, 386, 387, 432, 440, 458, 606, 639, 640, 641, 643, 645, 647, 648, 655, 657, 672, 683, 684, 695, 696, 697, 698, 762, 767, 770, 780, 829, 831, 833, 834, 835, 841, 844, 845, 847, 849, 853, 855, 856, 857, 858, 859, 862, 864, 870, 871, 875, 878, 883, 885, 886], "applic": [0, 8, 9, 29, 31, 56, 58, 61, 68, 72, 91, 95, 111, 387, 462, 647, 648, 652, 658, 674, 677, 702, 738, 739, 740, 744, 745, 777, 779, 827, 834, 843, 844, 845, 853, 868, 882, 883, 885, 887, 889, 891], "conclus": 0, "appear": [0, 389, 486, 487, 625, 645, 834, 835, 838, 856, 862, 878], "outperform": [0, 25], "especi": [0, 10, 11, 834, 840, 850, 874, 885], "increas": [0, 18, 19, 23, 24, 25, 35, 42, 45, 68, 73, 75, 91, 96, 98, 111, 389, 398, 495, 536, 648, 650, 703, 715, 728, 792, 844, 848, 856, 860, 862, 874, 878, 885], "context": [0, 336, 380, 584, 645, 833, 834, 835, 840, 844, 845, 846], "specif": [0, 8, 9, 10, 11, 22, 33, 34, 39, 40, 42, 43, 44, 46, 48, 56, 66, 68, 69, 89, 91, 92, 191, 222, 225, 258, 279, 280, 289, 333, 346, 347, 380, 383, 389, 393, 503, 523, 556, 557, 558, 584, 641, 642, 643, 645, 648, 650, 651, 654, 657, 658, 684, 685, 700, 724, 729, 730, 731, 752, 769, 774, 775, 776, 778, 785, 787, 807, 808, 815, 816, 823, 825, 827, 830, 831, 833, 834, 835, 838, 839, 840, 841, 842, 844, 845, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 868, 869, 870, 871, 872, 874, 878, 879, 880, 881, 883, 884, 886, 887, 888, 892], "problem": [0, 10, 11, 22, 827, 830, 833, 835, 838, 839, 845, 856, 866, 875, 881, 887, 891], "domain": [0, 232, 233, 236, 237, 238, 239, 248, 249, 254, 256, 272, 273, 275, 296, 297, 298, 301, 302, 370, 383, 643, 847, 883, 885], "repo": [1, 27, 56, 832, 835, 838, 841, 843, 844, 849, 857, 859, 874], "hold": [1, 68, 69, 73, 81, 91, 96, 104, 108, 109, 345, 362, 367, 383, 398, 481, 510, 534, 535, 540, 587, 588, 645, 648, 658, 689, 772, 788, 836, 867, 886], "exampl": [1, 8, 9, 10, 11, 14, 15, 18, 19, 22, 23, 24, 33, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 341, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 405, 406, 407, 408, 410, 411, 413, 414, 415, 418, 419, 420, 423, 424, 425, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 452, 454, 457, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 492, 494, 495, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 515, 516, 518, 521, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 798, 815, 820, 821, 825, 827, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 852, 853, 855, 856, 860, 864, 866, 867, 868, 869, 870, 876, 882, 883, 886, 888, 891, 892], "tab": [1, 833, 834, 843, 849, 867], "ivi": [1, 2, 3, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 56, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 834, 837, 838, 840, 842, 844, 845, 847, 849, 850, 851, 852, 853, 855, 862, 863, 870, 872, 875, 876, 877, 881, 892, 893], "web": 1, "relev": [1, 64, 87, 149, 640, 810, 833, 834, 835, 839, 842, 843, 844, 846, 849, 853, 854, 857, 858, 859, 867, 871, 875, 883, 890, 891], "link": [1, 33, 42, 43, 57, 827, 833, 834, 835, 841, 843, 844, 850, 856, 879, 881, 883], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 39, 42, 43, 56, 57, 58, 59, 69, 77, 100, 137, 640, 654, 753, 755, 827, 828, 829, 830, 834, 835, 836, 841, 844, 847, 849, 856, 857, 862, 871, 874, 875, 876, 878, 879, 883, 884, 885, 887, 888], "avil": 1, "discuss": [1, 833, 835, 841, 844, 845, 855, 856, 858, 859, 862, 865, 866, 867, 870, 876, 881, 886], "comprehens": [1, 31, 827, 835, 838, 858], "possibl": [1, 4, 5, 48, 64, 68, 87, 91, 98, 108, 139, 258, 301, 323, 346, 347, 380, 383, 386, 388, 389, 409, 464, 473, 474, 475, 481, 483, 485, 486, 487, 494, 510, 583, 643, 645, 647, 658, 670, 716, 717, 718, 720, 722, 723, 725, 727, 774, 776, 790, 806, 818, 821, 824, 828, 831, 833, 834, 835, 838, 841, 842, 844, 846, 847, 849, 850, 852, 854, 855, 856, 857, 859, 862, 864, 867, 870, 875, 883, 885, 891], "us": [1, 2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 78, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 104, 106, 108, 109, 111, 114, 121, 149, 152, 163, 175, 177, 178, 189, 190, 210, 211, 213, 218, 222, 223, 224, 225, 227, 230, 236, 244, 272, 273, 275, 276, 278, 279, 280, 282, 283, 285, 294, 298, 303, 323, 325, 326, 328, 329, 330, 338, 360, 363, 364, 367, 380, 383, 386, 387, 388, 389, 392, 393, 394, 396, 398, 405, 406, 407, 409, 410, 411, 412, 413, 415, 420, 422, 423, 424, 425, 428, 430, 431, 432, 434, 439, 441, 445, 451, 453, 455, 456, 458, 459, 460, 462, 463, 468, 485, 489, 493, 495, 503, 507, 512, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 533, 540, 543, 561, 562, 571, 572, 583, 584, 591, 593, 594, 596, 603, 604, 616, 617, 619, 626, 627, 632, 633, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 671, 672, 674, 677, 682, 684, 691, 695, 699, 702, 705, 707, 719, 720, 721, 725, 729, 730, 731, 732, 734, 735, 741, 742, 743, 745, 752, 753, 754, 755, 757, 758, 759, 760, 763, 765, 773, 775, 788, 790, 791, 792, 793, 798, 802, 803, 805, 806, 807, 808, 809, 810, 815, 820, 821, 825, 828, 830, 832, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 876, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "attract": 1, "visual": [1, 8, 9, 10, 11, 25, 60, 825, 834, 849, 856, 859, 870, 885, 887, 890], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 25, 31, 32, 35, 37, 39, 40, 43, 49, 50, 55, 60, 61, 79, 656, 763, 764, 765, 766, 798, 827, 842, 852, 856, 858, 862, 864, 869, 870, 872, 876, 877, 878, 879, 880, 881, 885, 888], "nice": [1, 859, 876, 885], "etc": [1, 45, 50, 57, 64, 68, 77, 79, 83, 87, 91, 100, 106, 140, 148, 149, 152, 386, 393, 415, 420, 431, 519, 520, 522, 523, 640, 654, 656, 752, 753, 754, 755, 763, 764, 765, 766, 790, 793, 805, 806, 807, 808, 809, 810, 811, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 846, 848, 851, 856, 857, 859, 860, 864, 866, 867, 870, 872, 876, 878, 883, 885, 891], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 22, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 871, 878], "free": [1, 8, 9, 10, 11, 12, 13, 22, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 871, 878, 886, 888], "emoji": [1, 833], "don": [1, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 56, 58, 83, 106, 827, 833, 834, 835, 843, 844, 845, 850, 854, 859, 862, 868, 870, 871, 876, 878], "keep": [1, 2, 27, 29, 33, 39, 40, 42, 68, 75, 85, 91, 98, 108, 111, 371, 387, 462, 650, 727, 832, 833, 834, 835, 838, 841, 842, 843, 848, 855, 856, 859, 860, 862, 867, 869, 871, 879], "thing": [1, 10, 11, 40, 54, 56, 820, 832, 833, 834, 835, 840, 856, 859, 862, 866, 867, 874, 875, 876, 885], "super": [1, 4, 5, 12, 13, 27, 29, 42, 43, 56, 68, 91, 387, 441, 827, 848, 864, 867, 868, 869, 879], "seriou": 1, "given": [1, 4, 5, 10, 11, 33, 42, 55, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 137, 141, 148, 149, 169, 170, 171, 172, 173, 185, 190, 209, 218, 222, 223, 224, 226, 230, 303, 333, 342, 345, 351, 352, 360, 361, 362, 364, 367, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 431, 441, 446, 461, 465, 466, 467, 469, 470, 471, 472, 482, 483, 484, 491, 493, 505, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 533, 534, 535, 536, 542, 564, 568, 587, 588, 598, 626, 627, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 706, 707, 708, 709, 713, 716, 717, 718, 719, 721, 722, 726, 727, 739, 740, 749, 750, 753, 754, 755, 757, 769, 770, 771, 772, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 865, 866, 868, 875, 876, 882, 887, 888, 891, 892], "intern": [1, 25, 85, 116, 117, 118, 652, 732, 742, 743, 805, 806, 807, 808, 809, 811, 836, 839, 842, 845, 847, 855, 857, 859, 861], "releas": [1, 8, 9, 57, 833, 834, 844, 860, 862, 870, 876, 885, 891], "tracer": [1, 4, 5, 12, 13, 20, 21, 23, 24, 34, 37, 38, 39, 40, 43, 59, 61, 856, 863, 865, 870, 872, 879, 880, 881], "around": [1, 26, 27, 29, 31, 68, 85, 91, 114, 389, 495, 503, 833, 835, 838, 839, 841, 845, 851, 852, 856, 859, 860, 866, 870, 872, 878, 882, 883, 885, 892], "corner": [1, 68, 91, 386, 422, 834, 835, 849, 856], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 22, 44, 48, 59, 61, 85, 108, 834, 835, 836, 838, 844, 849, 852, 855, 856, 860, 864, 869, 878, 888, 891], "start": [1, 2, 8, 9, 10, 11, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 57, 58, 64, 68, 85, 87, 91, 95, 137, 145, 148, 149, 364, 374, 383, 384, 386, 389, 398, 429, 485, 488, 496, 498, 508, 542, 640, 792, 820, 825, 828, 833, 834, 835, 836, 837, 843, 844, 846, 847, 849, 850, 851, 856, 859, 862, 863, 864, 866, 867, 868, 870, 878, 879, 885, 891], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 54, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 383, 386, 389, 396, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 647, 652, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 698, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 743, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 821, 827, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 874, 875, 878, 879, 880, 885, 886, 887, 889], "worri": [1, 42, 43, 833, 834, 850], "about": [1, 31, 32, 33, 36, 38, 40, 42, 43, 46, 57, 58, 65, 88, 176, 179, 641, 825, 827, 829, 832, 833, 834, 835, 836, 837, 838, 841, 843, 844, 845, 850, 851, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 876, 880, 886, 887, 890], "transpil": [1, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 31, 32, 34, 35, 45, 797, 798, 827, 833, 834, 848, 849, 856, 863, 864, 865, 872, 877, 878, 880, 885, 891, 892], "style": [1, 25, 56, 58, 389, 495, 655, 761, 835, 850, 885], "stori": 1, "anyon": [1, 828, 835, 843, 870, 875, 891], "ha": [1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 21, 22, 23, 24, 25, 27, 29, 33, 35, 39, 42, 43, 45, 48, 50, 54, 61, 64, 68, 73, 75, 79, 81, 85, 88, 91, 92, 96, 98, 102, 104, 108, 150, 207, 231, 251, 254, 256, 258, 268, 284, 286, 291, 294, 296, 297, 301, 341, 342, 343, 380, 387, 388, 389, 398, 422, 457, 467, 478, 502, 504, 509, 532, 534, 535, 537, 569, 640, 642, 643, 647, 648, 650, 655, 656, 658, 673, 674, 688, 689, 697, 698, 700, 702, 705, 716, 723, 761, 764, 765, 766, 771, 772, 775, 777, 778, 779, 780, 787, 790, 793, 815, 833, 835, 838, 840, 841, 842, 843, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 868, 869, 870, 871, 874, 875, 876, 878, 880, 881, 884, 885, 887, 888, 891], "question": [1, 8, 9, 10, 11, 22, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 874, 875, 876], "ping": 1, "me": [1, 835], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 22, 57, 828, 833, 834, 835, 836, 870, 875, 884, 885, 887], "ux": 1, "team": [1, 827, 828, 830, 833, 834, 835, 836, 856, 871, 887], "discord": [1, 8, 9, 10, 11, 22, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876], "channel": [1, 40, 58, 68, 69, 72, 91, 92, 95, 386, 392, 410, 411, 412, 422, 512, 513, 514, 517, 556, 560, 645, 647, 649, 661, 662, 663, 664, 665, 666, 669, 710, 806, 809, 835, 841, 849, 858], "templat": [1, 827, 841, 847, 859], "locat": [1, 58, 152, 398, 534, 640, 652, 654, 657, 736, 752, 769, 821, 833, 835, 840, 841, 845, 856, 857, 859, 860, 871, 883], "asset": [1, 872], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 48, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 871, 874, 875, 876], "copi": [1, 58, 61, 64, 65, 66, 67, 68, 69, 75, 85, 87, 88, 89, 90, 91, 92, 98, 108, 112, 138, 139, 140, 144, 155, 163, 225, 285, 389, 471, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 510, 566, 592, 603, 610, 611, 640, 641, 642, 643, 645, 650, 652, 657, 716, 717, 718, 720, 722, 723, 725, 727, 733, 768, 770, 798, 821, 834, 835, 838, 840, 843, 844, 847, 856, 857, 864, 870, 878, 879, 880], "firstli": [1, 34, 35, 38, 44, 45, 49, 54, 839, 844, 846, 847, 848, 852, 853, 855, 862, 867, 881, 891], "file": [1, 5, 8, 9, 10, 11, 22, 56, 57, 58, 69, 85, 600, 623, 645, 808, 825, 829, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 856, 857, 858, 859, 860, 864, 867, 871, 881, 884, 885, 886], "topic": [1, 31, 34, 35, 36, 44, 45, 46, 47, 48, 49, 853, 866, 885], "Then": [1, 61, 647, 674, 829, 833, 834, 835, 840, 841, 843, 849, 850, 853, 855, 859, 860, 870], "place": [1, 10, 11, 20, 21, 23, 24, 37, 38, 39, 40, 56, 63, 64, 67, 68, 69, 73, 75, 85, 87, 89, 90, 91, 92, 96, 98, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 323, 324, 327, 339, 340, 345, 346, 347, 349, 352, 353, 354, 355, 359, 361, 362, 363, 364, 366, 367, 368, 372, 373, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 485, 495, 500, 503, 507, 520, 533, 536, 540, 549, 557, 558, 563, 567, 569, 571, 572, 573, 587, 591, 602, 606, 611, 615, 635, 640, 641, 642, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 810, 827, 831, 832, 835, 837, 838, 841, 842, 843, 845, 846, 847, 849, 851, 852, 856, 857, 859, 860, 862, 869, 872, 887], "folder": [1, 5, 20, 21, 23, 24, 37, 38, 39, 40, 58, 834, 835, 838, 841, 843, 849, 852, 856, 859, 860, 861], "edit": [1, 833, 834, 835, 850], "titl": [1, 22, 25, 28, 30, 41, 57, 60, 827, 833, 835, 841], "accordingli": [1, 68, 73, 78, 79, 81, 82, 91, 96, 101, 104, 105, 150, 251, 256, 258, 274, 284, 298, 346, 347, 383, 640, 643, 648, 655, 656, 658, 659, 705, 759, 763, 764, 765, 766, 774, 775, 776, 777, 778, 779, 780, 781, 782, 856, 864, 871], "render": [1, 841, 847], "webpag": [1, 31], "content": [1, 2, 22, 28, 30, 41, 42, 57, 58, 68, 85, 91, 398, 540, 833, 835, 841, 845, 855, 858, 864, 867, 871], "behind": [1, 33, 42, 827, 837, 851, 859, 863, 865], "exist": [1, 33, 42, 43, 56, 57, 58, 61, 64, 68, 69, 85, 87, 91, 92, 98, 139, 389, 473, 474, 480, 481, 483, 485, 486, 487, 494, 510, 555, 591, 645, 650, 714, 716, 717, 718, 720, 722, 723, 725, 727, 810, 812, 825, 827, 833, 834, 838, 840, 845, 846, 847, 852, 853, 855, 856, 859, 862, 864, 870, 872, 874, 875, 883, 885, 888, 891], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 57, 72, 95, 647, 672, 673, 806, 843, 864], "h2": [1, 2, 28, 30, 41], "tag": [1, 2, 28, 30, 41, 834, 835], "h3": [1, 2, 28, 30, 41], "subsect": [1, 2, 28, 30, 41, 833, 834, 835, 838, 843], "explan": [1, 2, 28, 30, 41, 833, 834, 835, 842, 847, 851, 856, 860, 866], "go": [1, 6, 7, 8, 9, 10, 11, 22, 27, 29, 33, 40, 43, 48, 63, 68, 91, 95, 386, 429, 433, 652, 743, 744, 827, 828, 831, 833, 834, 835, 837, 840, 841, 844, 846, 849, 850, 856, 857, 859, 860, 863, 867, 870, 881, 885, 886, 890, 892], "default": [1, 4, 5, 8, 9, 12, 13, 42, 43, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 183, 184, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 210, 211, 215, 218, 219, 220, 222, 223, 224, 225, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 579, 580, 583, 584, 587, 588, 591, 592, 597, 601, 602, 603, 604, 606, 608, 610, 611, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 742, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 791, 792, 793, 798, 802, 803, 805, 806, 807, 808, 809, 810, 811, 820, 821, 825, 833, 834, 835, 840, 841, 844, 845, 846, 847, 848, 851, 852, 856, 859, 862, 864, 868, 872, 878, 885], "text": [1, 6, 7, 8, 9, 20, 21, 25, 56, 68, 69, 387, 388, 455, 463, 833, 835, 841, 846, 847], "paragraph": [1, 2, 28, 30, 41, 841], "p": [1, 2, 28, 30, 41, 54, 68, 69, 73, 91, 92, 96, 109, 150, 255, 387, 392, 437, 450, 518, 551, 552, 640, 643, 645, 648, 652, 689, 705, 740, 806, 827, 834, 835, 837], "path": [1, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 57, 58, 787, 798, 814, 834, 841, 855, 856, 857, 871, 885], "correspond": [1, 4, 5, 18, 19, 23, 24, 29, 42, 43, 57, 65, 67, 68, 69, 72, 75, 78, 79, 81, 85, 88, 90, 91, 95, 98, 104, 108, 111, 114, 164, 176, 179, 239, 289, 303, 342, 356, 357, 380, 383, 386, 387, 389, 392, 398, 409, 415, 426, 431, 437, 440, 441, 442, 461, 486, 487, 507, 512, 513, 514, 517, 534, 535, 603, 625, 641, 643, 645, 647, 648, 650, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 674, 679, 683, 684, 689, 696, 697, 720, 721, 752, 758, 759, 763, 764, 765, 766, 771, 772, 777, 778, 779, 780, 787, 790, 792, 820, 825, 827, 833, 835, 839, 840, 842, 843, 844, 846, 847, 848, 851, 852, 854, 856, 859, 862, 864, 878, 879, 880, 885], "toctre": [1, 841], "index": [1, 56, 57, 58, 61, 64, 68, 69, 75, 78, 79, 80, 85, 87, 91, 92, 98, 101, 102, 103, 143, 150, 324, 331, 332, 341, 342, 343, 380, 386, 387, 389, 394, 396, 398, 409, 415, 446, 448, 455, 478, 485, 488, 496, 498, 500, 503, 504, 507, 508, 524, 525, 534, 543, 546, 564, 566, 587, 588, 592, 638, 640, 645, 649, 650, 652, 655, 656, 657, 710, 720, 724, 734, 735, 736, 739, 740, 741, 747, 749, 758, 759, 761, 763, 764, 765, 767, 769, 791, 806, 821, 823, 842, 843, 848, 852, 853, 854, 855, 857, 859, 866, 885], "rst": [1, 852], "left": [1, 35, 45, 56, 57, 68, 73, 78, 80, 91, 96, 101, 103, 131, 132, 243, 258, 351, 367, 374, 383, 384, 386, 387, 389, 398, 421, 440, 445, 451, 458, 460, 486, 496, 538, 539, 540, 541, 542, 543, 556, 639, 643, 645, 648, 655, 657, 683, 684, 689, 698, 703, 758, 769, 790, 834, 835, 838, 841, 843, 844, 846, 849], "add": [1, 35, 45, 58, 60, 67, 68, 76, 83, 85, 90, 91, 99, 106, 113, 114, 374, 384, 386, 388, 429, 468, 583, 612, 643, 645, 647, 648, 653, 658, 674, 702, 751, 779, 787, 798, 806, 809, 825, 827, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 855, 856, 859, 860, 862, 864, 866, 870, 871, 881, 882, 883, 885], "grid": [1, 22, 58, 64, 150, 327, 380, 640, 846, 859], "item": [1, 6, 7, 8, 9, 10, 11, 42, 43, 54, 56, 58, 63, 69, 83, 85, 87, 90, 91, 92, 145, 170, 207, 261, 277, 285, 352, 356, 369, 553, 563, 564, 568, 603, 604, 640, 641, 642, 645, 652, 659, 737, 738, 739, 740, 744, 749, 750, 784, 833, 842, 844, 864, 866, 867, 869, 878], "card": [1, 68, 91, 371, 383, 890], "refer": [1, 12, 13, 68, 75, 81, 82, 91, 93, 98, 104, 105, 143, 158, 256, 274, 324, 339, 369, 380, 383, 386, 387, 389, 415, 420, 431, 438, 462, 485, 626, 627, 640, 643, 646, 648, 650, 658, 659, 679, 681, 704, 720, 778, 780, 781, 782, 806, 827, 832, 833, 834, 835, 838, 839, 841, 843, 844, 851, 852, 853, 854, 855, 856, 857, 858, 859, 870, 871, 872, 885], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 22, 23, 24, 25, 27, 29, 33, 35, 37, 38, 40, 42, 43, 45, 47, 48, 49, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 179, 182, 183, 184, 186, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 383, 386, 387, 389, 396, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 640, 641, 643, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 742, 743, 744, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 805, 806, 815, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 867, 868, 869, 870, 871, 874, 875, 878, 879, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892], "look": [1, 8, 9, 10, 11, 12, 13, 22, 33, 42, 43, 56, 58, 61, 827, 831, 833, 834, 835, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 856, 857, 859, 860, 861, 862, 864, 866, 868, 869, 871, 874, 878, 881, 885], "document": [1, 5, 8, 9, 10, 11, 22, 33, 42, 75, 258, 346, 347, 383, 625, 643, 645, 724, 828, 829, 832, 835, 841, 843, 844, 846, 855, 856, 857, 859, 867, 869], "sphinx": [1, 829, 841], "websit": [1, 60, 827, 834, 838, 875], "alreadi": [2, 5, 8, 9, 22, 23, 24, 34, 37, 38, 39, 40, 42, 43, 48, 56, 58, 61, 68, 73, 85, 91, 96, 247, 257, 284, 294, 304, 389, 398, 474, 475, 495, 531, 540, 643, 648, 686, 693, 820, 821, 833, 834, 835, 840, 842, 844, 845, 851, 855, 856, 862, 870, 871, 885, 887, 892], "instal": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 56, 58, 59, 60, 61, 829, 834, 835, 840, 841, 849, 850], "skip": [2, 6, 7, 22, 58, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 387, 389, 410, 411, 412, 430, 446, 448, 455, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 496, 499, 501, 503, 504, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 652, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 791, 820, 841, 852, 859], "colab": [2, 6, 7, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 56, 58, 60, 61], "manual": [2, 8, 9, 10, 11, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 652, 732, 742, 743, 833, 834, 835, 844, 850, 859, 868, 871], "mind": [2, 27, 29, 33, 39, 42, 46, 833, 834, 839, 842, 859, 871, 879], "click": [2, 4, 5, 58, 833, 834, 835, 843, 847, 849, 850, 865], "runtim": [2, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 22, 23, 24, 35, 42, 45, 56, 57, 837, 852, 859, 862, 885], "restart": [2, 4, 5, 6, 7, 12, 13, 20, 21, 22, 56, 57, 834, 849], "git": [2, 4, 5, 6, 7, 12, 13, 20, 21, 42, 56, 57, 58, 59, 827, 829, 832, 834, 835, 838, 841, 843, 849, 850, 859, 871], "clone": [2, 4, 5, 12, 13, 20, 21, 42, 56, 58, 59, 827, 829, 835, 849, 871], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 29, 37, 38, 39, 40, 42, 43, 56, 57, 58, 59, 60, 61, 67, 68, 90, 91, 93, 158, 166, 254, 264, 265, 280, 339, 346, 347, 380, 383, 386, 389, 398, 430, 503, 533, 626, 627, 640, 641, 643, 646, 648, 650, 658, 696, 697, 728, 778, 827, 829, 834, 835, 838, 841, 843, 844, 847, 849, 871, 879], "github": [2, 4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 23, 24, 42, 56, 57, 58, 59, 60, 827, 829, 830, 832, 835, 836, 838, 841, 843, 844, 846, 847, 849, 850, 858, 859, 871, 874, 893], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 23, 24, 29, 42, 56, 57, 58, 59, 60, 827, 829, 834, 835, 838, 841, 843, 844, 849, 871], "unifyai": [2, 4, 5, 12, 13, 20, 21, 42, 56, 57, 58, 59, 60, 827, 829, 834, 835, 841, 849, 871], "model": [2, 3, 4, 5, 14, 15, 25, 26, 31, 32, 33, 59, 61, 251, 284, 388, 464, 643, 803, 807, 808, 825, 827, 867, 868, 872, 878, 879, 883, 884, 885, 886, 887, 888, 889, 891, 892], "depth": [2, 4, 5, 8, 9, 12, 13, 20, 21, 57, 64, 68, 72, 87, 91, 95, 152, 386, 389, 422, 482, 556, 568, 640, 645, 647, 665, 666, 835, 843, 867, 868, 869, 871], "repositori": [2, 4, 5, 12, 13, 20, 21, 829, 833, 834, 835, 837, 838, 841, 849, 858, 876], "cd": [2, 4, 5, 12, 13, 20, 21, 42, 59, 827, 829, 834, 835, 849, 871], "resnet": [3, 8, 9, 23, 24, 31, 42, 878, 879], "imag": [3, 4, 5, 8, 9, 10, 11, 18, 19, 23, 24, 27, 31, 39, 42, 43, 56, 57, 58, 59, 60, 61, 68, 72, 90, 91, 95, 113, 231, 232, 233, 234, 237, 240, 249, 252, 254, 256, 265, 266, 267, 272, 274, 287, 294, 295, 297, 298, 302, 386, 405, 406, 422, 423, 424, 426, 556, 643, 645, 647, 649, 660, 661, 662, 663, 664, 667, 668, 669, 710, 806, 827, 834, 849, 862, 864, 865, 867, 869, 871, 878, 879, 885], "classif": [3, 4, 5, 20, 21, 25, 31, 56, 885], "acceler": [3, 31, 844, 856, 883, 887, 888, 889, 890], "convert": [3, 12, 13, 14, 15, 18, 19, 23, 24, 25, 27, 29, 31, 32, 34, 36, 39, 40, 42, 43, 44, 46, 48, 56, 59, 61, 63, 64, 67, 85, 86, 87, 90, 108, 138, 139, 151, 161, 162, 204, 205, 206, 207, 218, 226, 230, 250, 290, 389, 394, 473, 474, 475, 524, 589, 607, 609, 610, 611, 613, 640, 641, 642, 643, 645, 648, 652, 706, 733, 744, 745, 787, 815, 820, 833, 839, 840, 853, 854, 856, 859, 861, 864, 870, 872, 876, 879, 883, 884, 891], "faster": [3, 4, 5, 14, 15, 18, 19, 23, 24, 25, 31, 42, 43, 59, 61, 68, 73, 91, 96, 387, 460, 648, 698, 829, 832, 841, 872, 887, 890], "infer": [3, 8, 9, 10, 11, 14, 15, 18, 19, 22, 23, 24, 25, 31, 35, 45, 47, 48, 57, 59, 61, 64, 68, 69, 72, 75, 87, 91, 92, 95, 98, 137, 139, 142, 146, 147, 151, 154, 160, 169, 170, 171, 172, 173, 323, 324, 386, 389, 393, 422, 507, 521, 567, 601, 602, 640, 641, 645, 647, 650, 670, 720, 815, 816, 837, 840, 844, 845, 859, 864, 869, 879, 883, 884, 887, 889], "mmpretrain": [3, 31], "segment": [3, 31, 68, 91, 341, 342, 343, 380, 841, 846], "unet": [3, 31], "alexnet": [3, 31], "written": [3, 4, 5, 6, 7, 8, 9, 22, 31, 33, 42, 43, 56, 69, 389, 484, 834, 838, 839, 847, 850, 851, 855, 856, 860, 864, 866, 869, 870, 874, 879, 883, 885, 889, 891, 892], "xgboost": [3, 31], "paddlepaddl": [3, 31, 346, 347, 383, 834], "dinov2": [3, 10, 11, 31], "project": [3, 20, 21, 23, 24, 31, 36, 37, 38, 39, 40, 42, 43, 46, 109, 647, 674, 806, 827, 829, 830, 833, 834, 835, 836, 839, 840, 841, 859, 868, 870, 874, 875, 876, 879, 881, 883, 885, 888, 892, 893], "convnext": [3, 8, 9, 18, 19, 22, 31], "finetun": [3, 31, 56], "video": [4, 12, 18, 20, 23, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 827, 828, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 871, 883], "tutori": [4, 8, 9, 10, 11, 12, 18, 20, 22, 23, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 827, 835, 856, 871], "three": [4, 5, 6, 7, 31, 37, 47, 48, 58, 68, 150, 323, 380, 389, 475, 640, 834, 835, 842, 843, 844, 846, 856, 859, 862, 863, 864, 886, 891], "major": [4, 5, 6, 7, 655, 761, 844, 845, 857, 859, 870, 875, 882, 885], "ml": [4, 5, 6, 7, 8, 9, 22, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 56, 58, 61, 827, 828, 832, 856, 863, 864, 865, 867, 868, 869, 873, 875, 876, 879, 881, 882, 883, 884, 885, 888, 890, 892], "framework": [4, 5, 6, 7, 10, 11, 14, 15, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 56, 58, 60, 63, 69, 181, 203, 213, 216, 227, 554, 570, 574, 606, 609, 641, 642, 645, 652, 734, 785, 787, 791, 798, 803, 810, 815, 816, 830, 831, 833, 834, 837, 838, 839, 840, 841, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 856, 859, 860, 862, 863, 864, 866, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 889], "sinc": [4, 5, 12, 13, 20, 21, 22, 39, 40, 42, 43, 56, 58, 68, 91, 109, 383, 829, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 848, 855, 856, 870, 875, 885, 891], "automat": [4, 5, 12, 13, 14, 15, 20, 21, 22, 40, 42, 43, 48, 833, 834, 835, 837, 840, 841, 843, 844, 850, 852, 855, 859, 862, 863, 865, 868, 869, 871, 872, 876, 885, 888, 892], "sure": [4, 5, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 42, 56, 830, 833, 834, 835, 838, 843, 848, 849, 856, 857, 859, 862, 871], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 40, 57, 68, 73, 85, 96, 114, 386, 388, 409, 467, 591, 645, 648, 691, 808, 825, 827, 834, 835, 836, 839, 842, 844, 852, 853, 854, 855, 856, 859, 860, 863, 865, 867, 869, 870, 872, 875, 878, 883, 884, 885, 886, 887, 888, 891, 892], "dm": [4, 5, 6, 7, 12, 13, 18, 19, 23, 24, 42, 43, 54, 56], "haiku": [4, 5, 6, 7, 12, 13, 18, 19, 23, 24, 40, 42, 43, 54, 56, 60, 803, 827, 869, 876, 879, 885], "exit": [4, 12, 20, 22, 42, 43, 845], "download": [4, 5, 8, 9, 10, 11, 20, 21, 22, 27, 29, 42, 43, 57, 58, 61, 829, 834, 841, 859, 878, 879], "imagenet": [4, 5, 8, 9, 22, 29, 57, 59, 827], "class": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 25, 27, 29, 33, 42, 43, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 145, 154, 160, 176, 179, 192, 194, 195, 254, 291, 349, 371, 383, 397, 398, 406, 407, 440, 539, 540, 547, 556, 560, 573, 583, 606, 640, 641, 642, 643, 645, 647, 648, 649, 652, 653, 668, 673, 677, 683, 693, 697, 698, 700, 707, 726, 733, 744, 751, 766, 773, 777, 778, 787, 788, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 818, 820, 825, 827, 833, 840, 841, 842, 844, 845, 846, 847, 851, 853, 854, 857, 858, 859, 862, 864, 865, 867, 868, 869, 872, 878, 879, 883, 885, 886, 892], "wget": [4, 5, 8, 9, 12, 13, 20, 21, 56, 57, 60, 834], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 23, 24, 39, 42, 43, 56, 59, 60, 85, 827, 847, 879, 886], "githubusercont": [4, 5, 8, 9, 12, 13, 20, 21, 56, 60], "hub": [4, 5, 8, 9, 12, 13, 20, 21, 56, 59, 61], "master": [4, 5, 12, 13, 20, 21, 34, 35, 36, 44, 45, 46, 47, 48, 49, 56, 58, 59, 60, 830, 843, 885, 893], "imagenet_class": [4, 5, 20, 21], "categori": [4, 5, 8, 9, 20, 21, 833, 838, 839, 842, 844, 848, 856, 860, 863], "strip": [4, 5, 20, 21, 35, 45, 875], "readlin": [4, 5, 20, 21, 57], "cat": [4, 5, 10, 11, 20, 21, 57, 857, 862, 864, 869, 878, 879], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 23, 24, 39, 42, 43, 58, 59, 827, 879], "filenam": [4, 5, 12, 13, 20, 21, 22, 42, 43, 56, 58, 61, 69, 808, 814, 867], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 59, 60, 61, 68, 79, 83, 87, 91, 106, 205, 206, 210, 222, 318, 398, 533, 568, 584, 642, 645, 649, 651, 656, 710, 730, 731, 766, 798, 815, 816, 827, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 850, 853, 854, 855, 856, 857, 858, 859, 860, 864, 866, 867, 869, 870, 871, 875, 878, 879, 880, 881, 883, 885, 888, 889, 891], "devic": [4, 5, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 57, 58, 61, 64, 68, 77, 85, 87, 91, 100, 113, 116, 117, 118, 137, 138, 139, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 230, 323, 324, 339, 340, 380, 393, 483, 519, 520, 522, 523, 547, 561, 562, 640, 645, 654, 752, 753, 754, 755, 785, 787, 788, 803, 805, 806, 807, 808, 809, 810, 811, 812, 825, 835, 837, 840, 844, 848, 852, 853, 857, 859, 860, 862, 864, 869, 870, 871, 872, 875, 884, 885, 887, 888, 889, 890], "torchvis": [4, 5, 8, 9, 18, 19, 20, 21, 22, 56, 876], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 39, 42, 43, 56, 57, 59, 68, 72, 91, 95, 386, 387, 408, 409, 414, 415, 418, 419, 420, 430, 431, 434, 451, 647, 671, 790, 793, 806, 827, 853, 859, 869, 872, 878, 879, 883, 885, 886, 887], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 23, 24, 39, 42, 43, 57, 58, 59, 827, 879], "time": [4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 40, 42, 43, 48, 56, 58, 59, 60, 68, 70, 73, 79, 91, 93, 102, 108, 109, 145, 352, 383, 386, 387, 389, 398, 415, 420, 432, 434, 455, 462, 495, 501, 533, 627, 632, 640, 646, 647, 648, 650, 651, 655, 656, 670, 673, 688, 726, 729, 730, 731, 758, 759, 763, 764, 806, 807, 808, 825, 833, 834, 835, 838, 840, 842, 843, 844, 846, 849, 851, 852, 853, 855, 856, 859, 860, 864, 867, 869, 870, 871, 874, 875, 876, 878, 879, 883, 885, 886, 889, 890, 891], "filterwarn": [4, 5, 6, 7, 22], "ignor": [4, 5, 6, 7, 22, 55, 63, 64, 68, 85, 91, 150, 386, 387, 389, 398, 410, 411, 412, 441, 449, 457, 497, 498, 502, 541, 640, 647, 652, 674, 743, 744, 810, 834, 841, 843, 846, 859, 870, 891], "compos": [4, 5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 42, 43, 56, 68, 91, 386, 400, 401, 402, 403, 834, 842, 856, 859, 878, 880, 885, 892], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 56, 57, 68, 91, 386, 422, 862], "centercrop": [4, 5, 20, 21, 22], "224": [4, 5, 8, 9, 10, 11, 20, 21, 22, 27, 29, 42, 43, 56, 57, 59, 827, 879], "totensor": [4, 5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 56], "485": [4, 5, 20, 21, 22, 56], "456": [4, 5, 20, 21, 22, 56, 859], "406": [4, 5, 20, 21, 22, 56, 68, 91, 408, 551, 645], "229": [4, 5, 20, 21, 22, 56, 290, 643], "225": [4, 5, 20, 21, 22, 56, 58, 245, 643], "torch_img": [4, 5, 12, 13, 20, 21], "unsqueez": [4, 5, 12, 13, 18, 19, 20, 21], "img": [4, 5, 12, 13, 20, 21, 39, 42, 43, 56, 57, 58, 60, 827, 867, 879], "ipython": [4, 5, 12, 13, 20, 21, 37, 38, 39, 40, 42, 43, 61], "displai": [4, 5, 12, 13, 20, 21, 22, 39, 42, 43, 56, 57, 58, 60, 61, 834, 841, 843, 848, 859, 867], "end": [4, 5, 12, 13, 22, 56, 57, 68, 91, 137, 239, 295, 364, 383, 386, 388, 389, 434, 463, 485, 495, 497, 498, 640, 643, 821, 834, 835, 840, 843, 849, 855, 860, 862, 863, 870, 883, 888], "set_default_devic": [4, 6, 8, 9, 12, 13, 18, 20, 22, 23, 228, 642, 845], "ivy_model": [4, 5, 6, 7, 12, 13, 20, 21, 59], "ivy_alexnet": [4, 5], "quick": [4, 5, 31, 43, 835, 837, 857, 868], "trace_graph": [4, 5, 6, 7, 12, 13, 20, 21, 35, 36, 37, 38, 42, 43, 45, 46, 47, 48, 49, 50, 59, 808, 827, 864, 869, 877], "moment": [4, 5, 68, 70, 91, 93, 387, 444, 626, 627, 632, 646, 810, 825, 833, 840, 870, 878, 879], "cost": [4, 5, 70, 93, 626, 627, 630, 632, 633, 634, 646, 651, 729, 730, 731, 821, 844, 862, 883], "arg": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 29, 37, 38, 40, 42, 43, 47, 48, 49, 60, 63, 85, 107, 117, 133, 214, 224, 612, 639, 640, 642, 645, 785, 787, 802, 803, 806, 807, 808, 812, 815, 820, 825, 827, 839, 844, 845, 848, 854, 855, 856, 862, 864, 868, 878, 879, 880], "asarrai": [4, 5, 6, 7, 12, 13, 18, 19, 20, 21, 57, 64, 68, 69, 80, 87, 91, 92, 103, 138, 396, 525, 526, 556, 567, 571, 572, 602, 603, 604, 640, 645, 647, 656, 657, 661, 764, 768, 848, 853, 856, 857], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 33, 42, 57, 58, 61, 64, 68, 77, 87, 91, 100, 148, 149, 152, 204, 205, 206, 222, 393, 519, 520, 522, 523, 640, 642, 648, 654, 699, 752, 753, 754, 755, 805, 806, 807, 808, 809, 810, 811, 825, 864, 870, 872, 890], "output": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 33, 39, 40, 42, 43, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 190, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 383, 385, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 428, 430, 431, 432, 434, 435, 437, 438, 439, 441, 443, 446, 447, 449, 452, 453, 454, 455, 457, 458, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 478, 479, 480, 483, 485, 486, 487, 488, 489, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 550, 551, 552, 556, 557, 558, 560, 564, 573, 580, 587, 588, 589, 613, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 745, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 790, 805, 806, 820, 821, 827, 829, 834, 835, 837, 838, 839, 841, 842, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 864, 866, 868, 869, 870, 872, 878, 879, 886], "softmax": [4, 5, 8, 9, 10, 11, 20, 21, 27, 40, 42, 43, 58, 62, 72, 83, 84, 95, 388, 465, 637, 647, 674, 677, 802, 827], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 40, 42, 43, 49, 55, 56, 58, 60, 61, 67, 68, 83, 85, 90, 91, 106, 114, 133, 134, 136, 168, 190, 205, 224, 239, 285, 386, 388, 389, 392, 393, 398, 432, 465, 485, 512, 514, 519, 539, 540, 573, 639, 641, 642, 643, 645, 651, 729, 730, 785, 787, 791, 798, 803, 807, 808, 810, 811, 815, 820, 825, 827, 831, 833, 835, 838, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 870, 878, 879, 880, 883], "argsort": [4, 5, 20, 21, 80, 103, 657, 769, 856], "descend": [4, 5, 20, 21, 80, 103, 648, 657, 698, 699, 767, 770], "top": [4, 5, 20, 21, 26, 31, 40, 42, 43, 56, 57, 68, 75, 91, 330, 380, 388, 389, 463, 505, 556, 645, 714, 834, 835, 844, 849, 856, 858, 859, 862, 867, 868, 885, 889], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 56, 57, 58, 59, 68, 74, 91, 97, 378, 393, 519, 522, 649, 707, 709, 802, 878], "gather": [4, 5, 20, 21, 56, 68, 69, 91, 92, 341, 342, 343, 380, 564, 566, 645, 892], "to_list": [4, 5, 20, 21, 69, 92, 645], "arraitiger": [4, 5, 20, 21], "tabbi": [4, 5, 10, 11, 20, 21], "egyptian": [4, 5, 20, 21], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 20, 21, 22], "dropout": [4, 5, 72, 95, 386, 410, 411, 412, 647, 672, 674, 677, 806, 867], "torch_output": [4, 5, 12, 13, 14, 15, 20, 21], "dim": [4, 5, 20, 21, 58, 68, 85, 87, 91, 152, 324, 380, 386, 389, 404, 414, 415, 416, 419, 427, 485, 507, 640, 647, 660, 667, 668, 673, 792, 806, 844, 856, 857, 862], "torch_class": [4, 5, 20, 21], "torch_logit": [4, 5, 20, 21], "tensor": [4, 5, 6, 7, 8, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 33, 34, 37, 38, 40, 42, 43, 44, 48, 54, 56, 64, 67, 68, 69, 72, 73, 74, 75, 77, 81, 85, 87, 90, 91, 92, 95, 96, 97, 98, 100, 104, 107, 140, 148, 149, 152, 158, 174, 190, 282, 283, 313, 330, 334, 335, 336, 337, 338, 339, 348, 371, 378, 380, 383, 386, 387, 388, 389, 398, 399, 405, 406, 409, 413, 422, 423, 424, 425, 432, 434, 436, 443, 444, 445, 446, 449, 451, 453, 455, 456, 459, 461, 462, 463, 465, 468, 469, 485, 488, 493, 496, 497, 498, 499, 502, 507, 508, 539, 544, 587, 588, 640, 641, 643, 645, 647, 648, 649, 650, 654, 658, 670, 673, 674, 689, 700, 707, 720, 722, 752, 775, 806, 815, 821, 825, 827, 839, 840, 844, 845, 849, 851, 852, 855, 856, 857, 859, 860, 862, 864, 866, 867, 869, 870, 872, 874, 878, 879, 880, 882, 883, 886, 888, 889, 892], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 20, 21, 40, 54, 629, 636, 646, 867], "takebackward0": [4, 5, 20, 21], "great": [4, 5, 10, 11, 12, 13, 835, 859, 864, 866, 875, 876, 891], "simpl": [4, 5, 10, 11, 27, 31, 32, 34, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 54, 56, 58, 61, 68, 91, 398, 533, 792, 806, 821, 827, 833, 834, 835, 839, 841, 842, 844, 845, 846, 847, 852, 855, 856, 859, 860, 862, 866, 868, 869, 870, 872, 874, 878, 879, 884, 885, 886, 887], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 22, 23, 24, 25, 27, 29, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 54, 56, 57, 59, 61, 69, 81, 92, 231, 232, 233, 234, 237, 240, 249, 252, 254, 256, 265, 266, 267, 272, 274, 287, 295, 297, 298, 302, 563, 564, 643, 645, 648, 658, 702, 775, 777, 778, 779, 780, 827, 833, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 876, 878, 879, 892], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 22, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 57, 827, 828, 830, 831, 833, 834, 835, 836, 841, 846, 849, 850, 854, 855, 867, 871, 876, 878, 879], "try": [4, 5, 8, 9, 10, 11, 22, 34, 44, 54, 57, 61, 85, 612, 645, 805, 815, 827, 833, 834, 835, 838, 839, 842, 843, 844, 848, 850, 855, 857, 864, 866, 870, 873, 875, 876, 880], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 22, 23, 24, 27, 29, 34, 37, 38, 40, 42, 43, 44, 45, 47, 49, 54, 59, 60, 803, 827, 839, 844, 845, 851, 855, 856, 859, 860, 862, 864, 869, 870, 872, 878, 879, 880, 885], "onc": [4, 5, 8, 9, 12, 13, 42, 43, 54, 56, 73, 77, 96, 100, 224, 387, 440, 642, 648, 654, 683, 684, 685, 698, 752, 827, 833, 834, 835, 842, 843, 844, 845, 846, 849, 850, 855, 856, 859, 862, 864, 867, 870, 871, 876, 878], "set": [4, 5, 10, 11, 14, 15, 27, 29, 35, 42, 43, 45, 48, 56, 57, 58, 59, 60, 63, 68, 69, 72, 73, 78, 80, 81, 85, 91, 92, 95, 96, 101, 103, 104, 126, 129, 136, 156, 158, 192, 193, 194, 195, 196, 207, 220, 221, 222, 223, 224, 239, 339, 351, 367, 369, 374, 380, 383, 384, 386, 387, 388, 389, 398, 409, 430, 434, 438, 442, 445, 463, 468, 469, 485, 495, 498, 505, 533, 538, 539, 540, 541, 542, 543, 545, 549, 556, 568, 573, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 606, 614, 637, 639, 640, 641, 642, 643, 645, 647, 648, 652, 654, 655, 657, 658, 670, 677, 679, 689, 691, 694, 697, 698, 732, 739, 742, 743, 744, 749, 750, 756, 758, 759, 763, 765, 766, 767, 770, 778, 780, 787, 790, 791, 792, 793, 798, 805, 806, 808, 810, 815, 821, 824, 825, 827, 828, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 850, 852, 853, 855, 856, 857, 859, 860, 862, 864, 866, 867, 874, 877, 878, 879, 883, 884, 885, 886, 887, 889, 892], "post": [4, 5, 8, 9, 12, 13, 22, 56, 76, 99, 653, 751, 834, 849, 854, 869, 871], "process": [4, 5, 8, 9, 12, 13, 37, 42, 43, 47, 56, 218, 230, 642, 828, 834, 835, 841, 842, 843, 849, 850, 852, 854, 856, 857, 858, 859, 862, 864, 869, 875, 876, 878, 883, 884, 885, 888, 889, 891, 892], "st": [4, 5, 6, 7, 18, 19, 790, 838, 857, 859], "perf_count": [4, 5, 14, 15, 16, 17, 18, 19], "raw_logit": [4, 5], "latenc": [4, 5, 18, 19], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 29, 40, 42, 43, 56, 60, 150, 640, 827, 852, 857, 862, 869, 879, 886], "direct": [4, 5, 68, 91, 352, 359, 363, 368, 372, 383, 386, 389, 420, 431, 486, 487, 501, 657, 770, 833, 839, 841, 856, 862, 868, 869, 881, 885, 886, 889], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 54, 56, 65, 68, 69, 77, 78, 81, 88, 91, 92, 100, 101, 143, 148, 152, 154, 160, 163, 166, 168, 170, 172, 174, 177, 179, 180, 184, 187, 191, 195, 199, 201, 219, 246, 282, 283, 394, 398, 524, 534, 535, 536, 564, 573, 610, 640, 641, 642, 643, 645, 654, 655, 658, 753, 754, 755, 759, 771, 772, 777, 779, 790, 791, 844, 856, 859, 864], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 27, 29, 35, 39, 40, 42, 43, 45, 48, 54, 55, 79, 83, 106, 648, 656, 696, 763, 764, 765, 766, 831, 833, 834, 835, 836, 839, 841, 842, 843, 844, 845, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 862, 866, 867, 868, 870, 874, 878, 879, 880, 885, 890], "ident": [4, 5, 8, 9, 14, 15, 25, 40, 57, 59, 73, 85, 143, 212, 566, 592, 640, 642, 645, 648, 652, 686, 690, 745, 806, 827, 842, 852, 853, 856, 857, 860, 862, 866, 867, 870, 872, 874, 876], "had": [4, 5, 842, 843, 855, 860, 864, 885, 886], "postprocess": [4, 5], "routin": [4, 5, 843, 855, 856, 862, 870, 885], "feed": [4, 5, 224, 642, 878, 885, 886], "carefulli": [4, 5, 289, 643, 805, 856, 883, 888], "rewrit": [4, 5], "easili": [4, 5, 39, 42, 43, 54, 834, 839, 843, 849, 856, 859, 862, 867, 868, 869, 870, 875, 885, 891, 892], "quickest": [4, 5], "particular": [4, 5, 42, 43, 279, 643, 791, 834, 835, 838, 840, 843, 844, 846, 853, 855, 856, 859, 860, 881, 885, 891], "again": [4, 5, 12, 13, 36, 37, 45, 46, 47, 48, 648, 696, 835, 839, 840, 841, 842, 846, 848, 850, 855, 856, 859, 860, 862, 867, 869, 870, 875, 876, 890, 891], "speed": [4, 5, 18, 19, 23, 24, 25, 42, 43, 56, 61, 69, 92, 580, 645, 859, 874, 888], "repeat": [4, 5, 6, 7, 36, 46, 68, 69, 75, 91, 92, 98, 386, 389, 398, 415, 420, 484, 533, 558, 645, 650, 651, 726, 730, 731, 820, 835, 839, 840, 846, 847, 855, 859], "previou": [4, 5, 25, 35, 36, 37, 39, 45, 46, 47, 49, 70, 91, 93, 198, 199, 200, 201, 202, 375, 385, 386, 432, 613, 615, 616, 617, 618, 620, 621, 623, 627, 632, 641, 645, 646, 805, 824, 834, 835, 838, 840, 843, 845, 851, 856, 859, 862, 869, 870, 888], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 18, 19, 20, 21, 22, 23, 24, 31, 32, 36, 39, 42, 45, 47, 48, 60, 69, 73, 85, 92, 96, 575, 576, 579, 590, 599, 614, 622, 645, 648, 787, 798, 808, 810, 825, 827, 838, 842, 844, 856, 861, 862, 864, 869, 870, 877, 878, 879, 886, 891], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 48, 57, 64, 68, 87, 91, 152, 398, 533, 640, 839, 841], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 600, 623, 645, 821, 844, 861], "fix": [4, 5, 12, 13, 58, 68, 91, 108, 109, 383, 386, 387, 432, 462, 647, 674, 827, 831, 834, 835, 838, 844, 850, 859, 860], "until": [4, 5, 12, 13, 821, 835, 855, 864, 870, 875, 878, 892], "o": [4, 5, 12, 13, 22, 55, 56, 57, 58, 60, 583, 645, 647, 674, 827, 834, 837, 843, 864, 871], "environ": [4, 5, 12, 13, 23, 24, 37, 38, 39, 40, 57, 60, 827, 828, 835, 871, 885, 887], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 22, 25, 37, 38, 40, 829, 832, 834, 841, 883, 887, 889], "jit": [4, 5, 18, 19, 23, 24, 42, 45, 864, 870, 878, 885], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 18, 19], "warm": [4, 5], "_": [4, 5, 14, 15, 16, 17, 18, 19, 23, 24, 25, 42, 55, 56, 67, 68, 85, 90, 91, 93, 109, 166, 254, 256, 264, 265, 280, 346, 347, 383, 386, 389, 398, 430, 459, 462, 503, 533, 556, 626, 627, 641, 643, 645, 646, 648, 650, 652, 658, 696, 697, 699, 728, 739, 778, 835, 843, 844, 847, 855, 859, 867], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 68, 84, 85, 121, 386, 388, 422, 427, 467, 468, 656, 763, 765, 792, 802, 834, 835, 838, 846, 864], "note": [4, 5, 8, 9, 12, 13, 22, 25, 38, 42, 43, 48, 57, 58, 59, 68, 69, 73, 75, 79, 91, 96, 98, 108, 145, 158, 190, 258, 293, 294, 301, 339, 340, 360, 380, 383, 386, 387, 389, 409, 440, 445, 455, 456, 462, 485, 503, 641, 643, 647, 648, 650, 656, 658, 674, 683, 684, 695, 696, 698, 720, 724, 764, 766, 775, 806, 821, 825, 831, 833, 834, 835, 839, 844, 846, 847, 850, 855, 856, 857, 859, 860, 862], "were": [4, 5, 12, 13, 59, 85, 88, 179, 183, 184, 258, 643, 647, 674, 833, 834, 835, 844, 848, 850, 854, 855, 857, 859, 860, 862, 864, 878, 885, 886, 891], "function": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 22, 25, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 176, 177, 178, 179, 182, 183, 184, 186, 190, 191, 208, 210, 211, 220, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 583, 586, 587, 588, 591, 592, 595, 597, 599, 602, 603, 604, 605, 606, 608, 610, 611, 612, 618, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 738, 739, 740, 742, 743, 744, 745, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 788, 790, 791, 792, 793, 798, 802, 805, 808, 815, 816, 823, 825, 827, 831, 834, 835, 837, 838, 839, 840, 841, 843, 846, 847, 849, 855, 858, 863, 865, 866, 867, 868, 872, 874, 878, 880, 882, 883, 884, 885, 886, 891, 892], "dog": [4, 5], "006431100999861883": [4, 5], "258": [4, 5, 647, 662, 664], "104": [4, 5, 81, 648, 658, 693, 773], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5, 843], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 25, 56, 57, 58, 59, 68, 74, 91, 97, 388, 464, 467, 470, 649, 707, 708, 709, 827, 844], "down": [4, 5, 35, 45, 59, 68, 91, 386, 389, 422, 487, 827, 834, 859, 872, 885, 891], "itself": [4, 5, 10, 11, 37, 47, 67, 108, 285, 546, 612, 643, 645, 652, 744, 821, 831, 834, 835, 838, 841, 842, 843, 844, 845, 848, 849, 850, 855, 856, 868, 870, 874, 878, 884, 885, 886, 891], "version": [4, 5, 8, 9, 14, 15, 25, 39, 40, 45, 56, 57, 58, 61, 62, 68, 91, 108, 121, 302, 351, 353, 383, 398, 538, 543, 625, 643, 645, 648, 684, 685, 787, 815, 816, 827, 834, 835, 841, 843, 844, 847, 855, 857, 864, 874, 875, 876, 879, 891, 892], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5], "0587": [4, 5], "promis": [4, 5, 10, 11, 875], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 20, 21, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 833, 834, 835, 838, 839, 841, 842, 843, 856, 858, 874, 875, 876, 877, 879, 880, 884, 885, 886, 887, 888], "modul": [4, 5, 8, 9, 12, 13, 18, 19, 23, 24, 27, 29, 31, 32, 33, 37, 38, 39, 40, 42, 43, 44, 48, 54, 55, 56, 58, 59, 60, 83, 85, 106, 114, 379, 381, 382, 390, 391, 395, 584, 645, 659, 783, 787, 802, 803, 804, 806, 807, 809, 811, 814, 815, 825, 827, 829, 834, 839, 840, 841, 848, 852, 855, 856, 858, 859, 864, 865, 867, 869, 870, 876, 878, 880, 885, 886, 888], "__init__": [4, 5, 12, 13, 27, 29, 42, 43, 54, 55, 56, 58, 85, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 788, 795, 796, 797, 802, 805, 806, 807, 808, 809, 810, 811, 814, 815, 818, 820, 822, 825, 827, 833, 839, 840, 844, 848, 856, 860, 864, 866, 867, 868, 869, 879], "self": [4, 5, 8, 9, 10, 11, 12, 13, 27, 29, 42, 43, 54, 55, 56, 58, 60, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 174, 176, 179, 182, 183, 184, 186, 188, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 647, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 810, 820, 827, 835, 839, 842, 848, 856, 857, 864, 866, 867, 868, 869, 879], "num_class": [4, 5, 27, 29, 42, 43, 56, 58, 60, 827, 869, 879], "1000": [4, 5, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 42, 43, 56, 57, 58, 59, 61, 64, 87, 149, 640, 827, 867, 879], "v": [4, 5, 6, 7, 12, 13, 31, 32, 35, 42, 43, 45, 48, 49, 54, 57, 58, 68, 72, 80, 87, 91, 95, 103, 149, 249, 254, 256, 297, 387, 389, 441, 451, 458, 459, 484, 643, 647, 651, 657, 674, 677, 730, 731, 769, 787, 806, 807, 808, 809, 810, 811, 829, 834, 835, 837, 841, 849, 864, 867, 868, 869, 893], "_build": [4, 5, 12, 13, 807, 808], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 23, 24, 25, 42, 56, 60, 63, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 114, 117, 214, 389, 495, 583, 612, 640, 642, 645, 785, 787, 802, 803, 806, 807, 808, 815, 825, 827, 839, 844, 845, 848, 852, 855, 856, 862, 864, 868, 878, 879, 880], "featur": [4, 5, 10, 11, 23, 24, 25, 27, 29, 31, 33, 42, 43, 56, 60, 68, 91, 386, 400, 402, 403, 410, 411, 412, 805, 806, 825, 827, 833, 834, 835, 839, 840, 843, 844, 851, 860, 862, 867, 870, 879, 885, 886, 887, 891], "sequenti": [4, 5, 12, 13, 14, 15, 20, 21, 22, 40, 42, 43, 58, 841, 842, 868, 879], "conv2d": [4, 5, 12, 13, 20, 21, 22, 40, 42, 43, 58, 61, 72, 95, 647, 664, 806, 818], "64": [4, 5, 12, 13, 20, 21, 22, 54, 56, 57, 58, 61, 67, 68, 72, 90, 91, 92, 95, 96, 100, 104, 114, 175, 245, 255, 289, 298, 299, 357, 383, 386, 408, 418, 556, 557, 604, 632, 641, 643, 645, 646, 647, 648, 652, 658, 662, 664, 666, 668, 669, 690, 693, 703, 740, 744, 754, 773, 777, 834, 844, 867, 868, 882, 890], "data_format": [4, 5, 58, 68, 72, 91, 95, 386, 392, 401, 405, 406, 407, 410, 411, 412, 423, 424, 425, 426, 428, 512, 513, 514, 517, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 790, 806, 809], "nchw": [4, 5, 58, 68, 72, 91, 95, 386, 392, 401, 406, 411, 424, 428, 517, 647, 660, 663, 664, 667, 668, 669, 806], "relu": [4, 5, 12, 13, 20, 21, 22, 40, 42, 43, 54, 61, 62, 68, 83, 84, 91, 123, 313, 314, 322, 378, 637, 802, 857, 867, 868], "maxpool2d": [4, 5, 12, 13, 20, 21, 22, 56, 806, 827], "192": [4, 5, 58, 790, 820], "384": [4, 5, 93, 626, 646, 652, 732], "avgpool": [4, 5, 20, 21, 22], "adaptiveavgpool2d": [4, 5, 20, 21, 22, 806], "classifi": [4, 5, 10, 11, 22, 25, 27, 29, 42, 43, 56, 58, 59, 827, 833, 878, 879], "prob": [4, 5, 8, 9, 10, 11, 58, 68, 72, 91, 95, 100, 386, 393, 410, 411, 412, 519, 647, 654, 670, 752, 806], "4096": [4, 5], "_forward": [4, 5, 12, 13, 18, 19, 23, 24, 42, 43, 54, 55, 58, 847, 864, 867, 868], "invalid": [5, 68, 82, 91, 105, 389, 503, 648, 650, 659, 704, 716, 781, 782, 790, 834, 844], "distribut": [5, 61, 68, 74, 77, 91, 97, 100, 386, 387, 388, 393, 410, 411, 412, 445, 456, 462, 465, 467, 468, 470, 519, 520, 521, 522, 523, 649, 654, 707, 708, 709, 752, 753, 754, 755, 757, 805, 806, 833, 834, 843, 845, 870, 885, 888], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 37, 38, 39, 40, 60, 834, 840, 844, 855, 859, 862], "homebrew": 5, "site": [5, 37, 38, 39, 40, 886], "resolv": [5, 8, 9, 20, 21, 56, 58, 68, 81, 258, 398, 534, 535, 643, 650, 658, 716, 771, 772, 777, 779, 835, 841, 844, 850, 864], "account": [5, 48, 58, 60, 68, 75, 91, 98, 298, 389, 485, 643, 650, 720, 805, 820, 834, 843, 847, 856, 860, 878], "behaviour": [5, 23, 24, 37, 38, 39, 40, 123, 126, 285, 637, 643, 832, 835, 837, 838, 839, 842, 844, 845, 847, 848, 851, 852, 853, 855, 856, 859, 860, 866], "conflict": [5, 23, 24, 37, 38, 39, 40, 48, 834, 835, 843, 856, 867], "maco": [5, 890], "incompat": [5, 165, 641], "remot": [5, 834, 838, 849, 850], "enumer": [5, 8, 9, 10, 11, 12, 13, 22, 56, 58, 795], "compress": 5, "156": [5, 289, 643, 790], "delta": [5, 68, 70, 91, 93, 388, 464, 626, 646], "37": [5, 22, 25, 37, 38, 39, 40, 54, 62, 67, 68, 84, 90, 91, 95, 113, 124, 237, 245, 294, 297, 301, 394, 429, 524, 643, 647, 648, 652, 654, 671, 690, 740, 754, 843], "reus": [5, 56, 64, 87, 91, 98, 139, 473, 474, 481, 483, 485, 486, 487, 494, 510, 716, 717, 718, 720, 722, 723, 725, 727, 848, 859, 890], "pack": [5, 647, 672], "83": [5, 20, 21, 22, 25, 54, 73, 95, 100, 298, 386, 398, 408, 418, 429, 534, 643, 647, 648, 671, 686, 754], "mib": 5, "user": [5, 8, 9, 10, 11, 22, 23, 24, 31, 37, 38, 39, 40, 42, 57, 58, 60, 285, 302, 389, 495, 591, 643, 645, 806, 807, 808, 820, 827, 834, 835, 837, 839, 840, 842, 843, 844, 845, 848, 853, 854, 855, 856, 859, 861, 862, 863, 864, 870, 871, 874, 875, 883, 885, 891, 892], "samuelarmstrong": 5, "examples_and_demos_cpu": 5, "metadata": [5, 56, 58, 61, 855], "setup": [5, 56, 58, 61, 834, 835, 841, 843, 849], "satisfi": [5, 22, 37, 38, 39, 40, 56, 58, 61, 68, 386, 387, 409, 441, 844, 846], "scipi": [5, 833, 875, 887, 892], "einop": [5, 37, 38, 39, 40, 56, 58, 61, 69, 92, 556, 557, 558, 645, 844, 875], "psutil": [5, 37, 38, 39, 40, 56, 58, 61], "termcolor": [5, 37, 38, 39, 40, 56, 58, 61, 85, 114], "colorama": [5, 37, 38, 39, 40, 56, 58], "nvidia": [5, 18, 19, 22, 23, 24, 37, 38, 39, 40, 56, 58, 61, 889, 890], "535": [5, 37, 38, 39, 40, 62, 84, 129, 637, 848], "133": [5, 8, 9, 20, 21, 56, 72, 671], "diskcach": [5, 37, 38, 39, 40, 56], "googl": [5, 6, 7, 37, 38, 39, 40, 56, 57, 58, 60, 843, 875], "auth": [5, 37, 38, 39, 40], "urllib3": [5, 37, 38, 39, 40, 56], "request": [5, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 37, 38, 39, 40, 42, 43, 56, 59, 68, 215, 393, 523, 642, 825, 827, 828, 830, 833, 846, 850, 860, 862, 876, 879], "pyvi": [5, 37, 38, 39, 40, 42, 43], "dill": [5, 37, 38, 39, 40, 56], "astunpars": [5, 37, 38, 39, 40], "cloudpickl": [5, 37, 38, 39, 40], "gast": [5, 37, 38, 39, 40], "wheel": [5, 37, 38, 39, 40, 56, 58, 61, 874], "43": [5, 6, 7, 25, 54, 56, 58, 68, 91, 100, 114, 245, 386, 387, 398, 407, 439, 534, 643, 654, 655, 754, 755, 762], "six": [5, 37, 38, 39, 40, 56, 61, 834, 862], "cffi": 5, "cachetool": [5, 37, 38, 39, 40], "pyasn1": [5, 37, 38, 39, 40], "rsa": [5, 37, 38, 39, 40], "jinja2": [5, 22, 37, 38, 39, 40], "jsonpickl": [5, 37, 38, 39, 40], "networkx": [5, 22, 37, 38, 39, 40, 61], "charset": [5, 37, 38, 39, 40, 56], "idna": [5, 37, 38, 39, 40, 56], "certifi": [5, 37, 38, 39, 40, 56], "2017": [5, 37, 38, 39, 40, 56, 647, 674], "2024": [5, 8, 9], "pycpars": 5, "decor": [5, 31, 32, 37, 39, 40, 48, 60, 550, 645, 790, 792, 798, 831, 838, 839, 842, 844, 845, 849, 852, 855, 856, 857, 862], "jedi": [5, 37, 38, 39, 40], "inlin": [5, 37, 38, 39, 40, 841], "prompt": [5, 37, 38, 39, 40, 833, 835], "toolkit": [5, 37, 38, 39, 40, 885, 886, 892], "41": [5, 25, 37, 38, 39, 40, 54, 56, 61, 67, 68, 73, 90, 91, 92, 95, 96, 124, 238, 246, 253, 284, 298, 386, 387, 394, 398, 406, 424, 429, 451, 524, 534, 551, 637, 643, 645, 648, 658, 678, 686, 779], "pygment": [5, 37, 38, 39, 40], "stack": [5, 25, 35, 37, 38, 39, 40, 45, 54, 58, 68, 73, 75, 85, 91, 96, 98, 113, 156, 157, 340, 380, 387, 389, 440, 479, 480, 482, 491, 511, 590, 599, 622, 640, 645, 648, 650, 652, 680, 682, 683, 684, 685, 687, 688, 690, 691, 692, 694, 695, 696, 698, 699, 702, 732, 742, 743, 806, 827, 832, 838, 855, 864, 881, 883, 890, 891], "traitlet": [5, 37, 38, 39, 40], "exceptiongroup": [5, 37, 38, 39, 40], "pexpect": [5, 37, 38, 39, 40], "markupsaf": [5, 22, 37, 38, 39, 40], "parso": [5, 37, 38, 39, 40], "ptyprocess": [5, 37, 38, 39, 40], "wcwidth": [5, 37, 38, 39, 40], "execut": [5, 8, 9, 18, 19, 23, 24, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 50, 57, 59, 61, 134, 136, 612, 639, 642, 645, 834, 835, 841, 842, 843, 844, 845, 846, 848, 852, 853, 855, 859, 862, 864, 866, 869, 870, 872, 878, 881, 885, 886, 887, 888, 889, 891], "asttoken": [5, 37, 38, 39, 40], "pure": [5, 37, 38, 39, 40, 48, 58, 847, 851, 856, 862, 866, 869, 870, 885, 891, 892], "eval": [5, 6, 7, 8, 9, 12, 13, 20, 21, 22, 29, 37, 38, 39, 40, 647, 672, 808], "collect": [5, 22, 46, 56, 58, 60, 61, 63, 85, 86, 637, 642, 645, 646, 647, 649, 652, 653, 654, 745, 802, 806, 807, 808, 809, 810, 834, 843, 848, 849, 853, 854, 857, 859, 883, 885, 888], "creat": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 56, 57, 58, 60, 61, 64, 67, 68, 77, 85, 87, 90, 91, 96, 100, 109, 137, 138, 139, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 158, 159, 160, 285, 323, 324, 334, 336, 338, 339, 380, 386, 387, 389, 393, 405, 406, 407, 428, 445, 456, 462, 471, 479, 495, 500, 519, 520, 521, 522, 523, 591, 608, 625, 636, 640, 643, 645, 646, 654, 693, 752, 753, 754, 755, 757, 787, 798, 803, 805, 806, 807, 808, 809, 810, 811, 828, 830, 834, 835, 836, 839, 840, 841, 843, 844, 845, 848, 852, 853, 855, 856, 857, 859, 862, 864, 865, 868, 871, 872, 875, 878, 879, 880, 885, 886, 891], "py3": [5, 22, 56, 58, 61], "whl": [5, 22, 56, 57, 58, 61], "76449": 5, "sha256": [5, 56, 58, 61], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 56, 58, 61, 65, 68, 69, 73, 75, 85, 88, 91, 92, 96, 98, 165, 386, 387, 431, 439, 443, 457, 461, 560, 645, 648, 650, 702, 722, 787, 788, 806, 807, 808, 829, 835, 839, 840, 842, 847, 853, 855, 856, 857, 864, 866, 867, 868, 872, 878], "directori": [5, 8, 9, 22, 56, 57, 58, 61, 600, 623, 642, 645, 825, 829, 833, 834, 835, 841, 843, 849, 856, 859, 871], "privat": [5, 810, 827, 856, 859], "var": [5, 55, 81, 104, 106, 133, 134, 135, 136, 639, 651, 658, 729, 730, 812, 834, 846, 864, 882], "3x": [5, 18, 19], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 56, 58], "abb7vdwj": 5, "01": [5, 10, 11, 20, 21, 37, 38, 40, 58, 64, 68, 69, 70, 73, 91, 92, 93, 96, 100, 149, 276, 294, 295, 323, 329, 354, 355, 362, 380, 386, 408, 418, 419, 560, 603, 604, 626, 627, 632, 640, 643, 645, 646, 648, 651, 654, 685, 695, 730, 731, 754, 755, 790, 840, 869], "2d": [5, 42, 43, 58, 68, 91, 108, 324, 380, 386, 387, 389, 398, 401, 402, 410, 411, 453, 460, 474, 484, 533, 806, 825, 856, 862], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 22, 56, 58, 61, 808, 830, 834, 839], "built": [5, 42, 43, 48, 56, 58, 61, 137, 640, 806, 807, 808, 834, 835, 841, 842, 859, 865, 871, 878, 884, 885, 889], "zsh": 5, "found": [5, 10, 11, 56, 58, 59, 61, 73, 75, 79, 85, 91, 96, 98, 102, 114, 212, 398, 480, 534, 642, 652, 682, 688, 724, 743, 763, 821, 830, 833, 834, 835, 839, 840, 841, 842, 844, 845, 847, 850, 853, 855, 856, 871, 887], "filenotfounderror": 5, "traceback": [5, 859], "recent": [5, 58, 824, 834, 835, 859, 874, 875], "line": [5, 8, 9, 18, 19, 23, 24, 25, 31, 32, 35, 36, 39, 42, 43, 45, 46, 57, 58, 301, 643, 825, 827, 834, 838, 839, 843, 845, 846, 848, 856, 859, 862, 865, 866, 867, 868, 876, 879, 888], "get_ipython": 5, "system": [5, 23, 24, 37, 38, 39, 40, 58, 387, 457, 648, 697, 790, 827, 834, 835, 836, 840, 843, 844, 870, 879, 883, 885, 888, 890, 892], "34": [5, 20, 21, 25, 54, 56, 90, 91, 92, 100, 179, 249, 276, 297, 386, 398, 429, 540, 556, 557, 641, 643, 645, 647, 648, 654, 671, 690, 754, 755, 845], "interactiveshel": 5, "324": [5, 838], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 64, 68, 75, 87, 91, 98, 102, 139, 386, 388, 420, 431, 468, 473, 474, 481, 483, 485, 486, 487, 494, 510, 650, 716, 717, 718, 720, 722, 723, 725, 727, 766, 792, 822, 848], "319": 5, "won": [5, 834, 835, 842, 844, 869, 871, 875, 876, 878, 879, 880], "fd": [5, 72, 95, 647, 660, 665, 666, 667, 668], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 18, 19, 22, 23, 24, 34, 35, 36, 42, 44, 45, 46, 47, 48, 49, 59, 61, 64, 67, 68, 75, 87, 90, 91, 95, 98, 103, 149, 167, 190, 235, 255, 261, 264, 277, 295, 352, 357, 369, 383, 386, 387, 388, 389, 396, 398, 429, 431, 440, 465, 474, 475, 484, 485, 525, 526, 543, 640, 641, 643, 648, 650, 654, 657, 683, 720, 755, 768, 821, 827, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 866, 867, 868, 869, 870, 875, 878, 879, 885, 890], "crash": 5, "know": [5, 37, 38, 47, 48, 49, 79, 656, 763, 764, 765, 766, 827, 829, 833, 835, 845, 853, 857, 859, 862, 876, 880, 886], "what": [5, 8, 9, 18, 19, 23, 24, 31, 36, 42, 43, 46, 47, 50, 55, 56, 386, 420, 431, 792, 821, 827, 833, 835, 837, 842, 843, 846, 847, 850, 851, 853, 854, 855, 856, 857, 859, 863, 864, 866, 867, 868, 869, 870, 875, 876, 881, 886, 887, 890], "321": 5, "builtin": [5, 20, 21, 834, 866, 868], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 42, 43, 56, 68, 74, 91, 97, 388, 465, 466, 467, 469, 470, 649, 707, 835, 843, 844, 885], "kernel": [5, 68, 72, 91, 95, 386, 405, 406, 407, 423, 424, 425, 426, 647, 673, 864, 870, 885, 888, 889], "while": [5, 8, 9, 10, 11, 22, 25, 42, 43, 50, 68, 72, 85, 91, 95, 108, 109, 114, 136, 152, 190, 258, 259, 279, 280, 358, 383, 386, 387, 389, 431, 432, 454, 497, 498, 532, 639, 640, 641, 643, 647, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 763, 775, 778, 788, 831, 833, 834, 835, 839, 840, 841, 843, 844, 845, 846, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 866, 868, 869, 870, 871, 874, 875, 878, 885, 891, 892], "review": [5, 68, 91, 387, 462, 829, 830, 833, 835, 841, 843, 846, 856, 860], "identifi": [5, 68, 91, 341, 342, 343, 380, 833, 838, 843, 844, 859, 862], "caus": [5, 25, 388, 465, 834, 835, 838, 840, 842, 843, 844, 846, 855, 857, 859, 870], "failur": [5, 835, 843, 857, 859], "href": 5, "aka": [5, 890], "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 22, 27, 30, 31, 33, 34, 35, 38, 40, 42, 43, 44, 45, 54, 56, 57, 58, 62, 67, 68, 73, 75, 79, 84, 90, 91, 96, 98, 102, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 164, 256, 258, 274, 289, 302, 306, 311, 312, 314, 374, 378, 384, 387, 388, 389, 435, 437, 449, 451, 454, 467, 473, 474, 475, 480, 501, 591, 637, 640, 641, 643, 645, 648, 650, 656, 682, 688, 691, 694, 696, 698, 705, 717, 724, 763, 764, 765, 766, 792, 802, 821, 827, 829, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 879, 880, 883, 884, 885, 886, 887, 888, 891, 892], "viewoutput": 5, "log": [5, 8, 9, 22, 64, 67, 68, 73, 87, 90, 91, 96, 129, 149, 274, 276, 289, 311, 312, 365, 372, 378, 383, 388, 393, 465, 467, 468, 519, 637, 640, 643, 696, 790, 792, 793, 802, 835, 842, 843, 846, 852, 855, 856, 857, 859, 861, 862, 864, 867], "further": [5, 8, 9, 10, 11, 22, 33, 85, 114, 792, 827, 835, 838, 839, 843, 846, 848, 851, 852, 855, 856, 858, 859, 863, 864, 867, 868, 875, 876, 890, 891], "detail": [5, 8, 9, 10, 11, 22, 35, 45, 58, 62, 67, 68, 73, 75, 79, 84, 90, 91, 92, 96, 98, 102, 121, 122, 123, 124, 125, 126, 127, 128, 129, 144, 155, 302, 306, 311, 312, 314, 378, 387, 437, 480, 559, 637, 640, 643, 656, 682, 688, 694, 698, 724, 763, 764, 765, 766, 802, 827, 833, 835, 838, 840, 841, 842, 843, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 864, 866, 867, 868, 887, 891], "bidirect": [6, 7, 647, 672], "encod": [6, 7, 27, 29, 42, 43, 56, 58, 69, 74, 92, 97, 560, 645, 649, 707, 827, 867, 875, 879], "mlm": [6, 7], "choos": [6, 7, 56, 58, 66, 78, 79, 89, 225, 251, 258, 279, 280, 284, 346, 347, 383, 389, 642, 643, 655, 656, 658, 762, 763, 764, 765, 766, 774, 775, 776, 778, 790, 833, 834, 835, 853, 859, 865, 869, 878], "librari": [6, 7, 8, 9, 10, 11, 18, 19, 22, 23, 24, 31, 32, 38, 40, 54, 56, 66, 79, 89, 225, 256, 258, 274, 279, 280, 302, 346, 347, 383, 642, 643, 648, 656, 658, 684, 685, 763, 764, 765, 766, 774, 775, 776, 778, 825, 827, 833, 834, 838, 844, 869, 870, 874, 875, 876, 878, 881, 882, 883, 885, 889, 892], "pretrain": [6, 7, 18, 19, 27, 28, 29, 42, 43, 61, 827, 879], "save": [6, 7, 8, 9, 20, 21, 22, 56, 68, 85, 91, 398, 540, 600, 623, 642, 645, 659, 808, 825, 834, 843, 850, 859, 870, 876, 884], "some": [6, 7, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 54, 58, 59, 85, 93, 256, 258, 274, 386, 410, 411, 412, 626, 627, 630, 632, 633, 634, 642, 643, 646, 652, 743, 806, 827, 831, 833, 834, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 866, 867, 868, 870, 871, 872, 875, 876, 878, 879, 881, 882, 884, 885, 886, 891, 892], "mohame54": [6, 7], "automodel": [6, 7, 23, 24, 42], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 18, 19, 23, 24, 39, 42, 56, 57, 58, 59, 60, 61, 85, 387, 458, 659, 808, 859, 870, 884, 891], "token": [6, 7, 58, 836], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 23, 24, 42, 59, 878, 879], "base": [6, 7, 10, 11, 25, 56, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 116, 118, 149, 158, 190, 254, 255, 272, 273, 274, 275, 289, 330, 339, 341, 348, 351, 357, 364, 380, 383, 386, 387, 388, 396, 429, 433, 458, 463, 525, 593, 604, 616, 640, 641, 643, 645, 648, 650, 656, 658, 689, 716, 763, 764, 765, 766, 773, 788, 791, 792, 795, 796, 797, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 818, 821, 822, 825, 827, 834, 835, 836, 838, 842, 843, 844, 848, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 885, 890, 892, 893], "uncas": [6, 7], "evalu": [6, 7, 67, 68, 85, 90, 91, 254, 256, 272, 273, 274, 275, 279, 286, 288, 295, 299, 333, 365, 376, 377, 380, 385, 387, 388, 389, 454, 463, 468, 492, 636, 643, 646, 652, 659, 742, 743, 781, 782, 807, 808, 835, 842, 844, 852, 853, 885], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 18, 19, 22, 23, 24, 27, 29, 39, 42, 43, 57, 64, 67, 68, 77, 81, 87, 90, 91, 100, 104, 148, 149, 303, 330, 380, 386, 388, 389, 393, 410, 411, 412, 422, 432, 434, 463, 468, 498, 519, 520, 521, 522, 523, 640, 643, 654, 658, 752, 753, 754, 755, 778, 780, 806, 857, 859], "test": [6, 7, 10, 11, 34, 35, 37, 38, 44, 45, 47, 48, 49, 57, 58, 67, 69, 82, 90, 92, 105, 136, 182, 186, 265, 266, 267, 268, 291, 386, 410, 411, 412, 580, 639, 641, 643, 645, 659, 781, 782, 785, 788, 791, 821, 827, 829, 831, 832, 837, 841, 844, 846, 848, 850, 853, 856, 858, 860, 870, 871, 876, 878, 879, 880, 885], "did": [6, 7, 56, 833, 841, 869, 875, 891], "realli": [6, 7, 54, 834, 842, 849, 870, 878, 890, 891], "input": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 27, 29, 39, 40, 42, 47, 48, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 179, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 205, 207, 208, 221, 224, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 452, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 587, 588, 589, 595, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 740, 741, 743, 744, 745, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 791, 798, 802, 805, 806, 807, 808, 809, 818, 820, 821, 825, 838, 839, 840, 842, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 878, 879, 886, 889], "pad": [6, 7, 20, 21, 22, 56, 58, 68, 72, 75, 91, 95, 98, 109, 111, 386, 389, 405, 406, 407, 408, 409, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 560, 645, 647, 650, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 715, 728, 792, 806], "longest": [6, 7], "return_tensor": [6, 7, 10, 11, 23, 24, 42, 59, 878, 879], "pt": [6, 7, 10, 11, 23, 24, 42, 878], "max_length": [6, 7, 85], "512": [6, 7, 12, 13, 20, 21, 22, 56, 58, 96, 647, 662, 703, 827], "input_id": [6, 7], "101": [6, 7, 25, 57, 647, 648, 652, 671, 687, 738], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 25, 68, 91, 100, 408, 753], "token_type_id": [6, 7], "attention_mask": [6, 7, 72, 95, 647, 674], "pooler": [6, 7], "compar": [6, 7, 14, 15, 16, 17, 18, 19, 23, 24, 42, 55, 59, 61, 68, 69, 79, 80, 81, 85, 91, 92, 103, 104, 345, 362, 383, 398, 541, 545, 548, 645, 647, 656, 657, 658, 672, 763, 764, 765, 766, 767, 770, 776, 787, 827, 840, 846, 848, 857, 859, 862, 867, 881, 883, 885, 891, 892], "no_grad": [6, 7, 56, 878], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 18, 19, 55, 58, 64, 68, 69, 72, 73, 77, 87, 90, 91, 95, 96, 100, 108, 109, 133, 143, 156, 157, 158, 278, 324, 339, 340, 380, 387, 389, 393, 396, 398, 438, 453, 457, 459, 461, 501, 505, 519, 520, 521, 522, 523, 526, 536, 548, 639, 640, 645, 647, 648, 652, 654, 655, 674, 677, 681, 688, 689, 695, 697, 698, 699, 702, 740, 753, 754, 755, 761, 837, 838, 856, 857, 864, 878, 881, 885], "ivy_output": [6, 7, 59], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 29, 42, 59, 61, 68, 91, 383], "detach": [6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27, 29, 42, 854], "rtol": [6, 7, 10, 11, 27, 29, 68, 73, 91, 96, 345, 362, 383, 648, 691, 694, 785, 787, 831, 849, 857], "005": [6, 7, 20, 21, 68, 91, 345, 362, 383, 464], "atol": [6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 42, 68, 73, 91, 96, 345, 362, 383, 648, 691, 785, 787, 831, 849, 857], "768": [6, 7], "fn": [6, 7, 59, 61, 68, 85, 88, 91, 117, 177, 178, 210, 211, 214, 389, 472, 546, 561, 562, 612, 641, 642, 645, 652, 738, 739, 740, 742, 743, 744, 785, 787, 812, 815, 818, 822, 823, 825, 845, 848, 855, 856, 864, 878], "finish": [6, 7, 10, 11, 31, 42, 43, 54, 57, 828, 833, 834, 837], "sec": [6, 7], "procedur": [6, 7, 841, 843, 846, 857], "60": [6, 7, 22, 54, 58, 67, 81, 90, 92, 100, 104, 235, 269, 389, 500, 564, 572, 588, 603, 625, 643, 645, 648, 652, 658, 693, 735, 753, 771, 773, 777, 821, 843], "big": [6, 7, 805, 828, 870, 885], "jnp": [6, 7, 34, 39, 42, 43, 44, 45, 48, 54, 56, 60, 827, 844, 845, 848, 851, 855, 860, 864, 869, 879, 880], "ref": [6, 7, 12, 13, 18, 19, 23, 24, 92, 96, 270, 284, 287, 293, 300, 643, 650, 724, 834, 855], "fast": [6, 7, 37, 47, 68, 386, 409, 885], "valu": [6, 7, 25, 54, 55, 57, 58, 64, 65, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 111, 113, 114, 116, 129, 133, 134, 136, 137, 143, 146, 147, 148, 149, 152, 158, 163, 180, 184, 190, 223, 224, 231, 232, 233, 234, 236, 238, 239, 240, 247, 251, 252, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 313, 318, 321, 322, 324, 331, 333, 339, 341, 342, 343, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 359, 360, 362, 363, 365, 368, 370, 371, 372, 373, 374, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 397, 398, 409, 422, 429, 430, 432, 434, 438, 441, 445, 451, 456, 458, 460, 462, 463, 464, 466, 467, 468, 469, 478, 484, 489, 495, 500, 502, 503, 504, 505, 507, 509, 512, 514, 519, 520, 522, 523, 529, 531, 534, 535, 536, 539, 540, 541, 542, 543, 549, 551, 552, 553, 555, 560, 563, 564, 566, 571, 572, 573, 580, 587, 588, 592, 593, 594, 597, 606, 611, 616, 617, 620, 623, 624, 625, 626, 627, 628, 632, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 677, 681, 684, 685, 689, 690, 691, 694, 695, 696, 697, 698, 699, 702, 705, 713, 714, 715, 719, 720, 728, 729, 730, 734, 736, 737, 738, 739, 740, 745, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 785, 787, 790, 791, 792, 793, 795, 797, 802, 805, 806, 807, 808, 809, 810, 818, 825, 831, 834, 835, 838, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 855, 856, 859, 861, 862, 864, 866, 870, 878, 885, 886], "emerg": [8, 9, 885], "popular": [8, 9, 10, 11, 827, 838, 885], "Its": [8, 9, 68, 388, 463, 885], "python": [8, 9, 10, 11, 20, 21, 27, 33, 45, 50, 54, 56, 57, 58, 60, 61, 68, 77, 91, 100, 137, 218, 230, 258, 293, 386, 393, 432, 519, 520, 521, 522, 523, 625, 640, 642, 643, 645, 654, 752, 753, 754, 755, 757, 815, 820, 821, 825, 832, 834, 835, 838, 841, 842, 843, 848, 849, 856, 858, 859, 864, 866, 867, 870, 872, 873, 874, 875, 878, 882, 885, 886, 887, 891, 892], "superior": [8, 9], "eager": [8, 9, 22, 31, 32, 35, 38, 40, 45, 48, 49, 60, 825, 842, 870, 885], "mode": [8, 9, 10, 11, 12, 13, 48, 60, 68, 73, 85, 91, 96, 107, 108, 109, 110, 111, 112, 221, 224, 229, 234, 251, 284, 338, 376, 377, 380, 385, 386, 387, 389, 417, 422, 430, 431, 443, 445, 453, 455, 456, 462, 478, 488, 493, 495, 496, 498, 500, 503, 504, 508, 589, 590, 591, 595, 596, 598, 599, 613, 614, 618, 619, 621, 622, 642, 643, 645, 647, 648, 672, 695, 798, 806, 807, 808, 824, 825, 834, 835, 837, 842, 845, 846, 849, 862, 870, 885, 888], "made": [8, 9, 18, 19, 23, 24, 42, 68, 75, 91, 387, 389, 447, 473, 474, 475, 724, 833, 835, 836, 838, 839, 842, 843, 848, 850, 852, 854, 855, 856, 860, 862, 864, 866, 875, 885], "favorit": [8, 9], "increasingli": [8, 9, 846, 878], "span": [8, 9, 835, 883, 891], "industri": [8, 9, 875, 885, 887], "still": [8, 9, 22, 25, 36, 38, 39, 42, 43, 45, 46, 49, 73, 85, 96, 648, 698, 790, 833, 834, 835, 839, 840, 844, 847, 848, 850, 852, 855, 856, 859, 862, 868, 870, 875, 878, 879, 882, 885, 891], "practition": [8, 9, 10, 11, 22, 885, 889, 890, 891], "larg": [8, 9, 22, 57, 67, 68, 90, 91, 234, 251, 258, 284, 285, 389, 398, 503, 533, 643, 648, 696, 829, 834, 835, 841, 843, 849, 867, 878, 885], "unabl": [8, 9, 22, 23, 24, 835, 862], "rich": [8, 9, 22], "ecosystem": [8, 9, 22, 885], "state": [8, 9, 22, 30, 41, 56, 72, 91, 95, 111, 198, 199, 200, 201, 202, 284, 386, 432, 613, 615, 618, 620, 621, 641, 643, 645, 647, 672, 673, 788, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 831, 834, 841, 844, 845, 847, 848, 849, 850, 851, 856, 859, 863, 864, 865, 867, 875, 879, 891, 892], "art": [8, 9, 22], "sota": [8, 9, 10, 11, 22], "inaccur": [8, 9, 22], "dynam": [8, 9, 14, 15, 22, 49, 650, 720, 808, 815, 837, 843, 844, 845, 855, 856, 861, 864, 878, 885, 889], "connect": [8, 9, 20, 21, 22, 56, 806, 829, 834, 841, 858, 868, 869, 875, 883], "layer": [8, 9, 10, 11, 14, 15, 16, 17, 22, 27, 29, 33, 39, 40, 42, 43, 54, 59, 68, 76, 91, 99, 653, 672, 673, 674, 751, 803, 805, 807, 808, 809, 810, 811, 827, 847, 856, 860, 862, 864, 865, 868, 874, 879, 883, 885, 889, 892], "togeth": [8, 9, 22, 68, 85, 91, 345, 362, 383, 387, 441, 811, 836, 839, 842, 844, 855, 856, 859, 860, 862, 868, 869, 870, 875, 883, 885, 886, 891], "For": [8, 9, 18, 19, 20, 21, 22, 23, 24, 25, 33, 35, 42, 43, 45, 48, 50, 64, 68, 73, 79, 91, 96, 137, 150, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 265, 266, 267, 272, 273, 274, 275, 276, 279, 284, 286, 287, 289, 293, 294, 295, 296, 297, 298, 301, 302, 304, 341, 342, 343, 346, 347, 349, 370, 380, 383, 387, 389, 453, 455, 475, 495, 498, 640, 643, 648, 650, 656, 658, 696, 698, 702, 713, 724, 763, 764, 765, 766, 774, 776, 777, 779, 791, 803, 827, 833, 834, 835, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 864, 866, 867, 868, 869, 870, 871, 874, 875, 876, 878, 882, 883, 886, 891, 892], "seamless": [8, 9, 22, 827], "wai": [8, 9, 22, 25, 31, 32, 33, 36, 38, 42, 46, 48, 54, 108, 111, 827, 829, 832, 833, 834, 838, 839, 840, 841, 843, 844, 845, 855, 856, 857, 859, 862, 866, 867, 868, 869, 870, 871, 874, 875, 880, 887, 891, 892], "introduc": [8, 9, 22, 42, 43, 258, 643, 650, 656, 721, 763, 833, 842, 843, 844, 853, 857, 859, 862, 867, 874], "pipelin": [8, 9, 10, 11, 22, 827, 829, 837, 838, 839, 857, 860, 869, 872, 874, 879, 885, 886, 891], "blog": [8, 9, 10, 11, 22, 835], "through": [8, 9, 10, 11, 22, 43, 48, 56, 68, 91, 111, 239, 398, 539, 540, 643, 652, 735, 741, 808, 820, 828, 831, 832, 833, 835, 836, 837, 840, 841, 842, 843, 845, 846, 848, 849, 850, 852, 853, 855, 856, 857, 859, 861, 862, 863, 864, 867, 868, 869, 878, 883, 885, 886, 887], "train": [8, 9, 10, 11, 27, 29, 40, 42, 43, 59, 68, 70, 72, 91, 93, 95, 111, 386, 387, 392, 410, 411, 412, 459, 512, 514, 626, 627, 632, 646, 647, 670, 672, 674, 677, 805, 806, 807, 808, 809, 827, 842, 845, 852, 867, 868, 869, 870, 876, 879, 883, 884, 889, 891, 892], "illustr": [8, 9, 22, 35, 45, 840, 864], "workflow": [8, 9, 22, 36, 46, 57, 833, 835, 836, 840, 844, 854, 856, 867, 872, 876, 884, 891, 892], "pre": [8, 9, 42, 43, 831, 833, 858, 859, 869, 870, 871, 885], "belong": [8, 9, 85, 833, 838, 868], "convolut": [8, 9, 22, 40, 68, 72, 91, 95, 386, 407, 425, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 792, 806, 825, 879, 883, 885], "neural": [8, 9, 647, 802, 806, 827, 879, 881, 883, 884, 885, 889, 891, 892], "network": [8, 9, 33, 40, 42, 43, 54, 56, 61, 647, 671, 802, 805, 806, 827, 842, 852, 864, 868, 875, 879, 881, 883, 884, 885, 889, 891, 892], "cnn": [8, 9, 42, 43, 885], "architectur": [8, 9, 22, 59, 827, 834, 869, 870, 883, 884, 885, 888, 889, 890], "inspir": [8, 9, 839], "vision": [8, 9, 10, 11, 42, 43, 61, 881, 891], "perform": [8, 9, 12, 13, 16, 17, 25, 35, 37, 38, 39, 40, 42, 43, 45, 47, 54, 56, 64, 68, 72, 73, 81, 82, 87, 91, 92, 95, 96, 104, 105, 124, 128, 148, 149, 221, 229, 251, 284, 305, 352, 374, 383, 384, 386, 387, 389, 396, 398, 409, 410, 411, 412, 414, 415, 419, 420, 428, 430, 456, 472, 526, 534, 535, 556, 557, 558, 571, 572, 573, 589, 599, 637, 640, 642, 643, 645, 647, 648, 651, 652, 658, 659, 670, 673, 689, 698, 700, 705, 729, 730, 731, 739, 740, 771, 772, 775, 781, 782, 785, 802, 806, 821, 825, 838, 839, 840, 842, 844, 845, 846, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 867, 870, 876, 878, 879, 882, 885, 886, 887, 888, 889, 890, 892], "strength": [8, 9], "wise": [8, 9, 42, 62, 67, 68, 73, 84, 90, 91, 96, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 292, 293, 300, 305, 306, 307, 308, 309, 310, 312, 314, 316, 317, 318, 320, 321, 322, 345, 348, 353, 356, 357, 358, 361, 362, 363, 364, 368, 369, 372, 373, 378, 383, 386, 387, 389, 410, 411, 412, 439, 446, 482, 489, 491, 492, 511, 637, 643, 650, 679, 713, 810, 862], "supervis": [8, 9, 10, 11, 68, 388, 463], "convent": [8, 9, 298, 643, 648, 658, 688, 773, 835, 840, 851, 860, 874, 891], "demonstr": [8, 9, 10, 11, 22, 25, 39, 42, 43, 57, 827, 836, 844, 846, 848, 866], "improv": [8, 9, 18, 19, 23, 24, 25, 42, 45, 830, 835, 844, 851, 852, 862, 864, 872, 876, 878, 883, 885, 887, 888], "scalabl": [8, 9, 864, 874, 890, 891], "sometim": [8, 9, 833, 834, 835, 838, 844, 852, 856, 859, 862], "rival": [8, 9], "even": [8, 9, 18, 19, 22, 39, 42, 43, 68, 91, 108, 251, 284, 289, 294, 389, 398, 495, 533, 643, 827, 834, 835, 836, 838, 840, 843, 844, 845, 847, 851, 852, 855, 856, 857, 862, 866, 867, 868, 869, 870, 875, 876, 891], "downsampl": [8, 9, 20, 21, 22, 68, 91, 422], "detial": [8, 9], "outsid": [8, 9, 22, 650, 713, 724, 844, 845, 852, 866, 890], "scope": [8, 9, 22, 840, 886, 890], "demo": [8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 43, 50, 54, 58, 827], "interest": [8, 9, 10, 11, 22, 40, 42, 54, 251, 284, 643, 833, 835], "reader": [8, 9, 10, 11, 22], "paper": [8, 9, 22, 647, 674, 827, 876], "mostli": [8, 9, 22, 845, 855, 859], "kera": [8, 9, 14, 15, 16, 17, 22, 26, 27, 29, 31, 32, 40, 42, 43, 59, 60, 803, 827, 876, 879, 891], "wrapper": [8, 9, 31, 32, 35, 68, 91, 309, 798, 839, 841, 842, 844, 848, 852, 855, 856, 859, 866, 872, 881, 885], "prepar": [8, 9, 22, 43, 56, 58, 61, 843], "data": [8, 9, 10, 11, 29, 37, 38, 39, 40, 43, 48, 56, 58, 61, 62, 64, 67, 68, 69, 72, 73, 75, 77, 78, 79, 80, 81, 82, 84, 85, 87, 90, 91, 92, 95, 96, 98, 100, 101, 102, 103, 104, 105, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 197, 203, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 311, 312, 313, 314, 323, 324, 325, 326, 327, 328, 329, 340, 341, 342, 343, 344, 346, 347, 348, 365, 370, 378, 380, 383, 386, 387, 389, 393, 397, 398, 401, 410, 411, 412, 428, 430, 432, 438, 440, 460, 478, 500, 503, 504, 506, 507, 519, 520, 521, 522, 523, 529, 533, 534, 535, 539, 542, 543, 560, 573, 575, 576, 579, 606, 637, 640, 642, 643, 645, 647, 648, 650, 652, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 714, 717, 718, 720, 721, 723, 724, 728, 736, 753, 754, 755, 757, 758, 759, 761, 762, 767, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 788, 790, 791, 792, 793, 798, 802, 805, 806, 807, 808, 812, 821, 825, 834, 837, 838, 839, 840, 841, 842, 845, 847, 851, 852, 853, 855, 857, 860, 862, 864, 866, 872, 873, 875, 885, 886, 887, 889, 890, 891], "experiment": [8, 16, 17, 22, 825, 831, 835, 844, 856, 860, 864, 885], "set_memory_growth": [8, 22], "list_physical_devic": [8, 9, 22], "manual_se": [8, 9, 10, 11, 22, 40], "set_se": [8, 9, 22], "51": [8, 9, 22, 25, 54, 58, 67, 68, 90, 91, 92, 100, 246, 284, 297, 387, 408, 462, 643, 755, 790], "38": [8, 9, 23, 24, 25, 38, 54, 56, 58, 61, 65, 68, 90, 91, 100, 176, 301, 368, 383, 386, 398, 406, 425, 428, 429, 534, 641, 643, 648, 690, 790, 846], "926817": [8, 9], "e": [8, 9, 23, 24, 42, 59, 60, 64, 68, 73, 77, 79, 80, 81, 83, 90, 91, 96, 100, 103, 104, 106, 108, 109, 113, 140, 149, 150, 153, 154, 158, 162, 191, 204, 231, 232, 233, 237, 239, 240, 243, 245, 247, 251, 252, 254, 257, 258, 264, 265, 272, 273, 274, 275, 282, 283, 284, 285, 287, 291, 293, 294, 297, 298, 302, 312, 339, 346, 347, 380, 383, 386, 387, 388, 389, 393, 398, 399, 405, 406, 409, 423, 424, 425, 426, 430, 443, 446, 454, 468, 503, 507, 519, 520, 521, 522, 523, 534, 535, 544, 638, 640, 641, 642, 643, 647, 648, 650, 652, 654, 656, 657, 658, 674, 679, 684, 685, 688, 689, 691, 694, 697, 698, 699, 702, 705, 716, 724, 735, 739, 740, 741, 744, 749, 750, 753, 754, 755, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 806, 820, 821, 825, 827, 828, 831, 833, 834, 835, 837, 838, 840, 842, 844, 848, 849, 854, 856, 859, 864, 867, 870, 871, 872, 875, 876, 878, 881, 893], "extern": [8, 9, 842, 851, 856, 859, 860], "local_xla": [8, 9], "xla": [8, 9, 23, 24, 856, 870, 872, 885], "stream_executor": [8, 9, 23, 24], "cuda_dnn": [8, 9, 23, 24], "cc": [8, 9, 23, 24, 37, 38, 40, 57, 849], "9261": [8, 9], "regist": [8, 9, 23, 24, 808, 835, 871, 878], "cudnn": [8, 9, 22, 23, 24], "factori": [8, 9, 23, 24, 68, 388, 467, 468, 821], "plugin": [8, 9, 23, 24, 834], "926873": [8, 9], "cuda_fft": [8, 9, 23, 24], "607": [8, 9], "cufft": [8, 9, 22, 23, 24], "928224": [8, 9], "cuda_bla": [8, 9, 23, 24], "1515": [8, 9], "cubla": [8, 9, 22, 23, 24], "936743": [8, 9], "cpu_feature_guard": [8, 9, 37, 38, 40], "182": [8, 9, 37, 38, 40, 91], "instruct": [8, 9, 37, 38, 40, 85, 114, 827, 833, 834, 838, 848, 850, 857, 859, 871, 883, 886, 889, 891], "avx2": [8, 9, 37, 38, 40], "fma": [8, 9, 37, 38, 40], "rebuild": [8, 9, 37, 38, 40, 85, 114], "flag": [8, 9, 22, 37, 38, 40, 85, 207, 388, 398, 465, 533, 642, 647, 674, 787, 798, 809, 835, 844, 845, 855, 856, 857, 859, 878, 879], "40": [8, 9, 14, 15, 22, 25, 54, 56, 58, 68, 69, 90, 91, 92, 100, 104, 114, 245, 249, 269, 298, 360, 383, 386, 389, 406, 408, 418, 424, 500, 556, 558, 563, 564, 588, 603, 625, 628, 643, 645, 646, 648, 652, 658, 687, 693, 741, 754, 773, 777, 843], "071672": [8, 9], "w": [8, 9, 12, 13, 23, 24, 57, 58, 68, 69, 70, 72, 85, 90, 91, 92, 93, 95, 108, 278, 360, 375, 383, 385, 386, 387, 392, 405, 406, 407, 409, 423, 424, 425, 426, 442, 462, 517, 532, 556, 558, 603, 626, 627, 628, 630, 632, 633, 634, 645, 646, 647, 652, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 738, 837, 854, 864, 867, 868, 879, 893], "tf2tensorrt": [8, 9, 23, 24], "py_util": [8, 9, 23, 24], "trt": [8, 9, 23, 24], "find": [8, 9, 23, 24, 31, 57, 58, 61, 73, 79, 85, 96, 648, 652, 656, 691, 734, 763, 764, 765, 766, 820, 821, 827, 828, 829, 830, 832, 833, 834, 835, 838, 841, 843, 849, 854, 859, 862, 864, 867, 871, 872, 874, 878], "tensorrt": [8, 9, 23, 24], "map": [8, 9, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 179, 183, 184, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 383, 386, 410, 411, 412, 430, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 501, 503, 504, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 625, 630, 635, 645, 652, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 739, 740, 744, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 821, 839, 842, 844, 851, 852, 856, 859, 860, 867, 870, 872, 879, 886], "dataset": [8, 9, 10, 11, 22, 25, 42, 85, 867, 878, 879], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 56, 58, 68, 75, 85, 87, 91, 98, 145, 389, 485, 640, 650, 720, 833, 834, 841, 843, 849, 859, 861, 862, 885], "185": [8, 9, 20, 21, 56, 84], "199": [8, 9, 20, 21, 56, 237, 643], "108": [8, 9, 20, 21, 25, 37, 38, 39, 40, 56, 647, 658, 671, 773], "109": [8, 9, 20, 21, 56, 73, 648, 686], "111": [8, 9, 20, 21, 56, 652, 750], "443": [8, 9, 20, 21, 56, 296, 643], "sent": [8, 9, 20, 21, 56], "await": [8, 9, 20, 21, 56], "respons": [8, 9, 20, 21, 22, 56, 392, 517, 835, 843, 844], "200": [8, 9, 20, 21, 22, 25, 56, 92, 95, 245, 386, 410, 411, 564, 588, 643, 645, 820, 867], "ok": [8, 9, 20, 21, 56, 834], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 20, 21, 56], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 22, 25], "url": [8, 9, 10, 11, 18, 19, 22, 23, 24, 39, 42, 43, 56, 59, 827, 879], "cocodataset": [8, 9, 10, 11, 18, 19, 23, 24, 39, 42, 43, 59, 827, 879], "org": [8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 24, 39, 42, 43, 56, 58, 59, 61, 67, 68, 90, 91, 93, 158, 166, 254, 264, 265, 280, 339, 346, 347, 380, 383, 386, 389, 398, 430, 503, 533, 626, 627, 640, 641, 643, 646, 648, 650, 658, 696, 697, 728, 778, 827, 847, 879], "val2017": [8, 9, 10, 11, 18, 19, 23, 24, 42, 59], "000000039769": [8, 9, 10, 11, 18, 19, 23, 24, 42, 59], "stream": [8, 9, 10, 11, 18, 19, 23, 24, 39, 42, 43, 56, 59, 66, 89, 225, 642, 827, 879, 889], "initialis": [8, 9, 22, 838, 856, 859], "api": [8, 9, 10, 11, 22, 30, 35, 40, 41, 45, 58, 60, 67, 68, 73, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 166, 176, 179, 189, 191, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 346, 347, 349, 383, 386, 389, 398, 430, 503, 507, 533, 640, 641, 643, 648, 650, 655, 656, 657, 658, 659, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 714, 716, 717, 718, 720, 721, 723, 724, 728, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 827, 831, 834, 835, 837, 839, 841, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 859, 862, 863, 865, 867, 870, 872, 873, 874, 881, 883, 885, 887, 890, 892], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 22, 35, 45, 64, 65, 68, 85, 88, 91, 150, 164, 191, 333, 388, 465, 473, 474, 475, 628, 640, 641, 646, 851, 852, 854, 855, 856, 859, 868, 870, 878, 880, 886, 891], "regardless": [8, 9, 22, 42, 43, 54, 85, 828, 844, 848, 866, 869, 876], "host": [8, 9, 22, 825, 829, 843, 870, 875, 890], "convnext_xlarg": [8, 9], "include_top": [8, 9, 29, 827], "include_preprocess": [8, 9], "input_tensor": [8, 9, 68, 91, 387, 388, 459, 463, 468, 856], "input_shap": [8, 9, 18, 19, 29, 40, 42, 43, 827], "pool": [8, 9, 68, 91, 95, 386, 400, 401, 402, 403, 405, 406, 407, 423, 424, 425, 426, 429, 806, 834], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 57], "gpu_devic": [8, 9], "1929": [8, 9], "job": [8, 9, 42, 43, 827, 841, 843, 879], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 18, 19], "pcie": [8, 9, 875], "16gb": [8, 9], "pci": [8, 9], "bu": [8, 9, 96, 875], "id": [8, 9, 25, 57, 68, 91, 207, 341, 342, 343, 380, 568, 642, 645, 827, 832, 834, 839, 841, 842, 850, 854, 859, 871, 893], "0001": [8, 9, 67, 68, 91, 294, 295, 387, 456, 462, 790, 793, 810], "over": [8, 9, 10, 11, 14, 15, 22, 33, 40, 43, 45, 56, 68, 73, 81, 82, 83, 88, 91, 95, 96, 104, 105, 106, 108, 133, 331, 332, 346, 347, 360, 367, 380, 383, 386, 387, 388, 389, 396, 398, 400, 401, 402, 403, 406, 415, 420, 424, 428, 429, 430, 431, 432, 433, 455, 463, 472, 485, 500, 503, 504, 507, 526, 536, 542, 591, 625, 639, 645, 648, 653, 654, 658, 659, 679, 689, 700, 702, 704, 705, 751, 755, 774, 775, 776, 777, 778, 779, 780, 781, 782, 806, 809, 815, 820, 827, 834, 835, 840, 846, 847, 854, 855, 857, 860, 864, 866, 870, 874, 876, 883, 885], "wonder": [8, 9, 866, 874, 876], "why": [8, 9, 33, 827, 835, 855, 866, 873, 875], "One": [8, 9, 10, 11, 22, 58, 68, 69, 75, 77, 91, 92, 98, 100, 111, 389, 473, 474, 475, 478, 495, 504, 507, 557, 645, 650, 654, 720, 753, 839, 842, 844, 846, 852, 857, 859, 864, 866, 867], "reason": [8, 9, 22, 293, 302, 643, 833, 835, 838, 839, 842, 843, 844, 846, 852, 855, 856, 859, 860, 862, 864, 866, 875, 891], "highlight": [8, 9, 835, 843, 846, 856, 858], "directli": [8, 9, 27, 29, 33, 36, 40, 42, 43, 46, 386, 387, 422, 446, 652, 744, 827, 833, 834, 835, 836, 838, 839, 842, 843, 844, 845, 847, 850, 852, 853, 855, 856, 857, 860, 861, 864, 866, 868, 869, 870, 871, 876, 878, 879, 880, 889, 890, 891], "much": [8, 9, 18, 19, 23, 24, 25, 33, 34, 40, 42, 43, 44, 45, 56, 111, 345, 362, 383, 805, 833, 834, 835, 839, 842, 844, 852, 855, 856, 857, 860, 861, 862, 864, 866, 867, 875, 883, 885, 891, 892], "There": [8, 9, 22, 33, 40, 43, 48, 108, 379, 381, 382, 390, 391, 395, 792, 833, 834, 835, 838, 839, 841, 842, 844, 845, 846, 848, 850, 852, 854, 856, 857, 861, 864, 867, 870, 874, 878, 886, 887, 891, 892], "deeper": [8, 9, 31, 33, 43, 63, 652, 743, 744, 827, 835, 837, 859, 863, 874], "offer": [8, 9, 856, 868, 876, 885, 891, 892], "limit": [8, 9, 85, 114, 176, 179, 551, 552, 568, 641, 645, 650, 713, 790, 792, 793, 805, 812, 821, 834, 835, 841, 843, 846, 848, 856, 859, 862, 867, 870, 884, 885, 886], "soon": [8, 9, 833, 835, 843, 844, 870, 878], "comparison": [8, 9, 16, 17, 20, 21, 68, 91, 252, 287, 348, 383, 388, 467, 468, 643, 648, 699, 785, 848], "separ": [8, 9, 57, 68, 69, 91, 392, 513, 560, 645, 647, 674, 787, 798, 834, 835, 839, 842, 843, 846, 857, 858, 859, 864, 866, 867, 886, 890], "stai": [8, 9, 843], "origin": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 40, 42, 43, 44, 45, 46, 48, 55, 56, 57, 61, 68, 73, 75, 81, 85, 91, 96, 98, 104, 108, 111, 113, 114, 239, 264, 291, 330, 380, 386, 387, 389, 398, 430, 456, 488, 494, 496, 499, 534, 535, 539, 540, 541, 542, 543, 643, 648, 650, 658, 689, 720, 721, 772, 787, 792, 815, 816, 827, 829, 833, 834, 835, 840, 841, 843, 844, 849, 853, 855, 856, 857, 864, 876, 878, 879, 885, 886], "convert_to_tensor": [8, 9, 22], "tmp": [8, 9, 56, 58, 600, 623, 645], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 27, 33, 54, 802, 815, 825, 860, 864, 870], "deprec": [8, 9, 61], "futur": [8, 9, 14, 15, 33, 40, 42, 56, 648, 684, 685, 834, 835, 836, 843, 844, 859, 860, 862, 866, 870, 874, 876, 891], "instead": [8, 9, 22, 23, 24, 27, 29, 33, 37, 38, 39, 40, 42, 49, 56, 61, 67, 68, 73, 90, 91, 96, 109, 205, 293, 327, 380, 386, 398, 423, 424, 425, 533, 536, 642, 643, 648, 691, 790, 833, 834, 835, 838, 841, 843, 844, 846, 847, 848, 851, 852, 853, 855, 856, 857, 859, 862, 864, 866, 867, 870, 878, 879, 880, 883, 885, 891, 892], "logits_np": [8, 9, 10, 11, 22], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 56, 59, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 113, 117, 124, 128, 129, 138, 139, 143, 145, 146, 147, 148, 149, 152, 156, 157, 158, 165, 172, 175, 176, 179, 186, 201, 215, 216, 217, 224, 225, 234, 241, 242, 243, 244, 245, 246, 258, 261, 285, 289, 294, 300, 303, 311, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 351, 352, 356, 360, 367, 369, 371, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 441, 443, 444, 445, 446, 448, 453, 455, 456, 459, 460, 462, 467, 471, 472, 476, 480, 481, 484, 485, 488, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 531, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 546, 556, 557, 558, 560, 563, 564, 567, 568, 582, 585, 587, 602, 603, 604, 605, 609, 625, 626, 627, 628, 629, 632, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 679, 681, 682, 689, 690, 695, 700, 702, 703, 704, 705, 707, 708, 709, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 738, 739, 741, 743, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 765, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 792, 793, 802, 805, 806, 820, 821, 825, 842, 844, 845, 846, 848, 851, 852, 855, 857, 859, 860, 862, 864, 869, 878], "argmax": [8, 9, 10, 11, 12, 13, 22, 57, 58, 59, 78, 101, 389, 500, 655, 856, 878, 882], "57": [8, 9, 20, 21, 25, 54, 56, 67, 68, 90, 91, 209, 232, 233, 236, 237, 239, 249, 250, 290, 306, 307, 378, 642, 643], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 14, 15, 56, 57, 58, 61, 68, 301, 473, 474, 475, 643, 835, 838, 840, 844, 856, 864, 869, 891], "spawn": [8, 9, 584, 645], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 16, 17, 54, 275, 551, 643, 645], "578886": [8, 9], "servic": [8, 9, 887], "168": [8, 9, 58, 551, 645, 652, 732], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 656, 763, 765, 825, 839, 844, 855, 870, 876], "578915": [8, 9], "176": [8, 9, 551, 645], "streamexecutor": [8, 9], "messag": [8, 9, 22, 812, 822, 826, 834, 835, 843, 846, 848, 850, 856, 864, 866, 875], "absl": [8, 9, 56], "initializelog": [8, 9], "stderr": [8, 9], "i0000": [8, 9], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 68, 69, 72, 91, 92, 95, 386, 392, 406, 407, 424, 425, 517, 556, 558, 645, 647, 652, 660, 663, 664, 665, 666, 667, 668, 669, 735, 739, 741, 744, 749, 828, 837, 841, 842, 843, 879, 881], "186": [8, 9], "cluster": [8, 9, 68, 91, 387, 441, 870, 885], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 22, 37, 38, 42, 43, 47, 48, 49, 56, 827, 878, 879, 880], "explain": [8, 9, 10, 11, 22, 48, 68, 91, 386, 420, 431, 827, 833, 834, 835, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 859, 860, 862, 864, 865, 866, 867, 868, 869, 881, 888, 891], "doc": [8, 9, 22, 23, 24, 25, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 57, 58, 91, 158, 339, 346, 347, 380, 383, 535, 640, 827, 828, 832, 833, 837, 846, 847, 850, 851, 859, 864, 867, 868, 878, 879, 880], "involv": [8, 9, 22, 27, 30, 31, 38, 40, 65, 88, 191, 234, 251, 258, 284, 289, 641, 643, 821, 828, 836, 837, 843, 844, 846, 857, 862, 869, 875, 885, 891], "dummi": [8, 9, 22, 37, 38, 47, 48, 49, 55, 835], "transpiled_model": [8, 9, 10, 11, 22], "backend_compil": [8, 9, 42, 43], "root": [8, 9, 10, 11, 14, 15, 20, 21, 22, 23, 24, 37, 38, 39, 40, 56, 57, 58, 61, 67, 90, 298, 643, 829, 833, 834, 835, 841, 849, 856, 867], "placement": [8, 9, 22, 23, 24, 833], "case": [8, 9, 22, 27, 29, 35, 37, 42, 43, 45, 46, 47, 48, 56, 63, 64, 68, 69, 75, 81, 85, 87, 91, 92, 98, 108, 109, 114, 139, 150, 177, 178, 205, 210, 211, 218, 226, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 259, 265, 266, 267, 272, 273, 274, 275, 276, 279, 284, 287, 289, 293, 294, 295, 296, 297, 298, 301, 302, 304, 346, 347, 358, 360, 370, 383, 386, 388, 389, 392, 393, 399, 410, 411, 412, 432, 463, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 500, 501, 507, 510, 512, 514, 521, 544, 561, 562, 566, 573, 587, 588, 589, 640, 641, 642, 643, 645, 648, 650, 652, 658, 696, 702, 716, 717, 718, 720, 722, 723, 725, 727, 735, 741, 774, 775, 776, 777, 778, 779, 780, 790, 791, 810, 821, 827, 831, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 866, 868, 869, 870, 875, 878, 879, 880, 884, 888], "ad": [8, 9, 20, 21, 22, 23, 24, 25, 37, 38, 39, 40, 68, 75, 91, 98, 106, 251, 284, 345, 362, 383, 392, 512, 513, 514, 603, 604, 643, 645, 647, 648, 650, 674, 684, 685, 716, 806, 811, 827, 831, 832, 833, 834, 835, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 860, 862, 864, 868, 870, 875, 878, 884, 885], "logits_transpil": [8, 9, 22], "logits_transpiled_np": [8, 9, 22], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 42, 43, 792, 842, 843, 847, 850, 853, 862, 869], "produc": [8, 9, 10, 11, 14, 15, 22, 55, 68, 69, 72, 91, 95, 313, 323, 326, 378, 380, 386, 434, 647, 677, 790, 821, 833, 844, 849, 850, 855, 857, 859, 860, 878, 886, 888], "granular": [8, 9, 10, 11, 22], "level": [8, 9, 10, 11, 22, 33, 42, 43, 45, 68, 91, 92, 387, 459, 548, 821, 825, 827, 828, 833, 834, 835, 836, 842, 844, 848, 852, 854, 855, 856, 858, 861, 862, 863, 864, 867, 868, 869, 870, 872, 876, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893], "close": [8, 9, 10, 11, 22, 58, 73, 256, 274, 294, 323, 380, 643, 648, 650, 698, 716, 830, 831, 833, 834, 835, 836, 844, 847, 849, 856, 862, 885], "inde": [8, 9, 10, 11, 22, 851, 862, 870, 883], "benefit": [8, 9, 10, 11, 22, 43, 834, 839, 842, 855, 862, 866, 867, 870, 875, 876, 883, 887, 890], "trainabl": [8, 9, 10, 11, 22, 27, 29, 33, 39, 40, 42, 43, 60, 803, 807, 808, 811, 827, 847, 865, 867, 868, 879, 880], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 22, 867], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 22, 56, 58, 61, 68, 72, 77, 91, 95, 100, 386, 388, 405, 406, 407, 423, 424, 425, 426, 470, 647, 649, 654, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 674, 710, 752, 867], "shuffl": [8, 9, 10, 11, 22, 58, 68, 77, 85, 91, 100, 521, 654], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 22], "sgd": [8, 9, 10, 11, 22, 56, 810, 885], "lr": [8, 9, 56, 70, 93, 547, 627, 630, 632, 633, 634, 645, 646, 810, 867, 868], "1e": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 42, 54, 58, 65, 68, 70, 73, 74, 76, 88, 91, 93, 96, 97, 99, 112, 176, 345, 362, 383, 388, 392, 468, 512, 513, 514, 593, 594, 603, 616, 617, 626, 627, 632, 634, 641, 645, 646, 648, 649, 653, 698, 707, 708, 709, 751, 785, 787, 807, 809, 810, 831, 842, 849, 852, 855, 857, 868, 869], "loss_fn": [8, 9, 22, 42, 43, 54, 56, 58, 867, 868, 869], "crossentropyloss": [8, 9, 56, 807], "epoch": [8, 9, 10, 11, 22, 42, 43, 56, 58], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 20, 21, 56, 75, 98, 113, 396, 525, 650, 718, 725, 879], "loss": [8, 9, 10, 11, 22, 42, 43, 56, 58, 68, 91, 108, 463, 464, 465, 466, 467, 468, 469, 470, 596, 619, 645, 707, 708, 709, 710, 711, 712, 827, 843, 844, 852, 856, 860, 861, 867, 868, 869, 885, 892], "backward": [8, 9, 10, 11, 56, 68, 82, 91, 105, 293, 386, 409, 414, 415, 419, 420, 430, 431, 643, 648, 659, 679, 704, 781, 782, 806, 825, 860, 870], "append": [8, 9, 10, 11, 25, 57, 58, 68, 73, 85, 91, 243, 352, 383, 643, 648, 650, 682, 688, 716, 821, 843, 859, 864, 867, 882], "avg_loss": [8, 9, 10, 11, 56], "02": [8, 9, 20, 21, 23, 24, 56, 64, 69, 70, 76, 77, 90, 93, 100, 149, 236, 237, 276, 386, 408, 418, 419, 603, 604, 626, 627, 632, 640, 643, 645, 646, 653, 654, 751, 754, 755, 857], "94": [8, 9, 22, 25, 54, 67, 68, 70, 77, 90, 91, 93, 100, 218, 294, 295, 371, 383, 418, 630, 642, 646, 755], "ve": [8, 9, 10, 11, 12, 13, 14, 15, 22, 25, 31, 40, 42, 77, 100, 654, 752, 833, 834, 835, 836, 849, 859, 862, 863, 866, 872], "And": [8, 9, 10, 11, 18, 19, 22, 23, 24, 25, 27, 29, 34, 37, 42, 43, 44, 57, 88, 376, 377, 385, 838, 841, 850, 852, 859, 878], "plug": [8, 9, 22], "seen": [8, 9, 22, 27, 29, 34, 40, 42, 387, 393, 446, 521, 568, 645, 815, 843, 844, 846, 848, 856, 859, 864, 866, 867, 874, 875, 891], "d": [8, 9, 10, 11, 22, 57, 68, 69, 72, 73, 75, 87, 91, 92, 95, 96, 98, 111, 127, 149, 158, 191, 234, 251, 252, 284, 287, 339, 380, 386, 387, 389, 392, 393, 396, 405, 406, 407, 414, 419, 423, 424, 425, 426, 428, 432, 438, 454, 475, 481, 483, 486, 490, 504, 506, 510, 517, 519, 525, 548, 559, 637, 640, 641, 643, 647, 648, 650, 652, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 681, 682, 686, 689, 693, 702, 703, 722, 735, 739, 740, 741, 744, 749, 750, 791, 821, 827, 828, 834, 837, 840, 841, 842, 849, 854, 859, 862, 867, 875, 876, 881], "sign": [8, 9, 10, 11, 22, 67, 68, 73, 79, 81, 90, 91, 96, 108, 137, 231, 232, 233, 234, 237, 239, 240, 245, 249, 251, 254, 256, 258, 284, 286, 293, 297, 298, 302, 350, 383, 387, 389, 398, 458, 502, 503, 534, 535, 640, 643, 648, 656, 658, 696, 763, 764, 765, 766, 771, 772, 777, 779, 834, 836, 844, 864, 869, 875], "ask": [8, 9, 10, 11, 22, 827, 833, 834, 846, 864, 866, 870, 871, 876], "server": [8, 9, 10, 11, 22, 56, 827, 834, 835, 841, 849, 871, 885], "forward": [8, 9, 10, 11, 12, 13, 20, 21, 22, 29, 42, 43, 56, 58, 68, 91, 376, 385, 386, 409, 414, 415, 419, 420, 430, 431, 803, 805, 806, 808, 810, 825, 827, 834, 840, 847, 854, 859, 860, 862, 869, 870, 878, 885, 886], "come": [10, 11, 33, 56, 830, 833, 834, 835, 839, 843, 856, 861, 862, 868, 872, 885], "onto": [10, 11, 652, 738, 744, 873, 874, 885], "scene": [10, 11, 837, 863, 865, 873, 874, 885], "almost": [10, 11, 56, 832, 842, 857, 865, 867, 874], "alwai": [10, 11, 64, 65, 68, 69, 75, 87, 88, 91, 98, 121, 139, 163, 234, 284, 357, 383, 387, 389, 458, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 510, 566, 573, 637, 641, 643, 645, 650, 716, 717, 718, 720, 722, 723, 725, 727, 792, 833, 834, 835, 839, 840, 842, 844, 847, 850, 851, 852, 855, 856, 857, 858, 859, 860, 862, 864, 870, 878], "huggingfac": [10, 11, 56, 878, 879], "implement": [10, 11, 25, 33, 34, 42, 44, 48, 56, 59, 65, 66, 68, 79, 80, 88, 89, 91, 96, 103, 108, 163, 177, 178, 191, 210, 211, 225, 231, 232, 233, 236, 237, 238, 239, 248, 249, 251, 254, 256, 258, 272, 273, 274, 275, 284, 286, 289, 293, 296, 297, 301, 302, 346, 347, 370, 383, 387, 398, 439, 440, 539, 540, 561, 562, 641, 642, 643, 645, 647, 648, 656, 657, 658, 674, 683, 684, 685, 693, 702, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 791, 793, 815, 827, 831, 833, 837, 838, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 853, 855, 857, 859, 860, 862, 864, 866, 867, 868, 869, 870, 872, 882, 883, 884, 885, 888, 891, 892], "conveni": [10, 11, 36, 46, 833, 844, 845, 851, 857, 865, 867, 868, 872, 891], "who": [10, 11, 31, 827, 830, 836, 837, 848, 863, 870, 885, 887, 893], "must": [10, 11, 48, 56, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 224, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 336, 337, 340, 341, 342, 343, 346, 347, 348, 349, 350, 352, 354, 355, 357, 359, 361, 363, 364, 365, 366, 370, 373, 378, 380, 383, 386, 387, 388, 389, 392, 393, 396, 398, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 428, 430, 431, 433, 435, 437, 438, 440, 446, 447, 452, 453, 454, 455, 460, 464, 465, 466, 467, 469, 470, 473, 474, 475, 480, 481, 483, 485, 486, 487, 488, 490, 494, 496, 497, 498, 499, 501, 503, 504, 505, 507, 508, 510, 515, 516, 518, 519, 520, 522, 523, 526, 533, 534, 535, 536, 543, 551, 552, 556, 557, 558, 563, 564, 566, 573, 587, 588, 625, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 805, 806, 810, 812, 832, 833, 834, 835, 838, 839, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 856, 859, 860, 861, 862, 864, 868, 869, 874, 876, 879, 880, 886, 892], "reimplement": [10, 11], "choic": [10, 11, 22, 25, 43, 60, 68, 81, 91, 104, 387, 389, 458, 478, 658, 778, 780, 827, 834, 843, 855, 856, 867, 876, 879, 885, 892], "veri": [10, 11, 22, 27, 35, 42, 43, 45, 67, 90, 285, 345, 362, 383, 643, 648, 696, 792, 832, 833, 834, 835, 841, 842, 844, 845, 846, 848, 849, 851, 852, 855, 856, 857, 859, 860, 862, 865, 867, 868, 869, 870, 874, 875, 881, 882, 883, 885, 886, 887, 890, 891, 892], "thousand": [10, 11, 870], "china": [10, 11], "howev": [10, 11, 25, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 73, 96, 258, 301, 302, 389, 392, 503, 512, 514, 591, 643, 645, 648, 696, 698, 815, 833, 834, 838, 839, 840, 842, 844, 845, 846, 847, 848, 850, 851, 852, 855, 856, 857, 859, 862, 864, 866, 867, 868, 869, 870, 875, 878, 884, 885, 891], "suffer": [10, 11], "abov": [10, 11, 33, 38, 42, 43, 48, 49, 64, 67, 68, 73, 77, 84, 90, 91, 96, 100, 109, 129, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 322, 324, 339, 340, 346, 347, 349, 352, 378, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 420, 423, 424, 425, 430, 431, 432, 440, 441, 495, 503, 507, 533, 536, 563, 567, 569, 571, 573, 602, 611, 635, 637, 640, 641, 643, 645, 646, 647, 648, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 831, 833, 834, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 859, 862, 864, 866, 867, 868, 869, 885, 890], "second": [10, 11, 14, 15, 67, 68, 70, 73, 75, 79, 90, 91, 92, 93, 96, 98, 102, 109, 113, 114, 134, 158, 189, 197, 234, 239, 241, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 280, 281, 284, 287, 289, 300, 330, 339, 345, 358, 360, 361, 362, 368, 372, 373, 380, 383, 387, 388, 389, 396, 398, 439, 440, 441, 443, 447, 469, 501, 509, 520, 522, 526, 533, 536, 548, 597, 620, 626, 627, 632, 639, 640, 641, 643, 645, 646, 648, 650, 651, 652, 656, 679, 682, 683, 684, 686, 688, 693, 695, 696, 698, 700, 702, 704, 724, 725, 730, 733, 763, 764, 765, 810, 834, 838, 841, 844, 846, 850, 855, 856, 859, 861, 866, 876, 890], "iter": [10, 11, 22, 56, 58, 63, 68, 69, 75, 83, 85, 91, 92, 98, 106, 111, 114, 133, 224, 331, 332, 380, 386, 387, 389, 432, 445, 456, 462, 479, 495, 545, 583, 639, 642, 645, 650, 652, 715, 719, 726, 728, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 747, 748, 750, 820, 821, 825, 838, 840, 842, 864, 867, 876, 878], "dino": [10, 11], "meta": [10, 11, 56, 729, 730, 731, 839, 860, 885], "vit": [10, 11], "purpos": [10, 11, 35, 42, 43, 45, 56, 58, 158, 256, 274, 339, 380, 640, 643, 648, 696, 835, 837, 839, 842, 843, 845, 846, 848, 851, 852, 853, 856, 858, 859, 862, 863, 866, 872, 884, 886, 889, 890, 891], "abund": [10, 11, 876], "literatur": [10, 11], "mainli": [10, 11, 833, 837, 854, 856, 859, 865, 867, 872, 885], "focus": [10, 11, 827, 844, 860, 883, 884, 885, 891, 892], "rather": [10, 11, 48, 69, 85, 92, 137, 224, 575, 576, 579, 640, 642, 645, 647, 672, 831, 835, 838, 842, 844, 847, 849, 856, 857, 859, 860, 869, 870, 875, 881, 884, 885], "65": [10, 11, 22, 25, 54, 56, 58, 61, 90, 93, 100, 245, 284, 571, 626, 643, 645, 646, 648, 658, 693, 754, 755, 773, 843], "749": [10, 11], "env": [10, 11, 37, 38, 39, 40], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 37, 38, 39, 40, 220, 346, 347, 383, 642, 803, 815, 833, 834, 844, 849], "autoimageprocessor": [10, 11, 878, 879], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 34, 37, 38, 58, 59, 68, 72, 77, 79, 85, 91, 95, 100, 334, 335, 336, 337, 338, 380, 387, 393, 445, 456, 462, 519, 520, 521, 522, 523, 647, 654, 656, 670, 752, 753, 754, 755, 757, 763, 798, 803, 805, 821, 853, 857, 859], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11, 890], "facebook": [10, 11, 59], "imagenet1k": [10, 11], "id2label": [10, 11, 59, 878], "predicted_class_idx": [10, 11, 59], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 107, 108, 109, 110, 111, 112], "stop_gradi": [10, 11, 70, 93, 224, 547, 627, 630, 632, 633, 634, 642, 645, 646, 651, 729, 730, 731, 810, 868], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 67, 90, 294, 643, 861], "io": [10, 11, 23, 24, 37, 38, 39, 40, 57, 60, 834, 843], "to_rgb": [10, 11], "cv2": [10, 11, 56, 58, 60, 867], "tar": [10, 11, 56, 57, 58, 61], "gz": [10, 11, 56, 57, 58, 61], "bj": [10, 11, 234, 251, 284, 349, 383, 643], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 58, 74, 97, 649, 709, 842, 852, 855], "33": [10, 11, 25, 54, 56, 57, 67, 77, 81, 90, 91, 92, 93, 95, 237, 238, 245, 294, 386, 387, 389, 398, 406, 428, 429, 459, 478, 534, 552, 603, 630, 643, 645, 646, 647, 648, 652, 658, 670, 671, 693, 750, 753, 773, 780, 790, 793], "bring": [10, 11, 42, 43, 838, 858, 859, 864, 865, 872, 875], "hope": [10, 11, 54, 870, 875, 891, 893], "milesi": [12, 13], "blob": [12, 13, 56, 58, 827], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 18, 19, 56, 68, 72, 76, 91, 93, 95, 99, 123, 222, 223, 315, 316, 319, 330, 360, 378, 380, 383, 386, 387, 392, 404, 410, 411, 412, 420, 422, 427, 431, 447, 512, 513, 514, 633, 637, 642, 646, 647, 653, 670, 674, 677, 751, 790, 792, 793, 805, 806, 810, 821, 885, 887], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 25, 57, 59, 61, 85, 549, 645, 798, 831, 837, 838, 849, 852, 855, 856, 857, 859, 860, 866, 867], "too": [12, 13, 68, 91, 234, 251, 258, 284, 389, 503, 643, 805, 833, 834, 835, 838, 844, 848, 860, 870], "small": [12, 13, 22, 25, 58, 67, 68, 73, 76, 90, 91, 96, 99, 251, 258, 284, 285, 345, 362, 383, 387, 388, 392, 451, 468, 512, 513, 514, 643, 648, 653, 691, 694, 696, 751, 805, 809, 827, 834, 843, 846, 852, 857, 862, 864, 868, 870, 878, 879, 886], "pixel": [12, 13, 56, 68, 91, 386, 422], "resampl": [12, 13], "nearest": [12, 13, 68, 91, 234, 251, 284, 294, 356, 383, 386, 398, 422, 543, 643, 862], "bicub": [12, 13, 68, 91, 386, 422, 862], "zero": [12, 13, 56, 64, 65, 67, 68, 69, 70, 72, 73, 75, 78, 79, 81, 82, 87, 88, 90, 91, 93, 95, 96, 100, 101, 104, 105, 109, 123, 125, 126, 127, 129, 140, 141, 143, 145, 150, 152, 153, 154, 156, 157, 160, 163, 164, 232, 233, 234, 236, 237, 238, 239, 240, 243, 245, 246, 248, 249, 250, 251, 253, 256, 257, 258, 265, 266, 267, 268, 274, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 301, 302, 304, 305, 307, 309, 310, 314, 316, 322, 324, 333, 340, 346, 347, 350, 351, 352, 356, 364, 367, 369, 370, 371, 372, 378, 380, 383, 386, 387, 389, 396, 398, 408, 409, 410, 411, 412, 414, 415, 418, 419, 420, 429, 430, 431, 432, 433, 434, 439, 441, 449, 454, 457, 479, 489, 494, 495, 506, 507, 525, 534, 535, 552, 556, 563, 583, 588, 626, 627, 632, 633, 634, 635, 637, 640, 641, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 674, 677, 678, 680, 684, 685, 687, 688, 689, 690, 691, 692, 694, 696, 702, 704, 705, 710, 715, 716, 717, 718, 720, 721, 728, 751, 753, 754, 755, 758, 759, 760, 761, 763, 764, 765, 766, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 805, 806, 810, 825, 839, 842, 844, 845, 846, 851, 853, 854, 857, 864, 867, 868, 876, 884], "ndim": [12, 13, 68, 73, 78, 91, 96, 101, 113, 117, 387, 389, 455, 456, 462, 473, 474, 475, 488, 496, 498, 508, 625, 645, 648, 655, 695, 698, 761, 842, 852, 859], "newaxi": [12, 13, 638], "transpos": [12, 13, 22, 39, 42, 43, 60, 68, 72, 73, 85, 91, 95, 96, 113, 387, 435, 453, 455, 457, 532, 647, 648, 660, 662, 664, 666, 667, 668, 672, 688, 692, 694, 700, 792, 806, 818, 827, 849, 855, 866, 869, 879], "255": [12, 13, 39, 42, 43, 56, 57, 58, 60, 72, 91, 95, 245, 643, 669, 827, 879], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 14, 15, 867], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 64, 68, 69, 87, 91, 109, 138, 139, 151, 386, 387, 389, 398, 431, 456, 500, 539, 540, 610, 640, 645, 815, 820, 833, 839, 844, 845, 848, 851, 855, 856, 857, 860, 862, 864, 866, 869, 872], "uint8": [12, 13, 39, 42, 43, 58, 166, 173, 177, 188, 191, 196, 202, 641, 790, 791, 844, 859], "elif": [12, 13, 18, 19, 843, 848, 855, 856, 857], "bool": [12, 13, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 138, 139, 140, 145, 146, 147, 148, 149, 150, 152, 154, 160, 163, 164, 166, 167, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 199, 203, 207, 208, 210, 211, 213, 215, 218, 219, 224, 225, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 334, 335, 336, 337, 338, 340, 345, 346, 347, 348, 349, 351, 353, 361, 362, 367, 368, 370, 372, 373, 374, 380, 383, 384, 386, 387, 388, 389, 392, 398, 405, 406, 407, 409, 410, 411, 412, 422, 423, 424, 425, 428, 430, 432, 434, 441, 445, 448, 449, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 483, 484, 485, 486, 487, 490, 494, 498, 501, 503, 504, 505, 507, 510, 512, 514, 515, 516, 517, 518, 520, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 587, 588, 592, 601, 602, 603, 604, 606, 608, 610, 611, 624, 627, 628, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 671, 672, 673, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 702, 703, 705, 707, 708, 709, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 738, 739, 740, 742, 743, 744, 749, 750, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 788, 790, 791, 792, 802, 806, 809, 810, 820, 821, 825, 844, 846, 848, 855, 856, 859, 860, 862, 864, 869, 878, 879], "fromarrai": [12, 13, 39, 42, 43, 58], "interpol": [12, 13, 56, 68, 91, 364, 383, 386, 398, 543, 647, 674, 862, 885], "bilinear": [12, 13, 68, 91, 386, 422, 862], "torch_mask": [12, 13], "squeez": [12, 13, 56, 75, 98, 650, 885], "torch_result": [12, 13], "to_numpi": [12, 13, 25, 42, 43, 54, 57, 58, 61, 69, 92, 645, 849, 857, 867, 882], "img_tf": [12, 13], "math": [12, 13, 59, 109, 301, 643, 844, 855, 856, 857, 869, 883], "lot": [12, 13, 843, 844, 853, 859, 870, 875, 876, 884], "far": [12, 13, 22, 42, 43, 652, 732, 743, 821, 845, 846, 865, 890, 891], "space": [12, 13, 64, 67, 68, 69, 87, 90, 91, 92, 137, 148, 149, 303, 360, 383, 388, 465, 556, 560, 640, 643, 645, 862, 875], "del": [12, 13, 843], "empty_cach": 12, "permute_dim": [12, 13, 75, 98, 650, 849], "func_wrapp": [12, 13, 62, 67, 68, 84, 90, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 302, 306, 311, 312, 314, 378, 637, 643, 802, 845, 856, 861], "242": [12, 13, 91], "mani": [12, 13, 42, 43, 46, 75, 85, 98, 158, 339, 380, 640, 650, 722, 833, 834, 835, 839, 840, 842, 843, 844, 845, 846, 847, 851, 852, 853, 855, 856, 857, 859, 862, 864, 866, 867, 870, 874, 875, 876, 881, 885, 888, 891, 892], "factor": [12, 13, 25, 68, 70, 72, 73, 91, 93, 95, 96, 107, 108, 109, 110, 111, 222, 223, 224, 386, 387, 392, 420, 431, 445, 446, 456, 459, 461, 462, 517, 626, 627, 632, 633, 642, 646, 647, 648, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 678, 790, 792, 793, 805, 806, 810, 848, 875], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 20, 21, 22, 42, 43, 56, 65, 67, 72, 88, 90, 95, 114, 179, 255, 386, 408, 418, 556, 566, 641, 643, 645, 647, 648, 662, 664, 669, 693], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 20, 21, 56, 57, 827], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 33, 42, 43, 61, 65, 67, 68, 69, 73, 78, 88, 90, 91, 92, 96, 101, 103, 113, 114, 118, 164, 174, 190, 197, 217, 234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 259, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 280, 281, 282, 283, 284, 287, 289, 293, 300, 305, 324, 345, 350, 357, 358, 359, 361, 363, 368, 372, 380, 383, 387, 389, 398, 457, 489, 533, 545, 548, 641, 642, 643, 645, 648, 655, 657, 679, 686, 688, 693, 697, 700, 701, 704, 762, 769, 787, 812, 827, 838, 844, 846, 848, 851, 855, 856, 879, 880], "x2": [12, 13, 33, 42, 43, 65, 67, 68, 69, 73, 78, 88, 90, 91, 92, 96, 101, 113, 114, 118, 164, 190, 197, 217, 234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 259, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 280, 281, 282, 283, 284, 287, 289, 293, 300, 305, 345, 350, 357, 358, 359, 361, 363, 368, 372, 383, 387, 389, 398, 443, 457, 489, 533, 545, 548, 641, 642, 643, 645, 648, 655, 679, 686, 688, 693, 697, 700, 701, 704, 762, 787, 812, 838, 844, 846, 848, 851, 855, 856], "x3": [12, 13, 65, 69, 164, 545, 641, 645], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13], "out_channel": [12, 13], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 806, 827, 868, 879], "batchnorm2d": [12, 13, 20, 21, 22, 809], "downscal": [12, 13, 69, 92, 551, 552, 573, 645], "maxpool": [12, 13, 20, 21, 22], "doubl": [12, 13], "conv": [12, 13, 647, 806, 862], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 68, 91, 386, 422, 862], "align_corn": [12, 13, 68, 91, 386, 422, 862], "conv2dtranspos": [12, 13, 806], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 68, 75, 91, 98, 389, 495, 650, 715, 728], "constant_pad": [12, 13, 75, 98, 650], "via": [14, 15, 45, 48, 258, 387, 389, 456, 459, 462, 503, 643, 652, 742, 743, 835, 838, 842, 844, 845, 855, 860, 862, 864, 866, 867, 885], "alongsid": [14, 15, 31, 32, 33, 34, 44, 647, 674, 875], "basic": [14, 15, 27, 29, 33, 36, 40, 42, 43, 46, 49, 389, 502, 827, 828, 833, 846, 859], "singl": [14, 15, 35, 45, 54, 59, 67, 77, 85, 90, 100, 109, 303, 362, 383, 387, 393, 454, 520, 611, 624, 628, 643, 645, 646, 647, 654, 656, 674, 753, 754, 755, 763, 790, 806, 825, 827, 833, 834, 835, 838, 843, 846, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 867, 868, 869, 870, 876], "lstm": [14, 15, 16, 17, 647, 673, 806, 864, 885], "sample_input": [14, 15], "uniform": [14, 15, 34, 35, 36, 37, 38, 42, 43, 44, 45, 47, 48, 49, 56, 68, 77, 91, 100, 398, 536, 654, 752, 753, 755, 805, 827, 858, 868, 879, 880, 892], "tf_lstm": [14, 15, 16, 17], "torch_lstm": [14, 15, 16, 17], "physicaldevic": [14, 15], "physical_devic": [14, 15], "device_typ": [14, 15], "alloc": [14, 15, 64, 65, 68, 88, 156, 157, 163, 340, 380, 640, 641, 825, 833, 835, 870], "physic": [14, 15, 215, 642], "modifi": [14, 15, 58, 68, 85, 91, 108, 389, 398, 492, 495, 500, 540, 790, 821, 833, 834, 835, 838, 840, 841, 844, 845, 847, 849, 850, 852, 855, 857, 859, 860, 864], "164": [14, 15, 22], "state_upd": [14, 15, 40], "properti": [14, 15, 40, 85, 108, 109, 110, 111, 112, 113, 117, 808, 810, 838, 842, 852, 857, 859, 866, 867, 868, 891], "_transpil": [14, 15, 40], "those": [14, 15, 31, 55, 56, 73, 75, 85, 91, 96, 98, 137, 190, 251, 284, 504, 625, 640, 641, 643, 645, 648, 650, 652, 655, 695, 698, 713, 734, 761, 830, 833, 834, 835, 836, 839, 842, 843, 844, 853, 855, 856, 857, 859, 862, 874, 882], "torch_input": [14, 15], "rand": [14, 15, 16, 17, 40, 42, 43, 58, 820, 821, 827, 878], "tf_input": [14, 15, 879], "constant": [14, 15, 16, 17, 27, 29, 34, 37, 38, 44, 47, 49, 54, 68, 75, 76, 91, 98, 99, 108, 109, 333, 380, 386, 388, 389, 432, 467, 468, 495, 650, 652, 653, 715, 738, 751, 805, 809, 827, 852, 857, 860, 868, 869, 870, 878, 880], "tf_output": [14, 15], "toler": [14, 15, 16, 17, 68, 73, 91, 96, 345, 362, 383, 387, 441, 456, 462, 648, 691, 694, 785, 787, 838, 857, 885], "benchmark": [14, 15, 16, 17, 887], "n_run": [14, 15, 16, 17], "tf_time": [14, 15], "round": [14, 15, 67, 68, 90, 91, 108, 110, 111, 112, 234, 247, 251, 257, 258, 284, 298, 304, 305, 356, 383, 643, 831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 874, 875, 876, 882], "torch_tim": [14, 15], "cpu_speedup": [14, 15], "gpu_speedup": 14, "ntranspil": [14, 15], "5017": [14, 15], "1101": [14, 15], "7519": [14, 15], "901": [14, 15], "607x": [14, 15], "944x": [14, 15], "32": [16, 17, 25, 40, 42, 43, 54, 56, 57, 58, 67, 68, 77, 90, 91, 95, 96, 100, 113, 114, 123, 175, 233, 245, 246, 255, 269, 275, 291, 294, 295, 349, 383, 386, 387, 389, 398, 406, 407, 408, 418, 428, 429, 439, 443, 478, 534, 556, 572, 637, 641, 643, 645, 647, 648, 654, 655, 658, 662, 664, 665, 669, 671, 688, 693, 704, 753, 754, 755, 762, 773, 790, 793, 843, 844, 854, 867, 890], "original_output": [16, 17], "transpiled_output": [16, 17], "original_torch_tim": [16, 17], "autograph": [16, 17], "do_not_convert": [16, 17], "compiled_tf_lstm": [16, 17], "transpiled_tf_tim": [16, 17], "original_tf_lstm": [16, 17], "time_major": [16, 17, 91, 386, 432, 647, 673], "return_sequ": [16, 17, 806], "original_tf_tim": [16, 17], "slower": [16, 17, 35, 856], "480074623755541x": [16, 17], "362692848996253x": [16, 17], "openmim": [18, 19], "mim": [18, 19], "0rc8": [18, 19], "get_model": [18, 19], "list_model": [18, 19], "mmengin": [18, 19], "configdict": [18, 19], "saniti": [18, 19, 23, 24, 25, 42, 856], "checkpoint": [18, 19, 20, 21, 59, 870], "against": [18, 19, 65, 68, 69, 73, 78, 88, 90, 91, 92, 96, 101, 164, 283, 302, 345, 348, 351, 362, 383, 398, 539, 540, 541, 542, 543, 580, 641, 643, 645, 648, 655, 688, 689, 691, 694, 758, 859, 864, 870, 874, 885], "zoo": [18, 19], "checkpoint_nam": [18, 19, 23, 24, 42], "tiny_32xb128": [18, 19], "noema_in1k": [18, 19], "openmmlab": [18, 19], "get_scal": [18, 19], "cfg": [18, 19, 850], "_config": [18, 19], "train_pipelin": [18, 19], "tensor_imag": [18, 19], "transpiled_graph": [18, 19, 23, 24, 42], "issu": [18, 19, 23, 24, 388, 465, 805, 828, 829, 830, 831, 832, 834, 836, 838, 840, 841, 843, 844, 845, 846, 848, 849, 856, 859, 860, 862, 864, 868, 870, 876, 878], "107960": [18, 19, 23, 24], "export": [18, 19, 23, 24, 57, 843, 884, 891], "lc_all": [18, 19, 23, 24], "en_u": [18, 19, 23, 24], "utf": [18, 19, 23, 24], "ld_library_path": [18, 19, 23, 24], "lib64": [18, 19, 23, 24], "library_path": [18, 19, 23, 24], "stub": [18, 19, 23, 24, 841], "ldconfig": [18, 19, 23, 24], "_f": [18, 19, 23, 24, 42], "comp_model": [18, 19, 23, 24, 42], "equival": [18, 19, 23, 24, 42, 73, 96, 108, 109, 137, 245, 258, 279, 280, 293, 294, 389, 479, 503, 509, 640, 643, 648, 691, 694, 697, 705, 815, 855, 856, 862, 867, 869, 871, 879], "np_imag": [18, 19, 39, 42, 43], "jax_imag": [18, 19], "hk": [18, 19, 23, 24, 42, 56, 60, 827, 869, 879], "rng_kei": [18, 19, 23, 24, 42, 827, 879], "prngkei": [18, 19, 23, 24, 35, 36, 42, 43, 56, 827, 869, 879], "jax_mlp_forward": [18, 19], "init": [18, 19, 23, 24, 42, 56, 58, 68, 91, 387, 445, 456, 462, 827, 838, 869, 879], "rng": [18, 19, 23, 24, 42, 56, 827, 869, 879], "06": [18, 19, 25, 37, 58, 65, 77, 90, 93, 112, 121, 176, 233, 249, 386, 408, 418, 632, 637, 641, 646, 755, 785, 787, 859, 867], "block_until_readi": [18, 19], "08": [18, 19, 68, 81, 91, 100, 237, 345, 362, 383, 386, 388, 408, 418, 468, 643, 754, 755, 780, 785, 790, 850], "train2017": [18, 19, 23, 24, 39, 42, 43, 827, 879], "000000283921": [18, 19, 23, 24, 42], "out_torch": [18, 19, 23, 24, 42], "et": [18, 19, 647, 648, 674, 698], "out_jax": [18, 19, 23, 24, 42], "66m": [18, 19], "53m": [18, 19], "That": [18, 19, 23, 24, 27, 29, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 56, 293, 388, 467, 643, 820, 834, 835, 839, 859, 866, 867, 868, 886], "pretti": [18, 19, 23, 24, 42, 43, 56, 831, 849, 867, 891], "solid": [18, 19, 23, 24, 42], "2023": [20, 21, 22, 23, 24, 37, 38, 39, 40, 56], "52": [20, 21, 25, 54, 67, 90, 92, 93, 100, 239, 249, 251, 398, 534, 556, 557, 572, 626, 643, 645, 646, 647, 648, 658, 671, 693, 755, 773, 820], "110": [20, 21, 56], "10472": [20, 21], "10k": [20, 21], "tx": [20, 21], "23k": [20, 21], "634575": [20, 21], "620k": [20, 21], "jpeg": [20, 21, 57, 58], "619": [20, 21], "70k": [20, 21], "113": [20, 21], "resnet34_weight": [20, 21], "torch_resnet_34": [20, 21], "conv1": [20, 21, 22], "kernel_s": [20, 21, 22, 40, 42, 43, 58, 68, 91, 386, 405, 406, 407, 426, 433, 806, 812], "stride": [20, 21, 22, 68, 72, 91, 92, 95, 113, 386, 389, 405, 406, 407, 423, 424, 425, 426, 428, 429, 433, 471, 645, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 806, 855, 860, 885], "bia": [20, 21, 22, 68, 72, 91, 95, 99, 392, 398, 517, 533, 583, 645, 647, 653, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 751, 806, 852, 859, 864, 868], "bn1": [20, 21, 22], "ep": [20, 21, 22, 68, 73, 76, 91, 96, 99, 176, 311, 378, 387, 388, 392, 441, 468, 512, 513, 514, 641, 648, 653, 691, 694, 751, 802, 809], "05": [20, 21, 22, 25, 58, 64, 67, 68, 70, 76, 90, 91, 93, 99, 149, 276, 329, 345, 354, 355, 362, 380, 383, 392, 512, 513, 514, 571, 593, 616, 626, 627, 632, 640, 643, 645, 646, 648, 653, 689, 751, 785, 790, 805, 809, 857, 859], "momentum": [20, 21, 22, 56, 68, 91, 392, 512, 514, 809, 875], "affin": [20, 21, 22, 809], "track_running_stat": [20, 21, 22, 809], "dilat": [20, 21, 22, 60, 68, 72, 91, 95, 386, 389, 423, 424, 425, 428, 429, 433, 495, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 806], "ceil_mod": [20, 21, 22, 68, 91, 386, 405, 406, 407, 423, 424, 425, 428, 806], "layer1": [20, 21, 22], "basicblock": [20, 21, 22], "conv2": [20, 21, 22], "bn2": [20, 21, 22], "layer2": [20, 21, 22], "layer3": [20, 21, 22], "layer4": [20, 21, 22], "output_s": [20, 21, 22, 68, 91, 386, 400, 401, 402, 403, 647, 676, 806, 827, 879], "fc": [20, 21, 22, 29, 56, 827, 868, 879], "in_featur": [20, 21, 22, 72, 95, 647, 671, 859], "out_featur": [20, 21, 22, 72, 95, 647, 671, 859], "resnet_34": [20, 21], "ivy_resnet_34": [20, 21], "333f7ec4": [20, 21], "pth": [20, 21], "3m": [20, 21], "4mb": [20, 21], "preserv": [20, 21, 23, 24, 37, 38, 39, 40, 68, 69, 70, 85, 91, 92, 93, 114, 386, 387, 389, 398, 422, 456, 473, 474, 475, 486, 487, 506, 540, 573, 635, 645, 646, 650, 717, 790, 858, 859, 869, 870, 879], "multipl": [20, 21, 23, 24, 33, 37, 38, 39, 40, 42, 67, 68, 73, 76, 81, 82, 85, 90, 91, 92, 93, 96, 98, 99, 104, 105, 145, 245, 269, 276, 282, 283, 284, 286, 346, 347, 383, 386, 387, 389, 392, 396, 408, 415, 418, 420, 454, 481, 490, 507, 510, 517, 526, 545, 552, 583, 626, 627, 630, 632, 633, 634, 635, 640, 643, 645, 646, 647, 648, 650, 653, 655, 658, 659, 662, 663, 664, 665, 678, 687, 688, 689, 702, 713, 716, 721, 722, 751, 758, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 806, 821, 825, 827, 833, 835, 839, 840, 842, 846, 848, 850, 852, 855, 856, 857, 859, 862, 864, 870, 876, 878, 883, 884, 885, 892], "rel": [20, 21, 23, 24, 37, 38, 39, 40, 68, 70, 73, 75, 80, 87, 91, 93, 96, 98, 103, 113, 147, 345, 362, 383, 388, 398, 467, 468, 533, 627, 630, 632, 633, 634, 646, 648, 650, 657, 682, 691, 694, 702, 717, 721, 767, 770, 785, 787, 835, 843, 857, 862, 885, 887], "home": [20, 21, 23, 24, 37, 38, 39, 40, 843], "workspac": [20, 21, 23, 24, 34, 37, 38, 39, 40, 834, 849], "95": [20, 21, 22, 25, 54, 68, 70, 73, 77, 84, 93, 95, 100, 121, 371, 383, 429, 626, 630, 634, 637, 646, 648, 654, 686, 754, 755], "track": [20, 21, 33, 42, 43, 55, 56, 825, 834, 835, 838, 854, 855, 878, 885], "properli": [20, 21, 834, 837, 848, 850, 856, 859], "_trace_graph": [20, 21], "shown": [20, 21, 40, 42, 83, 85, 106, 268, 291, 349, 383, 643, 833, 834, 835, 838, 841, 843, 844, 846, 848, 850, 851, 856, 857, 859, 860, 861, 864, 866, 870], "8507": [20, 21], "1351": [20, 21], "0069": [20, 21], "85072625": [20, 21], "13506091": [20, 21], "00688289": [20, 21], "resnet50_weight": [20, 21], "torch_resnet_50": [20, 21], "imagenet1k_v2": [20, 21], "11ad3fa6": [20, 21], "8m": [20, 21], "8mb": [20, 21], "bottleneck": [20, 21, 874], "conv3": [20, 21], "bn3": [20, 21], "2048": [20, 21, 604, 645], "resnet_50": [20, 21], "ivy_resnet_50": [20, 21], "3429": [20, 21], "0408": [20, 21], "0121": [20, 21], "34288204": [20, 21], "04077014": [20, 21], "01212029": [20, 21], "deploy": [22, 834, 879, 884, 887, 888, 891, 892], "ow": 22, "residu": 22, "extrem": 22, "though": [22, 39, 832, 833, 835, 844, 845, 847, 852, 855, 856, 862, 867, 870], "idea": [22, 827, 833, 858, 860, 865, 876, 884], "revolutionari": 22, "reach": [22, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 874, 875, 876, 884, 885], "152": 22, "vanish": [22, 805], "explod": [22, 805, 873, 874], "gradient": [22, 42, 43, 56, 58, 68, 91, 108, 224, 375, 383, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 642, 651, 729, 730, 731, 787, 798, 810, 837, 860, 867, 868, 870, 885], "astor": 22, "cu121": 22, "pillow": [22, 61], "filelock": [22, 39, 56], "extens": [22, 39, 56, 67, 73, 90, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 166, 176, 179, 191, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 346, 347, 349, 383, 386, 389, 398, 430, 503, 507, 533, 640, 641, 643, 648, 650, 655, 656, 657, 658, 659, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 714, 716, 717, 718, 720, 721, 723, 724, 728, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 832, 834, 835, 847, 849, 850, 859, 882, 885, 892], "sympi": [22, 39, 875], "fsspec": [22, 39, 56], "nvrtc": 22, "cu12": 22, "cupti": 22, "54": [22, 54, 65, 67, 72, 90, 91, 95, 100, 179, 248, 249, 254, 269, 298, 304, 325, 380, 386, 398, 408, 418, 534, 643, 647, 648, 658, 671, 690, 693, 753, 754, 755, 773, 843, 846], "curand": 22, "106": [22, 58], "cusolv": [22, 648, 699], "107": 22, "cuspars": 22, "nccl": 22, "nvtx": 22, "triton": 22, "nvjitlink": 22, "mpmath": [22, 39], "py2": [22, 56, 58], "filter": [22, 56, 58, 60, 68, 72, 91, 95, 328, 329, 380, 386, 407, 425, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 792, 806, 827, 840, 843], "get_logg": 22, "setlevel": 22, "solv": [22, 73, 96, 387, 451, 648, 790, 827, 834, 838, 849, 856, 865, 887], "todai": 22, "ant": 22, "bee": 22, "120": [22, 58, 81, 104, 114, 648, 693, 771], "usual": [22, 27, 29, 59, 251, 284, 643, 820, 834, 838, 844, 856, 859, 862], "upon": [22, 42, 43, 60, 825, 835, 836, 846, 855, 859, 862, 870, 884, 885], "scratch": [22, 859], "transfer": 22, "subset": [22, 58, 792, 839, 843, 847, 851, 854, 856, 859, 864, 885], "extract": [22, 42, 43, 50, 57, 68, 91, 109, 389, 478, 504, 856, 858, 860, 881, 885, 886, 891], "zipfil": 22, "zip": [22, 58, 864], "hymenoptera_data": 22, "replac": [22, 28, 30, 41, 57, 67, 68, 69, 75, 77, 85, 90, 91, 92, 98, 100, 143, 285, 321, 324, 378, 380, 389, 500, 503, 507, 587, 588, 592, 640, 643, 645, 650, 654, 713, 752, 790, 835, 841, 842, 844, 845, 853, 856, 859, 866, 869, 870, 875, 879, 892], "send": [22, 875, 890], "statu": [22, 833, 836, 843, 850, 876], "status_cod": 22, "basenam": 22, "zip_save_path": 22, "join": [22, 57, 58, 75, 85, 91, 98, 479, 480, 650, 714, 724, 827, 836], "getcwd": 22, "wb": 22, "zip_ref": 22, "extractal": 22, "option": [22, 48, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 179, 181, 191, 203, 207, 219, 222, 223, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 554, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 573, 575, 576, 579, 584, 587, 588, 592, 602, 603, 604, 606, 608, 610, 611, 612, 624, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 738, 739, 743, 744, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 791, 798, 802, 803, 805, 806, 808, 810, 811, 820, 825, 833, 834, 835, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 862, 864, 869, 870, 878, 879, 880, 885, 891], "delet": [22, 57, 835, 843], "fail": [22, 57, 785, 827, 831, 834, 835, 838, 843, 844, 846, 850, 853, 855, 856, 857], "augment": [22, 56], "data_transform": 22, "randomresizedcrop": 22, "randomhorizontalflip": 22, "val": [22, 69, 85, 90, 92, 264, 389, 484, 571, 572, 573, 592, 593, 594, 643, 645, 844, 855, 866], "data_dir": 22, "image_dataset": 22, "imagefold": 22, "dataset_s": [22, 58], "class_nam": [22, 58, 787], "imshow": [22, 56, 57], "inp": [22, 95, 647, 669], "clip": [22, 54, 67, 68, 75, 90, 91, 92, 98, 282, 283, 389, 478, 503, 504, 551, 552, 643, 645, 650, 842, 852, 854, 855, 867, 869, 882], "paus": 22, "001": [22, 56, 67, 68, 76, 88, 91, 93, 176, 274, 291, 349, 362, 383, 627, 641, 643, 646, 653, 751, 790, 867, 868], "bit": [22, 68, 81, 175, 176, 179, 242, 243, 245, 398, 534, 535, 641, 643, 658, 771, 772, 777, 779, 832, 833, 834, 842, 843, 844, 846, 852, 864, 866, 891], "batch": [22, 56, 57, 58, 68, 69, 73, 85, 91, 92, 96, 222, 223, 386, 387, 388, 392, 400, 402, 403, 409, 422, 432, 449, 463, 465, 512, 513, 514, 517, 560, 563, 564, 625, 642, 645, 647, 648, 651, 653, 671, 672, 673, 674, 705, 729, 730, 731, 751, 790, 806, 809, 842, 852, 857, 867, 883], "make_grid": 22, "resnet18": [22, 60, 61], "train_model": 22, "train_dataset": 22, "val_dataset": 22, "metric": [22, 827, 870], "train_acc_metr": 22, "sparsecategoricalaccuraci": 22, "val_acc_metr": 22, "nstart": 22, "start_tim": 22, "x_batch_train": 22, "y_batch_train": 22, "gradienttap": 22, "tape": 22, "loss_valu": 22, "grad": [22, 42, 43, 54, 58, 626, 646, 810, 854, 867, 868, 869], "trainable_weight": 22, "apply_gradi": 22, "update_st": 22, "everi": [22, 39, 42, 43, 48, 56, 64, 68, 69, 91, 92, 146, 147, 312, 346, 347, 360, 378, 383, 386, 389, 423, 424, 425, 432, 509, 545, 640, 645, 833, 835, 838, 840, 841, 843, 844, 846, 850, 851, 852, 853, 855, 856, 857, 859, 864, 866, 868, 878, 879, 880, 885], "4f": 22, "float": [22, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 79, 81, 84, 87, 88, 90, 91, 92, 93, 95, 96, 97, 99, 100, 104, 108, 111, 113, 123, 129, 137, 138, 139, 141, 143, 145, 146, 147, 148, 149, 153, 154, 159, 163, 167, 171, 176, 180, 184, 190, 191, 194, 200, 209, 218, 222, 223, 226, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 255, 256, 257, 258, 262, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 313, 315, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 330, 345, 346, 347, 348, 356, 357, 362, 364, 365, 368, 369, 370, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 398, 401, 410, 411, 412, 429, 430, 437, 440, 441, 443, 456, 460, 462, 463, 464, 468, 469, 484, 502, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 533, 534, 535, 536, 541, 542, 543, 550, 551, 552, 560, 569, 593, 594, 597, 603, 604, 624, 626, 627, 630, 632, 633, 634, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 670, 672, 674, 677, 678, 680, 683, 684, 685, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 702, 705, 707, 708, 709, 729, 730, 731, 738, 751, 754, 755, 761, 763, 764, 765, 766, 771, 772, 774, 775, 776, 777, 778, 779, 780, 787, 790, 791, 793, 802, 805, 806, 809, 810, 825, 831, 838, 842, 844, 847, 848, 849, 851, 852, 854, 855, 857, 859, 860, 862, 864, 866, 868], "train_acc": 22, "acc": 22, "reset": [22, 198, 199, 200, 201, 202, 228, 229, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 641, 642, 645, 845], "reset_st": 22, "x_batch_val": 22, "y_batch_val": 22, "val_logit": 22, "val_acc": 22, "taken": [22, 48, 68, 73, 91, 96, 352, 383, 386, 431, 648, 682, 702, 833, 843, 856, 860, 869, 886], "instanti": [22, 42, 43, 798, 847], "sparsecategoricalcrossentropi": 22, "from_logit": [22, 74, 97, 649, 707, 807], "3121": 22, "2126": 22, "4992": 22, "6072": 22, "244": [22, 67, 256, 827], "3852": 22, "1830": 22, "1015": 22, "1364": 22, "3915": 22, "7465": 22, "8033": 22, "3333": 22, "214": 22, "2763": 22, "3526": 22, "4220": 22, "1592": 22, "8525": 22, "3660": 22, "1085": 22, "1366": 22, "4634": 22, "8115": 22, "3987": 22, "36": [22, 25, 54, 58, 67, 68, 72, 81, 91, 92, 96, 239, 294, 295, 360, 383, 386, 387, 398, 408, 418, 444, 534, 556, 557, 604, 643, 645, 648, 652, 658, 671, 690, 693, 703, 743, 773], "3875": 22, "8096": 22, "5836": 22, "4432": 22, "8402": 22, "3529": 22, "218": [22, 58], "0323": 22, "0982": 22, "4332": 22, "0324": [22, 58], "8197": 22, "3464": 22, "228": [22, 61], "1794": 22, "9244": 22, "9429": 22, "7951": 22, "231": [22, 128, 637], "0132": 22, "4156": 22, "2132": 22, "1413": 22, "8279": 22, "4183": 22, "3028": 22, "1461": 22, "3779": 22, "4553": 22, "8607": 22, "4444": 22, "223": [22, 97], "2835": 22, "0436": 22, "7022": 22, "1335": 22, "8648": 22, "4052": 22, "215": 22, "0863": 22, "0237": 22, "0181": 22, "1331": 22, "8975": 22, "4967": 22, "209": 22, "1050": 22, "2271": 22, "3540": 22, "0588": 22, "8689": 22, "4902": 22, "222": 22, "7880": 22, "4800": 22, "4741": 22, "0218": 22, "5033": 22, "220": [22, 90, 256], "61": [22, 54, 56, 67, 68, 73, 90, 91, 93, 97, 100, 237, 272, 274, 299, 408, 626, 643, 646, 647, 648, 669, 686, 755, 849], "2198": 22, "6509": 22, "3352": 22, "0270": 22, "4771": 22, "216": [22, 93, 96, 626, 646, 703], "0385": 22, "1798": 22, "0143": 22, "0309": 22, "5359": 22, "213": [22, 859], "7697": 22, "3405": 22, "6033": 22, "8392": 22, "8770": 22, "205": [22, 58], "0623": 22, "4221": 22, "0138": 22, "4607": 22, "5294": 22, "221": [22, 62, 124], "0349": 22, "6545": 22, "1935": 22, "1512": 22, "8852": 22, "5098": 22, "212": [22, 56, 68, 72, 91, 370, 383, 671], "0821": 22, "1985": 22, "7769": 22, "3897": 22, "204": 22, "1106": 22, "1354": 22, "1801": 22, "0276": 22, "8893": 22, "5621": 22, "1185": 22, "0447": 22, "2817": 22, "1006": 22, "5752": 22, "2220": 22, "0387": 22, "1639": 22, "0080": 22, "9221": 22, "5686": 22, "0287": 22, "0115": 22, "1679": 22, "7920": 22, "208": 22, "0071": 22, "0790": 22, "2657": 22, "0758": 22, "8934": 22, "210": [22, 845], "2406": 22, "9193": 22, "2372": 22, "9555": 22, "9139": 22, "5817": 22, "211": [22, 868], "1150": [22, 290, 643], "0810": 22, "2205": 22, "1616": 22, "9344": 22, "82": [22, 25, 54, 56, 61, 62, 67, 93, 100, 124, 237, 398, 534, 626, 646, 754, 755, 831, 849], "0200": 22, "0117": 22, "2090": 22, "1444": 22, "5948": 22, "63": [22, 23, 24, 25, 54, 58, 67, 84, 90, 95, 96, 129, 290, 297, 298, 386, 398, 408, 418, 429, 534, 643, 648, 652, 658, 678, 693, 733, 744, 773], "0482": 22, "0338": 22, "5971": 22, "0368": 22, "6144": 22, "207": 22, "1593": 22, "4745": 22, "0733": 22, "0434": 22, "6078": 22, "68": [22, 25, 54, 58, 61, 67, 100, 124, 146, 239, 386, 408, 418, 637, 640, 643, 648, 653, 704, 751, 754, 755], "3923": 22, "1614": 22, "3711": [22, 388, 470], "2719": 22, "6275": 22, "visualize_model": 22, "num_imag": 22, "was_train": 22, "learning_phas": 22, "images_so_far": 22, "pred": [22, 42, 43, 57, 58, 68, 74, 91, 97, 388, 464, 467, 649, 707, 708, 709, 710, 842, 852, 855], "j": [22, 64, 67, 68, 69, 73, 81, 87, 90, 91, 96, 108, 136, 152, 232, 233, 234, 235, 237, 240, 249, 251, 254, 256, 264, 272, 274, 278, 284, 295, 297, 298, 301, 302, 349, 383, 386, 387, 398, 414, 415, 419, 430, 431, 435, 440, 442, 453, 459, 543, 548, 639, 640, 643, 645, 648, 658, 683, 702, 773, 821, 835, 837, 841, 878, 881], "continu": [22, 40, 42, 43, 58, 136, 298, 306, 378, 639, 643, 827, 832, 833, 834, 837, 838, 849, 855, 858, 859, 870, 875, 876, 885], "yet": [23, 24, 25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 58, 379, 381, 382, 390, 391, 395, 833, 834, 849, 870, 871, 878, 879, 880], "broken": [23, 24, 37, 38, 39, 40, 881, 885], "permiss": [23, 24, 37, 38, 39, 40, 834, 843], "recommend": [23, 24, 37, 38, 39, 40, 279, 280, 293, 388, 465, 643, 658, 775, 778, 829, 834, 840, 841, 850, 853, 854, 878], "virtual": [23, 24, 37, 38, 39, 40, 835, 856, 875, 888, 889], "pypa": [23, 24, 37, 38, 39, 40], "venv": [23, 24, 37, 38, 39, 40], "autofeatureextractor": [23, 24, 42], "extractor": [23, 24, 27, 29, 42, 58], "hug": [23, 24, 42, 878], "face": [23, 24, 42, 828, 834, 838, 849, 850, 854, 862, 864, 878, 885, 891], "arch_nam": [23, 24, 42], "microsoft": [23, 24, 42, 875, 878, 879, 885, 890, 892], "feature_extractor": [23, 24, 42], "980130": [23, 24], "9342": [23, 24], "980177": [23, 24], "609": [23, 24], "980207": [23, 24], "1518": [23, 24], "351203": [23, 24], "inputs_jax": [23, 24, 42], "last_hidden_st": [23, 24, 42], "jax_forward": [23, 24, 42], "jit_appli": [23, 24], "134": [23, 24, 72, 648, 671, 690], "2x": [23, 24, 42], "ipytest": 25, "load_breast_canc": 25, "autoconfig": 25, "sole": [25, 54, 851, 860, 884, 885, 886], "test_jax_gpu": 25, "xla_bridg": [25, 56], "get_backend": [25, 852], "test_torch_gpu": 25, "test_xgboost_gpu": 25, "capsi": 25, "load_diabet": 25, "target": [25, 27, 29, 35, 37, 38, 40, 42, 43, 45, 46, 47, 48, 49, 58, 68, 91, 206, 388, 463, 464, 465, 466, 467, 468, 469, 470, 642, 785, 806, 808, 814, 827, 831, 834, 837, 840, 849, 850, 857, 858, 863, 867, 868, 869, 879, 880, 881, 883, 884, 885, 888, 890, 891], "xgb_model": 25, "xgbregressor": 25, "tree_method": 25, "consol": [25, 586, 645, 835, 850, 859, 866, 871], "gpu_hist": 25, "captur": [25, 854, 859, 869, 886], "readouterr": 25, "err": 25, "tabular": 25, "pulsar": 25, "standard": [25, 67, 73, 76, 77, 81, 90, 99, 100, 104, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 166, 176, 179, 191, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 346, 347, 349, 383, 386, 387, 389, 398, 430, 460, 503, 507, 533, 625, 640, 641, 643, 645, 648, 650, 653, 654, 655, 656, 657, 658, 659, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 714, 716, 717, 718, 720, 721, 723, 724, 728, 751, 754, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 792, 805, 809, 820, 821, 827, 830, 837, 838, 839, 842, 844, 847, 851, 855, 858, 859, 860, 870, 873, 879, 881, 883, 884, 887, 888, 890], "extra": [25, 43, 85, 114, 133, 625, 639, 645, 839, 844, 846, 853, 855, 856, 857, 862, 864, 878, 879, 882, 887], "dimens": [25, 64, 68, 69, 72, 73, 74, 75, 77, 78, 79, 81, 82, 85, 87, 91, 92, 95, 96, 97, 98, 100, 101, 102, 104, 105, 111, 113, 114, 117, 124, 128, 152, 156, 157, 327, 338, 340, 341, 342, 343, 346, 347, 351, 352, 360, 367, 374, 380, 383, 384, 386, 387, 388, 389, 392, 393, 396, 398, 400, 402, 403, 405, 406, 407, 409, 414, 415, 419, 423, 424, 425, 426, 429, 430, 432, 433, 435, 437, 440, 449, 458, 463, 467, 473, 474, 475, 479, 485, 496, 497, 498, 499, 501, 503, 507, 512, 513, 514, 517, 521, 523, 526, 536, 538, 539, 540, 541, 542, 543, 556, 557, 558, 560, 567, 601, 605, 625, 637, 640, 645, 647, 648, 649, 650, 651, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 678, 679, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 708, 709, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 729, 730, 731, 757, 758, 759, 761, 763, 764, 765, 766, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 792, 802, 806, 809, 846, 848, 854, 856, 857, 859, 862, 864, 867], "load_data": 25, "standardscal": 25, "df": [25, 58], "delimit": [25, 867], "sc": 25, "fit_transform": 25, "117564": 25, "navig": [25, 831, 834, 835, 837, 849], "rerun": [25, 56], "436": 25, "48": [25, 54, 58, 67, 68, 90, 91, 92, 93, 100, 123, 233, 256, 298, 386, 406, 407, 408, 418, 424, 425, 428, 571, 626, 630, 637, 643, 645, 646, 648, 652, 658, 693, 733, 754, 773], "t4": 25, "tier": [25, 836], "reduc": [25, 68, 69, 73, 78, 81, 82, 85, 91, 92, 96, 101, 104, 105, 224, 346, 347, 367, 383, 384, 398, 538, 539, 540, 541, 542, 543, 557, 642, 645, 648, 655, 658, 659, 695, 758, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 820, 821, 843, 848, 856, 862, 864, 866, 878, 883, 887, 888, 889], "although": [25, 648, 696, 829, 839, 841, 842, 856, 862, 883, 885], "experi": [25, 31, 58, 827, 834, 848, 859, 865, 867, 870], "substanti": [25, 830, 835, 839, 844, 859, 875, 885], "stuff": 25, "201": [25, 90, 91, 236, 408, 643], "20x": 25, "ivyclassifi": 25, "106597": 25, "10967": 25, "96": [25, 54, 68, 70, 90, 91, 92, 100, 248, 269, 301, 371, 383, 386, 408, 556, 557, 630, 643, 645, 646, 648, 658, 693, 755, 773], "73": [25, 54, 67, 96, 298, 398, 534, 648, 654, 678, 754, 859], "852": [25, 647, 671], "449": 25, "47": [25, 54, 58, 67, 68, 73, 77, 90, 91, 92, 93, 95, 100, 240, 298, 386, 398, 406, 424, 425, 534, 556, 557, 630, 643, 645, 646, 647, 648, 654, 671, 686, 754, 755], "nevertheless": 25, "fall": [25, 56, 810, 833, 844, 863], "short": [25, 54, 68, 91, 434, 647, 672, 673, 833, 835, 844, 864, 868], "blaze": 25, "35": [25, 54, 62, 72, 73, 84, 90, 91, 95, 96, 100, 124, 239, 298, 386, 408, 418, 643, 647, 648, 655, 658, 671, 679, 686, 754, 762, 773], "surpass": 25, "remark": [25, 870], "artifici": 25, "simpli": [25, 33, 42, 43, 45, 54, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 643, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 698, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 827, 833, 834, 835, 839, 840, 841, 843, 844, 845, 846, 847, 849, 851, 852, 855, 856, 857, 859, 862, 864, 868, 869, 870, 872, 886, 891], "x_doubl": 25, "vstack": [25, 68, 91, 389, 491], "y_doubl": 25, "235128": 25, "315": [25, 290, 643], "879": 25, "380": 25, "seem": [25, 833, 834, 862, 868, 869, 870, 885], "examin": 25, "600": [25, 58, 92, 95, 386, 410, 411, 564, 843], "conduct": [25, 889], "num_boosting_round": 25, "300": [25, 90, 92, 95, 294, 386, 410, 411, 564, 588, 643, 645, 648, 687, 859], "500": [25, 68, 91, 92, 95, 386, 387, 410, 411, 462, 564, 645], "ivy_elapsed_tim": 25, "xgb_elapsed_tim": 25, "ivy_tim": 25, "partial": [25, 68, 85, 91, 177, 178, 210, 211, 360, 383, 386, 387, 389, 398, 434, 449, 456, 496, 497, 498, 499, 540, 561, 562, 631, 641, 642, 645, 646, 791, 793, 807, 808, 835, 841, 862], "xgb_time": 25, "fivethirtyeight": 25, "legend": [25, 58, 833], "loc": [25, 882], "best": [25, 56, 583, 645, 821, 825, 827, 828, 831, 832, 833, 834, 835, 837, 843, 844, 848, 849, 858, 859, 860, 871, 888, 889], "xlabel": 25, "ylabel": 25, "obviou": [25, 867, 885], "trend": 25, "gap": 25, "train_siz": [25, 56], "widen": 25, "impress": 25, "outcom": [25, 68, 91, 348, 360, 383, 821], "tend": 25, "95933": 25, "9874": 25, "105807": 25, "wrap": [25, 33, 35, 42, 43, 45, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 599, 602, 603, 604, 605, 606, 608, 610, 611, 622, 624, 626, 627, 630, 632, 633, 634, 635, 645, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 698, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 787, 827, 837, 838, 839, 840, 842, 843, 844, 845, 847, 848, 851, 852, 855, 856, 859, 864, 866, 869, 870, 872, 878, 879, 881, 885, 886, 891, 892], "balanc": 25, "breast": 25, "cancer": 25, "return_x_i": 25, "171": [25, 73, 648, 686, 790], "perfectli": [25, 792, 876], "align": [25, 68, 85, 91, 386, 387, 422, 438, 647, 676, 821, 830, 834, 843, 856, 858, 864, 866, 872, 891], "timm": [26, 27, 31, 42, 43, 827, 879], "focu": [27, 40, 833, 854, 883, 884, 887, 892], "mlp": 27, "mixer": 27, "onli": [27, 29, 42, 43, 48, 54, 56, 58, 60, 63, 64, 67, 68, 73, 75, 77, 85, 87, 90, 91, 96, 98, 100, 108, 111, 113, 129, 149, 189, 190, 219, 279, 280, 285, 291, 323, 353, 360, 380, 383, 386, 387, 389, 393, 398, 409, 422, 432, 441, 446, 460, 462, 473, 474, 475, 485, 519, 520, 536, 550, 637, 640, 641, 642, 643, 645, 647, 648, 650, 652, 654, 655, 657, 658, 674, 688, 695, 698, 699, 717, 720, 732, 733, 739, 740, 742, 743, 744, 749, 750, 753, 754, 755, 758, 759, 769, 775, 778, 788, 790, 791, 793, 806, 810, 820, 825, 827, 828, 829, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 874, 878, 879, 884, 885, 886, 891, 892], "retriev": [27, 29, 33, 546, 568, 593, 645, 835, 856], "mlp_encod": [27, 42, 43, 827, 879], "create_model": [27, 42, 43, 827, 879], "mixer_b16_224": [27, 42, 43, 827, 879], "nois": [27, 29, 42, 43, 827, 878, 879], "randn": [27, 29, 42, 43, 389, 507, 827, 879], "tf_mlp_encod": [27, 42, 43], "output_torch": [27, 29], "output_tf": [27, 29], "output_dens": [27, 42, 43, 827], "dens": [27, 40, 42, 43, 327, 380, 806, 827], "unit": [27, 42, 43, 68, 84, 91, 108, 109, 121, 123, 124, 125, 126, 127, 128, 129, 306, 307, 310, 314, 316, 317, 320, 321, 322, 378, 515, 516, 637, 827, 834, 838, 844, 856, 857, 859, 870, 886, 889], "mention": [27, 29, 42, 43, 48, 833, 834, 835, 839, 846, 851, 852, 855, 856, 859, 862, 875, 880, 885], "fulli": [27, 29, 31, 32, 35, 40, 42, 43, 56, 68, 91, 398, 540, 806, 827, 839, 844, 851, 854, 862, 864, 865, 866, 867, 868, 869, 870, 876, 880, 883, 884, 885, 891, 892], "ground": [27, 29, 388, 464, 785, 787, 798, 831, 849, 856, 859, 874], "ret": [27, 29, 42, 43, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 220, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 398, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 442, 447, 449, 452, 454, 457, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 592, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 738, 739, 740, 741, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 791, 792, 793, 803, 808, 810, 815, 821, 823, 827, 844, 845, 847, 848, 854, 855, 856, 857, 860, 864, 869, 879], "eagertensor": [27, 33, 54, 815, 857], "deepmind": [28, 876], "perceiverio": [28, 876], "backbon": [28, 56, 827, 864, 867], "TO": [28, 30, 41], "efficientnet": 29, "eff_encod": [29, 827], "efficientnet_v2": [29, 827], "efficientnetv2b0": [29, 827], "storag": [29, 56, 57, 867, 875], "googleapi": [29, 56, 57], "efficientnetv2": 29, "b0_notop": 29, "h5": [29, 85], "24274472": 29, "0u": 29, "torch_eff_encod": [29, 827], "modes_to_trac": 29, "1280": [29, 556, 645, 827], "welcom": [31, 57, 827, 828, 834, 835, 836, 858], "varieti": [31, 838, 843, 844, 845, 859, 861, 881, 883, 887, 888, 891, 892], "organ": [31, 839, 842, 852, 856, 858, 860, 872, 875], "main": [31, 43, 64, 68, 73, 91, 96, 143, 156, 157, 158, 324, 339, 340, 380, 387, 389, 438, 484, 640, 648, 681, 682, 702, 827, 830, 833, 834, 835, 836, 838, 841, 842, 849, 853, 855, 883, 885, 886, 891], "exactli": [31, 35, 45, 54, 55, 59, 301, 643, 833, 842, 843, 844, 845, 846, 848, 859, 862, 874, 876], "rush": [31, 876], "jump": [31, 857], "straight": [31, 827, 843, 856, 859, 866], "quickstart": [31, 827], "introduct": [31, 33, 40, 42, 43, 885], "point": [31, 40, 65, 67, 68, 73, 77, 79, 81, 88, 90, 91, 96, 100, 104, 137, 138, 139, 141, 143, 146, 153, 154, 159, 163, 176, 180, 184, 191, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 264, 265, 266, 267, 272, 273, 274, 275, 276, 284, 286, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 323, 324, 326, 346, 347, 364, 365, 368, 370, 380, 383, 386, 387, 388, 393, 398, 401, 410, 411, 412, 430, 440, 460, 464, 519, 520, 521, 522, 523, 533, 534, 535, 543, 638, 640, 641, 643, 648, 654, 655, 656, 657, 658, 678, 680, 683, 684, 685, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 702, 705, 754, 755, 761, 763, 764, 765, 766, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 815, 816, 825, 831, 833, 834, 835, 838, 839, 841, 843, 844, 846, 847, 849, 851, 855, 856, 859, 860, 862, 864, 866, 867, 876, 878, 891], "showcas": [31, 827], "real": [31, 39, 67, 68, 81, 90, 91, 104, 113, 123, 126, 129, 153, 154, 231, 232, 233, 234, 236, 237, 238, 239, 240, 249, 251, 252, 254, 256, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 281, 284, 286, 287, 289, 293, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 346, 347, 353, 354, 355, 365, 383, 386, 387, 409, 430, 431, 440, 441, 637, 640, 643, 648, 655, 658, 683, 684, 685, 689, 696, 698, 699, 702, 705, 761, 774, 776, 777, 778, 779, 842, 887], "world": [31, 39, 835, 887], "beginn": [31, 828, 885], "got": [31, 54, 848], "cover": [31, 42, 68, 91, 386, 423, 424, 425, 833, 838, 839, 841, 844, 846, 847, 852, 853, 859, 862, 863], "familiar": [31, 32, 33, 833, 834], "concept": [31, 32, 33], "turn": [31, 32, 35, 45, 72, 95, 108, 109, 410, 411, 412, 647, 670, 806, 834, 841, 842, 845, 846, 856, 859, 876], "unus": [31, 32, 35, 846, 855], "part": [31, 32, 35, 64, 67, 68, 90, 91, 96, 113, 123, 126, 129, 156, 157, 158, 264, 268, 291, 339, 340, 366, 380, 383, 386, 387, 389, 398, 430, 441, 495, 543, 637, 640, 643, 648, 684, 685, 787, 833, 834, 835, 836, 838, 841, 844, 850, 852, 855, 856, 859, 860, 862, 864, 865, 869, 870, 878, 879, 880, 883, 885, 890, 891, 892], "lazi": [31, 32, 35, 38, 45, 48, 49, 60], "kornia": [31, 32, 39, 42, 43, 56, 60, 827, 879], "roundup": 33, "indep": [33, 42], "proof": [33, 42], "delv": [33, 43, 827], "theori": [33, 829, 841], "esenti": [33, 42], "abstract": [33, 42, 43, 805, 810, 827, 842, 844, 855, 856, 859, 862, 868, 874, 883, 885, 887, 888, 892], "quirk": [33, 42], "perk": [33, 42, 827, 839, 842], "under": [33, 42, 43, 68, 388, 467, 468, 820, 827, 833, 834, 837, 838, 845, 846, 847, 850, 856, 857, 859, 862, 863, 864, 867, 869, 870, 878, 879, 885, 888, 892], "hood": [33, 42, 43, 827, 837, 845, 846, 850, 856, 859, 862, 863, 864, 867, 869, 878, 879, 892], "appropi": 33, "string": [33, 42, 43, 58, 68, 69, 72, 85, 91, 95, 161, 162, 174, 181, 203, 204, 205, 206, 207, 209, 218, 225, 226, 230, 386, 387, 389, 429, 433, 441, 495, 506, 535, 554, 641, 642, 645, 647, 648, 660, 661, 662, 663, 665, 667, 669, 685, 785, 787, 791, 820, 821, 840, 841, 843, 844, 845, 848, 856, 864, 867], "simplest": [33, 834, 846, 859, 862], "interact": [33, 42, 57, 60, 833, 884, 885, 890], "submodul": [33, 42, 56, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 833, 834, 835, 838, 841, 843, 845, 849, 852, 853, 859, 863, 864, 868, 872], "likewis": [33, 38, 42, 49, 835, 842, 844, 847, 851, 852, 856, 862, 867, 878, 879, 891], "nativearrai": [33, 42, 43, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 81, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 154, 156, 157, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 179, 182, 183, 184, 186, 188, 190, 191, 197, 207, 208, 224, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 328, 329, 333, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 533, 534, 535, 536, 537, 545, 548, 549, 551, 552, 556, 557, 558, 560, 563, 564, 565, 566, 567, 569, 571, 572, 573, 576, 579, 580, 582, 587, 588, 589, 592, 601, 602, 603, 604, 605, 606, 608, 610, 611, 613, 624, 626, 627, 628, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 734, 735, 739, 740, 741, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 811, 839, 842, 846, 848, 851, 852, 853, 855, 856, 860, 861, 864, 866, 872], "alia": [33, 42, 346, 347, 383, 638, 833, 856, 877, 880], "lastli": [33, 42, 839], "subclass": [33, 42, 43, 853, 856, 862, 879], "dict": [33, 42, 43, 56, 60, 63, 69, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 136, 145, 147, 152, 154, 160, 164, 166, 177, 178, 179, 183, 184, 191, 207, 210, 211, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 336, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 380, 389, 409, 410, 411, 412, 430, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 495, 501, 503, 504, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 546, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 583, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 635, 639, 641, 642, 645, 652, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 732, 733, 735, 738, 739, 740, 741, 743, 744, 745, 749, 750, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 787, 788, 803, 806, 808, 815, 821, 839, 842, 867, 868, 872, 878, 879, 880], "recurs": [33, 42, 43, 56, 58, 63, 85, 86, 177, 178, 210, 211, 387, 459, 561, 562, 568, 641, 642, 645, 652, 732, 733, 736, 742, 743, 744, 785, 834, 838, 841, 842, 849, 852, 855, 868, 870], "fashion": [33, 792, 859, 879], "native_arrai": [33, 42, 43, 64, 65, 67, 87, 89, 90, 91, 92, 96, 103, 121, 124, 147, 150, 152, 154, 160, 163, 164, 165, 166, 174, 179, 186, 208, 217, 225, 241, 245, 250, 251, 252, 254, 258, 262, 270, 271, 279, 284, 287, 290, 293, 298, 346, 347, 374, 383, 388, 389, 469, 495, 501, 505, 545, 548, 575, 576, 579, 610, 637, 640, 641, 642, 643, 645, 647, 648, 649, 650, 654, 655, 658, 659, 661, 662, 669, 677, 680, 684, 685, 690, 691, 695, 699, 700, 702, 705, 707, 709, 713, 720, 752, 761, 770, 776, 779, 781, 787, 797, 815, 831, 849, 857, 859], "data_class": [33, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 406, 407, 556, 560, 698, 726], "low": [33, 42, 45, 61, 68, 72, 77, 91, 95, 100, 386, 429, 433, 647, 654, 660, 661, 662, 663, 665, 667, 669, 753, 755, 792, 842, 848, 855, 856, 862, 864, 881, 883, 885, 886, 887, 889, 891], "c": [33, 42, 48, 57, 58, 64, 68, 69, 70, 72, 75, 81, 87, 88, 90, 91, 92, 93, 95, 96, 98, 102, 104, 108, 109, 127, 138, 139, 149, 152, 176, 179, 234, 245, 251, 252, 272, 273, 275, 284, 287, 295, 302, 386, 387, 389, 392, 398, 400, 401, 402, 403, 414, 419, 435, 437, 439, 440, 442, 454, 473, 474, 475, 485, 503, 507, 512, 513, 514, 517, 535, 548, 556, 557, 558, 559, 567, 571, 572, 602, 611, 626, 627, 630, 632, 633, 634, 637, 640, 641, 643, 645, 646, 647, 648, 650, 652, 655, 656, 658, 661, 662, 663, 664, 665, 666, 668, 683, 685, 687, 720, 724, 732, 735, 739, 740, 741, 743, 744, 749, 750, 761, 766, 772, 773, 778, 780, 809, 820, 821, 828, 834, 837, 840, 841, 842, 846, 852, 854, 863, 864, 865, 867, 870, 872, 873, 875, 876, 879, 881, 885, 889, 890, 892], "fundament": [33, 42, 843, 856, 862, 864, 874, 885], "signatur": [33, 42, 389, 398, 495, 533, 844, 845, 846, 847, 851, 855, 859, 860, 862, 875, 882, 891], "matmul": [33, 42, 43, 59, 73, 96, 387, 457, 625, 645, 648, 698, 840, 859, 860, 864], "to_n": [33, 42, 43, 54, 63, 86, 864], "jaxlib": [33, 39, 57, 815, 834, 839, 844, 845, 851, 860, 864, 866], "xla_extens": [33, 39, 815, 839, 844, 845, 851, 860, 864, 866], "arrayimpl": [33, 39, 815], "disabl": [33, 42, 68, 91, 389, 503, 808, 825, 841], "array_mod": [33, 42, 589, 613, 645, 861], "set_array_mod": [33, 42, 613, 645, 861], "ultim": [33, 42, 878], "sigmoid": [33, 42, 43, 54, 62, 68, 84, 91, 312, 378, 393, 519, 637, 802, 864, 867, 868], "z": [33, 42, 43, 55, 56, 64, 67, 68, 69, 73, 74, 77, 79, 81, 87, 90, 91, 92, 96, 97, 98, 100, 104, 113, 114, 148, 149, 151, 152, 212, 234, 235, 239, 241, 244, 246, 251, 262, 263, 266, 267, 268, 270, 271, 276, 278, 280, 281, 282, 283, 291, 300, 311, 312, 346, 347, 349, 378, 383, 388, 398, 464, 466, 467, 468, 469, 470, 476, 480, 491, 532, 533, 536, 543, 548, 560, 563, 564, 571, 572, 588, 601, 603, 604, 612, 625, 640, 642, 643, 645, 648, 649, 650, 652, 654, 655, 656, 658, 679, 688, 693, 694, 698, 705, 707, 708, 709, 713, 735, 739, 741, 749, 753, 754, 755, 758, 763, 773, 774, 776, 777, 778, 805, 827, 840, 842, 845, 846, 864, 866, 878], "divid": [33, 38, 42, 43, 59, 67, 68, 69, 75, 85, 90, 91, 98, 113, 114, 258, 392, 465, 512, 513, 514, 517, 603, 643, 645, 650, 722, 839, 842, 846, 850, 859], "exp": [33, 42, 43, 67, 68, 90, 91, 127, 129, 256, 276, 289, 312, 378, 386, 388, 414, 419, 468, 637, 643, 648, 696, 854, 856], "entir": [33, 42, 43, 45, 58, 68, 81, 82, 85, 91, 92, 104, 105, 224, 254, 256, 296, 297, 346, 347, 383, 386, 389, 398, 410, 411, 412, 495, 536, 569, 642, 643, 658, 659, 774, 775, 776, 777, 778, 779, 780, 781, 782, 806, 821, 827, 833, 834, 835, 838, 839, 842, 844, 846, 848, 855, 856, 857, 859, 862, 864, 867, 868, 869, 870, 875, 876, 879, 885, 891, 892], "congratul": [33, 39], "independ": [33, 43, 68, 77, 91, 100, 234, 251, 284, 294, 392, 393, 517, 519, 643, 648, 654, 679, 697, 752, 827, 838, 844, 846, 853, 864, 869, 879, 883], "div": [34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 880], "sub": [34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 68, 73, 75, 85, 86, 90, 91, 92, 96, 98, 114, 283, 387, 389, 398, 441, 481, 490, 510, 539, 540, 568, 645, 648, 650, 651, 682, 702, 722, 729, 730, 731, 833, 835, 837, 842, 848, 856, 857, 859, 866, 867, 868, 880, 881], "with_numpi": 34, "reproduc": [34, 59, 72, 95, 647, 670, 790, 791, 792, 793, 798, 831, 838, 849], "x_": [34, 44, 109, 295, 643, 880], "66391283": 34, "12516928": 34, "38367081": 34, "03102401": 34, "76419425": 34, "52797794": 34, "90346956": 34, "61316347": 34, "27585283": 34, "66309303": 34, "ivy_repo": 34, "sever": [34, 35, 44, 45, 47, 48, 49, 68, 91, 108, 386, 387, 400, 401, 402, 403, 455, 790, 834, 835, 860, 870, 883, 889], "pro": [34, 35, 36, 44, 45, 46, 47, 48, 49], "pick": [35, 45, 805], "trigger": [35, 45, 808, 833, 850], "unif": [35, 37, 38, 45, 47, 828, 866, 875, 881, 891], "55563945": 35, "65538704": 35, "14150524": 35, "46951997": 35, "30220294": 35, "14739668": 35, "57017946": 35, "91962677": 35, "51029003": 35, "59644395": 35, "constitu": [35, 45, 85, 869], "5556394": 35, "655387": 35, "1415051": 35, "4695197": 35, "3022028": 35, "1473966": 35, "5701794": 35, "91962665": 35, "51028997": 35, "5964439": 35, "985": 35, "000": [35, 90, 285, 790, 831, 843, 849], "On": [35, 42, 43, 834, 844, 845, 850, 856, 859, 862, 865, 869], "hand": [35, 67, 387, 457, 790, 838, 844, 845, 850, 852, 859, 870], "learnt": [36, 46], "ivy_norm": 36, "jax_norm": [36, 42, 43], "wider": [36, 46, 596, 619, 645, 844, 861, 891], "avoid": [36, 46, 48, 68, 75, 91, 251, 256, 258, 274, 284, 388, 389, 392, 465, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 510, 512, 513, 514, 550, 566, 568, 591, 596, 619, 643, 645, 650, 716, 717, 718, 720, 722, 723, 725, 727, 792, 793, 834, 835, 840, 841, 842, 843, 844, 848, 853, 856, 859, 860, 861, 862, 885], "act": [36, 46, 68, 91, 309, 374, 384, 835, 846, 861, 870, 892], "shorthand": [36, 46, 48, 859], "pair": [36, 46, 56, 68, 72, 91, 95, 239, 258, 331, 373, 380, 383, 386, 420, 429, 431, 433, 643, 647, 648, 660, 661, 662, 663, 665, 667, 669, 677, 679, 821], "93968587": 36, "26075466": 36, "22723222": 36, "06276492": 36, "47426987": 36, "72835908": 36, "71737559": 36, "50411096": 36, "65419174": 36, "15576624": 36, "implic": [36, 46, 47, 50, 842], "fw": [37, 38, 39, 40, 72, 95, 398, 533, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 787, 834, 859], "mxnet": [37, 38, 39, 40, 220, 642, 815, 833, 834, 875, 892], "miniconda": [37, 38, 39, 40], "multienv": [37, 38, 39, 40], "lazili": [37, 38, 39, 42, 43, 47, 49, 60, 827, 878, 879, 880], "actual": [37, 47, 831, 835, 837, 843, 849, 852, 853, 855, 856, 857, 859, 862, 863, 868, 870, 886, 891], "occur": [37, 42, 43, 47, 60, 65, 67, 79, 88, 90, 102, 166, 285, 301, 641, 643, 655, 656, 758, 759, 763, 764, 765, 766, 838, 843, 845, 848, 861], "altern": [37, 47, 57, 68, 91, 96, 108, 109, 345, 353, 354, 355, 359, 361, 362, 363, 364, 366, 367, 368, 372, 373, 383, 833, 834, 841, 855, 867, 888], "assum": [37, 38, 47, 48, 49, 64, 67, 68, 69, 72, 73, 74, 90, 91, 92, 95, 96, 97, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 324, 340, 346, 347, 349, 352, 370, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 455, 457, 495, 503, 507, 533, 536, 563, 567, 569, 571, 580, 602, 611, 635, 640, 641, 643, 645, 646, 647, 648, 649, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 707, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 806, 820, 834, 838, 840, 843, 844, 847, 857, 859, 862, 866, 867, 870], "201733": 37, "slowli": [37, 47], "norm": [37, 47, 48, 68, 69, 73, 91, 92, 96, 107, 108, 386, 387, 408, 409, 413, 414, 415, 418, 419, 420, 430, 431, 437, 441, 515, 516, 518, 551, 552, 573, 645, 648, 689, 705, 751, 806, 810, 860], "slow": [37, 47, 829, 834, 841], "34431235": [37, 38], "51129461": [37, 38], "06686894": [37, 38], "36452447": [37, 38], "98795534": [37, 38], "15493582": [37, 38], "91630631": [37, 38], "41939619": [37, 38], "78909753": [37, 38], "19475674": [37, 38], "norm_trac": 37, "norm_tran": [37, 47], "07": [38, 56, 58, 70, 74, 90, 93, 97, 100, 239, 272, 275, 276, 295, 386, 418, 616, 626, 627, 629, 630, 631, 632, 643, 645, 646, 649, 708, 709, 754, 807, 810, 868], "981554": 38, "happen": [38, 42, 43, 303, 643, 827, 834, 835, 836, 845, 855, 859, 867, 876, 878, 879], "wherea": [38, 49, 91, 386, 432, 835, 839, 842, 844, 845, 846, 851, 852, 859, 869, 882], "subtract": [38, 42, 43, 67, 90, 113, 114, 145, 389, 495, 640, 643, 839, 842, 846], "often": [39, 68, 388, 463, 832, 838, 848, 851, 852, 856, 859, 870, 876, 886, 889, 892], "fortun": [39, 40, 838], "everyth": [39, 57, 820, 827, 833, 834, 835, 836, 837, 843, 846, 855, 856, 857, 859, 865, 870, 871, 876], "practic": [39, 835, 840, 843, 856, 858, 888], "jax_kornia": [39, 42, 43, 827, 879], "000000000034": [39, 42, 43, 827, 879], "raw_img": [39, 42, 43, 827, 879], "sharp": [39, 42, 43, 827], "prefer": [39, 42, 43, 258, 643, 834, 842, 848, 849, 853, 856, 871, 885], "whole": [40, 68, 91, 389, 392, 502, 515, 516, 518, 835, 841, 850], "full": [40, 68, 73, 91, 95, 96, 108, 109, 111, 176, 263, 271, 334, 335, 336, 337, 338, 380, 387, 388, 389, 460, 461, 467, 468, 496, 499, 590, 599, 614, 622, 640, 641, 643, 645, 647, 648, 662, 664, 665, 666, 668, 691, 695, 697, 698, 791, 798, 827, 834, 835, 841, 844, 847, 848, 851, 852, 856, 859, 862, 864, 870, 875, 876, 883, 885, 891], "complex": [40, 42, 43, 56, 62, 67, 68, 73, 81, 84, 88, 90, 91, 96, 104, 121, 122, 123, 124, 125, 126, 127, 128, 129, 153, 154, 169, 183, 192, 198, 231, 232, 233, 234, 235, 236, 237, 240, 248, 249, 251, 252, 254, 256, 264, 265, 266, 267, 268, 272, 273, 274, 275, 284, 286, 287, 289, 291, 294, 295, 296, 297, 298, 301, 302, 306, 311, 312, 314, 349, 354, 355, 378, 383, 386, 387, 398, 409, 420, 430, 431, 435, 440, 441, 442, 453, 455, 541, 542, 603, 604, 637, 640, 641, 643, 645, 648, 655, 658, 683, 684, 685, 689, 696, 698, 700, 702, 705, 761, 776, 777, 779, 791, 802, 821, 830, 833, 836, 841, 844, 846, 853, 856, 859, 860, 862, 867, 868, 869, 870, 872, 879, 881, 883, 885, 887, 891, 892], "neccessari": 40, "set_random_se": [40, 59], "301436": 40, "_c": 40, "0x7f252c392390": 40, "flatten": [40, 42, 43, 56, 58, 61, 68, 69, 73, 75, 78, 79, 91, 92, 96, 98, 101, 102, 351, 367, 383, 387, 389, 398, 438, 484, 494, 498, 503, 504, 507, 509, 531, 538, 539, 540, 541, 542, 543, 556, 560, 645, 648, 650, 655, 656, 686, 693, 705, 714, 719, 721, 758, 759, 763, 764, 765, 766, 785, 787, 827, 855, 862], "keyword": [40, 42, 43, 58, 60, 63, 64, 68, 85, 91, 114, 150, 285, 386, 389, 398, 434, 495, 533, 547, 550, 583, 612, 640, 643, 645, 648, 652, 658, 699, 738, 779, 785, 787, 791, 807, 808, 820, 833, 839, 842, 844, 845, 853, 855, 856, 857, 859, 860, 862, 867, 878, 879, 880], "input_arrai": [40, 42, 43, 855], "torch_model": [40, 42, 43, 60], "159": [40, 84, 121, 637, 647, 671], "thank": [40, 867, 875], "fledg": [40, 834, 864, 865], "output_arrai": [40, 42, 43, 68, 465], "0893": 40, "1504": 40, "1372": 40, "0991": 40, "0867": 40, "0851": 40, "0911": 40, "0804": 40, "0926": 40, "0881": 40, "softmaxbackward0": 40, "furthermor": 40, "relat": [40, 258, 643, 827, 829, 832, 833, 834, 835, 841, 848, 856, 859, 860, 861, 862, 879, 888], "regress": [41, 885, 892], "checkout": [42, 57, 835, 838, 859], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 42, "theoret": 42, "aspect": [42, 43, 828, 854, 867, 885], "easiest": [42, 827, 829, 834, 871], "defer": [42, 43, 833, 839, 844, 845, 852, 855, 856, 859, 891], "similarli": [42, 55, 150, 158, 234, 339, 346, 347, 380, 383, 640, 643, 840, 844, 856, 862, 866, 891], "essenc": [42, 886, 891], "becom": [42, 68, 91, 108, 357, 383, 389, 475, 650, 713, 815, 835, 836, 842, 844, 846, 848, 855, 870, 874, 876, 878], "slide": [42, 68, 72, 91, 95, 386, 405, 406, 407, 423, 424, 425, 426, 429, 433, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 806], "regressor": [42, 43], "input_dim": [42, 43, 57], "output_dim": [42, 43, 57], "linear0": [42, 43, 54, 867, 868], "linear1": [42, 43, 54, 867, 868], "adam": [42, 43, 54, 58, 70, 93, 547, 626, 627, 632, 645, 646, 810, 867, 868, 869, 885], "n_training_exampl": [42, 43], "2000": [42, 43, 91, 325, 380], "random_norm": [42, 43, 72, 73, 77, 95, 96, 100, 556, 645, 647, 648, 654, 662, 664, 665, 666, 668, 669, 673, 698], "linspac": [42, 43, 64, 87, 137, 640, 851, 862, 864, 892], "execute_with_gradi": [42, 43, 54, 58, 646, 867, 868, 869, 870], "lambda": [42, 43, 59, 61, 91, 134, 136, 308, 318, 555, 568, 628, 629, 631, 636, 639, 645, 646, 648, 652, 684, 739, 740, 744, 833, 852, 853, 854, 857, 862, 864, 867], "5f": [42, 43], "nonetheless": [42, 43], "gc": [42, 43, 568, 645], "decompos": [42, 43, 68, 91, 108, 111, 334, 335, 336, 337, 338, 359, 366, 380, 383, 387, 451, 456, 459, 462, 856, 869], "said": [42, 43, 792, 860, 876, 878], "otherwis": [42, 43, 60, 63, 64, 65, 67, 68, 69, 72, 73, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 137, 139, 140, 145, 147, 148, 149, 152, 154, 160, 163, 164, 166, 167, 169, 170, 171, 172, 173, 182, 186, 190, 191, 207, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 320, 321, 322, 324, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 351, 352, 353, 361, 362, 368, 370, 372, 373, 374, 378, 380, 383, 386, 387, 389, 392, 405, 406, 407, 410, 411, 412, 430, 443, 458, 460, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 483, 485, 486, 487, 494, 501, 503, 504, 505, 507, 510, 512, 514, 515, 516, 518, 520, 532, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 580, 587, 588, 602, 603, 604, 606, 608, 610, 611, 612, 624, 628, 630, 635, 639, 640, 641, 642, 643, 645, 646, 647, 648, 651, 652, 655, 656, 657, 658, 659, 661, 662, 663, 664, 670, 671, 672, 674, 677, 678, 679, 680, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 698, 702, 704, 705, 707, 708, 709, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 745, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 790, 791, 806, 808, 809, 815, 827, 835, 839, 842, 844, 845, 846, 852, 853, 855, 859, 864, 871, 878, 879], "x0": [42, 43, 61, 92, 548, 645, 846], "normalize_trac": [42, 43], "html": [42, 43, 57, 67, 68, 90, 91, 158, 166, 254, 264, 265, 280, 339, 346, 347, 380, 383, 386, 389, 398, 430, 503, 533, 640, 641, 643, 648, 650, 658, 696, 697, 728, 778, 847, 875], "fname": [42, 43, 59, 61, 808, 867], "anticip": [42, 43], "addition": [42, 43, 842, 855, 856, 891], "normalize_native_comp": [42, 43], "return_backend_compiled_fn": 42, "immedi": [42, 43, 825, 827, 833, 834], "eager_graph": [42, 43, 827, 878, 879], "lazy_graph": [42, 43, 827, 878, 879], "thought": [42, 43, 834, 835, 851, 875, 883], "matter": [42, 43, 48, 846, 874], "haven": [42, 43, 48, 871, 885], "jax_out": [42, 43], "ideal": [42, 43, 843, 844, 856, 862, 867], "worth": [42, 43], "differenti": [42, 43, 306, 376, 377, 378, 385, 885], "chosen": [42, 43, 61, 111, 137, 239, 640, 643, 655, 762, 833, 843, 856], "plai": [42, 43, 388, 467, 827, 830, 834, 836, 839, 845, 849, 856, 859, 869, 885, 888], "role": [42, 43, 827, 830, 835, 836, 845, 856, 865, 886, 888, 892], "dl": [42, 43], "effortlessli": [42, 43], "previous": [42, 43, 614, 645, 815, 833, 834, 840, 852, 854, 859, 864], "default_devic": [42, 43, 217, 220, 221, 222, 228, 229, 642, 845, 848, 849], "as_n": [42, 43, 65, 66, 85, 88, 89, 169, 170, 171, 172, 173, 174, 180, 207, 208, 641, 642, 844], "certainli": [42, 43, 875, 891], "unnecessari": [42, 43, 856], "extend": [42, 43, 68, 91, 389, 398, 495, 536, 840, 841, 844, 847, 848, 851, 856, 860, 870, 882, 885, 891], "infrastructur": [42, 43, 881, 887, 888], "least": [42, 67, 68, 73, 90, 91, 251, 269, 284, 386, 389, 398, 414, 419, 473, 474, 475, 484, 486, 533, 643, 648, 655, 688, 761, 835, 839, 843, 844, 845, 846, 852, 855, 859, 879], "coco": 42, "seamlessli": [43, 859], "therefor": [43, 48, 64, 67, 68, 73, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 190, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 339, 340, 346, 347, 349, 352, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 488, 495, 496, 498, 503, 507, 508, 533, 536, 540, 549, 557, 558, 563, 567, 569, 571, 573, 587, 602, 606, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 833, 835, 838, 839, 842, 843, 844, 845, 846, 847, 848, 851, 852, 853, 855, 856, 857, 859, 860, 862, 864, 866, 868, 870, 874, 882, 885, 891], "wide": [43, 827, 835, 859, 883, 885], "plenti": 43, "resourc": [43, 828, 833, 834, 843], "visit": [43, 833, 834, 835, 843], "page": [43, 827, 833, 834, 835, 841, 843, 849, 865, 866, 869, 871, 880, 893], "newli": [44, 45, 57, 59, 65, 88, 163, 550, 641, 645, 835, 843, 855, 859], "randon": [44, 45, 47, 48, 49], "mean_": 44, "std_": 44, "detect": [44, 48, 67, 85, 90, 266, 643, 652, 732, 743, 833, 834, 840, 842, 843, 850, 859, 867, 868], "inspect": [44, 48, 546, 645], "__": [44, 45, 46, 47, 48, 49, 85, 846, 867], "script": [45, 827, 834, 835, 838, 843, 846, 864, 870, 885], "comp": 45, "low_level": 45, "chain": [45, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 179, 183, 184, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 410, 411, 412, 430, 463, 464, 465, 466, 467, 468, 469, 470, 479, 480, 501, 503, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 651, 652, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 729, 730, 734, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 811, 839, 842, 854, 856, 868, 869, 870, 885], "un": [45, 181, 641, 844, 864], "partial_comp": 45, "time_funct": 45, "express": [45, 67, 68, 90, 91, 109, 232, 236, 238, 239, 248, 250, 290, 296, 301, 370, 383, 643, 812, 821, 847, 856, 864, 869, 885, 886], "maxim": [45, 852, 855, 864, 882, 883, 887, 888, 889], "conclud": [46, 860], "norm_comp": [47, 48], "global": [47, 48, 58, 69, 85, 92, 114, 169, 170, 171, 172, 173, 222, 223, 224, 593, 594, 597, 603, 604, 616, 617, 620, 641, 642, 645, 798, 809, 815, 834, 839, 840, 843, 844, 845, 848, 852, 856, 864, 885], "b": [48, 62, 67, 68, 69, 72, 73, 81, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 112, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 138, 139, 140, 145, 146, 147, 149, 152, 154, 160, 163, 164, 165, 166, 174, 184, 186, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 341, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 378, 380, 383, 386, 387, 388, 389, 393, 396, 398, 405, 406, 407, 408, 410, 411, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 436, 439, 441, 443, 447, 450, 454, 457, 462, 463, 464, 466, 467, 468, 469, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 492, 494, 495, 501, 503, 504, 505, 506, 507, 510, 511, 516, 518, 520, 521, 523, 524, 526, 533, 534, 535, 536, 538, 540, 543, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 580, 587, 588, 602, 603, 604, 606, 610, 611, 624, 626, 627, 628, 630, 632, 633, 634, 635, 637, 640, 641, 643, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 677, 678, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 709, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 732, 735, 738, 739, 740, 741, 743, 744, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 820, 821, 825, 827, 828, 831, 835, 837, 838, 840, 842, 843, 846, 849, 852, 854, 857, 863, 864, 865, 867, 868, 869, 873, 876, 878, 881], "prioriti": [48, 85, 815, 830, 833, 835, 836, 845, 855], "normalize_via_oper": 48, "determin": [48, 67, 68, 73, 75, 79, 82, 85, 90, 91, 92, 96, 103, 105, 108, 111, 113, 114, 143, 166, 168, 175, 181, 182, 183, 184, 186, 187, 188, 203, 213, 215, 216, 227, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 251, 254, 256, 258, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 281, 284, 289, 293, 296, 297, 298, 299, 300, 301, 302, 305, 315, 319, 365, 370, 378, 383, 386, 387, 388, 389, 398, 422, 430, 441, 463, 464, 503, 507, 533, 545, 548, 569, 570, 574, 575, 576, 577, 578, 579, 606, 624, 640, 641, 642, 643, 645, 648, 650, 651, 656, 659, 678, 679, 680, 682, 686, 687, 688, 690, 691, 693, 694, 696, 697, 702, 704, 705, 714, 729, 730, 731, 763, 764, 765, 766, 767, 781, 782, 792, 798, 805, 809, 842, 844, 845, 847, 852, 856, 859, 861, 862, 874], "think": [48, 833, 835, 843, 846, 862, 886], "uniqu": [48, 58, 68, 69, 79, 91, 92, 102, 386, 387, 389, 434, 457, 494, 495, 509, 580, 645, 651, 652, 656, 729, 730, 731, 734, 738, 763, 764, 765, 766, 792, 827, 838, 842, 852, 856, 857, 858, 862, 870, 874, 888], "rule": [48, 65, 67, 68, 73, 88, 90, 91, 96, 163, 166, 189, 190, 191, 240, 251, 284, 286, 293, 295, 303, 305, 386, 389, 398, 430, 483, 533, 641, 643, 648, 650, 678, 679, 686, 690, 693, 697, 714, 792, 820, 838, 839, 842, 843, 844, 846, 850, 851, 852, 854, 859, 862, 886], "broadcast": [48, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 113, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 159, 160, 163, 164, 165, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 340, 346, 347, 348, 349, 350, 351, 354, 355, 357, 359, 361, 363, 364, 365, 366, 370, 378, 380, 383, 386, 387, 388, 389, 392, 393, 398, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 428, 430, 435, 437, 438, 446, 447, 452, 453, 455, 464, 465, 466, 467, 469, 470, 476, 480, 483, 488, 496, 497, 498, 499, 501, 503, 505, 507, 508, 512, 515, 516, 518, 519, 520, 522, 523, 533, 534, 535, 536, 539, 540, 541, 542, 543, 551, 552, 556, 557, 558, 563, 564, 573, 587, 588, 626, 627, 630, 632, 633, 634, 635, 637, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 699, 700, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 762, 766, 767, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 792, 820, 842, 844, 846, 847, 848, 859, 860, 864], "elementwis": [48, 68, 76, 91, 99, 311, 313, 373, 378, 648, 653, 703, 751, 852, 860, 864], "fact": [48, 108, 835, 838, 843, 856, 859, 864, 867], "consum": [48, 787, 842, 843, 851, 857, 859], "thrown": [48, 573, 645, 834, 839, 845, 848, 850, 870], "doesn": [48, 573, 591, 645, 785, 806, 833, 834, 840, 842, 843, 844, 845, 846, 849, 850, 852, 854, 859, 862, 864, 870, 878, 883], "consider": [48, 833, 846, 851, 862, 874, 882, 883], "standalon": [49, 833, 839, 859, 872, 881, 886, 891, 892], "static": [49, 68, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 117, 118, 140, 330, 386, 407, 420, 425, 434, 456, 462, 501, 513, 606, 640, 647, 674, 693, 803, 808, 856, 861, 870, 884, 885, 886], "flow": [50, 842, 878, 885, 886], "statement": [50, 55, 843, 855, 859, 862, 870, 878, 879], "opposit": 50, "exclud": [50, 81, 91, 104, 137, 158, 339, 380, 534, 535, 640, 654, 755, 771, 790, 793, 815, 846, 864, 878], "todo": [51, 52, 53, 58, 61, 91, 535, 833, 844, 856], "aim": [54, 831, 835, 838, 849, 853, 856, 859, 863, 883, 885, 888], "interfac": [54, 87, 145, 640, 866, 869, 870, 872, 875, 881, 882, 883, 884, 885, 889, 892], "set_framework": [54, 61], "underneath": [54, 843, 883], "sai": [54, 833, 834, 849, 853, 866, 876, 893], "a_min": 54, "a_max": 54, "tensforflow": 54, "clip_by_valu": [54, 869, 882], "clip_value_min": 54, "clip_value_max": 54, "clamp": [54, 68, 91, 311, 378, 869], "49": [54, 58, 68, 77, 91, 95, 96, 298, 386, 387, 398, 408, 418, 429, 454, 534, 643, 658, 703, 754, 773], "devicearrai": [54, 839, 856, 864, 866], "accept": [54, 63, 64, 67, 68, 73, 86, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 339, 340, 346, 347, 349, 352, 353, 375, 380, 383, 385, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 495, 503, 507, 533, 536, 540, 549, 557, 558, 563, 567, 569, 571, 573, 587, 602, 606, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 833, 834, 835, 839, 842, 844, 845, 846, 847, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 866, 872, 883], "jax_concat": 54, "tf_concat": 54, "np_concat": 54, "torch_concat": 54, "85": [54, 62, 68, 77, 84, 90, 91, 93, 95, 100, 114, 123, 236, 245, 246, 290, 306, 307, 310, 378, 398, 534, 603, 630, 637, 643, 645, 646, 647, 654, 671, 753, 754, 755], "mymodel": [54, 867], "x_in": [54, 867, 868, 869], "reduce_mean": [54, 827, 867, 868, 869], "49040043354034424": 54, "48975786566734314": 54, "4892795979976654": 54, "48886892199516296": 54, "4884953498840332": 54, "4881443977355957": 54, "4878086447715759": 54, "48748287558555603": 54, "48716384172439575": 54, "48684927821159363": 54, "48653748631477356": 54, "48622724413871765": 54, "4859171509742737": 54, "48560672998428345": 54, "48529526591300964": 54, "4849821627140045": 54, "48466697335243225": 54, "4843493402004242": 54, "4840289056301117": 54, "4837053418159485": 54, "4833785891532898": 54, "4830484390258789": 54, "48271444439888": 54, "48237672448158264": 54, "48203518986701965": 54, "48168954253196716": 54, "4813397228717804": 54, "4809857904911041": 54, "48062753677368164": 54, "48026490211486816": 54, "479898065328598": 54, "47952669858932495": 54, "4791509211063385": 54, "4787706732749939": 54, "47838595509529114": 54, "4779967665672302": 54, "47760307788848877": 54, "4772048890590668": 54, "47680220007896423": 54, "47639501094818115": 54, "47598329186439514": 54, "4755673110485077": 54, "4751465618610382": 54, "4747215211391449": 54, "4742920398712158": 54, "47385817766189575": 54, "47341999411582947": 54, "47297725081443787": 54, "4725303053855896": 54, "47207894921302795": 54, "47162333130836487": 54, "47116345167160034": 54, "470699280500412": 54, "47023090720176697": 54, "4697583019733429": 54, "55": [54, 62, 91, 100, 129, 245, 304, 398, 534, 571, 643, 645, 648, 654, 658, 687, 693, 754, 755, 773, 838], "46928152441978455": 54, "46880054473876953": 54, "4683155119419098": 54, "4678264260292053": 54, "46733325719833374": 54, "46683603525161743": 54, "4663347601890564": 54, "4658295214176178": 54, "465320348739624": 54, "4648073613643646": 54, "46429020166397095": 54, "4637692868709564": 54, "46324464678764343": 54, "4627160429954529": 54, "4621836841106415": 54, "4616474211215973": 54, "46110764145851135": 54, "72": [54, 68, 77, 91, 93, 256, 360, 383, 386, 408, 418, 630, 643, 646, 648, 658, 693, 754, 773], "460563987493515": 54, "4600166976451874": 54, "74": [54, 56, 67, 100, 246, 276, 643, 648, 690], "45946577191352844": 54, "45891112089157104": 54, "45835286378860474": 54, "4577910006046295": 54, "78": [54, 70, 295, 632, 643, 646, 648, 654, 658, 693, 754, 773], "45722562074661255": 54, "45665669441223145": 54, "80": [54, 68, 91, 360, 383, 387, 398, 454, 534, 648, 652, 658, 693, 743, 773, 875], "4560841917991638": 54, "81": [54, 58, 67, 73, 88, 90, 96, 100, 179, 249, 274, 275, 299, 398, 534, 641, 643, 648, 652, 654, 658, 686, 690, 703, 740, 755, 773, 859], "4555082619190216": 54, "45492875576019287": 54, "45434585213661194": 54, "45375964045524597": 54, "4531698524951935": 54, "4525766670703888": 54, "45198020339012146": 54, "4513803720474243": 54, "4507772624492645": 54, "4501707851886749": 54, "4495610296726227": 54, "4489481747150421": 54, "44833192229270935": 54, "4477125108242035": 54, "44708991050720215": 54, "44646409153938293": 54, "44583529233932495": 54, "4452032148838043": 54, "44456806778907776": 54, "4439": 54, "selectbackward0": 54, "ivy_compil": 55, "ic": 55, "numer": [55, 64, 65, 67, 68, 69, 73, 77, 78, 81, 88, 90, 91, 92, 96, 100, 101, 103, 113, 114, 150, 163, 231, 234, 247, 251, 256, 257, 258, 265, 266, 267, 270, 279, 280, 284, 286, 287, 288, 289, 293, 294, 295, 299, 300, 304, 305, 386, 388, 393, 398, 430, 465, 520, 533, 593, 594, 603, 604, 616, 617, 640, 641, 643, 645, 648, 654, 655, 658, 679, 686, 688, 693, 696, 698, 700, 702, 704, 753, 754, 755, 757, 758, 759, 761, 762, 767, 774, 777, 779, 790, 791, 792, 793, 805, 831, 844, 849, 854, 856, 857, 859, 860, 861, 862, 864, 868, 882, 885, 891], "anyth": [55, 68, 91, 398, 539, 540, 835, 848, 859, 860, 885, 886], "affect": [55, 61, 68, 388, 468, 843, 856], "variabl": [55, 57, 58, 60, 68, 69, 70, 76, 85, 91, 92, 93, 99, 133, 134, 136, 333, 380, 386, 387, 393, 398, 432, 458, 521, 532, 533, 549, 573, 574, 575, 576, 579, 606, 627, 628, 630, 632, 633, 634, 639, 645, 646, 648, 651, 653, 697, 729, 730, 731, 751, 787, 798, 803, 805, 806, 807, 808, 809, 810, 811, 835, 840, 844, 847, 851, 854, 855, 859, 860, 864, 867, 868, 869, 870, 871, 878, 886], "original_fn": 55, "100000": 55, "co": [55, 56, 67, 69, 90, 249, 254, 256, 297, 560, 643, 645, 832, 844, 864, 875], "sin": [55, 67, 69, 90, 249, 254, 256, 297, 560, 643, 645, 839, 864], "tan": [55, 67, 90, 547, 643, 645, 847, 851, 852, 855, 856, 864], "comp_fn": 55, "compile_graph": [55, 61], "expected_result": 55, "compiled_result": 55, "irrelev": [55, 843, 844, 846], "opeat": 55, "_layer": [55, 864], "net": [55, 60, 61, 864, 869, 875, 876], "compiled_net": 55, "latest": [56, 58, 67, 68, 90, 91, 166, 254, 264, 265, 280, 346, 347, 383, 386, 389, 398, 430, 432, 503, 533, 641, 643, 648, 650, 658, 696, 697, 728, 778, 806, 827, 833, 834, 835, 838, 840, 843, 847, 849, 860, 870, 871, 879, 890], "pypi": [56, 58, 61, 833, 834, 860, 870], "pkg": [56, 58, 61], "public": [56, 58, 61, 553, 645, 843, 854, 866, 888], "revis": [56, 58, 835], "req": [56, 58], "tabqrujw": 56, "quiet": [56, 58], "commit": [56, 58, 830, 831, 833, 836, 838, 846, 858, 859], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 56, "cp39": [56, 58], "manylinux_2_12_x86_64": [56, 58], "manylinux2010_x86_64": [56, 58], "manylinux_2_17_x86_64": [56, 58, 834], "manylinux2014_x86_64": [56, 57, 58], "495": [56, 58], "nvidia_ml_pi": [56, 58], "pypars": [56, 58, 61], "ivy_cor": [56, 58, 61, 834], "1338326": 56, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 56, "njrc_e6b": 56, "2e": [56, 58], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [56, 58], "4845": [56, 58], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 56, "b6": [56, 58], "0d": [56, 58], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [56, 58], "uninstal": [56, 58, 61], "vnd": [56, 58, 61], "json": [56, 58, 61, 85, 834, 849, 867], "psst": 56, "pickl": [56, 57, 85, 808, 842, 867], "imageio": 56, "urllib": [56, 61], "_src": 56, "back": [56, 68, 75, 91, 98, 389, 485, 506, 589, 613, 645, 647, 650, 674, 720, 805, 810, 821, 834, 839, 844, 845, 848, 853, 854, 861, 863, 870, 871, 875, 883, 887], "tf_cpp_min_log_level": 56, "mkdir": [56, 57, 58, 834, 843], "perceiv": [56, 57], "touch": 56, "io_processor": 56, "position_encod": 56, "jmp": 56, "tabul": 56, "29359": 56, "29k": 56, "67k": 56, "002": 56, "30179": 56, "47k": 56, "8107": 56, "9k": 56, "92k": 56, "itertool": 56, "preprocessor": 56, "vector": [56, 64, 68, 69, 72, 73, 91, 92, 95, 96, 108, 109, 111, 150, 376, 377, 385, 386, 387, 389, 392, 393, 398, 409, 440, 445, 453, 455, 460, 495, 497, 499, 517, 521, 533, 552, 556, 573, 625, 640, 645, 647, 648, 671, 674, 679, 683, 684, 686, 688, 693, 698, 699, 703, 704, 705, 706, 790, 806, 885], "perceiverbackbon": 56, "input_preprocessor": 56, "_input_preprocessor": 56, "_encod": 56, "__call__": [56, 787, 806, 807, 808, 827, 879], "is_train": 56, "po": [56, 821], "input_mask": 56, "network_input_is_1d": 56, "_input_is_1d": 56, "queri": [56, 57, 72, 85, 95, 209, 223, 566, 592, 642, 645, 647, 674, 677, 806, 842, 844, 849, 866, 885], "decod": [56, 867], "cross": [56, 58, 73, 74, 96, 97, 109, 648, 649, 707, 708, 709, 843, 844], "attend": [56, 647, 674], "encoder_queri": 56, "latent": [56, 651, 730, 731], "imagepreprocessor": 56, "deal": [56, 808, 831, 845, 852, 854, 856, 859, 870], "image_s": 56, "fourier_pos_config": 56, "position_encoding_typ": 56, "fourier": [56, 68, 91, 386, 409, 414, 415, 419, 420, 430, 431, 434, 560, 645], "fourier_position_encoding_kwarg": 56, "concat_po": 56, "max_resolut": 56, "num_band": [56, 69, 92, 560, 645], "sine_onli": 56, "prep_typ": 56, "spatial_downsampl": 56, "cross_attend_widening_factor": 56, "cross_attention_shape_for_attn": 56, "kv": 56, "dropout_prob": 56, "num_block": 56, "num_cross_attend_head": 56, "num_self_attend_head": 56, "num_self_attends_per_block": 56, "num_z_channel": 56, "self_attend_widening_factor": 56, "use_query_residu": 56, "z_index_dim": 56, "z_pos_enc_init_scal": 56, "perceiver_backbon": [56, 827], "perceiverencod": 56, "At": [56, 833, 834, 835, 838, 849, 859, 860, 875, 885], "publish": [56, 827, 870, 876, 879], "thankfulli": [56, 859], "perceiver_io": [56, 57], "imagenet_fourier_position_encod": 56, "pystat": 56, "imagenet_checkpoint": 56, "rb": 56, "ckpt": 56, "09": [56, 62, 67, 93, 100, 129, 289, 299, 626, 637, 643, 646, 754], "173": [56, 73, 648, 686], "194": 56, "125": [56, 68, 73, 96, 245, 357, 383, 388, 464, 643, 648, 703], "177": [56, 58], "193776248": 56, "185m": 56, "octet": 56, "184": 56, "80m": 56, "144mb": 56, "144": 56, "mean_rgb": 56, "stddev_rgb": 56, "im": 56, "denorm": 56, "resize_and_center_crop": 56, "crop": [56, 68, 91, 386, 415, 420, 431], "center": [56, 805], "image_height": [56, 58], "image_width": 56, "padded_center_crop_s": 56, "offset_height": 56, "offset_width": 56, "crop_window": 56, "inter_cub": 56, "ye": [56, 870], "dummy_input": [56, 827], "transpili": 56, "torch_perceiver_backbon": 56, "quicker": 56, "params_v": [56, 827, 879], "perceiverioclassifi": [56, 827], "max_pool": [56, 827], "Of": [56, 839, 855, 856, 867, 890, 891], "cours": [56, 834, 835, 838, 839, 846, 855, 856, 862, 867, 870, 890, 891], "468": 56, "huggingface_hub": 56, "multiprocess": [56, 85, 114, 645, 867, 870], "py39": 56, "132": [56, 91], "pyarrow": 56, "xxhash": 56, "pyyaml": 56, "2021": [56, 68, 91, 373, 383, 827], "aiohttp": 56, "async": 56, "timeout": [56, 85, 114, 597, 620, 645, 861], "0a3": 56, "async_timeout": 56, "frozenlist": 56, "manylinux_2_5_x86_64": [56, 61], "manylinux1_x86_64": [56, 61], "158": 56, "attr": [56, 844], "aiosign": 56, "multidict": 56, "114": [56, 386, 408, 418], "yarl": 56, "264": [56, 652, 732], "2022": [56, 57], "pytz": 56, "2020": [56, 838, 885], "dateutil": [56, 61], "wikiart": 56, "paint": [56, 827, 864, 874], "load_dataset": [56, 878, 879], "n_sampl": [56, 68, 91, 387, 389, 436, 444, 498], "10000": [56, 58, 64, 87, 149, 640], "huggan": 56, "split": [56, 57, 58, 62, 67, 68, 75, 84, 85, 90, 91, 98, 121, 122, 123, 124, 125, 126, 127, 128, 129, 222, 223, 224, 302, 306, 311, 312, 314, 359, 366, 378, 389, 481, 490, 510, 556, 583, 637, 642, 643, 645, 647, 650, 660, 667, 668, 725, 787, 802, 806, 827, 828, 835, 843, 863, 864, 870, 892], "wiki_art": 56, "gib": 56, "unknown": [56, 790], "huggan___parquet": 56, "36ee951979f9b56c": 56, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 56, "parquet": 56, "subsequ": [56, 815, 834, 839, 843, 844, 846, 851, 852, 855, 859, 868, 886], "curl": [56, 834], "2fwikiart": 56, "xferd": 56, "dload": 56, "upload": [56, 859], "spent": [56, 876], "25936": 56, "278k": 56, "abstract_expression": 56, "action_paint": 56, "analytical_cub": 56, "art_nouveau": 56, "baroqu": 56, "color_field_paint": 56, "contemporary_r": 56, "cubism": 56, "early_renaiss": 56, "expression": 56, "fauvism": 56, "high_renaiss": 56, "impression": 56, "mannerism_late_renaiss": 56, "minim": [56, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 386, 388, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 694, 695, 696, 698, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 821, 847, 855, 857, 862, 864, 878, 883, 891], "naive_art_primitiv": 56, "new_real": 56, "northern_renaiss": 56, "pointil": 56, "pop_art": 56, "post_impression": 56, "realism": 56, "rococo": 56, "romantic": 56, "symbol": [56, 820, 833, 834, 885, 886], "synthetic_cub": 56, "ukiyo_": 56, "custom": [56, 68, 91, 310, 322, 375, 378, 385, 790, 820, 829, 837, 843, 848, 853, 857, 859, 862, 868, 875, 885, 889, 890, 891], "hugginfac": 56, "customdataset": 56, "__len__": [56, 842], "__getitem__": [56, 85, 842], "idx": [56, 57, 58, 546, 645, 845, 866], "random_split": 56, "224x224": 56, "val_siz": 56, "dataset_train": 56, "dataset_v": 56, "dataset_test": 56, "dataloader_train": 56, "dataloader_v": 56, "dataloader_test": 56, "train_featur": 56, "train_label": 56, "train_step": 56, "running_loss": [56, 58], "last_loss": 56, "training_load": 56, "intra": 56, "report": [56, 830, 833, 859], "zero_grad": 56, "999": [56, 70, 90, 93, 302, 626, 627, 632, 634, 643, 646, 810, 868], "epoch_numb": 56, "best_vloss": 56, "1_000_000": 56, "running_vloss": 56, "vdata": 56, "vinput": 56, "vlabel": 56, "voutput": 56, "vloss": 56, "avg_vloss": 56, "model_path": 56, "model_": 56, "state_dict": [56, 807, 808], "highest": [56, 68, 77, 91, 100, 330, 333, 380, 654, 753, 844], "energi": 56, "mayb": [56, 57, 63, 827, 834, 843, 864, 866], "deploi": [56, 827, 843, 872, 879, 883, 884, 885, 887, 891], "percieverio": 57, "ai": [57, 843, 883, 887], "contribut": [57, 68, 91, 398, 536, 830, 832, 834, 835, 836, 841, 849, 850, 856, 857, 864, 871, 878, 889, 893], "invit": [57, 833, 836, 856, 862], "g4ar9q7dtn": 57, "step1": 57, "printf": 57, "8packag": 57, "share": [57, 85, 197, 641, 790, 791, 827, 840, 842, 846, 852, 854, 856, 857, 859, 862, 864, 875, 883, 884, 891], "googledr": 57, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 57, "file_id": 57, "drive": [57, 58], "uc": 57, "tee": [57, 834], "file_id_wget_cmd": 57, "perl": 57, "pe": 57, "g": [57, 59, 60, 68, 77, 79, 81, 83, 91, 100, 106, 108, 162, 191, 204, 251, 264, 284, 291, 294, 346, 347, 383, 386, 387, 389, 393, 398, 423, 425, 462, 503, 519, 520, 521, 522, 523, 534, 535, 641, 642, 643, 648, 652, 654, 656, 658, 684, 685, 689, 696, 698, 699, 705, 735, 739, 741, 744, 749, 753, 754, 755, 763, 764, 765, 766, 771, 772, 774, 776, 777, 779, 805, 825, 828, 833, 834, 837, 838, 840, 841, 842, 854, 856, 859, 864, 870, 872, 876, 881], "uuid": 57, "anywai": [57, 839, 853, 856], "bin": [57, 68, 91, 398, 531, 536, 834, 835, 838, 842], "bash": [57, 834, 835, 838], "step2": 57, "interpret": [57, 64, 68, 87, 91, 138, 139, 145, 151, 388, 398, 465, 533, 640, 843, 886], "sudo": [57, 834], "apt": [57, 834], "yf": 57, "step3": 57, "xvzf": 57, "rm": [57, 59, 829, 835], "step4": 57, "symlink": 57, "unzip": [57, 58], "fr": 57, "l": [57, 68, 73, 90, 96, 278, 387, 388, 440, 463, 647, 648, 674, 678, 683, 684, 685, 688, 702, 835, 837], "ln": 57, "sf": 57, "la": 57, "step5": 57, "step6": 57, "ipkykernel": 57, "step7": 57, "engbjapanpython3": 57, "ipykernel": 57, "reconnect": 57, "sy": [57, 893], "oct": 57, "gcc": [57, 883, 890], "lf": 57, "upgrad": 57, "cuda11": 57, "cudnn805": 57, "cp38": [57, 61, 834], "helper": [57, 785, 787, 788, 794, 796, 797, 831, 841, 844, 848, 849, 858, 867, 872], "feedforward": 57, "prenorm": 57, "perceiveriospec": 57, "fetch": [57, 568, 645, 834, 835, 838, 843], "ogbanugot": [57, 893], "xmartlab": 57, "caffeflow": 57, "fetch_class": 57, "class_label": 57, "ground_truth": 57, "127": [57, 65, 68, 73, 88, 91, 179, 370, 383, 641, 648, 686], "path_to_imag": 57, "get_imag": 57, "spine": 57, "set_vis": 57, "bottom": [57, 556, 645, 833, 834, 843, 849, 891], "tick_param": 57, "set_xticklabel": 57, "set_yticklabel": 57, "show_result": 57, "listdir": [57, 58], "endswith": 57, "this_dir": 57, "dirnam": 57, "add_subplot": 57, "xtick": 57, "ytick": 57, "green": [57, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 826, 833, 834, 835], "red": 57, "perceiver_io_img_classif": 57, "normalize_imag": 57, "batch_shap": [57, 72, 77, 87, 95, 100, 143, 152, 640, 647, 648, 654, 673, 677, 706, 752, 806, 862, 864, 866], "img_dim": 57, "queries_dim": 57, "learn_queri": 57, "load_weight": 57, "num_input_ax": 57, "network_depth": 57, "num_lat_att_per_lay": 57, "query_shap": 57, "num_fourier_freq_band": 57, "weight_fpath": 57, "pretrained_weight": 57, "isfil": 57, "noinspect": [57, 866], "pybroadexcept": 57, "from_disk_as_pickl": 57, "action": [57, 825, 832, 843, 846, 850, 859], "placehold": [57, 652, 739, 744, 749, 806, 835, 839, 851, 872], "pyunboundlocalvari": 57, "max_fourier_freq": 57, "random_uniform": [57, 61, 77, 100, 654, 845, 848, 859, 864, 868], "817437": 57, "gpu_bfc_alloc": 57, "orig_valu": 57, "tf_force_gpu_allow_growth": 57, "autograd": [57, 870], "declar": [57, 835, 858], "_3r2_73j": 58, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 58, "1297564": 58, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 58, "le3bu3_v": 58, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 58, "third": [58, 108, 109, 389, 482, 509, 648, 656, 698, 763, 841, 844, 855, 870, 884, 885, 891], "parti": [58, 841, 844, 870, 875, 884, 885, 891], "mount": [58, 829, 835], "mydriv": 58, "chdir": 58, "kaggl": 58, "medium": 58, "articl": [58, 827, 850], "insert": [58, 68, 78, 91, 101, 389, 470, 480, 650, 652, 655, 657, 716, 736, 737, 758, 769, 843, 850], "www": [58, 346, 347, 383], "your_kaggle_usernam": 58, "competit": 58, "digit": 58, "readabl": [58, 839, 842, 848, 850, 851, 859, 860, 866, 867], "chmod": [58, 834, 843], "forc": [58, 841, 843, 845], "archiv": [58, 834], "inflat": [58, 844], "sample_submiss": 58, "later": [58, 85, 550, 645, 833, 850, 855, 859, 860, 885], "my": [58, 843], "label_df": 58, "mod_train": 58, "data_valu": 58, "test_data_valu": 58, "correct_label": 58, "train_path": 58, "str": [58, 60, 63, 64, 68, 69, 72, 73, 74, 75, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 136, 145, 147, 150, 152, 154, 160, 161, 164, 166, 168, 169, 170, 171, 175, 176, 179, 180, 181, 182, 183, 184, 186, 188, 191, 192, 193, 194, 195, 196, 203, 204, 224, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 386, 387, 388, 389, 392, 398, 401, 405, 406, 407, 409, 410, 411, 412, 414, 415, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 437, 441, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 478, 479, 480, 485, 501, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 518, 520, 522, 533, 534, 535, 536, 543, 545, 546, 548, 549, 551, 552, 554, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 584, 587, 588, 590, 591, 600, 602, 603, 604, 606, 608, 610, 611, 624, 628, 635, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 699, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 738, 739, 744, 749, 752, 753, 754, 755, 757, 760, 763, 764, 765, 767, 771, 772, 773, 775, 777, 778, 780, 781, 782, 787, 788, 790, 791, 796, 798, 806, 808, 809, 820, 821, 825, 844, 845, 848, 852, 855, 856, 860, 864, 869, 878, 879, 880], "makedir": 58, "valid_path": 58, "28x28": 58, "pic": 58, "int8": [58, 65, 77, 87, 88, 100, 145, 172, 177, 179, 180, 184, 640, 641, 753, 790, 791, 844, 859], "new_img": [58, 60], "builder": [58, 829], "batchwis": 58, "goe": [58, 389, 478, 837, 850, 855, 862], "seed_valu": [58, 85, 654, 756], "randomize_dataset": 58, "create_dataset": 58, "num_examples_per_class": 58, "img_arrai": 58, "dir": [58, 867], "img_path": 58, "imread": [58, 60, 867], "imread_grayscal": 58, "generate_batch": 58, "ivyerror": [58, 822, 848], "smaller": [58, 68, 75, 81, 91, 98, 313, 345, 362, 378, 383, 386, 388, 398, 415, 420, 431, 463, 533, 534, 535, 556, 645, 650, 658, 713, 721, 771, 772, 777, 779, 835, 848, 864], "yield": [58, 78, 331, 332, 380, 389, 495, 655, 762, 843], "x_batch_inst": 58, "form": [58, 60, 63, 64, 68, 73, 85, 87, 96, 107, 108, 109, 138, 139, 151, 156, 157, 323, 326, 340, 349, 380, 383, 387, 389, 440, 451, 482, 491, 495, 511, 546, 607, 609, 640, 645, 647, 648, 652, 678, 680, 682, 683, 684, 685, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 702, 733, 744, 790, 805, 828, 833, 834, 852, 859, 862, 868, 869, 875, 885, 886, 891], "intialis": 58, "num_epoch": 58, "inherit": [58, 839, 842, 848, 866, 870, 872], "creation": [58, 68, 85, 91, 114, 841, 844, 845, 851, 853, 856, 857, 859, 860, 864, 878, 885, 887, 891], "inform": [58, 60, 65, 68, 70, 88, 93, 176, 179, 330, 380, 546, 635, 641, 645, 646, 651, 731, 825, 827, 832, 833, 834, 835, 836, 838, 842, 843, 848, 852, 853, 855, 857, 859, 888], "insid": [58, 73, 96, 114, 389, 505, 648, 691, 788, 834, 835, 839, 842, 844, 845, 849, 852, 853, 859, 860, 878, 891], "ivynet": 58, "h_w": 58, "input_channel": [58, 806, 864, 868], "output_channel": [58, 806, 868], "gelu": [58, 59, 62, 84, 637, 802], "image_widht": 58, "start_dim": [58, 68, 91, 389, 485], "end_dim": [58, 68, 91, 389, 485], "gpu_is_avail": [58, 642], "__name__": [58, 59, 61, 612, 645, 848], "heavi": [58, 792, 834, 856, 857, 862, 886], "lift": [58, 857, 886], "num_correct": 58, "y_pred": 58, "epoch_loss": 58, "field": [58, 73, 79, 96, 102, 387, 389, 440, 509, 648, 656, 683, 684, 695, 696, 698, 763, 764, 765, 843, 883, 891], "training_accuraci": 58, "train_loss": 58, "train_correct": 58, "train_loop": 58, "leav": [58, 63, 68, 86, 88, 90, 91, 92, 95, 96, 98, 104, 114, 176, 179, 251, 308, 311, 312, 318, 389, 479, 480, 485, 497, 498, 499, 515, 516, 518, 534, 535, 540, 560, 608, 650, 652, 666, 677, 682, 698, 715, 719, 724, 726, 727, 732, 733, 742, 743, 744, 745, 771, 772, 820, 833, 842, 843, 844, 846, 847, 851, 852, 855, 856, 859, 867, 868], "xbatch": 58, "ybatch": 58, "to_devic": [58, 66, 89, 207, 642, 808], "entropi": [58, 74, 97, 649, 707, 708, 709], "hot": [58, 64, 87, 152, 640], "ybatch_encod": 58, "one_hot": [58, 64, 87, 640, 869], "loss_prob": 58, "ret_grad_idx": [58, 628, 646, 787, 854], "xs_grad_idx": [58, 628, 646, 787, 854], "batch_loss": 58, "set_descript": 58, "set_postfix": 58, "accuracy_percentag": 58, "naverag": 58, "6f": 58, "_train_summari": 58, "writer": 58, "writerow": 58, "157it": 58, "06it": 58, "475401": 58, "11it": 58, "081436": 58, "13it": 58, "0187": 58, "029279": 58, "008382": 58, "07it": 58, "00456": 58, "003816": 58, "82it": 58, "00277": 58, "002179": 58, "05it": 58, "00175": 58, "001569": 58, "00147": 58, "09it": 58, "00128": 58, "001005": 58, "10it": 58, "00112": 58, "000837": 58, "129": [58, 647, 666, 668], "12it": 58, "000989": 58, "000709": 58, "145": 58, "000873": 58, "000606": 58, "08it": 58, "000774": 58, "000524": 58, "000688": 58, "000455": 58, "000613": 58, "000398": 58, "000547": 58, "000350": 58, "000488": 58, "000308": 58, "000437": 58, "000273": 58, "000391": 58, "000243": 58, "238": [58, 258, 643], "98it": 58, "000351": 58, "000216": 58, "260": 58, "plot_summari": 58, "whitegrid": 58, "nrow": 58, "ncol": 58, "fontweight": 58, "bold": 58, "set_xlabel": 58, "set_ylabel": 58, "savefig": 58, "summary_plot": 58, "png": [58, 60, 61, 867], "save_weight": [58, 808], "model_param": 58, "ivynet_weight": 58, "hdf5": [58, 85, 808, 867], "deitimageprocessor": 59, "tfdeitforimageclassif": 59, "tfdeitforimageclassificationwithteach": 59, "distillation_classifi": 59, "cls_classifi": 59, "randomli": [59, 386, 410, 411, 412, 647, 670, 790, 791, 792, 793, 798, 806], "henc": [59, 79, 234, 349, 383, 643, 650, 656, 716, 763, 764, 765, 766, 815, 834, 842, 843, 844, 855, 859], "image_processor": [59, 878, 879], "distil": [59, 886], "patch16": 59, "outputs_from_original_model": 59, "bertforsequenceclassif": 59, "bertforpretrain": 59, "NOT": [59, 279, 643, 820, 833], "probabl": [59, 68, 72, 74, 77, 91, 95, 97, 100, 386, 388, 393, 398, 410, 411, 412, 465, 519, 533, 536, 540, 647, 649, 654, 670, 674, 677, 707, 752, 792, 805, 806, 827, 859, 871, 876], "ptarmigan": 59, "rf": [59, 835], "branch": [59, 239, 251, 254, 256, 284, 296, 297, 298, 301, 643, 834, 835, 838, 843, 850, 870, 878, 885], "moduleconvert": [59, 803, 808], "mc": 59, "from_keras_modul": [59, 803], "compiled_func": 59, "return_graph": [59, 61], "compiled_output": 59, "diverg": [59, 68, 91, 258, 388, 465, 643], "_all_funct": [59, 61], "convert_to_tensor_v2_with_dispatch": 59, "transpose_v2": 59, "convolution_v2": 59, "bias_add": 59, "binary_op_wrapp": 59, "cast": [59, 65, 67, 68, 73, 81, 88, 90, 96, 104, 163, 166, 191, 285, 398, 534, 535, 641, 643, 648, 658, 689, 705, 771, 772, 775, 777, 779, 791, 852, 857, 864, 882], "moments_v2": 59, "batch_norm": [59, 61, 68, 91, 392], "tensordot": [59, 73, 96, 648, 821, 844], "softmax_v2": 59, "_slice_help": 59, "save_to_disk": [59, 61, 808], "12265048989200113": 59, "11038777417100028": 59, "1167045795539998": 59, "ivy_api_kei": 60, "obj": [60, 138, 139, 568, 640, 645, 818, 878, 879, 880], "combo": [60, 867], "permit": [60, 839, 851, 856, 859, 862], "usabl": [60, 851, 860], "neither": [60, 234, 251, 258, 284, 643, 648, 700, 843, 856, 862], "nor": [60, 234, 251, 258, 284, 643, 843, 856, 889], "specifc": 60, "invoc": 60, "externally_link": 60, "logo": 60, "patch": [60, 302, 643, 844, 885], "cv2_imshow": 60, "envrion": 60, "canni": 60, "original_img": 60, "fn_arg": 60, "dilate_edg": 60, "morphologi": 60, "hk_model": 60, "keras_model": 60, "odsc": 60, "talk": [60, 890], "352": [61, 95, 647, 671, 848], "nvidia_ml_py3": 61, "19190": 61, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 61, "b9": 61, "b1": [61, 648, 697], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 61, "cycler": 61, "fonttool": 61, "965": 61, "kiwisolv": 61, "show_graph": [61, 808], "to_ivy_modul": [61, 803, 869], "image_dim": 61, "v0": [61, 868], "urlerror": 61, "dev_str": 61, "comp_network": 61, "time_chronolog": 61, "ret0_nc": 61, "ret1_nc": 61, "ret0_c": 61, "ret1_c": 61, "pytorch_vision_v0": 61, "distributed_c10d": 61, "262": 61, "reduce_op": 61, "reduceop": 61, "004645566477999864": 61, "0044566806820000695": 61, "attribut": [61, 85, 176, 177, 178, 179, 210, 211, 219, 561, 562, 641, 642, 645, 788, 840, 841, 842, 847, 848, 852, 853, 855, 856, 862, 865, 866, 867, 868], "definit": [61, 67, 73, 90, 96, 303, 643, 648, 678, 827, 831, 835, 839, 844, 849, 852, 866, 879], "max_pool2d": [61, 68, 91, 386, 406], "__iadd__": 61, "adaptive_avg_pool2d": [61, 68, 91, 386], "_arraywithactiv": [62, 113], "abc": [62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 117, 559, 645, 652, 750, 805, 810, 820, 821, 866], "_abc_impl": [62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 117, 118], "_abc": [62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 117, 118], "_abc_data": [62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 117, 118], "approxim": [62, 67, 68, 73, 84, 90, 91, 96, 108, 111, 121, 232, 233, 236, 237, 238, 239, 248, 249, 254, 256, 258, 272, 273, 274, 275, 289, 296, 297, 301, 302, 303, 360, 370, 383, 388, 467, 468, 637, 643, 648, 691, 694, 802, 847, 856], "complex_mod": [62, 67, 68, 84, 90, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 302, 306, 311, 312, 314, 378, 637, 643, 802, 853], "variant": [62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 154, 156, 157, 160, 164, 165, 166, 176, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 626, 627, 630, 632, 633, 634, 635, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 698, 702, 703, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 839, 846, 847, 862], "docstr": [62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 121, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 164, 165, 166, 176, 179, 183, 184, 191, 208, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 386, 389, 398, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 423, 424, 425, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 551, 552, 555, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 577, 579, 580, 582, 587, 588, 602, 603, 604, 605, 606, 608, 610, 611, 624, 625, 626, 627, 630, 632, 633, 634, 635, 640, 641, 643, 645, 648, 650, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 832, 833, 837, 841, 850, 851, 852, 853, 856, 858, 860], "liter": [62, 67, 68, 73, 84, 90, 91, 96, 121, 122, 123, 124, 125, 126, 127, 128, 129, 302, 306, 311, 312, 314, 378, 386, 387, 389, 392, 408, 418, 422, 430, 445, 451, 456, 459, 462, 495, 517, 637, 643, 648, 657, 689, 705, 769, 802, 862], "magnitud": [62, 67, 68, 84, 90, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 231, 234, 251, 258, 284, 302, 306, 311, 312, 314, 378, 637, 643, 648, 698, 699, 802, 844], "handle_complex_input": [62, 67, 68, 84, 90, 91, 121, 122, 123, 124, 125, 126, 127, 128, 129, 302, 306, 311, 312, 314, 378, 637, 643, 802, 853], "element": [62, 64, 67, 68, 69, 72, 73, 75, 77, 78, 79, 81, 84, 85, 87, 88, 90, 91, 92, 95, 96, 98, 100, 101, 102, 104, 109, 113, 114, 117, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 137, 140, 146, 147, 156, 157, 158, 174, 176, 179, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 316, 317, 318, 320, 321, 322, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 353, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 380, 383, 386, 387, 388, 389, 398, 399, 410, 411, 412, 415, 420, 423, 424, 425, 429, 431, 432, 433, 439, 440, 441, 463, 473, 474, 475, 485, 486, 487, 489, 492, 502, 503, 505, 507, 509, 531, 532, 534, 535, 536, 537, 538, 539, 541, 542, 544, 548, 551, 552, 563, 564, 580, 582, 602, 603, 604, 606, 610, 611, 637, 640, 643, 645, 647, 648, 650, 652, 654, 655, 656, 657, 658, 659, 670, 679, 681, 683, 684, 688, 693, 695, 696, 698, 702, 713, 716, 717, 718, 719, 720, 721, 722, 723, 732, 735, 741, 752, 760, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 785, 787, 790, 792, 806, 821, 847, 857, 859, 862, 864, 889], "138": [62, 121, 637], "165": [62, 121, 637, 647, 671], "hardswish": [62, 68, 84, 91, 309, 378, 637, 802], "leaky_relu": [62, 84, 91, 306, 637, 791], "alpha": [62, 67, 68, 84, 90, 91, 118, 123, 234, 300, 306, 307, 315, 319, 325, 378, 380, 387, 392, 393, 441, 517, 520, 521, 522, 637, 643, 802, 851, 856, 857], "slope": [62, 68, 84, 91, 123, 306, 307, 313, 315, 319, 378, 637, 802], "leaki": [62, 84, 123, 637, 802], "log_softmax": [62, 84, 637, 802], "0719": [62, 84, 124], "mish": [62, 84, 637, 802], "30340147": [62, 125, 637], "86509842": [62, 84, 125, 637], "269": [62, 127], "881": [62, 67, 90, 127, 237, 250, 290, 643], "422": [62, 128, 637], "155": [62, 95, 128, 637, 647, 671], "softplu": [62, 84, 637, 802, 862], "beta": [62, 68, 76, 84, 91, 99, 129, 315, 319, 325, 328, 329, 378, 380, 387, 388, 392, 393, 441, 469, 517, 521, 522, 637, 653, 751, 802, 827, 862], "threshold": [62, 67, 68, 84, 90, 91, 129, 282, 283, 322, 348, 378, 383, 388, 389, 464, 469, 502, 637, 643, 802, 862], "union": [62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 378, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 396, 398, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 569, 571, 572, 573, 575, 576, 579, 580, 582, 583, 587, 588, 592, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 740, 741, 743, 744, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 787, 790, 805, 810, 811, 839, 842, 844, 845, 846, 848, 851, 852, 855, 860, 862, 864, 869, 878, 879, 880], "3461": [62, 84, 129, 637], "6491": [62, 84, 129, 637], "hopefulli": [62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 831, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 862, 864, 865, 866, 867, 868, 869, 874, 875, 876], "_array_to_new_backend": 63, "_to_ivi": 63, "_to_n": 63, "to_ignor": [63, 83, 106, 652, 743, 744], "_to_new_backend": 63, "args_to_ivi": 63, "include_deriv": [63, 86, 652, 733, 744, 787], "nest": [63, 85, 86, 114, 117, 254, 578, 608, 625, 628, 643, 645, 646, 651, 729, 730, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 810, 839, 841, 842, 852, 854, 860, 867, 868, 870, 872, 885], "unchang": [63, 67, 386, 389, 431, 485, 647, 670], "deriv": [63, 64, 68, 70, 86, 87, 91, 93, 142, 147, 154, 160, 324, 328, 353, 380, 383, 626, 627, 630, 631, 632, 633, 634, 640, 646, 651, 652, 731, 733, 744, 808, 810, 811, 844, 845, 866, 868], "word": [63, 137, 389, 488, 640, 654, 755, 803, 806, 842, 855, 856, 872], "args_to_n": [63, 855], "cont_inplac": 63, "decid": [63, 85, 652, 743, 744, 833, 834, 844, 862], "args_to_new_backend": 63, "shallow": [63, 652, 739, 740, 744, 749, 750], "nativevari": 63, "mutabl": [63, 652, 733, 739, 740, 744, 749, 750, 840], "to_ivi": [63, 86, 652, 745, 855], "leaf": [63, 85, 92, 104, 114, 559, 652, 742, 743, 745, 772, 842, 852, 867], "travers": [63, 86, 652, 736, 744, 842, 844, 848, 864], "lowest": [63, 68, 77, 86, 91, 100, 398, 536, 652, 654, 744, 753, 821, 852, 870, 872, 882, 886, 890], "search": [63, 68, 86, 91, 758, 759, 798, 832, 834, 842, 846, 849, 859, 860, 874], "to_new_backend": 63, "_arraywithcr": [64, 113], "boolean": [64, 65, 67, 68, 69, 75, 78, 81, 85, 87, 88, 90, 91, 92, 98, 101, 104, 113, 114, 134, 136, 138, 139, 140, 146, 163, 179, 181, 183, 184, 187, 203, 213, 221, 227, 241, 242, 243, 244, 245, 246, 278, 279, 280, 281, 346, 347, 362, 383, 387, 389, 445, 456, 462, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 503, 510, 545, 548, 559, 566, 569, 570, 574, 575, 576, 577, 578, 579, 580, 589, 592, 595, 596, 598, 599, 624, 639, 640, 641, 642, 643, 645, 647, 650, 651, 652, 655, 658, 674, 716, 717, 718, 720, 722, 723, 725, 727, 729, 730, 742, 760, 761, 762, 774, 776, 790, 791, 792, 793, 798, 809, 842, 844, 852, 856, 859, 862], "never": [64, 68, 75, 87, 91, 98, 139, 389, 473, 474, 475, 481, 483, 485, 486, 487, 490, 494, 501, 510, 566, 645, 650, 716, 717, 718, 720, 722, 723, 725, 727, 835, 844, 855, 856, 859], "buffer": [64, 87, 91, 98, 139, 145, 473, 474, 481, 483, 485, 486, 487, 494, 510, 640, 716, 717, 718, 720, 722, 723, 725, 727, 807, 808, 855, 870], "nativedtyp": [64, 65, 68, 72, 73, 77, 78, 81, 87, 91, 96, 100, 101, 104, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 162, 163, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 185, 187, 189, 193, 203, 323, 324, 325, 326, 327, 328, 329, 344, 351, 367, 380, 383, 393, 398, 519, 520, 521, 522, 523, 533, 534, 535, 536, 539, 542, 640, 641, 647, 648, 654, 655, 657, 658, 670, 689, 705, 753, 754, 755, 758, 759, 769, 771, 772, 775, 777, 779, 805, 844, 845, 851, 860, 864], "datatyp": [64, 68, 85, 87, 91, 139, 147, 151, 168, 189, 193, 386, 434, 640, 641, 785, 860, 878], "nativedevic": [64, 66, 68, 77, 87, 89, 91, 100, 137, 138, 139, 141, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 158, 159, 160, 205, 206, 207, 208, 209, 212, 217, 218, 219, 220, 222, 223, 224, 225, 226, 230, 323, 324, 339, 380, 393, 519, 520, 522, 523, 640, 642, 654, 752, 753, 754, 755, 805, 810, 811, 844, 845, 848, 851, 860], "39999998": [64, 138, 139, 640, 656, 764], "5999999": [64, 68, 91, 95, 138, 139, 308, 378, 387, 436, 640, 647, 670, 677], "0999999": [64, 81, 138, 139, 308, 318, 321, 364, 378, 383, 640, 775], "10000038": [64, 138, 139, 640], "90786433e": [64, 138, 139, 640], "310": [64, 138, 139, 640], "copy_arrai": [64, 87, 640], "to_ivy_arrai": [64, 87, 140, 640], "empty_lik": [64, 68, 87, 91, 275, 387, 439, 640, 643], "uniniti": [64, 141, 142, 640, 850], "from_dlpack": [64, 87, 640], "full_lik": [64, 87, 640, 860], "fill_valu": [64, 68, 78, 87, 91, 101, 146, 147, 263, 271, 389, 393, 503, 523, 640, 643, 655, 761, 844, 857, 860], "scalar": [64, 67, 68, 69, 73, 84, 87, 90, 91, 92, 96, 108, 123, 147, 152, 234, 255, 300, 306, 349, 350, 352, 357, 360, 362, 364, 369, 383, 386, 387, 388, 389, 434, 441, 463, 473, 474, 475, 484, 489, 611, 624, 640, 643, 645, 648, 705, 844, 854, 856, 870, 885], "fill": [64, 67, 68, 77, 78, 85, 87, 90, 91, 100, 101, 141, 146, 147, 149, 152, 153, 154, 159, 160, 285, 324, 380, 387, 389, 393, 445, 451, 456, 462, 484, 503, 504, 520, 522, 523, 640, 643, 654, 655, 753, 761, 805, 833, 857], "000123": [64, 147, 640], "stop": [64, 68, 70, 87, 91, 93, 137, 148, 149, 224, 387, 456, 462, 589, 627, 630, 632, 633, 634, 635, 640, 642, 645, 646, 651, 652, 729, 730, 731, 743, 810, 825, 851, 854, 862, 864, 870, 885], "num": [64, 87, 148, 149, 640, 790, 835, 851, 864], "endpoint": [64, 87, 148, 149, 640, 805, 851], "logspac": [64, 87, 640, 864], "sequenc": [64, 68, 72, 73, 75, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 143, 145, 147, 149, 152, 154, 160, 164, 166, 179, 183, 184, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 327, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 376, 377, 380, 383, 384, 385, 386, 387, 389, 393, 398, 399, 401, 402, 403, 410, 411, 412, 414, 415, 419, 420, 422, 429, 430, 431, 432, 433, 436, 444, 445, 446, 448, 454, 455, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 479, 480, 481, 482, 488, 490, 491, 493, 494, 496, 499, 501, 503, 504, 505, 507, 510, 511, 512, 514, 515, 516, 518, 520, 521, 533, 534, 535, 536, 543, 544, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 583, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 625, 628, 629, 630, 635, 640, 643, 645, 646, 647, 648, 650, 652, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 674, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 705, 707, 708, 709, 713, 714, 716, 717, 719, 720, 721, 722, 723, 724, 727, 728, 732, 739, 749, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 806, 809, 811, 835, 843, 844, 845, 846, 848, 859, 860, 862, 864, 869, 888], "on_valu": [64, 87, 149, 152, 640], "off_valu": [64, 87, 149, 152, 640], "evenli": [64, 67, 68, 72, 75, 85, 87, 90, 91, 95, 98, 137, 148, 149, 303, 386, 429, 433, 640, 643, 647, 650, 660, 661, 662, 663, 665, 667, 669, 722], "hint": [64, 67, 68, 73, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 340, 346, 347, 349, 352, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 495, 503, 507, 533, 536, 563, 567, 569, 571, 602, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 833, 839, 847, 849, 851, 852, 855, 856, 860], "simplic": [64, 67, 68, 73, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 340, 346, 347, 349, 352, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 495, 503, 507, 533, 536, 563, 567, 569, 571, 602, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 847, 862, 868], "nestabl": [64, 67, 68, 73, 90, 91, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 166, 182, 186, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 324, 339, 340, 346, 347, 349, 352, 380, 383, 386, 387, 389, 398, 405, 406, 407, 408, 410, 411, 412, 418, 423, 424, 425, 430, 432, 441, 495, 503, 507, 533, 536, 540, 549, 557, 558, 563, 567, 569, 571, 573, 587, 602, 606, 611, 635, 640, 641, 643, 645, 646, 647, 648, 650, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 669, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 706, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 833, 837, 846, 847, 855, 859, 872], "464": [64, 67, 100, 149, 238, 239, 643], "15888336": [64, 149], "2154": [64, 149], "43469003": [64, 149], "meshgrid": [64, 87, 640], "spars": [64, 68, 74, 87, 91, 97, 150, 327, 380, 387, 445, 456, 462, 640, 649, 709], "xy": [64, 87, 150, 640], "coordin": [64, 67, 78, 90, 91, 101, 150, 158, 239, 301, 331, 332, 339, 360, 380, 394, 524, 640, 643, 655, 761], "conserv": [64, 150, 640], "cartesian": [64, 150, 640], "matrix": [64, 68, 69, 72, 73, 91, 92, 95, 96, 108, 109, 111, 113, 150, 156, 157, 158, 339, 340, 380, 387, 389, 398, 437, 440, 441, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 493, 533, 545, 551, 640, 645, 647, 648, 671, 678, 680, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 706, 790, 792, 805, 806, 821, 825, 833, 844, 856, 883, 885], "ij": [64, 81, 150, 640, 658, 773, 821], "rank": [64, 68, 73, 75, 82, 91, 96, 98, 105, 108, 109, 110, 111, 112, 117, 150, 334, 335, 336, 337, 338, 380, 387, 389, 398, 445, 446, 456, 459, 462, 495, 503, 507, 543, 640, 648, 650, 655, 659, 679, 681, 689, 691, 695, 697, 702, 704, 705, 715, 716, 724, 727, 728, 761, 781, 782, 828, 893], "ni": [64, 150, 640], "xi": [64, 150, 640], "scatter": [64, 69, 87, 92, 152, 587, 588, 640, 645, 841, 855, 862, 892], "unless": [64, 68, 73, 87, 91, 152, 284, 345, 362, 367, 383, 640, 643, 648, 691, 840, 845, 855, 870, 879, 880], "ones_lik": [64, 87, 640, 840, 869, 882], "tril": [64, 87, 640], "whose": [64, 67, 68, 69, 73, 75, 79, 81, 87, 90, 91, 92, 96, 98, 102, 104, 109, 111, 113, 147, 156, 157, 233, 237, 240, 248, 249, 250, 289, 290, 296, 297, 301, 302, 303, 340, 354, 355, 359, 363, 364, 366, 370, 380, 387, 389, 440, 461, 494, 503, 509, 550, 606, 640, 643, 645, 648, 650, 656, 658, 678, 680, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 705, 717, 721, 763, 764, 765, 772, 773, 792, 830, 847, 859], "innermost": [64, 68, 73, 96, 156, 157, 340, 380, 387, 440, 640, 648, 678, 680, 682, 683, 684, 685, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 702], "mxn": [64, 68, 73, 96, 156, 157, 340, 380, 640, 648, 682, 689, 691, 692, 694, 695, 699, 702], "matric": [64, 68, 73, 91, 96, 108, 109, 113, 150, 156, 157, 340, 380, 387, 389, 440, 445, 446, 448, 454, 455, 460, 484, 640, 647, 648, 671, 678, 680, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 702, 703, 792, 831, 849, 885], "diagon": [64, 68, 73, 91, 96, 109, 143, 156, 157, 158, 324, 339, 340, 380, 387, 389, 438, 441, 451, 457, 484, 640, 648, 681, 702], "triangular": [64, 68, 73, 96, 156, 157, 158, 339, 340, 380, 387, 457, 640, 648, 678, 684, 685, 691, 695], "triu": [64, 87, 640], "upper": [64, 68, 73, 77, 91, 96, 100, 143, 157, 158, 324, 340, 380, 387, 398, 457, 536, 640, 648, 654, 678, 684, 685, 695, 755, 844, 855, 859], "zeros_lik": [64, 68, 87, 163, 280, 389, 503, 626, 627, 630, 632, 633, 634, 640, 641, 643, 646, 648, 650, 695, 713, 856, 862], "data_typ": [65, 68, 88, 91, 193, 381, 641, 841, 844, 859, 860], "_arraywithdatatyp": [65, 113], "irrespect": [65, 73, 88, 96, 163, 641, 648, 698, 842, 855, 866, 892], "promot": [65, 67, 68, 73, 88, 90, 91, 96, 103, 113, 114, 163, 166, 189, 190, 191, 197, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 251, 254, 256, 258, 272, 273, 274, 275, 276, 281, 284, 289, 293, 296, 297, 298, 299, 300, 301, 302, 305, 357, 365, 370, 383, 386, 398, 430, 533, 596, 619, 641, 643, 645, 648, 650, 658, 678, 679, 686, 687, 688, 689, 690, 691, 693, 694, 696, 697, 704, 705, 714, 724, 767, 775, 778, 790, 791, 836, 838, 847, 848, 852, 861], "nan": [65, 67, 68, 69, 79, 81, 88, 90, 91, 92, 163, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 265, 266, 267, 272, 273, 274, 275, 276, 279, 284, 285, 287, 289, 290, 293, 294, 295, 296, 297, 298, 301, 302, 304, 311, 345, 346, 347, 358, 362, 367, 370, 378, 383, 389, 398, 503, 531, 532, 539, 540, 541, 542, 569, 624, 638, 641, 643, 645, 656, 658, 659, 763, 764, 765, 766, 774, 775, 776, 778, 779, 780, 781, 782, 790, 793, 838, 844, 847, 854, 860, 861], "infin": [65, 67, 69, 73, 88, 90, 96, 163, 231, 232, 233, 234, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 265, 266, 272, 273, 274, 275, 276, 279, 284, 285, 287, 289, 293, 294, 296, 297, 298, 301, 302, 304, 346, 347, 370, 383, 569, 638, 641, 643, 645, 648, 658, 659, 696, 705, 774, 776, 781, 782, 838, 847], "desir": [65, 66, 68, 78, 81, 85, 88, 89, 91, 101, 104, 108, 163, 165, 166, 225, 330, 371, 380, 383, 389, 398, 493, 539, 542, 543, 641, 642, 648, 655, 658, 700, 760, 775, 805, 806, 835, 840, 843, 844, 845, 856, 864, 874, 878, 885], "broadcast_arrai": [65, 88, 641], "mix": [65, 67, 88, 90, 91, 92, 97, 100, 113, 114, 164, 177, 178, 191, 210, 211, 241, 244, 245, 246, 251, 252, 258, 262, 270, 271, 281, 284, 287, 293, 388, 398, 469, 540, 559, 561, 562, 563, 564, 573, 608, 611, 641, 642, 643, 645, 647, 648, 649, 650, 653, 658, 661, 663, 666, 668, 669, 671, 677, 678, 700, 707, 709, 713, 751, 773, 775, 778, 791, 793, 833, 837, 844, 845, 846, 855, 862, 864, 872, 885, 889, 891], "broadcast_to": [65, 88, 641, 844], "can_cast": [65, 88, 641, 844, 852, 856], "accord": [65, 68, 69, 75, 81, 88, 98, 104, 166, 176, 234, 245, 251, 258, 284, 295, 330, 380, 386, 389, 431, 495, 563, 566, 587, 588, 641, 643, 645, 648, 650, 658, 704, 715, 728, 778, 780, 785, 792, 812, 820, 833, 834, 838, 844, 850, 852, 856, 859], "finfo": [65, 88, 641, 859], "resolut": [65, 88, 176, 641, 835], "4028235e": [65, 176, 641], "iinfo": [65, 88, 641], "integ": [65, 67, 68, 72, 73, 75, 77, 81, 82, 85, 90, 91, 92, 95, 96, 98, 100, 104, 105, 113, 114, 137, 146, 179, 180, 186, 190, 191, 195, 231, 241, 242, 243, 244, 245, 246, 247, 257, 258, 269, 281, 286, 289, 293, 294, 304, 305, 341, 342, 343, 346, 347, 351, 356, 357, 380, 383, 386, 389, 393, 396, 398, 414, 419, 429, 432, 433, 434, 481, 490, 495, 503, 507, 510, 519, 520, 521, 522, 523, 525, 526, 531, 533, 534, 535, 540, 543, 566, 582, 592, 625, 640, 641, 643, 645, 647, 648, 650, 654, 657, 658, 659, 660, 661, 662, 663, 665, 667, 669, 679, 681, 690, 704, 705, 722, 752, 753, 754, 755, 756, 757, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 790, 791, 792, 793, 798, 806, 821, 835, 842, 844, 854, 857, 859, 864, 866], "119": [65, 179], "1220": [65, 179], "int16": [65, 68, 77, 81, 88, 100, 166, 170, 172, 177, 179, 186, 201, 398, 534, 535, 641, 658, 753, 771, 772, 777, 779, 790, 791, 844, 856, 859, 864], "32768": [65, 88, 179, 604, 645], "32767": [65, 88, 179], "is_bool_dtyp": [65, 88, 641], "is_float_dtyp": [65, 88, 641, 860], "is_int_dtyp": [65, 88, 641, 857, 860], "is_uint_dtyp": [65, 88, 641, 857, 860], "result_typ": [65, 88, 641, 844], "arrays_and_dtyp": [65, 88, 191, 641], "_arraywithdevic": [66, 113], "move": [66, 68, 89, 91, 158, 221, 225, 229, 339, 380, 389, 494, 640, 642, 808, 835, 845, 860], "addit": [66, 68, 69, 76, 89, 91, 92, 99, 134, 136, 225, 234, 294, 388, 392, 398, 463, 517, 532, 537, 556, 557, 558, 625, 639, 642, 643, 645, 647, 651, 653, 674, 731, 751, 806, 821, 833, 834, 835, 840, 844, 846, 847, 850, 852, 854, 855, 856, 859, 860, 862, 866, 867, 869, 878, 885, 886, 887, 891], "__dlpack__": [66, 89, 144, 225, 640, 642], "caveat": [66, 89, 225, 388, 467, 642], "portabl": [66, 89, 225, 642, 827, 883], "_arraywithelementwis": [67, 113], "ab": [67, 73, 83, 90, 106, 113, 114, 289, 345, 362, 383, 389, 502, 643, 648, 652, 689, 699, 705, 740, 743, 787, 820, 821, 831, 839, 844, 849, 853, 856, 859, 882], "absolut": [67, 68, 73, 83, 85, 90, 91, 96, 113, 231, 295, 345, 362, 365, 371, 383, 387, 388, 441, 458, 464, 466, 643, 648, 689, 690, 691, 696, 785, 787, 790, 792, 793, 828, 834], "aco": [67, 90, 643], "invers": [67, 68, 73, 90, 91, 96, 232, 233, 236, 237, 238, 239, 240, 355, 383, 386, 396, 409, 418, 420, 430, 525, 643, 648, 687, 690, 694, 812, 844], "cosin": [67, 90, 232, 233, 248, 249, 323, 326, 380, 386, 408, 418, 643, 806], "acosh": [67, 90, 177, 178, 641, 643, 831, 849], "area": [67, 68, 90, 91, 95, 233, 237, 240, 386, 422, 429, 433, 643, 830, 855, 862, 875, 881], "hyperbol": [67, 90, 233, 237, 240, 249, 297, 301, 302, 315, 319, 378, 643], "sector": [67, 90, 233, 237, 240, 643, 875], "multipli": [67, 68, 72, 81, 90, 91, 95, 108, 234, 300, 363, 386, 387, 422, 453, 454, 534, 535, 643, 647, 658, 670, 771, 777, 835, 839, 840, 842, 846], "angl": [67, 90, 239, 249, 297, 302, 361, 383, 643], "deg": [67, 90, 235, 643], "radian": [67, 68, 90, 91, 232, 235, 236, 238, 239, 248, 250, 290, 296, 301, 370, 383, 643, 847], "degre": [67, 68, 81, 90, 91, 104, 235, 250, 290, 333, 380, 389, 501, 643, 658, 778, 780, 884], "1j": [67, 90, 91, 235, 236, 248, 249, 254, 256, 268, 291, 296, 297, 301, 349, 603, 643, 645], "2j": [67, 68, 90, 91, 235, 264, 349, 386, 414, 419, 604, 643, 645], "3j": [67, 68, 90, 91, 235, 268, 291, 349, 383, 643], "35619449": [67, 235, 643], "78539816": [67, 235, 643], "135": [67, 235, 551, 643, 645], "asin": [67, 90, 643], "sine": [67, 90, 236, 237, 296, 297, 643], "927": [67, 90, 236], "asinh": [67, 90, 236, 643], "atan": [67, 90, 643], "tangent": [67, 90, 238, 239, 240, 301, 302, 315, 319, 376, 378, 385, 643, 847], "785": [67, 90, 238, 239, 643], "atan2": [67, 90, 643], "quotient": [67, 90, 239, 251, 258, 643], "588": [67, 239, 643], "inf": [67, 68, 69, 73, 90, 91, 92, 96, 239, 256, 265, 266, 267, 268, 272, 273, 275, 285, 311, 355, 365, 378, 383, 387, 398, 437, 536, 569, 624, 638, 643, 645, 647, 648, 675, 689, 705, 790, 793, 831, 844, 849, 854], "719": [67, 239, 643], "atanh": [67, 90, 643], "549": [67, 90, 95, 240, 643, 647, 671], "bitwise_and": [67, 90, 643], "bitwise_invert": [67, 90, 643], "bitiwse_invert": [67, 242], "bitwise_left_shift": [67, 90, 643], "bitwise_or": [67, 90, 643], "bitwise_right_shift": [67, 90, 113, 643], "bitwise_xor": [67, 90, 113, 643], "ceil": [67, 68, 90, 91, 108, 111, 137, 386, 405, 406, 407, 423, 424, 425, 428, 640, 643, 806, 855], "416": [67, 248, 643], "540": [67, 248], "990": [67, 248], "cosh": [67, 90, 248, 643], "deg2rad": [67, 90, 643], "180": [67, 90, 250, 290, 643], "270": [67, 90, 250, 290, 643], "360": [67, 90, 250, 290, 643, 843], "dividend": [67, 90, 251, 258, 293, 305, 643], "divisor": [67, 68, 70, 81, 90, 91, 93, 104, 251, 258, 261, 262, 293, 305, 386, 389, 405, 406, 407, 481, 490, 510, 626, 627, 632, 643, 646, 658, 778, 780, 806, 810], "375": [67, 252, 287], "erf": [67, 90, 354, 383, 643], "exponenti": [67, 68, 90, 91, 253, 254, 256, 276, 289, 306, 316, 378, 387, 452, 643], "gauss": [67, 90, 253, 643], "328": [67, 253, 301, 643], "677": [67, 253], "842": [67, 253, 301, 643], "71828198": [67, 90, 254], "38905573": [67, 90, 254], "08553696": [67, 90, 254, 643], "exp2": [67, 90, 643], "expm1": [67, 90, 643, 844], "918": [67, 256], "147": [67, 256, 643], "floor": [67, 68, 90, 91, 108, 111, 245, 258, 386, 405, 406, 407, 409, 423, 424, 425, 428, 643, 806, 855], "floor_divid": [67, 90, 643, 798, 844], "fmin": [67, 90, 643, 844], "gcd": [67, 90, 643, 844], "greater": [67, 68, 72, 75, 77, 90, 91, 95, 100, 113, 114, 145, 232, 233, 236, 237, 239, 240, 243, 245, 251, 257, 258, 272, 274, 289, 293, 295, 297, 298, 302, 303, 304, 348, 383, 386, 409, 414, 419, 430, 640, 643, 647, 648, 650, 654, 677, 679, 690, 723, 755, 792, 806, 835, 836, 857, 882], "greater_equ": [67, 90, 113, 114, 276, 643, 882], "isfinit": [67, 90, 643, 856], "out_i": [67, 90, 265, 266, 267, 268, 291, 643], "self_i": [67, 90, 265, 266, 267, 268, 291], "finit": [67, 90, 231, 232, 233, 234, 237, 239, 240, 249, 251, 252, 254, 256, 258, 265, 266, 272, 274, 284, 285, 287, 289, 293, 297, 298, 302, 643], "isinf": [67, 90, 643], "detect_posit": [67, 90, 266, 643], "detect_neg": [67, 90, 266, 643], "isnan": [67, 90, 643], "isreal": [67, 90, 643], "5j": [67, 90, 91, 268, 291, 349, 383, 643], "6j": [67, 68, 90, 264, 268, 349, 643], "lcm": [67, 90, 643, 844], "less": [67, 68, 73, 77, 81, 90, 91, 96, 100, 113, 114, 232, 233, 236, 239, 240, 247, 251, 258, 272, 273, 274, 275, 289, 293, 295, 298, 369, 383, 386, 387, 398, 408, 409, 418, 430, 456, 462, 533, 536, 643, 648, 654, 658, 689, 690, 691, 694, 705, 755, 778, 780, 806, 834, 835, 842, 844, 846, 848, 851, 856, 859, 862, 863, 864, 875, 882, 885, 887], "less_equ": [67, 90, 113, 114, 643, 848, 882], "log10": [67, 68, 90, 330, 380, 643], "logarithm": [67, 90, 254, 272, 273, 274, 275, 276, 353, 365, 383, 643, 648, 696], "602": [67, 273, 643], "699": [67, 273, 643], "log1p": [67, 90, 643, 854], "693": [67, 90, 128, 237, 274, 637, 643], "0953": [67, 90, 272, 274, 643], "log2": [67, 90, 277, 643], "logaddexp": [67, 90, 643], "logaddexp2": [67, 90, 643, 831, 849], "169925": [67, 90, 277, 643], "logical_and": [67, 90, 643, 856, 862, 892], "logical_not": [67, 90, 643, 844], "logical_or": [67, 90, 643, 892], "conform": [67, 73, 90, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 166, 176, 179, 191, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 256, 257, 258, 262, 263, 264, 265, 266, 267, 271, 273, 274, 275, 276, 278, 279, 280, 281, 284, 286, 287, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 346, 347, 349, 383, 386, 389, 398, 430, 503, 507, 533, 640, 641, 643, 648, 650, 655, 656, 657, 658, 659, 678, 679, 680, 681, 682, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 705, 714, 716, 717, 718, 720, 721, 723, 724, 728, 758, 759, 761, 762, 763, 764, 765, 766, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 847, 850], "api_specif": [67, 68, 90, 91, 166, 254, 264, 265, 280, 346, 347, 383, 386, 389, 430, 503, 641, 643, 650, 658, 728, 778, 847], "array_api": [67, 90, 166, 254, 264, 265, 280, 386, 389, 430, 503, 641, 643, 648, 650, 658, 696, 697, 728, 778, 847], "logical_xor": [67, 90, 643], "use_wher": [67, 90, 282, 283, 643], "formula": [67, 68, 90, 251, 273, 275, 282, 283, 284, 330, 364, 380, 383, 392, 512, 514, 643, 825], "exce": [67, 68, 91, 283, 389, 505, 643], "product": [67, 68, 72, 73, 81, 90, 91, 95, 96, 104, 108, 109, 111, 284, 376, 377, 385, 387, 389, 398, 436, 439, 443, 446, 447, 448, 453, 454, 455, 507, 534, 535, 542, 643, 647, 648, 658, 674, 677, 679, 686, 688, 693, 700, 704, 771, 772, 773, 777, 778, 821, 833, 864, 885, 887], "nan_to_num": [67, 90, 643], "posinf": [67, 90, 285, 643], "neginf": [67, 90, 285, 643], "5e": [67, 70, 90, 91, 285, 368, 632, 643, 646], "not_equ": [67, 90, 113, 114, 643, 882], "pow": [67, 90, 113, 114, 643, 838, 882], "expon": [67, 68, 69, 91, 92, 289, 357, 359, 363, 383, 392, 517, 604, 643, 645, 648, 690], "rad2deg": [67, 90, 643], "286": [67, 91, 290], "458": [67, 290], "573": [67, 290, 643], "reciproc": [67, 90, 643], "333": [67, 90, 251, 292, 643], "remaind": [67, 68, 75, 85, 90, 91, 98, 260, 643, 650, 722, 838, 855], "modulu": [67, 90, 293, 643, 855], "x2_i": [67, 90, 234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 262, 263, 270, 271, 276, 278, 280, 281, 284, 287, 289, 293, 300, 643, 838], "678": [67, 294, 295], "np_variant": [67, 90, 295, 643], "841": [67, 84, 90, 121, 296, 637, 643], "909": [67, 90, 92, 296, 643], "141": [67, 90, 163, 296, 641, 643], "sinh": [67, 90, 296, 643], "232": [67, 90, 297, 643], "sqrt": [67, 68, 90, 91, 386, 409, 414, 415, 419, 420, 430, 643, 805, 806, 827], "squar": [67, 68, 73, 90, 91, 96, 298, 387, 388, 392, 398, 440, 452, 464, 517, 533, 628, 629, 631, 636, 643, 646, 648, 652, 678, 680, 681, 683, 684, 685, 687, 690, 696, 697, 698, 703, 738, 827], "tanh": [67, 68, 90, 91, 301, 315, 319, 378, 643, 802, 864], "762": [67, 90, 302, 643], "964": [67, 90, 302, 643], "trapz": [67, 90, 643], "dx": [67, 90, 303, 643], "apart": [67, 90, 303, 643], "trapezoid": [67, 90, 303, 643], "trunc": [67, 90, 643], "025": [67, 304, 388, 469, 643, 651, 731], "trunc_divid": [67, 90, 643], "_arraywithactivationsexperiment": [68, 113], "celu": [68, 91, 378], "formul": [68, 84, 91, 109, 121, 306, 308, 378, 802], "elu": [68, 91, 310, 378, 802], "scaler": [68, 91, 307, 378, 790, 793, 859], "hardshrink": [68, 91, 378], "lambd": [68, 91, 308, 318, 378], "hardsilu": [68, 91, 378], "66666667": [68, 130, 309, 398, 533, 637], "hardtanh": [68, 91, 378], "max_val": [68, 91, 310, 378], "min_val": [68, 91, 310, 378], "region": [68, 91, 310, 318, 378, 834], "19722438": [68, 91, 311, 378], "38629448": [68, 91, 311, 378], "38629436": [68, 91, 311, 378], "logsigmoid": [68, 91, 378, 802], "31326175": [68, 84, 312, 378], "126928": [68, 91, 312], "01814993": [68, 312], "00004578": [68, 312], "57888985": [68, 312], "31326169": [68, 91, 312, 378], "69314718": [68, 73, 84, 91, 96, 312, 365, 378, 383, 648, 696], "01104775": [68, 312], "prelu": [68, 91, 378, 802], "unidirect": [68, 313, 378, 647, 672], "relu6": [68, 91, 378, 802], "rectifi": [68, 84, 91, 123, 125, 126, 314, 317, 322, 378, 637], "scaled_tanh": [68, 91, 319, 378], "7159": [68, 91, 315, 319, 378], "amplitud": [68, 91, 315, 319, 378], "65537548": [68, 91, 315], "49570239": [68, 91, 315], "77637792": [68, 315], "selu": [68, 91, 378, 802], "11133075": [68, 316, 378], "05070102": [68, 91, 316, 378], "10140204": [68, 316, 378], "15210295": [68, 316, 378], "20280409": [68, 316, 378], "25350523": [68, 316, 378], "30420589": [68, 316, 378], "35490704": [68, 316, 378], "silu": [68, 91, 378, 802], "26894143": [68, 317], "73105854": [68, 91, 317], "softshrink": [68, 91, 378], "bound": [68, 91, 318, 330, 378, 380, 389, 478, 503, 504, 790, 844, 848, 856, 859, 864, 891], "tanhshrink": [68, 91, 378], "23840582": [68, 91, 320, 378], "condit": [68, 78, 91, 101, 134, 321, 336, 337, 380, 387, 437, 639, 652, 655, 742, 743, 762, 792, 838, 844, 846, 848, 852, 853, 855, 859, 878], "met": [68, 91, 321, 848], "hreshold": [68, 321], "thresholded_relu": [68, 91, 378], "_arraywithconversionsexperiment": [68, 113], "_arraywithcreationexperiment": [68, 113], "blackman_window": [68, 91, 380], "period": [68, 91, 297, 301, 323, 325, 326, 328, 329, 380, 386, 421, 643, 835], "window": [68, 72, 91, 95, 323, 325, 326, 328, 329, 344, 380, 386, 392, 405, 406, 407, 409, 423, 424, 425, 426, 428, 429, 433, 434, 517, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 806, 829, 835, 841, 849, 890], "symmetr": [68, 73, 91, 96, 108, 109, 323, 325, 326, 328, 329, 380, 387, 389, 440, 495, 648, 678, 683, 684, 685, 706, 842], "38777878e": [68, 91, 323, 380], "40000000e": [68, 323, 380], "00000000e": [68, 73, 91, 92, 323, 354, 355, 380, 386, 408, 414, 418, 419, 648, 695, 831, 849], "30000000e": [68, 91, 323, 380], "eye_lik": [68, 91, 380], "elsewher": [68, 91, 143, 324, 380, 640, 655, 762, 834], "mel_weight_matrix": [68, 91, 380], "num_mel_bin": [68, 91, 330, 380], "dft_length": [68, 91, 330, 380, 386, 409], "sample_r": [68, 91, 330, 380], "lower_edge_hertz": [68, 91, 330, 380], "upper_edge_hertz": [68, 91, 330, 380], "3000": [68, 91, 330, 380], "melweightmatrix": [68, 91, 330, 380], "linearli": [68, 69, 92, 330, 380, 560, 645, 648, 697], "frequenc": [68, 69, 91, 92, 330, 380, 398, 533, 560, 645, 835], "spectra": [68, 330, 380], "dft": [68, 91, 330, 380, 386], "stft": [68, 91, 330, 380, 386], "mel": [68, 91, 330, 380], "hertz": [68, 330, 380], "2595": [68, 330, 380], "700": [68, 92, 330, 380, 564], "band": [68, 69, 91, 92, 330, 380, 560, 645], "spectrum": [68, 91, 330, 380], "n_fft": [68, 91, 330, 380, 386, 409], "8000": [68, 91, 325, 330, 380], "75694758": [68, 330, 380], "trilu": [68, 91, 380], "retain": [68, 158, 339, 340, 380, 628, 640, 646, 854, 858, 872], "unsorted_segment_mean": [68, 91, 380], "segment_id": [68, 91, 341, 342, 343, 380, 812], "num_seg": [68, 91, 341, 342, 343, 380, 812], "th": [68, 91, 109, 341, 342, 343, 352, 380, 383, 387, 388, 398, 438, 445, 463, 543], "unsorted_segment_min": [68, 91, 380], "unsorted_segment_sum": [68, 91, 380], "polyv": [68, 91, 380], "coeff": [68, 91, 333, 380], "polynomi": [68, 91, 333, 380], "coeffici": [68, 91, 325, 333, 380, 387, 457, 648, 697, 810], "indetermin": [68, 91, 333, 380], "simplifi": [68, 91, 333, 380, 820, 821, 848, 856, 864, 865, 868, 875, 878, 881, 883, 884, 885, 888, 891, 892], "substitut": [68, 91, 333, 380], "_arraywithdata_typeexperiment": [68, 113], "_arraywithdeviceexperiment": [68, 113], "_arraywithelementwiseexperiment": [68, 113], "equal_nan": [68, 91, 345, 362, 383], "1e10": [68, 345, 362, 383], "00001e10": [68, 345, 362, 383], "00001e": [68, 345, 383], "amax": [68, 91, 383], "keepdim": [68, 73, 75, 78, 81, 82, 85, 91, 96, 98, 101, 104, 105, 346, 347, 351, 367, 374, 383, 384, 389, 398, 500, 538, 539, 540, 541, 542, 543, 648, 650, 655, 658, 659, 689, 705, 727, 758, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 848, 856, 864], "singleton": [68, 73, 78, 81, 82, 91, 96, 101, 104, 105, 346, 347, 383, 648, 650, 655, 658, 659, 705, 716, 723, 759, 774, 775, 776, 777, 778, 779, 780, 781, 782, 864], "amin": [68, 91, 383], "binar": [68, 91, 383], "conj": [68, 91, 249, 254, 256, 297, 298, 302, 383, 643], "conjug": [68, 73, 91, 96, 349, 383, 386, 387, 393, 409, 435, 441, 453, 455, 457, 521, 648, 688, 692, 700], "copysign": [68, 91, 383], "unsign": [68, 81, 91, 350, 383, 389, 398, 503, 534, 535, 658, 771, 772, 777, 779, 791, 844, 864], "count_nonzero": [68, 91, 383], "diff": [68, 85, 91, 383, 846, 855, 882], "prepend": [68, 91, 352, 383, 648, 650, 688, 716, 834], "differenc": [68, 91, 352, 383], "prior": [68, 91, 352, 383, 393, 521, 648, 700, 848, 860], "expand": [68, 69, 75, 91, 92, 352, 383, 389, 507, 560, 645, 650, 716, 827, 842, 858], "discret": [68, 91, 352, 383, 386, 408, 409, 414, 415, 418, 419, 420, 430, 431, 649, 708, 806], "digamma": [68, 91, 383], "7549271": [68, 353, 383], "92278427": [68, 91, 353, 383], "9988394": [68, 353, 383], "erfc": [68, 91, 383], "complementari": [68, 91, 344, 354, 380, 383, 883, 891], "84270084e": [68, 354, 355], "80259693e": [68, 354, 355], "erfinv": [68, 91, 383], "float_pow": [68, 91, 383], "fmax": [68, 91, 383], "fmod": [68, 91, 643], "divis": [68, 69, 70, 91, 92, 93, 245, 251, 258, 260, 293, 295, 305, 389, 481, 594, 603, 617, 626, 627, 632, 643, 645, 646, 647, 660, 667, 668, 810, 852, 861], "frexp": [68, 91, 383], "edge_ord": [68, 91, 360, 383], "boundari": [68, 77, 91, 100, 111, 336, 337, 360, 380, 383, 386, 422, 654, 755, 885], "33333333": [68, 91, 292, 360, 383, 463, 643], "hypot": [68, 91, 383], "hypotenus": [68, 361, 383], "4031": [68, 361, 383], "8102": [68, 361, 383], "isclos": [68, 91, 383, 838], "ldexp": [68, 91, 383], "lerp": [68, 91, 383], "lgamma": [68, 91, 383], "45373654": [68, 365, 383], "6477685": [68, 365, 383], "modf": [68, 91, 383], "fraction": [68, 91, 366, 383, 398, 543, 647, 670], "nansum": [68, 91, 383], "accumul": [68, 91, 367, 383, 389, 500], "nextaft": [68, 91, 383], "0e": [68, 70, 91, 93, 368, 383, 632, 646], "4013e": [68, 91, 368, 383], "4028e": [68, 91, 368, 383], "signbit": [68, 91, 383], "637": [68, 91, 370, 383], "0909": [68, 91, 370, 383], "sparsify_tensor": [68, 91, 383], "sparsifi": [68, 91, 371, 383], "arang": [68, 73, 81, 91, 96, 148, 371, 383, 386, 387, 405, 406, 407, 414, 419, 423, 424, 425, 428, 437, 454, 487, 583, 625, 640, 645, 648, 651, 658, 689, 705, 730, 731, 773, 827, 844, 855, 892], "xlogi": [68, 91, 383], "0986": [68, 91, 372, 383], "3863": [68, 91, 372, 383], "0000": [68, 91, 325, 326, 329, 355, 372, 380, 383, 387, 389, 452, 489], "zeta": [68, 91, 383], "0369": [68, 91, 373, 383], "_arraywithgeneralexperiment": [68, 113], "init_valu": [68, 91, 95, 374, 384, 386, 429], "reduct": [68, 69, 74, 82, 85, 91, 92, 95, 97, 105, 374, 384, 386, 388, 389, 429, 463, 464, 465, 466, 467, 468, 469, 470, 500, 557, 587, 588, 645, 649, 659, 707, 708, 709, 781, 782, 807, 844, 852, 855, 859, 866], "_arraywithgradientsexperiment": [68, 113], "_arraywithimageexperiment": [68, 113], "_arraywithlayersexperiment": [68, 113], "adaptive_avg_pool1d": [68, 91, 386], "1d": [68, 91, 108, 109, 386, 387, 389, 398, 400, 408, 410, 412, 418, 453, 473, 478, 500, 504, 533, 790, 806], "adapt": [68, 91, 93, 386, 400, 401, 402, 403, 633, 646, 806, 810, 875], "plane": [68, 91, 251, 254, 256, 284, 296, 297, 298, 301, 386, 389, 400, 401, 402, 403, 501, 643], "l_in": [68, 91, 386, 400], "spatial": [68, 72, 91, 95, 386, 392, 400, 401, 402, 403, 422, 429, 433, 512, 513, 514, 517, 647, 660, 661, 662, 663, 665, 667, 669, 809], "Will": [68, 91, 386, 400, 401, 402, 403, 815, 870], "l_out": [68, 91, 386, 400], "nhwc": [68, 72, 91, 95, 386, 392, 401, 406, 411, 424, 428, 517, 647, 660, 663, 664, 667, 668, 669, 806], "3d": [68, 73, 91, 386, 401, 403, 410, 411, 475, 648, 686, 806, 862], "4d": [68, 91, 386, 387, 392, 401, 411, 412, 461, 517, 649, 710], "s_0": [68, 91, 386, 401, 402], "s_1": [68, 91, 386, 401, 402], "adaptive_max_pool2d": [68, 91, 386], "h_in": [68, 91, 386, 402, 403], "w_in": [68, 91, 386, 402, 403], "adaptive_max_pool3d": [68, 91, 386], "avg_pool1d": [68, 91, 386], "nwc": [68, 72, 91, 95, 386, 405, 410, 423, 426, 647, 660, 661, 662, 667, 668, 806], "count_include_pad": [68, 91, 386, 405, 406, 407, 806], "d_in": [68, 72, 91, 95, 386, 403, 405, 406, 407, 409, 414, 415, 419, 423, 424, 425, 426, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669], "algorithm": [68, 72, 84, 91, 95, 121, 386, 387, 405, 406, 407, 422, 423, 424, 425, 426, 456, 458, 462, 648, 661, 663, 664, 665, 666, 669, 696, 802, 806, 821, 844, 856, 862, 870, 885, 887, 889], "ncw": [68, 72, 91, 95, 386, 405, 410, 411, 423, 426, 647, 660, 661, 662, 667, 668, 806], "avg_pool2d": [68, 91, 386], "divisor_overrid": [68, 91, 386, 405, 406, 407, 806], "avg_pool3d": [68, 91, 386], "ndhwc": [68, 72, 91, 95, 386, 407, 412, 425, 647, 660, 665, 666, 667, 668, 806], "volum": [68, 72, 91, 95, 386, 407, 409, 414, 415, 419, 425, 647, 665, 666], "ncdhw": [68, 72, 91, 95, 386, 407, 412, 425, 647, 660, 665, 666, 667, 668, 806], "dct": [68, 91, 386, 806, 867], "truncat": [68, 91, 386, 387, 408, 414, 418, 419, 420, 431, 460, 590, 645, 806, 848, 867], "larger": [68, 75, 81, 91, 98, 104, 176, 386, 408, 415, 418, 420, 431, 641, 650, 658, 713, 721, 778, 780, 806, 859, 862, 892], "ortho": [68, 91, 386, 408, 409, 414, 415, 418, 419, 420, 430, 431, 806], "onesid": [68, 91, 386, 409], "fft": [68, 91, 386, 409, 415, 430, 431, 434, 806, 833, 885], "symmetri": [68, 386, 409], "rfft": [68, 91, 386, 409, 431], "invok": [68, 386, 409, 827, 850, 878, 879], "batch_idx": [68, 386, 409], "signal_dim1": [68, 386, 409], "signal_dim2": [68, 386, 409], "signal_dimn": [68, 386, 409], "signal_dim": [68, 386, 409], "embed": [68, 91, 386, 388, 463, 647, 674, 792, 806, 885], "max_norm": [68, 69, 91, 92, 386, 413, 551, 552, 645, 806], "ifft": [68, 91, 386, 414, 420, 806], "pi": [68, 91, 297, 301, 386, 388, 414, 419, 468, 638, 643], "44509285e": [68, 91, 386, 414], "14423775e": [68, 91, 386, 414], "17j": [68, 91, 386, 414, 419], "11483250e": [68, 91, 386, 414], "16j": [68, 91, 386, 414, 419], "33486982e": [68, 91, 386, 414], "22464680e": [68, 91, 386, 414], "95799250e": [68, 91, 386, 414], "66951701e": [68, 91, 386, 414], "fft2": [68, 386], "20477401j": [68, 386, 415], "0614962j": [68, 386, 415], "idct": [68, 91, 386, 806], "49862671": [68, 91, 386, 408, 418], "37691498": [68, 91, 386, 408, 418], "00390816": [68, 91, 386, 408, 418], "58938599": [68, 91, 386, 408, 418], "92713165": [68, 91, 386, 408, 418], "078475": [68, 91, 386, 408, 418], "19664812": [68, 91, 386, 408, 418], "95411837": [68, 91, 386, 408, 418], "30636606e": [68, 91, 386, 419], "43029718e": [68, 91, 386, 419], "18j": [68, 91, 386, 414, 419], "53080850e": [68, 91, 386, 419], "58689626e": [68, 91, 386, 419], "24474906e": [68, 91, 386, 419], "91858728e": [68, 91, 386, 419], "01435406e": [68, 91, 386, 419], "ifftn": [68, 91, 386], "24730653": [68, 91, 386, 420], "90832391j": [68, 91, 386, 420], "49495562": [68, 91, 386, 420], "9039565j": [68, 91, 386, 420], "98193269": [68, 91, 386, 420], "49560517j": [68, 91, 386, 420], "93280757": [68, 91, 386, 420], "48075343j": [68, 91, 386, 420], "28526384": [68, 91, 386, 420], "3351205j": [68, 91, 386, 420], "2343787": [68, 91, 386, 420], "83528011j": [68, 91, 386, 420], "18791352": [68, 91, 386, 420], "30690572j": [68, 91, 386, 420], "82115787": [68, 91, 386, 420], "96195183j": [68, 91, 386, 420], "44719226": [68, 91, 386, 420], "72654048j": [68, 91, 386, 420], "51476765": [68, 386, 420], "66160417j": [68, 386, 420], "04319742": [68, 386, 420], "05411636j": [68, 386, 420], "015561": [68, 386, 420], "04216015j": [68, 386, 420], "06310689": [68, 386, 420], "05347854j": [68, 386, 420], "13392983": [68, 386, 420], "16052352j": [68, 386, 420], "08371392": [68, 386, 420], "17252843j": [68, 386, 420], "0031429": [68, 386, 420], "05421245j": [68, 386, 420], "10446617": [68, 386, 420], "17747098j": [68, 386, 420], "05344324": [68, 386, 420], "07972424j": [68, 386, 420], "8344667": [68, 91, 386, 420], "98222595j": [68, 91, 386, 420], "48472244": [68, 91, 386, 420], "30233797j": [68, 91, 386, 420], "recompute_scale_factor": [68, 91, 386, 422, 862], "antialia": [68, 91, 386, 422, 862], "height": [68, 69, 72, 91, 92, 95, 386, 422, 556, 645, 647, 649, 663, 664, 665, 666, 669, 710, 836, 867], "width": [68, 69, 72, 91, 92, 95, 386, 387, 389, 392, 398, 422, 441, 495, 517, 536, 556, 645, 647, 649, 661, 662, 663, 664, 665, 666, 669, 674, 710], "trilinear": [68, 91, 386, 422, 862], "nearest_exact": [68, 91, 386, 422, 862], "tf_area": [68, 91, 386, 422, 862], "mitchellcub": [68, 91, 386, 422, 862], "lanczos3": [68, 91, 386, 422, 862], "lanczos5": [68, 91, 386, 422, 862], "gaussian": [68, 91, 121, 386, 422, 637, 862], "overwrit": [68, 85, 91, 224, 386, 422, 642, 835, 855, 856, 864], "thu": [68, 91, 245, 258, 293, 301, 302, 386, 387, 422, 440, 643, 648, 683, 684, 833, 843, 848, 853, 856, 860], "antialias": [68, 91, 422], "max_pool1d": [68, 91, 386], "dilaton": [68, 91, 423, 424, 425], "max_pool3d": [68, 91, 386], "max_unpool1d": [68, 91, 386], "unpool": [68, 91, 386, 426], "reduce_window": [68, 95, 386], "window_dimens": [68, 95, 386, 429], "window_strid": [68, 95, 386, 429], "base_dil": [68, 95, 386, 429], "window_dil": [68, 95, 386, 429], "trim": [68, 85, 91, 386, 389, 430, 506], "orthonorm": [68, 73, 91, 96, 386, 430, 648, 695, 698], "8660254j": [68, 91, 386, 430], "rfftn": [68, 91, 386], "sliding_window": [68, 91, 386], "window_s": [68, 91, 386, 433], "frame_length": [68, 91, 386, 434], "frame_step": [68, 91, 386, 434], "fft_length": [68, 91, 386, 434], "window_fn": [68, 91, 386, 434], "pad_end": [68, 91, 386, 434], "smallest": [68, 85, 91, 176, 179, 247, 386, 389, 434, 505, 641, 643, 648, 689, 790, 792, 793], "enclos": [68, 91, 386, 434, 886], "window_length": [68, 91, 323, 325, 328, 329, 344, 380, 386, 434], "li": [68, 91, 386, 387, 398, 434, 441, 543, 874], "past": [68, 91, 386, 434, 835, 838, 857, 859, 871, 885], "fft_unique_bin": [68, 91, 386, 434], "complex64": [68, 88, 91, 169, 183, 192, 198, 264, 291, 386, 430, 434, 641, 643, 648, 696, 698, 699, 791, 844, 849], "complex128": [68, 91, 92, 169, 170, 183, 192, 198, 386, 434, 582, 641, 645, 648, 684, 685, 689, 705, 790, 791, 831, 844, 849], "compon": [68, 91, 153, 154, 232, 233, 234, 237, 240, 249, 251, 252, 254, 256, 284, 286, 287, 294, 297, 298, 301, 302, 334, 338, 349, 380, 383, 386, 387, 392, 434, 445, 456, 517, 640, 643, 655, 761, 858, 864, 875, 881, 886, 888], "linear_algebra": [68, 73, 91, 96, 387, 648, 860], "_arraywithlinearalgebraexperiment": [68, 113], "adjoint": [68, 73, 91, 96, 387, 457, 648, 687, 697, 698, 790], "batched_out": [68, 91, 387], "j1": [68, 91, 387, 436], "jn": [68, 91, 387, 436], "k1": [68, 91, 387, 436], "km": [68, 91, 387, 436], "outer": [68, 73, 91, 96, 108, 387, 436, 648, 651, 729, 730, 731, 821, 833], "30000001": [68, 91, 387, 436, 556, 645, 656, 764], "40000001": [68, 72, 84, 91, 113, 114, 123, 126, 307, 378, 387, 436, 637, 647, 656, 677, 764], "60000002": [68, 91, 104, 114, 387, 392, 436, 516, 518, 552, 645, 775], "80000001": [68, 91, 387, 392, 436, 516, 518], "60000001": [68, 91, 387, 436], "90000004": [68, 91, 387, 436, 658, 775], "20000002": [68, 91, 387, 436, 552, 645], "20000005": [68, 70, 91, 307, 315, 318, 319, 378, 387, 436, 626], "00000012": [68, 91, 387, 436], "49999994": [68, 91, 387, 436], "00000006": [68, 91, 387, 436], "60000014": [68, 91, 387, 436], "19999993": [68, 91, 387, 436], "80000007": [68, 91, 387, 436, 552, 645], "20000017": [68, 91, 387, 436], "89999992": [68, 91, 387, 436], "60000008": [68, 91, 387, 436], "80000019": [68, 91, 364, 383, 387, 436], "4000001": [68, 91, 95, 387, 436, 647, 670, 677], "cond": [68, 91, 134, 387, 639, 870], "933034373659268": [68, 437], "diagflat": [68, 91, 387, 447, 452], "offset": [68, 73, 76, 87, 91, 96, 99, 145, 387, 392, 438, 512, 513, 514, 640, 648, 653, 682, 702, 751, 797], "padding_valu": [68, 91, 387, 438], "right_left": [68, 91, 387, 438], "num_row": [68, 91, 387, 438], "num_col": [68, 91, 387, 438], "dot": [68, 72, 91, 95, 108, 387, 388, 454, 463, 647, 648, 674, 677, 704, 821, 827, 834, 843], "eig": [68, 73, 91, 387, 648, 684, 685], "37228132": [68, 91, 387, 440, 442, 683], "82456484": [68, 440, 683], "41597356": [68, 440, 683], "56576746": [68, 440, 683], "90937671": [68, 440, 683], "eigh_tridiagon": [68, 91, 387], "eigvals_onli": [68, 91, 387, 441], "select_rang": [68, 91, 387, 441], "tol": [68, 91, 112, 387, 441, 456, 462], "eigenvalu": [68, 73, 91, 96, 108, 109, 387, 440, 441, 442, 648, 683, 684, 685, 691], "eigenvector": [68, 91, 387, 440, 441, 648, 683, 684], "interv": [68, 77, 82, 91, 100, 105, 137, 148, 149, 156, 387, 398, 441, 536, 640, 648, 650, 654, 659, 679, 704, 713, 716, 724, 753, 755, 781, 782], "converg": [68, 91, 387, 441, 876], "_2": [68, 91, 387, 441], "eig_val": [68, 91, 387, 441], "decreas": [68, 91, 387, 441, 792], "eig_vector": [68, 91, 387, 441], "38196": [68, 441], "61803": [68, 441], "eigval": [68, 91, 387], "general_inner_product": [68, 96, 387], "n_mode": [68, 96, 387, 443], "tradit": [68, 96, 387, 443], "inner": [68, 73, 87, 96, 117, 152, 387, 440, 443, 640, 648, 651, 683, 684, 688, 729, 730, 731, 821, 833, 855], "higher_order_mo": [68, 91, 387], "n_featur": [68, 91, 387, 444], "d1": [68, 91, 387, 444], "dn": [68, 91, 387, 444], "initialize_tuck": [68, 91, 387], "svd": [68, 73, 91, 96, 111, 387, 445, 451, 456, 458, 459, 460, 462, 648, 699], "truncated_svd": [68, 91, 387, 445, 456, 459, 462], "non_neg": [68, 91, 338, 380, 387, 445], "mask": [68, 72, 91, 95, 108, 386, 387, 389, 432, 445, 446, 456, 462, 502, 566, 645, 647, 670, 674, 677, 862], "svd_mask_repeat": [68, 91, 387, 445, 456, 462], "tuckertensor": [68, 91, 112, 338, 380, 387, 445, 456, 462], "scheme": [68, 91, 387, 445, 456, 838, 868, 885], "tucker": [68, 91, 338, 380, 387, 445, 456], "decomposit": [68, 73, 91, 96, 108, 109, 111, 334, 335, 336, 337, 338, 380, 387, 445, 449, 456, 459, 461, 462, 648, 678, 684, 695, 698, 833, 892], "miss": [68, 91, 387, 389, 445, 456, 462, 502, 810, 833, 834, 839, 842, 843, 846, 856, 859, 862], "everywher": [68, 91, 387, 445, 456, 462], "kron": [68, 91, 387, 452, 892], "make_svd_non_neg": [68, 91, 387, 460], "nntype": [68, 91, 387, 451], "nndsvd": [68, 91, 387, 451], "singular": [68, 73, 91, 96, 387, 445, 451, 458, 460, 648, 689, 691, 694, 698, 699, 790, 792, 844], "nndsvda": [68, 91, 387, 451], "boutsidi": [68, 91, 387, 451], "gallopoulo": [68, 91, 387, 451], "recognit": [68, 91, 387, 451, 830], "1350": [68, 91, 387, 451], "1362": [68, 91, 387, 451], "2008": [68, 91, 387, 451, 885], "matrix_exp": [68, 91, 387], "7183": [68, 91, 387, 452], "3891": [68, 91, 387, 452], "mode_dot": [68, 91, 107, 108, 112, 387], "matrix_or_vector": [68, 91, 108, 112, 387, 453], "i_1": [68, 91, 108, 109, 387, 453], "i_k": [68, 91, 108, 387, 453], "i_n": [68, 91, 108, 387, 453], "i_": [68, 91, 108, 387, 398, 453, 536], "multi_dot": [68, 91, 387], "148": [68, 90, 91, 254, 387, 454], "multi_mode_dot": [68, 91, 387], "mat_or_vec_list": [68, 91, 387, 455], "times_0": [68, 387, 455], "vec": [68, 387, 455], "times_1": [68, 387, 455], "cdot": [68, 284, 387, 455, 643], "times_n": [68, 387, 455], "partial_tuck": [68, 91, 387], "n_iter_max": [68, 91, 387, 456, 462], "verbos": [68, 91, 387, 456, 459, 462, 825, 859, 864], "return_error": [68, 91, 387, 456, 462], "variat": [68, 91, 387, 456, 462, 846, 856, 859], "reconstruct": [68, 73, 79, 91, 102, 111, 387, 389, 456, 462, 509, 648, 656, 698, 763, 765, 857], "return_erro": [68, 387, 456, 462], "svd_flip": [68, 91, 387], "u_based_decis": [68, 91, 387, 458], "basi": [68, 91, 387, 458, 835, 838, 867], "flip": [68, 75, 91, 98, 108, 242, 387, 389, 458, 486, 487, 643, 650, 855, 866, 867, 869], "decis": [68, 91, 387, 458, 827, 838, 844, 862, 864, 866, 885], "u_adjust": [68, 91, 387, 458], "v_adjust": [68, 91, 387, 458], "tensor_train": [68, 91, 387], "tt": [68, 91, 337, 380, 387, 459, 461], "kth": [68, 387, 459], "tttensor": [68, 111, 337, 380, 387, 459], "compute_uv": [68, 73, 91, 96, 387, 460, 648, 698], "n_eigenvec": [68, 91, 387, 460], "returnedv": [68, 460], "vh": [68, 73, 91, 96, 387, 460, 648, 698], "eigen": [68, 91, 387, 460], "namedtupl": [68, 73, 79, 91, 96, 102, 387, 389, 440, 460, 509, 648, 656, 683, 684, 695, 696, 698, 763, 764, 765], "tt_matrix_to_tensor": [68, 91, 387], "rank_k": [68, 91, 387, 461], "left_dim_k": [68, 91, 387, 461], "right_dim_k": [68, 91, 387, 461], "rank_": [68, 91, 387, 461], "49671414": [68, 91, 387, 461, 654, 754], "1382643": [68, 91, 387, 461, 654, 754], "64768857": [68, 91, 387, 461, 654, 754], "5230298": [68, 91, 387, 461, 654, 754], "23415337": [68, 91, 387, 461, 654, 754], "23413695": [68, 91, 387, 461, 654, 754], "57921278": [68, 91, 387, 461], "76743472": [68, 91, 387, 461], "1163073": [68, 91, 387, 461], "11629914": [68, 91, 387, 461], "03237505": [68, 91, 387, 461], "03237278": [68, 91, 387, 461], "78441733": [68, 91, 387, 461], "38119566": [68, 91, 387, 461], "21834874": [68, 91, 387, 461], "10610882": [68, 91, 387, 461], "15165846": [68, 91, 387, 461], "15164782": [68, 91, 387, 461], "35662258": [68, 91, 387, 461], "35659757": [68, 91, 387, 461], "02283812": [68, 91, 387, 461], "49705869": [68, 91, 387, 461], "40518808": [68, 91, 387, 461], "16882598": [68, 91, 387, 461], "fixed_factor": [68, 91, 387, 462], "tl": [68, 91, 387, 462], "kolda": [68, 91, 387, 462], "bader": [68, 91, 387, 462], "siam": [68, 91, 387, 459, 462], "vol": [68, 91, 387, 462], "pp": [68, 91, 387, 462], "455": [68, 91, 387, 462], "2009": [68, 91, 387, 462], "_arraywithlossesexperiment": [68, 113], "hinge_embedding_loss": [68, 91, 388], "margin": [68, 91, 388, 463, 470, 856], "measur": [68, 388, 463, 647, 649, 674, 710, 806], "semi": [68, 388, 463], "l_n": [68, 388, 463], "x_n": [68, 388, 463], "y_n": [68, 388, 463], "ell": [68, 388, 463], "operatornam": [68, 295, 297, 388, 463, 643, 648, 684], "l_1": [68, 388, 463], "hyperparamet": [68, 91, 388, 463], "aggreg": [68, 91, 388, 463, 656, 763, 843], "unreduc": [68, 91, 388, 463], "hing": [68, 91, 388, 463, 470], "target_tensor": [68, 388, 463, 468], "huber_loss": [68, 91, 388], "transit": [68, 91, 388, 464, 885], "huber": [68, 91, 388, 464], "kl_div": [68, 91, 388], "log_target": [68, 91, 388, 465], "contai": [68, 465], "batchmean": [68, 388, 465], "kullback": [68, 91, 388, 465], "leibler": [68, 91, 388, 465], "0916": [68, 465], "l1_loss": [68, 91, 388, 467], "l1": [68, 73, 91, 96, 388, 392, 464, 466, 467, 469, 515, 648, 705, 842, 867], "targetict": [68, 91, 388, 466, 467, 469, 470], "20000000000000004": [68, 466], "log_poisson_loss": [68, 91, 388], "compute_full_loss": [68, 91, 388, 467, 807], "favor": [68, 91, 388, 467], "likelihood": [68, 91, 388, 467, 468], "28402555": [68, 388, 467], "03402555": [68, 388, 467], "1573164": [68, 388, 467], "poisson_nll_loss": [68, 91, 388], "log_input": [68, 91, 388, 468], "poisson": [68, 91, 388, 393, 467, 468], "assumpt": [68, 388, 467, 468], "minu": [68, 388, 467, 468], "omiss": [68, 388, 468], "stirl": [68, 91, 388, 467, 468], "1977562": [68, 468], "smooth_l1_loss": [68, 91, 388], "smooth": [68, 74, 91, 97, 388, 464, 469, 649, 707, 708, 709, 854], "8125": [68, 469], "soft_margin_loss": [68, 91, 388], "soft": [68, 91, 318, 388, 389, 470, 502, 845], "35667497": [68, 470], "22314353": [68, 470], "60943791": [68, 470], "_arraywithmanipulationexperiment": [68, 113], "as_strid": [68, 91, 389], "nativeshap": [68, 72, 75, 77, 91, 98, 100, 138, 139, 141, 146, 153, 159, 389, 393, 471, 483, 488, 496, 499, 519, 520, 521, 522, 523, 588, 601, 607, 609, 640, 645, 647, 650, 654, 660, 662, 664, 666, 668, 720, 753, 754, 755, 851, 853], "byte": [68, 69, 87, 91, 92, 113, 145, 389, 471, 582, 640, 645, 890, 891], "associative_scan": [68, 91, 389], "revers": [68, 69, 73, 81, 91, 96, 104, 113, 114, 377, 385, 386, 387, 389, 398, 432, 448, 472, 486, 487, 534, 535, 555, 645, 648, 650, 658, 703, 717, 771, 772, 833, 842, 843, 844, 846, 847, 855, 856, 862, 869, 870], "scan": [68, 91, 389, 472, 870], "atleast_1d": [68, 91, 389], "ari": [68, 91, 389, 473, 474, 475, 481, 490, 510], "a1": [68, 92, 389, 473, 474, 475, 479, 548], "a2": [68, 92, 389, 473, 474, 475, 479, 548], "atleast_2d": [68, 91, 389], "atleast_3d": [68, 91, 389], "column_stack": [68, 91, 389], "concat_from_sequ": [68, 91, 389], "input_sequ": [68, 91, 389, 480], "new_axi": [68, 91, 389, 480, 869], "dsplit": [68, 91, 389], "indices_or_sect": [68, 91, 389, 481, 490, 510], "3rd": [68, 91, 389, 481], "dstack": [68, 91, 389], "fill_diagon": [68, 91, 389], "fill_diag": [68, 484], "fortran": [68, 75, 91, 98, 389, 485, 650, 720, 885, 889], "layout": [68, 75, 91, 98, 389, 485, 650, 720, 840, 855, 856, 862], "fliplr": [68, 91, 389, 855], "diag": [68, 73, 91, 96, 109, 389, 486, 487, 648, 684, 864], "flipud": [68, 91, 389, 855], "fold": [68, 91, 389, 496, 497, 843], "unfold": [68, 91, 108, 109, 111, 387, 389, 445, 488, 496, 498], "folded_tensor": [68, 389, 488], "heavisid": [68, 91, 389], "5000": [68, 389, 489, 648, 687, 821], "hsplit": [68, 91, 389], "horizont": [68, 91, 389, 479, 490, 556, 645], "hstack": [68, 91, 389, 479], "i0": [68, 91, 389, 398, 536], "bessel": [68, 81, 91, 104, 328, 380, 389, 492, 658, 778, 780], "kind": [68, 81, 91, 176, 179, 180, 398, 492, 534, 535, 540, 641, 658, 771, 772, 777, 779, 790, 791, 832, 856, 859, 862, 864, 870], "26606588": [68, 91, 389, 492], "2795853": [68, 91, 389, 492], "88079259": [68, 91, 389, 492], "row_mod": [68, 91, 389, 493], "column_mod": [68, 91, 389, 493], "ascend": [68, 80, 91, 103, 389, 396, 493, 526, 657, 767, 769, 836], "prod": [68, 69, 81, 92, 104, 387, 389, 446, 448, 493, 542, 557, 645, 658, 790, 821, 844, 846, 864, 882], "moveaxi": [68, 91, 389], "destin": [68, 91, 389, 494], "unstack": [68, 75, 85, 98, 494, 650, 842, 864, 867, 892], "reorder": [68, 75, 91, 98, 389, 494, 556, 645, 650, 717, 858], "stat_length": [68, 91, 389, 495], "constant_valu": [68, 91, 389, 495], "end_valu": [68, 91, 389, 495], "reflect_typ": [68, 91, 389, 495], "partial_fold": [68, 91, 389], "skip_begin": [68, 91, 389, 496, 497, 498, 499], "untouch": [68, 91, 389, 496, 497, 498, 499], "partial_tensor_to_vec": [68, 91, 389], "skip_end": [68, 91, 389, 497, 498], "vectoris": [68, 91, 108, 389, 497, 499], "partial_unfold": [68, 91, 389], "ravel_tensor": [68, 91, 389, 498], "n_1": [68, 91, 389, 498], "n_2": [68, 91, 389, 498], "n_i": [68, 91, 387, 389, 446, 498], "partial_vec_to_tensor": [68, 91, 389], "put_along_axi": [68, 91, 389], "rot90": [68, 91, 389, 855], "rotat": [68, 91, 389, 501], "soft_threshold": [68, 91, 389], "behav": [68, 91, 346, 347, 383, 387, 389, 440, 503, 648, 683, 838, 848, 853, 855, 856, 857, 866, 886], "slice": [68, 81, 85, 91, 92, 104, 109, 158, 339, 380, 389, 478, 500, 503, 504, 563, 564, 566, 592, 640, 645, 652, 658, 741, 776, 859, 885], "inexact": [68, 91, 357, 383, 389, 503], "largest": [68, 85, 91, 176, 179, 387, 389, 458, 503, 505, 641, 648, 689, 698], "take_along_axi": [68, 91, 389], "arr": [68, 69, 88, 91, 184, 389, 478, 500, 504, 588, 641, 844, 845], "top_k": [68, 91, 389], "sort": [68, 79, 85, 91, 102, 114, 210, 303, 387, 389, 398, 440, 505, 526, 540, 642, 643, 648, 656, 683, 684, 698, 699, 763, 767, 768, 769, 792, 832, 843, 858, 860], "trim_zero": [68, 91, 389], "fb": [68, 91, 389, 506], "front": [68, 91, 389, 506, 856, 863, 864, 867, 874, 883, 885], "unflatten": [68, 91, 389], "unfolded_tensor": [68, 389, 508], "unique_consecut": [68, 91, 389], "vsplit": [68, 91, 389], "vertic": [68, 91, 389, 510, 511, 556, 645, 835], "_arraywithnormsexperiment": [68, 113], "varianc": [68, 81, 91, 104, 392, 512, 514, 658, 780, 805, 809], "nsc": [68, 91, 392, 512, 513, 514, 809], "braodcast": [68, 91, 392, 512], "running_mean": [68, 91, 392, 512, 514, 809], "running_var": [68, 91, 392, 512, 514, 809], "nc": [68, 91, 392, 512, 513, 514, 809], "group_norm": [68, 91, 392], "num_group": [68, 91, 392, 513], "instance_norm": [68, 91, 392], "l1_normal": [68, 91, 392], "33333334": [68, 91, 309, 378, 392, 515, 518, 552, 628, 645, 646, 647, 648, 669, 705], "33333337": [68, 148, 392, 515, 628, 640, 646], "28571439": [68, 392, 515], "l2_normal": [68, 91, 392, 518], "l2": [68, 73, 96, 107, 108, 392, 516, 518, 648, 705, 806, 842], "44721359": [68, 91, 392, 516, 518], "89442718": [68, 91, 392, 516, 518, 552, 645], "lp_normal": [68, 91, 392], "lp": [68, 392, 518], "_arraywithrandomexperiment": [68, 113], "bernoulli": [68, 91, 386, 393, 410, 411, 412], "event": [68, 91, 393, 519, 859], "parameter": [68, 77, 91, 100, 393, 519, 520, 522, 523, 654, 752, 754, 755], "odd": [68, 91, 289, 389, 393, 495, 519, 643, 821, 832, 838], "drawn": [68, 77, 91, 100, 393, 519, 520, 521, 522, 523, 654, 752, 753, 754, 755, 790, 791, 792, 805, 859], "dirichlet": [68, 91, 393], "10598304": [68, 393, 521], "21537054": [68, 393, 521], "67864642": [68, 393, 521], "48006698": [68, 393, 521], "07472073": [68, 393, 521], "44521229": [68, 393, 521], "55479872": [68, 393, 521], "05426367": [68, 393, 521], "39093761": [68, 393, 521], "19531053": [68, 393, 521], "51675832": [68, 393, 521], "28793114": [68, 393, 521], "12315625": [68, 393, 521], "29823365": [68, 393, 521], "5786101": [68, 393, 521], "15564976": [68, 393, 521], "50542368": [68, 393, 521], "33892656": [68, 393, 521], "1325352": [68, 393, 521], "44439589": [68, 393, 521], "42306891": [68, 393, 521], "gamma": [68, 76, 91, 99, 353, 365, 383, 393, 398, 537, 653, 751], "lam": [68, 91, 393, 523], "_arraywithsearchingexperiment": [68, 113], "unravel_index": [68, 91, 394], "unravel": [68, 91, 394, 524], "_arraywithsetexperiment": [68, 113], "_arraywithsortingexperiment": [68, 113], "lexsort": [68, 91, 396], "indirectli": [68, 91, 396, 526], "statist": [68, 91, 106, 389, 495, 809, 825, 833, 844, 859, 860, 885], "_arraywithstatisticalexperiment": [68, 113], "bincount": [68, 91, 398], "minlength": [68, 91, 398, 531], "corrcoef": [68, 91, 398], "rowvar": [68, 91, 398, 532, 533], "relationship": [68, 91, 532, 805, 858], "cov": [68, 91, 398], "ddof": [68, 91, 398, 533], "fweight": [68, 91, 398, 533], "aweight": [68, 91, 398, 533], "overridden": [68, 91, 398, 533, 810, 839], "assign": [68, 91, 108, 398, 533, 833, 835, 840, 844, 855, 858, 866], "covari": [68, 91, 398, 533], "cummax": [68, 91, 398], "exclus": [68, 69, 81, 85, 91, 92, 104, 137, 387, 398, 456, 534, 535, 575, 576, 579, 640, 645, 654, 658, 753, 771, 772, 830, 842, 844, 852, 869, 889, 891], "cumul": [68, 81, 91, 104, 398, 534, 535, 658, 771, 772], "uint64": [68, 81, 173, 178, 180, 181, 191, 193, 196, 398, 534, 535, 641, 658, 771, 772, 777, 779, 790, 791, 844, 859, 864], "uint16": [68, 81, 168, 173, 178, 179, 188, 398, 534, 535, 641, 658, 771, 772, 777, 779, 790, 791, 844, 856, 859, 864], "uint32": [68, 81, 173, 178, 179, 180, 202, 398, 534, 535, 641, 658, 771, 772, 777, 779, 790, 791, 844, 859, 864], "cummin": [68, 91, 398], "histogram": [68, 91, 398], "extend_lower_interv": [68, 91, 398, 536], "extend_upper_interv": [68, 91, 398, 536], "densiti": [68, 91, 398, 536], "monoton": [68, 91, 398, 536], "rightmost": [68, 91, 398, 536], "c1": [68, 91, 398, 536, 842], "ff": [68, 91, 398, 536], "c_": [68, 91, 109, 398, 536], "igamma": [68, 91, 398], "incomplet": [68, 91, 398, 537, 835], "3614": [68, 91, 398, 537], "2085": [68, 91, 398, 537], "median": [68, 91, 389, 398, 495, 540], "nanmean": [68, 91, 398], "6666666666666665": [68, 91, 398, 539], "nanmedian": [68, 91, 398], "overwrite_input": [68, 91, 398, 540], "treat": [68, 85, 91, 114, 289, 367, 383, 389, 392, 398, 504, 517, 540, 542, 643, 787, 854, 859, 865, 869], "undefin": [68, 91, 389, 398, 399, 495, 540, 544, 844, 848, 854], "nanmin": [68, 91, 398], "nanprod": [68, 91, 398], "Not": [68, 91, 367, 383, 387, 398, 442, 542, 638, 840, 848, 857, 867, 868, 870], "quantil": [68, 91, 398, 882], "inclus": [68, 91, 137, 398, 543, 640, 654, 753, 828, 840, 855, 862], "midpoint": [68, 91, 398, 543], "surround": [68, 91, 398, 543, 862], "whichev": [68, 91, 398, 543], "_arraywithutilityexperiment": [68, 113], "optional_get_el": [68, 91, 399], "empti": [68, 69, 81, 85, 92, 104, 137, 389, 399, 495, 544, 551, 588, 640, 645, 648, 652, 658, 659, 702, 705, 746, 776, 777, 779, 781, 782, 833, 834, 839, 841, 844, 845, 855], "_arraywithgener": [69, 113], "all_equ": [69, 92, 645], "equality_matrix": [69, 92, 545, 645], "array_equ": [69, 92, 645], "assert_supports_inplac": [69, 92, 645], "ivybackendexcept": [69, 92, 549, 573, 645, 822, 839, 845, 848, 849], "clip_matrix_norm": [69, 92, 645], "894": [69, 92, 551, 552, 645, 653, 751], "clip_vector_norm": [69, 92, 645], "default_v": [69, 555, 645], "catch_except": [69, 555, 645], "rev": [69, 555, 645], "with_cal": [69, 555, 645], "catch": [69, 555, 645, 853, 859], "einops_rearrang": [69, 92, 645], "axes_length": [69, 92, 556, 557, 558, 645], "arrang": [69, 556, 645], "rearrang": [69, 92, 556, 558, 645, 858], "einops_reduc": [69, 92, 645, 844], "einops_repeat": [69, 92, 645], "fourier_encod": [69, 92, 645], "max_freq": [69, 92, 560, 645], "oppos": [69, 92, 560, 645, 844], "geometr": [69, 92, 560, 645, 648, 703], "0000000e": [69, 92, 560, 645], "2246468e": [69, 92, 560, 645], "4492936e": [69, 560, 645], "6739404e": [69, 92, 560, 645], "batch_dim": [69, 92, 563, 564, 645, 812], "gather_nd": [69, 92, 645], "get_num_dim": [69, 92, 645], "as_arrai": [69, 92, 567, 601, 645, 812], "has_nan": [69, 92, 645], "include_inf": [69, 92, 569, 624, 645], "inplace_decr": [69, 92, 645], "decrement": [69, 92, 571, 645], "inplace_incr": [69, 92, 645], "increment": [69, 92, 572, 645, 835, 885], "inplace_upd": [69, 92, 591, 645, 803, 855], "ensure_in_backend": [69, 92, 573, 645, 855], "keep_input_dtyp": [69, 92, 573, 645, 855], "is_arrai": [69, 92, 645, 855, 856], "is_ivy_arrai": [69, 92, 645, 855, 866], "is_ivy_contain": [69, 645], "is_native_arrai": [69, 92, 187, 576, 641, 645, 866], "isin": [69, 92, 645, 882], "test_el": [69, 92, 580, 645], "assume_uniqu": [69, 92, 580, 645], "invert": [69, 92, 242, 580, 643, 645, 648, 690], "scatter_flat": [69, 92, 645], "occupi": [69, 176, 179, 587, 588, 641, 645], "scatter_nd": [69, 92, 645, 862, 866], "stable_divid": [69, 92, 645, 852], "denomin": [69, 76, 92, 99, 594, 603, 617, 645, 653, 751, 809, 852, 861, 870, 882], "min_denomin": [69, 92, 594, 603, 617, 645, 861], "_min_denomin": [69, 603, 645], "stable_pow": [69, 92, 645], "min_bas": [69, 92, 593, 604, 616, 645, 809, 861], "stabl": [69, 80, 92, 103, 158, 339, 346, 347, 380, 383, 396, 526, 593, 594, 603, 604, 616, 617, 640, 645, 657, 767, 770, 792, 834, 840, 844, 856, 861, 864, 870], "00004": [69, 92, 604, 645], "00008": [69, 92, 604, 645], "00004000e": [69, 604], "56002560e": [69, 604], "60001200e": [69, 604], "09602048e": [69, 604], "supports_inplace_upd": [69, 92, 645], "to_fil": 69, "fid": 69, "sep": 69, "format_": 69, "recov": [69, 848, 856], "to_scalar": [69, 92, 645], "value_is_nan": [69, 92, 645], "_arraywithgradi": [70, 113], "adam_step": [70, 93, 646], "mw": [70, 93, 626, 627, 646, 868], "vw": [70, 93, 626, 627, 646, 868], "beta1": [70, 93, 547, 626, 627, 632, 645, 646, 810, 868], "beta2": [70, 93, 547, 626, 627, 632, 645, 646, 810, 868], "epsilon": [70, 73, 74, 93, 96, 97, 547, 626, 627, 632, 645, 646, 648, 649, 691, 694, 707, 708, 709, 802, 807, 809, 810, 842, 852, 855, 868], "dc": [70, 93, 626, 627, 630, 632, 633, 634, 646], "dw": [70, 93, 626, 627, 630, 632, 633, 634, 646], "forget": [70, 93, 626, 627, 632, 646, 810, 827, 844], "dcdw": [70, 93, 626, 627, 630, 632, 633, 646], "adam_step_delta": [70, 93, 626, 646], "2020105": [70, 626, 646], "22187898": [70, 626, 646], "24144873": [70, 626, 646], "10000002": [70, 104, 307, 378, 626, 775], "00300002": [70, 626], "00800002": [70, 626], "adam_upd": [70, 93, 646, 868], "mw_tm1": [70, 93, 627, 632, 646], "vw_tm1": [70, 93, 627, 632, 646], "ws_new": [70, 93, 627, 632, 633, 634, 646], "updated_weight": [70, 93, 627, 646], "92558753": [70, 627], "92558873": [70, 627, 646], "92558718": [70, 627, 646], "00000063e": [70, 93, 627, 646], "00000016e": [70, 93, 627, 646], "00000086e": [70, 93, 627, 646], "gradient_descent_upd": [70, 93, 646, 651, 729, 730, 731], "descent": [70, 93, 630, 646, 810, 868, 885], "new_weight": [70, 93, 630, 632, 633, 646, 867], "lamb_upd": [70, 93, 646], "max_trust_ratio": [70, 93, 632, 646, 810], "decay_lambda": [70, 93, 632, 633, 646, 810], "trust": [70, 93, 632, 646, 810], "ratio": [70, 93, 632, 646, 810], "decai": [70, 93, 632, 633, 646, 810], "lamb": [70, 93, 632, 646, 810, 868], "784": [70, 632, 646], "lars_upd": [70, 93, 646], "lar": [70, 93, 633, 646, 810, 868], "34077978": [70, 633, 646], "78025991": [70, 633, 646], "56051969": [70, 633, 646], "78026009": [70, 633, 646], "56051981": [70, 633, 646], "12103939": [70, 633, 646], "optimizer_upd": [70, 93, 646], "effective_grad": [70, 93, 634, 646], "3e": [70, 93, 634, 646], "preserve_typ": [70, 93, 635, 646], "_arraywithimag": [71, 113], "_arraywithlay": [72, 113], "conv1d": [72, 95, 647, 806, 818], "filter_format": [72, 95, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668], "channel_last": [72, 95, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668, 790], "x_dilat": [72, 95, 647, 660, 661, 663, 664, 665, 667], "d_out": [72, 95, 386, 403, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668], "channel_first": [72, 95, 647, 660, 661, 662, 663, 664, 665, 666, 667, 668], "wio": [72, 647, 660, 661, 662, 667], "conv1d_transpos": [72, 95, 647], "output_shap": [72, 95, 647, 660, 662, 664, 666, 668, 806], "iow": [72, 95, 647, 662], "woi": [72, 95, 647, 662], "fh": [72, 95, 647, 652, 660, 663, 664, 665, 666, 667, 668, 669, 744], "hwio": [72, 647, 660, 661, 663, 667], "conv2d_transpos": [72, 95, 647], "iohw": [72, 95, 647, 664], "hwoi": [72, 95, 647, 664], "conv3d": [72, 95, 647, 666, 806, 818], "conv3d_transpos": [72, 95, 647, 668], "iodhw": [72, 95, 647, 666, 668], "dhwoi": [72, 95, 647, 666, 668], "depthwise_conv2d": [72, 95, 647], "randint": [72, 77, 79, 95, 100, 654, 656, 669, 673, 763, 844, 878], "noise_shap": [72, 95, 647, 670], "42857146": [72, 647, 670], "85714293": [72, 647, 670], "28571415": [72, 95, 647, 670], "71428585": [72, 95, 647, 670], "14285755": [72, 95, 647, 670], "5714283": [72, 647, 670], "4285717": [72, 95, 647, 670], "8571434": [72, 95, 647, 670], "2857151": [72, 647, 670], "dropout1d": [72, 95, 386, 411], "dropout2d": [72, 95, 386], "dropout3d": [72, 95, 386], "outer_batch_shap": [72, 95, 647, 671], "inner_batch_shap": [72, 95, 647, 671], "lstm_updat": [72, 95, 647, 864], "init_h": [72, 95, 647, 673, 864], "init_c": [72, 95, 647, 673, 864], "recurrent_kernel": [72, 95, 647, 673, 864], "recurrent_bia": [72, 95, 647, 673, 864], "hidden": [72, 95, 647, 672, 673, 806, 841, 848, 864, 868], "recurr": [72, 91, 95, 386, 432, 647, 673, 864, 885, 889], "timestep": [72, 91, 95, 386, 432, 647, 672, 673, 674, 806, 864], "h_i": [72, 95, 673], "c_i": [72, 95, 673], "rc": [72, 95, 673], "multi_head_attent": [72, 95, 647, 855], "num_head": [72, 95, 647, 674, 806], "in_proj_weight": [72, 95, 647, 674], "q_proj_weight": [72, 95, 647, 674], "k_proj_weight": [72, 95, 647, 674], "v_proj_weight": [72, 95, 647, 674], "out_proj_weight": [72, 95, 647, 674], "in_proj_bia": [72, 95, 647, 674], "out_proj_bia": [72, 95, 647, 674], "is_caus": [72, 95, 647, 674, 677], "key_padding_mask": [72, 95, 647, 674], "bias_k": [72, 95, 647, 674], "bias_v": [72, 95, 647, 674], "static_k": [72, 95, 647, 674], "static_v": [72, 95, 647, 674], "add_zero_attn": [72, 95, 647, 674], "return_attention_weight": [72, 95, 647, 674], "average_attention_weight": [72, 95, 647, 674], "scaled_dot_product_attent": [72, 95, 647], "dropout_p": [72, 95, 647, 677], "num_queri": [72, 95, 647, 677], "feat_dim": [72, 95, 647, 677], "num_kei": [72, 95, 647, 677], "causal": [72, 95, 647, 674, 677], "attent": [72, 95, 647, 674, 677, 806, 835, 839, 875], "29999995": [72, 307, 308, 318, 378, 386, 430, 647, 656, 677, 764], "19994521": [72, 647, 677], "09994531": [72, 647, 677], "30000019": [72, 389, 479, 647, 677], "_arraywithlinearalgebra": [73, 113], "choleski": [73, 96, 648, 855], "625": [73, 91, 359, 648, 678], "vif": [73, 96, 679], "det": [73, 96, 648, 696, 843], "axis1": [73, 75, 96, 98, 648, 650, 682, 702, 725], "axis2": [73, 96, 648, 682, 702], "eigh": [73, 96, 387, 440, 648, 683], "uplo": [73, 96, 648, 684, 685], "eigvalsh": [73, 96, 648], "array_lik": [73, 96, 386, 388, 389, 431, 464, 465, 469, 470, 500, 648, 686, 693, 821], "203": [73, 90, 240, 648, 653, 686, 751], "233": [73, 648, 686], "inv": [73, 96, 648], "transpose_a": [73, 96, 648, 688], "transpose_b": [73, 96, 648, 688], "adjoint_a": [73, 96, 648, 688], "adjoint_b": [73, 96, 648, 688], "matrix_norm": [73, 96, 648], "ord": [73, 96, 648, 689, 705], "fro": [73, 96, 388, 464, 648, 689], "nuc": [73, 96, 648, 689], "performingth": [73, 689], "matrix_pow": [73, 96, 648], "matrix_rank": [73, 96, 648], "hermitian": [73, 96, 387, 440, 441, 648, 683, 684, 685, 691, 698], "largest_singular_valu": [73, 96, 648, 691, 694], "defici": [73, 648, 691], "matrix_transpos": [73, 96, 648, 866], "pinv": [73, 96, 648], "pseudo": [73, 96, 648, 694, 854], "99999988": [73, 96, 648, 694], "qr": [73, 96, 648, 857], "12309149": [73, 648, 695], "90453403": [73, 648, 695], "40824829": [73, 648, 695], "49236596": [73, 648, 695], "30151134": [73, 648, 695], "81649658": [73, 648, 695], "86164044": [73, 648, 695], "12403841e": [73, 648, 695], "60113630e": [73, 648, 695], "10782342e": [73, 648, 695], "04534034e": [73, 648, 695], "80906807e": [73, 648, 695], "88178420e": [73, 96, 648, 685, 695], "slogdet": [73, 96, 648], "logabsdet": [73, 96, 648, 696], "natur": [73, 96, 254, 272, 273, 274, 275, 294, 365, 383, 643, 648, 696, 839, 846, 848, 857, 875], "098611": [73, 648, 696], "full_matric": [73, 96, 648, 698], "svf": [73, 698], "reconstructed_x": [73, 648, 698], "svdval": [73, 96, 648], "tensorsolv": [73, 96, 648], "vander": [73, 96, 648], "vandermond": [73, 96, 648, 703], "vecdot": [73, 96, 648], "vector_norm": [73, 96, 648], "mathemat": [73, 96, 234, 239, 251, 256, 258, 274, 284, 638, 643, 648, 689, 705, 844, 856, 862, 885, 891], "manhattan": [73, 96, 648, 705], "euclidean": [73, 96, 108, 109, 648, 705], "7416575": [73, 96, 648, 705], "vector_to_skew_symmetric_matrix": [73, 96, 648], "_arraywithloss": [74, 113], "binary_cross_entropi": [74, 97, 649, 843], "pos_weight": [74, 97, 649, 707], "crossentropi": [74, 97, 649, 707], "26765382": [74, 649, 707], "34657359": [74, 649, 708], "sparse_cross_entropi": [74, 97, 649], "07438118": [74, 97, 709], "11889165": [74, 709], "_arraywithmanipul": [75, 113], "x_min": [75, 98, 650, 713, 869], "x_max": [75, 98, 650, 713, 869], "before_1": [75, 98, 389, 495, 650, 715, 728], "after_1": [75, 98, 389, 495, 650, 715, 728], "before_n": [75, 98, 389, 495, 650, 715, 728], "after_n": [75, 98, 389, 495, 650, 715, 728], "repetit": [75, 98, 650, 719, 726, 862], "flat": [75, 85, 98, 394, 524, 587, 645, 650, 719], "allowzero": [75, 98, 650, 720], "remain": [75, 78, 91, 98, 101, 234, 251, 252, 258, 266, 267, 284, 287, 293, 295, 386, 410, 411, 412, 431, 643, 650, 652, 655, 720, 738, 761, 821, 834, 835, 843, 846, 848, 852, 860, 862, 870], "roll": [75, 98, 650, 851, 882], "shift": [75, 87, 98, 114, 147, 158, 243, 245, 339, 380, 640, 643, 650, 721, 834, 835, 845, 846, 851, 858, 882], "restor": [75, 98, 650, 721, 850], "num_or_size_split": [75, 85, 98, 650, 722, 864], "with_remaind": [75, 85, 98, 650, 722], "squeezabl": [75, 650, 723], "swapax": [75, 98, 650], "axis0": [75, 98, 650, 725], "swap_ax": [75, 725], "swap": [75, 98, 650, 725, 815, 879], "tile": [75, 92, 98, 558, 650], "unpack": [75, 98, 650, 727, 857, 859], "zero_pad": [75, 98, 650], "_arraywithnorm": [76, 113], "layer_norm": [76, 99, 653], "normalized_idx": [76, 99, 653, 751], "new_std": [76, 99, 653, 751, 809], "learnabl": [76, 99, 647, 651, 653, 672, 731, 751, 806, 809, 869], "0976": [76, 653, 751], "3452": [76, 653, 751], "2740": [76, 653, 751], "1047": [76, 653, 751], "5886": [76, 653, 751], "2732": [76, 653, 751], "7696": [76, 653, 751, 790], "7024": [76, 653, 751], "2518": [76, 653, 751], "826": [76, 653, 751], "178": [76, 653, 751], "981": [76, 653, 751], "831": [76, 653, 751], "421": [76, 653, 751], "_arraywithrandom": [77, 113], "multinomi": [77, 100, 393, 521, 654], "population_s": [77, 100, 654, 752], "num_sampl": [77, 100, 654, 752], "unnorm": [77, 100, 654, 752, 859], "popul": [77, 81, 85, 100, 104, 654, 658, 752, 778, 780, 844, 845, 855, 859, 864, 891], "draw": [77, 100, 393, 519, 521, 523, 654, 752, 754, 755, 790, 791, 792, 793, 798, 805, 833, 838, 857, 859], "half": [77, 100, 137, 298, 640, 643, 654, 753, 755, 831, 849, 862], "235": [77, 754], "float16": [77, 88, 100, 145, 168, 170, 171, 176, 178, 357, 383, 640, 641, 648, 705, 754, 755, 790, 791, 831, 844, 849, 856, 859], "807": [77, 754], "_arraywithsearch": [78, 113], "select_last_index": [78, 101, 655, 758, 759], "occurr": [78, 389, 398, 509, 531, 655, 656, 758, 759, 763], "argmin": [78, 101, 655, 882], "output_dtyp": [78, 101, 655, 759], "argwher": [78, 101, 655], "nonzero": [78, 101, 109, 232, 233, 234, 237, 240, 249, 251, 254, 256, 258, 284, 297, 302, 643, 655], "as_tupl": [78, 101, 655, 761], "fewer": [78, 101, 655, 761], "_arraywithset": [79, 113], "unique_al": [79, 102, 656], "by_valu": [79, 102, 656, 763], "inverse_indic": [79, 102, 389, 509, 656, 763, 765], "unique_count": [79, 102, 656], "unique_invers": [79, 102, 656], "unique_valu": [79, 102, 656], "admonit": [79, 766], "dask": [79, 656, 763, 764, 765, 766, 875], "difficult": [79, 656, 763, 764, 765, 766, 835, 838, 844, 859, 870], "omit": [79, 294, 643, 656, 763, 764, 765, 766, 851, 855, 856], "x_i": [79, 81, 90, 109, 231, 232, 233, 236, 237, 238, 240, 242, 247, 248, 249, 254, 256, 257, 264, 265, 266, 267, 268, 272, 273, 274, 275, 279, 286, 291, 294, 295, 296, 297, 298, 299, 301, 302, 304, 346, 347, 349, 370, 383, 643, 656, 658, 763, 764, 765, 766, 774, 775, 776, 778, 779, 780, 805, 847], "x_j": [79, 656, 763, 764, 765, 766], "typeerror": [79, 102, 656, 766, 866], "_arraywithsort": [80, 113], "stabil": [80, 103, 603, 604, 645, 657, 767, 770, 844, 854, 860, 862], "msort": [80, 103, 657], "searchsort": [80, 103, 657, 791], "sorter": [80, 103, 657, 769], "ret_dtyp": [80, 103, 657, 769], "_arraywithstatist": [81, 113], "cumprod": [81, 104, 658, 856, 869, 882], "cumsum": [81, 104, 658, 844, 882], "einsum": [81, 104, 658], "equat": [81, 91, 104, 325, 380, 387, 457, 648, 658, 697, 773, 790, 820, 843, 885], "operand": [81, 91, 95, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 265, 266, 267, 272, 273, 274, 275, 276, 284, 287, 289, 293, 294, 295, 296, 297, 298, 301, 302, 304, 346, 347, 370, 374, 383, 384, 386, 429, 643, 648, 658, 696, 702, 773, 774, 776, 777, 779, 820, 821, 839, 842, 847, 856], "contract": [81, 648, 658, 700, 773, 821], "seq": [81, 658, 773, 790], "ii": [81, 104, 658, 773, 835], "jk": [81, 658, 773, 821], "ik": [81, 658, 773, 821], "126": [81, 121, 290, 637, 643, 648, 658, 690, 773], "510": [81, 658, 773], "special": [81, 96, 108, 109, 113, 114, 231, 232, 233, 234, 236, 237, 238, 239, 240, 247, 248, 249, 251, 252, 254, 256, 257, 258, 265, 266, 267, 272, 273, 274, 275, 276, 279, 284, 287, 289, 293, 294, 295, 296, 297, 298, 301, 302, 304, 346, 347, 370, 383, 643, 648, 658, 696, 702, 774, 775, 776, 777, 778, 779, 780, 790, 791, 792, 793, 798, 805, 833, 836, 838, 839, 841, 843, 846, 847, 848, 851, 855, 857, 858, 859, 860, 862, 885, 886, 887], "arithmet": [81, 104, 245, 251, 284, 643, 658, 775, 856], "propag": [81, 245, 346, 347, 383, 643, 658, 774, 775, 776, 778, 779, 780, 854], "overflow": [81, 104, 234, 251, 258, 643, 648, 658, 696, 775, 779, 832, 844], "04999995": [81, 775], "freedom": [81, 104, 658, 778, 780, 840], "constitut": [81, 104, 658, 778, 780, 852, 864, 886], "commonli": [81, 104, 658, 778, 780, 848, 852, 854], "81649661": [81, 658, 778], "6666665": [81, 780, 867], "667": [81, 92, 251, 552, 603, 643, 645, 780], "_arraywithutil": [82, 113], "logic": [82, 105, 215, 251, 252, 278, 279, 280, 284, 287, 642, 643, 659, 781, 782, 833, 839, 843, 844, 845, 848, 852, 853, 854, 855, 856, 858, 859, 862, 866, 879], "AND": [82, 105, 241, 252, 278, 643, 659, 781], "OR": [82, 105, 244, 280, 287, 643, 659, 782, 834, 835, 854], "_wrap_funct": [83, 106, 841, 852, 853], "function_nam": [83, 106, 833, 860], "new_funct": [83, 106, 841], "add_ivy_array_instance_method": 83, "cl": [83, 106], "moduletyp": [83, 106, 878, 879, 880], "toi": [83, 106], "arrayexampl": 83, "hasattr": [83, 106], "_containerwithactiv": [84, 114], "dict_in": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "queue": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 597, 620, 645, 861, 867], "queue_load_s": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "container_combine_method": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "list_join": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "queue_timeout": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114, 597, 620, 645, 861], "print_limit": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "key_length_limit": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "print_ind": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "print_line_spac": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "ivyh": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "default_key_color": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "keyword_color_dict": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "rebuild_child_contain": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "types_to_iteratively_nest": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "alphabetical_kei": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "dynamic_backend": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 113, 114, 807, 808, 840, 861], "build_cal": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 114], "containerbas": [84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 842], "_static_gelu": 84, "key_chain": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 174, 176, 179, 182, 183, 184, 186, 188, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 371, 372, 373, 374, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 429, 430, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 482, 491, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 518, 520, 525, 526, 533, 534, 535, 536, 543, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "to_appli": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 174, 176, 179, 182, 183, 184, 186, 188, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 371, 372, 373, 374, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 429, 430, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 482, 491, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 518, 520, 525, 526, 533, 534, 535, 536, 543, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 652, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "prune_unappli": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 174, 176, 179, 182, 183, 184, 186, 188, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 371, 372, 373, 374, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 429, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 482, 491, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 518, 520, 525, 526, 533, 534, 535, 536, 543, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 652, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 745, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "map_sequ": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 139, 140, 142, 144, 145, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 164, 165, 166, 174, 176, 179, 182, 183, 184, 186, 188, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 329, 339, 340, 344, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 371, 372, 373, 374, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 422, 423, 424, 425, 429, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 482, 491, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 518, 520, 525, 526, 533, 534, 535, 536, 543, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "prune": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 152, 154, 160, 164, 166, 179, 183, 184, 191, 225, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 320, 321, 322, 324, 345, 346, 347, 348, 349, 351, 353, 361, 362, 368, 370, 372, 373, 374, 410, 411, 412, 430, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 501, 503, 504, 505, 507, 512, 514, 515, 516, 518, 520, 533, 534, 535, 536, 545, 548, 549, 551, 552, 556, 557, 558, 559, 560, 563, 564, 567, 569, 571, 572, 573, 575, 576, 579, 587, 588, 602, 603, 604, 606, 608, 610, 611, 624, 630, 635, 652, 661, 662, 663, 664, 670, 671, 677, 678, 679, 684, 685, 686, 687, 688, 689, 691, 693, 695, 696, 702, 707, 708, 709, 713, 717, 720, 721, 722, 723, 724, 727, 728, 745, 746, 747, 748, 752, 753, 754, 755, 757, 760, 763, 764, 765, 766, 767, 771, 772, 775, 777, 778, 780, 781, 782, 788, 791, 843], "static_gelu": 84, "046": 84, "_static_hardswish": 84, "_static_leaky_relu": 84, "static_leaky_relu": 84, "38999999": [84, 91, 123, 306, 307, 378], "_static_log_softmax": 84, "static_log_softmax": 84, "371": [84, 124], "_static_mish": 84, "static_mish": 84, "30883577": [84, 125, 637], "28903052": [84, 125, 637], "10714479": [84, 125, 637], "_static_relu": 84, "static_relu": 84, "_static_sigmoid": 84, "static_sigmoid": 84, "2689414": [84, 127, 128, 637], "7310586": [84, 127, 128, 637], "88079703": [84, 127, 637], "62245935": [84, 127], "4750208": [84, 127], "_static_softmax": 84, "static_softmax": 84, "72844321": [84, 128], "19852395": [84, 128], "07303288": [84, 128], "_static_softplu": 84, "revert": [84, 129, 637], "static_softplu": 84, "53499615": 84, "42036411": 84, "948": [84, 129, 652, 732], "dictionari": [85, 102, 114, 223, 612, 628, 642, 645, 646, 766, 785, 787, 821, 839, 843, 844, 852, 856, 857, 867, 870], "asynchron": [85, 114, 885], "wait": [85, 114, 597, 645, 833, 835, 843, 856], "arriv": [85, 114, 597, 645, 862], "cont_list_join": [85, 114], "whitespac": [85, 114], "indent": [85, 114, 867], "newlin": [85, 114, 847], "termin": [85, 114, 834, 835, 842, 849, 850, 864, 867], "constructor": [85, 114, 547, 645, 787, 803, 811, 844, 845, 847, 866], "kept": [85, 114, 651, 729, 730, 835, 855, 860], "encount": [85, 114, 806, 831, 833, 844, 848, 849, 859], "node": [85, 92, 114, 549, 559, 606, 652, 742, 743, 805, 814, 818, 841, 842, 856, 875, 878, 879, 886], "alphabet": [85, 114], "__setitem__": [85, 389, 503, 839, 842, 866], "_cont_at_key_chains_input_as_dict": 85, "current_chain": 85, "ignore_key_error": 85, "_cont_at_key_chains_input_as_seq": 85, "_cont_call_static_method_with_flexible_arg": 85, "static_method": 85, "kw": 85, "self_idx": 85, "_cont_concat_unifi": 85, "_cont_get_dev": 85, "_cont_get_dtyp": 85, "_cont_get_shap": 85, "_cont_ivi": 85, "_cont_mean_unifi": 85, "_1": 85, "_cont_prune_key_chains_input_as_dict": 85, "return_cont": 85, "_cont_prune_key_chains_input_as_seq": 85, "_cont_slice_kei": 85, "key_slic": 85, "_cont_sum_unifi": 85, "_get_queue_item": 85, "cont_all_fals": 85, "assert_is_bool": 85, "cont_all_key_chain": 85, "include_empti": 85, "cont_all_tru": [85, 842, 867], "cont_as_bool": 85, "cont_assert_contains_sub_contain": 85, "sub_cont": 85, "screen": [85, 833, 834, 867], "cont_assert_contains_sub_structur": 85, "check_shap": [85, 812], "cont_assert_ident": 85, "check_typ": 85, "same_arrai": [85, 867], "arrays_equ": 85, "cont_assert_identical_structur": 85, "assert_and_assign": 85, "congruent": 85, "cont_at_key_chain": 85, "ignore_non": 85, "cont_at_kei": 85, "substr": 85, "cont_combin": 85, "duplic": [85, 389, 500, 568, 645, 652, 734, 840, 847, 853, 854, 857, 868, 891], "configur": [85, 223, 642, 652, 745, 834, 835, 841, 843, 844, 849, 850], "container_rightmost": 85, "cont_common_key_chain": 85, "cont_config": 85, "cont_contains_sub_contain": 85, "cont_contains_sub_structur": 85, "cont_copi": [85, 867], "cont_create_if_abs": 85, "noth": [85, 862, 891], "cont_cutoff_at_depth": 85, "depth_cutoff": 85, "cont_cutoff_at_height": 85, "height_cutoff": 85, "cont_deep_copi": [85, 867, 878], "cont_dev": 85, "cont_dev_str": 85, "cont_diff": [85, 867], "diff_kei": 85, "detect_key_diff": 85, "detect_value_diff": 85, "detect_shape_diff": 85, "container0": 85, "cont_dtyp": 85, "cont_duplicate_array_keychain": 85, "cont_find_sub_contain": 85, "sub_cont_to_find": 85, "cont_find_sub_structur": 85, "sub_struc_to_find": 85, "cont_flatten_key_chain": [85, 867], "above_height": [85, 867], "below_depth": [85, 867], "cont_format_key_chain": 85, "format_fn": 85, "cont_from_disk_as_hdf5": [85, 867], "h5_obj_or_filepath": 85, "slice_obj": 85, "disk": [85, 808, 867, 884], "h5py": 85, "filepath": [85, 659, 783, 784, 835, 838], "cont_from_disk_as_json": [85, 867], "json_filepath": 85, "cont_from_disk_as_pickl": [85, 867], "pickle_filepath": 85, "cont_from_flat_list": 85, "flat_list": 85, "hierarchi": [85, 825, 833, 858, 867, 881, 891], "cont_handle_inplac": 85, "prime": [85, 844], "overwritten": [85, 839, 840], "cont_has_kei": 85, "query_kei": 85, "somewher": [85, 843], "cont_has_key_chain": 85, "cont_ident": [85, 867], "cont_identical_array_shap": 85, "cont_identical_config": 85, "cont_identical_structur": 85, "cont_if_exist": 85, "cont_inplace_upd": 85, "cont_ivi": 85, "cont_key_chains_contain": 85, "sub_str": 85, "cont_list_stack": [85, 867], "cont_load": 85, "cont_map": [85, 842, 867], "func": [85, 108, 224, 375, 376, 377, 385, 550, 625, 628, 629, 631, 636, 642, 645, 646, 652, 745, 787, 833, 838, 839, 846, 848, 854], "cont_map_sub_cont": 85, "include_self": 85, "possibli": [85, 608, 645, 790, 859, 870], "cont_max_depth": 85, "cont_multi_map": 85, "map_nest": 85, "assert_ident": 85, "leftmost": [85, 652, 745], "cont_multi_map_in_funct": 85, "cont_num_arrai": 85, "cont_overwrite_at_key_chain": 85, "target_dict": 85, "return_dict": 85, "cont_prune_empti": 85, "keep_non": 85, "cont_prune_key_chain": 85, "key1": [85, 827, 868], "key2": [85, 827], "key3": 85, "cont_prune_key_from_key_chain": 85, "certain": [85, 137, 148, 149, 388, 465, 640, 833, 834, 835, 838, 844, 852, 858, 859, 862, 870, 878, 879, 880, 889], "cont_prune_kei": 85, "cont_prune_keys_from_key_chain": 85, "cont_reduc": 85, "cont_remove_key_length_limit": 85, "cont_remove_print_limit": 85, "cont_reshape_lik": 85, "leading_shap": 85, "cont_restructur": 85, "keep_orig": 85, "old": [85, 834, 840, 855], "cont_restructure_key_chain": 85, "keychain_map": 85, "cont_sav": 85, "cont_set_at_key_chain": 85, "cont_set_at_kei": 85, "cont_shap": [85, 647, 665], "cont_show": 85, "cont_show_sub_contain": 85, "sub_cont_or_keychain": 85, "cont_size_ordered_arrai": 85, "keychain": [85, 91, 309, 348, 473, 474, 475, 504], "cont_slice_kei": 85, "all_depth": 85, "cont_slice_via_kei": 85, "slice_kei": 85, "cont_sort_by_kei": 85, "cont_structural_diff": 85, "cont_to_dict": 85, "cont_to_disk_as_hdf5": [85, 867], "starting_index": 85, "max_batch_s": 85, "cont_to_disk_as_json": [85, 867], "cont_to_disk_as_pickl": [85, 867], "cont_to_flat_list": 85, "cont_to_iter": [85, 842], "leaf_keys_onli": 85, "cont_to_iterator_kei": 85, "cont_to_iterator_valu": 85, "cont_to_json": 85, "cont_to_nested_list": 85, "cont_to_raw": 85, "cont_trim_kei": 85, "cont_try_kc": 85, "cont_unifi": 85, "concatten": [85, 224, 642], "cont_unstack_cont": 85, "dim_siz": 85, "cont_update_config": 85, "cont_with_default_key_color": 85, "cont_with_entries_as_list": 85, "cont_with_ivy_backend": 85, "ivy_backend": [85, 857], "cont_with_key_length_limit": [85, 867], "cont_with_print_ind": [85, 867], "cont_with_print_limit": [85, 867], "cont_with_print_line_spac": 85, "h5_file_s": 85, "shuffle_h5_fil": 85, "split_cont": 85, "_is_json": 85, "_repr": 85, "_containerwithconvers": [86, 114], "_static_to_ivi": 86, "_static_to_n": 86, "_containerwithcr": [87, 114], "_static_arang": 87, "_static_asarrai": 87, "_static_copy_arrai": 87, "_static_empti": 87, "_static_empty_lik": 87, "_static_ey": 87, "n_row": [87, 91, 143, 158, 339, 380, 387, 448, 640], "n_col": [87, 91, 143, 158, 339, 380, 640], "_static_from_dlpack": 87, "_static_ful": 87, "_static_full_lik": 87, "static_full_lik": 87, "2324": [87, 147, 640], "234": [87, 90, 147, 170, 253, 304, 640, 641, 643, 647, 671, 790], "_static_linspac": 87, "_static_logspac": 87, "static_logspac": 87, "15443469": [87, 149], "64158883": [87, 149], "_static_meshgrid": 87, "_static_native_arrai": 87, "_static_one_hot": 87, "static_one_hot": 87, "_static_on": 87, "_static_ones_lik": 87, "_static_tril": 87, "_static_triu": 87, "_static_zero": 87, "_static_zeros_lik": 87, "frombuff": [87, 640], "expos": [87, 145, 553, 640, 645, 827, 843, 864, 868, 874], "x00": [87, 145, 640], "xf0": [87, 145, 640], "x01": [87, 145, 640], "x02": [87, 145, 640], "x03": [87, 145, 640], "x04": [87, 145, 640], "x05": [87, 145], "5443469": [87, 149, 640], "static_frombuff": 87, "static_triu_indic": 87, "triu_indic": [87, 640], "_containerwithdatatyp": [88, 114], "_static_astyp": 88, "718": [88, 90, 163, 280, 641], "618": [88, 90, 163, 280, 641], "static_astyp": 88, "_static_broadcast_arrai": 88, "static_broadcast_arrai": 88, "_static_broadcast_to": 88, "static_broadcast_to": 88, "_static_can_cast": 88, "from_": [88, 166, 641], "static_can_cast": 88, "_static_default_complex_dtyp": 88, "complex_dtyp": [88, 169, 192, 641], "_static_default_float_dtyp": 88, "float_dtyp": [88, 171, 194, 641], "_static_dtyp": 88, "_static_finfo": 88, "inquir": [88, 176, 179], "static_finfo": 88, "55040e": [88, 176, 641], "7976931348623157e": [88, 176, 641], "308": [88, 176, 641, 790, 859], "_static_function_supported_dtyp": 88, "_static_function_unsupported_dtyp": 88, "_static_iinfo": 88, "1800": [88, 179, 641], "1084": 88, "40000": 88, "static_iinfo": 88, "2147483648": [88, 91, 179, 389, 503, 641], "2147483647": [88, 179, 641], "_static_is_bool_dtyp": 88, "dtype_in": [88, 161, 162, 175, 181, 182, 183, 184, 185, 186, 187, 188, 203, 641], "_static_is_complex_dtyp": 88, "is_complex_dtyp": [88, 641, 860], "roughli": [88, 834, 838, 888], "static_is_complex_dtyp": 88, "_static_is_float_dtyp": 88, "static_is_float_dtyp": 88, "_static_is_int_dtyp": 88, "_static_is_uint_dtyp": 88, "_static_result_typ": 88, "static_result_typ": 88, "broadcats": [88, 164], "_containerwithdevic": [89, 114], "_static_dev": 89, "static_dev": 89, "_static_to_devic": 89, "static_to_devic": 89, "contaion": [89, 208], "_containerwithelementwis": [90, 114], "_static_ab": 90, "static_ab": 90, "_static_aco": 90, "static_aco": 90, "_static_acosh": 90, "static_acosh": 90, "_static_add": 90, "static_add": [90, 118], "_static_asin": 90, "static_asin": 90, "524": [90, 236, 643], "412": [90, 95, 236, 643, 652, 732], "_static_asinh": 90, "static_asinh": 90, "_static_atan": 90, "static_atan": 90, "_static_atan2": 90, "static_atan2": 90, "915": [90, 239, 643], "983": [90, 239, 643], "978": [90, 239, 643], "696": [90, 100, 239, 643, 754], "993": [90, 239, 643], "_static_atanh": 90, "static_atanh": 90, "_static_bitwise_and": 90, "static_bitwise_and": 90, "_static_bitwise_invert": 90, "static_bitwise_invert": 90, "_static_bitwise_left_shift": 90, "_static_bitwise_or": 90, "static_bitwise_or": 90, "_static_bitwise_right_shift": 90, "static_bitwise_right_shift": 90, "_static_bitwise_xor": 90, "static_bitwise_xor": 90, "_static_ceil": 90, "static_ceil": 90, "_static_co": 90, "static_co": 90, "_static_cosh": 90, "static_cosh": 90, "_static_deg2rad": 90, "static_deg2rad": 90, "0262": [90, 250, 290, 643], "873": [90, 250, 290, 643], "_static_divid": 90, "static_divid": 90, "_static_equ": 90, "static_equ": 90, "_static_erf": 90, "static_erf": 90, "27632612": [90, 253], "934008": [90, 253, 643], "99999928": [90, 253], "91903949": [90, 253], "_static_exp": 90, "static_exp": 90, "59814835": [90, 254, 643], "4131622": [90, 254], "_static_expm1": 90, "thefunct": [90, 253], "areal": 90, "static_expm1": 90, "71828175": [90, 254, 643], "38905621": [90, 254, 643], "59815216": 90, "_static_floor": 90, "static_floor": 90, "_static_floor_divid": 90, "static_floor_divid": 90, "_static_great": 90, "static_great": 90, "_static_greater_equ": 90, "static_greater_equ": 90, "_static_isfinit": 90, "999999999999": [90, 265, 643], "static_isfinit": 90, "_static_isinf": 90, "static_isinf": 90, "_static_isnan": 90, "static_isnan": 90, "_static_isr": 90, "0j": [90, 91, 153, 154, 232, 233, 234, 237, 240, 249, 254, 256, 268, 272, 274, 291, 295, 297, 298, 302, 349, 383, 640, 643, 648, 696], "23j": [90, 91], "9j": [90, 91], "static_isr": 90, "_static_lcm": 90, "1080": [90, 269], "1550": [90, 269], "130": [90, 269], "_static_less": 90, "static_less": 90, "_static_less_equ": 90, "static_less_equ": 90, "_static_log": 90, "static_log": 90, "_static_log10": 90, "static_log10": 90, "898": [90, 273, 643], "0414": [90, 273, 643], "_static_log1p": 90, "static_log1p": 90, "_static_log2": 90, "static_log2": 90, "_static_logaddexp": 90, "static_logaddexp": 90, "_static_logical_and": 90, "static_logical_and": 90, "_static_logical_not": 90, "static_logical_not": 90, "_static_logical_or": 90, "static_logical_or": 90, "_static_logical_xor": 90, "static_logical_xor": 90, "_static_maximum": 90, "static_maximum": 90, "_static_minimum": 90, "static_minimum": 90, "_static_multipli": 90, "static_multipli": 90, "_static_neg": 90, "static_neg": 90, "_static_not_equ": 90, "static_not_equ": 90, "_static_posit": 90, "static_posit": 90, "_static_pow": 90, "static_pow": 90, "_static_rad2deg": 90, "static_rad2deg": 90, "5160": 90, "10300": [90, 290, 643], "15500": 90, "20600": 90, "2860": [90, 290], "_static_reciproc": 90, "recirpoc": [90, 292], "static_reciproc": 90, "_static_remaind": 90, "static_remaind": 90, "_static_round": 90, "thevfunct": 90, "527": [90, 294, 643], "static_round": 90, "301": [90, 294, 643], "_static_sign": 90, "static_sign": 90, "_static_sin": 90, "static_sin": 90, "757": [90, 296, 643], "959": [90, 256, 296, 643], "279": [90, 296, 386, 408, 418, 551, 643, 645], "_static_sinh": 90, "static_sinh": 90, "835": [90, 297], "347": [90, 297], "721": [90, 297], "_static_sqrt": 90, "static_sqrt": 90, "_static_squar": 90, "static_squar": 90, "_static_subtract": 90, "static_subtract": 90, "_static_tan": 90, "static_tan": 90, "_static_tanh": 90, "static_tanh": 90, "995": [90, 302, 643], "9999": 90, "_static_trapz": 90, "static_trapz": 90, "_static_trunc": 90, "static_trunc": 90, "_static_trunc_divid": 90, "75j": [90, 235, 264], "01317055": [90, 235], "05634501": [90, 235], "115": [90, 235, 290, 643], "3461759": [90, 235], "524111": [90, 235], "644": [90, 236, 643, 868], "305": [90, 95, 236, 643], "351": [90, 250, 290], "00613": [90, 250], "0154": [90, 250], "403": [90, 254], "428772": [90, 254], "649": [90, 256], "865": [90, 256], "metho": [90, 263, 275], "imaginari": [90, 113, 123, 126, 129, 153, 154, 232, 233, 234, 249, 251, 252, 254, 256, 264, 284, 286, 287, 294, 297, 298, 302, 349, 383, 386, 387, 430, 441, 637, 640, 643, 655, 761, 846], "4j": [90, 264, 386, 430, 604, 643, 645], "7j": [90, 91, 268, 291, 349, 383, 643], "956": [90, 274], "08746284": [90, 277], "32192809": [90, 277], "nuner": [90, 284], "413": [90, 290], "335": [90, 91, 291, 349], "345j": [90, 91, 291, 349], "static_angl": 90, "static_exp2": 90, "static_fmin": 90, "static_gcd": 90, "static_imag": 90, "static_logaddexp2": 90, "static_nan_to_num": 90, "static_r": 90, "_containerwithactivationexperiment": [91, 114], "_static_celu": 91, "formlat": 91, "static_celu": 91, "_static_elu": 91, "static_elu": 91, "_static_hardshrink": 91, "hard": [91, 308, 835, 866, 885], "shrinkag": [91, 308, 318, 389, 502], "_static_hardsilu": 91, "20833333": [91, 309, 378], "29166666": [91, 309, 378], "66666669": [91, 114, 309, 378, 392, 518, 628, 646], "66666663": [91, 148, 309, 378, 640], "_static_hardtanh": 91, "3899": 91, "_static_scaled_tanh": 91, "931": 91, "71587813": 91, "88367474": 91, "00376701": [91, 315], "2285642": 91, "99999881": 91, "49999905": 91, "_static_silu": 91, "static_silu": 91, "27777028": [91, 317], "23947507": [91, 317], "0900332": [91, 317], "_static_softshrink": 91, "_static_tanhshrink": 91, "36634541": [91, 320], "02005103": [91, 320], "00262468": [91, 320], "_static_threshold": 91, "389999": [91, 310], "19722462": [91, 311], "84729779": [91, 311], "31326163": [91, 312], "46328258": [91, 312], "51301527": [91, 312], "79813886": [91, 312], "simplywrap": [91, 315], "54939651": [91, 315], "09999998": [91, 315, 626, 646], "09999999": [91, 315], "08336546": [91, 315], "0379949": [91, 315], "22856998": [91, 316], "42028043": [91, 316], "31868932": [91, 316], "static_logit": 91, "static_logsigmoid": 91, "34115386": 91, "64439666": 91, "24115384": 91, "55435526": 91, "07888974": 91, "00741899": 91, "26328245": 91, "00012302": 91, "static_prelu": 91, "static_relu6": 91, "static_selu": 91, "static_thresholded_relu": 91, "_containerwithconversionexperiment": [91, 114], "_containerwithcreationexperiment": [91, 114], "_static_trilu": 91, "blackman": [91, 323, 380], "00770143e": [91, 323], "49229857e": [91, 323], "hamming_window": [91, 380], "ham": [91, 325, 380], "4180": [91, 325], "8180": [91, 325], "hann_window": [91, 380], "hann": [91, 326, 380], "7500": [91, 326], "3455": [91, 326], "9045": [91, 326], "kaiser_bessel_derived_window": [91, 380], "suitabl": [91, 328, 329, 380, 657, 769, 792, 834, 835, 842, 860, 885], "spectral": [91, 328, 329, 380], "analysi": [91, 328, 329, 380, 885, 886], "kaiser": [91, 323, 328, 329, 380], "70710677": [91, 328, 516, 518], "18493208": [91, 328, 380], "9827513": [91, 328, 380], "kaiser_window": [91, 380], "static_kaiser_window": [91, 329], "2049": [91, 329], "8712": [91, 329], "0367": [91, 329, 380], "7753": [91, 329], "static_blackman_window": 91, "static_eye_lik": 91, "static_hamming_window": 91, "static_hann_window": 91, "static_hann": 91, "static_kaiser_bessel_derived_window": 91, "static_mel_weight_matrix": 91, "static_polyv": 91, "static_tril_indic": 91, "static_unsorted_segment_mean": 91, "static_unsorted_segment_min": 91, "static_unsorted_segment_sum": 91, "static_vorbis_window": 91, "vorbis_window": [91, 380], "vorbi": [91, 344, 380], "38268343": [91, 344, 648, 684], "92387953": [91, 344], "14943586": [91, 344, 380], "51644717": [91, 344], "85631905": [91, 344], "98877142": [91, 344], "tril_indic": [91, 380], "_containerwithdata_typeexperiment": [91, 114], "_containerwithdeviceexperiment": [91, 114], "_containerwithelementwiseexperiment": [91, 114], "0003": [91, 345, 648, 687, 790, 793], "0006": [91, 345, 373], "2345j": [91, 349], "5772": [91, 353], "9635": [91, 353], "4228": [91, 353], "9228": [91, 353], "57299206e": [91, 354, 355], "67773480e": [91, 354, 355], "20904985e": [91, 354, 355], "84270084": [91, 354, 355, 383], "99532223": [91, 354, 355], "99997795": [91, 354, 355], "mantissa": [91, 359, 383, 844], "frist": [91, 360, 383], "coord": [91, 360], "6055": [91, 361], "160": [91, 363], "10240": [91, 363], "60000038": [91, 364, 383, 648, 704], "0707": [91, 370, 383], "0579": [91, 370, 383], "static_allclos": 91, "static_amax": 91, "static_amin": 91, "static_binar": 91, "static_conj": 91, "static_copysign": 91, "static_count_nonzero": 91, "static_diff": 91, "static_digamma": 91, "57721537": 91, "96351004": 91, "static_erfc": 91, "15729921": 91, "00467773": [91, 354, 383], "static_erfinv": 91, "static_fix": 91, "static_float_pow": 91, "static_fmax": 91, "static_fmod": 91, "static_frexp": 91, "static_gradi": 91, "static_hypot": 91, "static_isclos": 91, "static_ldexp": 91, "static_lerp": 91, "90000057": [91, 364, 383], "70000076": [91, 364, 383], "55000019": [91, 364, 383], "05000019": [91, 364, 383], "static_modf": 91, "static_nansum": 91, "static_nextaft": 91, "static_signbit": 91, "static_sinc": 91, "636": 91, "090": 91, "070": 91, "057": 91, "static_sparsify_tensor": 91, "static_xlogi": 91, "static_zeta": 91, "0244": [91, 373], "_containerwithgeneralexperiment": [91, 114], "_static_reduc": 91, "static_reduc": 91, "_containerwithgradientsexperiment": [91, 114], "_containerwithimageexperiment": [91, 114], "_containerwithlayersexperiment": [91, 114], "_static_fft": 91, "static_fft": 91, "_static_sliding_window": 91, "673": [91, 408], "0507": [91, 408], "79711437": [91, 386, 408, 418], "94867325": [91, 386, 408, 418], "74089146": [91, 386, 408, 418], "25980937": [91, 386, 408, 418], "64958102": [91, 386, 408, 418], "2442648": [91, 386, 408, 418], "247306": [91, 420], "908323j": [91, 420], "494955": [91, 420], "90395j": [91, 420], "static_adaptive_avg_pool1d": 91, "static_adaptive_avg_pool2d": 91, "static_adaptive_max_pool2d": 91, "static_adaptive_max_pool3d": 91, "static_avg_pool1d": 91, "static_avg_pool2d": 91, "static_avg_pool3d": 91, "static_dct": 91, "253": [91, 297, 643], "515": [91, 654, 754], "467": 91, "static_dft": 91, "static_embed": 91, "static_idct": 91, "93732834": [91, 386, 408], "75048852": [91, 386, 408], "29723358": [91, 386, 418], "6950531": 91, "93914509": 91, "88008738": 91, "18951225": 91, "06697273": [91, 386, 418], "57439804": 91, "68861485": [91, 386, 418], "41308832": [91, 386, 418], "0700836": 91, "2449036": 91, "6711426": 91, "514": 91, "501709": 91, "4924011": 91, "static_ifft": 91, "static_ifftn": 91, "static_interpol": 91, "static_max_pool1d": 91, "static_max_pool2d": 91, "max_pool2dd": 91, "static_max_pool3d": 91, "static_max_unpool1d": 91, "static_rfft": 91, "static_rfftn": 91, "static_rnn": 91, "step_funct": [91, 386, 432], "initial_st": [91, 386, 432, 647, 672], "go_backward": [91, 386, 432], "unrol": [91, 386, 432, 647, 673, 864, 867], "input_length": [91, 386, 432], "zero_output_for_mask": [91, 386, 432], "return_all_output": [91, 386, 432], "rnn": [91, 386, 885], "tempor": [91, 386, 432], "state_s": [91, 386, 432], "while_loop": [91, 386, 432, 639], "otput": [91, 386, 432], "funciton": [91, 386, 432], "static_stft": 91, "_containerwithlinearalgebraexperiment": [91, 114], "933034": [91, 387, 437], "eigenvealu": [91, 440, 683], "xx": [91, 440, 442, 683], "37228107": [91, 440, 683], "3722816": [91, 440, 683], "8245648": [91, 440, 683], "41597357": [91, 440, 683], "56576747": [91, 440, 683], "9093767": [91, 440, 683], "56155": [91, 441], "82842": [91, 441], "450": [91, 447], "static_adjoint": 91, "static_batched_out": 91, "static_cond": 91, "static_diagflat": 91, "static_dot": 91, "static_eig": 91, "static_eigh_tridiagon": 91, "static_eigv": 91, "static_higher_order_mo": 91, "static_initialize_tuck": 91, "static_kron": 91, "kroneck": [91, 387, 446, 447], "static_make_svd_non_neg": 91, "static_matrix_exp": 91, "static_mode_dot": 91, "static_multi_dot": 91, "static_multi_mode_dot": 91, "static_partial_tuck": 91, "static_svd_flip": 91, "static_tensor_train": 91, "static_truncated_svd": 91, "static_tt_matrix_to_tensor": 91, "tt_matrix": [91, 387, 461], "output_tensor": [91, 111, 387, 461], "static_tuck": 91, "_containerwithlossesexperiment": [91, 114], "_static_hinge_embedding_loss": 91, "_static_huber_loss": 91, "static_huber_loss": 91, "0575": [91, 464], "_static_kl_div": 91, "_static_l1_loss": 91, "static_l1_loss": 91, "_static_log_poisson_loss": 91, "static_log_poisson_loss": 91, "_static_poisson_nll_loss": 91, "06446016": 91, "55611551": 91, "30244565": [91, 468], "_static_smooth_l1_loss": 91, "static_smooth_l1_loss": 91, "_static_soft_margin_loss": 91, "3890561": [91, 467], "413159": [91, 467], "06429195": [91, 468], "43333333": [91, 469], "10666666": [91, 469], "_containerwithmanipulationexperiment": [91, 114], "_static_fill_diagon": 91, "_static_put_along_axi": 91, "_static_tak": 91, "69999981": [91, 318, 378, 389, 479, 503], "_static_trim_zero": 91, "_static_unflatten": 91, "_static_unique_consecut": 91, "ary1": [91, 389, 473, 474, 475], "ary2": [91, 389, 473, 474, 475], "broadcast_shap": [91, 117, 389, 790, 792], "static_concat_from_sequ": [91, 480], "30192195": [91, 492], "static_as_strid": 91, "static_atleast_1d": 91, "static_atleast_2d": 91, "static_atleast_3d": 91, "static_broadcast_shap": 91, "static_column_stack": 91, "static_dsplit": 91, "static_dstack": 91, "static_expand": 91, "static_flatten": 91, "static_fliplr": 91, "static_flipud": 91, "static_fold": 91, "static_heavisid": 91, "static_hsplit": 91, "static_hstack": 91, "static_i0": 91, "static_matric": 91, "static_moveaxi": 91, "static_pad": 91, "static_partial_fold": 91, "static_partial_tensor_to_vec": 91, "static_partial_unfold": 91, "static_partial_vec_to_tensor": 91, "static_rot90": 91, "static_soft_threshold": 91, "static_take_along_axi": 91, "static_top_k": 91, "static_unfold": 91, "static_vsplit": 91, "static_vstack": 91, "_containerwithnormsexperiment": [91, 114], "16903085": [91, 516, 518], "50709254": [91, 516, 518], "84515423": [91, 516, 518], "44183609": [91, 516, 518], "56807494": [91, 516, 518], "69431382": [91, 516, 518], "static_batch_norm": 91, "static_group_norm": 91, "static_instance_norm": 91, "static_l1_norm": 91, "static_l2_norm": 91, "static_lp_norm": 91, "12500000": 91, "37500000": 91, "62500000": 91, "27500000": 91, "35000000": 91, "42500000": 91, "0000000": 91, "5000000": 91, "2500000": 91, "_containerwithrandomexperiment": [91, 114], "43643127": [91, 521], "32325703": [91, 521], "24031169": [91, 521], "34251311": [91, 521], "31692529": [91, 521], "3405616": [91, 521], "5319725": [91, 521], "22458365": [91, 521], "24344385": [91, 521], "26588406": [91, 521], "61075421": [91, 521], "12336174": [91, 521], "51142915": [91, 521], "25041268": [91, 521], "23815817": [91, 521], "64042903": [91, 521], "25763214": [91, 521], "10193883": [91, 521], "31624692": [91, 521], "46567987": [91, 521], "21807321": [91, 521], "37677699": [91, 521], "39914594": [91, 521], "22407707": [91, 521], "static_bernoulli": 91, "static_beta": 91, "static_dirichlet": 91, "static_gamma": 91, "static_poisson": 91, "_containerwithsearchingexperiment": [91, 114], "static_unravel_index": 91, "_containerwithsetexperiment": [91, 114], "_containerwithsortingexperiment": [91, 114], "invert_permut": [91, 396], "static_invert_permut": 91, "static_lexsort": [91, 103], "_containerwithstatisticalexperiment": [91, 114], "_static_cummax": 91, "static_cummax": 91, "_static_cummin": 91, "static_cummin": 91, "_static_nanmin": 91, "static_nanmin": 91, "func_nam": [91, 536, 833, 846, 847, 852, 856], "static_bincount": 91, "static_corrcoef": 91, "static_cov": [91, 398, 533], "static_histogram": 91, "static_igamma": 91, "static_lgamma": 91, "static_median": 91, "static_nanmean": 91, "static_nanmedian": 91, "static_nanprod": 91, "static_quantil": 91, "_containerwithutilityexperiment": [91, 114], "static_optional_get_el": 91, "_containerwithgener": [92, 114], "_static_all_equ": 92, "static_all_equ": 92, "_static_array_equ": 92, "a0": [92, 389, 479], "static_array_equ": 92, "_static_assert_supports_inplac": 92, "_static_clip_matrix_norm": 92, "static_clip_matrix_norm": 92, "849": [92, 551, 645], "_static_clip_vector_norm": 92, "static_clip_vector_norm": 92, "_static_einops_rearrang": 92, "static_einops_rearrang": 92, "_static_einops_reduc": 92, "static_einops_reduc": 92, "29333329": [92, 557, 645], "53000069": [92, 557, 645], "39666676": [92, 557, 645], "20666695": [92, 557, 645], "_static_einops_repeat": 92, "static_einops_repeat": 92, "_static_exist": 92, "_static_fourier_encod": 92, "static_fourier_encod": 92, "classivi": [92, 656, 764], "89858720e": 92, "79717439e": 92, "_static_gath": 92, "static_gath": 92, "_static_gather_nd": 92, "static_gather_nd": 92, "_static_get_num_dim": 92, "static_get_num_dim": 92, "_static_has_nan": 92, "leafwis": 92, "static_has_nan": 92, "_static_inplace_decr": 92, "_static_inplace_incr": 92, "_static_inplace_upd": 92, "_static_is_arrai": 92, "static_is_arrai": 92, "_static_is_ivy_arrai": 92, "static_is_ivy_arrai": 92, "_static_is_native_arrai": 92, "static_is_native_arrai": 92, "_static_scatter_flat": 92, "_static_scatter_nd": 92, "static_scatter_nd": 92, "_static_s": 92, "static_s": 92, "_static_stable_divid": 92, "22222222": 92, "11111111": 92, "857": [92, 603, 645], "444": 92, "_static_stable_pow": 92, "00012": [92, 604, 645], "00016": [92, 93, 604, 632, 645, 646], "00001": [92, 604, 645, 790], "00032": [92, 604], "00256": [92, 604], "1679638": [92, 604], "395": [92, 604], "16777383": [92, 604], "_static_supports_inplace_upd": 92, "_static_to_list": 92, "static_to_list": 92, "_static_to_numpi": 92, "static_to_numpi": 92, "_static_to_scalar": 92, "static_to_scalar": 92, "_static_value_is_nan": 92, "452": 92, "static_value_is_nan": 92, "833": [92, 552], "items": [92, 113, 645], "static_isin": 92, "static_items": 92, "static_strid": 92, "425": [92, 624], "_containerwithgradi": [93, 114], "_static_stop_gradi": 93, "static_stop_gradi": 93, "976": [93, 302, 626, 643, 646], "49e": [93, 626, 646], "74e": [93, 626, 646], "95e": [93, 626, 646], "024": [93, 626, 646], "096": [93, 626, 646], "626": [93, 626, 646], "en": [93, 626, 627, 646, 843], "wikipedia": [93, 626, 627, 646], "wiki": [93, 626, 627, 646], "stochastic_gradient_desc": [93, 626, 627, 646], "01099": [93, 627], "01003": [93, 627, 646], "01015": [93, 627, 646], "99936122": [93, 627, 646], "99936116": [93, 627, 646], "99936128": [93, 627, 646], "99936104": [93, 627, 646], "w_new": [93, 630, 646], "708": [93, 632, 646], "445": [93, 632, 646], "6e": [93, 632, 646], "00036": [93, 632, 646], "00049": [93, 632, 646], "layerwis": [93, 633, 646], "01132035": [93, 633, 646], "22264051": [93, 633, 646], "2056601": [93, 633, 646], "1324538": [93, 633, 646], "56490755": [93, 633, 646], "96622658": [93, 633, 646], "90848625": [93, 633, 646], "93616199": [93, 633, 646], "77232409": [93, 633, 646], "_containerwithimag": [94, 114], "_containerwithlay": [95, 114], "_static_conv1d": 95, "static_conv1d": 95, "_static_conv1d_transpos": 95, "static_conv1d_transpos": 95, "112": [95, 648, 658, 662, 693, 773], "_static_conv2d": 95, "ey": [95, 640, 647, 663, 669, 862, 869], "static_conv2d": 95, "_static_conv2d_transpos": 95, "static_conv2d_transpos": 95, "_static_conv3d": 95, "fdfh": [95, 665], "static_conv3d": 95, "_static_conv3d_transpos": 95, "static_conv3d_transpos": 95, "_static_depthwise_conv2d": 95, "static_depthwise_conv2d": 95, "_static_dropout": 95, "static_dropout": 95, "_static_dropout1d": 95, "static_dropout1d": 95, "_static_dropout2d": 95, "_static_dropout3d": 95, "_static_linear": 95, "278": [95, 647, 670, 671], "static_linear": 95, "195": 95, "_static_lstm_upd": 95, "_static_multi_head_attent": 95, "_static_reduce_window": 95, "_static_scaled_dot_product_attent": 95, "static_scaled_dot_product_attent": 95, "39999962": [95, 647, 670, 671], "19999695": [95, 671], "11600018": [95, 671], "88399887": [95, 671], "306": [95, 647, 671], "19999981": [95, 308, 321, 378, 386, 430, 647, 670, 677], "59249449": [95, 647, 677], "68226194": [95, 647, 677], "19603825": [95, 647, 677], "9960382": [95, 647, 677], "26894283": [95, 647, 677], "40236187": [95, 647, 677], "39999437": [95, 647, 677], "59999037": [95, 647, 677], "35046196": [95, 647, 677], "54282808": [95, 647, 677], "39989519": [95, 647, 677], "5998764": [95, 647, 677], "_containerwithlinearalgebra": [96, 114], "_static_choleski": 96, "static_choleski": 96, "577": [96, 648, 678], "707": [96, 648, 678], "static_rol": [96, 98], "_static_cross": 96, "static_cross": 96, "_static_det": 96, "_static_diag": 96, "_static_diagon": 96, "static_diagon": 96, "_static_eigh": 96, "_static_eigvalsh": 96, "static_eigvalsh": 96, "51572949": [96, 648, 685], "17091519": [96, 648, 685], "3448143": [96, 648, 685], "35898387e": [96, 648, 685], "46410179e": [96, 648, 685], "_static_inn": 96, "static_inn": 96, "_static_inv": 96, "static_inv": 96, "_static_matmul": 96, "matul": 96, "static_matmul": 96, "_static_matrix_norm": 96, "deimens": 96, "static_matrix_norm": 96, "_static_matrix_pow": 96, "_static_matrix_rank": 96, "static_matrix_rank": 96, "_static_matrix_transpos": 96, "static_matrix_transpos": 96, "_static_out": 96, "n1": [96, 150, 640], "n2": [96, 150, 640], "static_out": [96, 693], "_static_pinv": 96, "static_pinv": 96, "0426": 96, "0964": 96, "0605": 96, "1368": 96, "_static_qr": 96, "static_qr": 96, "31622777": [96, 648, 695], "9486833": [96, 648, 695], "4472136": [96, 648, 695], "89442719": [96, 648, 695], "16227766": [96, 648, 695], "42718872": [96, 648, 695], "63245553": [96, 648, 695], "47213595": [96, 648, 695], "81377674": [96, 648, 695], "_static_slogdet": 96, "static_slogdet": 96, "6931472": 96, "0986123": 96, "_static_solv": 96, "_static_svd": 96, "static_svd": 96, "au": 96, "aS": 96, "avh": 96, "bvh": 96, "_static_svdv": 96, "_static_tensordot": 96, "_static_tensorsolv": 96, "_static_trac": 96, "static_trac": 96, "_static_vand": 96, "static_vand": 96, "343": [96, 294, 643, 703], "729": [96, 703, 868], "_static_vecdot": 96, "_static_vector_norm": 96, "static_vector_norm": 96, "77359247": [96, 705], "_static_vector_to_skew_symmetric_matrix": 96, "09861231": [96, 648, 696], "static_general_inner_product": 96, "3475602": [96, 698], "93765765": [96, 698], "58776021": [96, 698], "10416126": [96, 698], "80644298": [96, 698], "87024701": [96, 698], "48127627": [96, 698], "79101127": [96, 698], "98288572": [96, 698], "68917423": [96, 698], "_containerwithloss": [97, 114], "_static_binary_cross_entropi": 97, "static_binary_cross_entropi": 97, "511": 97, "357": 97, "_static_cross_entropi": 97, "static_cross_entropi": 97, "20397282": 97, "83258148": 97, "60943794": [97, 648, 696], "_static_sparse_cross_entropi": 97, "static_sparse_cross_entropi": 97, "36354783": [97, 649, 707], "14733934": [97, 649, 707], "17027519": [97, 708], "53647931": [97, 708], "53647929": [97, 709], "1702752": [97, 709], "_containerwithmanipul": [98, 114], "_static_clip": 98, "static_clip": 98, "_static_concat": 98, "_static_constant_pad": 98, "static_constant_pad": 98, "_static_expand_dim": 98, "static_expand_dim": 98, "container_axi": [98, 650, 716], "_static_flip": 98, "static_flip": 98, "_static_permute_dim": 98, "static_permute_dim": 98, "_static_repeat": 98, "static_repeat": 98, "_static_reshap": 98, "static_reshap": 98, "_static_rol": 98, "positivclip": 98, "_static_split": 98, "static_split": 98, "_static_squeez": 98, "static_squeez": 98, "_static_stack": 98, "leavv": 98, "static_stack": 98, "_static_swapax": 98, "_static_til": 98, "static_til": 98, "_static_unstack": 98, "static_unstack": 98, "_static_zero_pad": 98, "repreat": [98, 719], "_containerwithnorm": [99, 114], "34198591": [99, 653, 751], "04274819": [99, 653, 751], "29923761": [99, 653, 751], "24053511": [99, 653, 751], "62221265": [99, 751], "20277636": [99, 751], "41943574": [99, 751], "83710337": [99, 751], "_containerwithrandom": [100, 114], "_static_multinomi": 100, "_static_randint": 100, "static_randint": 100, "_static_random_norm": 100, "static_random_norm": 100, "651": 100, "_static_random_uniform": 100, "static_random_uniform": 100, "481": 100, "0999": 100, "_static_shuffl": 100, "static_shuffl": 100, "431": [100, 754], "274": [100, 754], "_containerwithsearch": [101, 114], "_static_argmax": 101, "static_argmax": 101, "_static_argmin": 101, "static_argmin": 101, "_static_argwher": 101, "static_argwher": 101, "_static_nonzero": 101, "_static_wher": 101, "static_wher": 101, "_containerwithset": [102, 114], "_static_unique_al": 102, "static_unique_al": 102, "_static_unique_count": 102, "static_unique_count": 102, "_static_unique_invers": 102, "static_unique_invers": 102, "_static_unique_valu": 102, "_containerwithsort": [103, 114], "_static_argsort": 103, "static_argsort": 103, "_static_searchsort": 103, "_static_sort": 103, "static_sort": 103, "static_msort": 103, "_containerwithstatist": [104, 114], "_static_cumprod": 104, "static_cumprod": 104, "_static_cumsum": 104, "static_cumsum": 104, "_static_min": 104, "_static_prod": 104, "static_prod": 104, "11000001": [104, 777], "23100001": [104, 777], "30800003": [104, 658, 777], "_static_sum": 104, "_static_var": 104, "static_var": 104, "12666667": [104, 658, 780], "11555555": [104, 658, 780], "rtype": [104, 773, 820], "respectv": [104, 778], "81649649": [104, 778], "94280904": [104, 778], "509902": [104, 658, 778], "2472192": [104, 778], "44948983": [104, 778], "41421354": [104, 778], "6666667": [104, 780], "_containerwithutil": [105, 114], "_static_al": 105, "static_al": 105, "_static_ani": 105, "static_ani": 105, "add_ivy_container_instance_method": 106, "containerexampl": 106, "factorized_tensor": [107, 108, 109, 110, 111, 112, 115], "factorizedtensor": [107, 108, 109, 110, 111, 112], "matrix_or_tensor": 107, "to_unfold": [107, 108, 109, 110, 111, 112], "to_vec": [107, 108, 109, 110, 111, 112], "cp_tensor": [108, 109], "cptensor": [108, 109, 334, 380], "cp_copi": 108, "cp_flip_sign": 108, "s_i": [108, 109], "normalisation_weight": [108, 109], "normalised_factor": [108, 109], "cp_lstsq_grad": 108, "return_loss": 108, "nabla": 108, "mathcal": 108, "mathbf": 108, "factor_matric": 108, "cp_gradient": 108, "quantiti": 108, "cp_mode_dot": 108, "keep_dim": [108, 112], "cp_multi_mode_dot": 108, "cp_n_param": 108, "tensor_shap": [108, 110, 111, 112], "n_param": [108, 109, 110, 111, 112], "cp_norm": 108, "cp_to_tensor": 108, "khatria": 108, "rao": [108, 387, 446], "khatri": [108, 387, 446], "cp_normal": 108, "normalis": [108, 109], "u_1": [108, 109], "u_n": [108, 109], "v_1": [108, 109], "v_n": [108, 109], "v_k": [108, 109], "u_k": [108, 109], "absorb": [108, 109], "refold": [108, 389, 488, 499], "cp_to_unfold": 108, "ie": 108, "s_u_i": 108, "exploit": [108, 888], "khatri_rao": [108, 387], "cp_to_vec": 108, "ravel": [108, 862], "unfolding_dot_khatri_rao": 108, "mttkrp": 108, "validate_cp_rank": 108, "percent": [108, 111], "validate_cp_tensor": 108, "parafac2_tensor": 109, "parafac2tensor": [109, 335, 380], "apply_parafac2_project": 109, "evolv": [109, 874, 885], "b_i": 109, "ijk": [109, 821], "sum_r": 109, "a_": 109, "ir": [109, 883, 886, 891], "jr": 109, "kr": 109, "coupl": [109, 834, 839, 866, 868, 885], "factoris": 109, "i1": [109, 398, 536], "classmethod": [109, 116, 117, 795], "from_cptensor": 109, "parafac2_tensor_ok": 109, "parafac2_normalis": 109, "normalised_project": 109, "parafac2_to_slic": 109, "slice_idx": 109, "frontal": 109, "a_i": 109, "j_i": 109, "b_": 109, "reformul": 109, "p_i": 109, "orthogon": [109, 334, 338, 380, 387, 440, 456, 462, 648, 683, 684], "sum_": 109, "ijr": 109, "constraint": [109, 821, 843, 844, 854], "projection_matric": 109, "parafac2_to_tensor": 109, "construct": [109, 650, 726, 806, 809, 810, 811, 858, 864, 868, 869, 883, 885, 892], "uneven": 109, "parafac2_to_unfold": 109, "parafac2_to_vec": 109, "validate_parafac2_tensor": 109, "cp": [109, 334, 380, 835], "tr_tensor": 110, "trtensor": [110, 336, 380], "tr_n_param": 110, "tr_to_tensor": 110, "tr_to_unfold": 110, "tr_to_vec": 110, "validate_tr_rank": 110, "validate_tr_tensor": 110, "tt_tensor": 111, "_tt_n_param": 111, "mp": [111, 337, 380], "index_upd": 111, "pad_tt_rank": 111, "factor_list": 111, "n_pad": 111, "pad_boundari": 111, "ring": 111, "bond": 111, "padded_factor_list": 111, "tt_to_tensor": 111, "assembl": [111, 387, 461], "tt_to_unfold": 111, "reassembl": 111, "tt_to_vec": 111, "validate_tt_rank": 111, "constant_rank": 111, "allow_overparametr": 111, "proport": [111, 805], "realiz": [111, 885], "validate_tt_tensor": 111, "tucker_tensor": 112, "tucker_copi": 112, "tucker_mode_dot": [112, 892], "tucker_n_param": 112, "tucker_norm": 112, "tucker_to_tensor": 112, "skip_factor": 112, "transpose_factor": 112, "tucker_to_unfold": 112, "tucker_to_vec": 112, "validate_tucker_rank": 112, "fixed_mod": 112, "validate_tucker_tensor": 112, "_bisection_root_find": 112, "fun": [112, 377, 385, 625, 645, 652, 743, 843], "max_it": 112, "__abs__": [113, 114], "__add__": [113, 114, 839, 842, 846, 847, 851, 856, 857, 866], "__eq__": [113, 114], "__ge__": [113, 114], "__gt__": [113, 114, 862], "__le__": [113, 114], "__lt__": [113, 114], "__ne__": [113, 114], "__pow__": [113, 114, 866], "69678056": 113, "59876156": 113, "82660675": 113, "__radd__": [113, 114, 846, 847, 856], "__rrshift__": [113, 114], "__rshift__": [113, 114], "__rsub__": [113, 114], "__sub__": [113, 114, 839, 842, 846, 851, 866], "__truediv__": [113, 114, 839, 842, 846], "__xor__": [113, 114], "referenc": [113, 848, 855], "resid": [113, 117, 650, 716, 856, 864, 868], "mt": [113, 866], "eq": 114, "ge": 114, "le": 114, "ne": 114, "75979435": 114, "52153397": 114, "13532257": 114, "rshift": 114, "truediv": 114, "nested_arrai": [116, 117, 118, 841], "nestedarrai": 116, "nested_rank": [116, 117, 118], "inner_shap": [116, 117, 118], "nestedarraybas": [116, 117, 118], "from_row_length": 116, "row_length": 116, "from_row_split": 116, "row_split": 116, "ragged_map": 117, "ragged_multi_map": 117, "ragged_arrai": 117, "ragged_multi_map_in_funct": 117, "replace_ivy_arrai": 117, "unbind": 117, "nestedarrayelementwis": 118, "strictli": [123, 126, 129, 258, 637, 643, 851, 855], "24000001": [123, 637], "703": [124, 637], "683": [124, 637], "408": [124, 637], "313": [124, 637], "437": [124, 637], "40337825": [125, 637], "56114835": [125, 637], "20788449": [125, 637], "0768": [128, 637], "\u03b2": [129, 637], "body_fn": [133, 134, 136, 639], "bodi": [133, 136, 639, 838, 859], "lst": [133, 639], "orelse_fn": [134, 639], "body1": [135, 639], "body2": [135, 639], "test_fn": [136, 639, 788, 827, 879, 880], "repeatedli": [136, 639, 652, 741, 843, 859], "ml_framework": [137, 640], "distanc": [137, 640], "adjac": [137, 640], "nestedsequ": [138, 139, 640], "typevar": [138, 139, 640], "supportsbufferprotocol": [138, 139, 640], "static_copy_arrai": [140, 640], "intdtyp": [143, 154, 160, 172, 183, 188, 195, 201, 640, 641], "pycapsul": [144, 155, 640], "interchang": [144, 155, 640, 650, 725], "plu": [145, 640], "x00b": [145, 640], "x00d": [145, 640], "x00e": [145, 640], "41588834": [149, 640], "7827941": [149, 640], "6227766": [149, 640], "23413252": [149, 640], "n3": [150, 640], "xv": [150, 640], "yv": [150, 640], "x_nativ": [151, 640, 855], "y_nativ": [151, 640], "z_nativ": [151, 640], "d_type": [153, 640], "col": [158, 339, 380, 640], "primari": [158, 177, 178, 210, 211, 339, 380, 396, 526, 561, 562, 640, 641, 642, 645, 791, 793, 833, 837, 840, 844, 853, 855, 856, 858, 859, 862, 870, 872], "upward": [158, 339, 380, 640], "downward": [158, 339, 380, 640], "2xn": [158, 339, 380, 640], "subarrai": [158, 339, 380, 640], "closest": [168, 247, 257, 258, 294, 304, 641, 643, 859, 862], "xtype": [168, 641], "ytype": [168, 641], "native_uint16": [168, 641], "complexdtyp": [169, 183, 192, 641], "set_default_complex_dtyp": [169, 198, 641], "4294": [169, 171, 641], "967346": [169, 171, 641], "set_default_dtyp": [170, 199, 641, 844, 852], "floatdtyp": [171, 194, 641], "set_default_float_dtyp": [171, 180, 192, 200, 641, 844], "int_dtyp": [172, 195, 641], "set_default_int_dtyp": [172, 180, 201, 641, 844], "4294967346": [172, 173, 641], "uint_dtyp": [173, 196, 641], "uint": [173, 188, 196, 202, 641, 844, 857], "uintdtyp": [173, 188, 196, 202, 641], "set_default_uint_dtyp": [173, 180, 202, 641], "native_bool": [175, 641], "ieee": [176, 234, 251, 256, 274, 284, 293, 298, 301, 638, 641, 643, 875], "754": [176, 234, 251, 256, 274, 284, 293, 298, 301, 638, 641, 643, 875], "smallest_norm": [176, 641], "bfloat16": [177, 641, 790, 791, 844, 856, 859, 860], "unsupport": [178, 211, 562, 641, 642, 645, 785, 788, 831, 834, 849, 856], "encapsul": [179, 641, 843], "314": [179, 291, 349, 383, 641, 643], "9223372036854775808": [179, 641], "9223372036854775807": [179, 641], "65535": [179, 641], "4294967295": [179, 641], "native_uint8": [181, 641], "hashabl": [185, 641], "type1": [189, 641], "type2": [189, 641], "array_api_promot": [189, 190, 641, 790, 791], "unexpect": [190, 258, 641, 643, 844], "default_complex_dtyp": [192, 641], "default_dtype_stack": [193, 199, 641], "unset_default_dtyp": [193, 641], "native_uint64": [193, 641], "default_float_dtyp": [194, 641, 844], "default_int_dtyp": [195, 201, 641, 844], "default_uint_dtyp": [196, 202, 641], "ret1": [197, 641], "ret2": [197, 641], "default_complex_dtype_stack": [198, 641], "default_float_dtype_stack": [200, 641], "native_float16": [203, 641], "unmodifi": [205, 642, 840, 844], "aliv": [212, 217, 219, 565, 585, 586, 642, 645, 845], "139740789224448": [212, 642], "process_specif": [218, 230, 642], "percentag": [218, 642], "ram": [218, 226, 230, 642], "alon": [218, 230, 642, 850, 859], "036902561555": [218, 642], "7024003467681645": [218, 642], "as_native_dev": [218, 642], "7095597456708771": [218, 642], "attr_onli": [219, 642], "soft_device_mod": [221, 229, 642], "chunk": [222, 223, 224, 642], "split_factor": [222, 642, 848], "max_chunk_s": [224, 642], "chunk_siz": [224, 642], "input_ax": [224, 642], "output_ax": [224, 642], "fed": [224, 642, 868], "fist": [224, 642], "gb": [226, 230, 642, 834, 849], "66700032": [226, 642], "589934592": [226, 642], "219563008": [230, 642], "902400346": [230, 642], "525205504": [230, 642], "na": [231, 643, 859], "noqa": [231, 298, 643, 806, 815, 857], "princip": [232, 236, 238, 370, 383, 643], "codomain": [232, 233, 236, 237, 238, 239, 248, 249, 254, 256, 272, 273, 275, 296, 297, 298, 301, 302, 370, 383, 643, 847], "\u03c0": [232, 236, 238, 239, 638, 643], "3\u03c0": [232, 239, 643], "unspecifi": [232, 233, 237, 240, 249, 254, 256, 258, 293, 297, 298, 302, 387, 440, 643, 648, 650, 683, 684, 724, 855], "\u03c0j": [233, 237, 240, 272, 274, 643], "3\u03c0j": [233, 272, 274, 643], "x1_i": [234, 239, 241, 243, 244, 245, 246, 251, 252, 258, 262, 263, 270, 271, 276, 278, 280, 281, 284, 287, 289, 293, 300, 643, 838], "2019": [234, 251, 256, 274, 284, 643, 885, 888], "commut": [234, 643], "tabl": [234, 251, 284, 596, 619, 643, 645, 790, 791, 806, 856, 861, 885], "dj": [234, 251, 284, 643], "z1": [234, 643], "z2": [234, 643], "yj": [235, 643], "nanj": [237, 643], "809": [237, 643], "569": [237, 643], "733": [237, 643], "notat": [239, 643, 658, 773, 843], "denot": [239, 643, 808], "quadrant": [239, 643], "rai": [239, 643, 875], "bitwis": [241, 244, 246, 281, 643], "170": [245, 643], "243": [245, 643], "xor": [246, 281, 643], "654": [248, 643], "ci": [249, 254, 256, 297, 643, 838, 844, 850, 857, 859, 870], "368": [249, 643], "670": [249, 643], "202": [249, 643, 838], "548": [249, 643], "1490": [249, 643], "57079633": [250, 643], "14159265": [250, 643], "71238898": [250, 643], "28318531": [250, 643], "02617994": [250, 643], "87266463": [250, 643], "01919862": [250, 643], "03839725": [250, 643], "05759586": [250, 643], "07679449": [250, 643], "09599311": [250, 643], "11519173": [250, 643], "35081118": [250, 643], "88139129": [250, 643], "underflow": [251, 258, 643, 648, 696, 844], "textbook": [251, 284, 643], "frac": [251, 273, 275, 295, 297, 301, 386, 392, 414, 415, 419, 420, 512, 514, 643], "ac": [251, 284, 643, 820, 821], "bd": [251, 284, 643], "bc": [251, 284, 643, 820, 821], "versu": [251, 284, 643], "riemann": [251, 284, 643], "sphere": [251, 284, 643], "c99": [251, 284, 643], "infinit": [251, 284, 298, 643], "unlik": [251, 284, 643, 838, 843, 846, 875, 890, 892], "698": [251, 643], "truth": [252, 262, 263, 270, 271, 287, 388, 464, 643, 785, 787, 798, 831, 849, 856, 859], "32862675": [253, 643], "67780113": [253, 643], "11246294": [253, 643], "42839241": [253, 643], "52050018": [253, 643], "16799599": [253, 643], "30787992": [253, 643], "43796915": [253, 643], "98667163": [253, 643], "79690808": [253, 643], "88020504": [253, 643], "91031402": [253, 643], "95228523": [253, 643], "96610528": [253, 643], "cut": [254, 256, 296, 297, 298, 301, 643, 874, 891], "08553692": [254, 643], "567": [254, 643], "00344786": [254, 643], "76297021": [254, 643], "197948": [254, 643], "53253174": [254, 643], "fdlibm": [256, 274, 643], "compliant": [256, 274, 279, 280, 346, 347, 383, 643, 658, 774, 775, 776, 778], "potenti": [256, 274, 643, 827, 833, 834, 843, 844, 856, 863, 888], "632": [256, 643], "20e": [256, 643], "72e": [256, 643, 790], "greatest": [257, 258, 261, 643], "pep": [258, 643, 851], "disambigu": [258, 643, 854], "former": [258, 643, 834, 844, 847, 856], "latter": [258, 643, 834, 838, 840, 844, 847, 856], "overload": [258, 643, 859], "led": [258, 643, 838, 887], "subtl": [258, 643, 844, 891], "bug": [258, 643, 827, 833, 835, 841, 849, 850, 856, 859, 871], "ambigu": [258, 643], "semant": [258, 293, 389, 503, 643, 844, 864, 869, 874, 886], "ill": [258, 643, 792], "surpris": [258, 643, 870], "arrau": [264, 643], "log_": [273, 275, 643], "742": [274, 643], "negat": [286, 349, 383, 643], "52095687": [289, 643], "92457771": [289, 643], "49372482": [289, 643], "22738838": [289, 643], "5877228": [289, 643], "189": [290, 643, 652, 732], "252": [290, 643], "2890": [290, 643], "344": [290, 643], "355j": [291, 349, 383, 643], "55j": [291, 349, 383, 643], "primarili": [293, 643, 833, 842, 885], "counterpart": [294, 643, 842, 853], "deliber": [294, 643, 862], "imprecis": [294, 643], "5654": [294, 643], "034": [294, 643], "433": [294, 629, 631, 643, 646], "signum": [295, 643], "textrm": [295, 643], "932": [296, 643], "746": [296, 643], "657": [296, 643], "indistinguish": [298, 643], "infti": [298, 643], "32455532": [298, 643], "89897949": [298, 643], "169": [298, 643], "analyt": [301, 643, 885, 887, 891], "pole": [301, 643], "546": [301, 643, 647, 671], "916": [301, 643], "996": [301, 643], "histor": [302, 643], "stem": [302, 643, 855], "older": [302, 643], "advis": [302, 643, 856], "462": [302, 643], "604": [302, 643], "997": [302, 643], "0375": [304, 643], "032": [304, 643], "57258511": [307, 378], "69999999": [307, 378, 636, 646], "90928203": [307, 378], "98772264": [307, 378], "99591321": [307, 378], "99863964": [307, 378], "69880581": [307, 378], "18126924": [307, 378], "79999995": [308, 318, 321, 378], "70000005": [308, 321, 378], "1241": [309, 378], "4897": [309, 378], "4090": [309, 378], "31008321": [309, 378], "1147176": [309, 378], "40899992": [309, 378], "20141329": [312, 378], "40318608": [312, 378], "48683619": [312, 378], "46328247": [312, 378], "59813893": [312, 378], "43748799": [312, 378], "parametr": [313, 378, 838, 859, 885], "71589994": [315, 319, 378], "14324772": [315, 319, 378], "70648694": [315, 319, 378], "54488957": [315, 319, 378], "10740992": [315, 319, 378], "19514863": [315, 319, 378], "6705687": [316, 378], "52016652": [316, 378], "40560818": [316, 378], "45630932": [316, 378], "2689": [317, 378], "7310": [317, 378], "7615": [317, 378], "2784": [317, 378], "7168": [317, 378], "8708": [317, 378], "4374": [317, 378], "1379": [317, 378], "0089": [317, 378], "59999991": [318, 378], "03597236": [320, 378], "43827677": [320, 378], "80100036": [320, 378], "12954807": [320, 378], "76459098": [320, 378], "20044947": [320, 378], "60000372": [320, 378], "taper": [323, 326, 380], "summat": [323, 380, 658, 773, 820, 821], "leakag": [323, 380], "wors": [323, 380, 875], "y1": [324, 380], "0800": [325, 380], "3979": [325, 380], "9121": [325, 380], "5400": [325, 380], "han": [326, 380], "ith": [327, 380], "00726415": [328, 380], "9999736": [328, 380], "2773e": [329, 380], "0172e": [329, 380], "9294e": [329, 380], "4149": [329, 380], "9138": [329, 380], "5529": [329, 380], "multidimension": [331, 332, 380, 885], "normalise_factor": [334, 335, 380], "parafac2": [335, 380], "tr": [336, 380], "38268346": [344, 380], "38268352": [344, 380], "8563191": [344, 380], "14943568": [344, 380], "cn": [346, 347, 383], "zh": [346, 347, 383], "amax_cn": [346, 383], "sentinel": [346, 347, 383, 658, 774, 776], "amin_cn": [347, 383], "4769": [355, 383], "position": [357, 383], "triangl": [361, 383], "999999e": [362, 383], "65999985": [364, 383], "52000046": [364, 383], "1500001": [364, 383, 557, 645], "11259177": [365, 383], "3574118": [365, 383], "20097363": [365, 383], "suppli": [369, 383, 389, 495, 820, 839, 841, 859], "217234": [370, 383], "hurwitz": [373, 383], "custom_grad_func": [375, 385], "bind": [375, 385, 833, 854, 884, 885], "upstream": [375, 385, 834, 835, 838, 849, 854], "primal": [376, 377, 385], "jacobian": [376, 377, 385, 631, 646, 870, 885], "cotang": [377, 385], "stanh": 378, "ndenumer": 380, "ndindex": 380, "random_cp": 380, "random_parafac2": 380, "random_tr": 380, "random_tt": 380, "random_tuck": 380, "bind_custom_gradient_funct": [385, 854], "jvp": 385, "vjp": 385, "h_out": [386, 403, 647, 672], "w_out": [386, 403], "area_interpol": 386, "01823380e": [386, 408, 418], "15385818e": [386, 408, 418], "36371466e": [386, 408, 418], "38763905e": [386, 408, 418], "60722279e": [386, 408, 418], "80319249e": [386, 408, 418], "05617893e": [386, 408, 418], "21500000e": [386, 408, 418], "24000015e": [386, 408, 418], "90734863e": [386, 408, 418], "10000420e": [386, 408, 418], "15899994e": [386, 408, 418], "24000053e": [386, 408, 418], "81469727e": [386, 408, 418], "09999847e": [386, 408, 418], "4135742": [386, 408, 418], "6779785": [386, 408, 418], "3770599": [386, 408, 418], "8719864": [386, 408, 418], "72109985": [386, 408, 418], "52869415": [386, 408, 418], "79182434": [386, 408, 418], "72489166": [386, 408, 418], "container_n": [386, 408, 418], "container_typ": [386, 408, 418, 645], "container_norm": [386, 408, 418], "1580677": [386, 408], "89422607": [386, 408], "86190414": [386, 408], "00041008": [386, 408], "75149155": [386, 408], "97056389": [386, 408], "87819386": [386, 408], "89381361": [386, 408], "50000000e": [386, 408, 418, 790], "22044605e": [386, 408, 418], "ed": [386, 410, 411, 412], "rest": [386, 389, 410, 411, 412, 481, 834, 841, 843, 859, 869, 887], "5d": [386, 412, 806], "emb": [386, 413], "51285338": [386, 413], "87183261": [386, 413], "2308116": [386, 413], "02733949e": [386, 414], "00j": [386, 414], "49660576e": [386, 414], "68178638e": [386, 414], "01j": [386, 414, 419], "98912367e": [386, 414], "21802426e": [386, 414, 419], "04549134e": [386, 414, 419], "82842712e": [386, 414, 419], "86902654e": [386, 414, 419], "25501143e": [386, 414, 419], "32978028e": [386, 414, 419], "52068201e": [386, 414, 419], "71158374e": [386, 414, 419], "generate_einsum_equ": 386, "get_interpolate_kernel": 386, "27279224e": [386, 418], "44232273e": [386, 418], "70464332e": [386, 418], "73454881e": [386, 418], "00902849e": [386, 418], "10039906e": [386, 418], "07022366e": [386, 418], "69506073": [386, 418], "93914604": [386, 418], "88008881": [386, 418], "18951607": [386, 418], "57439613": [386, 418], "15318303e": [386, 419], "15148591e": [386, 419], "19j": [386, 419], "25000000e": [386, 419], "35378602e": [386, 419], "02j": [386, 419], "65404249e": [386, 419], "17611649e": [386, 419], "24320230e": [386, 419], "79344813e": [386, 419], "22374531e": [386, 419], "45929364e": [386, 419], "14208718e": [386, 419], "07177031e": [386, 419], "indexerror": [386, 420, 431, 650, 716, 822, 848], "interp": [386, 862], "xp": [386, 421, 838], "fp": [386, 421], "nd": [386, 422], "tf_bicub": [386, 422, 862], "nearest_interpol": 386, "window_shap": [386, 428], "pool_typ": [386, 428], "irfft": [386, 430], "silent": [386, 430], "discard": [386, 430, 843], "1400001": [386, 430], "3999999": [386, 430], "3999996": [386, 430], "99038106j": [386, 431], "33012702": [386, 431], "23205081j": [386, 431], "33012702j": [386, 431], "superdiagon": [387, 438, 648, 681], "subdiagon": [387, 438, 648, 681], "eigendecomposit": [387, 440, 648, 683, 684], "qlq\u1d40": [387, 440, 648, 683, 684], "tridiagon": [387, 441], "38196602": [387, 441], "61803389": [387, 441], "35048741": [387, 441], "56710052": [387, 441], "06693714": [387, 441], "74234426": [387, 441], "56155282": [387, 441], "56155276": [387, 441], "82842714": [387, 441], "82842731": [387, 441, 648, 684], "necessarili": [387, 442, 839, 842], "generalis": [387, 443], "skip_matrix": [387, 446, 448], "khatri_rao_product": [387, 446], "kronecker_product": [387, 448], "n_column": [387, 448], "lu_factor": 387, "pivot": [387, 449], "lu": [387, 449, 450], "lu_solv": 387, "nnmf": [387, 451], "hoi": [387, 456, 462], "solve_triangular": 387, "unit_diagon": [387, 457], "solut": [387, 457, 648, 697, 790, 827, 831, 833, 834, 835, 842, 844, 849, 857, 859, 862, 883, 887], "determinist": [387, 458, 859], "borrow": [387, 458, 837], "extmath": [387, 458], "ivan": [387, 459], "oseledet": [387, 459], "scientif": [387, 459, 885], "2295": [387, 459], "2317": [387, 459], "2011": [387, 459], "convention": [388, 465, 888], "explicit": [388, 389, 465, 503, 834, 842, 844, 854, 855, 856, 864, 870, 885], "555969": [388, 465], "223876": [388, 465], "111938": [388, 465], "42649534": [388, 465], "68651628": [388, 465], "51119184": [388, 465], "59967244": [388, 465], "mae": [388, 466], "666": [388, 466, 647, 648, 671, 689], "91097307": [388, 468], "3467": [388, 469], "0133": [388, 469], "0250": [388, 469], "0056": [388, 469], "0025": [388, 469], "0675": [388, 469], "6987": [388, 470], "1606": [388, 470], "4032": [388, 470], "6931": [388, 470], "whilst": [389, 473, 474, 475, 869, 872, 885], "ary3": [389, 475], "check_scalar": 389, "force_integ": [389, 477], "force_posit": [389, 477], "mod": [389, 478, 838], "tall": [389, 484], "horizot": [389, 491], "shortcut": [389, 495, 834], "linear_ramp": [389, 495], "reflect": [389, 495, 835, 839, 855, 859], "ramp": [389, 495], "mirror": [389, 495, 830, 833, 885], "padding_func": [389, 495], "iaxis_pad_width": [389, 495], "iaxi": [389, 495], "unalt": [389, 495], "put": [389, 500, 833, 859, 870, 891], "mul": [389, 500, 855, 866], "conceptu": [389, 503, 881, 886], "concern": [389, 503, 835, 837, 842, 844, 846, 855, 862, 863, 891], "regard": [389, 503, 832, 842, 856, 857, 862, 875], "mutat": [389, 503], "elimin": [389, 509, 834], "consecut": [389, 509], "batch_mean": [392, 512, 514], "batch_var": [392, 512, 514], "running_vari": [392, 512, 514], "local_response_norm": 392, "neighbour": [392, 517], "42857143": [392, 518], "5714286": [392, 518], "multivari": [393, 521], "bayesian": [393, 521], "supposedli": [396, 525], "indirect": [396, 526], "secondari": [396, 526], "is_ivy_sparse_arrai": 397, "is_native_sparse_arrai": 397, "native_sparse_arrai": 397, "coo_indic": [397, 529], "crow_indic": [397, 529], "col_indic": [397, 529], "ccol_indic": [397, 529], "row_indic": [397, 529], "dense_shap": [397, 529], "native_sparse_array_to_indices_values_and_shap": 397, "nativesparsearrai": 397, "sparsearrai": 397, "sparse_arrai": 397, "linalg": [398, 533, 648, 696, 697, 833, 855, 857], "aw": [398, 533, 875], "48447205": [398, 533], "c0": [398, 536], "ck": [398, 536], "c2": [398, 536], "nearest_jax": [398, 543], "trace_on_next_step": [547, 645, 810, 868], "recalcul": [550, 645], "my_sum": [550, 645], "val1": [550, 645], "val2": [550, 645], "cached_sum": [550, 645], "line_eq": [550, 645], "slp": [550, 645], "itc": [550, 645], "cached_line_eq": [550, 645], "0353": [551, 645], "424": [551, 645], "339": [551, 645], "271": [551, 645], "391": [551, 645], "78885436": [552, 645], "41666666": [552, 645], "58333331": [552, 645], "06666667": [552, 645], "13333334": [552, 645], "40000004": [552, 645], "26666668": [552, 645], "13137734": [552, 645], "26275468": [552, 645], "39413199": [552, 645], "52550936": [552, 645], "6568867": [552, 645], "78826398": [552, 645], "84852815": [552, 645], "1313709": [552, 645], "41421366": [552, 645], "27279221": [552, 645], "69705628": [552, 645], "12132034": [552, 645], "default_str": [555, 645], "46999979": [556, 645], "66000009": [556, 645], "93000001": [556, 645], "29000092": [556, 645], "33999991": [556, 645], "6400001": [556, 645], "96000004": [556, 645], "36000013": [556, 645], "51999998": [556, 645], "67000008": [556, 645], "suppos": [556, 645, 844, 859], "960": [556, 645], "3600": [556, 645], "h1": [556, 645], "w1": [556, 645], "40499985": [557, 645], "61000061": [557, 645], "max_depth": [568, 645], "seen_set": [568, 645], "local_set": [568, 645], "referr": [568, 645], "redund": [568, 645, 827, 844, 848, 856, 878], "example_funct": [568, 645], "repr": [568, 645], "ivyexcept": [573, 606, 645, 822, 845, 848, 853, 855, 856, 860], "allow_dupl": [583, 645], "fork": [584, 645, 828, 838, 843, 849], "forkserv": [584, 645], "mp_default": [584, 645], "defaultcontext": [584, 645], "0x7f4e3193e520": [584, 645], "mp_fork": [584, 645], "forkcontext": [584, 645], "0x7f4e3193e580": [584, 645], "mp_spawn": [584, 645], "spawncontext": [584, 645], "0x7f4e3193e5e0": [584, 645], "mp_forkserv": [584, 645], "forkservercontext": [584, 645], "0x7f4e3193e640": [584, 645], "garbag": [586, 645], "collector": [586, 645], "get_all_arrays_in_memori": [586, 645], "exception_trace_mod": [590, 614, 645, 861], "lenient": [591, 615, 645], "inplace_mod": [591, 615, 645], "break": [591, 645, 840, 844, 851, 860, 870], "infus": [592, 645], "unset": [593, 600, 645, 648, 696, 815, 840, 864], "unset_min_bas": [593, 645], "nestable_mod": [595, 618, 645, 861], "precise_mod": [596, 619, 645, 861], "shape_array_mod": [598, 621, 645, 861], "show_func_wrapper_trace_mod": [599, 622, 645, 861], "tmp_dr": [600, 645], "tmp_dir": [600, 623, 645, 861], "my_tmp": [600, 645], "unset_tmp_dir": [600, 645], "49999999999975": [603, 645], "5015015015010504": [603, 645], "000444502911705e": [603, 645], "9999999999995j": [603, 645], "00000262": [604, 645], "15605032": [604, 645], "01208451j": [604, 645], "00048": [604, 645], "1296": [604, 645], "00864": [604, 645], "isn": [606, 645, 830, 835, 853, 855, 859, 867, 870, 887], "100000023841858": [608, 645], "200000047683716": [608, 645], "299999952316284": [608, 645], "400000095367432": [608, 645], "599999904632568": [608, 645], "hemant": [612, 645], "unset_shape_array_mod": [613, 645], "set_exception_trace_mod": [614, 645, 848], "set_min_bas": [616, 645], "set_min_denomin": [617, 645], "set_nestable_mod": [618, 645], "set_precise_mod": [619, 645], "set_queue_timeout": [620, 645], "set_shape_array_mod": [621, 645], "set_show_func_wrapper_trace_mod": [622, 645, 848], "set_tmp_dir": [623, 645], "my_dir": [623, 645], "451": [624, 645], "in_ax": [625, 645], "out_ax": [625, 645], "thereof": [625, 645], "summaris": [625, 645], "99999998": [626, 646], "19999998": [626, 646], "00000001": [626, 646], "00300001": [626, 646], "00800001": [626, 646], "0125": [626, 646], "17294501": [626, 646], "15770318": [626, 646], "20863818": [626, 646], "90000075": [627, 646], "90000164": [627, 646], "9000032": [627, 646], "50000012e": [627, 646], "92558754": [627, 646], "92558694": [627, 646], "92558682": [627, 646], "92558861": [627, 646], "60000025e": [627, 646], "01024": [627, 646], "retain_grad": [628, 646], "func_ret": [628, 646, 854], "666666": [628, 646], "333332": [628, 646], "66666675": [628, 636, 646], "argnum": [629, 646], "933": [629, 631, 646], "jac_fn": [631, 646], "639": [632, 646], "361": [632, 646], "52565837": [633, 646], "8418861": [633, 646], "68377209": [633, 646], "value_grad": [636, 646], "42333412": [636, 646], "5333333": [636, 646], "93333334": [636, 646], "43333334": [636, 646], "0666666": [636, 646], "softsign": 637, "718281828459045": 638, "euler": 638, "141592653589793": 638, "cmp_i": 639, "cmp_isnot": 639, "for_loop": 639, "if_els": 639, "try_except": 639, "control_flow_op": 639, "to_dlpack": 640, "as_ivy_dtyp": [641, 856], "as_native_dtyp": 641, "check_float": 641, "closest_valid_dtyp": 641, "default_dtyp": [641, 844, 852], "dtype_bit": 641, "function_supported_dtyp": [641, 844, 859], "function_unsupported_dtyp": [641, 844], "infer_default_dtyp": 641, "invalid_dtyp": [641, 844], "is_hashable_dtyp": 641, "is_native_dtyp": 641, "promote_typ": [641, 844], "promote_types_of_input": [641, 844, 855], "type_promote_arrai": [641, 844], "unset_default_complex_dtyp": 641, "unset_default_float_dtyp": 641, "unset_default_int_dtyp": 641, "unset_default_uint_dtyp": 641, "valid_dtyp": 641, "defaultcomplexdtyp": 641, "defaultdtyp": 641, "defaultfloatdtyp": 641, "defaultintdtyp": 641, "defaultuintdtyp": 641, "as_ivy_dev": [642, 866], "clear_cached_mem_on_dev": 642, "dev_util": [642, 845], "function_supported_devic": 642, "function_unsupported_devic": 642, "get_all_ivy_arrays_on_dev": [642, 845], "handle_soft_device_vari": [642, 845], "num_cpu_cor": [642, 845], "num_gpu": [642, 845, 859], "num_ivy_arrays_on_dev": 642, "percent_used_mem_on_dev": 642, "print_all_ivy_arrays_on_dev": 642, "set_split_factor": [642, 848], "split_func_cal": 642, "total_mem_on_dev": [642, 845], "tpu_is_avail": 642, "unset_default_devic": [642, 845], "unset_soft_device_mod": [642, 845], "used_mem_on_dev": 642, "defaultdevic": [642, 845], "profil": 642, "save_dir": 642, "arg_info": 645, "arg_nam": 645, "cache_fn": [645, 852], "current_backend_str": [645, 859, 864, 866], "function_supported_devices_and_dtyp": 645, "function_unsupported_devices_and_dtyp": 645, "get_item": [645, 855], "get_referrers_recurs": 645, "inplace_arrays_support": 645, "inplace_variables_support": 645, "is_ivy_nested_arrai": 645, "isscalar": 645, "match_kwarg": 645, "num_arrays_in_memori": 645, "print_all_arrays_in_memori": 645, "set_item": [645, 859], "to_ivy_shap": 645, "to_native_shap": 645, "try_else_non": 645, "unset_array_mod": [645, 861], "unset_exception_trace_mod": 645, "unset_inplace_mod": 645, "unset_min_denomin": 645, "unset_nestable_mod": 645, "unset_precise_mod": 645, "unset_queue_timeout": 645, "unset_show_func_wrapper_trace_mod": 645, "vmap": [645, 870, 885], "arraymod": 645, "precisemod": [645, 844], "jac": 646, "value_and_grad": [646, 854], "feature_group_count": [647, 660, 667, 668], "oiw": [647, 660, 661, 667], "oihw": [647, 660, 663, 667], "oidhw": [647, 660, 665, 667], "dhwio": [647, 660, 661, 665, 667], "conv_general_dil": [647, 856], "conv_general_transpos": 647, "depthwis": [647, 669, 792, 806], "1428566": [647, 670], "49000001": [647, 670], "55599999": [647, 670], "21000004": [647, 670], "incom": [647, 671], "4269": [647, 671], "911": [647, 671, 848], "157": [647, 671], "753": [647, 671], "545": [647, 654, 671, 755], "547": [647, 671, 845], "963": [647, 671], "98495483": [647, 671], "0293808": [647, 671], "0159359": [647, 671], "74752808": [647, 671], "20942307": [647, 671], "3205719": [647, 671], "all_weight": [647, 672], "num_lay": [647, 672, 806], "batch_first": [647, 672, 674], "weights_transpos": [647, 672], "has_ih_bia": [647, 672], "has_hh_bia": [647, 672], "multi": [647, 648, 672, 674, 679, 792, 806, 846, 863, 870, 881, 883, 885, 889], "long": [647, 672, 673, 834, 835, 843, 844, 846, 848, 849, 856, 864, 885], "seq_len": [647, 672], "input_s": [647, 672], "h_0": [647, 672], "c_0": [647, 672], "num_direct": [647, 672], "hidden_s": [647, 672], "four": [647, 672, 830, 839, 844, 846, 851, 852, 859, 862, 867], "w_ih": [647, 672], "w_hh": [647, 672], "b_ih": [647, 672], "b_hh": [647, 672], "c_out": [647, 672], "vaswani": [647, 674], "al": [647, 674], "num_attention_head": [647, 674], "key_dim": [647, 674, 806], "value_dim": [647, 674, 806], "attention_weight": [647, 674], "unbatch": [647, 674], "nm": 647, "box": [647, 675, 676, 834], "iou_threshold": [647, 675], "max_output_s": [647, 675], "score_threshold": [647, 675], "roi_align": 647, "spatial_scal": [647, 676], "sampling_ratio": [647, 676], "23333359": [647, 677], "03946018": [647, 677], "0280633": [647, 677], "29981947": [647, 677], "29981089": [647, 677], "06345534": [647, 677], "9634552": [647, 677], "19336844": [647, 677], "09336829": [647, 677], "axisa": [648, 679], "axisb": [648, 679], "axisc": [648, 679], "293": [648, 680], "46997": [648, 680], "17157288": [648, 684], "9238795": [648, 684], "78930789": [648, 684], "59803128": [648, 684], "19127655": [648, 684], "31213903": [648, 684], "63418275": [648, 684], "84632206": [648, 684], "70548367": [648, 684], "70223427": [648, 684], "09570674": [648, 684], "63116378": [648, 684], "56109613": [648, 684], "53554028": [648, 684], "32237405": [648, 684], "43822157": [648, 684], "83906901": [648, 684], "50766778": [648, 684], "71475857": [648, 684], "48103389": [648, 684], "3676433": [648, 684], "68466955": [648, 684], "62933773": [648, 684], "77917379": [648, 684], "14264561": [648, 684], "61036086": [648, 684], "45033181e": [648, 685], "02829754e": [648, 685], "54220343e": [648, 685], "12647155e": [648, 685], "38447177e": [648, 685], "56155300e": [648, 685], "26794919": [648, 685], "7320509": [648, 685], "0012": [648, 687], "00342": [648, 687], "000565": [648, 687], "0104": [648, 687], "000981": [648, 687], "00282": [648, 687], "000766": [648, 687], "0322": [648, 687], "00237": [648, 687], "000151": [648, 687], "00101": [648, 687], "00019": [648, 687], "0214": [648, 687], "00171": [648, 687], "0107": [648, 687], "0167": [648, 687], "0472": [648, 687], "0536": [648, 687], "0177": [648, 687], "000429": [648, 687], "00762": [648, 687], "frobeniu": [648, 689], "nuclear": [648, 689], "induc": [648, 689], "ranl": [648, 689], "47722558": [648, 689], "776": [648, 689], "6000004": [648, 689], "118": [648, 690], "moor": [648, 694], "penros": [648, 694], "31622776": [648, 695], "94868332": [648, 695], "1622777": [648, 695], "42718887": [648, 695], "deteremin": [648, 696], "logsabsdet": [648, 696], "subject": [648, 696], "unset_backend": [648, 696, 815, 840], "ordin": [648, 697], "b2": [648, 697], "usvh": [648, 698], "cetera": [648, 698], "driver": [648, 699, 870], "gesvd": [648, 699], "gesvdj": [648, 699], "gesvda": [648, 699], "86217213": [648, 699], "31816804": [648, 699], "615": [648, 699], "ss": [648, 699], "25994301": [648, 699], "16403675": [648, 699], "61529762": [648, 699], "51231241": [648, 699], "39777088": [648, 699], "15413129": [648, 699], "1029852": [648, 699], "01383495": [648, 699], "86647356": [648, 699], "7786541": [648, 699], "55970621": [648, 699], "16857576": [648, 699], "86412698": [648, 699], "37566757": [648, 699], "88477993": [648, 699], "95925522": [648, 699], "6444726": [648, 699], "54687881": [648, 699], "16134834": [648, 699], "35037804": [648, 699], "31025076": [648, 699], "35769391": [648, 699], "transposit": [648, 700], "0x": [648, 703], "Such": [648, 703, 852, 859], "alexandr": [648, 703], "theophil": [648, 703], "dot_product": [648, 704], "9000001": [648, 705], "64158917": [648, 705], "skew": [648, 706], "60309976": [649, 707], "6666193": [649, 707], "01348412": [649, 707], "05393649": [649, 707], "49992943": [649, 707], "83330965": [649, 707], "02136981": [649, 707], "32844672": [649, 707], "26561815": [649, 707], "22314337": [649, 707], "08916873": [649, 708, 709], "44832274": [649, 709], "75646281": [649, 709], "13862944": [649, 709], "57564628": [649, 709], "ssim_loss": 649, "ssim": [649, 710], "99989986": [649, 710], "wasserstein_loss_discrimin": 649, "p_real": [649, 711], "p_fake": [649, 711], "wasserstein": [649, 711, 712], "discrimin": [649, 711], "wasserstein_loss_gener": 649, "pred_fak": [649, 712], "honor": [650, 720], "beyond": [650, 721, 827, 847, 856, 891], "famili": [650, 724], "intxx": [650, 724], "floatxx": [650, 724], "rep": [650, 726], "fomaml_step": 651, "inner_cost_fn": [651, 729, 730, 731], "outer_cost_fn": [651, 729, 730], "inner_grad_step": [651, 729, 730, 731], "inner_learning_r": [651, 729, 730, 731], "inner_optimization_step": [651, 729, 730, 731], "inner_batch_fn": [651, 729, 730], "outer_batch_fn": [651, 729, 730], "average_across_step": [651, 729, 730], "inner_v": [651, 729, 730], "keep_inner_v": [651, 729, 730], "outer_v": [651, 729, 730], "keep_outer_v": [651, 729, 730], "return_inner_v": [651, 729, 730, 731], "num_task": [651, 729, 730, 731], "maml": [651, 729, 730], "0x7f7dd4471510": [651, 729, 730, 731], "maml_step": 651, "vanilla": [651, 730, 868, 885], "_variabl": [651, 730, 731], "sub_batch": [651, 730], "40069818": [651, 730], "13723135": [651, 730], "reptile_step": 651, "cost_fn": [651, 731], "reptil": [651, 731], "batch_in": [651, 731], "4485182": [651, 731], "139": [651, 731], "9569855": [651, 731], "9880483": [651, 731], "01766968": [651, 731], "02197957": [651, 731], "02197981": [651, 731], "all_nested_indic": 652, "include_nest": [652, 732], "_index": [652, 732, 743], "_base": [652, 732, 742, 743, 855], "themselv": [652, 732, 842, 844, 845, 847, 852, 856, 868, 882, 891], "863": [652, 732, 845], "672": [652, 732], "482": [652, 732], "674": [652, 732], "341": [652, 732], "copy_nest": 652, "to_mut": [652, 733, 744], "deepli": [652, 733, 836, 870, 885], "copied_nest": [652, 733], "1337": [652, 733, 744], "duplicate_array_index_chain": 652, "index_nest": [652, 852], "insert_into_nest_at_index": 652, "insert_into_nest_at_indic": 652, "special_squar": [652, 738], "6666666666666667": [652, 738], "special_pow": [652, 738], "linear_model": [652, 738], "map_nest_at_index": 652, "_result": [652, 739, 749], "hh": [652, 739, 744], "map_nest_at_indic": 652, "ub": [652, 740], "tb": [652, 740], "multi_index_nest": 652, "nested_ani": 652, "check_nest": [652, 742, 743], "nested_argwher": 652, "stop_after_n_found": [652, 743], "nested_indic": [652, 743], "nested_map": [652, 845, 852], "_tuple_check_fn": [652, 744], "_list_check_fn": [652, 744], "_dict_check_fn": [652, 744], "wherebi": [652, 744, 833, 882], "ah": [652, 744], "bh": [652, 744], "ch": [652, 744], "dh": [652, 744, 838], "eh": [652, 744], "gh": [652, 744, 834, 849], "ih": [652, 744], "1338": [652, 744], "nested_multi_map": 652, "index_chain": [652, 745], "nest0": [652, 745], "ivy_arrai": [652, 745, 839, 856], "unappli": [652, 745], "prune_empti": 652, "prune_nest_at_index": 652, "prune_nest_at_indic": 652, "set_nest_at_index": 652, "set_nest_at_indic": 652, "xyz": [652, 750], "pqr": [652, 750], "mini": [653, 751, 806, 809], "uniformli": [654, 753, 755], "22346112": [654, 754], "0922": [654, 754], "9213753": [654, 754], "12818667": [654, 754], "799": [654, 754], "469": [654, 754], "287": [654, 754], "0366": [654, 754], "26431865": [654, 755], "475": [654, 755], "878": [654, 755], "861": [654, 755], "929": [654, 755], "789": [654, 755], "519": [654, 755], "0435": [654, 755], "381": [654, 755], "4608004": [654, 755], "8458502": [654, 755], "67270088": [654, 755], "31128597": [654, 755], "394": [654, 757], "zeroel": [655, 761], "fourth": [656, 763], "1141": [656, 763], "8101": [656, 763], "9298": [656, 763], "8460": [656, 763], "2119": [656, 763], "3519": [656, 763], "6252": [656, 763], "4033": [656, 763], "7443": [656, 763], "2577": [656, 763], "3707": [656, 763], "0545": [656, 763], "3238": [656, 763], "5944": [656, 763], "0775": [656, 763], "4327": [656, 763], "62519997": [656, 763], "40329999": [656, 763], "59439999": [656, 763], "74430001": [656, 763], "81010002": [656, 763], "84600002": [656, 763], "92979997": [656, 763], "einstein": [658, 773, 820], "117": [658, 773], "intend": [658, 779, 788, 805, 838, 851, 854, 883, 885, 889, 890], "07472222": [658, 780], "00666667": [658, 780], "08966666": [658, 780], "simplicit": [659, 781, 782], "ivy_test": [785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 833, 834, 835, 838, 841, 843, 849, 857], "test_ivi": [785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 833, 834, 835, 841, 843, 849, 857, 859], "assert_all_clos": [785, 857], "ret_np": [785, 787, 857], "ret_from_gt_np": [785, 857], "ground_truth_backend": [785, 787, 788, 797, 798, 831, 849, 857], "mark": [785, 830, 833, 835, 838, 859, 864], "assert_same_typ": 785, "ret_from_target": 785, "ret_from_gt": 785, "backend_to_test": [785, 787, 831, 849, 857], "gt_backend": 785, "with_backend": [785, 815], "assert_same_type_and_shap": 785, "this_key_chain": 785, "check_unsupported_devic": 785, "input_devic": 785, "all_as_kwargs_np": [785, 787], "check_unsupported_device_and_dtyp": 785, "input_dtyp": [785, 787, 797, 831, 849, 857, 859], "check_unsupported_dtyp": 785, "test_unsupported_funct": 785, "value_test": 785, "ret_np_flat": 785, "ret_np_from_gt_flat": 785, "specific_tolerance_dict": 785, "ret_from_np_gt_flat": 785, "available_framework": 786, "function_test": 787, "args_to_contain": 787, "array_arg": [787, 852], "args_to_frontend": 787, "frontend_array_fn": 787, "arrays_to_frontend": 787, "as_list": 787, "convtru": 787, "nativeclass": 787, "counter": [787, 868], "create_args_kwarg": 787, "args_np": 787, "arg_np_val": 787, "args_idx": 787, "kwargs_np": 787, "kwarg_np_val": 787, "kwargs_idx": 787, "test_flag": [787, 831, 849, 857, 859], "on_devic": [787, 797, 831, 849, 857], "flatten_and_to_np": 787, "flatten_frontend": 787, "flatten_frontend_fw_to_np": 787, "frontend_ret": [787, 857], "isscalar_func": 787, "is_native_array_func": 787, "to_numpy_func": 787, "flatten_frontend_to_np": 787, "get_frontend_ret": 787, "frontend_fn": 787, "frontend_array_funct": 787, "precision_mod": [787, 797, 798, 849], "test_trac": [787, 797, 798, 831, 838, 849], "test_trace_each": [787, 797, 798], "get_ret_and_flattened_np_arrai": 787, "gradient_incompatible_funct": 787, "gradient_test": [787, 859], "rtol_": [787, 831, 849], "atol_": [787, 831, 849, 857], "tolerance_dict": 787, "gradient_unsupported_dtyp": 787, "kwargs_to_args_n_kwarg": 787, "num_positional_arg": [787, 797, 798, 831, 849, 857, 859], "port": [787, 876], "test_frontend_funct": [787, 857], "fn_tree": [787, 788, 798, 831, 849, 856, 857, 859], "gt_fn_tree": [787, 798], "test_valu": [787, 857, 859], "frontend_function_flag": [787, 797], "functiontestflag": [787, 797, 831, 849], "with_out": [787, 797, 831, 849, 857, 859], "instance_method": [787, 797, 831, 849, 859], "as_vari": [787, 797, 831, 849, 857, 859], "namespac": [787, 833, 844, 853, 856, 857, 860, 864, 869], "arg_": 787, "test_frontend_method": [787, 857], "init_input_dtyp": [787, 857], "method_input_dtyp": [787, 857], "init_flag": [787, 857, 859], "method_flag": [787, 797, 857, 859], "init_all_as_kwargs_np": [787, 857], "method_all_as_kwargs_np": [787, 857], "frontend_method_data": [787, 857], "init_as_variable_flag": [787, 798], "dictat": [787, 839, 846, 851, 855], "init_num_positional_arg": [787, 798], "init_native_array_flag": 787, "with_v": 787, "ret_gt": 787, "test_funct": [787, 831, 834, 835, 843, 849, 857, 859], "fn_name": [787, 788, 798, 831, 840, 849, 857, 859], "return_flat_np_arrai": 787, "as_variable_flag": [787, 798, 859], "native_array_flag": [787, 798, 859], "container_flag": [787, 797, 798, 859], "test_function_backend_comput": 787, "test_function_ground_truth_comput": 787, "arg_np_arrai": 787, "arrays_args_indic": 787, "arrays_kwargs_indic": 787, "kwarg_np_arrai": 787, "test_gradient_backend_comput": 787, "test_gradient_ground_truth_comput": 787, "test_method": 787, "method_nam": [787, 796, 798, 857], "init_with_v": 787, "method_with_v": 787, "test_gradi": [787, 797, 798, 831, 849, 859], "method_as_variable_flag": [787, 798], "method_num_positional_arg": [787, 798], "method_native_array_flag": 787, "method_container_flag": [787, 798], "test_method_backend_comput": 787, "test_method_ground_truth_comput": 787, "org_con_data": 787, "args_np_method": 787, "met_arg_np_v": 787, "met_args_idx": 787, "kwargs_np_method": 787, "met_kwarg_np_v": 787, "met_kwargs_idx": 787, "v_np": 787, "traced_if_requir": 787, "wrap_frontend_function_arg": 787, "holder": 788, "current_frontend_config": 788, "0x7f7dc82dde10": 788, "interruptedtest": 788, "test_interrupt": 788, "baseexcept": 788, "tri": [788, 844], "testdata": 788, "supported_device_dtyp": 788, "is_method": 788, "setup_api_test": 788, "test_data": 788, "setup_frontend_test": 788, "teardown_api_test": 788, "teardown_frontend_test": 788, "hypothesis_help": [789, 790, 791, 792, 793], "array_help": 790, "array_and_broadcastable_shap": 790, "searchstrategi": [790, 791, 792, 793, 797, 798, 859], "array_bool": [790, 859], "min_valu": [790, 791, 792, 793, 831, 849, 857, 859], "max_valu": [790, 791, 792, 793, 857, 859], "ex": [790, 791, 792, 793, 798, 843, 879], "strategi": [790, 791, 792, 793, 797, 798, 833, 857], "array_helpers_dtype_info_help": 790, "kind_dtyp": [790, 792], "array_indices_axi": 790, "array_dtyp": [790, 791, 859], "indices_dtyp": 790, "get_dtyp": [790, 791, 831, 849, 857, 859], "abs_smallest_v": [790, 792, 793], "large_abs_safety_factor": [790, 792, 793, 831, 849, 857, 859], "small_abs_safety_factor": [790, 792, 793, 831, 849, 857], "safety_factor_scal": [790, 792, 793, 857, 859], "disable_random_axi": 790, "axis_zero": 790, "allow_inf": [790, 793, 857, 859], "min_num_dim": [790, 792, 857, 859], "max_num_dim": [790, 792, 857, 859], "min_dim_s": [790, 792, 857, 859], "max_dim_s": [790, 792, 857], "first_dimension_onli": 790, "indices_same_dim": 790, "valid_bound": 790, "safeti": [790, 792, 793, 885], "0002": [790, 793], "hypothesi": [790, 792, 798, 833, 835, 838, 843, 853], "65536": 790, "44758124e": [790, 859], "array_indices_put_along_axi": 790, "values_dtyp": 790, "array_valu": [790, 859], "allow_nan": [790, 793, 859], "allow_subnorm": [790, 793, 859], "exclude_min": [790, 793, 859], "exclude_max": [790, 793], "subnorm": [790, 793], "get_shap": [790, 792, 857, 859], "1806": 790, "36912": 790, "6955": 790, "59576": 790, "arrays_and_ax": 790, "available_dtyp": [790, 791, 831, 849, 857, 859], "allow_non": [790, 792, 857, 859], "return_dtyp": 790, "force_int_axi": 790, "26e": 790, "10e": 790, "24322108": 790, "26446279e": 790, "96046448e": 790, "008": 790, "17549435e": 790, "038": 790, "06541027e": 790, "13725760e": 790, "07143888": 790, "arrays_for_pool": 790, "min_dim": 790, "max_dim": 790, "min_sid": 790, "max_sid": 790, "explicit_or_str_pad": 790, "only_explicit_pad": 790, "return_dil": 790, "mixed_fn_compo": [790, 791, 792, 793, 859], "return_data_format": 790, "cond_data_gen_help": 790, "create_concatenable_arrays_dtyp": 790, "min_num_arrai": 790, "max_num_arrai": 790, "concat_dim": 790, "common_shap": [790, 859], "stackabl": 790, "given_common_shap": 790, "create_nested_input": 790, "leaf_valu": 790, "dtype_and_valu": [790, 831, 849, 857, 859], "num_arrai": [790, 791, 857, 859], "shared_dtyp": [790, 791, 857], "ret_shap": 790, "array_api_dtyp": [790, 791], "shape_kei": 790, "37915": 790, "6322": 790, "26765": 790, "12413": 790, "26986": 790, "34665": 790, "000e": 790, "711e": 790, "100e": 790, "955e": [790, 859], "40817": 790, "56193": 790, "29200": 790, "5851": 790, "9746": 790, "9604645e": 790, "103": 790, "41795": 790, "1170789994": 790, "44251": 790, "44209": 790, "433075925": 790, "24791": 790, "24691": 790, "24892": 790, "16711": 790, "972": 790, "15357": 790, "72057594037927936": 790, "dtype_array_queri": 790, "allow_mask": 790, "allow_neg_step": 790, "dtype_array_query_v": 790, "dtype_values_axi": [790, 859], "min_axi": 790, "max_axi": 790, "valid_axi": 790, "allow_neg_ax": 790, "min_axes_s": 790, "max_axes_s": 790, "force_tuple_axi": 790, "29788": 790, "62222885e": 790, "68281172e": 790, "257j": 790, "40129846e": 790, "90000000e": 790, "63426649e": 790, "91931887e": 790, "29488e": 790, "14361019e": 790, "12445": 790, "einsum_help": 790, "get_first_solve_batch_matrix": 790, "choose_adjoint": 790, "get_second_solve_batch_matrix": 790, "get_first_solve_matrix": 790, "allow_simplifi": 790, "choose_sid": 790, "xa": 790, "get_second_solve_matrix": 790, "list_of_s": 790, "sampled_from": [790, 857, 859], "min_siz": [790, 792, 798, 859], "max_siz": [790, 792, 798, 859], "size_bound": [790, 859], "999999999999999": 790, "9394938006792373": 790, "mutually_broadcastable_shap": 790, "num_shap": 790, "base_shap": 790, "dtype_help": 791, "univers": [791, 856, 874], "cast_filt": 791, "cast_filter_help": 791, "current_backend": [791, 815, 833, 840, 848, 852, 857, 860, 864], "get_castable_dtyp": 791, "castabl": 791, "prune_funct": 791, "intersect": [791, 843, 859], "signed_integ": 791, "real_and_complex": 791, "float_and_complex": 791, "general_help": 792, "broadcasterror": 792, "apply_safety_factor": 792, "dims_and_offset": 792, "ensure_dim_uniqu": 792, "embedding_help": 792, "general_helpers_dtype_info_help": 792, "get_axi": [792, 859], "allow_neg": 792, "sort_valu": 792, "force_tupl": 792, "force_int": 792, "assertionerror": [792, 831, 838, 848, 849, 857, 859], "get_bound": [792, 859], "get_mean_std": 792, "matrix_is_st": 792, "cond_limit": 792, "instabl": [792, 831, 844, 849], "computation": [792, 834], "prone": [792, 844], "thumb": 792, "gradual": 792, "collinear": 792, "reshape_shap": [792, 859], "sizes_": 792, "two_broadcastable_shap": 792, "x_and_filt": 792, "number_help": 793, "arbitrarili": [793, 867], "safety_factor": 793, "backend_proc": 794, "input_queu": 794, "output_queu": 794, "frontend_proc": 794, "pipeline_help": 795, "backendhandl": 795, "update_backend": [795, 857], "backendhandlermod": 795, "enum": [795, 818], "setbackend": 795, "withbackend": 795, "withbackendcontext": 795, "get_frontend_config": 795, "frontendmethoddata": 796, "ivy_init_modul": 796, "framework_init_modul": 796, "init_nam": 796, "test_parameter_flag": 797, "dynamicflag": [797, 798], "frontendfunctiontestflag": [797, 849], "with_copi": 797, "generate_frontend_arrai": [797, 798, 849], "testflag": 797, "apply_flag": 797, "args_to_iter": 797, "frontendinittestflag": 797, "frontendmethodtestflag": 797, "test_cython_wrapp": [797, 798], "initmethodtestflag": 797, "methodtestflag": 797, "build_flag": 797, "frontend_init_flag": 797, "frontend_method_flag": 797, "function_flag": 797, "init_method_flag": 797, "testing_help": 798, "handle_exampl": [798, 859], "test_exampl": [798, 859], "test_frontend_exampl": [798, 859], "test_method_exampl": [798, 859], "test_frontend_method_exampl": [798, 859], "given_kwarg": 798, "handle_frontend_method": [798, 857, 859], "class_tre": [798, 857], "init_tre": [798, 857], "init_native_arrai": 798, "_as_varaible_strategi": 798, "method_native_arrai": 798, "test_inplac": [798, 859], "_given_kwarg": 798, "test_compil": 798, "handle_frontend_test": [798, 857, 859], "alias": [798, 833, 856, 857], "number_positional_arg": [798, 857], "test_with_out": [798, 857, 859], "test_with_copi": 798, "handle_method": [798, 818, 859], "method_tre": [798, 857, 859], "_gradient_strategi": 798, "handle_test": [798, 831, 849, 859], "test_instance_method": [798, 859], "num_positional_args_help": 798, "num_positional_args_method": 798, "geglu": 802, "leakyrelu": 802, "logsoftmax": 802, "from_flax_modul": 803, "native_modul": 803, "params_fx": 803, "rng_seed": 803, "constructor_arg": 803, "constructor_kwarg": 803, "instance_arg": 803, "instance_kwarg": 803, "flax": [803, 869, 870, 876, 885], "from_haiku_modul": 803, "params_hk": 803, "from_paddle_modul": 803, "from_torch_modul": 803, "to_keras_modul": 803, "native_module_class": 803, "modulehelp": [804, 808], "create_vari": [805, 868], "var_shap": [805, 868], "fan_out": [805, 868], "fan_in": [805, 868], "rectangular": 805, "firstlayersiren": 805, "siren": 805, "glorotuniform": [805, 806, 868], "glorot": 805, "xavier": 805, "neuron": 805, "w_1x_1": 805, "w_2x_2": 805, "w_nx_n": 805, "w_i": 805, "kaimingnorm": 805, "fan_mod": [805, 868], "kaim": 805, "he": 805, "negative_slop": 805, "fan": 805, "propog": 805, "fan_sum": [805, 868], "Ones": 805, "randomnorm": 805, "stddev": 805, "w0": 805, "wlim": 805, "predefin": 805, "fan_avg": 805, "adaptiveavgpool1d": 806, "avgpool1d": 806, "implicit": [806, 842, 847, 856, 859, 864, 885], "avgpool2d": 806, "avgpool3d": 806, "e501": 806, "filter_s": 806, "weight_initi": [806, 868], "bias_initi": [806, 868], "0x7f7dd44aec80": 806, "0x7f7dd44ad660": 806, "conv1dtranspos": 806, "0x7f7dd44ae920": 806, "0x7f7dd44aea10": 806, "filter_shap": 806, "0x7f7dd44ae9b0": 806, "0x7f7dd44afca0": 806, "0x7f7dd44afd30": 806, "0x7f7dd44af640": 806, "0x7f7dd44acfd0": 806, "0x7f7dd4348cd0": 806, "conv3dtranspos": 806, "0x7f7dd4348d30": 806, "0x7f7dd4348ee0": 806, "depthwiseconv2d": 806, "num_channel": 806, "0x7f7dd44af610": 806, "0x7f7dd44ad840": 806, "bernoul": 806, "num_embed": 806, "embedding_dim": 806, "padding_idx": 806, "lookup": 806, "num_embeddingss": 806, "renorm": 806, "extra_repr": 806, "insensit": 806, "return_st": 806, "0x7f7dd4349000": 806, "get_initial_st": 806, "0x7f7dd44ad810": 806, "0x7f7dd44acf70": 806, "maxpool1d": 806, "maxpool3d": 806, "multiheadattent": 806, "embed_dim": 806, "head_dim": 806, "dropout_r": 806, "use_proj_bia": 806, "attention_ax": 806, "build_mod": [806, 807, 808], "on_init": [806, 808], "parallel": [806, 841, 885, 889, 890], "binarycrossentropyloss": 807, "store_var": [807, 808], "with_partial_v": [807, 808], "logpoissonloss": 807, "modulemeta": 808, "temporarili": [808, 831, 838, 849], "from_cal": 808, "module_dict": 808, "register_buff": 808, "register_paramet": 808, "weights_path": 808, "randomness_factor": 808, "with_edge_label": 808, "with_arg_label": 808, "with_output_label": 808, "output_connected_onli": 808, "highlight_subgraph": 808, "trace_kwarg": 808, "_unified_ivy_graph": 808, "_call": 808, "num_featur": 809, "trail": 809, "layernorm": 809, "normalized_shap": 809, "elementwise_affin": 809, "set_stat": [810, 868], "adamw": 810, "weight_decai": 810, "init_on_first_step": 810, "fallback_to_non_trac": 810, "ignore_miss": 810, "_step": [810, 868], "stochast": [810, 885], "sub_modul": 811, "check_al": 812, "check_all_or_any_fn": 812, "check_ani": 812, "check_dev_correct_format": 812, "check_dimens": 812, "check_elem_in_list": [812, 852, 855, 856], "elem": 812, "check_equ": [812, 856], "check_exist": 812, "check_fals": 812, "check_gather_input_valid": 812, "check_gather_nd_input_valid": 812, "check_great": 812, "allow_equ": [812, 848], "check_inplace_sizes_valid": [812, 855], "check_isinst": 812, "allowed_typ": 812, "check_kernel_padding_s": 812, "padding_s": 812, "check_less": [812, 848], "check_one_way_broadcast": 812, "check_same_dtyp": 812, "check_shapes_broadcast": 812, "check_tru": 812, "check_unsorted_segment_valid_param": 812, "ast_help": 814, "importtransform": 814, "nodetransform": 814, "impersonate_import": 814, "tree": [814, 844], "local_ivy_id": 814, "visit_import": 814, "visit_importfrom": 814, "ivyload": 814, "loader": [814, 867, 870], "exec_modul": 814, "ivypathfind": 814, "metapathfind": 814, "find_spec": 814, "fullnam": 814, "contextmanag": 815, "choose_random_backend": 815, "global_backend": 815, "dynamic_backend_convert": 815, "backend_stack": [815, 864], "prevent_access_loc": 815, "previous_backend": [815, 840], "Or": [815, 827, 829, 834, 855, 867], "set_backend_to_specific_vers": 815, "set_jax_backend": 815, "set_mxnet_backend": 815, "mx": 815, "set_numpy_backend": 815, "set_paddle_backend": 815, "set_tensorflow_backend": 815, "set_torch_backend": 815, "sub_backend_handl": 816, "clear_sub_backend": 816, "find_available_sub_backend": 816, "sub_backends_loc": 816, "fn_name_from_version_specific_fn_nam": 816, "fn_name_from_version_specific_fn_name_sub_backend": 816, "sub_backend_vers": 816, "backend_vers": [816, 831, 844, 849], "set_sub_backend": 816, "sub_backend_str": 816, "set_sub_backend_to_specific_vers": 816, "sub_backend": 816, "unset_sub_backend": 816, "check_for_binari": 817, "cleanup_and_fetch_binari": [817, 834], "clean": [817, 835, 860, 864, 865, 867], "decorator_util": 818, "callvisitor": 818, "nodevisitor": 818, "visit_cal": 818, "transposetyp": 818, "no_transpos": 818, "apply_transpos": 818, "pt_to_tf": 818, "get_next_func": 818, "handle_get_item": 818, "handle_set_item": 818, "handle_transpose_in_input_and_output": 818, "retrieve_object": 818, "store_config_info": 818, "dynamic_import": 819, "import_modul": [819, 864], "einsum_pars": 820, "convert_interleaved_input": 820, "interleav": 820, "convert_subscript": 820, "old_sub": 820, "symbol_map": 820, "subscript": [820, 821], "oe": 820, "ellipsi": [820, 821], "find_output_shap": 820, "find_output_str": 820, "canon": 820, "gen_unused_symbol": 820, "abd": [820, 821], "get_symbol": 820, "letter": 820, "resort": 820, "unicod": 820, "charact": [820, 856, 875], "chr": 820, "surrog": 820, "\u0155": 820, "20000": 820, "\u4eac": 820, "has_valid_einsum_chars_onli": 820, "einsum_str": 820, "abaz": 820, "\u00f6ver": 820, "is_valid_einsum_char": 820, "\u01f5": 820, "legalise_einsum_expr": 820, "reproduct": [820, 821], "pars": [820, 821, 841, 846, 870], "intak": 820, "contract_path": 820, "parse_einsum_input": [820, 821], "einsum_eqn": 820, "legalis": 820, "legalise_einsum_eqn": 820, "za": [820, 821], "xza": [820, 821], "xz": [820, 821], "possibly_convert_to_numpi": 820, "myshap": 820, "__main__": 820, "0x10f850710": 820, "einsum_path_help": 821, "can_dot": 821, "idx_remov": 821, "bla": 821, "benefici": 821, "movement": 821, "costli": 821, "gemm": 821, "ijj": 821, "ddot": 821, "ikj": 821, "compute_size_by_dict": 821, "idx_dict": 821, "abbc": 821, "find_contract": 821, "input_set": 821, "output_set": 821, "lh": 821, "rh": 821, "new_result": 821, "idx_contract": 821, "iset": 821, "oset": 821, "bdc": 821, "flop_count": 821, "num_term": 821, "size_dictionari": 821, "flop": [821, 825], "greedy_path": 821, "memory_limit": 821, "exhaust": [821, 855, 859, 882, 891], "indices_remov": 821, "priorit": [821, 833, 858, 862], "hadamard": 821, "cubic": 821, "greedi": 821, "idx_siz": 821, "optimal_path": 821, "siev": 821, "input_str": 821, "output_str": 821, "parse_possible_contract": 821, "path_cost": 821, "naive_cost": 821, "propos": [821, 835, 856, 862, 885], "intermediari": [821, 840], "unoptim": 821, "new_input_set": 821, "update_other_result": 821, "provision": 821, "_parse_possible_contract": 821, "mod_result": 821, "inplaceupdateexcept": 822, "include_backend": [822, 848], "ivyattributeerror": [822, 848], "attributeerror": [822, 848, 866], "ivybroadcastshapeerror": [822, 848], "ivydeviceerror": 822, "ivydtypepromotionerror": [822, 848], "ivyindexerror": [822, 848], "ivyinvalidbackendexcept": 822, "ivynotimplementedexcept": [822, 848], "notimplementederror": 822, "ivyvalueerror": [822, 848], "handle_except": [822, 851, 853], "add_array_spec": 823, "fn_array_spec": 823, "set_logging_mod": 824, "debug": [824, 830, 834, 835, 842, 843, 854, 859, 862, 867, 885, 893], "unset_logging_mod": 824, "print_stat": 825, "viz": 825, "snakeviz": 825, "bonu": 825, "cprofil": 825, "tensorflow_profile_start": 825, "logdir": 825, "host_tracer_level": 825, "python_tracer_level": 825, "device_tracer_level": 825, "delay_m": 825, "toggl": [825, 835], "timestamp": 825, "awai": [825, 827, 883, 885], "millisecond": 825, "guess": 825, "tensorflow_profile_stop": 825, "torch_profiler_init": 825, "schedul": [825, 843, 870, 885, 892], "on_trace_readi": 825, "record_shap": 825, "profile_memori": 825, "with_stack": 825, "with_flop": 825, "with_modul": 825, "experimental_config": 825, "profileract": 825, "record_and_sav": 825, "dealloc": 825, "record": [825, 834, 870, 886], "callstack": 825, "aten": 825, "torchscript": [825, 864, 872, 892], "_experimentalconfig": 825, "kineto": 825, "torch_profiler_start": 825, "torch_profiler_stop": 825, "cprint": [826, 864], "frameworkus": 827, "source_to_sourc": 827, "docker": [827, 831, 832, 849], "challeng": [827, 833, 840, 891], "pull": [827, 828, 830, 833, 834, 838, 846, 850, 860, 862, 870, 871, 876], "transpileai": 827, "llc": 827, "faq": [827, 841], "brief": [827, 855, 859], "jax_fn": 827, "jax_x": 827, "torch_x": 827, "torch_fn": 827, "shorter": [827, 866], "ensp": 827, "customiz": [827, 841], "15c235f": 827, "deepmind_perceiver_io": 827, "sm_framework": 827, "segmentation_model": 827, "sm": 827, "torch_sm": 827, "iou_scor": 827, "rax": 827, "torch_rax": 827, "poly1_softmax_loss": 827, "madmom": 827, "madmon": 827, "torch_madmom": 827, "freq": 827, "audio": 827, "hz2midi": 827, "torch_loss": 827, "maxpooling1d": 827, "pool_siz": 827, "tf_kornia": 827, "tf_rax": 827, "tf_madmom": 827, "tf_loss": 827, "_forward_classifi": [827, 879], "forward_classifi": [827, 879], "hk_eff_encod": 827, "dummy_x": 827, "jax_sm": 827, "jax_madmom": 827, "jax_loss": 827, "np_kornia": 827, "np_sm": 827, "np_rax": 827, "np_loss": 827, "migrat": 827, "instantli": [827, 879], "motiv": [827, 866, 875], "contextu": 827, "explos": [827, 873, 875], "adher": [827, 838, 844, 847, 851, 862, 864, 869, 874, 875, 881, 882, 891], "orient": 827, "contributor": [827, 828, 831, 833, 834, 835, 849, 856, 863, 885], "believ": [827, 835, 875], "everyon": [827, 828, 833, 834, 835, 870, 876], "feedback": [827, 833, 843], "appreci": [827, 836], "dashboard": [827, 887], "grow": [827, 830, 836, 885, 893], "mission": [827, 836, 875, 887], "season": 827, "fellow": 827, "credit": 827, "accompani": 827, "lenton2021ivi": 827, "inter": 827, "author": [827, 833, 835, 883, 887], "lenton": 827, "daniel": 827, "pardo": 827, "fabio": 827, "falck": 827, "fabian": 827, "jame": 827, "stephen": 827, "clark": 827, "ronald": 827, "journal": 827, "arxiv": 827, "preprint": 827, "2102": 827, "02886": 827, "year": [827, 838, 870, 874, 876, 885], "strongli": [828, 834, 856, 891, 892], "engag": [828, 835, 836, 875], "skill": [828, 836, 887], "veteran": 828, "journei": [828, 836], "effort": [828, 833, 870, 875, 881, 885, 891], "board": [828, 841], "stage": [828, 835, 837, 838, 841, 859, 875, 885], "excit": [828, 837, 875], "reward": [828, 836], "badg": [828, 836, 843, 893], "program": [828, 855, 882, 883, 885, 888, 889, 892], "climb": [828, 832], "Be": [829, 841], "awar": [829, 841, 848, 850], "linux": [829, 834, 835, 841, 888, 890], "regularli": [829, 841, 843], "internet": [829, 841], "codespac": [829, 841, 849], "make_doc": 829, "sh": [829, 834, 835, 838, 843], "pwd": 829, "ssh": [829, 843], "make_docs_without_dock": [829, 841], "award": 830, "formal": 830, "dynamo": [830, 893], "earn": [830, 836], "thoroughli": [830, 838], "valuabl": [830, 833, 835], "merg": [830, 833, 835, 838, 843, 856, 885, 893], "meet": [830, 836, 856], "wizard": [830, 893], "inspector": [830, 893], "acknowledg": [830, 836], "honour": 830, "dilig": 830, "bronz": [830, 836, 893], "silver": [830, 836, 893], "gold": [830, 836, 870, 893], "expertis": [830, 836, 887], "assist": [831, 849], "runtimeerror": [831, 849], "logaddexp2_cpu": [831, 849], "falsifi": [831, 838, 849, 859], "test_logaddexp2": [831, 849], "backend_fw": [831, 849, 857], "dtype_and_x": [831, 849, 857, 859], "reproduce_failur": [831, 838, 849, 853, 859], "axicy2bkaamobaar2waaaacvaai": [831, 849], "decoartor": [831, 849], "someth": [831, 835, 840, 849, 850, 860, 867, 868, 870, 871, 891], "with_unsupported_dtyp": [831, 844, 849, 856], "25830078125": [831, 849], "258544921875": [831, 849], "test_acosh": [831, 849], "axicy2baabyqwqgiaabdaai": [831, 849], "quit": [831, 835, 839, 846, 847, 849, 852, 853, 859, 862, 885, 891], "41421356": [831, 849], "41421356e": [831, 849], "34078079e": [831, 849], "154": [831, 849], "test_ab": [831, 834, 849, 859], "000j": [831, 849], "154j": [831, 849], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [831, 849], "thread": [831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 867, 885], "pycharm": [831, 857, 859], "steep": 832, "curv": 832, "realpython": 832, "pyn": 832, "exchang": [832, 875, 881, 883], "pilot": [832, 871], "stuck": [832, 833], "spell": 832, "sound": [832, 843, 863], "peopl": [832, 834, 835, 837, 885, 887], "frequent": [833, 835, 840, 885], "outlin": [833, 834, 835, 837, 842, 844, 847, 852, 855, 856, 859], "broad": [833, 887], "individu": [833, 835, 838, 840, 844, 852, 856, 885, 888, 891, 892], "clearli": [833, 835, 846, 857, 859, 875, 889], "straightforward": [833, 836, 867], "lie": 833, "urgent": 833, "encourag": [833, 836, 850, 870, 875], "tackl": [833, 836, 856], "categoris": [833, 838, 856], "comfort": [833, 834, 848], "linkag": 833, "pr": [833, 835, 836, 838, 850, 856, 857, 859], "confid": 833, "submit": [833, 850], "mindspor": 833, "simpler": [833, 835, 850, 878, 886, 892], "member": [833, 835, 856, 871, 875], "comment": [833, 834, 835, 838, 844, 850, 856, 858, 862], "composition": 833, "feasibl": [833, 843, 859, 875, 878], "pend": 833, "helpfulli": [833, 862, 883], "problemat": [833, 834], "unimpl": 833, "issue_link": 833, "alias_nam": 833, "notic": [833, 839, 843, 849, 850, 859, 862, 878], "push": [833, 835, 836, 838, 857, 859, 891], "liner": 833, "meanwhil": [833, 843], "reselect": 833, "faithfulli": 833, "creation_routin": [833, 857], "indexing_routin": 833, "ma": 833, "manipulation_routin": 833, "mathematical_funct": [833, 856], "sorting_searching_count": 833, "ufunc": [833, 856], "matrix_and_vector_product": 833, "matrix_eigenvalu": 833, "norms_and_other_numb": 833, "solving_equations_and_inverting_matric": 833, "gleam": 833, "uncom": 833, "test_numpy_inn": 833, "test_frontend": [833, 843, 849, 857], "unsur": [833, 859], "refrain": 833, "checkbox": [833, 834], "yourself": [833, 835, 850, 859, 862], "aforement": 833, "parent": [833, 843, 866], "arraywithelementwis": [833, 839, 866], "containerwithmanipul": 833, "thorough": [833, 847, 851, 859], "add_reformatting_checklist_": 833, "category_nam": [833, 844, 845, 847, 851, 852], "autom": [833, 843, 850, 859, 872, 887], "bot": [833, 850], "markdown": [833, 841], "patient": [833, 834], "elabor": 833, "struggl": 833, "assigne": 833, "status": 833, "central": [833, 850, 862, 875, 891], "relevant_submodul": 833, "roadmap": [833, 843], "deem": [833, 856], "subtask": 833, "clearer": [833, 848, 857, 867], "backend_nam": [833, 840, 844, 845, 847, 851, 852, 853], "rare": [833, 845, 870, 890], "button": [833, 834, 835, 849], "centr": 833, "predetermin": 833, "superset": [833, 837, 852, 855, 870], "happi": [834, 849, 870, 876], "your_usernam": [834, 849], "your_fold": [834, 849], "enter": [834, 835, 839, 844, 845, 849, 851, 853], "sync": [834, 838, 849], "nutshel": [834, 851], "hook": [834, 850, 858], "lint": [834, 837], "succe": [834, 878], "whatev": [834, 842, 870], "elig": [834, 836], "student": 834, "licens": [834, 888], "remind": 834, "expir": 834, "profession": 834, "trial": 834, "jetbrain": 834, "month": [834, 874], "bui": [834, 891], "paid": 834, "rapid": [834, 874, 875, 885], "pace": 834, "person": [834, 835], "perhap": [834, 866, 867, 868, 870, 891], "conda": [834, 875, 887], "ivy_dev": [834, 835], "icon": [834, 835, 849], "panel": 834, "vscode": [834, 849], "palett": 834, "ctrl": [834, 835], "mac": [834, 835], "intel": [834, 875, 883, 890], "m1": 834, "optional_apple_silicon_1": 834, "optional_apple_silicon_2": 834, "array_api_test": [834, 835, 838, 849], "test_array_api": [834, 835, 838, 849, 859], "suit": [834, 837, 838, 843, 849, 858, 859, 867, 875, 885, 891], "cmd": 834, "bat": [834, 835], "virtualenv": 834, "tick": [834, 835, 843], "nz2": 834, "openssl": 834, "libssl1": 834, "1_1": 834, "1f": 834, "1ubuntu2": 834, "20_amd64": 834, "deb": 834, "dpkg": 834, "mitig": [834, 891], "desktop": [834, 849], "powershel": 834, "admin": 834, "menu": [834, 849], "introspect": 834, "dialog": 834, "persist": 834, "earlier": [834, 835, 844, 860], "virtualis": 834, "bio": [834, 875], "dropdown": [834, 843], "dockerfil": 834, "ca": 834, "certif": 834, "gnupg": 834, "lsb": 834, "keyr": 834, "fssl": 834, "gpg": 834, "dearmor": 834, "echo": [834, 843, 871], "arch": 834, "lsb_releas": 834, "ce": 834, "cli": 834, "containerd": 834, "systemctl": 834, "softwar": [834, 835, 874, 875, 883, 888, 889, 890], "press": [834, 835, 867], "4a": 834, "socket": 834, "rwx": 834, "sock": 834, "pid": 834, "editor": 834, "pytest": [834, 835, 838, 843, 849, 853, 859], "keyboard": 834, "screenshot": 834, "pop": [834, 849, 875], "test_elementwis": 834, "shell": [834, 835, 838, 843], "setup_test": 834, "run_ivy_core_test": 834, "run_ivy_nn_test": 834, "run_ivy_stateful_test": 834, "run_test": [834, 843], "test_depend": 834, "test_ivy_cor": 834, "test_ivy_nn": 834, "test_ivy_st": 834, "unix": 834, "test_": [834, 857], "test_cor": [834, 835, 857], "offici": [834, 844, 864], "wish": [834, 856], "ivy_nn": 834, "ivy_st": 834, "header": [834, 835, 858], "arrow": 834, "test_stat": 834, "test_submodule_nam": 834, "test_function_nam": 834, "debugg": 834, "studio": [834, 849, 859], "afterward": [834, 867], "background": [834, 841, 849, 885, 887], "overlap": [834, 843, 849, 860, 862, 886], "test_file_path": [834, 849], "test_fn_nam": [834, 849], "engin": [834, 885, 887, 888], "devcontain": 834, "comma": 834, "postcreatecommand": 834, "post_create_command": 834, "poststartcommand": 834, "safe": [834, 856], "containerworkspacefold": 834, "reopen": 834, "test_fle_path": 834, "slash": 834, "isol": [834, 835, 886, 891], "container": 834, "intens": 834, "headach": 834, "arm": [834, 835], "vm": [834, 843], "azur": 834, "cloud": [834, 843, 887], "favourit": 834, "theme": [834, 841], "ipad": 834, "browser": [834, 841], "quota": 834, "requisit": 834, "pane": [834, 835, 843], "dockerfilegpu": 834, "ivv": 834, "multiv": 834, "multivers": [834, 860], "dockerfilemultivers": 834, "dockerhub": 834, "upto": [834, 835], "minut": [834, 843], "launch": 834, "kindli": [834, 858], "guidelin": 834, "colour": 834, "chanc": 834, "troubleshoot": 834, "ever": 834, "flask": [834, 849], "toolbar": [834, 835, 849], "_array_modul": [834, 838, 849], "refresh": [834, 849], "pytestarg": [834, 849], "unittesten": [834, 849], "pytesten": [834, 849], "autotestdiscoveronsaveen": [834, 849], "conftest": 834, "serv": [834, 835, 839, 842, 851, 852, 856, 857, 859, 862, 863, 872, 883], "aren": [834, 844], "available_config": 834, "cp310": 834, "x86": [834, 890], "newer": [834, 859], "_compil": 834, "meantim": 834, "suffici": [834, 846, 856, 859], "bear": [834, 839, 842, 844, 856], "tendenc": 835, "land": 835, "unrel": [835, 875], "fly": [835, 885], "internship": 835, "suspect": 835, "iii": 835, "issue_numb": 835, "12345": 835, "rememb": 835, "respond": 835, "dai": [835, 850], "freed": 835, "situat": [835, 843, 869], "obvious": [835, 843], "hypothet": 835, "frustrat": 835, "delai": [835, 878], "busi": 835, "inact": 835, "unfairli": 835, "investig": 835, "name_of_your_branch": 835, "date": [835, 838], "complic": [835, 857, 864], "merge_with_upstream": 835, "abort": 835, "tediou": [835, 846, 862], "stash": [835, 850], "reinstat": 835, "uncommit": 835, "unstag": [835, 850], "untrack": 835, "atlassian": 835, "wrote": 835, "piec": [835, 839, 852, 853, 864, 878, 881, 883], "blame": 835, "eg": 835, "week": [835, 876], "grep": 835, "commit_id": 835, "handi": 835, "histori": 835, "approv": 835, "someon": [835, 870], "hash": [835, 867], "cancel": 835, "speedup": 835, "unavail": 835, "tickbox": 835, "intent": [835, 855], "discourag": 835, "adopt": [835, 839, 851, 862, 875, 884, 885, 890], "philosophi": 835, "infrequ": 835, "earli": [835, 885], "wast": [835, 843], "spot": [835, 846, 852], "mistak": 835, "mountain": 835, "advoc": [835, 870], "session": [835, 885], "beauti": 835, "care": [835, 845, 856, 862, 869, 875], "undo": 835, "stress": 835, "nifti": 835, "reassur": 835, "local_path_to_ivi": 835, "subfold": [835, 857, 859, 860], "dep": 835, "fresh": 835, "arsen": 835, "exec": 835, "ivy_contain": 835, "test_imag": 835, "test_random_crop": 835, "test_creation_funct": 835, "test_arang": 835, "cursor": 835, "alt": 835, "breakpoint": 835, "gutter": 835, "caret": 835, "f8": 835, "f9": 835, "Into": 835, "f7": 835, "smart": 835, "fragment": [835, 881, 883, 887], "wherein": [835, 852, 859], "facilit": 836, "embark": 836, "innov": [836, 875], "door": [836, 870], "elev": 836, "opportun": 836, "testament": [836, 858], "stone": 836, "gift": 836, "acquir": 836, "peak": 836, "privileg": [836, 887], "bounti": 836, "cash": 836, "delight": 836, "weed": [837, 863], "tour": 837, "formatt": [837, 850], "conjunct": 838, "establish": [838, 887], "unconnect": 838, "strang": [838, 866], "test_linalg": [838, 857], "test_set_funct": 838, "test_signatur": 838, "excess": [838, 840, 846], "array_modul": 838, "vv": 838, "test_manipulation_funct": 838, "test_concat": [838, 859], "nb": 838, "liber": 838, "______________________": 838, "test_remaind": 838, "_______________________": 838, "test_operators_and_elementwise_funct": 838, "1264": 838, "1277": 838, "binary_param_assert_against_refimpl": 838, "ctx": 838, "620": 838, "binary_assert_against_refimpl": 838, "scalar_o": 838, "17304064": 838, "binaryparamcontext": 838, "axic42baaowcnp": 838, "rumwmabaear0": 838, "make_binary_param": 838, "numeric_dtyp": 838, "left_strat": 838, "left_sym": 838, "right_strat": 838, "right_sym": 838, "right_is_scalar": 838, "binary_param_assert_dtyp": 838, "binary_param_assert_shap": 838, "recreat": 838, "unexpectedli": 838, "discrep": [838, 857], "test_asarray_arrai": 838, "test_floor_divid": 838, "health": 838, "test_iop": 838, "__imod__": 838, "isequ": 838, "test_matrix_norm": 838, "alter": 838, "tweak": 838, "array_api_methods_to_test": 838, "test_special_cas": 838, "__ipow__": 838, "is_integ": 838, "easier": [838, 839, 840, 844, 857, 860, 872, 885, 887], "revisit": [838, 851], "_data": [839, 855, 856, 866], "organiz": [839, 842, 856], "underpin": [839, 842, 864], "programmat": [839, 842, 886], "backup": [839, 841, 842], "accident": [839, 842, 856], "absent": [839, 842], "auto": [839, 841, 842, 850, 867], "__mul__": [839, 842, 846, 851, 862, 866], "throw": [839, 844, 845, 848, 849, 866, 885], "imposs": 839, "inputs_to_native_arrai": [839, 852, 853], "outputs_to_ivy_arrai": [839, 844, 845, 851, 852, 853], "secondli": [839, 844], "__ivy_array_function__": 839, "__torch_function__": 839, "myarrai": 839, "handled_funct": 839, "notimpl": 839, "issubclass": 839, "enough": [839, 843, 844, 845, 859, 866, 867, 868], "ivy_funct": 839, "my_ab": 839, "my_arrai": 839, "implicit_backend": [840, 864], "__dict__": [840, 855, 864], "ivy_original_dict": [840, 864], "fallback": 840, "live": [840, 841, 844, 875, 876, 881, 883], "dlpack": 840, "set_dynamic_backend": 840, "unset_dynamic_backend": 840, "dynamic_backend_a": 840, "set_": 840, "unset_": 840, "backend_handl": 840, "requires_grad": 840, "memory_format": 840, "preserve_format": 840, "weren": 840, "vast": [840, 844, 885], "minor": [840, 862, 870], "fn_name_v_1p12_and_abov": 840, "fn_name_v_1p01_to_1p1": 840, "heavili": [841, 853, 870], "conf": 841, "cleanup": 841, "readm": [841, 870], "maxdepth": 841, "caption": 841, "related_work": 841, "deep_div": 841, "glossari": 841, "autosummari": 841, "top_functional_toc": 841, "restructuredtext": 841, "discov": [841, 844], "ivy_toctree_caption_map": 841, "unfortun": [841, 850], "linker": 841, "foo": 841, "discussion_channel_map": 841, "1000043690254946374": 841, "1000043749088436315": 841, "forum": [841, 871], "seri": [841, 844, 856, 859, 885, 887], "discussion_paragraph": 841, "discord_link": 841, "channel_link": 841, "gg": 841, "zvqdvbznqj": 841, "799879767196958751": 841, "channel_id": 841, "autoskippablemethod": 841, "skippable_method_attribut": 841, "__qualname__": 841, "autodoc": 841, "__doc__": 841, "autoivydata": 841, "mutual": [842, 852], "containerwithelementwis": 842, "__repr__": 842, "__getattr__": [842, 878], "__setattr__": [842, 878], "__contains__": 842, "__getstate__": 842, "__setstate__": 842, "unpickl": 842, "num_dim": [842, 869], "restrict": [842, 843, 856, 864, 878, 882], "enforc": [842, 866], "lefthand": 842, "righthand": 842, "handle_nest": [842, 851, 852, 853, 864], "absenc": [842, 851, 885], "implicitli": [842, 854, 859, 864], "log_pr": [842, 852, 855], "intuit": [842, 859, 867, 868, 881], "chronolog": 842, "concurr": [842, 843, 852, 885], "despit": [842, 844, 845, 857, 864, 875, 882, 885], "__list__": 842, "whatsoev": [842, 852, 872, 891], "children": 842, "shallowest": 842, "deepest": 842, "rollback": 843, "incorpor": [843, 857, 867, 885], "techniqu": 843, "triplet": 843, "test_torch": [843, 857], "test_tensor": [843, 857], "test_torch_instance_arctan_": 843, "12500": 843, "daili": 843, "huge": [843, 867, 873, 875, 885, 891], "shoot": 843, "_reduce_loss": [843, 852, 855], "test_nn": 843, "test_loss": 843, "test_binary_cross_entropy_with_logit": 843, "test_cross_entropi": 843, "test_binary_cross_entropi": 843, "test_sparse_cross_entropi": 843, "test_loss_funct": 843, "test_torch_binary_cross_entropi": 843, "test_torch_cross_entropi": 843, "binary_cross_entropy_with_logit": 843, "torch_binary_cross_entropi": 843, "torch_cross_entropi": 843, "readthedoc": 843, "pedagog": 843, "f_1": 843, "t_1": 843, "t_3": 843, "t_7": 843, "t_": 843, "f_m": 843, "cyclic": 843, "intellig": [843, 859, 887], "tests_fil": 843, "file_nam": [843, 859, 860], "tests_lin": 843, "correspondingli": 843, "tests_to_run": 843, "determine_tests_lin": 843, "mongodb": 843, "databas": [843, 859], "mechan": [843, 870], "secret": 843, "db": 843, "ssh_deploy_kei": 843, "suffic": [843, 853, 859], "massiv": 843, "yml": 843, "felicit": 843, "clone_map": 843, "deploy_kei": 843, "user_email": 843, "user_nam": 843, "target_branch": 843, "github_serv": 843, "deploy_key_fil": 843, "ssh_known_hosts_fil": 843, "known_host": 843, "keyscan": 843, "git_ssh_command": 843, "userknownhostsfil": 843, "email": [843, 875], "methodologi": 843, "master1": 843, "restructur": 843, "_map": 843, "t_2": 843, "t_n": 843, "index_map": 843, "test_map": 843, "snowbal": 843, "recalibr": 843, "workflow_dispatch": 843, "cron": 843, "saturdai": 843, "night": 843, "pm": 843, "gut": 843, "lesser": [843, 848], "lol": 843, "hour": [843, 876], "cater": [843, 858], "master2": 843, "master32": 843, "synchron": 843, "runner2": 843, "corrupt": 843, "decoupl": [843, 868], "150": 843, "cycl": [843, 859], "yellow": 843, "queu": 843, "redirect": 843, "book": 843, "onrend": 843, "jo": 843, "ran": 843, "clickabl": 843, "all_dtyp": 844, "all_numeric_dtyp": 844, "all_int_dtyp": 844, "all_float_dtyp": 844, "replic": [844, 854, 855, 856], "thirdli": 844, "native_float32": 844, "importantli": [844, 866, 869], "arguabl": [844, 845, 856], "jaxarrai": [844, 845, 848, 851, 855, 860, 864], "_handle_0_dim_output": 844, "subtli": [844, 855], "promote_types_frontend_nam": 844, "promote_types_of_frontend_name_input": 844, "frontend_nam": 844, "upcast": 844, "nearli": [844, 851, 853, 885], "downcast": 844, "footprint": 844, "concret": 844, "aris": [844, 850, 870, 875], "utterli": 844, "meant": [844, 846, 855], "twice": 844, "disadvantag": 844, "relax": 844, "f64": 844, "unwant": 844, "primaci": 844, "resembl": 844, "compound": 844, "infer_dtyp": [844, 845, 851, 853], "settabl": [844, 845], "handle_out_argu": [844, 845, 851, 852, 853, 855, 864], "infer_devic": [844, 845, 851, 853], "deleg": [844, 892], "shape_to_tupl": 844, "with_supported_dtyp": 844, "unment": 844, "_cast_for_unary_op": [844, 852, 855], "target_typ": 844, "syntax": [844, 874, 875, 885], "unsupported_dtyp": 844, "supported_dtypes_and_devic": 844, "with_unsupported_device_and_dtyp": 844, "globals_getter_func": 844, "f2": 844, "lack": [844, 855, 885, 892], "mandat": [844, 855, 859, 860, 875], "confus": [844, 848, 855, 862, 872, 876], "inconsist": [844, 848, 854], "is_nan": 844, "supported_dtyp": 844, "anytim": 844, "84530": 844, "unwarr": 844, "risk": [844, 891], "needlessli": 844, "bloat": 844, "undergo": [844, 870], "unsupported_devic": 844, "supported_devic": 844, "downsid": 844, "coverag": [844, 859], "undesir": 844, "accomplish": 844, "upcast_data_typ": 844, "downcast_data_typ": 844, "crosscast_data_typ": 844, "cast_data_typ": 844, "downcast_data_dtyp": 844, "vice": 844, "versa": 844, "till": 844, "crosscast": 844, "exmp1": 844, "watch": [844, 856], "handle_numpy_arrays_in_specific_backend": [844, 851], "cate": 844, "understood": 844, "consumpt": [844, 889], "dual": 845, "categor": [845, 852, 856], "_handle_except": [845, 848], "1013": 845, "_handle_nest": [845, 848], "905": 845, "_handle_out_argu": [845, 848], "441": 845, "_inputs_to_native_arrai": [845, 848], "new_arg": [845, 848], "new_kwarg": [845, 848], "_outputs_to_ivy_arrai": [845, 848], "358": 845, "_handle_array_funct": [845, 848], "_handle_device_shift": 845, "handle_device_shift": [845, 853], "device_shifting_dev": 845, "__enter__": 845, "__exit__": 845, "soft_devic": 845, "eight": [846, 863], "op_nam": 846, "__r": 846, "unsurprisingli": [846, 874], "recap": [846, 868], "combinatori": 846, "okai": [846, 862, 864], "spec": [846, 847], "my_func": [846, 860], "some_flag": 846, "another_flag": 846, "jointli": 846, "5574077": 846, "1850398": 846, "5463025": 846, "8422884": 846, "91601413": 846, "9647598": 846, "3738229": 846, "1597457": 846, "0963247": 846, "9955841": 846, "3278579": 846, "asid": 846, "14254655": 846, "1578213": 846, "380515": 846, "trivial": [846, 855], "failing_fn_nam": 846, "onlin": [846, 847], "minutest": 846, "fault": [846, 885], "contrast": [847, 851, 856, 891], "preview": 847, "incorrectli": [847, 878], "needless": [847, 857], "renam": [847, 856], "judgment": 847, "operator_nam": 847, "succinct": 847, "docst": 847, "native_error": 848, "_combine_messag": 848, "truli": [848, 866], "wrong": [848, 850, 853, 856, 862], "198": 848, "392": 848, "_handle_array_like_without_promot": 848, "805": 848, "432": 848, "349": 848, "other_test": 848, "523": 848, "_handle_numpy_out": 848, "396": [848, 868], "_outputs_to_numpy_arrai": 848, "_inputs_to_ivy_arrays_np": 848, "ivy_arg": 848, "ivy_kwarg": 848, "453": 848, "_from_zero_dim_arrays_to_scalar": 848, "truth_value_test": 848, "visibl": 848, "unwieldi": 848, "squash": 848, "hide": [848, 878], "cleaner": [848, 867], "caught": [848, 850], "rethrow": 848, "_print_traceback_histori": 848, "error_stack": 848, "axiserror": 848, "polici": [848, 853, 859, 861], "moreov": 848, "submoodul": 849, "test_jax_transpos": 849, "manipulaiton": 849, "test_jax": [849, 857], "test_numpi": [849, 857], "test_manipul": [849, 857, 859], "preconditionnotmet": 849, "densetensor": 849, "holder_": 849, "phi": 849, "dense_tensor_impl": 849, "array_and_ax": 849, "aaegbaegaqaaaaaaaaaaaaab": 849, "black": 850, "flake8": 850, "linter": 850, "autoflak": 850, "docformatt": 850, "pydocstyl": 850, "yaml": 850, "patch1687898304": 850, "8072": 850, "3516aed563": 850, "reformat": 850, "akshai": 850, "jain": 850, "gui": 850, "cryptic": 850, "garden": 850, "utc": 850, "didn": 850, "human": 850, "intervent": 850, "typo": 850, "ui": 850, "handle_array_like_without_promot": [851, 853], "to_native_arrays_and_back": [851, 853, 864], "handle_array_funct": [851, 853], "inputs_to_native_shap": [851, 853], "rational": [851, 855, 862], "__div__": [851, 862], "484": 851, "brittl": 851, "freeli": 851, "technic": [851, 855, 870, 885, 887], "original_typ": 851, "cumbersom": 851, "hinder": [851, 874], "venn": 852, "diagram": [852, 891], "light": [852, 860, 870, 872, 886, 891], "maximis": 852, "encompass": 852, "partial_mixed_handl": [852, 853, 862], "handle_partial_mixed_funct": [852, 853, 862], "fn_decor": 852, "mixed_backend_wrapp": [852, 855], "to_add": 852, "to_skip": 852, "inputs_to_ivy_arrai": [852, 853], "modif": [852, 885], "briefli": [852, 859, 867], "get_all_arrays_on_dev": 852, "outputs_to_ivy_shap": 853, "outputs_to_native_arrai": 853, "handle_view_index": [853, 855], "handle_view": [853, 855], "handle_rag": 853, "handle_backend_invalid": 853, "handle_nan": 853, "to_native_shapes_and_back": 853, "modern": [854, 874, 875, 890], "inter_func": 854, "custom_grad_fn": 854, "args1": 854, "speak": 855, "val_n": 855, "base_idx": 855, "_manipulation_stack": 855, "base_flat": 855, "_view_ref": 855, "_update_view": 855, "contigu": 855, "c_contigu": 855, "ascontiguousarrai": 855, "copyto": 855, "_is_vari": 855, "tensor_scatter_nd_upd": 855, "is_vari": 855, "_update_torch_view": 855, "predominantli": [855, 860], "support_native_out": [855, 864], "_scalar_output_to_0d_arrai": 855, "_wrap_fn": 855, "dim0": 855, "dim1": 855, "res_floor": 855, "extent": [855, 856], "to_out_fn": 855, "add_wrapp": 855, "paradigm": [855, 870, 885], "expans": 855, "weak": 855, "_torch_bas": 855, "_torch_view_ref": 855, "_torch_manipul": 855, "weakli": 855, "adequ": 855, "tf_frontend": 856, "lax": [856, 857, 862, 869, 870], "torch_frontend": [856, 857], "numpy_frontend": 856, "jax_frontend": 856, "to_ivy_arrays_and_back": [856, 857], "fidel": 856, "algebra": [856, 883, 884, 885, 888, 892], "dynamic": 856, "mimic": 856, "arithmetic_oper": 856, "handle_numpy_out": 856, "handle_numpy_dtyp": 856, "handle_numpy_cast": 856, "from_zero_dim_arrays_to_scalar": 856, "_add": 856, "same_kind": 856, "subok": [856, 857, 862], "promote_types_of_numpy_input": 856, "underscor": 856, "unhandl": 856, "trigonometric_funct": 856, "_tan": 856, "check_tensorflow_cast": 856, "raw_op": [856, 857], "map_raw_ops_alia": 856, "output_typ": 856, "kwargs_to_upd": 856, "pointwise_op": 856, "sensibl": 856, "ahead": [856, 860, 885], "reduce_logsumexp": 856, "logsumexp": 856, "trick": 856, "max_input_tensor": 856, "preferred_element_typ": 856, "languag": [856, 864, 872, 874, 876, 883, 886, 888, 889, 890, 891], "finer": 856, "logicaland": 856, "np_frontend": 856, "_ivy_arrai": 856, "radd": 856, "_init_data": 856, "_process_str_data": 856, "_dtype": [856, 857, 866], "_shape": [856, 866], "govern": 856, "promote_types_of_": 856, "_input": 856, "promote_types_of_torch_input": [856, 857], "handle_numpy_casting_speci": 856, "new_fn": 856, "equiv": 856, "unsaf": 856, "array_type_test": 856, "_isfinit": 856, "organis": 856, "youtub": 856, "knowledg": 857, "np_frontend_help": 857, "open_task": 857, "test_lax": 857, "test_oper": 857, "test_jax_tan": 857, "test_mathematical_funct": 857, "test_trigonometric_funct": 857, "dtypes_values_cast": 857, "dtypes_values_casting_dtyp": 857, "arr_func": 857, "get_num_positional_args_ufunc": 857, "test_numpy_tan": 857, "handle_where_and_array_bool": 857, "test_tensorflow": 857, "test_math": 857, "test_tensorflow_tan": 857, "test_pointwise_op": 857, "test_torch_tan": 857, "_fill_valu": 857, "test_glob": 857, "test_jax_ful": 857, "test_from_shape_or_valu": 857, "_input_fill_and_dtyp": 857, "dtype_and_input": 857, "dtype_to_cast": 857, "input_fill_dtyp": 857, "test_numpy_ful": 857, "test_raw_op": 857, "test_tensorflow_fil": 857, "test_creation_op": 857, "with_arrai": 857, "test_torch_ful": 857, "add_nois": 857, "all_clos": 857, "_get_dtype_and_matrix": 857, "test_torch_qr": 857, "frontend_q": 857, "frontend_r": 857, "walkthrough": 857, "comparison_op": 857, "test_comparison_op": 857, "test_torch_great": 857, "all_alias": 857, "test_ndarrai": 857, "test_numpy_instance_add__": 857, "test_tensorflow_instance_add": 857, "1e04": 857, "allow_infin": 857, "test_torch_instance_add": 857, "_arrays_idx_n_dtyp": 857, "surprisingli": 857, "closest_relevant_group": 857, "strive": [857, 859, 862, 870, 887], "craft": [858, 859], "tailor": 858, "clariti": [858, 859, 862, 885], "weav": 858, "thrill": 858, "brim": 858, "stand": [858, 859], "landscap": 858, "forese": 858, "refin": 858, "inquiri": 858, "fixtur": 859, "hit": [859, 864, 878], "eleg": [859, 885], "unexplor": 859, "artifact": 859, "bespok": 859, "_array_or_typ": 859, "rigor": [859, 874], "test_default_int_dtyp": 859, "print_hypothesis_exampl": 859, "custom_strategi": 859, "randomis": 859, "simplist": 859, "intricaci": 859, "glanc": 859, "one_of": 859, "datum": 859, "pipe": 859, "array_or_scal": 859, "len_of_arrai": 859, "test_add": 859, "test_gpu_is_avail": 859, "pretest": 859, "snippet": [859, 879], "frontend_test": 859, "frontend_method": 859, "criterion": 859, "valid_ax": 859, "hoc": 859, "11228": 859, "268": 859, "wherev": 859, "9622": 859, "28136": 859, "6375": 859, "12720": 859, "21354": 859, "900e": 859, "57384": 859, "25687": 859, "248": 859, "test_devic": 859, "array_shap": 859, "test_lay": 859, "some_sequ": 859, "arrays_valu": 859, "36418": 859, "21716926": 859, "none_or_list_of_float": 859, "get_prob": 859, "103515625e": 859, "099609375": 859, "probabilist": 859, "number_positional_argu": 859, "unreproduc": 859, "x_and_linear": 859, "is_torch_backend": 859, "x_shape": [859, 864], "weight_shap": 859, "bias_shap": 859, "ivy_np": 859, "valid_float_dtyp": 859, "test_demo": 859, "failing_test": 859, "shrink": 859, "prescrib": 859, "test_gelu": 859, "test_fil": 859, "notabl": [859, 885], "max_exampl": 859, "deadlin": 859, "weird": 859, "systemat": 859, "safeguard": 859, "inabl": 859, "test_result_typ": 859, "9090909090909091": 859, "judgement": 860, "some_namespac": 860, "some_backend": 860, "another_backend": 860, "refactor": 860, "ongo": 860, "check_fill_value_and_dtype_are_compat": 860, "_to_devic": 860, "shouldn": [860, 878], "pin": 860, "unpinn": 860, "culmin": 860, "unsett": 861, "array_significant_figur": 861, "array_decimal_valu": 861, "warning_level": 861, "nan_polici": 861, "stablest": 861, "constantli": [862, 874], "answer": [862, 866, 870], "contradict": 862, "entail": 862, "sacrif": 862, "jacfwd": 862, "jacrev": 862, "banner": 862, "expens": 862, "incredibli": [862, 867, 870, 888], "price": 862, "pai": 862, "intrus": 862, "x_beta": 862, "equip": 862, "simplif": 862, "allevi": 862, "ineffici": [862, 870, 885], "fuse": 862, "hybrid": 862, "workaround": 862, "slip": 862, "radar": 862, "stumbl": 862, "gone": [863, 875], "fulfil": 863, "handler": [863, 865, 869, 872], "syntact": [864, 869], "power_seq": 864, "_determine_backend_from_arg": 864, "importlib": 864, "_backend_dict": 864, "x_flat": 864, "wi": 864, "wi_x": 864, "wii_x": 864, "wif_x": 864, "wig_x": 864, "wio_x": 864, "wh": 864, "ht": 864, "ct": 864, "hts_list": 864, "wii_xt": 864, "wif_xt": 864, "wig_xt": 864, "wio_xt": 864, "htm1": 864, "ctm1": 864, "wh_htm1": 864, "whi_htm1": 864, "whf_htm1": 864, "whg_htm1": 864, "who_htm1": 864, "ft": 864, "ot": 864, "reliabl": 864, "sacrific": 864, "hear": 864, "virtu": [864, 882], "pure_ivi": 864, "pure_torch": 864, "unclean": 864, "wx": 864, "temp": 864, "ivy_func": 864, "emphas": 864, "example_input": 864, "static_argnum": [864, 878], "static_argnam": [864, 878], "primit": [865, 870, 883, 885], "hierarch": [865, 867, 868, 885], "arraywithactiv": 866, "arraywithcr": 866, "arraywithdatatyp": 866, "arraywithdevic": 866, "arraywithgener": 866, "arraywithgradi": 866, "arraywithimag": 866, "arraywithlay": 866, "arraywithlinearalgebra": 866, "arraywithloss": 866, "arraywithmanipul": 866, "arraywithnorm": 866, "arraywithrandom": 866, "arraywithsearch": 866, "arraywithset": 866, "arraywithsort": 866, "arraywithstatist": 866, "arraywithutil": 866, "_init": 866, "_size": 866, "_devic": 866, "_dev_str": 866, "_pre_repr": 866, "_post_repr": 866, "framework_str": 866, "pypep8nam": 866, "immut": 866, "claim": 866, "_native_wrapp": 866, "genuin": 866, "some_method": 866, "rewritten": 866, "littl": [866, 874, 887], "compartment": 866, "newshap": 866, "new_shap": 866, "tidi": 866, "crystal": 866, "ton": 867, "ado": [867, 868], "soup": 867, "walk": [867, 868], "cnt": 867, "3333335": 867, "autocomplet": 867, "midwai": 867, "agent": 867, "total_spe": 867, "total_height": 867, "total_width": 867, "ag": 867, "tot": 867, "total_": 867, "total_h": 867, "cnt0": 867, "cnt1": 867, "diff_0": 867, "diff_1": 867, "config0": 867, "config1": 867, "l0": 867, "decoder__l0": 867, "decoder__l1": 867, "encoder__l0": 867, "encoder__l1": 867, "l0__b": 867, "l0__w": 867, "l1__b": 867, "l1__w": 867, "printabl": 867, "foresight": 867, "untidili": 867, "update_ag": 867, "normalize_img": 867, "img_max": 867, "reduce_max": 867, "img_min": 867, "reduce_min": 867, "img_rang": 867, "agent_posit": 867, "agent_veloc": 867, "agent_cam_front_rgb": 867, "agent_cam_front_depth": 867, "agent_cam_rear_rgb": 867, "agent_cam_rear_depth": 867, "agent_cam_lidar": 867, "camera": 867, "front_rgb": 867, "front_depth": 867, "rear_rgb": 867, "rear_depth": 867, "lidar": 867, "rgb": 867, "rear": 867, "veloc": 867, "cam": 867, "cam_max": 867, "cam_min": 867, "cam_rang": 867, "allud": [867, 875], "perman": 867, "_cnt": 867, "img_": 867, "_dataset_s": 867, "_batch_siz": 867, "_count": [867, 868], "__next__": 867, "img_fnam": 867, "loaded_img": 867, "batch_slic": 867, "0145": 867, "addbackward0": 867, "_create_vari": 868, "_input_channel": 868, "_output_channel": 868, "_w_shape": 868, "_b_shape": 868, "_with_bia": 868, "764": 868, "872": 868, "439": 868, "nightmar": 868, "overcom": 868, "key0": 868, "linear3": 868, "preced": [868, 875], "_w_init": 868, "_b_init": 868, "misnom": 868, "saw": 868, "_beta1": 868, "_beta2": 868, "_epsilon": 868, "_mw": 868, "_vw": 868, "_first_pass": 868, "_should_trac": 868, "new_v": 868, "_lr": 868, "_inplac": 868, "_stop_gradi": 868, "sparse_funct": 869, "_linear": 869, "jax_graph": 869, "to_backend": 869, "thinli": 869, "to_haiku_modul": 869, "loss_fn_t": 869, "without_apply_rng": 869, "update_rul": 869, "tree_multimap": 869, "trax": [869, 876], "objax": [869, 876], "matur": [870, 875, 885], "doubt": 870, "grate": [870, 893], "probe": 870, "lock": 870, "dex": 870, "tricki": [870, 872], "tight": 870, "dispatch": [870, 885, 888], "ast": 870, "autodiff": 870, "shine": 870, "merci": 870, "compet": [870, 885], "parallelis": 870, "spmd": 870, "mixtur": 870, "expert": 870, "sophist": 870, "depart": 870, "hundr": 870, "broadli": [870, 891], "supplementari": 870, "reusabl": [870, 883, 885], "fanci": [870, 885], "fusion": [870, 889], "lose": 870, "pmap": 870, "eventu": 870, "supplement": 870, "backdoor": 870, "callback": 870, "somewhat": [870, 885], "outsourc": 870, "ivy_root": 871, "pem": 871, "api_kei": 871, "asap": 871, "nail": 872, "scientist": 872, "correl": 872, "collabor": [873, 874, 875], "consortium": [873, 875], "grown": 874, "rapidli": 874, "shareabl": 874, "outdat": 874, "newest": 874, "prototyp": [874, 885], "obsolet": [874, 876], "invent": 874, "simultan": [874, 876], "runner": 874, "principl": [874, 883, 885, 888], "2006": 874, "cloth": 874, "forgiven": 875, "eyebrow": 875, "somehow": 875, "funni": 875, "comic": 875, "charger": 875, "instant": 875, "contrari": 875, "bumpi": 875, "road": 875, "technologi": [875, 883, 887], "interoper": [875, 882, 883, 885, 888], "motherboard": 875, "raid": 875, "bluetooth": 875, "wireless": 875, "btx": 875, "sata": 875, "tcp": 875, "ip": 875, "smtp": 875, "gmail": 875, "outlook": 875, "growth": [875, 888], "necess": 875, "2015": [875, 885], "aros": 875, "ourselv": [875, 891], "quansight": [875, 891], "compani": [875, 881], "apach": [875, 887, 891], "onnx": [875, 883, 891], "cupi": [875, 885, 892], "modin": 875, "spyder": 875, "octoml": [875, 891], "sponsor": 875, "lg": 875, "electron": 875, "shaw": 875, "pursuit": 875, "complianc": 875, "convinc": 875, "celebr": 875, "streamlin": [876, 888], "awesom": 876, "love": 876, "slew": 876, "inevit": [876, 886], "erron": 876, "poor": 876, "spin": 876, "sake": 876, "wouldn": 876, "frantic": 876, "lucid": 876, "honk": 876, "hasn": 876, "spend": [876, 885], "sonnet": 876, "trainer": [876, 892], "quo": 876, "dopamin": 876, "ignit": 876, "catalyst": 876, "lightn": 876, "fastai": 876, "publicli": [878, 879, 880], "logger": 878, "arg_stateful_idx": 878, "kwarg_stateful_idx": 878, "include_gener": 878, "array_cach": 878, "return_backend_traced_fn": 878, "lazygraph": [878, 879, 880], "sum_j": 878, "traced_fn": 878, "impos": 878, "comp_func": 878, "bake": 878, "cont": 878, "new_attribut": 878, "wip": 878, "resnet50": 878, "breed": 878, "resnetforimageclassif": [878, 879], "traced_graph": 878, "predicted_label": 878, "debug_mod": 879, "rough": 879, "transformed_with_st": 879, "bigger": 879, "hf": 879, "tf_model": 879, "transpile_kwarg": 880, "transpiled_func": 880, "unified_func": 880, "rwork": 881, "vendor": [881, 887], "complimentari": [881, 891], "acycl": [881, 886], "fillna": 882, "pct_chang": 882, "_____________": 882, "__________________________________________________________________": 882, "scaffold": [883, 891], "heart": 883, "toolchain": [883, 888], "assembli": [883, 890, 891], "idl": 883, "middl": 883, "emit": 883, "gnu": [883, 888], "broader": 883, "heterogen": 883, "aid": 883, "coprocessor": 883, "programm": [883, 890], "gate": 883, "onednn": 883, "sit": [883, 886, 891], "tandem": 883, "possess": 883, "khrono": [884, 890], "appl": 884, "coremltool": 884, "albeit": 884, "promin": 885, "abbrevi": 885, "laboratori": 885, "proprietari": [885, 889, 890], "mathwork": 885, "commerci": 885, "1984": 885, "toolbox": 885, "mupad": 885, "simulink": 885, "graphic": [885, 889, 890], "simul": 885, "million": [885, 888], "worldwid": 885, "scienc": [885, 887], "econom": 885, "2001": 885, "od": 885, "solver": 885, "cython": 885, "friendli": 885, "2002": 885, "lua": 885, "luajit": 885, "idiap": 885, "epfl": 885, "2005": 885, "numarrai": 885, "cpython": 885, "partli": 885, "2007": 885, "forest": 885, "boost": 885, "dbscan": 885, "inbuilt": 885, "esqu": 885, "aesara": 885, "2012": 885, "polymorph": 885, "mpi": 885, "openmp": 885, "glue": 885, "jaot": 885, "nasa": 885, "cern": 885, "climat": 885, "allianc": 885, "influenti": 885, "2014": 885, "scala": 885, "ship": 885, "forgiv": 885, "decemb": 885, "announc": 885, "mainten": 885, "meaning": 885, "2016": 885, "imper": 885, "amazon": 885, "traction": 885, "cognit": [885, 892], "grade": 885, "dnn": 885, "backpropag": 885, "succumb": 885, "came": 885, "monitor": 885, "hobbyist": 885, "tremend": 885, "gear": 885, "batteri": 885, "zygot": 885, "jl": 885, "workload": 885, "daggerflux": 885, "frontier": 885, "hessian": 885, "2018": 885, "lightweight": [885, 892], "shortcom": 885, "barrier": 885, "inexperienc": 885, "underdevelop": 885, "fanat": 885, "ounc": 885, "infanc": 885, "nich": 885, "mobil": 885, "lite": 885, "enterpris": 885, "reinvent": [885, 887], "inertia": 885, "creator": [885, 887], "paszk": 885, "hi": 885, "bulk": 885, "haskel": 885, "dataflow": 886, "trace_modul": 886, "scriptfunct": 886, "scriptmodul": 886, "fake": 886, "proxi": 886, "graphmodul": 886, "travi": 887, "oliph": 887, "leader": 887, "cornerston": 887, "numba": 887, "numfocu": 887, "pydata": 887, "confer": 887, "consult": 887, "devop": 887, "mlop": 887, "startup": 887, "mlir": [887, 888, 891], "Their": 887, "held": 887, "presum": 887, "llvm": [887, 890], "founder": 887, "tvm": [887, 891], "sustain": 887, "empow": 887, "har": 887, "burden": 887, "precompil": 888, "executor": 888, "julia": [888, 891], "fsf": 888, "gpl": 888, "biggest": [888, 891], "throughput": 889, "autotun": 889, "gpgpu": 889, "classic": 890, "sycl": 890, "dpc": 890, "oneapi": 890, "ia": 890, "xeon": 890, "gen9": 890, "xe": 890, "arria": 890, "gx": 890, "fpga": 890, "lofti": 891, "ambit": 891, "realm": 891, "bedrock": 891, "flux": 891, "bite": 891, "chew": 891, "eagerpi": 891, "tensorli": 891, "thinc": 891, "neuropod": 891, "fx": 891, "retrain": 891, "closer": 891, "greatli": 891, "modular": 891, "anywher": 891, "theano": 892, "plaidml": 892, "partial_svd": 892, "subsystem": 892, "amaz": 893, "bhushan": 893, "srivastava": 893, "he11owther": 893, "og": 893, "edward": 893, "amimo": 893, "moblei": 893, "trent": 893, "ogban": 893, "ugot": 893, "fayad": 893, "alman": 893, "sarvesh": 893, "kesharwani": 893, "krishna": 893, "boppana": 893, "saptarshi": 893, "bandopadhyai": 893, "tugai": 893, "g\u00fcl": 893, "sondertg": 893, "vismai": 893, "suramwar": 893, "leacornelio": 893, "samund": 893, "singh": 893, "samthakur587": 893, "suraj": 893, "zheng": 893, "jai": 893, "choi": 893, "zjay07": 893, "ebenez": 893, "gadri": 893, "akrong": 893, "aibenstunn": 893, "nitesh": 893, "niteshk84": 893, "abdullah": 893, "sabri": 893, "abdullahsabri": 893, "muhammad": 893, "ishaqu": 893, "muhammadnizamani": 893, "moham": 893, "ibrahim": 893, "medo072": 893, "sheroz": 893, "khan": 893, "ksheroz": 893, "suyash": 893, "gupta": 893, "sgalpha01": 893, "alvin": 893, "vinod": 893, "david": 893, "adlai": 893, "nettei": 893, "mwape": 893, "bunda": 893, "teckno": 893, "ramya": 893, "manasa": 893, "amancherla": 893, "ramyamanasa": 893, "rohit": 893, "kumar": 893, "salla": 893, "rohitsalla": 893, "sanjai": 893, "suthar": 893, "sanjay8602": 893, "muzakkir": 893, "hussain": 893, "muzakkirhussain011": 893, "chaitanya": 893, "lakhchaura": 893, "zenithflux": 893, "kacper": 893, "ko\u017cdo\u0144": 893, "kozdon": 893, "zera": 893, "marveen": 893, "lyngkhoi": 893, "fleventi": 893, "jackson": 893, "mcclintock": 893, "jacksondm33": 893, "ayush": 893, "lokar": 893, "ayush111111": 893, "garima": 893, "saroj": 893, "androgari": 893, "lee": 893, "bissessar": 893, "leebissessar5": 893, "mostafa": 893, "gamal": 893, "mr": 893, "array22": 893, "rahul": 893, "prem": 893, "rp097": 893, "vaishnavi": 893, "mudaliar": 893, "vaishnavimudaliar": 893, "waqar": 893, "ahm": 893, "waqaarahm": 893, "aryan": 893, "pandei": 893, "aryan8912": 893, "dhruv": 893, "sharma": 893, "druvdub": 893, "mehmet": 893, "bilgehan": 893, "bezcioglu": 893, "bilgehanmehmet": 893, "omkar": 893, "khade": 893, "omickeye": 893, "puriti": 893, "nyagweth": 893, "stefan": 893, "sanchez": 893, "stefansan26": 893}, "objects": {"ivy.Array": [[231, 0, 1, "", "abs"], [232, 0, 1, "", "acos"], [233, 0, 1, "", "acosh"], [626, 0, 1, "", "adam_step"], [627, 0, 1, "", "adam_update"], [400, 0, 1, "", "adaptive_avg_pool1d"], [401, 0, 1, "", "adaptive_avg_pool2d"], [402, 0, 1, "", "adaptive_max_pool2d"], [403, 0, 1, "", "adaptive_max_pool3d"], [234, 0, 1, "", "add"], [435, 0, 1, "", "adjoint"], [781, 0, 1, "", "all"], [545, 0, 1, "", "all_equal"], [345, 0, 1, "", "allclose"], [346, 0, 1, "", "amax"], [347, 0, 1, "", "amin"], [235, 0, 1, "", "angle"], [782, 0, 1, "", "any"], [758, 0, 1, "", "argmax"], [759, 0, 1, "", "argmin"], [767, 0, 1, "", "argsort"], [760, 0, 1, "", "argwhere"], [548, 0, 1, "", "array_equal"], [471, 0, 1, "", "as_strided"], [139, 0, 1, "", "asarray"], [236, 0, 1, "", "asin"], [237, 0, 1, "", "asinh"], [549, 0, 1, "", "assert_supports_inplace"], [472, 0, 1, "", "associative_scan"], [163, 0, 1, "", "astype"], [238, 0, 1, "", "atan"], [239, 0, 1, "", "atan2"], [240, 0, 1, "", "atanh"], [473, 0, 1, "", "atleast_1d"], [474, 0, 1, "", "atleast_2d"], [475, 0, 1, "", "atleast_3d"], [405, 0, 1, "", "avg_pool1d"], [406, 0, 1, "", "avg_pool2d"], [407, 0, 1, "", "avg_pool3d"], [512, 0, 1, "", "batch_norm"], [436, 0, 1, "", "batched_outer"], [519, 0, 1, "", "bernoulli"], [520, 0, 1, "", "beta"], [348, 0, 1, "", "binarizer"], [707, 0, 1, "", "binary_cross_entropy"], [531, 0, 1, "", "bincount"], [241, 0, 1, "", "bitwise_and"], [242, 0, 1, "", "bitwise_invert"], [243, 0, 1, "", "bitwise_left_shift"], [244, 0, 1, "", "bitwise_or"], [245, 0, 1, "", "bitwise_right_shift"], [246, 0, 1, "", "bitwise_xor"], [323, 0, 1, "", "blackman_window"], [164, 0, 1, "", "broadcast_arrays"], [165, 0, 1, "", "broadcast_to"], [166, 0, 1, "", "can_cast"], [247, 0, 1, "", "ceil"], [306, 0, 1, "", "celu"], [678, 0, 1, "", "cholesky"], [713, 0, 1, "", "clip"], [551, 0, 1, "", "clip_matrix_norm"], [552, 0, 1, "", "clip_vector_norm"], [479, 0, 1, "", "column_stack"], [714, 0, 1, "", "concat"], [480, 0, 1, "", "concat_from_sequence"], [437, 0, 1, "", "cond"], [349, 0, 1, "", "conj"], [715, 0, 1, "", "constant_pad"], [661, 0, 1, "", "conv1d"], [662, 0, 1, "", "conv1d_transpose"], [663, 0, 1, "", "conv2d"], [664, 0, 1, "", "conv2d_transpose"], [665, 0, 1, "", "conv3d"], [666, 0, 1, "", "conv3d_transpose"], [140, 0, 1, "", "copy_array"], [350, 0, 1, "", "copysign"], [532, 0, 1, "", "corrcoef"], [248, 0, 1, "", "cos"], [249, 0, 1, "", "cosh"], [351, 0, 1, "", "count_nonzero"], [533, 0, 1, "", "cov"], [679, 0, 1, "", "cross"], [708, 0, 1, "", "cross_entropy"], [534, 0, 1, "", "cummax"], [535, 0, 1, "", "cummin"], [771, 0, 1, "", "cumprod"], [772, 0, 1, "", "cumsum"], [408, 0, 1, "", "dct"], [555, 0, 1, "", "default"], [250, 0, 1, "", "deg2rad"], [669, 0, 1, "", "depthwise_conv2d"], [680, 0, 1, "", "det"], [208, 0, 1, "", "dev"], [409, 0, 1, "", "dft"], [681, 0, 1, "", "diag"], [438, 0, 1, "", "diagflat"], [682, 0, 1, "", "diagonal"], [352, 0, 1, "", "diff"], [353, 0, 1, "", "digamma"], [521, 0, 1, "", "dirichlet"], [251, 0, 1, "", "divide"], [439, 0, 1, "", "dot"], [670, 0, 1, "", "dropout"], [410, 0, 1, "", "dropout1d"], [411, 0, 1, "", "dropout2d"], [412, 0, 1, "", "dropout3d"], [481, 0, 1, "", "dsplit"], [482, 0, 1, "", "dstack"], [174, 0, 1, "", "dtype"], [440, 0, 1, "", "eig"], [684, 0, 1, "", "eigh"], [441, 0, 1, "", "eigh_tridiagonal"], [442, 0, 1, "", "eigvals"], [685, 0, 1, "", "eigvalsh"], [556, 0, 1, "", "einops_rearrange"], [557, 0, 1, "", "einops_reduce"], [558, 0, 1, "", "einops_repeat"], [773, 0, 1, "", "einsum"], [307, 0, 1, "", "elu"], [413, 0, 1, "", "embedding"], [142, 0, 1, "", "empty_like"], [252, 0, 1, "", "equal"], [253, 0, 1, "", "erf"], [354, 0, 1, "", "erfc"], [355, 0, 1, "", "erfinv"], [559, 0, 1, "", "exists"], [254, 0, 1, "", "exp"], [255, 0, 1, "", "exp2"], [483, 0, 1, "", "expand"], [716, 0, 1, "", "expand_dims"], [256, 0, 1, "", "expm1"], [324, 0, 1, "", "eye_like"], [414, 0, 1, "", "fft"], [415, 0, 1, "", "fft2"], [484, 0, 1, "", "fill_diagonal"], [176, 0, 1, "", "finfo"], [356, 0, 1, "", "fix"], [485, 0, 1, "", "flatten"], [717, 0, 1, "", "flip"], [486, 0, 1, "", "fliplr"], [487, 0, 1, "", "flipud"], [357, 0, 1, "", "float_power"], [257, 0, 1, "", "floor"], [258, 0, 1, "", "floor_divide"], [358, 0, 1, "", "fmax"], [259, 0, 1, "", "fmin"], [260, 0, 1, "", "fmod"], [488, 0, 1, "", "fold"], [560, 0, 1, "", "fourier_encode"], [359, 0, 1, "", "frexp"], [144, 0, 1, "", "from_dlpack"], [147, 0, 1, "", "full_like"], [522, 0, 1, "", "gamma"], [563, 0, 1, "", "gather"], [564, 0, 1, "", "gather_nd"], [261, 0, 1, "", "gcd"], [121, 0, 1, "", "gelu"], [443, 0, 1, "", "general_inner_product"], [567, 0, 1, "", "get_num_dims"], [360, 0, 1, "", "gradient"], [630, 0, 1, "", "gradient_descent_update"], [262, 0, 1, "", "greater"], [263, 0, 1, "", "greater_equal"], [513, 0, 1, "", "group_norm"], [308, 0, 1, "", "hardshrink"], [309, 0, 1, "", "hardsilu"], [122, 0, 1, "", "hardswish"], [310, 0, 1, "", "hardtanh"], [569, 0, 1, "", "has_nans"], [489, 0, 1, "", "heaviside"], [444, 0, 1, "", "higher_order_moment"], [463, 0, 1, "", "hinge_embedding_loss"], [536, 0, 1, "", "histogram"], [490, 0, 1, "", "hsplit"], [491, 0, 1, "", "hstack"], [464, 0, 1, "", "huber_loss"], [361, 0, 1, "", "hypot"], [492, 0, 1, "", "i0"], [418, 0, 1, "", "idct"], [419, 0, 1, "", "ifft"], [420, 0, 1, "", "ifftn"], [537, 0, 1, "", "igamma"], [179, 0, 1, "", "iinfo"], [264, 0, 1, "", "imag"], [445, 0, 1, "", "initialize_tucker"], [686, 0, 1, "", "inner"], [571, 0, 1, "", "inplace_decrement"], [572, 0, 1, "", "inplace_increment"], [573, 0, 1, "", "inplace_update"], [514, 0, 1, "", "instance_norm"], [422, 0, 1, "", "interpolate"], [687, 0, 1, "", "inv"], [575, 0, 1, "", "is_array"], [182, 0, 1, "", "is_bool_dtype"], [184, 0, 1, "", "is_float_dtype"], [186, 0, 1, "", "is_int_dtype"], [576, 0, 1, "", "is_ivy_array"], [577, 0, 1, "", "is_ivy_container"], [579, 0, 1, "", "is_native_array"], [188, 0, 1, "", "is_uint_dtype"], [362, 0, 1, "", "isclose"], [265, 0, 1, "", "isfinite"], [580, 0, 1, "", "isin"], [266, 0, 1, "", "isinf"], [267, 0, 1, "", "isnan"], [268, 0, 1, "", "isreal"], [582, 0, 1, "", "itemsize"], [465, 0, 1, "", "kl_div"], [447, 0, 1, "", "kron"], [466, 0, 1, "", "l1_loss"], [515, 0, 1, "", "l1_normalize"], [516, 0, 1, "", "l2_normalize"], [632, 0, 1, "", "lamb_update"], [633, 0, 1, "", "lars_update"], [751, 0, 1, "", "layer_norm"], [269, 0, 1, "", "lcm"], [363, 0, 1, "", "ldexp"], [123, 0, 1, "", "leaky_relu"], [364, 0, 1, "", "lerp"], [270, 0, 1, "", "less"], [271, 0, 1, "", "less_equal"], [526, 0, 1, "", "lexsort"], [365, 0, 1, "", "lgamma"], [671, 0, 1, "", "linear"], [148, 0, 1, "", "linspace"], [272, 0, 1, "", "log"], [273, 0, 1, "", "log10"], [274, 0, 1, "", "log1p"], [275, 0, 1, "", "log2"], [467, 0, 1, "", "log_poisson_loss"], [124, 0, 1, "", "log_softmax"], [276, 0, 1, "", "logaddexp"], [277, 0, 1, "", "logaddexp2"], [278, 0, 1, "", "logical_and"], [279, 0, 1, "", "logical_not"], [280, 0, 1, "", "logical_or"], [281, 0, 1, "", "logical_xor"], [311, 0, 1, "", "logit"], [312, 0, 1, "", "logsigmoid"], [149, 0, 1, "", "logspace"], [518, 0, 1, "", "lp_normalize"], [673, 0, 1, "", "lstm_update"], [451, 0, 1, "", "make_svd_non_negative"], [688, 0, 1, "", "matmul"], [493, 0, 1, "", "matricize"], [452, 0, 1, "", "matrix_exp"], [689, 0, 1, "", "matrix_norm"], [690, 0, 1, "", "matrix_power"], [691, 0, 1, "", "matrix_rank"], [692, 0, 1, "", "matrix_transpose"], [774, 0, 1, "", "max"], [423, 0, 1, "", "max_pool1d"], [424, 0, 1, "", "max_pool2d"], [425, 0, 1, "", "max_pool3d"], [426, 0, 1, "", "max_unpool1d"], [282, 0, 1, "", "maximum"], [775, 0, 1, "", "mean"], [538, 0, 1, "", "median"], [330, 0, 1, "", "mel_weight_matrix"], [150, 0, 1, "", "meshgrid"], [776, 0, 1, "", "min"], [283, 0, 1, "", "minimum"], [125, 0, 1, "", "mish"], [453, 0, 1, "", "mode_dot"], [366, 0, 1, "", "modf"], [494, 0, 1, "", "moveaxis"], [768, 0, 1, "", "msort"], [454, 0, 1, "", "multi_dot"], [674, 0, 1, "", "multi_head_attention"], [455, 0, 1, "", "multi_mode_dot"], [752, 0, 1, "", "multinomial"], [284, 0, 1, "", "multiply"], [285, 0, 1, "", "nan_to_num"], [539, 0, 1, "", "nanmean"], [540, 0, 1, "", "nanmedian"], [541, 0, 1, "", "nanmin"], [542, 0, 1, "", "nanprod"], [367, 0, 1, "", "nansum"], [151, 0, 1, "", "native_array"], [286, 0, 1, "", "negative"], [368, 0, 1, "", "nextafter"], [761, 0, 1, "", "nonzero"], [287, 0, 1, "", "not_equal"], [152, 0, 1, "", "one_hot"], [154, 0, 1, "", "ones_like"], [634, 0, 1, "", "optimizer_update"], [544, 0, 1, "", "optional_get_element"], [693, 0, 1, "", "outer"], [495, 0, 1, "", "pad"], [496, 0, 1, "", "partial_fold"], [497, 0, 1, "", "partial_tensor_to_vec"], [456, 0, 1, "", "partial_tucker"], [498, 0, 1, "", "partial_unfold"], [499, 0, 1, "", "partial_vec_to_tensor"], [718, 0, 1, "", "permute_dims"], [694, 0, 1, "", "pinv"], [523, 0, 1, "", "poisson"], [468, 0, 1, "", "poisson_nll_loss"], [288, 0, 1, "", "positive"], [289, 0, 1, "", "pow"], [313, 0, 1, "", "prelu"], [777, 0, 1, "", "prod"], [500, 0, 1, "", "put_along_axis"], [695, 0, 1, "", "qr"], [543, 0, 1, "", "quantile"], [290, 0, 1, "", "rad2deg"], [753, 0, 1, "", "randint"], [754, 0, 1, "", "random_normal"], [755, 0, 1, "", "random_uniform"], [291, 0, 1, "", "real"], [292, 0, 1, "", "reciprocal"], [374, 0, 1, "", "reduce"], [429, 0, 1, "", "reduce_window"], [126, 0, 1, "", "relu"], [314, 0, 1, "", "relu6"], [293, 0, 1, "", "remainder"], [719, 0, 1, "", "repeat"], [720, 0, 1, "", "reshape"], [191, 0, 1, "", "result_type"], [430, 0, 1, "", "rfft"], [431, 0, 1, "", "rfftn"], [721, 0, 1, "", "roll"], [501, 0, 1, "", "rot90"], [294, 0, 1, "", "round"], [677, 0, 1, "", "scaled_dot_product_attention"], [315, 0, 1, "", "scaled_tanh"], [587, 0, 1, "", "scatter_flat"], [588, 0, 1, "", "scatter_nd"], [769, 0, 1, "", "searchsorted"], [316, 0, 1, "", "selu"], [601, 0, 1, "", "shape"], [757, 0, 1, "", "shuffle"], [127, 0, 1, "", "sigmoid"], [295, 0, 1, "", "sign"], [369, 0, 1, "", "signbit"], [317, 0, 1, "", "silu"], [296, 0, 1, "", "sin"], [370, 0, 1, "", "sinc"], [297, 0, 1, "", "sinh"], [602, 0, 1, "", "size"], [433, 0, 1, "", "sliding_window"], [696, 0, 1, "", "slogdet"], [469, 0, 1, "", "smooth_l1_loss"], [470, 0, 1, "", "soft_margin_loss"], [502, 0, 1, "", "soft_thresholding"], [128, 0, 1, "", "softmax"], [129, 0, 1, "", "softplus"], [318, 0, 1, "", "softshrink"], [697, 0, 1, "", "solve"], [770, 0, 1, "", "sort"], [709, 0, 1, "", "sparse_cross_entropy"], [371, 0, 1, "", "sparsify_tensor"], [722, 0, 1, "", "split"], [298, 0, 1, "", "sqrt"], [299, 0, 1, "", "square"], [723, 0, 1, "", "squeeze"], [603, 0, 1, "", "stable_divide"], [604, 0, 1, "", "stable_pow"], [724, 0, 1, "", "stack"], [778, 0, 1, "", "std"], [434, 0, 1, "", "stft"], [635, 0, 1, "", "stop_gradient"], [605, 0, 1, "", "strides"], [300, 0, 1, "", "subtract"], [779, 0, 1, "", "sum"], [606, 0, 1, "", "supports_inplace_updates"], [698, 0, 1, "", "svd"], [458, 0, 1, "", "svd_flip"], [699, 0, 1, "", "svdvals"], [725, 0, 1, "", "swapaxes"], [503, 0, 1, "", "take"], [504, 0, 1, "", "take_along_axis"], [301, 0, 1, "", "tan"], [302, 0, 1, "", "tanh"], [320, 0, 1, "", "tanhshrink"], [459, 0, 1, "", "tensor_train"], [700, 0, 1, "", "tensordot"], [701, 0, 1, "", "tensorsolve"], [321, 0, 1, "", "threshold"], [322, 0, 1, "", "thresholded_relu"], [726, 0, 1, "", "tile"], [225, 0, 1, "", "to_device"], [608, 0, 1, "", "to_list"], [610, 0, 1, "", "to_numpy"], [611, 0, 1, "", "to_scalar"], [505, 0, 1, "", "top_k"], [702, 0, 1, "", "trace"], [303, 0, 1, "", "trapz"], [156, 0, 1, "", "tril"], [340, 0, 1, "", "trilu"], [506, 0, 1, "", "trim_zeros"], [157, 0, 1, "", "triu"], [304, 0, 1, "", "trunc"], [305, 0, 1, "", "trunc_divide"], [460, 0, 1, "", "truncated_svd"], [461, 0, 1, "", "tt_matrix_to_tensor"], [462, 0, 1, "", "tucker"], [507, 0, 1, "", "unflatten"], [508, 0, 1, "", "unfold"], [763, 0, 1, "", "unique_all"], [509, 0, 1, "", "unique_consecutive"], [764, 0, 1, "", "unique_counts"], [765, 0, 1, "", "unique_inverse"], [766, 0, 1, "", "unique_values"], [524, 0, 1, "", "unravel_index"], [341, 0, 1, "", "unsorted_segment_mean"], [342, 0, 1, "", "unsorted_segment_min"], [343, 0, 1, "", "unsorted_segment_sum"], [727, 0, 1, "", "unstack"], [624, 0, 1, "", "value_is_nan"], [703, 0, 1, "", "vander"], [780, 0, 1, "", "var"], [704, 0, 1, "", "vecdot"], [705, 0, 1, "", "vector_norm"], [706, 0, 1, "", "vector_to_skew_symmetric_matrix"], [510, 0, 1, "", "vsplit"], [511, 0, 1, "", "vstack"], [762, 0, 1, "", "where"], [372, 0, 1, "", "xlogy"], [728, 0, 1, "", "zero_pad"], [160, 0, 1, "", "zeros_like"], [373, 0, 1, "", "zeta"]], "ivy": [[645, 1, 1, "", "ArrayMode"], [641, 1, 1, "", "DefaultComplexDtype"], [642, 1, 1, "", "DefaultDevice"], [641, 1, 1, "", "DefaultDtype"], [641, 1, 1, "", "DefaultFloatDtype"], [641, 1, 1, "", "DefaultIntDtype"], [641, 1, 1, "", "DefaultUintDtype"], [397, 1, 1, "", "NativeSparseArray"], [640, 1, 1, "", "NestedSequence"], [645, 1, 1, "", "PreciseMode"], [642, 1, 1, "", "Profiler"], [397, 1, 1, "", "SparseArray"], [231, 2, 1, "", "abs"], [232, 2, 1, "", "acos"], [233, 2, 1, "", "acosh"], [646, 2, 1, "", "adam_step"], [646, 2, 1, "", "adam_update"], [400, 2, 1, "", "adaptive_avg_pool1d"], [401, 2, 1, "", "adaptive_avg_pool2d"], [402, 2, 1, "", "adaptive_max_pool2d"], [403, 2, 1, "", "adaptive_max_pool3d"], [234, 2, 1, "", "add"], [387, 2, 1, "", "adjoint"], [659, 2, 1, "", "all"], [645, 2, 1, "", "all_equal"], [652, 2, 1, "", "all_nested_indices"], [383, 2, 1, "", "allclose"], [383, 2, 1, "", "amax"], [383, 2, 1, "", "amin"], [235, 2, 1, "", "angle"], [659, 2, 1, "", "any"], [640, 2, 1, "", "arange"], [404, 2, 1, "", "area_interpolate"], [645, 2, 1, "", "arg_info"], [645, 2, 1, "", "arg_names"], [655, 2, 1, "", "argmax"], [655, 2, 1, "", "argmin"], [657, 2, 1, "", "argsort"], [655, 2, 1, "", "argwhere"], [640, 2, 1, "", "array"], [645, 2, 1, "", "array_equal"], [204, 2, 1, "", "as_ivy_dev"], [641, 2, 1, "", "as_ivy_dtype"], [205, 2, 1, "", "as_native_dev"], [641, 2, 1, "", "as_native_dtype"], [389, 2, 1, "", "as_strided"], [640, 2, 1, "", "asarray"], [236, 2, 1, "", "asin"], [237, 2, 1, "", "asinh"], [645, 2, 1, "", "assert_supports_inplace"], [389, 2, 1, "", "associative_scan"], [641, 2, 1, "", "astype"], [238, 2, 1, "", "atan"], [239, 2, 1, "", "atan2"], [240, 2, 1, "", "atanh"], [389, 2, 1, "", "atleast_1d"], [389, 2, 1, "", "atleast_2d"], [389, 2, 1, "", "atleast_3d"], [405, 2, 1, "", "avg_pool1d"], [406, 2, 1, "", "avg_pool2d"], [407, 2, 1, "", "avg_pool3d"], [392, 2, 1, "", "batch_norm"], [387, 2, 1, "", "batched_outer"], [393, 2, 1, "", "bernoulli"], [393, 2, 1, "", "beta"], [383, 2, 1, "", "binarizer"], [649, 2, 1, "", "binary_cross_entropy"], [398, 2, 1, "", "bincount"], [385, 2, 1, "", "bind_custom_gradient_function"], [241, 2, 1, "", "bitwise_and"], [242, 2, 1, "", "bitwise_invert"], [243, 2, 1, "", "bitwise_left_shift"], [244, 2, 1, "", "bitwise_or"], [245, 2, 1, "", "bitwise_right_shift"], [246, 2, 1, "", "bitwise_xor"], [323, 2, 1, "", "blackman_window"], [641, 2, 1, "", "broadcast_arrays"], [389, 2, 1, "", "broadcast_shapes"], [641, 2, 1, "", "broadcast_to"], [645, 2, 1, "", "cache_fn"], [641, 2, 1, "", "can_cast"], [247, 2, 1, "", "ceil"], [306, 2, 1, "", "celu"], [641, 2, 1, "", "check_float"], [389, 2, 1, "", "check_scalar"], [648, 2, 1, "", "cholesky"], [389, 2, 1, "", "choose"], [206, 2, 1, "", "clear_cached_mem_on_dev"], [650, 2, 1, "", "clip"], [645, 2, 1, "", "clip_matrix_norm"], [645, 2, 1, "", "clip_vector_norm"], [641, 2, 1, "", "closest_valid_dtype"], [639, 2, 1, "", "cmp_is"], [639, 2, 1, "", "cmp_isnot"], [389, 2, 1, "", "column_stack"], [650, 2, 1, "", "concat"], [389, 2, 1, "", "concat_from_sequence"], [387, 2, 1, "", "cond"], [383, 2, 1, "", "conj"], [650, 2, 1, "", "constant_pad"], [645, 2, 1, "", "container_types"], [647, 2, 1, "", "conv"], [647, 2, 1, "", "conv1d"], [647, 2, 1, "", "conv1d_transpose"], [647, 2, 1, "", "conv2d"], [647, 2, 1, "", "conv2d_transpose"], [647, 2, 1, "", "conv3d"], [647, 2, 1, "", "conv3d_transpose"], [647, 2, 1, "", "conv_general_dilated"], [647, 2, 1, "", "conv_general_transpose"], [640, 2, 1, "", "copy_array"], [652, 2, 1, "", "copy_nest"], [383, 2, 1, "", "copysign"], [398, 2, 1, "", "corrcoef"], [248, 2, 1, "", "cos"], [249, 2, 1, "", "cosh"], [383, 2, 1, "", "count_nonzero"], [398, 2, 1, "", "cov"], [648, 2, 1, "", "cross"], [649, 2, 1, "", "cross_entropy"], [398, 2, 1, "", "cummax"], [398, 2, 1, "", "cummin"], [658, 2, 1, "", "cumprod"], [658, 2, 1, "", "cumsum"], [645, 2, 1, "", "current_backend_str"], [408, 2, 1, "", "dct"], [645, 2, 1, "", "default"], [641, 2, 1, "", "default_complex_dtype"], [207, 2, 1, "", "default_device"], [641, 2, 1, "", "default_dtype"], [641, 2, 1, "", "default_float_dtype"], [641, 2, 1, "", "default_int_dtype"], [641, 2, 1, "", "default_uint_dtype"], [250, 2, 1, "", "deg2rad"], [647, 2, 1, "", "depthwise_conv2d"], [648, 2, 1, "", "det"], [208, 2, 1, "", "dev"], [209, 2, 1, "", "dev_util"], [409, 2, 1, "", "dft"], [648, 2, 1, "", "diag"], [387, 2, 1, "", "diagflat"], [648, 2, 1, "", "diagonal"], [383, 2, 1, "", "diff"], [383, 2, 1, "", "digamma"], [393, 2, 1, "", "dirichlet"], [251, 2, 1, "", "divide"], [387, 2, 1, "", "dot"], [647, 2, 1, "", "dropout"], [410, 2, 1, "", "dropout1d"], [411, 2, 1, "", "dropout2d"], [412, 2, 1, "", "dropout3d"], [389, 2, 1, "", "dsplit"], [389, 2, 1, "", "dstack"], [641, 2, 1, "", "dtype"], [641, 2, 1, "", "dtype_bits"], [652, 2, 1, "", "duplicate_array_index_chains"], [638, 6, 1, "", "e"], [387, 2, 1, "", "eig"], [648, 2, 1, "", "eigh"], [387, 2, 1, "", "eigh_tridiagonal"], [387, 2, 1, "", "eigvals"], [648, 2, 1, "", "eigvalsh"], [645, 2, 1, "", "einops_rearrange"], [645, 2, 1, "", "einops_reduce"], [645, 2, 1, "", "einops_repeat"], [658, 2, 1, "", "einsum"], [307, 2, 1, "", "elu"], [413, 2, 1, "", "embedding"], [640, 2, 1, "", "empty"], [640, 2, 1, "", "empty_like"], [252, 2, 1, "", "equal"], [253, 2, 1, "", "erf"], [383, 2, 1, "", "erfc"], [383, 2, 1, "", "erfinv"], [646, 2, 1, "", "execute_with_gradients"], [645, 2, 1, "", "exists"], [254, 2, 1, "", "exp"], [255, 2, 1, "", "exp2"], [389, 2, 1, "", "expand"], [650, 2, 1, "", "expand_dims"], [256, 2, 1, "", "expm1"], [640, 2, 1, "", "eye"], [324, 2, 1, "", "eye_like"], [414, 2, 1, "", "fft"], [415, 2, 1, "", "fft2"], [389, 2, 1, "", "fill_diagonal"], [641, 2, 1, "", "finfo"], [383, 2, 1, "", "fix"], [389, 2, 1, "", "flatten"], [650, 2, 1, "", "flip"], [389, 2, 1, "", "fliplr"], [389, 2, 1, "", "flipud"], [383, 2, 1, "", "float_power"], [257, 2, 1, "", "floor"], [258, 2, 1, "", "floor_divide"], [383, 2, 1, "", "fmax"], [259, 2, 1, "", "fmin"], [260, 2, 1, "", "fmod"], [389, 2, 1, "", "fold"], [651, 2, 1, "", "fomaml_step"], [639, 2, 1, "", "for_loop"], [645, 2, 1, "", "fourier_encode"], [383, 2, 1, "", "frexp"], [640, 2, 1, "", "from_dlpack"], [640, 2, 1, "", "frombuffer"], [640, 2, 1, "", "full"], [640, 2, 1, "", "full_like"], [210, 2, 1, "", "function_supported_devices"], [645, 2, 1, "", "function_supported_devices_and_dtypes"], [641, 2, 1, "", "function_supported_dtypes"], [211, 2, 1, "", "function_unsupported_devices"], [645, 2, 1, "", "function_unsupported_devices_and_dtypes"], [641, 2, 1, "", "function_unsupported_dtypes"], [393, 2, 1, "", "gamma"], [645, 2, 1, "", "gather"], [645, 2, 1, "", "gather_nd"], [261, 2, 1, "", "gcd"], [637, 2, 1, "", "gelu"], [387, 2, 1, "", "general_inner_product"], [416, 2, 1, "", "generate_einsum_equation"], [645, 2, 1, "", "get_all_arrays_in_memory"], [212, 2, 1, "", "get_all_ivy_arrays_on_dev"], [417, 2, 1, "", "get_interpolate_kernel"], [645, 2, 1, "", "get_item"], [645, 2, 1, "", "get_num_dims"], [645, 2, 1, "", "get_referrers_recursive"], [213, 2, 1, "", "gpu_is_available"], [646, 2, 1, "", "grad"], [383, 2, 1, "", "gradient"], [646, 2, 1, "", "gradient_descent_update"], [262, 2, 1, "", "greater"], [263, 2, 1, "", "greater_equal"], [392, 2, 1, "", "group_norm"], [325, 2, 1, "", "hamming_window"], [214, 2, 1, "", "handle_soft_device_variable"], [326, 2, 1, "", "hann_window"], [308, 2, 1, "", "hardshrink"], [309, 2, 1, "", "hardsilu"], [637, 2, 1, "", "hardswish"], [310, 2, 1, "", "hardtanh"], [645, 2, 1, "", "has_nans"], [389, 2, 1, "", "heaviside"], [387, 2, 1, "", "higher_order_moment"], [388, 2, 1, "", "hinge_embedding_loss"], [398, 2, 1, "", "histogram"], [389, 2, 1, "", "hsplit"], [389, 2, 1, "", "hstack"], [388, 2, 1, "", "huber_loss"], [383, 2, 1, "", "hypot"], [389, 2, 1, "", "i0"], [418, 2, 1, "", "idct"], [639, 2, 1, "", "if_else"], [419, 2, 1, "", "ifft"], [420, 2, 1, "", "ifftn"], [398, 2, 1, "", "igamma"], [641, 2, 1, "", "iinfo"], [264, 2, 1, "", "imag"], [652, 2, 1, "", "index_nest"], [327, 2, 1, "", "indices"], [638, 6, 1, "", "inf"], [641, 2, 1, "", "infer_default_dtype"], [387, 2, 1, "", "initialize_tucker"], [648, 2, 1, "", "inner"], [645, 2, 1, "", "inplace_arrays_supported"], [645, 2, 1, "", "inplace_decrement"], [645, 2, 1, "", "inplace_increment"], [645, 2, 1, "", "inplace_update"], [645, 2, 1, "", "inplace_variables_supported"], [652, 2, 1, "", "insert_into_nest_at_index"], [652, 2, 1, "", "insert_into_nest_at_indices"], [392, 2, 1, "", "instance_norm"], [421, 2, 1, "", "interp"], [422, 2, 1, "", "interpolate"], [648, 2, 1, "", "inv"], [641, 2, 1, "", "invalid_dtype"], [396, 2, 1, "", "invert_permutation"], [645, 2, 1, "", "is_array"], [641, 2, 1, "", "is_bool_dtype"], [641, 2, 1, "", "is_complex_dtype"], [641, 2, 1, "", "is_float_dtype"], [641, 2, 1, "", "is_hashable_dtype"], [641, 2, 1, "", "is_int_dtype"], [645, 2, 1, "", "is_ivy_array"], [645, 2, 1, "", "is_ivy_container"], [645, 2, 1, "", "is_ivy_nested_array"], [397, 2, 1, "", "is_ivy_sparse_array"], [645, 2, 1, "", "is_native_array"], [641, 2, 1, "", "is_native_dtype"], [397, 2, 1, "", "is_native_sparse_array"], [188, 2, 1, "", "is_uint_dtype"], [383, 2, 1, "", "isclose"], [265, 2, 1, "", "isfinite"], [645, 2, 1, "", "isin"], [266, 2, 1, "", "isinf"], [267, 2, 1, "", "isnan"], [268, 2, 1, "", "isreal"], [645, 2, 1, "", "isscalar"], [645, 2, 1, "", "itemsize"], [646, 2, 1, "", "jac"], [385, 2, 1, "", "jvp"], [328, 2, 1, "", "kaiser_bessel_derived_window"], [380, 2, 1, "", "kaiser_window"], [387, 2, 1, "", "khatri_rao"], [388, 2, 1, "", "kl_div"], [387, 2, 1, "", "kron"], [387, 2, 1, "", "kronecker"], [388, 2, 1, "", "l1_loss"], [392, 2, 1, "", "l1_normalize"], [392, 2, 1, "", "l2_normalize"], [646, 2, 1, "", "lamb_update"], [646, 2, 1, "", "lars_update"], [653, 2, 1, "", "layer_norm"], [269, 2, 1, "", "lcm"], [383, 2, 1, "", "ldexp"], [637, 2, 1, "", "leaky_relu"], [383, 2, 1, "", "lerp"], [270, 2, 1, "", "less"], [271, 2, 1, "", "less_equal"], [396, 2, 1, "", "lexsort"], [383, 2, 1, "", "lgamma"], [647, 2, 1, "", "linear"], [640, 2, 1, "", "linspace"], [659, 2, 1, "", "load"], [392, 2, 1, "", "local_response_norm"], [272, 2, 1, "", "log"], [273, 2, 1, "", "log10"], [274, 2, 1, "", "log1p"], [275, 2, 1, "", "log2"], [388, 2, 1, "", "log_poisson_loss"], [637, 2, 1, "", "log_softmax"], [276, 2, 1, "", "logaddexp"], [277, 2, 1, "", "logaddexp2"], [278, 2, 1, "", "logical_and"], [279, 2, 1, "", "logical_not"], [280, 2, 1, "", "logical_or"], [281, 2, 1, "", "logical_xor"], [311, 2, 1, "", "logit"], [312, 2, 1, "", "logsigmoid"], [640, 2, 1, "", "logspace"], [392, 2, 1, "", "lp_normalize"], [647, 2, 1, "", "lstm"], [647, 2, 1, "", "lstm_update"], [387, 2, 1, "", "lu_factor"], [387, 2, 1, "", "lu_solve"], [387, 2, 1, "", "make_svd_non_negative"], [651, 2, 1, "", "maml_step"], [652, 2, 1, "", "map"], [652, 2, 1, "", "map_nest_at_index"], [652, 2, 1, "", "map_nest_at_indices"], [645, 2, 1, "", "match_kwargs"], [648, 2, 1, "", "matmul"], [389, 2, 1, "", "matricize"], [387, 2, 1, "", "matrix_exp"], [648, 2, 1, "", "matrix_norm"], [648, 2, 1, "", "matrix_power"], [648, 2, 1, "", "matrix_rank"], [648, 2, 1, "", "matrix_transpose"], [658, 2, 1, "", "max"], [386, 2, 1, "", "max_pool1d"], [386, 2, 1, "", "max_pool2d"], [386, 2, 1, "", "max_pool3d"], [386, 2, 1, "", "max_unpool1d"], [282, 2, 1, "", "maximum"], [658, 2, 1, "", "mean"], [398, 2, 1, "", "median"], [380, 2, 1, "", "mel_weight_matrix"], [640, 2, 1, "", "meshgrid"], [658, 2, 1, "", "min"], [283, 2, 1, "", "minimum"], [637, 2, 1, "", "mish"], [387, 2, 1, "", "mode_dot"], [383, 2, 1, "", "modf"], [389, 2, 1, "", "moveaxis"], [657, 2, 1, "", "msort"], [387, 2, 1, "", "multi_dot"], [647, 2, 1, "", "multi_head_attention"], [652, 2, 1, "", "multi_index_nest"], [387, 2, 1, "", "multi_mode_dot"], [654, 2, 1, "", "multinomial"], [284, 2, 1, "", "multiply"], [645, 2, 1, "", "multiprocessing"], [638, 6, 1, "", "nan"], [285, 2, 1, "", "nan_to_num"], [398, 2, 1, "", "nanmean"], [398, 2, 1, "", "nanmedian"], [398, 2, 1, "", "nanmin"], [398, 2, 1, "", "nanprod"], [383, 2, 1, "", "nansum"], [640, 2, 1, "", "native_array"], [397, 2, 1, "", "native_sparse_array"], [397, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [380, 2, 1, "", "ndenumerate"], [380, 2, 1, "", "ndindex"], [386, 2, 1, "", "nearest_interpolate"], [286, 2, 1, "", "negative"], [652, 2, 1, "", "nested_any"], [652, 2, 1, "", "nested_argwhere"], [652, 2, 1, "", "nested_map"], [652, 2, 1, "", "nested_multi_map"], [638, 6, 1, "", "newaxis"], [383, 2, 1, "", "nextafter"], [647, 2, 1, "", "nms"], [655, 2, 1, "", "nonzero"], [287, 2, 1, "", "not_equal"], [645, 2, 1, "", "num_arrays_in_memory"], [215, 2, 1, "", "num_cpu_cores"], [216, 2, 1, "", "num_gpus"], [217, 2, 1, "", "num_ivy_arrays_on_dev"], [640, 2, 1, "", "one_hot"], [640, 2, 1, "", "ones"], [640, 2, 1, "", "ones_like"], [646, 2, 1, "", "optimizer_update"], [399, 2, 1, "", "optional_get_element"], [648, 2, 1, "", "outer"], [389, 2, 1, "", "pad"], [389, 2, 1, "", "partial_fold"], [389, 2, 1, "", "partial_tensor_to_vec"], [387, 2, 1, "", "partial_tucker"], [389, 2, 1, "", "partial_unfold"], [389, 2, 1, "", "partial_vec_to_tensor"], [218, 2, 1, "", "percent_used_mem_on_dev"], [650, 2, 1, "", "permute_dims"], [638, 6, 1, "", "pi"], [648, 2, 1, "", "pinv"], [393, 2, 1, "", "poisson"], [388, 2, 1, "", "poisson_nll_loss"], [380, 2, 1, "", "polyval"], [386, 2, 1, "", "pool"], [288, 2, 1, "", "positive"], [289, 2, 1, "", "pow"], [313, 2, 1, "", "prelu"], [645, 2, 1, "", "print_all_arrays_in_memory"], [219, 2, 1, "", "print_all_ivy_arrays_on_dev"], [658, 2, 1, "", "prod"], [189, 2, 1, "", "promote_types"], [190, 2, 1, "", "promote_types_of_inputs"], [652, 2, 1, "", "prune_empty"], [652, 2, 1, "", "prune_nest_at_index"], [652, 2, 1, "", "prune_nest_at_indices"], [389, 2, 1, "", "put_along_axis"], [648, 2, 1, "", "qr"], [398, 2, 1, "", "quantile"], [290, 2, 1, "", "rad2deg"], [654, 2, 1, "", "randint"], [380, 2, 1, "", "random_cp"], [654, 2, 1, "", "random_normal"], [380, 2, 1, "", "random_parafac2"], [380, 2, 1, "", "random_tr"], [380, 2, 1, "", "random_tt"], [380, 2, 1, "", "random_tucker"], [654, 2, 1, "", "random_uniform"], [291, 2, 1, "", "real"], [292, 2, 1, "", "reciprocal"], [384, 2, 1, "", "reduce"], [386, 2, 1, "", "reduce_window"], [637, 2, 1, "", "relu"], [314, 2, 1, "", "relu6"], [293, 2, 1, "", "remainder"], [650, 2, 1, "", "repeat"], [651, 2, 1, "", "reptile_step"], [650, 2, 1, "", "reshape"], [191, 2, 1, "", "result_type"], [386, 2, 1, "", "rfft"], [386, 2, 1, "", "rfftn"], [386, 2, 1, "", "rnn"], [647, 2, 1, "", "roi_align"], [650, 2, 1, "", "roll"], [389, 2, 1, "", "rot90"], [294, 2, 1, "", "round"], [659, 2, 1, "", "save"], [647, 2, 1, "", "scaled_dot_product_attention"], [315, 2, 1, "", "scaled_tanh"], [645, 2, 1, "", "scatter_flat"], [645, 2, 1, "", "scatter_nd"], [657, 2, 1, "", "searchsorted"], [654, 2, 1, "", "seed"], [316, 2, 1, "", "selu"], [645, 2, 1, "", "set_array_mode"], [192, 2, 1, "", "set_default_complex_dtype"], [220, 2, 1, "", "set_default_device"], [193, 2, 1, "", "set_default_dtype"], [194, 2, 1, "", "set_default_float_dtype"], [195, 2, 1, "", "set_default_int_dtype"], [196, 2, 1, "", "set_default_uint_dtype"], [645, 2, 1, "", "set_exception_trace_mode"], [645, 2, 1, "", "set_inplace_mode"], [645, 2, 1, "", "set_item"], [645, 2, 1, "", "set_min_base"], [645, 2, 1, "", "set_min_denominator"], [652, 2, 1, "", "set_nest_at_index"], [652, 2, 1, "", "set_nest_at_indices"], [645, 2, 1, "", "set_nestable_mode"], [645, 2, 1, "", "set_precise_mode"], [645, 2, 1, "", "set_queue_timeout"], [645, 2, 1, "", "set_shape_array_mode"], [645, 2, 1, "", "set_show_func_wrapper_trace_mode"], [221, 2, 1, "", "set_soft_device_mode"], [222, 2, 1, "", "set_split_factor"], [645, 2, 1, "", "set_tmp_dir"], [645, 2, 1, "", "shape"], [654, 2, 1, "", "shuffle"], [637, 2, 1, "", "sigmoid"], [295, 2, 1, "", "sign"], [383, 2, 1, "", "signbit"], [317, 2, 1, "", "silu"], [296, 2, 1, "", "sin"], [383, 2, 1, "", "sinc"], [297, 2, 1, "", "sinh"], [645, 2, 1, "", "size"], [386, 2, 1, "", "sliding_window"], [648, 2, 1, "", "slogdet"], [388, 2, 1, "", "smooth_l1_loss"], [388, 2, 1, "", "soft_margin_loss"], [389, 2, 1, "", "soft_thresholding"], [637, 2, 1, "", "softmax"], [637, 2, 1, "", "softplus"], [318, 2, 1, "", "softshrink"], [637, 2, 1, "", "softsign"], [648, 2, 1, "", "solve"], [387, 2, 1, "", "solve_triangular"], [657, 2, 1, "", "sort"], [649, 2, 1, "", "sparse_cross_entropy"], [383, 2, 1, "", "sparsify_tensor"], [650, 2, 1, "", "split"], [223, 2, 1, "", "split_factor"], [224, 2, 1, "", "split_func_call"], [298, 2, 1, "", "sqrt"], [299, 2, 1, "", "square"], [650, 2, 1, "", "squeeze"], [649, 2, 1, "", "ssim_loss"], [645, 2, 1, "", "stable_divide"], [645, 2, 1, "", "stable_pow"], [650, 2, 1, "", "stack"], [319, 2, 1, "", "stanh"], [658, 2, 1, "", "std"], [386, 2, 1, "", "stft"], [646, 2, 1, "", "stop_gradient"], [645, 2, 1, "", "strides"], [300, 2, 1, "", "subtract"], [658, 2, 1, "", "sum"], [645, 2, 1, "", "supports_inplace_updates"], [648, 2, 1, "", "svd"], [387, 2, 1, "", "svd_flip"], [648, 2, 1, "", "svdvals"], [650, 2, 1, "", "swapaxes"], [389, 2, 1, "", "take"], [389, 2, 1, "", "take_along_axis"], [301, 2, 1, "", "tan"], [302, 2, 1, "", "tanh"], [320, 2, 1, "", "tanhshrink"], [387, 2, 1, "", "tensor_train"], [648, 2, 1, "", "tensordot"], [648, 2, 1, "", "tensorsolve"], [321, 2, 1, "", "threshold"], [322, 2, 1, "", "thresholded_relu"], [650, 2, 1, "", "tile"], [225, 2, 1, "", "to_device"], [640, 2, 1, "", "to_dlpack"], [645, 2, 1, "", "to_ivy_shape"], [645, 2, 1, "", "to_list"], [645, 2, 1, "", "to_native_shape"], [645, 2, 1, "", "to_numpy"], [645, 2, 1, "", "to_scalar"], [389, 2, 1, "", "top_k"], [226, 2, 1, "", "total_mem_on_dev"], [227, 2, 1, "", "tpu_is_available"], [648, 2, 1, "", "trace"], [878, 2, 1, "", "trace_graph"], [879, 2, 1, "", "transpile"], [303, 2, 1, "", "trapz"], [640, 2, 1, "", "tril"], [380, 2, 1, "", "tril_indices"], [380, 2, 1, "", "trilu"], [389, 2, 1, "", "trim_zeros"], [640, 2, 1, "", "triu"], [640, 2, 1, "", "triu_indices"], [304, 2, 1, "", "trunc"], [305, 2, 1, "", "trunc_divide"], [387, 2, 1, "", "truncated_svd"], [645, 2, 1, "", "try_else_none"], [639, 2, 1, "", "try_except"], [387, 2, 1, "", "tt_matrix_to_tensor"], [387, 2, 1, "", "tucker"], [197, 2, 1, "", "type_promote_arrays"], [389, 2, 1, "", "unflatten"], [389, 2, 1, "", "unfold"], [880, 2, 1, "", "unify"], [656, 2, 1, "", "unique_all"], [389, 2, 1, "", "unique_consecutive"], [656, 2, 1, "", "unique_counts"], [656, 2, 1, "", "unique_inverse"], [656, 2, 1, "", "unique_values"], [394, 2, 1, "", "unravel_index"], [645, 2, 1, "", "unset_array_mode"], [198, 2, 1, "", "unset_default_complex_dtype"], [228, 2, 1, "", "unset_default_device"], [199, 2, 1, "", "unset_default_dtype"], [200, 2, 1, "", "unset_default_float_dtype"], [201, 2, 1, "", "unset_default_int_dtype"], [202, 2, 1, "", "unset_default_uint_dtype"], [645, 2, 1, "", "unset_exception_trace_mode"], [645, 2, 1, "", "unset_inplace_mode"], [645, 2, 1, "", "unset_min_base"], [645, 2, 1, "", "unset_min_denominator"], [645, 2, 1, "", "unset_nestable_mode"], [645, 2, 1, "", "unset_precise_mode"], [645, 2, 1, "", "unset_queue_timeout"], [645, 2, 1, "", "unset_shape_array_mode"], [645, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [229, 2, 1, "", "unset_soft_device_mode"], [645, 2, 1, "", "unset_tmp_dir"], [380, 2, 1, "", "unsorted_segment_mean"], [380, 2, 1, "", "unsorted_segment_min"], [380, 2, 1, "", "unsorted_segment_sum"], [650, 2, 1, "", "unstack"], [230, 2, 1, "", "used_mem_on_dev"], [203, 2, 1, "", "valid_dtype"], [646, 2, 1, "", "value_and_grad"], [645, 2, 1, "", "value_is_nan"], [648, 2, 1, "", "vander"], [658, 2, 1, "", "var"], [648, 2, 1, "", "vecdot"], [648, 2, 1, "", "vector_norm"], [648, 2, 1, "", "vector_to_skew_symmetric_matrix"], [385, 2, 1, "", "vjp"], [645, 2, 1, "", "vmap"], [380, 2, 1, "", "vorbis_window"], [389, 2, 1, "", "vsplit"], [389, 2, 1, "", "vstack"], [649, 2, 1, "", "wasserstein_loss_discriminator"], [649, 2, 1, "", "wasserstein_loss_generator"], [655, 2, 1, "", "where"], [639, 2, 1, "", "while_loop"], [383, 2, 1, "", "xlogy"], [650, 2, 1, "", "zero_pad"], [640, 2, 1, "", "zeros"], [640, 2, 1, "", "zeros_like"], [383, 2, 1, "", "zeta"]], "ivy.Container": [[231, 0, 1, "", "abs"], [232, 0, 1, "", "acos"], [233, 0, 1, "", "acosh"], [626, 0, 1, "", "adam_step"], [627, 0, 1, "", "adam_update"], [400, 0, 1, "", "adaptive_avg_pool1d"], [401, 0, 1, "", "adaptive_avg_pool2d"], [402, 0, 1, "", "adaptive_max_pool2d"], [403, 0, 1, "", "adaptive_max_pool3d"], [234, 0, 1, "", "add"], [435, 0, 1, "", "adjoint"], [781, 0, 1, "", "all"], [545, 0, 1, "", "all_equal"], [345, 0, 1, "", "allclose"], [346, 0, 1, "", "amax"], [347, 0, 1, "", "amin"], [235, 0, 1, "", "angle"], [782, 0, 1, "", "any"], [758, 0, 1, "", "argmax"], [759, 0, 1, "", "argmin"], [767, 0, 1, "", "argsort"], [760, 0, 1, "", "argwhere"], [548, 0, 1, "", "array_equal"], [471, 0, 1, "", "as_strided"], [139, 0, 1, "", "asarray"], [236, 0, 1, "", "asin"], [237, 0, 1, "", "asinh"], [549, 0, 1, "", "assert_supports_inplace"], [472, 0, 1, "", "associative_scan"], [163, 0, 1, "", "astype"], [238, 0, 1, "", "atan"], [239, 0, 1, "", "atan2"], [240, 0, 1, "", "atanh"], [473, 0, 1, "", "atleast_1d"], [474, 0, 1, "", "atleast_2d"], [475, 0, 1, "", "atleast_3d"], [405, 0, 1, "", "avg_pool1d"], [406, 0, 1, "", "avg_pool2d"], [407, 0, 1, "", "avg_pool3d"], [512, 0, 1, "", "batch_norm"], [436, 0, 1, "", "batched_outer"], [519, 0, 1, "", "bernoulli"], [520, 0, 1, "", "beta"], [348, 0, 1, "", "binarizer"], [707, 0, 1, "", "binary_cross_entropy"], [531, 0, 1, "", "bincount"], [241, 0, 1, "", "bitwise_and"], [242, 0, 1, "", "bitwise_invert"], [243, 0, 1, "", "bitwise_left_shift"], [244, 0, 1, "", "bitwise_or"], [245, 0, 1, "", "bitwise_right_shift"], [246, 0, 1, "", "bitwise_xor"], [323, 0, 1, "", "blackman_window"], [164, 0, 1, "", "broadcast_arrays"], [476, 0, 1, "", "broadcast_shapes"], [165, 0, 1, "", "broadcast_to"], [166, 0, 1, "", "can_cast"], [247, 0, 1, "", "ceil"], [306, 0, 1, "", "celu"], [678, 0, 1, "", "cholesky"], [713, 0, 1, "", "clip"], [551, 0, 1, "", "clip_matrix_norm"], [552, 0, 1, "", "clip_vector_norm"], [479, 0, 1, "", "column_stack"], [714, 0, 1, "", "concat"], [480, 0, 1, "", "concat_from_sequence"], [437, 0, 1, "", "cond"], [349, 0, 1, "", "conj"], [715, 0, 1, "", "constant_pad"], [661, 0, 1, "", "conv1d"], [662, 0, 1, "", "conv1d_transpose"], [663, 0, 1, "", "conv2d"], [664, 0, 1, "", "conv2d_transpose"], [665, 0, 1, "", "conv3d"], [666, 0, 1, "", "conv3d_transpose"], [140, 0, 1, "", "copy_array"], [350, 0, 1, "", "copysign"], [532, 0, 1, "", "corrcoef"], [248, 0, 1, "", "cos"], [249, 0, 1, "", "cosh"], [351, 0, 1, "", "count_nonzero"], [533, 0, 1, "", "cov"], [679, 0, 1, "", "cross"], [708, 0, 1, "", "cross_entropy"], [534, 0, 1, "", "cummax"], [535, 0, 1, "", "cummin"], [771, 0, 1, "", "cumprod"], [772, 0, 1, "", "cumsum"], [408, 0, 1, "", "dct"], [250, 0, 1, "", "deg2rad"], [669, 0, 1, "", "depthwise_conv2d"], [680, 0, 1, "", "det"], [208, 0, 1, "", "dev"], [409, 0, 1, "", "dft"], [681, 0, 1, "", "diag"], [438, 0, 1, "", "diagflat"], [682, 0, 1, "", "diagonal"], [352, 0, 1, "", "diff"], [353, 0, 1, "", "digamma"], [521, 0, 1, "", "dirichlet"], [251, 0, 1, "", "divide"], [439, 0, 1, "", "dot"], [670, 0, 1, "", "dropout"], [410, 0, 1, "", "dropout1d"], [411, 0, 1, "", "dropout2d"], [412, 0, 1, "", "dropout3d"], [481, 0, 1, "", "dsplit"], [482, 0, 1, "", "dstack"], [174, 0, 1, "", "dtype"], [440, 0, 1, "", "eig"], [684, 0, 1, "", "eigh"], [441, 0, 1, "", "eigh_tridiagonal"], [442, 0, 1, "", "eigvals"], [685, 0, 1, "", "eigvalsh"], [556, 0, 1, "", "einops_rearrange"], [557, 0, 1, "", "einops_reduce"], [558, 0, 1, "", "einops_repeat"], [773, 0, 1, "", "einsum"], [307, 0, 1, "", "elu"], [413, 0, 1, "", "embedding"], [142, 0, 1, "", "empty_like"], [252, 0, 1, "", "equal"], [253, 0, 1, "", "erf"], [354, 0, 1, "", "erfc"], [355, 0, 1, "", "erfinv"], [559, 0, 1, "", "exists"], [254, 0, 1, "", "exp"], [255, 0, 1, "", "exp2"], [483, 0, 1, "", "expand"], [716, 0, 1, "", "expand_dims"], [256, 0, 1, "", "expm1"], [324, 0, 1, "", "eye_like"], [414, 0, 1, "", "fft"], [484, 0, 1, "", "fill_diagonal"], [176, 0, 1, "", "finfo"], [356, 0, 1, "", "fix"], [485, 0, 1, "", "flatten"], [717, 0, 1, "", "flip"], [486, 0, 1, "", "fliplr"], [487, 0, 1, "", "flipud"], [357, 0, 1, "", "float_power"], [257, 0, 1, "", "floor"], [258, 0, 1, "", "floor_divide"], [358, 0, 1, "", "fmax"], [259, 0, 1, "", "fmin"], [260, 0, 1, "", "fmod"], [488, 0, 1, "", "fold"], [560, 0, 1, "", "fourier_encode"], [359, 0, 1, "", "frexp"], [144, 0, 1, "", "from_dlpack"], [145, 0, 1, "", "frombuffer"], [147, 0, 1, "", "full_like"], [522, 0, 1, "", "gamma"], [563, 0, 1, "", "gather"], [564, 0, 1, "", "gather_nd"], [261, 0, 1, "", "gcd"], [121, 0, 1, "", "gelu"], [443, 0, 1, "", "general_inner_product"], [567, 0, 1, "", "get_num_dims"], [360, 0, 1, "", "gradient"], [630, 0, 1, "", "gradient_descent_update"], [262, 0, 1, "", "greater"], [263, 0, 1, "", "greater_equal"], [513, 0, 1, "", "group_norm"], [325, 0, 1, "", "hamming_window"], [326, 0, 1, "", "hann_window"], [308, 0, 1, "", "hardshrink"], [309, 0, 1, "", "hardsilu"], [122, 0, 1, "", "hardswish"], [310, 0, 1, "", "hardtanh"], [569, 0, 1, "", "has_nans"], [489, 0, 1, "", "heaviside"], [444, 0, 1, "", "higher_order_moment"], [463, 0, 1, "", "hinge_embedding_loss"], [536, 0, 1, "", "histogram"], [490, 0, 1, "", "hsplit"], [491, 0, 1, "", "hstack"], [464, 0, 1, "", "huber_loss"], [361, 0, 1, "", "hypot"], [492, 0, 1, "", "i0"], [418, 0, 1, "", "idct"], [419, 0, 1, "", "ifft"], [420, 0, 1, "", "ifftn"], [537, 0, 1, "", "igamma"], [179, 0, 1, "", "iinfo"], [264, 0, 1, "", "imag"], [445, 0, 1, "", "initialize_tucker"], [686, 0, 1, "", "inner"], [571, 0, 1, "", "inplace_decrement"], [572, 0, 1, "", "inplace_increment"], [573, 0, 1, "", "inplace_update"], [514, 0, 1, "", "instance_norm"], [422, 0, 1, "", "interpolate"], [687, 0, 1, "", "inv"], [525, 0, 1, "", "invert_permutation"], [575, 0, 1, "", "is_array"], [182, 0, 1, "", "is_bool_dtype"], [183, 0, 1, "", "is_complex_dtype"], [184, 0, 1, "", "is_float_dtype"], [186, 0, 1, "", "is_int_dtype"], [576, 0, 1, "", "is_ivy_array"], [579, 0, 1, "", "is_native_array"], [188, 0, 1, "", "is_uint_dtype"], [362, 0, 1, "", "isclose"], [265, 0, 1, "", "isfinite"], [580, 0, 1, "", "isin"], [266, 0, 1, "", "isinf"], [267, 0, 1, "", "isnan"], [268, 0, 1, "", "isreal"], [582, 0, 1, "", "itemsize"], [328, 0, 1, "", "kaiser_bessel_derived_window"], [329, 0, 1, "", "kaiser_window"], [465, 0, 1, "", "kl_div"], [447, 0, 1, "", "kron"], [466, 0, 1, "", "l1_loss"], [515, 0, 1, "", "l1_normalize"], [516, 0, 1, "", "l2_normalize"], [632, 0, 1, "", "lamb_update"], [633, 0, 1, "", "lars_update"], [751, 0, 1, "", "layer_norm"], [269, 0, 1, "", "lcm"], [363, 0, 1, "", "ldexp"], [123, 0, 1, "", "leaky_relu"], [364, 0, 1, "", "lerp"], [270, 0, 1, "", "less"], [271, 0, 1, "", "less_equal"], [526, 0, 1, "", "lexsort"], [365, 0, 1, "", "lgamma"], [671, 0, 1, "", "linear"], [148, 0, 1, "", "linspace"], [272, 0, 1, "", "log"], [273, 0, 1, "", "log10"], [274, 0, 1, "", "log1p"], [275, 0, 1, "", "log2"], [467, 0, 1, "", "log_poisson_loss"], [124, 0, 1, "", "log_softmax"], [276, 0, 1, "", "logaddexp"], [277, 0, 1, "", "logaddexp2"], [278, 0, 1, "", "logical_and"], [279, 0, 1, "", "logical_not"], [280, 0, 1, "", "logical_or"], [281, 0, 1, "", "logical_xor"], [311, 0, 1, "", "logit"], [312, 0, 1, "", "logsigmoid"], [149, 0, 1, "", "logspace"], [518, 0, 1, "", "lp_normalize"], [673, 0, 1, "", "lstm_update"], [451, 0, 1, "", "make_svd_non_negative"], [688, 0, 1, "", "matmul"], [493, 0, 1, "", "matricize"], [452, 0, 1, "", "matrix_exp"], [689, 0, 1, "", "matrix_norm"], [690, 0, 1, "", "matrix_power"], [691, 0, 1, "", "matrix_rank"], [692, 0, 1, "", "matrix_transpose"], [774, 0, 1, "", "max"], [423, 0, 1, "", "max_pool1d"], [424, 0, 1, "", "max_pool2d"], [425, 0, 1, "", "max_pool3d"], [426, 0, 1, "", "max_unpool1d"], [282, 0, 1, "", "maximum"], [775, 0, 1, "", "mean"], [538, 0, 1, "", "median"], [330, 0, 1, "", "mel_weight_matrix"], [150, 0, 1, "", "meshgrid"], [776, 0, 1, "", "min"], [283, 0, 1, "", "minimum"], [125, 0, 1, "", "mish"], [453, 0, 1, "", "mode_dot"], [366, 0, 1, "", "modf"], [494, 0, 1, "", "moveaxis"], [768, 0, 1, "", "msort"], [454, 0, 1, "", "multi_dot"], [674, 0, 1, "", "multi_head_attention"], [455, 0, 1, "", "multi_mode_dot"], [752, 0, 1, "", "multinomial"], [284, 0, 1, "", "multiply"], [285, 0, 1, "", "nan_to_num"], [539, 0, 1, "", "nanmean"], [540, 0, 1, "", "nanmedian"], [541, 0, 1, "", "nanmin"], [542, 0, 1, "", "nanprod"], [367, 0, 1, "", "nansum"], [151, 0, 1, "", "native_array"], [286, 0, 1, "", "negative"], [368, 0, 1, "", "nextafter"], [761, 0, 1, "", "nonzero"], [287, 0, 1, "", "not_equal"], [152, 0, 1, "", "one_hot"], [154, 0, 1, "", "ones_like"], [634, 0, 1, "", "optimizer_update"], [544, 0, 1, "", "optional_get_element"], [693, 0, 1, "", "outer"], [495, 0, 1, "", "pad"], [496, 0, 1, "", "partial_fold"], [497, 0, 1, "", "partial_tensor_to_vec"], [456, 0, 1, "", "partial_tucker"], [498, 0, 1, "", "partial_unfold"], [499, 0, 1, "", "partial_vec_to_tensor"], [718, 0, 1, "", "permute_dims"], [694, 0, 1, "", "pinv"], [523, 0, 1, "", "poisson"], [468, 0, 1, "", "poisson_nll_loss"], [333, 0, 1, "", "polyval"], [288, 0, 1, "", "positive"], [289, 0, 1, "", "pow"], [313, 0, 1, "", "prelu"], [777, 0, 1, "", "prod"], [500, 0, 1, "", "put_along_axis"], [695, 0, 1, "", "qr"], [543, 0, 1, "", "quantile"], [290, 0, 1, "", "rad2deg"], [753, 0, 1, "", "randint"], [754, 0, 1, "", "random_normal"], [755, 0, 1, "", "random_uniform"], [291, 0, 1, "", "real"], [292, 0, 1, "", "reciprocal"], [374, 0, 1, "", "reduce"], [429, 0, 1, "", "reduce_window"], [126, 0, 1, "", "relu"], [314, 0, 1, "", "relu6"], [293, 0, 1, "", "remainder"], [719, 0, 1, "", "repeat"], [720, 0, 1, "", "reshape"], [191, 0, 1, "", "result_type"], [430, 0, 1, "", "rfft"], [431, 0, 1, "", "rfftn"], [721, 0, 1, "", "roll"], [501, 0, 1, "", "rot90"], [294, 0, 1, "", "round"], [677, 0, 1, "", "scaled_dot_product_attention"], [315, 0, 1, "", "scaled_tanh"], [587, 0, 1, "", "scatter_flat"], [588, 0, 1, "", "scatter_nd"], [769, 0, 1, "", "searchsorted"], [316, 0, 1, "", "selu"], [757, 0, 1, "", "shuffle"], [127, 0, 1, "", "sigmoid"], [295, 0, 1, "", "sign"], [369, 0, 1, "", "signbit"], [317, 0, 1, "", "silu"], [296, 0, 1, "", "sin"], [370, 0, 1, "", "sinc"], [297, 0, 1, "", "sinh"], [602, 0, 1, "", "size"], [433, 0, 1, "", "sliding_window"], [696, 0, 1, "", "slogdet"], [469, 0, 1, "", "smooth_l1_loss"], [470, 0, 1, "", "soft_margin_loss"], [502, 0, 1, "", "soft_thresholding"], [128, 0, 1, "", "softmax"], [129, 0, 1, "", "softplus"], [318, 0, 1, "", "softshrink"], [697, 0, 1, "", "solve"], [770, 0, 1, "", "sort"], [709, 0, 1, "", "sparse_cross_entropy"], [371, 0, 1, "", "sparsify_tensor"], [722, 0, 1, "", "split"], [298, 0, 1, "", "sqrt"], [299, 0, 1, "", "square"], [723, 0, 1, "", "squeeze"], [603, 0, 1, "", "stable_divide"], [604, 0, 1, "", "stable_pow"], [724, 0, 1, "", "stack"], [778, 0, 1, "", "std"], [434, 0, 1, "", "stft"], [635, 0, 1, "", "stop_gradient"], [605, 0, 1, "", "strides"], [300, 0, 1, "", "subtract"], [779, 0, 1, "", "sum"], [606, 0, 1, "", "supports_inplace_updates"], [698, 0, 1, "", "svd"], [458, 0, 1, "", "svd_flip"], [699, 0, 1, "", "svdvals"], [725, 0, 1, "", "swapaxes"], [503, 0, 1, "", "take"], [504, 0, 1, "", "take_along_axis"], [301, 0, 1, "", "tan"], [302, 0, 1, "", "tanh"], [320, 0, 1, "", "tanhshrink"], [459, 0, 1, "", "tensor_train"], [700, 0, 1, "", "tensordot"], [701, 0, 1, "", "tensorsolve"], [321, 0, 1, "", "threshold"], [322, 0, 1, "", "thresholded_relu"], [726, 0, 1, "", "tile"], [225, 0, 1, "", "to_device"], [608, 0, 1, "", "to_list"], [610, 0, 1, "", "to_numpy"], [611, 0, 1, "", "to_scalar"], [505, 0, 1, "", "top_k"], [702, 0, 1, "", "trace"], [303, 0, 1, "", "trapz"], [156, 0, 1, "", "tril"], [339, 0, 1, "", "tril_indices"], [340, 0, 1, "", "trilu"], [506, 0, 1, "", "trim_zeros"], [157, 0, 1, "", "triu"], [158, 0, 1, "", "triu_indices"], [304, 0, 1, "", "trunc"], [305, 0, 1, "", "trunc_divide"], [460, 0, 1, "", "truncated_svd"], [461, 0, 1, "", "tt_matrix_to_tensor"], [462, 0, 1, "", "tucker"], [507, 0, 1, "", "unflatten"], [508, 0, 1, "", "unfold"], [763, 0, 1, "", "unique_all"], [509, 0, 1, "", "unique_consecutive"], [764, 0, 1, "", "unique_counts"], [765, 0, 1, "", "unique_inverse"], [766, 0, 1, "", "unique_values"], [524, 0, 1, "", "unravel_index"], [341, 0, 1, "", "unsorted_segment_mean"], [342, 0, 1, "", "unsorted_segment_min"], [343, 0, 1, "", "unsorted_segment_sum"], [727, 0, 1, "", "unstack"], [624, 0, 1, "", "value_is_nan"], [703, 0, 1, "", "vander"], [780, 0, 1, "", "var"], [704, 0, 1, "", "vecdot"], [705, 0, 1, "", "vector_norm"], [706, 0, 1, "", "vector_to_skew_symmetric_matrix"], [344, 0, 1, "", "vorbis_window"], [510, 0, 1, "", "vsplit"], [511, 0, 1, "", "vstack"], [762, 0, 1, "", "where"], [372, 0, 1, "", "xlogy"], [728, 0, 1, "", "zero_pad"], [160, 0, 1, "", "zeros_like"], [373, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[62, 3, 0, "-", "activations"], [113, 3, 0, "-", "array"], [63, 3, 0, "-", "conversions"], [64, 3, 0, "-", "creation"], [65, 3, 0, "-", "data_type"], [66, 3, 0, "-", "device"], [67, 3, 0, "-", "elementwise"], [68, 3, 0, "-", "experimental"], [69, 3, 0, "-", "general"], [70, 3, 0, "-", "gradients"], [71, 3, 0, "-", "image"], [72, 3, 0, "-", "layers"], [73, 3, 0, "-", "linear_algebra"], [74, 3, 0, "-", "losses"], [75, 3, 0, "-", "manipulation"], [76, 3, 0, "-", "norms"], [77, 3, 0, "-", "random"], [78, 3, 0, "-", "searching"], [79, 3, 0, "-", "set"], [80, 3, 0, "-", "sorting"], [81, 3, 0, "-", "statistical"], [82, 3, 0, "-", "utility"], [83, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[62, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "gelu"], [62, 0, 1, "", "hardswish"], [62, 0, 1, "", "leaky_relu"], [62, 0, 1, "", "log_softmax"], [62, 0, 1, "", "mish"], [62, 0, 1, "", "relu"], [62, 0, 1, "", "sigmoid"], [62, 0, 1, "", "softmax"], [62, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[113, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[113, 5, 1, "", "T"], [113, 0, 1, "", "__abs__"], [113, 0, 1, "", "__add__"], [113, 0, 1, "", "__eq__"], [113, 0, 1, "", "__ge__"], [113, 0, 1, "", "__gt__"], [113, 0, 1, "", "__init__"], [113, 0, 1, "", "__le__"], [113, 0, 1, "", "__lt__"], [113, 0, 1, "", "__ne__"], [113, 0, 1, "", "__pow__"], [113, 0, 1, "", "__radd__"], [113, 0, 1, "", "__rrshift__"], [113, 0, 1, "", "__rshift__"], [113, 0, 1, "", "__rsub__"], [113, 0, 1, "", "__sub__"], [113, 0, 1, "", "__truediv__"], [113, 0, 1, "", "__xor__"], [113, 5, 1, "", "backend"], [113, 5, 1, "", "base"], [113, 5, 1, "", "data"], [113, 5, 1, "", "device"], [113, 5, 1, "", "dtype"], [113, 5, 1, "", "dynamic_backend"], [113, 5, 1, "", "imag"], [113, 5, 1, "", "itemsize"], [113, 5, 1, "", "mT"], [113, 5, 1, "", "ndim"], [113, 5, 1, "", "real"], [113, 5, 1, "", "shape"], [113, 5, 1, "", "size"], [113, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[63, 2, 1, "", "_array_to_new_backend"], [63, 2, 1, "", "_to_ivy"], [63, 2, 1, "", "_to_native"], [63, 2, 1, "", "_to_new_backend"], [63, 2, 1, "", "args_to_ivy"], [63, 2, 1, "", "args_to_native"], [63, 2, 1, "", "args_to_new_backend"], [63, 2, 1, "", "to_ivy"], [63, 2, 1, "", "to_native"], [63, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[64, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "asarray"], [64, 0, 1, "", "copy_array"], [64, 0, 1, "", "empty_like"], [64, 0, 1, "", "from_dlpack"], [64, 0, 1, "", "full_like"], [64, 0, 1, "", "linspace"], [64, 0, 1, "", "logspace"], [64, 0, 1, "", "meshgrid"], [64, 0, 1, "", "native_array"], [64, 0, 1, "", "one_hot"], [64, 0, 1, "", "ones_like"], [64, 0, 1, "", "tril"], [64, 0, 1, "", "triu"], [64, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[65, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "astype"], [65, 0, 1, "", "broadcast_arrays"], [65, 0, 1, "", "broadcast_to"], [65, 0, 1, "", "can_cast"], [65, 0, 1, "", "dtype"], [65, 0, 1, "", "finfo"], [65, 0, 1, "", "iinfo"], [65, 0, 1, "", "is_bool_dtype"], [65, 0, 1, "", "is_float_dtype"], [65, 0, 1, "", "is_int_dtype"], [65, 0, 1, "", "is_uint_dtype"], [65, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[66, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "dev"], [66, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[67, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "abs"], [67, 0, 1, "", "acos"], [67, 0, 1, "", "acosh"], [67, 0, 1, "", "add"], [67, 0, 1, "", "angle"], [67, 0, 1, "", "asin"], [67, 0, 1, "", "asinh"], [67, 0, 1, "", "atan"], [67, 0, 1, "", "atan2"], [67, 0, 1, "", "atanh"], [67, 0, 1, "", "bitwise_and"], [67, 0, 1, "", "bitwise_invert"], [67, 0, 1, "", "bitwise_left_shift"], [67, 0, 1, "", "bitwise_or"], [67, 0, 1, "", "bitwise_right_shift"], [67, 0, 1, "", "bitwise_xor"], [67, 0, 1, "", "ceil"], [67, 0, 1, "", "cos"], [67, 0, 1, "", "cosh"], [67, 0, 1, "", "deg2rad"], [67, 0, 1, "", "divide"], [67, 0, 1, "", "equal"], [67, 0, 1, "", "erf"], [67, 0, 1, "", "exp"], [67, 0, 1, "", "exp2"], [67, 0, 1, "", "expm1"], [67, 0, 1, "", "floor"], [67, 0, 1, "", "floor_divide"], [67, 0, 1, "", "fmin"], [67, 0, 1, "", "gcd"], [67, 0, 1, "", "greater"], [67, 0, 1, "", "greater_equal"], [67, 0, 1, "", "isfinite"], [67, 0, 1, "", "isinf"], [67, 0, 1, "", "isnan"], [67, 0, 1, "", "isreal"], [67, 0, 1, "", "lcm"], [67, 0, 1, "", "less"], [67, 0, 1, "", "less_equal"], [67, 0, 1, "", "log"], [67, 0, 1, "", "log10"], [67, 0, 1, "", "log1p"], [67, 0, 1, "", "log2"], [67, 0, 1, "", "logaddexp"], [67, 0, 1, "", "logaddexp2"], [67, 0, 1, "", "logical_and"], [67, 0, 1, "", "logical_not"], [67, 0, 1, "", "logical_or"], [67, 0, 1, "", "logical_xor"], [67, 0, 1, "", "maximum"], [67, 0, 1, "", "minimum"], [67, 0, 1, "", "multiply"], [67, 0, 1, "", "nan_to_num"], [67, 0, 1, "", "negative"], [67, 0, 1, "", "not_equal"], [67, 0, 1, "", "positive"], [67, 0, 1, "", "pow"], [67, 0, 1, "", "rad2deg"], [67, 0, 1, "", "real"], [67, 0, 1, "", "reciprocal"], [67, 0, 1, "", "remainder"], [67, 0, 1, "", "round"], [67, 0, 1, "", "sign"], [67, 0, 1, "", "sin"], [67, 0, 1, "", "sinh"], [67, 0, 1, "", "sqrt"], [67, 0, 1, "", "square"], [67, 0, 1, "", "subtract"], [67, 0, 1, "", "tan"], [67, 0, 1, "", "tanh"], [67, 0, 1, "", "trapz"], [67, 0, 1, "", "trunc"], [67, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[68, 3, 0, "-", "activations"], [68, 3, 0, "-", "conversions"], [68, 3, 0, "-", "creation"], [68, 3, 0, "-", "data_type"], [68, 3, 0, "-", "device"], [68, 3, 0, "-", "elementwise"], [68, 3, 0, "-", "general"], [68, 3, 0, "-", "gradients"], [68, 3, 0, "-", "image"], [68, 3, 0, "-", "layers"], [68, 3, 0, "-", "linear_algebra"], [68, 3, 0, "-", "losses"], [68, 3, 0, "-", "manipulation"], [68, 3, 0, "-", "norms"], [68, 3, 0, "-", "random"], [68, 3, 0, "-", "searching"], [68, 3, 0, "-", "set"], [68, 3, 0, "-", "sorting"], [68, 3, 0, "-", "statistical"], [68, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[68, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "celu"], [68, 0, 1, "", "elu"], [68, 0, 1, "", "hardshrink"], [68, 0, 1, "", "hardsilu"], [68, 0, 1, "", "hardtanh"], [68, 0, 1, "", "logit"], [68, 0, 1, "", "logsigmoid"], [68, 0, 1, "", "prelu"], [68, 0, 1, "", "relu6"], [68, 0, 1, "", "scaled_tanh"], [68, 0, 1, "", "selu"], [68, 0, 1, "", "silu"], [68, 0, 1, "", "softshrink"], [68, 0, 1, "", "tanhshrink"], [68, 0, 1, "", "threshold"], [68, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[68, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[68, 1, 1, "", "_ArrayWithCreationExperimental"], [68, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "blackman_window"], [68, 0, 1, "", "eye_like"], [68, 0, 1, "", "mel_weight_matrix"], [68, 0, 1, "", "trilu"], [68, 0, 1, "", "unsorted_segment_mean"], [68, 0, 1, "", "unsorted_segment_min"], [68, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[68, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[68, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[68, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "allclose"], [68, 0, 1, "", "amax"], [68, 0, 1, "", "amin"], [68, 0, 1, "", "binarizer"], [68, 0, 1, "", "conj"], [68, 0, 1, "", "copysign"], [68, 0, 1, "", "count_nonzero"], [68, 0, 1, "", "diff"], [68, 0, 1, "", "digamma"], [68, 0, 1, "", "erfc"], [68, 0, 1, "", "erfinv"], [68, 0, 1, "", "fix"], [68, 0, 1, "", "float_power"], [68, 0, 1, "", "fmax"], [68, 0, 1, "", "fmod"], [68, 0, 1, "", "frexp"], [68, 0, 1, "", "gradient"], [68, 0, 1, "", "hypot"], [68, 0, 1, "", "isclose"], [68, 0, 1, "", "ldexp"], [68, 0, 1, "", "lerp"], [68, 0, 1, "", "lgamma"], [68, 0, 1, "", "modf"], [68, 0, 1, "", "nansum"], [68, 0, 1, "", "nextafter"], [68, 0, 1, "", "signbit"], [68, 0, 1, "", "sinc"], [68, 0, 1, "", "sparsify_tensor"], [68, 0, 1, "", "xlogy"], [68, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[68, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[68, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[68, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[68, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "adaptive_avg_pool1d"], [68, 0, 1, "", "adaptive_avg_pool2d"], [68, 0, 1, "", "adaptive_max_pool2d"], [68, 0, 1, "", "adaptive_max_pool3d"], [68, 0, 1, "", "avg_pool1d"], [68, 0, 1, "", "avg_pool2d"], [68, 0, 1, "", "avg_pool3d"], [68, 0, 1, "", "dct"], [68, 0, 1, "", "dft"], [68, 0, 1, "", "embedding"], [68, 0, 1, "", "fft"], [68, 0, 1, "", "fft2"], [68, 0, 1, "", "idct"], [68, 0, 1, "", "ifft"], [68, 0, 1, "", "ifftn"], [68, 0, 1, "", "interpolate"], [68, 0, 1, "", "max_pool1d"], [68, 0, 1, "", "max_pool2d"], [68, 0, 1, "", "max_pool3d"], [68, 0, 1, "", "max_unpool1d"], [68, 0, 1, "", "reduce_window"], [68, 0, 1, "", "rfft"], [68, 0, 1, "", "rfftn"], [68, 0, 1, "", "sliding_window"], [68, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[68, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "adjoint"], [68, 0, 1, "", "batched_outer"], [68, 0, 1, "", "cond"], [68, 0, 1, "", "diagflat"], [68, 0, 1, "", "dot"], [68, 0, 1, "", "eig"], [68, 0, 1, "", "eigh_tridiagonal"], [68, 0, 1, "", "eigvals"], [68, 0, 1, "", "general_inner_product"], [68, 0, 1, "", "higher_order_moment"], [68, 0, 1, "", "initialize_tucker"], [68, 0, 1, "", "kron"], [68, 0, 1, "", "make_svd_non_negative"], [68, 0, 1, "", "matrix_exp"], [68, 0, 1, "", "mode_dot"], [68, 0, 1, "", "multi_dot"], [68, 0, 1, "", "multi_mode_dot"], [68, 0, 1, "", "partial_tucker"], [68, 0, 1, "", "svd_flip"], [68, 0, 1, "", "tensor_train"], [68, 0, 1, "", "truncated_svd"], [68, 0, 1, "", "tt_matrix_to_tensor"], [68, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[68, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "hinge_embedding_loss"], [68, 0, 1, "", "huber_loss"], [68, 0, 1, "", "kl_div"], [68, 0, 1, "", "l1_loss"], [68, 0, 1, "", "log_poisson_loss"], [68, 0, 1, "", "poisson_nll_loss"], [68, 0, 1, "", "smooth_l1_loss"], [68, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[68, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "as_strided"], [68, 0, 1, "", "associative_scan"], [68, 0, 1, "", "atleast_1d"], [68, 0, 1, "", "atleast_2d"], [68, 0, 1, "", "atleast_3d"], [68, 0, 1, "", "column_stack"], [68, 0, 1, "", "concat_from_sequence"], [68, 0, 1, "", "dsplit"], [68, 0, 1, "", "dstack"], [68, 0, 1, "", "expand"], [68, 0, 1, "", "fill_diagonal"], [68, 0, 1, "", "flatten"], [68, 0, 1, "", "fliplr"], [68, 0, 1, "", "flipud"], [68, 0, 1, "", "fold"], [68, 0, 1, "", "heaviside"], [68, 0, 1, "", "hsplit"], [68, 0, 1, "", "hstack"], [68, 0, 1, "", "i0"], [68, 0, 1, "", "matricize"], [68, 0, 1, "", "moveaxis"], [68, 0, 1, "", "pad"], [68, 0, 1, "", "partial_fold"], [68, 0, 1, "", "partial_tensor_to_vec"], [68, 0, 1, "", "partial_unfold"], [68, 0, 1, "", "partial_vec_to_tensor"], [68, 0, 1, "", "put_along_axis"], [68, 0, 1, "", "rot90"], [68, 0, 1, "", "soft_thresholding"], [68, 0, 1, "", "take"], [68, 0, 1, "", "take_along_axis"], [68, 0, 1, "", "top_k"], [68, 0, 1, "", "trim_zeros"], [68, 0, 1, "", "unflatten"], [68, 0, 1, "", "unfold"], [68, 0, 1, "", "unique_consecutive"], [68, 0, 1, "", "vsplit"], [68, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[68, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "batch_norm"], [68, 0, 1, "", "group_norm"], [68, 0, 1, "", "instance_norm"], [68, 0, 1, "", "l1_normalize"], [68, 0, 1, "", "l2_normalize"], [68, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[68, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "bernoulli"], [68, 0, 1, "", "beta"], [68, 0, 1, "", "dirichlet"], [68, 0, 1, "", "gamma"], [68, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[68, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[68, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[68, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[68, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[68, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "bincount"], [68, 0, 1, "", "corrcoef"], [68, 0, 1, "", "cov"], [68, 0, 1, "", "cummax"], [68, 0, 1, "", "cummin"], [68, 0, 1, "", "histogram"], [68, 0, 1, "", "igamma"], [68, 0, 1, "", "median"], [68, 0, 1, "", "nanmean"], [68, 0, 1, "", "nanmedian"], [68, 0, 1, "", "nanmin"], [68, 0, 1, "", "nanprod"], [68, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[68, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[69, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "all_equal"], [69, 0, 1, "", "array_equal"], [69, 0, 1, "", "assert_supports_inplace"], [69, 0, 1, "", "clip_matrix_norm"], [69, 0, 1, "", "clip_vector_norm"], [69, 0, 1, "", "default"], [69, 0, 1, "", "einops_rearrange"], [69, 0, 1, "", "einops_reduce"], [69, 0, 1, "", "einops_repeat"], [69, 0, 1, "", "exists"], [69, 0, 1, "", "fourier_encode"], [69, 0, 1, "", "gather"], [69, 0, 1, "", "gather_nd"], [69, 0, 1, "", "get_num_dims"], [69, 0, 1, "", "has_nans"], [69, 0, 1, "", "inplace_decrement"], [69, 0, 1, "", "inplace_increment"], [69, 0, 1, "", "inplace_update"], [69, 0, 1, "", "is_array"], [69, 0, 1, "", "is_ivy_array"], [69, 0, 1, "", "is_ivy_container"], [69, 0, 1, "", "is_native_array"], [69, 0, 1, "", "isin"], [69, 0, 1, "", "scatter_flat"], [69, 0, 1, "", "scatter_nd"], [69, 0, 1, "", "stable_divide"], [69, 0, 1, "", "stable_pow"], [69, 0, 1, "", "supports_inplace_updates"], [69, 0, 1, "", "to_file"], [69, 0, 1, "", "to_list"], [69, 0, 1, "", "to_numpy"], [69, 0, 1, "", "to_scalar"], [69, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[70, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "adam_step"], [70, 0, 1, "", "adam_update"], [70, 0, 1, "", "gradient_descent_update"], [70, 0, 1, "", "lamb_update"], [70, 0, 1, "", "lars_update"], [70, 0, 1, "", "optimizer_update"], [70, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[71, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[72, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "conv1d"], [72, 0, 1, "", "conv1d_transpose"], [72, 0, 1, "", "conv2d"], [72, 0, 1, "", "conv2d_transpose"], [72, 0, 1, "", "conv3d"], [72, 0, 1, "", "conv3d_transpose"], [72, 0, 1, "", "depthwise_conv2d"], [72, 0, 1, "", "dropout"], [72, 0, 1, "", "dropout1d"], [72, 0, 1, "", "dropout2d"], [72, 0, 1, "", "dropout3d"], [72, 0, 1, "", "linear"], [72, 0, 1, "", "lstm_update"], [72, 0, 1, "", "multi_head_attention"], [72, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[73, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "cholesky"], [73, 0, 1, "", "cross"], [73, 0, 1, "", "det"], [73, 0, 1, "", "diag"], [73, 0, 1, "", "diagonal"], [73, 0, 1, "", "eig"], [73, 0, 1, "", "eigh"], [73, 0, 1, "", "eigvalsh"], [73, 0, 1, "", "inner"], [73, 0, 1, "", "inv"], [73, 0, 1, "", "matmul"], [73, 0, 1, "", "matrix_norm"], [73, 0, 1, "", "matrix_power"], [73, 0, 1, "", "matrix_rank"], [73, 0, 1, "", "matrix_transpose"], [73, 0, 1, "", "outer"], [73, 0, 1, "", "pinv"], [73, 0, 1, "", "qr"], [73, 0, 1, "", "slogdet"], [73, 0, 1, "", "solve"], [73, 0, 1, "", "svd"], [73, 0, 1, "", "svdvals"], [73, 0, 1, "", "tensordot"], [73, 0, 1, "", "tensorsolve"], [73, 0, 1, "", "trace"], [73, 0, 1, "", "vander"], [73, 0, 1, "", "vecdot"], [73, 0, 1, "", "vector_norm"], [73, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[74, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "binary_cross_entropy"], [74, 0, 1, "", "cross_entropy"], [74, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[75, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "clip"], [75, 0, 1, "", "concat"], [75, 0, 1, "", "constant_pad"], [75, 0, 1, "", "expand_dims"], [75, 0, 1, "", "flip"], [75, 0, 1, "", "permute_dims"], [75, 0, 1, "", "repeat"], [75, 0, 1, "", "reshape"], [75, 0, 1, "", "roll"], [75, 0, 1, "", "split"], [75, 0, 1, "", "squeeze"], [75, 0, 1, "", "stack"], [75, 0, 1, "", "swapaxes"], [75, 0, 1, "", "tile"], [75, 0, 1, "", "unstack"], [75, 0, 1, "", "view"], [75, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[76, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[77, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "multinomial"], [77, 0, 1, "", "randint"], [77, 0, 1, "", "random_normal"], [77, 0, 1, "", "random_uniform"], [77, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[78, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "argmax"], [78, 0, 1, "", "argmin"], [78, 0, 1, "", "argwhere"], [78, 0, 1, "", "nonzero"], [78, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[79, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "unique_all"], [79, 0, 1, "", "unique_counts"], [79, 0, 1, "", "unique_inverse"], [79, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[80, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "argsort"], [80, 0, 1, "", "msort"], [80, 0, 1, "", "searchsorted"], [80, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[81, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "cumprod"], [81, 0, 1, "", "cumsum"], [81, 0, 1, "", "einsum"], [81, 0, 1, "", "max"], [81, 0, 1, "", "mean"], [81, 0, 1, "", "min"], [81, 0, 1, "", "prod"], [81, 0, 1, "", "std"], [81, 0, 1, "", "sum"], [81, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[82, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "all"], [82, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[83, 2, 1, "", "_wrap_function"], [83, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[84, 3, 0, "-", "activations"], [85, 3, 0, "-", "base"], [114, 3, 0, "-", "container"], [86, 3, 0, "-", "conversions"], [87, 3, 0, "-", "creation"], [88, 3, 0, "-", "data_type"], [89, 3, 0, "-", "device"], [90, 3, 0, "-", "elementwise"], [91, 3, 0, "-", "experimental"], [92, 3, 0, "-", "general"], [93, 3, 0, "-", "gradients"], [94, 3, 0, "-", "image"], [95, 3, 0, "-", "layers"], [96, 3, 0, "-", "linear_algebra"], [97, 3, 0, "-", "losses"], [98, 3, 0, "-", "manipulation"], [99, 3, 0, "-", "norms"], [100, 3, 0, "-", "random"], [101, 3, 0, "-", "searching"], [102, 3, 0, "-", "set"], [103, 3, 0, "-", "sorting"], [104, 3, 0, "-", "statistical"], [105, 3, 0, "-", "utility"], [106, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[84, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_gelu"], [84, 0, 1, "", "_static_hardswish"], [84, 0, 1, "", "_static_leaky_relu"], [84, 0, 1, "", "_static_log_softmax"], [84, 0, 1, "", "_static_mish"], [84, 0, 1, "", "_static_relu"], [84, 0, 1, "", "_static_sigmoid"], [84, 0, 1, "", "_static_softmax"], [84, 0, 1, "", "_static_softplus"], [84, 0, 1, "", "gelu"], [84, 0, 1, "", "hardswish"], [84, 0, 1, "", "leaky_relu"], [84, 0, 1, "", "log_softmax"], [84, 0, 1, "", "mish"], [84, 0, 1, "", "relu"], [84, 0, 1, "", "sigmoid"], [84, 0, 1, "", "softmax"], [84, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[85, 1, 1, "", "ContainerBase"], [85, 2, 1, "", "_is_jsonable"], [85, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[85, 0, 1, "", "__getitem__"], [85, 0, 1, "", "__init__"], [85, 0, 1, "", "__setitem__"], [85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [85, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [85, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [85, 0, 1, "", "_cont_concat_unify"], [85, 0, 1, "", "_cont_get_dev"], [85, 0, 1, "", "_cont_get_dtype"], [85, 0, 1, "", "_cont_get_shape"], [85, 0, 1, "", "_cont_get_shapes"], [85, 5, 1, "", "_cont_ivy"], [85, 0, 1, "", "_cont_mean_unify"], [85, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [85, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [85, 0, 1, "", "_cont_slice_keys"], [85, 0, 1, "", "_cont_sum_unify"], [85, 0, 1, "", "_get_queue_item"], [85, 0, 1, "", "cont_all_false"], [85, 0, 1, "", "cont_all_key_chains"], [85, 0, 1, "", "cont_all_true"], [85, 0, 1, "", "cont_as_bools"], [85, 0, 1, "", "cont_assert_contains_sub_container"], [85, 0, 1, "", "cont_assert_contains_sub_structure"], [85, 0, 1, "", "cont_assert_identical"], [85, 0, 1, "", "cont_assert_identical_structure"], [85, 0, 1, "", "cont_at_key_chain"], [85, 0, 1, "", "cont_at_key_chains"], [85, 0, 1, "", "cont_at_keys"], [85, 0, 1, "", "cont_combine"], [85, 0, 1, "", "cont_common_key_chains"], [85, 5, 1, "", "cont_config"], [85, 0, 1, "", "cont_contains_sub_container"], [85, 0, 1, "", "cont_contains_sub_structure"], [85, 0, 1, "", "cont_copy"], [85, 0, 1, "", "cont_create_if_absent"], [85, 0, 1, "", "cont_cutoff_at_depth"], [85, 0, 1, "", "cont_cutoff_at_height"], [85, 0, 1, "", "cont_deep_copy"], [85, 5, 1, "", "cont_dev"], [85, 5, 1, "", "cont_dev_str"], [85, 0, 1, "", "cont_diff"], [85, 5, 1, "", "cont_dtype"], [85, 0, 1, "", "cont_duplicate_array_keychains"], [85, 0, 1, "", "cont_find_sub_container"], [85, 0, 1, "", "cont_find_sub_structure"], [85, 0, 1, "", "cont_flatten_key_chain"], [85, 0, 1, "", "cont_flatten_key_chains"], [85, 0, 1, "", "cont_format_key_chains"], [85, 0, 1, "", "cont_from_disk_as_hdf5"], [85, 0, 1, "", "cont_from_disk_as_json"], [85, 0, 1, "", "cont_from_disk_as_pickled"], [85, 0, 1, "", "cont_from_flat_list"], [85, 0, 1, "", "cont_handle_inplace"], [85, 0, 1, "", "cont_has_key"], [85, 0, 1, "", "cont_has_key_chain"], [85, 0, 1, "", "cont_identical"], [85, 0, 1, "", "cont_identical_array_shapes"], [85, 0, 1, "", "cont_identical_configs"], [85, 0, 1, "", "cont_identical_structure"], [85, 0, 1, "", "cont_if_exists"], [85, 0, 1, "", "cont_inplace_update"], [85, 5, 1, "", "cont_ivy"], [85, 0, 1, "", "cont_key_chains_containing"], [85, 0, 1, "", "cont_list_join"], [85, 0, 1, "", "cont_list_stack"], [85, 0, 1, "", "cont_load"], [85, 0, 1, "", "cont_map"], [85, 0, 1, "", "cont_map_sub_conts"], [85, 5, 1, "", "cont_max_depth"], [85, 0, 1, "", "cont_multi_map"], [85, 0, 1, "", "cont_multi_map_in_function"], [85, 0, 1, "", "cont_num_arrays"], [85, 0, 1, "", "cont_overwrite_at_key_chain"], [85, 0, 1, "", "cont_overwrite_at_key_chains"], [85, 0, 1, "", "cont_prune_empty"], [85, 0, 1, "", "cont_prune_key_chain"], [85, 0, 1, "", "cont_prune_key_chains"], [85, 0, 1, "", "cont_prune_key_from_key_chains"], [85, 0, 1, "", "cont_prune_keys"], [85, 0, 1, "", "cont_prune_keys_from_key_chains"], [85, 0, 1, "", "cont_reduce"], [85, 0, 1, "", "cont_remove_key_length_limit"], [85, 0, 1, "", "cont_remove_print_limit"], [85, 0, 1, "", "cont_reshape_like"], [85, 0, 1, "", "cont_restructure"], [85, 0, 1, "", "cont_restructure_key_chains"], [85, 0, 1, "", "cont_save"], [85, 0, 1, "", "cont_set_at_key_chain"], [85, 0, 1, "", "cont_set_at_key_chains"], [85, 0, 1, "", "cont_set_at_keys"], [85, 5, 1, "", "cont_shape"], [85, 5, 1, "", "cont_shapes"], [85, 0, 1, "", "cont_show"], [85, 0, 1, "", "cont_show_sub_container"], [85, 0, 1, "", "cont_size_ordered_arrays"], [85, 0, 1, "", "cont_slice_keys"], [85, 0, 1, "", "cont_slice_via_key"], [85, 0, 1, "", "cont_sort_by_key"], [85, 0, 1, "", "cont_structural_diff"], [85, 0, 1, "", "cont_to_dict"], [85, 0, 1, "", "cont_to_disk_as_hdf5"], [85, 0, 1, "", "cont_to_disk_as_json"], [85, 0, 1, "", "cont_to_disk_as_pickled"], [85, 0, 1, "", "cont_to_flat_list"], [85, 0, 1, "", "cont_to_iterator"], [85, 0, 1, "", "cont_to_iterator_keys"], [85, 0, 1, "", "cont_to_iterator_values"], [85, 0, 1, "", "cont_to_jsonable"], [85, 0, 1, "", "cont_to_nested_list"], [85, 0, 1, "", "cont_to_raw"], [85, 0, 1, "", "cont_trim_key"], [85, 0, 1, "", "cont_try_kc"], [85, 0, 1, "", "cont_unify"], [85, 0, 1, "", "cont_unstack_conts"], [85, 0, 1, "", "cont_update_config"], [85, 0, 1, "", "cont_with_default_key_color"], [85, 0, 1, "", "cont_with_entries_as_lists"], [85, 0, 1, "", "cont_with_ivy_backend"], [85, 0, 1, "", "cont_with_key_length_limit"], [85, 0, 1, "", "cont_with_print_indent"], [85, 0, 1, "", "cont_with_print_limit"], [85, 0, 1, "", "cont_with_print_line_spacing"], [85, 5, 1, "", "dynamic_backend"], [85, 0, 1, "", "h5_file_size"], [85, 0, 1, "", "shuffle_h5_file"], [85, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[114, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[114, 0, 1, "", "__abs__"], [114, 0, 1, "", "__add__"], [114, 0, 1, "", "__eq__"], [114, 0, 1, "", "__ge__"], [114, 0, 1, "", "__gt__"], [114, 0, 1, "", "__init__"], [114, 0, 1, "", "__le__"], [114, 0, 1, "", "__lt__"], [114, 0, 1, "", "__ne__"], [114, 0, 1, "", "__pow__"], [114, 0, 1, "", "__radd__"], [114, 0, 1, "", "__rrshift__"], [114, 0, 1, "", "__rshift__"], [114, 0, 1, "", "__rsub__"], [114, 0, 1, "", "__sub__"], [114, 0, 1, "", "__truediv__"], [114, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[86, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_to_ivy"], [86, 0, 1, "", "_static_to_native"], [86, 0, 1, "", "to_ivy"], [86, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[87, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_arange"], [87, 0, 1, "", "_static_asarray"], [87, 0, 1, "", "_static_copy_array"], [87, 0, 1, "", "_static_empty"], [87, 0, 1, "", "_static_empty_like"], [87, 0, 1, "", "_static_eye"], [87, 0, 1, "", "_static_from_dlpack"], [87, 0, 1, "", "_static_full"], [87, 0, 1, "", "_static_full_like"], [87, 0, 1, "", "_static_linspace"], [87, 0, 1, "", "_static_logspace"], [87, 0, 1, "", "_static_meshgrid"], [87, 0, 1, "", "_static_native_array"], [87, 0, 1, "", "_static_one_hot"], [87, 0, 1, "", "_static_ones"], [87, 0, 1, "", "_static_ones_like"], [87, 0, 1, "", "_static_tril"], [87, 0, 1, "", "_static_triu"], [87, 0, 1, "", "_static_zeros"], [87, 0, 1, "", "_static_zeros_like"], [87, 0, 1, "", "asarray"], [87, 0, 1, "", "copy_array"], [87, 0, 1, "", "empty_like"], [87, 0, 1, "", "from_dlpack"], [87, 0, 1, "", "frombuffer"], [87, 0, 1, "", "full_like"], [87, 0, 1, "", "linspace"], [87, 0, 1, "", "logspace"], [87, 0, 1, "", "meshgrid"], [87, 0, 1, "", "native_array"], [87, 0, 1, "", "one_hot"], [87, 0, 1, "", "ones_like"], [87, 0, 1, "", "static_frombuffer"], [87, 0, 1, "", "static_triu_indices"], [87, 0, 1, "", "tril"], [87, 0, 1, "", "triu"], [87, 0, 1, "", "triu_indices"], [87, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[88, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_astype"], [88, 0, 1, "", "_static_broadcast_arrays"], [88, 0, 1, "", "_static_broadcast_to"], [88, 0, 1, "", "_static_can_cast"], [88, 0, 1, "", "_static_default_complex_dtype"], [88, 0, 1, "", "_static_default_float_dtype"], [88, 0, 1, "", "_static_dtype"], [88, 0, 1, "", "_static_finfo"], [88, 0, 1, "", "_static_function_supported_dtypes"], [88, 0, 1, "", "_static_function_unsupported_dtypes"], [88, 0, 1, "", "_static_iinfo"], [88, 0, 1, "", "_static_is_bool_dtype"], [88, 0, 1, "", "_static_is_complex_dtype"], [88, 0, 1, "", "_static_is_float_dtype"], [88, 0, 1, "", "_static_is_int_dtype"], [88, 0, 1, "", "_static_is_uint_dtype"], [88, 0, 1, "", "_static_result_type"], [88, 0, 1, "", "astype"], [88, 0, 1, "", "broadcast_arrays"], [88, 0, 1, "", "broadcast_to"], [88, 0, 1, "", "can_cast"], [88, 0, 1, "", "dtype"], [88, 0, 1, "", "finfo"], [88, 0, 1, "", "iinfo"], [88, 0, 1, "", "is_bool_dtype"], [88, 0, 1, "", "is_complex_dtype"], [88, 0, 1, "", "is_float_dtype"], [88, 0, 1, "", "is_int_dtype"], [88, 0, 1, "", "is_uint_dtype"], [88, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[89, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_dev"], [89, 0, 1, "", "_static_to_device"], [89, 0, 1, "", "dev"], [89, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[90, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_abs"], [90, 0, 1, "", "_static_acos"], [90, 0, 1, "", "_static_acosh"], [90, 0, 1, "", "_static_add"], [90, 0, 1, "", "_static_asin"], [90, 0, 1, "", "_static_asinh"], [90, 0, 1, "", "_static_atan"], [90, 0, 1, "", "_static_atan2"], [90, 0, 1, "", "_static_atanh"], [90, 0, 1, "", "_static_bitwise_and"], [90, 0, 1, "", "_static_bitwise_invert"], [90, 0, 1, "", "_static_bitwise_left_shift"], [90, 0, 1, "", "_static_bitwise_or"], [90, 0, 1, "", "_static_bitwise_right_shift"], [90, 0, 1, "", "_static_bitwise_xor"], [90, 0, 1, "", "_static_ceil"], [90, 0, 1, "", "_static_cos"], [90, 0, 1, "", "_static_cosh"], [90, 0, 1, "", "_static_deg2rad"], [90, 0, 1, "", "_static_divide"], [90, 0, 1, "", "_static_equal"], [90, 0, 1, "", "_static_erf"], [90, 0, 1, "", "_static_exp"], [90, 0, 1, "", "_static_expm1"], [90, 0, 1, "", "_static_floor"], [90, 0, 1, "", "_static_floor_divide"], [90, 0, 1, "", "_static_greater"], [90, 0, 1, "", "_static_greater_equal"], [90, 0, 1, "", "_static_isfinite"], [90, 0, 1, "", "_static_isinf"], [90, 0, 1, "", "_static_isnan"], [90, 0, 1, "", "_static_isreal"], [90, 0, 1, "", "_static_lcm"], [90, 0, 1, "", "_static_less"], [90, 0, 1, "", "_static_less_equal"], [90, 0, 1, "", "_static_log"], [90, 0, 1, "", "_static_log10"], [90, 0, 1, "", "_static_log1p"], [90, 0, 1, "", "_static_log2"], [90, 0, 1, "", "_static_logaddexp"], [90, 0, 1, "", "_static_logical_and"], [90, 0, 1, "", "_static_logical_not"], [90, 0, 1, "", "_static_logical_or"], [90, 0, 1, "", "_static_logical_xor"], [90, 0, 1, "", "_static_maximum"], [90, 0, 1, "", "_static_minimum"], [90, 0, 1, "", "_static_multiply"], [90, 0, 1, "", "_static_negative"], [90, 0, 1, "", "_static_not_equal"], [90, 0, 1, "", "_static_positive"], [90, 0, 1, "", "_static_pow"], [90, 0, 1, "", "_static_rad2deg"], [90, 0, 1, "", "_static_reciprocal"], [90, 0, 1, "", "_static_remainder"], [90, 0, 1, "", "_static_round"], [90, 0, 1, "", "_static_sign"], [90, 0, 1, "", "_static_sin"], [90, 0, 1, "", "_static_sinh"], [90, 0, 1, "", "_static_sqrt"], [90, 0, 1, "", "_static_square"], [90, 0, 1, "", "_static_subtract"], [90, 0, 1, "", "_static_tan"], [90, 0, 1, "", "_static_tanh"], [90, 0, 1, "", "_static_trapz"], [90, 0, 1, "", "_static_trunc"], [90, 0, 1, "", "_static_trunc_divide"], [90, 0, 1, "", "abs"], [90, 0, 1, "", "acos"], [90, 0, 1, "", "acosh"], [90, 0, 1, "", "add"], [90, 0, 1, "", "angle"], [90, 0, 1, "", "asin"], [90, 0, 1, "", "asinh"], [90, 0, 1, "", "atan"], [90, 0, 1, "", "atan2"], [90, 0, 1, "", "atanh"], [90, 0, 1, "", "bitwise_and"], [90, 0, 1, "", "bitwise_invert"], [90, 0, 1, "", "bitwise_left_shift"], [90, 0, 1, "", "bitwise_or"], [90, 0, 1, "", "bitwise_right_shift"], [90, 0, 1, "", "bitwise_xor"], [90, 0, 1, "", "ceil"], [90, 0, 1, "", "cos"], [90, 0, 1, "", "cosh"], [90, 0, 1, "", "deg2rad"], [90, 0, 1, "", "divide"], [90, 0, 1, "", "equal"], [90, 0, 1, "", "erf"], [90, 0, 1, "", "exp"], [90, 0, 1, "", "exp2"], [90, 0, 1, "", "expm1"], [90, 0, 1, "", "floor"], [90, 0, 1, "", "floor_divide"], [90, 0, 1, "", "fmin"], [90, 0, 1, "", "gcd"], [90, 0, 1, "", "greater"], [90, 0, 1, "", "greater_equal"], [90, 0, 1, "", "imag"], [90, 0, 1, "", "isfinite"], [90, 0, 1, "", "isinf"], [90, 0, 1, "", "isnan"], [90, 0, 1, "", "isreal"], [90, 0, 1, "", "lcm"], [90, 0, 1, "", "less"], [90, 0, 1, "", "less_equal"], [90, 0, 1, "", "log"], [90, 0, 1, "", "log10"], [90, 0, 1, "", "log1p"], [90, 0, 1, "", "log2"], [90, 0, 1, "", "logaddexp"], [90, 0, 1, "", "logaddexp2"], [90, 0, 1, "", "logical_and"], [90, 0, 1, "", "logical_not"], [90, 0, 1, "", "logical_or"], [90, 0, 1, "", "logical_xor"], [90, 0, 1, "", "maximum"], [90, 0, 1, "", "minimum"], [90, 0, 1, "", "multiply"], [90, 0, 1, "", "nan_to_num"], [90, 0, 1, "", "negative"], [90, 0, 1, "", "not_equal"], [90, 0, 1, "", "positive"], [90, 0, 1, "", "pow"], [90, 0, 1, "", "rad2deg"], [90, 0, 1, "", "real"], [90, 0, 1, "", "reciprocal"], [90, 0, 1, "", "remainder"], [90, 0, 1, "", "round"], [90, 0, 1, "", "sign"], [90, 0, 1, "", "sin"], [90, 0, 1, "", "sinh"], [90, 0, 1, "", "sqrt"], [90, 0, 1, "", "square"], [90, 0, 1, "", "static_angle"], [90, 0, 1, "", "static_exp2"], [90, 0, 1, "", "static_fmin"], [90, 0, 1, "", "static_gcd"], [90, 0, 1, "", "static_imag"], [90, 0, 1, "", "static_logaddexp2"], [90, 0, 1, "", "static_nan_to_num"], [90, 0, 1, "", "static_real"], [90, 0, 1, "", "subtract"], [90, 0, 1, "", "tan"], [90, 0, 1, "", "tanh"], [90, 0, 1, "", "trapz"], [90, 0, 1, "", "trunc"], [90, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[91, 3, 0, "-", "activations"], [91, 3, 0, "-", "conversions"], [91, 3, 0, "-", "creation"], [91, 3, 0, "-", "data_type"], [91, 3, 0, "-", "device"], [91, 3, 0, "-", "elementwise"], [91, 3, 0, "-", "general"], [91, 3, 0, "-", "gradients"], [91, 3, 0, "-", "image"], [91, 3, 0, "-", "layers"], [91, 3, 0, "-", "linear_algebra"], [91, 3, 0, "-", "losses"], [91, 3, 0, "-", "manipulation"], [91, 3, 0, "-", "norms"], [91, 3, 0, "-", "random"], [91, 3, 0, "-", "searching"], [91, 3, 0, "-", "set"], [91, 3, 0, "-", "sorting"], [91, 3, 0, "-", "statistical"], [91, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[91, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_celu"], [91, 0, 1, "", "_static_elu"], [91, 0, 1, "", "_static_hardshrink"], [91, 0, 1, "", "_static_hardsilu"], [91, 0, 1, "", "_static_hardtanh"], [91, 0, 1, "", "_static_scaled_tanh"], [91, 0, 1, "", "_static_silu"], [91, 0, 1, "", "_static_softshrink"], [91, 0, 1, "", "_static_tanhshrink"], [91, 0, 1, "", "_static_threshold"], [91, 0, 1, "", "celu"], [91, 0, 1, "", "elu"], [91, 0, 1, "", "hardshrink"], [91, 0, 1, "", "hardsilu"], [91, 0, 1, "", "hardtanh"], [91, 0, 1, "", "logit"], [91, 0, 1, "", "logsigmoid"], [91, 0, 1, "", "prelu"], [91, 0, 1, "", "relu6"], [91, 0, 1, "", "scaled_tanh"], [91, 0, 1, "", "selu"], [91, 0, 1, "", "silu"], [91, 0, 1, "", "softshrink"], [91, 0, 1, "", "static_logit"], [91, 0, 1, "", "static_logsigmoid"], [91, 0, 1, "", "static_prelu"], [91, 0, 1, "", "static_relu6"], [91, 0, 1, "", "static_selu"], [91, 0, 1, "", "static_thresholded_relu"], [91, 0, 1, "", "tanhshrink"], [91, 0, 1, "", "threshold"], [91, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[91, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[91, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_trilu"], [91, 0, 1, "", "blackman_window"], [91, 0, 1, "", "eye_like"], [91, 0, 1, "", "hamming_window"], [91, 0, 1, "", "hann_window"], [91, 0, 1, "", "kaiser_bessel_derived_window"], [91, 0, 1, "", "kaiser_window"], [91, 0, 1, "", "mel_weight_matrix"], [91, 0, 1, "", "polyval"], [91, 0, 1, "", "static_blackman_window"], [91, 0, 1, "", "static_eye_like"], [91, 0, 1, "", "static_hamming_window"], [91, 0, 1, "", "static_hann_window"], [91, 0, 1, "", "static_kaiser_bessel_derived_window"], [91, 0, 1, "", "static_kaiser_window"], [91, 0, 1, "", "static_mel_weight_matrix"], [91, 0, 1, "", "static_polyval"], [91, 0, 1, "", "static_tril_indices"], [91, 0, 1, "", "static_unsorted_segment_mean"], [91, 0, 1, "", "static_unsorted_segment_min"], [91, 0, 1, "", "static_unsorted_segment_sum"], [91, 0, 1, "", "static_vorbis_window"], [91, 0, 1, "", "tril_indices"], [91, 0, 1, "", "trilu"], [91, 0, 1, "", "unsorted_segment_mean"], [91, 0, 1, "", "unsorted_segment_min"], [91, 0, 1, "", "unsorted_segment_sum"], [91, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[91, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[91, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[91, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "allclose"], [91, 0, 1, "", "amax"], [91, 0, 1, "", "amin"], [91, 0, 1, "", "binarizer"], [91, 0, 1, "", "conj"], [91, 0, 1, "", "copysign"], [91, 0, 1, "", "count_nonzero"], [91, 0, 1, "", "diff"], [91, 0, 1, "", "digamma"], [91, 0, 1, "", "erfc"], [91, 0, 1, "", "erfinv"], [91, 0, 1, "", "fix"], [91, 0, 1, "", "float_power"], [91, 0, 1, "", "fmax"], [91, 0, 1, "", "fmod"], [91, 0, 1, "", "frexp"], [91, 0, 1, "", "gradient"], [91, 0, 1, "", "hypot"], [91, 0, 1, "", "isclose"], [91, 0, 1, "", "ldexp"], [91, 0, 1, "", "lerp"], [91, 0, 1, "", "modf"], [91, 0, 1, "", "nansum"], [91, 0, 1, "", "nextafter"], [91, 0, 1, "", "signbit"], [91, 0, 1, "", "sinc"], [91, 0, 1, "", "sparsify_tensor"], [91, 0, 1, "", "static_allclose"], [91, 0, 1, "", "static_amax"], [91, 0, 1, "", "static_amin"], [91, 0, 1, "", "static_binarizer"], [91, 0, 1, "", "static_conj"], [91, 0, 1, "", "static_copysign"], [91, 0, 1, "", "static_count_nonzero"], [91, 0, 1, "", "static_diff"], [91, 0, 1, "", "static_digamma"], [91, 0, 1, "", "static_erfc"], [91, 0, 1, "", "static_erfinv"], [91, 0, 1, "", "static_fix"], [91, 0, 1, "", "static_float_power"], [91, 0, 1, "", "static_fmax"], [91, 0, 1, "", "static_fmod"], [91, 0, 1, "", "static_frexp"], [91, 0, 1, "", "static_gradient"], [91, 0, 1, "", "static_hypot"], [91, 0, 1, "", "static_isclose"], [91, 0, 1, "", "static_ldexp"], [91, 0, 1, "", "static_lerp"], [91, 0, 1, "", "static_modf"], [91, 0, 1, "", "static_nansum"], [91, 0, 1, "", "static_nextafter"], [91, 0, 1, "", "static_signbit"], [91, 0, 1, "", "static_sinc"], [91, 0, 1, "", "static_sparsify_tensor"], [91, 0, 1, "", "static_xlogy"], [91, 0, 1, "", "static_zeta"], [91, 0, 1, "", "xlogy"], [91, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[91, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_reduce"], [91, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[91, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[91, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[91, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_fft"], [91, 0, 1, "", "_static_sliding_window"], [91, 0, 1, "", "adaptive_avg_pool1d"], [91, 0, 1, "", "adaptive_avg_pool2d"], [91, 0, 1, "", "adaptive_max_pool2d"], [91, 0, 1, "", "adaptive_max_pool3d"], [91, 0, 1, "", "avg_pool1d"], [91, 0, 1, "", "avg_pool2d"], [91, 0, 1, "", "avg_pool3d"], [91, 0, 1, "", "dct"], [91, 0, 1, "", "dft"], [91, 0, 1, "", "embedding"], [91, 0, 1, "", "fft"], [91, 0, 1, "", "idct"], [91, 0, 1, "", "ifft"], [91, 0, 1, "", "ifftn"], [91, 0, 1, "", "interpolate"], [91, 0, 1, "", "max_pool1d"], [91, 0, 1, "", "max_pool2d"], [91, 0, 1, "", "max_pool3d"], [91, 0, 1, "", "max_unpool1d"], [91, 0, 1, "", "rfft"], [91, 0, 1, "", "rfftn"], [91, 0, 1, "", "sliding_window"], [91, 0, 1, "", "static_adaptive_avg_pool1d"], [91, 0, 1, "", "static_adaptive_avg_pool2d"], [91, 0, 1, "", "static_adaptive_max_pool2d"], [91, 0, 1, "", "static_adaptive_max_pool3d"], [91, 0, 1, "", "static_avg_pool1d"], [91, 0, 1, "", "static_avg_pool2d"], [91, 0, 1, "", "static_avg_pool3d"], [91, 0, 1, "", "static_dct"], [91, 0, 1, "", "static_dft"], [91, 0, 1, "", "static_embedding"], [91, 0, 1, "", "static_idct"], [91, 0, 1, "", "static_ifft"], [91, 0, 1, "", "static_ifftn"], [91, 0, 1, "", "static_interpolate"], [91, 0, 1, "", "static_max_pool1d"], [91, 0, 1, "", "static_max_pool2d"], [91, 0, 1, "", "static_max_pool3d"], [91, 0, 1, "", "static_max_unpool1d"], [91, 0, 1, "", "static_rfft"], [91, 0, 1, "", "static_rfftn"], [91, 0, 1, "", "static_rnn"], [91, 0, 1, "", "static_stft"], [91, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[91, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "adjoint"], [91, 0, 1, "", "batched_outer"], [91, 0, 1, "", "cond"], [91, 0, 1, "", "diagflat"], [91, 0, 1, "", "dot"], [91, 0, 1, "", "eig"], [91, 0, 1, "", "eigh_tridiagonal"], [91, 0, 1, "", "eigvals"], [91, 0, 1, "", "higher_order_moment"], [91, 0, 1, "", "initialize_tucker"], [91, 0, 1, "", "kron"], [91, 0, 1, "", "make_svd_non_negative"], [91, 0, 1, "", "matrix_exp"], [91, 0, 1, "", "mode_dot"], [91, 0, 1, "", "multi_dot"], [91, 0, 1, "", "multi_mode_dot"], [91, 0, 1, "", "partial_tucker"], [91, 0, 1, "", "static_adjoint"], [91, 0, 1, "", "static_batched_outer"], [91, 0, 1, "", "static_cond"], [91, 0, 1, "", "static_diagflat"], [91, 0, 1, "", "static_dot"], [91, 0, 1, "", "static_eig"], [91, 0, 1, "", "static_eigh_tridiagonal"], [91, 0, 1, "", "static_eigvals"], [91, 0, 1, "", "static_higher_order_moment"], [91, 0, 1, "", "static_initialize_tucker"], [91, 0, 1, "", "static_kron"], [91, 0, 1, "", "static_make_svd_non_negative"], [91, 0, 1, "", "static_matrix_exp"], [91, 0, 1, "", "static_mode_dot"], [91, 0, 1, "", "static_multi_dot"], [91, 0, 1, "", "static_multi_mode_dot"], [91, 0, 1, "", "static_partial_tucker"], [91, 0, 1, "", "static_svd_flip"], [91, 0, 1, "", "static_tensor_train"], [91, 0, 1, "", "static_truncated_svd"], [91, 0, 1, "", "static_tt_matrix_to_tensor"], [91, 0, 1, "", "static_tucker"], [91, 0, 1, "", "svd_flip"], [91, 0, 1, "", "tensor_train"], [91, 0, 1, "", "truncated_svd"], [91, 0, 1, "", "tt_matrix_to_tensor"], [91, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[91, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_hinge_embedding_loss"], [91, 0, 1, "", "_static_huber_loss"], [91, 0, 1, "", "_static_kl_div"], [91, 0, 1, "", "_static_l1_loss"], [91, 0, 1, "", "_static_log_poisson_loss"], [91, 0, 1, "", "_static_poisson_nll_loss"], [91, 0, 1, "", "_static_smooth_l1_loss"], [91, 0, 1, "", "_static_soft_margin_loss"], [91, 0, 1, "", "hinge_embedding_loss"], [91, 0, 1, "", "huber_loss"], [91, 0, 1, "", "kl_div"], [91, 0, 1, "", "l1_loss"], [91, 0, 1, "", "log_poisson_loss"], [91, 0, 1, "", "poisson_nll_loss"], [91, 0, 1, "", "smooth_l1_loss"], [91, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[91, 1, 1, "", "_ContainerWithManipulationExperimental"], [91, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_fill_diagonal"], [91, 0, 1, "", "_static_put_along_axis"], [91, 0, 1, "", "_static_take"], [91, 0, 1, "", "_static_trim_zeros"], [91, 0, 1, "", "_static_unflatten"], [91, 0, 1, "", "_static_unique_consecutive"], [91, 0, 1, "", "as_strided"], [91, 0, 1, "", "associative_scan"], [91, 0, 1, "", "atleast_1d"], [91, 0, 1, "", "atleast_2d"], [91, 0, 1, "", "atleast_3d"], [91, 0, 1, "", "broadcast_shapes"], [91, 0, 1, "", "column_stack"], [91, 0, 1, "", "concat_from_sequence"], [91, 0, 1, "", "dsplit"], [91, 0, 1, "", "dstack"], [91, 0, 1, "", "expand"], [91, 0, 1, "", "fill_diagonal"], [91, 0, 1, "", "flatten"], [91, 0, 1, "", "fliplr"], [91, 0, 1, "", "flipud"], [91, 0, 1, "", "fold"], [91, 0, 1, "", "heaviside"], [91, 0, 1, "", "hsplit"], [91, 0, 1, "", "hstack"], [91, 0, 1, "", "i0"], [91, 0, 1, "", "matricize"], [91, 0, 1, "", "moveaxis"], [91, 0, 1, "", "pad"], [91, 0, 1, "", "partial_fold"], [91, 0, 1, "", "partial_tensor_to_vec"], [91, 0, 1, "", "partial_unfold"], [91, 0, 1, "", "partial_vec_to_tensor"], [91, 0, 1, "", "put_along_axis"], [91, 0, 1, "", "rot90"], [91, 0, 1, "", "soft_thresholding"], [91, 0, 1, "", "static_as_strided"], [91, 0, 1, "", "static_atleast_1d"], [91, 0, 1, "", "static_atleast_2d"], [91, 0, 1, "", "static_atleast_3d"], [91, 0, 1, "", "static_broadcast_shapes"], [91, 0, 1, "", "static_column_stack"], [91, 0, 1, "", "static_concat_from_sequence"], [91, 0, 1, "", "static_dsplit"], [91, 0, 1, "", "static_dstack"], [91, 0, 1, "", "static_expand"], [91, 0, 1, "", "static_flatten"], [91, 0, 1, "", "static_fliplr"], [91, 0, 1, "", "static_flipud"], [91, 0, 1, "", "static_fold"], [91, 0, 1, "", "static_heaviside"], [91, 0, 1, "", "static_hsplit"], [91, 0, 1, "", "static_hstack"], [91, 0, 1, "", "static_i0"], [91, 0, 1, "", "static_matricize"], [91, 0, 1, "", "static_moveaxis"], [91, 0, 1, "", "static_pad"], [91, 0, 1, "", "static_partial_fold"], [91, 0, 1, "", "static_partial_tensor_to_vec"], [91, 0, 1, "", "static_partial_unfold"], [91, 0, 1, "", "static_partial_vec_to_tensor"], [91, 0, 1, "", "static_rot90"], [91, 0, 1, "", "static_soft_thresholding"], [91, 0, 1, "", "static_take_along_axis"], [91, 0, 1, "", "static_top_k"], [91, 0, 1, "", "static_unfold"], [91, 0, 1, "", "static_vsplit"], [91, 0, 1, "", "static_vstack"], [91, 0, 1, "", "take"], [91, 0, 1, "", "take_along_axis"], [91, 0, 1, "", "top_k"], [91, 0, 1, "", "trim_zeros"], [91, 0, 1, "", "unflatten"], [91, 0, 1, "", "unfold"], [91, 0, 1, "", "unique_consecutive"], [91, 0, 1, "", "vsplit"], [91, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[91, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "batch_norm"], [91, 0, 1, "", "group_norm"], [91, 0, 1, "", "instance_norm"], [91, 0, 1, "", "l1_normalize"], [91, 0, 1, "", "l2_normalize"], [91, 0, 1, "", "lp_normalize"], [91, 0, 1, "", "static_batch_norm"], [91, 0, 1, "", "static_group_norm"], [91, 0, 1, "", "static_instance_norm"], [91, 0, 1, "", "static_l1_normalize"], [91, 0, 1, "", "static_l2_normalize"], [91, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[91, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "bernoulli"], [91, 0, 1, "", "beta"], [91, 0, 1, "", "dirichlet"], [91, 0, 1, "", "gamma"], [91, 0, 1, "", "poisson"], [91, 0, 1, "", "static_bernoulli"], [91, 0, 1, "", "static_beta"], [91, 0, 1, "", "static_dirichlet"], [91, 0, 1, "", "static_gamma"], [91, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[91, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "static_unravel_index"], [91, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[91, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[91, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[91, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "invert_permutation"], [91, 0, 1, "", "lexsort"], [91, 0, 1, "", "static_invert_permutation"], [91, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[91, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_cummax"], [91, 0, 1, "", "_static_cummin"], [91, 0, 1, "", "_static_nanmin"], [91, 0, 1, "", "bincount"], [91, 0, 1, "", "corrcoef"], [91, 0, 1, "", "cov"], [91, 0, 1, "", "cummax"], [91, 0, 1, "", "cummin"], [91, 0, 1, "", "histogram"], [91, 0, 1, "", "igamma"], [91, 0, 1, "", "lgamma"], [91, 0, 1, "", "median"], [91, 0, 1, "", "nanmean"], [91, 0, 1, "", "nanmedian"], [91, 0, 1, "", "nanmin"], [91, 0, 1, "", "nanprod"], [91, 0, 1, "", "quantile"], [91, 0, 1, "", "static_bincount"], [91, 0, 1, "", "static_corrcoef"], [91, 0, 1, "", "static_cov"], [91, 0, 1, "", "static_histogram"], [91, 0, 1, "", "static_igamma"], [91, 0, 1, "", "static_lgamma"], [91, 0, 1, "", "static_median"], [91, 0, 1, "", "static_nanmean"], [91, 0, 1, "", "static_nanmedian"], [91, 0, 1, "", "static_nanprod"], [91, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[91, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "optional_get_element"], [91, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[92, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_all_equal"], [92, 0, 1, "", "_static_array_equal"], [92, 0, 1, "", "_static_assert_supports_inplace"], [92, 0, 1, "", "_static_clip_matrix_norm"], [92, 0, 1, "", "_static_clip_vector_norm"], [92, 0, 1, "", "_static_einops_rearrange"], [92, 0, 1, "", "_static_einops_reduce"], [92, 0, 1, "", "_static_einops_repeat"], [92, 0, 1, "", "_static_exists"], [92, 0, 1, "", "_static_fourier_encode"], [92, 0, 1, "", "_static_gather"], [92, 0, 1, "", "_static_gather_nd"], [92, 0, 1, "", "_static_get_num_dims"], [92, 0, 1, "", "_static_has_nans"], [92, 0, 1, "", "_static_inplace_decrement"], [92, 0, 1, "", "_static_inplace_increment"], [92, 0, 1, "", "_static_inplace_update"], [92, 0, 1, "", "_static_is_array"], [92, 0, 1, "", "_static_is_ivy_array"], [92, 0, 1, "", "_static_is_native_array"], [92, 0, 1, "", "_static_scatter_flat"], [92, 0, 1, "", "_static_scatter_nd"], [92, 0, 1, "", "_static_size"], [92, 0, 1, "", "_static_stable_divide"], [92, 0, 1, "", "_static_stable_pow"], [92, 0, 1, "", "_static_supports_inplace_updates"], [92, 0, 1, "", "_static_to_list"], [92, 0, 1, "", "_static_to_numpy"], [92, 0, 1, "", "_static_to_scalar"], [92, 0, 1, "", "_static_value_is_nan"], [92, 0, 1, "", "all_equal"], [92, 0, 1, "", "array_equal"], [92, 0, 1, "", "assert_supports_inplace"], [92, 0, 1, "", "clip_matrix_norm"], [92, 0, 1, "", "clip_vector_norm"], [92, 0, 1, "", "einops_rearrange"], [92, 0, 1, "", "einops_reduce"], [92, 0, 1, "", "einops_repeat"], [92, 0, 1, "", "exists"], [92, 0, 1, "", "fourier_encode"], [92, 0, 1, "", "gather"], [92, 0, 1, "", "gather_nd"], [92, 0, 1, "", "get_num_dims"], [92, 0, 1, "", "has_nans"], [92, 0, 1, "", "inplace_decrement"], [92, 0, 1, "", "inplace_increment"], [92, 0, 1, "", "inplace_update"], [92, 0, 1, "", "is_array"], [92, 0, 1, "", "is_ivy_array"], [92, 0, 1, "", "is_native_array"], [92, 0, 1, "", "isin"], [92, 0, 1, "", "itemsize"], [92, 0, 1, "", "scatter_flat"], [92, 0, 1, "", "scatter_nd"], [92, 0, 1, "", "size"], [92, 0, 1, "", "stable_divide"], [92, 0, 1, "", "stable_pow"], [92, 0, 1, "", "static_isin"], [92, 0, 1, "", "static_itemsize"], [92, 0, 1, "", "static_strides"], [92, 0, 1, "", "strides"], [92, 0, 1, "", "supports_inplace_updates"], [92, 0, 1, "", "to_list"], [92, 0, 1, "", "to_numpy"], [92, 0, 1, "", "to_scalar"], [92, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[93, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_stop_gradient"], [93, 0, 1, "", "adam_step"], [93, 0, 1, "", "adam_update"], [93, 0, 1, "", "gradient_descent_update"], [93, 0, 1, "", "lamb_update"], [93, 0, 1, "", "lars_update"], [93, 0, 1, "", "optimizer_update"], [93, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[94, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[95, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_conv1d"], [95, 0, 1, "", "_static_conv1d_transpose"], [95, 0, 1, "", "_static_conv2d"], [95, 0, 1, "", "_static_conv2d_transpose"], [95, 0, 1, "", "_static_conv3d"], [95, 0, 1, "", "_static_conv3d_transpose"], [95, 0, 1, "", "_static_depthwise_conv2d"], [95, 0, 1, "", "_static_dropout"], [95, 0, 1, "", "_static_dropout1d"], [95, 0, 1, "", "_static_dropout2d"], [95, 0, 1, "", "_static_dropout3d"], [95, 0, 1, "", "_static_linear"], [95, 0, 1, "", "_static_lstm_update"], [95, 0, 1, "", "_static_multi_head_attention"], [95, 0, 1, "", "_static_reduce_window"], [95, 0, 1, "", "_static_scaled_dot_product_attention"], [95, 0, 1, "", "conv1d"], [95, 0, 1, "", "conv1d_transpose"], [95, 0, 1, "", "conv2d"], [95, 0, 1, "", "conv2d_transpose"], [95, 0, 1, "", "conv3d"], [95, 0, 1, "", "conv3d_transpose"], [95, 0, 1, "", "depthwise_conv2d"], [95, 0, 1, "", "dropout"], [95, 0, 1, "", "dropout1d"], [95, 0, 1, "", "dropout2d"], [95, 0, 1, "", "dropout3d"], [95, 0, 1, "", "linear"], [95, 0, 1, "", "lstm_update"], [95, 0, 1, "", "multi_head_attention"], [95, 0, 1, "", "reduce_window"], [95, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[96, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_cholesky"], [96, 0, 1, "", "_static_cross"], [96, 0, 1, "", "_static_det"], [96, 0, 1, "", "_static_diag"], [96, 0, 1, "", "_static_diagonal"], [96, 0, 1, "", "_static_eigh"], [96, 0, 1, "", "_static_eigvalsh"], [96, 0, 1, "", "_static_inner"], [96, 0, 1, "", "_static_inv"], [96, 0, 1, "", "_static_matmul"], [96, 0, 1, "", "_static_matrix_norm"], [96, 0, 1, "", "_static_matrix_power"], [96, 0, 1, "", "_static_matrix_rank"], [96, 0, 1, "", "_static_matrix_transpose"], [96, 0, 1, "", "_static_outer"], [96, 0, 1, "", "_static_pinv"], [96, 0, 1, "", "_static_qr"], [96, 0, 1, "", "_static_slogdet"], [96, 0, 1, "", "_static_solve"], [96, 0, 1, "", "_static_svd"], [96, 0, 1, "", "_static_svdvals"], [96, 0, 1, "", "_static_tensordot"], [96, 0, 1, "", "_static_tensorsolve"], [96, 0, 1, "", "_static_trace"], [96, 0, 1, "", "_static_vander"], [96, 0, 1, "", "_static_vecdot"], [96, 0, 1, "", "_static_vector_norm"], [96, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [96, 0, 1, "", "cholesky"], [96, 0, 1, "", "cross"], [96, 0, 1, "", "det"], [96, 0, 1, "", "diag"], [96, 0, 1, "", "diagonal"], [96, 0, 1, "", "eigh"], [96, 0, 1, "", "eigvalsh"], [96, 0, 1, "", "general_inner_product"], [96, 0, 1, "", "inner"], [96, 0, 1, "", "inv"], [96, 0, 1, "", "matmul"], [96, 0, 1, "", "matrix_norm"], [96, 0, 1, "", "matrix_power"], [96, 0, 1, "", "matrix_rank"], [96, 0, 1, "", "matrix_transpose"], [96, 0, 1, "", "outer"], [96, 0, 1, "", "pinv"], [96, 0, 1, "", "qr"], [96, 0, 1, "", "slogdet"], [96, 0, 1, "", "solve"], [96, 0, 1, "", "static_general_inner_product"], [96, 0, 1, "", "svd"], [96, 0, 1, "", "svdvals"], [96, 0, 1, "", "tensordot"], [96, 0, 1, "", "tensorsolve"], [96, 0, 1, "", "trace"], [96, 0, 1, "", "vander"], [96, 0, 1, "", "vecdot"], [96, 0, 1, "", "vector_norm"], [96, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[97, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_static_binary_cross_entropy"], [97, 0, 1, "", "_static_cross_entropy"], [97, 0, 1, "", "_static_sparse_cross_entropy"], [97, 0, 1, "", "binary_cross_entropy"], [97, 0, 1, "", "cross_entropy"], [97, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[98, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_clip"], [98, 0, 1, "", "_static_concat"], [98, 0, 1, "", "_static_constant_pad"], [98, 0, 1, "", "_static_expand_dims"], [98, 0, 1, "", "_static_flip"], [98, 0, 1, "", "_static_permute_dims"], [98, 0, 1, "", "_static_repeat"], [98, 0, 1, "", "_static_reshape"], [98, 0, 1, "", "_static_roll"], [98, 0, 1, "", "_static_split"], [98, 0, 1, "", "_static_squeeze"], [98, 0, 1, "", "_static_stack"], [98, 0, 1, "", "_static_swapaxes"], [98, 0, 1, "", "_static_tile"], [98, 0, 1, "", "_static_unstack"], [98, 0, 1, "", "_static_zero_pad"], [98, 0, 1, "", "clip"], [98, 0, 1, "", "concat"], [98, 0, 1, "", "constant_pad"], [98, 0, 1, "", "expand_dims"], [98, 0, 1, "", "flip"], [98, 0, 1, "", "permute_dims"], [98, 0, 1, "", "repeat"], [98, 0, 1, "", "reshape"], [98, 0, 1, "", "roll"], [98, 0, 1, "", "split"], [98, 0, 1, "", "squeeze"], [98, 0, 1, "", "stack"], [98, 0, 1, "", "swapaxes"], [98, 0, 1, "", "tile"], [98, 0, 1, "", "unstack"], [98, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[99, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[100, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_static_multinomial"], [100, 0, 1, "", "_static_randint"], [100, 0, 1, "", "_static_random_normal"], [100, 0, 1, "", "_static_random_uniform"], [100, 0, 1, "", "_static_shuffle"], [100, 0, 1, "", "multinomial"], [100, 0, 1, "", "randint"], [100, 0, 1, "", "random_normal"], [100, 0, 1, "", "random_uniform"], [100, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[101, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "_static_argmax"], [101, 0, 1, "", "_static_argmin"], [101, 0, 1, "", "_static_argwhere"], [101, 0, 1, "", "_static_nonzero"], [101, 0, 1, "", "_static_where"], [101, 0, 1, "", "argmax"], [101, 0, 1, "", "argmin"], [101, 0, 1, "", "argwhere"], [101, 0, 1, "", "nonzero"], [101, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[102, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "_static_unique_all"], [102, 0, 1, "", "_static_unique_counts"], [102, 0, 1, "", "_static_unique_inverse"], [102, 0, 1, "", "_static_unique_values"], [102, 0, 1, "", "unique_all"], [102, 0, 1, "", "unique_counts"], [102, 0, 1, "", "unique_inverse"], [102, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[103, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_argsort"], [103, 0, 1, "", "_static_searchsorted"], [103, 0, 1, "", "_static_sort"], [103, 0, 1, "", "argsort"], [103, 0, 1, "", "msort"], [103, 0, 1, "", "searchsorted"], [103, 0, 1, "", "sort"], [103, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[104, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "_static_cumprod"], [104, 0, 1, "", "_static_cumsum"], [104, 0, 1, "", "_static_min"], [104, 0, 1, "", "_static_prod"], [104, 0, 1, "", "_static_sum"], [104, 0, 1, "", "_static_var"], [104, 0, 1, "", "cumprod"], [104, 0, 1, "", "cumsum"], [104, 0, 1, "", "einsum"], [104, 0, 1, "", "max"], [104, 0, 1, "", "mean"], [104, 0, 1, "", "min"], [104, 0, 1, "", "prod"], [104, 0, 1, "", "std"], [104, 0, 1, "", "sum"], [104, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[105, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_all"], [105, 0, 1, "", "_static_any"], [105, 0, 1, "", "all"], [105, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[106, 2, 1, "", "_wrap_function"], [106, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[107, 3, 0, "-", "base"], [108, 3, 0, "-", "cp_tensor"], [109, 3, 0, "-", "parafac2_tensor"], [110, 3, 0, "-", "tr_tensor"], [111, 3, 0, "-", "tt_tensor"], [112, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[107, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[107, 0, 1, "", "__init__"], [107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "mode_dot"], [107, 0, 1, "", "norm"], [107, 0, 1, "", "to_tensor"], [107, 0, 1, "", "to_unfolded"], [107, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[108, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[108, 0, 1, "", "__init__"], [108, 4, 1, "", "_abc_impl"], [108, 0, 1, "", "cp_copy"], [108, 0, 1, "", "cp_flip_sign"], [108, 0, 1, "", "cp_lstsq_grad"], [108, 0, 1, "", "cp_mode_dot"], [108, 0, 1, "", "cp_n_param"], [108, 0, 1, "", "cp_norm"], [108, 0, 1, "", "cp_normalize"], [108, 0, 1, "", "cp_to_tensor"], [108, 0, 1, "", "cp_to_unfolded"], [108, 0, 1, "", "cp_to_vec"], [108, 0, 1, "", "mode_dot"], [108, 5, 1, "", "n_param"], [108, 0, 1, "", "norm"], [108, 0, 1, "", "normalize"], [108, 0, 1, "", "to_tensor"], [108, 0, 1, "", "to_unfolded"], [108, 0, 1, "", "to_vec"], [108, 0, 1, "", "unfolding_dot_khatri_rao"], [108, 0, 1, "", "validate_cp_rank"], [108, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[109, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[109, 0, 1, "", "__init__"], [109, 4, 1, "", "_abc_impl"], [109, 0, 1, "", "apply_parafac2_projections"], [109, 0, 1, "", "from_CPTensor"], [109, 5, 1, "", "n_param"], [109, 0, 1, "", "parafac2_normalise"], [109, 0, 1, "", "parafac2_to_slice"], [109, 0, 1, "", "parafac2_to_slices"], [109, 0, 1, "", "parafac2_to_tensor"], [109, 0, 1, "", "parafac2_to_unfolded"], [109, 0, 1, "", "parafac2_to_vec"], [109, 0, 1, "", "to_tensor"], [109, 0, 1, "", "to_unfolded"], [109, 0, 1, "", "to_vec"], [109, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[110, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[110, 0, 1, "", "__init__"], [110, 4, 1, "", "_abc_impl"], [110, 5, 1, "", "n_param"], [110, 0, 1, "", "to_tensor"], [110, 0, 1, "", "to_unfolded"], [110, 0, 1, "", "to_vec"], [110, 0, 1, "", "tr_n_param"], [110, 0, 1, "", "tr_to_tensor"], [110, 0, 1, "", "tr_to_unfolded"], [110, 0, 1, "", "tr_to_vec"], [110, 0, 1, "", "validate_tr_rank"], [110, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[111, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[111, 0, 1, "", "__init__"], [111, 4, 1, "", "_abc_impl"], [111, 0, 1, "", "_tt_n_param"], [111, 0, 1, "", "index_update"], [111, 5, 1, "", "n_param"], [111, 0, 1, "", "pad_tt_rank"], [111, 0, 1, "", "to_tensor"], [111, 0, 1, "", "to_unfolding"], [111, 0, 1, "", "to_vec"], [111, 0, 1, "", "tt_to_tensor"], [111, 0, 1, "", "tt_to_unfolded"], [111, 0, 1, "", "tt_to_vec"], [111, 0, 1, "", "validate_tt_rank"], [111, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[112, 1, 1, "", "TuckerTensor"], [112, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 0, 1, "", "mode_dot"], [112, 5, 1, "", "n_param"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolded"], [112, 0, 1, "", "to_vec"], [112, 0, 1, "", "tucker_copy"], [112, 0, 1, "", "tucker_mode_dot"], [112, 0, 1, "", "tucker_n_param"], [112, 0, 1, "", "tucker_normalize"], [112, 0, 1, "", "tucker_to_tensor"], [112, 0, 1, "", "tucker_to_unfolded"], [112, 0, 1, "", "tucker_to_vec"], [112, 0, 1, "", "validate_tucker_rank"], [112, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[117, 3, 0, "-", "base"], [118, 3, 0, "-", "elementwise"], [116, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[117, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[117, 0, 1, "", "__init__"], [117, 4, 1, "", "_abc_impl"], [117, 0, 1, "", "broadcast_shapes"], [117, 5, 1, "", "data"], [117, 5, 1, "", "device"], [117, 5, 1, "", "dtype"], [117, 5, 1, "", "inner_shape"], [117, 5, 1, "", "ndim"], [117, 0, 1, "", "nested_array"], [117, 5, 1, "", "nested_rank"], [117, 0, 1, "", "ragged_map"], [117, 0, 1, "", "ragged_multi_map"], [117, 0, 1, "", "ragged_multi_map_in_function"], [117, 0, 1, "", "replace_ivy_arrays"], [117, 5, 1, "", "shape"], [117, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[118, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[118, 4, 1, "", "_abc_impl"], [118, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[116, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[116, 0, 1, "", "__init__"], [116, 0, 1, "", "from_row_lengths"], [116, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[637, 3, 0, "-", "activations"], [638, 3, 0, "-", "constants"], [639, 3, 0, "-", "control_flow_ops"], [640, 3, 0, "-", "creation"], [641, 3, 0, "-", "data_type"], [642, 3, 0, "-", "device"], [643, 3, 0, "-", "elementwise"], [644, 3, 0, "-", "experimental"], [645, 3, 0, "-", "general"], [646, 3, 0, "-", "gradients"], [647, 3, 0, "-", "layers"], [648, 3, 0, "-", "linear_algebra"], [649, 3, 0, "-", "losses"], [650, 3, 0, "-", "manipulation"], [651, 3, 0, "-", "meta"], [652, 3, 0, "-", "nest"], [653, 3, 0, "-", "norms"], [654, 3, 0, "-", "random"], [655, 3, 0, "-", "searching"], [656, 3, 0, "-", "set"], [657, 3, 0, "-", "sorting"], [658, 3, 0, "-", "statistical"], [659, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[378, 3, 0, "-", "activations"], [379, 3, 0, "-", "constants"], [380, 3, 0, "-", "creation"], [381, 3, 0, "-", "data_type"], [382, 3, 0, "-", "device"], [383, 3, 0, "-", "elementwise"], [384, 3, 0, "-", "general"], [385, 3, 0, "-", "gradients"], [386, 3, 0, "-", "layers"], [387, 3, 0, "-", "linear_algebra"], [388, 3, 0, "-", "losses"], [389, 3, 0, "-", "manipulation"], [390, 3, 0, "-", "meta"], [391, 3, 0, "-", "nest"], [392, 3, 0, "-", "norms"], [393, 3, 0, "-", "random"], [394, 3, 0, "-", "searching"], [395, 3, 0, "-", "set"], [396, 3, 0, "-", "sorting"], [397, 3, 0, "-", "sparse_array"], [398, 3, 0, "-", "statistical"], [399, 3, 0, "-", "utility"]], "ivy.stateful": [[802, 3, 0, "-", "activations"], [803, 3, 0, "-", "converters"], [804, 3, 0, "-", "helpers"], [805, 3, 0, "-", "initializers"], [806, 3, 0, "-", "layers"], [807, 3, 0, "-", "losses"], [808, 3, 0, "-", "module"], [809, 3, 0, "-", "norms"], [810, 3, 0, "-", "optimizers"], [811, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[802, 1, 1, "", "ELU"], [802, 1, 1, "", "GEGLU"], [802, 1, 1, "", "GELU"], [802, 1, 1, "", "Hardswish"], [802, 1, 1, "", "LeakyReLU"], [802, 1, 1, "", "LogSigmoid"], [802, 1, 1, "", "LogSoftmax"], [802, 1, 1, "", "Logit"], [802, 1, 1, "", "Mish"], [802, 1, 1, "", "PReLU"], [802, 1, 1, "", "ReLU"], [802, 1, 1, "", "ReLU6"], [802, 1, 1, "", "SeLU"], [802, 1, 1, "", "SiLU"], [802, 1, 1, "", "Sigmoid"], [802, 1, 1, "", "Softmax"], [802, 1, 1, "", "Softplus"], [802, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[802, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[802, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[803, 1, 1, "", "ModuleConverters"], [803, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[803, 0, 1, "", "from_flax_module"], [803, 0, 1, "", "from_haiku_module"], [803, 0, 1, "", "from_keras_module"], [803, 0, 1, "", "from_paddle_module"], [803, 0, 1, "", "from_torch_module"], [803, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[804, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[805, 1, 1, "", "Constant"], [805, 1, 1, "", "FirstLayerSiren"], [805, 1, 1, "", "GlorotUniform"], [805, 1, 1, "", "Initializer"], [805, 1, 1, "", "KaimingNormal"], [805, 1, 1, "", "Ones"], [805, 1, 1, "", "RandomNormal"], [805, 1, 1, "", "Siren"], [805, 1, 1, "", "Uniform"], [805, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[805, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[805, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[805, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[805, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[805, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[805, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[806, 1, 1, "", "AdaptiveAvgPool1d"], [806, 1, 1, "", "AdaptiveAvgPool2d"], [806, 1, 1, "", "AvgPool1D"], [806, 1, 1, "", "AvgPool2D"], [806, 1, 1, "", "AvgPool3D"], [806, 1, 1, "", "Conv1D"], [806, 1, 1, "", "Conv1DTranspose"], [806, 1, 1, "", "Conv2D"], [806, 1, 1, "", "Conv2DTranspose"], [806, 1, 1, "", "Conv3D"], [806, 1, 1, "", "Conv3DTranspose"], [806, 1, 1, "", "Dct"], [806, 1, 1, "", "DepthwiseConv2D"], [806, 1, 1, "", "Dropout"], [806, 1, 1, "", "Embedding"], [806, 1, 1, "", "FFT"], [806, 1, 1, "", "IDct"], [806, 1, 1, "", "IFFT"], [806, 1, 1, "", "Identity"], [806, 1, 1, "", "LSTM"], [806, 1, 1, "", "Linear"], [806, 1, 1, "", "MaxPool1D"], [806, 1, 1, "", "MaxPool2D"], [806, 1, 1, "", "MaxPool3D"], [806, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[806, 0, 1, "", "__init__"], [806, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[806, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[806, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[807, 1, 1, "", "BinaryCrossEntropyLoss"], [807, 1, 1, "", "CrossEntropyLoss"], [807, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[807, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[807, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[807, 0, 1, "", "__init__"]], "ivy.stateful.module": [[808, 1, 1, "", "Module"], [808, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[808, 0, 1, "", "__call__"], [808, 0, 1, "", "__init__"], [808, 5, 1, "", "buffers"], [808, 0, 1, "", "build"], [808, 5, 1, "", "build_mode"], [808, 5, 1, "", "built"], [808, 5, 1, "", "device"], [808, 5, 1, "", "dtype"], [808, 0, 1, "", "eval"], [808, 0, 1, "", "load"], [808, 5, 1, "", "module_dict"], [808, 0, 1, "", "register_buffer"], [808, 0, 1, "", "register_parameter"], [808, 0, 1, "", "save"], [808, 0, 1, "", "save_weights"], [808, 0, 1, "", "show_graph"], [808, 5, 1, "", "state_dict"], [808, 0, 1, "", "to_device"], [808, 0, 1, "", "trace_graph"], [808, 0, 1, "", "train"], [808, 5, 1, "", "training"], [808, 5, 1, "", "v"]], "ivy.stateful.norms": [[809, 1, 1, "", "BatchNorm2D"], [809, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[809, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[809, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[810, 1, 1, "", "Adam"], [810, 1, 1, "", "AdamW"], [810, 1, 1, "", "LAMB"], [810, 1, 1, "", "LARS"], [810, 1, 1, "", "Optimizer"], [810, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "set_state"], [810, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[810, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "set_state"], [810, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "set_state"], [810, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "set_state"], [810, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "set_state"], [810, 5, 1, "", "state"]], "ivy.stateful.sequential": [[811, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[811, 0, 1, "", "__init__"]], "ivy.utils": [[812, 3, 0, "-", "assertions"], [813, 3, 0, "-", "backend"], [817, 3, 0, "-", "binaries"], [818, 3, 0, "-", "decorator_utils"], [819, 3, 0, "-", "dynamic_import"], [820, 3, 0, "-", "einsum_parser"], [821, 3, 0, "-", "einsum_path_helpers"], [822, 3, 0, "-", "exceptions"], [823, 3, 0, "-", "inspection"], [824, 3, 0, "-", "logging"], [825, 3, 0, "-", "profiler"], [826, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[812, 2, 1, "", "check_all"], [812, 2, 1, "", "check_all_or_any_fn"], [812, 2, 1, "", "check_any"], [812, 2, 1, "", "check_dev_correct_formatting"], [812, 2, 1, "", "check_dimensions"], [812, 2, 1, "", "check_elem_in_list"], [812, 2, 1, "", "check_equal"], [812, 2, 1, "", "check_exists"], [812, 2, 1, "", "check_false"], [812, 2, 1, "", "check_gather_input_valid"], [812, 2, 1, "", "check_gather_nd_input_valid"], [812, 2, 1, "", "check_greater"], [812, 2, 1, "", "check_inplace_sizes_valid"], [812, 2, 1, "", "check_isinstance"], [812, 2, 1, "", "check_kernel_padding_size"], [812, 2, 1, "", "check_less"], [812, 2, 1, "", "check_one_way_broadcastable"], [812, 2, 1, "", "check_same_dtype"], [812, 2, 1, "", "check_shape"], [812, 2, 1, "", "check_shapes_broadcastable"], [812, 2, 1, "", "check_true"], [812, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[814, 3, 0, "-", "ast_helpers"], [815, 3, 0, "-", "handler"], [816, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[814, 1, 1, "", "ImportTransformer"], [814, 1, 1, "", "IvyLoader"], [814, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "impersonate_import"], [814, 0, 1, "", "visit_Import"], [814, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[814, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[815, 1, 1, "", "ContextManager"], [815, 2, 1, "", "choose_random_backend"], [815, 2, 1, "", "current_backend"], [815, 2, 1, "", "dynamic_backend_converter"], [815, 2, 1, "", "prevent_access_locally"], [815, 2, 1, "", "previous_backend"], [815, 2, 1, "", "set_backend"], [815, 2, 1, "", "set_backend_to_specific_version"], [815, 2, 1, "", "set_jax_backend"], [815, 2, 1, "", "set_mxnet_backend"], [815, 2, 1, "", "set_numpy_backend"], [815, 2, 1, "", "set_paddle_backend"], [815, 2, 1, "", "set_tensorflow_backend"], [815, 2, 1, "", "set_torch_backend"], [815, 2, 1, "", "unset_backend"], [815, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[815, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[816, 2, 1, "", "clear_sub_backends"], [816, 2, 1, "", "find_available_sub_backends"], [816, 2, 1, "", "fn_name_from_version_specific_fn_name"], [816, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [816, 2, 1, "", "set_sub_backend"], [816, 2, 1, "", "set_sub_backend_to_specific_version"], [816, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[817, 2, 1, "", "check_for_binaries"], [817, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[818, 1, 1, "", "CallVisitor"], [818, 1, 1, "", "TransposeType"], [818, 2, 1, "", "apply_transpose"], [818, 2, 1, "", "get_next_func"], [818, 2, 1, "", "handle_get_item"], [818, 2, 1, "", "handle_methods"], [818, 2, 1, "", "handle_set_item"], [818, 2, 1, "", "handle_transpose_in_input_and_output"], [818, 2, 1, "", "retrieve_object"], [818, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[818, 4, 1, "", "CONV1D"], [818, 4, 1, "", "CONV2D"], [818, 4, 1, "", "CONV3D"], [818, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[819, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[820, 2, 1, "", "convert_interleaved_input"], [820, 2, 1, "", "convert_subscripts"], [820, 2, 1, "", "find_output_shape"], [820, 2, 1, "", "find_output_str"], [820, 2, 1, "", "gen_unused_symbols"], [820, 2, 1, "", "get_symbol"], [820, 2, 1, "", "has_valid_einsum_chars_only"], [820, 2, 1, "", "is_valid_einsum_char"], [820, 2, 1, "", "legalise_einsum_expr"], [820, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[821, 2, 1, "", "can_dot"], [821, 2, 1, "", "compute_size_by_dict"], [821, 2, 1, "", "find_contraction"], [821, 2, 1, "", "flop_count"], [821, 2, 1, "", "greedy_path"], [821, 2, 1, "", "optimal_path"], [821, 2, 1, "", "parse_einsum_input"], [821, 2, 1, "", "parse_possible_contraction"], [821, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[822, 7, 1, "", "InplaceUpdateException"], [822, 7, 1, "", "IvyAttributeError"], [822, 7, 1, "", "IvyBackendException"], [822, 7, 1, "", "IvyBroadcastShapeError"], [822, 7, 1, "", "IvyDeviceError"], [822, 7, 1, "", "IvyDtypePromotionError"], [822, 7, 1, "", "IvyError"], [822, 7, 1, "", "IvyException"], [822, 7, 1, "", "IvyIndexError"], [822, 7, 1, "", "IvyInvalidBackendException"], [822, 7, 1, "", "IvyNotImplementedException"], [822, 7, 1, "", "IvyValueError"], [822, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[822, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[822, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[823, 2, 1, "", "add_array_specs"], [823, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[824, 2, 1, "", "set_logging_mode"], [824, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[825, 1, 1, "", "Profiler"], [825, 2, 1, "", "tensorflow_profile_start"], [825, 2, 1, "", "tensorflow_profile_stop"], [825, 2, 1, "", "torch_profiler_init"], [825, 2, 1, "", "torch_profiler_start"], [825, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[825, 0, 1, "", "__init__"], [825, 4, 1, "", "print_stats"], [825, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[826, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[785, 3, 0, "-", "assertions"], [786, 3, 0, "-", "available_frameworks"], [787, 3, 0, "-", "function_testing"], [788, 3, 0, "-", "globals"], [789, 3, 0, "-", "hypothesis_helpers"], [794, 3, 0, "-", "multiprocessing"], [795, 3, 0, "-", "pipeline_helper"], [796, 3, 0, "-", "structs"], [797, 3, 0, "-", "test_parameter_flags"], [798, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[785, 2, 1, "", "assert_all_close"], [785, 2, 1, "", "assert_same_type"], [785, 2, 1, "", "assert_same_type_and_shape"], [785, 2, 1, "", "check_unsupported_device"], [785, 2, 1, "", "check_unsupported_device_and_dtype"], [785, 2, 1, "", "check_unsupported_dtype"], [785, 2, 1, "", "test_unsupported_function"], [785, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[787, 2, 1, "", "args_to_container"], [787, 2, 1, "", "args_to_frontend"], [787, 2, 1, "", "arrays_to_frontend"], [787, 2, 1, "", "as_lists"], [787, 2, 1, "", "convtrue"], [787, 2, 1, "", "create_args_kwargs"], [787, 2, 1, "", "flatten"], [787, 2, 1, "", "flatten_and_to_np"], [787, 2, 1, "", "flatten_frontend"], [787, 2, 1, "", "flatten_frontend_fw_to_np"], [787, 2, 1, "", "flatten_frontend_to_np"], [787, 2, 1, "", "get_frontend_ret"], [787, 2, 1, "", "get_ret_and_flattened_np_array"], [787, 2, 1, "", "gradient_incompatible_function"], [787, 2, 1, "", "gradient_test"], [787, 2, 1, "", "gradient_unsupported_dtypes"], [787, 2, 1, "", "kwargs_to_args_n_kwargs"], [787, 2, 1, "", "test_frontend_function"], [787, 2, 1, "", "test_frontend_method"], [787, 2, 1, "", "test_function"], [787, 2, 1, "", "test_function_backend_computation"], [787, 2, 1, "", "test_function_ground_truth_computation"], [787, 2, 1, "", "test_gradient_backend_computation"], [787, 2, 1, "", "test_gradient_ground_truth_computation"], [787, 2, 1, "", "test_method"], [787, 2, 1, "", "test_method_backend_computation"], [787, 2, 1, "", "test_method_ground_truth_computation"], [787, 2, 1, "", "traced_if_required"], [787, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[788, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [788, 7, 1, "", "InterruptedTest"], [788, 1, 1, "", "TestData"], [788, 2, 1, "", "setup_api_test"], [788, 2, 1, "", "setup_frontend_test"], [788, 2, 1, "", "teardown_api_test"], [788, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[788, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[788, 0, 1, "", "__init__"], [788, 4, 1, "", "fn_name"], [788, 4, 1, "", "fn_tree"], [788, 4, 1, "", "is_method"], [788, 4, 1, "", "supported_device_dtypes"], [788, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[790, 3, 0, "-", "array_helpers"], [791, 3, 0, "-", "dtype_helpers"], [792, 3, 0, "-", "general_helpers"], [793, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[790, 2, 1, "", "array_and_broadcastable_shape"], [790, 2, 1, "", "array_bools"], [790, 2, 1, "", "array_helpers_dtype_info_helper"], [790, 2, 1, "", "array_indices_axis"], [790, 2, 1, "", "array_indices_put_along_axis"], [790, 2, 1, "", "array_values"], [790, 2, 1, "", "arrays_and_axes"], [790, 2, 1, "", "arrays_for_pooling"], [790, 2, 1, "", "broadcast_shapes"], [790, 2, 1, "", "cond_data_gen_helper"], [790, 2, 1, "", "create_concatenable_arrays_dtypes"], [790, 2, 1, "", "create_nested_input"], [790, 2, 1, "", "dtype_and_values"], [790, 2, 1, "", "dtype_array_query"], [790, 2, 1, "", "dtype_array_query_val"], [790, 2, 1, "", "dtype_values_axis"], [790, 2, 1, "", "einsum_helper"], [790, 2, 1, "", "get_first_solve_batch_matrix"], [790, 2, 1, "", "get_first_solve_matrix"], [790, 2, 1, "", "get_second_solve_batch_matrix"], [790, 2, 1, "", "get_second_solve_matrix"], [790, 2, 1, "", "list_of_size"], [790, 2, 1, "", "lists"], [790, 2, 1, "", "mutually_broadcastable_shapes"], [790, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[791, 2, 1, "", "array_dtypes"], [791, 2, 1, "", "cast_filter"], [791, 2, 1, "", "cast_filter_helper"], [791, 2, 1, "", "get_castable_dtype"], [791, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[792, 7, 1, "", "BroadcastError"], [792, 2, 1, "", "apply_safety_factor"], [792, 2, 1, "", "broadcast_shapes"], [792, 2, 1, "", "dims_and_offset"], [792, 2, 1, "", "embedding_helper"], [792, 2, 1, "", "general_helpers_dtype_info_helper"], [792, 2, 1, "", "get_axis"], [792, 2, 1, "", "get_bounds"], [792, 2, 1, "", "get_mean_std"], [792, 2, 1, "", "get_shape"], [792, 2, 1, "", "matrix_is_stable"], [792, 2, 1, "", "reshape_shapes"], [792, 2, 1, "", "sizes_"], [792, 2, 1, "", "subsets"], [792, 2, 1, "", "two_broadcastable_shapes"], [792, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[793, 2, 1, "", "floats"], [793, 2, 1, "", "ints"], [793, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[794, 2, 1, "", "backend_proc"], [794, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[795, 1, 1, "", "BackendHandler"], [795, 1, 1, "", "BackendHandlerMode"], [795, 1, 1, "", "WithBackendContext"], [795, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[795, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[795, 4, 1, "", "SetBackend"], [795, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[795, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[796, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[796, 0, 1, "", "__init__"], [796, 4, 1, "", "framework_init_module"], [796, 4, 1, "", "init_name"], [796, 4, 1, "", "ivy_init_module"], [796, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[797, 1, 1, "", "DynamicFlag"], [797, 1, 1, "", "FrontendFunctionTestFlags"], [797, 1, 1, "", "FrontendInitTestFlags"], [797, 1, 1, "", "FrontendMethodTestFlags"], [797, 1, 1, "", "FunctionTestFlags"], [797, 1, 1, "", "InitMethodTestFlags"], [797, 1, 1, "", "MethodTestFlags"], [797, 1, 1, "", "TestFlags"], [797, 2, 1, "", "build_flag"], [797, 2, 1, "", "frontend_function_flags"], [797, 2, 1, "", "frontend_init_flags"], [797, 2, 1, "", "frontend_method_flags"], [797, 2, 1, "", "function_flags"], [797, 2, 1, "", "init_method_flags"], [797, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[797, 0, 1, "", "__init__"], [797, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[797, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[798, 2, 1, "", "handle_example"], [798, 2, 1, "", "handle_frontend_method"], [798, 2, 1, "", "handle_frontend_test"], [798, 2, 1, "", "handle_method"], [798, 2, 1, "", "handle_test"], [798, 2, 1, "", "num_positional_args"], [798, 2, 1, "", "num_positional_args_helper"], [798, 2, 1, "", "num_positional_args_method"], [798, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 20, 21, 30, 38, 41, 58, 60, 827, 829, 833, 834, 838, 854, 857, 867, 871, 878, 879], "ivi": [0, 4, 5, 6, 7, 12, 13, 20, 21, 30, 33, 41, 42, 43, 54, 55, 57, 58, 60, 827, 833, 835, 839, 841, 843, 846, 848, 854, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 871, 878, 879, 880, 891], "framework": [0, 8, 9, 22, 42, 48, 54, 786, 799, 827, 854, 857, 865, 885, 888, 891, 892], "librari": [0, 39, 42, 43, 58, 60, 879], "instal": [0, 4, 5, 6, 7, 20, 21, 22, 33, 54, 55, 57, 827, 871], "import": [0, 6, 7, 12, 13, 20, 21, 25, 33, 54, 55, 58, 819], "configur": [0, 848, 857, 867], "environ": [0, 834], "load": [0, 12, 13, 20, 21, 22, 25, 783, 867], "dataset": [0, 56, 58], "preview": 0, "inspect": [0, 823], "end": [0, 58], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 857], "transact": 0, "class": [0, 119, 799, 839, 848, 856, 866], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 20, 21, 22, 25, 33, 42, 54, 65, 88, 119, 381, 641, 656, 763, 764, 765, 766, 844, 856, 859, 867, 870], "analysi": 0, "statist": [0, 81, 104, 398, 658], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 22, 25], "metric": [0, 25, 58], "under": 0, "sampl": [0, 55], "balanc": [0, 862], "creat": [0, 1, 54, 55, 833], "split": [0, 722], "featur": [0, 859], "target": [0, 54], "train": [0, 22, 25, 54, 56, 58], "test": [0, 25, 56, 787, 797, 798, 801, 833, 834, 835, 838, 843, 849, 857, 859], "set": [0, 8, 9, 20, 21, 22, 50, 54, 55, 79, 102, 395, 656, 834, 840, 849, 861, 871], "convert": [0, 8, 9, 10, 11, 22, 803, 827, 869], "arrai": [0, 113, 116, 138, 397, 790, 838, 839, 843, 851, 866, 875, 878, 882], "displai": [0, 59], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 20, 21], "function": [0, 12, 13, 33, 42, 43, 54, 55, 56, 58, 60, 120, 787, 833, 842, 844, 845, 848, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 864, 869, 870, 879], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 66, 89, 382, 642, 845, 851, 856], "mode": [0, 50, 844, 848, 861], "xgboost": [0, 25], "classifi": [0, 20, 21], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 40, 41, 42, 43, 54, 55, 56, 57, 58, 60, 869, 870], "time": [0, 25], "base": [0, 85, 107, 117], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 843, 854, 856, 876], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 862, 875, 882, 891], "classif": [0, 6, 7], "report": 0, "evalu": [0, 25], "ivyclassifi": 0, "xgbclassifi": [0, 25], "visual": [0, 22, 59], "comparison": [0, 25, 867], "demo": [1, 3, 4, 5, 6, 7, 31, 42, 56, 57], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 20, 21, 25, 31, 50, 846, 851, 854, 857, 859, 862, 878, 879, 880], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 20, 21, 853], "torch": [4, 5, 6, 7, 12, 13, 20, 21, 50, 57, 885, 886], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 22, 25, 29, 50, 57, 58, 59, 885], "jax": [4, 5, 6, 7, 12, 13, 18, 19, 23, 24, 25, 50, 57, 885], "appendix": [4, 5, 12, 13], "code": [4, 5, 33, 34, 35, 36, 43, 54, 827, 850, 858, 860], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 808, 844, 845, 868, 879], "sequenc": [6, 7, 851], "your": [8, 9, 12, 13, 20, 21, 22, 835, 859], "pytorch": [8, 9, 10, 11, 22, 23, 24, 25, 27, 56, 885], "project": [8, 9, 22], "incompat": [8, 9, 22], "transpil": [8, 9, 10, 11, 22, 27, 28, 29, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 56, 60, 869, 871, 879], "about": [8, 9, 10, 11, 22, 54], "up": [8, 9, 22, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 56, 834, 849, 858, 871], "sourc": [8, 9, 22, 871], "from": [8, 9, 10, 11, 22, 50, 57, 871], "result": [8, 9, 10, 11, 22, 55], "fine": [8, 9, 10, 11, 22], "tune": [8, 9, 10, 11, 22], "conclus": [8, 9, 10, 11, 22], "how": [10, 11, 38, 827, 833, 841, 849, 858, 859], "To": [10, 11, 60, 835], "paddlepaddl": [10, 11], "imag": [12, 13, 20, 21, 22, 71, 94, 264, 829, 841], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 839, 841, 854, 858, 867, 870], "preprocess": [12, 13], "visualis": [12, 13, 20, 21], "initi": [12, 13, 20, 21, 805, 868], "nativ": [12, 13, 20, 21, 839, 862], "pretrain": [12, 13, 20, 21], "weight": [12, 13, 20, 21, 867], "mask": [12, 13], "backend": [12, 13, 25, 33, 42, 54, 55, 57, 58, 813, 816, 833, 840, 844, 854, 860, 864, 870], "acceler": [18, 19, 23, 24, 25], "mmpretrain": [18, 19], "resnet": [20, 21, 22, 61], "label": [20, 21], "resnet34": [20, 21], "resnet50": [20, 21], "few": 22, "pre": [22, 834, 850], "xgb_frontend": 25, "xgb": 25, "more": [25, 834, 862, 876], "exhaust": 25, "v": [25, 37, 47, 50, 850, 870, 875, 878], "number": [25, 793, 851], "boost": 25, "round": [25, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 56, 294, 858], "fraction": 25, "guid": [26, 31], "build": [27, 28, 29, 58, 829, 841, 864], "top": [27, 28, 29, 836, 843, 893], "haiku": 28, "develop": 30, "convolut": 30, "network": [30, 55, 58, 867, 869], "tutori": [31, 58], "And": 31, "learn": [31, 32, 827, 885], "basic": [31, 32, 54, 55, 835, 856], "write": [33, 41, 856, 859], "content": [33, 56], "handler": [33, 42, 815, 816, 864], "structur": [33, 42, 841, 854, 870], "api": [33, 42, 43, 833, 838, 842, 843, 854, 860, 864, 866, 868, 869, 871, 875, 878, 879, 880, 882, 889, 891], "state": [33, 42, 43, 868, 870, 878], "unifi": [34, 37, 38, 44, 47, 48, 49, 54, 866, 876, 880, 887, 891], "trace": [35, 37, 38, 43, 702, 848], "lazi": [37, 47, 878], "eager": [37, 47, 878], "decor": [38, 49, 818, 848, 853, 859], "ani": [39, 40, 42, 43, 782], "odsc": 42, "graph": [42, 59, 886, 891], "tracer": [42, 864, 869, 871, 878, 886, 891], "quickstart": 43, "get": [43, 827, 835, 871], "familiar": 43, "0": [44, 45, 46, 47, 51, 52], "1": [45, 47, 48, 49, 50, 53, 60, 885], "compil": [45, 47, 48, 49, 55, 878, 883, 888, 890, 891], "2": [46, 49, 51, 60, 885], "select": 48, "As": 49, "3": [50, 52, 53, 60], "dynam": [50, 58, 819, 840, 870], "static": 50, "todo": [50, 835], "explain": 50, "via": 50, "why": [50, 859, 876], "i": [50, 841, 862], "true": 50, "default": [50, 555], "when": 50, "numpi": [50, 57, 856, 885], "fals": 50, "kornia": 51, "perceiv": 52, "stabl": 53, "diffus": 53, "oper": [54, 851, 861, 866, 870], "ml": [54, 874, 887, 891], "chang": 54, "one": 54, "line": [54, 835], "No": [54, 834, 876], "need": [54, 859], "worri": 54, "type": [54, 65, 88, 381, 641, 844, 852, 856, 870], "differ": 54, "them": 54, "all": [54, 781], "standalon": [54, 852], "defin": [54, 55, 56, 58], "optim": [54, 810, 868], "input": [54, 55, 851], "loss": [54, 74, 97, 388, 649, 807], "loop": [54, 58], "check": [55, 850, 870], "simpl": 55, "neural": 55, "deepmind": [56, 57], "": [56, 58, 833, 841, 858, 871], "perceiverio": [56, 57], "tabl": [56, 841, 844, 882], "construct": [56, 867], "some": 56, "helper": [56, 789, 790, 791, 792, 793, 795, 798, 804, 814, 821, 857, 859, 860], "pipelin": [56, 58, 795, 841, 843, 859, 870], "download": 56, "dataload": 56, "gpu": [57, 870], "introduct": [57, 60, 856, 857], "python3": 57, "8": 57, "setup": [57, 850], "kernel": 57, "clone": [57, 834, 843], "repo": [57, 834], "ivy_model": 57, "run": [57, 835, 838, 841, 849, 859], "let": 58, "we": [58, 859], "ar": 58, "mnist": 58, "thi": 58, "temporari": 58, "loader": 58, "util": [58, 82, 105, 399, 659, 800, 818], "plot": 58, "save": [58, 784, 867], "huggingfac": 59, "deit": 59, "can": 59, "html": 59, "file": 59, "browser": [59, 835], "interfac": 60, "telemetri": 60, "18": 61, "activ": [62, 84, 378, 637, 802], "convers": [63, 86, 853], "creation": [64, 87, 380, 640], "elementwis": [67, 90, 118, 383, 643], "experiment": [68, 91, 644, 833], "gener": [69, 92, 384, 645, 792, 854, 859, 862, 878], "gradient": [70, 93, 360, 385, 646, 854], "layer": [72, 95, 386, 647, 806], "linear": [73, 96, 387, 648, 671], "algebra": [73, 96, 387, 648], "manipul": [75, 98, 389, 650], "norm": [76, 99, 392, 653, 809], "random": [77, 100, 393, 654], "search": [78, 101, 394, 655], "sort": [80, 103, 396, 657, 770], "wrap": [83, 106, 853], "cp": 108, "tensor": [108, 109, 110, 111, 112, 115], "parafac2": 109, "tr": 110, "tt": 111, "tucker": [112, 462], "contain": [114, 835, 842, 867], "factor": 115, "nest": [116, 391, 652], "gelu": 121, "hardswish": 122, "leaky_relu": 123, "log_softmax": 124, "mish": 125, "relu": 126, "sigmoid": 127, "softmax": 128, "softplu": 129, "softsign": 130, "cmp_i": 131, "cmp_isnot": 132, "for_loop": 133, "if_els": 134, "try_except": 135, "while_loop": 136, "arang": 137, "asarrai": 139, "copy_arrai": 140, "empti": 141, "empty_lik": 142, "ey": 143, "from_dlpack": 144, "note": [144, 155, 640], "frombuff": 145, "full": [146, 857], "full_lik": 147, "linspac": 148, "logspac": 149, "meshgrid": 150, "native_arrai": 151, "one_hot": 152, "ones": 153, "ones_lik": 154, "to_dlpack": 155, "tril": 156, "triu": 157, "triu_indic": 158, "zero": 159, "zeros_lik": 160, "as_ivy_dtyp": 161, "as_native_dtyp": 162, "astyp": 163, "broadcast_arrai": 164, "broadcast_to": 165, "can_cast": 166, "check_float": 167, "closest_valid_dtyp": 168, "default_complex_dtyp": 169, "default_dtyp": 170, "default_float_dtyp": 171, "default_int_dtyp": 172, "default_uint_dtyp": 173, "dtype": [174, 791, 851], "dtype_bit": 175, "finfo": 176, "function_supported_dtyp": 177, "function_unsupported_dtyp": 178, "iinfo": 179, "infer_default_dtyp": 180, "invalid_dtyp": 181, "is_bool_dtyp": 182, "is_complex_dtyp": 183, "is_float_dtyp": 184, "is_hashable_dtyp": 185, "is_int_dtyp": 186, "is_native_dtyp": 187, "is_uint_dtyp": 188, "promote_typ": 189, "promote_types_of_input": 190, "result_typ": 191, "set_default_complex_dtyp": 192, "set_default_dtyp": 193, "set_default_float_dtyp": 194, "set_default_int_dtyp": 195, "set_default_uint_dtyp": 196, "type_promote_arrai": 197, "unset_default_complex_dtyp": 198, "unset_default_dtyp": 199, "unset_default_float_dtyp": 200, "unset_default_int_dtyp": 201, "unset_default_uint_dtyp": 202, "valid_dtyp": 203, "as_ivy_dev": 204, "as_native_dev": 205, "clear_cached_mem_on_dev": 206, "default_devic": 207, "dev": 208, "dev_util": 209, "function_supported_devic": 210, "function_unsupported_devic": 211, "get_all_ivy_arrays_on_dev": 212, "gpu_is_avail": 213, "handle_soft_device_vari": 214, "num_cpu_cor": 215, "num_gpu": 216, "num_ivy_arrays_on_dev": 217, "percent_used_mem_on_dev": 218, "print_all_ivy_arrays_on_dev": 219, "set_default_devic": 220, "set_soft_device_mod": 221, "paramet": [221, 589, 590, 595, 596, 598, 599, 642, 645, 797, 802, 861], "set_split_factor": 222, "split_factor": 223, "split_func_cal": 224, "to_devic": 225, "total_mem_on_dev": 226, "tpu_is_avail": 227, "unset_default_devic": 228, "unset_soft_device_mod": 229, "used_mem_on_dev": 230, "ab": 231, "aco": 232, "acosh": 233, "add": [234, 846, 857, 891], "angl": 235, "asin": 236, "asinh": 237, "atan": 238, "atan2": 239, "atanh": 240, "bitwise_and": 241, "bitwise_invert": 242, "bitwise_left_shift": 243, "bitwise_or": 244, "bitwise_right_shift": 245, "bitwise_xor": 246, "ceil": 247, "co": 248, "cosh": 249, "deg2rad": 250, "divid": 251, "equal": 252, "erf": 253, "exp": 254, "exp2": 255, "expm1": 256, "floor": 257, "floor_divid": 258, "fmin": 259, "fmod": 260, "gcd": 261, "greater": 262, "greater_equ": 263, "isfinit": 265, "isinf": 266, "isnan": 267, "isreal": 268, "lcm": 269, "less": 270, "less_equ": 271, "log": [272, 824, 834], "log10": 273, "log1p": 274, "log2": 275, "logaddexp": 276, "logaddexp2": 277, "logical_and": 278, "logical_not": 279, "logical_or": 280, "logical_xor": 281, "maximum": 282, "minimum": 283, "multipli": 284, "nan_to_num": 285, "neg": 286, "not_equ": 287, "posit": [288, 851], "pow": 289, "rad2deg": 290, "real": 291, "reciproc": 292, "remaind": 293, "sign": 295, "sin": 296, "sinh": 297, "sqrt": 298, "squar": 299, "subtract": 300, "tan": [301, 846, 857], "tanh": 302, "trapz": 303, "trunc": 304, "trunc_divid": 305, "celu": 306, "elu": 307, "hardshrink": 308, "hardsilu": 309, "hardtanh": 310, "logit": 311, "logsigmoid": 312, "prelu": 313, "relu6": 314, "scaled_tanh": 315, "selu": 316, "silu": 317, "softshrink": 318, "stanh": 319, "tanhshrink": 320, "threshold": 321, "thresholded_relu": 322, "blackman_window": 323, "eye_lik": 324, "hamming_window": 325, "hann_window": 326, "indic": 327, "kaiser_bessel_derived_window": 328, "kaiser_window": 329, "mel_weight_matrix": 330, "ndenumer": 331, "ndindex": 332, "polyv": 333, "random_cp": 334, "random_parafac2": 335, "random_tr": 336, "random_tt": 337, "random_tuck": 338, "tril_indic": 339, "trilu": 340, "unsorted_segment_mean": 341, "unsorted_segment_min": 342, "unsorted_segment_sum": 343, "vorbis_window": 344, "allclos": 345, "amax": 346, "amin": 347, "binar": 348, "conj": 349, "copysign": 350, "count_nonzero": 351, "diff": 352, "digamma": 353, "erfc": 354, "erfinv": 355, "fix": [356, 833, 849], "float_pow": 357, "fmax": 358, "frexp": 359, "hypot": 361, "isclos": 362, "ldexp": 363, "lerp": 364, "lgamma": 365, "modf": 366, "nansum": 367, "nextaft": 368, "signbit": 369, "sinc": 370, "sparsify_tensor": 371, "xlogi": 372, "zeta": 373, "reduc": 374, "bind_custom_gradient_funct": 375, "jvp": 376, "vjp": 377, "constant": [379, 638], "meta": [390, 651], "spars": 397, "adaptive_avg_pool1d": 400, "adaptive_avg_pool2d": 401, "adaptive_max_pool2d": 402, "adaptive_max_pool3d": 403, "area_interpol": 404, "avg_pool1d": 405, "avg_pool2d": 406, "avg_pool3d": 407, "dct": 408, "dft": 409, "dropout1d": 410, "dropout2d": 411, "dropout3d": 412, "embed": 413, "fft": 414, "fft2": 415, "generate_einsum_equ": 416, "get_interpolate_kernel": 417, "idct": 418, "ifft": 419, "ifftn": 420, "interp": 421, "interpol": 422, "max_pool1d": 423, "max_pool2d": 424, "max_pool3d": 425, "max_unpool1d": 426, "nearest_interpol": 427, "pool": 428, "reduce_window": 429, "rfft": 430, "rfftn": 431, "rnn": 432, "sliding_window": 433, "stft": 434, "adjoint": 435, "batched_out": 436, "cond": 437, "diagflat": 438, "dot": 439, "eig": [440, 683], "eigh_tridiagon": 441, "eigval": 442, "general_inner_product": 443, "higher_order_mo": 444, "initialize_tuck": 445, "khatri_rao": 446, "kron": 447, "kroneck": 448, "lu_factor": 449, "lu_solv": 450, "make_svd_non_neg": 451, "matrix_exp": 452, "mode_dot": 453, "multi_dot": 454, "multi_mode_dot": 455, "partial_tuck": 456, "solve_triangular": 457, "svd_flip": 458, "tensor_train": 459, "truncated_svd": 460, "tt_matrix_to_tensor": 461, "hinge_embedding_loss": 463, "huber_loss": 464, "kl_div": 465, "l1_loss": 466, "log_poisson_loss": 467, "poisson_nll_loss": 468, "smooth_l1_loss": 469, "soft_margin_loss": 470, "as_strid": 471, "associative_scan": 472, "atleast_1d": 473, "atleast_2d": 474, "atleast_3d": 475, "broadcast_shap": 476, "check_scalar": 477, "choos": 478, "column_stack": 479, "concat_from_sequ": 480, "dsplit": 481, "dstack": 482, "expand": 483, "fill_diagon": 484, "flatten": 485, "fliplr": 486, "flipud": 487, "fold": 488, "heavisid": 489, "hsplit": 490, "hstack": 491, "i0": 492, "matric": 493, "moveaxi": 494, "pad": 495, "partial_fold": 496, "partial_tensor_to_vec": 497, "partial_unfold": 498, "partial_vec_to_tensor": 499, "put_along_axi": 500, "rot90": 501, "soft_threshold": 502, "take": 503, "take_along_axi": 504, "top_k": 505, "trim_zero": 506, "unflatten": 507, "unfold": 508, "unique_consecut": 509, "vsplit": 510, "vstack": 511, "batch_norm": 512, "group_norm": 513, "instance_norm": 514, "l1_normal": 515, "l2_normal": 516, "local_response_norm": 517, "lp_normal": 518, "bernoulli": 519, "beta": 520, "dirichlet": 521, "gamma": 522, "poisson": 523, "unravel_index": 524, "invert_permut": 525, "lexsort": 526, "is_ivy_sparse_arrai": 527, "is_native_sparse_arrai": 528, "native_sparse_arrai": 529, "native_sparse_array_to_indices_values_and_shap": 530, "bincount": 531, "corrcoef": 532, "cov": 533, "cummax": 534, "cummin": 535, "histogram": 536, "igamma": 537, "median": 538, "nanmean": 539, "nanmedian": 540, "nanmin": 541, "nanprod": 542, "quantil": 543, "optional_get_el": 544, "all_equ": 545, "arg_info": 546, "arg_nam": 547, "array_equ": 548, "assert_supports_inplac": 549, "cache_fn": 550, "clip_matrix_norm": 551, "clip_vector_norm": 552, "container_typ": 553, "current_backend_str": 554, "einops_rearrang": 556, "einops_reduc": 557, "einops_repeat": 558, "exist": [559, 829, 858], "fourier_encod": 560, "function_supported_devices_and_dtyp": 561, "function_unsupported_devices_and_dtyp": 562, "gather": 563, "gather_nd": 564, "get_all_arrays_in_memori": 565, "get_item": 566, "get_num_dim": 567, "get_referrers_recurs": 568, "has_nan": 569, "inplace_arrays_support": 570, "inplace_decr": 571, "inplace_incr": 572, "inplace_upd": 573, "inplace_variables_support": 574, "is_arrai": 575, "is_ivy_arrai": 576, "is_ivy_contain": 577, "is_ivy_nested_arrai": 578, "is_native_arrai": 579, "isin": 580, "isscalar": 581, "items": 582, "match_kwarg": 583, "multiprocess": [584, 794], "num_arrays_in_memori": 585, "print_all_arrays_in_memori": 586, "scatter_flat": 587, "scatter_nd": 588, "set_array_mod": 589, "set_exception_trace_mod": 590, "set_inplace_mod": 591, "set_item": 592, "set_min_bas": 593, "set_min_denomin": 594, "set_nestable_mod": 595, "set_precise_mod": 596, "set_queue_timeout": 597, "set_shape_array_mod": 598, "set_show_func_wrapper_trace_mod": 599, "set_tmp_dir": 600, "shape": [601, 656, 763, 764, 765, 766, 853, 870], "size": [602, 870], "stable_divid": 603, "stable_pow": 604, "stride": 605, "supports_inplace_upd": 606, "to_ivy_shap": 607, "to_list": 608, "to_native_shap": 609, "to_numpi": 610, "to_scalar": 611, "try_else_non": 612, "unset_array_mod": 613, "unset_exception_trace_mod": 614, "unset_inplace_mod": 615, "unset_min_bas": 616, "unset_min_denomin": 617, "unset_nestable_mod": 618, "unset_precise_mod": 619, "unset_queue_timeout": 620, "unset_shape_array_mod": 621, "unset_show_func_wrapper_trace_mod": 622, "unset_tmp_dir": 623, "value_is_nan": 624, "vmap": 625, "adam_step": 626, "adam_upd": 627, "execute_with_gradi": [628, 854], "grad": 629, "gradient_descent_upd": 630, "jac": 631, "lamb_upd": 632, "lars_upd": 633, "optimizer_upd": 634, "stop_gradi": 635, "value_and_grad": 636, "control": [639, 870], "flow": [639, 870], "op": 639, "depend": [656, 763, 764, 765, 766], "output": [656, 763, 764, 765, 766], "conv": 660, "conv1d": 661, "conv1d_transpos": 662, "conv2d": 663, "conv2d_transpos": 664, "conv3d": 665, "conv3d_transpos": 666, "conv_general_dil": 667, "conv_general_transpos": 668, "depthwise_conv2d": 669, "dropout": 670, "lstm": 672, "lstm_updat": 673, "multi_head_attent": 674, "nm": 675, "roi_align": 676, "scaled_dot_product_attent": 677, "choleski": 678, "cross": 679, "det": 680, "diag": 681, "diagon": 682, "eigh": 684, "eigvalsh": 685, "inner": 686, "inv": 687, "matmul": 688, "matrix_norm": 689, "matrix_pow": 690, "matrix_rank": 691, "matrix_transpos": 692, "outer": 693, "pinv": 694, "qr": 695, "slogdet": 696, "solv": 697, "svd": 698, "svdval": 699, "tensordot": 700, "tensorsolv": 701, "vander": 703, "vecdot": 704, "vector_norm": 705, "vector_to_skew_symmetric_matrix": 706, "binary_cross_entropi": 707, "cross_entropi": 708, "sparse_cross_entropi": 709, "ssim_loss": 710, "wasserstein_loss_discrimin": 711, "wasserstein_loss_gener": 712, "clip": 713, "concat": 714, "constant_pad": 715, "expand_dim": 716, "flip": 717, "permute_dim": 718, "repeat": 719, "reshap": 720, "roll": [721, 846], "squeez": 723, "stack": [724, 848], "swapax": 725, "tile": 726, "unstack": 727, "zero_pad": 728, "fomaml_step": 729, "maml_step": 730, "reptile_step": 731, "all_nested_indic": 732, "copy_nest": 733, "duplicate_array_index_chain": 734, "index_nest": 735, "insert_into_nest_at_index": 736, "insert_into_nest_at_indic": 737, "map": [738, 843], "map_nest_at_index": 739, "map_nest_at_indic": 740, "multi_index_nest": 741, "nested_ani": 742, "nested_argwher": 743, "nested_map": 744, "nested_multi_map": 745, "prune_empti": 746, "prune_nest_at_index": 747, "prune_nest_at_indic": 748, "set_nest_at_index": 749, "set_nest_at_indic": 750, "layer_norm": 751, "multinomi": 752, "randint": 753, "random_norm": 754, "random_uniform": 755, "seed": 756, "shuffl": 757, "argmax": 758, "argmin": 759, "argwher": 760, "nonzero": 761, "where": [762, 833, 849], "unique_al": 763, "unique_count": 764, "unique_invers": 765, "unique_valu": 766, "argsort": 767, "msort": 768, "searchsort": 769, "cumprod": 771, "cumsum": 772, "einsum": [773, 820, 821], "max": 774, "mean": 775, "min": 776, "prod": 777, "std": 778, "sum": 779, "var": 780, "assert": [785, 812, 848], "avail": 786, "global": [788, 861], "hypothesi": [789, 834, 857, 859], "struct": 796, "flag": 797, "sequenti": 811, "ast": 814, "sub": 816, "binari": [817, 834], "parser": 820, "path": 821, "except": [822, 848, 853], "profil": 825, "verbos": 826, "machin": 827, "between": 827, "start": [827, 871], "work": [827, 858, 875, 881], "document": 827, "contribut": [827, 828, 833, 858], "commun": 827, "citat": 827, "doc": [829, 841], "docker": [829, 834, 835, 841, 871], "conveni": [829, 841, 852], "script": [829, 841], "hub": 829, "local": [829, 835, 850], "without": [829, 857], "contributor": [830, 836, 893], "reward": 830, "badg": 830, "tier": 830, "error": [831, 848, 849], "handl": [831, 839, 845, 848, 853, 870], "help": [832, 835, 849], "resourc": 832, "open": 833, "task": 833, "fail": [833, 849, 859], "frontend": [833, 840, 856, 857, 869], "place": 833, "checklist": 833, "format": [833, 850, 884, 891], "extend": [833, 859, 862], "an": [833, 854], "issu": [833, 835, 850, 871], "github": [833, 834], "templat": 833, "fork": [834, 835], "commit": [834, 835, 843, 850], "pycharm": [834, 835, 850], "virtual": 834, "miniconda": 834, "venv": 834, "interpret": 834, "window": 834, "maco": 834, "ubuntu": 834, "detail": 834, "free": 834, "wsl": 834, "codespac": 834, "The": [834, 835, 841, 854, 856, 866, 870, 875], "list": 835, "manag": 835, "who": 835, "ask": [835, 849], "With": 835, "command": 835, "pull": [835, 843], "request": [835, 843], "small": 835, "often": 835, "interact": 835, "most": 835, "out": [835, 851, 853, 855], "id": [835, 838], "program": 836, "core": [836, 893], "rise": [836, 893], "deep": 837, "dive": 837, "termin": 838, "regener": 838, "failur": 838, "skip": 838, "integr": [839, 843, 850, 858, 859], "version": [840, 860, 870], "support": [840, 844, 853, 856, 870], "builder": 841, "being": 841, "option": 841, "index": 841, "rst": 841, "partial_conf": 841, "py": 841, "prebuild": 841, "sh": 841, "extens": 841, "custom_autosummari": 841, "hide": 841, "discussion_link": 841, "skippable_funct": 841, "ivy_data": 841, "instanc": [842, 856, 857, 866], "method": [842, 856, 857, 866, 867], "special": [842, 844, 856], "nestabl": [842, 851, 852, 853], "continu": [843, 850], "push": 843, "pr": 843, "trigger": 843, "A": [843, 862], "down": 843, "view": [843, 853, 855], "store": 843, "retriev": 843, "repositori": 843, "nitti": 843, "gritti": 843, "storag": 843, "space": 843, "unifyai": 843, "determin": 843, "coverag": 843, "workflow": 843, "multipl": 843, "runner": 843, "race": 843, "condit": 843, "period": 843, "manual": 843, "dispatch": 843, "ci": 843, "dashboard": 843, "promot": [844, 856], "precis": 844, "non": [844, 862], "argument": [844, 845, 851, 853, 855, 856], "other": [844, 845], "unsupport": 844, "attribut": [844, 861], "case": [844, 867], "bug": 844, "cast": [844, 856], "superset": [844, 862], "docstr": [846, 847], "func_wrapp": 848, "prune": 848, "handle_except": 848, "consist": [848, 859], "prerequir": 849, "common": [849, 850], "lint": [850, 858], "keyword": 851, "integ": 851, "primari": 852, "composit": 852, "mix": [852, 853, 859], "partial": [852, 853, 859], "order": 853, "wrapper": [853, 891, 892], "miscellan": 853, "overview": [854, 858], "usag": [854, 858, 862, 880], "signatur": 854, "design": [854, 860, 863], "our": 854, "polici": [854, 856], "specif": [854, 889, 890, 891], "consider": 854, "inplac": 855, "updat": 855, "copi": 855, "short": 856, "unus": 856, "rule": 856, "duplic": [856, 862], "alia": 857, "formatt": 858, "functionorderingformatt": 858, "own": 859, "strategi": 859, "ad": 859, "explicit": 859, "do": [859, 875], "effect": 859, "bonu": 859, "self": 859, "test_array_funct": 859, "re": [859, 876], "navig": 860, "categor": 860, "submodul": 860, "unpin": 860, "properti": 861, "getter": 861, "setter": 861, "set_": 861, "unset_": 861, "behaviour": 862, "what": [862, 891], "effici": 862, "maxim": 862, "block": 864, "monkei": 866, "patch": 866, "represent": 867, "recurs": 867, "built": 867, "ins": 867, "access": 867, "compartment": 867, "role": 869, "faq": 870, "maintain": 870, "deploy": 870, "auto": 870, "differenti": 870, "replica": 870, "parallel": 870, "altern": 870, "pip": 871, "folder": 871, "kei": 871, "question": 871, "glossari": 872, "motiv": 873, "explos": 874, "skeptic": 875, "complimentari": 875, "competit": 875, "infinit": 876, "shelf": 876, "life": 876, "One": 877, "liner": 877, "trace_graph": 878, "cach": 878, "sharp": [878, 879, 880], "bit": [878, 879, 880], "relat": 881, "infrastructur": [883, 891], "llvm": 883, "mlir": 883, "oneapi": 883, "exchang": [884, 891], "onnx": 884, "nnef": 884, "coreml": 884, "matlab": 885, "scipi": 885, "scikit": 885, "theano": 885, "panda": 885, "julia": 885, "apach": [885, 888], "spark": 885, "mllib": 885, "caff": 885, "chainer": 885, "mxnet": 885, "cntk": 885, "flux": 885, "dex": 885, "languag": 885, "tf": 886, "jaxpr": 886, "jit": 886, "fx": 886, "compani": [887, 891], "quansight": 887, "modular": 887, "octoml": 887, "multi": [888, 891], "vendor": [888, 889, 890, 891], "tvm": 888, "xla": 888, "gcc": 888, "tensorrt": 889, "cuda": 889, "icc": 890, "icx": 890, "nvcc": 890, "doe": 891, "eagerpi": 892, "kera": 892, "thinc": 892, "tensorli": 892, "neuropod": 892, "leaderboard": 893}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"invalid_dtype": [[181, "invalid-dtype"]], "default_complex_dtype": [[169, "default-complex-dtype"]], "dtype_bits": [[175, "dtype-bits"]], "triu_indices": [[158, "triu-indices"]], "zeros_like": [[160, "zeros-like"]], "function_supported_dtypes": [[177, "function-supported-dtypes"]], "empty": [[141, "empty"]], "default_float_dtype": [[171, "default-float-dtype"]], "function_unsupported_dtypes": [[178, "function-unsupported-dtypes"]], "one_hot": [[152, "one-hot"]], "logspace": [[149, "logspace"]], "to_dlpack": [[155, "to-dlpack"]], "Note": [[155, null], [144, null], [640, null], [640, null]], "linspace": [[148, "linspace"]], "native_array": [[151, "native-array"]], "frombuffer": [[145, "frombuffer"]], "meshgrid": [[150, "meshgrid"]], "astype": [[163, "astype"]], "iinfo": [[179, "iinfo"]], "is_int_dtype": [[186, "is-int-dtype"]], "broadcast_arrays": [[164, "broadcast-arrays"]], "finfo": [[176, "finfo"]], "is_float_dtype": [[184, "is-float-dtype"]], "can_cast": [[166, "can-cast"]], "infer_default_dtype": [[180, "infer-default-dtype"]], "broadcast_to": [[165, "broadcast-to"]], "default_int_dtype": [[172, "default-int-dtype"]], "is_bool_dtype": [[182, "is-bool-dtype"]], "dtype": [[174, "dtype"]], "ones_like": [[154, "ones-like"]], "as_ivy_dtype": [[161, "as-ivy-dtype"]], "eye": [[143, "eye"]], "is_native_dtype": [[187, "is-native-dtype"]], "default_uint_dtype": [[173, "default-uint-dtype"]], "triu": [[157, "triu"]], "zeros": [[159, "zeros"]], "from_dlpack": [[144, "from-dlpack"]], "full_like": [[147, "full-like"]], "check_float": [[167, "check-float"]], "is_complex_dtype": [[183, "is-complex-dtype"]], "full": [[146, "full"]], "default_dtype": [[170, "default-dtype"]], "empty_like": [[142, "empty-like"]], "as_native_dtype": [[162, "as-native-dtype"]], "is_hashable_dtype": [[185, "is-hashable-dtype"]], "ones": [[153, "ones"]], "closest_valid_dtype": [[168, "closest-valid-dtype"]], "tril": [[156, "tril"]], "Contributor Leaderboard": [[893, "contributor-leaderboard"]], "Top Contributors": [[893, "top-contributors"]], "Rising Contributors": [[893, "rising-contributors"]], "Core Contributors": [[893, "core-contributors"]], "Contributors": [[893, "contributors"]], "Function Arguments": [[851, "function-arguments"]], "Examples": [[851, "examples"], [880, "examples"], [878, "examples"], [879, "examples"]], "Positional and Keyword Arguments": [[851, "positional-and-keyword-arguments"]], "Input Arrays": [[851, "input-arrays"]], "out Argument": [[851, "out-argument"]], "dtype and device arguments": [[851, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[851, "numbers-in-operator-functions"]], "Integer Sequences": [[851, "integer-sequences"]], "Nestable Functions": [[851, "nestable-functions"], [852, "nestable-functions"], [842, "nestable-functions"]], "Ivy as a Framework": [[865, "ivy-as-a-framework"], [42, "Ivy-as-a-Framework"]], "Glossary": [[872, "glossary"]], "Function Wrapping": [[853, "function-wrapping"]], "Decorator order": [[853, "decorator-order"]], "Conversion Wrappers": [[853, "conversion-wrappers"]], "Inference Wrappers": [[853, "inference-wrappers"]], "Out Argument Support": [[853, "out-argument-support"]], "Nestable Support": [[853, "nestable-support"]], "Partial Mixed Function Support": [[853, "partial-mixed-function-support"]], "Shape Conversion": [[853, "shape-conversion"]], "View Handling": [[853, "view-handling"]], "Exception Handling": [[853, "exception-handling"], [848, "exception-handling"]], "Miscellaneous Wrappers": [[853, "miscellaneous-wrappers"]], "One liners": [[877, "one-liners"]], "Ivy Array": [[866, "ivy-array"], [839, "ivy-array"]], "The Array Class": [[866, "the-array-class"]], "Unifying Operators": [[866, "unifying-operators"]], "API Monkey Patching": [[866, "api-monkey-patching"]], "Instance Methods": [[866, "instance-methods"]], "Docstrings": [[847, "docstrings"]], "Ivy as a Transpiler": [[869, "ivy-as-a-transpiler"], [42, "Ivy-as-a-Transpiler"], [43, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[869, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[869, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[869, "converting-network-models"]], "Vendor-Specific APIs": [[889, "vendor-specific-apis"], [891, "vendor-specific-apis"]], "TensorRT tensorrt": [[889, "tensorrt-tensorrt"]], "CUDA cuda": [[889, "cuda-cuda"]], "Frameworks": [[885, "frameworks"], [891, "frameworks"]], "MATLAB matlab": [[885, "matlab-matlab"]], "SciPy scipy": [[885, "scipy-scipy"]], "Torch torch": [[885, "torch-torch"]], "NumPy numpy": [[885, "numpy-numpy"]], "SciKit Learn scikit-learn": [[885, "scikit-learn-scikit-learn"]], "Theano theano": [[885, "theano-theano"]], "Pandas pandas": [[885, "pandas-pandas"]], "Julia julia": [[885, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[885, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[885, "caffe-caffe"]], "Chainer chainer": [[885, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[885, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[885, "mxnet-mxnet"]], "CNTK cntk": [[885, "cntk-cntk"]], "PyTorch pytorch": [[885, "pytorch-pytorch"]], "Flux flux": [[885, "flux-flux"]], "JAX jax": [[885, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[885, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[885, "dex-language-dex-language"]], "Graph Tracers": [[886, "graph-tracers"], [891, "graph-tracers"]], "tf.Graph": [[886, "tf-graph"]], "Jaxpr": [[886, "jaxpr"]], "torch.jit": [[886, "torch-jit"]], "torch.fx": [[886, "torch-fx"]], "Motivation": [[873, "motivation"]], "Why Unify?": [[876, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[876, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[876, "infinite-shelf-life"]], "Wrapper Frameworks": [[892, "wrapper-frameworks"], [891, "wrapper-frameworks"]], "EagerPy eagerpy": [[892, "eagerpy-eagerpy"]], "Keras keras": [[892, "keras-keras"]], "Thinc thinc": [[892, "thinc-thinc"]], "TensorLy tensorly": [[892, "tensorly-tensorly"]], "NeuroPod": [[892, "id1"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[858, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[858, "overview"], [854, "overview"]], "Existing Formatters": [[858, "existing-formatters"]], "FunctionOrderingFormatter": [[858, "functionorderingformatter"]], "How the Formatter Works:": [[858, "how-the-formatter-works"]], "Integration and Usage": [[858, "integration-and-usage"]], "Contribution": [[858, "contribution"]], "Round Up": [[858, "round-up"], [44, "Round-Up"], [29, "Round-Up"], [36, "Round-Up"], [39, "Round-Up"], [37, "Round-Up"], [45, "Round-Up"], [38, "Round-Up"], [43, "Round-Up"], [35, "Round-Up"], [33, "Round-Up"], [27, "Round-Up"], [34, "Round-Up"], [46, "Round-Up"], [49, "Round-Up"], [48, "Round-Up"], [56, "Round-Up"], [47, "Round-Up"]], "Navigating the Code": [[860, "navigating-the-code"]], "Categorization": [[860, "categorization"]], "Submodule Design": [[860, "submodule-design"]], "Ivy API": [[860, "ivy-api"]], "Backend API": [[860, "backend-api"]], "Submodule Helper Functions": [[860, "submodule-helper-functions"]], "Version Unpinning": [[860, "version-unpinning"]], "Standardization": [[875, "standardization"]], "Skepticism": [[875, "skepticism"]], "Complimentary vs Competitive": [[875, "complimentary-vs-competitive"]], "Do Standards Work?": [[875, "do-standards-work"]], "The Array API Standard": [[875, "the-array-api-standard"]], "Operating Modes": [[861, "operating-modes"]], "Global Parameter Properties": [[861, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[861, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[861, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Multi-Vendor Compiler Frameworks": [[888, "multi-vendor-compiler-frameworks"], [891, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[888, "apache-tvm"]], "XLA": [[888, "xla"]], "GCC": [[888, "gcc"]], "Get Started": [[871, "get-started"]], "Installing using pip": [[871, "installing-using-pip"]], "Docker": [[871, "docker"]], "Installing from source": [[871, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[871, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[871, "ivy-folder"]], "Setting Up the API key": [[871, "setting-up-the-api-key"]], "Issues and Questions": [[871, "issues-and-questions"]], "API Standards": [[882, "api-standards"], [891, "api-standards"]], "Array API Standard": [[882, "id1"]], "Table:": [[882, "table"]], "Vendor-Specific Compilers": [[890, "vendor-specific-compilers"], [891, "vendor-specific-compilers"]], "ICC": [[890, "id1"]], "ICX": [[890, "icx"]], "NVCC": [[890, "nvcc"]], "Docstring Examples": [[846, "docstring-examples"]], "ivy.tan": [[846, "ivy-tan"]], "ivy.roll": [[846, "ivy-roll"]], "ivy.add": [[846, "ivy-add"]], "Ivy Tests": [[859, "ivy-tests"], [843, "ivy-tests"]], "Testing Pipeline": [[859, "testing-pipeline"]], "Hypothesis": [[859, "id2"]], "Data Generation": [[859, "id3"]], "Writing your own strategy": [[859, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[859, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[859, "ivy-test-decorators"]], "Writing Ivy Tests": [[859, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[859, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[859, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[859, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[859, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[859, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[859, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[859, "self-consistent-and-explicit-testing"]], "test_array_function": [[859, "id5"]], "Running Ivy Tests": [[859, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[859, "re-running-failed-ivy-tests"]], "Gradients": [[854, "gradients"], [646, "gradients"], [385, "gradients"], [93, "module-ivy.data_classes.container.gradients"], [70, "module-ivy.data_classes.array.gradients"]], "Example Usage of the Gradient API": [[854, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[854, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[854, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[854, "custom-gradient-functions"]], "Design of the Gradient API": [[854, "design-of-the-gradient-api"]], "Our policy on gradients": [[854, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[854, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[854, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[854, "framework-specific-considerations"]], "Ivy Exception Class": [[848, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[848, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[848, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[848, "handle-exceptions-decorator"]], "Consistency in Errors": [[848, "consistency-in-errors"]], "Assertion Function": [[848, "assertion-function"]], "Ivy Frontend Tests": [[857, "ivy-frontend-tests"]], "Introduction": [[857, "introduction"], [856, "introduction"], [57, "Introduction"]], "Frontend Test Examples": [[857, "frontend-test-examples"]], "ivy.tan()": [[857, "ivy-tan"]], "ivy.full()": [[857, "ivy-full"]], "Testing Without Using Tests Values": [[857, "testing-without-using-tests-values"]], "Alias functions": [[857, "alias-functions"]], "Frontend Instance Method Tests": [[857, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[857, "frontend-instance-method-test-examples"]], "ivy.add()": [[857, "ivy-add"]], "Hypothesis Helpers": [[857, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[857, "frontend-framework-testing-configuration"]], "What does Ivy Add?": [[891, "what-does-ivy-add"]], "Exchange Formats": [[891, "exchange-formats"], [884, "exchange-formats"]], "Compiler Infrastructure": [[891, "compiler-infrastructure"], [883, "compiler-infrastructure"]], "ML-Unifying Companies": [[891, "ml-unifying-companies"], [887, "ml-unifying-companies"]], "Building Blocks": [[864, "building-blocks"]], "Backend Functional APIs \u2705": [[864, "backend-functional-apis"]], "Ivy Functional API \u2705": [[864, "ivy-functional-api"]], "Backend Handler \u2705": [[864, "backend-handler"]], "Tracer \ud83d\udea7": [[864, "tracer"]], "Ivy Container": [[867, "ivy-container"]], "Construction": [[867, "construction"]], "Representation": [[867, "representation"]], "Recursive Methods": [[867, "recursive-methods"]], "Built-ins": [[867, "built-ins"]], "Access": [[867, "access"]], "Saving and Loading": [[867, "saving-and-loading"]], "Comparisons": [[867, "comparisons"]], "Customized Representations": [[867, "customized-representations"]], "Use Cases": [[867, "use-cases"]], "Compartmentalization": [[867, "compartmentalization"]], "Configuration": [[867, "configuration"]], "Data loading": [[867, "data-loading"]], "Network weights": [[867, "network-weights"]], "Fix Failing Tests:": [[849, "fix-failing-tests"]], "Prerequirement:": [[849, "prerequirement"]], "Setting Up": [[849, "setting-up"], [834, "setting-up"]], "How to run tests": [[849, "how-to-run-tests"]], "Common Errors": [[849, "common-errors"]], "Where to ask for Help": [[849, "where-to-ask-for-help"]], "Function Types": [[852, "function-types"]], "Primary Functions": [[852, "primary-functions"]], "Compositional Functions": [[852, "compositional-functions"]], "Mixed Functions": [[852, "mixed-functions"]], "Partial Mixed Functions": [[852, "partial-mixed-functions"]], "Standalone Functions": [[852, "standalone-functions"]], "Convenience Functions": [[852, "convenience-functions"]], "Related Work": [[881, "related-work"]], "Quansight": [[887, "id1"]], "Modular": [[887, "id2"]], "OctoML": [[887, "id3"]], "Inplace Updates": [[855, "inplace-updates"]], "out argument": [[855, "out-argument"]], "copy argument": [[855, "copy-argument"]], "Views": [[855, "views"]], "Superset Behaviour": [[862, "superset-behaviour"]], "Extending the Standard": [[862, "extending-the-standard"]], "What is the Superset?": [[862, "what-is-the-superset"]], "A Non-Duplicate Superset": [[862, "a-non-duplicate-superset"]], "What is not the Superset?": [[862, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[862, "balancing-generalization-with-efficiency"]], "More Examples": [[862, "more-examples"]], "Maximizing Usage of Native Functionality": [[862, "maximizing-usage-of-native-functionality"]], "ONNX onnx": [[884, "onnx-onnx"]], "NNEF nnef": [[884, "nnef-nnef"]], "CoreML coreml": [[884, "coreml-coreml"]], "Formatting": [[850, "formatting"]], "Lint Checks": [[850, "lint-checks"], [850, "id2"]], "Setup Formatting Locally": [[850, "setup-formatting-locally"]], "Pre-commit": [[850, "pre-commit"]], "VS Code": [[850, "vs-code"]], "PyCharm": [[850, "pycharm"], [834, "pycharm"]], "Common Issues with Pre-Commit": [[850, "common-issues-with-pre-commit"]], "Continuous Integration": [[850, "continuous-integration"], [843, "continuous-integration"]], "Lint Formatting": [[850, "lint-formatting"]], "Design": [[863, "design"]], "ivy.unify()": [[880, "ivy-unify"]], "Unify API": [[880, "unify-api"]], "Usage": [[880, "usage"]], "Sharp bits": [[880, "sharp-bits"], [878, "sharp-bits"], [879, "sharp-bits"]], "Ivy Frontends": [[856, "ivy-frontends"]], "The Frontend Basics": [[856, "the-frontend-basics"]], "Writing Frontend Functions": [[856, "writing-frontend-functions"]], "Short Frontend Implementations": [[856, "short-frontend-implementations"]], "Unused Arguments": [[856, "unused-arguments"]], "Supported Data Types and Devices": [[856, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[856, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[856, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[856, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[856, "frontends-duplicate-policy"]], "Ivy Stateful API": [[868, "ivy-stateful-api"], [42, "Ivy-Stateful-API"], [33, "Ivy-Stateful-API"]], "Modules": [[868, "modules"]], "Initializers": [[868, "initializers"], [805, "module-ivy.stateful.initializers"]], "Optimizers": [[868, "optimizers"], [810, "module-ivy.stateful.optimizers"]], "ML Explosion": [[874, "ml-explosion"]], "ivy.trace_graph()": [[878, "ivy-trace-graph"]], "Tracer API": [[878, "tracer-api"]], "Using the tracer": [[878, "using-the-tracer"]], "Eager vs lazy Compilation": [[878, "eager-vs-lazy-compilation"]], "Array caching": [[878, "array-caching"]], "Generators": [[878, "generators"]], "Stateful": [[878, "stateful"]], "FAQ": [[870, "faq"]], "Maintaining Backend Versions": [[870, "maintaining-backend-versions"]], "Dynamic Sizes": [[870, "dynamic-sizes"]], "Type and Shape Checking": [[870, "type-and-shape-checking"]], "GPU handling": [[870, "gpu-handling"]], "Model Deployment": [[870, "model-deployment"]], "Dynamic Control Flow": [[870, "dynamic-control-flow"]], "Auto-Differentiation": [[870, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[870, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[870, "support-for-functions"]], "Alternative Data Structures": [[870, "alternative-data-structures"]], "Custom Operations": [[870, "custom-operations"]], "The Pipeline": [[870, "the-pipeline"]], "State": [[870, "state"]], "LLVM": [[883, "id1"]], "MLIR": [[883, "id2"]], "OneAPI": [[883, "id3"]], "ivy.transpile()": [[879, "ivy-transpile"]], "Transpiler API": [[879, "transpiler-api"]], "Using the transpiler": [[879, "using-the-transpiler"]], "Transpiling functions": [[879, "transpiling-functions"]], "Transpiling Libraries": [[879, "transpiling-libraries"]], "Transpiling Modules": [[879, "transpiling-modules"]], "relu": [[126, "relu"]], "Tt tensor": [[111, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Set": [[102, "module-ivy.data_classes.container.set"], [656, "set"], [395, "module-ivy.functional.ivy.experimental.set"], [79, "module-ivy.data_classes.array.set"]], "leaky_relu": [[123, "leaky-relu"]], "mish": [[125, "mish"]], "arange": [[137, "arange"]], "log_softmax": [[124, "log-softmax"]], "softmax": [[128, "softmax"]], "Data classes": [[119, "data-classes"]], "Random": [[100, "module-ivy.data_classes.container.random"], [654, "random"], [393, "random"], [77, "module-ivy.data_classes.array.random"]], "Tucker tensor": [[112, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "if_else": [[134, "if-else"]], "Linear algebra": [[96, "module-ivy.data_classes.container.linear_algebra"], [648, "linear-algebra"], [387, "linear-algebra"], [73, "module-ivy.data_classes.array.linear_algebra"]], "Parafac2 tensor": [[109, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Searching": [[101, "module-ivy.data_classes.container.searching"], [655, "searching"], [394, "searching"], [78, "module-ivy.data_classes.array.searching"]], "Sorting": [[103, "module-ivy.data_classes.container.sorting"], [657, "sorting"], [396, "sorting"], [80, "module-ivy.data_classes.array.sorting"]], "Base": [[107, "module-ivy.data_classes.factorized_tensor.base"], [117, "module-ivy.data_classes.nested_array.base"], [85, "module-ivy.data_classes.container.base"]], "gelu": [[121, "gelu"]], "try_except": [[135, "try-except"]], "Tr tensor": [[110, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Layers": [[95, "module-ivy.data_classes.container.layers"], [806, "module-ivy.stateful.layers"], [647, "layers"], [386, "layers"], [72, "module-ivy.data_classes.array.layers"]], "Losses": [[97, "module-ivy.data_classes.container.losses"], [807, "module-ivy.stateful.losses"], [649, "losses"], [388, "losses"], [74, "module-ivy.data_classes.array.losses"]], "softsign": [[130, "softsign"]], "Array": [[113, "array"]], "hardswish": [[122, "hardswish"]], "Manipulation": [[98, "module-ivy.data_classes.container.manipulation"], [650, "manipulation"], [389, "manipulation"], [75, "module-ivy.data_classes.array.manipulation"]], "Statistical": [[104, "module-ivy.data_classes.container.statistical"], [658, "statistical"], [398, "statistical"], [81, "module-ivy.data_classes.array.statistical"]], "softplus": [[129, "softplus"]], "sigmoid": [[127, "sigmoid"]], "asarray": [[139, "asarray"]], "for_loop": [[133, "for-loop"]], "Container": [[114, "container"]], "Norms": [[99, "module-ivy.data_classes.container.norms"], [809, "module-ivy.stateful.norms"], [653, "norms"], [392, "norms"], [76, "module-ivy.data_classes.array.norms"]], "Elementwise": [[118, "module-ivy.data_classes.nested_array.elementwise"], [643, "elementwise"], [383, "elementwise"], [90, "module-ivy.data_classes.container.elementwise"], [67, "module-ivy.data_classes.array.elementwise"]], "Image": [[94, "module-ivy.data_classes.container.image"], [71, "module-ivy.data_classes.array.image"]], "Nested array": [[116, "nested-array"]], "array": [[138, "array"]], "cmp_isnot": [[132, "cmp-isnot"]], "while_loop": [[136, "while-loop"]], "Cp tensor": [[108, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Utility": [[105, "module-ivy.data_classes.container.utility"], [659, "utility"], [399, "utility"], [82, "module-ivy.data_classes.array.utility"]], "Wrapping": [[106, "module-ivy.data_classes.container.wrapping"], [83, "module-ivy.data_classes.array.wrapping"]], "Functions": [[120, "functions"]], "copy_array": [[140, "copy-array"]], "Factorized tensor": [[115, "factorized-tensor"]], "cmp_is": [[131, "cmp-is"]], "Inspection": [[823, "module-ivy.utils.inspection"]], "Profiler": [[825, "module-ivy.utils.profiler"]], "Convert Machine Learning Code Between Frameworks": [[827, "convert-machine-learning-code-between-frameworks"]], "Installing ivy": [[827, "installing-ivy"]], "Getting started": [[827, "getting-started"]], "Using ivy": [[827, "using-ivy"]], "How ivy works?": [[827, "how-ivy-works"]], "Documentation": [[827, "documentation"]], "Contributing": [[827, "contributing"], [828, "contributing"]], "Community": [[827, "community"]], "Citation": [[827, "citation"]], "Forking and cloning the repo": [[834, "forking-and-cloning-the-repo"]], "Pre-Commit": [[834, "pre-commit"]], "Virtual environments - No Docker": [[834, "virtual-environments-no-docker"]], "Using miniconda": [[834, "using-miniconda"]], "Using venv": [[834, "using-venv"]], "Docker Interpreter with PyCharm": [[834, "docker-interpreter-with-pycharm"]], "Windows": [[834, "windows"], [834, "id6"]], "MacOS": [[834, "macos"]], "Ubuntu": [[834, "ubuntu"], [834, "id8"]], "Setting Up Testing in PyCharm": [[834, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[834, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[834, "setting-up-for-free"]], "WSL": [[834, "wsl"]], "GitHub Codespaces": [[834, "github-codespaces"]], "The Binaries": [[834, "the-binaries"]], "Activations": [[802, "module-ivy.stateful.activations"], [637, "activations"], [378, "activations"], [84, "module-ivy.data_classes.container.activations"], [62, "module-ivy.data_classes.array.activations"]], "Parameter": [[802, "parameter"], [802, "id1"], [596, "parameter"], [599, "parameter"], [589, "parameter"], [598, "parameter"], [590, "parameter"], [595, "parameter"], [642, "parameter"], [645, "parameter"], [645, "id1"], [645, "id2"], [645, "id3"], [645, "id4"], [645, "id5"], [221, "parameter"]], "Backend Setting": [[840, "backend-setting"]], "Dynamic Backend Setting": [[840, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[840, "backend-and-frontend-version-support"]], "Testing": [[801, "testing"], [56, "Testing"]], "The Basics": [[835, "the-basics"]], "Getting Help": [[835, "getting-help"]], "ToDo List Issues": [[835, "todo-list-issues"]], "Managing Your Fork": [[835, "managing-your-fork"]], "Who To Ask": [[835, "who-to-ask"]], "With Command Line:": [[835, "with-command-line"]], "With Browser:": [[835, "with-browser"]], "Pull Requests": [[835, "pull-requests"]], "Small Commits Often": [[835, "small-commits-often"]], "Interactive Ivy Docker Container": [[835, "interactive-ivy-docker-container"]], "Running Tests Locally": [[835, "running-tests-locally"]], "With Docker": [[835, "with-docker"]], "Getting the most out of IDE": [[835, "getting-the-most-out-of-ide"]], "with PyCharm": [[835, "with-pycharm"]], "Error Handling": [[831, "error-handling"]], "Open Tasks": [[833, "open-tasks"]], "Fixing Failing Tests": [[833, "fixing-failing-tests"]], "How to Contribute": [[833, "how-to-contribute"]], "Frontend APIs": [[833, "frontend-apis"]], "Where to place a frontend function": [[833, "where-to-place-a-frontend-function"]], "Frontend checklist": [[833, "frontend-checklist"]], "Function Formatting": [[833, "function-formatting"]], "Formatting checklist": [[833, "formatting-checklist"]], "Ivy Experimental API": [[833, "ivy-experimental-api"]], "Extending the Ivy API": [[833, "extending-the-ivy-api"]], "Where to place a backend function": [[833, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[833, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Framework classes": [[799, "framework-classes"]], "Module": [[808, "module-ivy.stateful.module"]], "Handler": [[815, "module-ivy.utils.backend.handler"]], "Decorator utils": [[818, "module-ivy.utils.decorator_utils"]], "Einsum parser": [[820, "module-ivy.utils.einsum_parser"]], "Containers": [[842, "containers"]], "Container Instance Methods": [[842, "container-instance-methods"]], "API Instance Methods": [[842, "api-instance-methods"]], "API Special Methods": [[842, "api-special-methods"]], "Logging": [[824, "module-ivy.utils.logging"]], "Data Types": [[844, "data-types"]], "Data Type Module": [[844, "data-type-module"]], "Data Type Promotion": [[844, "data-type-promotion"]], "Precise Mode": [[844, "precise-mode"]], "Precise Promotion Table": [[844, "precise-promotion-table"]], "Non-Precise Promotion Table": [[844, "non-precise-promotion-table"]], "Arguments in other Functions": [[844, "arguments-in-other-functions"], [845, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[844, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[844, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[844, "special-case"]], "Backend Data Type Bugs": [[844, "backend-data-type-bugs"]], "Data Type Casting Modes": [[844, "data-type-casting-modes"]], "Superset Data Type Support": [[844, "superset-data-type-support"]], "Dynamic import": [[819, "module-ivy.utils.dynamic_import"]], "Converters": [[803, "module-ivy.stateful.converters"]], "Contributor Rewards": [[830, "contributor-rewards"]], "Badges": [[830, "badges"]], "Badge Tiers": [[830, "badge-tiers"]], "Binaries": [[817, "module-ivy.utils.binaries"]], "Contributor Program": [[836, "contributor-program"]], "Contributor": [[836, "contributor"]], "Core Contributor": [[836, "core-contributor"]], "Rising Contributor": [[836, "rising-contributor"]], "Top Contributor": [[836, "top-contributor"]], "Building the Docs Pipeline": [[841, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[841, "how-the-doc-builder-is-being-run"]], "The convenience script": [[841, "the-convenience-script"]], "Options": [[841, "options"]], "The Docker image": [[841, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[841, "how-ivy-s-docs-is-structured"]], "index.rst": [[841, "index-rst"]], "partial_conf.py": [[841, "partial-conf-py"]], "prebuild.sh": [[841, "prebuild-sh"]], "Custom Extensions": [[841, "custom-extensions"]], "custom_autosummary": [[841, "custom-autosummary"]], ":hide-table:": [[841, "hide-table"]], "discussion_linker": [[841, "discussion-linker"]], "skippable_function": [[841, "skippable-function"]], "ivy_data": [[841, "ivy-data"]], "Array API Tests": [[838, "array-api-tests"], [843, "array-api-tests"]], "Running the Tests": [[838, "running-the-tests"]], "Using Terminal": [[838, "using-terminal"]], "Using the IDE": [[838, "using-the-ide"]], "Regenerating Test Failures": [[838, "regenerating-test-failures"]], "Test Skipping": [[838, "test-skipping"]], "Sub backend handler": [[816, "module-ivy.utils.backend.sub_backend_handler"]], "Deep Dive": [[837, "deep-dive"]], "Devices": [[845, "devices"]], "Device Module": [[845, "device-module"]], "Device handling": [[845, "device-handling"]], "Assertions": [[812, "module-ivy.utils.assertions"], [785, "module-ivy_tests.test_ivy.helpers.assertions"]], "Helpers": [[804, "module-ivy.stateful.helpers"]], "Exceptions": [[822, "module-ivy.utils.exceptions"]], "Arrays": [[839, "arrays"]], "Native Array": [[839, "native-array"]], "Array Handling": [[839, "array-handling"]], "Integrating custom classes with Ivy": [[839, "integrating-custom-classes-with-ivy"]], "Commit (Push/PR) Triggered Testing": [[843, "commit-push-pr-triggered-testing"]], "Implementation": [[843, "implementation"]], "A Top-Down View": [[843, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[843, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[843, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[843, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[843, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[843, "determine-test-coverage-workflow"]], "Multiple Runners": [[843, "multiple-runners"]], "Race Condition": [[843, "race-condition"]], "Periodic Testing": [[843, "periodic-testing"]], "Manually Dispatched Workflows": [[843, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[843, "ci-pipeline"]], "Push": [[843, "push"]], "Pull Request": [[843, "pull-request"]], "Dashboard": [[843, "dashboard"]], "Utils": [[800, "utils"]], "Helpful Resources": [[832, "helpful-resources"]], "Ast helpers": [[814, "module-ivy.utils.backend.ast_helpers"]], "Building the Docs": [[829, "building-the-docs"]], "Building the Docs using Docker": [[829, "building-the-docs-using-docker"]], "Using convenience script": [[829, "using-convenience-script"]], "Using existing image on Docker Hub": [[829, "using-existing-image-on-docker-hub"]], "Building the image locally": [[829, "building-the-image-locally"]], "Building the Docs without Docker": [[829, "building-the-docs-without-docker"]], "Backend": [[813, "backend"]], "Sequential": [[811, "module-ivy.stateful.sequential"]], "Einsum path helpers": [[821, "module-ivy.utils.einsum_path_helpers"]], "Verbosity": [[826, "module-ivy.utils.verbosity"]], "repeat": [[719, "repeat"]], "multi_index_nest": [[741, "multi-index-nest"]], "vector_norm": [[705, "vector-norm"]], "copy_nest": [[733, "copy-nest"]], "roll": [[721, "roll"]], "nested_map": [[744, "nested-map"]], "prune_empty": [[746, "prune-empty"]], "sparse_cross_entropy": [[709, "sparse-cross-entropy"]], "permute_dims": [[718, "permute-dims"]], "wasserstein_loss_generator": [[712, "wasserstein-loss-generator"]], "map_nest_at_indices": [[740, "map-nest-at-indices"]], "ssim_loss": [[710, "ssim-loss"]], "binary_cross_entropy": [[707, "binary-cross-entropy"]], "prune_nest_at_index": [[747, "prune-nest-at-index"]], "stack": [[724, "stack"]], "reshape": [[720, "reshape"]], "clip": [[713, "clip"]], "prune_nest_at_indices": [[748, "prune-nest-at-indices"]], "squeeze": [[723, "squeeze"]], "nested_argwhere": [[743, "nested-argwhere"]], "map_nest_at_index": [[739, "map-nest-at-index"]], "flip": [[717, "flip"]], "nested_multi_map": [[745, "nested-multi-map"]], "set_nest_at_indices": [[750, "set-nest-at-indices"]], "wasserstein_loss_discriminator": [[711, "wasserstein-loss-discriminator"]], "expand_dims": [[716, "expand-dims"]], "map": [[738, "map"]], "vector_to_skew_symmetric_matrix": [[706, "vector-to-skew-symmetric-matrix"]], "zero_pad": [[728, "zero-pad"]], "index_nest": [[735, "index-nest"]], "tile": [[726, "tile"]], "concat": [[714, "concat"]], "constant_pad": [[715, "constant-pad"]], "set_nest_at_index": [[749, "set-nest-at-index"]], "all_nested_indices": [[732, "all-nested-indices"]], "maml_step": [[730, "maml-step"]], "layer_norm": [[751, "layer-norm"]], "reptile_step": [[731, "reptile-step"]], "duplicate_array_index_chains": [[734, "duplicate-array-index-chains"]], "insert_into_nest_at_indices": [[737, "insert-into-nest-at-indices"]], "fomaml_step": [[729, "fomaml-step"]], "unstack": [[727, "unstack"]], "nested_any": [[742, "nested-any"]], "insert_into_nest_at_index": [[736, "insert-into-nest-at-index"]], "cross_entropy": [[708, "cross-entropy"]], "swapaxes": [[725, "swapaxes"]], "split": [[722, "split"]], "einsum": [[773, "einsum"]], "random_uniform": [[755, "random-uniform"]], "searchsorted": [[769, "searchsorted"]], "Globals": [[788, "module-ivy_tests.test_ivy.helpers.globals"]], "random_normal": [[754, "random-normal"]], "Array helpers": [[790, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "randint": [[753, "randint"]], "Pipeline helper": [[795, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "min": [[776, "min"]], "multinomial": [[752, "multinomial"]], "unique_values": [[766, "unique-values"]], "Data-dependent output shape": [[766, null], [763, null], [765, null], [764, null], [656, null], [656, null], [656, null], [656, null]], "General helpers": [[792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Dtype helpers": [[791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "shuffle": [[757, "shuffle"]], "max": [[774, "max"]], "msort": [[768, "msort"]], "Function testing": [[787, "module-ivy_tests.test_ivy.helpers.function_testing"]], "argsort": [[767, "argsort"]], "mean": [[775, "mean"]], "prod": [[777, "prod"]], "save": [[784, "save"]], "argwhere": [[760, "argwhere"]], "all": [[781, "all"]], "cumsum": [[772, "cumsum"]], "std": [[778, "std"]], "argmax": [[758, "argmax"]], "Available frameworks": [[786, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "unique_all": [[763, "unique-all"]], "Hypothesis helpers": [[789, "hypothesis-helpers"]], "Number helpers": [[793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "argmin": [[759, "argmin"]], "sum": [[779, "sum"]], "var": [[780, "var"]], "Structs": [[796, "module-ivy_tests.test_ivy.helpers.structs"]], "any": [[782, "any"]], "cumprod": [[771, "cumprod"]], "seed": [[756, "seed"]], "nonzero": [[761, "nonzero"]], "Multiprocessing": [[794, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "sort": [[770, "sort"]], "Testing helpers": [[798, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "where": [[762, "where"]], "unique_inverse": [[765, "unique-inverse"]], "unique_counts": [[764, "unique-counts"]], "load": [[783, "load"]], "Test parameter flags": [[797, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "conv_general_transpose": [[668, "conv-general-transpose"]], "matrix_norm": [[689, "matrix-norm"]], "det": [[680, "det"]], "conv2d": [[663, "conv2d"]], "qr": [[695, "qr"]], "lstm_update": [[673, "lstm-update"]], "roi_align": [[676, "roi-align"]], "conv": [[660, "conv"]], "nms": [[675, "nms"]], "dropout": [[670, "dropout"]], "svd": [[698, "svd"]], "lstm": [[672, "lstm"]], "diagonal": [[682, "diagonal"]], "eigvalsh": [[685, "eigvalsh"]], "eig": [[683, "eig"], [440, "eig"]], "tensorsolve": [[701, "tensorsolve"]], "conv1d": [[661, "conv1d"]], "inv": [[687, "inv"]], "vander": [[703, "vander"]], "conv2d_transpose": [[664, "conv2d-transpose"]], "conv3d_transpose": [[666, "conv3d-transpose"]], "svdvals": [[699, "svdvals"]], "linear": [[671, "linear"]], "tensordot": [[700, "tensordot"]], "trace": [[702, "trace"]], "matrix_rank": [[691, "matrix-rank"]], "conv_general_dilated": [[667, "conv-general-dilated"]], "cross": [[679, "cross"]], "depthwise_conv2d": [[669, "depthwise-conv2d"]], "conv1d_transpose": [[662, "conv1d-transpose"]], "matrix_power": [[690, "matrix-power"]], "eigh": [[684, "eigh"]], "matrix_transpose": [[692, "matrix-transpose"]], "solve": [[697, "solve"]], "cholesky": [[678, "cholesky"]], "scaled_dot_product_attention": [[677, "scaled-dot-product-attention"]], "outer": [[693, "outer"]], "multi_head_attention": [[674, "multi-head-attention"]], "vecdot": [[704, "vecdot"]], "pinv": [[694, "pinv"]], "slogdet": [[696, "slogdet"]], "matmul": [[688, "matmul"]], "inner": [[686, "inner"]], "diag": [[681, "diag"]], "conv3d": [[665, "conv3d"]], "set_precise_mode": [[596, "set-precise-mode"]], "set_show_func_wrapper_trace_mode": [[599, "set-show-func-wrapper-trace-mode"]], "scatter_nd": [[588, "scatter-nd"]], "set_array_mode": [[589, "set-array-mode"]], "inplace_increment": [[572, "inplace-increment"]], "is_array": [[575, "is-array"]], "to_native_shape": [[609, "to-native-shape"]], "get_item": [[566, "get-item"]], "isin": [[580, "isin"]], "is_native_array": [[579, "is-native-array"]], "inplace_arrays_supported": [[570, "inplace-arrays-supported"]], "print_all_arrays_in_memory": [[586, "print-all-arrays-in-memory"]], "shape": [[601, "shape"]], "inplace_update": [[573, "inplace-update"]], "set_shape_array_mode": [[598, "set-shape-array-mode"]], "set_exception_trace_mode": [[590, "set-exception-trace-mode"]], "set_item": [[592, "set-item"]], "to_list": [[608, "to-list"]], "set_tmp_dir": [[600, "set-tmp-dir"]], "is_ivy_container": [[577, "is-ivy-container"]], "is_ivy_array": [[576, "is-ivy-array"]], "inplace_decrement": [[571, "inplace-decrement"]], "set_min_denominator": [[594, "set-min-denominator"]], "stable_divide": [[603, "stable-divide"]], "match_kwargs": [[583, "match-kwargs"]], "isscalar": [[581, "isscalar"]], "set_nestable_mode": [[595, "set-nestable-mode"]], "gather_nd": [[564, "gather-nd"]], "supports_inplace_updates": [[606, "supports-inplace-updates"]], "num_arrays_in_memory": [[585, "num-arrays-in-memory"]], "multiprocessing": [[584, "multiprocessing"]], "to_ivy_shape": [[607, "to-ivy-shape"]], "to_numpy": [[610, "to-numpy"]], "strides": [[605, "strides"]], "has_nans": [[569, "has-nans"]], "is_ivy_nested_array": [[578, "is-ivy-nested-array"]], "stable_pow": [[604, "stable-pow"]], "get_num_dims": [[567, "get-num-dims"]], "scatter_flat": [[587, "scatter-flat"]], "set_queue_timeout": [[597, "set-queue-timeout"]], "set_min_base": [[593, "set-min-base"]], "get_all_arrays_in_memory": [[565, "get-all-arrays-in-memory"]], "size": [[602, "size"]], "itemsize": [[582, "itemsize"]], "inplace_variables_supported": [[574, "inplace-variables-supported"]], "get_referrers_recursive": [[568, "get-referrers-recursive"]], "set_inplace_mode": [[591, "set-inplace-mode"]], "gamma": [[522, "gamma"]], "einops_reduce": [[557, "einops-reduce"]], "invert_permutation": [[525, "invert-permutation"]], "native_sparse_array": [[529, "native-sparse-array"]], "nanprod": [[542, "nanprod"]], "nanmean": [[539, "nanmean"]], "all_equal": [[545, "all-equal"]], "lp_normalize": [[518, "lp-normalize"]], "optional_get_element": [[544, "optional-get-element"]], "gather": [[563, "gather"]], "arg_names": [[547, "arg-names"]], "bernoulli": [[519, "bernoulli"]], "native_sparse_array_to_indices_values_and_shape": [[530, "native-sparse-array-to-indices-values-and-shape"]], "poisson": [[523, "poisson"]], "cummin": [[535, "cummin"]], "assert_supports_inplace": [[549, "assert-supports-inplace"]], "median": [[538, "median"]], "clip_vector_norm": [[552, "clip-vector-norm"]], "container_types": [[553, "container-types"]], "default": [[555, "default"]], "bincount": [[531, "bincount"]], "unravel_index": [[524, "unravel-index"]], "einops_rearrange": [[556, "einops-rearrange"]], "quantile": [[543, "quantile"]], "exists": [[559, "exists"]], "function_supported_devices_and_dtypes": [[561, "function-supported-devices-and-dtypes"]], "is_ivy_sparse_array": [[527, "is-ivy-sparse-array"]], "local_response_norm": [[517, "local-response-norm"]], "corrcoef": [[532, "corrcoef"]], "nanmedian": [[540, "nanmedian"]], "nanmin": [[541, "nanmin"]], "fourier_encode": [[560, "fourier-encode"]], "dirichlet": [[521, "dirichlet"]], "cov": [[533, "cov"]], "arg_info": [[546, "arg-info"]], "function_unsupported_devices_and_dtypes": [[562, "function-unsupported-devices-and-dtypes"]], "lexsort": [[526, "lexsort"]], "current_backend_str": [[554, "current-backend-str"]], "array_equal": [[548, "array-equal"]], "cache_fn": [[550, "cache-fn"]], "clip_matrix_norm": [[551, "clip-matrix-norm"]], "histogram": [[536, "histogram"]], "igamma": [[537, "igamma"]], "is_native_sparse_array": [[528, "is-native-sparse-array"]], "einops_repeat": [[558, "einops-repeat"]], "cummax": [[534, "cummax"]], "beta": [[520, "beta"]], "vmap": [[625, "vmap"]], "Meta": [[651, "meta"], [390, "module-ivy.functional.ivy.experimental.meta"]], "unset_inplace_mode": [[615, "unset-inplace-mode"]], "Experimental": [[644, "experimental"], [68, "module-ivy.data_classes.array.experimental"], [91, "module-ivy.data_classes.container.experimental"]], "adam_update": [[627, "adam-update"]], "execute_with_gradients": [[628, "execute-with-gradients"]], "Device": [[642, "device"], [382, "module-ivy.functional.ivy.experimental.device"], [89, "module-ivy.data_classes.container.device"], [66, "module-ivy.data_classes.array.device"]], "unset_array_mode": [[613, "unset-array-mode"]], "Data type": [[641, "data-type"], [381, "module-ivy.functional.ivy.experimental.data_type"], [88, "module-ivy.data_classes.container.data_type"], [65, "module-ivy.data_classes.array.data_type"]], "unset_tmp_dir": [[623, "unset-tmp-dir"]], "Creation": [[640, "creation"], [380, "creation"], [64, "module-ivy.data_classes.array.creation"], [87, "module-ivy.data_classes.container.creation"]], "Nest": [[652, "nest"], [391, "module-ivy.functional.ivy.experimental.nest"]], "value_and_grad": [[636, "value-and-grad"]], "grad": [[629, "grad"]], "lamb_update": [[632, "lamb-update"]], "unset_shape_array_mode": [[621, "unset-shape-array-mode"]], "lars_update": [[633, "lars-update"]], "gradient_descent_update": [[630, "gradient-descent-update"]], "stop_gradient": [[635, "stop-gradient"]], "adam_step": [[626, "adam-step"]], "try_else_none": [[612, "try-else-none"]], "to_scalar": [[611, "to-scalar"]], "unset_queue_timeout": [[620, "unset-queue-timeout"]], "Constants": [[638, "module-ivy.functional.ivy.constants"], [379, "module-ivy.functional.ivy.experimental.constants"]], "unset_show_func_wrapper_trace_mode": [[622, "unset-show-func-wrapper-trace-mode"]], "value_is_nan": [[624, "value-is-nan"]], "General": [[645, "general"], [384, "general"], [69, "module-ivy.data_classes.array.general"], [92, "module-ivy.data_classes.container.general"]], "unset_min_base": [[616, "unset-min-base"]], "jac": [[631, "jac"]], "Control flow ops": [[639, "control-flow-ops"]], "optimizer_update": [[634, "optimizer-update"]], "unset_min_denominator": [[617, "unset-min-denominator"]], "unset_nestable_mode": [[618, "unset-nestable-mode"]], "unset_precise_mode": [[619, "unset-precise-mode"]], "unset_exception_trace_mode": [[614, "unset-exception-trace-mode"]], "moveaxis": [[494, "moveaxis"]], "group_norm": [[513, "group-norm"]], "partial_vec_to_tensor": [[499, "partial-vec-to-tensor"]], "broadcast_shapes": [[476, "broadcast-shapes"]], "associative_scan": [[472, "associative-scan"]], "atleast_2d": [[474, "atleast-2d"]], "rot90": [[501, "rot90"]], "dstack": [[482, "dstack"]], "take": [[503, "take"]], "l2_normalize": [[516, "l2-normalize"]], "partial_tensor_to_vec": [[497, "partial-tensor-to-vec"]], "fill_diagonal": [[484, "fill-diagonal"]], "fold": [[488, "fold"]], "column_stack": [[479, "column-stack"]], "hstack": [[491, "hstack"]], "unique_consecutive": [[509, "unique-consecutive"]], "take_along_axis": [[504, "take-along-axis"]], "flatten": [[485, "flatten"]], "dsplit": [[481, "dsplit"]], "fliplr": [[486, "fliplr"]], "soft_margin_loss": [[470, "soft-margin-loss"]], "i0": [[492, "i0"]], "soft_thresholding": [[502, "soft-thresholding"]], "unflatten": [[507, "unflatten"]], "partial_fold": [[496, "partial-fold"]], "hsplit": [[490, "hsplit"]], "put_along_axis": [[500, "put-along-axis"]], "expand": [[483, "expand"]], "vstack": [[511, "vstack"]], "top_k": [[505, "top-k"]], "unfold": [[508, "unfold"]], "choose": [[478, "choose"]], "trim_zeros": [[506, "trim-zeros"]], "check_scalar": [[477, "check-scalar"]], "vsplit": [[510, "vsplit"]], "l1_normalize": [[515, "l1-normalize"]], "atleast_3d": [[475, "atleast-3d"]], "as_strided": [[471, "as-strided"]], "pad": [[495, "pad"]], "atleast_1d": [[473, "atleast-1d"]], "heaviside": [[489, "heaviside"]], "instance_norm": [[514, "instance-norm"]], "batch_norm": [[512, "batch-norm"]], "flipud": [[487, "flipud"]], "concat_from_sequence": [[480, "concat-from-sequence"]], "matricize": [[493, "matricize"]], "partial_unfold": [[498, "partial-unfold"]], "batched_outer": [[436, "batched-outer"]], "tensor_train": [[459, "tensor-train"]], "max_unpool1d": [[426, "max-unpool1d"]], "adjoint": [[435, "adjoint"]], "hinge_embedding_loss": [[463, "hinge-embedding-loss"]], "poisson_nll_loss": [[468, "poisson-nll-loss"]], "svd_flip": [[458, "svd-flip"]], "huber_loss": [[464, "huber-loss"]], "tucker": [[462, "tucker"]], "lu_factor": [[449, "lu-factor"]], "max_pool3d": [[425, "max-pool3d"]], "multi_dot": [[454, "multi-dot"]], "max_pool1d": [[423, "max-pool1d"]], "general_inner_product": [[443, "general-inner-product"]], "solve_triangular": [[457, "solve-triangular"]], "smooth_l1_loss": [[469, "smooth-l1-loss"]], "rnn": [[432, "rnn"]], "l1_loss": [[466, "l1-loss"]], "lu_solve": [[450, "lu-solve"]], "initialize_tucker": [[445, "initialize-tucker"]], "pool": [[428, "pool"]], "kron": [[447, "kron"]], "kronecker": [[448, "kronecker"]], "diagflat": [[438, "diagflat"]], "max_pool2d": [[424, "max-pool2d"]], "stft": [[434, "stft"]], "mode_dot": [[453, "mode-dot"]], "kl_div": [[465, "kl-div"]], "partial_tucker": [[456, "partial-tucker"]], "make_svd_non_negative": [[451, "make-svd-non-negative"]], "multi_mode_dot": [[455, "multi-mode-dot"]], "higher_order_moment": [[444, "higher-order-moment"]], "reduce_window": [[429, "reduce-window"]], "tt_matrix_to_tensor": [[461, "tt-matrix-to-tensor"]], "nearest_interpolate": [[427, "nearest-interpolate"]], "sliding_window": [[433, "sliding-window"]], "eigvals": [[442, "eigvals"]], "khatri_rao": [[446, "khatri-rao"]], "matrix_exp": [[452, "matrix-exp"]], "log_poisson_loss": [[467, "log-poisson-loss"]], "eigh_tridiagonal": [[441, "eigh-tridiagonal"]], "rfftn": [[431, "rfftn"]], "rfft": [[430, "rfft"]], "dot": [[439, "dot"]], "cond": [[437, "cond"]], "truncated_svd": [[460, "truncated-svd"]], "unsorted_segment_sum": [[343, "unsorted-segment-sum"]], "lerp": [[364, "lerp"]], "polyval": [[333, "polyval"]], "ndenumerate": [[331, "ndenumerate"]], "modf": [[366, "modf"]], "random_parafac2": [[335, "random-parafac2"]], "mel_weight_matrix": [[330, "mel-weight-matrix"]], "random_tr": [[336, "random-tr"]], "nansum": [[367, "nansum"]], "allclose": [[345, "allclose"]], "reduce": [[374, "reduce"]], "erfc": [[354, "erfc"]], "isclose": [[362, "isclose"]], "signbit": [[369, "signbit"]], "hypot": [[361, "hypot"]], "zeta": [[373, "zeta"]], "unsorted_segment_mean": [[341, "unsorted-segment-mean"]], "ndindex": [[332, "ndindex"]], "binarizer": [[348, "binarizer"]], "frexp": [[359, "frexp"]], "sparsify_tensor": [[371, "sparsify-tensor"]], "amax": [[346, "amax"]], "bind_custom_gradient_function": [[375, "bind-custom-gradient-function"]], "conj": [[349, "conj"]], "erfinv": [[355, "erfinv"]], "fix": [[356, "fix"]], "nextafter": [[368, "nextafter"]], "random_cp": [[334, "random-cp"]], "random_tucker": [[338, "random-tucker"]], "tril_indices": [[339, "tril-indices"]], "amin": [[347, "amin"]], "count_nonzero": [[351, "count-nonzero"]], "sinc": [[370, "sinc"]], "kaiser_window": [[329, "kaiser-window"]], "vorbis_window": [[344, "vorbis-window"]], "unsorted_segment_min": [[342, "unsorted-segment-min"]], "digamma": [[353, "digamma"]], "float_power": [[357, "float-power"]], "xlogy": [[372, "xlogy"]], "ldexp": [[363, "ldexp"]], "trilu": [[340, "trilu"]], "copysign": [[350, "copysign"]], "random_tt": [[337, "random-tt"]], "fmax": [[358, "fmax"]], "lgamma": [[365, "lgamma"]], "diff": [[352, "diff"]], "gradient": [[360, "gradient"]], "ifftn": [[420, "ifftn"]], "dct": [[408, "dct"]], "dropout2d": [[411, "dropout2d"]], "adaptive_avg_pool1d": [[400, "adaptive-avg-pool1d"]], "adaptive_max_pool3d": [[403, "adaptive-max-pool3d"]], "ifft": [[419, "ifft"]], "avg_pool2d": [[406, "avg-pool2d"]], "dropout1d": [[410, "dropout1d"]], "avg_pool3d": [[407, "avg-pool3d"]], "area_interpolate": [[404, "area-interpolate"]], "dropout3d": [[412, "dropout3d"]], "avg_pool1d": [[405, "avg-pool1d"]], "get_interpolate_kernel": [[417, "get-interpolate-kernel"]], "dft": [[409, "dft"]], "adaptive_avg_pool2d": [[401, "adaptive-avg-pool2d"]], "interp": [[421, "interp"]], "vjp": [[377, "vjp"]], "jvp": [[376, "jvp"]], "Sparse array": [[397, "sparse-array"]], "interpolate": [[422, "interpolate"]], "embedding": [[413, "embedding"]], "adaptive_max_pool2d": [[402, "adaptive-max-pool2d"]], "fft2": [[415, "fft2"]], "idct": [[418, "idct"]], "generate_einsum_equation": [[416, "generate-einsum-equation"]], "fft": [[414, "fft"]], "not_equal": [[287, "not-equal"]], "sinh": [[297, "sinh"]], "subtract": [[300, "subtract"]], "thresholded_relu": [[322, "thresholded-relu"]], "tanh": [[302, "tanh"]], "silu": [[317, "silu"]], "elu": [[307, "elu"]], "rad2deg": [[290, "rad2deg"]], "minimum": [[283, "minimum"]], "threshold": [[321, "threshold"]], "hann_window": [[326, "hann-window"]], "indices": [[327, "indices"]], "hardtanh": [[310, "hardtanh"]], "real": [[291, "real"]], "celu": [[306, "celu"]], "trapz": [[303, "trapz"]], "square": [[299, "square"]], "trunc": [[304, "trunc"]], "scaled_tanh": [[315, "scaled-tanh"]], "pow": [[289, "pow"]], "logsigmoid": [[312, "logsigmoid"]], "nan_to_num": [[285, "nan-to-num"]], "multiply": [[284, "multiply"]], "logit": [[311, "logit"]], "positive": [[288, "positive"]], "hardshrink": [[308, "hardshrink"]], "eye_like": [[324, "eye-like"]], "negative": [[286, "negative"]], "reciprocal": [[292, "reciprocal"]], "sign": [[295, "sign"]], "relu6": [[314, "relu6"]], "stanh": [[319, "stanh"]], "hardsilu": [[309, "hardsilu"]], "prelu": [[313, "prelu"]], "sin": [[296, "sin"]], "blackman_window": [[323, "blackman-window"]], "hamming_window": [[325, "hamming-window"]], "maximum": [[282, "maximum"]], "tanhshrink": [[320, "tanhshrink"]], "kaiser_bessel_derived_window": [[328, "kaiser-bessel-derived-window"]], "round": [[294, "round"]], "selu": [[316, "selu"]], "softshrink": [[318, "softshrink"]], "remainder": [[293, "remainder"]], "sqrt": [[298, "sqrt"]], "trunc_divide": [[305, "trunc-divide"]], "tan": [[301, "tan"]], "isinf": [[266, "isinf"]], "floor": [[257, "floor"]], "logical_or": [[280, "logical-or"]], "bitwise_invert": [[242, "bitwise-invert"]], "logical_and": [[278, "logical-and"]], "logaddexp": [[276, "logaddexp"]], "isreal": [[268, "isreal"]], "angle": [[235, "angle"]], "log10": [[273, "log10"]], "isnan": [[267, "isnan"]], "greater": [[262, "greater"]], "bitwise_xor": [[246, "bitwise-xor"]], "lcm": [[269, "lcm"]], "deg2rad": [[250, "deg2rad"]], "log": [[272, "log"]], "equal": [[252, "equal"]], "greater_equal": [[263, "greater-equal"]], "imag": [[264, "imag"]], "bitwise_left_shift": [[243, "bitwise-left-shift"]], "logical_not": [[279, "logical-not"]], "atan": [[238, "atan"]], "isfinite": [[265, "isfinite"]], "atanh": [[240, "atanh"]], "gcd": [[261, "gcd"]], "logaddexp2": [[277, "logaddexp2"]], "log1p": [[274, "log1p"]], "asin": [[236, "asin"]], "expm1": [[256, "expm1"]], "divide": [[251, "divide"]], "bitwise_and": [[241, "bitwise-and"]], "floor_divide": [[258, "floor-divide"]], "less": [[270, "less"]], "exp2": [[255, "exp2"]], "atan2": [[239, "atan2"]], "bitwise_or": [[244, "bitwise-or"]], "cos": [[248, "cos"]], "cosh": [[249, "cosh"]], "bitwise_right_shift": [[245, "bitwise-right-shift"]], "less_equal": [[271, "less-equal"]], "asinh": [[237, "asinh"]], "fmin": [[259, "fmin"]], "log2": [[275, "log2"]], "erf": [[253, "erf"]], "exp": [[254, "exp"]], "fmod": [[260, "fmod"]], "logical_xor": [[281, "logical-xor"]], "ceil": [[247, "ceil"]], "How To Convert Models from PyTorch to PaddlePaddle": [[11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[11, "About-the-Model"], [10, "About-the-Model"]], "Transpiling the Model": [[11, "Transpiling-the-Model"], [10, "Transpiling-the-Model"]], "Comparing the results": [[11, "Comparing-the-results"], [22, "Comparing-the-results"], [9, "Comparing-the-results"], [8, "Comparing-the-results"], [10, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[11, "Fine-tuning-the-transpiled-model"], [22, "Fine-tuning-the-transpiled-model"], [9, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"], [10, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[11, "Conclusion"], [22, "Conclusion"], [9, "Conclusion"], [8, "Conclusion"], [10, "Conclusion"]], "0.0: Unify": [[44, "0.0:-Unify"]], "Ivy AlexNet demo": [[5, "Ivy-AlexNet-demo"], [4, "Ivy-AlexNet-demo"]], "Installation": [[5, "Installation"], [21, "Installation"], [22, "Installation"], [20, "Installation"], [4, "Installation"]], "Data Preparation": [[5, "Data-Preparation"], [13, "Data-Preparation"], [21, "Data-Preparation"], [20, "Data-Preparation"], [6, "Data-Preparation"], [4, "Data-Preparation"], [7, "Data-Preparation"], [12, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[5, "Ivy-AlexNet-inference-in-Torch"], [4, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[5, "TensorFlow-inference"], [4, "TensorFlow-inference"]], "JAX inference": [[5, "JAX-inference"], [4, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[5, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [4, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Accelerating MMPreTrain models with JAX": [[18, "Accelerating-MMPreTrain-models-with-JAX"], [19, "Accelerating-MMPreTrain-models-with-JAX"]], "Transpiling a Tensorflow model to build on top": [[29, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Image Segmentation with Ivy UNet": [[13, "Image-Segmentation-with-Ivy-UNet"], [12, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[13, "Imports"], [21, "Imports"], [25, "Imports"], [20, "Imports"], [12, "Imports"]], "Custom Preprocessing": [[13, "Custom-Preprocessing"], [12, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[13, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [21, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [20, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [12, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[13, "Visualise-image"], [21, "Visualise-image"], [20, "Visualise-image"], [12, "Visualise-image"]], "Model Inference": [[13, "Model-Inference"], [12, "Model-Inference"]], "Initializing Native Torch UNet": [[13, "Initializing-Native-Torch-UNet"], [12, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[13, "Custom-masking-function"], [12, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[13, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [12, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[13, "TensorFlow-backend"], [12, "TensorFlow-backend"]], "JAX": [[13, "JAX"], [12, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[13, "Appendix:-the-Ivy-native-implementation-of-UNet"], [12, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Accelerating PyTorch models with JAX": [[23, "Accelerating-PyTorch-models-with-JAX"], [24, "Accelerating-PyTorch-models-with-JAX"]], "Using Ivy ResNet": [[21, "Using-Ivy-ResNet"], [20, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[21, "Prepare-the-set-of-labels"], [20, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[21, "Model-Inference-ResNet34"], [20, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[21, "Initializing-Native-Torch-ResNet34"], [20, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[21, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [20, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[21, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [21, "id1"], [20, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [20, "id1"]], "Model Inference ResNet50": [[21, "Model-Inference-ResNet50"], [20, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[21, "Initializing-Native-Torch-ResNet50"], [20, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[21, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [20, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Transpiling a haiku model to build on top": [[28, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpile code": [[36, "Transpile-code"]], "Training PyTorch ResNet in your TensorFlow Projects": [[22, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Framework Incompatibility": [[22, "Framework-Incompatibility"], [9, "Framework-Incompatibility"], [8, "Framework-Incompatibility"]], "Transpiling a PyTorch model to TensorFlow": [[22, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "About the transpiled model": [[22, "About-the-transpiled-model"], [9, "About-the-transpiled-model"], [8, "About-the-transpiled-model"]], "Setting-up the source model": [[22, "Setting-up-the-source-model"], [9, "Setting-up-the-source-model"], [8, "Setting-up-the-source-model"]], "Load the Data": [[22, "Load-the-Data"]], "Visualize a few images": [[22, "Visualize-a-few-images"]], "Load the pre-trained model": [[22, "Load-the-pre-trained-model"]], "Converting the model from TensorFlow to PyTorch": [[22, "Converting-the-model-from-TensorFlow-to-PyTorch"], [9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [8, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "Developing a convolutional network using Ivy": [[30, "Developing-a-convolutional-network-using-Ivy"]], "Transpile any library": [[39, "Transpile-any-library"]], "Accelerating XGBoost with JAX": [[25, "Accelerating-XGBoost-with-JAX"]], "Tests": [[25, "Tests"]], "Loading the Data": [[25, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[25, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[25, "JAX-backend"]], "Tensorflow backend": [[25, "Tensorflow-backend"]], "PyTorch backend": [[25, "PyTorch-backend"]], "More exhaustive example": [[25, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[25, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[25, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[25, "Comparison-of-Metrics"]], "Examples and Demos": [[3, "examples-and-demos"], [31, "examples-and-demos"]], "Tutorials And Examples": [[31, "tutorials-and-examples"]], "Learn the basics": [[31, "learn-the-basics"], [32, "learn-the-basics"]], "Guides": [[31, "guides"], [26, "guides"]], "# Ivy Bert Demo": [[6, "#-Ivy-Bert-Demo"], [7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[6, "Install-the-dependecies"], [7, "Install-the-dependecies"]], "Import the modules": [[6, "Import-the-modules"], [7, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[6, "Ivy-inference-with-Sequence-Classification"], [7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[6, "Ivy-model-inference-with-tensorflow"], [7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[6, "Ivy-model-inference-with-Jax"], [7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[6, "Ivy-model-inference-with-torch"], [7, "Ivy-model-inference-with-torch"]], "Lazy vs Eager": [[37, "Lazy-vs-Eager"]], "Unify": [[37, "Unify"], [38, "Unify"], [49, "Unify"], [48, "Unify"], [47, "Unify"]], "Trace": [[37, "Trace"], [38, "Trace"]], "Transpile": [[37, "Transpile"], [38, "Transpile"], [49, "Transpile"], [48, "Transpile"], [47, "Transpile"]], "Using TensorFlow Models in your PyTorch Projects": [[9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Transpiling a TensorFlow model to PyTorch": [[9, "Transpiling-a-TensorFlow-model-to-PyTorch"], [8, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Importing Ivy": [[0, "Importing-Ivy"], [33, "Importing-Ivy"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "ODSC Ivy Demo": [[42, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[42, "Ivy-Backend-Handler"], [33, "Ivy-Backend-Handler"]], "Data Structures": [[42, "Data-Structures"], [33, "Data-Structures"]], "Ivy Functional API": [[42, "Ivy-Functional-API"], [33, "Ivy-Functional-API"]], "Graph Tracer": [[42, "Graph-Tracer"]], "Any function": [[42, "Any-function"], [43, "Any-function"]], "Any library": [[42, "Any-library"], [43, "Any-library"]], "Any model": [[42, "Any-model"], [43, "Any-model"]], "0.1: Compile": [[45, "0.1:-Compile"]], "How to use decorators": [[38, "How-to-use-decorators"]], "Quickstart": [[43, "Quickstart"]], "Get familiar with Ivy": [[43, "Get-familiar-with-Ivy"]], "Functional API": [[43, "Functional-API"]], "Stateful API": [[43, "Stateful-API"]], "Tracing code": [[43, "Tracing-code"]], "Trace code": [[35, "Trace-code"]], "Write Ivy code": [[33, "Write-Ivy-code"]], "Contents": [[33, "Contents"]], "Installing Ivy": [[33, "Installing-Ivy"]], "Transpile any model": [[40, "Transpile-any-model"]], "Round up": [[40, "Round-up"]], "Transpiling a PyTorch model to build on top": [[27, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Write a model using Ivy": [[41, "Write-a-model-using-Ivy"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Unify code": [[34, "Unify-code"]], "0.2: Transpile": [[46, "0.2:-Transpile"]], "as_ivy_dev": [[204, "as-ivy-dev"]], "gpu_is_available": [[213, "gpu-is-available"]], "set_default_device": [[220, "set-default-device"]], "set_default_int_dtype": [[195, "set-default-int-dtype"]], "tpu_is_available": [[227, "tpu-is-available"]], "abs": [[231, "abs"]], "acos": [[232, "acos"]], "unset_soft_device_mode": [[229, "unset-soft-device-mode"]], "function_supported_devices": [[210, "function-supported-devices"]], "unset_default_complex_dtype": [[198, "unset-default-complex-dtype"]], "num_cpu_cores": [[215, "num-cpu-cores"]], "acosh": [[233, "acosh"]], "unset_default_float_dtype": [[200, "unset-default-float-dtype"]], "unset_default_dtype": [[199, "unset-default-dtype"]], "dev_util": [[209, "dev-util"]], "split_factor": [[223, "split-factor"]], "add": [[234, "add"]], "unset_default_int_dtype": [[201, "unset-default-int-dtype"]], "promote_types_of_inputs": [[190, "promote-types-of-inputs"]], "percent_used_mem_on_dev": [[218, "percent-used-mem-on-dev"]], "clear_cached_mem_on_dev": [[206, "clear-cached-mem-on-dev"]], "num_ivy_arrays_on_dev": [[217, "num-ivy-arrays-on-dev"]], "dev": [[208, "dev"]], "type_promote_arrays": [[197, "type-promote-arrays"]], "to_device": [[225, "to-device"]], "num_gpus": [[216, "num-gpus"]], "default_device": [[207, "default-device"]], "total_mem_on_dev": [[226, "total-mem-on-dev"]], "unset_default_uint_dtype": [[202, "unset-default-uint-dtype"]], "used_mem_on_dev": [[230, "used-mem-on-dev"]], "valid_dtype": [[203, "valid-dtype"]], "get_all_ivy_arrays_on_dev": [[212, "get-all-ivy-arrays-on-dev"]], "result_type": [[191, "result-type"]], "set_default_uint_dtype": [[196, "set-default-uint-dtype"]], "function_unsupported_devices": [[211, "function-unsupported-devices"]], "set_soft_device_mode": [[221, "set-soft-device-mode"]], "set_default_dtype": [[193, "set-default-dtype"]], "set_default_complex_dtype": [[192, "set-default-complex-dtype"]], "split_func_call": [[224, "split-func-call"]], "print_all_ivy_arrays_on_dev": [[219, "print-all-ivy-arrays-on-dev"]], "is_uint_dtype": [[188, "is-uint-dtype"]], "handle_soft_device_variable": [[214, "handle-soft-device-variable"]], "unset_default_device": [[228, "unset-default-device"]], "set_split_factor": [[222, "set-split-factor"]], "as_native_dev": [[205, "as-native-dev"]], "promote_types": [[189, "promote-types"]], "set_default_float_dtype": [[194, "set-default-float-dtype"]], "Conversions": [[86, "module-ivy.data_classes.container.conversions"], [63, "module-ivy.data_classes.array.conversions"]], "3.1: Stable Diffusion": [[53, "3.1:-Stable-Diffusion"]], "1.2: As a Decorator": [[49, "1.2:-As-a-Decorator"]], "Compile": [[49, "Compile"], [48, "Compile"], [47, "Compile"]], "1.3: Dynamic vs Static": [[50, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[50, "Dynamic"]], "Static": [[50, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[50, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "1.1: Framework Selection": [[48, "1.1:-Framework-Selection"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[56, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[56, "Table-of-Contents"]], "Defining the model": [[56, "Defining-the-model"]], "Model construction": [[56, "Model-construction"]], "Some helper functions": [[56, "Some-helper-functions"]], "Transpiling the model": [[56, "Transpiling-the-model"]], "PyTorch pipeline": [[56, "PyTorch-pipeline"]], "Dataset download": [[56, "Dataset-download"]], "DataLoader": [[56, "DataLoader"]], "Training": [[56, "Training"]], "Resnet 18": [[61, "Resnet-18"]], "2.0: Kornia": [[51, "2.0:-Kornia"]], "Basic Operations with Ivy": [[54, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[54, "Installs-\ud83d\udcbe"], [55, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[54, "Imports-\ud83d\udec3"], [55, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[54, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[54, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[54, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[54, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[54, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[54, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[54, "Set-Backend-Framework"]], "Define Model": [[54, "Define-Model"], [55, "Define-Model"]], "Create Model": [[54, "Create-Model"]], "Create Optimizer": [[54, "Create-Optimizer"]], "Input and Target": [[54, "Input-and-Target"]], "Loss Function": [[54, "Loss-Function"]], "Training Loop": [[54, "Training-Loop"]], "HuggingFace Tensorflow DeiT": [[59, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[59, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "1.0: Lazy vs Eager": [[47, "1.0:-Lazy-vs-Eager"]], "Compilation of a Basic Function": [[55, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[55, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[55, "Function-compilation-\ud83d\udee0"]], "Set backend": [[55, "Set-backend"]], "Sample input": [[55, "Sample-input"]], "Define function to compile": [[55, "Define-function-to-compile"]], "Compile the function": [[55, "Compile-the-function"]], "Check results": [[55, "Check-results"], [55, "id1"]], "Compiling simple neural network \ud83e\udde0": [[55, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[55, "Create-model"]], "Define input": [[55, "Define-input"]], "Compile network": [[55, "Compile-network"]], "3.0: Perceiver": [[52, "3.0:-Perceiver"]], "End-to-End Training Pipeline in Ivy": [[58, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[58, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[58, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[58, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[58, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[58, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[58, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[58, "Plotting-the-training-metrics"]], "Save the trained Model": [[58, "Save-the-trained-Model"]], "Ivy as a Transpiler Introduction": [[60, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[60, "To-use-the-transpiler:"]], "Transpiler Interface": [[60, "Transpiler-Interface"]], "Telemetry": [[60, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[60, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[60, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[60, "3.-Transpile-Models-\ud83c\udf10"]], "Deepmind PerceiverIO on GPU": [[57, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[57, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[57, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[57, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[57, "Run-the-demo..."]], "\u2026with torch backend": [[57, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[57, "....with-tensorflow-backend"]], "\u2026with jax backend": [[57, "...with-jax-backend"]], "\u2026with numpy backend": [[57, "...with-numpy-backend"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[62, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[62, "module-ivy.data_classes.array.activations"], [63, "module-ivy.data_classes.array.conversions"], [64, "module-ivy.data_classes.array.creation"], [65, "module-ivy.data_classes.array.data_type"], [66, "module-ivy.data_classes.array.device"], [67, "module-ivy.data_classes.array.elementwise"], [68, "module-ivy.data_classes.array.experimental"], [68, "module-ivy.data_classes.array.experimental.activations"], [68, "module-ivy.data_classes.array.experimental.conversions"], [68, "module-ivy.data_classes.array.experimental.creation"], [68, "module-ivy.data_classes.array.experimental.data_type"], [68, "module-ivy.data_classes.array.experimental.device"], [68, "module-ivy.data_classes.array.experimental.elementwise"], [68, "module-ivy.data_classes.array.experimental.general"], [68, "module-ivy.data_classes.array.experimental.gradients"], [68, "module-ivy.data_classes.array.experimental.image"], [68, "module-ivy.data_classes.array.experimental.layers"], [68, "module-ivy.data_classes.array.experimental.linear_algebra"], [68, "module-ivy.data_classes.array.experimental.losses"], [68, "module-ivy.data_classes.array.experimental.manipulation"], [68, "module-ivy.data_classes.array.experimental.norms"], [68, "module-ivy.data_classes.array.experimental.random"], [68, "module-ivy.data_classes.array.experimental.searching"], [68, "module-ivy.data_classes.array.experimental.set"], [68, "module-ivy.data_classes.array.experimental.sorting"], [68, "module-ivy.data_classes.array.experimental.statistical"], [68, "module-ivy.data_classes.array.experimental.utility"], [69, "module-ivy.data_classes.array.general"], [70, "module-ivy.data_classes.array.gradients"], [71, "module-ivy.data_classes.array.image"], [72, "module-ivy.data_classes.array.layers"], [73, "module-ivy.data_classes.array.linear_algebra"], [74, "module-ivy.data_classes.array.losses"], [75, "module-ivy.data_classes.array.manipulation"], [76, "module-ivy.data_classes.array.norms"], [77, "module-ivy.data_classes.array.random"], [78, "module-ivy.data_classes.array.searching"], [79, "module-ivy.data_classes.array.set"], [80, "module-ivy.data_classes.array.sorting"], [81, "module-ivy.data_classes.array.statistical"], [82, "module-ivy.data_classes.array.utility"], [83, "module-ivy.data_classes.array.wrapping"], [84, "module-ivy.data_classes.container.activations"], [85, "module-ivy.data_classes.container.base"], [86, "module-ivy.data_classes.container.conversions"], [87, "module-ivy.data_classes.container.creation"], [88, "module-ivy.data_classes.container.data_type"], [89, "module-ivy.data_classes.container.device"], [90, "module-ivy.data_classes.container.elementwise"], [91, "module-ivy.data_classes.container.experimental"], [91, "module-ivy.data_classes.container.experimental.activations"], [91, "module-ivy.data_classes.container.experimental.conversions"], [91, "module-ivy.data_classes.container.experimental.creation"], [91, "module-ivy.data_classes.container.experimental.data_type"], [91, "module-ivy.data_classes.container.experimental.device"], [91, "module-ivy.data_classes.container.experimental.elementwise"], [91, "module-ivy.data_classes.container.experimental.general"], [91, "module-ivy.data_classes.container.experimental.gradients"], [91, "module-ivy.data_classes.container.experimental.image"], [91, "module-ivy.data_classes.container.experimental.layers"], [91, "module-ivy.data_classes.container.experimental.linear_algebra"], [91, "module-ivy.data_classes.container.experimental.losses"], [91, "module-ivy.data_classes.container.experimental.manipulation"], [91, "module-ivy.data_classes.container.experimental.norms"], [91, "module-ivy.data_classes.container.experimental.random"], [91, "module-ivy.data_classes.container.experimental.searching"], [91, "module-ivy.data_classes.container.experimental.set"], [91, "module-ivy.data_classes.container.experimental.sorting"], [91, "module-ivy.data_classes.container.experimental.statistical"], [91, "module-ivy.data_classes.container.experimental.utility"], [92, "module-ivy.data_classes.container.general"], [93, "module-ivy.data_classes.container.gradients"], [94, "module-ivy.data_classes.container.image"], [95, "module-ivy.data_classes.container.layers"], [96, "module-ivy.data_classes.container.linear_algebra"], [97, "module-ivy.data_classes.container.losses"], [98, "module-ivy.data_classes.container.manipulation"], [99, "module-ivy.data_classes.container.norms"], [100, "module-ivy.data_classes.container.random"], [101, "module-ivy.data_classes.container.searching"], [102, "module-ivy.data_classes.container.set"], [103, "module-ivy.data_classes.container.sorting"], [104, "module-ivy.data_classes.container.statistical"], [105, "module-ivy.data_classes.container.utility"], [106, "module-ivy.data_classes.container.wrapping"], [107, "module-ivy.data_classes.factorized_tensor.base"], [108, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [109, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [110, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [111, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [112, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [113, "module-ivy.data_classes.array.array"], [114, "module-ivy.data_classes.container.container"], [116, "module-ivy.data_classes.nested_array.nested_array"], [117, "module-ivy.data_classes.nested_array.base"], [118, "module-ivy.data_classes.nested_array.elementwise"], [378, "module-ivy.functional.ivy.experimental.activations"], [379, "module-ivy.functional.ivy.experimental.constants"], [380, "module-ivy.functional.ivy.experimental.creation"], [381, "module-ivy.functional.ivy.experimental.data_type"], [382, "module-ivy.functional.ivy.experimental.device"], [383, "module-ivy.functional.ivy.experimental.elementwise"], [384, "module-ivy.functional.ivy.experimental.general"], [385, "module-ivy.functional.ivy.experimental.gradients"], [386, "module-ivy.functional.ivy.experimental.layers"], [387, "module-ivy.functional.ivy.experimental.linear_algebra"], [388, "module-ivy.functional.ivy.experimental.losses"], [389, "module-ivy.functional.ivy.experimental.manipulation"], [390, "module-ivy.functional.ivy.experimental.meta"], [391, "module-ivy.functional.ivy.experimental.nest"], [392, "module-ivy.functional.ivy.experimental.norms"], [393, "module-ivy.functional.ivy.experimental.random"], [394, "module-ivy.functional.ivy.experimental.searching"], [395, "module-ivy.functional.ivy.experimental.set"], [396, "module-ivy.functional.ivy.experimental.sorting"], [397, "module-ivy.functional.ivy.experimental.sparse_array"], [398, "module-ivy.functional.ivy.experimental.statistical"], [399, "module-ivy.functional.ivy.experimental.utility"], [637, "module-ivy.functional.ivy.activations"], [638, "module-ivy.functional.ivy.constants"], [639, "module-ivy.functional.ivy.control_flow_ops"], [640, "module-ivy.functional.ivy.creation"], [641, "module-ivy.functional.ivy.data_type"], [642, "module-ivy.functional.ivy.device"], [643, "module-ivy.functional.ivy.elementwise"], [644, "module-ivy.functional.ivy.experimental"], [645, "module-ivy.functional.ivy.general"], [646, "module-ivy.functional.ivy.gradients"], [647, "module-ivy.functional.ivy.layers"], [648, "module-ivy.functional.ivy.linear_algebra"], [649, "module-ivy.functional.ivy.losses"], [650, "module-ivy.functional.ivy.manipulation"], [651, "module-ivy.functional.ivy.meta"], [652, "module-ivy.functional.ivy.nest"], [653, "module-ivy.functional.ivy.norms"], [654, "module-ivy.functional.ivy.random"], [655, "module-ivy.functional.ivy.searching"], [656, "module-ivy.functional.ivy.set"], [657, "module-ivy.functional.ivy.sorting"], [658, "module-ivy.functional.ivy.statistical"], [659, "module-ivy.functional.ivy.utility"], [785, "module-ivy_tests.test_ivy.helpers.assertions"], [786, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [787, "module-ivy_tests.test_ivy.helpers.function_testing"], [788, "module-ivy_tests.test_ivy.helpers.globals"], [789, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [790, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [794, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [795, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [796, "module-ivy_tests.test_ivy.helpers.structs"], [797, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [798, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [802, "module-ivy.stateful.activations"], [803, "module-ivy.stateful.converters"], [804, "module-ivy.stateful.helpers"], [805, "module-ivy.stateful.initializers"], [806, "module-ivy.stateful.layers"], [807, "module-ivy.stateful.losses"], [808, "module-ivy.stateful.module"], [809, "module-ivy.stateful.norms"], [810, "module-ivy.stateful.optimizers"], [811, "module-ivy.stateful.sequential"], [812, "module-ivy.utils.assertions"], [813, "module-ivy.utils.backend"], [814, "module-ivy.utils.backend.ast_helpers"], [815, "module-ivy.utils.backend.handler"], [816, "module-ivy.utils.backend.sub_backend_handler"], [817, "module-ivy.utils.binaries"], [818, "module-ivy.utils.decorator_utils"], [819, "module-ivy.utils.dynamic_import"], [820, "module-ivy.utils.einsum_parser"], [821, "module-ivy.utils.einsum_path_helpers"], [822, "module-ivy.utils.exceptions"], [823, "module-ivy.utils.inspection"], [824, "module-ivy.utils.logging"], [825, "module-ivy.utils.profiler"], [826, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[62, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[63, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[63, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[64, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[64, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[65, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[65, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[66, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[66, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[66, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[66, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[66, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[67, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[67, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[68, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[68, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[68, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[68, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[68, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[68, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[68, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[68, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[68, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[68, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[68, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[68, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[68, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[68, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[68, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[68, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[68, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[68, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[68, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[68, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[68, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[68, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[68, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[68, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[68, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[68, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[68, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[68, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[68, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[68, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[68, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[68, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[68, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[68, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[68, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[68, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[68, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[68, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[68, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[68, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[68, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[68, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[68, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[68, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[68, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[68, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[68, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[68, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[68, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[68, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[68, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[68, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[68, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[68, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[68, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[68, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[69, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[69, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[70, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[70, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[71, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[71, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[71, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[72, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[72, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[73, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[73, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[74, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[74, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[74, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[74, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[74, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[74, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[75, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[75, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[76, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[76, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[76, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[76, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[77, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[77, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[77, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[77, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[77, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[77, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[77, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[77, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[78, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[78, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[79, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[79, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[79, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[79, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[79, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[79, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[79, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[80, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[80, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[81, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[81, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[82, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[82, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[82, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[82, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[82, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[83, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[83, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[83, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[84, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[84, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[85, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[85, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[85, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[85, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[85, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[85, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[85, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[85, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[86, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[86, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[87, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[87, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[88, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[88, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[89, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[89, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[89, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[89, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[89, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[89, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[89, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[90, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[90, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[91, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[91, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[91, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[91, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[91, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[91, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[91, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[91, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[91, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[91, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[91, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[91, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[91, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[91, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[91, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[91, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[91, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[91, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[91, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[91, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[91, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[91, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[91, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[91, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[91, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[91, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[91, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[91, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[91, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[91, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[91, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[91, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[91, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[91, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[91, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[91, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[91, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[91, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[91, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[91, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[91, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[91, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[91, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[91, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[91, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[91, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[91, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[91, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[91, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[91, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[91, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[91, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[91, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[91, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[91, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[91, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[91, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[92, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[92, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[93, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[93, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[94, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[94, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[94, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[95, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[95, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[96, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[96, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[97, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[97, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[98, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[98, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[99, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[99, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[99, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[99, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[100, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[100, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[100, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[101, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[101, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[102, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[102, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[102, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[102, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[102, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[102, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[102, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[102, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[102, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[102, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[102, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[103, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[103, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[104, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[104, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[105, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[105, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[106, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[106, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[106, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[107, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[107, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[108, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[108, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[109, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[109, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[110, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[110, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[111, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[111, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[112, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[112, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[113, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[113, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[113, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[113, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[114, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[114, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[114, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[116, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[116, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[116, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[116, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[116, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[117, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[117, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[118, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[118, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[118, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[118, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[121, "ivy.gelu"], [637, "ivy.gelu"]], "gelu() (ivy.array method)": [[121, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[121, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[122, "ivy.hardswish"], [637, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[122, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[122, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[123, "ivy.leaky_relu"], [637, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[123, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[123, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[124, "ivy.log_softmax"], [637, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[124, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[124, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[125, "ivy.mish"], [637, "ivy.mish"]], "mish() (ivy.array method)": [[125, "ivy.Array.mish"]], "mish() (ivy.container method)": [[125, "ivy.Container.mish"]], "relu() (in module ivy)": [[126, "ivy.relu"], [637, "ivy.relu"]], "relu() (ivy.array method)": [[126, "ivy.Array.relu"]], "relu() (ivy.container method)": [[126, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[127, "ivy.sigmoid"], [637, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[127, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[127, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[128, "ivy.softmax"], [637, "ivy.softmax"]], "softmax() (ivy.array method)": [[128, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[128, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[129, "ivy.softplus"], [637, "ivy.softplus"]], "softplus() (ivy.array method)": [[129, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[129, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[130, "ivy.softsign"], [637, "ivy.softsign"]], "cmp_is() (in module ivy)": [[131, "ivy.cmp_is"], [639, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[132, "ivy.cmp_isnot"], [639, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[133, "ivy.for_loop"], [639, "ivy.for_loop"]], "if_else() (in module ivy)": [[134, "ivy.if_else"], [639, "ivy.if_else"]], "try_except() (in module ivy)": [[135, "ivy.try_except"], [639, "ivy.try_except"]], "while_loop() (in module ivy)": [[136, "ivy.while_loop"], [639, "ivy.while_loop"]], "arange() (in module ivy)": [[137, "ivy.arange"], [640, "ivy.arange"]], "array() (in module ivy)": [[138, "ivy.array"], [640, "ivy.array"]], "asarray() (in module ivy)": [[139, "ivy.asarray"], [640, "ivy.asarray"]], "asarray() (ivy.array method)": [[139, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[139, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[140, "ivy.copy_array"], [640, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[140, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[140, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[141, "ivy.empty"], [640, "ivy.empty"]], "empty_like() (in module ivy)": [[142, "ivy.empty_like"], [640, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[142, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[142, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[143, "ivy.eye"], [640, "ivy.eye"]], "from_dlpack() (in module ivy)": [[144, "ivy.from_dlpack"], [640, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[144, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[144, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[145, "ivy.frombuffer"], [640, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[145, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[146, "ivy.full"], [640, "ivy.full"]], "full_like() (in module ivy)": [[147, "ivy.full_like"], [640, "ivy.full_like"]], "full_like() (ivy.array method)": [[147, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[147, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[148, "ivy.linspace"], [640, "ivy.linspace"]], "linspace() (ivy.array method)": [[148, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[148, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[149, "ivy.logspace"], [640, "ivy.logspace"]], "logspace() (ivy.array method)": [[149, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[149, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[150, "ivy.meshgrid"], [640, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[150, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[150, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[151, "ivy.native_array"], [640, "ivy.native_array"]], "native_array() (ivy.array method)": [[151, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[151, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[152, "ivy.one_hot"], [640, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[152, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[152, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[153, "ivy.ones"], [640, "ivy.ones"]], "ones_like() (in module ivy)": [[154, "ivy.ones_like"], [640, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[154, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[154, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[155, "ivy.to_dlpack"], [640, "ivy.to_dlpack"]], "tril() (in module ivy)": [[156, "ivy.tril"], [640, "ivy.tril"]], "tril() (ivy.array method)": [[156, "ivy.Array.tril"]], "tril() (ivy.container method)": [[156, "ivy.Container.tril"]], "triu() (in module ivy)": [[157, "ivy.triu"], [640, "ivy.triu"]], "triu() (ivy.array method)": [[157, "ivy.Array.triu"]], "triu() (ivy.container method)": [[157, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[158, "ivy.triu_indices"], [640, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[158, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[159, "ivy.zeros"], [640, "ivy.zeros"]], "zeros_like() (in module ivy)": [[160, "ivy.zeros_like"], [640, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[160, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[160, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[161, "ivy.as_ivy_dtype"], [641, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[162, "ivy.as_native_dtype"], [641, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[163, "ivy.astype"], [641, "ivy.astype"]], "astype() (ivy.array method)": [[163, "ivy.Array.astype"]], "astype() (ivy.container method)": [[163, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[164, "ivy.broadcast_arrays"], [641, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[164, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[164, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[165, "ivy.broadcast_to"], [641, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[165, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[165, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[166, "ivy.can_cast"], [641, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[166, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[166, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[167, "ivy.check_float"], [641, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[168, "ivy.closest_valid_dtype"], [641, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[169, "ivy.default_complex_dtype"], [641, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[170, "ivy.default_dtype"], [641, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[171, "ivy.default_float_dtype"], [641, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[172, "ivy.default_int_dtype"], [641, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[173, "ivy.default_uint_dtype"], [641, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[174, "ivy.dtype"], [641, "ivy.dtype"]], "dtype() (ivy.array method)": [[174, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[174, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[175, "ivy.dtype_bits"], [641, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[176, "ivy.finfo"], [641, "ivy.finfo"]], "finfo() (ivy.array method)": [[176, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[176, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[177, "ivy.function_supported_dtypes"], [641, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[178, "ivy.function_unsupported_dtypes"], [641, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[179, "ivy.iinfo"], [641, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[179, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[179, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[180, "ivy.infer_default_dtype"], [641, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[181, "ivy.invalid_dtype"], [641, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[182, "ivy.is_bool_dtype"], [641, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[182, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[182, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[183, "ivy.is_complex_dtype"], [641, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[183, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[184, "ivy.is_float_dtype"], [641, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[184, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[184, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[185, "ivy.is_hashable_dtype"], [641, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[186, "ivy.is_int_dtype"], [641, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[186, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[186, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[187, "ivy.is_native_dtype"], [641, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[188, "ivy.is_uint_dtype"], [641, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[188, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[188, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[189, "ivy.promote_types"], [641, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[190, "ivy.promote_types_of_inputs"], [641, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[191, "ivy.result_type"], [641, "ivy.result_type"]], "result_type() (ivy.array method)": [[191, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[191, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[192, "ivy.set_default_complex_dtype"], [641, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[193, "ivy.set_default_dtype"], [641, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[194, "ivy.set_default_float_dtype"], [641, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[195, "ivy.set_default_int_dtype"], [641, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[196, "ivy.set_default_uint_dtype"], [641, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[197, "ivy.type_promote_arrays"], [641, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[198, "ivy.unset_default_complex_dtype"], [641, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[199, "ivy.unset_default_dtype"], [641, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[200, "ivy.unset_default_float_dtype"], [641, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[201, "ivy.unset_default_int_dtype"], [641, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[202, "ivy.unset_default_uint_dtype"], [641, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[203, "ivy.valid_dtype"], [641, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[204, "ivy.as_ivy_dev"], [642, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[205, "ivy.as_native_dev"], [642, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[206, "ivy.clear_cached_mem_on_dev"], [642, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[207, "ivy.default_device"], [642, "ivy.default_device"]], "dev() (in module ivy)": [[208, "ivy.dev"], [642, "ivy.dev"]], "dev() (ivy.array method)": [[208, "ivy.Array.dev"]], "dev() (ivy.container method)": [[208, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[209, "ivy.dev_util"], [642, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[210, "ivy.function_supported_devices"], [642, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[211, "ivy.function_unsupported_devices"], [642, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[212, "ivy.get_all_ivy_arrays_on_dev"], [642, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[213, "ivy.gpu_is_available"], [642, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[214, "ivy.handle_soft_device_variable"], [642, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[215, "ivy.num_cpu_cores"], [642, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[216, "ivy.num_gpus"], [642, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[217, "ivy.num_ivy_arrays_on_dev"], [642, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[218, "ivy.percent_used_mem_on_dev"], [642, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[219, "ivy.print_all_ivy_arrays_on_dev"], [642, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[220, "ivy.set_default_device"], [642, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[221, "ivy.set_soft_device_mode"], [642, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[222, "ivy.set_split_factor"], [642, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[223, "ivy.split_factor"], [642, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[224, "ivy.split_func_call"], [642, "ivy.split_func_call"]], "to_device() (in module ivy)": [[225, "ivy.to_device"], [642, "ivy.to_device"]], "to_device() (ivy.array method)": [[225, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[225, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[226, "ivy.total_mem_on_dev"], [642, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[227, "ivy.tpu_is_available"], [642, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[228, "ivy.unset_default_device"], [642, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[229, "ivy.unset_soft_device_mode"], [642, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[230, "ivy.used_mem_on_dev"], [642, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[231, "ivy.abs"], [643, "ivy.abs"]], "abs() (ivy.array method)": [[231, "ivy.Array.abs"]], "abs() (ivy.container method)": [[231, "ivy.Container.abs"]], "acos() (in module ivy)": [[232, "ivy.acos"], [643, "ivy.acos"]], "acos() (ivy.array method)": [[232, "ivy.Array.acos"]], "acos() (ivy.container method)": [[232, "ivy.Container.acos"]], "acosh() (in module ivy)": [[233, "ivy.acosh"], [643, "ivy.acosh"]], "acosh() (ivy.array method)": [[233, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[233, "ivy.Container.acosh"]], "add() (in module ivy)": [[234, "ivy.add"], [643, "ivy.add"]], "add() (ivy.array method)": [[234, "ivy.Array.add"]], "add() (ivy.container method)": [[234, "ivy.Container.add"]], "angle() (in module ivy)": [[235, "ivy.angle"], [643, "ivy.angle"]], "angle() (ivy.array method)": [[235, "ivy.Array.angle"]], "angle() (ivy.container method)": [[235, "ivy.Container.angle"]], "asin() (in module ivy)": [[236, "ivy.asin"], [643, "ivy.asin"]], "asin() (ivy.array method)": [[236, "ivy.Array.asin"]], "asin() (ivy.container method)": [[236, "ivy.Container.asin"]], "asinh() (in module ivy)": [[237, "ivy.asinh"], [643, "ivy.asinh"]], "asinh() (ivy.array method)": [[237, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[237, "ivy.Container.asinh"]], "atan() (in module ivy)": [[238, "ivy.atan"], [643, "ivy.atan"]], "atan() (ivy.array method)": [[238, "ivy.Array.atan"]], "atan() (ivy.container method)": [[238, "ivy.Container.atan"]], "atan2() (in module ivy)": [[239, "ivy.atan2"], [643, "ivy.atan2"]], "atan2() (ivy.array method)": [[239, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[239, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[240, "ivy.atanh"], [643, "ivy.atanh"]], "atanh() (ivy.array method)": [[240, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[240, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[241, "ivy.bitwise_and"], [643, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[241, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[241, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[242, "ivy.bitwise_invert"], [643, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[242, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[242, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[243, "ivy.bitwise_left_shift"], [643, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[243, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[243, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[244, "ivy.bitwise_or"], [643, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[244, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[244, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[245, "ivy.bitwise_right_shift"], [643, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[245, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[245, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[246, "ivy.bitwise_xor"], [643, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[246, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[246, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[247, "ivy.ceil"], [643, "ivy.ceil"]], "ceil() (ivy.array method)": [[247, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[247, "ivy.Container.ceil"]], "cos() (in module ivy)": [[248, "ivy.cos"], [643, "ivy.cos"]], "cos() (ivy.array method)": [[248, "ivy.Array.cos"]], "cos() (ivy.container method)": [[248, "ivy.Container.cos"]], "cosh() (in module ivy)": [[249, "ivy.cosh"], [643, "ivy.cosh"]], "cosh() (ivy.array method)": [[249, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[249, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[250, "ivy.deg2rad"], [643, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[250, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[250, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[251, "ivy.divide"], [643, "ivy.divide"]], "divide() (ivy.array method)": [[251, "ivy.Array.divide"]], "divide() (ivy.container method)": [[251, "ivy.Container.divide"]], "equal() (in module ivy)": [[252, "ivy.equal"], [643, "ivy.equal"]], "equal() (ivy.array method)": [[252, "ivy.Array.equal"]], "equal() (ivy.container method)": [[252, "ivy.Container.equal"]], "erf() (in module ivy)": [[253, "ivy.erf"], [643, "ivy.erf"]], "erf() (ivy.array method)": [[253, "ivy.Array.erf"]], "erf() (ivy.container method)": [[253, "ivy.Container.erf"]], "exp() (in module ivy)": [[254, "ivy.exp"], [643, "ivy.exp"]], "exp() (ivy.array method)": [[254, "ivy.Array.exp"]], "exp() (ivy.container method)": [[254, "ivy.Container.exp"]], "exp2() (in module ivy)": [[255, "ivy.exp2"], [643, "ivy.exp2"]], "exp2() (ivy.array method)": [[255, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[255, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[256, "ivy.expm1"], [643, "ivy.expm1"]], "expm1() (ivy.array method)": [[256, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[256, "ivy.Container.expm1"]], "floor() (in module ivy)": [[257, "ivy.floor"], [643, "ivy.floor"]], "floor() (ivy.array method)": [[257, "ivy.Array.floor"]], "floor() (ivy.container method)": [[257, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[258, "ivy.floor_divide"], [643, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[258, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[258, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[259, "ivy.fmin"], [643, "ivy.fmin"]], "fmin() (ivy.array method)": [[259, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[259, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[260, "ivy.fmod"], [643, "ivy.fmod"]], "fmod() (ivy.array method)": [[260, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[260, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[261, "ivy.gcd"], [643, "ivy.gcd"]], "gcd() (ivy.array method)": [[261, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[261, "ivy.Container.gcd"]], "greater() (in module ivy)": [[262, "ivy.greater"], [643, "ivy.greater"]], "greater() (ivy.array method)": [[262, "ivy.Array.greater"]], "greater() (ivy.container method)": [[262, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[263, "ivy.greater_equal"], [643, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[263, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[263, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[264, "ivy.imag"], [643, "ivy.imag"]], "imag() (ivy.array method)": [[264, "ivy.Array.imag"]], "imag() (ivy.container method)": [[264, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[265, "ivy.isfinite"], [643, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[265, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[265, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[266, "ivy.isinf"], [643, "ivy.isinf"]], "isinf() (ivy.array method)": [[266, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[266, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[267, "ivy.isnan"], [643, "ivy.isnan"]], "isnan() (ivy.array method)": [[267, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[267, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[268, "ivy.isreal"], [643, "ivy.isreal"]], "isreal() (ivy.array method)": [[268, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[268, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[269, "ivy.lcm"], [643, "ivy.lcm"]], "lcm() (ivy.array method)": [[269, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[269, "ivy.Container.lcm"]], "less() (in module ivy)": [[270, "ivy.less"], [643, "ivy.less"]], "less() (ivy.array method)": [[270, "ivy.Array.less"]], "less() (ivy.container method)": [[270, "ivy.Container.less"]], "less_equal() (in module ivy)": [[271, "ivy.less_equal"], [643, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[271, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[271, "ivy.Container.less_equal"]], "log() (in module ivy)": [[272, "ivy.log"], [643, "ivy.log"]], "log() (ivy.array method)": [[272, "ivy.Array.log"]], "log() (ivy.container method)": [[272, "ivy.Container.log"]], "log10() (in module ivy)": [[273, "ivy.log10"], [643, "ivy.log10"]], "log10() (ivy.array method)": [[273, "ivy.Array.log10"]], "log10() (ivy.container method)": [[273, "ivy.Container.log10"]], "log1p() (in module ivy)": [[274, "ivy.log1p"], [643, "ivy.log1p"]], "log1p() (ivy.array method)": [[274, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[274, "ivy.Container.log1p"]], "log2() (in module ivy)": [[275, "ivy.log2"], [643, "ivy.log2"]], "log2() (ivy.array method)": [[275, "ivy.Array.log2"]], "log2() (ivy.container method)": [[275, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[276, "ivy.logaddexp"], [643, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[276, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[276, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[277, "ivy.logaddexp2"], [643, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[277, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[277, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[278, "ivy.logical_and"], [643, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[278, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[278, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[279, "ivy.logical_not"], [643, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[279, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[279, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[280, "ivy.logical_or"], [643, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[280, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[280, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[281, "ivy.logical_xor"], [643, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[281, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[281, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[282, "ivy.maximum"], [643, "ivy.maximum"]], "maximum() (ivy.array method)": [[282, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[282, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[283, "ivy.minimum"], [643, "ivy.minimum"]], "minimum() (ivy.array method)": [[283, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[283, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[284, "ivy.multiply"], [643, "ivy.multiply"]], "multiply() (ivy.array method)": [[284, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[284, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[285, "ivy.nan_to_num"], [643, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[285, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[285, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[286, "ivy.negative"], [643, "ivy.negative"]], "negative() (ivy.array method)": [[286, "ivy.Array.negative"]], "negative() (ivy.container method)": [[286, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[287, "ivy.not_equal"], [643, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[287, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[287, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[288, "ivy.positive"], [643, "ivy.positive"]], "positive() (ivy.array method)": [[288, "ivy.Array.positive"]], "positive() (ivy.container method)": [[288, "ivy.Container.positive"]], "pow() (in module ivy)": [[289, "ivy.pow"], [643, "ivy.pow"]], "pow() (ivy.array method)": [[289, "ivy.Array.pow"]], "pow() (ivy.container method)": [[289, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[290, "ivy.rad2deg"], [643, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[290, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[290, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[291, "ivy.real"], [643, "ivy.real"]], "real() (ivy.array method)": [[291, "ivy.Array.real"]], "real() (ivy.container method)": [[291, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[292, "ivy.reciprocal"], [643, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[292, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[292, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[293, "ivy.remainder"], [643, "ivy.remainder"]], "remainder() (ivy.array method)": [[293, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[293, "ivy.Container.remainder"]], "round() (in module ivy)": [[294, "ivy.round"], [643, "ivy.round"]], "round() (ivy.array method)": [[294, "ivy.Array.round"]], "round() (ivy.container method)": [[294, "ivy.Container.round"]], "sign() (in module ivy)": [[295, "ivy.sign"], [643, "ivy.sign"]], "sign() (ivy.array method)": [[295, "ivy.Array.sign"]], "sign() (ivy.container method)": [[295, "ivy.Container.sign"]], "sin() (in module ivy)": [[296, "ivy.sin"], [643, "ivy.sin"]], "sin() (ivy.array method)": [[296, "ivy.Array.sin"]], "sin() (ivy.container method)": [[296, "ivy.Container.sin"]], "sinh() (in module ivy)": [[297, "ivy.sinh"], [643, "ivy.sinh"]], "sinh() (ivy.array method)": [[297, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[297, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[298, "ivy.sqrt"], [643, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[298, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[298, "ivy.Container.sqrt"]], "square() (in module ivy)": [[299, "ivy.square"], [643, "ivy.square"]], "square() (ivy.array method)": [[299, "ivy.Array.square"]], "square() (ivy.container method)": [[299, "ivy.Container.square"]], "subtract() (in module ivy)": [[300, "ivy.subtract"], [643, "ivy.subtract"]], "subtract() (ivy.array method)": [[300, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[300, "ivy.Container.subtract"]], "tan() (in module ivy)": [[301, "ivy.tan"], [643, "ivy.tan"]], "tan() (ivy.array method)": [[301, "ivy.Array.tan"]], "tan() (ivy.container method)": [[301, "ivy.Container.tan"]], "tanh() (in module ivy)": [[302, "ivy.tanh"], [643, "ivy.tanh"]], "tanh() (ivy.array method)": [[302, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[302, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[303, "ivy.trapz"], [643, "ivy.trapz"]], "trapz() (ivy.array method)": [[303, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[303, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[304, "ivy.trunc"], [643, "ivy.trunc"]], "trunc() (ivy.array method)": [[304, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[304, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[305, "ivy.trunc_divide"], [643, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[305, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[305, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[306, "ivy.celu"], [378, "ivy.celu"]], "celu() (ivy.array method)": [[306, "ivy.Array.celu"]], "celu() (ivy.container method)": [[306, "ivy.Container.celu"]], "elu() (in module ivy)": [[307, "ivy.elu"], [378, "ivy.elu"]], "elu() (ivy.array method)": [[307, "ivy.Array.elu"]], "elu() (ivy.container method)": [[307, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[308, "ivy.hardshrink"], [378, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[308, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[308, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[309, "ivy.hardsilu"], [378, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[309, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[309, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[310, "ivy.hardtanh"], [378, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[310, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[310, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[311, "ivy.logit"], [378, "ivy.logit"]], "logit() (ivy.array method)": [[311, "ivy.Array.logit"]], "logit() (ivy.container method)": [[311, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[312, "ivy.logsigmoid"], [378, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[312, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[312, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[313, "ivy.prelu"], [378, "ivy.prelu"]], "prelu() (ivy.array method)": [[313, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[313, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[314, "ivy.relu6"], [378, "ivy.relu6"]], "relu6() (ivy.array method)": [[314, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[314, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[315, "ivy.scaled_tanh"], [378, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[315, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[315, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[316, "ivy.selu"], [378, "ivy.selu"]], "selu() (ivy.array method)": [[316, "ivy.Array.selu"]], "selu() (ivy.container method)": [[316, "ivy.Container.selu"]], "silu() (in module ivy)": [[317, "ivy.silu"], [378, "ivy.silu"]], "silu() (ivy.array method)": [[317, "ivy.Array.silu"]], "silu() (ivy.container method)": [[317, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[318, "ivy.softshrink"], [378, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[318, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[318, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[319, "ivy.stanh"], [378, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[320, "ivy.tanhshrink"], [378, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[320, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[320, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[321, "ivy.threshold"], [378, "ivy.threshold"]], "threshold() (ivy.array method)": [[321, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[321, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[322, "ivy.thresholded_relu"], [378, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[322, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[322, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[323, "ivy.blackman_window"], [380, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[323, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[323, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[324, "ivy.eye_like"], [380, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[324, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[324, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[325, "ivy.hamming_window"], [380, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[325, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[326, "ivy.hann_window"], [380, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[326, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[327, "ivy.indices"], [380, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[328, "ivy.kaiser_bessel_derived_window"], [380, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[328, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[329, "ivy.kaiser_window"], [380, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[329, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[330, "ivy.mel_weight_matrix"], [380, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[330, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[330, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[331, "ivy.ndenumerate"], [380, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[332, "ivy.ndindex"], [380, "ivy.ndindex"]], "polyval() (in module ivy)": [[333, "ivy.polyval"], [380, "ivy.polyval"]], "polyval() (ivy.container method)": [[333, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[334, "ivy.random_cp"], [380, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[335, "ivy.random_parafac2"], [380, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[336, "ivy.random_tr"], [380, "ivy.random_tr"]], "random_tt() (in module ivy)": [[337, "ivy.random_tt"], [380, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[338, "ivy.random_tucker"], [380, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[339, "ivy.tril_indices"], [380, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[339, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[340, "ivy.trilu"], [380, "ivy.trilu"]], "trilu() (ivy.array method)": [[340, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[340, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[341, "ivy.unsorted_segment_mean"], [380, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[341, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[341, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[342, "ivy.unsorted_segment_min"], [380, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[342, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[342, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[343, "ivy.unsorted_segment_sum"], [380, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[343, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[343, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[344, "ivy.vorbis_window"], [380, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[344, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[345, "ivy.allclose"], [383, "ivy.allclose"]], "allclose() (ivy.array method)": [[345, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[345, "ivy.Container.allclose"]], "amax() (in module ivy)": [[346, "ivy.amax"], [383, "ivy.amax"]], "amax() (ivy.array method)": [[346, "ivy.Array.amax"]], "amax() (ivy.container method)": [[346, "ivy.Container.amax"]], "amin() (in module ivy)": [[347, "ivy.amin"], [383, "ivy.amin"]], "amin() (ivy.array method)": [[347, "ivy.Array.amin"]], "amin() (ivy.container method)": [[347, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[348, "ivy.binarizer"], [383, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[348, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[348, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[349, "ivy.conj"], [383, "ivy.conj"]], "conj() (ivy.array method)": [[349, "ivy.Array.conj"]], "conj() (ivy.container method)": [[349, "ivy.Container.conj"]], "copysign() (in module ivy)": [[350, "ivy.copysign"], [383, "ivy.copysign"]], "copysign() (ivy.array method)": [[350, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[350, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[351, "ivy.count_nonzero"], [383, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[351, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[351, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[352, "ivy.diff"], [383, "ivy.diff"]], "diff() (ivy.array method)": [[352, "ivy.Array.diff"]], "diff() (ivy.container method)": [[352, "ivy.Container.diff"]], "digamma() (in module ivy)": [[353, "ivy.digamma"], [383, "ivy.digamma"]], "digamma() (ivy.array method)": [[353, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[353, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[354, "ivy.erfc"], [383, "ivy.erfc"]], "erfc() (ivy.array method)": [[354, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[354, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[355, "ivy.erfinv"], [383, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[355, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[355, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[356, "ivy.fix"], [383, "ivy.fix"]], "fix() (ivy.array method)": [[356, "ivy.Array.fix"]], "fix() (ivy.container method)": [[356, "ivy.Container.fix"]], "float_power() (in module ivy)": [[357, "ivy.float_power"], [383, "ivy.float_power"]], "float_power() (ivy.array method)": [[357, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[357, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[358, "ivy.fmax"], [383, "ivy.fmax"]], "fmax() (ivy.array method)": [[358, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[358, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[359, "ivy.frexp"], [383, "ivy.frexp"]], "frexp() (ivy.array method)": [[359, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[359, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[360, "ivy.gradient"], [383, "ivy.gradient"]], "gradient() (ivy.array method)": [[360, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[360, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[361, "ivy.hypot"], [383, "ivy.hypot"]], "hypot() (ivy.array method)": [[361, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[361, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[362, "ivy.isclose"], [383, "ivy.isclose"]], "isclose() (ivy.array method)": [[362, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[362, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[363, "ivy.ldexp"], [383, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[363, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[363, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[364, "ivy.lerp"], [383, "ivy.lerp"]], "lerp() (ivy.array method)": [[364, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[364, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[365, "ivy.lgamma"], [383, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[365, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[365, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[366, "ivy.modf"], [383, "ivy.modf"]], "modf() (ivy.array method)": [[366, "ivy.Array.modf"]], "modf() (ivy.container method)": [[366, "ivy.Container.modf"]], "nansum() (in module ivy)": [[367, "ivy.nansum"], [383, "ivy.nansum"]], "nansum() (ivy.array method)": [[367, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[367, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[368, "ivy.nextafter"], [383, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[368, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[368, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[369, "ivy.signbit"], [383, "ivy.signbit"]], "signbit() (ivy.array method)": [[369, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[369, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[370, "ivy.sinc"], [383, "ivy.sinc"]], "sinc() (ivy.array method)": [[370, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[370, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[371, "ivy.sparsify_tensor"], [383, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[371, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[371, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[372, "ivy.xlogy"], [383, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[372, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[372, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[373, "ivy.zeta"], [383, "ivy.zeta"]], "zeta() (ivy.array method)": [[373, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[373, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[374, "ivy.reduce"], [384, "ivy.reduce"]], "reduce() (ivy.array method)": [[374, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[374, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[375, "ivy.bind_custom_gradient_function"], [385, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[376, "ivy.jvp"], [385, "ivy.jvp"]], "vjp() (in module ivy)": [[377, "ivy.vjp"], [385, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[378, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[379, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[380, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[381, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[382, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[383, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[384, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[385, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[386, "ivy.adaptive_avg_pool1d"], [400, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[386, "ivy.adaptive_avg_pool2d"], [401, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[386, "ivy.adaptive_max_pool2d"], [402, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[386, "ivy.adaptive_max_pool3d"], [403, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[386, "ivy.area_interpolate"], [404, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[386, "ivy.avg_pool1d"], [405, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[386, "ivy.avg_pool2d"], [406, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[386, "ivy.avg_pool3d"], [407, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[386, "ivy.dct"], [408, "ivy.dct"]], "dft() (in module ivy)": [[386, "ivy.dft"], [409, "ivy.dft"]], "dropout1d() (in module ivy)": [[386, "ivy.dropout1d"], [410, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[386, "ivy.dropout2d"], [411, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[386, "ivy.dropout3d"], [412, "ivy.dropout3d"]], "embedding() (in module ivy)": [[386, "ivy.embedding"], [413, "ivy.embedding"]], "fft() (in module ivy)": [[386, "ivy.fft"], [414, "ivy.fft"]], "fft2() (in module ivy)": [[386, "ivy.fft2"], [415, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[386, "ivy.generate_einsum_equation"], [416, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[386, "ivy.get_interpolate_kernel"], [417, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[386, "ivy.idct"], [418, "ivy.idct"]], "ifft() (in module ivy)": [[386, "ivy.ifft"], [419, "ivy.ifft"]], "ifftn() (in module ivy)": [[386, "ivy.ifftn"], [420, "ivy.ifftn"]], "interp() (in module ivy)": [[386, "ivy.interp"], [421, "ivy.interp"]], "interpolate() (in module ivy)": [[386, "ivy.interpolate"], [422, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[386, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[386, "ivy.max_pool1d"], [423, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[386, "ivy.max_pool2d"], [424, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[386, "ivy.max_pool3d"], [425, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[386, "ivy.max_unpool1d"], [426, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[386, "ivy.nearest_interpolate"], [427, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[386, "ivy.pool"], [428, "ivy.pool"]], "reduce_window() (in module ivy)": [[386, "ivy.reduce_window"], [429, "ivy.reduce_window"]], "rfft() (in module ivy)": [[386, "ivy.rfft"], [430, "ivy.rfft"]], "rfftn() (in module ivy)": [[386, "ivy.rfftn"], [431, "ivy.rfftn"]], "rnn() (in module ivy)": [[386, "ivy.rnn"], [432, "ivy.rnn"]], "sliding_window() (in module ivy)": [[386, "ivy.sliding_window"], [433, "ivy.sliding_window"]], "stft() (in module ivy)": [[386, "ivy.stft"], [434, "ivy.stft"]], "adjoint() (in module ivy)": [[387, "ivy.adjoint"], [435, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[387, "ivy.batched_outer"], [436, "ivy.batched_outer"]], "cond() (in module ivy)": [[387, "ivy.cond"], [437, "ivy.cond"]], "diagflat() (in module ivy)": [[387, "ivy.diagflat"], [438, "ivy.diagflat"]], "dot() (in module ivy)": [[387, "ivy.dot"], [439, "ivy.dot"]], "eig() (in module ivy)": [[387, "ivy.eig"], [440, "ivy.eig"], [648, "ivy.eig"], [683, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[387, "ivy.eigh_tridiagonal"], [441, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[387, "ivy.eigvals"], [442, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[387, "ivy.general_inner_product"], [443, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[387, "ivy.higher_order_moment"], [444, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[387, "ivy.initialize_tucker"], [445, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[387, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[387, "ivy.khatri_rao"], [446, "ivy.khatri_rao"]], "kron() (in module ivy)": [[387, "ivy.kron"], [447, "ivy.kron"]], "kronecker() (in module ivy)": [[387, "ivy.kronecker"], [448, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[387, "ivy.lu_factor"], [449, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[387, "ivy.lu_solve"], [450, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[387, "ivy.make_svd_non_negative"], [451, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[387, "ivy.matrix_exp"], [452, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[387, "ivy.mode_dot"], [453, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[387, "ivy.multi_dot"], [454, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[387, "ivy.multi_mode_dot"], [455, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[387, "ivy.partial_tucker"], [456, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[387, "ivy.solve_triangular"], [457, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[387, "ivy.svd_flip"], [458, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[387, "ivy.tensor_train"], [459, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[387, "ivy.truncated_svd"], [460, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[387, "ivy.tt_matrix_to_tensor"], [461, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[387, "ivy.tucker"], [462, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[388, "ivy.hinge_embedding_loss"], [463, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[388, "ivy.huber_loss"], [464, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[388, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[388, "ivy.kl_div"], [465, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[388, "ivy.l1_loss"], [466, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[388, "ivy.log_poisson_loss"], [467, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[388, "ivy.poisson_nll_loss"], [468, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[388, "ivy.smooth_l1_loss"], [469, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[388, "ivy.soft_margin_loss"], [470, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[389, "ivy.as_strided"], [471, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[389, "ivy.associative_scan"], [472, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[389, "ivy.atleast_1d"], [473, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[389, "ivy.atleast_2d"], [474, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[389, "ivy.atleast_3d"], [475, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[389, "ivy.broadcast_shapes"], [476, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[389, "ivy.check_scalar"], [477, "ivy.check_scalar"]], "choose() (in module ivy)": [[389, "ivy.choose"], [478, "ivy.choose"]], "column_stack() (in module ivy)": [[389, "ivy.column_stack"], [479, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[389, "ivy.concat_from_sequence"], [480, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[389, "ivy.dsplit"], [481, "ivy.dsplit"]], "dstack() (in module ivy)": [[389, "ivy.dstack"], [482, "ivy.dstack"]], "expand() (in module ivy)": [[389, "ivy.expand"], [483, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[389, "ivy.fill_diagonal"], [484, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[389, "ivy.flatten"], [485, "ivy.flatten"]], "fliplr() (in module ivy)": [[389, "ivy.fliplr"], [486, "ivy.fliplr"]], "flipud() (in module ivy)": [[389, "ivy.flipud"], [487, "ivy.flipud"]], "fold() (in module ivy)": [[389, "ivy.fold"], [488, "ivy.fold"]], "heaviside() (in module ivy)": [[389, "ivy.heaviside"], [489, "ivy.heaviside"]], "hsplit() (in module ivy)": [[389, "ivy.hsplit"], [490, "ivy.hsplit"]], "hstack() (in module ivy)": [[389, "ivy.hstack"], [491, "ivy.hstack"]], "i0() (in module ivy)": [[389, "ivy.i0"], [492, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[389, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[389, "ivy.matricize"], [493, "ivy.matricize"]], "moveaxis() (in module ivy)": [[389, "ivy.moveaxis"], [494, "ivy.moveaxis"]], "pad() (in module ivy)": [[389, "ivy.pad"], [495, "ivy.pad"]], "partial_fold() (in module ivy)": [[389, "ivy.partial_fold"], [496, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[389, "ivy.partial_tensor_to_vec"], [497, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[389, "ivy.partial_unfold"], [498, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[389, "ivy.partial_vec_to_tensor"], [499, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[389, "ivy.put_along_axis"], [500, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[389, "ivy.rot90"], [501, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[389, "ivy.soft_thresholding"], [502, "ivy.soft_thresholding"]], "take() (in module ivy)": [[389, "ivy.take"], [503, "ivy.take"]], "take_along_axis() (in module ivy)": [[389, "ivy.take_along_axis"], [504, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[389, "ivy.top_k"], [505, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[389, "ivy.trim_zeros"], [506, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[389, "ivy.unflatten"], [507, "ivy.unflatten"]], "unfold() (in module ivy)": [[389, "ivy.unfold"], [508, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[389, "ivy.unique_consecutive"], [509, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[389, "ivy.vsplit"], [510, "ivy.vsplit"]], "vstack() (in module ivy)": [[389, "ivy.vstack"], [511, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[390, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[391, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[392, "ivy.batch_norm"], [512, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[392, "ivy.group_norm"], [513, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[392, "ivy.instance_norm"], [514, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[392, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[392, "ivy.l1_normalize"], [515, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[392, "ivy.l2_normalize"], [516, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[392, "ivy.local_response_norm"], [517, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[392, "ivy.lp_normalize"], [518, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[393, "ivy.bernoulli"], [519, "ivy.bernoulli"]], "beta() (in module ivy)": [[393, "ivy.beta"], [520, "ivy.beta"]], "dirichlet() (in module ivy)": [[393, "ivy.dirichlet"], [521, "ivy.dirichlet"]], "gamma() (in module ivy)": [[393, "ivy.gamma"], [522, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[393, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[393, "ivy.poisson"], [523, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[394, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[394, "ivy.unravel_index"], [524, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[395, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[396, "ivy.invert_permutation"], [525, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[396, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[396, "ivy.lexsort"], [526, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[397, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[397, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[397, "ivy.is_ivy_sparse_array"], [527, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[397, "ivy.is_native_sparse_array"], [528, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[397, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[397, "ivy.native_sparse_array"], [529, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[397, "ivy.native_sparse_array_to_indices_values_and_shape"], [530, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[398, "ivy.bincount"], [531, "ivy.bincount"]], "corrcoef() (in module ivy)": [[398, "ivy.corrcoef"], [532, "ivy.corrcoef"]], "cov() (in module ivy)": [[398, "ivy.cov"], [533, "ivy.cov"]], "cummax() (in module ivy)": [[398, "ivy.cummax"], [534, "ivy.cummax"]], "cummin() (in module ivy)": [[398, "ivy.cummin"], [535, "ivy.cummin"]], "histogram() (in module ivy)": [[398, "ivy.histogram"], [536, "ivy.histogram"]], "igamma() (in module ivy)": [[398, "ivy.igamma"], [537, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[398, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[398, "ivy.median"], [538, "ivy.median"]], "nanmean() (in module ivy)": [[398, "ivy.nanmean"], [539, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[398, "ivy.nanmedian"], [540, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[398, "ivy.nanmin"], [541, "ivy.nanmin"]], "nanprod() (in module ivy)": [[398, "ivy.nanprod"], [542, "ivy.nanprod"]], "quantile() (in module ivy)": [[398, "ivy.quantile"], [543, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[399, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[399, "ivy.optional_get_element"], [544, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[400, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[400, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[401, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[401, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[402, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[402, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[403, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[403, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[405, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[405, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[406, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[406, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[407, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[407, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[408, "ivy.Array.dct"]], "dct() (ivy.container method)": [[408, "ivy.Container.dct"]], "dft() (ivy.array method)": [[409, "ivy.Array.dft"]], "dft() (ivy.container method)": [[409, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[410, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[410, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[411, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[411, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[412, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[412, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[413, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[413, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[414, "ivy.Array.fft"]], "fft() (ivy.container method)": [[414, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[415, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[418, "ivy.Array.idct"]], "idct() (ivy.container method)": [[418, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[419, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[419, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[420, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[420, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[422, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[422, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[423, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[423, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[424, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[424, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[425, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[425, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[426, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[426, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[429, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[429, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[430, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[430, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[431, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[431, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[433, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[433, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[434, "ivy.Array.stft"]], "stft() (ivy.container method)": [[434, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[435, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[435, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[436, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[436, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[437, "ivy.Array.cond"]], "cond() (ivy.container method)": [[437, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[438, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[438, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[439, "ivy.Array.dot"]], "dot() (ivy.container method)": [[439, "ivy.Container.dot"]], "eig() (ivy.array method)": [[440, "ivy.Array.eig"], [683, "ivy.Array.eig"]], "eig() (ivy.container method)": [[440, "ivy.Container.eig"], [683, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[441, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[441, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[442, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[442, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[443, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[443, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[444, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[444, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[445, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[445, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[447, "ivy.Array.kron"]], "kron() (ivy.container method)": [[447, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[451, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[451, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[452, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[452, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[453, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[453, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[454, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[454, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[455, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[455, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[456, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[456, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[458, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[458, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[459, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[459, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[460, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[460, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[461, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[461, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[462, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[462, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[463, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[463, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[464, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[464, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[465, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[465, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[466, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[466, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[467, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[467, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[468, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[468, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[469, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[469, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[470, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[470, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[471, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[471, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[472, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[472, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[473, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[473, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[474, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[474, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[475, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[475, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[476, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[479, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[479, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[480, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[480, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[481, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[481, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[482, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[482, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[483, "ivy.Array.expand"]], "expand() (ivy.container method)": [[483, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[484, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[484, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[485, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[485, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[486, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[486, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[487, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[487, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[488, "ivy.Array.fold"]], "fold() (ivy.container method)": [[488, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[489, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[489, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[490, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[490, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[491, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[491, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[492, "ivy.Array.i0"]], "i0() (ivy.container method)": [[492, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[493, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[493, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[494, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[494, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[495, "ivy.Array.pad"]], "pad() (ivy.container method)": [[495, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[496, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[496, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[497, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[497, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[498, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[498, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[499, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[499, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[500, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[500, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[501, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[501, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[502, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[502, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[503, "ivy.Array.take"]], "take() (ivy.container method)": [[503, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[504, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[504, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[505, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[505, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[506, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[506, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[507, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[507, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[508, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[508, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[509, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[509, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[510, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[510, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[511, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[511, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[512, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[512, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[513, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[513, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[514, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[514, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[515, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[515, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[516, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[516, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[518, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[518, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[519, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[519, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[520, "ivy.Array.beta"]], "beta() (ivy.container method)": [[520, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[521, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[521, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[522, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[522, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[523, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[523, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[524, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[524, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[525, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[526, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[526, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[531, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[531, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[532, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[532, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[533, "ivy.Array.cov"]], "cov() (ivy.container method)": [[533, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[534, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[534, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[535, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[535, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[536, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[536, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[537, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[537, "ivy.Container.igamma"]], "median() (ivy.array method)": [[538, "ivy.Array.median"]], "median() (ivy.container method)": [[538, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[539, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[539, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[540, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[540, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[541, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[541, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[542, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[542, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[543, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[543, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[544, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[544, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[545, "ivy.all_equal"], [645, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[545, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[545, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[546, "ivy.arg_info"], [645, "ivy.arg_info"]], "arg_names() (in module ivy)": [[547, "ivy.arg_names"], [645, "ivy.arg_names"]], "array_equal() (in module ivy)": [[548, "ivy.array_equal"], [645, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[548, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[548, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[549, "ivy.assert_supports_inplace"], [645, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[549, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[549, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[550, "ivy.cache_fn"], [645, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[551, "ivy.clip_matrix_norm"], [645, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[551, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[551, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[552, "ivy.clip_vector_norm"], [645, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[552, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[552, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[553, "ivy.container_types"], [645, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[554, "ivy.current_backend_str"], [645, "ivy.current_backend_str"]], "default() (in module ivy)": [[555, "ivy.default"], [645, "ivy.default"]], "default() (ivy.array method)": [[555, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[556, "ivy.einops_rearrange"], [645, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[556, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[556, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[557, "ivy.einops_reduce"], [645, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[557, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[557, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[558, "ivy.einops_repeat"], [645, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[558, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[558, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[559, "ivy.exists"], [645, "ivy.exists"]], "exists() (ivy.array method)": [[559, "ivy.Array.exists"]], "exists() (ivy.container method)": [[559, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[560, "ivy.fourier_encode"], [645, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[560, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[560, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[561, "ivy.function_supported_devices_and_dtypes"], [645, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[562, "ivy.function_unsupported_devices_and_dtypes"], [645, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[563, "ivy.gather"], [645, "ivy.gather"]], "gather() (ivy.array method)": [[563, "ivy.Array.gather"]], "gather() (ivy.container method)": [[563, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[564, "ivy.gather_nd"], [645, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[564, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[564, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[565, "ivy.get_all_arrays_in_memory"], [645, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[566, "ivy.get_item"], [645, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[567, "ivy.get_num_dims"], [645, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[567, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[567, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[568, "ivy.get_referrers_recursive"], [645, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[569, "ivy.has_nans"], [645, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[569, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[569, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[570, "ivy.inplace_arrays_supported"], [645, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[571, "ivy.inplace_decrement"], [645, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[571, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[571, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[572, "ivy.inplace_increment"], [645, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[572, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[572, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[573, "ivy.inplace_update"], [645, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[573, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[573, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[574, "ivy.inplace_variables_supported"], [645, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[575, "ivy.is_array"], [645, "ivy.is_array"]], "is_array() (ivy.array method)": [[575, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[575, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[576, "ivy.is_ivy_array"], [645, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[576, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[576, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[577, "ivy.is_ivy_container"], [645, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[577, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[578, "ivy.is_ivy_nested_array"], [645, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[579, "ivy.is_native_array"], [645, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[579, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[579, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[580, "ivy.isin"], [645, "ivy.isin"]], "isin() (ivy.array method)": [[580, "ivy.Array.isin"]], "isin() (ivy.container method)": [[580, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[581, "ivy.isscalar"], [645, "ivy.isscalar"]], "itemsize() (in module ivy)": [[582, "ivy.itemsize"], [645, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[582, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[582, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[583, "ivy.match_kwargs"], [645, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[584, "ivy.multiprocessing"], [645, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[585, "ivy.num_arrays_in_memory"], [645, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[586, "ivy.print_all_arrays_in_memory"], [645, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[587, "ivy.scatter_flat"], [645, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[587, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[587, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[588, "ivy.scatter_nd"], [645, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[588, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[588, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[589, "ivy.set_array_mode"], [645, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[590, "ivy.set_exception_trace_mode"], [645, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[591, "ivy.set_inplace_mode"], [645, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[592, "ivy.set_item"], [645, "ivy.set_item"]], "set_min_base() (in module ivy)": [[593, "ivy.set_min_base"], [645, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[594, "ivy.set_min_denominator"], [645, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[595, "ivy.set_nestable_mode"], [645, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[596, "ivy.set_precise_mode"], [645, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[597, "ivy.set_queue_timeout"], [645, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[598, "ivy.set_shape_array_mode"], [645, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[599, "ivy.set_show_func_wrapper_trace_mode"], [645, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[600, "ivy.set_tmp_dir"], [645, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[601, "ivy.shape"], [645, "ivy.shape"]], "shape() (ivy.array method)": [[601, "ivy.Array.shape"]], "size() (in module ivy)": [[602, "ivy.size"], [645, "ivy.size"]], "size() (ivy.array method)": [[602, "ivy.Array.size"]], "size() (ivy.container method)": [[602, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[603, "ivy.stable_divide"], [645, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[603, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[603, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[604, "ivy.stable_pow"], [645, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[604, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[604, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[605, "ivy.strides"], [645, "ivy.strides"]], "strides() (ivy.array method)": [[605, "ivy.Array.strides"]], "strides() (ivy.container method)": [[605, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[606, "ivy.supports_inplace_updates"], [645, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[606, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[606, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[607, "ivy.to_ivy_shape"], [645, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[608, "ivy.to_list"], [645, "ivy.to_list"]], "to_list() (ivy.array method)": [[608, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[608, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[609, "ivy.to_native_shape"], [645, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[610, "ivy.to_numpy"], [645, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[610, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[610, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[611, "ivy.to_scalar"], [645, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[611, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[611, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[612, "ivy.try_else_none"], [645, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[613, "ivy.unset_array_mode"], [645, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[614, "ivy.unset_exception_trace_mode"], [645, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[615, "ivy.unset_inplace_mode"], [645, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[616, "ivy.unset_min_base"], [645, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[617, "ivy.unset_min_denominator"], [645, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[618, "ivy.unset_nestable_mode"], [645, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[619, "ivy.unset_precise_mode"], [645, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[620, "ivy.unset_queue_timeout"], [645, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[621, "ivy.unset_shape_array_mode"], [645, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[622, "ivy.unset_show_func_wrapper_trace_mode"], [645, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[623, "ivy.unset_tmp_dir"], [645, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[624, "ivy.value_is_nan"], [645, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[624, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[624, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[625, "ivy.vmap"], [645, "ivy.vmap"]], "adam_step() (in module ivy)": [[626, "ivy.adam_step"], [646, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[626, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[626, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[627, "ivy.adam_update"], [646, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[627, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[627, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[628, "ivy.execute_with_gradients"], [646, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[629, "ivy.grad"], [646, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[630, "ivy.gradient_descent_update"], [646, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[630, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[630, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[631, "ivy.jac"], [646, "ivy.jac"]], "lamb_update() (in module ivy)": [[632, "ivy.lamb_update"], [646, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[632, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[632, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[633, "ivy.lars_update"], [646, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[633, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[633, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[634, "ivy.optimizer_update"], [646, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[634, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[634, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[635, "ivy.stop_gradient"], [646, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[635, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[635, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[636, "ivy.value_and_grad"], [646, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[637, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[638, "ivy.e"]], "inf (in module ivy)": [[638, "ivy.inf"]], "ivy.functional.ivy.constants": [[638, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[638, "ivy.nan"]], "newaxis (in module ivy)": [[638, "ivy.newaxis"]], "pi (in module ivy)": [[638, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[639, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[640, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[640, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[641, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[641, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[641, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[641, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[641, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[641, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[642, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[642, "ivy.Profiler"]], "ivy.functional.ivy.device": [[642, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[643, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[644, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[645, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[645, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[645, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[646, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[647, "ivy.conv"], [660, "ivy.conv"]], "conv1d() (in module ivy)": [[647, "ivy.conv1d"], [661, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[647, "ivy.conv1d_transpose"], [662, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[647, "ivy.conv2d"], [663, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[647, "ivy.conv2d_transpose"], [664, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[647, "ivy.conv3d"], [665, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[647, "ivy.conv3d_transpose"], [666, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[647, "ivy.conv_general_dilated"], [667, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[647, "ivy.conv_general_transpose"], [668, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[647, "ivy.depthwise_conv2d"], [669, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[647, "ivy.dropout"], [670, "ivy.dropout"]], "ivy.functional.ivy.layers": [[647, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[647, "ivy.linear"], [671, "ivy.linear"]], "lstm() (in module ivy)": [[647, "ivy.lstm"], [672, "ivy.lstm"]], "lstm_update() (in module ivy)": [[647, "ivy.lstm_update"], [673, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[647, "ivy.multi_head_attention"], [674, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[647, "ivy.nms"], [675, "ivy.nms"]], "roi_align() (in module ivy)": [[647, "ivy.roi_align"], [676, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[647, "ivy.scaled_dot_product_attention"], [677, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[648, "ivy.cholesky"], [678, "ivy.cholesky"]], "cross() (in module ivy)": [[648, "ivy.cross"], [679, "ivy.cross"]], "det() (in module ivy)": [[648, "ivy.det"], [680, "ivy.det"]], "diag() (in module ivy)": [[648, "ivy.diag"], [681, "ivy.diag"]], "diagonal() (in module ivy)": [[648, "ivy.diagonal"], [682, "ivy.diagonal"]], "eigh() (in module ivy)": [[648, "ivy.eigh"], [684, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[648, "ivy.eigvalsh"], [685, "ivy.eigvalsh"]], "inner() (in module ivy)": [[648, "ivy.inner"], [686, "ivy.inner"]], "inv() (in module ivy)": [[648, "ivy.inv"], [687, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[648, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[648, "ivy.matmul"], [688, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[648, "ivy.matrix_norm"], [689, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[648, "ivy.matrix_power"], [690, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[648, "ivy.matrix_rank"], [691, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[648, "ivy.matrix_transpose"], [692, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[648, "ivy.outer"], [693, "ivy.outer"]], "pinv() (in module ivy)": [[648, "ivy.pinv"], [694, "ivy.pinv"]], "qr() (in module ivy)": [[648, "ivy.qr"], [695, "ivy.qr"]], "slogdet() (in module ivy)": [[648, "ivy.slogdet"], [696, "ivy.slogdet"]], "solve() (in module ivy)": [[648, "ivy.solve"], [697, "ivy.solve"]], "svd() (in module ivy)": [[648, "ivy.svd"], [698, "ivy.svd"]], "svdvals() (in module ivy)": [[648, "ivy.svdvals"], [699, "ivy.svdvals"]], "tensordot() (in module ivy)": [[648, "ivy.tensordot"], [700, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[648, "ivy.tensorsolve"], [701, "ivy.tensorsolve"]], "trace() (in module ivy)": [[648, "ivy.trace"], [702, "ivy.trace"]], "vander() (in module ivy)": [[648, "ivy.vander"], [703, "ivy.vander"]], "vecdot() (in module ivy)": [[648, "ivy.vecdot"], [704, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[648, "ivy.vector_norm"], [705, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[648, "ivy.vector_to_skew_symmetric_matrix"], [706, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[649, "ivy.binary_cross_entropy"], [707, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[649, "ivy.cross_entropy"], [708, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[649, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[649, "ivy.sparse_cross_entropy"], [709, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[649, "ivy.ssim_loss"], [710, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[649, "ivy.wasserstein_loss_discriminator"], [711, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[649, "ivy.wasserstein_loss_generator"], [712, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[650, "ivy.clip"], [713, "ivy.clip"]], "concat() (in module ivy)": [[650, "ivy.concat"], [714, "ivy.concat"]], "constant_pad() (in module ivy)": [[650, "ivy.constant_pad"], [715, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[650, "ivy.expand_dims"], [716, "ivy.expand_dims"]], "flip() (in module ivy)": [[650, "ivy.flip"], [717, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[650, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[650, "ivy.permute_dims"], [718, "ivy.permute_dims"]], "repeat() (in module ivy)": [[650, "ivy.repeat"], [719, "ivy.repeat"]], "reshape() (in module ivy)": [[650, "ivy.reshape"], [720, "ivy.reshape"]], "roll() (in module ivy)": [[650, "ivy.roll"], [721, "ivy.roll"]], "split() (in module ivy)": [[650, "ivy.split"], [722, "ivy.split"]], "squeeze() (in module ivy)": [[650, "ivy.squeeze"], [723, "ivy.squeeze"]], "stack() (in module ivy)": [[650, "ivy.stack"], [724, "ivy.stack"]], "swapaxes() (in module ivy)": [[650, "ivy.swapaxes"], [725, "ivy.swapaxes"]], "tile() (in module ivy)": [[650, "ivy.tile"], [726, "ivy.tile"]], "unstack() (in module ivy)": [[650, "ivy.unstack"], [727, "ivy.unstack"]], "zero_pad() (in module ivy)": [[650, "ivy.zero_pad"], [728, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[651, "ivy.fomaml_step"], [729, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[651, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[651, "ivy.maml_step"], [730, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[651, "ivy.reptile_step"], [731, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[652, "ivy.all_nested_indices"], [732, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[652, "ivy.copy_nest"], [733, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[652, "ivy.duplicate_array_index_chains"], [734, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[652, "ivy.index_nest"], [735, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[652, "ivy.insert_into_nest_at_index"], [736, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[652, "ivy.insert_into_nest_at_indices"], [737, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[652, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[652, "ivy.map"], [738, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[652, "ivy.map_nest_at_index"], [739, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[652, "ivy.map_nest_at_indices"], [740, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[652, "ivy.multi_index_nest"], [741, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[652, "ivy.nested_any"], [742, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[652, "ivy.nested_argwhere"], [743, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[652, "ivy.nested_map"], [744, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[652, "ivy.nested_multi_map"], [745, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[652, "ivy.prune_empty"], [746, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[652, "ivy.prune_nest_at_index"], [747, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[652, "ivy.prune_nest_at_indices"], [748, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[652, "ivy.set_nest_at_index"], [749, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[652, "ivy.set_nest_at_indices"], [750, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[653, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[653, "ivy.layer_norm"], [751, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[654, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[654, "ivy.multinomial"], [752, "ivy.multinomial"]], "randint() (in module ivy)": [[654, "ivy.randint"], [753, "ivy.randint"]], "random_normal() (in module ivy)": [[654, "ivy.random_normal"], [754, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[654, "ivy.random_uniform"], [755, "ivy.random_uniform"]], "seed() (in module ivy)": [[654, "ivy.seed"], [756, "ivy.seed"]], "shuffle() (in module ivy)": [[654, "ivy.shuffle"], [757, "ivy.shuffle"]], "argmax() (in module ivy)": [[655, "ivy.argmax"], [758, "ivy.argmax"]], "argmin() (in module ivy)": [[655, "ivy.argmin"], [759, "ivy.argmin"]], "argwhere() (in module ivy)": [[655, "ivy.argwhere"], [760, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[655, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[655, "ivy.nonzero"], [761, "ivy.nonzero"]], "where() (in module ivy)": [[655, "ivy.where"], [762, "ivy.where"]], "ivy.functional.ivy.set": [[656, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[656, "ivy.unique_all"], [763, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[656, "ivy.unique_counts"], [764, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[656, "ivy.unique_inverse"], [765, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[656, "ivy.unique_values"], [766, "ivy.unique_values"]], "argsort() (in module ivy)": [[657, "ivy.argsort"], [767, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[657, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[657, "ivy.msort"], [768, "ivy.msort"]], "searchsorted() (in module ivy)": [[657, "ivy.searchsorted"], [769, "ivy.searchsorted"]], "sort() (in module ivy)": [[657, "ivy.sort"], [770, "ivy.sort"]], "cumprod() (in module ivy)": [[658, "ivy.cumprod"], [771, "ivy.cumprod"]], "cumsum() (in module ivy)": [[658, "ivy.cumsum"], [772, "ivy.cumsum"]], "einsum() (in module ivy)": [[658, "ivy.einsum"], [773, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[658, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[658, "ivy.max"], [774, "ivy.max"]], "mean() (in module ivy)": [[658, "ivy.mean"], [775, "ivy.mean"]], "min() (in module ivy)": [[658, "ivy.min"], [776, "ivy.min"]], "prod() (in module ivy)": [[658, "ivy.prod"], [777, "ivy.prod"]], "std() (in module ivy)": [[658, "ivy.std"], [778, "ivy.std"]], "sum() (in module ivy)": [[658, "ivy.sum"], [779, "ivy.sum"]], "var() (in module ivy)": [[658, "ivy.var"], [780, "ivy.var"]], "all() (in module ivy)": [[659, "ivy.all"], [781, "ivy.all"]], "any() (in module ivy)": [[659, "ivy.any"], [782, "ivy.any"]], "ivy.functional.ivy.utility": [[659, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[659, "ivy.load"], [783, "ivy.load"]], "save() (in module ivy)": [[659, "ivy.save"], [784, "ivy.save"]], "conv1d() (ivy.array method)": [[661, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[661, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[662, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[662, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[663, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[663, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[664, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[664, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[665, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[665, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[666, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[666, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[669, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[669, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[670, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[670, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[671, "ivy.Array.linear"]], "linear() (ivy.container method)": [[671, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[673, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[673, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[674, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[674, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[677, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[677, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[678, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[678, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[679, "ivy.Array.cross"]], "cross() (ivy.container method)": [[679, "ivy.Container.cross"]], "det() (ivy.array method)": [[680, "ivy.Array.det"]], "det() (ivy.container method)": [[680, "ivy.Container.det"]], "diag() (ivy.array method)": [[681, "ivy.Array.diag"]], "diag() (ivy.container method)": [[681, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[682, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[682, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[684, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[684, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[685, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[685, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[686, "ivy.Array.inner"]], "inner() (ivy.container method)": [[686, "ivy.Container.inner"]], "inv() (ivy.array method)": [[687, "ivy.Array.inv"]], "inv() (ivy.container method)": [[687, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[688, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[688, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[689, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[689, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[690, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[690, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[691, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[691, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[692, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[692, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[693, "ivy.Array.outer"]], "outer() (ivy.container method)": [[693, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[694, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[694, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[695, "ivy.Array.qr"]], "qr() (ivy.container method)": [[695, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[696, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[696, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[697, "ivy.Array.solve"]], "solve() (ivy.container method)": [[697, "ivy.Container.solve"]], "svd() (ivy.array method)": [[698, "ivy.Array.svd"]], "svd() (ivy.container method)": [[698, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[699, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[699, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[700, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[700, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[701, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[701, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[702, "ivy.Array.trace"]], "trace() (ivy.container method)": [[702, "ivy.Container.trace"]], "vander() (ivy.array method)": [[703, "ivy.Array.vander"]], "vander() (ivy.container method)": [[703, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[704, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[704, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[705, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[705, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[706, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[706, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[707, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[707, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[708, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[708, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[709, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[709, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[713, "ivy.Array.clip"]], "clip() (ivy.container method)": [[713, "ivy.Container.clip"]], "concat() (ivy.array method)": [[714, "ivy.Array.concat"]], "concat() (ivy.container method)": [[714, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[715, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[715, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[716, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[716, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[717, "ivy.Array.flip"]], "flip() (ivy.container method)": [[717, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[718, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[718, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[719, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[719, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[720, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[720, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[721, "ivy.Array.roll"]], "roll() (ivy.container method)": [[721, "ivy.Container.roll"]], "split() (ivy.array method)": [[722, "ivy.Array.split"]], "split() (ivy.container method)": [[722, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[723, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[723, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[724, "ivy.Array.stack"]], "stack() (ivy.container method)": [[724, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[725, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[725, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[726, "ivy.Array.tile"]], "tile() (ivy.container method)": [[726, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[727, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[727, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[728, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[728, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[751, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[751, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[752, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[752, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[753, "ivy.Array.randint"]], "randint() (ivy.container method)": [[753, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[754, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[754, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[755, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[755, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[757, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[757, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[758, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[758, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[759, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[759, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[760, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[760, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[761, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[761, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[762, "ivy.Array.where"]], "where() (ivy.container method)": [[762, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[763, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[763, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[764, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[764, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[765, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[765, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[766, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[766, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[767, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[767, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[768, "ivy.Array.msort"]], "msort() (ivy.container method)": [[768, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[769, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[769, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[770, "ivy.Array.sort"]], "sort() (ivy.container method)": [[770, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[771, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[771, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[772, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[772, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[773, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[773, "ivy.Container.einsum"]], "max() (ivy.array method)": [[774, "ivy.Array.max"]], "max() (ivy.container method)": [[774, "ivy.Container.max"]], "mean() (ivy.array method)": [[775, "ivy.Array.mean"]], "mean() (ivy.container method)": [[775, "ivy.Container.mean"]], "min() (ivy.array method)": [[776, "ivy.Array.min"]], "min() (ivy.container method)": [[776, "ivy.Container.min"]], "prod() (ivy.array method)": [[777, "ivy.Array.prod"]], "prod() (ivy.container method)": [[777, "ivy.Container.prod"]], "std() (ivy.array method)": [[778, "ivy.Array.std"]], "std() (ivy.container method)": [[778, "ivy.Container.std"]], "sum() (ivy.array method)": [[779, "ivy.Array.sum"]], "sum() (ivy.container method)": [[779, "ivy.Container.sum"]], "var() (ivy.array method)": [[780, "ivy.Array.var"]], "var() (ivy.container method)": [[780, "ivy.Container.var"]], "all() (ivy.array method)": [[781, "ivy.Array.all"]], "all() (ivy.container method)": [[781, "ivy.Container.all"]], "any() (ivy.array method)": [[782, "ivy.Array.any"]], "any() (ivy.container method)": [[782, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[785, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[785, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[786, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[787, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[787, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[788, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[788, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[788, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[788, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[788, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[789, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[790, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[790, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[791, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[791, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[792, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[792, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[793, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[794, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[794, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[794, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[795, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[795, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[796, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[796, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[797, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[797, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[798, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[798, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[802, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[802, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[802, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[802, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[802, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[802, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[802, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[802, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[802, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[802, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[802, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[802, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[802, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[802, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[802, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[802, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[802, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[802, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[802, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[802, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[803, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[803, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[803, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[803, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[803, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[803, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[803, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[803, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[803, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[804, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[804, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[805, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[805, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[805, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[805, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[805, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[805, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[805, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[805, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[805, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[805, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[805, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[805, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[805, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[805, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[805, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[805, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[806, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[806, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[806, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[806, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[806, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[806, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[806, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[806, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[806, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[806, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[806, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[806, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[806, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[806, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[806, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[806, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[806, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[806, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[806, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[806, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[806, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[806, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[806, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[806, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[806, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[806, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[806, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[806, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[806, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[807, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[807, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[807, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[807, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[807, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[807, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[807, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[808, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[808, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[808, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[808, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[808, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[808, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[809, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[809, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[809, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[809, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[809, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[810, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[810, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[810, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[810, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[810, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[810, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[810, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[810, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[810, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[810, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[810, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[810, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[810, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[810, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[810, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[810, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[810, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[810, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[811, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[811, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[811, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[812, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[812, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[813, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[814, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[814, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[814, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[814, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[814, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[814, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[814, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[814, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[814, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[814, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[814, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[815, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[815, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[815, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[816, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[816, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[817, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[817, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[817, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[818, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[818, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[818, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[818, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[818, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.apply_transpose"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "ivy.utils.decorator_utils": [[818, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[818, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[818, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[819, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[819, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[820, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[820, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[821, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[821, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[822, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[822, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[822, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[822, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[822, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[822, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[822, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[822, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[822, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[822, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[822, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[822, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[822, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[822, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[822, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[822, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[822, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[822, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[822, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[822, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[822, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[822, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[822, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[822, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[822, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[822, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[823, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[823, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[823, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[824, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[824, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[824, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[825, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[825, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[825, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[825, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[825, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[825, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[825, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[825, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[825, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[825, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[826, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[826, "module-ivy.utils.verbosity"]], "automatic code conversions": [[872, "term-Automatic-Code-Conversions"]], "backend handler": [[872, "term-Backend-Handler"]], "compositional functions": [[872, "term-Compositional-Functions"]], "convenience functions": [[872, "term-Convenience-Functions"]], "framework": [[872, "term-Framework"]], "framework handler": [[872, "term-Framework-Handler"]], "graph compiler": [[872, "term-Graph-Compiler"]], "ivy array": [[872, "term-Ivy-Array"]], "ivy backends": [[872, "term-Ivy-Backends"]], "ivy compiler": [[872, "term-Ivy-Compiler"]], "ivy container": [[872, "term-Ivy-Container"]], "ivy frontends": [[872, "term-Ivy-Frontends"]], "ivy functional api": [[872, "term-Ivy-Functional-API"]], "ivy tracer": [[872, "term-Ivy-Tracer"]], "ivy transpiler": [[872, "term-Ivy-Transpiler"]], "mixed functions": [[872, "term-Mixed-Functions"]], "native array": [[872, "term-Native-Array"]], "nestable functions": [[872, "term-Nestable-Functions"]], "pipeline": [[872, "term-Pipeline"]], "primary functions": [[872, "term-Primary-Functions"]], "standalone functions": [[872, "term-Standalone-Functions"]], "submodule helper functions": [[872, "term-Submodule-Helper-Functions"]], "built-in function": [[878, "ivy.trace_graph"], [879, "ivy.transpile"], [880, "ivy.unify"]], "ivy.trace_graph()": [[878, "ivy.trace_graph"]], "ivy.transpile()": [[879, "ivy.transpile"]], "ivy.unify()": [[880, "ivy.unify"]]}})