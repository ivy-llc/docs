Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/kornia_demo", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/learn_the_basics/torch_to_tf_functions", "demos/learn_the_basics/torch_to_tf_models", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/why_transpile", "overview/one_liners", "overview/one_liners/graph_transpile", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ivy_vs_onnx"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/kornia_demo.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/learn_the_basics/torch_to_tf_functions.ipynb", "demos/learn_the_basics/torch_to_tf_models.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/why_transpile.rst", "overview/one_liners.rst", "overview/one_liners/graph_transpile.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ivy_vs_onnx.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "Transpiling Functions from PyTorch to TensorFlow", "Transpiling Models from PyTorch to TensorFlow", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "pad_sequence", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "requires_gradient", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Why Transpile?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.graph_transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "Frameworks", "Graph Tracers", "Comparing Ivy with ONNX"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 178, 181, 184, 185, 186, 188, 192, 193, 207, 210, 220, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 420, 421, 422, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 594, 600, 605, 606, 607, 608, 609, 611, 613, 614, 627, 628, 629, 630, 631, 633, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 738, 740, 742, 743, 748, 749, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 874, 875, 877, 878, 880, 881, 882, 883, 884], "notebook": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 50, 59, 812, 831], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 193, 205, 207, 209, 210, 212, 213, 215, 217, 220, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 328, 329, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 398, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 417, 420, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 586, 587, 590, 591, 592, 594, 600, 604, 605, 606, 607, 609, 611, 613, 614, 615, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 792, 794, 795, 796, 797, 802, 806, 807, 809, 810, 811, 812, 813, 814, 816, 819, 820, 824, 825, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 880, 882, 883, 884], "dedic": [0, 807, 840, 855, 866], "task": [0, 1, 8, 9, 61, 655, 733, 734, 735, 831, 832, 834, 838, 839, 840, 860, 861, 874, 882], "util": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 58, 61, 70, 93, 211, 389, 460, 646, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 838, 845, 849, 852, 853, 856, 859, 863, 864, 868, 877], "power": [0, 33, 44, 45, 69, 70, 71, 75, 92, 93, 94, 98, 115, 116, 247, 256, 257, 291, 346, 359, 382, 385, 388, 436, 596, 607, 619, 647, 649, 652, 656, 694, 707, 742, 809, 865, 882], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 61, 62, 63, 70, 75, 76, 77, 85, 93, 98, 99, 108, 110, 111, 131, 377, 387, 391, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 508, 513, 559, 569, 609, 631, 632, 634, 640, 641, 649, 650, 652, 653, 654, 695, 711, 720, 721, 722, 724, 726, 727, 729, 731, 806, 812, 819, 825, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883], "emploi": [0, 26], "build": [0, 5, 15, 16, 30, 33, 40, 44, 45, 48, 49, 50, 51, 56, 58, 63, 81, 87, 116, 660, 767, 768, 769, 770, 810, 811, 812, 831, 832, 838, 841, 847, 848, 856, 858, 867, 869, 870, 872, 875, 877, 882], "The": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 146, 147, 149, 151, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 180, 181, 183, 185, 186, 187, 190, 191, 193, 194, 196, 197, 198, 199, 205, 206, 207, 208, 209, 211, 212, 213, 214, 219, 220, 221, 222, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 439, 440, 441, 442, 443, 445, 447, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 486, 487, 488, 489, 493, 496, 497, 498, 503, 504, 506, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 585, 587, 590, 591, 594, 596, 597, 600, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 796, 797, 802, 806, 807, 809, 810, 812, 813, 814, 819, 824, 825, 831, 832, 833, 835, 837, 840, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 863, 864, 866, 867, 868, 869, 871, 872, 874, 875, 877, 878, 879, 880, 882, 883, 884], "goal": [0, 31, 58, 260, 647, 837, 840, 882, 884], "accur": [0, 8, 9, 23, 258, 276, 647, 652, 700, 857], "distinguish": 0, "between": [0, 8, 9, 26, 31, 32, 37, 49, 50, 51, 56, 69, 70, 71, 74, 75, 76, 77, 81, 87, 92, 93, 97, 98, 99, 100, 116, 139, 178, 241, 254, 289, 305, 347, 364, 366, 385, 388, 389, 390, 391, 400, 412, 413, 414, 425, 426, 427, 435, 441, 445, 466, 467, 468, 469, 470, 471, 472, 497, 498, 546, 644, 645, 647, 651, 653, 654, 656, 658, 660, 674, 697, 711, 712, 713, 714, 720, 728, 742, 757, 768, 769, 770, 795, 802, 814, 843, 844, 848, 850, 855, 856, 857, 859, 860, 861, 862, 863, 866, 869, 873, 874, 875, 877, 878, 879, 882, 883, 884], "activ": [0, 8, 9, 23, 27, 40, 44, 45, 70, 71, 74, 85, 93, 97, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 308, 309, 310, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 609, 651, 678, 681, 809, 810, 829, 831, 838, 839, 848, 854, 864, 865, 877, 882], "therebi": [0, 8, 9, 23, 863], "enhanc": [0, 39, 44, 45, 831, 862, 877], "secur": 0, "usag": [0, 10, 11, 226, 646, 831, 848, 856, 859, 863, 868, 870], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 58, 70, 74, 75, 77, 81, 83, 87, 93, 97, 98, 106, 223, 226, 231, 388, 391, 400, 416, 421, 431, 435, 481, 488, 489, 490, 497, 537, 538, 646, 651, 652, 654, 655, 656, 660, 662, 664, 665, 666, 667, 669, 671, 673, 677, 678, 681, 692, 693, 709, 718, 733, 734, 748, 767, 768, 769, 770, 775, 776, 779, 781, 783, 791, 810, 819, 824, 837, 838, 839, 842, 843, 845, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 868, 870, 877, 878, 882], "dive": [0, 26, 33, 44, 56, 831, 832, 833, 836, 837, 839, 842, 846, 848, 854, 861, 867, 870], "need": [0, 1, 4, 5, 10, 11, 19, 20, 24, 25, 31, 33, 39, 40, 44, 45, 58, 59, 60, 70, 71, 77, 93, 94, 100, 388, 389, 400, 411, 416, 417, 421, 442, 543, 554, 555, 576, 649, 651, 652, 654, 656, 678, 687, 717, 720, 747, 795, 833, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 866, 868, 870, 874, 877, 878, 882, 883], "up": [0, 4, 5, 10, 11, 12, 13, 19, 20, 24, 25, 26, 42, 44, 70, 71, 93, 94, 388, 391, 411, 424, 481, 489, 571, 583, 649, 651, 674, 676, 831, 832, 835, 837, 839, 840, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 874, 878, 883], "our": [0, 4, 5, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 31, 34, 35, 37, 39, 42, 44, 45, 46, 47, 49, 50, 51, 56, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 852, 853, 854, 857, 860, 861, 862, 863, 864, 866, 869, 870, 874, 878], "necessari": [0, 8, 9, 10, 11, 23, 50, 66, 70, 89, 93, 100, 141, 253, 286, 390, 391, 465, 475, 476, 477, 483, 485, 486, 487, 488, 489, 496, 513, 599, 622, 647, 649, 720, 721, 722, 724, 726, 727, 729, 731, 831, 837, 838, 843, 844, 846, 848, 850, 859, 860, 863, 865, 866, 877, 878], "follow": [0, 1, 5, 8, 9, 10, 11, 23, 26, 36, 37, 40, 43, 44, 45, 48, 49, 50, 56, 59, 60, 70, 71, 72, 74, 75, 81, 87, 93, 94, 95, 97, 98, 147, 178, 181, 226, 236, 253, 260, 286, 288, 295, 296, 332, 382, 388, 390, 391, 394, 411, 424, 432, 470, 485, 497, 515, 517, 574, 575, 576, 606, 607, 630, 633, 635, 636, 637, 644, 645, 646, 647, 649, 650, 651, 652, 656, 660, 678, 681, 693, 699, 709, 742, 748, 767, 768, 769, 770, 810, 814, 833, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 878, 882], "command": [0, 5, 58, 60, 833, 838, 842, 845, 847, 853, 854, 871], "which": [0, 1, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 113, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 168, 170, 176, 178, 181, 183, 186, 193, 205, 210, 214, 219, 221, 224, 225, 226, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 335, 338, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 363, 364, 365, 366, 368, 369, 370, 372, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 398, 400, 411, 412, 413, 414, 416, 417, 421, 422, 431, 432, 433, 435, 440, 443, 455, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 503, 504, 505, 506, 507, 508, 510, 515, 517, 518, 519, 521, 522, 523, 524, 525, 526, 528, 529, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 582, 583, 588, 589, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 674, 675, 676, 678, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 706, 708, 709, 711, 712, 713, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 731, 732, 741, 742, 743, 744, 749, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 806, 807, 809, 810, 811, 812, 813, 814, 815, 819, 820, 827, 829, 831, 833, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 877, 878, 881, 882, 883, 884], "an": [0, 1, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 23, 24, 25, 26, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 50, 56, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 178, 181, 184, 188, 192, 193, 223, 227, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 329, 330, 331, 333, 334, 341, 342, 343, 344, 345, 346, 348, 349, 351, 354, 358, 363, 367, 372, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 420, 422, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 439, 442, 443, 444, 469, 470, 474, 475, 476, 477, 481, 482, 483, 485, 492, 496, 497, 504, 506, 510, 512, 513, 515, 516, 517, 520, 522, 523, 525, 528, 529, 534, 535, 536, 537, 538, 539, 540, 543, 544, 547, 552, 554, 555, 563, 566, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 585, 591, 594, 595, 604, 605, 609, 613, 614, 615, 628, 631, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 742, 755, 757, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 882, 883, 884], "machin": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 37, 39, 40, 47, 48, 56, 62, 70, 75, 93, 98, 178, 181, 389, 443, 645, 652, 695, 698, 838, 842, 856, 869, 871, 872, 874, 875, 882], "learn": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 34, 35, 36, 38, 40, 44, 45, 46, 47, 48, 49, 56, 58, 70, 72, 95, 389, 390, 460, 465, 559, 630, 633, 635, 636, 637, 649, 650, 655, 733, 734, 735, 814, 832, 836, 837, 838, 841, 842, 848, 853, 854, 856, 858, 867, 869, 872, 874, 875, 884], "other": [0, 4, 5, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 67, 69, 70, 71, 77, 83, 87, 90, 92, 93, 94, 100, 106, 110, 115, 116, 139, 154, 166, 192, 253, 258, 260, 276, 285, 286, 350, 354, 385, 391, 481, 482, 490, 548, 549, 644, 645, 647, 649, 658, 662, 718, 728, 759, 782, 784, 791, 796, 831, 835, 837, 838, 839, 840, 842, 843, 846, 847, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 864, 866, 869, 870, 871, 872, 877, 878, 881, 882, 884], "essenti": [0, 834, 837, 844, 846, 849, 850, 856, 859, 860, 861], "panda": [0, 26, 58, 60], "matplotlib": [0, 5, 8, 9, 10, 11, 23, 26, 37, 39, 40, 58, 59, 60, 63], "scikit": [0, 26, 389, 460], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 61, 62, 63, 66, 71, 75, 85, 94, 98, 142, 180, 207, 208, 212, 222, 224, 229, 296, 348, 349, 385, 391, 510, 552, 576, 609, 644, 645, 646, 647, 649, 652, 655, 702, 734, 735, 791, 802, 807, 819, 829, 831, 835, 838, 839, 842, 843, 844, 845, 847, 848, 849, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 872, 877, 878, 879, 880], "cryptographi": [0, 5, 26], "These": [0, 26, 51, 70, 93, 389, 391, 400, 442, 496, 536, 651, 652, 678, 687, 688, 831, 834, 836, 837, 838, 839, 842, 846, 848, 850, 851, 855, 856, 859, 860, 863, 868, 870, 872, 874, 877, 882], "tool": [0, 23, 26, 33, 44, 45, 831, 838, 839, 850, 854, 870, 875, 877, 882, 883, 884], "provid": [0, 8, 9, 15, 16, 23, 31, 33, 37, 40, 44, 45, 49, 50, 56, 62, 66, 70, 71, 75, 77, 80, 83, 84, 87, 89, 93, 94, 98, 100, 103, 106, 107, 135, 152, 154, 171, 172, 173, 174, 175, 183, 193, 205, 209, 222, 305, 388, 389, 391, 394, 400, 424, 432, 436, 441, 445, 458, 459, 463, 464, 481, 483, 492, 513, 515, 517, 546, 558, 590, 591, 643, 644, 645, 646, 647, 649, 651, 652, 654, 656, 659, 662, 663, 678, 694, 697, 708, 720, 721, 728, 740, 762, 782, 784, 785, 786, 795, 810, 814, 819, 820, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 859, 860, 861, 863, 864, 866, 870, 875, 877, 878, 880, 882, 883, 884], "robust": [0, 874], "foundat": [0, 33], "manipul": [0, 70, 93, 859, 860, 864, 866, 868, 882], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 39, 40, 44, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 130, 131, 139, 140, 141, 142, 145, 147, 149, 150, 151, 152, 153, 154, 156, 160, 162, 166, 167, 168, 176, 178, 181, 186, 188, 193, 210, 211, 219, 224, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 333, 334, 341, 343, 348, 349, 351, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 407, 408, 409, 410, 412, 413, 415, 416, 417, 420, 421, 425, 426, 427, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 453, 459, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 480, 481, 482, 483, 484, 487, 488, 489, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 518, 519, 520, 521, 524, 526, 527, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 569, 572, 574, 575, 576, 583, 590, 591, 606, 607, 608, 609, 611, 615, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 797, 809, 810, 814, 824, 825, 831, 835, 837, 838, 844, 845, 846, 847, 848, 850, 853, 858, 861, 863, 866, 868, 869, 878, 882], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 62, 63, 831, 835, 838, 845, 854], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 58, 59, 60, 70, 74, 75, 93, 97, 98, 375, 385, 389, 400, 442, 546, 651, 652, 656, 678, 681, 687, 688, 699, 744, 838, 839, 841, 861, 870], "r": [0, 4, 5, 21, 22, 23, 58, 59, 70, 75, 87, 93, 98, 110, 111, 362, 377, 385, 387, 631, 650, 652, 654, 699, 731, 838, 839, 841, 858, 861, 871], "requir": [0, 5, 8, 9, 10, 11, 23, 36, 37, 39, 40, 42, 43, 49, 58, 59, 60, 63, 69, 70, 87, 92, 93, 287, 300, 304, 389, 391, 442, 443, 497, 638, 647, 650, 652, 654, 687, 688, 689, 728, 794, 802, 807, 825, 833, 837, 838, 843, 845, 847, 848, 849, 850, 851, 852, 854, 855, 857, 860, 861, 862, 863, 864, 866, 868, 870, 871, 874, 877, 882], "txt": [0, 4, 5, 8, 9, 21, 22, 59, 71, 838, 842, 845, 871], "16": [0, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26, 37, 39, 40, 56, 58, 60, 69, 70, 71, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 102, 115, 116, 181, 247, 276, 296, 303, 359, 362, 366, 385, 388, 391, 400, 407, 408, 410, 416, 420, 421, 425, 426, 431, 435, 470, 487, 537, 543, 560, 563, 585, 606, 607, 640, 645, 647, 649, 650, 651, 652, 654, 656, 658, 659, 662, 673, 675, 682, 686, 689, 690, 697, 699, 703, 731, 744, 757, 758, 759, 766, 776, 777, 794, 797, 839, 848, 850], "mb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 58, 60, 63, 847], "25": [0, 14, 23, 26, 56, 58, 59, 60, 69, 70, 71, 75, 76, 79, 83, 86, 92, 93, 94, 97, 98, 101, 102, 106, 115, 116, 131, 150, 236, 237, 247, 253, 255, 266, 271, 286, 291, 294, 296, 299, 300, 301, 306, 328, 382, 390, 400, 431, 466, 469, 537, 546, 574, 575, 591, 606, 644, 647, 649, 652, 653, 656, 657, 662, 665, 682, 686, 691, 707, 712, 737, 744, 748, 755, 757, 758, 759, 776, 777, 779, 784, 840, 846, 858], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 162, 165, 166, 167, 168, 172, 176, 177, 178, 181, 186, 188, 193, 209, 210, 214, 218, 219, 221, 222, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 338, 339, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 588, 590, 591, 595, 604, 605, 606, 607, 608, 609, 611, 613, 614, 615, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 797, 799, 802, 806, 809, 810, 811, 812, 813, 814, 815, 819, 824, 825, 829, 831, 834, 835, 838, 839, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 863, 866, 868, 869, 870, 877, 878, 880], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 56, 59, 61, 62, 63, 66, 70, 71, 72, 75, 83, 93, 95, 98, 106, 135, 152, 158, 159, 179, 180, 209, 212, 213, 225, 260, 295, 342, 347, 348, 349, 351, 362, 364, 370, 374, 376, 382, 385, 386, 388, 389, 390, 391, 394, 395, 400, 403, 404, 411, 417, 422, 433, 441, 445, 453, 462, 467, 469, 470, 486, 488, 489, 497, 515, 516, 517, 526, 536, 546, 564, 565, 571, 585, 608, 609, 630, 632, 633, 634, 635, 637, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 656, 662, 666, 668, 670, 672, 678, 685, 693, 695, 702, 703, 709, 748, 782, 784, 795, 809, 810, 811, 812, 813, 814, 815, 819, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 877, 878, 879, 880, 882, 883, 884], "eta": [0, 10, 11, 15, 16, 17, 18, 58, 60, 63], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 44, 45, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 142, 145, 147, 148, 149, 150, 151, 154, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 176, 178, 181, 182, 186, 188, 193, 206, 209, 211, 214, 219, 220, 221, 222, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 398, 400, 407, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 431, 432, 433, 435, 438, 439, 440, 442, 443, 444, 447, 448, 450, 453, 454, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 480, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 553, 554, 555, 558, 559, 560, 562, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 586, 588, 590, 591, 595, 600, 604, 605, 606, 607, 609, 611, 613, 614, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 797, 799, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 819, 824, 825, 829, 831, 835, 838, 839, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 863, 864, 868, 870, 877, 878], "00": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 26, 58, 60, 63, 70, 71, 75, 93, 94, 98, 258, 325, 356, 357, 382, 388, 410, 416, 420, 421, 563, 607, 647, 649, 652, 689, 699, 794, 854, 863], "44": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 56, 60, 69, 70, 79, 92, 93, 102, 239, 286, 296, 300, 301, 352, 385, 388, 409, 410, 647, 651, 652, 656, 659, 662, 674, 697, 744, 757, 758, 766, 777], "6": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 39, 40, 42, 44, 45, 56, 58, 59, 60, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 115, 116, 123, 125, 130, 135, 140, 141, 148, 149, 152, 153, 156, 162, 166, 167, 168, 176, 178, 186, 232, 233, 235, 236, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 281, 283, 284, 285, 286, 288, 289, 290, 292, 293, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 309, 310, 312, 314, 316, 318, 319, 320, 322, 323, 324, 325, 326, 332, 343, 348, 349, 351, 353, 362, 363, 365, 366, 367, 369, 376, 380, 382, 385, 386, 388, 389, 390, 391, 396, 398, 400, 410, 412, 415, 416, 420, 421, 425, 431, 432, 433, 435, 438, 441, 444, 445, 449, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 481, 483, 487, 488, 492, 493, 496, 497, 498, 503, 504, 506, 507, 510, 513, 514, 524, 526, 527, 529, 534, 536, 537, 538, 539, 541, 543, 545, 546, 552, 554, 555, 558, 559, 560, 566, 567, 574, 575, 576, 591, 605, 606, 607, 608, 609, 611, 615, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 681, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 747, 748, 754, 755, 756, 757, 758, 759, 761, 762, 763, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 794, 809, 835, 838, 842, 844, 846, 847, 848, 850, 853, 858, 863, 866, 868], "kb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 58, 60, 63], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 145, 147, 149, 150, 152, 153, 154, 155, 156, 160, 161, 162, 165, 166, 167, 168, 172, 176, 178, 186, 188, 193, 207, 209, 210, 221, 224, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 405, 407, 408, 409, 410, 412, 415, 416, 417, 420, 421, 425, 426, 427, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 456, 459, 461, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 518, 519, 520, 521, 524, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 590, 591, 604, 605, 606, 607, 611, 614, 615, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 797, 810, 824, 825, 829, 831, 835, 837, 838, 842, 843, 844, 846, 847, 848, 850, 852, 853, 856, 858, 861, 863, 868, 869, 877, 878], "45": [0, 5, 10, 11, 14, 15, 16, 17, 18, 56, 58, 60, 69, 70, 83, 92, 93, 95, 97, 102, 116, 237, 241, 253, 296, 297, 356, 357, 370, 385, 388, 400, 410, 420, 431, 537, 543, 629, 635, 647, 650, 652, 654, 662, 697, 726, 758, 759, 777, 794], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 37, 39, 40, 44, 45, 56, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 110, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 139, 140, 141, 147, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 166, 167, 168, 172, 176, 178, 186, 188, 193, 210, 219, 224, 227, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 314, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 343, 346, 348, 349, 351, 353, 355, 357, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 396, 398, 400, 407, 408, 409, 410, 412, 413, 415, 416, 417, 420, 421, 425, 426, 427, 430, 431, 432, 433, 435, 438, 441, 442, 444, 445, 447, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 484, 487, 488, 491, 492, 493, 496, 497, 498, 503, 504, 505, 506, 507, 508, 510, 513, 514, 519, 520, 521, 524, 526, 527, 529, 534, 536, 537, 538, 539, 540, 541, 543, 546, 552, 553, 554, 555, 558, 559, 560, 561, 563, 566, 567, 569, 572, 574, 575, 576, 590, 591, 595, 606, 607, 608, 609, 611, 615, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 706, 707, 708, 711, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 739, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 795, 796, 797, 810, 824, 825, 831, 834, 837, 838, 839, 842, 844, 846, 847, 848, 850, 852, 853, 855, 858, 861, 863, 877], "143": [0, 10, 11, 15, 16, 17, 18, 75, 92, 116, 303, 647, 652, 690, 850], "8": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 56, 58, 60, 63, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 115, 116, 123, 138, 148, 149, 153, 156, 162, 171, 173, 174, 175, 178, 186, 211, 228, 236, 238, 239, 243, 244, 247, 248, 249, 251, 257, 260, 264, 265, 271, 272, 273, 277, 278, 281, 282, 284, 285, 286, 291, 292, 295, 296, 297, 300, 301, 304, 305, 306, 310, 316, 318, 319, 320, 322, 323, 325, 326, 343, 347, 359, 362, 364, 365, 366, 369, 376, 380, 382, 385, 388, 389, 390, 391, 400, 407, 408, 409, 410, 415, 416, 420, 421, 425, 426, 430, 431, 435, 438, 441, 449, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 481, 483, 487, 492, 493, 503, 504, 507, 508, 509, 510, 513, 514, 524, 526, 538, 541, 542, 546, 552, 553, 559, 560, 563, 566, 570, 574, 575, 576, 578, 579, 582, 585, 590, 591, 595, 605, 606, 607, 608, 609, 629, 632, 634, 636, 637, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 665, 669, 670, 672, 673, 674, 675, 678, 684, 685, 686, 688, 689, 690, 692, 693, 694, 697, 699, 700, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 717, 721, 728, 729, 731, 737, 744, 748, 756, 757, 758, 759, 761, 766, 767, 769, 771, 772, 774, 776, 777, 779, 781, 783, 784, 794, 797, 810, 838, 846, 847, 850, 863], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 35, 37, 39, 40, 56, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 125, 126, 127, 128, 139, 140, 141, 150, 153, 154, 172, 178, 181, 211, 233, 236, 239, 243, 244, 246, 247, 248, 249, 251, 253, 254, 255, 256, 257, 259, 260, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 286, 288, 289, 290, 292, 293, 296, 297, 298, 300, 303, 304, 306, 307, 309, 310, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 331, 332, 343, 347, 351, 353, 354, 362, 363, 364, 366, 368, 369, 376, 380, 382, 385, 386, 388, 389, 390, 391, 396, 400, 407, 408, 409, 410, 415, 416, 420, 421, 425, 430, 431, 432, 433, 435, 438, 441, 454, 466, 467, 468, 469, 471, 472, 475, 476, 477, 481, 483, 487, 492, 493, 496, 497, 503, 504, 506, 507, 509, 510, 513, 514, 524, 526, 527, 534, 537, 538, 540, 541, 546, 552, 554, 555, 559, 560, 563, 574, 575, 576, 583, 590, 591, 606, 609, 629, 630, 632, 633, 634, 635, 636, 637, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 670, 672, 673, 674, 675, 681, 683, 684, 685, 686, 688, 689, 690, 692, 694, 697, 699, 700, 702, 703, 704, 706, 707, 708, 711, 712, 713, 717, 720, 721, 726, 728, 729, 731, 736, 737, 744, 748, 755, 756, 757, 758, 759, 761, 766, 767, 769, 771, 772, 774, 775, 776, 777, 779, 781, 783, 784, 794, 838, 839, 844, 846, 847, 850, 856, 859, 863], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 43, 56, 58, 60, 63, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 81, 82, 83, 86, 90, 92, 93, 94, 95, 97, 98, 100, 102, 104, 105, 106, 115, 116, 123, 139, 140, 141, 153, 171, 172, 173, 174, 175, 178, 181, 234, 236, 238, 239, 242, 243, 244, 247, 248, 253, 254, 255, 260, 267, 273, 274, 275, 277, 281, 282, 284, 285, 286, 289, 291, 292, 296, 297, 300, 301, 302, 307, 313, 316, 317, 318, 355, 358, 362, 368, 369, 376, 380, 385, 386, 388, 390, 391, 398, 400, 407, 408, 409, 410, 415, 416, 420, 421, 425, 426, 430, 431, 435, 449, 466, 468, 470, 471, 475, 476, 477, 483, 487, 492, 503, 504, 505, 506, 508, 510, 513, 524, 526, 529, 538, 555, 559, 560, 561, 563, 566, 574, 575, 578, 579, 582, 590, 591, 605, 606, 608, 629, 630, 631, 635, 636, 641, 644, 645, 647, 649, 650, 651, 652, 654, 656, 658, 659, 660, 661, 662, 665, 666, 667, 673, 674, 675, 683, 684, 686, 688, 689, 690, 692, 693, 694, 697, 699, 700, 702, 703, 704, 706, 707, 708, 717, 721, 725, 726, 728, 729, 731, 736, 737, 742, 744, 747, 748, 756, 757, 758, 759, 761, 766, 767, 769, 771, 772, 774, 776, 777, 779, 781, 783, 784, 794, 814, 846, 848, 850, 858, 863], "756": [0, 10, 11, 15, 16, 17, 18], "21": [0, 4, 5, 10, 11, 15, 16, 23, 26, 56, 58, 60, 63, 69, 70, 71, 79, 89, 92, 93, 97, 98, 102, 106, 115, 151, 181, 236, 239, 241, 247, 271, 286, 317, 369, 388, 389, 390, 391, 400, 407, 410, 420, 425, 431, 433, 435, 439, 465, 480, 537, 591, 644, 645, 647, 649, 652, 656, 662, 686, 697, 701, 742, 757, 758, 775, 776, 777, 852, 858], "116": [0, 10, 11, 15, 16, 17, 18], "23": [0, 5, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 69, 70, 75, 79, 89, 92, 93, 94, 97, 102, 149, 248, 251, 268, 269, 270, 293, 295, 296, 297, 299, 306, 351, 352, 385, 388, 391, 400, 407, 408, 410, 420, 425, 426, 427, 431, 435, 480, 537, 543, 644, 647, 651, 652, 656, 659, 670, 672, 686, 690, 693, 701, 703, 704, 737, 744, 748, 757, 758, 759, 766, 831, 847, 863, 868], "29": [0, 5, 8, 9, 23, 26, 56, 58, 60, 63, 75, 92, 94, 95, 97, 102, 241, 400, 431, 537, 559, 560, 631, 635, 647, 649, 650, 652, 690, 757, 758, 759], "823": 0, "46": [0, 8, 9, 14, 23, 56, 58, 60, 70, 79, 93, 97, 102, 151, 276, 297, 327, 382, 388, 408, 426, 427, 644, 647, 656, 737, 757, 758], "14": [0, 4, 5, 8, 9, 12, 13, 19, 20, 21, 22, 23, 56, 58, 59, 60, 67, 69, 70, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 102, 165, 178, 181, 234, 239, 241, 248, 252, 278, 282, 286, 292, 299, 307, 358, 388, 389, 391, 400, 407, 408, 409, 410, 420, 425, 427, 430, 431, 432, 435, 439, 445, 446, 481, 483, 487, 492, 513, 537, 606, 629, 645, 647, 649, 650, 651, 652, 654, 656, 660, 662, 665, 666, 668, 670, 672, 674, 686, 688, 690, 697, 704, 706, 708, 731, 748, 757, 758, 759, 767, 776, 777, 846, 850, 863], "731": [0, 64, 129], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 35, 37, 39, 40, 44, 45, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 162, 165, 166, 167, 168, 172, 176, 178, 186, 188, 193, 209, 210, 211, 214, 217, 219, 221, 224, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 332, 333, 334, 341, 343, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 398, 400, 404, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 420, 421, 422, 425, 426, 427, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 454, 456, 459, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 518, 519, 521, 524, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 588, 590, 591, 595, 604, 605, 606, 607, 608, 609, 611, 615, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 796, 797, 806, 809, 810, 819, 824, 825, 829, 831, 835, 838, 839, 842, 844, 845, 846, 847, 848, 850, 852, 853, 855, 856, 858, 859, 860, 861, 863, 868, 869, 870, 877, 878, 880], "121": 0, "56": [0, 21, 22, 26, 56, 58, 69, 70, 74, 79, 92, 93, 97, 151, 286, 300, 303, 306, 388, 410, 420, 629, 644, 647, 650, 651, 652, 656, 662, 666, 668, 670, 672, 675, 697, 736, 758, 777, 850], "124": [0, 651, 675], "196": [0, 97, 651, 675], "166": [0, 86, 123, 641], "99": [0, 23, 26, 56, 69, 70, 72, 90, 92, 102, 148, 235, 250, 373, 385, 606, 633, 644, 647, 649, 650, 656, 662, 740, 748, 758, 777], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 33, 35, 37, 39, 40, 56, 58, 59, 60, 63, 69, 70, 71, 74, 75, 79, 83, 92, 93, 94, 97, 98, 100, 102, 106, 116, 236, 240, 243, 248, 258, 295, 296, 302, 366, 385, 388, 389, 391, 407, 408, 420, 425, 426, 430, 431, 435, 444, 480, 481, 483, 487, 492, 494, 513, 537, 538, 553, 559, 560, 566, 575, 591, 647, 649, 651, 652, 653, 654, 656, 658, 659, 660, 662, 665, 666, 674, 675, 686, 689, 690, 691, 692, 693, 697, 701, 702, 703, 704, 706, 708, 711, 721, 726, 727, 729, 731, 742, 744, 754, 757, 758, 759, 766, 767, 775, 776, 777, 784, 846, 847, 848, 850, 858], "71": [0, 56, 69, 92, 97, 252, 292, 431, 647], "To": [0, 1, 8, 9, 21, 22, 23, 24, 25, 26, 27, 29, 33, 37, 39, 40, 44, 45, 56, 59, 60, 61, 111, 260, 390, 469, 600, 647, 649, 809, 837, 838, 842, 843, 844, 845, 848, 850, 852, 853, 854, 856, 857, 860, 861, 862, 863, 864, 877, 878], "ensur": [0, 1, 21, 22, 24, 25, 27, 29, 37, 39, 40, 70, 71, 93, 94, 388, 389, 425, 426, 427, 460, 576, 649, 789, 831, 834, 837, 838, 839, 843, 848, 849, 850, 852, 854, 855, 857, 859, 860, 861, 862, 863, 864, 882, 884], "begin": [0, 10, 11, 70, 93, 297, 390, 391, 465, 481, 497, 499, 500, 501, 502, 647, 656, 736, 747, 794, 838, 842, 847, 861], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 56, 57, 58, 60, 61, 62, 63, 69, 70, 71, 83, 92, 93, 94, 160, 189, 207, 212, 237, 297, 320, 341, 382, 400, 536, 543, 552, 576, 606, 609, 613, 644, 645, 646, 647, 649, 652, 662, 700, 777, 789, 791, 802, 819, 824, 825, 831, 836, 837, 838, 839, 842, 843, 844, 847, 848, 849, 852, 853, 855, 859, 861, 863, 864, 866, 868, 869, 871, 872, 874, 877, 878, 880], "handl": [0, 4, 5, 12, 13, 56, 58, 64, 68, 69, 70, 86, 87, 91, 92, 93, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 206, 207, 208, 209, 210, 214, 219, 220, 228, 232, 238, 250, 275, 277, 291, 297, 298, 303, 304, 308, 313, 314, 316, 380, 391, 480, 507, 641, 646, 647, 652, 662, 706, 781, 783, 806, 814, 832, 834, 841, 846, 847, 848, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 884], "its": [0, 1, 8, 9, 23, 24, 25, 33, 35, 44, 45, 47, 50, 57, 58, 60, 65, 67, 70, 77, 87, 90, 93, 94, 100, 113, 125, 128, 131, 136, 166, 171, 172, 173, 174, 175, 226, 253, 286, 305, 315, 380, 388, 391, 400, 428, 436, 510, 512, 539, 563, 612, 641, 643, 645, 646, 647, 649, 652, 654, 656, 692, 720, 724, 725, 729, 742, 791, 825, 837, 838, 843, 846, 847, 848, 849, 851, 852, 853, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 870, 872, 874, 875, 878, 882, 884], "backend": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 35, 36, 37, 39, 40, 45, 47, 48, 50, 65, 66, 70, 71, 75, 87, 93, 94, 98, 115, 142, 179, 180, 183, 205, 212, 213, 215, 218, 229, 348, 349, 385, 389, 441, 443, 543, 552, 564, 565, 573, 576, 577, 587, 594, 609, 612, 644, 645, 646, 649, 652, 700, 702, 789, 791, 792, 794, 795, 796, 799, 801, 802, 807, 811, 812, 814, 818, 819, 835, 836, 838, 839, 841, 842, 843, 847, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 865, 866, 869, 872, 877, 878, 880, 882], "jax": [0, 3, 8, 9, 21, 22, 23, 31, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 50, 56, 58, 62, 64, 69, 70, 71, 81, 86, 92, 93, 94, 123, 124, 125, 126, 127, 128, 129, 130, 131, 222, 304, 308, 313, 314, 316, 362, 380, 385, 400, 546, 576, 609, 628, 641, 646, 647, 649, 660, 767, 768, 769, 770, 802, 806, 819, 831, 835, 836, 837, 838, 839, 842, 844, 848, 849, 852, 853, 855, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 874, 875, 877, 878, 880, 883], "capabl": [0, 8, 9, 31, 39, 45, 863, 866], "optim": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 33, 37, 40, 44, 45, 58, 60, 61, 63, 70, 72, 93, 95, 325, 382, 390, 469, 470, 550, 637, 649, 650, 655, 733, 734, 735, 809, 825, 831, 848, 859, 866, 874, 875, 877, 882, 883, 884], "frontend": [0, 26, 593, 649, 791, 792, 795, 799, 802, 836, 839, 841, 847, 848, 852, 853, 858, 862, 863, 866, 869, 872, 877, 882], "xgb_frontend": 0, "access": [0, 1, 39, 44, 45, 87, 831, 837, 838, 839, 847, 848, 854, 859, 860, 877, 882], "compat": [0, 8, 9, 15, 16, 34, 40, 46, 50, 56, 63, 69, 70, 75, 77, 80, 83, 84, 92, 93, 98, 100, 103, 106, 107, 115, 116, 167, 236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 264, 265, 272, 273, 278, 280, 282, 283, 286, 289, 291, 295, 302, 307, 348, 349, 385, 645, 647, 652, 654, 659, 662, 663, 683, 695, 698, 701, 704, 708, 709, 724, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 829, 838, 844, 855, 860, 861, 864, 868, 870], "manner": [0, 35, 45, 47, 57, 65, 88, 656, 748, 838, 848, 849, 851, 856, 860, 864, 870], "sklearn": [0, 26], "model_select": [0, 26], "timeit": [0, 19, 20, 24, 25, 26, 35, 44, 45, 61, 63], "oper": [0, 8, 9, 33, 34, 37, 39, 40, 44, 45, 46, 50, 57, 60, 66, 67, 69, 70, 71, 74, 75, 83, 87, 89, 90, 92, 93, 94, 97, 98, 106, 116, 131, 150, 151, 193, 223, 231, 236, 238, 247, 250, 253, 260, 275, 277, 286, 287, 291, 295, 298, 303, 315, 323, 343, 344, 345, 377, 380, 382, 387, 388, 390, 391, 402, 403, 404, 405, 407, 408, 409, 415, 416, 417, 421, 425, 426, 427, 428, 430, 431, 433, 435, 436, 465, 503, 505, 552, 559, 560, 561, 609, 641, 644, 645, 646, 647, 649, 651, 652, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 693, 704, 706, 779, 781, 783, 794, 797, 810, 825, 829, 837, 838, 841, 842, 843, 846, 848, 849, 850, 851, 852, 856, 859, 860, 863, 866, 868, 872, 878, 882, 883, 884], "xgb": 0, "functool": [0, 26, 58, 852, 860], "higher": [0, 26, 70, 93, 389, 391, 400, 446, 458, 464, 475, 476, 477, 546, 809, 848, 859, 868, 869, 870, 882, 883], "order": [0, 4, 5, 36, 48, 50, 58, 61, 63, 66, 70, 71, 74, 75, 77, 81, 82, 87, 93, 97, 98, 100, 104, 105, 110, 115, 116, 140, 141, 152, 160, 241, 260, 303, 341, 362, 382, 385, 388, 389, 391, 394, 398, 434, 439, 442, 443, 444, 445, 446, 450, 456, 458, 461, 464, 487, 488, 489, 494, 495, 508, 515, 516, 517, 520, 529, 644, 647, 651, 652, 654, 655, 659, 660, 661, 665, 666, 667, 668, 669, 670, 673, 687, 688, 693, 702, 703, 707, 709, 721, 724, 733, 734, 765, 767, 768, 769, 770, 771, 773, 774, 791, 813, 815, 825, 837, 838, 839, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 870, 882, 883, 884], "callabl": [0, 21, 22, 62, 70, 71, 85, 93, 94, 97, 108, 135, 136, 138, 179, 180, 212, 213, 226, 376, 378, 379, 386, 387, 388, 391, 431, 434, 436, 474, 497, 549, 553, 558, 560, 564, 565, 586, 615, 628, 632, 634, 640, 643, 645, 646, 649, 650, 655, 656, 733, 734, 735, 742, 743, 744, 746, 747, 748, 749, 789, 792, 802, 814, 826, 829, 846, 852, 858, 860, 868, 876, 877, 878, 880], "object": [0, 5, 14, 26, 33, 40, 44, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 119, 120, 142, 146, 147, 157, 169, 178, 181, 189, 192, 227, 285, 523, 571, 587, 631, 644, 645, 646, 649, 650, 656, 658, 739, 740, 741, 743, 744, 745, 751, 752, 753, 754, 761, 789, 791, 792, 799, 800, 801, 807, 808, 810, 811, 812, 819, 824, 843, 844, 846, 847, 856, 857, 860, 861, 863, 866, 869, 877, 878, 879, 880, 882], "tqdm_notebook": [0, 26], "tqdm": [0, 5, 8, 9, 10, 11, 26, 37, 39, 40, 58, 60], "progress": [0, 652, 707, 834, 838, 839, 869, 875], "bar": [0, 838, 853], "jupyt": [0, 1, 5], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 21, 22, 26, 44, 45, 58, 61, 878], "step": [0, 1, 2, 8, 9, 10, 11, 23, 28, 29, 30, 41, 44, 45, 56, 58, 59, 60, 70, 72, 89, 93, 95, 139, 150, 388, 391, 434, 436, 491, 629, 630, 633, 635, 636, 637, 644, 650, 655, 733, 734, 735, 814, 829, 831, 837, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 853, 858, 860, 863, 868, 882], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 44, 45, 46, 49, 50, 51, 56, 57, 58, 59, 60, 61, 63, 66, 70, 92, 93, 94, 140, 141, 142, 153, 189, 266, 270, 320, 388, 389, 416, 421, 437, 606, 644, 645, 647, 649, 656, 742, 791, 819, 824, 825, 831, 837, 843, 848, 849, 852, 855, 859, 860, 861, 863, 864, 866, 868, 872, 880], "pd": [0, 26, 60], "set_backend": [0, 4, 5, 6, 7, 12, 13, 21, 22, 26, 33, 34, 35, 36, 37, 38, 44, 45, 47, 48, 49, 50, 51, 57, 59, 60, 61, 69, 71, 85, 92, 94, 180, 189, 207, 208, 212, 222, 224, 229, 237, 552, 576, 645, 646, 649, 652, 655, 700, 734, 735, 819, 831, 842, 844, 848, 849, 856, 857, 858, 868, 877, 878, 880], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 36, 39, 44, 45, 58, 59, 61, 87, 656, 749, 831, 838, 842, 845, 847, 854, 861, 878, 883], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 34, 36, 37, 39, 40, 44, 45, 58, 60, 65, 71, 72, 87, 94, 95, 110, 391, 503, 576, 590, 591, 594, 595, 618, 629, 630, 633, 635, 636, 637, 649, 650, 651, 655, 656, 674, 677, 733, 734, 735, 743, 744, 748, 753, 754, 802, 807, 813, 814, 819, 825, 831, 837, 838, 839, 841, 842, 843, 846, 847, 848, 850, 855, 857, 858, 860, 861, 863, 866, 868, 870], "jax_enable_x64": [0, 6, 7, 12, 13, 19, 20, 24, 25, 26, 36, 39, 44, 45, 831], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 36, 37, 39, 40, 42, 44, 45, 49, 50, 51, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 169, 176, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 193, 205, 209, 210, 212, 213, 217, 220, 221, 223, 227, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 382, 385, 386, 388, 389, 390, 391, 394, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 431, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 483, 484, 485, 487, 488, 489, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 528, 529, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 590, 591, 592, 595, 598, 599, 601, 602, 604, 605, 606, 607, 609, 611, 613, 614, 616, 621, 622, 624, 625, 627, 630, 631, 633, 635, 636, 637, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 743, 744, 746, 747, 748, 749, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 799, 810, 811, 812, 813, 814, 816, 819, 821, 822, 824, 825, 829, 831, 835, 838, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 860, 861, 863, 865, 866, 868, 869, 877, 878], "from": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 106, 107, 108, 110, 111, 113, 116, 139, 141, 144, 146, 147, 148, 149, 152, 153, 156, 160, 162, 168, 186, 192, 193, 209, 214, 219, 225, 226, 252, 260, 261, 288, 292, 293, 300, 304, 325, 326, 332, 335, 341, 343, 344, 345, 352, 355, 359, 360, 362, 363, 375, 379, 382, 385, 387, 388, 389, 390, 391, 395, 400, 412, 413, 414, 428, 433, 434, 453, 460, 465, 466, 470, 480, 483, 492, 497, 504, 506, 507, 509, 510, 512, 513, 522, 523, 524, 525, 526, 537, 538, 558, 566, 567, 569, 589, 600, 611, 628, 630, 631, 635, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 662, 663, 665, 673, 674, 683, 686, 702, 706, 707, 708, 718, 721, 724, 727, 733, 734, 735, 737, 748, 749, 750, 756, 757, 758, 759, 763, 766, 767, 769, 775, 776, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 802, 807, 809, 810, 811, 812, 814, 819, 825, 829, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884], "classification_report": [0, 26], "train_test_split": [0, 26], "usr": [0, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 58, 59, 60, 63, 838], "local": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 45, 49, 50, 51, 58, 59, 60, 63, 394, 520, 571, 649, 832, 838, 842, 845, 853, 856, 861, 863], "lib": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26, 37, 39, 40, 58, 59, 60, 63], "python3": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 37, 39, 40, 44, 58, 60, 63, 838, 839], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 56, 58, 60, 62, 63, 66, 69, 70, 71, 72, 74, 75, 79, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 139, 149, 150, 151, 235, 243, 244, 247, 248, 251, 258, 263, 265, 271, 273, 275, 286, 292, 299, 300, 305, 314, 347, 348, 349, 352, 356, 357, 359, 361, 362, 364, 365, 366, 368, 369, 373, 376, 385, 388, 391, 400, 407, 408, 409, 410, 420, 425, 426, 430, 431, 432, 433, 435, 465, 477, 480, 483, 487, 492, 503, 504, 513, 534, 537, 538, 541, 543, 546, 559, 560, 561, 563, 566, 567, 569, 574, 575, 583, 591, 595, 600, 606, 608, 620, 623, 635, 644, 647, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 665, 666, 668, 674, 684, 686, 690, 691, 692, 693, 694, 697, 702, 703, 704, 706, 708, 721, 726, 727, 728, 729, 731, 742, 744, 747, 755, 756, 757, 758, 759, 765, 767, 773, 775, 776, 777, 778, 780, 781, 783, 784, 794, 796, 814, 831, 835, 838, 842, 846, 847, 848, 850, 853, 858, 861, 863, 868, 880], "dist": [0, 10, 11, 12, 13, 15, 16, 17, 18, 23, 58, 59, 60, 63], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 37, 39, 40, 45, 58, 59, 60, 63, 823, 835, 838, 847, 860, 870, 871, 882], "except": [0, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 59, 60, 63, 70, 71, 77, 79, 84, 87, 93, 94, 98, 102, 107, 167, 348, 349, 354, 373, 385, 391, 395, 400, 481, 506, 510, 523, 542, 543, 558, 576, 593, 609, 615, 645, 649, 652, 654, 658, 659, 663, 698, 718, 720, 728, 757, 758, 759, 765, 785, 786, 789, 792, 796, 839, 840, 841, 842, 843, 847, 848, 849, 851, 853, 855, 859, 860, 864, 865, 866, 870], "py": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 58, 60, 63, 106, 389, 460, 777, 819, 824, 831, 837, 838, 839, 842, 844, 847, 848, 849, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 868, 869], "383": [0, 10, 11, 15, 16, 17, 18, 34], "userwarn": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 63], "current": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 44, 45, 58, 59, 65, 70, 71, 87, 93, 116, 135, 179, 180, 183, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 219, 221, 389, 391, 441, 442, 497, 506, 564, 565, 568, 571, 573, 577, 588, 589, 609, 643, 645, 646, 649, 652, 656, 687, 736, 746, 747, 791, 795, 811, 812, 819, 820, 825, 828, 829, 831, 833, 837, 838, 839, 842, 844, 846, 847, 848, 849, 852, 853, 854, 856, 859, 860, 861, 862, 863, 866, 870, 878, 882], "39": [0, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 56, 58, 59, 60, 61, 63, 64, 69, 70, 75, 79, 86, 92, 93, 95, 98, 102, 125, 239, 274, 276, 278, 308, 309, 312, 380, 388, 400, 408, 410, 427, 430, 537, 629, 641, 647, 650, 652, 662, 690, 697, 758, 777], "doe": [0, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 44, 57, 59, 69, 70, 71, 77, 87, 92, 93, 100, 110, 160, 287, 289, 297, 341, 382, 389, 390, 400, 401, 442, 469, 470, 542, 543, 547, 576, 644, 647, 649, 652, 654, 687, 726, 789, 825, 835, 837, 839, 841, 844, 847, 848, 850, 851, 853, 854, 855, 856, 859, 860, 861, 863, 866, 868, 869, 870, 872, 878, 882, 883], "support": [0, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 44, 47, 59, 68, 70, 71, 75, 91, 93, 94, 98, 160, 179, 183, 205, 212, 227, 236, 253, 260, 281, 282, 286, 296, 315, 341, 362, 380, 382, 385, 389, 391, 424, 442, 451, 506, 552, 564, 573, 576, 577, 594, 609, 644, 645, 646, 647, 649, 651, 652, 675, 687, 688, 689, 693, 702, 709, 789, 795, 802, 814, 819, 820, 824, 829, 833, 835, 837, 838, 839, 842, 843, 845, 849, 850, 851, 853, 855, 856, 858, 859, 861, 863, 864, 866, 868, 869, 871, 872, 877, 882, 884], "inplac": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 65, 71, 87, 94, 110, 113, 550, 552, 573, 576, 577, 594, 595, 649, 656, 743, 744, 748, 753, 754, 801, 802, 807, 814, 841, 843, 850, 853, 855, 857, 860, 866], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 44, 45, 65, 66, 67, 68, 71, 88, 91, 94, 115, 119, 153, 163, 164, 170, 171, 172, 173, 174, 175, 189, 192, 207, 208, 209, 210, 220, 228, 232, 576, 578, 582, 589, 594, 612, 644, 645, 646, 649, 791, 802, 807, 819, 831, 835, 837, 848, 849, 852, 853, 856, 857, 859, 860, 861, 863, 868, 869, 872, 877, 878, 880], "would": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 34, 36, 37, 39, 40, 42, 44, 45, 48, 50, 52, 60, 66, 68, 70, 89, 91, 93, 100, 126, 130, 141, 227, 388, 391, 416, 421, 475, 476, 483, 485, 487, 488, 489, 496, 501, 513, 641, 646, 720, 721, 722, 724, 726, 727, 729, 731, 796, 806, 810, 831, 832, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 853, 855, 857, 859, 860, 861, 863, 864, 866, 867, 868, 870, 875, 878, 882], "quietli": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40], "new": [0, 1, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 27, 29, 34, 37, 39, 40, 42, 44, 45, 46, 60, 62, 65, 70, 71, 72, 77, 78, 87, 89, 93, 94, 95, 98, 100, 101, 143, 146, 148, 149, 154, 155, 156, 161, 162, 199, 222, 242, 288, 290, 294, 347, 352, 364, 369, 385, 388, 391, 400, 424, 473, 481, 482, 496, 503, 510, 543, 559, 560, 561, 563, 566, 567, 569, 590, 591, 594, 596, 603, 606, 607, 613, 630, 633, 635, 636, 637, 644, 645, 646, 647, 649, 650, 651, 654, 656, 657, 678, 690, 697, 720, 724, 728, 741, 753, 754, 755, 807, 810, 813, 814, 819, 825, 832, 834, 837, 838, 839, 840, 841, 843, 844, 846, 847, 848, 850, 851, 853, 854, 857, 859, 860, 861, 862, 863, 864, 866, 872, 874, 876, 878, 879], "when": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 59, 61, 65, 66, 67, 69, 70, 75, 76, 79, 80, 83, 87, 89, 90, 92, 93, 98, 99, 102, 103, 106, 116, 154, 165, 236, 253, 258, 260, 276, 286, 304, 305, 313, 348, 349, 380, 385, 388, 389, 390, 394, 395, 400, 411, 424, 436, 443, 447, 458, 464, 465, 470, 515, 517, 523, 543, 546, 576, 592, 600, 607, 644, 645, 647, 649, 651, 652, 653, 654, 656, 658, 659, 662, 664, 676, 678, 695, 700, 711, 712, 713, 724, 747, 748, 757, 758, 759, 762, 763, 765, 766, 778, 780, 782, 784, 794, 797, 809, 810, 811, 812, 813, 819, 829, 831, 832, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 869, 870, 871, 877, 878, 882], "lead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 75, 87, 98, 116, 260, 389, 453, 594, 647, 649, 652, 699, 702, 796, 847, 848, 850, 862, 864, 870, 874], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 66, 70, 77, 89, 93, 100, 141, 152, 208, 220, 226, 228, 232, 391, 400, 475, 476, 483, 485, 487, 488, 489, 496, 513, 543, 589, 594, 618, 644, 646, 649, 651, 654, 676, 677, 720, 721, 722, 724, 726, 727, 729, 731, 825, 829, 847, 848, 849, 859, 860, 866, 868, 870, 878, 882], "overhead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 35, 37, 39, 40, 44, 45, 47, 870, 878], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 34, 35, 37, 39, 40, 42, 44, 47, 49, 51, 56, 57, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 81, 82, 83, 87, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 104, 106, 110, 111, 112, 113, 114, 115, 129, 139, 144, 149, 151, 152, 154, 156, 158, 159, 160, 162, 165, 166, 167, 178, 181, 226, 233, 234, 235, 236, 238, 240, 244, 246, 249, 253, 259, 260, 266, 286, 288, 290, 293, 295, 296, 297, 306, 314, 326, 340, 341, 342, 343, 344, 345, 348, 349, 351, 359, 375, 380, 382, 385, 388, 389, 390, 391, 394, 396, 398, 400, 407, 408, 409, 425, 426, 427, 428, 430, 431, 432, 433, 435, 442, 447, 448, 458, 459, 460, 461, 462, 464, 465, 467, 470, 480, 482, 497, 498, 506, 507, 510, 515, 517, 527, 529, 534, 535, 536, 537, 538, 539, 540, 546, 583, 639, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 681, 682, 683, 684, 686, 687, 688, 689, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 718, 721, 722, 724, 725, 727, 728, 733, 734, 749, 759, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 791, 794, 795, 796, 802, 810, 824, 831, 838, 839, 843, 844, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 878, 880], "appli": [0, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 34, 37, 39, 40, 44, 45, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 385, 386, 388, 389, 390, 391, 394, 400, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 424, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 641, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 706, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 742, 745, 748, 749, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 796, 797, 806, 810, 813, 831, 837, 838, 839, 843, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 863, 864, 866, 870, 877, 878, 883], "view": [0, 5, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 70, 77, 93, 115, 146, 157, 391, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 510, 513, 569, 644, 649, 654, 720, 721, 722, 724, 726, 727, 729, 731, 838, 839, 852, 882], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 44, 45, 50, 59, 62, 63, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 158, 159, 160, 161, 162, 165, 166, 167, 168, 193, 209, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 341, 342, 344, 347, 348, 349, 350, 351, 353, 354, 355, 359, 363, 364, 369, 370, 372, 374, 375, 376, 382, 385, 386, 388, 389, 390, 391, 394, 395, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 417, 420, 422, 424, 425, 426, 427, 432, 433, 434, 436, 441, 443, 445, 447, 448, 455, 457, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 483, 485, 486, 487, 488, 489, 492, 496, 498, 503, 504, 505, 506, 507, 508, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 582, 583, 590, 591, 595, 605, 606, 607, 609, 611, 613, 614, 627, 628, 631, 633, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 674, 675, 678, 681, 682, 683, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 709, 711, 712, 713, 717, 718, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 748, 749, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 809, 810, 812, 813, 819, 825, 829, 831, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 871, 877, 878, 880], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 485, 543, 566, 567, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 678, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 880, 882], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 57, 58, 60, 70, 85, 93, 108, 253, 286, 391, 485, 647, 812, 831, 832, 833, 837, 838, 839, 845, 847, 849, 852, 854, 856, 857, 858, 859, 863, 866, 870, 871, 875, 877], "control": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 52, 70, 93, 160, 309, 341, 380, 382, 388, 391, 412, 413, 414, 480, 507, 594, 644, 649, 652, 685, 846, 848, 849, 858, 859, 860, 861, 866, 872, 878, 882], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 45, 48, 56, 58, 60, 62, 831, 832, 834, 835, 836, 837, 838, 840, 842, 844, 845, 847, 851, 853, 854, 858, 860, 862, 864, 866, 870, 871, 877, 878, 879, 882], "manag": [0, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 37, 39, 40, 44, 594, 618, 649, 832, 840, 844, 848, 849, 859, 862, 870], "consid": [0, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 49, 50, 70, 75, 81, 93, 98, 131, 160, 281, 282, 341, 347, 352, 364, 382, 385, 389, 400, 443, 447, 458, 536, 641, 644, 647, 652, 660, 685, 695, 767, 768, 769, 770, 796, 809, 843, 847, 848, 856, 858, 864, 866, 878, 883], "do": [0, 2, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 56, 58, 60, 70, 71, 87, 93, 94, 253, 286, 295, 388, 390, 391, 400, 434, 470, 482, 543, 546, 576, 647, 649, 656, 736, 743, 746, 747, 748, 753, 796, 825, 831, 835, 837, 838, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 866, 868, 870, 872, 883], "set_inplace_mod": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 618, 649], "strict": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 594, 618, 649], "should": [0, 1, 6, 7, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 130, 138, 152, 154, 158, 159, 167, 192, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 315, 326, 342, 348, 349, 361, 365, 366, 367, 368, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 412, 413, 414, 416, 421, 432, 447, 458, 464, 471, 496, 497, 498, 522, 523, 536, 537, 538, 553, 571, 576, 628, 630, 633, 635, 636, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 671, 672, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 706, 708, 709, 724, 740, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 775, 776, 777, 778, 779, 780, 781, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 877, 882], "rais": [0, 5, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 59, 60, 66, 70, 71, 79, 81, 84, 87, 89, 93, 94, 100, 102, 104, 107, 141, 167, 256, 291, 348, 349, 359, 385, 388, 390, 391, 395, 400, 422, 433, 470, 475, 476, 483, 485, 487, 488, 489, 496, 506, 513, 523, 542, 543, 552, 576, 594, 596, 607, 609, 615, 619, 645, 647, 649, 652, 654, 658, 659, 660, 662, 663, 692, 694, 708, 720, 721, 722, 724, 726, 727, 728, 729, 731, 757, 758, 759, 765, 770, 778, 780, 785, 786, 789, 796, 814, 839, 842, 844, 848, 849, 852, 859, 860, 864, 865, 871], "error": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 50, 61, 63, 69, 70, 74, 87, 92, 93, 97, 123, 255, 303, 348, 349, 356, 357, 385, 389, 390, 391, 400, 401, 458, 464, 466, 468, 506, 543, 547, 594, 641, 647, 649, 651, 652, 662, 681, 700, 703, 778, 780, 796, 814, 828, 832, 836, 837, 838, 839, 842, 843, 844, 847, 848, 849, 850, 854, 855, 860, 863, 864, 865, 870, 882], "whenev": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 810, 839, 844, 847, 848, 852, 859, 862, 863, 865], "attempt": [0, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 58, 60, 63, 838, 865, 870], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 58, 59, 60, 63, 828, 838, 839, 865, 878, 880], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 21, 22, 23, 27, 33, 35, 36, 37, 39, 42, 43, 44, 45, 47, 48, 49, 58, 61, 62, 63, 66, 69, 70, 75, 77, 79, 80, 81, 83, 89, 92, 93, 94, 98, 100, 102, 104, 106, 110, 111, 115, 116, 135, 136, 150, 151, 160, 191, 199, 209, 236, 241, 243, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 282, 283, 286, 289, 291, 302, 303, 315, 325, 326, 341, 343, 344, 345, 347, 360, 362, 363, 364, 370, 374, 375, 380, 382, 385, 388, 389, 390, 391, 398, 400, 411, 441, 442, 443, 445, 449, 471, 481, 483, 487, 494, 497, 500, 501, 504, 512, 523, 525, 529, 537, 538, 539, 546, 551, 643, 644, 645, 646, 647, 649, 651, 652, 654, 655, 656, 659, 660, 661, 662, 678, 683, 686, 687, 688, 690, 692, 697, 699, 700, 702, 704, 706, 708, 724, 725, 728, 729, 733, 734, 735, 736, 737, 746, 747, 749, 761, 762, 763, 767, 768, 769, 772, 773, 775, 776, 791, 809, 810, 811, 812, 814, 819, 831, 833, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 854, 855, 856, 857, 859, 860, 863, 866, 868, 869, 871, 877, 878, 882, 883], "datafram": [0, 882], "allow": [0, 8, 9, 23, 26, 40, 44, 45, 56, 70, 83, 93, 106, 150, 291, 389, 400, 461, 539, 543, 586, 644, 647, 649, 661, 662, 773, 780, 794, 795, 796, 797, 811, 812, 825, 829, 831, 837, 839, 840, 843, 844, 847, 848, 852, 854, 856, 857, 858, 859, 860, 861, 863, 866, 868, 870, 872, 874, 877, 878, 880, 882, 884], "u": [0, 4, 5, 19, 20, 58, 60, 62, 63, 70, 75, 89, 93, 98, 110, 111, 151, 389, 453, 460, 462, 652, 656, 682, 688, 689, 702, 744, 831, 832, 838, 839, 841, 846, 847, 854, 857, 859, 860, 861, 862, 863, 864, 866, 870], "leverag": [0, 39, 44, 45, 838, 859, 874, 875, 877, 882, 884], "explor": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 37, 39, 44, 45, 50, 51, 52, 837, 838, 839, 848, 853, 866, 882], "expect": [0, 4, 5, 12, 13, 19, 20, 24, 25, 35, 39, 44, 45, 47, 60, 61, 63, 70, 75, 76, 93, 99, 192, 260, 304, 388, 390, 411, 433, 470, 550, 645, 647, 649, 651, 653, 676, 697, 711, 809, 810, 831, 838, 839, 842, 848, 849, 852, 854, 857, 859, 861, 863, 866, 870, 877, 878, 880], "contain": [0, 15, 16, 33, 44, 45, 59, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 176, 178, 179, 180, 181, 184, 185, 186, 188, 190, 193, 210, 212, 213, 214, 219, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 380, 382, 385, 387, 388, 389, 390, 391, 394, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 595, 598, 600, 605, 606, 607, 608, 609, 611, 613, 614, 621, 627, 628, 629, 630, 631, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 743, 744, 745, 748, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 801, 802, 810, 811, 812, 814, 815, 819, 824, 825, 829, 831, 833, 835, 837, 838, 841, 842, 843, 844, 845, 847, 848, 850, 851, 853, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 870, 871, 872, 878, 882, 883], "variou": [0, 8, 9, 26, 36, 48, 50, 56, 831, 834, 837, 838, 839, 842, 847, 848, 851, 852, 855, 857, 858, 860, 861, 862, 863, 871, 882, 884], "among": [0, 8, 9, 87, 846, 847, 863, 866, 874, 882], "pattern": [0, 70, 71, 93, 94, 389, 453, 559, 560, 561, 649, 848, 851, 862], "signal": [0, 70, 93, 332, 382, 388, 402, 403, 404, 405, 410, 411, 420, 436, 810, 882, 884], "credit_card_data": 0, "read_csv": [0, 26, 60], "creditcard": 0, "csv": [0, 26, 60], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 58, 59, 61, 67, 68, 75, 87, 91, 98, 115, 176, 177, 178, 181, 209, 210, 211, 214, 220, 225, 228, 232, 391, 503, 550, 568, 589, 608, 645, 646, 649, 652, 656, 709, 738, 794, 809, 810, 824, 832, 834, 836, 837, 838, 840, 841, 842, 847, 848, 849, 853, 856, 857, 858, 859, 860, 861, 862, 863, 868, 869, 872, 877, 880, 882], "sens": [0, 842, 848, 850, 860, 862], "re": [0, 23, 26, 31, 34, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 61, 63, 70, 71, 80, 93, 103, 113, 226, 332, 382, 389, 391, 463, 499, 500, 559, 646, 649, 652, 654, 659, 704, 725, 764, 766, 831, 832, 833, 837, 838, 839, 840, 841, 842, 845, 848, 853, 858, 859, 860, 861, 862, 864, 866, 868, 870, 874, 879, 882], "work": [0, 1, 8, 9, 23, 40, 44, 45, 56, 57, 59, 63, 65, 70, 93, 110, 400, 546, 652, 656, 703, 743, 744, 748, 753, 754, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 859, 860, 861, 863, 864, 867, 868, 869, 871, 875, 877, 878, 880, 882, 884], "help": [0, 1, 31, 60, 62, 67, 549, 594, 649, 662, 783, 809, 831, 832, 833, 837, 838, 840, 843, 844, 845, 846, 847, 848, 850, 854, 856, 857, 859, 860, 863, 864, 872, 875, 882], "few": [0, 8, 9, 10, 11, 831, 836, 837, 839, 846, 848, 849, 855, 856, 858, 859, 861, 863, 866, 869, 874, 882], "entri": [0, 70, 77, 87, 93, 100, 104, 111, 150, 389, 391, 395, 459, 486, 488, 489, 522, 644, 654, 656, 726, 749, 767, 838, 847, 863, 882], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 63, 66, 67, 70, 71, 75, 77, 79, 81, 89, 90, 93, 94, 98, 100, 102, 104, 110, 111, 125, 128, 140, 141, 151, 153, 168, 207, 224, 225, 226, 315, 332, 380, 382, 388, 389, 390, 391, 394, 395, 398, 400, 411, 424, 448, 455, 457, 462, 470, 482, 498, 510, 515, 523, 524, 529, 536, 583, 594, 628, 631, 641, 644, 645, 646, 649, 650, 651, 652, 654, 658, 678, 686, 692, 702, 706, 724, 728, 757, 758, 759, 767, 791, 794, 795, 796, 797, 802, 825, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 880, 882, 883, 884], "give": [0, 12, 13, 34, 46, 56, 70, 74, 93, 97, 192, 378, 387, 388, 431, 435, 645, 651, 654, 664, 665, 666, 667, 669, 671, 673, 724, 809, 831, 838, 839, 841, 844, 847, 848, 850, 851, 853, 854, 855, 863, 882], "insight": 0, "structur": [0, 26, 45, 87, 90, 116, 178, 181, 556, 649, 653, 656, 714, 740, 749, 837, 839, 840, 843, 846, 856, 861, 862, 863, 864, 882, 884], "type": [0, 6, 7, 19, 20, 23, 27, 29, 33, 39, 44, 45, 50, 58, 59, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 791, 794, 795, 796, 797, 801, 802, 806, 809, 810, 811, 812, 816, 819, 822, 824, 825, 826, 829, 837, 838, 839, 841, 842, 843, 846, 849, 850, 851, 852, 855, 857, 859, 861, 863, 864, 866, 868, 877, 878, 879, 880, 882, 883], "present": [0, 59, 70, 83, 87, 93, 106, 351, 385, 394, 515, 516, 517, 662, 780, 837, 838, 839, 846, 848, 849, 855, 859, 874], "initi": [0, 6, 7, 8, 9, 15, 16, 44, 45, 61, 70, 74, 83, 87, 93, 97, 106, 116, 389, 400, 447, 458, 464, 544, 545, 651, 662, 676, 677, 780, 807, 810, 811, 812, 814, 815, 829, 831, 834, 839, 840, 844, 848, 849, 853, 861, 863, 868, 877, 878, 880, 882], "qualiti": [0, 834, 839], "below": [0, 2, 21, 22, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 49, 50, 51, 56, 59, 60, 61, 66, 70, 75, 93, 98, 106, 158, 159, 160, 260, 270, 293, 341, 342, 351, 382, 385, 391, 506, 644, 647, 652, 686, 706, 784, 832, 835, 837, 838, 841, 842, 846, 847, 848, 849, 850, 852, 853, 856, 859, 860, 861, 863, 864, 865, 866, 868, 869, 877, 878, 880], "head": [0, 8, 9, 10, 11, 23, 61, 62, 651, 678, 810, 831, 836, 838, 847, 860], "method": [0, 26, 33, 44, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 165, 166, 167, 168, 178, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 388, 389, 390, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 644, 645, 647, 649, 650, 652, 653, 656, 659, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 706, 707, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 747, 748, 749, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 791, 802, 808, 809, 810, 811, 812, 837, 839, 842, 843, 847, 848, 849, 850, 851, 855, 863, 864, 868, 869, 870, 877, 878, 880, 883], "five": 0, "row": [0, 58, 70, 93, 111, 145, 160, 341, 382, 389, 391, 398, 400, 448, 460, 489, 495, 514, 529, 535, 536, 644, 652, 658, 659, 693, 701, 702, 707, 756, 765, 809], "v1": 0, "v2": 0, "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 882], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 26, 76, 99, 228, 646, 653, 711, 712, 713, 825, 838, 847, 849, 861], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 75, 652, 690], "62": [0, 23, 26, 56, 58, 64, 86, 92, 93, 102, 126, 271, 299, 647, 657, 658, 755, 757, 759], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 23, 35, 56, 63, 69, 95, 102, 234, 276, 388, 410, 420, 633, 647, 650, 652, 693, 694, 758, 863], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 292, 647], "66": [0, 5, 23, 37, 39, 40, 56, 58, 60, 83, 93, 94, 95, 388, 420, 559, 560, 633, 649, 650, 652, 662, 697, 777], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 34, 89, 90, 93, 149, 181, 469, 562, 644, 649, 825, 863], "50": [0, 24, 25, 26, 44, 45, 56, 60, 70, 83, 92, 93, 94, 252, 292, 370, 385, 388, 389, 391, 417, 441, 449, 503, 561, 567, 574, 575, 591, 606, 647, 649, 652, 656, 659, 662, 691, 697, 708, 737, 739, 765, 777, 794, 797, 858, 877, 878], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 26, 37, 39, 40, 56, 58, 59, 63, 64, 69, 70, 92, 93, 94, 97, 102, 126, 131, 151, 247, 278, 286, 388, 391, 400, 409, 410, 480, 537, 554, 641, 644, 647, 649, 758, 759], "column": [0, 26, 60, 70, 75, 93, 98, 110, 111, 145, 160, 341, 382, 389, 391, 398, 400, 442, 448, 460, 481, 486, 488, 489, 493, 495, 529, 535, 536, 644, 652, 687, 688, 693, 699, 701, 702, 707, 794, 809], "It": [0, 1, 4, 5, 10, 11, 24, 25, 26, 34, 37, 39, 40, 44, 45, 46, 47, 56, 57, 58, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 167, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 342, 348, 349, 350, 351, 356, 357, 361, 363, 365, 366, 367, 368, 372, 380, 382, 385, 388, 389, 390, 391, 394, 395, 400, 401, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 430, 432, 437, 439, 440, 448, 449, 454, 455, 456, 457, 465, 466, 467, 468, 469, 471, 472, 482, 485, 490, 499, 500, 501, 502, 504, 506, 510, 511, 515, 518, 519, 521, 522, 523, 525, 526, 536, 537, 538, 539, 547, 554, 555, 559, 560, 561, 566, 567, 576, 590, 591, 592, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 701, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 735, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 770, 771, 774, 775, 776, 779, 781, 782, 784, 785, 786, 809, 810, 831, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 857, 859, 860, 861, 862, 863, 864, 865, 866, 869, 880, 882, 883], "just": [0, 8, 9, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 56, 58, 60, 70, 75, 83, 98, 110, 113, 160, 341, 382, 389, 457, 644, 652, 662, 695, 777, 802, 810, 831, 835, 838, 839, 840, 842, 844, 847, 848, 849, 850, 851, 853, 856, 857, 859, 860, 861, 863, 869, 870, 874, 877, 882, 883], "verifi": [0, 8, 9, 15, 16, 17, 26, 39, 338, 339, 382, 837, 848, 849, 860, 863, 864], "consist": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 37, 39, 40, 44, 45, 83, 87, 253, 260, 286, 388, 389, 432, 442, 647, 652, 662, 687, 688, 777, 811, 812, 834, 842, 843, 847, 848, 854, 859, 869, 883, 884], "complet": [0, 75, 87, 98, 652, 699, 795, 831, 837, 838, 839, 840, 842, 843, 846, 847, 850, 852, 856, 860, 861, 863, 866], "By": [0, 34, 56, 63, 70, 76, 77, 83, 84, 93, 99, 100, 106, 107, 300, 346, 348, 349, 362, 369, 382, 385, 388, 390, 391, 398, 400, 411, 469, 470, 506, 510, 529, 536, 539, 594, 647, 649, 652, 653, 654, 662, 663, 683, 708, 711, 723, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 838, 844, 848, 850, 852, 856, 858, 859, 860, 868, 875, 878, 884], "tail": 0, "last": [0, 5, 14, 35, 40, 44, 47, 66, 70, 74, 75, 76, 77, 80, 82, 83, 84, 87, 89, 93, 97, 98, 99, 100, 105, 106, 107, 111, 115, 150, 151, 154, 209, 326, 354, 382, 385, 388, 389, 390, 391, 398, 400, 417, 422, 432, 433, 434, 445, 469, 487, 497, 500, 506, 510, 529, 537, 538, 644, 646, 651, 652, 653, 654, 659, 661, 662, 663, 677, 678, 683, 686, 697, 706, 708, 712, 713, 718, 721, 724, 725, 726, 728, 762, 763, 771, 773, 774, 775, 776, 785, 786, 810, 819, 839, 842, 844, 845, 848, 850, 859, 861, 863, 866, 868, 870, 877, 882], "well": [0, 23, 26, 44, 45, 58, 59, 60, 94, 390, 469, 572, 649, 652, 701, 796, 833, 837, 839, 845, 847, 848, 852, 859, 860, 861, 863, 875, 877, 882, 883, 884], "readi": [0, 27, 29, 34, 35, 36, 46, 47, 48, 49, 50, 51, 58, 60, 837, 838], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 26, 56, 60, 94, 607, 652, 662, 697, 777], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 23, 26, 35, 56, 58, 69, 70, 75, 83, 92, 93, 94, 97, 98, 102, 115, 248, 256, 271, 273, 286, 296, 297, 300, 362, 365, 385, 388, 400, 407, 409, 410, 420, 425, 426, 427, 431, 435, 537, 559, 560, 647, 649, 652, 656, 662, 665, 686, 693, 697, 737, 748, 757, 758, 759, 775, 777, 791, 852], "79": [0, 56, 58, 70, 71, 93, 94, 97, 102, 115, 253, 388, 410, 420, 431, 554, 555, 647, 649, 759], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 26, 56, 69, 70, 71, 75, 92, 93, 94, 97, 102, 115, 251, 256, 296, 297, 299, 306, 317, 321, 380, 400, 431, 537, 559, 560, 606, 632, 634, 647, 649, 650, 652, 690, 759], "88": [0, 5, 26, 56, 95, 102, 125, 400, 537, 633, 641, 650, 652, 658, 662, 697, 759, 777], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 58, 852], "understand": [0, 31, 32, 33, 37, 56, 62, 835, 836, 837, 838, 839, 841, 842, 845, 850, 851, 855, 861, 862, 867], "composit": [0, 33, 44, 179, 180, 212, 213, 305, 389, 449, 564, 565, 645, 646, 647, 649, 795, 797, 837, 841, 843, 844, 846, 848, 849, 857, 859, 860, 861, 863, 866, 868, 869, 870, 872, 878, 883], "crucial": [0, 849, 858, 875], "proce": [0, 26, 837, 838], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 27, 29, 33, 34, 35, 42, 43, 46, 47, 50, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 168, 169, 184, 188, 192, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 341, 342, 348, 349, 351, 354, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 433, 434, 443, 448, 465, 486, 497, 506, 510, 515, 516, 517, 536, 539, 542, 543, 544, 548, 558, 559, 560, 561, 562, 566, 570, 572, 574, 578, 580, 581, 599, 605, 607, 614, 615, 622, 628, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 739, 742, 743, 745, 746, 753, 755, 759, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884], "info": [0, 5, 23, 58, 828, 829, 831, 845, 851, 854], "concis": 0, "summari": [0, 87, 182, 556, 645, 649, 838, 839, 863], "includ": [0, 1, 8, 9, 23, 26, 35, 47, 52, 66, 69, 70, 71, 75, 80, 83, 84, 87, 89, 92, 93, 94, 98, 103, 106, 107, 139, 140, 141, 150, 151, 153, 160, 233, 257, 261, 262, 263, 266, 268, 271, 279, 287, 300, 305, 327, 330, 331, 332, 335, 341, 344, 346, 348, 349, 353, 354, 355, 358, 359, 360, 361, 363, 365, 366, 368, 369, 370, 371, 374, 375, 382, 385, 388, 391, 400, 407, 408, 409, 439, 442, 444, 488, 489, 491, 494, 496, 499, 502, 524, 526, 527, 535, 539, 541, 542, 544, 545, 546, 572, 627, 644, 647, 649, 651, 652, 656, 658, 659, 662, 663, 676, 687, 707, 709, 736, 759, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 797, 809, 810, 813, 827, 829, 831, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 859, 860, 861, 862, 863, 864, 866, 868, 877, 878, 882, 884], "number": [0, 58, 60, 61, 62, 63, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 87, 89, 90, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 111, 113, 115, 116, 119, 139, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 160, 166, 171, 172, 173, 174, 175, 177, 178, 181, 184, 185, 186, 188, 190, 193, 217, 218, 219, 233, 234, 235, 236, 237, 239, 241, 242, 249, 251, 253, 254, 256, 258, 259, 260, 266, 267, 268, 270, 274, 276, 284, 285, 286, 287, 288, 289, 291, 293, 295, 296, 297, 299, 300, 304, 306, 332, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 364, 369, 373, 382, 385, 388, 389, 390, 391, 394, 400, 422, 433, 436, 439, 442, 446, 447, 448, 458, 462, 464, 465, 475, 476, 477, 497, 498, 499, 500, 501, 502, 504, 506, 508, 510, 512, 515, 516, 517, 534, 536, 537, 538, 539, 545, 563, 570, 588, 605, 606, 607, 614, 627, 628, 642, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 664, 671, 672, 674, 676, 678, 683, 687, 688, 689, 695, 700, 702, 706, 707, 708, 711, 717, 719, 720, 722, 723, 725, 726, 728, 730, 732, 733, 734, 735, 756, 760, 765, 767, 768, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 802, 809, 810, 813, 825, 829, 831, 838, 839, 846, 847, 848, 849, 850, 857, 858, 859, 863, 864, 865, 866, 868, 873, 878], "presenc": [0, 789, 846, 859], "null": [0, 838, 853], "each": [0, 19, 20, 23, 24, 25, 26, 35, 36, 37, 44, 45, 47, 48, 49, 51, 58, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 81, 83, 87, 90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 106, 110, 111, 113, 115, 116, 124, 125, 127, 128, 129, 131, 135, 152, 166, 178, 181, 226, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 316, 318, 319, 320, 322, 323, 324, 329, 340, 343, 344, 345, 351, 359, 363, 367, 372, 375, 380, 382, 385, 388, 389, 391, 394, 395, 398, 400, 407, 408, 409, 412, 413, 414, 417, 425, 426, 427, 428, 431, 433, 434, 435, 442, 443, 448, 457, 458, 462, 464, 475, 476, 477, 481, 482, 483, 488, 489, 491, 492, 494, 496, 497, 498, 501, 503, 512, 513, 520, 522, 529, 534, 535, 536, 537, 538, 539, 548, 551, 559, 566, 567, 583, 608, 628, 630, 631, 633, 635, 636, 637, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 656, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 682, 683, 684, 687, 688, 689, 692, 694, 695, 696, 698, 700, 701, 702, 707, 719, 723, 725, 726, 728, 730, 732, 742, 749, 756, 765, 767, 768, 770, 776, 777, 784, 791, 794, 796, 802, 810, 813, 814, 815, 825, 829, 834, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 874, 877, 878, 883, 884], "invalu": 0, "plan": [0, 871], "right": [0, 59, 70, 75, 87, 93, 98, 116, 133, 134, 245, 247, 300, 363, 385, 388, 389, 391, 423, 453, 459, 460, 462, 488, 559, 643, 647, 649, 652, 661, 702, 707, 773, 794, 832, 837, 838, 839, 841, 842, 850, 853, 866, 878], "format": [0, 1, 39, 40, 44, 45, 56, 58, 59, 60, 68, 71, 74, 83, 86, 87, 88, 91, 97, 113, 131, 176, 210, 388, 389, 399, 430, 463, 532, 559, 641, 645, 646, 649, 651, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 777, 787, 788, 789, 806, 831, 838, 839, 841, 847, 848, 849, 850, 851, 852, 860, 862, 877, 882, 883, 884], "lt": [0, 4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 56, 58, 60, 116], "core": [0, 5, 8, 9, 37, 40, 58, 59, 60, 62, 63, 70, 93, 110, 113, 217, 389, 447, 458, 463, 464, 646, 838, 849, 853, 863, 882, 883, 884], "frame": [0, 60, 70, 93, 332, 382, 388, 436, 822, 882], "gt": [0, 4, 5, 8, 9, 10, 11, 14, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 56, 58, 60, 63, 116, 861, 868], "rangeindex": 0, "284807": 0, "total": [0, 5, 58, 60, 70, 83, 87, 93, 106, 116, 147, 228, 343, 344, 345, 353, 382, 385, 390, 465, 644, 646, 659, 662, 765, 782, 784, 825, 832, 838, 839, 848, 849, 850, 863, 866, 870], "non": [0, 10, 11, 35, 47, 67, 69, 70, 75, 79, 80, 83, 84, 90, 92, 93, 98, 102, 103, 106, 107, 147, 165, 183, 192, 261, 281, 282, 287, 348, 349, 353, 360, 373, 385, 388, 389, 391, 400, 432, 443, 447, 453, 476, 477, 539, 542, 644, 645, 647, 652, 656, 658, 659, 662, 663, 683, 684, 693, 695, 702, 704, 708, 709, 749, 758, 762, 763, 764, 765, 778, 779, 780, 781, 782, 784, 785, 786, 794, 809, 811, 812, 814, 843, 846, 850, 868, 877, 878, 880, 882], "count": [0, 5, 62, 70, 77, 81, 84, 89, 93, 100, 104, 107, 147, 219, 353, 385, 391, 400, 506, 510, 512, 534, 539, 644, 646, 652, 654, 660, 663, 683, 708, 718, 721, 767, 768, 785, 786, 845, 846, 850], "dtype": [0, 4, 5, 12, 13, 21, 22, 26, 29, 35, 37, 38, 39, 40, 56, 59, 66, 67, 70, 71, 74, 75, 79, 80, 83, 87, 89, 90, 92, 93, 94, 97, 98, 102, 103, 106, 115, 118, 119, 120, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 221, 248, 252, 284, 285, 287, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 346, 351, 353, 369, 382, 385, 388, 389, 390, 391, 395, 400, 410, 420, 432, 433, 436, 459, 465, 470, 481, 506, 522, 523, 524, 525, 526, 536, 537, 538, 539, 542, 545, 546, 563, 564, 565, 567, 576, 585, 613, 644, 645, 646, 647, 649, 651, 652, 655, 658, 659, 661, 662, 663, 667, 674, 693, 709, 734, 735, 757, 758, 759, 762, 763, 764, 773, 774, 775, 776, 779, 781, 783, 785, 786, 789, 791, 794, 796, 797, 809, 810, 811, 812, 813, 815, 831, 835, 842, 844, 848, 849, 850, 852, 853, 856, 857, 859, 860, 861, 863, 864, 868, 877], "float64": [0, 37, 38, 67, 70, 79, 83, 89, 90, 92, 93, 94, 102, 106, 139, 147, 148, 165, 168, 172, 173, 178, 179, 182, 183, 188, 189, 193, 195, 196, 202, 205, 287, 359, 385, 390, 400, 465, 470, 536, 585, 644, 645, 649, 652, 658, 688, 689, 693, 709, 758, 759, 776, 791, 794, 795, 848, 861, 863], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 26, 33, 35, 37, 39, 40, 56, 58, 59, 60, 67, 69, 70, 71, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 101, 102, 106, 115, 116, 181, 236, 238, 243, 247, 248, 251, 253, 254, 255, 273, 286, 289, 296, 299, 306, 307, 330, 331, 362, 365, 366, 382, 385, 388, 391, 400, 407, 408, 409, 410, 412, 416, 417, 425, 426, 430, 431, 432, 433, 435, 480, 481, 483, 487, 492, 510, 513, 526, 537, 543, 544, 545, 555, 559, 560, 591, 597, 606, 620, 647, 649, 651, 652, 654, 656, 657, 658, 659, 660, 662, 665, 669, 674, 675, 686, 688, 690, 693, 697, 701, 703, 704, 706, 708, 721, 725, 727, 729, 731, 748, 755, 757, 758, 759, 766, 767, 775, 776, 777, 781, 783, 794, 838, 844, 846, 848, 850, 858], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 33, 37, 39, 40, 56, 58, 60, 64, 69, 70, 74, 75, 79, 83, 92, 93, 94, 95, 97, 100, 102, 106, 115, 131, 181, 211, 236, 251, 260, 271, 291, 300, 362, 369, 376, 385, 388, 391, 409, 410, 420, 431, 435, 480, 481, 483, 487, 492, 513, 526, 537, 538, 554, 559, 560, 575, 597, 606, 629, 641, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 662, 665, 666, 674, 675, 686, 690, 697, 701, 703, 706, 731, 735, 748, 757, 758, 759, 766, 767, 775, 776, 777, 846, 848, 850, 860], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 56, 58, 59, 60, 63, 69, 70, 71, 75, 79, 83, 89, 90, 92, 93, 94, 97, 98, 100, 102, 106, 116, 149, 178, 236, 243, 247, 253, 255, 264, 271, 272, 277, 278, 286, 295, 296, 297, 362, 376, 385, 386, 388, 389, 391, 400, 407, 408, 425, 427, 430, 431, 435, 441, 483, 487, 492, 513, 537, 555, 559, 560, 563, 574, 575, 600, 606, 623, 644, 645, 647, 649, 651, 652, 654, 656, 658, 659, 660, 662, 665, 675, 686, 689, 690, 691, 697, 703, 704, 725, 731, 736, 757, 758, 765, 767, 776, 777, 791, 834, 838, 847, 850, 858], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 63, 64, 70, 75, 86, 92, 93, 94, 95, 97, 98, 102, 116, 125, 126, 151, 236, 253, 278, 286, 317, 325, 376, 382, 388, 391, 407, 408, 416, 417, 420, 421, 425, 426, 431, 435, 487, 560, 575, 629, 631, 641, 644, 647, 649, 650, 651, 652, 656, 658, 665, 674, 675, 686, 690, 744, 757, 758, 759, 761, 846], "v17": 0, "18": [0, 4, 5, 17, 18, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 69, 70, 79, 92, 93, 94, 97, 98, 102, 106, 126, 248, 253, 295, 299, 308, 309, 362, 380, 385, 388, 391, 410, 416, 420, 421, 425, 431, 435, 487, 605, 641, 647, 652, 658, 662, 669, 686, 692, 697, 704, 757, 758, 759, 776, 777, 781, 846, 848, 850], "v18": 0, "19": [0, 4, 5, 23, 24, 25, 37, 39, 40, 56, 58, 59, 60, 63, 69, 70, 79, 92, 93, 97, 98, 102, 239, 248, 276, 286, 303, 388, 389, 391, 400, 409, 410, 421, 425, 431, 435, 441, 446, 487, 537, 647, 652, 656, 658, 661, 686, 693, 706, 747, 757, 758, 759, 774, 850], "v19": 0, "20": [0, 4, 15, 16, 17, 18, 23, 26, 29, 56, 58, 59, 60, 63, 69, 70, 71, 74, 79, 83, 92, 93, 94, 97, 98, 102, 106, 248, 252, 256, 292, 296, 300, 317, 362, 364, 366, 385, 388, 391, 407, 409, 425, 431, 435, 480, 503, 559, 566, 567, 569, 591, 595, 606, 647, 649, 652, 658, 659, 662, 665, 666, 677, 686, 691, 693, 697, 704, 757, 765, 766, 775, 776, 777, 781, 783, 831, 847, 866], "v20": 0, "22": [0, 5, 23, 26, 37, 39, 40, 56, 58, 60, 63, 64, 69, 70, 71, 79, 83, 86, 93, 94, 97, 102, 126, 131, 248, 256, 317, 321, 380, 388, 389, 390, 391, 396, 400, 407, 408, 410, 425, 426, 427, 431, 435, 441, 465, 480, 527, 537, 560, 591, 627, 641, 647, 651, 652, 656, 659, 662, 674, 675, 686, 691, 697, 701, 744, 754, 757, 758, 759, 766, 776, 777, 838, 846, 852], "26": [0, 5, 14, 23, 37, 39, 40, 43, 56, 58, 60, 63, 69, 70, 78, 79, 93, 94, 95, 102, 248, 253, 299, 388, 389, 410, 446, 456, 574, 629, 647, 649, 650, 651, 652, 656, 657, 662, 673, 686, 697, 704, 737, 755, 757, 758, 777], "27": [0, 14, 23, 26, 56, 58, 63, 69, 70, 75, 79, 92, 93, 94, 97, 98, 102, 106, 247, 248, 251, 291, 299, 300, 359, 385, 388, 410, 420, 575, 605, 647, 649, 652, 656, 662, 692, 697, 707, 737, 744, 758, 777, 781, 794], "28": [0, 23, 26, 40, 42, 43, 44, 45, 56, 58, 60, 63, 69, 70, 74, 78, 92, 93, 94, 97, 98, 102, 106, 252, 255, 276, 292, 388, 389, 410, 420, 441, 543, 574, 629, 647, 649, 650, 651, 652, 653, 657, 662, 666, 668, 670, 672, 673, 675, 697, 714, 755, 757, 758, 759, 777, 781], "30": [0, 23, 26, 37, 39, 40, 56, 58, 69, 70, 71, 93, 94, 102, 106, 116, 286, 317, 362, 370, 385, 388, 391, 410, 420, 431, 480, 503, 527, 559, 561, 566, 567, 574, 575, 591, 600, 606, 647, 649, 652, 656, 662, 691, 697, 745, 757, 758, 776, 777, 781, 796, 809, 825, 834, 847], "int64": [0, 12, 13, 70, 79, 80, 82, 83, 90, 102, 103, 105, 106, 155, 168, 174, 177, 179, 181, 185, 186, 190, 197, 329, 382, 398, 400, 529, 537, 538, 644, 645, 659, 661, 662, 757, 762, 763, 764, 773, 775, 776, 781, 783, 794, 795, 848, 860, 863, 868], "proceed": [0, 58], "within": [0, 10, 11, 26, 27, 29, 33, 44, 45, 65, 70, 93, 139, 347, 364, 385, 388, 394, 425, 426, 427, 432, 435, 475, 476, 477, 520, 644, 658, 759, 825, 834, 837, 839, 840, 843, 847, 848, 860, 861, 862, 863, 870, 875, 877, 883, 884], "significantli": [0, 15, 16, 19, 20, 24, 25, 44, 70, 75, 93, 98, 389, 462, 652, 702, 847], "impact": [0, 834, 847, 863], "isnul": 0, "sum": [0, 8, 9, 10, 11, 58, 60, 69, 70, 71, 74, 75, 76, 83, 87, 92, 93, 94, 97, 98, 99, 106, 110, 115, 116, 226, 236, 278, 302, 345, 369, 382, 385, 389, 390, 391, 394, 400, 431, 441, 465, 466, 467, 468, 469, 470, 471, 472, 503, 520, 542, 543, 560, 590, 591, 646, 647, 649, 651, 652, 653, 662, 674, 681, 693, 702, 706, 709, 711, 776, 777, 809, 811, 824, 831, 846, 848, 856, 858, 859, 860, 868, 869, 877, 878, 880], "quickli": [0, 8, 9, 838, 839, 847, 882], "appropri": [0, 8, 9, 19, 20, 33, 37, 40, 44, 45, 71, 80, 85, 103, 108, 236, 253, 260, 286, 347, 364, 385, 647, 659, 762, 837, 838, 839, 852, 857, 863], "either": [0, 26, 37, 38, 49, 50, 51, 52, 56, 62, 69, 70, 71, 74, 83, 87, 92, 93, 94, 97, 98, 125, 128, 131, 136, 146, 147, 157, 233, 234, 235, 236, 241, 251, 253, 254, 256, 258, 260, 267, 268, 274, 275, 276, 277, 278, 286, 295, 297, 298, 300, 303, 304, 350, 372, 385, 388, 394, 400, 410, 420, 430, 431, 435, 520, 537, 538, 558, 578, 586, 587, 595, 615, 641, 643, 644, 647, 649, 651, 652, 655, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 692, 697, 700, 704, 733, 734, 735, 775, 776, 781, 783, 796, 810, 811, 812, 819, 833, 837, 838, 839, 844, 845, 846, 848, 849, 850, 851, 852, 854, 856, 859, 860, 861, 862, 863, 866, 868, 870, 877, 882], "imput": [0, 70, 93, 389, 447, 458, 464], "remov": [0, 8, 9, 15, 16, 23, 26, 35, 40, 44, 45, 47, 75, 87, 98, 652, 654, 655, 656, 686, 692, 706, 727, 733, 734, 750, 825, 828, 831, 837, 844, 845, 847, 848, 851, 856, 862, 863, 866, 877, 878, 882], "maintain": [0, 82, 105, 661, 771, 774, 831, 838, 839, 842, 854, 859, 861, 862, 863], "integr": [0, 4, 5, 6, 7, 8, 9, 27, 29, 36, 45, 48, 67, 69, 70, 90, 92, 93, 165, 305, 368, 385, 400, 539, 645, 647, 831, 836, 838, 840, 841, 857, 875, 877, 882], "check": [0, 4, 5, 6, 7, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 61, 63, 65, 67, 71, 75, 87, 90, 94, 98, 131, 169, 170, 179, 180, 183, 185, 186, 187, 190, 205, 212, 213, 220, 232, 552, 562, 564, 565, 572, 578, 579, 580, 581, 582, 598, 609, 621, 627, 638, 641, 645, 646, 649, 650, 652, 656, 688, 689, 695, 736, 746, 747, 748, 789, 796, 824, 825, 831, 832, 833, 836, 837, 838, 839, 840, 842, 846, 847, 849, 850, 852, 857, 859, 860, 861, 862, 863, 864, 865, 868, 871, 878], "A": [0, 8, 9, 44, 45, 59, 66, 67, 70, 71, 77, 79, 83, 84, 87, 90, 92, 93, 94, 97, 98, 100, 102, 104, 107, 110, 111, 116, 135, 136, 138, 145, 153, 160, 166, 207, 226, 288, 290, 294, 326, 337, 341, 343, 344, 345, 347, 361, 364, 368, 369, 382, 385, 388, 389, 390, 391, 394, 395, 400, 403, 417, 431, 434, 436, 443, 451, 456, 459, 467, 471, 482, 485, 498, 504, 508, 509, 515, 516, 517, 518, 522, 523, 524, 525, 526, 534, 543, 546, 551, 553, 562, 571, 574, 575, 606, 607, 608, 611, 638, 640, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 658, 662, 663, 674, 678, 686, 688, 691, 696, 697, 701, 702, 714, 717, 720, 722, 726, 728, 736, 739, 741, 743, 744, 745, 746, 747, 751, 752, 753, 754, 756, 757, 758, 759, 761, 767, 777, 785, 786, 789, 791, 792, 794, 795, 796, 797, 802, 809, 825, 829, 831, 836, 837, 838, 841, 846, 848, 849, 852, 855, 856, 860, 861, 863, 868, 870, 871, 872, 873, 877, 878, 880, 882, 883], "critic": [0, 8, 9, 37, 40, 44, 45, 653, 715, 829, 882], "grasp": [0, 860], "imbal": 0, "common": [0, 23, 33, 36, 44, 48, 69, 70, 87, 92, 192, 263, 271, 352, 359, 385, 645, 647, 832, 835, 837, 838, 845, 848, 849, 850, 856, 857, 860, 864, 866, 870, 882], "scenario": [0, 39, 848, 858], "call": [0, 4, 5, 8, 9, 14, 19, 20, 27, 29, 33, 35, 36, 37, 38, 39, 42, 44, 45, 47, 48, 49, 50, 51, 58, 62, 70, 85, 90, 93, 108, 110, 116, 135, 185, 186, 226, 389, 400, 456, 543, 594, 600, 615, 631, 632, 634, 643, 646, 649, 650, 652, 656, 700, 736, 742, 746, 747, 791, 802, 810, 811, 812, 814, 819, 825, 829, 831, 837, 838, 839, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 869, 870, 875, 877, 878, 880, 882, 883], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 34, 35, 40, 44, 45, 46, 47, 51, 56, 57, 63, 64, 67, 69, 70, 75, 80, 81, 83, 84, 86, 92, 93, 98, 103, 106, 107, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 146, 150, 157, 160, 167, 186, 193, 236, 241, 243, 245, 246, 247, 248, 253, 254, 258, 260, 264, 265, 272, 273, 276, 278, 280, 282, 283, 286, 289, 291, 295, 302, 304, 307, 308, 313, 314, 316, 341, 348, 349, 380, 382, 385, 389, 390, 391, 439, 467, 506, 641, 644, 645, 647, 652, 659, 660, 662, 663, 683, 695, 698, 701, 708, 709, 763, 767, 768, 769, 770, 778, 779, 780, 781, 782, 783, 784, 785, 786, 806, 831, 832, 835, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 860, 861, 863, 866, 868, 869, 870], "instanc": [0, 8, 9, 26, 33, 39, 44, 45, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 178, 181, 184, 185, 186, 188, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 382, 385, 388, 389, 390, 391, 394, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 425, 426, 427, 431, 432, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 601, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 644, 645, 647, 649, 650, 651, 652, 653, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 802, 807, 829, 837, 838, 839, 842, 843, 844, 848, 850, 851, 852, 853, 855, 856, 857, 858, 859, 863, 872, 874, 878, 883], "typic": [0, 8, 9, 23, 70, 93, 347, 364, 385, 400, 536, 661, 773, 810, 842, 856, 884], "repres": [0, 66, 69, 70, 74, 75, 92, 93, 97, 98, 113, 138, 152, 154, 177, 235, 236, 239, 242, 251, 253, 260, 286, 299, 303, 304, 329, 343, 344, 345, 362, 379, 382, 385, 387, 388, 389, 390, 391, 394, 395, 398, 431, 435, 449, 463, 465, 470, 497, 509, 515, 516, 517, 522, 528, 535, 571, 643, 644, 645, 647, 649, 651, 652, 674, 675, 676, 690, 697, 700, 701, 796, 809, 813, 825, 838, 843, 848, 866, 883], "ones": [0, 8, 9, 23, 33, 40, 44, 56, 62, 66, 70, 72, 74, 79, 87, 89, 93, 97, 102, 145, 149, 154, 156, 162, 212, 213, 249, 326, 382, 400, 545, 629, 644, 646, 647, 650, 651, 653, 669, 670, 714, 757, 758, 759, 795, 837, 843, 847, 850, 855, 856, 862, 863, 882], "how": [0, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 56, 59, 62, 63, 64, 69, 70, 86, 92, 93, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 253, 286, 304, 308, 313, 314, 316, 380, 390, 391, 465, 480, 506, 507, 641, 647, 806, 809, 810, 811, 812, 832, 833, 835, 836, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 874, 875, 881, 882], "approach": [0, 49, 835, 837, 838, 839, 843, 846, 848, 849, 853, 856, 860, 863, 864, 866, 870, 884], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 15, 16, 19, 20, 23, 44, 45, 56, 58, 59, 60, 70, 75, 81, 85, 93, 98, 104, 108, 260, 388, 389, 391, 436, 442, 451, 508, 512, 549, 550, 647, 649, 652, 660, 687, 688, 699, 700, 702, 703, 707, 767, 768, 769, 791, 795, 802, 812, 819, 820, 822, 823, 829, 837, 838, 839, 844, 845, 846, 847, 850, 851, 852, 855, 860, 861, 863, 864, 865, 866, 868, 874, 882], "highli": [0, 59, 837, 882], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 21, 22, 23, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 70, 78, 79, 93, 101, 102, 110, 111, 372, 385, 388, 394, 400, 410, 411, 416, 417, 420, 421, 422, 432, 433, 515, 516, 517, 518, 519, 520, 521, 536, 539, 654, 657, 658, 718, 728, 755, 756, 758, 809, 810, 813, 831, 837, 859, 860, 866, 878, 880], "unifi": [0, 33, 35, 36, 44, 47, 48, 52, 59, 87, 226, 646, 840, 841, 842, 843, 847, 848, 852, 857, 858, 860, 866, 868, 870, 882], "write": [0, 23, 44, 45, 56, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 167, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 342, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 371, 372, 373, 380, 382, 385, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 430, 432, 433, 436, 437, 439, 440, 448, 449, 451, 454, 455, 456, 457, 463, 466, 467, 468, 469, 471, 472, 481, 482, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 555, 559, 560, 561, 566, 567, 576, 590, 591, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 755, 756, 757, 758, 759, 761, 763, 764, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 792, 831, 836, 837, 839, 841, 842, 844, 845, 847, 848, 850, 851, 852, 856, 859, 861, 864, 868, 882], "code": [0, 1, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 31, 32, 39, 40, 44, 46, 47, 48, 49, 50, 51, 58, 59, 68, 69, 87, 91, 92, 116, 227, 273, 400, 543, 552, 560, 561, 576, 590, 594, 609, 646, 649, 651, 652, 654, 673, 694, 695, 696, 728, 829, 834, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 860, 861, 863, 866, 868, 869, 870, 872, 874, 876, 877, 878, 880, 881, 882, 883, 884], "agnost": [0, 33, 34, 44, 45, 46, 50, 56, 843, 848, 855, 868, 870], "underli": [0, 33, 44, 45, 56, 70, 77, 93, 100, 113, 243, 246, 248, 283, 390, 391, 470, 487, 647, 652, 654, 700, 724, 846, 859, 866, 878, 882], "deep": [0, 8, 9, 23, 33, 40, 44, 56, 87, 559, 649, 831, 832, 833, 836, 837, 839, 842, 845, 846, 848, 854, 858, 861, 867, 882, 884], "develop": [0, 8, 9, 10, 11, 23, 27, 41, 44, 45, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 845, 847, 853, 862, 864, 870, 872, 874, 875, 877, 878, 882, 883, 884], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 61, 62, 65, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 87, 89, 92, 93, 94, 97, 98, 100, 102, 103, 104, 110, 111, 115, 116, 139, 149, 151, 154, 160, 214, 219, 221, 226, 250, 252, 253, 256, 260, 281, 282, 286, 291, 292, 296, 298, 303, 304, 305, 341, 343, 344, 345, 347, 350, 352, 353, 354, 358, 359, 364, 369, 372, 376, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 404, 405, 411, 412, 413, 414, 417, 422, 424, 432, 433, 442, 443, 447, 457, 458, 460, 464, 465, 466, 470, 471, 475, 476, 477, 487, 488, 489, 491, 497, 501, 505, 506, 515, 517, 522, 523, 524, 525, 526, 536, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 562, 568, 573, 577, 588, 589, 598, 609, 621, 631, 644, 646, 647, 649, 650, 651, 652, 654, 656, 658, 659, 660, 674, 675, 676, 678, 681, 683, 687, 688, 689, 692, 693, 695, 698, 699, 702, 703, 707, 708, 709, 717, 718, 721, 725, 727, 737, 742, 747, 748, 749, 757, 758, 759, 762, 763, 764, 765, 767, 769, 789, 791, 794, 795, 796, 797, 802, 809, 812, 815, 816, 824, 825, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 877, 878, 880, 882, 883], "tensorflow": [0, 3, 14, 15, 16, 17, 18, 24, 25, 27, 31, 32, 33, 34, 37, 38, 39, 40, 44, 45, 46, 49, 50, 51, 56, 62, 69, 70, 71, 92, 93, 160, 207, 222, 237, 341, 382, 389, 443, 609, 644, 646, 649, 789, 802, 819, 831, 835, 836, 837, 838, 839, 842, 847, 848, 849, 853, 855, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 872, 874, 875, 877, 879, 880, 883], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 28, 29, 31, 32, 40, 44, 45, 56, 63, 296, 348, 349, 385, 647, 814, 831, 836, 837, 843, 848, 849, 852, 855, 856, 859, 860, 861, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 883], "flexibl": [0, 846, 848, 855, 858, 864, 866, 875, 882, 884], "particularli": [0, 839, 870, 878], "research": [0, 8, 9, 44, 45, 58, 831, 874, 875, 877, 882], "where": [0, 1, 19, 20, 23, 35, 39, 47, 48, 52, 60, 66, 69, 70, 71, 75, 77, 79, 80, 83, 84, 87, 89, 92, 93, 94, 98, 100, 102, 103, 106, 107, 110, 111, 148, 149, 152, 154, 160, 241, 251, 253, 256, 258, 260, 261, 270, 275, 276, 277, 284, 285, 286, 291, 293, 297, 299, 303, 313, 315, 341, 343, 344, 345, 360, 364, 371, 380, 382, 385, 388, 389, 390, 391, 394, 395, 400, 402, 403, 404, 405, 411, 416, 417, 421, 436, 442, 443, 447, 448, 450, 451, 458, 464, 465, 466, 475, 476, 477, 491, 497, 498, 515, 516, 517, 520, 522, 523, 525, 526, 536, 544, 545, 546, 576, 590, 628, 644, 647, 649, 651, 652, 654, 656, 658, 659, 662, 663, 676, 678, 683, 687, 688, 693, 695, 697, 698, 699, 702, 703, 706, 708, 717, 719, 720, 722, 728, 732, 740, 747, 756, 757, 758, 759, 764, 765, 780, 782, 784, 785, 786, 794, 809, 813, 825, 829, 831, 832, 835, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 851, 852, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 870, 871, 878], "abil": [0, 838, 866, 870, 875, 882], "switch": [0, 44, 56, 802, 844, 852, 856, 857, 874], "differ": [0, 4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 23, 24, 25, 26, 27, 31, 32, 36, 37, 38, 44, 45, 48, 49, 50, 51, 69, 70, 71, 75, 83, 87, 93, 94, 106, 115, 116, 125, 128, 178, 236, 253, 260, 261, 286, 302, 347, 354, 359, 360, 364, 385, 388, 389, 391, 400, 422, 433, 458, 464, 481, 488, 489, 504, 537, 538, 546, 566, 567, 641, 645, 647, 649, 651, 652, 654, 662, 674, 675, 690, 700, 718, 728, 775, 776, 781, 783, 784, 789, 794, 802, 811, 812, 831, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 874, 875, 877, 878, 880, 882, 884], "without": [0, 1, 4, 5, 26, 47, 56, 60, 63, 81, 87, 113, 600, 615, 649, 654, 656, 660, 724, 737, 767, 768, 769, 770, 794, 797, 824, 838, 839, 843, 844, 846, 847, 848, 849, 850, 852, 855, 856, 860, 863, 864, 866, 870, 875, 878, 882, 883], "chang": [0, 4, 5, 6, 7, 26, 33, 45, 58, 59, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 388, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 641, 647, 654, 656, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 700, 702, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 748, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 791, 831, 837, 838, 839, 840, 842, 844, 845, 846, 847, 848, 850, 851, 853, 854, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 878], "codebas": [0, 8, 9, 23, 44, 45, 224, 225, 646, 832, 834, 841, 848, 854, 859, 860, 862, 863, 864, 874, 875, 884], "signific": [0, 26, 70, 390, 470, 865, 870, 874, 882], "advantag": [0, 8, 9, 23, 40, 43, 44, 45, 831, 838, 839, 848, 859, 860, 871, 877, 882], "effect": [0, 8, 9, 23, 50, 66, 70, 72, 83, 93, 95, 106, 152, 390, 424, 469, 629, 637, 644, 650, 651, 662, 678, 782, 784, 794, 797, 837, 843, 846, 847, 851, 855, 859, 861, 866, 870], "analyz": [0, 837, 872], "done": [0, 5, 58, 60, 63, 652, 689, 836, 837, 838, 839, 842, 845, 847, 849, 850, 853, 854, 859, 860, 863, 877, 878, 882], "two": [0, 36, 48, 50, 56, 66, 70, 75, 81, 93, 94, 98, 115, 116, 136, 139, 145, 152, 158, 159, 160, 191, 199, 247, 261, 262, 296, 341, 342, 347, 360, 361, 363, 364, 366, 368, 375, 382, 385, 388, 389, 390, 391, 400, 417, 440, 441, 442, 451, 456, 465, 467, 471, 476, 497, 504, 508, 536, 546, 551, 643, 644, 645, 647, 649, 651, 652, 653, 654, 660, 676, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 714, 729, 767, 768, 769, 770, 794, 796, 802, 810, 837, 838, 842, 843, 848, 849, 850, 851, 856, 860, 861, 863, 866, 868], "distinct": [0, 70, 81, 93, 343, 344, 345, 382, 660, 767, 768, 769, 770, 834, 838, 846, 851, 858, 859, 860, 882], "one": [0, 4, 5, 8, 9, 14, 19, 20, 23, 24, 25, 27, 29, 35, 36, 39, 40, 44, 45, 47, 48, 60, 61, 62, 66, 70, 71, 74, 75, 77, 80, 81, 83, 87, 89, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 105, 106, 110, 139, 142, 152, 154, 155, 156, 166, 168, 226, 247, 253, 260, 261, 278, 284, 285, 286, 305, 315, 325, 328, 329, 347, 353, 356, 357, 360, 361, 364, 365, 366, 368, 369, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 400, 410, 412, 416, 417, 420, 421, 424, 432, 437, 439, 448, 457, 471, 475, 476, 477, 481, 487, 488, 489, 494, 496, 502, 505, 515, 516, 517, 522, 527, 537, 538, 541, 542, 543, 544, 545, 546, 548, 586, 590, 591, 593, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 644, 645, 646, 647, 649, 650, 651, 652, 654, 657, 659, 660, 662, 665, 666, 667, 668, 669, 670, 673, 690, 692, 693, 697, 699, 708, 709, 720, 721, 722, 725, 727, 731, 755, 762, 765, 767, 768, 769, 770, 775, 777, 794, 796, 813, 816, 819, 825, 828, 831, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 868, 870, 872, 877, 879, 882, 883], "anoth": [0, 4, 5, 14, 33, 35, 36, 39, 40, 44, 45, 47, 48, 60, 61, 146, 166, 168, 644, 645, 831, 837, 838, 839, 844, 846, 848, 849, 852, 854, 856, 859, 860, 863, 868, 869, 872, 876, 877, 878, 879, 882], "characterist": [0, 845], "clear": [0, 26, 208, 646, 837, 839, 844, 848, 849, 850, 860, 866, 868, 874, 882], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 29, 33, 34, 36, 40, 44, 45, 46, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 165, 166, 167, 168, 170, 176, 177, 178, 179, 180, 183, 185, 186, 188, 193, 205, 206, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 224, 225, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 322, 323, 324, 326, 333, 334, 341, 343, 347, 348, 349, 351, 366, 367, 372, 376, 380, 382, 385, 388, 389, 390, 391, 394, 400, 407, 408, 409, 410, 412, 413, 415, 417, 420, 422, 425, 426, 427, 430, 432, 433, 438, 441, 443, 445, 446, 456, 463, 466, 467, 468, 469, 470, 471, 472, 478, 480, 482, 493, 497, 498, 503, 504, 506, 507, 508, 510, 514, 518, 519, 521, 536, 537, 538, 539, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 586, 587, 589, 590, 591, 595, 596, 597, 600, 603, 604, 605, 606, 607, 609, 611, 613, 614, 615, 619, 620, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 711, 712, 713, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 819, 824, 825, 829, 838, 839, 846, 848, 850, 861, 863, 865, 868, 869, 878, 880], "shape": [0, 4, 5, 6, 7, 12, 13, 15, 16, 18, 23, 26, 27, 29, 35, 36, 37, 38, 42, 43, 44, 45, 50, 56, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 221, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 348, 349, 350, 351, 352, 354, 356, 357, 359, 361, 363, 365, 366, 367, 368, 372, 373, 375, 380, 382, 385, 388, 389, 390, 391, 394, 395, 396, 398, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 430, 432, 433, 434, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 480, 482, 485, 490, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 554, 555, 559, 560, 561, 563, 566, 567, 570, 576, 583, 590, 591, 601, 610, 612, 624, 628, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 771, 772, 774, 775, 776, 777, 779, 781, 782, 784, 785, 786, 791, 794, 796, 809, 810, 813, 824, 829, 831, 839, 840, 846, 848, 849, 850, 851, 852, 853, 855, 859, 860, 861, 863, 864, 865, 868, 877, 878], "gain": [0, 26, 809, 839, 840, 842, 867, 874, 882], "descript": [0, 1, 2, 53, 54, 55, 60, 63, 66, 69, 70, 75, 92, 93, 98, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 342, 348, 349, 351, 354, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 497, 506, 510, 536, 539, 566, 570, 572, 574, 605, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 837, 839, 851, 858, 859], "describ": [0, 10, 11, 70, 83, 93, 111, 236, 253, 254, 286, 289, 291, 390, 395, 398, 470, 526, 529, 647, 651, 662, 678, 777, 781, 783, 833, 834, 837, 838, 839, 845, 847, 859, 860, 863, 868, 882], "obtain": [0, 44, 45, 63, 70, 93, 332, 382, 388, 428, 651, 678, 796, 860, 878], "mean": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 70, 71, 74, 76, 77, 79, 83, 85, 87, 89, 93, 94, 97, 99, 100, 102, 106, 108, 110, 147, 226, 343, 353, 382, 385, 388, 389, 390, 391, 394, 395, 400, 417, 422, 440, 453, 465, 466, 467, 468, 469, 470, 471, 472, 482, 487, 497, 515, 517, 523, 542, 543, 560, 631, 632, 634, 640, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 658, 662, 666, 668, 669, 670, 672, 673, 674, 685, 711, 712, 713, 724, 733, 734, 735, 742, 757, 758, 794, 796, 797, 809, 810, 813, 831, 838, 839, 841, 842, 844, 846, 848, 849, 850, 856, 858, 859, 860, 863, 864, 866, 868, 869, 870, 872, 874, 877, 880, 882], "deviat": [0, 78, 79, 83, 101, 102, 106, 657, 658, 662, 755, 758, 782, 796, 809, 813, 842], "minimum": [0, 58, 69, 70, 71, 77, 80, 83, 92, 93, 94, 100, 103, 106, 233, 261, 288, 312, 344, 348, 349, 359, 380, 382, 385, 391, 400, 497, 534, 538, 544, 596, 597, 606, 607, 619, 620, 647, 649, 654, 659, 662, 717, 763, 778, 780, 794, 796, 797, 802, 848, 865], "maximum": [0, 69, 70, 71, 72, 77, 80, 83, 87, 92, 93, 94, 95, 100, 103, 106, 116, 226, 312, 348, 349, 360, 373, 380, 385, 388, 389, 391, 400, 404, 405, 415, 458, 461, 464, 497, 498, 537, 539, 544, 554, 555, 563, 571, 635, 646, 647, 649, 650, 652, 654, 659, 662, 693, 717, 762, 763, 778, 780, 794, 796, 797, 802, 825, 839, 848, 850, 859], "quartil": 0, "overview": [0, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 845, 847, 861, 863, 880], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 21, 22, 23, 50, 71, 111, 192, 558, 645, 649, 835, 837, 838, 839, 847, 848, 850, 853, 854, 857, 860, 863, 864, 866, 868, 872], "indic": [0, 4, 5, 21, 22, 66, 70, 71, 74, 75, 77, 78, 80, 81, 82, 87, 89, 90, 93, 94, 97, 98, 100, 101, 103, 104, 105, 110, 113, 140, 141, 154, 158, 160, 181, 185, 186, 297, 341, 342, 343, 362, 382, 385, 388, 389, 390, 391, 396, 398, 407, 408, 409, 411, 415, 416, 417, 421, 422, 425, 426, 427, 428, 432, 433, 443, 464, 467, 475, 476, 477, 480, 483, 485, 487, 488, 489, 492, 496, 503, 504, 506, 507, 508, 510, 512, 513, 527, 528, 529, 551, 566, 567, 569, 590, 591, 595, 628, 631, 632, 638, 644, 647, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 665, 667, 668, 669, 670, 673, 678, 695, 709, 720, 721, 722, 724, 725, 726, 727, 729, 731, 736, 739, 741, 743, 744, 745, 747, 751, 752, 753, 754, 755, 756, 762, 763, 764, 765, 767, 769, 771, 773, 774, 791, 792, 794, 796, 810, 816, 824, 825, 827, 838, 847, 855, 858, 860, 868, 869, 878], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 59, 74, 79, 83, 97, 102, 106, 395, 523, 651, 658, 662, 666, 668, 669, 670, 672, 673, 757, 758, 850, 880], "250": 0, "105092": 0, "min": [0, 56, 60, 67, 70, 71, 75, 83, 90, 93, 94, 98, 106, 158, 160, 178, 181, 285, 341, 344, 349, 382, 385, 389, 391, 443, 503, 544, 560, 590, 591, 606, 644, 645, 647, 649, 652, 662, 693, 699, 702, 703, 709], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 23, 56, 69, 70, 92, 93, 94, 97, 102, 132, 150, 239, 241, 253, 255, 266, 328, 361, 362, 382, 385, 431, 546, 561, 574, 606, 641, 644, 647, 649, 652, 656, 658, 665, 691, 697, 744, 759], "050000": 0, "max": [0, 56, 58, 67, 70, 71, 75, 83, 90, 93, 94, 98, 106, 178, 181, 284, 348, 385, 388, 389, 390, 391, 407, 408, 409, 425, 426, 427, 428, 430, 432, 443, 465, 503, 505, 506, 554, 555, 560, 576, 590, 591, 645, 647, 649, 652, 662, 693, 695, 698, 794, 810, 814, 847, 860], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 863], "receiv": [0, 5, 8, 9, 58, 62, 110, 550, 586, 649, 655, 733, 734, 735, 810, 829, 834, 838, 839, 848, 849, 863, 866], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 70, 81, 253, 260, 286, 295, 401, 547, 594, 618, 647, 649, 660, 767, 768, 769, 770, 837, 845, 846, 847, 848, 859, 860, 861, 863, 866, 868, 870], "associ": [0, 21, 22, 70, 75, 93, 98, 236, 286, 391, 400, 474, 539, 647, 652, 695, 698, 710, 791, 839, 848, 856, 857, 860, 861, 863, 870], "122": [0, 24, 25, 67, 181, 251, 647], "211321": 0, "256": [0, 4, 5, 12, 13, 21, 22, 23, 69, 94, 296, 297, 607, 651, 666, 668, 794], "683288": 0, "250000": 0, "105": [0, 23, 75, 97, 651, 652, 674, 675, 690, 697], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 58, 60, 70, 72, 76, 93, 95, 99, 388, 390, 394, 400, 402, 403, 407, 408, 409, 467, 468, 469, 470, 471, 472, 520, 536, 629, 630, 635, 650, 651, 653, 655, 678, 711, 733, 734, 809, 810], "across": [0, 1, 21, 22, 24, 25, 26, 37, 39, 40, 56, 70, 80, 87, 93, 94, 103, 115, 224, 225, 253, 260, 286, 304, 390, 394, 465, 517, 520, 551, 572, 608, 646, 647, 649, 651, 656, 659, 674, 678, 742, 762, 763, 810, 837, 842, 848, 850, 852, 855, 856, 858, 863, 866, 875, 882, 884], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 37, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 57, 58, 60, 61, 63, 65, 66, 70, 71, 74, 75, 77, 79, 84, 85, 87, 88, 89, 92, 93, 94, 97, 98, 100, 102, 107, 108, 110, 111, 139, 147, 154, 158, 159, 160, 214, 221, 253, 257, 285, 286, 341, 342, 354, 373, 382, 385, 388, 389, 390, 391, 400, 422, 431, 433, 434, 435, 443, 448, 458, 459, 461, 464, 465, 486, 497, 498, 506, 512, 542, 548, 551, 568, 588, 589, 606, 613, 614, 628, 631, 644, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 659, 663, 674, 677, 678, 683, 695, 700, 701, 704, 709, 721, 725, 727, 733, 734, 735, 736, 737, 738, 747, 748, 749, 750, 756, 759, 764, 789, 791, 794, 795, 796, 797, 809, 810, 816, 819, 825, 827, 829, 831, 832, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 877, 878, 879, 882, 883, 884], "group": [0, 8, 9, 23, 70, 93, 391, 394, 512, 516, 651, 656, 664, 671, 672, 738, 829, 840, 842, 846, 848, 856, 860, 861], "calcul": [0, 4, 5, 26, 58, 69, 70, 71, 76, 83, 87, 92, 93, 94, 98, 99, 106, 116, 233, 234, 235, 236, 237, 238, 239, 240, 241, 250, 251, 253, 256, 257, 258, 274, 275, 276, 277, 278, 279, 284, 285, 286, 291, 298, 299, 300, 302, 303, 304, 310, 320, 348, 349, 362, 372, 385, 388, 389, 390, 391, 394, 400, 407, 408, 409, 443, 465, 470, 497, 515, 517, 543, 583, 647, 649, 652, 653, 662, 689, 697, 700, 711, 712, 713, 714, 778, 779, 780, 781, 782, 783, 784, 794, 796, 809, 810, 813, 837, 851, 868, 878], "pictur": [0, 60, 831, 837, 868, 874], "vital": 0, "select": [0, 33, 44, 49, 62, 70, 83, 93, 106, 389, 391, 400, 443, 456, 506, 507, 510, 537, 538, 662, 775, 776, 837, 838, 839, 847, 853, 859, 863, 868, 869, 870, 875, 882], "guid": [0, 27, 40, 831, 832, 837, 838, 839, 845, 854, 860, 862], "recogn": [0, 60, 834, 840], "both": [0, 8, 9, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 42, 44, 45, 49, 50, 57, 59, 66, 69, 70, 71, 74, 75, 89, 92, 93, 94, 97, 98, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 168, 184, 188, 191, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 342, 348, 349, 351, 352, 354, 359, 364, 382, 385, 388, 389, 391, 395, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 491, 497, 506, 509, 510, 522, 536, 539, 566, 570, 572, 574, 583, 605, 614, 639, 640, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 810, 831, 835, 837, 839, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 859, 860, 863, 866, 868, 870, 877, 878, 882, 884], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 60], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 14, 23, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 63, 68, 70, 71, 77, 91, 93, 94, 100, 110, 111, 220, 227, 228, 232, 236, 253, 254, 260, 268, 269, 286, 289, 295, 297, 388, 391, 394, 412, 413, 414, 434, 475, 476, 477, 483, 485, 487, 488, 489, 490, 492, 496, 503, 504, 513, 515, 517, 549, 569, 576, 594, 646, 647, 649, 652, 654, 658, 700, 720, 721, 722, 724, 726, 727, 729, 731, 759, 837, 838, 839, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 868, 870, 877, 878, 880, 881, 882, 883, 884], "outnumb": 0, "address": [0, 44, 45, 70, 71, 93, 391, 506, 613, 649, 837, 839, 842, 843, 855, 862, 874, 881, 882, 884], "fair": 0, "dure": [0, 19, 20, 23, 24, 25, 35, 37, 44, 47, 49, 50, 68, 72, 83, 87, 91, 95, 106, 227, 388, 412, 413, 414, 594, 615, 629, 630, 635, 646, 649, 650, 651, 652, 655, 662, 674, 692, 733, 734, 735, 782, 784, 802, 813, 814, 829, 838, 846, 848, 849, 852, 856, 857, 859, 860, 861, 862, 863, 866, 870, 878, 882, 883], "similar": [0, 1, 8, 9, 23, 33, 44, 45, 70, 295, 390, 465, 647, 651, 653, 678, 714, 810, 835, 837, 838, 846, 847, 848, 849, 852, 853, 854, 856, 857, 858, 860, 861, 863, 864, 870, 877], "here": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 23, 26, 28, 30, 33, 38, 41, 42, 43, 44, 45, 56, 58, 59, 60, 61, 63, 93, 296, 472, 647, 831, 835, 836, 837, 838, 839, 842, 844, 845, 846, 847, 848, 850, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 868, 869, 870, 877, 878, 880, 882, 883], "take": [0, 4, 5, 8, 9, 21, 22, 23, 33, 40, 42, 43, 44, 45, 50, 56, 58, 61, 70, 75, 77, 83, 93, 100, 110, 135, 136, 138, 154, 293, 300, 315, 380, 388, 389, 391, 408, 416, 421, 426, 436, 445, 459, 480, 487, 507, 537, 538, 643, 644, 647, 651, 652, 654, 655, 678, 692, 696, 724, 735, 775, 794, 802, 809, 810, 824, 829, 831, 832, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 859, 860, 861, 863, 866, 868, 869, 870, 871, 877, 878], "random": [0, 8, 9, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 58, 60, 61, 70, 74, 87, 93, 97, 336, 337, 338, 339, 340, 382, 389, 390, 447, 458, 464, 470, 522, 523, 524, 525, 526, 651, 674, 756, 757, 758, 759, 760, 761, 794, 796, 809, 824, 825, 831, 837, 849, 861, 863, 864, 877, 880, 882], "match": [0, 1, 67, 70, 87, 90, 93, 165, 260, 295, 352, 354, 385, 388, 390, 391, 433, 465, 480, 498, 503, 507, 586, 645, 647, 649, 652, 688, 689, 693, 709, 789, 835, 837, 843, 845, 846, 850, 853, 861, 883], "prevent": [0, 70, 72, 83, 93, 95, 106, 390, 470, 571, 629, 630, 635, 649, 650, 651, 662, 674, 779, 783, 809, 814, 837, 839, 847, 848, 852, 859, 860, 864], "being": [0, 8, 9, 10, 11, 15, 16, 23, 44, 45, 56, 70, 87, 93, 108, 115, 119, 139, 389, 391, 453, 481, 497, 600, 644, 649, 651, 652, 676, 689, 791, 797, 809, 838, 839, 842, 843, 844, 846, 848, 849, 850, 853, 855, 857, 859, 860, 861, 863, 864, 866, 868, 870, 873, 875, 882, 883, 884], "bias": [0, 651, 676], "toward": [0, 70, 77, 93, 100, 260, 307, 358, 370, 385, 391, 400, 504, 539, 647, 654, 725, 831, 835, 837, 838, 853, 869, 882], "legit_sampl": 0, "n": [0, 26, 56, 59, 60, 61, 63, 66, 69, 70, 74, 75, 77, 79, 80, 83, 84, 92, 93, 97, 98, 100, 102, 103, 106, 107, 110, 115, 152, 158, 159, 160, 233, 303, 305, 341, 342, 354, 382, 385, 388, 389, 390, 391, 394, 395, 398, 400, 402, 403, 404, 405, 410, 411, 416, 417, 420, 421, 422, 430, 431, 432, 433, 435, 443, 444, 451, 455, 457, 459, 464, 465, 477, 483, 486, 490, 492, 504, 513, 515, 516, 517, 520, 522, 523, 524, 525, 526, 529, 536, 546, 644, 647, 651, 652, 654, 656, 658, 659, 662, 663, 664, 665, 666, 667, 669, 671, 673, 678, 683, 686, 690, 692, 693, 694, 695, 696, 697, 698, 699, 702, 703, 706, 707, 708, 709, 719, 720, 722, 728, 732, 744, 757, 758, 759, 765, 779, 781, 782, 783, 784, 785, 786, 810, 813, 824, 841, 845, 847, 863, 877], "after": [0, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 44, 45, 59, 70, 71, 72, 74, 78, 87, 93, 94, 95, 97, 101, 199, 300, 317, 321, 370, 380, 385, 388, 389, 391, 411, 412, 413, 414, 431, 435, 456, 486, 497, 576, 630, 633, 635, 636, 637, 645, 647, 649, 650, 651, 656, 657, 664, 665, 666, 667, 669, 671, 673, 674, 747, 755, 814, 819, 837, 838, 839, 842, 844, 845, 847, 848, 850, 852, 855, 858, 861, 863, 869, 877, 878, 882], "combin": [0, 26, 50, 70, 87, 93, 116, 388, 400, 422, 433, 536, 564, 565, 649, 652, 683, 692, 839, 843, 846, 847, 848, 850, 852, 856, 863, 868, 875, 882], "them": [0, 3, 4, 5, 19, 20, 24, 25, 27, 29, 31, 44, 45, 50, 389, 459, 553, 589, 649, 794, 810, 833, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 852, 854, 857, 859, 860, 861, 863, 865, 868, 870, 872, 873, 874, 876, 877, 878, 880, 882], "achiev": [0, 19, 20, 24, 25, 26, 44, 832, 834, 840, 847, 848, 856, 857, 863, 866, 868, 872], "concaten": [0, 56, 70, 71, 77, 93, 98, 391, 482, 559, 563, 649, 651, 654, 678, 697, 718, 794, 861, 866, 869], "along": [0, 59, 64, 66, 69, 70, 71, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 92, 93, 94, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 113, 126, 130, 135, 150, 151, 226, 300, 303, 305, 343, 344, 345, 348, 349, 353, 354, 369, 376, 382, 385, 386, 388, 389, 390, 391, 394, 400, 410, 416, 417, 420, 421, 422, 432, 433, 458, 469, 482, 483, 484, 486, 488, 489, 497, 503, 506, 508, 510, 518, 519, 520, 521, 537, 538, 539, 541, 542, 543, 544, 545, 546, 559, 566, 643, 644, 646, 647, 649, 652, 653, 654, 655, 658, 659, 661, 662, 663, 683, 697, 706, 708, 709, 711, 712, 713, 718, 721, 722, 723, 725, 726, 728, 730, 731, 733, 734, 735, 761, 762, 763, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 810, 837, 840, 841, 850, 859, 862, 864, 866, 868, 882], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 23, 26, 59, 60, 61, 64, 66, 69, 70, 71, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 126, 130, 150, 151, 154, 226, 300, 305, 348, 349, 353, 354, 362, 369, 385, 388, 390, 391, 394, 398, 400, 410, 411, 417, 420, 422, 432, 433, 469, 474, 482, 483, 484, 487, 488, 489, 492, 497, 503, 504, 506, 507, 508, 510, 512, 513, 518, 519, 521, 529, 534, 537, 538, 539, 541, 542, 543, 544, 545, 546, 559, 566, 628, 641, 644, 646, 647, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 673, 683, 686, 693, 706, 708, 709, 711, 712, 713, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 761, 762, 763, 767, 769, 771, 772, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 796, 806, 810, 811, 816, 846, 848, 850, 852, 855, 856, 859, 860, 863, 866, 868], "result": [0, 1, 4, 5, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 40, 44, 45, 56, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 167, 192, 193, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 445, 446, 448, 449, 453, 454, 455, 456, 457, 459, 463, 466, 467, 468, 469, 471, 472, 474, 481, 482, 485, 487, 488, 489, 490, 491, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 555, 559, 560, 561, 566, 567, 571, 576, 583, 590, 591, 629, 630, 631, 633, 635, 636, 637, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 739, 742, 743, 745, 749, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 796, 802, 816, 825, 829, 835, 837, 839, 842, 843, 845, 846, 847, 848, 850, 851, 853, 855, 856, 858, 859, 860, 861, 863, 864, 868, 869, 870, 877, 878, 880, 883], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 60, 810, 811, 812, 831, 838, 842, 843, 844, 845, 846, 847, 848, 849, 853, 855, 857, 860, 861, 863, 864, 866, 868, 870, 877, 878, 880, 882], "equal": [0, 6, 7, 66, 67, 69, 70, 71, 75, 76, 77, 79, 81, 82, 83, 87, 90, 92, 93, 94, 98, 99, 100, 102, 105, 111, 115, 116, 145, 147, 148, 149, 155, 156, 165, 245, 247, 251, 256, 258, 267, 268, 289, 291, 296, 299, 300, 304, 343, 344, 345, 347, 364, 382, 385, 388, 389, 391, 394, 400, 411, 432, 459, 483, 492, 506, 510, 513, 518, 519, 521, 539, 548, 551, 628, 644, 645, 647, 649, 652, 653, 654, 658, 659, 660, 661, 662, 686, 694, 695, 698, 700, 706, 711, 717, 719, 724, 726, 732, 759, 765, 767, 768, 769, 770, 771, 774, 779, 781, 782, 783, 784, 802, 809, 810, 845, 846, 848, 850, 852, 861, 863], "unbias": [0, 70, 83, 93, 106, 400, 536, 662, 784], "concat": [0, 12, 13, 56, 61, 71, 77, 87, 100, 226, 563, 646, 649, 654, 732, 861, 866, 868, 878], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 23, 56, 64, 70, 72, 79, 86, 92, 95, 102, 126, 251, 299, 373, 385, 633, 641, 650, 652, 656, 659, 662, 697, 737, 748, 757, 759, 766, 777], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 292, 647], "03": [0, 8, 9, 26, 59, 66, 69, 71, 72, 92, 93, 95, 102, 151, 251, 276, 356, 357, 606, 607, 630, 635, 644, 647, 649, 650, 652, 691, 758], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 794], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 24, 25, 37, 39, 40], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 26, 35, 56, 69, 70, 83, 90, 92, 93, 102, 181, 235, 251, 299, 335, 382, 420, 645, 647, 652, 656, 662, 704, 744, 758, 777], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 26, 56, 69, 79, 90, 92, 93, 102, 116, 181, 248, 645, 652, 662, 704, 758, 759, 783], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 69, 97, 241, 651, 674, 675], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 14, 19, 20, 24, 25, 26, 35, 36, 40, 44, 45, 56, 58, 59, 64, 79, 86, 95, 102, 131, 247, 388, 410, 420, 629, 633, 641, 647, 650, 652, 657, 658, 662, 693, 697, 755, 756, 757, 758, 759, 760, 777, 831, 868, 877], "53": [0, 17, 18, 26, 37, 56, 75, 79, 92, 97, 172, 228, 258, 431, 632, 634, 645, 646, 650, 652, 657, 690, 755, 759], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 15, 16, 19, 20, 24, 25, 27, 29, 39, 42, 44, 45, 50, 56, 57, 66, 70, 71, 93, 94, 110, 138, 150, 151, 335, 382, 388, 433, 563, 643, 644, 649, 651, 676, 677, 678, 825, 837, 839, 840, 842, 843, 845, 847, 848, 850, 851, 856, 858, 859, 860, 862, 866, 877, 878], "predictor": [0, 870], "label": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 70, 76, 93, 99, 390, 465, 466, 468, 469, 470, 471, 472, 653, 711, 712, 713, 831, 837, 842, 860, 871, 882], "whether": [0, 31, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 140, 141, 147, 149, 154, 156, 162, 165, 166, 168, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 188, 189, 190, 191, 193, 205, 209, 210, 212, 213, 215, 217, 220, 221, 223, 226, 227, 229, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 342, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 382, 385, 388, 389, 390, 391, 400, 407, 408, 409, 411, 412, 413, 414, 430, 432, 434, 436, 451, 453, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 481, 482, 483, 485, 487, 488, 489, 492, 496, 504, 506, 507, 508, 510, 513, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 586, 590, 591, 592, 593, 595, 598, 599, 601, 602, 604, 605, 606, 607, 609, 611, 613, 614, 621, 622, 625, 627, 630, 631, 633, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 662, 663, 665, 666, 667, 668, 674, 675, 676, 677, 678, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 701, 706, 711, 712, 713, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 742, 743, 744, 746, 747, 748, 749, 753, 754, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 789, 791, 794, 806, 807, 810, 811, 812, 813, 814, 824, 831, 832, 837, 838, 843, 846, 848, 850, 855, 859, 860, 863, 865, 866, 874, 877, 878, 879], "x": [0, 4, 5, 12, 13, 15, 16, 17, 18, 23, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 185, 186, 188, 193, 209, 210, 212, 214, 219, 220, 221, 225, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 341, 342, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 398, 399, 400, 401, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 437, 439, 440, 442, 444, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 478, 479, 481, 482, 484, 485, 487, 490, 493, 494, 495, 496, 497, 499, 500, 501, 502, 505, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 611, 613, 614, 615, 627, 628, 630, 631, 632, 634, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 739, 742, 743, 744, 745, 746, 747, 748, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 810, 813, 816, 819, 822, 824, 829, 831, 835, 837, 841, 843, 844, 846, 848, 849, 850, 851, 852, 853, 855, 856, 858, 859, 860, 861, 863, 864, 866, 868, 869, 877, 878, 880], "y": [0, 26, 44, 45, 56, 57, 59, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 145, 147, 149, 150, 151, 152, 153, 154, 155, 156, 162, 165, 166, 167, 176, 178, 181, 193, 206, 210, 214, 219, 220, 221, 225, 227, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 347, 348, 349, 355, 363, 364, 365, 366, 367, 372, 374, 376, 380, 382, 385, 388, 389, 390, 391, 394, 400, 408, 410, 412, 413, 417, 420, 422, 426, 432, 439, 443, 449, 456, 463, 465, 466, 468, 469, 470, 471, 472, 482, 484, 493, 497, 498, 506, 507, 508, 510, 514, 518, 519, 521, 529, 535, 536, 537, 538, 539, 542, 544, 545, 546, 548, 551, 554, 555, 558, 559, 561, 562, 563, 566, 567, 568, 572, 574, 575, 576, 578, 579, 582, 583, 588, 595, 596, 597, 600, 603, 604, 606, 607, 609, 611, 613, 614, 615, 619, 620, 623, 626, 627, 628, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 666, 668, 670, 672, 673, 674, 675, 682, 683, 684, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 702, 703, 704, 706, 708, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 739, 742, 743, 745, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 829, 844, 846, 849, 850, 858, 860, 861, 863, 864, 866, 869, 878], "upcom": 0, "phase": [0, 863, 870, 882], "drop": [0, 26, 60, 70, 93, 344, 382, 390, 391, 469, 507, 809, 810, 838, 870], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 304, 647], "length": [0, 8, 9, 21, 22, 58, 59, 66, 70, 76, 77, 87, 93, 99, 100, 110, 111, 116, 139, 147, 152, 327, 330, 331, 346, 354, 382, 385, 388, 389, 391, 395, 398, 410, 411, 416, 417, 420, 421, 422, 432, 433, 434, 436, 448, 457, 497, 498, 507, 524, 529, 628, 644, 649, 651, 652, 653, 654, 660, 678, 702, 703, 711, 724, 767, 794, 810, 863], "valid": [0, 12, 13, 23, 58, 60, 70, 74, 84, 93, 97, 107, 110, 111, 170, 388, 389, 407, 408, 409, 425, 426, 427, 428, 430, 431, 435, 456, 464, 579, 645, 649, 651, 654, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 720, 728, 785, 786, 794, 795, 810, 824, 838, 844, 848, 850, 854, 858, 861, 863, 878, 883], "gener": [0, 1, 10, 11, 12, 13, 23, 31, 35, 40, 44, 45, 47, 50, 58, 60, 62, 63, 66, 69, 70, 74, 79, 85, 89, 92, 93, 97, 102, 108, 111, 139, 150, 151, 160, 168, 253, 256, 266, 267, 282, 286, 295, 325, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 348, 349, 382, 385, 388, 389, 391, 395, 400, 432, 438, 460, 506, 524, 536, 644, 645, 647, 651, 652, 653, 654, 658, 662, 674, 700, 701, 704, 707, 716, 732, 756, 757, 759, 760, 782, 794, 797, 802, 814, 824, 837, 838, 839, 841, 842, 843, 845, 848, 849, 850, 851, 852, 855, 856, 859, 860, 861, 864, 867, 868, 869, 870, 872, 875, 882, 883, 884], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 48, 56, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 178, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 342, 348, 349, 350, 351, 356, 357, 361, 363, 365, 366, 367, 368, 372, 375, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 430, 432, 433, 437, 439, 440, 442, 443, 448, 449, 454, 455, 456, 457, 462, 466, 467, 468, 469, 470, 471, 472, 476, 477, 482, 483, 485, 490, 498, 499, 500, 501, 502, 504, 506, 508, 510, 511, 518, 519, 521, 522, 523, 525, 526, 527, 529, 536, 537, 538, 539, 543, 547, 554, 555, 559, 560, 561, 566, 567, 576, 590, 591, 594, 629, 630, 633, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 878, 880, 882, 884], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 26, 29, 40, 44, 45, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220, 221, 222, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 590, 591, 594, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 802, 807, 809, 810, 811, 812, 813, 814, 815, 819, 820, 824, 825, 827, 829, 831, 837, 843, 851, 852, 855, 860, 861, 863, 864, 868, 877, 878, 879, 880, 883], "test_siz": [0, 26, 58], "specifi": [0, 23, 39, 40, 44, 45, 49, 50, 51, 62, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 143, 148, 150, 155, 158, 159, 161, 165, 167, 214, 219, 221, 225, 226, 227, 295, 304, 308, 313, 314, 316, 342, 347, 364, 369, 380, 382, 385, 388, 389, 390, 391, 395, 400, 407, 408, 409, 411, 417, 422, 432, 433, 434, 435, 443, 455, 457, 462, 465, 469, 470, 471, 473, 487, 490, 500, 501, 503, 504, 506, 510, 523, 534, 536, 537, 538, 541, 542, 546, 549, 566, 567, 569, 571, 572, 585, 587, 595, 628, 641, 644, 645, 646, 647, 649, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 676, 678, 681, 683, 685, 686, 688, 689, 693, 701, 704, 706, 707, 708, 709, 711, 712, 713, 717, 718, 719, 720, 721, 725, 727, 728, 731, 732, 740, 741, 743, 744, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 765, 768, 769, 770, 771, 775, 776, 777, 779, 781, 783, 785, 786, 794, 797, 806, 810, 811, 812, 825, 829, 838, 841, 845, 848, 849, 855, 856, 857, 859, 860, 861, 863, 868, 877, 878, 880], "reserv": [0, 837], "x_train": [0, 26], "x_test": [0, 26], "y_train": [0, 26, 60], "y_test": [0, 26], "random_st": [0, 26, 389, 447], "With": [0, 4, 5, 8, 9, 23, 35, 47, 56, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 83, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 161, 162, 165, 166, 167, 168, 170, 176, 177, 178, 181, 188, 193, 194, 195, 196, 197, 207, 210, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 348, 349, 351, 353, 356, 357, 361, 364, 365, 366, 368, 369, 372, 380, 382, 385, 388, 389, 390, 391, 400, 410, 412, 413, 420, 432, 439, 440, 441, 443, 444, 445, 456, 459, 471, 487, 488, 489, 491, 494, 496, 497, 498, 504, 506, 508, 510, 512, 527, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 552, 553, 554, 555, 558, 559, 560, 561, 562, 566, 567, 570, 572, 574, 575, 576, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 713, 714, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 838, 848, 850, 860, 863, 866, 878, 882], "next": [0, 1, 8, 9, 10, 11, 12, 13, 23, 34, 35, 36, 37, 39, 40, 43, 46, 47, 48, 49, 50, 51, 58, 60, 70, 93, 178, 361, 365, 370, 374, 385, 645, 809, 814, 837, 838, 839, 844, 848, 850, 851, 853, 854, 857, 882], "convers": [0, 69, 70, 93, 252, 292, 592, 602, 649, 811, 812, 831, 837, 869, 870, 872, 874, 875, 884], "becaus": [0, 37, 47, 49, 59, 70, 388, 411, 789, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 866, 868, 870, 882], "own": [0, 8, 9, 10, 11, 17, 23, 27, 29, 33, 44, 45, 50, 831, 838, 842, 847, 848, 851, 852, 859, 860, 864, 868, 870, 872, 874, 882, 884], "confirm": [0, 4, 5, 59, 834, 837], "been": [0, 8, 9, 10, 11, 23, 24, 25, 27, 29, 37, 39, 44, 45, 70, 71, 79, 93, 94, 102, 209, 296, 391, 505, 559, 560, 561, 646, 647, 649, 658, 756, 824, 825, 837, 839, 842, 844, 846, 847, 848, 849, 851, 852, 855, 856, 859, 863, 868, 869, 870, 878, 882], "correctli": [0, 1, 39, 44, 45, 58, 70, 75, 80, 93, 98, 103, 353, 385, 400, 542, 543, 544, 545, 546, 652, 659, 693, 762, 837, 838, 839, 843, 846, 848, 850, 852, 854, 855, 861, 863, 866, 870, 877, 878], "size": [0, 5, 12, 13, 26, 27, 29, 34, 37, 46, 47, 49, 50, 51, 58, 60, 63, 70, 71, 74, 75, 77, 79, 80, 87, 93, 94, 97, 98, 100, 102, 103, 110, 111, 115, 116, 147, 150, 224, 225, 226, 325, 328, 332, 343, 344, 345, 346, 353, 369, 376, 382, 385, 386, 388, 389, 390, 391, 394, 395, 398, 400, 402, 403, 404, 405, 406, 407, 408, 424, 425, 426, 428, 429, 435, 436, 443, 446, 458, 464, 465, 467, 481, 483, 495, 506, 508, 510, 516, 517, 520, 524, 529, 541, 542, 543, 544, 545, 546, 585, 590, 644, 646, 649, 651, 652, 654, 658, 659, 663, 676, 678, 681, 683, 686, 690, 693, 697, 699, 702, 708, 720, 725, 726, 727, 756, 762, 765, 785, 786, 794, 796, 797, 810, 825, 859, 861, 863, 866, 878, 880], "correct": [0, 19, 20, 27, 29, 38, 50, 56, 58, 60, 83, 106, 199, 389, 460, 645, 654, 662, 717, 782, 784, 791, 794, 835, 837, 839, 841, 846, 847, 848, 849, 852, 853, 855, 856, 859, 861, 863, 877], "787": 0, "197": [0, 69, 241, 647], "success": [0, 23, 652, 662, 706, 781, 783, 834, 838, 847], "prepare_data": [0, 26], "list": [0, 1, 6, 7, 12, 13, 19, 20, 21, 22, 26, 60, 65, 66, 67, 69, 70, 71, 74, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 147, 149, 152, 153, 154, 156, 162, 166, 168, 181, 185, 186, 193, 209, 226, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 362, 363, 364, 370, 371, 372, 374, 375, 376, 385, 388, 389, 391, 398, 407, 408, 409, 411, 412, 413, 414, 425, 426, 427, 428, 432, 434, 438, 443, 447, 450, 457, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 481, 482, 483, 492, 498, 504, 506, 507, 508, 510, 513, 515, 517, 518, 519, 521, 523, 528, 536, 537, 538, 539, 548, 550, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 568, 570, 572, 574, 575, 576, 578, 579, 582, 586, 590, 591, 605, 606, 607, 609, 611, 612, 613, 614, 615, 627, 628, 633, 639, 644, 645, 646, 647, 649, 651, 652, 654, 656, 657, 660, 661, 665, 666, 667, 668, 669, 670, 673, 674, 675, 678, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 704, 706, 711, 712, 713, 717, 718, 721, 724, 725, 726, 727, 728, 731, 732, 736, 737, 738, 739, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 775, 776, 779, 781, 782, 784, 785, 786, 789, 791, 794, 795, 796, 797, 802, 807, 810, 816, 824, 825, 829, 834, 836, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 859, 860, 861, 863, 864, 868, 870, 878, 882, 883], "tupl": [0, 26, 62, 65, 66, 67, 69, 70, 71, 74, 75, 77, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 140, 141, 147, 149, 153, 154, 156, 160, 162, 166, 167, 168, 179, 180, 181, 185, 186, 192, 193, 199, 209, 212, 213, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 329, 334, 338, 341, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 361, 362, 363, 364, 368, 369, 370, 371, 372, 374, 375, 376, 377, 382, 385, 387, 388, 389, 391, 394, 395, 396, 398, 400, 407, 408, 409, 411, 412, 413, 414, 416, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 442, 443, 447, 451, 453, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 481, 482, 492, 497, 498, 504, 506, 507, 508, 510, 512, 515, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 536, 537, 538, 539, 541, 542, 543, 544, 545, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 595, 605, 606, 607, 608, 609, 611, 612, 613, 614, 627, 628, 629, 630, 631, 633, 635, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 704, 705, 706, 709, 711, 712, 713, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 744, 745, 747, 748, 751, 752, 753, 754, 756, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 795, 796, 809, 810, 812, 824, 825, 843, 848, 855, 856, 859, 861, 863, 868, 870, 877, 878, 880], "thei": [0, 1, 26, 51, 56, 61, 70, 75, 79, 81, 87, 98, 102, 104, 191, 305, 359, 385, 645, 647, 651, 652, 655, 658, 660, 676, 707, 733, 734, 756, 767, 789, 815, 836, 837, 838, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 859, 860, 863, 864, 866, 868, 869, 870, 875, 878, 882], "dimension": [0, 66, 69, 70, 75, 77, 80, 83, 84, 87, 89, 92, 93, 98, 100, 106, 107, 115, 139, 145, 147, 152, 160, 305, 341, 348, 349, 382, 385, 388, 389, 391, 400, 416, 417, 421, 422, 432, 433, 440, 475, 476, 477, 481, 486, 487, 534, 546, 644, 647, 652, 654, 659, 662, 663, 683, 684, 690, 692, 695, 697, 698, 708, 709, 726, 762, 763, 765, 778, 779, 780, 781, 782, 783, 784, 785, 786, 856, 858, 863, 866, 868, 882], "reshap": [0, 4, 5, 44, 45, 60, 61, 70, 74, 75, 77, 87, 93, 97, 98, 100, 373, 385, 388, 389, 391, 407, 408, 409, 412, 425, 426, 427, 430, 439, 456, 481, 487, 628, 649, 651, 652, 654, 667, 669, 673, 693, 709, 859, 860, 863, 866, 868], "float32": [0, 4, 5, 12, 13, 21, 22, 26, 27, 29, 34, 35, 56, 58, 59, 60, 66, 67, 70, 71, 74, 89, 90, 93, 94, 97, 106, 151, 154, 156, 162, 163, 164, 168, 172, 173, 176, 177, 178, 179, 182, 185, 186, 188, 193, 196, 202, 252, 266, 293, 346, 359, 382, 385, 388, 389, 390, 400, 410, 420, 433, 459, 465, 470, 539, 576, 613, 644, 645, 647, 649, 651, 652, 655, 667, 669, 670, 673, 700, 702, 703, 709, 734, 735, 791, 794, 795, 831, 848, 850, 861, 863, 864, 877, 880], "def": [0, 4, 5, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 69, 92, 135, 237, 553, 643, 649, 655, 656, 734, 735, 742, 824, 831, 835, 837, 838, 842, 843, 846, 848, 849, 850, 852, 853, 855, 856, 858, 859, 860, 861, 863, 864, 866, 868, 869, 877, 878, 880], "isinst": [0, 12, 13, 26, 40, 44, 45, 852, 860, 863, 864, 868], "rang": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 23, 26, 44, 45, 56, 57, 58, 60, 66, 70, 83, 89, 93, 139, 150, 151, 300, 312, 320, 332, 380, 382, 389, 391, 400, 443, 455, 490, 499, 501, 506, 511, 537, 538, 539, 559, 628, 644, 647, 649, 660, 662, 767, 775, 776, 781, 783, 794, 796, 797, 809, 831, 834, 837, 848, 852, 856, 863, 868, 882], "len": [0, 8, 9, 10, 11, 12, 13, 23, 26, 58, 60, 66, 70, 75, 93, 98, 152, 329, 338, 339, 382, 388, 389, 400, 422, 433, 445, 448, 458, 464, 546, 644, 652, 688, 707, 846, 847, 852, 859, 860, 863, 868, 878], "expand_dim": [0, 8, 9, 26, 39, 44, 45, 60, 62, 77, 100, 651, 654, 673, 831, 860, 868, 877], "astyp": [0, 26, 27, 29, 34, 58, 59, 60, 67, 74, 90, 97, 645, 651, 667, 669, 670, 673, 831, 848, 859, 860, 866, 880], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 26, 59, 60, 62, 63, 70, 71, 79, 92, 93, 102, 171, 172, 173, 174, 175, 187, 293, 297, 388, 389, 395, 434, 447, 458, 462, 464, 523, 558, 562, 645, 647, 649, 651, 656, 658, 677, 746, 749, 757, 758, 759, 789, 824, 825, 837, 838, 839, 842, 844, 848, 849, 852, 856, 859, 860, 861, 863, 864, 866, 868, 870, 883], "return": [0, 4, 5, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 801, 802, 807, 809, 810, 812, 814, 819, 820, 824, 825, 826, 827, 828, 829, 831, 838, 839, 843, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 877, 878, 879, 880, 883], "defin": [0, 34, 40, 43, 44, 45, 46, 66, 70, 71, 75, 89, 93, 94, 98, 113, 129, 154, 158, 159, 160, 236, 253, 260, 286, 287, 295, 297, 300, 313, 317, 321, 327, 330, 331, 332, 341, 342, 343, 344, 345, 348, 349, 351, 380, 382, 385, 388, 389, 391, 400, 424, 441, 497, 504, 539, 574, 575, 595, 641, 644, 647, 649, 651, 652, 662, 676, 683, 688, 689, 701, 778, 779, 780, 782, 837, 838, 843, 844, 847, 848, 851, 855, 858, 860, 861, 863, 864, 870, 872, 880, 882, 883, 884], "proper": [0, 831, 837, 860, 877], "adjust": [0, 58, 83, 106, 389, 460, 662, 782, 784, 819, 829], "comput": [0, 8, 9, 23, 39, 40, 42, 44, 45, 51, 52, 57, 58, 60, 64, 69, 70, 71, 72, 74, 75, 76, 81, 83, 86, 87, 92, 93, 94, 95, 97, 98, 99, 106, 110, 111, 113, 126, 130, 226, 236, 243, 246, 248, 253, 254, 255, 260, 261, 262, 264, 265, 271, 272, 273, 280, 281, 282, 283, 285, 286, 289, 294, 295, 313, 317, 321, 327, 330, 331, 343, 344, 345, 348, 349, 351, 355, 357, 360, 362, 363, 367, 369, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 398, 400, 407, 408, 409, 410, 411, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 436, 437, 439, 441, 442, 443, 444, 446, 447, 449, 451, 454, 456, 458, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 491, 494, 508, 515, 517, 528, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 553, 554, 555, 599, 622, 629, 631, 632, 634, 638, 639, 640, 646, 647, 649, 650, 651, 652, 653, 654, 656, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 682, 683, 687, 688, 689, 692, 693, 695, 697, 699, 701, 702, 704, 706, 708, 709, 711, 712, 713, 715, 716, 720, 742, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 791, 796, 810, 813, 825, 831, 838, 846, 847, 848, 856, 858, 860, 863, 865, 866, 868, 869, 870, 872, 874, 875, 877, 878, 881, 882, 883], "most": [0, 5, 8, 9, 14, 26, 33, 44, 45, 87, 89, 110, 113, 154, 389, 442, 599, 622, 644, 649, 652, 687, 688, 828, 831, 836, 837, 838, 843, 846, 847, 848, 849, 853, 855, 856, 858, 859, 860, 861, 863, 864, 865, 866, 869, 870, 882, 883], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 21, 22, 23, 37, 40, 44, 45, 60, 71, 94, 209, 215, 217, 218, 229, 560, 646, 649, 652, 703, 795, 829, 831, 838, 839, 846, 847, 848, 849, 851, 852, 860, 863, 866, 869, 870, 871, 875, 877, 878, 880], "cpu": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 37, 39, 40, 44, 58, 59, 60, 62, 63, 66, 68, 70, 79, 89, 91, 93, 102, 139, 145, 148, 150, 151, 154, 155, 156, 162, 206, 207, 209, 210, 211, 212, 217, 220, 222, 224, 227, 228, 230, 232, 389, 395, 451, 522, 523, 525, 526, 644, 646, 658, 756, 757, 758, 759, 791, 809, 810, 811, 812, 813, 814, 815, 829, 835, 838, 839, 845, 848, 849, 853, 860, 863, 870, 882], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 58, 60, 62, 63, 209, 211, 212, 215, 218, 220, 222, 224, 225, 228, 230, 232, 646, 829, 838, 839, 847, 849, 871, 882], "tpu": [0, 58, 207, 213, 222, 224, 229, 646, 829, 849, 882], "explicitli": [0, 652, 688, 689, 704, 791, 810, 811, 812, 835, 842, 843, 844, 846, 848, 851, 852, 853, 856, 857, 858, 859, 861, 863, 868, 870, 877, 882], "hardwar": [0, 4, 5, 58, 115, 119, 838, 866, 871, 882, 883, 884], "mai": [0, 1, 8, 9, 68, 69, 70, 75, 81, 82, 91, 92, 98, 105, 115, 116, 139, 146, 157, 227, 253, 254, 260, 265, 273, 281, 282, 286, 287, 289, 304, 348, 349, 385, 417, 558, 594, 644, 646, 647, 649, 652, 660, 661, 662, 700, 709, 767, 768, 769, 770, 771, 774, 778, 779, 780, 782, 794, 825, 836, 837, 838, 839, 842, 846, 847, 848, 852, 853, 856, 857, 858, 860, 861, 863, 866, 884], "vari": [0, 70, 81, 110, 111, 304, 391, 417, 498, 559, 647, 649, 652, 660, 699, 768, 769, 770, 825, 846, 850, 860, 863], "known": [0, 70, 93, 297, 389, 461, 463, 647, 809, 842, 847, 848, 860, 863, 875], "advanc": [0, 31, 56, 838, 840, 875, 884], "set_soft_device_mod": [0, 4, 5, 26, 29, 231, 646, 849], "section": [0, 1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 64, 70, 81, 93, 125, 388, 391, 422, 433, 483, 492, 513, 660, 767, 768, 769, 770, 831, 832, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 880, 881], "binari": [0, 8, 9, 26, 37, 40, 70, 71, 74, 76, 93, 97, 99, 243, 246, 248, 283, 303, 388, 390, 434, 469, 472, 647, 651, 653, 674, 678, 711], "logist": [0, 26], "gblinear": [0, 26], "booster": [0, 26], "linear": [0, 4, 5, 21, 22, 23, 29, 41, 43, 44, 45, 56, 57, 58, 60, 63, 70, 71, 74, 86, 93, 94, 97, 123, 125, 127, 128, 131, 308, 312, 316, 318, 319, 320, 324, 366, 380, 385, 388, 391, 400, 424, 459, 497, 546, 563, 586, 641, 649, 651, 656, 678, 701, 743, 794, 796, 797, 809, 810, 831, 846, 851, 856, 857, 859, 860, 863, 866, 869, 877, 882, 884], "estim": [0, 70, 93, 362, 385, 400, 536, 829], "rate": [0, 70, 72, 93, 95, 388, 395, 430, 526, 630, 633, 635, 636, 637, 650, 651, 655, 676, 733, 734, 735, 814, 847], "fine": [0, 27, 29, 44, 45, 838, 839, 848, 850, 860], "tune": [0, 27, 29, 44, 45], "regular": [0, 59, 93, 389, 400, 451, 456, 540, 838, 860, 882], "term": [0, 8, 9, 23, 70, 93, 325, 332, 335, 382, 390, 469, 470, 651, 676, 677, 810, 825, 831, 839, 846, 868, 872, 882], "reg_lambda": [0, 26], "reg_alpha": [0, 26], "overfit": [0, 651, 674], "compil": [0, 8, 9, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 37, 40, 44, 45, 48, 61, 63, 304, 647, 802, 838, 860, 864, 869, 870, 872, 874, 877, 882, 883, 884], "param": [0, 19, 20, 24, 25, 26, 44, 58, 59, 60, 62, 87, 93, 94, 116, 549, 566, 567, 649, 816, 831, 877], "n_estim": [0, 26], "100": [0, 5, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 24, 25, 26, 56, 58, 60, 66, 69, 70, 89, 92, 93, 94, 97, 114, 151, 160, 247, 287, 300, 341, 364, 373, 382, 385, 388, 389, 391, 412, 413, 458, 464, 503, 567, 575, 591, 644, 647, 649, 652, 656, 691, 742, 847, 848, 863, 870, 878], "learning_r": [0, 10, 11, 23, 26], "base_margin": [0, 26], "none": [0, 4, 5, 8, 9, 12, 13, 19, 20, 23, 24, 25, 26, 44, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 115, 116, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 181, 183, 184, 185, 186, 188, 190, 193, 205, 208, 209, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 582, 587, 590, 591, 592, 593, 594, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 639, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 747, 748, 749, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 797, 802, 806, 807, 809, 810, 811, 812, 813, 814, 815, 818, 819, 823, 825, 829, 831, 835, 838, 842, 843, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 859, 860, 861, 863, 864, 866, 868, 869, 877, 878, 880], "xgb_cl": [0, 26], "better": [0, 19, 20, 26, 47, 56, 62, 63, 837, 841, 860, 861, 864, 866, 867], "ivy_cl": [0, 26], "effici": [0, 12, 13, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 44, 45, 46, 47, 70, 75, 93, 98, 389, 390, 453, 469, 599, 622, 649, 652, 695, 831, 838, 839, 846, 856, 857, 859, 863, 865, 869, 870, 874, 875, 877, 882, 884], "fit": [0, 26, 77, 100, 654, 723, 837, 860, 868, 882], "magic": [0, 847], "durat": 0, "70": [0, 26, 56, 58, 70, 93, 94, 388, 410, 420, 567, 591, 652, 662, 697, 777], "m": [0, 5, 19, 20, 21, 22, 23, 24, 25, 26, 44, 57, 59, 61, 63, 66, 70, 75, 79, 92, 93, 98, 102, 115, 152, 158, 159, 160, 280, 341, 342, 382, 388, 389, 390, 391, 395, 411, 442, 447, 448, 450, 451, 466, 477, 488, 489, 504, 522, 523, 524, 525, 526, 644, 652, 656, 658, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 744, 757, 758, 759, 831, 838, 839, 841, 847, 869], "per": [0, 19, 20, 24, 25, 26, 35, 58, 60, 70, 74, 93, 97, 332, 382, 388, 389, 391, 407, 408, 409, 425, 426, 427, 428, 457, 505, 651, 665, 667, 668, 669, 670, 673, 678, 810, 839, 847, 857, 860], "loop": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 35, 52, 85, 93, 108, 135, 138, 388, 434, 643, 655, 733, 734, 735, 844, 870, 878], "dev": [0, 4, 5, 19, 20, 21, 22, 24, 25, 26, 35, 58, 60, 63, 68, 87, 91, 214, 221, 646, 831, 838, 849, 853, 856, 871], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 58, 60, 61, 62, 70, 72, 93, 95, 394, 515, 517, 629, 630, 635, 650, 651, 655, 676, 733, 734, 735, 791, 792, 810, 811, 812, 813, 824, 831, 833, 837, 838, 841, 843, 844, 847, 849, 850, 852, 854, 855, 857, 860, 861, 868, 869, 870, 871, 877, 878, 880, 882, 883], "59": [0, 10, 11, 56, 69, 248, 400, 537], "04": [0, 8, 9, 23, 58, 59, 66, 72, 86, 90, 93, 95, 125, 126, 151, 178, 258, 596, 629, 630, 635, 641, 644, 645, 647, 649, 650, 794, 838, 863], "slowest": [0, 47, 70, 77, 93, 100, 391, 487, 654, 724], "took": [0, 19, 20, 92, 293], "87": [0, 26, 56, 95, 97, 247, 276, 400, 431, 537, 629, 647, 650, 794, 853], "longer": [0, 26, 838, 848, 859, 863, 875, 882], "than": [0, 10, 11, 15, 16, 17, 26, 42, 44, 45, 47, 50, 69, 70, 71, 74, 75, 77, 79, 80, 81, 83, 87, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 115, 116, 139, 147, 178, 226, 234, 235, 238, 239, 241, 242, 245, 247, 249, 253, 259, 260, 274, 275, 276, 277, 284, 286, 291, 295, 297, 299, 300, 304, 305, 306, 315, 325, 347, 350, 364, 371, 382, 385, 388, 389, 390, 391, 400, 410, 411, 416, 417, 420, 421, 422, 432, 433, 437, 439, 458, 464, 465, 488, 489, 537, 538, 539, 578, 579, 582, 599, 622, 644, 645, 646, 647, 649, 651, 652, 654, 658, 659, 660, 662, 676, 681, 683, 692, 693, 694, 695, 698, 709, 717, 721, 727, 759, 765, 768, 769, 770, 775, 776, 781, 782, 783, 784, 810, 825, 835, 837, 839, 842, 846, 847, 848, 850, 852, 853, 859, 860, 861, 863, 864, 865, 866, 868, 870, 871, 882, 884], "fastest": [0, 47, 70, 77, 93, 100, 389, 391, 456, 487, 654, 724], "could": [0, 8, 9, 24, 25, 44, 45, 50, 81, 660, 767, 768, 769, 770, 837, 838, 839, 842, 847, 848, 850, 857, 859, 860, 861, 863, 868, 882], "intermedi": [0, 57, 882, 883, 884], "cach": [0, 5, 10, 11, 14, 21, 22, 24, 25, 37, 39, 40, 58, 60, 63, 208, 553, 646, 649, 799, 819, 854, 856, 859, 863], "400": [0, 26, 94, 97, 388, 412, 413, 567, 591, 649, 652, 691], "\u00b5": [0, 19, 20, 24, 25, 26, 35], "487": [0, 292, 647, 651, 675], "make": [0, 1, 4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 34, 44, 45, 46, 58, 62, 70, 93, 388, 432, 819, 831, 834, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 874, 877, 882, 883], "out": [0, 4, 5, 8, 9, 12, 13, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 176, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 430, 432, 433, 436, 437, 438, 439, 440, 441, 442, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 459, 463, 466, 467, 468, 469, 471, 472, 478, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 554, 555, 559, 560, 561, 563, 566, 567, 576, 586, 590, 591, 629, 630, 633, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 860, 861, 862, 863, 864, 866, 868, 869, 871, 874, 875, 877, 878, 882], "respect": [0, 66, 69, 70, 72, 75, 92, 93, 95, 98, 110, 152, 233, 236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 264, 265, 272, 273, 278, 280, 282, 283, 286, 289, 295, 299, 302, 303, 313, 362, 377, 380, 385, 387, 389, 391, 394, 445, 462, 474, 515, 517, 571, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 644, 647, 649, 650, 651, 652, 655, 664, 671, 672, 678, 683, 699, 702, 733, 734, 735, 791, 794, 809, 825, 836, 837, 838, 839, 843, 844, 846, 847, 848, 849, 850, 855, 856, 858, 859, 860, 863, 864, 865], "kei": [0, 8, 9, 10, 11, 14, 19, 20, 23, 35, 36, 44, 45, 60, 62, 65, 70, 74, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 181, 185, 186, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 398, 412, 413, 414, 432, 465, 466, 467, 468, 469, 470, 471, 472, 481, 482, 504, 506, 508, 510, 515, 517, 518, 519, 521, 523, 529, 536, 537, 538, 539, 548, 549, 551, 552, 554, 555, 556, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 649, 651, 655, 656, 665, 666, 667, 668, 674, 675, 678, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 739, 745, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 794, 795, 801, 807, 810, 814, 831, 834, 845, 846, 847, 856, 859, 860, 861, 863, 877, 882], "precis": [0, 26, 70, 75, 93, 98, 178, 266, 286, 293, 300, 359, 385, 389, 400, 443, 536, 599, 622, 645, 647, 649, 652, 688, 689, 693, 700, 702, 703, 709, 802, 847, 860, 865, 866], "recal": [0, 26], "f1": [0, 26, 848], "score": [0, 26, 74, 97, 390, 472, 651, 679, 681, 831], "ivy_pr": [0, 26], "xgb_pred": [0, 26], "nxgbclassifi": [0, 26], "86": [0, 23, 26, 56, 79, 93, 102, 388, 400, 420, 537, 629, 650, 758, 759], "93": [0, 26, 56, 70, 92, 94, 102, 211, 300, 373, 385, 559, 560, 646, 649, 758, 759], "84": [0, 23, 56, 74, 83, 92, 102, 181, 211, 276, 645, 646, 652, 657, 662, 675, 697, 755, 758, 759, 777], "91": [0, 23, 56, 70, 97, 102, 373, 385, 431, 651, 652, 658, 662, 675, 697, 758, 777], "accuraci": [0, 8, 9, 26, 58, 60, 63, 388, 432, 848], "92": [0, 26, 56, 60, 70, 71, 102, 373, 385, 627, 637, 650, 652, 684, 758, 759], "macro": [0, 26], "avg": [0, 26, 388, 407, 409, 430], "weight": [0, 4, 5, 8, 9, 23, 26, 27, 29, 44, 45, 58, 59, 70, 72, 74, 76, 93, 95, 97, 99, 110, 111, 328, 332, 366, 382, 385, 388, 389, 400, 415, 448, 534, 536, 539, 629, 630, 633, 635, 636, 637, 650, 651, 653, 655, 675, 676, 677, 678, 681, 711, 735, 796, 809, 810, 812, 814, 829, 831, 846, 856, 863, 868, 884], "90": [0, 26, 56, 58, 60, 69, 70, 92, 93, 252, 292, 296, 373, 385, 391, 400, 504, 537, 647, 652, 662, 697, 777, 825], "summar": [0, 44, 45, 110, 863], "perfect": [0, 831], "fals": [0, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 33, 34, 44, 47, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 141, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 209, 210, 215, 217, 220, 221, 223, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 382, 385, 386, 388, 389, 390, 391, 394, 400, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 528, 529, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 586, 590, 591, 592, 595, 598, 599, 601, 602, 604, 605, 606, 607, 609, 611, 613, 614, 616, 621, 622, 624, 625, 627, 630, 631, 633, 637, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 747, 748, 749, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 792, 794, 795, 796, 797, 802, 806, 807, 810, 811, 812, 814, 816, 819, 822, 824, 825, 826, 829, 831, 835, 838, 842, 844, 847, 848, 849, 850, 852, 853, 859, 860, 861, 863, 865, 866, 868, 877, 878, 879], "posit": [0, 60, 62, 65, 69, 70, 71, 75, 76, 77, 92, 93, 94, 98, 99, 100, 110, 145, 147, 160, 178, 233, 234, 235, 239, 242, 253, 260, 267, 268, 274, 276, 286, 287, 294, 295, 299, 300, 304, 326, 341, 347, 352, 364, 382, 385, 389, 391, 440, 460, 471, 496, 506, 553, 563, 628, 642, 644, 645, 647, 649, 652, 653, 654, 658, 659, 663, 682, 685, 706, 711, 720, 725, 760, 765, 785, 786, 791, 794, 802, 807, 811, 812, 825, 837, 839, 842, 846, 860, 863, 864, 878], "excel": [0, 8, 9], "high": [0, 8, 9, 33, 44, 45, 63, 70, 74, 79, 93, 97, 102, 388, 431, 435, 599, 649, 651, 658, 664, 665, 666, 667, 669, 671, 673, 757, 759, 796, 834, 837, 852, 858, 860, 872, 875, 882, 884], "show": [0, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 37, 44, 45, 46, 47, 49, 56, 58, 60, 61, 593, 602, 625, 649, 831, 837, 838, 839, 845, 847, 850, 854, 859, 860, 863, 865, 870, 878, 882], "trade": [0, 878], "off": [0, 23, 35, 47, 74, 75, 97, 98, 412, 413, 414, 651, 652, 674, 686, 706, 809, 810, 838, 853, 878], "wa": [0, 15, 16, 23, 44, 45, 50, 59, 70, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 371, 372, 374, 375, 376, 382, 385, 389, 412, 413, 414, 432, 463, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 504, 506, 507, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 615, 627, 633, 639, 647, 649, 656, 662, 663, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 819, 831, 833, 839, 842, 844, 845, 847, 850, 856, 858, 860, 868, 875, 877, 878, 882], "overal": [0, 651, 674, 825, 846, 848, 849, 851, 878, 882], "slightli": [0, 26, 325, 382, 846, 860, 863, 868, 869], "lower": [0, 26, 60, 66, 69, 70, 75, 79, 92, 93, 98, 102, 145, 158, 284, 320, 326, 332, 341, 342, 380, 382, 400, 539, 540, 546, 644, 647, 652, 658, 682, 688, 689, 695, 759, 796, 809, 839, 848, 850, 860, 863, 868, 869, 870, 872, 882, 883], "good": [0, 33, 44, 45, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 863, 864, 866, 868], "due": [0, 35, 44, 45, 47, 61, 63, 286, 296, 391, 506, 647, 838, 842, 847, 852, 859, 860, 877, 878, 882], "97": [0, 21, 22, 26, 56, 70, 72, 92, 95, 102, 239, 373, 385, 633, 647, 650, 758], "suggest": [0, 1, 8, 9, 23, 837, 838, 839, 845, 848, 854, 858, 860, 863, 864, 865], "slight": [0, 44, 45, 848, 863], "edg": [0, 62, 70, 77, 93, 100, 332, 382, 388, 391, 400, 424, 497, 539, 654, 717, 719, 732, 797, 842, 863, 874, 877, 882], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 19, 20, 23, 44, 45, 48, 49, 50, 51, 389, 449, 831, 839, 846, 848, 852, 856, 863, 867, 870, 872, 877], "design": [0, 1, 8, 9, 26, 33, 44, 93, 260, 325, 330, 331, 382, 647, 831, 834, 841, 845, 847, 848, 859, 860, 861, 862, 866, 870, 882], "heatmap": 0, "seaborn": [0, 60], "aesthet": 0, "appeal": 0, "eas": [0, 858, 875, 882], "plot_classification_report": 0, "argument": [0, 8, 9, 15, 16, 23, 37, 39, 40, 44, 45, 47, 49, 50, 51, 56, 58, 60, 62, 65, 66, 69, 70, 71, 75, 87, 88, 92, 93, 94, 110, 111, 116, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 193, 222, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 341, 342, 348, 349, 351, 354, 356, 357, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 420, 421, 422, 425, 426, 427, 432, 434, 436, 443, 497, 506, 510, 536, 539, 543, 549, 550, 552, 553, 558, 560, 561, 566, 570, 572, 574, 576, 586, 590, 591, 605, 609, 614, 615, 628, 639, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 742, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 802, 807, 810, 811, 812, 819, 824, 827, 831, 837, 841, 842, 843, 844, 845, 846, 850, 851, 854, 856, 861, 863, 864, 866, 868, 869, 872, 877, 878, 880, 882], "plot": [0, 8, 9, 10, 11, 23, 26, 59, 882], "color": [0, 14, 42, 59, 87, 116, 830, 831], "represent": [0, 62, 70, 71, 87, 93, 94, 116, 163, 164, 178, 181, 206, 207, 233, 236, 243, 246, 248, 253, 260, 283, 286, 288, 303, 329, 361, 365, 370, 374, 382, 385, 549, 611, 642, 645, 646, 647, 649, 794, 796, 797, 810, 848, 883, 884], "easi": [0, 1, 44, 45, 58, 838, 839, 843, 844, 846, 856, 858, 861, 863, 866, 882], "assess": [0, 35, 47, 837, 866], "side": [0, 82, 105, 363, 385, 389, 459, 661, 773, 794, 810, 824, 825, 838, 839, 845], "pyplot": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 63], "plt": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 63], "sn": 0, "model_nam": [0, 8, 9, 60], "ax": [0, 23, 59, 64, 70, 75, 77, 80, 83, 84, 86, 93, 98, 100, 103, 106, 107, 115, 119, 126, 130, 226, 348, 349, 353, 354, 369, 376, 385, 386, 388, 389, 391, 394, 400, 417, 422, 433, 459, 496, 497, 504, 518, 541, 542, 543, 544, 545, 546, 559, 628, 646, 649, 652, 654, 659, 662, 663, 683, 693, 701, 704, 705, 709, 719, 721, 722, 725, 727, 729, 732, 762, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 796, 810, 848, 850, 863, 864, 868], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 45, 50, 56, 58, 59, 60, 70, 74, 85, 93, 97, 108, 110, 111, 115, 362, 377, 385, 387, 389, 443, 576, 594, 609, 631, 649, 650, 651, 656, 675, 677, 744, 789, 810, 831, 833, 834, 837, 838, 839, 841, 843, 844, 846, 847, 848, 849, 850, 853, 854, 856, 857, 858, 859, 863, 864, 866, 868, 870, 871, 878, 880, 882], "annot": [0, 855], "fmt": 0, "2f": [0, 6, 7, 19, 20, 23], "cmap": 0, "blue": 0, "set_titl": [0, 23, 59, 60], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 44, 45, 57, 58, 60, 70, 77, 93, 100, 315, 332, 380, 382, 391, 487, 509, 654, 656, 724, 739, 743, 744, 745, 748, 753, 754, 832, 839, 841, 846, 847, 852, 864, 868, 869], "figur": [0, 23, 59, 865], "fig": [0, 23, 59, 60], "ax1": [0, 60], "ax2": [0, 60], "subplot": [0, 23, 59, 60], "figsiz": [0, 59, 60], "tight_layout": [0, 60], "observ": [0, 26, 70, 93, 400, 535, 536, 839, 848, 852, 869, 878], "exhibit": [0, 47], "strong": [0, 796, 870, 882], "commend": 0, "impli": [0, 81, 660, 767, 768, 769, 770, 863], "neg": [0, 64, 69, 70, 75, 77, 79, 84, 86, 92, 93, 98, 100, 102, 107, 110, 125, 128, 131, 139, 145, 147, 160, 253, 260, 267, 268, 286, 287, 295, 300, 308, 326, 341, 344, 380, 382, 389, 390, 391, 395, 440, 447, 453, 470, 506, 510, 526, 641, 644, 647, 652, 654, 658, 663, 683, 685, 702, 706, 708, 709, 718, 720, 721, 725, 758, 785, 786, 794, 796, 806, 846, 859], "depend": [0, 5, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 66, 67, 70, 71, 75, 81, 82, 90, 93, 98, 105, 106, 136, 142, 165, 233, 234, 235, 238, 239, 240, 241, 250, 251, 253, 256, 258, 274, 275, 276, 277, 286, 288, 291, 298, 299, 303, 304, 372, 385, 388, 389, 434, 442, 460, 609, 643, 644, 645, 647, 649, 651, 652, 659, 661, 676, 687, 688, 699, 700, 701, 702, 766, 771, 774, 784, 833, 835, 837, 838, 839, 845, 848, 849, 851, 853, 857, 859, 860, 861, 862, 863, 866, 868, 869, 870, 871, 878, 882, 883], "applic": [0, 8, 9, 29, 31, 58, 60, 63, 70, 74, 93, 97, 113, 389, 464, 651, 652, 656, 662, 678, 681, 706, 742, 743, 744, 748, 749, 781, 783, 831, 838, 847, 848, 849, 857, 875, 882], "conclus": 0, "appear": [0, 391, 488, 489, 628, 649, 838, 839, 842, 860, 866, 878], "outperform": [0, 26], "especi": [0, 10, 11, 838, 844, 854, 882], "increas": [0, 19, 20, 24, 25, 26, 35, 44, 47, 70, 75, 77, 93, 98, 100, 113, 391, 400, 497, 539, 652, 654, 707, 719, 732, 796, 848, 852, 860, 864, 866, 878, 882], "context": [0, 338, 382, 587, 649, 837, 838, 839, 844, 848, 849, 850], "specif": [0, 8, 9, 10, 11, 23, 33, 34, 39, 40, 43, 44, 45, 46, 48, 50, 58, 68, 70, 71, 91, 93, 94, 193, 224, 227, 260, 281, 282, 291, 335, 348, 349, 382, 385, 391, 395, 506, 526, 559, 560, 561, 587, 645, 646, 647, 649, 652, 654, 655, 658, 661, 662, 688, 689, 704, 728, 733, 734, 735, 756, 773, 778, 779, 780, 782, 789, 791, 811, 812, 819, 820, 827, 829, 831, 834, 835, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 852, 854, 855, 856, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 877, 878, 880, 883, 884], "problem": [0, 10, 11, 23, 831, 834, 837, 839, 842, 843, 849, 860, 874], "domain": [0, 234, 235, 238, 239, 240, 241, 250, 251, 256, 258, 274, 275, 277, 298, 299, 300, 303, 304, 372, 385, 647, 851, 882], "repo": [1, 27, 58, 836, 839, 842, 845, 847, 848, 853, 861, 863], "hold": [1, 70, 71, 75, 83, 93, 98, 106, 110, 111, 347, 364, 369, 385, 400, 483, 513, 537, 538, 543, 590, 591, 649, 652, 662, 693, 776, 792, 840, 883], "exampl": [1, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 33, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 407, 408, 409, 410, 412, 413, 415, 416, 417, 420, 421, 422, 425, 426, 427, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 454, 456, 459, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 518, 519, 521, 524, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 739, 740, 742, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 802, 819, 824, 825, 829, 831, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 859, 860, 864, 868, 869, 870, 875, 883], "tab": [1, 837, 838, 847, 853], "ivi": [1, 2, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 841, 842, 844, 846, 848, 849, 851, 853, 854, 855, 856, 857, 859, 866, 867, 870, 872, 874, 875, 876, 881], "web": 1, "relev": [1, 66, 89, 151, 644, 814, 837, 838, 839, 843, 846, 847, 848, 850, 853, 857, 858, 861, 862, 863, 871], "link": [1, 33, 44, 45, 59, 837, 838, 839, 845, 847, 848, 854, 860, 877], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 59, 60, 61, 71, 79, 102, 139, 644, 658, 757, 759, 831, 832, 833, 834, 838, 839, 840, 845, 848, 851, 853, 860, 861, 866, 877, 878, 882, 884], "avil": 1, "discuss": [1, 837, 839, 845, 848, 849, 859, 860, 862, 863, 866, 870, 883], "comprehens": [1, 31, 839, 842, 862, 884], "possibl": [1, 4, 5, 50, 66, 70, 89, 93, 100, 110, 141, 260, 303, 325, 348, 349, 382, 385, 388, 390, 391, 411, 466, 475, 476, 477, 483, 485, 487, 488, 489, 496, 513, 586, 647, 649, 651, 662, 674, 720, 721, 722, 724, 726, 727, 729, 731, 778, 780, 794, 810, 822, 825, 828, 832, 835, 837, 838, 839, 842, 845, 846, 848, 850, 851, 853, 854, 856, 858, 859, 860, 861, 863, 866, 868, 870, 882], "us": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 106, 108, 110, 111, 113, 116, 123, 151, 154, 165, 177, 179, 180, 191, 192, 212, 213, 215, 220, 224, 225, 226, 227, 229, 232, 238, 246, 274, 275, 277, 278, 280, 281, 282, 284, 285, 287, 296, 300, 305, 325, 327, 328, 330, 331, 332, 340, 362, 365, 366, 369, 382, 385, 388, 389, 390, 391, 394, 395, 396, 398, 400, 407, 408, 409, 411, 412, 413, 414, 415, 417, 422, 424, 425, 426, 427, 430, 432, 433, 434, 436, 441, 443, 447, 453, 455, 457, 458, 460, 461, 462, 464, 465, 470, 487, 491, 495, 497, 498, 506, 510, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 543, 546, 564, 565, 574, 575, 586, 587, 594, 596, 597, 599, 606, 607, 619, 620, 622, 629, 630, 635, 636, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 662, 675, 676, 678, 681, 686, 688, 695, 699, 703, 706, 709, 711, 723, 724, 725, 729, 733, 734, 735, 736, 738, 739, 745, 746, 747, 749, 756, 757, 758, 759, 761, 762, 763, 764, 767, 769, 777, 779, 792, 794, 795, 796, 797, 802, 806, 807, 809, 810, 811, 812, 813, 814, 819, 824, 825, 829, 832, 834, 836, 839, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 879, 880, 882, 883, 884], "attract": 1, "visual": [1, 8, 9, 10, 11, 26, 62, 829, 838, 853, 860, 863, 870, 882], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 31, 32, 35, 37, 39, 40, 45, 51, 52, 57, 62, 63, 81, 660, 767, 768, 769, 770, 802, 831, 846, 856, 860, 862, 866, 870, 872, 874, 876, 878, 880, 881, 882], "nice": [1, 863, 882], "etc": [1, 47, 52, 59, 66, 70, 79, 81, 85, 89, 93, 102, 108, 142, 150, 151, 154, 388, 395, 417, 422, 433, 522, 523, 525, 526, 644, 658, 660, 756, 757, 758, 759, 767, 768, 769, 770, 794, 797, 809, 810, 811, 812, 813, 814, 815, 831, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 850, 852, 855, 860, 861, 863, 864, 869, 870, 871, 872, 878, 882], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 23, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 874, 875, 878], "free": [1, 8, 9, 10, 11, 12, 13, 23, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 874, 875, 878, 883], "emoji": [1, 837], "don": [1, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 45, 58, 60, 85, 108, 831, 837, 838, 839, 847, 848, 849, 854, 858, 863, 866, 870, 878], "keep": [1, 2, 27, 29, 33, 39, 40, 44, 70, 77, 87, 93, 100, 110, 113, 373, 389, 464, 654, 731, 836, 837, 838, 839, 842, 845, 846, 847, 852, 859, 860, 863, 864, 866, 869, 871, 877], "thing": [1, 10, 11, 40, 56, 58, 824, 836, 837, 838, 839, 844, 860, 863, 866, 882], "super": [1, 4, 5, 12, 13, 27, 29, 43, 44, 45, 58, 70, 93, 389, 443, 831, 852, 869, 877], "seriou": 1, "given": [1, 4, 5, 10, 11, 14, 33, 42, 44, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 139, 143, 150, 151, 171, 172, 173, 174, 175, 187, 192, 211, 220, 224, 225, 226, 228, 232, 305, 335, 344, 347, 353, 354, 362, 363, 364, 366, 369, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 407, 408, 409, 410, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 433, 443, 448, 463, 467, 468, 469, 471, 472, 473, 474, 484, 485, 486, 493, 495, 508, 514, 518, 519, 520, 521, 522, 523, 524, 525, 526, 536, 537, 538, 539, 545, 567, 571, 590, 591, 601, 629, 630, 633, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 710, 711, 712, 713, 717, 720, 721, 722, 723, 725, 726, 730, 731, 743, 744, 753, 754, 757, 758, 759, 761, 773, 774, 775, 776, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 869, 875, 879], "intern": [1, 26, 87, 118, 119, 120, 656, 736, 746, 747, 809, 810, 811, 812, 813, 815, 840, 843, 846, 849, 851, 859, 861, 863, 865], "releas": [1, 8, 9, 59, 837, 838, 848, 864, 866, 870, 882], "tracer": [1, 4, 5, 12, 13, 21, 22, 24, 25, 31, 32, 34, 37, 39, 40, 45, 61, 63, 860, 868, 870, 871, 872, 877, 880, 881], "around": [1, 27, 29, 70, 87, 93, 116, 391, 497, 506, 837, 839, 842, 843, 845, 849, 855, 856, 860, 863, 864, 870, 872, 878, 882], "corner": [1, 70, 93, 388, 424, 838, 839, 853, 860], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 23, 38, 46, 50, 61, 63, 87, 110, 838, 839, 840, 842, 848, 853, 856, 859, 860, 864, 869, 873, 878], "start": [1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 60, 66, 70, 87, 89, 93, 97, 139, 147, 150, 151, 366, 376, 385, 386, 388, 391, 400, 431, 487, 490, 499, 501, 511, 545, 644, 796, 824, 829, 832, 837, 838, 839, 840, 841, 847, 848, 850, 851, 853, 854, 855, 860, 863, 866, 868, 870, 877, 878, 882], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 56, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 385, 388, 391, 398, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 651, 656, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 700, 702, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 747, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 825, 831, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 866, 868, 870, 875, 877, 878, 880, 882, 883], "worri": [1, 44, 45, 837, 838, 854, 875], "about": [1, 31, 32, 33, 36, 38, 40, 42, 43, 44, 45, 48, 59, 60, 67, 90, 178, 181, 645, 829, 831, 833, 836, 837, 838, 839, 840, 841, 842, 845, 847, 848, 849, 854, 855, 859, 861, 862, 863, 864, 865, 866, 867, 870, 875, 880, 883], "transpil": [1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 47, 801, 802, 837, 838, 852, 853, 860, 867, 871, 872, 873, 874, 876, 878, 880, 882, 884], "style": [1, 26, 58, 60, 391, 497, 659, 765, 839, 854, 882], "stori": 1, "anyon": [1, 832, 839, 847, 870], "ha": [1, 4, 5, 8, 9, 12, 13, 17, 21, 22, 23, 24, 25, 26, 27, 29, 33, 35, 39, 44, 45, 47, 50, 52, 56, 63, 66, 70, 75, 77, 81, 83, 87, 90, 93, 94, 98, 100, 104, 106, 110, 152, 209, 233, 253, 256, 258, 260, 270, 286, 288, 293, 296, 298, 299, 303, 343, 344, 345, 382, 389, 390, 391, 400, 424, 459, 469, 480, 505, 507, 512, 535, 537, 538, 540, 572, 644, 646, 647, 651, 652, 654, 659, 660, 662, 677, 678, 692, 693, 701, 702, 704, 706, 709, 720, 727, 765, 768, 769, 770, 775, 776, 779, 781, 782, 783, 784, 791, 794, 797, 819, 831, 837, 839, 842, 844, 845, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 874, 875, 878, 880, 882, 884], "question": [1, 8, 9, 10, 11, 23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 874, 875], "ping": 1, "me": [1, 839], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 23, 59, 832, 837, 838, 839, 840, 870, 875, 882, 884], "ux": 1, "team": [1, 831, 832, 834, 837, 838, 839, 840, 860, 871], "discord": [1, 8, 9, 10, 11, 23, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 871, 874, 875], "channel": [1, 40, 60, 70, 71, 74, 93, 94, 97, 388, 394, 412, 413, 414, 424, 515, 516, 517, 520, 559, 563, 649, 651, 653, 665, 666, 667, 668, 669, 670, 673, 714, 810, 813, 839, 845, 853, 862], "templat": [1, 831, 845, 851, 863], "locat": [1, 60, 154, 400, 537, 644, 656, 658, 661, 740, 756, 773, 825, 837, 839, 844, 845, 849, 860, 861, 863, 864, 871], "asset": [1, 872], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 50, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 871], "copi": [1, 60, 63, 66, 67, 68, 69, 70, 71, 77, 87, 89, 90, 91, 92, 93, 94, 100, 110, 114, 140, 141, 142, 146, 157, 165, 227, 287, 391, 473, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 513, 569, 595, 606, 613, 614, 644, 645, 646, 647, 649, 654, 656, 661, 720, 721, 722, 724, 726, 727, 729, 731, 737, 772, 774, 802, 825, 838, 839, 842, 844, 847, 848, 851, 860, 861, 868, 870, 877, 878, 880], "firstli": [1, 34, 35, 46, 47, 51, 56, 843, 848, 850, 851, 852, 856, 857, 859, 866], "file": [1, 5, 8, 9, 10, 11, 14, 23, 58, 59, 60, 71, 87, 603, 626, 649, 812, 829, 833, 837, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 856, 860, 861, 862, 863, 864, 868, 871, 882, 883, 884], "topic": [1, 31, 34, 35, 36, 46, 47, 48, 49, 50, 51, 857, 882], "Then": [1, 63, 651, 678, 833, 837, 838, 839, 844, 845, 847, 853, 854, 857, 859, 863, 864, 870], "place": [1, 10, 11, 21, 22, 24, 25, 37, 39, 40, 58, 65, 66, 69, 70, 71, 75, 77, 87, 89, 91, 92, 93, 94, 98, 100, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 325, 326, 329, 341, 342, 347, 348, 349, 351, 354, 355, 356, 357, 361, 363, 364, 365, 366, 368, 369, 370, 374, 375, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 487, 497, 503, 506, 510, 523, 536, 539, 543, 552, 560, 561, 566, 570, 572, 574, 575, 576, 590, 594, 605, 609, 614, 618, 639, 644, 645, 646, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 814, 831, 835, 836, 839, 841, 842, 845, 846, 847, 849, 850, 851, 853, 855, 856, 860, 861, 863, 864, 866, 872], "folder": [1, 5, 21, 22, 24, 25, 37, 39, 40, 60, 838, 839, 842, 845, 847, 853, 856, 860, 863, 864, 865], "edit": [1, 837, 838, 839, 854, 869], "titl": [1, 23, 26, 28, 30, 41, 59, 62, 831, 837, 839, 845], "accordingli": [1, 70, 75, 80, 81, 83, 84, 93, 98, 103, 106, 107, 152, 253, 258, 260, 276, 286, 300, 348, 349, 385, 644, 647, 652, 659, 660, 662, 663, 709, 763, 767, 768, 769, 770, 778, 779, 780, 781, 782, 783, 784, 785, 786, 860, 868, 871], "render": [1, 845, 851], "webpag": [1, 31], "content": [1, 2, 23, 28, 30, 41, 44, 59, 60, 70, 87, 93, 400, 543, 837, 839, 845, 849, 859, 862, 868], "behind": [1, 33, 44, 831, 841, 855, 863, 867], "exist": [1, 33, 44, 45, 58, 59, 60, 63, 66, 70, 71, 87, 89, 93, 94, 100, 141, 391, 475, 476, 482, 483, 485, 487, 488, 489, 496, 513, 558, 594, 649, 654, 718, 720, 721, 722, 724, 726, 727, 729, 731, 814, 816, 829, 831, 837, 838, 842, 844, 849, 850, 851, 856, 857, 859, 860, 863, 866, 868, 869, 870, 872, 882], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 59, 74, 97, 651, 676, 677, 810, 847, 868], "h2": [1, 2, 28, 30, 41], "tag": [1, 2, 28, 30, 41, 838, 839], "h3": [1, 2, 28, 30, 41], "subsect": [1, 2, 28, 30, 41, 837, 838, 839, 842, 847], "explan": [1, 2, 28, 30, 41, 837, 838, 839, 846, 851, 855, 860, 864], "go": [1, 6, 7, 8, 9, 10, 11, 23, 27, 29, 33, 40, 42, 43, 45, 50, 65, 70, 93, 97, 388, 431, 435, 656, 747, 748, 831, 832, 835, 837, 838, 839, 841, 844, 845, 848, 850, 853, 854, 860, 861, 863, 864, 867, 870, 882, 883], "default": [1, 4, 5, 8, 9, 12, 13, 44, 45, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 185, 186, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 210, 212, 213, 217, 220, 221, 222, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 582, 583, 586, 587, 590, 591, 594, 595, 600, 604, 605, 606, 607, 609, 611, 613, 614, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 743, 744, 746, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 795, 796, 797, 802, 806, 807, 809, 810, 811, 812, 813, 814, 815, 824, 825, 829, 837, 838, 839, 844, 845, 848, 849, 850, 851, 852, 855, 856, 860, 863, 866, 868, 872, 878, 882], "text": [1, 6, 7, 8, 9, 21, 22, 26, 58, 70, 71, 389, 390, 457, 465, 837, 839, 845, 850, 851], "paragraph": [1, 2, 28, 30, 41, 845], "p": [1, 2, 28, 30, 41, 56, 70, 71, 75, 93, 94, 98, 111, 152, 257, 389, 394, 439, 452, 521, 554, 555, 644, 647, 649, 652, 656, 693, 709, 744, 810, 831, 838, 839, 841], "path": [1, 21, 22, 23, 24, 25, 26, 37, 39, 40, 59, 60, 791, 802, 818, 838, 845, 859, 860, 861, 871, 882], "correspond": [1, 4, 5, 19, 20, 24, 25, 29, 44, 45, 59, 67, 69, 70, 71, 74, 77, 80, 81, 83, 87, 90, 92, 93, 97, 100, 106, 110, 113, 116, 166, 178, 181, 241, 291, 305, 344, 358, 359, 382, 385, 388, 389, 391, 394, 400, 411, 417, 428, 433, 439, 442, 443, 444, 463, 488, 489, 510, 515, 516, 517, 520, 537, 538, 606, 628, 645, 647, 649, 651, 652, 654, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 678, 683, 687, 688, 693, 700, 701, 724, 725, 756, 762, 763, 767, 768, 769, 770, 775, 776, 781, 782, 783, 784, 791, 794, 796, 824, 829, 831, 837, 839, 843, 844, 846, 847, 848, 850, 851, 852, 855, 856, 858, 860, 863, 866, 868, 877, 878, 880, 882], "toctre": [1, 845], "index": [1, 58, 59, 60, 63, 66, 70, 71, 77, 80, 81, 82, 87, 89, 93, 94, 100, 103, 104, 105, 145, 152, 326, 333, 334, 343, 344, 345, 382, 388, 389, 391, 396, 398, 400, 411, 417, 448, 450, 457, 480, 487, 490, 499, 501, 503, 506, 507, 510, 511, 527, 528, 537, 546, 549, 567, 569, 590, 591, 595, 642, 644, 649, 653, 654, 656, 659, 660, 661, 714, 724, 728, 738, 739, 740, 743, 744, 745, 751, 753, 762, 763, 765, 767, 768, 769, 771, 773, 795, 810, 825, 827, 846, 847, 852, 856, 857, 858, 859, 861, 863, 882], "rst": [1, 856], "left": [1, 35, 47, 58, 59, 70, 75, 80, 82, 93, 98, 103, 105, 133, 134, 245, 260, 353, 369, 376, 385, 386, 388, 389, 391, 400, 423, 442, 447, 453, 460, 462, 488, 499, 541, 542, 543, 544, 545, 546, 559, 643, 647, 649, 652, 659, 661, 687, 688, 693, 702, 707, 762, 773, 794, 838, 839, 842, 845, 847, 848, 850, 853], "add": [1, 35, 47, 60, 62, 69, 70, 78, 85, 87, 92, 93, 101, 108, 115, 116, 376, 386, 388, 390, 431, 470, 586, 615, 647, 649, 651, 652, 657, 662, 678, 706, 755, 783, 791, 802, 810, 813, 829, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 860, 863, 864, 866, 868, 870, 871, 882], "grid": [1, 23, 60, 66, 152, 329, 382, 644, 850, 863], "item": [1, 6, 7, 8, 9, 10, 11, 44, 45, 56, 58, 60, 65, 71, 85, 87, 89, 92, 93, 94, 147, 172, 209, 263, 279, 287, 354, 358, 371, 556, 566, 567, 571, 606, 607, 644, 645, 646, 649, 656, 663, 741, 742, 743, 744, 748, 753, 754, 788, 837, 846, 848, 868, 878], "card": [1, 70, 93, 373, 385], "refer": [1, 12, 13, 70, 77, 83, 84, 93, 95, 100, 106, 107, 145, 160, 258, 276, 326, 341, 371, 382, 385, 388, 389, 391, 417, 422, 433, 440, 464, 487, 629, 630, 644, 647, 650, 652, 654, 662, 663, 683, 685, 708, 724, 782, 784, 785, 786, 810, 831, 836, 837, 838, 839, 842, 843, 845, 847, 848, 855, 856, 857, 858, 859, 860, 861, 862, 863, 870, 872, 882], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 23, 24, 25, 26, 27, 29, 33, 35, 37, 40, 43, 44, 45, 47, 49, 50, 51, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 181, 184, 185, 186, 188, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 382, 385, 388, 389, 391, 398, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 746, 747, 748, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 809, 810, 819, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 874, 877, 878, 881, 882, 883, 884], "look": [1, 8, 9, 10, 11, 12, 13, 23, 33, 44, 45, 58, 60, 63, 831, 835, 837, 838, 839, 844, 845, 846, 848, 849, 850, 852, 853, 854, 855, 856, 860, 861, 863, 864, 865, 866, 868, 869, 871, 878, 882], "document": [1, 5, 8, 9, 10, 11, 14, 23, 33, 44, 77, 260, 348, 349, 385, 628, 647, 649, 728, 832, 833, 836, 839, 845, 847, 848, 850, 859, 860, 861, 863, 869], "sphinx": [1, 833, 845], "websit": [1, 62, 831, 838, 842], "alreadi": [2, 5, 8, 9, 23, 24, 25, 34, 37, 38, 39, 40, 44, 45, 50, 58, 60, 63, 70, 75, 87, 93, 98, 249, 259, 286, 296, 306, 391, 400, 476, 477, 497, 534, 543, 647, 652, 690, 697, 824, 825, 831, 837, 838, 839, 844, 846, 848, 849, 855, 859, 860, 866, 870, 871, 882], "instal": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 58, 60, 61, 62, 63, 833, 838, 839, 844, 845, 853, 854], "skip": [2, 6, 7, 23, 60, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 389, 391, 412, 413, 414, 432, 448, 450, 457, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 499, 502, 504, 506, 507, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 656, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 795, 824, 845, 856, 863], "colab": [2, 6, 7, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 58, 60, 62, 63], "manual": [2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 656, 736, 746, 747, 837, 838, 839, 848, 854, 863, 869], "mind": [2, 27, 29, 33, 39, 44, 48, 837, 838, 843, 846, 863, 871, 877], "click": [2, 4, 5, 60, 837, 838, 839, 847, 851, 853, 854], "runtim": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 23, 24, 25, 35, 44, 47, 58, 59, 841, 856, 863, 866, 882], "restart": [2, 4, 5, 6, 7, 12, 13, 21, 22, 23, 58, 59, 838, 853], "git": [2, 4, 5, 6, 7, 12, 13, 21, 22, 44, 58, 59, 60, 61, 831, 833, 836, 838, 839, 842, 845, 847, 853, 854, 863, 871], "clone": [2, 4, 5, 12, 13, 21, 22, 44, 58, 60, 61, 831, 833, 839, 853, 871], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 37, 39, 40, 44, 45, 58, 59, 60, 61, 62, 63, 69, 70, 92, 93, 95, 160, 168, 256, 266, 267, 282, 341, 348, 349, 382, 385, 388, 391, 400, 432, 506, 536, 629, 630, 644, 645, 647, 650, 652, 654, 662, 700, 701, 732, 782, 831, 833, 838, 839, 842, 845, 847, 848, 851, 853, 871, 877], "github": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 24, 25, 44, 58, 59, 60, 61, 62, 831, 833, 834, 836, 839, 840, 842, 845, 847, 848, 850, 851, 853, 854, 862, 863, 871], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 29, 44, 58, 59, 60, 61, 62, 831, 833, 838, 839, 842, 845, 847, 848, 853, 871], "llc": [2, 4, 5, 12, 13, 21, 22, 44, 58, 59, 60, 61, 831, 871], "model": [2, 3, 4, 5, 15, 16, 26, 31, 32, 33, 61, 63, 253, 286, 390, 466, 647, 807, 811, 812, 829, 831, 869, 872, 874, 875, 877, 878, 882, 883, 884], "depth": [2, 4, 5, 8, 9, 12, 13, 21, 22, 59, 66, 70, 74, 89, 93, 97, 154, 388, 391, 424, 484, 559, 571, 644, 649, 651, 669, 670, 839, 847, 868, 871], "repositori": [2, 4, 5, 12, 13, 21, 22, 833, 837, 838, 839, 841, 842, 845, 853, 862], "cd": [2, 4, 5, 12, 13, 21, 22, 44, 61, 831, 833, 838, 839, 853, 871], "acceler": [3, 31, 848, 860, 875], "convert": [3, 12, 13, 14, 15, 16, 19, 20, 24, 25, 26, 27, 29, 31, 34, 36, 39, 40, 42, 43, 44, 45, 46, 48, 50, 58, 61, 63, 65, 66, 69, 87, 88, 89, 92, 110, 140, 141, 153, 163, 164, 206, 207, 208, 209, 220, 228, 232, 252, 292, 391, 396, 475, 476, 477, 527, 592, 610, 612, 613, 614, 616, 644, 645, 646, 647, 649, 652, 656, 710, 737, 748, 749, 791, 819, 824, 837, 843, 844, 857, 858, 860, 863, 865, 868, 869, 870, 872, 873, 875, 876, 877, 879, 884], "faster": [3, 4, 5, 15, 16, 19, 20, 24, 25, 26, 31, 44, 45, 61, 63, 70, 75, 93, 98, 389, 462, 652, 702, 833, 836, 845, 872], "infer": [3, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 31, 35, 47, 49, 50, 59, 61, 63, 66, 70, 71, 74, 77, 89, 93, 94, 97, 100, 139, 141, 144, 148, 149, 153, 156, 162, 171, 172, 173, 174, 175, 325, 326, 388, 391, 395, 424, 510, 524, 570, 604, 605, 644, 645, 649, 651, 654, 674, 724, 819, 820, 841, 844, 848, 849, 863, 868, 877, 884], "finetun": [3, 31, 58], "project": [3, 21, 22, 24, 25, 31, 36, 37, 39, 40, 44, 45, 48, 111, 651, 678, 810, 831, 833, 834, 837, 838, 839, 840, 843, 844, 845, 863, 870, 875, 877, 882], "resnet": [3, 8, 9, 24, 25, 31, 44, 877, 878], "video": [4, 12, 19, 21, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 45, 831, 832, 837, 838, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 871], "tutori": [4, 8, 9, 10, 11, 12, 19, 21, 23, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 45, 831, 839, 860, 871], "written": [4, 5, 6, 7, 8, 9, 23, 33, 43, 44, 45, 58, 71, 391, 486, 838, 842, 843, 851, 854, 855, 859, 860, 864, 868, 869, 870, 877, 879, 882], "imag": [4, 5, 8, 9, 10, 11, 19, 20, 24, 25, 27, 39, 44, 45, 58, 59, 60, 61, 62, 63, 70, 74, 92, 93, 97, 115, 233, 234, 235, 236, 239, 242, 251, 254, 256, 258, 267, 268, 269, 274, 276, 289, 296, 297, 299, 300, 304, 388, 407, 408, 424, 425, 426, 428, 559, 647, 649, 651, 653, 664, 665, 666, 667, 668, 671, 672, 673, 714, 810, 831, 838, 853, 866, 871, 877, 878, 882], "classif": [4, 5, 21, 22, 26, 58, 882], "three": [4, 5, 6, 7, 31, 37, 49, 50, 60, 70, 152, 325, 382, 391, 477, 644, 838, 839, 846, 847, 848, 850, 860, 863, 866, 869, 883], "major": [4, 5, 6, 7, 659, 765, 848, 849, 861, 863, 870, 882], "ml": [4, 5, 6, 7, 8, 9, 23, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 63, 831, 832, 836, 860, 869, 873, 875, 877, 881, 882, 884], "framework": [4, 5, 6, 7, 10, 11, 14, 15, 16, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 51, 58, 60, 62, 65, 71, 183, 205, 215, 218, 229, 557, 573, 577, 609, 612, 645, 646, 649, 656, 738, 789, 791, 795, 802, 807, 814, 819, 820, 834, 835, 837, 838, 841, 842, 843, 844, 845, 847, 848, 849, 850, 852, 853, 855, 856, 857, 859, 860, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884], "sinc": [4, 5, 12, 13, 21, 22, 23, 39, 40, 44, 45, 58, 60, 70, 93, 111, 385, 833, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 852, 859, 860, 870, 882], "automat": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 44, 45, 50, 837, 838, 839, 841, 844, 845, 847, 848, 854, 856, 859, 863, 866, 872, 874, 882], "sure": [4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 44, 58, 834, 837, 838, 839, 842, 847, 852, 853, 860, 861, 863, 866], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 37, 40, 59, 70, 75, 87, 98, 116, 388, 390, 411, 469, 594, 638, 649, 650, 652, 695, 812, 829, 831, 838, 839, 840, 843, 846, 848, 856, 857, 858, 859, 860, 863, 864, 868, 869, 870, 872, 875, 878, 882, 883, 884], "dm": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 44, 45, 56, 58], "haiku": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 40, 44, 45, 56, 58, 62, 807, 831, 877, 882], "exit": [4, 12, 21, 23, 44, 45, 849], "download": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 44, 45, 59, 60, 63, 833, 838, 845, 863, 877, 878], "imagenet": [4, 5, 8, 9, 23, 29, 59, 61, 831], "class": [4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 27, 29, 33, 43, 44, 45, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 147, 156, 162, 178, 181, 194, 196, 197, 256, 293, 351, 373, 385, 399, 400, 408, 409, 442, 542, 543, 550, 559, 563, 576, 586, 609, 644, 645, 646, 647, 649, 651, 652, 653, 656, 657, 672, 677, 681, 687, 697, 701, 702, 704, 711, 730, 737, 748, 755, 770, 777, 781, 782, 791, 792, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 824, 829, 837, 844, 845, 846, 848, 849, 850, 851, 855, 857, 858, 861, 862, 863, 866, 868, 869, 872, 876, 877, 878, 879, 882, 883], "wget": [4, 5, 8, 9, 12, 13, 21, 22, 58, 59, 62, 838], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 58, 61, 62, 87, 831, 851, 877, 883], "githubusercont": [4, 5, 8, 9, 12, 13, 21, 22, 58, 62], "hub": [4, 5, 8, 9, 12, 13, 21, 22, 58, 61, 63], "master": [4, 5, 12, 13, 21, 22, 34, 35, 36, 46, 47, 48, 49, 50, 51, 58, 60, 61, 62, 834, 847, 882], "imagenet_class": [4, 5, 21, 22], "categori": [4, 5, 8, 9, 21, 22, 837, 842, 843, 846, 848, 852, 860, 864], "strip": [4, 5, 21, 22, 35, 47], "readlin": [4, 5, 21, 22, 59], "cat": [4, 5, 10, 11, 21, 22, 59, 861, 866, 868, 869, 877, 878], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 60, 61, 831, 877], "filenam": [4, 5, 12, 13, 21, 22, 23, 44, 45, 58, 60, 63, 71, 812, 818], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 61, 62, 63, 70, 81, 85, 89, 93, 108, 207, 208, 212, 224, 320, 400, 536, 571, 587, 646, 649, 653, 655, 660, 714, 734, 735, 770, 802, 819, 820, 831, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 854, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 877, 878, 880, 881, 882], "devic": [4, 5, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 59, 60, 63, 66, 70, 79, 87, 89, 93, 102, 115, 118, 119, 120, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 325, 326, 341, 342, 382, 395, 485, 522, 523, 525, 526, 550, 564, 565, 644, 649, 658, 756, 757, 758, 759, 789, 791, 792, 807, 809, 810, 811, 812, 813, 814, 815, 816, 829, 839, 841, 844, 848, 852, 856, 857, 861, 863, 864, 866, 868, 870, 872, 882], "torchvis": [4, 5, 8, 9, 19, 20, 21, 22, 23, 58], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 59, 61, 70, 74, 93, 97, 388, 389, 410, 411, 416, 417, 420, 421, 422, 432, 433, 436, 453, 651, 675, 794, 797, 810, 831, 857, 863, 872, 877, 878, 882, 883], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 59, 60, 61, 831, 877], "time": [4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 40, 44, 45, 50, 58, 60, 61, 62, 70, 72, 75, 81, 93, 95, 104, 110, 111, 147, 354, 385, 388, 389, 391, 400, 417, 422, 434, 436, 457, 464, 497, 504, 536, 630, 635, 644, 650, 651, 652, 654, 655, 659, 660, 674, 677, 692, 730, 733, 734, 735, 762, 763, 767, 768, 810, 811, 812, 829, 837, 838, 839, 842, 844, 846, 847, 848, 850, 853, 855, 856, 857, 859, 860, 863, 864, 868, 869, 870, 871, 874, 877, 878, 882, 883], "filterwarn": [4, 5, 6, 7, 23], "ignor": [4, 5, 6, 7, 23, 57, 65, 66, 70, 87, 93, 152, 388, 389, 391, 400, 412, 413, 414, 443, 451, 459, 500, 501, 505, 544, 644, 651, 656, 678, 747, 748, 814, 838, 845, 847, 850, 863, 870], "compos": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 44, 45, 58, 70, 93, 388, 402, 403, 404, 405, 838, 846, 860, 863, 878, 880, 882], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 58, 59, 70, 93, 388, 424, 866], "centercrop": [4, 5, 21, 22, 23], "224": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 44, 45, 58, 59, 61, 831, 877], "totensor": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 58], "485": [4, 5, 21, 22, 23, 58], "456": [4, 5, 21, 22, 23, 58, 863], "406": [4, 5, 21, 22, 23, 58, 70, 93, 410, 554, 649], "229": [4, 5, 21, 22, 23, 58, 292, 647], "225": [4, 5, 21, 22, 23, 58, 60, 247, 647], "torch_img": [4, 5, 12, 13, 21, 22], "unsqueez": [4, 5, 12, 13, 19, 20, 21, 22], "img": [4, 5, 12, 13, 21, 22, 39, 44, 45, 58, 59, 60, 62, 831, 877], "ipython": [4, 5, 12, 13, 21, 22, 37, 39, 40, 44, 45, 63], "displai": [4, 5, 12, 13, 21, 22, 23, 39, 44, 45, 58, 59, 60, 62, 63, 838, 845, 847, 852, 863], "end": [4, 5, 12, 13, 23, 58, 59, 70, 93, 139, 241, 297, 366, 385, 388, 390, 391, 436, 465, 487, 497, 500, 501, 644, 647, 825, 838, 839, 844, 847, 853, 859, 864, 866, 870, 884], "set_default_devic": [4, 6, 8, 9, 12, 13, 19, 21, 23, 24, 230, 646, 849], "ivy_model": [4, 5, 6, 7, 12, 13, 21, 22, 61], "ivy_alexnet": [4, 5], "quick": [4, 5, 31, 45, 839, 841, 861], "trace_graph": [4, 5, 6, 7, 12, 13, 21, 22, 35, 36, 37, 38, 44, 45, 47, 48, 49, 50, 51, 52, 61, 812, 869, 876], "moment": [4, 5, 70, 72, 93, 95, 389, 446, 629, 630, 635, 650, 814, 829, 837, 844, 870, 877, 878], "cost": [4, 5, 72, 95, 629, 630, 633, 635, 636, 637, 650, 655, 733, 734, 735, 825, 848, 866], "arg": [4, 5, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 27, 29, 37, 38, 40, 44, 45, 49, 50, 51, 62, 65, 87, 109, 119, 135, 216, 226, 615, 643, 644, 646, 649, 789, 791, 806, 807, 810, 811, 812, 816, 819, 824, 829, 831, 843, 848, 849, 852, 858, 859, 860, 866, 868, 877, 878, 880], "asarrai": [4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 59, 66, 70, 71, 82, 89, 93, 94, 105, 140, 398, 528, 529, 559, 570, 574, 575, 605, 606, 607, 644, 649, 651, 660, 661, 665, 768, 772, 852, 857, 860, 861], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 33, 44, 59, 60, 63, 66, 70, 79, 89, 93, 102, 150, 151, 154, 206, 207, 208, 224, 395, 522, 523, 525, 526, 644, 646, 652, 658, 703, 756, 757, 758, 759, 809, 810, 811, 812, 813, 814, 815, 829, 868, 869, 870, 872], "output": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 33, 39, 40, 42, 44, 45, 57, 58, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 167, 192, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 382, 385, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 430, 432, 433, 434, 436, 437, 439, 440, 441, 443, 445, 448, 449, 451, 454, 455, 456, 457, 459, 460, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 480, 481, 482, 485, 487, 488, 489, 490, 491, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 554, 555, 559, 560, 561, 563, 567, 576, 583, 590, 591, 592, 616, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 749, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 794, 809, 810, 824, 825, 831, 833, 838, 839, 841, 842, 843, 845, 846, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 868, 870, 872, 877, 878, 883], "softmax": [4, 5, 8, 9, 10, 11, 21, 22, 27, 40, 44, 45, 60, 64, 74, 85, 86, 97, 390, 467, 641, 651, 678, 681, 806, 831], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 40, 42, 44, 45, 51, 57, 58, 60, 62, 63, 69, 70, 85, 87, 92, 93, 108, 116, 135, 136, 138, 170, 192, 207, 226, 241, 287, 388, 390, 391, 394, 395, 400, 434, 467, 487, 515, 517, 522, 542, 543, 576, 643, 645, 646, 647, 649, 655, 733, 734, 789, 791, 795, 802, 807, 811, 812, 814, 815, 819, 824, 829, 831, 835, 837, 839, 842, 843, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 866, 870, 877, 878, 880], "argsort": [4, 5, 21, 22, 82, 105, 661, 773, 860], "descend": [4, 5, 21, 22, 82, 105, 652, 661, 702, 703, 771, 774], "top": [4, 5, 21, 22, 40, 42, 44, 45, 58, 59, 70, 77, 93, 332, 382, 390, 391, 465, 508, 559, 649, 718, 838, 839, 848, 853, 860, 862, 863, 866, 882], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 58, 59, 60, 61, 70, 76, 93, 99, 380, 395, 522, 525, 653, 711, 713, 806, 878], "gather": [4, 5, 21, 22, 58, 70, 71, 93, 94, 343, 344, 345, 382, 567, 569, 649], "to_list": [4, 5, 21, 22, 71, 94, 649], "arraitiger": [4, 5, 21, 22], "tabbi": [4, 5, 10, 11, 21, 22], "egyptian": [4, 5, 21, 22], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 21, 22, 23], "dropout": [4, 5, 74, 97, 388, 412, 413, 414, 651, 676, 678, 681, 810], "torch_output": [4, 5, 12, 13, 14, 15, 16, 21, 22], "dim": [4, 5, 21, 22, 60, 70, 87, 89, 93, 154, 326, 382, 388, 391, 406, 416, 417, 418, 421, 429, 487, 510, 644, 651, 664, 671, 672, 677, 796, 810, 848, 860, 861, 866], "torch_class": [4, 5, 21, 22], "torch_logit": [4, 5, 21, 22], "tensor": [4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 37, 38, 40, 42, 44, 45, 46, 50, 56, 58, 66, 69, 70, 71, 74, 75, 76, 77, 79, 83, 87, 89, 92, 93, 94, 97, 98, 99, 100, 102, 106, 109, 142, 150, 151, 154, 160, 176, 192, 284, 285, 315, 332, 336, 337, 338, 339, 340, 341, 350, 373, 380, 382, 385, 388, 389, 390, 391, 400, 401, 407, 408, 411, 415, 424, 425, 426, 427, 434, 436, 438, 445, 446, 447, 448, 451, 453, 455, 457, 458, 461, 463, 464, 465, 467, 470, 471, 487, 490, 495, 498, 499, 500, 501, 502, 505, 510, 511, 542, 547, 590, 591, 644, 645, 647, 649, 651, 652, 653, 654, 658, 662, 674, 677, 678, 693, 704, 711, 724, 726, 756, 779, 810, 819, 825, 829, 831, 843, 844, 848, 849, 853, 855, 856, 859, 860, 861, 863, 864, 866, 868, 869, 870, 872, 877, 878, 880, 883], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 21, 22, 40, 56, 632, 640, 650], "takebackward0": [4, 5, 21, 22], "great": [4, 5, 10, 11, 12, 13, 839, 863], "simpl": [4, 5, 10, 11, 27, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 56, 58, 60, 63, 70, 93, 400, 536, 796, 810, 825, 831, 837, 838, 839, 843, 845, 846, 848, 849, 850, 851, 856, 859, 860, 863, 864, 866, 868, 870, 872, 874, 877, 878, 882, 883], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 56, 58, 59, 61, 63, 71, 83, 94, 233, 234, 235, 236, 239, 242, 251, 254, 256, 258, 267, 268, 269, 274, 276, 289, 297, 299, 300, 304, 566, 567, 647, 649, 652, 662, 706, 779, 781, 782, 783, 784, 831, 837, 840, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 860, 861, 863, 864, 865, 866, 868, 869, 877, 878], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 831, 832, 834, 835, 837, 838, 839, 840, 845, 850, 853, 854, 858, 859, 877, 878], "try": [4, 5, 8, 9, 10, 11, 23, 34, 46, 56, 59, 63, 87, 615, 649, 809, 819, 831, 837, 838, 839, 842, 843, 846, 847, 848, 852, 854, 859, 861, 868, 870, 880], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 27, 29, 34, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 61, 62, 807, 831, 843, 848, 849, 855, 859, 860, 863, 864, 866, 868, 869, 870, 872, 877, 878, 880, 882], "onc": [4, 5, 8, 9, 12, 13, 44, 45, 56, 58, 75, 79, 98, 102, 226, 389, 442, 646, 652, 658, 687, 688, 689, 702, 756, 837, 838, 839, 846, 847, 848, 849, 850, 853, 854, 859, 860, 863, 866, 868, 870, 878], "set": [4, 5, 10, 11, 15, 16, 27, 29, 35, 44, 45, 47, 50, 58, 59, 60, 61, 62, 65, 70, 71, 74, 75, 80, 82, 83, 87, 93, 94, 97, 98, 103, 105, 106, 128, 131, 138, 158, 160, 194, 195, 196, 197, 198, 209, 222, 223, 224, 225, 226, 241, 341, 353, 369, 371, 376, 382, 385, 386, 388, 389, 390, 391, 400, 411, 432, 436, 440, 444, 447, 465, 470, 471, 487, 497, 501, 508, 536, 541, 542, 543, 544, 545, 546, 548, 552, 559, 571, 576, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 609, 617, 641, 643, 644, 645, 646, 647, 649, 651, 652, 656, 658, 659, 661, 662, 674, 681, 683, 693, 695, 698, 701, 702, 736, 743, 746, 747, 748, 753, 754, 760, 762, 763, 767, 769, 770, 771, 774, 782, 784, 791, 794, 795, 796, 797, 802, 809, 810, 812, 814, 819, 825, 828, 829, 831, 832, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 859, 860, 861, 863, 864, 866, 868, 869, 871, 876, 877, 878, 882, 883], "post": [4, 5, 8, 9, 12, 13, 23, 58, 78, 101, 657, 755, 838, 853, 858], "process": [4, 5, 8, 9, 12, 13, 37, 44, 45, 49, 58, 220, 232, 646, 832, 838, 839, 845, 846, 847, 853, 854, 856, 858, 860, 861, 862, 863, 866, 868, 869, 878, 882, 884], "st": [4, 5, 6, 7, 19, 20, 794, 842, 861, 863], "perf_count": [4, 5, 15, 16, 17, 19, 20], "raw_logit": [4, 5], "latenc": [4, 5, 19, 20], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 29, 40, 43, 44, 45, 58, 62, 152, 644, 831, 856, 861, 866, 868, 869, 877, 883], "direct": [4, 5, 70, 93, 354, 361, 365, 370, 374, 385, 388, 391, 422, 433, 488, 489, 504, 661, 774, 837, 843, 845, 860, 866, 868, 881, 882, 883], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 56, 58, 67, 70, 71, 79, 80, 83, 90, 93, 94, 102, 103, 145, 150, 154, 156, 162, 165, 168, 170, 172, 174, 176, 179, 181, 182, 186, 189, 193, 197, 201, 203, 221, 248, 284, 285, 396, 400, 527, 537, 538, 539, 567, 576, 613, 644, 645, 646, 647, 649, 658, 659, 662, 757, 758, 759, 763, 775, 776, 781, 783, 794, 795, 848, 860, 863, 868], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 35, 39, 40, 44, 45, 47, 50, 56, 57, 81, 85, 108, 652, 660, 700, 767, 768, 769, 770, 835, 837, 838, 839, 840, 843, 845, 846, 847, 848, 849, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 866, 870, 877, 878, 880, 882], "ident": [4, 5, 8, 9, 15, 16, 26, 40, 42, 59, 61, 75, 87, 145, 214, 569, 595, 644, 646, 649, 652, 656, 690, 694, 749, 810, 846, 856, 857, 860, 861, 864, 866, 870, 872], "had": [4, 5, 846, 847, 859, 864, 868, 869, 882, 883], "postprocess": [4, 5], "routin": [4, 5, 847, 859, 860, 866, 870, 882], "feed": [4, 5, 226, 646, 878, 882, 883], "carefulli": [4, 5, 291, 647, 809, 860], "rewrit": [4, 5], "easili": [4, 5, 39, 44, 45, 56, 838, 843, 847, 853, 860, 863, 866, 869, 870, 875, 882], "quickest": [4, 5], "particular": [4, 5, 44, 45, 281, 647, 795, 838, 839, 842, 844, 847, 848, 850, 857, 859, 860, 863, 864, 882], "again": [4, 5, 12, 13, 36, 37, 47, 48, 49, 50, 652, 700, 839, 843, 844, 845, 846, 850, 852, 854, 859, 860, 863, 864, 866, 868, 870], "speed": [4, 5, 19, 20, 24, 25, 26, 44, 45, 58, 63, 71, 94, 583, 649, 863], "repeat": [4, 5, 6, 7, 36, 48, 70, 71, 77, 93, 94, 100, 388, 391, 400, 417, 422, 486, 536, 561, 649, 654, 655, 730, 734, 735, 824, 839, 843, 844, 850, 851, 859, 863], "previou": [4, 5, 26, 35, 36, 37, 39, 47, 48, 49, 51, 72, 93, 95, 200, 201, 202, 203, 204, 377, 387, 388, 434, 616, 618, 619, 620, 621, 623, 624, 626, 630, 635, 645, 649, 650, 809, 828, 838, 839, 842, 844, 847, 849, 855, 860, 863, 866, 870], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 31, 32, 36, 39, 44, 47, 49, 50, 62, 71, 75, 87, 94, 98, 578, 579, 582, 593, 602, 617, 625, 649, 652, 791, 802, 812, 814, 829, 831, 842, 846, 848, 860, 865, 866, 869, 870, 876, 877, 878, 883], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 50, 59, 66, 70, 89, 93, 154, 400, 536, 644, 843, 845], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 603, 626, 649, 825, 848, 865], "fix": [4, 5, 12, 13, 60, 70, 93, 110, 111, 385, 388, 389, 434, 464, 651, 678, 831, 835, 838, 839, 842, 848, 854, 863, 864], "until": [4, 5, 12, 13, 825, 839, 859, 868, 870, 878], "o": [4, 5, 12, 13, 23, 57, 58, 59, 60, 62, 586, 649, 651, 678, 831, 838, 841, 847, 869, 871], "environ": [4, 5, 12, 13, 24, 25, 37, 39, 40, 59, 62, 831, 832, 839, 871, 874, 882, 884], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 23, 26, 37, 40, 833, 836, 838, 845, 884], "jit": [4, 5, 19, 20, 24, 25, 44, 47, 869, 870, 878, 882], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 19, 20], "warm": [4, 5], "_": [4, 5, 15, 16, 17, 19, 20, 24, 25, 26, 44, 57, 58, 69, 70, 87, 92, 93, 95, 111, 168, 256, 258, 266, 267, 282, 348, 349, 385, 388, 391, 400, 432, 461, 464, 506, 536, 559, 629, 630, 645, 647, 649, 650, 652, 654, 656, 662, 700, 701, 703, 732, 743, 782, 839, 847, 848, 851, 859, 863], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 70, 86, 87, 123, 388, 390, 424, 429, 469, 470, 660, 767, 769, 796, 806, 838, 839, 842, 850, 869], "note": [4, 5, 8, 9, 12, 13, 23, 26, 44, 45, 50, 59, 60, 61, 70, 71, 75, 77, 81, 93, 98, 100, 110, 147, 160, 192, 260, 295, 296, 303, 341, 342, 362, 382, 385, 388, 389, 391, 411, 442, 447, 457, 458, 464, 487, 506, 645, 647, 651, 652, 654, 660, 662, 678, 687, 688, 699, 700, 702, 724, 728, 768, 770, 779, 810, 825, 829, 835, 837, 838, 839, 843, 848, 850, 851, 854, 859, 860, 861, 863, 864, 866], "were": [4, 5, 12, 13, 61, 87, 90, 181, 185, 186, 260, 647, 651, 678, 837, 838, 839, 848, 852, 854, 858, 859, 861, 863, 864, 866, 868, 878, 882, 883], "function": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 23, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 167, 168, 178, 179, 180, 181, 184, 185, 186, 188, 192, 193, 210, 212, 213, 222, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 586, 589, 590, 591, 594, 595, 598, 600, 602, 605, 606, 607, 608, 609, 611, 613, 614, 615, 621, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 740, 742, 743, 744, 746, 747, 748, 749, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 792, 794, 795, 796, 797, 802, 806, 809, 812, 819, 820, 827, 829, 835, 838, 839, 841, 842, 843, 844, 845, 847, 850, 851, 853, 859, 862, 869, 872, 875, 876, 878, 879, 880, 881, 882, 883, 884], "dog": [4, 5], "006431100999861883": [4, 5], "258": [4, 5, 651, 666, 668], "104": [4, 5, 83, 652, 662, 697, 777], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5, 847], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 26, 58, 59, 60, 61, 70, 76, 93, 99, 390, 466, 469, 472, 653, 711, 712, 713, 831, 848], "down": [4, 5, 35, 47, 61, 70, 93, 388, 391, 424, 489, 831, 838, 863, 872, 882], "itself": [4, 5, 10, 11, 37, 49, 69, 110, 287, 549, 615, 647, 649, 656, 748, 825, 835, 838, 839, 842, 845, 846, 847, 848, 849, 852, 853, 854, 859, 860, 870, 878, 882, 883], "version": [4, 5, 8, 9, 15, 16, 26, 39, 40, 47, 58, 59, 60, 63, 64, 70, 93, 110, 123, 304, 353, 355, 385, 400, 541, 546, 628, 647, 649, 652, 688, 689, 791, 819, 820, 831, 838, 839, 845, 847, 848, 851, 859, 861, 868, 875, 877], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5], "0587": [4, 5], "promis": [4, 5, 10, 11], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 18, 21, 22, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 837, 838, 839, 842, 843, 845, 846, 847, 860, 862, 874, 876, 877, 879, 880, 882, 883, 884], "modul": [4, 5, 8, 9, 12, 13, 19, 20, 24, 25, 27, 29, 33, 37, 39, 40, 43, 44, 45, 46, 50, 56, 57, 58, 60, 61, 62, 85, 87, 108, 116, 381, 383, 384, 392, 393, 397, 587, 649, 663, 787, 791, 806, 807, 808, 810, 811, 813, 815, 818, 819, 829, 833, 838, 843, 844, 845, 852, 856, 859, 860, 862, 863, 868, 869, 870, 876, 878, 879, 880, 882, 883], "__init__": [4, 5, 12, 13, 27, 29, 43, 44, 45, 56, 57, 58, 60, 87, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 792, 799, 800, 801, 806, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 824, 826, 829, 831, 837, 843, 844, 848, 852, 860, 864, 869, 877], "self": [4, 5, 8, 9, 10, 11, 12, 13, 27, 29, 43, 44, 45, 56, 57, 58, 60, 62, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 176, 178, 181, 184, 185, 186, 188, 190, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 651, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 814, 824, 831, 839, 843, 846, 852, 860, 861, 869, 877], "num_class": [4, 5, 27, 29, 44, 45, 58, 60, 62, 831, 868, 877], "1000": [4, 5, 8, 9, 15, 16, 17, 19, 20, 21, 22, 23, 27, 44, 45, 58, 59, 60, 61, 63, 66, 89, 151, 644, 831, 877], "v": [4, 5, 6, 7, 12, 13, 31, 32, 35, 44, 45, 47, 50, 51, 56, 59, 60, 70, 74, 82, 89, 93, 97, 105, 151, 251, 256, 258, 299, 389, 391, 443, 453, 460, 461, 486, 647, 651, 655, 661, 678, 681, 734, 735, 773, 791, 810, 811, 812, 813, 814, 815, 833, 838, 839, 841, 845, 853, 868, 881], "_build": [4, 5, 12, 13, 811, 812], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 24, 25, 26, 44, 58, 62, 65, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 116, 119, 216, 391, 497, 586, 615, 644, 646, 649, 789, 791, 806, 807, 810, 811, 812, 819, 829, 831, 843, 848, 849, 852, 856, 859, 860, 866, 868, 877, 878, 880], "featur": [4, 5, 10, 11, 24, 25, 26, 27, 29, 31, 33, 43, 44, 45, 58, 62, 70, 93, 388, 402, 404, 405, 412, 413, 414, 809, 810, 829, 831, 837, 838, 839, 843, 844, 847, 848, 855, 864, 866, 870, 874, 875, 877, 882, 883, 884], "sequenti": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 44, 45, 60, 845, 846, 877], "conv2d": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 45, 60, 63, 74, 97, 651, 668, 810, 822], "64": [4, 5, 12, 13, 21, 22, 23, 56, 58, 59, 60, 63, 69, 70, 74, 92, 93, 94, 97, 98, 102, 106, 116, 177, 247, 257, 291, 300, 301, 359, 385, 388, 410, 420, 559, 560, 607, 635, 645, 647, 649, 650, 651, 652, 656, 662, 666, 668, 670, 672, 673, 694, 697, 707, 744, 748, 758, 777, 781, 838, 848], "data_format": [4, 5, 60, 70, 74, 93, 97, 388, 394, 403, 407, 408, 409, 412, 413, 414, 425, 426, 427, 428, 430, 515, 516, 517, 520, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 794, 810, 813], "nchw": [4, 5, 60, 70, 74, 93, 97, 388, 394, 403, 408, 413, 426, 430, 520, 651, 664, 667, 668, 671, 672, 673, 810], "relu": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 45, 56, 63, 64, 70, 85, 86, 93, 125, 315, 316, 324, 380, 641, 806, 861], "maxpool2d": [4, 5, 12, 13, 21, 22, 23, 58, 810, 831], "192": [4, 5, 60, 794, 824], "384": [4, 5, 95, 629, 650, 656, 736], "avgpool": [4, 5, 21, 22, 23], "adaptiveavgpool2d": [4, 5, 21, 22, 23, 810], "classifi": [4, 5, 10, 11, 23, 26, 27, 29, 44, 45, 58, 60, 61, 831, 837, 877, 878], "prob": [4, 5, 8, 9, 10, 11, 60, 70, 74, 93, 97, 102, 388, 395, 412, 413, 414, 522, 651, 658, 674, 756, 810], "4096": [4, 5], "_forward": [4, 5, 12, 13, 19, 20, 24, 25, 44, 45, 56, 57, 60, 851, 869], "invalid": [5, 70, 84, 93, 107, 391, 506, 652, 654, 663, 708, 720, 785, 786, 794, 838, 848], "distribut": [5, 63, 70, 76, 79, 93, 99, 102, 388, 389, 390, 395, 412, 413, 414, 447, 458, 464, 467, 469, 470, 472, 522, 523, 524, 525, 526, 653, 658, 711, 712, 713, 756, 757, 758, 759, 761, 809, 810, 837, 838, 847, 849, 870, 882], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 14, 37, 39, 40, 62, 838, 844, 848, 859, 863, 866], "homebrew": [5, 14], "site": [5, 14, 37, 39, 40, 883], "resolv": [5, 8, 9, 21, 22, 58, 60, 70, 83, 260, 400, 537, 538, 647, 654, 662, 720, 775, 776, 781, 783, 839, 845, 848, 854, 868], "account": [5, 50, 60, 62, 70, 77, 93, 100, 300, 391, 487, 647, 654, 724, 809, 824, 838, 847, 851, 860, 864, 878], "behaviour": [5, 24, 25, 37, 39, 40, 125, 128, 287, 641, 647, 836, 839, 841, 842, 843, 846, 848, 849, 851, 852, 855, 856, 857, 859, 860, 863, 864], "conflict": [5, 24, 25, 37, 39, 40, 50, 838, 839, 847, 860], "maco": 5, "incompat": [5, 167, 645], "remot": [5, 838, 842, 853, 854], "enumer": [5, 8, 9, 10, 11, 12, 13, 23, 58, 60, 799], "compress": 5, "156": [5, 291, 647, 794], "delta": [5, 70, 72, 93, 95, 390, 466, 629, 650], "37": [5, 23, 26, 37, 39, 40, 56, 64, 69, 70, 86, 92, 93, 97, 115, 126, 239, 247, 296, 299, 303, 396, 431, 527, 647, 651, 652, 656, 658, 675, 694, 744, 758, 847], "reus": [5, 58, 66, 89, 93, 100, 141, 475, 476, 483, 485, 487, 488, 489, 496, 513, 720, 721, 722, 724, 726, 727, 729, 731, 852, 863], "pack": [5, 651, 676], "83": [5, 21, 22, 23, 26, 56, 75, 97, 102, 300, 388, 400, 410, 420, 431, 537, 647, 651, 652, 675, 690, 758], "mib": 5, "user": [5, 8, 9, 10, 11, 14, 23, 24, 25, 31, 37, 39, 40, 44, 59, 60, 62, 287, 304, 391, 497, 594, 647, 649, 810, 811, 812, 824, 831, 838, 839, 841, 843, 844, 846, 847, 848, 849, 852, 857, 858, 859, 860, 863, 865, 866, 867, 868, 870, 871, 882], "samuelarmstrong": [5, 14], "examples_and_demos_cpu": 5, "metadata": [5, 58, 60, 63, 859], "setup": [5, 58, 60, 63, 838, 839, 845, 847, 853], "satisfi": [5, 23, 37, 39, 40, 58, 60, 63, 70, 388, 389, 411, 443, 848, 850], "scipi": [5, 837], "einop": [5, 37, 39, 40, 58, 60, 63, 71, 94, 559, 560, 561, 649, 848], "psutil": [5, 37, 39, 40, 58, 60, 63], "termcolor": [5, 37, 39, 40, 58, 60, 63, 87, 116], "colorama": [5, 37, 39, 40, 58, 60], "nvidia": [5, 19, 20, 23, 24, 25, 37, 39, 40, 58, 60, 63], "535": [5, 37, 39, 40, 64, 86, 131, 641, 852], "133": [5, 8, 9, 21, 22, 58, 74, 675], "diskcach": [5, 37, 39, 40, 58], "googl": [5, 6, 7, 37, 39, 40, 58, 59, 60, 62, 847], "auth": [5, 37, 39, 40], "urllib3": [5, 37, 39, 40, 58], "request": [5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 37, 39, 40, 44, 45, 58, 61, 70, 217, 395, 526, 646, 829, 831, 832, 834, 837, 850, 854, 864, 866, 877], "pyvi": [5, 37, 39, 40, 44, 45], "dill": [5, 37, 39, 40, 58], "astunpars": [5, 37, 39, 40], "cloudpickl": [5, 37, 39, 40], "gast": [5, 37, 39, 40], "wheel": [5, 37, 39, 40, 58, 60, 63], "43": [5, 6, 7, 26, 56, 58, 60, 70, 93, 102, 116, 247, 388, 389, 400, 409, 441, 537, 647, 658, 659, 758, 759, 766], "six": [5, 37, 39, 40, 58, 63, 838, 866], "cffi": 5, "cachetool": [5, 37, 39, 40], "pyasn1": [5, 37, 39, 40], "rsa": [5, 37, 39, 40], "jinja2": [5, 23, 37, 39, 40], "jsonpickl": [5, 37, 39, 40], "networkx": [5, 23, 37, 39, 40, 63], "charset": [5, 37, 39, 40, 58], "idna": [5, 37, 39, 40, 58], "certifi": [5, 37, 39, 40, 58], "2017": [5, 37, 39, 40, 58, 651, 678], "2024": [5, 8, 9], "pycpars": 5, "decor": [5, 31, 32, 37, 39, 40, 50, 62, 553, 649, 794, 796, 802, 835, 842, 843, 846, 848, 849, 853, 856, 859, 860, 861, 866], "jedi": [5, 37, 39, 40], "inlin": [5, 37, 39, 40, 845], "prompt": [5, 37, 39, 40, 837, 839], "toolkit": [5, 37, 39, 40, 882, 883], "41": [5, 26, 37, 39, 40, 56, 58, 63, 69, 70, 75, 92, 93, 94, 97, 98, 126, 240, 248, 255, 286, 300, 388, 389, 396, 400, 408, 426, 431, 453, 527, 537, 554, 641, 647, 649, 652, 662, 682, 690, 783], "pygment": [5, 37, 39, 40], "stack": [5, 26, 35, 37, 39, 40, 47, 56, 60, 70, 75, 77, 87, 93, 98, 100, 115, 158, 159, 342, 382, 389, 391, 442, 481, 482, 484, 493, 498, 514, 593, 602, 625, 644, 649, 652, 654, 656, 684, 686, 687, 688, 689, 691, 692, 694, 695, 696, 698, 699, 700, 702, 703, 706, 736, 746, 747, 810, 831, 836, 842, 859, 868, 881], "traitlet": [5, 37, 39, 40], "exceptiongroup": [5, 37, 39, 40], "pexpect": [5, 37, 39, 40], "markupsaf": [5, 23, 37, 39, 40], "parso": [5, 37, 39, 40], "ptyprocess": [5, 37, 39, 40], "wcwidth": [5, 37, 39, 40], "execut": [5, 8, 9, 19, 20, 24, 25, 33, 34, 35, 37, 39, 40, 44, 45, 47, 49, 52, 59, 61, 63, 136, 138, 615, 643, 646, 649, 838, 839, 845, 846, 847, 848, 849, 850, 852, 856, 857, 859, 863, 866, 869, 870, 872, 878, 882, 883], "asttoken": [5, 37, 39, 40], "pure": [5, 37, 39, 40, 50, 60, 851, 855, 860, 866, 868, 870, 882], "eval": [5, 6, 7, 8, 9, 12, 13, 21, 22, 23, 29, 37, 39, 40, 651, 676, 812], "collect": [5, 23, 48, 58, 60, 62, 63, 65, 87, 88, 641, 646, 649, 650, 651, 653, 656, 657, 658, 749, 806, 810, 811, 812, 813, 814, 838, 847, 852, 853, 857, 858, 861, 863, 882], "creat": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 33, 34, 35, 37, 39, 40, 44, 45, 46, 47, 49, 50, 51, 58, 59, 60, 62, 63, 66, 69, 70, 79, 87, 89, 92, 93, 98, 102, 111, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 287, 325, 326, 336, 338, 340, 341, 382, 388, 389, 391, 395, 407, 408, 409, 430, 447, 458, 464, 473, 481, 497, 503, 522, 523, 524, 525, 526, 594, 611, 628, 640, 644, 647, 649, 650, 658, 697, 756, 757, 758, 759, 761, 791, 802, 807, 809, 810, 811, 812, 813, 814, 815, 831, 832, 834, 838, 839, 840, 843, 844, 845, 847, 848, 849, 852, 856, 857, 859, 860, 861, 863, 866, 869, 871, 872, 877, 878, 880, 882, 883], "py3": [5, 23, 58, 60, 63], "whl": [5, 23, 58, 59, 60, 63], "76449": 5, "sha256": [5, 58, 60, 63], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 58, 60, 63, 67, 70, 71, 75, 77, 87, 90, 93, 94, 98, 100, 167, 388, 389, 433, 441, 445, 459, 463, 563, 649, 652, 654, 706, 726, 791, 792, 810, 811, 812, 833, 839, 843, 844, 846, 851, 857, 859, 860, 861, 869, 872, 878], "directori": [5, 8, 9, 23, 58, 59, 60, 63, 603, 626, 646, 649, 829, 833, 837, 838, 839, 845, 847, 853, 860, 863, 869, 871], "privat": [5, 814, 860, 863], "var": [5, 14, 57, 83, 106, 108, 135, 136, 137, 138, 643, 655, 662, 733, 734, 816, 838, 850, 869], "3x": [5, 19, 20], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 58, 60], "abb7vdwj": 5, "01": [5, 10, 11, 21, 22, 37, 40, 60, 66, 70, 71, 72, 75, 93, 94, 95, 98, 102, 151, 278, 296, 297, 325, 331, 356, 357, 364, 382, 388, 410, 420, 421, 563, 606, 607, 629, 630, 635, 644, 647, 649, 650, 652, 655, 658, 689, 699, 734, 735, 758, 759, 794, 844], "2d": [5, 44, 45, 60, 70, 93, 110, 326, 382, 388, 389, 391, 400, 403, 404, 412, 413, 455, 462, 476, 486, 536, 810, 829, 860, 866], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 23, 58, 60, 63, 812, 834, 838, 843], "built": [5, 42, 44, 45, 50, 58, 60, 63, 139, 644, 810, 811, 812, 838, 839, 845, 846, 863, 871, 878, 882], "zsh": 5, "found": [5, 10, 11, 58, 60, 61, 63, 75, 77, 81, 87, 93, 98, 100, 104, 116, 214, 400, 482, 537, 646, 656, 686, 692, 728, 747, 767, 825, 834, 837, 838, 839, 843, 844, 845, 846, 848, 849, 851, 854, 857, 859, 860], "filenotfounderror": 5, "traceback": [5, 14, 863], "recent": [5, 14, 60, 828, 838, 839, 863], "line": [5, 8, 9, 14, 19, 20, 24, 25, 26, 35, 36, 39, 44, 45, 47, 48, 59, 60, 303, 647, 829, 831, 838, 842, 843, 847, 849, 850, 852, 860, 863, 866, 877], "get_ipython": 5, "system": [5, 24, 25, 37, 39, 40, 60, 389, 459, 652, 701, 794, 831, 838, 839, 840, 844, 847, 848, 870, 877, 882], "34": [5, 14, 21, 22, 26, 56, 58, 92, 93, 94, 102, 181, 251, 278, 299, 388, 400, 431, 543, 559, 560, 645, 647, 649, 651, 652, 658, 675, 694, 758, 759, 849], "interactiveshel": 5, "324": [5, 842], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 66, 70, 77, 89, 93, 100, 104, 141, 388, 390, 422, 433, 470, 475, 476, 483, 485, 487, 488, 489, 496, 513, 654, 720, 721, 722, 724, 726, 727, 729, 731, 770, 796, 826, 852], "319": 5, "won": [5, 838, 839, 846, 848, 871, 878, 880], "fd": [5, 74, 97, 651, 664, 669, 670, 671, 672], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 34, 35, 36, 38, 44, 46, 47, 48, 49, 50, 51, 61, 63, 66, 69, 70, 77, 89, 92, 93, 97, 100, 105, 151, 169, 192, 237, 257, 263, 266, 279, 297, 354, 359, 371, 385, 388, 389, 390, 391, 398, 400, 431, 433, 442, 467, 476, 477, 486, 487, 528, 529, 546, 644, 645, 647, 652, 654, 658, 661, 687, 724, 759, 772, 825, 831, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 874, 877, 878, 882, 884], "crash": 5, "know": [5, 37, 49, 50, 51, 81, 660, 767, 768, 769, 770, 831, 833, 837, 839, 849, 857, 861, 863, 866, 880, 883], "what": [5, 8, 9, 19, 20, 24, 25, 31, 36, 44, 45, 48, 49, 52, 57, 58, 388, 422, 433, 796, 825, 837, 839, 841, 846, 847, 850, 851, 854, 855, 857, 858, 859, 860, 861, 863, 867, 870, 875, 883], "321": 5, "builtin": [5, 21, 22, 838], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 44, 45, 58, 70, 76, 93, 99, 390, 467, 468, 469, 471, 472, 653, 711, 839, 847, 848, 882], "kernel": [5, 70, 74, 93, 97, 388, 407, 408, 409, 425, 426, 427, 428, 651, 677, 868, 870, 882], "while": [5, 8, 9, 10, 11, 23, 26, 44, 45, 52, 70, 74, 87, 93, 97, 110, 111, 116, 138, 154, 192, 260, 261, 281, 282, 360, 385, 388, 389, 391, 433, 434, 456, 500, 501, 535, 643, 644, 645, 647, 651, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 767, 779, 782, 792, 831, 835, 837, 838, 839, 843, 844, 845, 847, 848, 849, 850, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 871, 878, 882, 884], "review": [5, 70, 93, 389, 464, 833, 834, 837, 839, 845, 847, 850, 860, 864], "identifi": [5, 70, 93, 343, 344, 345, 382, 837, 842, 847, 848, 863, 866], "caus": [5, 26, 390, 467, 838, 839, 842, 844, 846, 847, 848, 850, 859, 861, 863, 870], "failur": [5, 839, 847, 861, 863], "href": 5, "aka": 5, "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 23, 27, 30, 33, 34, 35, 36, 40, 42, 43, 44, 45, 46, 47, 56, 58, 59, 60, 64, 69, 70, 75, 77, 81, 86, 92, 93, 98, 100, 104, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 166, 258, 260, 276, 291, 304, 308, 313, 314, 316, 376, 380, 386, 389, 390, 391, 437, 439, 451, 453, 456, 469, 475, 476, 477, 482, 504, 594, 641, 644, 645, 647, 649, 652, 654, 660, 686, 692, 695, 698, 700, 702, 709, 721, 728, 767, 768, 769, 770, 796, 806, 825, 831, 833, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 875, 877, 880, 882, 883, 884], "viewoutput": 5, "log": [5, 8, 9, 23, 66, 69, 70, 75, 89, 92, 93, 98, 131, 151, 276, 278, 291, 313, 314, 367, 374, 380, 385, 390, 395, 467, 469, 470, 522, 641, 644, 647, 700, 794, 796, 797, 806, 839, 846, 847, 850, 856, 859, 860, 861, 863, 865, 866, 868], "further": [5, 8, 9, 10, 11, 23, 33, 87, 116, 796, 831, 839, 842, 843, 847, 850, 852, 855, 856, 859, 860, 862, 863, 869], "detail": [5, 8, 9, 10, 11, 23, 35, 47, 60, 64, 69, 70, 75, 77, 81, 86, 92, 93, 94, 98, 100, 104, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 157, 304, 308, 313, 314, 316, 380, 389, 439, 482, 562, 641, 644, 647, 660, 686, 692, 698, 702, 728, 767, 768, 769, 770, 806, 831, 837, 839, 842, 844, 845, 846, 847, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 869], "bidirect": [6, 7, 651, 676], "encod": [6, 7, 27, 29, 44, 45, 58, 60, 71, 76, 94, 99, 563, 649, 653, 711, 831, 877], "mlm": [6, 7], "choos": [6, 7, 58, 60, 68, 80, 81, 91, 227, 253, 260, 281, 282, 286, 348, 349, 385, 391, 646, 647, 659, 660, 662, 766, 767, 768, 769, 770, 778, 779, 780, 782, 794, 837, 838, 839, 857, 863, 878], "librari": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 40, 42, 56, 58, 68, 81, 91, 227, 258, 260, 276, 281, 282, 304, 348, 349, 385, 646, 647, 652, 660, 662, 688, 689, 767, 768, 769, 770, 778, 779, 780, 782, 829, 837, 838, 842, 848, 870, 875, 878, 882, 884], "pretrain": [6, 7, 19, 20, 27, 28, 29, 44, 45, 63, 831, 877], "save": [6, 7, 8, 9, 21, 22, 23, 58, 70, 87, 93, 400, 543, 603, 626, 646, 649, 663, 812, 829, 838, 847, 854, 863, 869, 870, 875, 884], "some": [6, 7, 12, 13, 15, 16, 17, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 49, 50, 56, 60, 61, 87, 95, 258, 260, 276, 388, 412, 413, 414, 629, 630, 633, 635, 636, 637, 646, 647, 650, 656, 747, 810, 831, 835, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 870, 871, 872, 877, 878, 882, 883, 884], "mohame54": [6, 7], "automodel": [6, 7, 24, 25, 44], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 58, 59, 60, 61, 62, 63, 87, 389, 460, 663, 812, 863, 870, 884], "token": [6, 7, 60, 840], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 24, 25, 44, 61, 877, 878], "base": [6, 7, 10, 11, 26, 58, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 118, 120, 151, 160, 192, 256, 257, 274, 275, 276, 277, 291, 332, 341, 343, 350, 353, 359, 366, 382, 385, 388, 389, 390, 398, 431, 435, 460, 465, 528, 596, 607, 619, 644, 645, 647, 649, 652, 654, 660, 662, 693, 720, 767, 768, 769, 770, 777, 792, 795, 796, 799, 800, 801, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 819, 822, 825, 826, 829, 831, 838, 839, 840, 842, 846, 847, 848, 852, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 882], "uncas": [6, 7], "evalu": [6, 7, 69, 70, 87, 92, 93, 256, 258, 274, 275, 276, 277, 281, 288, 290, 297, 301, 335, 367, 378, 379, 382, 387, 389, 390, 391, 456, 465, 470, 494, 640, 647, 650, 656, 663, 746, 747, 785, 786, 811, 812, 839, 846, 848, 856, 857, 882], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 27, 29, 39, 44, 45, 59, 66, 69, 70, 79, 83, 89, 92, 93, 102, 106, 150, 151, 305, 332, 382, 388, 390, 391, 395, 412, 413, 414, 424, 434, 436, 465, 470, 501, 522, 523, 524, 525, 526, 644, 647, 658, 662, 756, 757, 758, 759, 782, 784, 810, 861, 863], "test": [6, 7, 10, 11, 34, 35, 37, 46, 47, 49, 50, 51, 59, 60, 69, 71, 84, 92, 94, 107, 138, 184, 188, 267, 268, 269, 270, 293, 388, 412, 413, 414, 583, 643, 645, 647, 649, 663, 785, 786, 789, 792, 795, 825, 831, 833, 835, 836, 841, 845, 848, 850, 852, 854, 857, 860, 862, 864, 870, 871, 877, 878, 880, 882], "did": [6, 7, 58, 837, 845], "realli": [6, 7, 56, 838, 846, 853, 870, 873, 878], "input": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 23, 24, 25, 27, 29, 39, 40, 42, 44, 49, 50, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 207, 209, 210, 223, 226, 227, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 335, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 569, 570, 572, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 590, 591, 592, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 621, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 795, 802, 806, 809, 810, 811, 812, 813, 822, 824, 825, 829, 842, 843, 844, 846, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 877, 878, 883], "pad": [6, 7, 21, 22, 23, 58, 60, 70, 74, 77, 93, 97, 100, 111, 113, 388, 391, 407, 408, 409, 410, 411, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 498, 563, 649, 651, 654, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 719, 732, 796, 810], "longest": [6, 7, 391, 498], "return_tensor": [6, 7, 10, 11, 24, 25, 44, 61, 877, 878], "pt": [6, 7, 10, 11, 24, 25, 44, 878], "max_length": [6, 7, 87], "512": [6, 7, 12, 13, 21, 22, 23, 58, 60, 98, 651, 666, 707, 831], "input_id": [6, 7], "101": [6, 7, 26, 59, 651, 652, 656, 675, 691, 742], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 26, 70, 93, 102, 410, 757], "token_type_id": [6, 7], "attention_mask": [6, 7, 74, 97, 651, 678], "pooler": [6, 7], "compar": [6, 7, 15, 16, 17, 19, 20, 24, 25, 44, 57, 61, 63, 70, 71, 81, 82, 83, 87, 93, 94, 105, 106, 347, 364, 385, 400, 544, 548, 551, 649, 651, 660, 661, 662, 676, 767, 768, 769, 770, 771, 774, 780, 791, 831, 844, 850, 852, 861, 863, 866, 881, 882], "no_grad": [6, 7, 58, 878], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 19, 20, 57, 60, 66, 70, 71, 74, 75, 79, 89, 92, 93, 97, 98, 102, 110, 111, 135, 145, 158, 159, 160, 280, 326, 341, 342, 382, 389, 391, 395, 398, 400, 440, 455, 459, 461, 463, 504, 508, 522, 523, 524, 525, 526, 529, 539, 551, 643, 644, 649, 651, 652, 656, 658, 659, 678, 681, 685, 692, 693, 699, 701, 702, 703, 706, 744, 757, 758, 759, 765, 841, 842, 860, 861, 868, 869, 878, 882], "ivy_output": [6, 7, 61], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 42, 44, 61, 63, 70, 93, 385], "detach": [6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 44, 858], "rtol": [6, 7, 10, 11, 27, 29, 70, 75, 93, 98, 347, 364, 385, 652, 695, 698, 789, 791, 835, 853, 861], "005": [6, 7, 21, 22, 70, 93, 347, 364, 385, 466], "atol": [6, 7, 10, 11, 14, 15, 16, 17, 19, 20, 23, 24, 25, 42, 44, 70, 75, 93, 98, 347, 364, 385, 652, 695, 789, 791, 835, 853, 861], "768": [6, 7], "fn": [6, 7, 61, 63, 70, 87, 90, 93, 119, 179, 180, 212, 213, 216, 391, 474, 549, 564, 565, 615, 645, 646, 649, 656, 742, 743, 744, 746, 747, 748, 789, 791, 816, 819, 822, 826, 827, 829, 849, 852, 859, 860, 869, 878], "finish": [6, 7, 10, 11, 31, 44, 45, 56, 59, 832, 837, 838, 841], "sec": [6, 7], "procedur": [6, 7, 845, 847, 850, 861], "60": [6, 7, 23, 56, 60, 69, 83, 92, 94, 102, 106, 237, 271, 391, 503, 567, 575, 591, 606, 628, 647, 649, 652, 656, 662, 697, 739, 757, 775, 777, 781, 825, 847], "big": [6, 7, 809, 832, 870, 882], "jnp": [6, 7, 34, 39, 44, 45, 46, 47, 50, 56, 58, 62, 831, 848, 849, 852, 855, 859, 864, 868, 877, 880], "ref": [6, 7, 12, 13, 19, 20, 24, 25, 94, 98, 272, 286, 289, 295, 302, 647, 654, 728, 838, 859], "fast": [6, 7, 37, 49, 70, 388, 411, 882], "valu": [6, 7, 26, 56, 57, 59, 60, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 113, 115, 116, 118, 131, 135, 136, 138, 139, 145, 148, 149, 150, 151, 154, 160, 165, 182, 186, 192, 225, 226, 233, 234, 235, 236, 238, 240, 241, 242, 249, 253, 254, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 315, 320, 323, 324, 326, 333, 335, 341, 343, 344, 345, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 361, 362, 364, 365, 367, 370, 372, 373, 374, 375, 376, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 399, 400, 411, 424, 431, 432, 434, 436, 440, 443, 447, 453, 458, 460, 462, 464, 465, 466, 468, 469, 470, 471, 480, 486, 491, 497, 498, 503, 505, 506, 507, 508, 510, 512, 515, 517, 522, 523, 525, 526, 532, 534, 537, 538, 539, 542, 543, 544, 545, 546, 552, 554, 555, 556, 558, 563, 566, 567, 569, 574, 575, 576, 583, 590, 591, 595, 596, 597, 600, 609, 614, 619, 620, 623, 626, 627, 628, 629, 630, 631, 635, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 681, 685, 688, 689, 693, 694, 695, 698, 699, 700, 701, 702, 703, 706, 709, 717, 718, 719, 723, 724, 732, 733, 734, 738, 740, 741, 742, 743, 744, 749, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 789, 791, 794, 795, 796, 797, 799, 801, 806, 809, 810, 811, 812, 813, 814, 822, 829, 835, 838, 839, 842, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 859, 860, 863, 865, 866, 868, 870, 878, 882, 883], "emerg": [8, 9, 874, 882], "popular": [8, 9, 10, 11, 842, 882], "Its": [8, 9, 70, 390, 465, 882], "python": [8, 9, 10, 11, 21, 22, 27, 33, 47, 52, 56, 58, 59, 60, 62, 63, 70, 79, 93, 102, 139, 220, 232, 260, 295, 388, 395, 434, 522, 523, 524, 525, 526, 628, 644, 646, 647, 649, 658, 756, 757, 758, 759, 761, 819, 824, 825, 829, 831, 836, 838, 839, 842, 845, 846, 847, 852, 853, 860, 862, 863, 869, 870, 872, 878, 882, 883], "superior": [8, 9], "eager": [8, 9, 23, 31, 32, 35, 38, 40, 47, 50, 51, 62, 829, 846, 870, 882], "mode": [8, 9, 10, 11, 12, 13, 50, 62, 70, 75, 87, 93, 98, 109, 110, 111, 112, 113, 114, 223, 226, 231, 236, 253, 286, 340, 378, 379, 382, 387, 388, 389, 391, 419, 424, 432, 433, 445, 447, 455, 457, 458, 464, 480, 490, 495, 497, 499, 501, 503, 506, 507, 511, 592, 593, 594, 598, 599, 601, 602, 616, 617, 621, 622, 624, 625, 646, 647, 649, 651, 652, 676, 699, 802, 810, 811, 812, 828, 829, 838, 839, 841, 846, 849, 850, 853, 866, 870, 882], "made": [8, 9, 19, 20, 24, 25, 44, 70, 77, 93, 389, 391, 449, 475, 476, 477, 728, 837, 839, 840, 842, 843, 846, 847, 852, 854, 856, 858, 859, 860, 864, 866, 868, 882], "favorit": [8, 9, 874], "increasingli": [8, 9, 850, 878], "span": [8, 9, 839], "industri": [8, 9, 874, 882], "still": [8, 9, 23, 26, 36, 38, 39, 44, 45, 47, 48, 51, 75, 87, 98, 652, 702, 794, 837, 838, 839, 843, 844, 848, 851, 852, 854, 856, 859, 860, 863, 866, 870, 877, 878, 882], "practition": [8, 9, 10, 11, 23, 882], "larg": [8, 9, 23, 59, 69, 70, 92, 93, 236, 253, 260, 286, 287, 391, 400, 506, 536, 647, 652, 700, 833, 838, 839, 845, 847, 853, 874, 878, 882], "unabl": [8, 9, 14, 23, 24, 25, 839, 866], "rich": [8, 9, 23, 875], "ecosystem": [8, 9, 23, 874, 882], "state": [8, 9, 23, 30, 41, 42, 58, 74, 93, 97, 113, 200, 201, 202, 203, 204, 286, 388, 434, 616, 618, 621, 623, 624, 645, 647, 649, 651, 676, 677, 792, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 835, 838, 845, 848, 849, 851, 852, 853, 854, 855, 860, 863, 868, 875, 877], "art": [8, 9, 23, 42, 875], "sota": [8, 9, 10, 11, 23], "inaccur": [8, 9, 23], "dynam": [8, 9, 15, 16, 23, 51, 654, 724, 812, 819, 841, 847, 848, 849, 859, 860, 865, 869, 874, 878, 882], "connect": [8, 9, 21, 22, 23, 58, 810, 833, 838, 845, 862], "layer": [8, 9, 10, 11, 15, 16, 17, 23, 27, 29, 33, 39, 40, 44, 45, 56, 61, 70, 78, 93, 101, 657, 676, 677, 678, 755, 807, 809, 811, 812, 813, 814, 815, 831, 851, 860, 864, 866, 868, 877, 882], "togeth": [8, 9, 23, 70, 87, 93, 347, 364, 385, 389, 443, 815, 840, 843, 846, 848, 859, 860, 863, 864, 866, 868, 870, 882, 883], "For": [8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 35, 44, 45, 47, 50, 52, 66, 70, 75, 81, 93, 98, 139, 152, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 267, 268, 269, 274, 275, 276, 277, 278, 281, 286, 288, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 306, 343, 344, 345, 348, 349, 351, 372, 382, 385, 389, 391, 455, 457, 477, 497, 501, 644, 647, 652, 654, 660, 662, 700, 702, 706, 717, 728, 767, 768, 769, 770, 778, 780, 781, 783, 795, 807, 837, 838, 839, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 875, 878, 883], "seamless": [8, 9, 23, 869, 875, 884], "wai": [8, 9, 23, 26, 31, 32, 33, 36, 38, 44, 48, 50, 56, 110, 113, 831, 833, 836, 837, 838, 842, 843, 844, 845, 847, 848, 849, 859, 860, 861, 863, 866, 870, 871, 880], "introduc": [8, 9, 23, 44, 45, 260, 647, 654, 660, 725, 767, 837, 846, 847, 848, 857, 861, 863, 866], "pipelin": [8, 9, 10, 11, 23, 831, 833, 841, 842, 843, 861, 864, 872, 877, 882, 883], "blog": [8, 9, 10, 11, 23, 839], "through": [8, 9, 10, 11, 23, 42, 43, 45, 50, 58, 70, 93, 113, 241, 400, 542, 543, 647, 656, 739, 745, 812, 824, 832, 835, 836, 837, 839, 840, 841, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 857, 859, 860, 861, 863, 865, 866, 868, 878, 882, 883], "train": [8, 9, 10, 11, 27, 29, 40, 44, 45, 61, 70, 72, 74, 93, 95, 97, 113, 388, 389, 394, 412, 413, 414, 461, 515, 517, 629, 630, 635, 650, 651, 674, 676, 678, 681, 809, 810, 811, 812, 813, 831, 846, 849, 856, 870, 877, 884], "illustr": [8, 9, 23, 35, 47, 844, 868], "workflow": [8, 9, 23, 36, 48, 59, 837, 839, 840, 844, 848, 858, 860, 872, 884], "pre": [8, 9, 44, 45, 835, 837, 862, 863, 868, 870, 871, 882], "convnext": [8, 9, 19, 20, 23], "belong": [8, 9, 87, 837, 842], "convolut": [8, 9, 23, 40, 70, 74, 93, 97, 388, 409, 427, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 796, 810, 829, 877, 882], "neural": [8, 9, 651, 806, 810, 831, 877, 882, 884], "network": [8, 9, 33, 40, 44, 45, 56, 58, 63, 651, 675, 806, 809, 810, 831, 846, 856, 869, 877, 882, 884], "cnn": [8, 9, 44, 45, 882], "architectur": [8, 9, 23, 61, 831, 838, 870, 882, 884], "inspir": [8, 9, 843], "vision": [8, 9, 10, 11, 42, 44, 45, 63], "perform": [8, 9, 12, 13, 14, 17, 26, 35, 37, 39, 40, 44, 45, 47, 49, 56, 58, 66, 70, 74, 75, 83, 84, 89, 93, 94, 97, 98, 106, 107, 126, 130, 150, 151, 223, 231, 253, 286, 307, 354, 376, 385, 386, 388, 389, 391, 398, 400, 411, 412, 413, 414, 416, 417, 421, 422, 430, 432, 458, 474, 529, 537, 538, 559, 560, 561, 574, 575, 576, 592, 602, 641, 644, 646, 647, 649, 651, 652, 655, 656, 662, 663, 674, 677, 693, 702, 704, 709, 733, 734, 735, 743, 744, 775, 776, 779, 785, 786, 789, 806, 810, 825, 829, 842, 843, 844, 846, 848, 849, 850, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 870, 874, 875, 877, 878, 879, 882, 883], "strength": [8, 9, 874, 875], "wise": [8, 9, 44, 64, 69, 70, 75, 86, 92, 93, 98, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 291, 292, 294, 295, 302, 307, 308, 309, 310, 311, 312, 314, 316, 318, 319, 320, 322, 323, 324, 347, 350, 355, 358, 359, 360, 363, 364, 365, 366, 370, 371, 374, 375, 380, 385, 388, 389, 391, 412, 413, 414, 441, 448, 484, 491, 493, 494, 514, 641, 647, 654, 683, 717, 814, 866], "supervis": [8, 9, 10, 11, 70, 390, 465], "convent": [8, 9, 300, 647, 652, 662, 692, 777, 839, 844, 855, 864], "demonstr": [8, 9, 10, 11, 23, 26, 39, 44, 45, 59, 840, 848, 850, 852], "improv": [8, 9, 19, 20, 24, 25, 26, 44, 47, 834, 839, 848, 855, 856, 866, 868, 872, 878, 882], "scalabl": [8, 9, 868], "sometim": [8, 9, 837, 838, 839, 842, 848, 856, 860, 863, 866], "rival": [8, 9], "even": [8, 9, 19, 20, 23, 39, 44, 45, 70, 93, 110, 253, 286, 291, 296, 391, 400, 497, 536, 647, 831, 838, 839, 840, 842, 844, 847, 848, 849, 851, 855, 856, 859, 860, 861, 866, 870], "downsampl": [8, 9, 21, 22, 23, 70, 93, 424], "detial": [8, 9], "outsid": [8, 9, 23, 654, 717, 728, 848, 849, 856], "scope": [8, 9, 23, 844, 883], "demo": [8, 9, 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 45, 52, 56, 60, 831], "interest": [8, 9, 10, 11, 23, 40, 44, 56, 253, 286, 647, 837, 839], "reader": [8, 9, 10, 11, 23], "paper": [8, 9, 23, 651, 678, 831], "mostli": [8, 9, 23, 849, 859, 863], "kera": [8, 9, 15, 16, 17, 23, 27, 29, 40, 44, 45, 61, 62, 807, 831, 877], "wrapper": [8, 9, 35, 70, 93, 311, 802, 843, 845, 846, 848, 852, 856, 859, 860, 863, 872, 882], "prepar": [8, 9, 23, 45, 58, 60, 63, 847], "data": [8, 9, 10, 11, 29, 37, 39, 40, 45, 50, 58, 60, 63, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 92, 93, 94, 97, 98, 100, 102, 103, 104, 105, 106, 107, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 170, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 199, 205, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 313, 314, 315, 316, 325, 326, 327, 328, 329, 330, 331, 342, 343, 344, 345, 346, 348, 349, 350, 367, 372, 380, 382, 385, 388, 389, 391, 395, 399, 400, 403, 412, 413, 414, 430, 432, 434, 440, 442, 462, 480, 503, 506, 507, 509, 510, 522, 523, 524, 525, 526, 532, 536, 537, 538, 542, 545, 546, 563, 576, 578, 579, 582, 609, 641, 644, 646, 647, 649, 651, 652, 654, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 718, 721, 722, 724, 725, 727, 728, 732, 740, 757, 758, 759, 761, 762, 763, 765, 766, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 792, 794, 795, 796, 797, 802, 806, 809, 810, 811, 812, 816, 825, 829, 838, 841, 842, 843, 844, 845, 846, 849, 851, 855, 856, 857, 859, 861, 864, 866, 868, 872, 882, 883], "experiment": [8, 17, 23, 829, 835, 839, 848, 860, 864, 868, 882], "set_memory_growth": [8, 23], "list_physical_devic": [8, 9, 23], "manual_se": [8, 9, 10, 11, 23, 40], "set_se": [8, 9, 23], "51": [8, 9, 23, 26, 56, 60, 69, 70, 92, 93, 94, 102, 248, 286, 299, 389, 410, 464, 647, 759, 794], "38": [8, 9, 24, 25, 26, 56, 58, 60, 63, 67, 70, 92, 93, 102, 178, 303, 370, 385, 388, 400, 408, 427, 430, 431, 537, 645, 647, 652, 694, 794, 850], "926817": [8, 9], "e": [8, 9, 24, 25, 44, 61, 62, 66, 70, 75, 79, 81, 82, 83, 85, 92, 93, 98, 102, 105, 106, 108, 110, 111, 115, 142, 151, 152, 155, 156, 160, 164, 193, 206, 233, 234, 235, 239, 241, 242, 245, 247, 249, 253, 254, 256, 259, 260, 266, 267, 274, 275, 276, 277, 284, 285, 286, 287, 289, 293, 295, 296, 299, 300, 304, 314, 341, 348, 349, 382, 385, 388, 389, 390, 391, 395, 400, 401, 407, 408, 411, 425, 426, 427, 428, 432, 445, 448, 456, 470, 506, 510, 522, 523, 524, 525, 526, 537, 538, 547, 642, 644, 645, 646, 647, 651, 652, 654, 656, 658, 660, 661, 662, 678, 683, 688, 689, 692, 693, 695, 698, 701, 702, 703, 706, 709, 720, 728, 739, 743, 744, 745, 748, 753, 754, 757, 758, 759, 767, 768, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 810, 824, 825, 829, 831, 832, 835, 837, 838, 839, 841, 842, 844, 846, 848, 852, 853, 858, 860, 863, 868, 870, 871, 872, 878], "extern": [8, 9, 846, 855, 860, 863, 864], "local_xla": [8, 9], "xla": [8, 9, 24, 25, 860, 870, 872, 882], "stream_executor": [8, 9, 24, 25], "cuda_dnn": [8, 9, 24, 25], "cc": [8, 9, 24, 25, 37, 40, 59, 853], "9261": [8, 9], "regist": [8, 9, 24, 25, 812, 839, 878], "cudnn": [8, 9, 23, 24, 25], "factori": [8, 9, 24, 25, 70, 390, 469, 470, 825], "plugin": [8, 9, 24, 25, 838], "926873": [8, 9], "cuda_fft": [8, 9, 24, 25], "607": [8, 9], "cufft": [8, 9, 23, 24, 25], "928224": [8, 9], "cuda_bla": [8, 9, 24, 25], "1515": [8, 9], "cubla": [8, 9, 23, 24, 25], "936743": [8, 9], "cpu_feature_guard": [8, 9, 37, 40], "182": [8, 9, 37, 40, 93], "instruct": [8, 9, 37, 40, 87, 116, 831, 837, 838, 842, 852, 854, 861, 863, 871, 883], "avx2": [8, 9, 37, 40], "fma": [8, 9, 37, 40], "rebuild": [8, 9, 37, 40, 87, 116], "flag": [8, 9, 23, 37, 40, 87, 209, 390, 400, 467, 536, 646, 651, 678, 791, 802, 813, 839, 848, 849, 859, 860, 861, 863, 877, 878], "40": [8, 9, 14, 15, 16, 23, 26, 56, 58, 60, 70, 71, 92, 93, 94, 102, 106, 116, 247, 251, 271, 300, 362, 385, 388, 391, 408, 410, 420, 426, 503, 559, 561, 566, 567, 591, 606, 628, 631, 647, 649, 650, 652, 656, 662, 691, 697, 745, 758, 777, 781, 847], "071672": [8, 9], "w": [8, 9, 12, 13, 24, 25, 59, 60, 70, 71, 72, 74, 87, 92, 93, 94, 95, 97, 110, 280, 362, 377, 385, 387, 388, 389, 394, 407, 408, 409, 411, 425, 426, 427, 428, 444, 464, 520, 535, 559, 561, 606, 629, 630, 631, 633, 635, 636, 637, 649, 650, 651, 656, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 742, 841, 858, 869, 877], "tf2tensorrt": [8, 9, 24, 25], "py_util": [8, 9, 24, 25], "trt": [8, 9, 24, 25], "find": [8, 9, 14, 24, 25, 31, 36, 42, 43, 59, 60, 63, 75, 81, 87, 98, 652, 656, 660, 695, 738, 767, 768, 769, 770, 824, 825, 831, 832, 833, 834, 836, 837, 838, 839, 842, 845, 847, 853, 858, 863, 866, 868, 871, 872, 878], "tensorrt": [8, 9, 24, 25], "map": [8, 9, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 181, 185, 186, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 385, 388, 412, 413, 414, 432, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 504, 506, 507, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 628, 633, 639, 649, 656, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 743, 744, 748, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 825, 843, 846, 848, 855, 856, 860, 863, 864, 870, 872, 877, 883], "dataset": [8, 9, 10, 11, 23, 26, 44, 87, 877, 878], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 58, 60, 70, 77, 87, 89, 93, 100, 147, 391, 487, 644, 654, 724, 837, 838, 845, 847, 853, 863, 865, 866, 882], "185": [8, 9, 21, 22, 58, 86], "199": [8, 9, 21, 22, 58, 239, 647], "108": [8, 9, 21, 22, 26, 37, 39, 40, 58, 651, 662, 675, 777], "109": [8, 9, 21, 22, 58, 75, 652, 690], "111": [8, 9, 21, 22, 58, 656, 754], "443": [8, 9, 21, 22, 58, 298, 647], "sent": [8, 9, 21, 22, 58], "await": [8, 9, 21, 22, 58], "respons": [8, 9, 21, 22, 23, 58, 394, 520, 839, 847, 848], "200": [8, 9, 21, 22, 23, 26, 58, 94, 97, 247, 388, 412, 413, 567, 591, 647, 649, 824], "ok": [8, 9, 21, 22, 58, 838], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 21, 22, 58], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 23, 26], "url": [8, 9, 10, 11, 19, 20, 23, 24, 25, 39, 44, 45, 58, 61, 831, 877], "cocodataset": [8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 45, 61, 831, 877], "org": [8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 60, 61, 63, 69, 70, 92, 93, 95, 160, 168, 256, 266, 267, 282, 341, 348, 349, 382, 385, 388, 391, 400, 432, 506, 536, 629, 630, 644, 645, 647, 650, 652, 654, 662, 700, 701, 732, 782, 831, 851, 877], "val2017": [8, 9, 10, 11, 19, 20, 24, 25, 44, 61], "000000039769": [8, 9, 10, 11, 19, 20, 24, 25, 44, 61], "stream": [8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 45, 58, 61, 68, 91, 227, 646, 831, 877], "initialis": [8, 9, 23, 842, 860, 863], "api": [8, 9, 10, 11, 14, 23, 30, 35, 40, 41, 47, 60, 62, 69, 70, 75, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 168, 178, 181, 191, 193, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 348, 349, 351, 385, 388, 391, 400, 432, 506, 510, 536, 644, 645, 647, 652, 654, 659, 660, 661, 662, 663, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 718, 720, 721, 722, 724, 725, 727, 728, 732, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 831, 835, 838, 839, 841, 843, 845, 848, 849, 850, 851, 852, 853, 855, 857, 859, 860, 861, 863, 866, 869, 870, 872, 874, 882], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 23, 35, 47, 66, 67, 70, 87, 90, 93, 152, 166, 193, 335, 390, 467, 475, 476, 477, 631, 644, 645, 650, 855, 856, 858, 859, 860, 863, 870, 878, 880, 883], "regardless": [8, 9, 23, 44, 45, 56, 87, 832, 848, 852], "host": [8, 9, 23, 829, 833, 847, 870], "convnext_xlarg": [8, 9], "include_top": [8, 9, 29, 831], "include_preprocess": [8, 9], "input_tensor": [8, 9, 70, 93, 389, 390, 461, 465, 470, 860], "input_shap": [8, 9, 19, 20, 29, 40, 44, 45, 831], "pool": [8, 9, 70, 93, 97, 388, 402, 403, 404, 405, 407, 408, 409, 425, 426, 427, 428, 431, 810, 838], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 59], "gpu_devic": [8, 9], "1929": [8, 9], "job": [8, 9, 44, 45, 831, 845, 847], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 19, 20], "pcie": [8, 9], "16gb": [8, 9], "pci": [8, 9], "bu": [8, 9, 98], "id": [8, 9, 26, 59, 70, 93, 209, 343, 344, 345, 382, 571, 646, 649, 831, 836, 838, 843, 845, 846, 854, 858, 863, 871], "0001": [8, 9, 69, 70, 93, 296, 297, 389, 458, 464, 794, 797, 814], "over": [8, 9, 10, 11, 15, 16, 23, 33, 40, 45, 47, 58, 70, 75, 83, 84, 85, 90, 93, 97, 98, 106, 107, 108, 110, 135, 333, 334, 348, 349, 362, 369, 382, 385, 388, 389, 390, 391, 398, 400, 402, 403, 404, 405, 408, 417, 422, 426, 430, 431, 432, 433, 434, 435, 457, 465, 474, 487, 503, 506, 507, 510, 529, 539, 545, 594, 628, 643, 649, 652, 657, 658, 662, 663, 683, 693, 704, 706, 708, 709, 755, 759, 778, 779, 780, 781, 782, 783, 784, 785, 786, 810, 813, 819, 824, 831, 838, 839, 844, 850, 851, 858, 859, 861, 864, 868, 870, 874, 882], "wonder": [8, 9], "why": [8, 9, 33, 831, 839, 859, 873], "One": [8, 9, 10, 11, 23, 60, 70, 71, 77, 79, 93, 94, 100, 102, 113, 391, 475, 476, 477, 480, 497, 507, 510, 560, 649, 654, 658, 724, 757, 843, 846, 848, 850, 856, 861, 863], "reason": [8, 9, 23, 295, 304, 647, 837, 839, 842, 843, 846, 847, 848, 850, 856, 859, 860, 863, 864, 866], "highlight": [8, 9, 839, 847, 850, 860, 862], "directli": [8, 9, 27, 29, 33, 36, 40, 44, 45, 48, 388, 389, 424, 448, 656, 748, 831, 837, 838, 839, 840, 842, 843, 846, 847, 848, 849, 851, 854, 856, 857, 859, 860, 861, 864, 865, 868, 869, 870, 877, 878, 880], "much": [8, 9, 19, 20, 24, 25, 26, 33, 34, 40, 44, 45, 46, 47, 58, 113, 347, 364, 385, 809, 837, 838, 839, 843, 846, 848, 856, 859, 860, 861, 864, 865, 866, 868, 882], "There": [8, 9, 23, 33, 40, 45, 50, 110, 381, 383, 384, 392, 393, 397, 796, 837, 838, 839, 842, 843, 845, 846, 848, 849, 850, 852, 854, 856, 858, 860, 861, 865, 868, 870, 871, 878, 883], "deeper": [8, 9, 33, 45, 65, 656, 747, 748, 831, 839, 841, 863, 867], "offer": [8, 9, 860, 875, 882, 884], "limit": [8, 9, 87, 116, 178, 181, 554, 555, 571, 645, 649, 654, 717, 794, 796, 797, 809, 816, 825, 838, 839, 845, 847, 850, 852, 860, 863, 866, 870, 882, 883, 884], "soon": [8, 9, 837, 839, 847, 848, 870, 878], "comparison": [8, 9, 17, 21, 22, 70, 93, 254, 289, 350, 385, 390, 469, 470, 647, 652, 703, 789, 852], "separ": [8, 9, 59, 70, 71, 93, 394, 516, 563, 649, 651, 678, 791, 802, 838, 839, 843, 846, 847, 850, 861, 862, 863, 868, 883], "stai": [8, 9, 847], "origin": [8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 40, 42, 44, 45, 46, 47, 48, 50, 57, 58, 59, 63, 70, 75, 77, 83, 87, 93, 98, 100, 106, 110, 113, 115, 116, 241, 266, 293, 332, 382, 388, 389, 391, 400, 432, 458, 490, 496, 499, 502, 537, 538, 542, 543, 544, 545, 546, 647, 652, 654, 662, 693, 724, 725, 776, 791, 796, 819, 820, 831, 833, 837, 838, 839, 844, 845, 847, 848, 853, 857, 859, 860, 861, 868, 869, 877, 878, 882, 883, 884], "convert_to_tensor": [8, 9, 14, 23, 42, 831, 869], "tmp": [8, 9, 58, 60, 603, 626, 649], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 27, 33, 56, 806, 819, 829, 864, 868, 869, 870], "deprec": [8, 9, 63], "futur": [8, 9, 15, 16, 33, 38, 40, 44, 58, 652, 688, 689, 838, 839, 840, 847, 848, 863, 864, 866, 870], "instead": [8, 9, 23, 24, 25, 27, 29, 33, 37, 39, 40, 44, 51, 58, 63, 69, 70, 75, 92, 93, 98, 111, 207, 295, 329, 382, 388, 400, 425, 426, 427, 536, 539, 646, 647, 652, 695, 794, 837, 838, 839, 842, 845, 847, 848, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 866, 868, 870, 877, 878, 880, 882], "logits_np": [8, 9, 10, 11, 23], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 58, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 119, 126, 130, 131, 140, 141, 145, 147, 148, 149, 150, 151, 154, 158, 159, 160, 167, 174, 177, 178, 181, 188, 203, 217, 218, 219, 226, 227, 236, 243, 244, 245, 246, 247, 248, 260, 263, 287, 291, 296, 302, 305, 313, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 353, 354, 358, 362, 369, 371, 373, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 439, 443, 445, 446, 447, 448, 450, 455, 457, 458, 461, 462, 464, 469, 473, 474, 478, 482, 483, 486, 487, 490, 492, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 511, 512, 513, 516, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 549, 559, 560, 561, 563, 566, 567, 570, 571, 585, 588, 590, 605, 606, 607, 608, 612, 628, 629, 630, 631, 632, 635, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 683, 685, 686, 693, 694, 699, 704, 706, 707, 708, 709, 711, 712, 713, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 742, 743, 745, 747, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 767, 769, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 795, 796, 797, 806, 809, 810, 824, 825, 829, 846, 848, 849, 850, 852, 855, 856, 859, 861, 863, 864, 866, 868, 878], "argmax": [8, 9, 10, 11, 12, 13, 23, 59, 60, 61, 80, 103, 391, 503, 659, 860, 878], "57": [8, 9, 21, 22, 26, 56, 58, 69, 70, 92, 93, 211, 234, 235, 238, 239, 241, 251, 252, 292, 308, 309, 380, 646, 647], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 15, 16, 58, 59, 60, 63, 70, 303, 475, 476, 477, 647, 839, 842, 844, 848, 860, 869], "spawn": [8, 9, 587, 649], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 17, 18, 56, 277, 554, 647, 649], "578886": [8, 9], "servic": [8, 9], "168": [8, 9, 60, 554, 649, 656, 736], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 660, 767, 769, 829, 843, 848, 859, 870], "578915": [8, 9], "176": [8, 9, 554, 649], "streamexecutor": [8, 9], "messag": [8, 9, 23, 816, 826, 830, 838, 839, 847, 850, 852, 854, 860, 869], "absl": [8, 9, 58], "initializelog": [8, 9], "stderr": [8, 9], "i0000": [8, 9], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 70, 71, 74, 93, 94, 97, 388, 394, 408, 409, 426, 427, 520, 559, 561, 649, 651, 656, 664, 667, 668, 669, 670, 671, 672, 673, 739, 743, 745, 748, 753, 832, 841, 845, 846, 847, 877], "186": [8, 9], "cluster": [8, 9, 70, 93, 389, 443, 870, 882], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 23, 37, 38, 44, 45, 49, 50, 51, 58, 877, 878, 880], "explain": [8, 9, 10, 11, 23, 50, 70, 93, 388, 422, 433, 831, 837, 838, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 863, 864, 866, 868, 869, 881], "doc": [8, 9, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 59, 60, 93, 160, 341, 348, 349, 382, 385, 538, 644, 831, 832, 836, 837, 841, 850, 851, 854, 855, 863, 868, 878, 880], "involv": [8, 9, 23, 27, 30, 40, 67, 90, 193, 236, 253, 260, 286, 291, 645, 647, 825, 832, 840, 841, 847, 848, 850, 861, 866, 882], "dummi": [8, 9, 23, 37, 49, 50, 51, 57, 839], "transpiled_model": [8, 9, 10, 11, 23], "backend_compil": [8, 9, 44, 45], "root": [8, 9, 10, 11, 15, 16, 21, 22, 23, 24, 25, 37, 39, 40, 58, 59, 60, 63, 69, 92, 300, 647, 833, 837, 838, 839, 845, 853, 860], "placement": [8, 9, 23, 24, 25, 837], "case": [8, 9, 23, 27, 29, 35, 37, 44, 45, 47, 48, 49, 50, 58, 65, 66, 70, 71, 77, 83, 87, 89, 93, 94, 100, 110, 111, 116, 141, 152, 179, 180, 207, 212, 213, 220, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 261, 267, 268, 269, 274, 275, 276, 277, 278, 281, 286, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 306, 348, 349, 360, 362, 372, 385, 388, 390, 391, 394, 395, 401, 412, 413, 414, 434, 465, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 503, 504, 510, 513, 515, 517, 524, 547, 564, 565, 569, 576, 590, 591, 592, 644, 645, 646, 647, 649, 652, 654, 656, 662, 700, 706, 720, 721, 722, 724, 726, 727, 729, 731, 739, 745, 778, 779, 780, 781, 782, 783, 784, 794, 795, 814, 825, 831, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 870, 877, 878, 880], "ad": [8, 9, 21, 22, 23, 24, 25, 26, 37, 39, 40, 70, 77, 93, 100, 108, 253, 286, 347, 364, 385, 394, 515, 516, 517, 606, 607, 647, 649, 651, 652, 654, 678, 688, 689, 720, 810, 815, 831, 835, 836, 837, 838, 839, 842, 843, 845, 846, 847, 848, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 864, 866, 870, 878, 882, 884], "logits_transpil": [8, 9, 23], "logits_transpiled_np": [8, 9, 23], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 44, 45, 796, 846, 847, 851, 854, 857, 866, 868], "produc": [8, 9, 10, 11, 15, 16, 23, 57, 70, 71, 74, 93, 97, 315, 325, 328, 380, 382, 388, 436, 651, 681, 794, 825, 837, 848, 853, 854, 859, 861, 863, 864, 878, 883], "granular": [8, 9, 10, 11, 23], "level": [8, 9, 10, 11, 23, 33, 44, 45, 47, 70, 93, 94, 389, 461, 551, 825, 829, 831, 832, 837, 838, 839, 840, 846, 848, 852, 856, 858, 859, 860, 862, 865, 866, 868, 869, 870, 872, 882, 883], "close": [8, 9, 10, 11, 23, 60, 75, 258, 276, 296, 325, 382, 647, 652, 654, 702, 720, 834, 835, 837, 838, 839, 840, 848, 851, 853, 860, 866, 882], "inde": [8, 9, 10, 11, 23, 855, 866, 870], "benefit": [8, 9, 10, 11, 23, 45, 838, 843, 846, 859, 866, 870, 875], "trainabl": [8, 9, 10, 11, 23, 27, 29, 33, 39, 40, 44, 45, 62, 807, 811, 812, 815, 831, 851, 877, 880], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 23], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 23, 58, 60, 63, 70, 74, 79, 93, 97, 102, 388, 390, 391, 407, 408, 409, 425, 426, 427, 428, 472, 498, 651, 653, 658, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 678, 714, 756], "shuffl": [8, 9, 10, 11, 23, 60, 70, 79, 87, 93, 102, 524, 658], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 23], "sgd": [8, 9, 10, 11, 23, 58, 814, 882], "lr": [8, 9, 58, 72, 95, 550, 630, 633, 635, 636, 637, 649, 650, 814], "1e": [8, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 42, 44, 56, 60, 67, 70, 72, 75, 76, 78, 90, 93, 95, 98, 99, 101, 114, 178, 347, 364, 385, 390, 394, 470, 515, 516, 517, 596, 597, 606, 619, 620, 629, 630, 635, 637, 645, 649, 650, 652, 653, 657, 702, 711, 712, 713, 755, 789, 791, 811, 813, 814, 835, 846, 853, 856, 859, 861], "loss_fn": [8, 9, 23, 44, 45, 56, 58, 60], "crossentropyloss": [8, 9, 58, 811], "epoch": [8, 9, 10, 11, 23, 44, 45, 58, 60], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 21, 22, 58, 77, 100, 115, 398, 528, 654, 722, 729, 877], "loss": [8, 9, 10, 11, 23, 44, 45, 58, 60, 70, 93, 110, 465, 466, 467, 468, 469, 470, 471, 472, 599, 622, 649, 711, 712, 713, 714, 715, 716, 831, 847, 848, 856, 860, 864, 865, 882], "backward": [8, 9, 10, 11, 58, 70, 84, 93, 107, 295, 388, 411, 416, 417, 421, 422, 432, 433, 647, 652, 663, 683, 708, 785, 786, 810, 829, 864, 870], "append": [8, 9, 10, 11, 26, 59, 60, 70, 75, 87, 93, 245, 354, 385, 647, 652, 654, 686, 692, 720, 825, 847, 863, 868], "avg_loss": [8, 9, 10, 11, 58], "02": [8, 9, 21, 22, 24, 25, 58, 66, 71, 72, 78, 79, 92, 95, 102, 151, 238, 239, 278, 388, 410, 420, 421, 606, 607, 629, 630, 635, 644, 647, 649, 650, 657, 658, 755, 758, 759, 861], "94": [8, 9, 23, 26, 56, 69, 70, 72, 79, 92, 93, 95, 102, 220, 296, 297, 373, 385, 420, 633, 646, 650, 759], "ve": [8, 9, 10, 11, 12, 13, 15, 16, 23, 26, 31, 40, 44, 79, 102, 658, 756, 837, 838, 839, 840, 853, 863, 866, 872], "And": [8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 34, 37, 44, 45, 46, 59, 90, 378, 379, 387, 842, 845, 854, 856, 863, 874, 878], "plug": [8, 9, 23], "seen": [8, 9, 23, 27, 29, 34, 40, 44, 389, 395, 448, 524, 571, 649, 819, 847, 848, 850, 852, 860, 863, 868], "d": [8, 9, 10, 11, 23, 59, 70, 71, 74, 75, 77, 89, 93, 94, 97, 98, 100, 113, 129, 151, 160, 193, 236, 253, 254, 286, 289, 341, 382, 388, 389, 391, 394, 395, 398, 407, 408, 409, 416, 421, 425, 426, 427, 428, 430, 434, 440, 456, 477, 483, 485, 488, 492, 507, 509, 513, 520, 522, 528, 551, 562, 641, 644, 645, 647, 651, 652, 654, 656, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 685, 686, 690, 693, 697, 706, 707, 726, 739, 743, 744, 745, 748, 753, 754, 795, 825, 831, 832, 838, 841, 844, 845, 846, 853, 858, 863, 866], "sign": [8, 9, 10, 11, 23, 69, 70, 75, 81, 83, 92, 93, 98, 110, 139, 233, 234, 235, 236, 239, 241, 242, 247, 251, 253, 256, 258, 260, 286, 288, 295, 299, 300, 304, 352, 385, 389, 391, 400, 460, 505, 506, 537, 538, 644, 647, 652, 660, 662, 700, 767, 768, 769, 770, 775, 776, 781, 783, 838, 840, 848, 868, 869], "ask": [8, 9, 10, 11, 23, 831, 837, 838, 850, 870], "server": [8, 9, 10, 11, 23, 58, 831, 838, 839, 845, 853, 871, 882], "forward": [8, 9, 10, 11, 12, 13, 21, 22, 23, 29, 43, 44, 45, 58, 60, 70, 93, 378, 387, 388, 411, 416, 417, 421, 422, 432, 433, 807, 809, 810, 812, 814, 829, 831, 838, 844, 851, 858, 863, 864, 866, 869, 870, 878, 882, 883], "come": [10, 11, 33, 58, 834, 837, 838, 839, 843, 847, 860, 865, 866, 872, 882], "onto": [10, 11, 656, 742, 748, 873, 874, 882], "scene": [10, 11, 841, 867, 873, 874, 882], "almost": [10, 11, 58, 836, 846, 861], "alwai": [10, 11, 66, 67, 70, 71, 77, 89, 90, 93, 100, 123, 141, 165, 236, 286, 359, 385, 389, 391, 460, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 513, 569, 576, 641, 645, 647, 649, 654, 720, 721, 722, 724, 726, 727, 729, 731, 796, 837, 838, 839, 843, 844, 846, 848, 851, 854, 855, 856, 859, 860, 861, 862, 863, 864, 866, 869, 870, 878], "huggingfac": [10, 11, 58, 877, 878], "implement": [10, 11, 26, 33, 34, 44, 46, 50, 58, 61, 67, 68, 70, 81, 82, 90, 91, 93, 98, 105, 110, 165, 179, 180, 193, 212, 213, 227, 233, 234, 235, 238, 239, 240, 241, 250, 251, 253, 256, 258, 260, 274, 275, 276, 277, 286, 288, 291, 295, 298, 299, 303, 304, 348, 349, 372, 385, 389, 400, 441, 442, 542, 543, 564, 565, 645, 646, 647, 649, 651, 652, 660, 661, 662, 678, 687, 688, 689, 697, 706, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 795, 797, 819, 831, 835, 837, 841, 842, 843, 844, 846, 848, 849, 851, 852, 853, 855, 856, 857, 859, 861, 863, 864, 866, 868, 870, 872, 882, 884], "conveni": [10, 11, 36, 48, 837, 848, 849, 855, 861, 872], "who": [10, 11, 834, 840, 841, 852, 867, 870, 882], "must": [10, 11, 50, 58, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 226, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 338, 339, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 356, 357, 359, 361, 363, 365, 366, 367, 368, 372, 375, 380, 382, 385, 388, 389, 390, 391, 394, 395, 398, 400, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 430, 432, 433, 435, 437, 439, 440, 442, 448, 449, 454, 455, 456, 457, 462, 466, 467, 468, 469, 471, 472, 475, 476, 477, 482, 483, 485, 487, 488, 489, 490, 492, 496, 499, 500, 501, 502, 504, 506, 507, 508, 510, 511, 513, 518, 519, 521, 522, 523, 525, 526, 529, 536, 537, 538, 539, 546, 554, 555, 559, 560, 561, 566, 567, 569, 576, 590, 591, 628, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 809, 810, 814, 816, 836, 837, 838, 839, 842, 843, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 863, 864, 865, 866, 868, 877, 880, 883], "reimplement": [10, 11], "choic": [10, 11, 23, 26, 45, 62, 70, 83, 93, 106, 389, 391, 460, 480, 662, 782, 784, 831, 838, 847, 859, 860, 877, 879, 882], "veri": [10, 11, 23, 27, 35, 44, 45, 47, 69, 92, 287, 347, 364, 385, 647, 652, 700, 796, 836, 837, 838, 839, 845, 846, 848, 849, 850, 852, 853, 855, 856, 859, 860, 861, 863, 864, 866, 868, 870, 881, 882, 883], "thousand": [10, 11, 870], "china": [10, 11], "howev": [10, 11, 26, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 75, 98, 260, 303, 304, 391, 394, 506, 515, 517, 594, 647, 649, 652, 700, 702, 819, 837, 838, 842, 843, 844, 846, 848, 849, 850, 851, 852, 854, 855, 856, 859, 860, 861, 863, 866, 868, 869, 870, 874, 878, 882], "suffer": [10, 11], "abov": [10, 11, 33, 38, 44, 45, 50, 51, 66, 69, 70, 75, 79, 86, 92, 93, 98, 102, 111, 131, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 324, 326, 341, 342, 348, 349, 351, 354, 380, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 422, 425, 426, 427, 432, 433, 434, 442, 443, 497, 506, 510, 536, 539, 566, 570, 572, 574, 576, 605, 614, 639, 641, 644, 645, 647, 649, 650, 651, 652, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 757, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 835, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 859, 860, 861, 863, 866, 868, 869, 882], "dinov2": [10, 11], "second": [10, 11, 15, 16, 69, 70, 72, 75, 77, 81, 92, 93, 94, 95, 98, 100, 104, 111, 115, 116, 136, 160, 191, 199, 236, 241, 243, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 282, 283, 286, 289, 291, 302, 332, 341, 347, 360, 362, 363, 364, 370, 374, 375, 382, 385, 389, 390, 391, 398, 400, 441, 442, 443, 445, 449, 471, 504, 512, 523, 525, 529, 536, 539, 551, 600, 623, 629, 630, 635, 643, 644, 645, 647, 649, 650, 652, 654, 655, 656, 660, 683, 686, 687, 688, 690, 692, 697, 699, 700, 702, 704, 706, 708, 728, 729, 734, 737, 767, 768, 769, 814, 838, 842, 845, 848, 850, 854, 859, 860, 863, 865], "iter": [10, 11, 23, 58, 60, 65, 70, 71, 77, 85, 87, 93, 94, 100, 108, 113, 116, 135, 226, 333, 334, 382, 388, 389, 391, 434, 447, 458, 464, 481, 497, 498, 548, 586, 643, 646, 649, 654, 656, 719, 723, 730, 732, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 751, 752, 754, 824, 825, 829, 842, 844, 846, 868, 878], "dino": [10, 11], "meta": [10, 11, 58, 733, 734, 735, 843, 864, 882], "vit": [10, 11], "purpos": [10, 11, 35, 44, 45, 47, 58, 60, 160, 258, 276, 341, 382, 644, 647, 652, 700, 839, 841, 843, 846, 847, 849, 850, 852, 855, 856, 857, 860, 862, 863, 866, 872, 883, 884], "abund": [10, 11], "literatur": [10, 11], "mainli": [10, 11, 837, 841, 858, 860, 863, 872, 882], "focus": [10, 11, 831, 848, 864, 882, 884], "rather": [10, 11, 42, 50, 71, 87, 94, 139, 226, 578, 579, 582, 644, 646, 649, 651, 676, 835, 839, 842, 846, 848, 851, 853, 860, 861, 863, 864, 870, 882, 884], "65": [10, 11, 23, 26, 56, 58, 60, 63, 92, 95, 102, 247, 286, 574, 629, 647, 649, 650, 652, 662, 697, 758, 759, 777, 847], "749": [10, 11], "env": [10, 11, 14, 37, 39, 40], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 37, 39, 40, 222, 348, 349, 385, 646, 807, 819, 837, 838, 848, 853], "autoimageprocessor": [10, 11, 877, 878], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 34, 37, 60, 61, 70, 74, 79, 81, 87, 93, 97, 102, 336, 337, 338, 339, 340, 382, 389, 395, 447, 458, 464, 522, 523, 524, 525, 526, 651, 658, 660, 674, 756, 757, 758, 759, 761, 767, 802, 807, 809, 825, 857, 861, 863], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11], "facebook": [10, 11, 61], "imagenet1k": [10, 11], "id2label": [10, 11, 61, 878], "predicted_class_idx": [10, 11, 61], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 109, 110, 111, 112, 113, 114], "stop_gradi": [10, 11, 72, 95, 226, 550, 630, 633, 635, 636, 637, 646, 649, 650, 655, 733, 734, 735, 814], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 69, 92, 296, 647, 865], "io": [10, 11, 24, 25, 37, 39, 40, 59, 62, 838, 847], "to_rgb": [10, 11], "cv2": [10, 11, 58, 60, 62], "tar": [10, 11, 58, 59, 60, 63], "gz": [10, 11, 58, 59, 60, 63], "bj": [10, 11, 236, 253, 286, 351, 385, 647], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 60, 76, 99, 653, 713, 846, 856, 859], "33": [10, 11, 26, 56, 58, 59, 69, 79, 83, 92, 93, 94, 95, 97, 239, 240, 247, 296, 388, 389, 391, 400, 408, 430, 431, 461, 480, 537, 555, 606, 633, 647, 649, 650, 651, 652, 656, 662, 674, 675, 697, 754, 757, 777, 784, 794, 797], "bring": [10, 11, 44, 45, 842, 862, 863, 868, 872, 874], "hope": [10, 11, 56, 870], "milesi": [12, 13], "blob": [12, 13, 58, 60, 831], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 19, 20, 58, 70, 74, 78, 93, 95, 97, 101, 125, 224, 225, 317, 318, 321, 332, 362, 380, 382, 385, 388, 389, 394, 406, 412, 413, 414, 422, 424, 429, 433, 449, 515, 516, 517, 636, 641, 646, 650, 651, 657, 674, 678, 681, 755, 794, 796, 797, 809, 810, 814, 825, 874, 875, 882], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 14, 18, 26, 59, 61, 63, 87, 552, 649, 802, 835, 841, 842, 853, 856, 859, 860, 861, 863, 864], "too": [12, 13, 70, 93, 236, 253, 260, 286, 391, 506, 647, 809, 837, 838, 839, 842, 848, 852, 864, 870], "small": [12, 13, 23, 26, 60, 69, 70, 75, 78, 92, 93, 98, 101, 253, 260, 286, 287, 347, 364, 385, 389, 390, 394, 453, 470, 515, 516, 517, 647, 652, 657, 695, 698, 700, 755, 809, 813, 831, 838, 847, 850, 856, 861, 866, 868, 870, 877, 878, 883], "pixel": [12, 13, 58, 70, 93, 388, 424], "resampl": [12, 13], "nearest": [12, 13, 70, 93, 236, 253, 286, 296, 358, 385, 388, 400, 424, 546, 647, 866], "bicub": [12, 13, 70, 93, 388, 424, 866], "zero": [12, 13, 58, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 81, 83, 84, 89, 90, 92, 93, 95, 97, 98, 102, 103, 106, 107, 111, 125, 127, 128, 129, 131, 142, 143, 145, 147, 152, 154, 155, 156, 158, 159, 162, 165, 166, 234, 235, 236, 238, 239, 240, 241, 242, 245, 247, 248, 250, 251, 252, 253, 255, 258, 259, 260, 267, 268, 269, 270, 276, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 303, 304, 306, 307, 309, 311, 312, 316, 318, 324, 326, 335, 342, 348, 349, 352, 353, 354, 358, 366, 369, 371, 372, 373, 374, 380, 382, 385, 388, 389, 391, 398, 400, 410, 411, 412, 413, 414, 416, 417, 420, 421, 422, 431, 432, 433, 434, 435, 436, 441, 443, 451, 456, 459, 481, 491, 496, 497, 509, 510, 528, 537, 538, 555, 559, 566, 586, 591, 629, 630, 635, 636, 637, 639, 641, 644, 645, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 678, 681, 682, 684, 688, 689, 691, 692, 693, 694, 695, 696, 698, 700, 706, 708, 709, 714, 719, 720, 721, 722, 724, 725, 732, 755, 757, 758, 759, 762, 763, 764, 765, 767, 768, 769, 770, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 809, 810, 814, 829, 843, 846, 848, 849, 850, 855, 857, 858, 861, 868, 869], "ndim": [12, 13, 70, 75, 80, 93, 98, 103, 115, 119, 389, 391, 457, 458, 464, 475, 476, 477, 490, 499, 501, 511, 628, 649, 652, 659, 699, 702, 765, 846, 856, 863], "newaxi": [12, 13, 642], "transpos": [12, 13, 23, 39, 44, 45, 62, 70, 74, 75, 87, 93, 97, 98, 115, 389, 437, 455, 457, 459, 535, 651, 652, 664, 666, 668, 670, 671, 672, 676, 692, 696, 698, 704, 796, 810, 822, 831, 853, 859, 868, 877], "255": [12, 13, 39, 44, 45, 58, 59, 60, 62, 74, 93, 97, 247, 647, 673, 831, 877], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 15, 16], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 66, 70, 71, 89, 93, 111, 140, 141, 153, 388, 389, 391, 400, 433, 458, 503, 542, 543, 613, 644, 649, 819, 824, 837, 843, 848, 849, 852, 855, 859, 860, 861, 864, 866, 868, 872], "uint8": [12, 13, 39, 44, 45, 60, 168, 175, 179, 190, 193, 198, 204, 645, 794, 795, 848, 863], "elif": [12, 13, 19, 20, 847, 852, 859, 860, 861], "bool": [12, 13, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 140, 141, 142, 147, 148, 149, 150, 151, 152, 154, 156, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 201, 205, 209, 210, 212, 213, 215, 217, 220, 221, 226, 227, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 336, 337, 338, 339, 340, 342, 347, 348, 349, 350, 351, 353, 355, 363, 364, 369, 370, 372, 374, 375, 376, 382, 385, 386, 388, 389, 390, 391, 394, 400, 407, 408, 409, 411, 412, 413, 414, 424, 425, 426, 427, 430, 432, 434, 436, 443, 447, 450, 451, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 481, 482, 483, 485, 486, 487, 488, 489, 492, 496, 498, 501, 504, 506, 507, 508, 510, 513, 515, 517, 518, 519, 520, 521, 523, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 590, 591, 595, 604, 605, 606, 607, 609, 611, 613, 614, 627, 630, 631, 633, 635, 636, 637, 638, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 675, 676, 677, 678, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 696, 697, 699, 700, 701, 702, 706, 707, 709, 711, 712, 713, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 742, 743, 744, 746, 747, 748, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 792, 794, 795, 796, 806, 810, 813, 814, 824, 825, 829, 848, 850, 852, 859, 860, 863, 864, 866, 868, 877, 878, 879], "fromarrai": [12, 13, 39, 44, 45, 60], "interpol": [12, 13, 58, 70, 93, 366, 385, 388, 400, 546, 651, 678, 866, 882], "bilinear": [12, 13, 70, 93, 388, 424, 866], "torch_mask": [12, 13], "squeez": [12, 13, 58, 77, 100, 654, 882], "torch_result": [12, 13], "to_numpi": [12, 13, 26, 44, 45, 56, 59, 60, 63, 71, 94, 649, 853, 861], "img_tf": [12, 13], "math": [12, 13, 61, 111, 303, 647, 848, 859, 860, 861, 868], "lot": [12, 13, 847, 848, 857, 863, 870], "far": [12, 13, 23, 44, 45, 656, 736, 747, 825, 849, 850], "space": [12, 13, 66, 69, 70, 71, 89, 92, 93, 94, 139, 150, 151, 305, 362, 385, 390, 467, 559, 563, 644, 647, 649, 866], "del": [12, 13, 847], "empty_cach": 12, "permute_dim": [12, 13, 77, 100, 654, 853], "func_wrapp": [12, 13, 64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 304, 308, 313, 314, 316, 380, 641, 647, 806, 849, 860, 865], "242": [12, 13, 93], "mani": [12, 13, 44, 45, 48, 77, 87, 100, 160, 341, 382, 644, 654, 726, 837, 838, 839, 843, 844, 846, 847, 848, 849, 850, 851, 855, 856, 857, 859, 860, 861, 863, 866, 868, 870, 874, 881, 882], "factor": [12, 13, 26, 70, 72, 74, 75, 93, 95, 97, 98, 109, 110, 111, 112, 113, 224, 225, 226, 388, 389, 394, 422, 433, 447, 448, 458, 461, 463, 464, 520, 629, 630, 635, 636, 646, 650, 651, 652, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 682, 794, 796, 797, 809, 810, 814, 852], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 21, 22, 23, 44, 45, 58, 67, 69, 74, 90, 92, 97, 116, 181, 257, 388, 410, 420, 559, 569, 645, 647, 649, 651, 652, 666, 668, 673, 697], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 21, 22, 58, 59, 831], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 33, 44, 45, 63, 67, 69, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 105, 115, 116, 120, 166, 176, 192, 199, 219, 236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 261, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 282, 283, 284, 285, 286, 289, 291, 295, 302, 307, 326, 347, 352, 359, 360, 361, 363, 365, 370, 374, 382, 385, 389, 391, 400, 459, 491, 536, 548, 551, 645, 646, 647, 649, 652, 659, 661, 683, 690, 692, 697, 701, 704, 705, 708, 766, 773, 791, 816, 831, 842, 848, 850, 852, 855, 859, 860, 877, 880], "x2": [12, 13, 33, 44, 45, 67, 69, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 115, 116, 120, 166, 192, 199, 219, 236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 261, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 282, 283, 284, 285, 286, 289, 291, 295, 302, 307, 347, 352, 359, 360, 361, 363, 365, 370, 374, 385, 389, 391, 400, 445, 459, 491, 536, 548, 551, 645, 646, 647, 649, 652, 659, 683, 690, 692, 697, 701, 704, 705, 708, 766, 791, 816, 831, 842, 848, 850, 852, 855, 859, 860], "x3": [12, 13, 67, 71, 166, 548, 645, 649], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13], "out_channel": [12, 13], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 810, 831, 877], "batchnorm2d": [12, 13, 21, 22, 23, 813], "downscal": [12, 13, 71, 94, 554, 555, 576, 649], "maxpool": [12, 13, 21, 22, 23], "doubl": [12, 13], "conv": [12, 13, 651, 810, 866], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 70, 93, 388, 424, 866], "align_corn": [12, 13, 70, 93, 388, 424, 866], "conv2dtranspos": [12, 13, 810], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 70, 77, 93, 100, 391, 497, 654, 719, 732], "constant_pad": [12, 13, 77, 100, 654], "kornia": [14, 31, 32, 39, 42, 44, 45, 58, 62, 831, 877], "tf_rgb_to_grayscal": [14, 42], "rgb_to_grayscal": [14, 42, 831], "target": [14, 18, 26, 27, 29, 35, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 60, 70, 93, 208, 390, 465, 466, 467, 468, 469, 470, 471, 472, 646, 789, 810, 812, 818, 831, 835, 838, 841, 844, 853, 854, 861, 862, 867, 869, 877, 879, 880, 882, 884], "databas": [14, 847, 863], "examples_and_demo": 14, "sqlite": 14, "tabl": [14, 236, 253, 286, 599, 622, 647, 649, 794, 795, 810, 860, 865, 874, 882], "autotun": 14, "ivyexcept": [14, 576, 609, 649, 826, 849, 852, 857, 859, 860, 864], "source_to_sourc": 14, "profil": [14, 646, 879], "translat": 14, "_compil": [14, 838], "_source_to_sourc": 14, "47": [14, 26, 56, 60, 69, 70, 75, 79, 92, 93, 94, 95, 97, 102, 242, 300, 388, 400, 408, 426, 427, 537, 559, 560, 633, 647, 649, 650, 651, 652, 658, 675, 690, 758, 759], "48": [14, 26, 56, 60, 69, 70, 92, 93, 94, 95, 102, 125, 235, 258, 300, 388, 408, 409, 410, 420, 426, 427, 430, 574, 629, 633, 641, 647, 649, 650, 652, 656, 662, 697, 737, 758, 777], "49": [14, 56, 60, 70, 79, 93, 97, 98, 300, 388, 389, 400, 410, 420, 431, 456, 537, 647, 662, 707, 758, 777], "vll": 14, "pyx": 14, "ivy_kei": 14, "pem": 14, "torch_input": [14, 15, 16], "rand": [14, 15, 16, 17, 18, 40, 42, 44, 45, 60, 824, 825, 831, 878], "tf_input": [14, 15, 16, 877], "tf_output": [14, 15, 16], "via": [15, 16, 42, 43, 47, 50, 260, 389, 391, 458, 461, 464, 506, 647, 656, 746, 747, 839, 842, 846, 848, 849, 859, 864, 866, 868, 869, 882], "alongsid": [15, 16, 33, 34, 46, 651, 678], "basic": [15, 16, 27, 29, 33, 36, 40, 44, 45, 48, 51, 391, 505, 832, 837, 850, 863], "singl": [15, 16, 35, 47, 56, 61, 69, 79, 87, 92, 102, 111, 305, 364, 385, 389, 395, 456, 523, 614, 627, 631, 647, 649, 650, 651, 658, 660, 678, 757, 758, 759, 767, 794, 810, 829, 837, 838, 839, 842, 847, 850, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 870, 874, 875], "lstm": [15, 16, 17, 18, 651, 677, 810, 868, 882], "sample_input": [15, 16], "uniform": [15, 16, 34, 35, 36, 37, 38, 42, 44, 45, 46, 47, 49, 50, 51, 58, 70, 79, 93, 102, 400, 539, 658, 756, 757, 759, 809, 831, 862, 877, 880], "tf_lstm": [15, 16, 17, 18], "torch_lstm": [15, 16, 17, 18], "physicaldevic": [15, 16], "physical_devic": [15, 16], "device_typ": [15, 16], "alloc": [15, 16, 66, 67, 70, 90, 158, 159, 165, 342, 382, 644, 645, 829, 837, 839, 870], "physic": [15, 16, 217, 646], "modifi": [15, 16, 60, 70, 87, 93, 110, 391, 400, 494, 497, 503, 543, 794, 825, 837, 838, 839, 842, 844, 845, 848, 849, 851, 853, 854, 856, 859, 861, 863, 864, 868], "164": [15, 16, 23], "state_upd": [15, 16, 40], "properti": [15, 16, 40, 87, 110, 111, 112, 113, 114, 115, 119, 812, 814, 842, 846, 856, 861, 863], "_transpil": [15, 16, 40], "those": [15, 16, 57, 58, 75, 77, 87, 93, 98, 100, 139, 192, 253, 286, 507, 628, 644, 645, 647, 649, 652, 654, 656, 659, 699, 702, 717, 738, 765, 834, 837, 838, 839, 840, 843, 846, 847, 848, 857, 859, 860, 861, 863, 866], "constant": [15, 16, 17, 18, 27, 29, 34, 37, 46, 49, 51, 56, 70, 77, 78, 93, 100, 101, 110, 111, 335, 382, 388, 390, 391, 434, 469, 470, 497, 654, 656, 657, 719, 742, 755, 809, 813, 831, 856, 861, 864, 870, 878, 880], "toler": [15, 16, 17, 70, 75, 93, 98, 347, 364, 385, 389, 443, 458, 464, 652, 695, 698, 789, 791, 842, 861, 882], "benchmark": [15, 16, 17], "n_run": [15, 16, 17], "tf_time": [15, 16], "round": [15, 16, 69, 70, 92, 93, 110, 112, 113, 114, 236, 249, 253, 259, 260, 286, 300, 306, 307, 358, 385, 647, 835, 837, 838, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 874], "torch_tim": [15, 16], "cpu_speedup": [15, 16], "gpu_speedup": 15, "ntranspil": [15, 16], "5017": [15, 16], "1101": [15, 16], "7519": [15, 16], "901": [15, 16], "607x": [15, 16], "944x": [15, 16], "32": [17, 18, 26, 40, 44, 45, 56, 58, 59, 60, 69, 70, 79, 92, 93, 97, 98, 102, 115, 116, 125, 177, 235, 247, 248, 257, 271, 277, 293, 296, 297, 351, 385, 388, 389, 391, 400, 408, 409, 410, 420, 430, 431, 441, 445, 480, 537, 559, 575, 641, 645, 647, 649, 651, 652, 658, 659, 662, 666, 668, 669, 673, 675, 692, 697, 708, 757, 758, 759, 766, 777, 794, 797, 847, 848, 858], "original_output": [17, 18], "transpiled_output": [17, 18], "original_torch_tim": 17, "autograph": 17, "do_not_convert": 17, "compiled_tf_lstm": 17, "transpiled_tf_tim": 17, "original_tf_lstm": 17, "time_major": [17, 93, 388, 434, 651, 677], "return_sequ": [17, 810], "original_tf_tim": 17, "slower": [17, 35, 860], "480074623755541x": 17, "362692848996253x": 17, "openmim": [19, 20], "mim": [19, 20], "0rc8": [19, 20], "get_model": [19, 20], "list_model": [19, 20], "mmengin": [19, 20], "configdict": [19, 20], "saniti": [19, 20, 24, 25, 26, 44, 860], "checkpoint": [19, 20, 21, 22, 61, 870], "against": [19, 20, 67, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 166, 285, 304, 347, 350, 353, 364, 385, 400, 542, 543, 544, 545, 546, 583, 645, 647, 649, 652, 659, 692, 693, 695, 698, 762, 863, 869, 870, 882], "zoo": [19, 20], "checkpoint_nam": [19, 20, 24, 25, 44], "tiny_32xb128": [19, 20], "noema_in1k": [19, 20], "openmmlab": [19, 20], "get_scal": [19, 20], "cfg": [19, 20, 854], "_config": [19, 20], "train_pipelin": [19, 20], "tensor_imag": [19, 20], "transpiled_graph": [19, 20, 24, 25, 44], "issu": [19, 20, 24, 25, 390, 467, 809, 832, 833, 834, 835, 836, 838, 840, 842, 844, 845, 847, 848, 849, 850, 852, 853, 860, 863, 864, 866, 870, 878], "107960": [19, 20, 24, 25], "export": [19, 20, 24, 25, 59, 847, 884], "lc_all": [19, 20, 24, 25], "en_u": [19, 20, 24, 25], "utf": [19, 20, 24, 25], "ld_library_path": [19, 20, 24, 25], "lib64": [19, 20, 24, 25], "library_path": [19, 20, 24, 25], "stub": [19, 20, 24, 25, 845], "ldconfig": [19, 20, 24, 25], "_f": [19, 20, 24, 25, 44], "comp_model": [19, 20, 24, 25, 44], "equival": [19, 20, 24, 25, 42, 44, 75, 98, 110, 111, 139, 247, 260, 281, 282, 295, 296, 391, 481, 506, 512, 644, 647, 652, 695, 698, 701, 709, 819, 859, 860, 866, 868, 877], "np_imag": [19, 20, 39, 44, 45], "jax_imag": [19, 20], "hk": [19, 20, 24, 25, 44, 58, 62, 831, 877], "rng_kei": [19, 20, 24, 25, 44, 831, 877], "prngkei": [19, 20, 24, 25, 35, 36, 44, 45, 58, 831, 877], "jax_mlp_forward": [19, 20], "init": [19, 20, 24, 25, 44, 58, 60, 70, 93, 389, 447, 458, 464, 831, 842, 877], "rng": [19, 20, 24, 25, 44, 58, 831, 877], "06": [19, 20, 26, 37, 60, 67, 79, 92, 95, 114, 123, 178, 235, 251, 388, 410, 420, 635, 641, 645, 650, 759, 789, 791, 863], "block_until_readi": [19, 20], "08": [19, 20, 70, 83, 93, 102, 239, 347, 364, 385, 388, 390, 410, 420, 470, 647, 758, 759, 784, 789, 794, 854], "train2017": [19, 20, 24, 25, 39, 44, 45, 831, 877], "000000283921": [19, 20, 24, 25, 44], "out_torch": [19, 20, 24, 25, 44], "et": [19, 20, 651, 652, 678, 702], "out_jax": [19, 20, 24, 25, 44], "66m": [19, 20], "53m": [19, 20], "That": [19, 20, 24, 25, 27, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 295, 390, 469, 647, 824, 838, 839, 843, 863, 883], "pretti": [19, 20, 24, 25, 44, 45, 58, 835, 853], "solid": [19, 20, 24, 25, 44], "2023": [21, 22, 23, 24, 25, 37, 39, 40, 58], "52": [21, 22, 26, 56, 69, 92, 94, 95, 102, 241, 251, 253, 400, 537, 559, 560, 575, 629, 647, 649, 650, 651, 652, 662, 675, 697, 759, 777, 824], "110": [21, 22, 58], "10472": [21, 22], "10k": [21, 22], "tx": [21, 22], "23k": [21, 22], "unifyai": [21, 22, 62, 831, 833, 838, 839, 845, 853], "634575": [21, 22], "620k": [21, 22], "jpeg": [21, 22, 59, 60], "619": [21, 22], "70k": [21, 22], "113": [21, 22], "resnet34_weight": [21, 22], "torch_resnet_34": [21, 22], "conv1": [21, 22, 23, 43], "kernel_s": [21, 22, 23, 40, 43, 44, 45, 60, 70, 93, 388, 407, 408, 409, 428, 435, 810, 816], "stride": [21, 22, 23, 70, 74, 93, 94, 97, 115, 388, 391, 407, 408, 409, 425, 426, 427, 428, 430, 431, 435, 473, 649, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 810, 859, 864, 882], "bia": [21, 22, 23, 70, 74, 93, 97, 101, 394, 400, 520, 536, 586, 649, 651, 657, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 755, 810, 856, 863, 868], "bn1": [21, 22, 23], "ep": [21, 22, 23, 70, 75, 78, 93, 98, 101, 178, 313, 380, 389, 390, 394, 443, 470, 515, 516, 517, 645, 652, 657, 695, 698, 755, 806, 813], "05": [21, 22, 23, 26, 60, 66, 69, 70, 72, 78, 92, 93, 95, 101, 151, 278, 331, 347, 356, 357, 364, 382, 385, 394, 515, 516, 517, 574, 596, 619, 629, 630, 635, 644, 647, 649, 650, 652, 657, 693, 755, 789, 794, 809, 813, 861, 863], "momentum": [21, 22, 23, 58, 70, 93, 394, 515, 517, 813], "affin": [21, 22, 23, 813], "track_running_stat": [21, 22, 23, 813], "dilat": [21, 22, 23, 62, 70, 74, 93, 97, 388, 391, 425, 426, 427, 430, 431, 435, 497, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 810], "ceil_mod": [21, 22, 23, 70, 93, 388, 407, 408, 409, 425, 426, 427, 430, 810], "layer1": [21, 22, 23], "basicblock": [21, 22, 23], "conv2": [21, 22, 23], "bn2": [21, 22, 23], "layer2": [21, 22, 23], "layer3": [21, 22, 23], "layer4": [21, 22, 23], "output_s": [21, 22, 23, 70, 93, 388, 402, 403, 404, 405, 651, 680, 810, 831, 877], "fc": [21, 22, 23, 29, 43, 58, 831, 877], "in_featur": [21, 22, 23, 74, 97, 651, 675, 863], "out_featur": [21, 22, 23, 74, 97, 651, 675, 863], "resnet_34": [21, 22], "ivy_resnet_34": [21, 22], "333f7ec4": [21, 22], "pth": [21, 22], "3m": [21, 22], "4mb": [21, 22], "preserv": [21, 22, 24, 25, 37, 39, 40, 70, 71, 72, 87, 93, 94, 95, 116, 388, 389, 391, 400, 424, 458, 475, 476, 477, 488, 489, 509, 543, 576, 639, 649, 650, 654, 721, 794, 862, 863, 870, 877, 879, 884], "multipl": [21, 22, 24, 25, 33, 37, 39, 40, 44, 69, 70, 75, 78, 83, 84, 87, 92, 93, 94, 95, 98, 100, 101, 106, 107, 147, 247, 271, 278, 284, 285, 286, 288, 348, 349, 385, 388, 389, 391, 394, 398, 410, 417, 420, 422, 456, 483, 492, 510, 513, 520, 529, 548, 555, 586, 629, 630, 633, 635, 636, 637, 639, 644, 647, 649, 650, 651, 652, 654, 657, 659, 662, 663, 666, 667, 668, 669, 682, 691, 692, 693, 706, 717, 720, 725, 726, 755, 762, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 810, 825, 829, 837, 839, 843, 844, 846, 850, 852, 854, 856, 859, 860, 861, 863, 866, 868, 870, 878, 882, 884], "rel": [21, 22, 24, 25, 37, 39, 40, 70, 72, 75, 77, 82, 89, 93, 95, 98, 100, 105, 115, 149, 347, 364, 385, 390, 400, 469, 470, 536, 630, 633, 635, 636, 637, 650, 652, 654, 661, 686, 695, 698, 706, 721, 725, 771, 774, 789, 791, 839, 847, 861, 866, 882], "home": [21, 22, 24, 25, 37, 39, 40, 847], "workspac": [21, 22, 24, 25, 34, 37, 39, 40, 838, 853], "95": [21, 22, 23, 26, 56, 70, 72, 75, 79, 86, 95, 97, 102, 123, 373, 385, 431, 629, 633, 637, 641, 650, 652, 658, 690, 758, 759], "track": [21, 22, 33, 44, 45, 57, 58, 829, 838, 839, 842, 858, 859, 878, 882], "properli": [21, 22, 838, 841, 852, 854, 860, 863], "_trace_graph": [21, 22], "shown": [21, 22, 40, 44, 85, 87, 108, 270, 293, 351, 385, 647, 837, 838, 839, 842, 845, 847, 848, 850, 852, 854, 855, 860, 861, 863, 864, 865, 868, 869, 870], "8507": [21, 22], "1351": [21, 22], "0069": [21, 22], "85072625": [21, 22], "13506091": [21, 22], "00688289": [21, 22], "resnet50_weight": [21, 22], "torch_resnet_50": [21, 22], "imagenet1k_v2": [21, 22], "11ad3fa6": [21, 22], "8m": [21, 22], "8mb": [21, 22], "bottleneck": [21, 22], "conv3": [21, 22], "bn3": [21, 22], "2048": [21, 22, 607, 649], "resnet_50": [21, 22], "ivy_resnet_50": [21, 22], "3429": [21, 22], "0408": [21, 22], "0121": [21, 22], "34288204": [21, 22], "04077014": [21, 22], "01212029": [21, 22], "deploy": [23, 838, 874, 875, 877, 884], "ow": 23, "residu": 23, "extrem": 23, "though": [23, 39, 836, 837, 839, 848, 849, 851, 856, 859, 860, 866, 870], "idea": [23, 831, 837, 862, 864, 875, 884], "revolutionari": 23, "reach": [23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 874, 875, 882], "152": 23, "vanish": [23, 809], "explod": [23, 809, 873, 874], "gradient": [23, 44, 45, 58, 60, 70, 93, 110, 226, 377, 385, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 646, 655, 733, 734, 735, 791, 802, 814, 841, 864, 870, 882], "astor": 23, "cu121": 23, "pillow": [23, 63], "filelock": [23, 39, 58], "extens": [23, 39, 58, 69, 75, 92, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 168, 178, 181, 193, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 348, 349, 351, 385, 388, 391, 400, 432, 506, 510, 536, 644, 645, 647, 652, 654, 659, 660, 661, 662, 663, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 718, 720, 721, 722, 724, 725, 727, 728, 732, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 836, 838, 839, 851, 853, 854, 863, 882], "sympi": [23, 39], "fsspec": [23, 39, 58], "nvrtc": 23, "cu12": 23, "cupti": 23, "54": [23, 56, 67, 69, 74, 92, 93, 97, 102, 181, 250, 251, 256, 271, 300, 306, 327, 382, 388, 400, 410, 420, 537, 647, 651, 652, 662, 675, 694, 697, 757, 758, 759, 777, 847, 850], "curand": 23, "106": [23, 60], "cusolv": [23, 652, 703], "107": 23, "cuspars": 23, "nccl": 23, "nvtx": 23, "triton": 23, "nvjitlink": 23, "mpmath": [23, 39], "py2": [23, 58, 60], "filter": [23, 58, 60, 62, 70, 74, 93, 97, 330, 331, 382, 388, 409, 427, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 796, 810, 831, 844, 847], "get_logg": 23, "setlevel": 23, "solv": [23, 75, 98, 389, 453, 652, 794, 831, 838, 842, 853, 860, 884], "todai": 23, "ant": 23, "bee": 23, "120": [23, 60, 83, 106, 116, 652, 697, 775], "usual": [23, 27, 29, 61, 253, 286, 647, 824, 838, 842, 848, 860, 863, 866], "upon": [23, 44, 45, 62, 829, 839, 840, 850, 859, 863, 866, 870, 882], "scratch": [23, 863], "transfer": 23, "subset": [23, 60, 796, 843, 847, 851, 855, 858, 860, 863, 868, 882], "extract": [23, 44, 45, 52, 59, 70, 93, 111, 391, 480, 507, 860, 862, 864, 869, 881, 882, 883], "zipfil": 23, "zip": [23, 60, 868], "hymenoptera_data": 23, "replac": [23, 28, 30, 41, 59, 69, 70, 71, 77, 79, 87, 92, 93, 94, 100, 102, 145, 287, 323, 326, 380, 382, 391, 503, 506, 510, 590, 591, 595, 644, 647, 649, 654, 658, 717, 756, 794, 839, 845, 846, 848, 849, 857, 860, 863, 868, 870, 877], "send": 23, "statu": [23, 837, 840, 847, 854], "status_cod": 23, "basenam": 23, "zip_save_path": 23, "join": [23, 59, 60, 77, 87, 93, 100, 481, 482, 654, 718, 728, 831, 840, 871], "getcwd": 23, "wb": 23, "zip_ref": 23, "extractal": 23, "option": [23, 50, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 181, 183, 193, 205, 209, 221, 224, 225, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 434, 436, 437, 439, 440, 441, 443, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 557, 559, 560, 561, 562, 563, 566, 567, 569, 570, 571, 572, 574, 575, 576, 578, 579, 582, 587, 590, 591, 595, 605, 606, 607, 609, 611, 613, 614, 615, 627, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 742, 743, 747, 748, 753, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 795, 802, 806, 807, 809, 810, 812, 814, 815, 824, 829, 837, 838, 839, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 863, 864, 866, 868, 870, 871, 874, 877, 878, 879, 880, 882], "delet": [23, 59, 839, 847], "fail": [23, 59, 789, 831, 835, 838, 839, 842, 847, 848, 850, 854, 857, 859, 860, 861], "augment": [23, 58], "data_transform": 23, "randomresizedcrop": 23, "randomhorizontalflip": 23, "val": [23, 71, 87, 92, 94, 266, 391, 486, 574, 575, 576, 595, 596, 597, 647, 649, 822, 848, 859], "data_dir": 23, "image_dataset": 23, "imagefold": 23, "dataset_s": [23, 60], "class_nam": [23, 60, 791], "imshow": [23, 58, 59], "inp": [23, 97, 651, 673], "clip": [23, 56, 69, 70, 77, 92, 93, 94, 100, 284, 285, 391, 480, 506, 507, 554, 555, 647, 649, 654, 846, 856, 858, 859, 868], "paus": 23, "001": [23, 58, 69, 70, 78, 90, 93, 95, 178, 276, 293, 351, 364, 385, 630, 645, 647, 650, 657, 755, 794], "bit": [23, 70, 83, 177, 178, 181, 244, 245, 247, 400, 537, 538, 645, 647, 662, 775, 776, 781, 783, 836, 837, 838, 846, 847, 848, 850, 856, 868], "batch": [23, 58, 59, 60, 70, 71, 75, 87, 93, 94, 98, 224, 225, 388, 389, 390, 394, 402, 404, 405, 411, 424, 434, 451, 465, 467, 515, 516, 517, 520, 563, 566, 567, 628, 646, 649, 651, 652, 655, 657, 675, 676, 677, 678, 709, 733, 734, 735, 755, 794, 810, 813, 846, 856, 861], "make_grid": 23, "resnet18": [23, 62, 63], "train_model": 23, "train_dataset": 23, "val_dataset": 23, "metric": [23, 831, 870], "train_acc_metr": 23, "sparsecategoricalaccuraci": 23, "val_acc_metr": 23, "nstart": 23, "start_tim": 23, "x_batch_train": 23, "y_batch_train": 23, "gradienttap": 23, "tape": 23, "loss_valu": 23, "grad": [23, 44, 45, 56, 60, 629, 650, 814, 858], "trainable_weight": 23, "apply_gradi": 23, "update_st": 23, "everi": [23, 39, 44, 45, 50, 58, 66, 70, 71, 93, 94, 148, 149, 314, 348, 349, 362, 380, 385, 388, 391, 425, 426, 427, 434, 512, 548, 644, 649, 837, 839, 842, 844, 845, 847, 848, 850, 854, 855, 856, 857, 859, 860, 861, 863, 868, 877, 878, 880, 882], "4f": 23, "float": [23, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 86, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 106, 110, 113, 115, 125, 131, 139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 155, 156, 161, 165, 169, 173, 178, 182, 186, 192, 193, 196, 202, 211, 220, 224, 225, 228, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 257, 258, 259, 260, 264, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 317, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 332, 347, 348, 349, 350, 358, 359, 364, 366, 367, 370, 371, 372, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 400, 403, 412, 413, 414, 431, 432, 439, 442, 443, 445, 458, 462, 464, 465, 466, 470, 471, 486, 505, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 536, 537, 538, 539, 544, 545, 546, 553, 554, 555, 563, 572, 596, 597, 600, 606, 607, 627, 629, 630, 633, 635, 636, 637, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 674, 676, 678, 681, 682, 684, 687, 688, 689, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 706, 709, 711, 712, 713, 733, 734, 735, 742, 755, 758, 759, 765, 767, 768, 769, 770, 775, 776, 778, 779, 780, 781, 782, 783, 784, 791, 794, 795, 797, 806, 809, 810, 813, 814, 829, 835, 842, 846, 848, 851, 852, 853, 855, 856, 858, 859, 861, 863, 864, 866, 868], "train_acc": 23, "acc": 23, "reset": [23, 200, 201, 202, 203, 204, 230, 231, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 645, 646, 649, 849], "reset_st": 23, "x_batch_val": 23, "y_batch_val": 23, "val_logit": 23, "val_acc": 23, "taken": [23, 50, 70, 75, 93, 98, 354, 385, 388, 433, 652, 686, 706, 837, 847, 860, 864, 883], "instanti": [23, 44, 45, 802, 851], "sparsecategoricalcrossentropi": 23, "from_logit": [23, 76, 99, 653, 711, 811], "3121": 23, "2126": 23, "4992": 23, "6072": 23, "244": [23, 69, 258, 831], "3852": 23, "1830": 23, "1015": 23, "1364": 23, "3915": 23, "7465": 23, "8033": 23, "3333": 23, "214": 23, "2763": 23, "3526": 23, "4220": 23, "1592": 23, "8525": 23, "3660": 23, "1085": 23, "1366": 23, "4634": 23, "8115": 23, "3987": 23, "36": [23, 26, 56, 60, 69, 70, 74, 83, 93, 94, 98, 241, 296, 297, 362, 385, 388, 389, 400, 410, 420, 446, 537, 559, 560, 607, 647, 649, 652, 656, 662, 675, 694, 697, 707, 747, 777], "3875": 23, "8096": 23, "5836": 23, "4432": 23, "8402": 23, "3529": 23, "218": [23, 60], "0323": 23, "0982": 23, "4332": 23, "0324": [23, 60], "8197": 23, "3464": 23, "228": [23, 63], "1794": 23, "9244": 23, "9429": 23, "7951": 23, "231": [23, 130, 641], "0132": 23, "4156": 23, "2132": 23, "1413": 23, "8279": 23, "4183": 23, "3028": 23, "1461": 23, "3779": 23, "4553": 23, "8607": 23, "4444": 23, "223": [23, 99], "2835": 23, "0436": 23, "7022": 23, "1335": 23, "8648": 23, "4052": 23, "215": 23, "0863": 23, "0237": 23, "0181": 23, "1331": 23, "8975": 23, "4967": 23, "209": 23, "1050": 23, "2271": 23, "3540": 23, "0588": 23, "8689": 23, "4902": 23, "222": 23, "7880": 23, "4800": 23, "4741": 23, "0218": 23, "5033": 23, "220": [23, 92, 258], "61": [23, 56, 58, 69, 70, 75, 92, 93, 95, 99, 102, 239, 274, 276, 301, 410, 629, 647, 650, 651, 652, 673, 690, 759, 853], "2198": 23, "6509": 23, "3352": 23, "0270": 23, "4771": 23, "216": [23, 95, 98, 629, 650, 707], "0385": 23, "1798": 23, "0143": 23, "0309": 23, "5359": 23, "213": [23, 863], "7697": 23, "3405": 23, "6033": 23, "8392": 23, "8770": 23, "205": [23, 60], "0623": 23, "4221": 23, "0138": 23, "4607": 23, "5294": 23, "221": [23, 64, 126], "0349": 23, "6545": 23, "1935": 23, "1512": 23, "8852": 23, "5098": 23, "212": [23, 58, 70, 74, 93, 372, 385, 675], "0821": 23, "1985": 23, "7769": 23, "3897": 23, "204": 23, "1106": 23, "1354": 23, "1801": 23, "0276": 23, "8893": 23, "5621": 23, "1185": 23, "0447": 23, "2817": 23, "1006": 23, "5752": 23, "2220": 23, "0387": 23, "1639": 23, "0080": 23, "9221": 23, "5686": 23, "0287": 23, "0115": 23, "1679": 23, "7920": 23, "208": 23, "0071": 23, "0790": 23, "2657": 23, "0758": 23, "8934": 23, "210": [23, 849], "2406": 23, "9193": 23, "2372": 23, "9555": 23, "9139": 23, "5817": 23, "211": 23, "1150": [23, 292, 647], "0810": 23, "2205": 23, "1616": 23, "9344": 23, "82": [23, 26, 56, 58, 63, 64, 69, 95, 102, 126, 239, 400, 537, 629, 650, 758, 759, 835, 853], "0200": 23, "0117": 23, "2090": 23, "1444": 23, "5948": 23, "63": [23, 24, 25, 26, 56, 60, 69, 86, 92, 97, 98, 131, 292, 299, 300, 388, 400, 410, 420, 431, 537, 647, 652, 656, 662, 682, 697, 737, 748, 777], "0482": 23, "0338": 23, "5971": 23, "0368": 23, "6144": 23, "207": 23, "1593": 23, "4745": 23, "0733": 23, "0434": 23, "6078": 23, "68": [23, 26, 56, 60, 63, 69, 102, 126, 148, 241, 388, 410, 420, 641, 644, 647, 652, 657, 708, 755, 758, 759], "3923": 23, "1614": 23, "3711": [23, 390, 472], "2719": 23, "6275": 23, "visualize_model": 23, "num_imag": 23, "was_train": 23, "learning_phas": 23, "images_so_far": 23, "pred": [23, 44, 45, 59, 60, 70, 76, 93, 99, 390, 466, 469, 653, 711, 712, 713, 714, 846, 856, 859], "j": [23, 66, 69, 70, 71, 75, 83, 89, 92, 93, 98, 110, 138, 154, 234, 235, 236, 237, 239, 242, 251, 253, 256, 258, 266, 274, 276, 280, 286, 297, 299, 300, 303, 304, 351, 385, 388, 389, 400, 416, 417, 421, 432, 433, 437, 442, 444, 455, 461, 546, 551, 643, 644, 647, 649, 652, 662, 687, 706, 777, 825, 839, 841, 845, 878], "continu": [23, 40, 44, 45, 60, 138, 300, 308, 380, 643, 647, 831, 836, 837, 838, 841, 842, 853, 859, 862, 863, 870, 874, 882], "yet": [24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 60, 381, 383, 384, 392, 393, 397, 837, 838, 853, 870, 878, 880], "broken": [24, 25, 37, 39, 40, 882], "permiss": [24, 25, 37, 39, 40, 838, 847], "recommend": [24, 25, 37, 39, 40, 281, 282, 295, 390, 467, 647, 662, 779, 782, 833, 838, 844, 845, 854, 857, 858, 871, 878], "virtual": [24, 25, 37, 39, 40, 839, 860], "pypa": [24, 25, 37, 39, 40], "venv": [24, 25, 37, 39, 40], "autofeatureextractor": [24, 25, 44], "extractor": [24, 25, 27, 29, 44, 60], "hug": [24, 25, 44, 878], "face": [24, 25, 44, 832, 838, 842, 853, 854, 858, 866, 868, 878, 882], "arch_nam": [24, 25, 44], "microsoft": [24, 25, 44, 877, 878, 882], "feature_extractor": [24, 25, 44], "980130": [24, 25], "9342": [24, 25], "980177": [24, 25], "609": [24, 25], "980207": [24, 25], "1518": [24, 25], "351203": [24, 25], "inputs_jax": [24, 25, 44], "last_hidden_st": [24, 25, 44], "jax_forward": [24, 25, 44], "jit_appli": [24, 25], "134": [24, 25, 74, 652, 675, 694], "2x": [24, 25, 44], "ipytest": 26, "load_breast_canc": 26, "autoconfig": 26, "sole": [26, 56, 855, 864, 882, 883, 884], "test_jax_gpu": 26, "xla_bridg": [26, 58], "get_backend": [26, 856], "test_torch_gpu": 26, "test_xgboost_gpu": 26, "capsi": 26, "load_diabet": 26, "xgb_model": 26, "xgbregressor": 26, "tree_method": 26, "consol": [26, 589, 649, 839, 854, 863], "gpu_hist": 26, "captur": [26, 858, 863, 868, 883], "readouterr": 26, "err": 26, "tabular": 26, "pulsar": 26, "standard": [26, 69, 75, 78, 79, 83, 92, 101, 102, 106, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 168, 178, 181, 193, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 348, 349, 351, 385, 388, 389, 391, 400, 432, 462, 506, 510, 536, 628, 644, 645, 647, 649, 652, 654, 657, 658, 659, 660, 661, 662, 663, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 718, 720, 721, 722, 724, 725, 727, 728, 732, 755, 758, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 796, 809, 813, 824, 825, 831, 834, 841, 842, 843, 846, 848, 851, 855, 859, 862, 863, 864, 870, 874, 877, 884], "extra": [26, 45, 87, 116, 135, 628, 643, 649, 843, 848, 850, 857, 859, 860, 861, 866, 869, 877, 878], "dimens": [26, 66, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 87, 89, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 113, 115, 116, 119, 126, 130, 154, 158, 159, 329, 340, 342, 343, 344, 345, 348, 349, 353, 354, 362, 369, 376, 382, 385, 386, 388, 389, 390, 391, 394, 395, 398, 400, 402, 404, 405, 407, 408, 409, 411, 416, 417, 421, 425, 426, 427, 428, 431, 432, 434, 435, 437, 439, 442, 451, 460, 465, 469, 475, 476, 477, 481, 487, 499, 500, 501, 502, 504, 506, 510, 515, 516, 517, 520, 524, 526, 529, 539, 541, 542, 543, 544, 545, 546, 559, 560, 561, 563, 570, 604, 608, 628, 641, 644, 649, 651, 652, 653, 654, 655, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 682, 683, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 709, 712, 713, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 731, 733, 734, 735, 761, 762, 763, 765, 767, 768, 769, 770, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 796, 806, 810, 813, 850, 852, 858, 860, 861, 863, 866, 868], "load_data": 26, "standardscal": 26, "df": [26, 60], "delimit": 26, "sc": 26, "fit_transform": 26, "117564": 26, "navig": [26, 835, 838, 839, 841, 853], "rerun": [26, 58], "436": 26, "t4": 26, "tier": [26, 840], "reduc": [26, 70, 71, 75, 80, 83, 84, 87, 93, 94, 98, 103, 106, 107, 226, 348, 349, 369, 385, 386, 400, 541, 542, 543, 544, 545, 546, 560, 646, 649, 652, 659, 662, 663, 699, 762, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 824, 825, 847, 852, 860, 866, 868, 878], "although": [26, 652, 700, 833, 843, 845, 846, 860, 866, 882], "experi": [26, 31, 60, 838, 852, 863, 870], "substanti": [26, 834, 839, 843, 848, 863, 882], "stuff": 26, "201": [26, 92, 93, 238, 410, 647], "20x": 26, "ivyclassifi": 26, "106597": 26, "10967": 26, "96": [26, 56, 70, 72, 92, 93, 94, 102, 250, 271, 303, 373, 385, 388, 410, 559, 560, 633, 647, 649, 650, 652, 662, 697, 759, 777], "73": [26, 56, 69, 98, 300, 400, 537, 652, 658, 682, 758, 863], "852": [26, 651, 675], "449": 26, "nevertheless": 26, "fall": [26, 58, 814, 837, 848], "short": [26, 56, 70, 93, 436, 651, 676, 677, 837, 839, 848, 868], "blaze": 26, "35": [26, 56, 64, 74, 75, 86, 92, 93, 97, 98, 102, 126, 241, 300, 388, 410, 420, 647, 651, 652, 659, 662, 675, 683, 690, 758, 766, 777], "surpass": 26, "remark": [26, 870], "artifici": 26, "simpli": [26, 33, 44, 45, 47, 56, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 388, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 647, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 700, 702, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 831, 837, 838, 839, 843, 844, 845, 847, 848, 849, 850, 851, 853, 855, 856, 859, 860, 861, 863, 866, 868, 869, 870, 872, 883], "x_doubl": 26, "vstack": [26, 70, 93, 391, 493], "y_doubl": 26, "235128": 26, "315": [26, 292, 647], "879": 26, "380": 26, "seem": [26, 837, 838, 866, 868, 870, 882], "examin": 26, "600": [26, 60, 94, 97, 388, 412, 413, 567, 847], "conduct": [26, 875], "num_boosting_round": 26, "300": [26, 92, 94, 97, 296, 388, 412, 413, 567, 591, 647, 649, 652, 691, 863], "500": [26, 70, 93, 94, 97, 388, 389, 412, 413, 464, 567, 649], "ivy_elapsed_tim": 26, "xgb_elapsed_tim": 26, "ivy_tim": 26, "partial": [26, 70, 87, 93, 179, 180, 212, 213, 362, 385, 388, 389, 391, 400, 436, 451, 458, 499, 500, 501, 502, 543, 564, 565, 634, 645, 646, 649, 650, 795, 797, 811, 812, 839, 845, 866], "xgb_time": 26, "fivethirtyeight": 26, "legend": [26, 60, 837], "loc": 26, "best": [26, 58, 586, 649, 825, 829, 831, 832, 835, 836, 837, 838, 839, 841, 847, 848, 852, 853, 862, 863, 864, 871, 875], "xlabel": 26, "ylabel": 26, "obviou": [26, 882], "trend": 26, "gap": 26, "train_siz": [26, 58], "widen": 26, "impress": 26, "outcom": [26, 70, 93, 350, 362, 385, 825], "tend": 26, "95933": 26, "9874": 26, "105807": 26, "wrap": [26, 33, 35, 44, 45, 47, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 388, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 602, 605, 606, 607, 608, 609, 611, 613, 614, 625, 627, 629, 630, 633, 635, 636, 637, 639, 649, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 700, 702, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 791, 831, 841, 842, 843, 844, 846, 847, 848, 849, 851, 852, 855, 856, 859, 860, 863, 868, 869, 870, 872, 877, 878, 882, 883], "balanc": 26, "breast": 26, "cancer": 26, "return_x_i": 26, "171": [26, 75, 652, 690, 794], "perfectli": [26, 796], "align": [26, 70, 87, 93, 388, 389, 424, 440, 651, 680, 825, 834, 838, 847, 860, 862, 868, 872], "timm": [27, 44, 45, 831, 877], "focu": [27, 40, 837, 858, 884], "mlp": 27, "mixer": 27, "onli": [27, 29, 44, 45, 50, 56, 58, 60, 62, 65, 66, 69, 70, 75, 77, 79, 87, 89, 92, 93, 98, 100, 102, 110, 113, 115, 131, 151, 191, 192, 221, 281, 282, 287, 293, 325, 355, 362, 382, 385, 388, 389, 391, 395, 400, 411, 424, 434, 443, 448, 462, 464, 475, 476, 477, 487, 522, 523, 539, 553, 641, 644, 645, 646, 647, 649, 651, 652, 654, 656, 658, 659, 661, 662, 678, 692, 699, 702, 703, 721, 724, 736, 737, 743, 744, 746, 747, 748, 753, 754, 757, 758, 759, 762, 763, 773, 779, 782, 792, 794, 795, 797, 810, 814, 824, 829, 831, 832, 833, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 877, 878, 882, 883, 884], "retriev": [27, 29, 33, 549, 571, 596, 649, 839, 860], "mlp_encod": [27, 44, 45, 831, 877], "create_model": [27, 44, 45, 831, 877], "mixer_b16_224": [27, 44, 45, 831, 877], "nois": [27, 29, 44, 45, 831, 877, 878], "randn": [27, 29, 44, 45, 391, 510, 831, 877], "tf_mlp_encod": [27, 44, 45], "output_torch": [27, 29], "output_tf": [27, 29], "output_dens": [27, 44, 45, 831], "dens": [27, 40, 44, 45, 329, 382, 810, 831], "unit": [27, 44, 45, 70, 86, 93, 110, 111, 123, 125, 126, 127, 128, 129, 130, 131, 308, 309, 312, 316, 318, 319, 322, 323, 324, 380, 518, 519, 641, 831, 838, 842, 848, 860, 861, 863, 870, 883], "mention": [27, 29, 44, 45, 50, 837, 838, 839, 843, 850, 855, 856, 859, 860, 863, 866, 880, 882], "fulli": [27, 29, 31, 32, 35, 40, 44, 45, 58, 70, 93, 400, 543, 810, 831, 843, 848, 855, 858, 866, 868, 870, 880, 882, 884], "ground": [27, 29, 390, 466, 789, 791, 802, 835, 853, 860, 863], "ret": [27, 29, 44, 45, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 400, 401, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 444, 449, 451, 454, 456, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 595, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 742, 743, 744, 745, 746, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 795, 796, 797, 807, 812, 814, 819, 825, 827, 831, 848, 849, 851, 852, 858, 859, 860, 861, 864, 868, 869, 877], "eagertensor": [27, 33, 56, 819, 861], "deepmind": 28, "perceiverio": 28, "backbon": [28, 58, 831, 869], "TO": [28, 30, 41], "efficientnet": 29, "eff_encod": [29, 831], "efficientnet_v2": [29, 831], "efficientnetv2b0": [29, 831], "storag": [29, 58, 59], "googleapi": [29, 58, 59], "efficientnetv2": 29, "b0_notop": 29, "h5": [29, 87], "24274472": 29, "0u": 29, "torch_eff_encod": [29, 831], "modes_to_trac": 29, "1280": [29, 559, 649, 831], "welcom": [31, 59, 831, 832, 838, 839, 840, 862], "varieti": [31, 842, 847, 848, 849, 863, 865], "organ": [31, 843, 846, 856, 860, 862, 864, 872, 874, 875], "main": [31, 45, 66, 70, 75, 93, 98, 145, 158, 159, 160, 326, 341, 342, 382, 389, 391, 440, 486, 644, 652, 685, 686, 706, 831, 834, 837, 838, 839, 840, 842, 845, 846, 853, 857, 859, 882, 883], "exactli": [31, 35, 42, 47, 56, 57, 61, 303, 647, 837, 846, 847, 848, 849, 850, 852, 863, 866], "rush": 31, "jump": [31, 861], "straight": [31, 831, 847, 860, 863], "quickstart": [31, 831], "introduct": [31, 33, 40, 44, 45, 882], "point": [31, 40, 67, 69, 70, 75, 79, 81, 83, 90, 92, 93, 98, 102, 106, 139, 140, 141, 143, 145, 148, 155, 156, 161, 165, 178, 182, 186, 193, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 266, 267, 268, 269, 274, 275, 276, 277, 278, 286, 288, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 325, 326, 328, 348, 349, 366, 367, 370, 372, 382, 385, 388, 389, 390, 395, 400, 403, 412, 413, 414, 432, 442, 462, 466, 522, 523, 524, 525, 526, 536, 537, 538, 546, 642, 644, 645, 647, 652, 658, 659, 660, 661, 662, 682, 684, 687, 688, 689, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 706, 709, 758, 759, 765, 767, 768, 769, 770, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 819, 820, 829, 835, 837, 838, 839, 842, 843, 845, 847, 848, 850, 851, 853, 855, 859, 860, 863, 864, 866, 868, 878], "showcas": [31, 831], "real": [31, 39, 69, 70, 83, 92, 93, 106, 115, 125, 128, 131, 155, 156, 233, 234, 235, 236, 238, 239, 240, 241, 242, 251, 253, 254, 256, 258, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 283, 286, 288, 289, 291, 295, 296, 297, 299, 300, 301, 302, 303, 304, 306, 307, 348, 349, 355, 356, 357, 367, 385, 388, 389, 411, 432, 433, 442, 443, 641, 644, 647, 652, 659, 662, 687, 688, 689, 693, 700, 702, 703, 706, 709, 765, 778, 780, 781, 782, 783, 846], "world": [31, 39, 839], "beginn": [31, 832, 882], "got": [31, 56, 852], "cover": [31, 44, 70, 93, 388, 425, 426, 427, 837, 842, 843, 845, 848, 850, 851, 856, 857, 863, 866], "lazi": [31, 32, 35, 38, 47, 50, 51, 62], "familiar": [33, 837, 838], "concept": 33, "roundup": [33, 875], "indep": [33, 44], "proof": [33, 44], "delv": [33, 45, 831], "theori": [33, 833, 845], "esenti": [33, 44], "abstract": [33, 44, 45, 809, 814, 831, 846, 848, 859, 860, 863, 866, 882], "quirk": [33, 44], "perk": [33, 44, 831, 843, 846], "under": [33, 44, 45, 70, 390, 469, 470, 824, 837, 838, 841, 842, 849, 850, 851, 854, 860, 861, 863, 866, 867, 869, 870, 877, 878, 882], "hood": [33, 44, 45, 841, 849, 850, 854, 860, 863, 866, 867, 869, 877, 878], "appropi": 33, "string": [33, 44, 45, 60, 70, 71, 74, 87, 93, 97, 163, 164, 176, 183, 205, 206, 207, 208, 209, 211, 220, 227, 228, 232, 388, 389, 391, 431, 435, 443, 497, 509, 538, 557, 645, 646, 649, 651, 652, 664, 665, 666, 667, 669, 671, 673, 689, 789, 791, 795, 824, 825, 844, 845, 847, 848, 849, 852, 860, 868], "simplest": [33, 838, 850, 863, 866], "interact": [33, 44, 59, 62, 837, 882], "submodul": [33, 44, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 839, 842, 845, 847, 849, 853, 856, 857, 863, 868, 872], "likewis": [33, 38, 44, 51, 839, 846, 848, 851, 855, 856, 860, 866, 877, 878], "nativearrai": [33, 44, 45, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 140, 141, 142, 144, 149, 150, 151, 152, 153, 154, 156, 158, 159, 162, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 190, 192, 193, 199, 209, 210, 226, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 335, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 536, 537, 538, 539, 540, 548, 551, 552, 554, 555, 559, 560, 561, 563, 566, 567, 568, 569, 570, 572, 574, 575, 576, 579, 582, 583, 585, 590, 591, 592, 595, 604, 605, 606, 607, 608, 609, 611, 613, 614, 616, 627, 629, 630, 631, 633, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 743, 744, 745, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 815, 843, 846, 850, 852, 855, 856, 857, 859, 860, 864, 865, 868, 872], "alia": [33, 44, 348, 349, 385, 642, 837, 860, 880], "lastli": [33, 44, 843], "subclass": [33, 44, 45, 857, 860, 866, 877], "dict": [33, 44, 45, 58, 62, 65, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 147, 149, 154, 156, 162, 166, 168, 179, 180, 181, 185, 186, 193, 209, 212, 213, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 338, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 382, 391, 411, 412, 413, 414, 432, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 497, 504, 506, 507, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 549, 551, 552, 554, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 586, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 639, 643, 645, 646, 649, 656, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 736, 737, 739, 742, 743, 744, 745, 747, 748, 749, 753, 754, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 791, 792, 807, 810, 812, 819, 825, 843, 846, 872, 877, 878, 880], "recurs": [33, 44, 45, 58, 60, 65, 87, 88, 179, 180, 212, 213, 389, 461, 564, 565, 571, 645, 646, 649, 656, 736, 737, 740, 746, 747, 748, 789, 838, 842, 845, 846, 853, 856, 859, 870], "fashion": [33, 796, 863, 877], "native_arrai": [33, 44, 45, 66, 67, 69, 89, 91, 92, 93, 94, 98, 105, 123, 126, 149, 152, 154, 156, 162, 165, 166, 167, 168, 176, 181, 188, 210, 219, 227, 243, 247, 252, 253, 254, 256, 260, 264, 272, 273, 281, 286, 289, 292, 295, 300, 348, 349, 376, 385, 390, 391, 471, 497, 498, 504, 508, 548, 551, 578, 579, 582, 613, 641, 644, 645, 646, 647, 649, 651, 652, 653, 654, 658, 659, 662, 663, 665, 666, 673, 681, 684, 688, 689, 694, 695, 699, 703, 704, 706, 709, 711, 713, 717, 724, 756, 765, 774, 780, 783, 785, 791, 801, 819, 835, 853, 861, 863], "data_class": [33, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 408, 409, 559, 563, 702, 730], "low": [33, 44, 47, 63, 70, 74, 79, 93, 97, 102, 388, 431, 435, 651, 658, 664, 665, 666, 667, 669, 671, 673, 757, 759, 796, 846, 852, 859, 860, 866, 869, 882, 883], "c": [33, 44, 50, 59, 60, 66, 70, 71, 72, 74, 77, 83, 89, 90, 92, 93, 94, 95, 97, 98, 100, 104, 106, 110, 111, 129, 140, 141, 151, 154, 178, 181, 236, 247, 253, 254, 274, 275, 277, 286, 289, 297, 304, 388, 389, 391, 394, 400, 402, 403, 404, 405, 416, 421, 437, 439, 441, 442, 444, 456, 475, 476, 477, 487, 506, 510, 515, 516, 517, 520, 538, 551, 559, 560, 561, 562, 570, 574, 575, 605, 614, 629, 630, 633, 635, 636, 637, 641, 644, 645, 647, 649, 650, 651, 652, 654, 656, 659, 660, 662, 665, 666, 667, 668, 669, 670, 672, 687, 689, 691, 724, 728, 736, 739, 743, 744, 745, 747, 748, 753, 754, 765, 770, 776, 777, 782, 784, 813, 824, 825, 832, 838, 841, 844, 845, 846, 850, 856, 858, 868, 869, 870, 872, 877, 881, 882], "fundament": [33, 44, 847, 860, 866, 868, 882], "signatur": [33, 44, 391, 400, 497, 536, 848, 849, 850, 851, 855, 859, 863, 864, 866], "matmul": [33, 44, 45, 61, 75, 98, 389, 459, 628, 649, 652, 702, 844, 863, 864, 868, 869], "to_n": [33, 44, 45, 56, 65, 88, 868], "jaxlib": [33, 36, 39, 59, 819, 838, 843, 848, 849, 855, 864, 868], "xla_extens": [33, 39, 819, 843, 848, 849, 855, 864, 868], "arrayimpl": [33, 39, 819], "disabl": [33, 44, 70, 93, 391, 506, 812, 829, 845], "array_mod": [33, 44, 592, 616, 649, 865], "set_array_mod": [33, 44, 616, 649, 865], "ultim": [33, 44, 874, 878], "sigmoid": [33, 44, 45, 56, 64, 70, 86, 93, 314, 380, 395, 522, 641, 806, 868], "z": [33, 44, 45, 57, 58, 66, 69, 70, 71, 75, 76, 79, 81, 83, 89, 92, 93, 94, 98, 99, 100, 102, 106, 115, 116, 150, 151, 153, 154, 214, 236, 237, 241, 243, 246, 248, 253, 264, 265, 268, 269, 270, 272, 273, 278, 280, 282, 283, 284, 285, 293, 302, 313, 314, 348, 349, 351, 380, 385, 390, 400, 466, 468, 469, 470, 471, 472, 478, 482, 493, 535, 536, 539, 546, 551, 563, 566, 567, 574, 575, 591, 604, 606, 607, 615, 628, 644, 646, 647, 649, 652, 653, 654, 656, 658, 659, 660, 662, 683, 692, 697, 698, 702, 709, 711, 712, 713, 717, 739, 743, 745, 753, 757, 758, 759, 762, 767, 777, 778, 780, 781, 782, 809, 844, 846, 849, 850, 868, 869, 878], "divid": [33, 38, 44, 45, 61, 69, 70, 71, 77, 87, 92, 93, 100, 115, 116, 260, 394, 467, 515, 516, 517, 520, 606, 647, 649, 654, 726, 843, 846, 850, 854, 863], "exp": [33, 44, 45, 69, 70, 92, 93, 129, 131, 258, 278, 291, 314, 380, 388, 390, 416, 421, 470, 641, 647, 652, 700, 858, 860], "entir": [33, 44, 45, 47, 60, 70, 83, 84, 87, 93, 94, 106, 107, 226, 256, 258, 298, 299, 348, 349, 385, 388, 391, 400, 412, 413, 414, 497, 539, 572, 646, 647, 662, 663, 778, 779, 780, 781, 782, 783, 784, 785, 786, 810, 825, 837, 838, 839, 842, 843, 846, 848, 850, 852, 859, 860, 861, 863, 866, 868, 870, 874, 877, 882, 884], "congratul": [33, 39], "independ": [33, 45, 70, 79, 93, 102, 236, 253, 286, 296, 394, 395, 520, 522, 647, 652, 658, 683, 701, 756, 831, 842, 848, 850, 857, 868, 877], "div": [34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 880], "sub": [34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 70, 75, 77, 87, 88, 92, 93, 94, 98, 100, 116, 285, 389, 391, 400, 443, 483, 492, 513, 542, 543, 571, 649, 652, 654, 655, 686, 706, 726, 733, 734, 735, 837, 839, 841, 846, 852, 860, 861, 863, 874, 880], "with_numpi": 34, "reproduc": [34, 61, 74, 97, 651, 674, 794, 795, 796, 797, 802, 835, 842, 853, 875], "x_": [34, 46, 111, 297, 647, 880], "66391283": 34, "12516928": 34, "38367081": 34, "03102401": 34, "76419425": 34, "52797794": 34, "90346956": 34, "61316347": 34, "27585283": 34, "66309303": 34, "ivy_repo": 34, "sever": [34, 35, 46, 47, 49, 50, 51, 70, 93, 110, 388, 389, 402, 403, 404, 405, 457, 794, 838, 839, 864, 870], "pro": [34, 35, 36, 46, 47, 48, 49, 50, 51, 874], "turn": [35, 47, 74, 97, 110, 111, 412, 413, 414, 651, 674, 810, 838, 845, 846, 849, 850, 860, 863], "unus": [35, 850, 859], "part": [35, 66, 69, 70, 92, 93, 98, 115, 125, 128, 131, 158, 159, 160, 266, 270, 293, 341, 342, 368, 382, 385, 388, 389, 391, 400, 432, 443, 497, 546, 641, 644, 647, 652, 688, 689, 791, 837, 838, 839, 840, 842, 845, 848, 854, 856, 859, 860, 863, 864, 866, 870, 877, 878, 880, 881, 882], "pick": [35, 47, 809], "trigger": [35, 47, 812, 837, 854], "unif": [35, 37, 47, 49, 832], "55563945": 35, "65538704": 35, "14150524": 35, "46951997": 35, "30220294": 35, "14739668": 35, "57017946": 35, "91962677": 35, "51029003": 35, "59644395": 35, "constitu": [35, 47, 87], "5556394": 35, "655387": 35, "1415051": 35, "4695197": 35, "3022028": 35, "1473966": 35, "5701794": 35, "91962665": 35, "51028997": 35, "5964439": 35, "985": 35, "000": [35, 92, 287, 794, 835, 847, 853], "On": [35, 44, 45, 838, 848, 849, 854, 860, 863, 866], "hand": [35, 69, 389, 459, 794, 842, 848, 849, 854, 856, 863, 870], "learnt": [36, 48], "ivy_norm": 36, "jax_norm": [36, 44, 45], "wider": [36, 48, 599, 622, 649, 848, 865], "avoid": [36, 48, 50, 70, 77, 93, 253, 258, 260, 276, 286, 390, 391, 394, 467, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 513, 515, 516, 517, 553, 569, 571, 594, 599, 622, 647, 649, 654, 720, 721, 722, 724, 726, 727, 729, 731, 796, 797, 838, 839, 844, 845, 846, 847, 848, 852, 857, 860, 863, 864, 865, 866, 882], "act": [36, 48, 70, 93, 311, 376, 386, 839, 850, 865, 870], "shorthand": [36, 48, 50, 863], "pair": [36, 48, 58, 70, 74, 93, 97, 241, 260, 333, 375, 382, 385, 388, 422, 431, 433, 435, 647, 651, 652, 664, 665, 666, 667, 669, 671, 673, 681, 683, 825], "93968587": 36, "26075466": 36, "22723222": 36, "06276492": 36, "47426987": 36, "72835908": 36, "71737559": 36, "50411096": 36, "65419174": 36, "15576624": 36, "implic": [36, 48, 49, 52, 846], "fw": [37, 39, 40, 74, 97, 400, 536, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 791, 838, 863], "mxnet": [37, 39, 40, 222, 646, 819, 837, 838], "miniconda": [37, 39, 40], "multienv": [37, 39, 40], "lazili": [37, 38, 39, 44, 45, 49, 51, 62, 877, 878, 880], "actual": [37, 49, 835, 839, 841, 847, 853, 856, 857, 859, 860, 861, 863, 866, 867, 870, 883], "occur": [37, 44, 45, 49, 62, 67, 69, 81, 90, 92, 104, 168, 287, 303, 645, 647, 659, 660, 762, 763, 767, 768, 769, 770, 831, 842, 847, 849, 852, 865], "altern": [37, 49, 59, 70, 93, 98, 110, 111, 347, 355, 356, 357, 361, 363, 364, 365, 366, 368, 369, 370, 374, 375, 385, 837, 838, 845, 859], "assum": [37, 49, 50, 51, 66, 69, 70, 71, 74, 75, 76, 92, 93, 94, 97, 98, 99, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 326, 342, 348, 349, 351, 354, 372, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 457, 459, 497, 506, 510, 536, 539, 566, 570, 572, 574, 583, 605, 614, 639, 644, 645, 647, 649, 650, 651, 652, 653, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 711, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 810, 824, 838, 842, 844, 847, 848, 851, 861, 863, 866, 870], "201733": 37, "slowli": [37, 49], "norm": [37, 49, 50, 70, 71, 75, 93, 94, 98, 109, 110, 388, 389, 410, 411, 415, 416, 417, 420, 421, 422, 432, 433, 439, 443, 518, 519, 521, 554, 555, 576, 649, 652, 693, 709, 755, 810, 814, 864], "slow": [37, 49, 833, 838, 845], "34431235": [37, 38], "51129461": [37, 38], "06686894": [37, 38], "36452447": [37, 38], "98795534": [37, 38], "15493582": [37, 38], "91630631": [37, 38], "41939619": [37, 38], "78909753": [37, 38], "19475674": [37, 38], "norm_trac": 37, "norm_tran": [37, 49], "subtract": [38, 44, 45, 69, 92, 115, 116, 147, 391, 497, 644, 647, 843, 846, 850], "happen": [38, 44, 45, 305, 647, 831, 838, 839, 840, 849, 859, 863, 877, 878], "wherea": [38, 51, 93, 388, 434, 839, 843, 846, 848, 849, 850, 855, 856, 863, 884], "graph_transpil": [38, 876], "often": [39, 70, 390, 465, 836, 842, 852, 855, 856, 860, 863, 870, 874, 883], "fortun": [39, 40, 842], "everyth": [39, 59, 824, 831, 837, 838, 839, 840, 841, 847, 850, 859, 860, 861, 863, 870], "practic": [39, 839, 844, 847, 860, 862], "jax_kornia": [39, 44, 45, 831, 877], "000000000034": [39, 44, 45, 831, 877], "raw_img": [39, 44, 45, 831, 877], "sharp": [39, 44, 45, 831], "prefer": [39, 44, 45, 260, 647, 838, 846, 852, 853, 857, 860, 871, 874, 875, 882], "whole": [40, 70, 93, 391, 394, 505, 518, 519, 521, 839, 845, 854], "full": [40, 70, 75, 93, 97, 98, 110, 111, 113, 178, 265, 273, 336, 337, 338, 339, 340, 382, 389, 390, 391, 462, 463, 469, 470, 499, 502, 593, 602, 617, 625, 644, 645, 647, 649, 651, 652, 666, 668, 669, 670, 672, 695, 699, 701, 702, 795, 802, 831, 838, 839, 845, 848, 851, 852, 855, 856, 860, 863, 866, 868, 870, 882, 884], "complex": [40, 44, 45, 58, 64, 69, 70, 75, 83, 86, 90, 92, 93, 98, 106, 123, 124, 125, 126, 127, 128, 129, 130, 131, 155, 156, 171, 185, 194, 200, 233, 234, 235, 236, 237, 238, 239, 242, 250, 251, 253, 254, 256, 258, 266, 267, 268, 269, 270, 274, 275, 276, 277, 286, 288, 289, 291, 293, 296, 297, 298, 299, 300, 303, 304, 308, 313, 314, 316, 351, 356, 357, 380, 385, 388, 389, 400, 411, 422, 432, 433, 437, 442, 443, 444, 455, 457, 544, 545, 606, 607, 641, 644, 645, 647, 649, 652, 659, 662, 687, 688, 689, 693, 700, 702, 704, 706, 709, 765, 780, 781, 783, 795, 806, 825, 834, 837, 840, 845, 848, 850, 857, 860, 863, 864, 866, 868, 870, 872, 875, 877, 882], "neccessari": 40, "set_random_se": [40, 61], "301436": 40, "_c": 40, "0x7f252c392390": 40, "flatten": [40, 43, 44, 45, 58, 60, 63, 70, 71, 75, 77, 80, 81, 93, 94, 98, 100, 103, 104, 353, 369, 385, 389, 391, 400, 440, 486, 496, 501, 506, 507, 510, 512, 534, 541, 542, 543, 544, 545, 546, 559, 563, 649, 652, 654, 659, 660, 690, 697, 709, 718, 723, 725, 762, 763, 767, 768, 769, 770, 789, 791, 831, 859, 866], "keyword": [40, 44, 45, 60, 62, 65, 66, 70, 87, 93, 116, 152, 287, 388, 391, 400, 436, 497, 536, 550, 553, 586, 615, 644, 647, 649, 652, 656, 662, 703, 742, 783, 789, 791, 795, 811, 812, 824, 837, 843, 846, 848, 849, 857, 859, 860, 861, 863, 864, 866, 877, 878, 880], "input_arrai": [40, 44, 45, 859], "torch_model": [40, 44, 45, 62], "159": [40, 86, 123, 641, 651, 675], "thank": 40, "fledg": [40, 838], "output_arrai": [40, 44, 45, 70, 467], "0893": 40, "1504": 40, "1372": 40, "0991": 40, "0867": 40, "0851": 40, "0911": 40, "0804": 40, "0926": 40, "0881": 40, "softmaxbackward0": 40, "furthermor": 40, "relat": [40, 260, 647, 831, 833, 836, 837, 838, 839, 845, 852, 860, 863, 864, 865, 866, 877], "regress": [41, 882], "boiler": 42, "plate": 42, "mathemat": [42, 75, 98, 236, 241, 253, 258, 260, 276, 286, 642, 647, 652, 693, 709, 848, 860, 866, 882], "minut": [42, 838, 847], "tensorshap": [42, 43], "torch_x": [42, 831], "tf_x": [42, 831], "torch_out": 42, "tf_out": 42, "example_model": 43, "simplemodel": 43, "tfsimplemodel": 43, "tf_model": [43, 877], "compiled_model": 43, "checkout": [44, 59, 839, 842, 863], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 44, "theoret": 44, "aspect": [44, 45, 832, 858, 882, 884], "easiest": [44, 831, 833, 838, 871], "defer": [44, 45, 837, 843, 848, 849, 856, 859, 860, 863], "similarli": [44, 57, 152, 160, 236, 341, 348, 349, 382, 385, 644, 647, 844, 848, 860, 866, 875], "essenc": [44, 883], "becom": [44, 70, 93, 110, 359, 385, 391, 477, 654, 717, 819, 839, 840, 846, 848, 850, 852, 859, 870, 878], "slide": [44, 70, 74, 93, 97, 388, 407, 408, 409, 425, 426, 427, 428, 431, 435, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 810], "regressor": [44, 45], "input_dim": [44, 45, 59], "output_dim": [44, 45, 59], "linear0": [44, 45, 56], "linear1": [44, 45, 56], "adam": [44, 45, 56, 60, 72, 95, 550, 629, 630, 635, 649, 650, 814, 882], "n_training_exampl": [44, 45], "2000": [44, 45, 93, 327, 382], "random_norm": [44, 45, 74, 75, 79, 97, 98, 102, 559, 649, 651, 652, 658, 666, 668, 669, 670, 672, 673, 677, 702], "linspac": [44, 45, 66, 89, 139, 644, 855, 866, 868], "execute_with_gradi": [44, 45, 56, 60, 650, 870], "lambda": [44, 45, 61, 63, 93, 136, 138, 310, 320, 558, 571, 631, 632, 634, 640, 643, 649, 650, 652, 656, 688, 743, 744, 748, 837, 856, 857, 858, 861, 866, 869], "5f": [44, 45], "nonetheless": [44, 45], "gc": [44, 45, 571, 649], "decompos": [44, 45, 70, 93, 110, 113, 336, 337, 338, 339, 340, 361, 368, 382, 385, 389, 453, 458, 461, 464, 860], "said": [44, 45, 796, 864, 878], "otherwis": [44, 45, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 139, 141, 142, 147, 149, 150, 151, 154, 156, 162, 165, 166, 168, 169, 171, 172, 173, 174, 175, 184, 188, 192, 193, 209, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 322, 323, 324, 326, 336, 337, 338, 339, 340, 347, 348, 349, 350, 351, 353, 354, 355, 363, 364, 370, 372, 374, 375, 376, 380, 382, 385, 388, 389, 391, 394, 407, 408, 409, 412, 413, 414, 432, 445, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 483, 485, 487, 488, 489, 496, 504, 506, 507, 508, 510, 513, 515, 517, 518, 519, 521, 523, 535, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 583, 590, 591, 605, 606, 607, 609, 611, 613, 614, 615, 627, 631, 633, 639, 643, 644, 645, 646, 647, 649, 650, 651, 652, 655, 656, 659, 660, 661, 662, 663, 665, 666, 667, 668, 674, 675, 676, 678, 681, 682, 683, 684, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 702, 706, 708, 709, 711, 712, 713, 717, 720, 721, 722, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 749, 756, 757, 758, 759, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 794, 795, 810, 812, 813, 819, 831, 839, 843, 846, 848, 849, 850, 856, 857, 859, 863, 868, 877, 878], "x0": [44, 45, 63, 94, 551, 649, 850], "normalize_trac": [44, 45], "html": [44, 45, 59, 69, 70, 92, 93, 160, 168, 256, 266, 267, 282, 341, 348, 349, 382, 385, 388, 391, 400, 432, 506, 536, 644, 645, 647, 652, 654, 662, 700, 701, 732, 782, 851], "fname": [44, 45, 61, 63, 812], "anticip": [44, 45], "addition": [44, 45, 846, 859, 860], "normalize_native_comp": [44, 45], "return_backend_compiled_fn": 44, "immedi": [44, 45, 829, 831, 837, 838, 869], "eager_graph": [44, 45, 831, 877, 878], "lazy_graph": [44, 45, 831, 877, 878], "thought": [44, 45, 838, 839, 855], "matter": [44, 45, 50, 850], "haven": [44, 45, 50, 882], "jax_out": [44, 45], "ideal": [44, 45, 847, 848, 860, 866], "worth": [44, 45], "differenti": [44, 45, 308, 378, 379, 380, 387, 874, 882], "chosen": [44, 45, 63, 113, 139, 241, 644, 647, 659, 766, 837, 847, 860], "plai": [44, 45, 390, 469, 831, 834, 838, 840, 843, 849, 853, 860, 863, 869, 882], "role": [44, 45, 831, 834, 839, 840, 849, 860, 869, 883], "dl": [44, 45], "effortlessli": [44, 45], "previous": [44, 45, 617, 649, 819, 837, 838, 844, 856, 858, 863, 868], "default_devic": [44, 45, 219, 222, 223, 224, 230, 231, 646, 849, 852, 853], "as_n": [44, 45, 67, 68, 87, 90, 91, 171, 172, 173, 174, 175, 176, 182, 209, 210, 645, 646, 848], "certainli": [44, 45], "unnecessari": [44, 45, 860], "extend": [44, 45, 70, 93, 391, 400, 497, 539, 844, 845, 848, 851, 852, 855, 860, 864, 870, 882], "infrastructur": [44, 45], "least": [44, 69, 70, 75, 92, 93, 253, 271, 286, 388, 391, 400, 416, 421, 475, 476, 477, 486, 488, 536, 647, 652, 659, 692, 765, 839, 843, 847, 848, 849, 850, 856, 859, 863, 877], "coco": 44, "seamlessli": [45, 863], "therefor": [45, 50, 66, 69, 70, 75, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 192, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 341, 342, 348, 349, 351, 354, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 490, 497, 499, 501, 506, 510, 511, 536, 539, 543, 552, 560, 561, 566, 570, 572, 574, 576, 590, 605, 609, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 837, 839, 842, 843, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 859, 860, 861, 863, 864, 866, 868, 869, 870, 882], "wide": [45, 831, 839, 863, 882], "plenti": 45, "resourc": [45, 832, 837, 838, 847], "visit": [45, 837, 838, 839, 847], "page": [45, 831, 837, 838, 839, 845, 847, 853, 871, 880], "newli": [46, 47, 59, 61, 67, 90, 165, 553, 645, 649, 839, 847, 859, 863], "randon": [46, 47, 49, 50, 51], "mean_": 46, "std_": 46, "detect": [46, 50, 69, 87, 92, 268, 647, 656, 736, 747, 837, 838, 844, 846, 847, 854, 863], "inspect": [46, 50, 549, 649], "__": [46, 47, 48, 49, 50, 51, 87, 850], "script": [47, 831, 838, 839, 842, 847, 850, 869, 870, 882], "comp": 47, "low_level": 47, "chain": [47, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 181, 185, 186, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 412, 413, 414, 432, 465, 466, 467, 468, 469, 470, 471, 472, 481, 482, 504, 506, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 655, 656, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 738, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 815, 843, 846, 858, 860, 868, 870, 882], "un": [47, 183, 645, 848, 868], "partial_comp": 47, "time_funct": 47, "express": [47, 69, 70, 92, 93, 111, 234, 238, 240, 241, 250, 252, 292, 298, 303, 372, 385, 647, 816, 825, 851, 860, 868, 869, 882, 883], "maxim": [47, 856, 859, 869], "conclud": [48, 864], "norm_comp": [49, 50], "global": [49, 50, 60, 71, 87, 94, 116, 171, 172, 173, 174, 175, 224, 225, 226, 596, 597, 600, 606, 607, 619, 620, 623, 645, 646, 649, 802, 813, 819, 838, 843, 844, 847, 848, 849, 852, 856, 860, 868, 882], "b": [50, 64, 69, 70, 71, 74, 75, 83, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 142, 147, 148, 149, 151, 154, 156, 162, 165, 166, 167, 168, 176, 186, 188, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 380, 382, 385, 388, 389, 390, 391, 395, 398, 400, 407, 408, 409, 410, 412, 413, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 438, 441, 443, 445, 449, 452, 456, 459, 464, 465, 466, 468, 469, 470, 471, 475, 476, 477, 478, 481, 482, 483, 484, 487, 488, 489, 491, 492, 493, 494, 496, 497, 504, 506, 507, 508, 509, 510, 513, 514, 519, 521, 523, 524, 526, 527, 529, 536, 537, 538, 539, 541, 543, 546, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 583, 590, 591, 605, 606, 607, 609, 613, 614, 627, 629, 630, 631, 633, 635, 636, 637, 639, 641, 644, 645, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 712, 713, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 739, 742, 743, 744, 745, 747, 748, 753, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 824, 825, 829, 831, 832, 835, 839, 841, 842, 844, 846, 847, 850, 853, 856, 858, 861, 867, 868, 869, 873, 878, 881], "prioriti": [50, 87, 819, 834, 837, 839, 840, 849, 859], "normalize_via_oper": 50, "determin": [50, 69, 70, 75, 77, 81, 84, 87, 92, 93, 94, 98, 105, 107, 110, 113, 115, 116, 145, 168, 170, 177, 183, 184, 185, 186, 188, 189, 190, 205, 215, 217, 218, 229, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 253, 256, 258, 260, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 283, 286, 291, 295, 298, 299, 300, 301, 302, 303, 304, 307, 317, 321, 367, 372, 380, 385, 388, 389, 390, 391, 400, 424, 432, 443, 465, 466, 498, 506, 510, 536, 548, 551, 572, 573, 577, 578, 579, 580, 581, 582, 609, 627, 644, 645, 646, 647, 649, 652, 654, 655, 660, 663, 682, 683, 684, 686, 690, 691, 692, 694, 695, 697, 698, 700, 701, 706, 708, 709, 718, 733, 734, 735, 767, 768, 769, 770, 771, 785, 786, 796, 802, 809, 813, 846, 848, 849, 851, 856, 860, 863, 865, 866], "think": [50, 837, 839, 847, 850, 866, 883], "uniqu": [50, 60, 70, 71, 81, 93, 94, 104, 388, 389, 391, 436, 459, 496, 497, 512, 583, 649, 655, 656, 660, 733, 734, 735, 738, 742, 767, 768, 769, 770, 796, 831, 842, 846, 856, 860, 861, 862, 866, 870, 874], "rule": [50, 67, 69, 70, 75, 90, 92, 93, 98, 165, 168, 191, 192, 193, 242, 253, 286, 288, 295, 297, 305, 307, 388, 391, 400, 432, 485, 536, 645, 647, 652, 654, 682, 683, 690, 694, 697, 701, 718, 796, 824, 842, 843, 846, 847, 848, 850, 854, 855, 856, 858, 863, 866, 883], "broadcast": [50, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 342, 348, 349, 350, 351, 352, 353, 356, 357, 359, 361, 363, 365, 366, 367, 368, 372, 380, 382, 385, 388, 389, 390, 391, 394, 395, 400, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 424, 425, 426, 427, 430, 432, 437, 439, 440, 448, 449, 454, 455, 457, 466, 467, 468, 469, 471, 472, 478, 482, 485, 490, 498, 499, 500, 501, 502, 504, 506, 508, 510, 511, 515, 518, 519, 521, 522, 523, 525, 526, 536, 537, 538, 539, 542, 543, 544, 545, 546, 554, 555, 559, 560, 561, 566, 567, 576, 590, 591, 629, 630, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 703, 704, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 766, 770, 771, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 796, 824, 846, 848, 850, 851, 852, 863, 864, 868], "elementwis": [50, 70, 78, 93, 101, 313, 315, 375, 380, 652, 657, 707, 755, 856, 864, 868], "fact": [50, 110, 839, 842, 847, 860, 863, 869], "consum": [50, 791, 846, 847, 855, 861, 863], "thrown": [50, 576, 649, 838, 843, 849, 852, 854, 870], "doesn": [50, 576, 594, 649, 789, 810, 837, 838, 844, 846, 847, 848, 849, 850, 853, 854, 856, 858, 863, 866, 868, 870, 878], "consider": [50, 837, 850, 855, 866], "standalon": [51, 837, 843, 863, 872, 881, 883], "static": [51, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 119, 120, 142, 332, 388, 409, 422, 427, 436, 458, 464, 504, 516, 609, 644, 651, 678, 697, 807, 812, 860, 865, 870, 874, 882, 883, 884], "flow": [52, 846, 878, 882, 883], "statement": [52, 57, 847, 859, 863, 866, 870, 877, 878], "opposit": 52, "exclud": [52, 83, 93, 106, 139, 160, 341, 382, 537, 538, 644, 658, 759, 775, 794, 797, 819, 850, 869, 878], "todo": [53, 54, 55, 60, 63, 93, 538, 837, 848, 860], "aim": [56, 835, 839, 842, 853, 857, 860, 863, 867, 882, 884], "interfac": [56, 89, 147, 644, 870, 872, 874, 882], "set_framework": [56, 63], "underneath": [56, 847], "sai": [56, 837, 838, 853, 857], "a_min": 56, "a_max": 56, "tensforflow": 56, "clip_by_valu": [56, 868], "clip_value_min": 56, "clip_value_max": 56, "clamp": [56, 70, 93, 313, 380, 868], "devicearrai": [56, 843, 860, 868], "accept": [56, 65, 66, 69, 70, 75, 88, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 341, 342, 348, 349, 351, 354, 355, 377, 382, 385, 387, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 497, 506, 510, 536, 539, 543, 552, 560, 561, 566, 570, 572, 574, 576, 590, 605, 609, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 837, 838, 839, 843, 846, 848, 849, 850, 851, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 872], "jax_concat": 56, "tf_concat": 56, "np_concat": 56, "torch_concat": 56, "85": [56, 64, 70, 79, 86, 92, 93, 95, 97, 102, 116, 125, 238, 247, 248, 292, 308, 309, 312, 380, 400, 537, 606, 633, 641, 647, 649, 650, 651, 658, 675, 757, 758, 759], "mymodel": 56, "x_in": 56, "reduce_mean": [56, 831], "49040043354034424": 56, "48975786566734314": 56, "4892795979976654": 56, "48886892199516296": 56, "4884953498840332": 56, "4881443977355957": 56, "4878086447715759": 56, "48748287558555603": 56, "48716384172439575": 56, "48684927821159363": 56, "48653748631477356": 56, "48622724413871765": 56, "4859171509742737": 56, "48560672998428345": 56, "48529526591300964": 56, "4849821627140045": 56, "48466697335243225": 56, "4843493402004242": 56, "4840289056301117": 56, "4837053418159485": 56, "4833785891532898": 56, "4830484390258789": 56, "48271444439888": 56, "48237672448158264": 56, "48203518986701965": 56, "48168954253196716": 56, "4813397228717804": 56, "4809857904911041": 56, "48062753677368164": 56, "48026490211486816": 56, "479898065328598": 56, "47952669858932495": 56, "4791509211063385": 56, "4787706732749939": 56, "47838595509529114": 56, "4779967665672302": 56, "47760307788848877": 56, "4772048890590668": 56, "47680220007896423": 56, "47639501094818115": 56, "47598329186439514": 56, "4755673110485077": 56, "4751465618610382": 56, "4747215211391449": 56, "4742920398712158": 56, "47385817766189575": 56, "47341999411582947": 56, "47297725081443787": 56, "4725303053855896": 56, "47207894921302795": 56, "47162333130836487": 56, "47116345167160034": 56, "470699280500412": 56, "47023090720176697": 56, "4697583019733429": 56, "55": [56, 64, 93, 102, 131, 247, 306, 400, 537, 574, 647, 649, 652, 658, 662, 691, 697, 758, 759, 777, 842], "46928152441978455": 56, "46880054473876953": 56, "4683155119419098": 56, "4678264260292053": 56, "46733325719833374": 56, "46683603525161743": 56, "4663347601890564": 56, "4658295214176178": 56, "465320348739624": 56, "4648073613643646": 56, "46429020166397095": 56, "4637692868709564": 56, "46324464678764343": 56, "4627160429954529": 56, "4621836841106415": 56, "4616474211215973": 56, "46110764145851135": 56, "72": [56, 70, 79, 93, 95, 258, 362, 385, 388, 410, 420, 633, 647, 650, 652, 662, 697, 758, 777], "460563987493515": 56, "4600166976451874": 56, "74": [56, 58, 69, 102, 248, 278, 647, 652, 694], "45946577191352844": 56, "45891112089157104": 56, "45835286378860474": 56, "4577910006046295": 56, "78": [56, 72, 297, 635, 647, 650, 652, 658, 662, 697, 758, 777], "45722562074661255": 56, "45665669441223145": 56, "80": [56, 70, 93, 362, 385, 389, 400, 456, 537, 652, 656, 662, 697, 747, 777], "4560841917991638": 56, "81": [56, 60, 69, 75, 90, 92, 98, 102, 181, 251, 276, 277, 301, 400, 537, 645, 647, 652, 656, 658, 662, 690, 694, 707, 744, 759, 777, 863], "4555082619190216": 56, "45492875576019287": 56, "45434585213661194": 56, "45375964045524597": 56, "4531698524951935": 56, "4525766670703888": 56, "45198020339012146": 56, "4513803720474243": 56, "4507772624492645": 56, "4501707851886749": 56, "4495610296726227": 56, "4489481747150421": 56, "44833192229270935": 56, "4477125108242035": 56, "44708991050720215": 56, "44646409153938293": 56, "44583529233932495": 56, "4452032148838043": 56, "44456806778907776": 56, "4439": 56, "selectbackward0": 56, "ivy_compil": 57, "ic": 57, "numer": [57, 66, 67, 69, 70, 71, 75, 79, 80, 83, 90, 92, 93, 94, 98, 102, 103, 105, 115, 116, 152, 165, 233, 236, 249, 253, 258, 259, 260, 267, 268, 269, 272, 281, 282, 286, 288, 289, 290, 291, 295, 296, 297, 301, 302, 306, 307, 388, 390, 395, 400, 432, 467, 523, 536, 596, 597, 606, 607, 619, 620, 644, 645, 647, 649, 652, 658, 659, 662, 683, 690, 692, 697, 700, 702, 704, 706, 708, 757, 758, 759, 761, 762, 763, 765, 766, 771, 778, 781, 783, 794, 795, 796, 797, 809, 835, 848, 853, 858, 860, 861, 863, 864, 865, 866, 868, 882], "anyth": [57, 70, 93, 400, 542, 543, 839, 852, 863, 864, 882, 883], "affect": [57, 63, 70, 390, 470, 847, 860], "variabl": [57, 59, 60, 62, 70, 71, 72, 78, 87, 93, 94, 95, 101, 135, 136, 138, 335, 382, 388, 389, 391, 395, 400, 434, 460, 498, 524, 535, 536, 552, 576, 577, 578, 579, 582, 609, 630, 631, 633, 635, 636, 637, 643, 649, 650, 652, 655, 657, 701, 733, 734, 735, 755, 791, 802, 807, 809, 810, 811, 812, 813, 814, 815, 839, 844, 848, 851, 855, 858, 859, 863, 864, 868, 870, 871, 878, 883], "original_fn": 57, "100000": 57, "co": [57, 58, 69, 71, 92, 251, 256, 258, 299, 563, 647, 649, 836, 848, 869], "sin": [57, 69, 71, 92, 251, 256, 258, 299, 563, 647, 649, 843, 869], "tan": [57, 69, 92, 550, 647, 649, 851, 855, 856, 859, 860, 869], "comp_fn": 57, "compile_graph": [57, 63], "expected_result": 57, "compiled_result": 57, "irrelev": [57, 847, 848, 850], "opeat": 57, "_layer": [57, 869], "net": [57, 62, 63, 869], "compiled_net": 57, "latest": [58, 60, 69, 70, 92, 93, 168, 256, 266, 267, 282, 348, 349, 385, 388, 391, 400, 432, 434, 506, 536, 645, 647, 652, 654, 662, 700, 701, 732, 782, 810, 831, 837, 838, 839, 842, 844, 847, 851, 853, 864, 870, 871, 877], "pypi": [58, 60, 63, 837, 838, 864, 870], "pkg": [58, 60, 63], "public": [58, 60, 63, 556, 649, 847, 858], "revis": [58, 60, 839], "req": [58, 60], "tabqrujw": 58, "quiet": [58, 60], "commit": [58, 60, 834, 835, 837, 840, 842, 850, 862, 863], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 58, "cp39": [58, 60], "manylinux_2_12_x86_64": [58, 60], "manylinux2010_x86_64": [58, 60], "manylinux_2_17_x86_64": [58, 60, 838], "manylinux2014_x86_64": [58, 59, 60], "495": [58, 60], "nvidia_ml_pi": [58, 60], "pypars": [58, 60, 63], "ivy_cor": [58, 60, 63, 838], "1338326": 58, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 58, "njrc_e6b": 58, "07": [58, 60, 72, 76, 92, 95, 99, 102, 241, 274, 277, 278, 297, 388, 420, 619, 629, 630, 632, 633, 634, 635, 647, 649, 650, 653, 712, 713, 758, 811, 814], "2e": [58, 60], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [58, 60], "4845": [58, 60], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 58, "b6": [58, 60], "0d": [58, 60], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [58, 60], "uninstal": [58, 60, 63], "vnd": [58, 60, 63], "json": [58, 60, 63, 87, 838, 853], "psst": 58, "pickl": [58, 59, 87, 812, 846], "imageio": 58, "urllib": [58, 63], "_src": 58, "back": [58, 70, 77, 93, 100, 391, 487, 509, 592, 616, 649, 651, 654, 678, 724, 809, 814, 825, 838, 843, 848, 849, 852, 857, 858, 865, 870, 871], "tf_cpp_min_log_level": 58, "mkdir": [58, 59, 60, 838, 847], "perceiv": [58, 59], "touch": 58, "io_processor": 58, "position_encod": 58, "jmp": 58, "tabul": 58, "29359": 58, "29k": 58, "67k": 58, "002": 58, "30179": 58, "47k": 58, "8107": 58, "9k": 58, "92k": 58, "itertool": 58, "preprocessor": 58, "vector": [58, 66, 70, 71, 74, 75, 93, 94, 97, 98, 110, 111, 113, 152, 378, 379, 387, 388, 389, 391, 394, 395, 400, 411, 442, 447, 455, 457, 462, 497, 500, 502, 520, 524, 536, 555, 559, 576, 628, 644, 649, 651, 652, 675, 678, 683, 687, 688, 690, 692, 697, 702, 703, 707, 708, 709, 710, 794, 810, 882], "perceiverbackbon": 58, "input_preprocessor": 58, "_input_preprocessor": 58, "_encod": 58, "__call__": [58, 791, 810, 811, 812, 831, 877], "is_train": 58, "po": [58, 825], "input_mask": 58, "network_input_is_1d": 58, "_input_is_1d": 58, "queri": [58, 59, 74, 87, 97, 211, 225, 569, 595, 646, 649, 651, 678, 681, 810, 846, 848, 853, 882], "decod": 58, "cross": [58, 60, 75, 76, 98, 99, 111, 652, 653, 711, 712, 713, 847, 848], "attend": [58, 651, 678], "encoder_queri": 58, "latent": [58, 655, 734, 735], "imagepreprocessor": 58, "deal": [58, 812, 835, 849, 856, 858, 860, 863, 870], "image_s": 58, "fourier_pos_config": 58, "position_encoding_typ": 58, "fourier": [58, 70, 93, 388, 411, 416, 417, 421, 422, 432, 433, 436, 563, 649], "fourier_position_encoding_kwarg": 58, "concat_po": 58, "max_resolut": 58, "num_band": [58, 71, 94, 563, 649], "sine_onli": 58, "prep_typ": 58, "spatial_downsampl": 58, "cross_attend_widening_factor": 58, "cross_attention_shape_for_attn": 58, "kv": 58, "dropout_prob": 58, "num_block": 58, "num_cross_attend_head": 58, "num_self_attend_head": 58, "num_self_attends_per_block": 58, "num_z_channel": 58, "self_attend_widening_factor": 58, "use_query_residu": 58, "z_index_dim": 58, "z_pos_enc_init_scal": 58, "perceiver_backbon": [58, 831], "perceiverencod": 58, "At": [58, 837, 838, 839, 842, 853, 863, 864, 882], "publish": [58, 831, 870, 877], "thankfulli": [58, 863], "perceiver_io": [58, 59], "imagenet_fourier_position_encod": 58, "pystat": 58, "imagenet_checkpoint": 58, "rb": 58, "ckpt": 58, "09": [58, 64, 69, 95, 102, 131, 291, 301, 629, 641, 647, 650, 758], "173": [58, 75, 652, 690], "194": 58, "125": [58, 70, 75, 98, 247, 359, 385, 390, 466, 647, 652, 707], "177": [58, 60], "193776248": 58, "185m": 58, "octet": 58, "184": 58, "80m": 58, "144mb": 58, "144": 58, "mean_rgb": 58, "stddev_rgb": 58, "im": 58, "denorm": 58, "resize_and_center_crop": 58, "crop": [58, 70, 93, 388, 417, 422, 433], "center": [58, 809], "image_height": [58, 60], "image_width": 58, "padded_center_crop_s": 58, "offset_height": 58, "offset_width": 58, "crop_window": 58, "inter_cub": 58, "ye": [58, 870], "dummy_input": [58, 831], "transpili": 58, "torch_perceiver_backbon": 58, "quicker": 58, "params_v": [58, 831, 877], "perceiverioclassifi": [58, 831], "max_pool": [58, 831], "Of": [58, 843, 859, 860], "cours": [58, 838, 839, 842, 843, 850, 859, 860, 866, 870], "468": 58, "huggingface_hub": 58, "multiprocess": [58, 87, 116, 649, 870], "py39": 58, "132": [58, 93], "pyarrow": 58, "xxhash": 58, "pyyaml": 58, "2021": [58, 70, 93, 375, 385, 831], "aiohttp": 58, "async": 58, "timeout": [58, 87, 116, 600, 623, 649, 865], "0a3": 58, "async_timeout": 58, "frozenlist": 58, "manylinux_2_5_x86_64": [58, 63], "manylinux1_x86_64": [58, 63], "158": 58, "attr": [58, 848], "aiosign": 58, "multidict": 58, "114": [58, 388, 410, 420], "yarl": 58, "264": [58, 656, 736], "2022": [58, 59], "pytz": 58, "2020": [58, 842, 882], "dateutil": [58, 63], "wikiart": 58, "paint": [58, 831, 868, 874], "load_dataset": [58, 877, 878], "n_sampl": [58, 70, 93, 389, 391, 438, 446, 501], "10000": [58, 60, 66, 89, 151, 644], "huggan": 58, "split": [58, 59, 60, 64, 69, 70, 77, 86, 87, 92, 93, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 224, 225, 226, 304, 308, 313, 314, 316, 361, 368, 380, 391, 483, 492, 513, 559, 586, 641, 646, 647, 649, 651, 654, 664, 671, 672, 729, 791, 806, 810, 831, 832, 839, 847, 868, 870], "wiki_art": 58, "gib": 58, "unknown": [58, 794], "huggan___parquet": 58, "36ee951979f9b56c": 58, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 58, "parquet": 58, "subsequ": [58, 819, 838, 843, 847, 848, 850, 855, 856, 859, 863, 883], "curl": [58, 838], "2fwikiart": 58, "xferd": 58, "dload": 58, "upload": [58, 863], "spent": 58, "25936": 58, "278k": 58, "abstract_expression": 58, "action_paint": 58, "analytical_cub": 58, "art_nouveau": 58, "baroqu": 58, "color_field_paint": 58, "contemporary_r": 58, "cubism": 58, "early_renaiss": 58, "expression": 58, "fauvism": 58, "high_renaiss": 58, "impression": 58, "mannerism_late_renaiss": 58, "minim": [58, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 382, 388, 390, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 699, 700, 702, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 825, 851, 859, 861, 866, 868, 878], "naive_art_primitiv": 58, "new_real": 58, "northern_renaiss": 58, "pointil": 58, "pop_art": 58, "post_impression": 58, "realism": 58, "rococo": 58, "romantic": 58, "symbol": [58, 824, 837, 838, 882, 883], "synthetic_cub": 58, "ukiyo_": 58, "custom": [58, 70, 93, 312, 324, 377, 380, 387, 794, 824, 833, 841, 847, 852, 857, 861, 863, 866, 882], "hugginfac": 58, "customdataset": 58, "__len__": [58, 846], "__getitem__": [58, 87, 846], "idx": [58, 59, 60, 549, 649, 849], "random_split": 58, "224x224": 58, "val_siz": 58, "dataset_train": 58, "dataset_v": 58, "dataset_test": 58, "dataloader_train": 58, "dataloader_v": 58, "dataloader_test": 58, "train_featur": 58, "train_label": 58, "train_step": 58, "running_loss": [58, 60], "last_loss": 58, "training_load": 58, "intra": 58, "report": [58, 834, 837, 863], "zero_grad": 58, "999": [58, 72, 92, 95, 304, 629, 630, 635, 637, 647, 650, 814], "epoch_numb": 58, "best_vloss": 58, "1_000_000": 58, "running_vloss": 58, "vdata": 58, "vinput": 58, "vlabel": 58, "voutput": 58, "vloss": 58, "avg_vloss": 58, "model_path": 58, "model_": 58, "state_dict": [58, 811, 812], "highest": [58, 70, 79, 93, 102, 332, 335, 382, 658, 757, 848], "energi": 58, "mayb": [58, 59, 65, 831, 838, 847, 868], "deploi": [58, 831, 847, 872, 877, 882, 884], "percieverio": 59, "ai": [59, 847], "contribut": [59, 70, 93, 400, 539, 834, 836, 838, 839, 840, 845, 853, 854, 860, 861, 869, 871, 878], "invit": [59, 837, 840, 860, 866], "g4ar9q7dtn": 59, "step1": 59, "printf": 59, "8packag": 59, "share": [59, 87, 199, 645, 794, 795, 831, 844, 846, 850, 856, 858, 860, 861, 863, 866, 868, 875], "googledr": 59, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 59, "file_id": 59, "drive": [59, 60], "uc": 59, "tee": [59, 838], "file_id_wget_cmd": 59, "perl": 59, "pe": 59, "g": [59, 61, 62, 70, 79, 81, 83, 85, 93, 102, 108, 110, 164, 193, 206, 253, 266, 286, 293, 296, 348, 349, 385, 388, 389, 391, 395, 400, 425, 427, 464, 506, 522, 523, 524, 525, 526, 537, 538, 645, 646, 647, 652, 656, 658, 660, 662, 688, 689, 693, 700, 702, 703, 709, 739, 743, 745, 748, 753, 757, 758, 759, 767, 768, 769, 770, 775, 776, 778, 780, 781, 783, 809, 829, 832, 837, 838, 841, 842, 844, 845, 846, 858, 860, 863, 868, 870, 872], "uuid": 59, "anywai": [59, 843, 857, 860], "bin": [59, 70, 93, 400, 534, 539, 838, 839, 842, 846], "bash": [59, 838, 839, 842], "step2": 59, "interpret": [59, 66, 70, 89, 93, 140, 141, 147, 153, 390, 400, 467, 536, 644, 847, 883], "sudo": [59, 838], "apt": [59, 838], "yf": 59, "step3": 59, "xvzf": 59, "rm": [59, 61, 833, 839], "step4": 59, "symlink": 59, "unzip": [59, 60], "fr": 59, "l": [59, 70, 75, 92, 98, 280, 389, 390, 442, 465, 651, 652, 678, 682, 687, 688, 689, 692, 706, 839, 841], "ln": 59, "sf": 59, "la": 59, "step5": 59, "step6": 59, "ipkykernel": 59, "step7": 59, "engbjapanpython3": 59, "ipykernel": 59, "reconnect": 59, "sy": 59, "oct": 59, "gcc": 59, "lf": 59, "upgrad": 59, "cuda11": 59, "cudnn805": 59, "cp38": [59, 63, 838], "helper": [59, 789, 791, 792, 798, 800, 801, 835, 845, 848, 852, 853, 862, 872], "feedforward": 59, "prenorm": 59, "perceiveriospec": 59, "fetch": [59, 571, 649, 838, 839, 842, 847], "ogbanugot": 59, "xmartlab": 59, "caffeflow": 59, "fetch_class": 59, "class_label": 59, "ground_truth": 59, "127": [59, 67, 70, 75, 90, 93, 181, 372, 385, 645, 652, 690], "path_to_imag": 59, "get_imag": 59, "spine": 59, "set_vis": 59, "bottom": [59, 559, 649, 837, 838, 847, 853], "tick_param": 59, "set_xticklabel": 59, "set_yticklabel": 59, "show_result": 59, "listdir": [59, 60], "endswith": 59, "this_dir": 59, "dirnam": 59, "add_subplot": 59, "xtick": 59, "ytick": 59, "green": [59, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 830, 837, 838, 839], "red": 59, "perceiver_io_img_classif": 59, "normalize_imag": 59, "batch_shap": [59, 74, 79, 89, 97, 102, 145, 154, 644, 651, 652, 658, 677, 681, 710, 756, 810, 866, 868], "img_dim": 59, "queries_dim": 59, "learn_queri": 59, "load_weight": 59, "num_input_ax": 59, "network_depth": 59, "num_lat_att_per_lay": 59, "query_shap": 59, "num_fourier_freq_band": 59, "weight_fpath": 59, "pretrained_weight": 59, "isfil": 59, "noinspect": 59, "pybroadexcept": 59, "from_disk_as_pickl": 59, "action": [59, 829, 836, 847, 850, 854, 863], "placehold": [59, 656, 743, 748, 753, 810, 839, 843, 855, 872], "pyunboundlocalvari": 59, "max_fourier_freq": 59, "random_uniform": [59, 63, 79, 102, 658, 849, 852, 863, 869], "817437": 59, "gpu_bfc_alloc": 59, "orig_valu": 59, "tf_force_gpu_allow_growth": 59, "autograd": [59, 870], "declar": [59, 839, 862], "_3r2_73j": 60, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 60, "1297564": 60, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 60, "le3bu3_v": 60, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 60, "third": [60, 110, 111, 391, 484, 512, 652, 660, 702, 767, 845, 848, 859, 870, 882, 884], "parti": [60, 845, 848, 870, 882, 884], "mount": [60, 833, 839], "mydriv": 60, "chdir": 60, "kaggl": 60, "medium": 60, "articl": [60, 831, 854], "insert": [60, 70, 80, 93, 103, 391, 472, 482, 654, 656, 659, 661, 720, 740, 741, 762, 773, 847, 854], "www": [60, 348, 349, 385], "your_kaggle_usernam": 60, "competit": 60, "digit": 60, "readabl": [60, 843, 846, 852, 854, 855, 863, 864], "chmod": [60, 838, 847], "forc": [60, 845, 847, 849], "archiv": [60, 838], "inflat": [60, 848], "sample_submiss": 60, "later": [60, 87, 553, 649, 837, 854, 859, 863, 864, 882], "my": [60, 847], "label_df": 60, "mod_train": 60, "data_valu": 60, "test_data_valu": 60, "correct_label": 60, "train_path": 60, "str": [60, 62, 65, 66, 70, 71, 74, 75, 76, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 147, 149, 152, 154, 156, 162, 163, 166, 168, 170, 171, 172, 173, 177, 178, 181, 182, 183, 184, 185, 186, 188, 190, 193, 194, 195, 196, 197, 198, 205, 206, 226, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 388, 389, 390, 391, 394, 400, 403, 407, 408, 409, 411, 412, 413, 414, 416, 417, 421, 422, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 439, 443, 458, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 480, 481, 482, 487, 504, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 521, 523, 525, 536, 537, 538, 539, 546, 548, 549, 551, 552, 554, 555, 557, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 587, 590, 591, 593, 594, 603, 605, 606, 607, 609, 611, 613, 614, 627, 631, 639, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 703, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 735, 742, 743, 748, 753, 756, 757, 758, 759, 761, 764, 767, 768, 769, 771, 775, 776, 777, 779, 781, 782, 784, 785, 786, 791, 792, 794, 795, 800, 802, 810, 812, 813, 824, 825, 829, 848, 849, 852, 856, 859, 860, 864, 868, 877, 878, 879, 880], "makedir": 60, "valid_path": 60, "28x28": 60, "pic": 60, "int8": [60, 67, 79, 89, 90, 102, 147, 174, 179, 181, 182, 186, 644, 645, 757, 794, 795, 848, 863], "new_img": [60, 62], "builder": [60, 833], "batchwis": 60, "goe": [60, 391, 480, 841, 854, 859, 866], "seed_valu": [60, 87, 658, 760], "randomize_dataset": 60, "create_dataset": 60, "num_examples_per_class": 60, "img_arrai": 60, "dir": 60, "img_path": 60, "imread": [60, 62], "imread_grayscal": 60, "generate_batch": 60, "ivyerror": [60, 826, 852], "smaller": [60, 70, 77, 83, 93, 100, 315, 347, 364, 380, 385, 388, 390, 400, 417, 422, 433, 465, 536, 537, 538, 559, 649, 654, 662, 717, 725, 775, 776, 781, 783, 839, 852, 868], "yield": [60, 80, 333, 334, 382, 391, 497, 659, 766, 847], "x_batch_inst": 60, "form": [60, 62, 65, 66, 70, 75, 87, 89, 98, 109, 110, 111, 140, 141, 153, 158, 159, 325, 328, 342, 351, 382, 385, 389, 391, 442, 453, 484, 493, 497, 514, 549, 610, 612, 644, 649, 651, 652, 656, 682, 684, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 706, 737, 748, 794, 809, 832, 837, 838, 856, 863, 866, 882, 883], "intialis": 60, "num_epoch": 60, "inherit": [60, 843, 846, 852, 870, 872], "creation": [60, 70, 87, 93, 116, 845, 848, 849, 855, 857, 860, 861, 863, 864, 868, 878, 882], "inform": [60, 62, 67, 70, 72, 90, 95, 178, 181, 332, 382, 549, 639, 645, 649, 650, 655, 735, 829, 831, 836, 837, 838, 839, 840, 842, 846, 847, 852, 856, 857, 859, 861, 863], "insid": [60, 75, 98, 116, 391, 508, 652, 695, 792, 838, 839, 843, 846, 848, 849, 853, 856, 857, 863, 864, 878], "ivynet": 60, "h_w": 60, "input_channel": [60, 810, 868], "output_channel": [60, 810], "gelu": [60, 61, 64, 86, 641, 806], "image_widht": 60, "start_dim": [60, 70, 93, 391, 487], "end_dim": [60, 70, 93, 391, 487], "gpu_is_avail": [60, 646], "__name__": [60, 61, 63, 615, 649, 852], "heavi": [60, 796, 838, 860, 861, 866, 883], "lift": [60, 861, 883], "num_correct": 60, "y_pred": 60, "epoch_loss": 60, "field": [60, 75, 81, 98, 104, 389, 391, 442, 512, 652, 660, 687, 688, 699, 700, 702, 767, 768, 769, 847], "training_accuraci": 60, "train_loss": 60, "train_correct": 60, "train_loop": 60, "leav": [60, 65, 70, 88, 90, 92, 93, 94, 97, 98, 100, 106, 116, 178, 181, 253, 310, 313, 314, 320, 391, 481, 482, 487, 500, 501, 502, 518, 519, 521, 537, 538, 543, 563, 611, 654, 656, 670, 681, 686, 702, 719, 723, 728, 730, 731, 736, 737, 746, 747, 748, 749, 775, 776, 824, 837, 846, 847, 848, 850, 851, 855, 856, 859, 860, 863], "xbatch": 60, "ybatch": 60, "to_devic": [60, 68, 91, 209, 646, 812], "entropi": [60, 76, 99, 653, 711, 712, 713], "hot": [60, 66, 89, 154, 644], "ybatch_encod": 60, "one_hot": [60, 66, 89, 644, 868], "loss_prob": 60, "ret_grad_idx": [60, 631, 650, 791, 858], "xs_grad_idx": [60, 631, 650, 791, 858], "batch_loss": 60, "set_descript": 60, "set_postfix": 60, "accuracy_percentag": 60, "naverag": 60, "6f": 60, "_train_summari": 60, "writer": 60, "writerow": 60, "157it": 60, "06it": 60, "475401": 60, "11it": 60, "081436": 60, "13it": 60, "0187": 60, "029279": 60, "008382": 60, "07it": 60, "00456": 60, "003816": 60, "82it": 60, "00277": 60, "002179": 60, "05it": 60, "00175": 60, "001569": 60, "00147": 60, "09it": 60, "00128": 60, "001005": 60, "10it": 60, "00112": 60, "000837": 60, "129": [60, 651, 670, 672], "12it": 60, "000989": 60, "000709": 60, "145": 60, "000873": 60, "000606": 60, "08it": 60, "000774": 60, "000524": 60, "000688": 60, "000455": 60, "000613": 60, "000398": 60, "000547": 60, "000350": 60, "000488": 60, "000308": 60, "000437": 60, "000273": 60, "000391": 60, "000243": 60, "238": [60, 260, 647], "98it": 60, "000351": 60, "000216": 60, "260": 60, "plot_summari": 60, "whitegrid": 60, "nrow": 60, "ncol": 60, "fontweight": 60, "bold": 60, "set_xlabel": 60, "set_ylabel": 60, "savefig": 60, "summary_plot": 60, "png": [60, 62, 63], "save_weight": [60, 812], "model_param": 60, "ivynet_weight": 60, "hdf5": [60, 87, 812], "deitimageprocessor": 61, "tfdeitforimageclassif": 61, "tfdeitforimageclassificationwithteach": 61, "distillation_classifi": 61, "cls_classifi": 61, "randomli": [61, 388, 412, 413, 414, 651, 674, 794, 795, 796, 797, 802, 810], "henc": [61, 81, 236, 351, 385, 647, 654, 660, 720, 767, 768, 769, 770, 819, 838, 846, 847, 848, 859, 863], "image_processor": [61, 877, 878], "distil": [61, 883], "patch16": 61, "outputs_from_original_model": 61, "bertforsequenceclassif": 61, "bertforpretrain": 61, "NOT": [61, 281, 647, 824, 837], "probabl": [61, 70, 74, 76, 79, 93, 97, 99, 102, 388, 390, 395, 400, 412, 413, 414, 467, 522, 536, 539, 543, 651, 653, 658, 674, 678, 681, 711, 756, 796, 809, 810, 831, 863, 871], "ptarmigan": 61, "rf": [61, 839], "branch": [61, 241, 253, 256, 258, 286, 298, 299, 300, 303, 647, 838, 839, 842, 847, 854, 870, 878, 882], "moduleconvert": [61, 807, 812], "mc": 61, "from_keras_modul": [61, 807], "compiled_func": 61, "return_graph": [61, 63], "compiled_output": 61, "diverg": [61, 70, 93, 260, 390, 467, 647], "_all_funct": [61, 63], "convert_to_tensor_v2_with_dispatch": 61, "transpose_v2": 61, "convolution_v2": 61, "bias_add": 61, "binary_op_wrapp": 61, "cast": [61, 67, 69, 70, 75, 83, 90, 92, 98, 106, 165, 168, 193, 287, 400, 537, 538, 645, 647, 652, 662, 693, 709, 775, 776, 779, 781, 783, 795, 856, 861, 868], "moments_v2": 61, "batch_norm": [61, 63, 70, 93, 394], "tensordot": [61, 75, 98, 652, 825, 848], "softmax_v2": 61, "_slice_help": 61, "save_to_disk": [61, 63, 812], "12265048989200113": 61, "11038777417100028": 61, "1167045795539998": 61, "ivy_api_kei": 62, "obj": [62, 140, 141, 571, 644, 649, 822, 877, 878, 880], "combo": 62, "permit": [62, 843, 855, 860, 863, 866], "usabl": [62, 855, 864], "neither": [62, 236, 253, 260, 286, 647, 652, 704, 847, 860, 866], "nor": [62, 236, 253, 260, 286, 647, 847, 860], "specifc": 62, "invoc": 62, "externally_link": 62, "logo": 62, "patch": [62, 304, 647, 848, 882], "cv2_imshow": 62, "envrion": 62, "canni": 62, "original_img": 62, "fn_arg": 62, "dilate_edg": 62, "morphologi": 62, "hk_model": 62, "keras_model": 62, "odsc": 62, "talk": 62, "352": [63, 97, 651, 675, 852], "nvidia_ml_py3": 63, "19190": 63, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 63, "b9": 63, "b1": [63, 652, 701], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 63, "cycler": 63, "fonttool": 63, "965": 63, "kiwisolv": 63, "show_graph": [63, 812], "to_ivy_modul": [63, 807], "image_dim": 63, "v0": 63, "urlerror": 63, "dev_str": 63, "comp_network": 63, "time_chronolog": 63, "ret0_nc": 63, "ret1_nc": 63, "ret0_c": 63, "ret1_c": 63, "pytorch_vision_v0": 63, "distributed_c10d": 63, "262": 63, "reduce_op": 63, "reduceop": 63, "004645566477999864": 63, "0044566806820000695": 63, "attribut": [63, 87, 178, 179, 180, 181, 212, 213, 221, 564, 565, 645, 646, 649, 792, 844, 845, 846, 851, 852, 856, 857, 859, 860, 866], "definit": [63, 69, 75, 92, 98, 305, 647, 652, 682, 831, 835, 839, 843, 848, 853, 856], "max_pool2d": [63, 70, 93, 388, 408], "__iadd__": 63, "adaptive_avg_pool2d": [63, 70, 93, 388], "_arraywithactiv": [64, 115], "abc": [64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 119, 562, 649, 656, 754, 809, 814, 824, 825], "_abc_impl": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "_abc": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "_abc_data": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "approxim": [64, 69, 70, 75, 86, 92, 93, 98, 110, 113, 123, 234, 235, 238, 239, 240, 241, 250, 251, 256, 258, 260, 274, 275, 276, 277, 291, 298, 299, 303, 304, 305, 362, 372, 385, 390, 469, 470, 641, 647, 652, 695, 698, 806, 851, 860], "complex_mod": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 304, 308, 313, 314, 316, 380, 641, 647, 806, 857], "variant": [64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 151, 152, 153, 154, 156, 158, 159, 162, 166, 167, 168, 178, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 388, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 629, 630, 633, 635, 636, 637, 639, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 700, 702, 706, 707, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 843, 850, 851, 866], "docstr": [64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 166, 167, 168, 178, 181, 185, 186, 193, 210, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 335, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 385, 388, 391, 400, 407, 408, 409, 410, 412, 413, 414, 416, 420, 421, 422, 425, 426, 427, 431, 432, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 580, 582, 583, 585, 590, 591, 605, 606, 607, 608, 609, 611, 613, 614, 627, 628, 629, 630, 633, 635, 636, 637, 639, 644, 645, 647, 649, 652, 654, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 836, 837, 841, 845, 854, 855, 856, 857, 860, 862, 864], "liter": [64, 69, 70, 75, 86, 92, 93, 98, 123, 124, 125, 126, 127, 128, 129, 130, 131, 304, 308, 313, 314, 316, 380, 388, 389, 391, 394, 410, 420, 424, 432, 447, 453, 458, 461, 464, 497, 520, 641, 647, 652, 661, 693, 709, 773, 806, 866], "magnitud": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 233, 236, 253, 260, 286, 304, 308, 313, 314, 316, 380, 641, 647, 652, 702, 703, 806, 848], "handle_complex_input": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 304, 308, 313, 314, 316, 380, 641, 647, 806, 857], "element": [64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 83, 86, 87, 89, 90, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 111, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 142, 148, 149, 158, 159, 160, 176, 178, 181, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 318, 319, 320, 322, 323, 324, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 355, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 382, 385, 388, 389, 390, 391, 400, 401, 412, 413, 414, 417, 422, 425, 426, 427, 431, 433, 434, 435, 441, 442, 443, 465, 475, 476, 477, 487, 488, 489, 491, 494, 505, 506, 508, 510, 512, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 547, 551, 554, 555, 566, 567, 583, 585, 605, 606, 607, 609, 613, 614, 641, 644, 647, 649, 651, 652, 654, 656, 658, 659, 660, 661, 662, 663, 674, 683, 685, 687, 688, 692, 697, 699, 700, 702, 706, 717, 720, 721, 722, 723, 724, 725, 726, 727, 736, 739, 745, 756, 764, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 791, 794, 796, 810, 825, 851, 861, 863, 866, 868], "138": [64, 123, 641], "165": [64, 123, 641, 651, 675], "hardswish": [64, 70, 86, 93, 311, 380, 641, 806], "leaky_relu": [64, 86, 93, 308, 641, 795], "alpha": [64, 69, 70, 86, 92, 93, 120, 125, 236, 302, 308, 309, 317, 321, 327, 380, 382, 389, 394, 395, 443, 520, 523, 524, 525, 641, 647, 806, 855, 860, 861], "slope": [64, 70, 86, 93, 125, 308, 309, 315, 317, 321, 380, 641, 806], "leaki": [64, 86, 125, 641, 806], "log_softmax": [64, 86, 641, 806], "0719": [64, 86, 126], "mish": [64, 86, 641, 806], "30340147": [64, 127, 641], "86509842": [64, 86, 127, 641], "269": [64, 129], "881": [64, 69, 92, 129, 239, 252, 292, 647], "422": [64, 130, 641], "155": [64, 97, 130, 641, 651, 675], "softplu": [64, 86, 641, 806, 866], "beta": [64, 70, 78, 86, 93, 101, 131, 317, 321, 327, 330, 331, 380, 382, 389, 390, 394, 395, 443, 471, 520, 524, 525, 641, 657, 755, 806, 866], "threshold": [64, 69, 70, 86, 92, 93, 131, 284, 285, 324, 350, 380, 385, 390, 391, 466, 471, 505, 641, 647, 806, 866], "union": [64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 400, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 568, 569, 570, 572, 574, 575, 576, 578, 579, 582, 583, 585, 586, 590, 591, 595, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 743, 744, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 794, 809, 814, 815, 843, 846, 848, 849, 850, 852, 855, 856, 859, 864, 866, 868, 877, 878, 879, 880], "3461": [64, 86, 131, 641], "6491": [64, 86, 131, 641], "hopefulli": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 874, 875], "_array_to_new_backend": 65, "_data_to_new_backend": 65, "native_x": 65, "native_x_backend": 65, "_to_ivi": 65, "_to_n": 65, "to_ignor": [65, 85, 108, 656, 747, 748], "_to_new_backend": 65, "args_to_ivi": 65, "include_deriv": [65, 88, 656, 737, 748, 791], "nest": [65, 87, 88, 116, 119, 256, 581, 611, 628, 631, 647, 649, 650, 655, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 814, 843, 845, 846, 856, 858, 864, 870, 872, 882], "unchang": [65, 69, 388, 391, 433, 487, 651, 674], "deriv": [65, 66, 70, 72, 88, 89, 93, 95, 144, 149, 156, 162, 326, 330, 355, 382, 385, 629, 630, 633, 634, 635, 636, 637, 644, 650, 655, 656, 735, 737, 748, 812, 814, 815, 848, 849], "word": [65, 139, 391, 490, 644, 658, 759, 807, 810, 846, 859, 860, 872], "args_to_n": [65, 859], "cont_inplac": 65, "decid": [65, 87, 656, 747, 748, 837, 838, 848, 866], "args_to_new_backend": 65, "shallow": [65, 656, 743, 744, 748, 753, 754], "nativevari": 65, "mutabl": [65, 656, 737, 743, 744, 748, 753, 754, 844], "to_ivi": [65, 88, 656, 749, 859], "leaf": [65, 87, 94, 106, 116, 562, 656, 746, 747, 749, 776, 846, 856], "travers": [65, 88, 656, 740, 748, 846, 848, 852, 869], "lowest": [65, 70, 79, 88, 93, 102, 400, 539, 656, 658, 748, 757, 825, 856, 870, 872, 883], "search": [65, 70, 88, 93, 762, 763, 802, 836, 838, 846, 850, 853, 863, 864], "to_new_backend": 65, "_arraywithcr": [66, 115], "boolean": [66, 67, 69, 70, 71, 77, 80, 83, 87, 89, 90, 92, 93, 94, 100, 103, 106, 115, 116, 136, 138, 140, 141, 142, 148, 165, 181, 183, 185, 186, 189, 205, 215, 223, 229, 243, 244, 245, 246, 247, 248, 280, 281, 282, 283, 348, 349, 364, 385, 389, 391, 447, 458, 464, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 506, 513, 548, 551, 562, 569, 572, 573, 577, 578, 579, 580, 581, 582, 583, 592, 595, 598, 599, 601, 602, 627, 638, 643, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 659, 662, 678, 720, 721, 722, 724, 726, 727, 729, 731, 733, 734, 746, 764, 765, 766, 778, 780, 794, 795, 796, 797, 802, 813, 846, 848, 856, 860, 863, 866], "never": [66, 70, 77, 89, 93, 100, 141, 391, 475, 476, 477, 483, 485, 487, 488, 489, 492, 496, 504, 513, 569, 649, 654, 720, 721, 722, 724, 726, 727, 729, 731, 839, 848, 859, 860, 863], "buffer": [66, 89, 93, 100, 141, 147, 475, 476, 483, 485, 487, 488, 489, 496, 513, 644, 720, 721, 722, 724, 726, 727, 729, 731, 811, 812, 859, 870], "nativedtyp": [66, 67, 70, 74, 75, 79, 80, 83, 89, 93, 98, 102, 103, 106, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 161, 162, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 187, 189, 191, 195, 205, 325, 326, 327, 328, 329, 330, 331, 346, 353, 369, 382, 385, 395, 400, 522, 523, 524, 525, 526, 536, 537, 538, 539, 542, 545, 644, 645, 651, 652, 658, 659, 661, 662, 674, 693, 709, 757, 758, 759, 762, 763, 773, 775, 776, 779, 781, 783, 809, 848, 849, 855, 864, 868], "datatyp": [66, 70, 87, 89, 93, 141, 149, 153, 170, 191, 195, 388, 436, 644, 645, 789, 864, 878], "nativedevic": [66, 68, 70, 79, 89, 91, 93, 102, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 207, 208, 209, 210, 211, 214, 219, 220, 221, 222, 224, 225, 226, 227, 228, 232, 325, 326, 341, 382, 395, 522, 523, 525, 526, 644, 646, 658, 756, 757, 758, 759, 809, 814, 815, 848, 849, 852, 855, 864], "39999998": [66, 140, 141, 644, 660, 768], "5999999": [66, 70, 93, 97, 140, 141, 310, 380, 389, 438, 644, 651, 674, 681], "0999999": [66, 83, 140, 141, 310, 320, 323, 366, 380, 385, 644, 779], "10000038": [66, 140, 141, 644], "90786433e": [66, 140, 141, 644], "310": [66, 140, 141, 644], "copy_arrai": [66, 89, 644], "to_ivy_arrai": [66, 89, 142, 644], "empty_lik": [66, 70, 89, 93, 277, 389, 441, 644, 647], "uniniti": [66, 143, 144, 644, 854], "from_dlpack": [66, 89, 644], "full_lik": [66, 89, 644, 864], "fill_valu": [66, 70, 80, 89, 93, 103, 148, 149, 265, 273, 391, 395, 506, 526, 644, 647, 659, 765, 848, 861, 864], "scalar": [66, 69, 70, 71, 75, 86, 89, 92, 93, 94, 98, 110, 125, 149, 154, 236, 257, 302, 308, 351, 352, 354, 359, 362, 364, 366, 371, 385, 388, 389, 390, 391, 436, 443, 465, 475, 476, 477, 486, 491, 614, 627, 644, 647, 649, 652, 709, 848, 858, 860, 870, 882], "fill": [66, 69, 70, 79, 80, 87, 89, 92, 93, 102, 103, 143, 148, 149, 151, 154, 155, 156, 161, 162, 287, 326, 382, 389, 391, 395, 447, 453, 458, 464, 486, 506, 507, 523, 525, 526, 644, 647, 658, 659, 757, 765, 809, 837, 861], "000123": [66, 149, 644], "stop": [66, 70, 72, 89, 93, 95, 139, 150, 151, 226, 389, 458, 464, 592, 630, 633, 635, 636, 637, 639, 644, 646, 649, 650, 655, 656, 733, 734, 735, 747, 814, 829, 855, 858, 866, 868, 870, 882], "num": [66, 89, 150, 151, 644, 794, 839, 855, 868], "endpoint": [66, 89, 150, 151, 644, 809, 855], "logspac": [66, 89, 644, 868], "sequenc": [66, 70, 74, 75, 77, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 145, 147, 149, 151, 154, 156, 162, 166, 168, 181, 185, 186, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 329, 336, 337, 338, 339, 340, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 389, 391, 395, 400, 401, 403, 404, 405, 412, 413, 414, 416, 417, 421, 422, 424, 431, 432, 433, 434, 435, 438, 446, 447, 448, 450, 456, 457, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 481, 482, 483, 484, 490, 492, 493, 495, 496, 498, 499, 502, 504, 506, 507, 508, 510, 513, 514, 515, 517, 518, 519, 521, 523, 524, 536, 537, 538, 539, 546, 547, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 586, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 628, 631, 632, 633, 639, 644, 647, 649, 650, 651, 652, 654, 656, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 678, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 709, 711, 712, 713, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 731, 732, 736, 743, 753, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 810, 813, 815, 839, 847, 848, 849, 850, 852, 863, 864, 866, 868], "on_valu": [66, 89, 151, 154, 644], "off_valu": [66, 89, 151, 154, 644], "evenli": [66, 69, 70, 74, 77, 87, 89, 92, 93, 97, 100, 139, 150, 151, 305, 388, 431, 435, 644, 647, 651, 654, 664, 665, 666, 667, 669, 671, 673, 726], "hint": [66, 69, 70, 75, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 342, 348, 349, 351, 354, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 497, 506, 510, 536, 539, 566, 570, 572, 574, 605, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 837, 843, 851, 853, 855, 856, 859, 860, 864], "simplic": [66, 69, 70, 75, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 342, 348, 349, 351, 354, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 497, 506, 510, 536, 539, 566, 570, 572, 574, 605, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 851, 866], "nestabl": [66, 69, 70, 75, 92, 93, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 168, 184, 188, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 326, 341, 342, 348, 349, 351, 354, 382, 385, 388, 389, 391, 400, 407, 408, 409, 410, 412, 413, 414, 420, 425, 426, 427, 432, 434, 443, 497, 506, 510, 536, 539, 543, 552, 560, 561, 566, 570, 572, 574, 576, 590, 605, 609, 614, 639, 644, 645, 647, 649, 650, 651, 652, 654, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 710, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 755, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 837, 841, 850, 851, 859, 863, 872], "464": [66, 69, 102, 151, 240, 241, 647], "15888336": [66, 151], "2154": [66, 151], "43469003": [66, 151], "meshgrid": [66, 89, 644], "spars": [66, 70, 76, 89, 93, 99, 152, 329, 382, 389, 447, 458, 464, 644, 653, 713], "xy": [66, 89, 152, 644], "coordin": [66, 69, 80, 92, 93, 103, 152, 160, 241, 303, 333, 334, 341, 362, 382, 396, 527, 644, 647, 659, 765], "conserv": [66, 152, 644], "cartesian": [66, 152, 644], "matrix": [66, 70, 71, 74, 75, 93, 94, 97, 98, 110, 111, 113, 115, 152, 158, 159, 160, 341, 342, 382, 389, 391, 400, 439, 442, 443, 446, 447, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 495, 536, 548, 554, 644, 649, 651, 652, 675, 682, 684, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 707, 710, 794, 796, 809, 810, 825, 829, 837, 848, 860, 882], "ij": [66, 83, 152, 644, 662, 777, 825], "rank": [66, 70, 75, 77, 84, 93, 98, 100, 107, 110, 111, 112, 113, 114, 119, 152, 336, 337, 338, 339, 340, 382, 389, 391, 400, 447, 448, 458, 461, 464, 497, 506, 510, 546, 644, 652, 654, 659, 663, 683, 685, 693, 695, 699, 701, 706, 708, 709, 719, 720, 728, 731, 732, 765, 785, 786, 832], "ni": [66, 152, 644], "xi": [66, 152, 644], "scatter": [66, 71, 89, 94, 154, 590, 591, 644, 649, 845, 859, 866], "unless": [66, 70, 75, 89, 93, 154, 286, 347, 364, 369, 385, 644, 647, 652, 695, 844, 849, 859, 870, 877, 880], "ones_lik": [66, 89, 644, 844, 868], "tril": [66, 89, 644], "whose": [66, 69, 70, 71, 75, 77, 81, 83, 89, 92, 93, 94, 98, 100, 104, 106, 111, 113, 115, 149, 158, 159, 235, 239, 242, 250, 251, 252, 291, 292, 298, 299, 303, 304, 305, 342, 356, 357, 361, 365, 366, 368, 372, 382, 389, 391, 442, 463, 496, 506, 512, 553, 609, 644, 647, 649, 652, 654, 660, 662, 682, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 709, 721, 725, 767, 768, 769, 776, 777, 796, 834, 851, 863], "innermost": [66, 70, 75, 98, 158, 159, 342, 382, 389, 442, 644, 652, 682, 684, 686, 687, 688, 689, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 706], "mxn": [66, 70, 75, 98, 158, 159, 342, 382, 644, 652, 686, 693, 695, 696, 698, 699, 703, 706], "matric": [66, 70, 75, 93, 98, 110, 111, 115, 152, 158, 159, 342, 382, 389, 391, 442, 447, 448, 450, 456, 457, 462, 486, 644, 651, 652, 675, 682, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 706, 707, 796, 835, 853, 882], "diagon": [66, 70, 75, 93, 98, 111, 145, 158, 159, 160, 326, 341, 342, 382, 389, 391, 440, 443, 453, 459, 486, 644, 652, 685, 706], "triangular": [66, 70, 75, 98, 158, 159, 160, 341, 342, 382, 389, 459, 644, 652, 682, 688, 689, 695, 699], "triu": [66, 89, 644], "upper": [66, 70, 75, 79, 93, 98, 102, 145, 159, 160, 326, 342, 382, 389, 400, 459, 539, 644, 652, 658, 682, 688, 689, 699, 759, 848, 859, 863], "zeros_lik": [66, 70, 89, 165, 282, 391, 506, 629, 630, 633, 635, 636, 637, 644, 645, 647, 650, 652, 654, 699, 717, 860, 866], "data_typ": [67, 70, 90, 93, 195, 383, 645, 845, 848, 863, 864], "_arraywithdatatyp": [67, 115], "irrespect": [67, 75, 90, 98, 165, 645, 652, 702, 846, 859], "promot": [67, 69, 70, 75, 90, 92, 93, 98, 105, 115, 116, 165, 168, 191, 192, 193, 199, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 250, 251, 253, 256, 258, 260, 274, 275, 276, 277, 278, 283, 286, 291, 295, 298, 299, 300, 301, 302, 303, 304, 307, 359, 367, 372, 385, 388, 400, 432, 536, 599, 622, 645, 647, 649, 652, 654, 662, 682, 683, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 708, 709, 718, 728, 771, 779, 782, 794, 795, 840, 842, 851, 852, 856, 865, 875], "nan": [67, 69, 70, 71, 81, 83, 90, 92, 93, 94, 165, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 267, 268, 269, 274, 275, 276, 277, 278, 281, 286, 287, 289, 291, 292, 295, 296, 297, 298, 299, 300, 303, 304, 306, 313, 347, 348, 349, 360, 364, 369, 372, 380, 385, 391, 400, 506, 534, 535, 542, 543, 544, 545, 572, 627, 642, 645, 647, 649, 660, 662, 663, 767, 768, 769, 770, 778, 779, 780, 782, 783, 784, 785, 786, 794, 797, 842, 848, 851, 858, 864, 865], "infin": [67, 69, 71, 75, 90, 92, 98, 165, 233, 234, 235, 236, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 267, 268, 274, 275, 276, 277, 278, 281, 286, 287, 289, 291, 295, 296, 298, 299, 300, 303, 304, 306, 348, 349, 372, 385, 572, 642, 645, 647, 649, 652, 662, 663, 700, 709, 778, 780, 785, 786, 842, 851], "desir": [67, 68, 70, 80, 83, 87, 90, 91, 93, 103, 106, 110, 165, 167, 168, 227, 332, 373, 382, 385, 391, 400, 495, 542, 545, 546, 645, 646, 652, 659, 662, 704, 764, 779, 809, 810, 839, 844, 847, 848, 849, 860, 869, 878, 882], "broadcast_arrai": [67, 90, 645], "mix": [67, 69, 90, 92, 93, 94, 99, 102, 115, 116, 166, 179, 180, 193, 212, 213, 243, 246, 247, 248, 253, 254, 260, 264, 272, 273, 283, 286, 289, 295, 390, 400, 471, 543, 562, 564, 565, 566, 567, 576, 611, 614, 645, 646, 647, 649, 651, 652, 653, 654, 657, 662, 665, 667, 670, 672, 673, 675, 681, 682, 704, 711, 713, 717, 755, 777, 779, 782, 795, 797, 837, 841, 848, 849, 850, 859, 866, 869, 872, 882], "broadcast_to": [67, 90, 645, 848], "can_cast": [67, 90, 645, 848, 856, 860], "accord": [67, 70, 71, 77, 83, 90, 100, 106, 168, 178, 236, 247, 253, 260, 286, 297, 332, 382, 388, 391, 433, 497, 566, 569, 590, 591, 645, 647, 649, 652, 654, 662, 708, 719, 732, 782, 784, 789, 796, 816, 824, 837, 838, 842, 848, 854, 856, 860, 863], "finfo": [67, 90, 645, 863], "resolut": [67, 90, 178, 645, 839], "4028235e": [67, 178, 645], "iinfo": [67, 90, 645], "integ": [67, 69, 70, 74, 75, 77, 79, 83, 84, 87, 92, 93, 94, 97, 98, 100, 102, 106, 107, 115, 116, 139, 148, 181, 182, 188, 192, 193, 197, 233, 243, 244, 245, 246, 247, 248, 249, 259, 260, 271, 283, 288, 291, 295, 296, 306, 307, 343, 344, 345, 348, 349, 353, 358, 359, 382, 385, 388, 391, 395, 398, 400, 416, 421, 431, 434, 435, 436, 483, 492, 497, 506, 510, 513, 522, 523, 524, 525, 526, 528, 529, 534, 536, 537, 538, 543, 546, 569, 585, 595, 628, 644, 645, 647, 649, 651, 652, 654, 658, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 683, 685, 694, 708, 709, 726, 756, 757, 758, 759, 760, 761, 773, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 794, 795, 796, 797, 802, 810, 825, 839, 846, 848, 858, 861, 863, 868], "119": [67, 181], "1220": [67, 181], "int16": [67, 70, 79, 83, 90, 102, 168, 172, 174, 179, 181, 188, 203, 400, 537, 538, 645, 662, 757, 775, 776, 781, 783, 794, 795, 848, 860, 863, 868], "32768": [67, 90, 181, 607, 649], "32767": [67, 90, 181], "is_bool_dtyp": [67, 90, 645], "is_float_dtyp": [67, 90, 645, 864], "is_int_dtyp": [67, 90, 645, 861, 864], "is_uint_dtyp": [67, 90, 645, 861, 864], "result_typ": [67, 90, 645, 848], "arrays_and_dtyp": [67, 90, 193, 645], "_arraywithdevic": [68, 115], "move": [68, 70, 91, 93, 160, 223, 227, 231, 341, 382, 391, 496, 644, 646, 812, 839, 849, 864], "addit": [68, 70, 71, 78, 91, 93, 94, 101, 136, 138, 227, 236, 296, 390, 394, 400, 465, 520, 535, 540, 559, 560, 561, 628, 643, 646, 647, 649, 651, 655, 657, 678, 735, 755, 810, 825, 837, 838, 839, 844, 848, 850, 851, 854, 856, 858, 859, 860, 863, 864, 866, 869, 878, 882, 883], "__dlpack__": [68, 91, 146, 227, 644, 646], "caveat": [68, 91, 227, 390, 469, 646], "portabl": [68, 91, 227, 646, 831], "_arraywithelementwis": [69, 115], "ab": [69, 75, 85, 92, 108, 115, 116, 291, 347, 364, 385, 391, 505, 647, 652, 656, 693, 703, 709, 744, 747, 791, 824, 825, 831, 835, 843, 848, 853, 857, 860, 863], "absolut": [69, 70, 75, 85, 87, 92, 93, 98, 115, 233, 297, 347, 364, 367, 373, 385, 389, 390, 443, 460, 466, 468, 647, 652, 693, 694, 695, 700, 789, 791, 794, 796, 797, 832, 838], "aco": [69, 92, 647], "invers": [69, 70, 75, 92, 93, 98, 234, 235, 238, 239, 240, 241, 242, 357, 385, 388, 398, 411, 420, 422, 432, 528, 647, 652, 691, 694, 698, 816, 848], "cosin": [69, 92, 234, 235, 250, 251, 325, 328, 382, 388, 410, 420, 647, 810], "acosh": [69, 92, 179, 180, 645, 647, 835, 853], "area": [69, 70, 92, 93, 97, 235, 239, 242, 388, 391, 424, 431, 435, 498, 647, 834, 859, 866], "hyperbol": [69, 92, 235, 239, 242, 251, 299, 303, 304, 317, 321, 380, 647], "sector": [69, 92, 235, 239, 242, 647], "multipli": [69, 70, 74, 83, 92, 93, 97, 110, 236, 302, 365, 388, 389, 424, 455, 456, 537, 538, 647, 651, 662, 674, 775, 781, 839, 843, 844, 846, 850], "angl": [69, 92, 241, 251, 299, 304, 363, 385, 647], "deg": [69, 92, 237, 647], "radian": [69, 70, 92, 93, 234, 237, 238, 240, 241, 250, 252, 292, 298, 303, 372, 385, 647, 851], "degre": [69, 70, 83, 92, 93, 106, 237, 252, 292, 335, 382, 391, 504, 647, 662, 782, 784, 884], "1j": [69, 92, 93, 237, 238, 250, 251, 256, 258, 270, 293, 298, 299, 303, 351, 606, 647, 649], "2j": [69, 70, 92, 93, 237, 266, 351, 388, 416, 421, 607, 647, 649], "3j": [69, 70, 92, 93, 237, 270, 293, 351, 385, 647], "35619449": [69, 237, 647], "78539816": [69, 237, 647], "135": [69, 237, 554, 647, 649], "asin": [69, 92, 647], "sine": [69, 92, 238, 239, 298, 299, 647], "927": [69, 92, 238], "asinh": [69, 92, 238, 647], "atan": [69, 92, 647], "tangent": [69, 92, 240, 241, 242, 303, 304, 317, 321, 378, 380, 387, 647, 851], "785": [69, 92, 240, 241, 647], "atan2": [69, 92, 647], "quotient": [69, 92, 241, 253, 260, 647], "588": [69, 241, 647], "inf": [69, 70, 71, 75, 92, 93, 94, 98, 241, 258, 267, 268, 269, 270, 274, 275, 277, 287, 313, 357, 367, 380, 385, 389, 400, 439, 539, 572, 627, 642, 647, 649, 651, 652, 679, 693, 709, 794, 797, 835, 848, 853, 858], "719": [69, 241, 647], "atanh": [69, 92, 647], "549": [69, 92, 97, 242, 647, 651, 675], "bitwise_and": [69, 92, 647], "bitwise_invert": [69, 92, 647], "bitiwse_invert": [69, 244], "bitwise_left_shift": [69, 92, 647], "bitwise_or": [69, 92, 647], "bitwise_right_shift": [69, 92, 115, 647], "bitwise_xor": [69, 92, 115, 647], "ceil": [69, 70, 92, 93, 110, 113, 139, 388, 407, 408, 409, 425, 426, 427, 430, 644, 647, 810, 859], "416": [69, 250, 647], "540": [69, 250], "990": [69, 250], "cosh": [69, 92, 250, 647], "deg2rad": [69, 92, 647], "180": [69, 92, 252, 292, 647], "270": [69, 92, 252, 292, 647], "360": [69, 92, 252, 292, 647, 847], "dividend": [69, 92, 253, 260, 295, 307, 647], "divisor": [69, 70, 72, 83, 92, 93, 95, 106, 253, 260, 263, 264, 295, 307, 388, 391, 407, 408, 409, 483, 492, 513, 629, 630, 635, 647, 650, 662, 782, 784, 810, 814], "375": [69, 254, 289], "erf": [69, 92, 356, 385, 647], "exponenti": [69, 70, 92, 93, 255, 256, 258, 278, 291, 308, 318, 380, 389, 454, 647], "gauss": [69, 92, 255, 647], "328": [69, 255, 303, 647], "677": [69, 255], "842": [69, 255, 303, 647], "71828198": [69, 92, 256], "38905573": [69, 92, 256], "08553696": [69, 92, 256, 647], "exp2": [69, 92, 647], "expm1": [69, 92, 647, 848], "918": [69, 258], "147": [69, 258, 647], "floor": [69, 70, 92, 93, 110, 113, 247, 260, 388, 407, 408, 409, 411, 425, 426, 427, 430, 647, 810, 859], "floor_divid": [69, 92, 647, 802, 848], "fmin": [69, 92, 647, 848], "gcd": [69, 92, 647, 848], "greater": [69, 70, 74, 77, 79, 92, 93, 97, 102, 115, 116, 147, 234, 235, 238, 239, 241, 242, 245, 247, 253, 259, 260, 274, 276, 291, 295, 297, 299, 300, 304, 305, 306, 350, 385, 388, 411, 416, 421, 432, 644, 647, 651, 652, 654, 658, 681, 683, 694, 727, 759, 796, 810, 839, 840, 861, 874], "greater_equ": [69, 92, 115, 116, 278, 647], "isfinit": [69, 92, 647, 860], "out_i": [69, 92, 267, 268, 269, 270, 293, 647], "self_i": [69, 92, 267, 268, 269, 270, 293], "finit": [69, 92, 233, 234, 235, 236, 239, 241, 242, 251, 253, 254, 256, 258, 260, 267, 268, 274, 276, 286, 287, 289, 291, 295, 299, 300, 304, 647], "isinf": [69, 92, 647], "detect_posit": [69, 92, 268, 647], "detect_neg": [69, 92, 268, 647], "isnan": [69, 92, 647], "isreal": [69, 92, 647], "5j": [69, 92, 93, 270, 293, 351, 385, 647], "6j": [69, 70, 92, 266, 270, 351, 647], "lcm": [69, 92, 647, 848], "less": [69, 70, 75, 79, 83, 92, 93, 98, 102, 115, 116, 234, 235, 238, 241, 242, 249, 253, 260, 274, 275, 276, 277, 291, 295, 297, 300, 371, 385, 388, 389, 400, 410, 411, 420, 432, 458, 464, 536, 539, 647, 652, 658, 662, 693, 694, 695, 698, 709, 759, 782, 784, 810, 838, 839, 846, 848, 850, 852, 855, 860, 863, 866, 867, 868, 882], "less_equ": [69, 92, 115, 116, 647, 852], "log10": [69, 70, 92, 332, 382, 647], "logarithm": [69, 92, 256, 274, 275, 276, 277, 278, 355, 367, 385, 647, 652, 700], "602": [69, 275, 647], "699": [69, 275, 647], "log1p": [69, 92, 647, 858], "693": [69, 92, 130, 239, 276, 641, 647], "0953": [69, 92, 274, 276, 647], "log2": [69, 92, 279, 647], "logaddexp": [69, 92, 647], "logaddexp2": [69, 92, 647, 835, 853], "169925": [69, 92, 279, 647], "logical_and": [69, 92, 647, 860, 866], "logical_not": [69, 92, 647, 848], "logical_or": [69, 92, 647], "conform": [69, 75, 92, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 168, 178, 181, 193, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 256, 258, 259, 260, 264, 265, 266, 267, 268, 269, 273, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 348, 349, 351, 385, 388, 391, 400, 432, 506, 510, 536, 644, 645, 647, 652, 654, 659, 660, 661, 662, 663, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 709, 718, 720, 721, 722, 724, 725, 727, 728, 732, 762, 763, 765, 766, 767, 768, 769, 770, 771, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 851, 854], "api_specif": [69, 70, 92, 93, 168, 256, 266, 267, 282, 348, 349, 385, 388, 391, 432, 506, 645, 647, 654, 662, 732, 782, 851], "array_api": [69, 92, 168, 256, 266, 267, 282, 388, 391, 432, 506, 645, 647, 652, 654, 662, 700, 701, 732, 782, 851], "logical_xor": [69, 92, 647], "use_wher": [69, 92, 284, 285, 647], "formula": [69, 70, 92, 253, 275, 277, 284, 285, 286, 332, 366, 382, 385, 394, 515, 517, 647, 829], "exce": [69, 70, 93, 285, 391, 508, 647], "product": [69, 70, 74, 75, 83, 92, 93, 97, 98, 106, 110, 111, 113, 286, 378, 379, 387, 389, 391, 400, 438, 441, 445, 448, 449, 450, 455, 456, 457, 510, 537, 538, 545, 647, 651, 652, 662, 678, 681, 683, 690, 692, 697, 704, 708, 775, 776, 777, 781, 782, 825, 837, 868, 874, 875, 882], "nan_to_num": [69, 92, 647], "posinf": [69, 92, 287, 647], "neginf": [69, 92, 287, 647], "5e": [69, 72, 92, 93, 287, 370, 635, 647, 650], "not_equ": [69, 92, 115, 116, 647], "pow": [69, 92, 115, 116, 647, 842], "expon": [69, 70, 71, 93, 94, 291, 359, 361, 365, 385, 394, 520, 607, 647, 649, 652, 694], "rad2deg": [69, 92, 647], "286": [69, 93, 292], "458": [69, 292], "573": [69, 292, 647], "reciproc": [69, 92, 647], "333": [69, 92, 253, 294, 647], "remaind": [69, 70, 77, 87, 92, 93, 100, 262, 647, 654, 726, 842, 859], "modulu": [69, 92, 295, 647, 859], "x2_i": [69, 92, 236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 264, 265, 272, 273, 278, 280, 282, 283, 286, 289, 291, 295, 302, 647, 842], "678": [69, 296, 297], "np_variant": [69, 92, 297, 647], "841": [69, 86, 92, 123, 298, 641, 647], "909": [69, 92, 94, 298, 647], "141": [69, 92, 165, 298, 645, 647], "sinh": [69, 92, 298, 647], "232": [69, 92, 299, 647], "sqrt": [69, 70, 92, 93, 388, 411, 416, 417, 421, 422, 432, 647, 809, 810, 831], "squar": [69, 70, 75, 92, 93, 98, 300, 389, 390, 394, 400, 442, 454, 466, 520, 536, 631, 632, 634, 640, 647, 650, 652, 656, 682, 684, 685, 687, 688, 689, 691, 694, 700, 701, 702, 707, 742, 831], "tanh": [69, 70, 92, 93, 303, 317, 321, 380, 647, 806, 868], "762": [69, 92, 304, 647], "964": [69, 92, 304, 647], "trapz": [69, 92, 647], "dx": [69, 92, 305, 647], "apart": [69, 92, 305, 647], "trapezoid": [69, 92, 305, 647], "trunc": [69, 92, 647], "025": [69, 306, 390, 471, 647, 655, 735], "trunc_divid": [69, 92, 647], "_arraywithactivationsexperiment": [70, 115], "celu": [70, 93, 380], "formul": [70, 86, 93, 111, 123, 308, 310, 380, 806], "elu": [70, 93, 312, 380, 806], "scaler": [70, 93, 309, 380, 794, 797, 863], "hardshrink": [70, 93, 380], "lambd": [70, 93, 310, 320, 380], "hardsilu": [70, 93, 380], "66666667": [70, 132, 311, 400, 536, 641], "hardtanh": [70, 93, 380], "max_val": [70, 93, 312, 380], "min_val": [70, 93, 312, 380], "region": [70, 93, 312, 320, 380, 838], "19722438": [70, 93, 313, 380], "38629448": [70, 93, 313, 380], "38629436": [70, 93, 313, 380], "logsigmoid": [70, 93, 380, 806], "31326175": [70, 86, 314, 380], "126928": [70, 93, 314], "01814993": [70, 314], "00004578": [70, 314], "57888985": [70, 314], "31326169": [70, 93, 314, 380], "69314718": [70, 75, 86, 93, 98, 314, 367, 380, 385, 652, 700], "01104775": [70, 314], "prelu": [70, 93, 380, 806], "unidirect": [70, 315, 380, 651, 676], "relu6": [70, 93, 380, 806], "rectifi": [70, 86, 93, 125, 127, 128, 316, 319, 324, 380, 641], "scaled_tanh": [70, 93, 321, 380], "7159": [70, 93, 317, 321, 380], "amplitud": [70, 93, 317, 321, 380], "65537548": [70, 93, 317], "49570239": [70, 93, 317], "77637792": [70, 317], "selu": [70, 93, 380, 806], "11133075": [70, 318, 380], "05070102": [70, 93, 318, 380], "10140204": [70, 318, 380], "15210295": [70, 318, 380], "20280409": [70, 318, 380], "25350523": [70, 318, 380], "30420589": [70, 318, 380], "35490704": [70, 318, 380], "silu": [70, 93, 380, 806], "26894143": [70, 319], "73105854": [70, 93, 319], "softshrink": [70, 93, 380], "bound": [70, 93, 320, 332, 380, 382, 391, 480, 506, 507, 794, 848, 852, 860, 863, 868], "tanhshrink": [70, 93, 380], "23840582": [70, 93, 322, 380], "condit": [70, 80, 93, 103, 136, 323, 338, 339, 382, 389, 439, 643, 656, 659, 746, 747, 766, 796, 842, 848, 850, 852, 856, 857, 859, 863, 878], "met": [70, 93, 323, 852], "hreshold": [70, 323], "thresholded_relu": [70, 93, 380], "_arraywithconversionsexperiment": [70, 115], "_arraywithcreationexperiment": [70, 115], "blackman_window": [70, 93, 382], "period": [70, 93, 299, 303, 325, 327, 328, 330, 331, 382, 388, 423, 647, 839], "window": [70, 74, 93, 97, 325, 327, 328, 330, 331, 346, 382, 388, 394, 407, 408, 409, 411, 425, 426, 427, 428, 430, 431, 435, 436, 520, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 810, 833, 839, 845, 853], "symmetr": [70, 75, 93, 98, 110, 111, 325, 327, 328, 330, 331, 382, 389, 391, 442, 497, 652, 682, 687, 688, 689, 710, 846], "38777878e": [70, 93, 325, 382], "40000000e": [70, 325, 382], "00000000e": [70, 75, 93, 94, 325, 356, 357, 382, 388, 410, 416, 420, 421, 652, 699, 835, 853], "30000000e": [70, 93, 325, 382], "eye_lik": [70, 93, 382], "elsewher": [70, 93, 145, 326, 382, 644, 659, 766, 838], "mel_weight_matrix": [70, 93, 382], "num_mel_bin": [70, 93, 332, 382], "dft_length": [70, 93, 332, 382, 388, 411], "sample_r": [70, 93, 332, 382], "lower_edge_hertz": [70, 93, 332, 382], "upper_edge_hertz": [70, 93, 332, 382], "3000": [70, 93, 332, 382], "melweightmatrix": [70, 93, 332, 382], "linearli": [70, 71, 94, 332, 382, 563, 649, 652, 701], "frequenc": [70, 71, 93, 94, 332, 382, 400, 536, 563, 649, 839], "spectra": [70, 332, 382], "dft": [70, 93, 332, 382, 388], "stft": [70, 93, 332, 382, 388], "mel": [70, 93, 332, 382], "hertz": [70, 332, 382], "2595": [70, 332, 382], "700": [70, 94, 332, 382, 567], "band": [70, 71, 93, 94, 332, 382, 563, 649], "spectrum": [70, 93, 332, 382], "n_fft": [70, 93, 332, 382, 388, 411], "8000": [70, 93, 327, 332, 382], "75694758": [70, 332, 382], "trilu": [70, 93, 382], "retain": [70, 160, 341, 342, 382, 631, 644, 650, 858, 862, 872], "unsorted_segment_mean": [70, 93, 382], "segment_id": [70, 93, 343, 344, 345, 382, 816], "num_seg": [70, 93, 343, 344, 345, 382, 816], "segment": [70, 93, 343, 344, 345, 382, 845, 850], "th": [70, 93, 111, 343, 344, 345, 354, 382, 385, 389, 390, 400, 440, 447, 465, 546], "unsorted_segment_min": [70, 93, 382], "unsorted_segment_sum": [70, 93, 382], "polyv": [70, 93, 382], "coeff": [70, 93, 335, 382], "polynomi": [70, 93, 335, 382], "coeffici": [70, 93, 327, 335, 382, 389, 459, 652, 701, 814], "indetermin": [70, 93, 335, 382], "simplifi": [70, 93, 335, 382, 824, 825, 852, 860, 868, 878, 882, 884], "substitut": [70, 93, 335, 382], "_arraywithdata_typeexperiment": [70, 115], "_arraywithdeviceexperiment": [70, 115], "_arraywithelementwiseexperiment": [70, 115], "equal_nan": [70, 93, 347, 364, 385], "1e10": [70, 347, 364, 385], "00001e10": [70, 347, 364, 385], "00001e": [70, 347, 385], "amax": [70, 93, 385], "keepdim": [70, 75, 77, 80, 83, 84, 87, 93, 98, 100, 103, 106, 107, 348, 349, 353, 369, 376, 385, 386, 391, 400, 503, 541, 542, 543, 544, 545, 546, 652, 654, 659, 662, 663, 693, 709, 731, 762, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 852, 860, 868], "singleton": [70, 75, 80, 83, 84, 93, 98, 103, 106, 107, 348, 349, 385, 652, 654, 659, 662, 663, 709, 720, 727, 763, 778, 779, 780, 781, 782, 783, 784, 785, 786, 868], "amin": [70, 93, 385], "binar": [70, 93, 385], "conj": [70, 93, 251, 256, 258, 299, 300, 304, 385, 647], "conjug": [70, 75, 93, 98, 351, 385, 388, 389, 395, 411, 437, 443, 455, 457, 459, 524, 652, 692, 696, 704], "copysign": [70, 93, 385], "unsign": [70, 83, 93, 352, 385, 391, 400, 506, 537, 538, 662, 775, 776, 781, 783, 795, 848, 868], "count_nonzero": [70, 93, 385], "diff": [70, 87, 93, 385, 850, 859], "prepend": [70, 93, 354, 385, 652, 654, 692, 720, 838], "differenc": [70, 93, 354, 385], "prior": [70, 93, 354, 385, 395, 524, 652, 704, 852, 864], "expand": [70, 71, 77, 93, 94, 354, 385, 391, 510, 563, 649, 654, 720, 846, 862], "discret": [70, 93, 354, 385, 388, 410, 411, 416, 417, 420, 421, 422, 432, 433, 653, 712, 810], "digamma": [70, 93, 385], "7549271": [70, 355, 385], "92278427": [70, 93, 355, 385], "9988394": [70, 355, 385], "erfc": [70, 93, 385], "complementari": [70, 93, 346, 356, 382, 385], "84270084e": [70, 356, 357], "80259693e": [70, 356, 357], "erfinv": [70, 93, 385], "float_pow": [70, 93, 385], "fmax": [70, 93, 385], "fmod": [70, 93, 647], "divis": [70, 71, 72, 93, 94, 95, 247, 253, 260, 262, 295, 297, 307, 391, 483, 597, 606, 620, 629, 630, 635, 647, 649, 650, 651, 664, 671, 672, 814, 856, 865, 874], "frexp": [70, 93, 385], "edge_ord": [70, 93, 362, 385], "boundari": [70, 79, 93, 102, 113, 338, 339, 362, 382, 385, 388, 424, 658, 759, 882], "33333333": [70, 93, 294, 362, 385, 465, 647], "hypot": [70, 93, 385], "hypotenus": [70, 363, 385], "4031": [70, 363, 385], "8102": [70, 363, 385], "isclos": [70, 93, 385, 842], "ldexp": [70, 93, 385], "lerp": [70, 93, 385], "lgamma": [70, 93, 385], "45373654": [70, 367, 385], "6477685": [70, 367, 385], "modf": [70, 93, 385], "fraction": [70, 93, 368, 385, 400, 546, 651, 674], "nansum": [70, 93, 385], "accumul": [70, 93, 369, 385, 391, 503], "nextaft": [70, 93, 385], "0e": [70, 72, 93, 95, 370, 385, 635, 650], "4013e": [70, 93, 370, 385], "4028e": [70, 93, 370, 385], "signbit": [70, 93, 385], "637": [70, 93, 372, 385], "0909": [70, 93, 372, 385], "sparsify_tensor": [70, 93, 385], "sparsifi": [70, 93, 373, 385], "arang": [70, 75, 83, 93, 98, 150, 373, 385, 388, 389, 407, 408, 409, 416, 421, 425, 426, 427, 430, 439, 456, 489, 586, 628, 644, 649, 652, 655, 662, 693, 709, 734, 735, 777, 831, 848, 859], "xlogi": [70, 93, 385], "0986": [70, 93, 374, 385], "3863": [70, 93, 374, 385], "0000": [70, 93, 327, 328, 331, 357, 374, 382, 385, 389, 391, 454, 491], "zeta": [70, 93, 385], "0369": [70, 93, 375, 385], "_arraywithgeneralexperiment": [70, 115], "init_valu": [70, 93, 97, 376, 386, 388, 431], "reduct": [70, 71, 76, 84, 87, 93, 94, 97, 99, 107, 376, 386, 388, 390, 391, 431, 465, 466, 467, 468, 469, 470, 471, 472, 503, 560, 590, 591, 649, 653, 663, 711, 712, 713, 785, 786, 811, 848, 856, 859, 863], "_arraywithgradientsexperiment": [70, 115], "_arraywithimageexperiment": [70, 115], "_arraywithlayersexperiment": [70, 115], "adaptive_avg_pool1d": [70, 93, 388], "1d": [70, 93, 110, 111, 388, 389, 391, 400, 402, 410, 412, 414, 420, 455, 475, 480, 503, 507, 536, 794, 810], "adapt": [70, 93, 95, 388, 402, 403, 404, 405, 636, 650, 810, 814], "plane": [70, 93, 253, 256, 258, 286, 298, 299, 300, 303, 388, 391, 402, 403, 404, 405, 504, 647], "l_in": [70, 93, 388, 402], "spatial": [70, 74, 93, 97, 388, 394, 402, 403, 404, 405, 424, 431, 435, 515, 516, 517, 520, 651, 664, 665, 666, 667, 669, 671, 673, 813], "Will": [70, 93, 388, 402, 403, 404, 405, 819, 870], "l_out": [70, 93, 388, 402], "nhwc": [70, 74, 93, 97, 388, 394, 403, 408, 413, 426, 430, 520, 651, 664, 667, 668, 671, 672, 673, 810], "3d": [70, 75, 93, 388, 403, 405, 412, 413, 477, 652, 690, 810, 866], "4d": [70, 93, 388, 389, 394, 403, 413, 414, 463, 520, 653, 714], "s_0": [70, 93, 388, 403, 404], "s_1": [70, 93, 388, 403, 404], "adaptive_max_pool2d": [70, 93, 388], "h_in": [70, 93, 388, 404, 405], "w_in": [70, 93, 388, 404, 405], "adaptive_max_pool3d": [70, 93, 388], "avg_pool1d": [70, 93, 388], "nwc": [70, 74, 93, 97, 388, 407, 412, 425, 428, 651, 664, 665, 666, 671, 672, 810], "count_include_pad": [70, 93, 388, 407, 408, 409, 810], "d_in": [70, 74, 93, 97, 388, 405, 407, 408, 409, 411, 416, 417, 421, 425, 426, 427, 428, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673], "algorithm": [70, 74, 86, 93, 97, 123, 388, 389, 407, 408, 409, 424, 425, 426, 427, 428, 458, 460, 464, 652, 665, 667, 668, 669, 670, 673, 700, 806, 810, 825, 848, 860, 866, 870, 882], "ncw": [70, 74, 93, 97, 388, 407, 412, 413, 425, 428, 651, 664, 665, 666, 671, 672, 810], "avg_pool2d": [70, 93, 388], "divisor_overrid": [70, 93, 388, 407, 408, 409, 810], "avg_pool3d": [70, 93, 388], "ndhwc": [70, 74, 93, 97, 388, 409, 414, 427, 651, 664, 669, 670, 671, 672, 810], "volum": [70, 74, 93, 97, 388, 409, 411, 416, 417, 421, 427, 651, 669, 670], "ncdhw": [70, 74, 93, 97, 388, 409, 414, 427, 651, 664, 669, 670, 671, 672, 810], "dct": [70, 93, 388, 810], "truncat": [70, 93, 388, 389, 410, 416, 420, 421, 422, 433, 462, 593, 649, 810, 852], "larger": [70, 77, 83, 93, 100, 106, 178, 388, 410, 417, 420, 422, 433, 645, 654, 662, 717, 725, 782, 784, 810, 863, 866], "ortho": [70, 93, 388, 410, 411, 416, 417, 420, 421, 422, 432, 433, 810], "onesid": [70, 93, 388, 411], "fft": [70, 93, 388, 411, 417, 432, 433, 436, 810, 837, 882], "symmetri": [70, 388, 411], "rfft": [70, 93, 388, 411, 433], "invok": [70, 388, 411, 831, 854, 877, 878], "batch_idx": [70, 388, 411], "signal_dim1": [70, 388, 411], "signal_dim2": [70, 388, 411], "signal_dimn": [70, 388, 411], "signal_dim": [70, 388, 411], "embed": [70, 93, 388, 390, 465, 651, 678, 796, 810, 882], "max_norm": [70, 71, 93, 94, 388, 415, 554, 555, 649, 810], "ifft": [70, 93, 388, 416, 422, 810], "pi": [70, 93, 299, 303, 388, 390, 416, 421, 470, 642, 647], "44509285e": [70, 93, 388, 416], "14423775e": [70, 93, 388, 416], "17j": [70, 93, 388, 416, 421], "11483250e": [70, 93, 388, 416], "16j": [70, 93, 388, 416, 421], "33486982e": [70, 93, 388, 416], "22464680e": [70, 93, 388, 416], "95799250e": [70, 93, 388, 416], "66951701e": [70, 93, 388, 416], "fft2": [70, 388], "20477401j": [70, 388, 417], "0614962j": [70, 388, 417], "idct": [70, 93, 388, 810], "49862671": [70, 93, 388, 410, 420], "37691498": [70, 93, 388, 410, 420], "00390816": [70, 93, 388, 410, 420], "58938599": [70, 93, 388, 410, 420], "92713165": [70, 93, 388, 410, 420], "078475": [70, 93, 388, 410, 420], "19664812": [70, 93, 388, 410, 420], "95411837": [70, 93, 388, 410, 420], "30636606e": [70, 93, 388, 421], "43029718e": [70, 93, 388, 421], "18j": [70, 93, 388, 416, 421], "53080850e": [70, 93, 388, 421], "58689626e": [70, 93, 388, 421], "24474906e": [70, 93, 388, 421], "91858728e": [70, 93, 388, 421], "01435406e": [70, 93, 388, 421], "ifftn": [70, 93, 388], "24730653": [70, 93, 388, 422], "90832391j": [70, 93, 388, 422], "49495562": [70, 93, 388, 422], "9039565j": [70, 93, 388, 422], "98193269": [70, 93, 388, 422], "49560517j": [70, 93, 388, 422], "93280757": [70, 93, 388, 422], "48075343j": [70, 93, 388, 422], "28526384": [70, 93, 388, 422], "3351205j": [70, 93, 388, 422], "2343787": [70, 93, 388, 422], "83528011j": [70, 93, 388, 422], "18791352": [70, 93, 388, 422], "30690572j": [70, 93, 388, 422], "82115787": [70, 93, 388, 422], "96195183j": [70, 93, 388, 422], "44719226": [70, 93, 388, 422], "72654048j": [70, 93, 388, 422], "51476765": [70, 388, 422], "66160417j": [70, 388, 422], "04319742": [70, 388, 422], "05411636j": [70, 388, 422], "015561": [70, 388, 422], "04216015j": [70, 388, 422], "06310689": [70, 388, 422], "05347854j": [70, 388, 422], "13392983": [70, 388, 422], "16052352j": [70, 388, 422], "08371392": [70, 388, 422], "17252843j": [70, 388, 422], "0031429": [70, 388, 422], "05421245j": [70, 388, 422], "10446617": [70, 388, 422], "17747098j": [70, 388, 422], "05344324": [70, 388, 422], "07972424j": [70, 388, 422], "8344667": [70, 93, 388, 422], "98222595j": [70, 93, 388, 422], "48472244": [70, 93, 388, 422], "30233797j": [70, 93, 388, 422], "recompute_scale_factor": [70, 93, 388, 424, 866], "antialia": [70, 93, 388, 424, 866], "height": [70, 71, 74, 93, 94, 97, 388, 424, 559, 649, 651, 653, 667, 668, 669, 670, 673, 714, 840], "width": [70, 71, 74, 93, 94, 97, 388, 389, 391, 394, 400, 424, 443, 497, 520, 539, 559, 649, 651, 653, 665, 666, 667, 668, 669, 670, 673, 678, 714], "trilinear": [70, 93, 388, 424, 866], "nearest_exact": [70, 93, 388, 424, 866], "tf_area": [70, 93, 388, 424, 866], "mitchellcub": [70, 93, 388, 424, 866], "lanczos3": [70, 93, 388, 424, 866], "lanczos5": [70, 93, 388, 424, 866], "gaussian": [70, 93, 123, 388, 424, 641, 866], "overwrit": [70, 87, 93, 226, 388, 424, 646, 839, 859, 860, 868], "thu": [70, 93, 247, 260, 295, 303, 304, 388, 389, 424, 442, 647, 652, 687, 688, 837, 847, 852, 857, 860, 864, 884], "antialias": [70, 93, 424], "max_pool1d": [70, 93, 388], "dilaton": [70, 93, 425, 426, 427], "max_pool3d": [70, 93, 388], "max_unpool1d": [70, 93, 388], "unpool": [70, 93, 388, 428], "reduce_window": [70, 97, 388], "window_dimens": [70, 97, 388, 431], "window_strid": [70, 97, 388, 431], "base_dil": [70, 97, 388, 431], "window_dil": [70, 97, 388, 431], "trim": [70, 87, 93, 388, 391, 432, 509], "orthonorm": [70, 75, 93, 98, 388, 432, 652, 699, 702], "8660254j": [70, 93, 388, 432], "rfftn": [70, 93, 388], "sliding_window": [70, 93, 388], "window_s": [70, 93, 388, 435], "frame_length": [70, 93, 388, 436], "frame_step": [70, 93, 388, 436], "fft_length": [70, 93, 388, 436], "window_fn": [70, 93, 388, 436], "pad_end": [70, 93, 388, 436], "smallest": [70, 87, 93, 178, 181, 249, 388, 391, 436, 508, 645, 647, 652, 693, 794, 796, 797], "enclos": [70, 93, 388, 436, 883], "window_length": [70, 93, 325, 327, 330, 331, 346, 382, 388, 436], "li": [70, 93, 388, 389, 400, 436, 443, 546], "past": [70, 93, 388, 436, 839, 842, 861, 863, 882], "fft_unique_bin": [70, 93, 388, 436], "complex64": [70, 90, 93, 171, 185, 194, 200, 266, 293, 388, 432, 436, 645, 647, 652, 700, 702, 703, 795, 848, 853], "complex128": [70, 93, 94, 171, 172, 185, 194, 200, 388, 436, 585, 645, 649, 652, 688, 689, 693, 709, 794, 795, 835, 848, 853], "compon": [70, 93, 155, 156, 234, 235, 236, 239, 242, 251, 253, 254, 256, 258, 286, 288, 289, 296, 299, 300, 303, 304, 336, 340, 351, 382, 385, 388, 389, 394, 436, 447, 458, 520, 644, 647, 659, 765, 862, 868, 875, 883], "linear_algebra": [70, 75, 93, 98, 389, 652, 864], "_arraywithlinearalgebraexperiment": [70, 115], "adjoint": [70, 75, 93, 98, 389, 459, 652, 691, 701, 702, 794], "batched_out": [70, 93, 389], "j1": [70, 93, 389, 438], "jn": [70, 93, 389, 438], "k1": [70, 93, 389, 438], "km": [70, 93, 389, 438], "outer": [70, 75, 93, 98, 110, 389, 438, 652, 655, 733, 734, 735, 825, 837], "30000001": [70, 93, 389, 438, 559, 649, 660, 768], "40000001": [70, 74, 86, 93, 115, 116, 125, 128, 309, 380, 389, 438, 641, 651, 660, 681, 768], "60000002": [70, 93, 106, 116, 389, 394, 438, 519, 521, 555, 649, 779], "80000001": [70, 93, 389, 394, 438, 519, 521], "60000001": [70, 93, 389, 438], "90000004": [70, 93, 389, 438, 662, 779], "20000002": [70, 93, 389, 438, 555, 649], "20000005": [70, 72, 93, 309, 317, 320, 321, 380, 389, 438, 629], "00000012": [70, 93, 389, 438], "49999994": [70, 93, 389, 438], "00000006": [70, 93, 389, 438], "60000014": [70, 93, 389, 438], "19999993": [70, 93, 389, 438], "80000007": [70, 93, 389, 438, 555, 649], "20000017": [70, 93, 389, 438], "89999992": [70, 93, 389, 438], "60000008": [70, 93, 389, 438], "80000019": [70, 93, 366, 385, 389, 438], "4000001": [70, 93, 97, 389, 438, 651, 674, 681], "cond": [70, 93, 136, 389, 643, 870], "933034373659268": [70, 439], "diagflat": [70, 93, 389, 449, 454], "offset": [70, 75, 78, 89, 93, 98, 101, 147, 389, 394, 440, 515, 516, 517, 644, 652, 657, 686, 706, 755, 801], "padding_valu": [70, 93, 389, 391, 440, 498], "right_left": [70, 93, 389, 440], "num_row": [70, 93, 389, 440], "num_col": [70, 93, 389, 440], "dot": [70, 74, 93, 97, 110, 389, 390, 456, 465, 651, 652, 678, 681, 708, 825, 838, 847], "eig": [70, 75, 93, 389, 652, 688, 689], "37228132": [70, 93, 389, 442, 444, 687], "82456484": [70, 442, 687], "41597356": [70, 442, 687], "56576746": [70, 442, 687], "90937671": [70, 442, 687], "eigh_tridiagon": [70, 93, 389], "eigvals_onli": [70, 93, 389, 443], "select_rang": [70, 93, 389, 443], "tol": [70, 93, 114, 389, 443, 458, 464], "eigenvalu": [70, 75, 93, 98, 110, 111, 389, 442, 443, 444, 652, 687, 688, 689, 695], "eigenvector": [70, 93, 389, 442, 443, 652, 687, 688], "interv": [70, 79, 84, 93, 102, 107, 139, 150, 151, 158, 389, 400, 443, 539, 644, 652, 654, 658, 663, 683, 708, 717, 720, 728, 757, 759, 785, 786], "converg": [70, 93, 389, 443], "_2": [70, 93, 389, 443], "eig_val": [70, 93, 389, 443], "decreas": [70, 93, 389, 443, 796], "eig_vector": [70, 93, 389, 443], "38196": [70, 443], "61803": [70, 443], "eigval": [70, 93, 389], "general_inner_product": [70, 98, 389], "n_mode": [70, 98, 389, 445], "tradit": [70, 98, 389, 445], "inner": [70, 75, 89, 98, 119, 154, 389, 442, 445, 644, 652, 655, 687, 688, 692, 733, 734, 735, 825, 837, 859], "higher_order_mo": [70, 93, 389], "n_featur": [70, 93, 389, 446], "d1": [70, 93, 389, 446], "dn": [70, 93, 389, 446], "initialize_tuck": [70, 93, 389], "svd": [70, 75, 93, 98, 113, 389, 447, 453, 458, 460, 461, 462, 464, 652, 703], "truncated_svd": [70, 93, 389, 447, 458, 461, 464], "non_neg": [70, 93, 340, 382, 389, 447], "mask": [70, 74, 93, 97, 110, 388, 389, 391, 434, 447, 448, 458, 464, 505, 569, 649, 651, 674, 678, 681, 866], "svd_mask_repeat": [70, 93, 389, 447, 458, 464], "tuckertensor": [70, 93, 114, 340, 382, 389, 447, 458, 464], "scheme": [70, 93, 389, 447, 458, 842, 882], "tucker": [70, 93, 340, 382, 389, 447, 458], "decomposit": [70, 75, 93, 98, 110, 111, 113, 336, 337, 338, 339, 340, 382, 389, 447, 451, 458, 461, 463, 464, 652, 682, 688, 699, 702, 837], "miss": [70, 93, 389, 391, 447, 458, 464, 505, 814, 837, 838, 843, 846, 847, 850, 860, 863, 866], "everywher": [70, 93, 389, 447, 458, 464], "kron": [70, 93, 389, 454], "make_svd_non_neg": [70, 93, 389, 462], "nntype": [70, 93, 389, 453], "nndsvd": [70, 93, 389, 453], "singular": [70, 75, 93, 98, 389, 447, 453, 460, 462, 652, 693, 695, 698, 702, 703, 794, 796, 848], "nndsvda": [70, 93, 389, 453], "boutsidi": [70, 93, 389, 453], "gallopoulo": [70, 93, 389, 453], "recognit": [70, 93, 389, 453, 834], "1350": [70, 93, 389, 453], "1362": [70, 93, 389, 453], "2008": [70, 93, 389, 453, 882], "matrix_exp": [70, 93, 389], "7183": [70, 93, 389, 454], "3891": [70, 93, 389, 454], "mode_dot": [70, 93, 109, 110, 114, 389], "matrix_or_vector": [70, 93, 110, 114, 389, 455], "i_1": [70, 93, 110, 111, 389, 455], "i_k": [70, 93, 110, 389, 455], "i_n": [70, 93, 110, 389, 455], "i_": [70, 93, 110, 389, 400, 455, 539], "multi_dot": [70, 93, 389], "148": [70, 92, 93, 256, 389, 456], "multi_mode_dot": [70, 93, 389], "mat_or_vec_list": [70, 93, 389, 457], "times_0": [70, 389, 457], "vec": [70, 389, 457], "times_1": [70, 389, 457], "cdot": [70, 286, 389, 457, 647], "times_n": [70, 389, 457], "partial_tuck": [70, 93, 389], "n_iter_max": [70, 93, 389, 458, 464], "verbos": [70, 93, 389, 458, 461, 464, 829, 863, 868], "return_error": [70, 93, 389, 458, 464], "variat": [70, 93, 389, 458, 464, 850, 860, 863], "reconstruct": [70, 75, 81, 93, 104, 113, 389, 391, 458, 464, 512, 652, 660, 702, 767, 769, 861], "return_erro": [70, 389, 458, 464], "svd_flip": [70, 93, 389], "u_based_decis": [70, 93, 389, 460], "basi": [70, 93, 389, 460, 839, 842], "flip": [70, 77, 93, 100, 110, 244, 389, 391, 460, 488, 489, 647, 654, 859, 868], "decis": [70, 93, 389, 460, 831, 842, 848, 866, 868, 882], "u_adjust": [70, 93, 389, 460], "v_adjust": [70, 93, 389, 460], "tensor_train": [70, 93, 389], "tt": [70, 93, 339, 382, 389, 461, 463], "kth": [70, 389, 461], "tttensor": [70, 113, 339, 382, 389, 461], "compute_uv": [70, 75, 93, 98, 389, 462, 652, 702], "n_eigenvec": [70, 93, 389, 462], "returnedv": [70, 462], "vh": [70, 75, 93, 98, 389, 462, 652, 702], "eigen": [70, 93, 389, 462], "namedtupl": [70, 75, 81, 93, 98, 104, 389, 391, 442, 462, 512, 652, 660, 687, 688, 699, 700, 702, 767, 768, 769], "tt_matrix_to_tensor": [70, 93, 389], "rank_k": [70, 93, 389, 463], "left_dim_k": [70, 93, 389, 463], "right_dim_k": [70, 93, 389, 463], "rank_": [70, 93, 389, 463], "49671414": [70, 93, 389, 463, 658, 758], "1382643": [70, 93, 389, 463, 658, 758], "64768857": [70, 93, 389, 463, 658, 758], "5230298": [70, 93, 389, 463, 658, 758], "23415337": [70, 93, 389, 463, 658, 758], "23413695": [70, 93, 389, 463, 658, 758], "57921278": [70, 93, 389, 463], "76743472": [70, 93, 389, 463], "1163073": [70, 93, 389, 463], "11629914": [70, 93, 389, 463], "03237505": [70, 93, 389, 463], "03237278": [70, 93, 389, 463], "78441733": [70, 93, 389, 463], "38119566": [70, 93, 389, 463], "21834874": [70, 93, 389, 463], "10610882": [70, 93, 389, 463], "15165846": [70, 93, 389, 463], "15164782": [70, 93, 389, 463], "35662258": [70, 93, 389, 463], "35659757": [70, 93, 389, 463], "02283812": [70, 93, 389, 463], "49705869": [70, 93, 389, 463], "40518808": [70, 93, 389, 463], "16882598": [70, 93, 389, 463], "fixed_factor": [70, 93, 389, 464], "tl": [70, 93, 389, 464], "kolda": [70, 93, 389, 464], "bader": [70, 93, 389, 464], "siam": [70, 93, 389, 461, 464], "vol": [70, 93, 389, 464], "pp": [70, 93, 389, 464], "455": [70, 93, 389, 464], "2009": [70, 93, 389, 464], "_arraywithlossesexperiment": [70, 115], "hinge_embedding_loss": [70, 93, 390], "margin": [70, 93, 390, 465, 472, 860], "measur": [70, 390, 465, 651, 653, 678, 714, 810], "semi": [70, 390, 465], "l_n": [70, 390, 465], "x_n": [70, 390, 465], "y_n": [70, 390, 465], "ell": [70, 390, 465], "operatornam": [70, 297, 299, 390, 465, 647, 652, 688], "l_1": [70, 390, 465], "hyperparamet": [70, 93, 390, 465], "aggreg": [70, 93, 390, 465, 660, 767, 847], "unreduc": [70, 93, 390, 465], "hing": [70, 93, 390, 465, 472], "target_tensor": [70, 390, 465, 470], "huber_loss": [70, 93, 390], "transit": [70, 93, 390, 466, 882], "huber": [70, 93, 390, 466], "kl_div": [70, 93, 390], "log_target": [70, 93, 390, 467], "contai": [70, 467], "batchmean": [70, 390, 467], "kullback": [70, 93, 390, 467], "leibler": [70, 93, 390, 467], "0916": [70, 467], "l1_loss": [70, 93, 390, 469], "l1": [70, 75, 93, 98, 390, 394, 466, 468, 469, 471, 518, 652, 709, 846], "targetict": [70, 93, 390, 468, 469, 471, 472], "20000000000000004": [70, 468], "log_poisson_loss": [70, 93, 390], "compute_full_loss": [70, 93, 390, 469, 811], "favor": [70, 93, 390, 469], "likelihood": [70, 93, 390, 469, 470], "28402555": [70, 390, 469], "03402555": [70, 390, 469], "1573164": [70, 390, 469], "poisson_nll_loss": [70, 93, 390], "log_input": [70, 93, 390, 470], "poisson": [70, 93, 390, 395, 469, 470], "assumpt": [70, 390, 469, 470], "minu": [70, 390, 469, 470], "omiss": [70, 390, 470], "stirl": [70, 93, 390, 469, 470], "1977562": [70, 470], "smooth_l1_loss": [70, 93, 390], "smooth": [70, 76, 93, 99, 390, 466, 471, 653, 711, 712, 713, 858], "8125": [70, 471], "soft_margin_loss": [70, 93, 390], "soft": [70, 93, 320, 390, 391, 472, 505, 849], "35667497": [70, 472], "22314353": [70, 472], "60943791": [70, 472], "_arraywithmanipulationexperiment": [70, 115], "as_strid": [70, 93, 391], "nativeshap": [70, 74, 77, 79, 93, 100, 102, 140, 141, 143, 148, 155, 161, 391, 395, 473, 485, 490, 499, 502, 522, 523, 524, 525, 526, 591, 604, 610, 612, 644, 649, 651, 654, 658, 664, 666, 668, 670, 672, 724, 757, 758, 759, 855, 857], "byte": [70, 71, 89, 93, 94, 115, 147, 391, 473, 585, 644, 649], "associative_scan": [70, 93, 391], "revers": [70, 71, 75, 83, 93, 98, 106, 115, 116, 379, 387, 388, 389, 391, 400, 434, 450, 474, 488, 489, 537, 538, 558, 649, 652, 654, 662, 707, 721, 775, 776, 837, 846, 847, 848, 850, 851, 859, 860, 866, 868, 870], "scan": [70, 93, 391, 474, 870], "atleast_1d": [70, 93, 391], "ari": [70, 93, 391, 475, 476, 477, 483, 492, 513], "a1": [70, 94, 391, 475, 476, 477, 481, 551], "a2": [70, 94, 391, 475, 476, 477, 481, 551], "atleast_2d": [70, 93, 391], "atleast_3d": [70, 93, 391], "column_stack": [70, 93, 391], "concat_from_sequ": [70, 93, 391], "input_sequ": [70, 93, 391, 482], "new_axi": [70, 93, 391, 482, 868], "dsplit": [70, 93, 391], "indices_or_sect": [70, 93, 391, 483, 492, 513], "3rd": [70, 93, 391, 483], "dstack": [70, 93, 391], "fill_diagon": [70, 93, 391], "fill_diag": [70, 486], "fortran": [70, 77, 93, 100, 391, 487, 654, 724, 882], "layout": [70, 77, 93, 100, 391, 487, 654, 724, 844, 859, 860, 866], "fliplr": [70, 93, 391, 859], "diag": [70, 75, 93, 98, 111, 391, 488, 489, 652, 688, 869], "flipud": [70, 93, 391, 859], "fold": [70, 93, 391, 499, 500, 847], "unfold": [70, 93, 110, 111, 113, 389, 391, 447, 490, 499, 501], "folded_tensor": [70, 391, 490], "heavisid": [70, 93, 391], "5000": [70, 391, 491, 652, 691, 825], "hsplit": [70, 93, 391], "horizont": [70, 93, 391, 481, 492, 559, 649], "hstack": [70, 93, 391, 481], "i0": [70, 93, 391, 400, 539], "bessel": [70, 83, 93, 106, 330, 382, 391, 494, 662, 782, 784], "kind": [70, 83, 93, 178, 181, 182, 400, 494, 537, 538, 543, 645, 662, 775, 776, 781, 783, 794, 795, 836, 860, 863, 866, 868, 870], "26606588": [70, 93, 391, 494], "2795853": [70, 93, 391, 494], "88079259": [70, 93, 391, 494], "row_mod": [70, 93, 391, 495], "column_mod": [70, 93, 391, 495], "ascend": [70, 82, 93, 105, 391, 398, 495, 529, 661, 771, 773, 840], "prod": [70, 71, 83, 94, 106, 389, 391, 448, 450, 495, 545, 560, 649, 662, 794, 825, 848, 850, 868], "moveaxi": [70, 93, 391], "destin": [70, 93, 391, 496], "unstack": [70, 77, 87, 100, 496, 654, 846, 868], "reorder": [70, 77, 93, 100, 391, 496, 559, 649, 654, 721, 862], "stat_length": [70, 93, 391, 497], "constant_valu": [70, 93, 391, 497], "end_valu": [70, 93, 391, 497], "reflect_typ": [70, 93, 391, 497], "partial_fold": [70, 93, 391], "skip_begin": [70, 93, 391, 499, 500, 501, 502], "untouch": [70, 93, 391, 499, 500, 501, 502], "partial_tensor_to_vec": [70, 93, 391], "skip_end": [70, 93, 391, 500, 501], "vectoris": [70, 93, 110, 391, 500, 502], "partial_unfold": [70, 93, 391], "ravel_tensor": [70, 93, 391, 501], "n_1": [70, 93, 391, 501], "n_2": [70, 93, 391, 501], "n_i": [70, 93, 389, 391, 448, 501], "partial_vec_to_tensor": [70, 93, 391], "put_along_axi": [70, 93, 391], "rot90": [70, 93, 391, 859], "rotat": [70, 93, 391, 504], "soft_threshold": [70, 93, 391], "behav": [70, 93, 348, 349, 385, 389, 391, 442, 506, 652, 687, 842, 852, 857, 859, 860, 861, 883], "slice": [70, 83, 87, 93, 94, 106, 111, 160, 341, 382, 391, 480, 503, 506, 507, 566, 567, 569, 595, 644, 649, 656, 662, 745, 780, 863, 882], "inexact": [70, 93, 359, 385, 391, 506], "largest": [70, 87, 93, 178, 181, 389, 391, 460, 506, 508, 645, 652, 693, 702], "take_along_axi": [70, 93, 391], "arr": [70, 71, 90, 93, 186, 391, 480, 503, 507, 591, 645, 848, 849], "top_k": [70, 93, 391], "sort": [70, 81, 87, 93, 104, 116, 212, 305, 389, 391, 400, 442, 508, 529, 543, 646, 647, 652, 660, 687, 688, 702, 703, 767, 771, 772, 773, 796, 836, 847, 862, 864], "trim_zero": [70, 93, 391], "fb": [70, 93, 391, 509], "front": [70, 93, 391, 509, 860, 868, 882], "unflatten": [70, 93, 391], "unfolded_tensor": [70, 391, 511], "unique_consecut": [70, 93, 391], "vsplit": [70, 93, 391], "vertic": [70, 93, 391, 513, 514, 559, 649, 839], "_arraywithnormsexperiment": [70, 115], "varianc": [70, 83, 93, 106, 394, 515, 517, 662, 784, 809, 813], "nsc": [70, 93, 394, 515, 516, 517, 813], "braodcast": [70, 93, 394, 515], "running_mean": [70, 93, 394, 515, 517, 813], "running_var": [70, 93, 394, 515, 517, 813], "nc": [70, 93, 394, 515, 516, 517, 813], "group_norm": [70, 93, 394], "num_group": [70, 93, 394, 516], "instance_norm": [70, 93, 394], "l1_normal": [70, 93, 394], "33333334": [70, 93, 311, 380, 394, 518, 521, 555, 631, 649, 650, 651, 652, 673, 709], "33333337": [70, 150, 394, 518, 631, 644, 650], "28571439": [70, 394, 518], "l2_normal": [70, 93, 394, 521], "l2": [70, 75, 98, 109, 110, 394, 519, 521, 652, 709, 810, 846], "44721359": [70, 93, 394, 519, 521], "89442718": [70, 93, 394, 519, 521, 555, 649], "lp_normal": [70, 93, 394], "lp": [70, 394, 521], "_arraywithrandomexperiment": [70, 115], "bernoulli": [70, 93, 388, 395, 412, 413, 414], "event": [70, 93, 395, 522, 863], "parameter": [70, 79, 93, 102, 395, 522, 523, 525, 526, 658, 756, 758, 759], "odd": [70, 93, 291, 391, 395, 497, 522, 647, 825, 836, 842], "drawn": [70, 79, 93, 102, 395, 522, 523, 524, 525, 526, 658, 756, 757, 758, 759, 794, 795, 796, 809, 863], "dirichlet": [70, 93, 395], "10598304": [70, 395, 524], "21537054": [70, 395, 524], "67864642": [70, 395, 524], "48006698": [70, 395, 524], "07472073": [70, 395, 524], "44521229": [70, 395, 524], "55479872": [70, 395, 524], "05426367": [70, 395, 524], "39093761": [70, 395, 524], "19531053": [70, 395, 524], "51675832": [70, 395, 524], "28793114": [70, 395, 524], "12315625": [70, 395, 524], "29823365": [70, 395, 524], "5786101": [70, 395, 524], "15564976": [70, 395, 524], "50542368": [70, 395, 524], "33892656": [70, 395, 524], "1325352": [70, 395, 524], "44439589": [70, 395, 524], "42306891": [70, 395, 524], "gamma": [70, 78, 93, 101, 355, 367, 385, 395, 400, 540, 657, 755], "lam": [70, 93, 395, 526], "_arraywithsearchingexperiment": [70, 115], "unravel_index": [70, 93, 396], "unravel": [70, 93, 396, 527], "_arraywithsetexperiment": [70, 115], "_arraywithsortingexperiment": [70, 115], "lexsort": [70, 93, 398], "indirectli": [70, 93, 398, 529], "statist": [70, 93, 108, 391, 497, 813, 829, 837, 848, 863, 864, 882], "_arraywithstatisticalexperiment": [70, 115], "bincount": [70, 93, 400], "minlength": [70, 93, 400, 534], "corrcoef": [70, 93, 400], "rowvar": [70, 93, 400, 535, 536], "relationship": [70, 93, 535, 809, 862], "cov": [70, 93, 400], "ddof": [70, 93, 400, 536], "fweight": [70, 93, 400, 536], "aweight": [70, 93, 400, 536], "overridden": [70, 93, 400, 536, 814, 843], "assign": [70, 93, 110, 400, 536, 837, 839, 844, 848, 859, 862], "covari": [70, 93, 400, 536], "cummax": [70, 93, 400], "exclus": [70, 71, 83, 87, 93, 94, 106, 139, 389, 400, 458, 537, 538, 578, 579, 582, 644, 649, 658, 662, 757, 775, 776, 834, 846, 848, 856, 868], "cumul": [70, 83, 93, 106, 400, 537, 538, 662, 775, 776], "uint64": [70, 83, 175, 180, 182, 183, 193, 195, 198, 400, 537, 538, 645, 662, 775, 776, 781, 783, 794, 795, 848, 863, 868], "uint16": [70, 83, 170, 175, 180, 181, 190, 400, 537, 538, 645, 662, 775, 776, 781, 783, 794, 795, 848, 860, 863, 868], "uint32": [70, 83, 175, 180, 181, 182, 204, 400, 537, 538, 645, 662, 775, 776, 781, 783, 794, 795, 848, 863, 868], "cummin": [70, 93, 400], "histogram": [70, 93, 400], "extend_lower_interv": [70, 93, 400, 539], "extend_upper_interv": [70, 93, 400, 539], "densiti": [70, 93, 400, 539], "monoton": [70, 93, 400, 539], "rightmost": [70, 93, 400, 539], "c1": [70, 93, 400, 539, 846], "ff": [70, 93, 400, 539], "c_": [70, 93, 111, 400, 539], "igamma": [70, 93, 400], "incomplet": [70, 93, 400, 540, 839], "3614": [70, 93, 400, 540], "2085": [70, 93, 400, 540], "median": [70, 93, 391, 400, 497, 543], "nanmean": [70, 93, 400], "6666666666666665": [70, 93, 400, 542], "nanmedian": [70, 93, 400], "overwrite_input": [70, 93, 400, 543], "treat": [70, 87, 93, 116, 291, 369, 385, 391, 394, 400, 507, 520, 543, 545, 647, 791, 858, 863], "undefin": [70, 93, 391, 400, 401, 497, 543, 547, 848, 852, 858], "nanmin": [70, 93, 400], "nanprod": [70, 93, 400], "Not": [70, 93, 369, 385, 389, 400, 444, 545, 642, 844, 852, 861, 870], "quantil": [70, 93, 400], "inclus": [70, 93, 139, 400, 546, 644, 658, 757, 832, 844, 859, 866], "midpoint": [70, 93, 400, 546], "surround": [70, 93, 400, 546, 866], "whichev": [70, 93, 400, 546], "_arraywithutilityexperiment": [70, 115], "optional_get_el": [70, 93, 401], "empti": [70, 71, 83, 87, 94, 106, 139, 391, 401, 497, 547, 554, 591, 644, 649, 652, 656, 662, 663, 706, 709, 750, 780, 781, 783, 785, 786, 837, 838, 843, 845, 848, 849, 859], "_arraywithgener": [71, 115], "all_equ": [71, 94, 649], "equality_matrix": [71, 94, 548, 649], "array_equ": [71, 94, 649], "assert_supports_inplac": [71, 94, 649], "ivybackendexcept": [71, 94, 552, 576, 649, 826, 843, 849, 852, 853], "clip_matrix_norm": [71, 94, 649], "894": [71, 94, 554, 555, 649, 657, 755], "clip_vector_norm": [71, 94, 649], "default_v": [71, 558, 649], "catch_except": [71, 558, 649], "rev": [71, 558, 649], "with_cal": [71, 558, 649], "catch": [71, 558, 649, 857, 863], "einops_rearrang": [71, 94, 649], "axes_length": [71, 94, 559, 560, 561, 649], "arrang": [71, 559, 649], "rearrang": [71, 94, 559, 561, 649, 862], "einops_reduc": [71, 94, 649, 848], "einops_repeat": [71, 94, 649], "fourier_encod": [71, 94, 649], "max_freq": [71, 94, 563, 649], "oppos": [71, 94, 563, 649, 848], "geometr": [71, 94, 563, 649, 652, 707], "0000000e": [71, 94, 563, 649], "2246468e": [71, 94, 563, 649], "4492936e": [71, 563, 649], "6739404e": [71, 94, 563, 649], "batch_dim": [71, 94, 566, 567, 649, 816], "gather_nd": [71, 94, 649], "get_num_dim": [71, 94, 649], "as_arrai": [71, 94, 570, 604, 649, 816], "has_nan": [71, 94, 649], "include_inf": [71, 94, 572, 627, 649], "inplace_decr": [71, 94, 649], "decrement": [71, 94, 574, 649], "inplace_incr": [71, 94, 649], "increment": [71, 94, 575, 649, 839, 882], "inplace_upd": [71, 94, 594, 649, 807, 859], "ensure_in_backend": [71, 94, 576, 649, 822, 859], "keep_input_dtyp": [71, 94, 576, 649, 822, 859], "is_arrai": [71, 94, 649, 859, 860], "is_ivy_arrai": [71, 94, 649, 859], "is_ivy_contain": [71, 649], "is_native_arrai": [71, 94, 189, 579, 645, 649], "isin": [71, 94, 649], "test_el": [71, 94, 583, 649], "assume_uniqu": [71, 94, 583, 649], "invert": [71, 94, 244, 583, 647, 649, 652, 694], "scatter_flat": [71, 94, 649], "occupi": [71, 178, 181, 590, 591, 645, 649], "scatter_nd": [71, 94, 649, 866], "stable_divid": [71, 94, 649, 856], "denomin": [71, 78, 94, 101, 597, 606, 620, 649, 657, 755, 813, 856, 865, 870], "min_denomin": [71, 94, 597, 606, 620, 649, 865], "_min_denomin": [71, 606, 649], "stable_pow": [71, 94, 649], "min_bas": [71, 94, 596, 607, 619, 649, 813, 865], "stabl": [71, 82, 94, 105, 160, 341, 348, 349, 382, 385, 398, 529, 596, 597, 606, 607, 619, 620, 644, 649, 661, 771, 774, 796, 838, 844, 848, 860, 865, 868, 870], "00004": [71, 94, 607, 649], "00008": [71, 94, 607, 649], "00004000e": [71, 607], "56002560e": [71, 607], "60001200e": [71, 607], "09602048e": [71, 607], "supports_inplace_upd": [71, 94, 649], "to_fil": 71, "fid": 71, "sep": 71, "format_": 71, "recov": [71, 852, 860], "to_scalar": [71, 94, 649], "value_is_nan": [71, 94, 649], "_arraywithgradi": [72, 115], "adam_step": [72, 95, 650], "mw": [72, 95, 629, 630, 650], "vw": [72, 95, 629, 630, 650], "beta1": [72, 95, 550, 629, 630, 635, 649, 650, 814], "beta2": [72, 95, 550, 629, 630, 635, 649, 650, 814], "epsilon": [72, 75, 76, 95, 98, 99, 550, 629, 630, 635, 649, 650, 652, 653, 695, 698, 711, 712, 713, 806, 811, 813, 814, 846, 856, 859], "dc": [72, 95, 629, 630, 633, 635, 636, 637, 650], "dw": [72, 95, 629, 630, 633, 635, 636, 637, 650], "forget": [72, 95, 629, 630, 635, 650, 814, 831, 848], "dcdw": [72, 95, 629, 630, 633, 635, 636, 650], "adam_step_delta": [72, 95, 629, 650], "2020105": [72, 629, 650], "22187898": [72, 629, 650], "24144873": [72, 629, 650], "10000002": [72, 106, 309, 380, 629, 779], "00300002": [72, 629], "00800002": [72, 629], "adam_upd": [72, 95, 650], "mw_tm1": [72, 95, 630, 635, 650], "vw_tm1": [72, 95, 630, 635, 650], "ws_new": [72, 95, 630, 635, 636, 637, 650], "updated_weight": [72, 95, 630, 650], "92558753": [72, 630], "92558873": [72, 630, 650], "92558718": [72, 630, 650], "00000063e": [72, 95, 630, 650], "00000016e": [72, 95, 630, 650], "00000086e": [72, 95, 630, 650], "gradient_descent_upd": [72, 95, 650, 655, 733, 734, 735], "descent": [72, 95, 633, 650, 814, 882], "new_weight": [72, 95, 633, 635, 636, 650], "lamb_upd": [72, 95, 650], "max_trust_ratio": [72, 95, 635, 650, 814], "decay_lambda": [72, 95, 635, 636, 650, 814], "trust": [72, 95, 635, 650, 814], "ratio": [72, 95, 635, 650, 814], "decai": [72, 95, 635, 636, 650, 814], "lamb": [72, 95, 635, 650, 814], "784": [72, 635, 650], "lars_upd": [72, 95, 650], "lar": [72, 95, 636, 650, 814], "34077978": [72, 636, 650], "78025991": [72, 636, 650], "56051969": [72, 636, 650], "78026009": [72, 636, 650], "56051981": [72, 636, 650], "12103939": [72, 636, 650], "optimizer_upd": [72, 95, 650], "effective_grad": [72, 95, 637, 650], "3e": [72, 95, 637, 650], "preserve_typ": [72, 95, 639, 650], "_arraywithimag": [73, 115], "_arraywithlay": [74, 115], "conv1d": [74, 97, 651, 810, 822], "filter_format": [74, 97, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672], "channel_last": [74, 97, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 794], "x_dilat": [74, 97, 651, 664, 665, 667, 668, 669, 671], "d_out": [74, 97, 388, 405, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672], "channel_first": [74, 97, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672], "wio": [74, 651, 664, 665, 666, 671], "conv1d_transpos": [74, 97, 651], "output_shap": [74, 97, 651, 664, 666, 668, 670, 672, 810], "iow": [74, 97, 651, 666], "woi": [74, 97, 651, 666], "fh": [74, 97, 651, 656, 664, 667, 668, 669, 670, 671, 672, 673, 748], "hwio": [74, 651, 664, 665, 667, 671], "conv2d_transpos": [74, 97, 651], "iohw": [74, 97, 651, 668], "hwoi": [74, 97, 651, 668], "conv3d": [74, 97, 651, 670, 810, 822], "conv3d_transpos": [74, 97, 651, 672], "iodhw": [74, 97, 651, 670, 672], "dhwoi": [74, 97, 651, 670, 672], "depthwise_conv2d": [74, 97, 651], "randint": [74, 79, 81, 97, 102, 658, 660, 673, 677, 767, 848, 878], "noise_shap": [74, 97, 651, 674], "42857146": [74, 651, 674], "85714293": [74, 651, 674], "28571415": [74, 97, 651, 674], "71428585": [74, 97, 651, 674], "14285755": [74, 97, 651, 674], "5714283": [74, 651, 674], "4285717": [74, 97, 651, 674], "8571434": [74, 97, 651, 674], "2857151": [74, 651, 674], "dropout1d": [74, 97, 388, 413], "dropout2d": [74, 97, 388], "dropout3d": [74, 97, 388], "outer_batch_shap": [74, 97, 651, 675], "inner_batch_shap": [74, 97, 651, 675], "lstm_updat": [74, 97, 651, 868], "init_h": [74, 97, 651, 677, 868], "init_c": [74, 97, 651, 677, 868], "recurrent_kernel": [74, 97, 651, 677, 868], "recurrent_bia": [74, 97, 651, 677, 868], "hidden": [74, 97, 651, 676, 677, 810, 845, 852, 868], "recurr": [74, 93, 97, 388, 434, 651, 677, 868, 882], "timestep": [74, 93, 97, 388, 434, 651, 676, 677, 678, 810, 868], "h_i": [74, 97, 677], "c_i": [74, 97, 677], "rc": [74, 97, 677], "multi_head_attent": [74, 97, 651, 859], "num_head": [74, 97, 651, 678, 810], "in_proj_weight": [74, 97, 651, 678], "q_proj_weight": [74, 97, 651, 678], "k_proj_weight": [74, 97, 651, 678], "v_proj_weight": [74, 97, 651, 678], "out_proj_weight": [74, 97, 651, 678], "in_proj_bia": [74, 97, 651, 678], "out_proj_bia": [74, 97, 651, 678], "is_caus": [74, 97, 651, 678, 681], "key_padding_mask": [74, 97, 651, 678], "bias_k": [74, 97, 651, 678], "bias_v": [74, 97, 651, 678], "static_k": [74, 97, 651, 678], "static_v": [74, 97, 651, 678], "add_zero_attn": [74, 97, 651, 678], "return_attention_weight": [74, 97, 651, 678], "average_attention_weight": [74, 97, 651, 678], "scaled_dot_product_attent": [74, 97, 651], "dropout_p": [74, 97, 651, 681], "num_queri": [74, 97, 651, 681], "feat_dim": [74, 97, 651, 681], "num_kei": [74, 97, 651, 681], "causal": [74, 97, 651, 678, 681], "attent": [74, 97, 651, 678, 681, 810, 839, 843], "29999995": [74, 309, 310, 320, 380, 388, 432, 651, 660, 681, 768], "19994521": [74, 651, 681], "09994531": [74, 651, 681], "30000019": [74, 391, 481, 651, 681], "_arraywithlinearalgebra": [75, 115], "choleski": [75, 98, 652, 859], "625": [75, 93, 361, 652, 682], "vif": [75, 98, 683], "det": [75, 98, 652, 700, 847], "axis1": [75, 77, 98, 100, 652, 654, 686, 706, 729], "axis2": [75, 98, 652, 686, 706], "eigh": [75, 98, 389, 442, 652, 687], "uplo": [75, 98, 652, 688, 689], "eigvalsh": [75, 98, 652], "array_lik": [75, 98, 388, 390, 391, 433, 466, 467, 471, 472, 503, 652, 690, 697, 825], "203": [75, 92, 242, 652, 657, 690, 755], "233": [75, 652, 690], "inv": [75, 98, 652], "transpose_a": [75, 98, 652, 692], "transpose_b": [75, 98, 652, 692], "adjoint_a": [75, 98, 652, 692], "adjoint_b": [75, 98, 652, 692], "matrix_norm": [75, 98, 652], "ord": [75, 98, 652, 693, 709], "fro": [75, 98, 390, 466, 652, 693], "nuc": [75, 98, 652, 693], "performingth": [75, 693], "matrix_pow": [75, 98, 652], "matrix_rank": [75, 98, 652], "hermitian": [75, 98, 389, 442, 443, 652, 687, 688, 689, 695, 702], "largest_singular_valu": [75, 98, 652, 695, 698], "defici": [75, 652, 695], "matrix_transpos": [75, 98, 652], "pinv": [75, 98, 652], "pseudo": [75, 98, 652, 698, 858], "99999988": [75, 98, 652, 698], "qr": [75, 98, 652, 861], "12309149": [75, 652, 699], "90453403": [75, 652, 699], "40824829": [75, 652, 699], "49236596": [75, 652, 699], "30151134": [75, 652, 699], "81649658": [75, 652, 699], "86164044": [75, 652, 699], "12403841e": [75, 652, 699], "60113630e": [75, 652, 699], "10782342e": [75, 652, 699], "04534034e": [75, 652, 699], "80906807e": [75, 652, 699], "88178420e": [75, 98, 652, 689, 699], "slogdet": [75, 98, 652], "logabsdet": [75, 98, 652, 700], "natur": [75, 98, 256, 274, 275, 276, 277, 296, 367, 385, 647, 652, 700, 843, 850, 852, 861], "098611": [75, 652, 700], "full_matric": [75, 98, 652, 702], "svf": [75, 702], "reconstructed_x": [75, 652, 702], "svdval": [75, 98, 652], "tensorsolv": [75, 98, 652], "vander": [75, 98, 652], "vandermond": [75, 98, 652, 707], "vecdot": [75, 98, 652], "vector_norm": [75, 98, 652], "manhattan": [75, 98, 652, 709], "euclidean": [75, 98, 110, 111, 652, 709], "7416575": [75, 98, 652, 709], "vector_to_skew_symmetric_matrix": [75, 98, 652], "_arraywithloss": [76, 115], "binary_cross_entropi": [76, 99, 653, 847], "pos_weight": [76, 99, 653, 711], "crossentropi": [76, 99, 653, 711], "26765382": [76, 653, 711], "34657359": [76, 653, 712], "sparse_cross_entropi": [76, 99, 653], "07438118": [76, 99, 713], "11889165": [76, 713], "_arraywithmanipul": [77, 115], "x_min": [77, 100, 654, 717, 868], "x_max": [77, 100, 654, 717, 868], "before_1": [77, 100, 391, 497, 654, 719, 732], "after_1": [77, 100, 391, 497, 654, 719, 732], "before_n": [77, 100, 391, 497, 654, 719, 732], "after_n": [77, 100, 391, 497, 654, 719, 732], "repetit": [77, 100, 654, 723, 730, 866], "flat": [77, 87, 100, 396, 527, 590, 649, 654, 723], "allowzero": [77, 100, 654, 724], "remain": [77, 80, 93, 100, 103, 236, 253, 254, 260, 268, 269, 286, 289, 295, 297, 388, 412, 413, 414, 433, 647, 654, 656, 659, 724, 742, 765, 825, 838, 839, 847, 850, 852, 856, 864, 866, 870], "roll": [77, 100, 654, 855], "shift": [77, 89, 100, 116, 149, 160, 245, 247, 341, 382, 644, 647, 654, 725, 838, 839, 849, 850, 855, 862], "restor": [77, 100, 654, 725, 854], "num_or_size_split": [77, 87, 100, 654, 726, 868], "with_remaind": [77, 87, 100, 654, 726], "squeezabl": [77, 654, 727], "swapax": [77, 100, 654], "axis0": [77, 100, 654, 729], "swap_ax": [77, 729], "swap": [77, 100, 654, 729, 819, 877], "tile": [77, 94, 100, 561, 654], "unpack": [77, 100, 654, 731, 861, 863], "zero_pad": [77, 100, 654], "_arraywithnorm": [78, 115], "layer_norm": [78, 101, 657], "normalized_idx": [78, 101, 657, 755], "new_std": [78, 101, 657, 755, 813], "learnabl": [78, 101, 651, 655, 657, 676, 735, 755, 810, 813], "0976": [78, 657, 755], "3452": [78, 657, 755], "2740": [78, 657, 755], "1047": [78, 657, 755], "5886": [78, 657, 755], "2732": [78, 657, 755], "7696": [78, 657, 755, 794], "7024": [78, 657, 755], "2518": [78, 657, 755], "826": [78, 657, 755], "178": [78, 657, 755], "981": [78, 657, 755], "831": [78, 657, 755], "421": [78, 657, 755], "_arraywithrandom": [79, 115], "multinomi": [79, 102, 395, 524, 658], "population_s": [79, 102, 658, 756], "num_sampl": [79, 102, 658, 756], "unnorm": [79, 102, 658, 756, 863], "popul": [79, 83, 87, 102, 106, 658, 662, 756, 782, 784, 848, 849, 859, 863, 868], "draw": [79, 102, 395, 522, 524, 526, 658, 756, 758, 759, 794, 795, 796, 797, 802, 809, 837, 842, 861, 863], "half": [79, 102, 139, 300, 644, 647, 658, 757, 759, 835, 853, 866], "235": [79, 758], "float16": [79, 90, 102, 147, 170, 172, 173, 178, 180, 359, 385, 644, 645, 652, 709, 758, 759, 794, 795, 835, 848, 853, 860, 863], "807": [79, 758], "_arraywithsearch": [80, 115], "select_last_index": [80, 103, 659, 762, 763], "occurr": [80, 391, 400, 512, 534, 659, 660, 762, 763, 767], "argmin": [80, 103, 659], "output_dtyp": [80, 103, 659, 763], "argwher": [80, 103, 659], "nonzero": [80, 103, 111, 234, 235, 236, 239, 242, 251, 253, 256, 258, 260, 286, 299, 304, 647, 659], "as_tupl": [80, 103, 659, 765], "fewer": [80, 103, 659, 765], "_arraywithset": [81, 115], "unique_al": [81, 104, 660], "by_valu": [81, 104, 660, 767], "inverse_indic": [81, 104, 391, 512, 660, 767, 769], "unique_count": [81, 104, 660], "unique_invers": [81, 104, 660], "unique_valu": [81, 104, 660], "admonit": [81, 770], "dask": [81, 660, 767, 768, 769, 770], "difficult": [81, 660, 767, 768, 769, 770, 839, 842, 848, 863, 870], "omit": [81, 296, 647, 660, 767, 768, 769, 770, 855, 859, 860], "x_i": [81, 83, 92, 111, 233, 234, 235, 238, 239, 240, 242, 244, 249, 250, 251, 256, 258, 259, 266, 267, 268, 269, 270, 274, 275, 276, 277, 281, 288, 293, 296, 297, 298, 299, 300, 301, 303, 304, 306, 348, 349, 351, 372, 385, 647, 660, 662, 767, 768, 769, 770, 778, 779, 780, 782, 783, 784, 809, 851], "x_j": [81, 660, 767, 768, 769, 770], "typeerror": [81, 104, 660, 770], "_arraywithsort": [82, 115], "stabil": [82, 105, 606, 607, 649, 661, 771, 774, 848, 858, 864, 866], "msort": [82, 105, 661], "searchsort": [82, 105, 661, 795], "sorter": [82, 105, 661, 773], "ret_dtyp": [82, 105, 661, 773], "_arraywithstatist": [83, 115], "cumprod": [83, 106, 662, 860, 868], "cumsum": [83, 106, 662, 848], "einsum": [83, 106, 662], "equat": [83, 93, 106, 327, 382, 389, 459, 652, 662, 701, 777, 794, 824, 847, 882], "operand": [83, 93, 97, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 267, 268, 269, 274, 275, 276, 277, 278, 286, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 306, 348, 349, 372, 376, 385, 386, 388, 431, 647, 652, 662, 700, 706, 777, 778, 780, 781, 783, 824, 825, 843, 846, 851, 860], "contract": [83, 652, 662, 704, 777, 825], "seq": [83, 662, 777, 794], "ii": [83, 106, 662, 777, 839], "jk": [83, 662, 777, 825], "ik": [83, 662, 777, 825], "126": [83, 123, 292, 641, 647, 652, 662, 694, 777], "510": [83, 662, 777], "special": [83, 98, 110, 111, 115, 116, 233, 234, 235, 236, 238, 239, 240, 241, 242, 249, 250, 251, 253, 254, 256, 258, 259, 260, 267, 268, 269, 274, 275, 276, 277, 278, 281, 286, 289, 291, 295, 296, 297, 298, 299, 300, 303, 304, 306, 348, 349, 372, 385, 647, 652, 662, 700, 706, 778, 779, 780, 781, 782, 783, 784, 794, 795, 796, 797, 802, 809, 837, 840, 842, 843, 845, 847, 850, 851, 852, 855, 859, 861, 862, 863, 864, 866, 882, 883], "arithmet": [83, 106, 247, 253, 286, 647, 662, 779, 860], "propag": [83, 247, 348, 349, 385, 647, 662, 778, 779, 780, 782, 783, 784, 858], "overflow": [83, 106, 236, 253, 260, 647, 652, 662, 700, 779, 783, 836, 848], "04999995": [83, 779], "freedom": [83, 106, 662, 782, 784, 844], "constitut": [83, 106, 662, 782, 784, 856, 868, 883], "commonli": [83, 106, 662, 782, 784, 852, 856, 858], "81649661": [83, 662, 782], "6666665": [83, 784], "667": [83, 94, 253, 555, 606, 647, 649, 784], "_arraywithutil": [84, 115], "logic": [84, 107, 217, 253, 254, 280, 281, 282, 286, 289, 646, 647, 663, 785, 786, 837, 843, 847, 848, 849, 852, 856, 857, 858, 859, 860, 862, 863, 866, 877, 879], "AND": [84, 107, 243, 254, 280, 647, 663, 785], "OR": [84, 107, 246, 282, 289, 647, 663, 786, 838, 839, 858], "_wrap_funct": [85, 108, 845, 856, 857], "function_nam": [85, 108, 837, 864], "new_funct": [85, 108, 845], "add_ivy_array_instance_method": 85, "cl": [85, 108], "moduletyp": [85, 108, 877, 878, 880], "toi": [85, 108], "arrayexampl": 85, "hasattr": [85, 108], "_containerwithactiv": [86, 116], "dict_in": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "queue": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 600, 623, 649, 865], "queue_load_s": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "container_combine_method": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "list_join": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "queue_timeout": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 600, 623, 649, 865], "print_limit": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "key_length_limit": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "print_ind": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "print_line_spac": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "ivyh": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "default_key_color": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "keyword_color_dict": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "rebuild_child_contain": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "types_to_iteratively_nest": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "alphabetical_kei": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "dynamic_backend": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 811, 812, 844, 865], "build_cal": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "containerbas": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 846], "_static_gelu": 86, "key_chain": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 176, 178, 181, 184, 185, 186, 188, 190, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 330, 331, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 373, 374, 375, 376, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 431, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 484, 493, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 521, 523, 528, 529, 536, 537, 538, 539, 546, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "to_appli": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 176, 178, 181, 184, 185, 186, 188, 190, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 330, 331, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 373, 374, 375, 376, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 431, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 484, 493, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 521, 523, 528, 529, 536, 537, 538, 539, 546, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 656, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "prune_unappli": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 176, 178, 181, 184, 185, 186, 188, 190, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 330, 331, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 373, 374, 375, 376, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 431, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 484, 493, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 521, 523, 528, 529, 536, 537, 538, 539, 546, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 656, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 749, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "map_sequ": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 162, 165, 166, 167, 168, 176, 178, 181, 184, 185, 186, 188, 190, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 330, 331, 341, 342, 346, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 373, 374, 375, 376, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 424, 425, 426, 427, 431, 432, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 484, 493, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 512, 514, 515, 516, 517, 518, 519, 521, 523, 528, 529, 536, 537, 538, 539, 546, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 665, 666, 667, 668, 669, 670, 673, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786], "prune": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 149, 154, 156, 162, 166, 168, 181, 185, 186, 193, 227, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 264, 265, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 322, 323, 324, 326, 347, 348, 349, 350, 351, 353, 355, 363, 364, 370, 372, 374, 375, 376, 412, 413, 414, 432, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 481, 482, 504, 506, 507, 508, 510, 515, 517, 518, 519, 521, 523, 536, 537, 538, 539, 548, 551, 552, 554, 555, 559, 560, 561, 562, 563, 566, 567, 570, 572, 574, 575, 576, 578, 579, 582, 590, 591, 605, 606, 607, 609, 611, 613, 614, 627, 633, 639, 656, 665, 666, 667, 668, 674, 675, 681, 682, 683, 688, 689, 690, 691, 692, 693, 695, 697, 699, 700, 706, 711, 712, 713, 717, 721, 724, 725, 726, 727, 728, 731, 732, 749, 750, 751, 752, 756, 757, 758, 759, 761, 764, 767, 768, 769, 770, 771, 775, 776, 779, 781, 782, 784, 785, 786, 792, 795, 847], "static_gelu": 86, "046": 86, "_static_hardswish": 86, "_static_leaky_relu": 86, "static_leaky_relu": 86, "38999999": [86, 93, 125, 308, 309, 380], "_static_log_softmax": 86, "static_log_softmax": 86, "371": [86, 126], "_static_mish": 86, "static_mish": 86, "30883577": [86, 127, 641], "28903052": [86, 127, 641], "10714479": [86, 127, 641], "_static_relu": 86, "static_relu": 86, "_static_sigmoid": 86, "static_sigmoid": 86, "2689414": [86, 129, 130, 641], "7310586": [86, 129, 130, 641], "88079703": [86, 129, 641], "62245935": [86, 129], "4750208": [86, 129], "_static_softmax": 86, "static_softmax": 86, "72844321": [86, 130], "19852395": [86, 130], "07303288": [86, 130], "_static_softplu": 86, "revert": [86, 131, 641], "static_softplu": 86, "53499615": 86, "42036411": 86, "948": [86, 131, 656, 736], "dictionari": [87, 104, 116, 225, 615, 631, 646, 649, 650, 770, 789, 791, 825, 843, 847, 848, 856, 860, 861, 870], "asynchron": [87, 116, 882], "wait": [87, 116, 600, 649, 837, 839, 847, 860], "arriv": [87, 116, 600, 649, 866], "cont_list_join": [87, 116], "whitespac": [87, 116], "indent": [87, 116], "newlin": [87, 116, 851], "termin": [87, 116, 838, 839, 846, 853, 854, 868], "constructor": [87, 116, 550, 649, 791, 807, 815, 848, 849, 851], "kept": [87, 116, 655, 733, 734, 839, 859, 864], "encount": [87, 116, 810, 835, 837, 848, 852, 853, 863], "node": [87, 94, 116, 552, 562, 609, 656, 746, 747, 809, 818, 822, 845, 846, 860, 877, 878, 883], "alphabet": [87, 116], "__setitem__": [87, 391, 506, 843, 846], "_cont_at_key_chains_input_as_dict": 87, "current_chain": 87, "ignore_key_error": 87, "_cont_at_key_chains_input_as_seq": 87, "_cont_call_static_method_with_flexible_arg": 87, "static_method": 87, "kw": 87, "self_idx": 87, "_cont_concat_unifi": 87, "_cont_get_dev": 87, "_cont_get_dtyp": 87, "_cont_get_shap": 87, "_cont_ivi": 87, "_cont_mean_unifi": 87, "_1": 87, "_cont_prune_key_chains_input_as_dict": 87, "return_cont": 87, "_cont_prune_key_chains_input_as_seq": 87, "_cont_slice_kei": 87, "key_slic": 87, "_cont_sum_unifi": 87, "_get_queue_item": 87, "cont_all_fals": 87, "assert_is_bool": 87, "cont_all_key_chain": 87, "include_empti": 87, "cont_all_tru": [87, 846], "cont_as_bool": 87, "cont_assert_contains_sub_contain": 87, "sub_cont": 87, "screen": [87, 837, 838], "cont_assert_contains_sub_structur": 87, "check_shap": [87, 816], "cont_assert_ident": 87, "check_typ": 87, "same_arrai": 87, "arrays_equ": 87, "cont_assert_identical_structur": 87, "assert_and_assign": 87, "congruent": 87, "cont_at_key_chain": 87, "ignore_non": 87, "cont_at_kei": 87, "substr": 87, "cont_combin": 87, "duplic": [87, 391, 503, 571, 649, 656, 738, 844, 851, 857, 858, 861], "configur": [87, 225, 646, 656, 749, 838, 839, 845, 847, 848, 853, 854], "container_rightmost": 87, "cont_common_key_chain": 87, "cont_config": 87, "cont_contains_sub_contain": 87, "cont_contains_sub_structur": 87, "cont_copi": 87, "cont_create_if_abs": 87, "noth": [87, 866], "cont_cutoff_at_depth": 87, "depth_cutoff": 87, "cont_cutoff_at_height": 87, "height_cutoff": 87, "cont_deep_copi": [87, 878], "cont_dev": 87, "cont_dev_str": 87, "cont_diff": 87, "diff_kei": 87, "detect_key_diff": 87, "detect_value_diff": 87, "detect_shape_diff": 87, "container0": 87, "cont_dtyp": 87, "cont_duplicate_array_keychain": 87, "cont_find_sub_contain": 87, "sub_cont_to_find": 87, "cont_find_sub_structur": 87, "sub_struc_to_find": 87, "cont_flatten_key_chain": 87, "above_height": 87, "below_depth": 87, "cont_format_key_chain": 87, "format_fn": 87, "cont_from_disk_as_hdf5": 87, "h5_obj_or_filepath": 87, "slice_obj": 87, "disk": [87, 812, 884], "h5py": 87, "filepath": [87, 663, 787, 788, 839, 842], "cont_from_disk_as_json": 87, "json_filepath": 87, "cont_from_disk_as_pickl": 87, "pickle_filepath": 87, "cont_from_flat_list": 87, "flat_list": 87, "hierarchi": [87, 829, 837, 862], "cont_handle_inplac": 87, "prime": [87, 848], "overwritten": [87, 843, 844], "cont_has_kei": 87, "query_kei": 87, "somewher": [87, 847], "cont_has_key_chain": 87, "cont_ident": 87, "cont_identical_array_shap": 87, "cont_identical_config": 87, "cont_identical_structur": 87, "cont_if_exist": 87, "cont_inplace_upd": 87, "cont_ivi": 87, "cont_key_chains_contain": 87, "sub_str": 87, "cont_list_stack": 87, "cont_load": 87, "cont_map": [87, 846], "func": [87, 110, 226, 377, 378, 379, 387, 553, 628, 631, 632, 634, 640, 646, 649, 650, 656, 749, 791, 837, 842, 843, 850, 852, 858], "cont_map_sub_cont": 87, "include_self": 87, "possibli": [87, 611, 649, 794, 863, 870], "cont_max_depth": 87, "cont_multi_map": 87, "map_nest": 87, "assert_ident": 87, "leftmost": [87, 656, 749], "cont_multi_map_in_funct": 87, "cont_num_arrai": 87, "cont_overwrite_at_key_chain": 87, "target_dict": 87, "return_dict": 87, "cont_prune_empti": 87, "keep_non": 87, "cont_prune_key_chain": 87, "key1": [87, 831], "key2": [87, 831], "key3": 87, "cont_prune_key_from_key_chain": 87, "certain": [87, 139, 150, 151, 390, 467, 644, 837, 838, 839, 842, 848, 856, 862, 863, 866, 870, 878, 880], "cont_prune_kei": 87, "cont_prune_keys_from_key_chain": 87, "cont_reduc": 87, "cont_remove_key_length_limit": 87, "cont_remove_print_limit": 87, "cont_reshape_lik": 87, "leading_shap": 87, "cont_restructur": 87, "keep_orig": 87, "old": [87, 838, 844, 859], "cont_restructure_key_chain": 87, "keychain_map": 87, "cont_sav": 87, "cont_set_at_key_chain": 87, "cont_set_at_kei": 87, "cont_shap": [87, 651, 669], "cont_show": 87, "cont_show_sub_contain": 87, "sub_cont_or_keychain": 87, "cont_size_ordered_arrai": 87, "keychain": [87, 93, 311, 350, 475, 476, 477, 507], "cont_slice_kei": 87, "all_depth": 87, "cont_slice_via_kei": 87, "slice_kei": 87, "cont_sort_by_kei": 87, "cont_structural_diff": 87, "cont_to_dict": 87, "cont_to_disk_as_hdf5": 87, "starting_index": 87, "max_batch_s": 87, "cont_to_disk_as_json": 87, "cont_to_disk_as_pickl": 87, "cont_to_flat_list": 87, "cont_to_iter": [87, 846], "leaf_keys_onli": 87, "cont_to_iterator_kei": 87, "cont_to_iterator_valu": 87, "cont_to_json": 87, "cont_to_nested_list": 87, "cont_to_raw": 87, "cont_trim_kei": 87, "cont_try_kc": 87, "cont_unifi": 87, "concatten": [87, 226, 646], "cont_unstack_cont": 87, "dim_siz": 87, "cont_update_config": 87, "cont_with_default_key_color": 87, "cont_with_entries_as_list": 87, "cont_with_ivy_backend": 87, "ivy_backend": [87, 861], "cont_with_key_length_limit": 87, "cont_with_print_ind": 87, "cont_with_print_limit": 87, "cont_with_print_line_spac": 87, "h5_file_s": 87, "shuffle_h5_fil": 87, "split_cont": 87, "_is_json": 87, "_repr": 87, "_containerwithconvers": [88, 116], "_static_to_ivi": 88, "_static_to_n": 88, "_containerwithcr": [89, 116], "_static_arang": 89, "_static_asarrai": 89, "_static_copy_arrai": 89, "_static_empti": 89, "_static_empty_lik": 89, "_static_ey": 89, "n_row": [89, 93, 145, 160, 341, 382, 389, 450, 644], "n_col": [89, 93, 145, 160, 341, 382, 644], "_static_from_dlpack": 89, "_static_ful": 89, "_static_full_lik": 89, "static_full_lik": 89, "2324": [89, 149, 644], "234": [89, 92, 149, 172, 255, 306, 644, 645, 647, 651, 675, 794], "_static_linspac": 89, "_static_logspac": 89, "static_logspac": 89, "15443469": [89, 151], "64158883": [89, 151], "_static_meshgrid": 89, "_static_native_arrai": 89, "_static_one_hot": 89, "static_one_hot": 89, "_static_on": 89, "_static_ones_lik": 89, "_static_tril": 89, "_static_triu": 89, "_static_zero": 89, "_static_zeros_lik": 89, "frombuff": [89, 644], "expos": [89, 147, 556, 644, 649, 831, 847, 868], "x00": [89, 147, 644], "xf0": [89, 147, 644], "x01": [89, 147, 644], "x02": [89, 147, 644], "x03": [89, 147, 644], "x04": [89, 147, 644], "x05": [89, 147], "5443469": [89, 151, 644], "static_frombuff": 89, "static_triu_indic": 89, "triu_indic": [89, 644], "_containerwithdatatyp": [90, 116], "_static_astyp": 90, "718": [90, 92, 165, 282, 645], "618": [90, 92, 165, 282, 645], "static_astyp": 90, "_static_broadcast_arrai": 90, "static_broadcast_arrai": 90, "_static_broadcast_to": 90, "static_broadcast_to": 90, "_static_can_cast": 90, "from_": [90, 168, 645], "static_can_cast": 90, "_static_default_complex_dtyp": 90, "complex_dtyp": [90, 171, 194, 645], "_static_default_float_dtyp": 90, "float_dtyp": [90, 173, 196, 645], "_static_dtyp": 90, "_static_finfo": 90, "inquir": [90, 178, 181], "static_finfo": 90, "55040e": [90, 178, 645], "7976931348623157e": [90, 178, 645], "308": [90, 178, 645, 794, 863], "_static_function_supported_dtyp": 90, "_static_function_unsupported_dtyp": 90, "_static_iinfo": 90, "1800": [90, 181, 645], "1084": 90, "40000": 90, "static_iinfo": 90, "2147483648": [90, 93, 181, 391, 506, 645], "2147483647": [90, 181, 645], "_static_is_bool_dtyp": 90, "dtype_in": [90, 163, 164, 177, 183, 184, 185, 186, 187, 188, 189, 190, 205, 645], "_static_is_complex_dtyp": 90, "is_complex_dtyp": [90, 645, 864], "roughli": [90, 838, 842], "static_is_complex_dtyp": 90, "_static_is_float_dtyp": 90, "static_is_float_dtyp": 90, "_static_is_int_dtyp": 90, "_static_is_uint_dtyp": 90, "_static_result_typ": 90, "static_result_typ": 90, "broadcats": [90, 166], "_containerwithdevic": [91, 116], "_static_dev": 91, "static_dev": 91, "_static_to_devic": 91, "static_to_devic": 91, "contaion": [91, 210], "_containerwithelementwis": [92, 116], "_static_ab": 92, "static_ab": 92, "_static_aco": 92, "static_aco": 92, "_static_acosh": 92, "static_acosh": 92, "_static_add": 92, "static_add": [92, 120], "_static_asin": 92, "static_asin": 92, "524": [92, 238, 647], "412": [92, 97, 238, 647, 656, 736], "_static_asinh": 92, "static_asinh": 92, "_static_atan": 92, "static_atan": 92, "_static_atan2": 92, "static_atan2": 92, "915": [92, 241, 647], "983": [92, 241, 647], "978": [92, 241, 647], "696": [92, 102, 241, 647, 758], "993": [92, 241, 647], "_static_atanh": 92, "static_atanh": 92, "_static_bitwise_and": 92, "static_bitwise_and": 92, "_static_bitwise_invert": 92, "static_bitwise_invert": 92, "_static_bitwise_left_shift": 92, "_static_bitwise_or": 92, "static_bitwise_or": 92, "_static_bitwise_right_shift": 92, "static_bitwise_right_shift": 92, "_static_bitwise_xor": 92, "static_bitwise_xor": 92, "_static_ceil": 92, "static_ceil": 92, "_static_co": 92, "static_co": 92, "_static_cosh": 92, "static_cosh": 92, "_static_deg2rad": 92, "static_deg2rad": 92, "0262": [92, 252, 292, 647], "873": [92, 252, 292, 647], "_static_divid": 92, "static_divid": 92, "_static_equ": 92, "static_equ": 92, "_static_erf": 92, "static_erf": 92, "27632612": [92, 255], "934008": [92, 255, 647], "99999928": [92, 255], "91903949": [92, 255], "_static_exp": 92, "static_exp": 92, "59814835": [92, 256, 647], "4131622": [92, 256], "_static_expm1": 92, "thefunct": [92, 255], "areal": 92, "static_expm1": 92, "71828175": [92, 256, 647], "38905621": [92, 256, 647], "59815216": 92, "_static_floor": 92, "static_floor": 92, "_static_floor_divid": 92, "static_floor_divid": 92, "_static_great": 92, "static_great": 92, "_static_greater_equ": 92, "static_greater_equ": 92, "_static_isfinit": 92, "999999999999": [92, 267, 647], "static_isfinit": 92, "_static_isinf": 92, "static_isinf": 92, "_static_isnan": 92, "static_isnan": 92, "_static_isr": 92, "0j": [92, 93, 155, 156, 234, 235, 236, 239, 242, 251, 256, 258, 270, 274, 276, 293, 297, 299, 300, 304, 351, 385, 644, 647, 652, 700], "23j": [92, 93], "9j": [92, 93], "static_isr": 92, "_static_lcm": 92, "1080": [92, 271], "1550": [92, 271], "130": [92, 271], "_static_less": 92, "static_less": 92, "_static_less_equ": 92, "static_less_equ": 92, "_static_log": 92, "static_log": 92, "_static_log10": 92, "static_log10": 92, "898": [92, 275, 647], "0414": [92, 275, 647], "_static_log1p": 92, "static_log1p": 92, "_static_log2": 92, "static_log2": 92, "_static_logaddexp": 92, "static_logaddexp": 92, "_static_logical_and": 92, "static_logical_and": 92, "_static_logical_not": 92, "static_logical_not": 92, "_static_logical_or": 92, "static_logical_or": 92, "_static_logical_xor": 92, "static_logical_xor": 92, "_static_maximum": 92, "static_maximum": 92, "_static_minimum": 92, "static_minimum": 92, "_static_multipli": 92, "static_multipli": 92, "_static_neg": 92, "static_neg": 92, "_static_not_equ": 92, "static_not_equ": 92, "_static_posit": 92, "static_posit": 92, "_static_pow": 92, "static_pow": 92, "_static_rad2deg": 92, "static_rad2deg": 92, "5160": 92, "10300": [92, 292, 647], "15500": 92, "20600": 92, "2860": [92, 292], "_static_reciproc": 92, "recirpoc": [92, 294], "static_reciproc": 92, "_static_remaind": 92, "static_remaind": 92, "_static_round": 92, "thevfunct": 92, "527": [92, 296, 647], "static_round": 92, "301": [92, 296, 647], "_static_sign": 92, "static_sign": 92, "_static_sin": 92, "static_sin": 92, "757": [92, 298, 647], "959": [92, 258, 298, 647], "279": [92, 298, 388, 410, 420, 554, 647, 649], "_static_sinh": 92, "static_sinh": 92, "835": [92, 299], "347": [92, 299], "721": [92, 299], "_static_sqrt": 92, "static_sqrt": 92, "_static_squar": 92, "static_squar": 92, "_static_subtract": 92, "static_subtract": 92, "_static_tan": 92, "static_tan": 92, "_static_tanh": 92, "static_tanh": 92, "995": [92, 304, 647], "9999": 92, "_static_trapz": 92, "static_trapz": 92, "_static_trunc": 92, "static_trunc": 92, "_static_trunc_divid": 92, "75j": [92, 237, 266], "01317055": [92, 237], "05634501": [92, 237], "115": [92, 237, 292, 647], "3461759": [92, 237], "524111": [92, 237], "644": [92, 238, 647], "305": [92, 97, 238, 647], "351": [92, 252, 292], "00613": [92, 252], "0154": [92, 252], "403": [92, 256], "428772": [92, 256], "649": [92, 258], "865": [92, 258], "metho": [92, 265, 277], "imaginari": [92, 115, 125, 128, 131, 155, 156, 234, 235, 236, 251, 253, 254, 256, 258, 266, 286, 288, 289, 296, 299, 300, 304, 351, 385, 388, 389, 432, 443, 641, 644, 647, 659, 765, 850], "4j": [92, 266, 388, 432, 607, 647, 649], "7j": [92, 93, 270, 293, 351, 385, 647], "956": [92, 276], "08746284": [92, 279], "32192809": [92, 279], "nuner": [92, 286], "413": [92, 292], "335": [92, 93, 293, 351], "345j": [92, 93, 293, 351], "static_angl": 92, "static_exp2": 92, "static_fmin": 92, "static_gcd": 92, "static_imag": 92, "static_logaddexp2": 92, "static_nan_to_num": 92, "static_r": 92, "_containerwithactivationexperiment": [93, 116], "_static_celu": 93, "formlat": 93, "static_celu": 93, "_static_elu": 93, "static_elu": 93, "_static_hardshrink": 93, "hard": [93, 310, 831, 839, 882], "shrinkag": [93, 310, 320, 391, 505], "_static_hardsilu": 93, "20833333": [93, 311, 380], "29166666": [93, 311, 380], "66666669": [93, 116, 311, 380, 394, 521, 631, 650], "66666663": [93, 150, 311, 380, 644], "_static_hardtanh": 93, "3899": 93, "_static_scaled_tanh": 93, "931": 93, "71587813": 93, "88367474": 93, "00376701": [93, 317], "2285642": 93, "99999881": 93, "49999905": 93, "_static_silu": 93, "static_silu": 93, "27777028": [93, 319], "23947507": [93, 319], "0900332": [93, 319], "_static_softshrink": 93, "_static_tanhshrink": 93, "36634541": [93, 322], "02005103": [93, 322], "00262468": [93, 322], "_static_threshold": 93, "389999": [93, 312], "19722462": [93, 313], "84729779": [93, 313], "31326163": [93, 314], "46328258": [93, 314], "51301527": [93, 314], "79813886": [93, 314], "simplywrap": [93, 317], "54939651": [93, 317], "09999998": [93, 317, 629, 650], "09999999": [93, 317], "08336546": [93, 317], "0379949": [93, 317], "22856998": [93, 318], "42028043": [93, 318], "31868932": [93, 318], "static_logit": 93, "static_logsigmoid": 93, "34115386": 93, "64439666": 93, "24115384": 93, "55435526": 93, "07888974": 93, "00741899": 93, "26328245": 93, "00012302": 93, "static_prelu": 93, "static_relu6": 93, "static_selu": 93, "static_thresholded_relu": 93, "_containerwithconversionexperiment": [93, 116], "_containerwithcreationexperiment": [93, 116], "_static_trilu": 93, "blackman": [93, 325, 382], "00770143e": [93, 325], "49229857e": [93, 325], "hamming_window": [93, 382], "ham": [93, 327, 382], "4180": [93, 327], "8180": [93, 327], "hann_window": [93, 382], "hann": [93, 328, 382], "7500": [93, 328], "3455": [93, 328], "9045": [93, 328], "kaiser_bessel_derived_window": [93, 382], "suitabl": [93, 330, 331, 382, 661, 773, 796, 838, 839, 846, 864, 882], "spectral": [93, 330, 331, 382], "analysi": [93, 330, 331, 382, 882, 883], "kaiser": [93, 325, 330, 331, 382], "70710677": [93, 330, 519, 521], "18493208": [93, 330, 382], "9827513": [93, 330, 382], "kaiser_window": [93, 382], "static_kaiser_window": [93, 331], "2049": [93, 331], "8712": [93, 331], "0367": [93, 331, 382], "7753": [93, 331], "static_blackman_window": 93, "static_eye_lik": 93, "static_hamming_window": 93, "static_hann_window": 93, "static_hann": 93, "static_kaiser_bessel_derived_window": 93, "static_mel_weight_matrix": 93, "static_polyv": 93, "static_tril_indic": 93, "static_unsorted_segment_mean": 93, "static_unsorted_segment_min": 93, "static_unsorted_segment_sum": 93, "static_vorbis_window": 93, "vorbis_window": [93, 382], "vorbi": [93, 346, 382], "38268343": [93, 346, 652, 688], "92387953": [93, 346], "14943586": [93, 346, 382], "51644717": [93, 346], "85631905": [93, 346], "98877142": [93, 346], "tril_indic": [93, 382], "_containerwithdata_typeexperiment": [93, 116], "_containerwithdeviceexperiment": [93, 116], "_containerwithelementwiseexperiment": [93, 116], "0003": [93, 347, 652, 691, 794, 797], "0006": [93, 347, 375], "2345j": [93, 351], "5772": [93, 355], "9635": [93, 355], "4228": [93, 355], "9228": [93, 355], "57299206e": [93, 356, 357], "67773480e": [93, 356, 357], "20904985e": [93, 356, 357], "84270084": [93, 356, 357, 385], "99532223": [93, 356, 357], "99997795": [93, 356, 357], "mantissa": [93, 361, 385, 848], "frist": [93, 362, 385], "coord": [93, 362], "6055": [93, 363], "160": [93, 365], "10240": [93, 365], "60000038": [93, 366, 385, 652, 708], "0707": [93, 372, 385], "0579": [93, 372, 385], "static_allclos": 93, "static_amax": 93, "static_amin": 93, "static_binar": 93, "static_conj": 93, "static_copysign": 93, "static_count_nonzero": 93, "static_diff": 93, "static_digamma": 93, "57721537": 93, "96351004": 93, "static_erfc": 93, "15729921": 93, "00467773": [93, 356, 385], "static_erfinv": 93, "static_fix": 93, "static_float_pow": 93, "static_fmax": 93, "static_fmod": 93, "static_frexp": 93, "static_gradi": 93, "static_hypot": 93, "static_isclos": 93, "static_ldexp": 93, "static_lerp": 93, "90000057": [93, 366, 385], "70000076": [93, 366, 385], "55000019": [93, 366, 385], "05000019": [93, 366, 385], "static_modf": 93, "static_nansum": 93, "static_nextaft": 93, "static_signbit": 93, "static_sinc": 93, "636": 93, "090": 93, "070": 93, "057": 93, "static_sparsify_tensor": 93, "static_xlogi": 93, "static_zeta": 93, "0244": [93, 375], "_containerwithgeneralexperiment": [93, 116], "_static_reduc": 93, "static_reduc": 93, "_containerwithgradientsexperiment": [93, 116], "_containerwithimageexperiment": [93, 116], "_containerwithlayersexperiment": [93, 116], "_static_fft": 93, "static_fft": 93, "_static_sliding_window": 93, "673": [93, 410], "0507": [93, 410], "79711437": [93, 388, 410, 420], "94867325": [93, 388, 410, 420], "74089146": [93, 388, 410, 420], "25980937": [93, 388, 410, 420], "64958102": [93, 388, 410, 420], "2442648": [93, 388, 410, 420], "247306": [93, 422], "908323j": [93, 422], "494955": [93, 422], "90395j": [93, 422], "static_adaptive_avg_pool1d": 93, "static_adaptive_avg_pool2d": 93, "static_adaptive_max_pool2d": 93, "static_adaptive_max_pool3d": 93, "static_avg_pool1d": 93, "static_avg_pool2d": 93, "static_avg_pool3d": 93, "static_dct": 93, "253": [93, 299, 647], "515": [93, 658, 758], "467": 93, "static_dft": 93, "static_embed": 93, "static_idct": 93, "93732834": [93, 388, 410], "75048852": [93, 388, 410], "29723358": [93, 388, 420], "6950531": 93, "93914509": 93, "88008738": 93, "18951225": 93, "06697273": [93, 388, 420], "57439804": 93, "68861485": [93, 388, 420], "41308832": [93, 388, 420], "0700836": 93, "2449036": 93, "6711426": 93, "514": 93, "501709": 93, "4924011": 93, "static_ifft": 93, "static_ifftn": 93, "static_interpol": 93, "static_max_pool1d": 93, "static_max_pool2d": 93, "max_pool2dd": 93, "static_max_pool3d": 93, "static_max_unpool1d": 93, "static_rfft": 93, "static_rfftn": 93, "static_rnn": 93, "step_funct": [93, 388, 434], "initial_st": [93, 388, 434, 651, 676], "go_backward": [93, 388, 434], "unrol": [93, 388, 434, 651, 677, 868], "input_length": [93, 388, 434], "zero_output_for_mask": [93, 388, 434], "return_all_output": [93, 388, 434], "rnn": [93, 388, 882], "tempor": [93, 388, 434], "state_s": [93, 388, 434], "while_loop": [93, 388, 434, 643], "otput": [93, 388, 434], "funciton": [93, 388, 434], "static_stft": 93, "_containerwithlinearalgebraexperiment": [93, 116], "933034": [93, 389, 439], "eigenvealu": [93, 442, 687], "xx": [93, 442, 444, 687], "37228107": [93, 442, 687], "3722816": [93, 442, 687], "8245648": [93, 442, 687], "41597357": [93, 442, 687], "56576747": [93, 442, 687], "9093767": [93, 442, 687], "56155": [93, 443], "82842": [93, 443], "450": [93, 449], "static_adjoint": 93, "static_batched_out": 93, "static_cond": 93, "static_diagflat": 93, "static_dot": 93, "static_eig": 93, "static_eigh_tridiagon": 93, "static_eigv": 93, "static_higher_order_mo": 93, "static_initialize_tuck": 93, "static_kron": 93, "kroneck": [93, 389, 448, 449], "static_make_svd_non_neg": 93, "static_matrix_exp": 93, "static_mode_dot": 93, "static_multi_dot": 93, "static_multi_mode_dot": 93, "static_partial_tuck": 93, "static_svd_flip": 93, "static_tensor_train": 93, "static_truncated_svd": 93, "static_tt_matrix_to_tensor": 93, "tt_matrix": [93, 389, 463], "output_tensor": [93, 113, 389, 463], "static_tuck": 93, "_containerwithlossesexperiment": [93, 116], "_static_hinge_embedding_loss": 93, "_static_huber_loss": 93, "static_huber_loss": 93, "0575": [93, 466], "_static_kl_div": 93, "_static_l1_loss": 93, "static_l1_loss": 93, "_static_log_poisson_loss": 93, "static_log_poisson_loss": 93, "_static_poisson_nll_loss": 93, "06446016": 93, "55611551": 93, "30244565": [93, 470], "_static_smooth_l1_loss": 93, "static_smooth_l1_loss": 93, "_static_soft_margin_loss": 93, "3890561": [93, 469], "413159": [93, 469], "06429195": [93, 470], "43333333": [93, 471], "10666666": [93, 471], "_containerwithmanipulationexperiment": [93, 116], "_static_fill_diagon": 93, "_static_put_along_axi": 93, "_static_tak": 93, "69999981": [93, 320, 380, 391, 481, 506], "_static_trim_zero": 93, "_static_unflatten": 93, "_static_unique_consecut": 93, "ary1": [93, 391, 475, 476, 477], "ary2": [93, 391, 475, 476, 477], "broadcast_shap": [93, 119, 391, 794, 796], "static_concat_from_sequ": [93, 482], "30192195": [93, 494], "static_as_strid": 93, "static_atleast_1d": 93, "static_atleast_2d": 93, "static_atleast_3d": 93, "static_broadcast_shap": 93, "static_column_stack": 93, "static_dsplit": 93, "static_dstack": 93, "static_expand": 93, "static_flatten": 93, "static_fliplr": 93, "static_flipud": 93, "static_fold": 93, "static_heavisid": 93, "static_hsplit": 93, "static_hstack": 93, "static_i0": 93, "static_matric": 93, "static_moveaxi": 93, "static_pad": 93, "static_partial_fold": 93, "static_partial_tensor_to_vec": 93, "static_partial_unfold": 93, "static_partial_vec_to_tensor": 93, "static_rot90": 93, "static_soft_threshold": 93, "static_take_along_axi": 93, "static_top_k": 93, "static_unfold": 93, "static_vsplit": 93, "static_vstack": 93, "_containerwithnormsexperiment": [93, 116], "16903085": [93, 519, 521], "50709254": [93, 519, 521], "84515423": [93, 519, 521], "44183609": [93, 519, 521], "56807494": [93, 519, 521], "69431382": [93, 519, 521], "static_batch_norm": 93, "static_group_norm": 93, "static_instance_norm": 93, "static_l1_norm": 93, "static_l2_norm": 93, "static_lp_norm": 93, "12500000": 93, "37500000": 93, "62500000": 93, "27500000": 93, "35000000": 93, "42500000": 93, "0000000": 93, "5000000": 93, "2500000": 93, "_containerwithrandomexperiment": [93, 116], "43643127": [93, 524], "32325703": [93, 524], "24031169": [93, 524], "34251311": [93, 524], "31692529": [93, 524], "3405616": [93, 524], "5319725": [93, 524], "22458365": [93, 524], "24344385": [93, 524], "26588406": [93, 524], "61075421": [93, 524], "12336174": [93, 524], "51142915": [93, 524], "25041268": [93, 524], "23815817": [93, 524], "64042903": [93, 524], "25763214": [93, 524], "10193883": [93, 524], "31624692": [93, 524], "46567987": [93, 524], "21807321": [93, 524], "37677699": [93, 524], "39914594": [93, 524], "22407707": [93, 524], "static_bernoulli": 93, "static_beta": 93, "static_dirichlet": 93, "static_gamma": 93, "static_poisson": 93, "_containerwithsearchingexperiment": [93, 116], "static_unravel_index": 93, "_containerwithsetexperiment": [93, 116], "_containerwithsortingexperiment": [93, 116], "invert_permut": [93, 398], "static_invert_permut": 93, "static_lexsort": [93, 105], "_containerwithstatisticalexperiment": [93, 116], "_static_cummax": 93, "static_cummax": 93, "_static_cummin": 93, "static_cummin": 93, "_static_nanmin": 93, "static_nanmin": 93, "func_nam": [93, 539, 837, 850, 851, 856, 860], "static_bincount": 93, "static_corrcoef": 93, "static_cov": [93, 400, 536], "static_histogram": 93, "static_igamma": 93, "static_lgamma": 93, "static_median": 93, "static_nanmean": 93, "static_nanmedian": 93, "static_nanprod": 93, "static_quantil": 93, "_containerwithutilityexperiment": [93, 116], "static_optional_get_el": 93, "_containerwithgener": [94, 116], "_static_all_equ": 94, "static_all_equ": 94, "_static_array_equ": 94, "a0": [94, 391, 481], "static_array_equ": 94, "_static_assert_supports_inplac": 94, "_static_clip_matrix_norm": 94, "static_clip_matrix_norm": 94, "849": [94, 554, 649], "_static_clip_vector_norm": 94, "static_clip_vector_norm": 94, "_static_einops_rearrang": 94, "static_einops_rearrang": 94, "_static_einops_reduc": 94, "static_einops_reduc": 94, "29333329": [94, 560, 649], "53000069": [94, 560, 649], "39666676": [94, 560, 649], "20666695": [94, 560, 649], "_static_einops_repeat": 94, "static_einops_repeat": 94, "_static_exist": 94, "_static_fourier_encod": 94, "static_fourier_encod": 94, "classivi": [94, 660, 768], "89858720e": 94, "79717439e": 94, "_static_gath": 94, "static_gath": 94, "_static_gather_nd": 94, "static_gather_nd": 94, "_static_get_num_dim": 94, "static_get_num_dim": 94, "_static_has_nan": 94, "leafwis": 94, "static_has_nan": 94, "_static_inplace_decr": 94, "_static_inplace_incr": 94, "_static_inplace_upd": 94, "_static_is_arrai": 94, "static_is_arrai": 94, "_static_is_ivy_arrai": 94, "static_is_ivy_arrai": 94, "_static_is_native_arrai": 94, "static_is_native_arrai": 94, "_static_scatter_flat": 94, "_static_scatter_nd": 94, "static_scatter_nd": 94, "_static_s": 94, "static_s": 94, "_static_stable_divid": 94, "22222222": 94, "11111111": 94, "857": [94, 606, 649], "444": 94, "_static_stable_pow": 94, "00012": [94, 607, 649], "00016": [94, 95, 607, 635, 649, 650], "00001": [94, 607, 649, 794], "00032": [94, 607], "00256": [94, 607], "1679638": [94, 607], "395": [94, 607], "16777383": [94, 607], "_static_supports_inplace_upd": 94, "_static_to_list": 94, "static_to_list": 94, "_static_to_numpi": 94, "static_to_numpi": 94, "_static_to_scalar": 94, "static_to_scalar": 94, "_static_value_is_nan": 94, "452": 94, "static_value_is_nan": 94, "833": [94, 555], "items": [94, 115, 649], "static_isin": 94, "static_items": 94, "static_strid": 94, "425": [94, 627], "_containerwithgradi": [95, 116], "_static_stop_gradi": 95, "static_stop_gradi": 95, "976": [95, 304, 629, 647, 650], "49e": [95, 629, 650], "74e": [95, 629, 650], "95e": [95, 629, 650], "024": [95, 629, 650], "096": [95, 629, 650], "626": [95, 629, 650], "en": [95, 629, 630, 650, 847], "wikipedia": [95, 629, 630, 650], "wiki": [95, 629, 630, 650], "stochastic_gradient_desc": [95, 629, 630, 650], "01099": [95, 630], "01003": [95, 630, 650], "01015": [95, 630, 650], "99936122": [95, 630, 650], "99936116": [95, 630, 650], "99936128": [95, 630, 650], "99936104": [95, 630, 650], "w_new": [95, 633, 650], "708": [95, 635, 650], "445": [95, 635, 650], "6e": [95, 635, 650], "00036": [95, 635, 650], "00049": [95, 635, 650], "layerwis": [95, 636, 650], "01132035": [95, 636, 650], "22264051": [95, 636, 650], "2056601": [95, 636, 650], "1324538": [95, 636, 650], "56490755": [95, 636, 650], "96622658": [95, 636, 650], "90848625": [95, 636, 650], "93616199": [95, 636, 650], "77232409": [95, 636, 650], "_containerwithimag": [96, 116], "_containerwithlay": [97, 116], "_static_conv1d": 97, "static_conv1d": 97, "_static_conv1d_transpos": 97, "static_conv1d_transpos": 97, "112": [97, 652, 662, 666, 697, 777], "_static_conv2d": 97, "ey": [97, 644, 651, 667, 673, 866, 868], "static_conv2d": 97, "_static_conv2d_transpos": 97, "static_conv2d_transpos": 97, "_static_conv3d": 97, "fdfh": [97, 669], "static_conv3d": 97, "_static_conv3d_transpos": 97, "static_conv3d_transpos": 97, "_static_depthwise_conv2d": 97, "static_depthwise_conv2d": 97, "_static_dropout": 97, "static_dropout": 97, "_static_dropout1d": 97, "static_dropout1d": 97, "_static_dropout2d": 97, "_static_dropout3d": 97, "_static_linear": 97, "278": [97, 651, 674, 675], "static_linear": 97, "195": 97, "_static_lstm_upd": 97, "_static_multi_head_attent": 97, "_static_reduce_window": 97, "_static_scaled_dot_product_attent": 97, "static_scaled_dot_product_attent": 97, "39999962": [97, 651, 674, 675], "19999695": [97, 675], "11600018": [97, 675], "88399887": [97, 675], "306": [97, 651, 675], "19999981": [97, 310, 323, 380, 388, 432, 651, 674, 681], "59249449": [97, 651, 681], "68226194": [97, 651, 681], "19603825": [97, 651, 681], "9960382": [97, 651, 681], "26894283": [97, 651, 681], "40236187": [97, 651, 681], "39999437": [97, 651, 681], "59999037": [97, 651, 681], "35046196": [97, 651, 681], "54282808": [97, 651, 681], "39989519": [97, 651, 681], "5998764": [97, 651, 681], "_containerwithlinearalgebra": [98, 116], "_static_choleski": 98, "static_choleski": 98, "577": [98, 652, 682], "707": [98, 652, 682], "static_rol": [98, 100], "_static_cross": 98, "static_cross": 98, "_static_det": 98, "_static_diag": 98, "_static_diagon": 98, "static_diagon": 98, "_static_eigh": 98, "_static_eigvalsh": 98, "static_eigvalsh": 98, "51572949": [98, 652, 689], "17091519": [98, 652, 689], "3448143": [98, 652, 689], "35898387e": [98, 652, 689], "46410179e": [98, 652, 689], "_static_inn": 98, "static_inn": 98, "_static_inv": 98, "static_inv": 98, "_static_matmul": 98, "matul": 98, "static_matmul": 98, "_static_matrix_norm": 98, "deimens": 98, "static_matrix_norm": 98, "_static_matrix_pow": 98, "_static_matrix_rank": 98, "static_matrix_rank": 98, "_static_matrix_transpos": 98, "static_matrix_transpos": 98, "_static_out": 98, "n1": [98, 152, 644], "n2": [98, 152, 644], "static_out": [98, 697], "_static_pinv": 98, "static_pinv": 98, "0426": 98, "0964": 98, "0605": 98, "1368": 98, "_static_qr": 98, "static_qr": 98, "31622777": [98, 652, 699], "9486833": [98, 652, 699], "4472136": [98, 652, 699], "89442719": [98, 652, 699], "16227766": [98, 652, 699], "42718872": [98, 652, 699], "63245553": [98, 652, 699], "47213595": [98, 652, 699], "81377674": [98, 652, 699], "_static_slogdet": 98, "static_slogdet": 98, "6931472": 98, "0986123": 98, "_static_solv": 98, "_static_svd": 98, "static_svd": 98, "au": 98, "aS": 98, "avh": 98, "bvh": 98, "_static_svdv": 98, "_static_tensordot": 98, "_static_tensorsolv": 98, "_static_trac": 98, "static_trac": 98, "_static_vand": 98, "static_vand": 98, "343": [98, 296, 647, 707], "729": [98, 707], "_static_vecdot": 98, "_static_vector_norm": 98, "static_vector_norm": 98, "77359247": [98, 709], "_static_vector_to_skew_symmetric_matrix": 98, "09861231": [98, 652, 700], "static_general_inner_product": 98, "3475602": [98, 702], "93765765": [98, 702], "58776021": [98, 702], "10416126": [98, 702], "80644298": [98, 702], "87024701": [98, 702], "48127627": [98, 702], "79101127": [98, 702], "98288572": [98, 702], "68917423": [98, 702], "_containerwithloss": [99, 116], "_static_binary_cross_entropi": 99, "static_binary_cross_entropi": 99, "511": 99, "357": 99, "_static_cross_entropi": 99, "static_cross_entropi": 99, "20397282": 99, "83258148": 99, "60943794": [99, 652, 700], "_static_sparse_cross_entropi": 99, "static_sparse_cross_entropi": 99, "36354783": [99, 653, 711], "14733934": [99, 653, 711], "17027519": [99, 712], "53647931": [99, 712], "53647929": [99, 713], "1702752": [99, 713], "_containerwithmanipul": [100, 116], "_static_clip": 100, "static_clip": 100, "_static_concat": 100, "_static_constant_pad": 100, "static_constant_pad": 100, "_static_expand_dim": 100, "static_expand_dim": 100, "container_axi": [100, 654, 720], "_static_flip": 100, "static_flip": 100, "_static_permute_dim": 100, "static_permute_dim": 100, "_static_repeat": 100, "static_repeat": 100, "_static_reshap": 100, "static_reshap": 100, "_static_rol": 100, "positivclip": 100, "_static_split": 100, "static_split": 100, "_static_squeez": 100, "static_squeez": 100, "_static_stack": 100, "leavv": 100, "static_stack": 100, "_static_swapax": 100, "_static_til": 100, "static_til": 100, "_static_unstack": 100, "static_unstack": 100, "_static_zero_pad": 100, "repreat": [100, 723], "_containerwithnorm": [101, 116], "34198591": [101, 657, 755], "04274819": [101, 657, 755], "29923761": [101, 657, 755], "24053511": [101, 657, 755], "62221265": [101, 755], "20277636": [101, 755], "41943574": [101, 755], "83710337": [101, 755], "_containerwithrandom": [102, 116], "_static_multinomi": 102, "_static_randint": 102, "static_randint": 102, "_static_random_norm": 102, "static_random_norm": 102, "651": 102, "_static_random_uniform": 102, "static_random_uniform": 102, "481": 102, "0999": 102, "_static_shuffl": 102, "static_shuffl": 102, "431": [102, 758], "274": [102, 758], "_containerwithsearch": [103, 116], "_static_argmax": 103, "static_argmax": 103, "_static_argmin": 103, "static_argmin": 103, "_static_argwher": 103, "static_argwher": 103, "_static_nonzero": 103, "_static_wher": 103, "static_wher": 103, "_containerwithset": [104, 116], "_static_unique_al": 104, "static_unique_al": 104, "_static_unique_count": 104, "static_unique_count": 104, "_static_unique_invers": 104, "static_unique_invers": 104, "_static_unique_valu": 104, "_containerwithsort": [105, 116], "_static_argsort": 105, "static_argsort": 105, "_static_searchsort": 105, "_static_sort": 105, "static_sort": 105, "static_msort": 105, "_containerwithstatist": [106, 116], "_static_cumprod": 106, "static_cumprod": 106, "_static_cumsum": 106, "static_cumsum": 106, "_static_min": 106, "_static_prod": 106, "static_prod": 106, "11000001": [106, 781], "23100001": [106, 781], "30800003": [106, 662, 781], "_static_sum": 106, "_static_var": 106, "static_var": 106, "12666667": [106, 662, 784], "11555555": [106, 662, 784], "rtype": [106, 777, 824], "respectv": [106, 782], "81649649": [106, 782], "94280904": [106, 782], "509902": [106, 662, 782], "2472192": [106, 782], "44948983": [106, 782], "41421354": [106, 782], "6666667": [106, 784], "_containerwithutil": [107, 116], "_static_al": 107, "static_al": 107, "_static_ani": 107, "static_ani": 107, "add_ivy_container_instance_method": 108, "containerexampl": 108, "factorized_tensor": [109, 110, 111, 112, 113, 114, 117], "factorizedtensor": [109, 110, 111, 112, 113, 114], "matrix_or_tensor": 109, "to_unfold": [109, 110, 111, 112, 113, 114], "to_vec": [109, 110, 111, 112, 113, 114], "cp_tensor": [110, 111], "cptensor": [110, 111, 336, 382], "cp_copi": 110, "cp_flip_sign": 110, "s_i": [110, 111], "normalisation_weight": [110, 111], "normalised_factor": [110, 111], "cp_lstsq_grad": 110, "return_loss": 110, "nabla": 110, "mathcal": 110, "mathbf": 110, "factor_matric": 110, "cp_gradient": 110, "quantiti": 110, "cp_mode_dot": 110, "keep_dim": [110, 114], "cp_multi_mode_dot": 110, "cp_n_param": 110, "tensor_shap": [110, 112, 113, 114], "n_param": [110, 111, 112, 113, 114], "cp_norm": 110, "cp_to_tensor": 110, "khatria": 110, "rao": [110, 389, 448], "khatri": [110, 389, 448], "cp_normal": 110, "normalis": [110, 111], "u_1": [110, 111], "u_n": [110, 111], "v_1": [110, 111], "v_n": [110, 111], "v_k": [110, 111], "u_k": [110, 111], "absorb": [110, 111], "refold": [110, 391, 490, 502], "cp_to_unfold": 110, "ie": 110, "s_u_i": 110, "exploit": 110, "khatri_rao": [110, 389], "cp_to_vec": 110, "ravel": [110, 866], "unfolding_dot_khatri_rao": 110, "mttkrp": 110, "validate_cp_rank": 110, "percent": [110, 113], "validate_cp_tensor": 110, "parafac2_tensor": 111, "parafac2tensor": [111, 337, 382], "apply_parafac2_project": 111, "evolv": [111, 882], "b_i": 111, "ijk": [111, 825], "sum_r": 111, "a_": 111, "ir": [111, 883], "jr": 111, "kr": 111, "coupl": [111, 838, 843, 882], "factoris": 111, "i1": [111, 400, 539], "classmethod": [111, 118, 119, 799], "from_cptensor": 111, "parafac2_tensor_ok": 111, "parafac2_normalis": 111, "normalised_project": 111, "parafac2_to_slic": 111, "slice_idx": 111, "frontal": 111, "a_i": 111, "j_i": 111, "b_": 111, "reformul": 111, "p_i": 111, "orthogon": [111, 336, 340, 382, 389, 442, 458, 464, 652, 687, 688], "sum_": 111, "ijr": 111, "constraint": [111, 825, 847, 848, 858], "projection_matric": 111, "parafac2_to_tensor": 111, "construct": [111, 654, 730, 810, 813, 814, 815, 862, 868, 869, 882], "uneven": 111, "parafac2_to_unfold": 111, "parafac2_to_vec": 111, "validate_parafac2_tensor": 111, "cp": [111, 336, 382, 839], "tr_tensor": 112, "trtensor": [112, 338, 382], "tr_n_param": 112, "tr_to_tensor": 112, "tr_to_unfold": 112, "tr_to_vec": 112, "validate_tr_rank": 112, "validate_tr_tensor": 112, "tt_tensor": 113, "_tt_n_param": 113, "mp": [113, 339, 382], "index_upd": 113, "pad_tt_rank": 113, "factor_list": 113, "n_pad": 113, "pad_boundari": 113, "ring": 113, "bond": 113, "padded_factor_list": 113, "tt_to_tensor": 113, "assembl": [113, 389, 463], "tt_to_unfold": 113, "reassembl": 113, "tt_to_vec": 113, "validate_tt_rank": 113, "constant_rank": 113, "allow_overparametr": 113, "proport": [113, 809], "realiz": [113, 882], "validate_tt_tensor": 113, "tucker_tensor": 114, "tucker_copi": 114, "tucker_mode_dot": 114, "tucker_n_param": 114, "tucker_norm": 114, "tucker_to_tensor": 114, "skip_factor": 114, "transpose_factor": 114, "tucker_to_unfold": 114, "tucker_to_vec": 114, "validate_tucker_rank": 114, "fixed_mod": 114, "validate_tucker_tensor": 114, "_bisection_root_find": 114, "fun": [114, 379, 387, 628, 649, 656, 747, 847], "max_it": 114, "__abs__": [115, 116], "__add__": [115, 116, 843, 846, 850, 851, 855, 860, 861], "__eq__": [115, 116], "__ge__": [115, 116], "__gt__": [115, 116, 866], "__le__": [115, 116], "__lt__": [115, 116], "__ne__": [115, 116], "__pow__": [115, 116], "69678056": 115, "59876156": 115, "82660675": 115, "__radd__": [115, 116, 850, 851, 860], "__rrshift__": [115, 116], "__rshift__": [115, 116], "__rsub__": [115, 116], "__sub__": [115, 116, 843, 846, 850, 855], "__truediv__": [115, 116, 843, 846, 850], "__xor__": [115, 116], "referenc": [115, 852, 859], "resid": [115, 119, 654, 720, 860, 868], "mt": 115, "eq": 116, "ge": 116, "le": 116, "ne": 116, "75979435": 116, "52153397": 116, "13532257": 116, "rshift": 116, "truediv": 116, "nested_arrai": [118, 119, 120, 845], "nestedarrai": 118, "nested_rank": [118, 119, 120], "inner_shap": [118, 119, 120], "nestedarraybas": [118, 119, 120], "from_row_length": 118, "row_length": 118, "from_row_split": 118, "row_split": 118, "ragged_map": 119, "ragged_multi_map": 119, "ragged_arrai": 119, "ragged_multi_map_in_funct": 119, "replace_ivy_arrai": 119, "unbind": 119, "nestedarrayelementwis": 120, "strictli": [125, 128, 131, 260, 641, 647, 855, 859], "24000001": [125, 641], "703": [126, 641], "683": [126, 641], "408": [126, 641], "313": [126, 641], "437": [126, 641], "40337825": [127, 641], "56114835": [127, 641], "20788449": [127, 641], "0768": [130, 641], "\u03b2": [131, 641], "body_fn": [135, 136, 138, 643], "bodi": [135, 138, 643, 842, 863], "lst": [135, 643], "orelse_fn": [136, 643], "body1": [137, 643], "body2": [137, 643], "test_fn": [138, 643, 792, 831, 877, 880], "repeatedli": [138, 643, 656, 745, 847, 863], "ml_framework": [139, 644], "distanc": [139, 644], "adjac": [139, 644], "nestedsequ": [140, 141, 644], "typevar": [140, 141, 644], "supportsbufferprotocol": [140, 141, 644], "static_copy_arrai": [142, 644], "intdtyp": [145, 156, 162, 174, 185, 190, 197, 203, 644, 645], "pycapsul": [146, 157, 644], "interchang": [146, 157, 644, 654, 729], "plu": [147, 644], "x00b": [147, 644], "x00d": [147, 644], "x00e": [147, 644], "41588834": [151, 644], "7827941": [151, 644], "6227766": [151, 644], "23413252": [151, 644], "n3": [152, 644], "xv": [152, 644], "yv": [152, 644], "x_nativ": [153, 644, 859], "y_nativ": [153, 644], "z_nativ": [153, 644], "d_type": [155, 644], "col": [160, 341, 382, 644], "primari": [160, 179, 180, 212, 213, 341, 382, 398, 529, 564, 565, 644, 645, 646, 649, 795, 797, 837, 841, 844, 848, 857, 859, 860, 862, 863, 866, 870, 872], "upward": [160, 341, 382, 644], "downward": [160, 341, 382, 644], "2xn": [160, 341, 382, 644], "subarrai": [160, 341, 382, 644], "closest": [170, 249, 259, 260, 296, 306, 645, 647, 863, 866], "xtype": [170, 645], "ytype": [170, 645], "native_uint16": [170, 645], "complexdtyp": [171, 185, 194, 645], "set_default_complex_dtyp": [171, 200, 645], "4294": [171, 173, 645], "967346": [171, 173, 645], "set_default_dtyp": [172, 201, 645, 848, 856], "floatdtyp": [173, 196, 645], "set_default_float_dtyp": [173, 182, 194, 202, 645, 848], "int_dtyp": [174, 197, 645], "set_default_int_dtyp": [174, 182, 203, 645, 848], "4294967346": [174, 175, 645], "uint_dtyp": [175, 198, 645], "uint": [175, 190, 198, 204, 645, 848, 861], "uintdtyp": [175, 190, 198, 204, 645], "set_default_uint_dtyp": [175, 182, 204, 645], "native_bool": [177, 645], "ieee": [178, 236, 253, 258, 276, 286, 295, 300, 303, 642, 645, 647], "754": [178, 236, 253, 258, 276, 286, 295, 300, 303, 642, 645, 647], "smallest_norm": [178, 645], "bfloat16": [179, 645, 794, 795, 848, 860, 863, 864], "unsupport": [180, 213, 565, 645, 646, 649, 789, 792, 835, 838, 853, 860], "encapsul": [181, 645, 847], "314": [181, 293, 351, 385, 645, 647], "9223372036854775808": [181, 645], "9223372036854775807": [181, 645], "65535": [181, 645], "4294967295": [181, 645], "native_uint8": [183, 645], "hashabl": [187, 645], "type1": [191, 645], "type2": [191, 645], "array_api_promot": [191, 192, 645, 794, 795], "unexpect": [192, 260, 645, 647, 848], "default_complex_dtyp": [194, 645], "default_dtype_stack": [195, 201, 645], "unset_default_dtyp": [195, 645], "native_uint64": [195, 645], "default_float_dtyp": [196, 645, 848], "default_int_dtyp": [197, 203, 645, 848], "default_uint_dtyp": [198, 204, 645], "ret1": [199, 645], "ret2": [199, 645], "default_complex_dtype_stack": [200, 645], "default_float_dtype_stack": [202, 645], "native_float16": [205, 645], "unmodifi": [207, 646, 844, 848], "aliv": [214, 219, 221, 568, 588, 589, 646, 649, 849], "139740789224448": [214, 646], "process_specif": [220, 232, 646], "percentag": [220, 646], "ram": [220, 228, 232, 646], "alon": [220, 232, 646, 854, 863], "036902561555": [220, 646], "7024003467681645": [220, 646], "as_native_dev": [220, 646], "7095597456708771": [220, 646], "attr_onli": [221, 646], "soft_device_mod": [223, 231, 646], "chunk": [224, 225, 226, 646], "split_factor": [224, 646, 852], "max_chunk_s": [226, 646], "chunk_siz": [226, 646], "input_ax": [226, 646], "output_ax": [226, 646], "fed": [226, 646], "fist": [226, 646], "gb": [228, 232, 646, 838, 853], "66700032": [228, 646], "589934592": [228, 646], "219563008": [232, 646], "902400346": [232, 646], "525205504": [232, 646], "na": [233, 647, 863], "noqa": [233, 300, 647, 810, 819, 861], "princip": [234, 238, 240, 372, 385, 647], "codomain": [234, 235, 238, 239, 240, 241, 250, 251, 256, 258, 274, 275, 277, 298, 299, 300, 303, 304, 372, 385, 647, 851], "\u03c0": [234, 238, 240, 241, 642, 647], "3\u03c0": [234, 241, 647], "unspecifi": [234, 235, 239, 242, 251, 256, 258, 260, 295, 299, 300, 304, 389, 442, 647, 652, 654, 687, 688, 728, 859], "\u03c0j": [235, 239, 242, 274, 276, 647], "3\u03c0j": [235, 274, 276, 647], "x1_i": [236, 241, 243, 245, 246, 247, 248, 253, 254, 260, 264, 265, 272, 273, 278, 280, 282, 283, 286, 289, 291, 295, 302, 647, 842], "2019": [236, 253, 258, 276, 286, 647, 882], "commut": [236, 647], "dj": [236, 253, 286, 647], "z1": [236, 647], "z2": [236, 647], "yj": [237, 647], "nanj": [239, 647], "809": [239, 647], "569": [239, 647], "733": [239, 647], "notat": [241, 647, 662, 777, 847], "denot": [241, 647, 812], "quadrant": [241, 647], "rai": [241, 647], "bitwis": [243, 246, 248, 283, 647], "170": [247, 647], "243": [247, 647], "xor": [248, 283, 647], "654": [250, 647], "ci": [251, 256, 258, 299, 647, 842, 848, 854, 861, 863, 870], "368": [251, 647], "670": [251, 647], "202": [251, 647, 842], "548": [251, 647], "1490": [251, 647], "57079633": [252, 647], "14159265": [252, 647], "71238898": [252, 647], "28318531": [252, 647], "02617994": [252, 647], "87266463": [252, 647], "01919862": [252, 647], "03839725": [252, 647], "05759586": [252, 647], "07679449": [252, 647], "09599311": [252, 647], "11519173": [252, 647], "35081118": [252, 647], "88139129": [252, 647], "underflow": [253, 260, 647, 652, 700, 848], "textbook": [253, 286, 647], "frac": [253, 275, 277, 297, 299, 303, 388, 394, 416, 417, 421, 422, 515, 517, 647], "ac": [253, 286, 647, 824, 825], "bd": [253, 286, 647], "bc": [253, 286, 647, 824, 825], "versu": [253, 286, 647], "riemann": [253, 286, 647], "sphere": [253, 286, 647], "c99": [253, 286, 647], "infinit": [253, 286, 300, 647], "unlik": [253, 286, 647, 842, 847, 850], "698": [253, 647], "truth": [254, 264, 265, 272, 273, 289, 390, 466, 647, 789, 791, 802, 835, 853, 860, 863], "32862675": [255, 647], "67780113": [255, 647], "11246294": [255, 647], "42839241": [255, 647], "52050018": [255, 647], "16799599": [255, 647], "30787992": [255, 647], "43796915": [255, 647], "98667163": [255, 647], "79690808": [255, 647], "88020504": [255, 647], "91031402": [255, 647], "95228523": [255, 647], "96610528": [255, 647], "cut": [256, 258, 298, 299, 300, 303, 647, 874], "08553692": [256, 647], "567": [256, 647], "00344786": [256, 647], "76297021": [256, 647], "197948": [256, 647], "53253174": [256, 647], "fdlibm": [258, 276, 647], "compliant": [258, 276, 281, 282, 348, 349, 385, 647, 662, 778, 779, 780, 782], "potenti": [258, 276, 647, 831, 837, 838, 847, 848, 860, 867], "632": [258, 647], "20e": [258, 647], "72e": [258, 647, 794], "greatest": [259, 260, 263, 647], "pep": [260, 647, 855], "disambigu": [260, 647, 858], "former": [260, 647, 838, 848, 851, 860], "latter": [260, 647, 838, 842, 844, 848, 851, 860], "overload": [260, 647, 863], "led": [260, 647, 842], "subtl": [260, 647, 848], "bug": [260, 647, 831, 837, 839, 845, 853, 854, 860, 863, 871], "ambigu": [260, 647], "semant": [260, 295, 391, 506, 647, 848, 868, 883], "ill": [260, 647, 796], "surpris": [260, 647, 870], "arrau": [266, 647], "log_": [275, 277, 647], "742": [276, 647], "negat": [288, 351, 385, 647], "52095687": [291, 647], "92457771": [291, 647], "49372482": [291, 647], "22738838": [291, 647], "5877228": [291, 647], "189": [292, 647, 656, 736], "252": [292, 647], "2890": [292, 647], "344": [292, 647], "355j": [293, 351, 385, 647], "55j": [293, 351, 385, 647], "primarili": [295, 647, 837, 846, 882, 884], "counterpart": [296, 647, 846, 857], "deliber": [296, 647, 866], "imprecis": [296, 647], "5654": [296, 647], "034": [296, 647], "433": [296, 632, 634, 647, 650], "signum": [297, 647], "textrm": [297, 647], "932": [298, 647], "746": [298, 647], "657": [298, 647], "indistinguish": [300, 647], "infti": [300, 647], "32455532": [300, 647], "89897949": [300, 647], "169": [300, 647], "analyt": [303, 647, 882], "pole": [303, 647], "546": [303, 647, 651, 675], "916": [303, 647], "996": [303, 647], "histor": [304, 647], "stem": [304, 647, 859], "older": [304, 647], "advis": [304, 647, 860], "462": [304, 647], "604": [304, 647], "997": [304, 647], "0375": [306, 647], "032": [306, 647], "57258511": [309, 380], "69999999": [309, 380, 640, 650], "90928203": [309, 380], "98772264": [309, 380], "99591321": [309, 380], "99863964": [309, 380], "69880581": [309, 380], "18126924": [309, 380], "79999995": [310, 320, 323, 380], "70000005": [310, 323, 380], "1241": [311, 380], "4897": [311, 380], "4090": [311, 380], "31008321": [311, 380], "1147176": [311, 380], "40899992": [311, 380], "20141329": [314, 380], "40318608": [314, 380], "48683619": [314, 380], "46328247": [314, 380], "59813893": [314, 380], "43748799": [314, 380], "parametr": [315, 380, 842, 863, 882], "71589994": [317, 321, 380], "14324772": [317, 321, 380], "70648694": [317, 321, 380], "54488957": [317, 321, 380], "10740992": [317, 321, 380], "19514863": [317, 321, 380], "6705687": [318, 380], "52016652": [318, 380], "40560818": [318, 380], "45630932": [318, 380], "2689": [319, 380], "7310": [319, 380], "7615": [319, 380], "2784": [319, 380], "7168": [319, 380], "8708": [319, 380], "4374": [319, 380], "1379": [319, 380], "0089": [319, 380], "59999991": [320, 380], "03597236": [322, 380], "43827677": [322, 380], "80100036": [322, 380], "12954807": [322, 380], "76459098": [322, 380], "20044947": [322, 380], "60000372": [322, 380], "taper": [325, 328, 382], "summat": [325, 382, 662, 777, 824, 825], "leakag": [325, 382], "wors": [325, 382], "y1": [326, 382], "0800": [327, 382], "3979": [327, 382], "9121": [327, 382], "5400": [327, 382], "han": [328, 382], "ith": [329, 382], "00726415": [330, 382], "9999736": [330, 382], "2773e": [331, 382], "0172e": [331, 382], "9294e": [331, 382], "4149": [331, 382], "9138": [331, 382], "5529": [331, 382], "multidimension": [333, 334, 382, 882], "normalise_factor": [336, 337, 382], "parafac2": [337, 382], "tr": [338, 382], "38268346": [346, 382], "38268352": [346, 382], "8563191": [346, 382], "14943568": [346, 382], "paddlepaddl": [348, 349, 385, 838], "cn": [348, 349, 385], "zh": [348, 349, 385], "amax_cn": [348, 385], "sentinel": [348, 349, 385, 662, 778, 780], "amin_cn": [349, 385], "4769": [357, 385], "position": [359, 385], "triangl": [363, 385], "999999e": [364, 385], "65999985": [366, 385], "52000046": [366, 385], "1500001": [366, 385, 560, 649], "11259177": [367, 385], "3574118": [367, 385], "20097363": [367, 385], "suppli": [371, 385, 391, 497, 824, 843, 845, 863], "217234": [372, 385], "hurwitz": [375, 385], "custom_grad_func": [377, 387], "bind": [377, 387, 837, 858, 882, 884], "upstream": [377, 387, 838, 839, 842, 853, 858], "primal": [378, 379, 387], "jacobian": [378, 379, 387, 634, 650, 870, 882], "cotang": [379, 387], "stanh": 380, "ndenumer": 382, "ndindex": 382, "random_cp": 382, "random_parafac2": 382, "random_tr": 382, "random_tt": 382, "random_tuck": 382, "bind_custom_gradient_funct": [387, 858], "jvp": 387, "vjp": 387, "h_out": [388, 405, 651, 676], "w_out": [388, 405], "area_interpol": 388, "01823380e": [388, 410, 420], "15385818e": [388, 410, 420], "36371466e": [388, 410, 420], "38763905e": [388, 410, 420], "60722279e": [388, 410, 420], "80319249e": [388, 410, 420], "05617893e": [388, 410, 420], "21500000e": [388, 410, 420], "24000015e": [388, 410, 420], "90734863e": [388, 410, 420], "10000420e": [388, 410, 420], "15899994e": [388, 410, 420], "24000053e": [388, 410, 420], "81469727e": [388, 410, 420], "09999847e": [388, 410, 420], "4135742": [388, 410, 420], "6779785": [388, 410, 420], "3770599": [388, 410, 420], "8719864": [388, 410, 420], "72109985": [388, 410, 420], "52869415": [388, 410, 420], "79182434": [388, 410, 420], "72489166": [388, 410, 420], "container_n": [388, 410, 420], "container_typ": [388, 410, 420, 649], "container_norm": [388, 410, 420], "1580677": [388, 410], "89422607": [388, 410], "86190414": [388, 410], "00041008": [388, 410], "75149155": [388, 410], "97056389": [388, 410], "87819386": [388, 410], "89381361": [388, 410], "50000000e": [388, 410, 420, 794], "22044605e": [388, 410, 420], "ed": [388, 412, 413, 414], "rest": [388, 391, 412, 413, 414, 483, 838, 845, 847, 863, 869], "5d": [388, 414, 810], "emb": [388, 415], "51285338": [388, 415], "87183261": [388, 415], "2308116": [388, 415], "02733949e": [388, 416], "00j": [388, 416], "49660576e": [388, 416], "68178638e": [388, 416], "01j": [388, 416, 421], "98912367e": [388, 416], "21802426e": [388, 416, 421], "04549134e": [388, 416, 421], "82842712e": [388, 416, 421], "86902654e": [388, 416, 421], "25501143e": [388, 416, 421], "32978028e": [388, 416, 421], "52068201e": [388, 416, 421], "71158374e": [388, 416, 421], "generate_einsum_equ": 388, "get_interpolate_kernel": 388, "27279224e": [388, 420], "44232273e": [388, 420], "70464332e": [388, 420], "73454881e": [388, 420], "00902849e": [388, 420], "10039906e": [388, 420], "07022366e": [388, 420], "69506073": [388, 420], "93914604": [388, 420], "88008881": [388, 420], "18951607": [388, 420], "57439613": [388, 420], "15318303e": [388, 421], "15148591e": [388, 421], "19j": [388, 421], "25000000e": [388, 421], "35378602e": [388, 421], "02j": [388, 421], "65404249e": [388, 421], "17611649e": [388, 421], "24320230e": [388, 421], "79344813e": [388, 421], "22374531e": [388, 421], "45929364e": [388, 421], "14208718e": [388, 421], "07177031e": [388, 421], "indexerror": [388, 422, 433, 654, 720, 826, 852], "interp": [388, 866], "xp": [388, 423, 842], "fp": [388, 423], "nd": [388, 424], "tf_bicub": [388, 424, 866], "nearest_interpol": 388, "window_shap": [388, 430], "pool_typ": [388, 430], "irfft": [388, 432], "silent": [388, 432], "discard": [388, 432, 847], "1400001": [388, 432], "3999999": [388, 432], "3999996": [388, 432], "99038106j": [388, 433], "33012702": [388, 433], "23205081j": [388, 433], "33012702j": [388, 433], "superdiagon": [389, 440, 652, 685], "subdiagon": [389, 440, 652, 685], "eigendecomposit": [389, 442, 652, 687, 688], "qlq\u1d40": [389, 442, 652, 687, 688], "tridiagon": [389, 443], "38196602": [389, 443], "61803389": [389, 443], "35048741": [389, 443], "56710052": [389, 443], "06693714": [389, 443], "74234426": [389, 443], "56155282": [389, 443], "56155276": [389, 443], "82842714": [389, 443], "82842731": [389, 443, 652, 688], "necessarili": [389, 444, 843, 846], "generalis": [389, 445], "skip_matrix": [389, 448, 450], "khatri_rao_product": [389, 448], "kronecker_product": [389, 450], "n_column": [389, 450], "lu_factor": 389, "pivot": [389, 451], "lu": [389, 451, 452], "lu_solv": 389, "nnmf": [389, 453], "hoi": [389, 458, 464], "solve_triangular": 389, "unit_diagon": [389, 459], "solut": [389, 459, 652, 701, 794, 831, 835, 837, 838, 839, 846, 848, 853, 861, 863, 866, 884], "determinist": [389, 460, 863], "borrow": [389, 460, 841], "extmath": [389, 460], "ivan": [389, 461], "oseledet": [389, 461], "scientif": [389, 461, 882], "2295": [389, 461], "2317": [389, 461], "2011": [389, 461], "convention": [390, 467], "explicit": [390, 391, 467, 506, 838, 846, 848, 858, 859, 860, 868, 870, 882], "555969": [390, 467], "223876": [390, 467], "111938": [390, 467], "42649534": [390, 467], "68651628": [390, 467], "51119184": [390, 467], "59967244": [390, 467], "mae": [390, 468], "666": [390, 468, 651, 652, 675, 693], "91097307": [390, 470], "3467": [390, 471], "0133": [390, 471], "0250": [390, 471], "0056": [390, 471], "0025": [390, 471], "0675": [390, 471], "6987": [390, 472], "1606": [390, 472], "4032": [390, 472], "6931": [390, 472], "whilst": [391, 475, 476, 477, 872, 882], "ary3": [391, 477], "check_scalar": 391, "force_integ": [391, 479], "force_posit": [391, 479], "mod": [391, 480, 842], "tall": [391, 486], "horizot": [391, 493], "shortcut": [391, 497, 838], "linear_ramp": [391, 497], "reflect": [391, 497, 839, 843, 859, 863], "ramp": [391, 497], "mirror": [391, 497, 834, 837, 882], "padding_func": [391, 497], "iaxis_pad_width": [391, 497], "iaxi": [391, 497], "unalt": [391, 497], "pad_sequ": 391, "batch_first": [391, 498, 651, 676, 678], "seq_len": [391, 498, 651, 676], "feature_s": [391, 498], "max_len": [391, 498], "shorter": [391, 498], "seq1": [391, 498], "seq2": [391, 498], "put": [391, 503, 837, 863, 870], "mul": [391, 503, 831, 859], "conceptu": [391, 506, 883], "concern": [391, 506, 839, 841, 846, 848, 850, 859, 866, 867], "regard": [391, 506, 836, 846, 860, 861, 866], "mutat": [391, 506], "elimin": [391, 512, 838], "consecut": [391, 512], "batch_mean": [394, 515, 517], "batch_var": [394, 515, 517], "running_vari": [394, 515, 517], "local_response_norm": 394, "neighbour": [394, 520], "42857143": [394, 521], "5714286": [394, 521], "multivari": [395, 524], "bayesian": [395, 524], "supposedli": [398, 528], "indirect": [398, 529], "secondari": [398, 529], "is_ivy_sparse_arrai": 399, "is_native_sparse_arrai": 399, "native_sparse_arrai": 399, "coo_indic": [399, 532], "crow_indic": [399, 532], "col_indic": [399, 532], "ccol_indic": [399, 532], "row_indic": [399, 532], "dense_shap": [399, 532], "native_sparse_array_to_indices_values_and_shap": 399, "nativesparsearrai": 399, "sparsearrai": 399, "sparse_arrai": 399, "linalg": [400, 536, 652, 700, 701, 837, 859, 861], "aw": [400, 536], "48447205": [400, 536], "c0": [400, 539], "ck": [400, 539], "c2": [400, 539], "nearest_jax": [400, 546], "trace_on_next_step": [550, 649, 814], "recalcul": [553, 649], "my_sum": [553, 649], "val1": [553, 649], "val2": [553, 649], "cached_sum": [553, 649], "line_eq": [553, 649], "slp": [553, 649], "itc": [553, 649], "cached_line_eq": [553, 649], "0353": [554, 649], "424": [554, 649], "339": [554, 649], "271": [554, 649], "391": [554, 649], "78885436": [555, 649], "41666666": [555, 649], "58333331": [555, 649], "06666667": [555, 649], "13333334": [555, 649], "40000004": [555, 649], "26666668": [555, 649], "13137734": [555, 649], "26275468": [555, 649], "39413199": [555, 649], "52550936": [555, 649], "6568867": [555, 649], "78826398": [555, 649], "84852815": [555, 649], "1313709": [555, 649], "41421366": [555, 649], "27279221": [555, 649], "69705628": [555, 649], "12132034": [555, 649], "default_str": [558, 649], "46999979": [559, 649], "66000009": [559, 649], "93000001": [559, 649], "29000092": [559, 649], "33999991": [559, 649], "6400001": [559, 649], "96000004": [559, 649], "36000013": [559, 649], "51999998": [559, 649], "67000008": [559, 649], "suppos": [559, 649, 848, 863], "960": [559, 649], "3600": [559, 649], "h1": [559, 649], "w1": [559, 649], "40499985": [560, 649], "61000061": [560, 649], "max_depth": [571, 649], "seen_set": [571, 649], "local_set": [571, 649], "referr": [571, 649], "redund": [571, 649, 831, 848, 852, 860, 878], "example_funct": [571, 649], "repr": [571, 649], "allow_dupl": [586, 649], "fork": [587, 649, 832, 842, 847, 853], "forkserv": [587, 649], "mp_default": [587, 649], "defaultcontext": [587, 649], "0x7f4e3193e520": [587, 649], "mp_fork": [587, 649], "forkcontext": [587, 649], "0x7f4e3193e580": [587, 649], "mp_spawn": [587, 649], "spawncontext": [587, 649], "0x7f4e3193e5e0": [587, 649], "mp_forkserv": [587, 649], "forkservercontext": [587, 649], "0x7f4e3193e640": [587, 649], "garbag": [589, 649], "collector": [589, 649], "get_all_arrays_in_memori": [589, 649], "exception_trace_mod": [593, 617, 649, 865], "lenient": [594, 618, 649], "inplace_mod": [594, 618, 649], "break": [594, 649, 844, 848, 855, 864, 870], "infus": [595, 649], "unset": [596, 603, 649, 652, 700, 819, 844, 868], "unset_min_bas": [596, 649], "nestable_mod": [598, 621, 649, 865], "precise_mod": [599, 622, 649, 865], "shape_array_mod": [601, 624, 649, 865], "show_func_wrapper_trace_mod": [602, 625, 649, 865], "tmp_dr": [603, 649], "tmp_dir": [603, 626, 649, 865], "my_tmp": [603, 649], "unset_tmp_dir": [603, 649], "49999999999975": [606, 649], "5015015015010504": [606, 649], "000444502911705e": [606, 649], "9999999999995j": [606, 649], "00000262": [607, 649], "15605032": [607, 649], "01208451j": [607, 649], "00048": [607, 649], "1296": [607, 649], "00864": [607, 649], "isn": [609, 649, 834, 839, 857, 859, 863, 870], "100000023841858": [611, 649], "200000047683716": [611, 649], "299999952316284": [611, 649], "400000095367432": [611, 649], "599999904632568": [611, 649], "hemant": [615, 649], "unset_shape_array_mod": [616, 649], "set_exception_trace_mod": [617, 649, 852], "set_min_bas": [619, 649], "set_min_denomin": [620, 649], "set_nestable_mod": [621, 649], "set_precise_mod": [622, 649], "set_queue_timeout": [623, 649], "set_shape_array_mod": [624, 649], "set_show_func_wrapper_trace_mod": [625, 649, 852], "set_tmp_dir": [626, 649], "my_dir": [626, 649], "451": [627, 649], "in_ax": [628, 649], "out_ax": [628, 649], "thereof": [628, 649], "summaris": [628, 649], "99999998": [629, 650], "19999998": [629, 650], "00000001": [629, 650], "00300001": [629, 650], "00800001": [629, 650], "0125": [629, 650], "17294501": [629, 650], "15770318": [629, 650], "20863818": [629, 650], "90000075": [630, 650], "90000164": [630, 650], "9000032": [630, 650], "50000012e": [630, 650], "92558754": [630, 650], "92558694": [630, 650], "92558682": [630, 650], "92558861": [630, 650], "60000025e": [630, 650], "01024": [630, 650], "retain_grad": [631, 650], "func_ret": [631, 650, 858], "666666": [631, 650], "333332": [631, 650], "66666675": [631, 640, 650], "argnum": [632, 650], "933": [632, 634, 650], "jac_fn": [634, 650], "639": [635, 650], "361": [635, 650], "52565837": [636, 650], "8418861": [636, 650], "68377209": [636, 650], "value_grad": [640, 650], "42333412": [640, 650], "5333333": [640, 650], "93333334": [640, 650], "43333334": [640, 650], "0666666": [640, 650], "softsign": 641, "718281828459045": 642, "euler": 642, "141592653589793": 642, "cmp_i": 643, "cmp_isnot": 643, "for_loop": 643, "if_els": 643, "try_except": 643, "control_flow_op": 643, "to_dlpack": 644, "as_ivy_dtyp": [645, 860], "as_native_dtyp": 645, "check_float": 645, "closest_valid_dtyp": 645, "default_dtyp": [645, 848, 856], "dtype_bit": 645, "function_supported_dtyp": [645, 848, 863], "function_unsupported_dtyp": [645, 848], "infer_default_dtyp": 645, "invalid_dtyp": [645, 848], "is_hashable_dtyp": 645, "is_native_dtyp": 645, "promote_typ": [645, 848], "promote_types_of_input": [645, 848, 859], "type_promote_arrai": [645, 848], "unset_default_complex_dtyp": 645, "unset_default_float_dtyp": 645, "unset_default_int_dtyp": 645, "unset_default_uint_dtyp": 645, "valid_dtyp": 645, "defaultcomplexdtyp": 645, "defaultdtyp": 645, "defaultfloatdtyp": 645, "defaultintdtyp": 645, "defaultuintdtyp": 645, "as_ivy_dev": 646, "clear_cached_mem_on_dev": 646, "dev_util": [646, 849], "function_supported_devic": 646, "function_unsupported_devic": 646, "get_all_ivy_arrays_on_dev": [646, 849], "handle_soft_device_vari": [646, 849], "num_cpu_cor": [646, 849], "num_gpu": [646, 849, 863], "num_ivy_arrays_on_dev": 646, "percent_used_mem_on_dev": 646, "print_all_ivy_arrays_on_dev": 646, "set_split_factor": [646, 852], "split_func_cal": 646, "total_mem_on_dev": [646, 849], "tpu_is_avail": 646, "unset_default_devic": [646, 849], "unset_soft_device_mod": [646, 849], "used_mem_on_dev": 646, "defaultdevic": [646, 849], "save_dir": 646, "arg_info": 649, "arg_nam": 649, "cache_fn": [649, 856], "current_backend_str": [649, 863, 868], "function_supported_devices_and_dtyp": 649, "function_unsupported_devices_and_dtyp": 649, "get_item": [649, 859], "get_referrers_recurs": 649, "inplace_arrays_support": 649, "inplace_variables_support": 649, "is_ivy_nested_arrai": 649, "isscalar": 649, "match_kwarg": 649, "num_arrays_in_memori": 649, "print_all_arrays_in_memori": 649, "set_item": [649, 863], "to_ivy_shap": 649, "to_native_shap": 649, "try_else_non": 649, "unset_array_mod": [649, 865], "unset_exception_trace_mod": 649, "unset_inplace_mod": 649, "unset_min_denomin": 649, "unset_nestable_mod": 649, "unset_precise_mod": 649, "unset_queue_timeout": 649, "unset_show_func_wrapper_trace_mod": 649, "vmap": [649, 870, 882], "arraymod": 649, "precisemod": [649, 848], "jac": 650, "requires_gradi": 650, "value_and_grad": [650, 858], "feature_group_count": [651, 664, 671, 672], "oiw": [651, 664, 665, 671], "oihw": [651, 664, 667, 671], "oidhw": [651, 664, 669, 671], "dhwio": [651, 664, 665, 669, 671], "conv_general_dil": [651, 860], "conv_general_transpos": 651, "depthwis": [651, 673, 796, 810], "1428566": [651, 674], "49000001": [651, 674], "55599999": [651, 674], "21000004": [651, 674], "incom": [651, 675], "4269": [651, 675], "911": [651, 675, 852], "157": [651, 675], "753": [651, 675], "545": [651, 658, 675, 759], "547": [651, 675, 849], "963": [651, 675], "98495483": [651, 675], "0293808": [651, 675], "0159359": [651, 675], "74752808": [651, 675], "20942307": [651, 675], "3205719": [651, 675], "all_weight": [651, 676], "num_lay": [651, 676, 810], "weights_transpos": [651, 676], "has_ih_bia": [651, 676], "has_hh_bia": [651, 676], "multi": [651, 652, 676, 678, 683, 796, 810, 850, 870, 882], "long": [651, 676, 677, 838, 839, 847, 848, 850, 852, 853, 860, 868, 882], "input_s": [651, 676], "h_0": [651, 676], "c_0": [651, 676], "num_direct": [651, 676], "hidden_s": [651, 676], "four": [651, 676, 834, 843, 848, 850, 855, 856, 863, 866], "w_ih": [651, 676], "w_hh": [651, 676], "b_ih": [651, 676], "b_hh": [651, 676], "c_out": [651, 676], "vaswani": [651, 678], "al": [651, 678], "num_attention_head": [651, 678], "key_dim": [651, 678, 810], "value_dim": [651, 678, 810], "attention_weight": [651, 678], "unbatch": [651, 678], "nm": 651, "box": [651, 679, 680, 838], "iou_threshold": [651, 679], "max_output_s": [651, 679], "score_threshold": [651, 679], "roi_align": 651, "spatial_scal": [651, 680], "sampling_ratio": [651, 680], "23333359": [651, 681], "03946018": [651, 681], "0280633": [651, 681], "29981947": [651, 681], "29981089": [651, 681], "06345534": [651, 681], "9634552": [651, 681], "19336844": [651, 681], "09336829": [651, 681], "axisa": [652, 683], "axisb": [652, 683], "axisc": [652, 683], "293": [652, 684], "46997": [652, 684], "17157288": [652, 688], "9238795": [652, 688], "78930789": [652, 688], "59803128": [652, 688], "19127655": [652, 688], "31213903": [652, 688], "63418275": [652, 688], "84632206": [652, 688], "70548367": [652, 688], "70223427": [652, 688], "09570674": [652, 688], "63116378": [652, 688], "56109613": [652, 688], "53554028": [652, 688], "32237405": [652, 688], "43822157": [652, 688], "83906901": [652, 688], "50766778": [652, 688], "71475857": [652, 688], "48103389": [652, 688], "3676433": [652, 688], "68466955": [652, 688], "62933773": [652, 688], "77917379": [652, 688], "14264561": [652, 688], "61036086": [652, 688], "45033181e": [652, 689], "02829754e": [652, 689], "54220343e": [652, 689], "12647155e": [652, 689], "38447177e": [652, 689], "56155300e": [652, 689], "26794919": [652, 689], "7320509": [652, 689], "0012": [652, 691], "00342": [652, 691], "000565": [652, 691], "0104": [652, 691], "000981": [652, 691], "00282": [652, 691], "000766": [652, 691], "0322": [652, 691], "00237": [652, 691], "000151": [652, 691], "00101": [652, 691], "00019": [652, 691], "0214": [652, 691], "00171": [652, 691], "0107": [652, 691], "0167": [652, 691], "0472": [652, 691], "0536": [652, 691], "0177": [652, 691], "000429": [652, 691], "00762": [652, 691], "frobeniu": [652, 693], "nuclear": [652, 693], "induc": [652, 693], "ranl": [652, 693], "47722558": [652, 693], "776": [652, 693], "6000004": [652, 693], "118": [652, 694], "moor": [652, 698], "penros": [652, 698], "31622776": [652, 699], "94868332": [652, 699], "1622777": [652, 699], "42718887": [652, 699], "deteremin": [652, 700], "logsabsdet": [652, 700], "subject": [652, 700], "unset_backend": [652, 700, 819, 844], "ordin": [652, 701], "b2": [652, 701], "usvh": [652, 702], "cetera": [652, 702], "driver": [652, 703, 870], "gesvd": [652, 703], "gesvdj": [652, 703], "gesvda": [652, 703], "86217213": [652, 703], "31816804": [652, 703], "615": [652, 703], "ss": [652, 703], "25994301": [652, 703], "16403675": [652, 703], "61529762": [652, 703], "51231241": [652, 703], "39777088": [652, 703], "15413129": [652, 703], "1029852": [652, 703], "01383495": [652, 703], "86647356": [652, 703], "7786541": [652, 703], "55970621": [652, 703], "16857576": [652, 703], "86412698": [652, 703], "37566757": [652, 703], "88477993": [652, 703], "95925522": [652, 703], "6444726": [652, 703], "54687881": [652, 703], "16134834": [652, 703], "35037804": [652, 703], "31025076": [652, 703], "35769391": [652, 703], "transposit": [652, 704], "0x": [652, 707], "Such": [652, 707, 856, 863], "alexandr": [652, 707], "theophil": [652, 707], "dot_product": [652, 708], "9000001": [652, 709], "64158917": [652, 709], "skew": [652, 710], "60309976": [653, 711], "6666193": [653, 711], "01348412": [653, 711], "05393649": [653, 711], "49992943": [653, 711], "83330965": [653, 711], "02136981": [653, 711], "32844672": [653, 711], "26561815": [653, 711], "22314337": [653, 711], "08916873": [653, 712, 713], "44832274": [653, 713], "75646281": [653, 713], "13862944": [653, 713], "57564628": [653, 713], "ssim_loss": 653, "ssim": [653, 714], "99989986": [653, 714], "wasserstein_loss_discrimin": 653, "p_real": [653, 715], "p_fake": [653, 715], "wasserstein": [653, 715, 716], "discrimin": [653, 715], "wasserstein_loss_gener": 653, "pred_fak": [653, 716], "honor": [654, 724], "beyond": [654, 725, 831, 851, 860], "famili": [654, 728], "intxx": [654, 728], "floatxx": [654, 728], "rep": [654, 730], "fomaml_step": 655, "inner_cost_fn": [655, 733, 734, 735], "outer_cost_fn": [655, 733, 734], "inner_grad_step": [655, 733, 734, 735], "inner_learning_r": [655, 733, 734, 735], "inner_optimization_step": [655, 733, 734, 735], "inner_batch_fn": [655, 733, 734], "outer_batch_fn": [655, 733, 734], "average_across_step": [655, 733, 734], "inner_v": [655, 733, 734], "keep_inner_v": [655, 733, 734], "outer_v": [655, 733, 734], "keep_outer_v": [655, 733, 734], "return_inner_v": [655, 733, 734, 735], "num_task": [655, 733, 734, 735], "maml": [655, 733, 734], "0x7f8db1829ab0": [655, 733, 734, 735], "maml_step": 655, "vanilla": [655, 734, 882], "_variabl": [655, 734, 735], "sub_batch": [655, 734], "40069818": [655, 734], "13723135": [655, 734], "reptile_step": 655, "cost_fn": [655, 735], "reptil": [655, 735], "batch_in": [655, 735], "4485182": [655, 735], "139": [655, 735], "9569855": [655, 735], "9880483": [655, 735], "01766968": [655, 735], "02197957": [655, 735], "02197981": [655, 735], "all_nested_indic": 656, "include_nest": [656, 736], "_index": [656, 736, 747], "_base": [656, 736, 746, 747, 859], "themselv": [656, 736, 846, 848, 849, 851, 856, 860], "863": [656, 736, 849], "672": [656, 736], "482": [656, 736], "674": [656, 736], "341": [656, 736], "copy_nest": 656, "to_mut": [656, 737, 748], "deepli": [656, 737, 840, 870, 882], "copied_nest": [656, 737], "1337": [656, 737, 748], "duplicate_array_index_chain": 656, "index_nest": [656, 856], "insert_into_nest_at_index": 656, "insert_into_nest_at_indic": 656, "special_squar": [656, 742], "6666666666666667": [656, 742], "special_pow": [656, 742], "linear_model": [656, 742], "map_nest_at_index": 656, "_result": [656, 743, 753], "hh": [656, 743, 748], "map_nest_at_indic": 656, "ub": [656, 744], "tb": [656, 744], "multi_index_nest": 656, "nested_ani": 656, "check_nest": [656, 746, 747], "nested_argwher": 656, "stop_after_n_found": [656, 747], "nested_indic": [656, 747], "nested_map": [656, 849, 856], "_tuple_check_fn": [656, 748], "_list_check_fn": [656, 748], "_dict_check_fn": [656, 748], "wherebi": [656, 748, 837], "ah": [656, 748], "bh": [656, 748], "ch": [656, 748], "dh": [656, 748, 842], "eh": [656, 748], "gh": [656, 748, 838, 853], "ih": [656, 748], "1338": [656, 748], "nested_multi_map": 656, "index_chain": [656, 749], "nest0": [656, 749], "ivy_arrai": [656, 749, 843, 860], "unappli": [656, 749], "prune_empti": 656, "prune_nest_at_index": 656, "prune_nest_at_indic": 656, "set_nest_at_index": 656, "set_nest_at_indic": 656, "xyz": [656, 754], "pqr": [656, 754], "mini": [657, 755, 810, 813], "uniformli": [658, 757, 759], "22346112": [658, 758], "0922": [658, 758], "9213753": [658, 758], "12818667": [658, 758], "799": [658, 758], "469": [658, 758], "287": [658, 758], "0366": [658, 758], "26431865": [658, 759], "475": [658, 759], "878": [658, 759], "861": [658, 759], "929": [658, 759], "789": [658, 759], "519": [658, 759], "0435": [658, 759], "381": [658, 759], "4608004": [658, 759], "8458502": [658, 759], "67270088": [658, 759], "31128597": [658, 759], "394": [658, 761], "zeroel": [659, 765], "fourth": [660, 767], "1141": [660, 767], "8101": [660, 767], "9298": [660, 767], "8460": [660, 767], "2119": [660, 767], "3519": [660, 767], "6252": [660, 767], "4033": [660, 767], "7443": [660, 767], "2577": [660, 767], "3707": [660, 767], "0545": [660, 767], "3238": [660, 767], "5944": [660, 767], "0775": [660, 767], "4327": [660, 767], "62519997": [660, 767], "40329999": [660, 767], "59439999": [660, 767], "74430001": [660, 767], "81010002": [660, 767], "84600002": [660, 767], "92979997": [660, 767], "einstein": [662, 777, 824], "117": [662, 777], "intend": [662, 783, 792, 809, 842, 855, 858, 882], "07472222": [662, 784], "00666667": [662, 784], "08966666": [662, 784], "simplicit": [663, 785, 786], "ivy_test": [789, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 837, 838, 839, 842, 845, 847, 853, 861], "test_ivi": [789, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 837, 838, 839, 845, 847, 853, 861, 863], "assert_all_clos": [789, 861], "ret_np": [789, 791, 861], "ret_from_gt_np": [789, 861], "ground_truth_backend": [789, 791, 792, 801, 802, 835, 853, 861], "mark": [789, 834, 837, 839, 842, 863, 868], "assert_same_typ": 789, "ret_from_target": 789, "ret_from_gt": 789, "backend_to_test": [789, 791, 835, 853, 861], "gt_backend": 789, "with_backend": [789, 819], "assert_same_type_and_shap": 789, "this_key_chain": 789, "check_unsupported_devic": 789, "input_devic": 789, "all_as_kwargs_np": [789, 791], "check_unsupported_device_and_dtyp": 789, "input_dtyp": [789, 791, 801, 835, 853, 861, 863], "check_unsupported_dtyp": 789, "test_unsupported_funct": 789, "value_test": 789, "ret_np_flat": 789, "ret_np_from_gt_flat": 789, "specific_tolerance_dict": 789, "ret_from_np_gt_flat": 789, "available_framework": 790, "function_test": 791, "args_to_contain": 791, "array_arg": [791, 856], "args_to_frontend": 791, "frontend_array_fn": 791, "arrays_to_frontend": 791, "as_list": 791, "convtru": 791, "nativeclass": 791, "counter": 791, "create_args_kwarg": 791, "args_np": 791, "arg_np_val": 791, "args_idx": 791, "kwargs_np": 791, "kwarg_np_val": 791, "kwargs_idx": 791, "test_flag": [791, 835, 853, 861, 863], "on_devic": [791, 801, 835, 853, 861], "flatten_and_to_np": 791, "flatten_frontend": 791, "flatten_frontend_fw_to_np": 791, "frontend_ret": [791, 861], "isscalar_func": 791, "is_native_array_func": 791, "to_numpy_func": 791, "flatten_frontend_to_np": 791, "get_frontend_ret": 791, "frontend_fn": 791, "frontend_array_funct": 791, "precision_mod": [791, 801, 802, 853], "test_trac": [791, 801, 802, 835, 842, 853], "test_trace_each": [791, 801, 802], "get_ret_and_flattened_np_arrai": 791, "gradient_incompatible_funct": 791, "gradient_test": [791, 863], "rtol_": [791, 835, 853], "atol_": [791, 835, 853, 861], "tolerance_dict": 791, "gradient_unsupported_dtyp": 791, "kwargs_to_args_n_kwarg": 791, "num_positional_arg": [791, 801, 802, 835, 853, 861, 863], "port": 791, "test_frontend_funct": [791, 861], "fn_tree": [791, 792, 802, 835, 853, 860, 861, 863], "gt_fn_tree": [791, 802], "test_valu": [791, 861, 863], "frontend_function_flag": [791, 801], "functiontestflag": [791, 801, 835, 853], "with_out": [791, 801, 835, 853, 861, 863], "instance_method": [791, 801, 835, 853, 863], "as_vari": [791, 801, 835, 853, 861, 863], "namespac": [791, 837, 848, 857, 860, 861, 864, 868], "arg_": 791, "test_frontend_method": [791, 861], "init_input_dtyp": [791, 861], "method_input_dtyp": [791, 861], "init_flag": [791, 861, 863], "method_flag": [791, 801, 861, 863], "init_all_as_kwargs_np": [791, 861], "method_all_as_kwargs_np": [791, 861], "frontend_method_data": [791, 861], "init_as_variable_flag": [791, 802], "dictat": [791, 843, 850, 855, 859], "init_num_positional_arg": [791, 802], "init_native_array_flag": 791, "with_v": 791, "ret_gt": 791, "test_funct": [791, 835, 838, 839, 847, 853, 861, 863], "fn_name": [791, 792, 802, 835, 844, 853, 861, 863], "return_flat_np_arrai": 791, "as_variable_flag": [791, 802, 863], "native_array_flag": [791, 802, 863], "container_flag": [791, 801, 802, 863], "test_function_backend_comput": 791, "test_function_ground_truth_comput": 791, "arg_np_arrai": 791, "arrays_args_indic": 791, "arrays_kwargs_indic": 791, "kwarg_np_arrai": 791, "test_gradient_backend_comput": 791, "test_gradient_ground_truth_comput": 791, "test_method": 791, "method_nam": [791, 800, 802, 861], "init_with_v": 791, "method_with_v": 791, "test_gradi": [791, 801, 802, 835, 853, 863], "method_as_variable_flag": [791, 802], "method_num_positional_arg": [791, 802], "method_native_array_flag": 791, "method_container_flag": [791, 802], "test_method_backend_comput": 791, "test_method_ground_truth_comput": 791, "org_con_data": 791, "args_np_method": 791, "met_arg_np_v": 791, "met_args_idx": 791, "kwargs_np_method": 791, "met_kwarg_np_v": 791, "met_kwargs_idx": 791, "v_np": 791, "traced_if_requir": 791, "wrap_frontend_function_arg": 791, "holder": 792, "current_frontend_config": 792, "0x7f8da56b9e10": 792, "interruptedtest": 792, "test_interrupt": 792, "baseexcept": 792, "tri": [792, 848], "testdata": 792, "supported_device_dtyp": 792, "is_method": 792, "setup_api_test": 792, "test_data": 792, "setup_frontend_test": 792, "teardown_api_test": 792, "teardown_frontend_test": 792, "hypothesis_help": [793, 794, 795, 796, 797], "array_help": 794, "array_and_broadcastable_shap": 794, "searchstrategi": [794, 795, 796, 797, 801, 802, 863], "array_bool": [794, 863], "min_valu": [794, 795, 796, 797, 835, 853, 861, 863], "max_valu": [794, 795, 796, 797, 861, 863], "ex": [794, 795, 796, 797, 802, 847, 877], "strategi": [794, 795, 796, 797, 801, 802, 837, 861], "array_helpers_dtype_info_help": 794, "kind_dtyp": [794, 796], "array_indices_axi": 794, "array_dtyp": [794, 795, 863], "indices_dtyp": 794, "get_dtyp": [794, 795, 835, 853, 861, 863], "abs_smallest_v": [794, 796, 797], "large_abs_safety_factor": [794, 796, 797, 835, 853, 861, 863], "small_abs_safety_factor": [794, 796, 797, 835, 853, 861], "safety_factor_scal": [794, 796, 797, 861, 863], "disable_random_axi": 794, "axis_zero": 794, "allow_inf": [794, 797, 861, 863], "min_num_dim": [794, 796, 861, 863], "max_num_dim": [794, 796, 861, 863], "min_dim_s": [794, 796, 861, 863], "max_dim_s": [794, 796, 861], "first_dimension_onli": 794, "indices_same_dim": 794, "valid_bound": 794, "safeti": [794, 796, 797, 882], "0002": [794, 797], "hypothesi": [794, 796, 802, 837, 839, 842, 847, 857], "65536": 794, "44758124e": [794, 863], "array_indices_put_along_axi": 794, "values_dtyp": 794, "array_valu": [794, 863], "allow_nan": [794, 797, 863], "allow_subnorm": [794, 797, 863], "exclude_min": [794, 797, 863], "exclude_max": [794, 797], "subnorm": [794, 797], "get_shap": [794, 796, 861, 863], "1806": 794, "36912": 794, "6955": 794, "59576": 794, "arrays_and_ax": 794, "available_dtyp": [794, 795, 835, 853, 861, 863], "allow_non": [794, 796, 861, 863], "return_dtyp": 794, "force_int_axi": 794, "26e": 794, "10e": 794, "24322108": 794, "26446279e": 794, "96046448e": 794, "008": 794, "17549435e": 794, "038": 794, "06541027e": 794, "13725760e": 794, "07143888": 794, "arrays_for_pool": 794, "min_dim": 794, "max_dim": 794, "min_sid": 794, "max_sid": 794, "explicit_or_str_pad": 794, "only_explicit_pad": 794, "return_dil": 794, "mixed_fn_compo": [794, 795, 796, 797, 863], "return_data_format": 794, "cond_data_gen_help": 794, "create_concatenable_arrays_dtyp": 794, "min_num_arrai": 794, "max_num_arrai": 794, "concat_dim": 794, "common_shap": [794, 863], "stackabl": 794, "given_common_shap": 794, "create_nested_input": 794, "leaf_valu": 794, "dtype_and_valu": [794, 835, 853, 861, 863], "num_arrai": [794, 795, 861, 863], "shared_dtyp": [794, 795, 861], "ret_shap": 794, "array_api_dtyp": [794, 795], "shape_kei": 794, "37915": 794, "6322": 794, "26765": 794, "12413": 794, "26986": 794, "34665": 794, "000e": 794, "711e": 794, "100e": 794, "955e": [794, 863], "40817": 794, "56193": 794, "29200": 794, "5851": 794, "9746": 794, "9604645e": 794, "103": 794, "41795": 794, "1170789994": 794, "44251": 794, "44209": 794, "433075925": 794, "24791": 794, "24691": 794, "24892": 794, "16711": 794, "972": 794, "15357": 794, "72057594037927936": 794, "dtype_array_queri": 794, "allow_mask": 794, "allow_neg_step": 794, "dtype_array_query_v": 794, "dtype_values_axi": [794, 863], "min_axi": 794, "max_axi": 794, "valid_axi": 794, "allow_neg_ax": 794, "min_axes_s": 794, "max_axes_s": 794, "force_tuple_axi": 794, "29788": 794, "62222885e": 794, "68281172e": 794, "257j": 794, "40129846e": 794, "90000000e": 794, "63426649e": 794, "91931887e": 794, "29488e": 794, "14361019e": 794, "12445": 794, "einsum_help": 794, "get_first_solve_batch_matrix": 794, "choose_adjoint": 794, "get_second_solve_batch_matrix": 794, "get_first_solve_matrix": 794, "allow_simplifi": 794, "choose_sid": 794, "xa": 794, "get_second_solve_matrix": 794, "list_of_s": 794, "sampled_from": [794, 861, 863], "min_siz": [794, 796, 802, 863], "max_siz": [794, 796, 802, 863], "size_bound": [794, 863], "999999999999999": 794, "9394938006792373": 794, "mutually_broadcastable_shap": 794, "num_shap": 794, "base_shap": 794, "dtype_help": 795, "univers": [795, 860], "cast_filt": 795, "cast_filter_help": 795, "current_backend": [795, 819, 837, 844, 852, 856, 861, 864, 868], "get_castable_dtyp": 795, "castabl": 795, "prune_funct": 795, "intersect": [795, 847, 863], "signed_integ": 795, "real_and_complex": 795, "float_and_complex": 795, "general_help": 796, "broadcasterror": 796, "apply_safety_factor": 796, "dims_and_offset": 796, "ensure_dim_uniqu": 796, "embedding_help": 796, "general_helpers_dtype_info_help": 796, "get_axi": [796, 863], "allow_neg": 796, "sort_valu": 796, "force_tupl": 796, "force_int": 796, "assertionerror": [796, 835, 842, 852, 853, 861, 863], "get_bound": [796, 863], "get_mean_std": 796, "matrix_is_st": 796, "cond_limit": 796, "instabl": [796, 835, 848, 853], "computation": [796, 838], "prone": [796, 848], "thumb": 796, "gradual": 796, "collinear": 796, "reshape_shap": [796, 863], "sizes_": 796, "two_broadcastable_shap": 796, "x_and_filt": 796, "number_help": 797, "arbitrarili": 797, "safety_factor": 797, "backend_proc": 798, "input_queu": 798, "output_queu": 798, "frontend_proc": 798, "pipeline_help": 799, "backendhandl": 799, "update_backend": [799, 861], "backendhandlermod": 799, "enum": [799, 822], "setbackend": 799, "withbackend": 799, "withbackendcontext": 799, "get_frontend_config": 799, "frontendmethoddata": 800, "ivy_init_modul": 800, "framework_init_modul": 800, "init_nam": 800, "test_parameter_flag": 801, "dynamicflag": [801, 802], "frontendfunctiontestflag": [801, 853], "with_copi": 801, "generate_frontend_arrai": [801, 802, 853], "testflag": 801, "apply_flag": 801, "args_to_iter": 801, "frontendinittestflag": 801, "frontendmethodtestflag": 801, "test_cython_wrapp": [801, 802], "initmethodtestflag": 801, "methodtestflag": 801, "build_flag": 801, "frontend_init_flag": 801, "frontend_method_flag": 801, "function_flag": 801, "init_method_flag": 801, "testing_help": 802, "handle_exampl": [802, 863], "test_exampl": [802, 863], "test_frontend_exampl": [802, 863], "test_method_exampl": [802, 863], "test_frontend_method_exampl": [802, 863], "given_kwarg": 802, "handle_frontend_method": [802, 861, 863], "class_tre": [802, 861], "init_tre": [802, 861], "init_native_arrai": 802, "_as_varaible_strategi": 802, "method_native_arrai": 802, "test_inplac": [802, 863], "_given_kwarg": 802, "test_compil": 802, "handle_frontend_test": [802, 861, 863], "alias": [802, 837, 860, 861], "number_positional_arg": [802, 861], "test_with_out": [802, 861, 863], "test_with_copi": 802, "handle_method": [802, 822, 863], "method_tre": [802, 861, 863], "_gradient_strategi": 802, "handle_test": [802, 835, 853, 863], "test_instance_method": [802, 863], "num_positional_args_help": 802, "num_positional_args_method": 802, "geglu": 806, "leakyrelu": 806, "logsoftmax": 806, "from_flax_modul": 807, "native_modul": 807, "params_fx": 807, "rng_seed": 807, "constructor_arg": 807, "constructor_kwarg": 807, "instance_arg": 807, "instance_kwarg": 807, "flax": [807, 870, 882], "from_haiku_modul": 807, "params_hk": 807, "from_paddle_modul": 807, "from_torch_modul": 807, "to_keras_modul": 807, "native_module_class": 807, "modulehelp": [808, 812], "create_vari": 809, "var_shap": 809, "fan_out": 809, "fan_in": 809, "rectangular": 809, "firstlayersiren": 809, "siren": 809, "glorotuniform": [809, 810], "glorot": 809, "xavier": 809, "neuron": 809, "w_1x_1": 809, "w_2x_2": 809, "w_nx_n": 809, "w_i": 809, "kaimingnorm": 809, "fan_mod": 809, "kaim": 809, "he": 809, "negative_slop": 809, "fan": 809, "propog": 809, "fan_sum": 809, "Ones": 809, "randomnorm": 809, "stddev": 809, "w0": 809, "wlim": 809, "predefin": 809, "fan_avg": 809, "adaptiveavgpool1d": 810, "avgpool1d": 810, "implicit": [810, 846, 851, 860, 863, 868, 882], "avgpool2d": 810, "avgpool3d": 810, "e501": 810, "filter_s": 810, "weight_initi": 810, "bias_initi": 810, "0x7f8db1724e50": 810, "0x7f8db1724f70": 810, "conv1dtranspos": 810, "0x7f8db1724b20": 810, "0x7f8db1724ac0": 810, "filter_shap": 810, "0x7f8db17247f0": 810, "0x7f8db1724850": 810, "0x7f8db1724d30": 810, "0x7f8db1724c70": 810, "0x7f8db1724bb0": 810, "0x7f8db1724a30": 810, "conv3dtranspos": 810, "0x7f8db1724970": 810, "0x7f8db1725600": 810, "depthwiseconv2d": 810, "num_channel": 810, "0x7f8db1724c10": 810, "0x7f8db1724b80": 810, "bernoul": 810, "num_embed": 810, "embedding_dim": 810, "padding_idx": 810, "lookup": 810, "num_embeddingss": 810, "renorm": 810, "extra_repr": 810, "insensit": 810, "return_st": 810, "0x7f8db17249d0": 810, "get_initial_st": 810, "0x7f8db1724d60": 810, "0x7f8db1724dc0": 810, "maxpool1d": 810, "maxpool3d": 810, "multiheadattent": 810, "embed_dim": 810, "head_dim": 810, "dropout_r": 810, "use_proj_bia": 810, "attention_ax": 810, "build_mod": [810, 811, 812], "on_init": [810, 812], "parallel": [810, 845, 882], "binarycrossentropyloss": 811, "store_var": [811, 812], "with_partial_v": [811, 812], "logpoissonloss": 811, "modulemeta": 812, "temporarili": [812, 835, 842, 853], "from_cal": 812, "module_dict": 812, "register_buff": 812, "register_paramet": 812, "weights_path": 812, "randomness_factor": 812, "with_edge_label": 812, "with_arg_label": 812, "with_output_label": 812, "output_connected_onli": 812, "highlight_subgraph": 812, "trace_kwarg": 812, "_unified_ivy_graph": 812, "_call": 812, "num_featur": 813, "trail": 813, "layernorm": 813, "normalized_shap": 813, "elementwise_affin": 813, "set_stat": 814, "adamw": 814, "weight_decai": 814, "init_on_first_step": 814, "fallback_to_non_trac": 814, "ignore_miss": 814, "_step": 814, "stochast": [814, 882], "sub_modul": 815, "check_al": 816, "check_all_or_any_fn": 816, "check_ani": 816, "check_dev_correct_format": 816, "check_dimens": 816, "check_elem_in_list": [816, 856, 859, 860], "elem": 816, "check_equ": [816, 860], "check_exist": 816, "check_fals": 816, "check_gather_input_valid": 816, "check_gather_nd_input_valid": 816, "check_great": 816, "allow_equ": [816, 852], "check_inplace_sizes_valid": [816, 859], "check_isinst": 816, "allowed_typ": 816, "check_kernel_padding_s": 816, "padding_s": 816, "check_less": [816, 852], "check_one_way_broadcast": 816, "check_same_dtyp": 816, "check_shapes_broadcast": 816, "check_tru": 816, "check_unsorted_segment_valid_param": 816, "ast_help": 818, "importtransform": 818, "nodetransform": 818, "impersonate_import": 818, "tree": [818, 848], "local_ivy_id": 818, "visit_import": 818, "visit_importfrom": 818, "ivyload": 818, "loader": [818, 870], "exec_modul": 818, "ivypathfind": 818, "metapathfind": 818, "find_spec": 818, "fullnam": 818, "contextmanag": 819, "choose_random_backend": 819, "global_backend": 819, "dynamic_backend_convert": 819, "backend_stack": [819, 868], "prevent_access_loc": 819, "previous_backend": [819, 844], "Or": [819, 831, 833, 838, 859, 875], "set_backend_to_specific_vers": 819, "set_jax_backend": 819, "set_mxnet_backend": 819, "mx": 819, "set_numpy_backend": 819, "set_paddle_backend": 819, "set_tensorflow_backend": 819, "set_torch_backend": 819, "sub_backend_handl": 820, "clear_sub_backend": 820, "find_available_sub_backend": 820, "sub_backends_loc": 820, "fn_name_from_version_specific_fn_nam": 820, "fn_name_from_version_specific_fn_name_sub_backend": 820, "sub_backend_vers": 820, "backend_vers": [820, 835, 848, 853], "set_sub_backend": 820, "sub_backend_str": 820, "set_sub_backend_to_specific_vers": 820, "sub_backend": 820, "unset_sub_backend": 820, "check_for_binari": 821, "cleanup_and_fetch_binari": [821, 838], "clean": [821, 839, 864, 869], "decorator_util": 822, "callvisitor": 822, "nodevisitor": 822, "visit_cal": 822, "transposetyp": 822, "no_transpos": 822, "apply_transpos": 822, "pt_to_tf": 822, "dummy_inplace_upd": 822, "get_next_func": 822, "handle_get_item": 822, "handle_set_item": 822, "handle_transpose_in_input_and_output": 822, "retrieve_object": 822, "store_config_info": 822, "dynamic_import": 823, "import_modul": [823, 868], "einsum_pars": 824, "convert_interleaved_input": 824, "interleav": 824, "convert_subscript": 824, "old_sub": 824, "symbol_map": 824, "subscript": [824, 825], "oe": 824, "ellipsi": [824, 825], "find_output_shap": 824, "find_output_str": 824, "canon": 824, "gen_unused_symbol": 824, "abd": [824, 825], "get_symbol": 824, "letter": 824, "resort": 824, "unicod": 824, "charact": [824, 860], "chr": 824, "surrog": 824, "\u0155": 824, "20000": 824, "\u4eac": 824, "has_valid_einsum_chars_onli": 824, "einsum_str": 824, "abaz": 824, "\u00f6ver": 824, "is_valid_einsum_char": 824, "\u01f5": 824, "legalise_einsum_expr": 824, "reproduct": [824, 825], "pars": [824, 825, 845, 850, 870], "intak": 824, "contract_path": 824, "parse_einsum_input": [824, 825], "einsum_eqn": 824, "legalis": 824, "legalise_einsum_eqn": 824, "za": [824, 825], "xza": [824, 825], "xz": [824, 825], "possibly_convert_to_numpi": 824, "myshap": 824, "__main__": 824, "0x10f850710": 824, "einsum_path_help": 825, "can_dot": 825, "idx_remov": 825, "bla": 825, "benefici": 825, "movement": 825, "costli": 825, "gemm": 825, "ijj": 825, "ddot": 825, "ikj": 825, "compute_size_by_dict": 825, "idx_dict": 825, "abbc": 825, "find_contract": 825, "input_set": 825, "output_set": 825, "lh": 825, "rh": 825, "new_result": 825, "idx_contract": 825, "iset": 825, "oset": 825, "bdc": 825, "flop_count": 825, "num_term": 825, "size_dictionari": 825, "flop": [825, 829], "greedy_path": 825, "memory_limit": 825, "exhaust": [825, 859, 863], "indices_remov": 825, "priorit": [825, 837, 862, 866], "hadamard": 825, "cubic": 825, "greedi": 825, "idx_siz": 825, "optimal_path": 825, "siev": 825, "input_str": 825, "output_str": 825, "parse_possible_contract": 825, "path_cost": 825, "naive_cost": 825, "propos": [825, 839, 860, 866, 882], "intermediari": [825, 844], "unoptim": 825, "new_input_set": 825, "update_other_result": 825, "provision": 825, "_parse_possible_contract": 825, "mod_result": 825, "inplaceupdateexcept": 826, "include_backend": [826, 852], "ivyattributeerror": [826, 852], "attributeerror": [826, 852], "ivybroadcastshapeerror": [826, 852], "ivydeviceerror": 826, "ivydtypepromotionerror": [826, 852], "ivyindexerror": [826, 852], "ivyinvalidbackendexcept": 826, "ivynotimplementedexcept": [826, 852], "notimplementederror": 826, "ivyvalueerror": [826, 852], "handle_except": [826, 855, 857], "add_array_spec": 827, "fn_array_spec": 827, "set_logging_mod": 828, "debug": [828, 834, 838, 839, 846, 847, 858, 863, 866, 882], "unset_logging_mod": 828, "print_stat": 829, "viz": 829, "snakeviz": 829, "bonu": 829, "cprofil": 829, "tensorflow_profile_start": 829, "logdir": 829, "host_tracer_level": 829, "python_tracer_level": 829, "device_tracer_level": 829, "delay_m": 829, "toggl": [829, 839], "timestamp": 829, "awai": [829, 882], "millisecond": 829, "guess": 829, "tensorflow_profile_stop": 829, "torch_profiler_init": 829, "schedul": [829, 847, 870, 882], "on_trace_readi": 829, "record_shap": 829, "profile_memori": 829, "with_stack": 829, "with_flop": 829, "with_modul": 829, "experimental_config": 829, "profileract": 829, "record_and_sav": 829, "dealloc": 829, "record": [829, 838, 870, 883], "callstack": 829, "aten": 829, "torchscript": [829, 869, 872], "_experimentalconfig": 829, "kineto": 829, "torch_profiler_start": 829, "torch_profiler_stop": 829, "cprint": [830, 868], "faq": [831, 845], "docker": [831, 835, 836, 853], "pull": [831, 832, 834, 837, 838, 842, 850, 854, 864, 866, 870, 871], "ivyllc": [831, 838, 871], "brief": [831, 859, 863, 869], "torch_fn": 831, "tf_fn": 831, "jax_fn": 831, "ensp": 831, "customiz": [831, 845], "15c235f": 831, "deepmind_perceiver_io": 831, "sm_framework": 831, "segmentation_model": 831, "sm": 831, "torch_sm": 831, "iou_scor": 831, "rax": 831, "torch_rax": 831, "poly1_softmax_loss": 831, "madmom": 831, "madmon": 831, "torch_madmom": 831, "freq": 831, "audio": 831, "hz2midi": 831, "torch_loss": 831, "maxpooling1d": 831, "pool_siz": 831, "tf_kornia": 831, "tf_rax": 831, "tf_madmom": 831, "tf_loss": 831, "_forward_classifi": [831, 877], "forward_classifi": [831, 877], "hk_eff_encod": 831, "dummy_x": 831, "jax_sm": 831, "jax_madmom": 831, "jax_loss": 831, "np_kornia": 831, "np_sm": 831, "np_rax": 831, "np_loss": 831, "migrat": [831, 875], "instantli": [831, 877], "tensorflwo": 831, "happend": 831, "motiv": 831, "contextu": 831, "explos": [831, 873], "adher": [831, 842, 848, 851, 855, 866, 868], "orient": [831, 875], "contributor": [831, 832, 835, 837, 838, 839, 853, 860, 867, 882], "believ": [831, 839], "everyon": [831, 832, 837, 838, 839, 870], "feedback": [831, 837, 847], "appreci": [831, 840], "dashboard": 831, "grow": [831, 834, 840, 882], "mission": [831, 840], "season": 831, "fellow": 831, "credit": 831, "accompani": 831, "lenton2021ivi": 831, "inter": 831, "author": [831, 837, 839], "lenton": 831, "daniel": 831, "pardo": 831, "fabio": 831, "falck": 831, "fabian": 831, "jame": 831, "stephen": 831, "clark": 831, "ronald": 831, "journal": 831, "arxiv": 831, "preprint": 831, "2102": 831, "02886": 831, "year": [831, 842, 870, 882], "strongli": [832, 838, 860], "engag": [832, 839, 840], "skill": [832, 840], "veteran": 832, "journei": [832, 840], "effort": [832, 837, 870, 874, 882], "board": [832, 845], "stage": [832, 839, 841, 842, 845, 863, 882], "excit": [832, 841], "reward": [832, 840], "badg": [832, 840, 847], "program": [832, 859, 882], "climb": [832, 836], "Be": [833, 845], "awar": [833, 845, 852, 854], "linux": [833, 838, 839, 845], "regularli": [833, 845, 847], "internet": [833, 845], "codespac": [833, 845, 853], "make_doc": 833, "sh": [833, 838, 839, 842, 847], "pwd": 833, "ssh": [833, 847], "make_docs_without_dock": [833, 845], "award": 834, "formal": 834, "dynamo": 834, "earn": [834, 840], "thoroughli": [834, 842], "valuabl": [834, 837, 839], "merg": [834, 837, 839, 842, 847, 860, 882], "meet": [834, 840, 860], "wizard": 834, "inspector": 834, "acknowledg": [834, 840], "honour": 834, "dilig": 834, "bronz": [834, 840], "silver": [834, 840], "gold": [834, 840, 870], "expertis": [834, 840], "assist": [835, 853], "runtimeerror": [835, 853], "logaddexp2_cpu": [835, 853], "falsifi": [835, 842, 853, 863], "test_logaddexp2": [835, 853], "backend_fw": [835, 853, 861], "dtype_and_x": [835, 853, 861, 863], "reproduce_failur": [835, 842, 853, 857, 863], "axicy2bkaamobaar2waaaacvaai": [835, 853], "decoartor": [835, 853], "someth": [835, 839, 844, 853, 854, 864, 870], "with_unsupported_dtyp": [835, 848, 853, 860], "25830078125": [835, 853], "258544921875": [835, 853], "test_acosh": [835, 853], "axicy2baabyqwqgiaabdaai": [835, 853], "quit": [835, 839, 843, 850, 851, 853, 856, 857, 863, 866, 882], "41421356": [835, 853], "41421356e": [835, 853], "34078079e": [835, 853], "154": [835, 853], "test_ab": [835, 838, 853, 863], "000j": [835, 853], "154j": [835, 853], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [835, 853], "thread": [835, 837, 838, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 882], "pycharm": [835, 861, 863], "steep": 836, "curv": 836, "realpython": 836, "pyn": 836, "exchang": [836, 884], "pilot": 836, "stuck": [836, 837], "spell": 836, "sound": [836, 847], "peopl": [836, 838, 839, 841, 882], "frequent": [837, 839, 844, 882], "outlin": [837, 838, 839, 841, 846, 848, 851, 856, 859, 860, 863], "broad": 837, "individu": [837, 839, 842, 844, 848, 856, 860, 882], "clearli": [837, 839, 850, 861, 863], "straightforward": [837, 840], "lie": 837, "urgent": 837, "encourag": [837, 840, 854, 870], "tackl": [837, 840, 860], "challeng": [837, 844, 874, 884], "categoris": [837, 842, 860], "comfort": [837, 838, 852], "linkag": 837, "pr": [837, 839, 840, 842, 854, 860, 861, 863], "confid": 837, "submit": [837, 854], "mindspor": 837, "simpler": [837, 839, 854, 878, 883], "member": [837, 839, 860, 871], "comment": [837, 838, 839, 842, 848, 854, 860, 862, 866], "composition": 837, "feasibl": [837, 847, 863, 878], "pend": 837, "helpfulli": [837, 866], "problemat": [837, 838], "unimpl": 837, "issue_link": 837, "alias_nam": 837, "notic": [837, 843, 847, 853, 854, 863, 866, 878], "push": [837, 839, 840, 842, 861, 863], "liner": 837, "meanwhil": [837, 847], "reselect": 837, "faithfulli": 837, "creation_routin": [837, 861], "indexing_routin": 837, "ma": 837, "manipulation_routin": 837, "mathematical_funct": [837, 860], "sorting_searching_count": 837, "ufunc": [837, 860], "matrix_and_vector_product": 837, "matrix_eigenvalu": 837, "norms_and_other_numb": 837, "solving_equations_and_inverting_matric": 837, "gleam": 837, "uncom": 837, "test_numpy_inn": 837, "test_frontend": [837, 847, 853, 861], "unsur": [837, 863], "refrain": 837, "checkbox": [837, 838], "yourself": [837, 839, 854, 863, 866], "aforement": 837, "parent": [837, 847], "arraywithelementwis": [837, 843], "containerwithmanipul": 837, "thorough": [837, 851, 855, 863], "add_reformatting_checklist_": 837, "category_nam": [837, 848, 849, 851, 855, 856], "autom": [837, 847, 854, 863, 872], "bot": [837, 854], "markdown": [837, 845], "patient": [837, 838], "elabor": 837, "struggl": 837, "assigne": 837, "status": 837, "central": [837, 854, 866], "relevant_submodul": 837, "roadmap": [837, 847], "deem": [837, 860], "subtask": 837, "clearer": [837, 852, 861], "backend_nam": [837, 844, 848, 849, 851, 855, 856, 857], "rare": [837, 849, 870], "button": [837, 838, 839, 853], "centr": 837, "predetermin": 837, "superset": [837, 841, 856, 859, 870], "happi": [838, 853, 870], "your_usernam": [838, 853], "your_fold": [838, 853], "enter": [838, 839, 843, 848, 849, 853, 855, 857], "sync": [838, 842, 853], "nutshel": [838, 855], "hook": [838, 854, 862], "lint": [838, 841], "succe": [838, 878], "whatev": [838, 846, 870], "elig": [838, 840], "student": 838, "licens": 838, "remind": 838, "expir": 838, "profession": 838, "trial": 838, "jetbrain": 838, "month": [838, 875], "bui": 838, "paid": 838, "rapid": [838, 882], "pace": 838, "person": [838, 839], "perhap": [838, 870], "conda": 838, "ivy_dev": [838, 839], "icon": [838, 839, 853], "panel": 838, "vscode": [838, 853], "palett": 838, "ctrl": [838, 839], "mac": [838, 839], "intel": 838, "m1": 838, "optional_apple_silicon_1": 838, "optional_apple_silicon_2": 838, "array_api_test": [838, 839, 842, 853], "test_array_api": [838, 839, 842, 853, 863], "suit": [838, 841, 842, 847, 853, 862, 863, 882], "cmd": 838, "bat": [838, 839], "virtualenv": 838, "tick": [838, 839, 847], "nz2": 838, "openssl": 838, "libssl1": 838, "1_1": 838, "1f": 838, "1ubuntu2": 838, "20_amd64": 838, "deb": 838, "dpkg": 838, "mitig": 838, "desktop": [838, 853], "powershel": 838, "admin": 838, "menu": [838, 853], "introspect": 838, "dialog": 838, "persist": 838, "earlier": [838, 839, 848, 864], "virtualis": 838, "bio": 838, "dropdown": [838, 847], "dockerfil": 838, "ca": 838, "certif": 838, "gnupg": 838, "lsb": 838, "keyr": 838, "fssl": 838, "gpg": 838, "dearmor": 838, "echo": [838, 847], "arch": 838, "lsb_releas": 838, "ce": 838, "cli": 838, "containerd": 838, "systemctl": 838, "softwar": [838, 839], "press": [838, 839], "4a": 838, "socket": 838, "rwx": 838, "sock": 838, "pid": 838, "editor": 838, "pytest": [838, 839, 842, 847, 853, 857, 863], "keyboard": 838, "screenshot": 838, "pop": [838, 853], "test_elementwis": 838, "shell": [838, 839, 842, 847], "setup_test": 838, "run_ivy_core_test": 838, "run_ivy_nn_test": 838, "run_ivy_stateful_test": 838, "run_test": [838, 847], "test_depend": 838, "test_ivy_cor": 838, "test_ivy_nn": 838, "test_ivy_st": 838, "unix": 838, "test_": [838, 861], "test_cor": [838, 839, 861], "offici": [838, 848, 868], "wish": [838, 860], "ivy_nn": 838, "ivy_st": 838, "header": [838, 839, 862], "arrow": 838, "test_stat": 838, "test_submodule_nam": 838, "test_function_nam": 838, "debugg": 838, "studio": [838, 853, 863], "afterward": 838, "background": [838, 845, 853, 882], "overlap": [838, 847, 853, 864, 866, 883], "test_file_path": [838, 853], "test_fn_nam": [838, 853], "engin": [838, 875, 882], "devcontain": 838, "comma": 838, "postcreatecommand": 838, "post_create_command": 838, "poststartcommand": 838, "safe": [838, 860], "containerworkspacefold": 838, "reopen": 838, "test_fle_path": 838, "slash": 838, "isol": [838, 839, 883], "container": 838, "intens": 838, "headach": 838, "arm": [838, 839], "vm": [838, 847], "azur": 838, "cloud": [838, 847], "favourit": 838, "theme": [838, 845], "ipad": 838, "browser": [838, 845], "quota": 838, "requisit": 838, "pane": [838, 839, 847], "dockerfilegpu": 838, "ivv": 838, "multiv": 838, "multivers": [838, 864], "dockerfilemultivers": 838, "dockerhub": 838, "upto": [838, 839], "launch": 838, "kindli": [838, 862], "guidelin": 838, "colour": 838, "chanc": 838, "troubleshoot": 838, "ever": 838, "flask": [838, 853], "toolbar": [838, 839, 853], "_array_modul": [838, 842, 853], "refresh": [838, 853], "pytestarg": [838, 853], "unittesten": [838, 853], "pytesten": [838, 853], "autotestdiscoveronsaveen": [838, 853], "conftest": 838, "serv": [838, 839, 843, 846, 855, 856, 860, 861, 863, 866, 872, 875], "aren": [838, 848], "available_config": 838, "cp310": 838, "x86": 838, "newer": [838, 863], "meantim": 838, "suffici": [838, 850, 860, 863], "bear": [838, 843, 846, 848, 860], "tendenc": 839, "land": 839, "unrel": 839, "fly": [839, 882], "internship": 839, "suspect": 839, "iii": 839, "issue_numb": 839, "12345": 839, "rememb": 839, "respond": 839, "dai": [839, 854], "freed": 839, "situat": [839, 847, 868], "obvious": [839, 847], "hypothet": 839, "frustrat": 839, "delai": [839, 878], "busi": 839, "inact": 839, "unfairli": 839, "investig": 839, "name_of_your_branch": 839, "date": [839, 842], "complic": [839, 861, 868], "merge_with_upstream": 839, "abort": 839, "tediou": [839, 850, 866], "stash": [839, 854], "reinstat": 839, "uncommit": 839, "unstag": [839, 854], "untrack": 839, "atlassian": 839, "wrote": 839, "piec": [839, 843, 856, 857, 869, 878, 881], "blame": 839, "eg": 839, "week": 839, "grep": 839, "commit_id": 839, "handi": 839, "histori": 839, "approv": 839, "someon": [839, 870], "hash": 839, "cancel": 839, "speedup": 839, "unavail": 839, "tickbox": 839, "intent": [839, 859], "discourag": 839, "adopt": [839, 843, 855, 866, 882], "philosophi": 839, "infrequ": 839, "earli": [839, 882], "wast": [839, 847], "spot": [839, 850, 856], "mistak": 839, "mountain": 839, "advoc": [839, 870], "session": [839, 882], "beauti": 839, "care": [839, 849, 860, 866], "undo": 839, "stress": 839, "nifti": 839, "reassur": 839, "local_path_to_ivi": 839, "subfold": [839, 861, 863, 864], "dep": 839, "fresh": 839, "arsen": 839, "exec": 839, "ivy_contain": 839, "test_imag": 839, "test_random_crop": 839, "test_creation_funct": 839, "test_arang": 839, "cursor": 839, "alt": 839, "breakpoint": 839, "gutter": 839, "caret": 839, "f8": 839, "f9": 839, "Into": 839, "f7": 839, "smart": 839, "fragment": [839, 874, 875, 881], "wherein": [839, 856, 863], "facilit": [840, 875], "embark": 840, "innov": 840, "door": [840, 870], "elev": 840, "opportun": 840, "testament": [840, 862], "stone": 840, "gift": 840, "acquir": 840, "peak": 840, "privileg": 840, "bounti": 840, "cash": 840, "delight": 840, "weed": [841, 867], "tour": 841, "formatt": [841, 854], "conjunct": 842, "establish": 842, "unconnect": 842, "strang": 842, "test_linalg": [842, 861], "test_set_funct": 842, "test_signatur": 842, "excess": [842, 844, 850], "array_modul": 842, "vv": 842, "test_manipulation_funct": 842, "test_concat": [842, 863], "nb": 842, "liber": 842, "______________________": 842, "test_remaind": 842, "_______________________": 842, "test_operators_and_elementwise_funct": 842, "1264": 842, "1277": 842, "binary_param_assert_against_refimpl": 842, "ctx": 842, "620": 842, "binary_assert_against_refimpl": 842, "scalar_o": 842, "17304064": 842, "binaryparamcontext": 842, "axic42baaowcnp": 842, "rumwmabaear0": 842, "make_binary_param": 842, "numeric_dtyp": 842, "left_strat": 842, "left_sym": 842, "right_strat": 842, "right_sym": 842, "right_is_scalar": 842, "binary_param_assert_dtyp": 842, "binary_param_assert_shap": 842, "recreat": 842, "unexpectedli": 842, "discrep": [842, 861], "test_asarray_arrai": 842, "test_floor_divid": 842, "health": 842, "test_iop": 842, "__imod__": 842, "isequ": 842, "test_matrix_norm": 842, "alter": 842, "tweak": 842, "array_api_methods_to_test": 842, "test_special_cas": 842, "__ipow__": 842, "is_integ": 842, "easier": [842, 843, 844, 848, 861, 864, 872, 875, 882], "revisit": [842, 855], "_data": [843, 859, 860], "organiz": [843, 846, 860], "underpin": [843, 846, 868, 869], "programmat": [843, 846, 883], "backup": [843, 845, 846], "accident": [843, 846, 860], "absent": [843, 846], "auto": [843, 845, 846, 854], "__mul__": [843, 846, 850, 855, 866], "throw": [843, 848, 849, 852, 853, 882], "imposs": 843, "inputs_to_native_arrai": [843, 856, 857], "outputs_to_ivy_arrai": [843, 848, 849, 855, 856, 857], "secondli": [843, 848], "__ivy_array_function__": 843, "__torch_function__": 843, "myarrai": 843, "handled_funct": 843, "notimpl": 843, "issubclass": 843, "enough": [843, 847, 848, 849, 863], "ivy_funct": 843, "my_ab": 843, "my_arrai": 843, "implicit_backend": [844, 868], "__dict__": [844, 859, 868], "ivy_original_dict": [844, 868], "fallback": 844, "live": [844, 845, 848], "dlpack": 844, "set_dynamic_backend": 844, "unset_dynamic_backend": 844, "dynamic_backend_a": 844, "set_": 844, "unset_": 844, "backend_handl": 844, "requires_grad": 844, "memory_format": 844, "preserve_format": 844, "weren": 844, "vast": [844, 848, 882], "minor": [844, 866, 870], "fn_name_v_1p12_and_abov": 844, "fn_name_v_1p01_to_1p1": 844, "heavili": [845, 857, 870], "conf": 845, "cleanup": 845, "readm": [845, 870], "maxdepth": 845, "caption": 845, "related_work": 845, "deep_div": 845, "glossari": 845, "autosummari": 845, "top_functional_toc": 845, "restructuredtext": 845, "discov": [845, 848], "ivy_toctree_caption_map": 845, "unfortun": [845, 854], "linker": 845, "foo": 845, "discussion_channel_map": 845, "1000043690254946374": 845, "1000043749088436315": 845, "forum": 845, "seri": [845, 848, 860, 863, 882], "discussion_paragraph": 845, "discord_link": 845, "channel_link": 845, "gg": 845, "uyrmypxmqq": 845, "799879767196958751": 845, "channel_id": 845, "autoskippablemethod": 845, "skippable_method_attribut": 845, "__qualname__": 845, "autodoc": 845, "__doc__": 845, "autoivydata": 845, "mutual": [846, 856], "containerwithelementwis": 846, "__repr__": 846, "__getattr__": [846, 878], "__setattr__": [846, 878], "__contains__": 846, "__getstate__": 846, "__setstate__": 846, "unpickl": 846, "num_dim": [846, 868], "restrict": [846, 847, 860, 869, 878], "enforc": 846, "lefthand": 846, "righthand": 846, "handle_nest": [846, 855, 856, 857, 868], "absenc": [846, 855, 882], "implicitli": [846, 858, 863, 868], "log_pr": [846, 856, 859], "intuit": [846, 863, 874], "chronolog": 846, "concurr": [846, 847, 856, 882], "despit": [846, 848, 849, 861, 869, 882], "__list__": 846, "whatsoev": [846, 856, 872], "children": 846, "shallowest": 846, "deepest": 846, "rollback": 847, "incorpor": [847, 861, 882], "techniqu": 847, "triplet": 847, "test_torch": [847, 861], "test_tensor": [847, 861], "test_torch_instance_arctan_": 847, "12500": 847, "daili": 847, "huge": [847, 873, 882], "shoot": 847, "_reduce_loss": [847, 856, 859], "test_nn": 847, "test_loss": 847, "test_binary_cross_entropy_with_logit": 847, "test_cross_entropi": 847, "test_binary_cross_entropi": 847, "test_sparse_cross_entropi": 847, "test_loss_funct": 847, "test_torch_binary_cross_entropi": 847, "test_torch_cross_entropi": 847, "binary_cross_entropy_with_logit": 847, "torch_binary_cross_entropi": 847, "torch_cross_entropi": 847, "readthedoc": 847, "pedagog": 847, "f_1": 847, "t_1": 847, "t_3": 847, "t_7": 847, "t_": 847, "f_m": 847, "cyclic": 847, "intellig": [847, 863], "tests_fil": 847, "file_nam": [847, 863, 864], "tests_lin": 847, "correspondingli": 847, "tests_to_run": 847, "determine_tests_lin": 847, "mongodb": 847, "mechan": [847, 870], "secret": 847, "db": 847, "ssh_deploy_kei": 847, "suffic": [847, 857, 863], "massiv": 847, "yml": 847, "felicit": 847, "clone_map": 847, "deploy_kei": 847, "user_email": 847, "user_nam": 847, "target_branch": 847, "github_serv": 847, "deploy_key_fil": 847, "ssh_known_hosts_fil": 847, "known_host": 847, "keyscan": 847, "git_ssh_command": 847, "userknownhostsfil": 847, "email": 847, "methodologi": 847, "master1": 847, "restructur": 847, "_map": 847, "t_2": 847, "t_n": 847, "index_map": 847, "test_map": 847, "snowbal": 847, "recalibr": 847, "workflow_dispatch": 847, "cron": 847, "saturdai": 847, "night": 847, "pm": 847, "gut": 847, "lesser": [847, 852], "lol": 847, "hour": 847, "cater": [847, 862, 874], "master2": 847, "master32": 847, "synchron": 847, "runner2": 847, "corrupt": 847, "decoupl": 847, "150": 847, "cycl": [847, 863], "yellow": 847, "queu": 847, "redirect": 847, "book": 847, "onrend": 847, "jo": 847, "ran": 847, "clickabl": 847, "all_dtyp": 848, "all_numeric_dtyp": 848, "all_int_dtyp": 848, "all_float_dtyp": 848, "replic": [848, 858, 859, 860], "thirdli": 848, "native_float32": 848, "importantli": [848, 868], "arguabl": [848, 849, 860], "jaxarrai": [848, 849, 852, 855, 859, 864, 868], "_handle_0_dim_output": 848, "subtli": [848, 859], "promote_types_frontend_nam": 848, "promote_types_of_frontend_name_input": 848, "frontend_nam": 848, "upcast": 848, "nearli": [848, 855, 857, 882], "downcast": 848, "footprint": 848, "concret": 848, "aris": [848, 854, 870], "utterli": 848, "meant": [848, 850, 859], "twice": 848, "disadvantag": 848, "relax": 848, "f64": 848, "unwant": 848, "primaci": 848, "resembl": 848, "compound": 848, "infer_dtyp": [848, 849, 855, 857], "settabl": [848, 849], "handle_out_argu": [848, 849, 855, 856, 857, 859, 868], "infer_devic": [848, 849, 855, 857], "deleg": 848, "shape_to_tupl": 848, "with_supported_dtyp": 848, "unment": 848, "_cast_for_unary_op": [848, 856, 859], "target_typ": 848, "syntax": [848, 874, 882], "unsupported_dtyp": 848, "supported_dtypes_and_devic": 848, "with_unsupported_device_and_dtyp": 848, "globals_getter_func": 848, "f2": 848, "lack": [848, 859, 874, 882], "mandat": [848, 859, 863, 864], "confus": [848, 852, 859, 866, 872], "inconsist": [848, 852, 858], "is_nan": 848, "supported_dtyp": 848, "anytim": 848, "84530": 848, "unwarr": 848, "risk": 848, "needlessli": 848, "bloat": 848, "undergo": [848, 870], "unsupported_devic": 848, "supported_devic": 848, "downsid": 848, "coverag": [848, 863], "undesir": 848, "accomplish": 848, "upcast_data_typ": 848, "downcast_data_typ": 848, "crosscast_data_typ": 848, "cast_data_typ": 848, "downcast_data_dtyp": 848, "vice": 848, "versa": 848, "till": 848, "crosscast": 848, "exmp1": 848, "watch": [848, 860], "handle_numpy_arrays_in_specific_backend": [848, 855], "cate": 848, "understood": 848, "consumpt": 848, "dual": 849, "categor": [849, 856, 860], "_handle_except": [849, 852], "1013": 849, "_handle_nest": [849, 852], "905": 849, "_handle_out_argu": [849, 852], "441": 849, "_inputs_to_native_arrai": [849, 852], "new_arg": [849, 852], "new_kwarg": [849, 852], "_outputs_to_ivy_arrai": [849, 852], "358": 849, "_handle_array_funct": [849, 852], "_handle_device_shift": 849, "handle_device_shift": [849, 857], "device_shifting_dev": 849, "__enter__": 849, "__exit__": 849, "soft_devic": 849, "eight": 850, "op_nam": 850, "__r": 850, "unsurprisingli": 850, "recap": 850, "combinatori": 850, "okai": [850, 866, 868], "spec": [850, 851], "my_func": [850, 864], "some_flag": 850, "another_flag": 850, "jointli": 850, "5574077": 850, "1850398": 850, "5463025": 850, "8422884": 850, "91601413": 850, "9647598": 850, "3738229": 850, "1597457": 850, "0963247": 850, "9955841": 850, "3278579": 850, "asid": 850, "14254655": 850, "1578213": 850, "380515": 850, "trivial": [850, 859], "failing_fn_nam": 850, "onlin": [850, 851], "minutest": 850, "fault": [850, 882], "contrast": [851, 855, 860, 884], "preview": 851, "incorrectli": [851, 878], "needless": [851, 861], "renam": [851, 860], "judgment": 851, "operator_nam": 851, "succinct": 851, "docst": 851, "native_error": 852, "_combine_messag": 852, "truli": 852, "wrong": [852, 854, 857, 860, 866], "198": 852, "392": 852, "_handle_array_like_without_promot": 852, "805": 852, "432": 852, "349": 852, "other_test": 852, "523": 852, "_handle_numpy_out": 852, "396": 852, "_outputs_to_numpy_arrai": 852, "_inputs_to_ivy_arrays_np": 852, "ivy_arg": 852, "ivy_kwarg": 852, "453": 852, "_from_zero_dim_arrays_to_scalar": 852, "truth_value_test": 852, "visibl": 852, "unwieldi": 852, "squash": 852, "hide": [852, 878], "cleaner": 852, "caught": [852, 854], "rethrow": 852, "_print_traceback_histori": 852, "error_stack": 852, "axiserror": 852, "polici": [852, 857, 863, 865], "moreov": 852, "submoodul": 853, "test_jax_transpos": 853, "manipulaiton": 853, "test_jax": [853, 861], "test_numpi": [853, 861], "test_manipul": [853, 861, 863], "preconditionnotmet": 853, "densetensor": 853, "holder_": 853, "phi": 853, "dense_tensor_impl": 853, "array_and_ax": 853, "aaegbaegaqaaaaaaaaaaaaab": 853, "black": 854, "flake8": 854, "linter": 854, "autoflak": 854, "docformatt": 854, "pydocstyl": 854, "yaml": 854, "patch1687898304": 854, "8072": 854, "3516aed563": 854, "reformat": 854, "akshai": 854, "jain": 854, "gui": 854, "cryptic": 854, "garden": 854, "utc": 854, "didn": 854, "human": 854, "intervent": 854, "typo": 854, "ui": 854, "handle_array_like_without_promot": [855, 857], "to_native_arrays_and_back": [855, 857, 868], "handle_array_funct": [855, 857], "inputs_to_native_shap": [855, 857], "rational": [855, 859, 866], "__div__": [855, 866], "484": 855, "brittl": 855, "freeli": 855, "technic": [855, 859, 870, 882], "original_typ": 855, "cumbersom": 855, "hinder": [855, 874], "venn": 856, "diagram": 856, "light": [856, 864, 870, 872, 883], "maximis": 856, "encompass": 856, "partial_mixed_handl": [856, 857, 866], "handle_partial_mixed_funct": [856, 857, 866], "fn_decor": 856, "mixed_backend_wrapp": [856, 859], "to_add": 856, "to_skip": 856, "inputs_to_ivy_arrai": [856, 857], "modif": [856, 882], "briefli": [856, 863], "get_all_arrays_on_dev": 856, "outputs_to_ivy_shap": 857, "outputs_to_native_arrai": 857, "handle_view_index": [857, 859], "handle_view": [857, 859], "handle_rag": 857, "handle_backend_invalid": 857, "handle_nan": 857, "to_native_shapes_and_back": 857, "modern": 858, "inter_func": 858, "custom_grad_fn": 858, "args1": 858, "speak": 859, "val_n": 859, "base_idx": 859, "_manipulation_stack": 859, "base_flat": 859, "_view_ref": 859, "_update_view": 859, "contigu": 859, "c_contigu": 859, "ascontiguousarrai": 859, "copyto": 859, "_is_vari": 859, "tensor_scatter_nd_upd": 859, "is_vari": 859, "_update_torch_view": 859, "predominantli": [859, 864], "support_native_out": [859, 868], "_scalar_output_to_0d_arrai": 859, "_wrap_fn": 859, "dim0": 859, "dim1": 859, "res_floor": 859, "extent": [859, 860], "to_out_fn": 859, "add_wrapp": 859, "paradigm": [859, 870, 874, 882], "expans": [859, 874], "weak": 859, "_torch_bas": 859, "_torch_view_ref": 859, "_torch_manipul": 859, "weakli": 859, "adequ": 859, "tf_frontend": 860, "lax": [860, 861, 866, 868, 870], "torch_frontend": [860, 861], "numpy_frontend": 860, "jax_frontend": 860, "to_ivy_arrays_and_back": [860, 861], "fidel": 860, "algebra": [860, 882, 884], "dynamic": 860, "mimic": 860, "arithmetic_oper": 860, "handle_numpy_out": 860, "handle_numpy_dtyp": 860, "handle_numpy_cast": 860, "from_zero_dim_arrays_to_scalar": 860, "_add": 860, "same_kind": 860, "subok": [860, 861, 866], "promote_types_of_numpy_input": 860, "underscor": 860, "unhandl": 860, "trigonometric_funct": 860, "_tan": 860, "check_tensorflow_cast": 860, "raw_op": [860, 861], "map_raw_ops_alia": 860, "output_typ": 860, "kwargs_to_upd": 860, "pointwise_op": 860, "sensibl": 860, "ahead": [860, 864, 882], "reduce_logsumexp": 860, "logsumexp": 860, "trick": 860, "max_input_tensor": 860, "preferred_element_typ": 860, "languag": [860, 869, 872, 883], "finer": 860, "logicaland": 860, "np_frontend": 860, "_ivy_arrai": 860, "radd": 860, "_init_data": 860, "_process_str_data": 860, "_dtype": [860, 861], "_shape": 860, "govern": 860, "promote_types_of_": 860, "_input": 860, "promote_types_of_torch_input": [860, 861], "handle_numpy_casting_speci": 860, "new_fn": 860, "equiv": 860, "unsaf": 860, "array_type_test": 860, "_isfinit": 860, "organis": 860, "youtub": 860, "knowledg": [861, 875], "np_frontend_help": 861, "open_task": 861, "test_lax": 861, "test_oper": 861, "test_jax_tan": 861, "test_mathematical_funct": 861, "test_trigonometric_funct": 861, "dtypes_values_cast": 861, "dtypes_values_casting_dtyp": 861, "arr_func": 861, "get_num_positional_args_ufunc": 861, "test_numpy_tan": 861, "handle_where_and_array_bool": 861, "test_tensorflow": 861, "test_math": 861, "test_tensorflow_tan": 861, "test_pointwise_op": 861, "test_torch_tan": 861, "_fill_valu": 861, "test_glob": 861, "test_jax_ful": 861, "test_from_shape_or_valu": 861, "_input_fill_and_dtyp": 861, "dtype_and_input": 861, "dtype_to_cast": 861, "input_fill_dtyp": 861, "test_numpy_ful": 861, "test_raw_op": 861, "test_tensorflow_fil": 861, "test_creation_op": 861, "with_arrai": 861, "test_torch_ful": 861, "add_nois": 861, "all_clos": 861, "_get_dtype_and_matrix": 861, "test_torch_qr": 861, "frontend_q": 861, "frontend_r": 861, "walkthrough": 861, "comparison_op": 861, "test_comparison_op": 861, "test_torch_great": 861, "all_alias": 861, "test_ndarrai": 861, "test_numpy_instance_add__": 861, "test_tensorflow_instance_add": 861, "1e04": 861, "allow_infin": 861, "test_torch_instance_add": 861, "_arrays_idx_n_dtyp": 861, "surprisingli": 861, "closest_relevant_group": 861, "strive": [861, 863, 866, 870], "craft": [862, 863], "tailor": 862, "clariti": [862, 863, 866, 882], "weav": 862, "thrill": 862, "brim": 862, "stand": [862, 863], "landscap": [862, 875], "forese": 862, "refin": 862, "inquiri": 862, "fixtur": 863, "hit": [863, 878], "eleg": [863, 882], "unexplor": 863, "artifact": 863, "bespok": 863, "_array_or_typ": 863, "rigor": 863, "test_default_int_dtyp": 863, "print_hypothesis_exampl": 863, "custom_strategi": 863, "randomis": 863, "simplist": 863, "intricaci": 863, "glanc": 863, "one_of": 863, "datum": 863, "pipe": 863, "array_or_scal": 863, "len_of_arrai": 863, "test_add": 863, "test_gpu_is_avail": 863, "pretest": 863, "snippet": [863, 877], "frontend_test": 863, "frontend_method": 863, "criterion": 863, "valid_ax": 863, "hoc": 863, "11228": 863, "268": 863, "wherev": 863, "9622": 863, "28136": 863, "6375": 863, "12720": 863, "21354": 863, "900e": 863, "57384": 863, "25687": 863, "248": 863, "test_devic": 863, "array_shap": 863, "test_lay": 863, "some_sequ": 863, "arrays_valu": 863, "36418": 863, "21716926": 863, "none_or_list_of_float": 863, "get_prob": 863, "103515625e": 863, "099609375": 863, "probabilist": 863, "number_positional_argu": 863, "unreproduc": 863, "x_and_linear": 863, "is_torch_backend": 863, "x_shape": [863, 868], "weight_shap": 863, "bias_shap": 863, "ivy_np": 863, "valid_float_dtyp": 863, "test_demo": 863, "failing_test": 863, "shrink": 863, "prescrib": 863, "test_gelu": 863, "test_fil": 863, "notabl": [863, 882], "max_exampl": 863, "deadlin": 863, "weird": 863, "systemat": 863, "safeguard": 863, "inabl": 863, "test_result_typ": 863, "9090909090909091": 863, "judgement": 864, "some_namespac": 864, "some_backend": 864, "another_backend": 864, "refactor": 864, "ongo": 864, "check_fill_value_and_dtype_are_compat": 864, "_to_devic": 864, "shouldn": [864, 878], "pin": 864, "unpinn": 864, "culmin": 864, "unsett": 865, "array_significant_figur": 865, "array_decimal_valu": 865, "warning_level": 865, "nan_polici": 865, "stablest": 865, "constantli": 866, "answer": [866, 870], "contradict": 866, "entail": 866, "sacrif": 866, "jacfwd": 866, "jacrev": 866, "banner": 866, "expens": 866, "incredibli": [866, 870, 874], "price": 866, "pai": 866, "intrus": 866, "x_beta": 866, "equip": 866, "simplif": 866, "allevi": 866, "ineffici": [866, 870, 882], "fuse": 866, "hybrid": 866, "workaround": 866, "slip": 866, "radar": 866, "stumbl": 866, "syntact": 868, "power_seq": 868, "sparse_funct": 868, "_determine_backend_from_arg": 868, "importlib": 868, "_backend_dict": 868, "x_flat": 868, "wi": 868, "wi_x": 868, "wii_x": 868, "wif_x": 868, "wig_x": 868, "wio_x": 868, "wh": 868, "ht": 868, "ct": 868, "hts_list": 868, "wii_xt": 868, "wif_xt": 868, "wig_xt": 868, "wio_xt": 868, "htm1": 868, "ctm1": 868, "wh_htm1": 868, "whi_htm1": 868, "whf_htm1": 868, "whg_htm1": 868, "who_htm1": 868, "ft": 868, "ot": 868, "reliabl": 868, "sacrific": 868, "_linear": 869, "tfnetwork": 869, "translated_output": 869, "pure_ivi": 869, "pure_torch": 869, "unclean": 869, "wx": 869, "temp": 869, "ivy_func": 869, "emphas": 869, "example_input": 869, "static_argnum": [869, 878], "static_argnam": [869, 878], "matur": [870, 882], "doubt": 870, "grate": 870, "probe": 870, "lock": 870, "dex": 870, "primit": [870, 882], "tricki": [870, 872], "tight": 870, "dispatch": [870, 882], "ast": 870, "autodiff": 870, "shine": 870, "merci": 870, "compet": [870, 882], "parallelis": 870, "spmd": 870, "mixtur": 870, "expert": 870, "sophist": 870, "depart": 870, "hundr": 870, "broadli": 870, "supplementari": 870, "reusabl": [870, 882], "fanci": [870, 882], "fusion": 870, "lose": 870, "pmap": 870, "eventu": 870, "supplement": 870, "backdoor": 870, "callback": 870, "somewhat": [870, 882], "outsourc": 870, "appl": 871, "silicon": 871, "ivy_root": 871, "asap": 871, "nail": 872, "scientist": 872, "handler": 872, "correl": 872, "con": 874, "renown": 874, "traction": [874, 882], "invest": 874, "worsen": 874, "mlx": 874, "exemplifi": 874, "diversif": 874, "painless": 874, "interoper": [875, 882, 884], "divers": [875, 884], "downstream": 875, "consequ": 875, "colleagu": 875, "collabor": 875, "constrain": 875, "prototyp": [875, 882], "legaci": 875, "painstak": 875, "debug_mod": 877, "lazygraph": [877, 878, 880], "rough": 877, "transformed_with_st": 877, "bigger": 877, "hf": 877, "resnetforimageclassif": [877, 878], "publicli": [878, 880], "logger": 878, "arg_stateful_idx": 878, "kwarg_stateful_idx": 878, "include_gener": 878, "array_cach": 878, "return_backend_traced_fn": 878, "sum_j": 878, "traced_fn": 878, "impos": 878, "comp_func": 878, "bake": 878, "cont": 878, "new_attribut": 878, "wip": 878, "resnet50": 878, "breed": 878, "traced_graph": 878, "predicted_label": 878, "methodtyp": 879, "functiontyp": 879, "transpile_kwarg": 880, "transpiled_func": 880, "unified_func": 880, "one_lin": 880, "onnx": 881, "acycl": [881, 883], "promin": 882, "abbrevi": 882, "laboratori": 882, "proprietari": 882, "mathwork": 882, "commerci": 882, "1984": 882, "toolbox": 882, "mupad": 882, "simulink": 882, "graphic": 882, "simul": 882, "million": 882, "worldwid": 882, "scienc": 882, "econom": 882, "2001": 882, "od": 882, "solver": 882, "cython": 882, "friendli": 882, "2002": 882, "lua": 882, "luajit": 882, "idiap": 882, "epfl": 882, "2005": 882, "numarrai": 882, "cpython": 882, "partli": 882, "2007": 882, "forest": 882, "boost": 882, "dbscan": 882, "inbuilt": 882, "esqu": 882, "aesara": 882, "2012": 882, "polymorph": 882, "mpi": 882, "openmp": 882, "glue": 882, "jaot": 882, "nasa": 882, "cern": 882, "climat": 882, "allianc": 882, "influenti": 882, "2014": 882, "scala": 882, "ship": 882, "forgiv": 882, "2015": 882, "cupi": 882, "decemb": 882, "announc": 882, "mainten": 882, "meaning": 882, "hierarch": 882, "2016": 882, "imper": 882, "amazon": 882, "cognit": 882, "grade": 882, "dnn": 882, "backpropag": 882, "succumb": 882, "came": 882, "monitor": 882, "hobbyist": 882, "tremend": 882, "gear": 882, "batteri": 882, "principl": 882, "zygot": 882, "jl": 882, "workload": 882, "daggerflux": 882, "frontier": 882, "hessian": 882, "2018": 882, "lightweight": 882, "shortcom": 882, "barrier": 882, "inexperienc": 882, "underdevelop": 882, "fanat": 882, "ounc": 882, "infanc": 882, "nich": 882, "mobil": 882, "lite": 882, "enterpris": 882, "reinvent": 882, "inertia": 882, "creator": 882, "paszk": 882, "spend": 882, "hi": 882, "bulk": 882, "haskel": 882, "inevit": 883, "sit": 883, "dataflow": 883, "trace_modul": 883, "scriptfunct": 883, "scriptmodul": 883, "fake": 883, "proxi": 883, "graphmodul": 883, "holist": 884, "ultmat": 884, "broader": 884}, "objects": {"ivy.Array": [[233, 0, 1, "", "abs"], [234, 0, 1, "", "acos"], [235, 0, 1, "", "acosh"], [629, 0, 1, "", "adam_step"], [630, 0, 1, "", "adam_update"], [402, 0, 1, "", "adaptive_avg_pool1d"], [403, 0, 1, "", "adaptive_avg_pool2d"], [404, 0, 1, "", "adaptive_max_pool2d"], [405, 0, 1, "", "adaptive_max_pool3d"], [236, 0, 1, "", "add"], [437, 0, 1, "", "adjoint"], [785, 0, 1, "", "all"], [548, 0, 1, "", "all_equal"], [347, 0, 1, "", "allclose"], [348, 0, 1, "", "amax"], [349, 0, 1, "", "amin"], [237, 0, 1, "", "angle"], [786, 0, 1, "", "any"], [762, 0, 1, "", "argmax"], [763, 0, 1, "", "argmin"], [771, 0, 1, "", "argsort"], [764, 0, 1, "", "argwhere"], [551, 0, 1, "", "array_equal"], [473, 0, 1, "", "as_strided"], [141, 0, 1, "", "asarray"], [238, 0, 1, "", "asin"], [239, 0, 1, "", "asinh"], [552, 0, 1, "", "assert_supports_inplace"], [474, 0, 1, "", "associative_scan"], [165, 0, 1, "", "astype"], [240, 0, 1, "", "atan"], [241, 0, 1, "", "atan2"], [242, 0, 1, "", "atanh"], [475, 0, 1, "", "atleast_1d"], [476, 0, 1, "", "atleast_2d"], [477, 0, 1, "", "atleast_3d"], [407, 0, 1, "", "avg_pool1d"], [408, 0, 1, "", "avg_pool2d"], [409, 0, 1, "", "avg_pool3d"], [515, 0, 1, "", "batch_norm"], [438, 0, 1, "", "batched_outer"], [522, 0, 1, "", "bernoulli"], [523, 0, 1, "", "beta"], [350, 0, 1, "", "binarizer"], [711, 0, 1, "", "binary_cross_entropy"], [534, 0, 1, "", "bincount"], [243, 0, 1, "", "bitwise_and"], [244, 0, 1, "", "bitwise_invert"], [245, 0, 1, "", "bitwise_left_shift"], [246, 0, 1, "", "bitwise_or"], [247, 0, 1, "", "bitwise_right_shift"], [248, 0, 1, "", "bitwise_xor"], [325, 0, 1, "", "blackman_window"], [166, 0, 1, "", "broadcast_arrays"], [167, 0, 1, "", "broadcast_to"], [168, 0, 1, "", "can_cast"], [249, 0, 1, "", "ceil"], [308, 0, 1, "", "celu"], [682, 0, 1, "", "cholesky"], [717, 0, 1, "", "clip"], [554, 0, 1, "", "clip_matrix_norm"], [555, 0, 1, "", "clip_vector_norm"], [481, 0, 1, "", "column_stack"], [718, 0, 1, "", "concat"], [482, 0, 1, "", "concat_from_sequence"], [439, 0, 1, "", "cond"], [351, 0, 1, "", "conj"], [719, 0, 1, "", "constant_pad"], [665, 0, 1, "", "conv1d"], [666, 0, 1, "", "conv1d_transpose"], [667, 0, 1, "", "conv2d"], [668, 0, 1, "", "conv2d_transpose"], [669, 0, 1, "", "conv3d"], [670, 0, 1, "", "conv3d_transpose"], [142, 0, 1, "", "copy_array"], [352, 0, 1, "", "copysign"], [535, 0, 1, "", "corrcoef"], [250, 0, 1, "", "cos"], [251, 0, 1, "", "cosh"], [353, 0, 1, "", "count_nonzero"], [536, 0, 1, "", "cov"], [683, 0, 1, "", "cross"], [712, 0, 1, "", "cross_entropy"], [537, 0, 1, "", "cummax"], [538, 0, 1, "", "cummin"], [775, 0, 1, "", "cumprod"], [776, 0, 1, "", "cumsum"], [410, 0, 1, "", "dct"], [558, 0, 1, "", "default"], [252, 0, 1, "", "deg2rad"], [673, 0, 1, "", "depthwise_conv2d"], [684, 0, 1, "", "det"], [210, 0, 1, "", "dev"], [411, 0, 1, "", "dft"], [685, 0, 1, "", "diag"], [440, 0, 1, "", "diagflat"], [686, 0, 1, "", "diagonal"], [354, 0, 1, "", "diff"], [355, 0, 1, "", "digamma"], [524, 0, 1, "", "dirichlet"], [253, 0, 1, "", "divide"], [441, 0, 1, "", "dot"], [674, 0, 1, "", "dropout"], [412, 0, 1, "", "dropout1d"], [413, 0, 1, "", "dropout2d"], [414, 0, 1, "", "dropout3d"], [483, 0, 1, "", "dsplit"], [484, 0, 1, "", "dstack"], [176, 0, 1, "", "dtype"], [442, 0, 1, "", "eig"], [688, 0, 1, "", "eigh"], [443, 0, 1, "", "eigh_tridiagonal"], [444, 0, 1, "", "eigvals"], [689, 0, 1, "", "eigvalsh"], [559, 0, 1, "", "einops_rearrange"], [560, 0, 1, "", "einops_reduce"], [561, 0, 1, "", "einops_repeat"], [777, 0, 1, "", "einsum"], [309, 0, 1, "", "elu"], [415, 0, 1, "", "embedding"], [144, 0, 1, "", "empty_like"], [254, 0, 1, "", "equal"], [255, 0, 1, "", "erf"], [356, 0, 1, "", "erfc"], [357, 0, 1, "", "erfinv"], [562, 0, 1, "", "exists"], [256, 0, 1, "", "exp"], [257, 0, 1, "", "exp2"], [485, 0, 1, "", "expand"], [720, 0, 1, "", "expand_dims"], [258, 0, 1, "", "expm1"], [326, 0, 1, "", "eye_like"], [416, 0, 1, "", "fft"], [417, 0, 1, "", "fft2"], [486, 0, 1, "", "fill_diagonal"], [178, 0, 1, "", "finfo"], [358, 0, 1, "", "fix"], [487, 0, 1, "", "flatten"], [721, 0, 1, "", "flip"], [488, 0, 1, "", "fliplr"], [489, 0, 1, "", "flipud"], [359, 0, 1, "", "float_power"], [259, 0, 1, "", "floor"], [260, 0, 1, "", "floor_divide"], [360, 0, 1, "", "fmax"], [261, 0, 1, "", "fmin"], [262, 0, 1, "", "fmod"], [490, 0, 1, "", "fold"], [563, 0, 1, "", "fourier_encode"], [361, 0, 1, "", "frexp"], [146, 0, 1, "", "from_dlpack"], [149, 0, 1, "", "full_like"], [525, 0, 1, "", "gamma"], [566, 0, 1, "", "gather"], [567, 0, 1, "", "gather_nd"], [263, 0, 1, "", "gcd"], [123, 0, 1, "", "gelu"], [445, 0, 1, "", "general_inner_product"], [570, 0, 1, "", "get_num_dims"], [362, 0, 1, "", "gradient"], [633, 0, 1, "", "gradient_descent_update"], [264, 0, 1, "", "greater"], [265, 0, 1, "", "greater_equal"], [516, 0, 1, "", "group_norm"], [310, 0, 1, "", "hardshrink"], [311, 0, 1, "", "hardsilu"], [124, 0, 1, "", "hardswish"], [312, 0, 1, "", "hardtanh"], [572, 0, 1, "", "has_nans"], [491, 0, 1, "", "heaviside"], [446, 0, 1, "", "higher_order_moment"], [465, 0, 1, "", "hinge_embedding_loss"], [539, 0, 1, "", "histogram"], [492, 0, 1, "", "hsplit"], [493, 0, 1, "", "hstack"], [466, 0, 1, "", "huber_loss"], [363, 0, 1, "", "hypot"], [494, 0, 1, "", "i0"], [420, 0, 1, "", "idct"], [421, 0, 1, "", "ifft"], [422, 0, 1, "", "ifftn"], [540, 0, 1, "", "igamma"], [181, 0, 1, "", "iinfo"], [266, 0, 1, "", "imag"], [447, 0, 1, "", "initialize_tucker"], [690, 0, 1, "", "inner"], [574, 0, 1, "", "inplace_decrement"], [575, 0, 1, "", "inplace_increment"], [576, 0, 1, "", "inplace_update"], [517, 0, 1, "", "instance_norm"], [424, 0, 1, "", "interpolate"], [691, 0, 1, "", "inv"], [578, 0, 1, "", "is_array"], [184, 0, 1, "", "is_bool_dtype"], [186, 0, 1, "", "is_float_dtype"], [188, 0, 1, "", "is_int_dtype"], [579, 0, 1, "", "is_ivy_array"], [580, 0, 1, "", "is_ivy_container"], [582, 0, 1, "", "is_native_array"], [190, 0, 1, "", "is_uint_dtype"], [364, 0, 1, "", "isclose"], [267, 0, 1, "", "isfinite"], [583, 0, 1, "", "isin"], [268, 0, 1, "", "isinf"], [269, 0, 1, "", "isnan"], [270, 0, 1, "", "isreal"], [585, 0, 1, "", "itemsize"], [467, 0, 1, "", "kl_div"], [449, 0, 1, "", "kron"], [468, 0, 1, "", "l1_loss"], [518, 0, 1, "", "l1_normalize"], [519, 0, 1, "", "l2_normalize"], [635, 0, 1, "", "lamb_update"], [636, 0, 1, "", "lars_update"], [755, 0, 1, "", "layer_norm"], [271, 0, 1, "", "lcm"], [365, 0, 1, "", "ldexp"], [125, 0, 1, "", "leaky_relu"], [366, 0, 1, "", "lerp"], [272, 0, 1, "", "less"], [273, 0, 1, "", "less_equal"], [529, 0, 1, "", "lexsort"], [367, 0, 1, "", "lgamma"], [675, 0, 1, "", "linear"], [150, 0, 1, "", "linspace"], [274, 0, 1, "", "log"], [275, 0, 1, "", "log10"], [276, 0, 1, "", "log1p"], [277, 0, 1, "", "log2"], [469, 0, 1, "", "log_poisson_loss"], [126, 0, 1, "", "log_softmax"], [278, 0, 1, "", "logaddexp"], [279, 0, 1, "", "logaddexp2"], [280, 0, 1, "", "logical_and"], [281, 0, 1, "", "logical_not"], [282, 0, 1, "", "logical_or"], [283, 0, 1, "", "logical_xor"], [313, 0, 1, "", "logit"], [314, 0, 1, "", "logsigmoid"], [151, 0, 1, "", "logspace"], [521, 0, 1, "", "lp_normalize"], [677, 0, 1, "", "lstm_update"], [453, 0, 1, "", "make_svd_non_negative"], [692, 0, 1, "", "matmul"], [495, 0, 1, "", "matricize"], [454, 0, 1, "", "matrix_exp"], [693, 0, 1, "", "matrix_norm"], [694, 0, 1, "", "matrix_power"], [695, 0, 1, "", "matrix_rank"], [696, 0, 1, "", "matrix_transpose"], [778, 0, 1, "", "max"], [425, 0, 1, "", "max_pool1d"], [426, 0, 1, "", "max_pool2d"], [427, 0, 1, "", "max_pool3d"], [428, 0, 1, "", "max_unpool1d"], [284, 0, 1, "", "maximum"], [779, 0, 1, "", "mean"], [541, 0, 1, "", "median"], [332, 0, 1, "", "mel_weight_matrix"], [152, 0, 1, "", "meshgrid"], [780, 0, 1, "", "min"], [285, 0, 1, "", "minimum"], [127, 0, 1, "", "mish"], [455, 0, 1, "", "mode_dot"], [368, 0, 1, "", "modf"], [496, 0, 1, "", "moveaxis"], [772, 0, 1, "", "msort"], [456, 0, 1, "", "multi_dot"], [678, 0, 1, "", "multi_head_attention"], [457, 0, 1, "", "multi_mode_dot"], [756, 0, 1, "", "multinomial"], [286, 0, 1, "", "multiply"], [287, 0, 1, "", "nan_to_num"], [542, 0, 1, "", "nanmean"], [543, 0, 1, "", "nanmedian"], [544, 0, 1, "", "nanmin"], [545, 0, 1, "", "nanprod"], [369, 0, 1, "", "nansum"], [153, 0, 1, "", "native_array"], [288, 0, 1, "", "negative"], [370, 0, 1, "", "nextafter"], [765, 0, 1, "", "nonzero"], [289, 0, 1, "", "not_equal"], [154, 0, 1, "", "one_hot"], [156, 0, 1, "", "ones_like"], [637, 0, 1, "", "optimizer_update"], [547, 0, 1, "", "optional_get_element"], [697, 0, 1, "", "outer"], [497, 0, 1, "", "pad"], [499, 0, 1, "", "partial_fold"], [500, 0, 1, "", "partial_tensor_to_vec"], [458, 0, 1, "", "partial_tucker"], [501, 0, 1, "", "partial_unfold"], [502, 0, 1, "", "partial_vec_to_tensor"], [722, 0, 1, "", "permute_dims"], [698, 0, 1, "", "pinv"], [526, 0, 1, "", "poisson"], [470, 0, 1, "", "poisson_nll_loss"], [290, 0, 1, "", "positive"], [291, 0, 1, "", "pow"], [315, 0, 1, "", "prelu"], [781, 0, 1, "", "prod"], [503, 0, 1, "", "put_along_axis"], [699, 0, 1, "", "qr"], [546, 0, 1, "", "quantile"], [292, 0, 1, "", "rad2deg"], [757, 0, 1, "", "randint"], [758, 0, 1, "", "random_normal"], [759, 0, 1, "", "random_uniform"], [293, 0, 1, "", "real"], [294, 0, 1, "", "reciprocal"], [376, 0, 1, "", "reduce"], [431, 0, 1, "", "reduce_window"], [128, 0, 1, "", "relu"], [316, 0, 1, "", "relu6"], [295, 0, 1, "", "remainder"], [723, 0, 1, "", "repeat"], [724, 0, 1, "", "reshape"], [193, 0, 1, "", "result_type"], [432, 0, 1, "", "rfft"], [433, 0, 1, "", "rfftn"], [725, 0, 1, "", "roll"], [504, 0, 1, "", "rot90"], [296, 0, 1, "", "round"], [681, 0, 1, "", "scaled_dot_product_attention"], [317, 0, 1, "", "scaled_tanh"], [590, 0, 1, "", "scatter_flat"], [591, 0, 1, "", "scatter_nd"], [773, 0, 1, "", "searchsorted"], [318, 0, 1, "", "selu"], [604, 0, 1, "", "shape"], [761, 0, 1, "", "shuffle"], [129, 0, 1, "", "sigmoid"], [297, 0, 1, "", "sign"], [371, 0, 1, "", "signbit"], [319, 0, 1, "", "silu"], [298, 0, 1, "", "sin"], [372, 0, 1, "", "sinc"], [299, 0, 1, "", "sinh"], [605, 0, 1, "", "size"], [435, 0, 1, "", "sliding_window"], [700, 0, 1, "", "slogdet"], [471, 0, 1, "", "smooth_l1_loss"], [472, 0, 1, "", "soft_margin_loss"], [505, 0, 1, "", "soft_thresholding"], [130, 0, 1, "", "softmax"], [131, 0, 1, "", "softplus"], [320, 0, 1, "", "softshrink"], [701, 0, 1, "", "solve"], [774, 0, 1, "", "sort"], [713, 0, 1, "", "sparse_cross_entropy"], [373, 0, 1, "", "sparsify_tensor"], [726, 0, 1, "", "split"], [300, 0, 1, "", "sqrt"], [301, 0, 1, "", "square"], [727, 0, 1, "", "squeeze"], [606, 0, 1, "", "stable_divide"], [607, 0, 1, "", "stable_pow"], [728, 0, 1, "", "stack"], [782, 0, 1, "", "std"], [436, 0, 1, "", "stft"], [639, 0, 1, "", "stop_gradient"], [608, 0, 1, "", "strides"], [302, 0, 1, "", "subtract"], [783, 0, 1, "", "sum"], [609, 0, 1, "", "supports_inplace_updates"], [702, 0, 1, "", "svd"], [460, 0, 1, "", "svd_flip"], [703, 0, 1, "", "svdvals"], [729, 0, 1, "", "swapaxes"], [506, 0, 1, "", "take"], [507, 0, 1, "", "take_along_axis"], [303, 0, 1, "", "tan"], [304, 0, 1, "", "tanh"], [322, 0, 1, "", "tanhshrink"], [461, 0, 1, "", "tensor_train"], [704, 0, 1, "", "tensordot"], [705, 0, 1, "", "tensorsolve"], [323, 0, 1, "", "threshold"], [324, 0, 1, "", "thresholded_relu"], [730, 0, 1, "", "tile"], [227, 0, 1, "", "to_device"], [611, 0, 1, "", "to_list"], [613, 0, 1, "", "to_numpy"], [614, 0, 1, "", "to_scalar"], [508, 0, 1, "", "top_k"], [706, 0, 1, "", "trace"], [305, 0, 1, "", "trapz"], [158, 0, 1, "", "tril"], [342, 0, 1, "", "trilu"], [509, 0, 1, "", "trim_zeros"], [159, 0, 1, "", "triu"], [306, 0, 1, "", "trunc"], [307, 0, 1, "", "trunc_divide"], [462, 0, 1, "", "truncated_svd"], [463, 0, 1, "", "tt_matrix_to_tensor"], [464, 0, 1, "", "tucker"], [510, 0, 1, "", "unflatten"], [511, 0, 1, "", "unfold"], [767, 0, 1, "", "unique_all"], [512, 0, 1, "", "unique_consecutive"], [768, 0, 1, "", "unique_counts"], [769, 0, 1, "", "unique_inverse"], [770, 0, 1, "", "unique_values"], [527, 0, 1, "", "unravel_index"], [343, 0, 1, "", "unsorted_segment_mean"], [344, 0, 1, "", "unsorted_segment_min"], [345, 0, 1, "", "unsorted_segment_sum"], [731, 0, 1, "", "unstack"], [627, 0, 1, "", "value_is_nan"], [707, 0, 1, "", "vander"], [784, 0, 1, "", "var"], [708, 0, 1, "", "vecdot"], [709, 0, 1, "", "vector_norm"], [710, 0, 1, "", "vector_to_skew_symmetric_matrix"], [513, 0, 1, "", "vsplit"], [514, 0, 1, "", "vstack"], [766, 0, 1, "", "where"], [374, 0, 1, "", "xlogy"], [732, 0, 1, "", "zero_pad"], [162, 0, 1, "", "zeros_like"], [375, 0, 1, "", "zeta"]], "ivy": [[649, 1, 1, "", "ArrayMode"], [645, 1, 1, "", "DefaultComplexDtype"], [646, 1, 1, "", "DefaultDevice"], [645, 1, 1, "", "DefaultDtype"], [645, 1, 1, "", "DefaultFloatDtype"], [645, 1, 1, "", "DefaultIntDtype"], [645, 1, 1, "", "DefaultUintDtype"], [399, 1, 1, "", "NativeSparseArray"], [644, 1, 1, "", "NestedSequence"], [649, 1, 1, "", "PreciseMode"], [646, 1, 1, "", "Profiler"], [399, 1, 1, "", "SparseArray"], [233, 2, 1, "", "abs"], [234, 2, 1, "", "acos"], [235, 2, 1, "", "acosh"], [650, 2, 1, "", "adam_step"], [650, 2, 1, "", "adam_update"], [402, 2, 1, "", "adaptive_avg_pool1d"], [403, 2, 1, "", "adaptive_avg_pool2d"], [404, 2, 1, "", "adaptive_max_pool2d"], [405, 2, 1, "", "adaptive_max_pool3d"], [236, 2, 1, "", "add"], [389, 2, 1, "", "adjoint"], [663, 2, 1, "", "all"], [649, 2, 1, "", "all_equal"], [656, 2, 1, "", "all_nested_indices"], [385, 2, 1, "", "allclose"], [385, 2, 1, "", "amax"], [385, 2, 1, "", "amin"], [237, 2, 1, "", "angle"], [663, 2, 1, "", "any"], [644, 2, 1, "", "arange"], [406, 2, 1, "", "area_interpolate"], [649, 2, 1, "", "arg_info"], [649, 2, 1, "", "arg_names"], [659, 2, 1, "", "argmax"], [659, 2, 1, "", "argmin"], [661, 2, 1, "", "argsort"], [659, 2, 1, "", "argwhere"], [644, 2, 1, "", "array"], [649, 2, 1, "", "array_equal"], [206, 2, 1, "", "as_ivy_dev"], [645, 2, 1, "", "as_ivy_dtype"], [207, 2, 1, "", "as_native_dev"], [645, 2, 1, "", "as_native_dtype"], [391, 2, 1, "", "as_strided"], [644, 2, 1, "", "asarray"], [238, 2, 1, "", "asin"], [239, 2, 1, "", "asinh"], [649, 2, 1, "", "assert_supports_inplace"], [391, 2, 1, "", "associative_scan"], [645, 2, 1, "", "astype"], [240, 2, 1, "", "atan"], [241, 2, 1, "", "atan2"], [242, 2, 1, "", "atanh"], [391, 2, 1, "", "atleast_1d"], [391, 2, 1, "", "atleast_2d"], [391, 2, 1, "", "atleast_3d"], [407, 2, 1, "", "avg_pool1d"], [408, 2, 1, "", "avg_pool2d"], [409, 2, 1, "", "avg_pool3d"], [394, 2, 1, "", "batch_norm"], [389, 2, 1, "", "batched_outer"], [395, 2, 1, "", "bernoulli"], [395, 2, 1, "", "beta"], [385, 2, 1, "", "binarizer"], [653, 2, 1, "", "binary_cross_entropy"], [400, 2, 1, "", "bincount"], [387, 2, 1, "", "bind_custom_gradient_function"], [243, 2, 1, "", "bitwise_and"], [244, 2, 1, "", "bitwise_invert"], [245, 2, 1, "", "bitwise_left_shift"], [246, 2, 1, "", "bitwise_or"], [247, 2, 1, "", "bitwise_right_shift"], [248, 2, 1, "", "bitwise_xor"], [325, 2, 1, "", "blackman_window"], [645, 2, 1, "", "broadcast_arrays"], [391, 2, 1, "", "broadcast_shapes"], [645, 2, 1, "", "broadcast_to"], [649, 2, 1, "", "cache_fn"], [645, 2, 1, "", "can_cast"], [249, 2, 1, "", "ceil"], [308, 2, 1, "", "celu"], [645, 2, 1, "", "check_float"], [391, 2, 1, "", "check_scalar"], [652, 2, 1, "", "cholesky"], [391, 2, 1, "", "choose"], [208, 2, 1, "", "clear_cached_mem_on_dev"], [654, 2, 1, "", "clip"], [649, 2, 1, "", "clip_matrix_norm"], [649, 2, 1, "", "clip_vector_norm"], [645, 2, 1, "", "closest_valid_dtype"], [643, 2, 1, "", "cmp_is"], [643, 2, 1, "", "cmp_isnot"], [391, 2, 1, "", "column_stack"], [654, 2, 1, "", "concat"], [391, 2, 1, "", "concat_from_sequence"], [389, 2, 1, "", "cond"], [385, 2, 1, "", "conj"], [654, 2, 1, "", "constant_pad"], [649, 2, 1, "", "container_types"], [651, 2, 1, "", "conv"], [651, 2, 1, "", "conv1d"], [651, 2, 1, "", "conv1d_transpose"], [651, 2, 1, "", "conv2d"], [651, 2, 1, "", "conv2d_transpose"], [651, 2, 1, "", "conv3d"], [651, 2, 1, "", "conv3d_transpose"], [651, 2, 1, "", "conv_general_dilated"], [651, 2, 1, "", "conv_general_transpose"], [644, 2, 1, "", "copy_array"], [656, 2, 1, "", "copy_nest"], [385, 2, 1, "", "copysign"], [400, 2, 1, "", "corrcoef"], [250, 2, 1, "", "cos"], [251, 2, 1, "", "cosh"], [385, 2, 1, "", "count_nonzero"], [400, 2, 1, "", "cov"], [652, 2, 1, "", "cross"], [653, 2, 1, "", "cross_entropy"], [400, 2, 1, "", "cummax"], [400, 2, 1, "", "cummin"], [662, 2, 1, "", "cumprod"], [662, 2, 1, "", "cumsum"], [649, 2, 1, "", "current_backend_str"], [410, 2, 1, "", "dct"], [649, 2, 1, "", "default"], [645, 2, 1, "", "default_complex_dtype"], [209, 2, 1, "", "default_device"], [645, 2, 1, "", "default_dtype"], [645, 2, 1, "", "default_float_dtype"], [645, 2, 1, "", "default_int_dtype"], [645, 2, 1, "", "default_uint_dtype"], [252, 2, 1, "", "deg2rad"], [651, 2, 1, "", "depthwise_conv2d"], [652, 2, 1, "", "det"], [210, 2, 1, "", "dev"], [211, 2, 1, "", "dev_util"], [411, 2, 1, "", "dft"], [652, 2, 1, "", "diag"], [389, 2, 1, "", "diagflat"], [652, 2, 1, "", "diagonal"], [385, 2, 1, "", "diff"], [385, 2, 1, "", "digamma"], [395, 2, 1, "", "dirichlet"], [253, 2, 1, "", "divide"], [389, 2, 1, "", "dot"], [651, 2, 1, "", "dropout"], [412, 2, 1, "", "dropout1d"], [413, 2, 1, "", "dropout2d"], [414, 2, 1, "", "dropout3d"], [391, 2, 1, "", "dsplit"], [391, 2, 1, "", "dstack"], [645, 2, 1, "", "dtype"], [645, 2, 1, "", "dtype_bits"], [656, 2, 1, "", "duplicate_array_index_chains"], [642, 6, 1, "", "e"], [389, 2, 1, "", "eig"], [652, 2, 1, "", "eigh"], [389, 2, 1, "", "eigh_tridiagonal"], [389, 2, 1, "", "eigvals"], [652, 2, 1, "", "eigvalsh"], [649, 2, 1, "", "einops_rearrange"], [649, 2, 1, "", "einops_reduce"], [649, 2, 1, "", "einops_repeat"], [662, 2, 1, "", "einsum"], [309, 2, 1, "", "elu"], [415, 2, 1, "", "embedding"], [644, 2, 1, "", "empty"], [644, 2, 1, "", "empty_like"], [254, 2, 1, "", "equal"], [255, 2, 1, "", "erf"], [385, 2, 1, "", "erfc"], [385, 2, 1, "", "erfinv"], [650, 2, 1, "", "execute_with_gradients"], [649, 2, 1, "", "exists"], [256, 2, 1, "", "exp"], [257, 2, 1, "", "exp2"], [391, 2, 1, "", "expand"], [654, 2, 1, "", "expand_dims"], [258, 2, 1, "", "expm1"], [644, 2, 1, "", "eye"], [326, 2, 1, "", "eye_like"], [416, 2, 1, "", "fft"], [417, 2, 1, "", "fft2"], [391, 2, 1, "", "fill_diagonal"], [645, 2, 1, "", "finfo"], [385, 2, 1, "", "fix"], [391, 2, 1, "", "flatten"], [654, 2, 1, "", "flip"], [391, 2, 1, "", "fliplr"], [391, 2, 1, "", "flipud"], [385, 2, 1, "", "float_power"], [259, 2, 1, "", "floor"], [260, 2, 1, "", "floor_divide"], [385, 2, 1, "", "fmax"], [261, 2, 1, "", "fmin"], [262, 2, 1, "", "fmod"], [391, 2, 1, "", "fold"], [655, 2, 1, "", "fomaml_step"], [643, 2, 1, "", "for_loop"], [649, 2, 1, "", "fourier_encode"], [385, 2, 1, "", "frexp"], [644, 2, 1, "", "from_dlpack"], [644, 2, 1, "", "frombuffer"], [644, 2, 1, "", "full"], [644, 2, 1, "", "full_like"], [212, 2, 1, "", "function_supported_devices"], [649, 2, 1, "", "function_supported_devices_and_dtypes"], [645, 2, 1, "", "function_supported_dtypes"], [213, 2, 1, "", "function_unsupported_devices"], [649, 2, 1, "", "function_unsupported_devices_and_dtypes"], [645, 2, 1, "", "function_unsupported_dtypes"], [395, 2, 1, "", "gamma"], [649, 2, 1, "", "gather"], [649, 2, 1, "", "gather_nd"], [263, 2, 1, "", "gcd"], [641, 2, 1, "", "gelu"], [389, 2, 1, "", "general_inner_product"], [418, 2, 1, "", "generate_einsum_equation"], [649, 2, 1, "", "get_all_arrays_in_memory"], [214, 2, 1, "", "get_all_ivy_arrays_on_dev"], [419, 2, 1, "", "get_interpolate_kernel"], [649, 2, 1, "", "get_item"], [649, 2, 1, "", "get_num_dims"], [649, 2, 1, "", "get_referrers_recursive"], [215, 2, 1, "", "gpu_is_available"], [650, 2, 1, "", "grad"], [385, 2, 1, "", "gradient"], [650, 2, 1, "", "gradient_descent_update"], [877, 2, 1, "", "graph_transpile"], [264, 2, 1, "", "greater"], [265, 2, 1, "", "greater_equal"], [394, 2, 1, "", "group_norm"], [327, 2, 1, "", "hamming_window"], [216, 2, 1, "", "handle_soft_device_variable"], [328, 2, 1, "", "hann_window"], [310, 2, 1, "", "hardshrink"], [311, 2, 1, "", "hardsilu"], [641, 2, 1, "", "hardswish"], [312, 2, 1, "", "hardtanh"], [649, 2, 1, "", "has_nans"], [391, 2, 1, "", "heaviside"], [389, 2, 1, "", "higher_order_moment"], [390, 2, 1, "", "hinge_embedding_loss"], [400, 2, 1, "", "histogram"], [391, 2, 1, "", "hsplit"], [391, 2, 1, "", "hstack"], [390, 2, 1, "", "huber_loss"], [385, 2, 1, "", "hypot"], [391, 2, 1, "", "i0"], [420, 2, 1, "", "idct"], [643, 2, 1, "", "if_else"], [421, 2, 1, "", "ifft"], [422, 2, 1, "", "ifftn"], [400, 2, 1, "", "igamma"], [645, 2, 1, "", "iinfo"], [266, 2, 1, "", "imag"], [656, 2, 1, "", "index_nest"], [382, 2, 1, "", "indices"], [642, 6, 1, "", "inf"], [645, 2, 1, "", "infer_default_dtype"], [389, 2, 1, "", "initialize_tucker"], [652, 2, 1, "", "inner"], [649, 2, 1, "", "inplace_arrays_supported"], [649, 2, 1, "", "inplace_decrement"], [649, 2, 1, "", "inplace_increment"], [649, 2, 1, "", "inplace_update"], [649, 2, 1, "", "inplace_variables_supported"], [656, 2, 1, "", "insert_into_nest_at_index"], [656, 2, 1, "", "insert_into_nest_at_indices"], [394, 2, 1, "", "instance_norm"], [388, 2, 1, "", "interp"], [388, 2, 1, "", "interpolate"], [652, 2, 1, "", "inv"], [645, 2, 1, "", "invalid_dtype"], [398, 2, 1, "", "invert_permutation"], [649, 2, 1, "", "is_array"], [645, 2, 1, "", "is_bool_dtype"], [645, 2, 1, "", "is_complex_dtype"], [645, 2, 1, "", "is_float_dtype"], [645, 2, 1, "", "is_hashable_dtype"], [188, 2, 1, "", "is_int_dtype"], [649, 2, 1, "", "is_ivy_array"], [649, 2, 1, "", "is_ivy_container"], [649, 2, 1, "", "is_ivy_nested_array"], [399, 2, 1, "", "is_ivy_sparse_array"], [649, 2, 1, "", "is_native_array"], [189, 2, 1, "", "is_native_dtype"], [399, 2, 1, "", "is_native_sparse_array"], [190, 2, 1, "", "is_uint_dtype"], [385, 2, 1, "", "isclose"], [267, 2, 1, "", "isfinite"], [649, 2, 1, "", "isin"], [268, 2, 1, "", "isinf"], [269, 2, 1, "", "isnan"], [270, 2, 1, "", "isreal"], [649, 2, 1, "", "isscalar"], [649, 2, 1, "", "itemsize"], [650, 2, 1, "", "jac"], [387, 2, 1, "", "jvp"], [382, 2, 1, "", "kaiser_bessel_derived_window"], [382, 2, 1, "", "kaiser_window"], [389, 2, 1, "", "khatri_rao"], [390, 2, 1, "", "kl_div"], [389, 2, 1, "", "kron"], [389, 2, 1, "", "kronecker"], [390, 2, 1, "", "l1_loss"], [394, 2, 1, "", "l1_normalize"], [394, 2, 1, "", "l2_normalize"], [650, 2, 1, "", "lamb_update"], [650, 2, 1, "", "lars_update"], [657, 2, 1, "", "layer_norm"], [271, 2, 1, "", "lcm"], [385, 2, 1, "", "ldexp"], [641, 2, 1, "", "leaky_relu"], [385, 2, 1, "", "lerp"], [272, 2, 1, "", "less"], [273, 2, 1, "", "less_equal"], [398, 2, 1, "", "lexsort"], [385, 2, 1, "", "lgamma"], [651, 2, 1, "", "linear"], [644, 2, 1, "", "linspace"], [663, 2, 1, "", "load"], [394, 2, 1, "", "local_response_norm"], [274, 2, 1, "", "log"], [275, 2, 1, "", "log10"], [276, 2, 1, "", "log1p"], [277, 2, 1, "", "log2"], [390, 2, 1, "", "log_poisson_loss"], [641, 2, 1, "", "log_softmax"], [278, 2, 1, "", "logaddexp"], [279, 2, 1, "", "logaddexp2"], [280, 2, 1, "", "logical_and"], [281, 2, 1, "", "logical_not"], [282, 2, 1, "", "logical_or"], [283, 2, 1, "", "logical_xor"], [313, 2, 1, "", "logit"], [314, 2, 1, "", "logsigmoid"], [644, 2, 1, "", "logspace"], [394, 2, 1, "", "lp_normalize"], [651, 2, 1, "", "lstm"], [651, 2, 1, "", "lstm_update"], [389, 2, 1, "", "lu_factor"], [389, 2, 1, "", "lu_solve"], [389, 2, 1, "", "make_svd_non_negative"], [655, 2, 1, "", "maml_step"], [656, 2, 1, "", "map"], [656, 2, 1, "", "map_nest_at_index"], [656, 2, 1, "", "map_nest_at_indices"], [649, 2, 1, "", "match_kwargs"], [652, 2, 1, "", "matmul"], [391, 2, 1, "", "matricize"], [389, 2, 1, "", "matrix_exp"], [652, 2, 1, "", "matrix_norm"], [652, 2, 1, "", "matrix_power"], [652, 2, 1, "", "matrix_rank"], [652, 2, 1, "", "matrix_transpose"], [662, 2, 1, "", "max"], [388, 2, 1, "", "max_pool1d"], [388, 2, 1, "", "max_pool2d"], [388, 2, 1, "", "max_pool3d"], [388, 2, 1, "", "max_unpool1d"], [284, 2, 1, "", "maximum"], [662, 2, 1, "", "mean"], [400, 2, 1, "", "median"], [382, 2, 1, "", "mel_weight_matrix"], [644, 2, 1, "", "meshgrid"], [662, 2, 1, "", "min"], [285, 2, 1, "", "minimum"], [641, 2, 1, "", "mish"], [389, 2, 1, "", "mode_dot"], [385, 2, 1, "", "modf"], [391, 2, 1, "", "moveaxis"], [661, 2, 1, "", "msort"], [389, 2, 1, "", "multi_dot"], [651, 2, 1, "", "multi_head_attention"], [656, 2, 1, "", "multi_index_nest"], [389, 2, 1, "", "multi_mode_dot"], [658, 2, 1, "", "multinomial"], [286, 2, 1, "", "multiply"], [649, 2, 1, "", "multiprocessing"], [642, 6, 1, "", "nan"], [287, 2, 1, "", "nan_to_num"], [400, 2, 1, "", "nanmean"], [400, 2, 1, "", "nanmedian"], [400, 2, 1, "", "nanmin"], [400, 2, 1, "", "nanprod"], [385, 2, 1, "", "nansum"], [644, 2, 1, "", "native_array"], [399, 2, 1, "", "native_sparse_array"], [399, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [382, 2, 1, "", "ndenumerate"], [382, 2, 1, "", "ndindex"], [388, 2, 1, "", "nearest_interpolate"], [288, 2, 1, "", "negative"], [656, 2, 1, "", "nested_any"], [656, 2, 1, "", "nested_argwhere"], [656, 2, 1, "", "nested_map"], [656, 2, 1, "", "nested_multi_map"], [642, 6, 1, "", "newaxis"], [385, 2, 1, "", "nextafter"], [651, 2, 1, "", "nms"], [659, 2, 1, "", "nonzero"], [289, 2, 1, "", "not_equal"], [649, 2, 1, "", "num_arrays_in_memory"], [217, 2, 1, "", "num_cpu_cores"], [218, 2, 1, "", "num_gpus"], [219, 2, 1, "", "num_ivy_arrays_on_dev"], [644, 2, 1, "", "one_hot"], [644, 2, 1, "", "ones"], [644, 2, 1, "", "ones_like"], [650, 2, 1, "", "optimizer_update"], [401, 2, 1, "", "optional_get_element"], [652, 2, 1, "", "outer"], [391, 2, 1, "", "pad"], [391, 2, 1, "", "pad_sequence"], [391, 2, 1, "", "partial_fold"], [391, 2, 1, "", "partial_tensor_to_vec"], [389, 2, 1, "", "partial_tucker"], [391, 2, 1, "", "partial_unfold"], [391, 2, 1, "", "partial_vec_to_tensor"], [220, 2, 1, "", "percent_used_mem_on_dev"], [654, 2, 1, "", "permute_dims"], [642, 6, 1, "", "pi"], [652, 2, 1, "", "pinv"], [395, 2, 1, "", "poisson"], [390, 2, 1, "", "poisson_nll_loss"], [382, 2, 1, "", "polyval"], [388, 2, 1, "", "pool"], [290, 2, 1, "", "positive"], [291, 2, 1, "", "pow"], [315, 2, 1, "", "prelu"], [649, 2, 1, "", "print_all_arrays_in_memory"], [221, 2, 1, "", "print_all_ivy_arrays_on_dev"], [662, 2, 1, "", "prod"], [191, 2, 1, "", "promote_types"], [192, 2, 1, "", "promote_types_of_inputs"], [656, 2, 1, "", "prune_empty"], [656, 2, 1, "", "prune_nest_at_index"], [656, 2, 1, "", "prune_nest_at_indices"], [391, 2, 1, "", "put_along_axis"], [652, 2, 1, "", "qr"], [400, 2, 1, "", "quantile"], [292, 2, 1, "", "rad2deg"], [658, 2, 1, "", "randint"], [382, 2, 1, "", "random_cp"], [658, 2, 1, "", "random_normal"], [382, 2, 1, "", "random_parafac2"], [382, 2, 1, "", "random_tr"], [382, 2, 1, "", "random_tt"], [382, 2, 1, "", "random_tucker"], [658, 2, 1, "", "random_uniform"], [293, 2, 1, "", "real"], [294, 2, 1, "", "reciprocal"], [386, 2, 1, "", "reduce"], [388, 2, 1, "", "reduce_window"], [641, 2, 1, "", "relu"], [316, 2, 1, "", "relu6"], [295, 2, 1, "", "remainder"], [654, 2, 1, "", "repeat"], [655, 2, 1, "", "reptile_step"], [650, 2, 1, "", "requires_gradient"], [654, 2, 1, "", "reshape"], [193, 2, 1, "", "result_type"], [388, 2, 1, "", "rfft"], [388, 2, 1, "", "rfftn"], [388, 2, 1, "", "rnn"], [651, 2, 1, "", "roi_align"], [654, 2, 1, "", "roll"], [391, 2, 1, "", "rot90"], [296, 2, 1, "", "round"], [663, 2, 1, "", "save"], [651, 2, 1, "", "scaled_dot_product_attention"], [317, 2, 1, "", "scaled_tanh"], [649, 2, 1, "", "scatter_flat"], [649, 2, 1, "", "scatter_nd"], [661, 2, 1, "", "searchsorted"], [658, 2, 1, "", "seed"], [318, 2, 1, "", "selu"], [649, 2, 1, "", "set_array_mode"], [194, 2, 1, "", "set_default_complex_dtype"], [222, 2, 1, "", "set_default_device"], [195, 2, 1, "", "set_default_dtype"], [196, 2, 1, "", "set_default_float_dtype"], [197, 2, 1, "", "set_default_int_dtype"], [198, 2, 1, "", "set_default_uint_dtype"], [649, 2, 1, "", "set_exception_trace_mode"], [649, 2, 1, "", "set_inplace_mode"], [649, 2, 1, "", "set_item"], [649, 2, 1, "", "set_min_base"], [649, 2, 1, "", "set_min_denominator"], [656, 2, 1, "", "set_nest_at_index"], [656, 2, 1, "", "set_nest_at_indices"], [649, 2, 1, "", "set_nestable_mode"], [649, 2, 1, "", "set_precise_mode"], [649, 2, 1, "", "set_queue_timeout"], [649, 2, 1, "", "set_shape_array_mode"], [649, 2, 1, "", "set_show_func_wrapper_trace_mode"], [223, 2, 1, "", "set_soft_device_mode"], [224, 2, 1, "", "set_split_factor"], [649, 2, 1, "", "set_tmp_dir"], [649, 2, 1, "", "shape"], [658, 2, 1, "", "shuffle"], [641, 2, 1, "", "sigmoid"], [297, 2, 1, "", "sign"], [385, 2, 1, "", "signbit"], [319, 2, 1, "", "silu"], [298, 2, 1, "", "sin"], [385, 2, 1, "", "sinc"], [299, 2, 1, "", "sinh"], [649, 2, 1, "", "size"], [388, 2, 1, "", "sliding_window"], [652, 2, 1, "", "slogdet"], [390, 2, 1, "", "smooth_l1_loss"], [390, 2, 1, "", "soft_margin_loss"], [391, 2, 1, "", "soft_thresholding"], [641, 2, 1, "", "softmax"], [641, 2, 1, "", "softplus"], [320, 2, 1, "", "softshrink"], [641, 2, 1, "", "softsign"], [652, 2, 1, "", "solve"], [389, 2, 1, "", "solve_triangular"], [661, 2, 1, "", "sort"], [653, 2, 1, "", "sparse_cross_entropy"], [385, 2, 1, "", "sparsify_tensor"], [654, 2, 1, "", "split"], [225, 2, 1, "", "split_factor"], [226, 2, 1, "", "split_func_call"], [300, 2, 1, "", "sqrt"], [301, 2, 1, "", "square"], [654, 2, 1, "", "squeeze"], [653, 2, 1, "", "ssim_loss"], [649, 2, 1, "", "stable_divide"], [649, 2, 1, "", "stable_pow"], [654, 2, 1, "", "stack"], [321, 2, 1, "", "stanh"], [662, 2, 1, "", "std"], [388, 2, 1, "", "stft"], [650, 2, 1, "", "stop_gradient"], [649, 2, 1, "", "strides"], [302, 2, 1, "", "subtract"], [662, 2, 1, "", "sum"], [649, 2, 1, "", "supports_inplace_updates"], [652, 2, 1, "", "svd"], [389, 2, 1, "", "svd_flip"], [652, 2, 1, "", "svdvals"], [654, 2, 1, "", "swapaxes"], [391, 2, 1, "", "take"], [391, 2, 1, "", "take_along_axis"], [303, 2, 1, "", "tan"], [304, 2, 1, "", "tanh"], [322, 2, 1, "", "tanhshrink"], [389, 2, 1, "", "tensor_train"], [652, 2, 1, "", "tensordot"], [652, 2, 1, "", "tensorsolve"], [323, 2, 1, "", "threshold"], [324, 2, 1, "", "thresholded_relu"], [654, 2, 1, "", "tile"], [227, 2, 1, "", "to_device"], [644, 2, 1, "", "to_dlpack"], [649, 2, 1, "", "to_ivy_shape"], [649, 2, 1, "", "to_list"], [649, 2, 1, "", "to_native_shape"], [649, 2, 1, "", "to_numpy"], [649, 2, 1, "", "to_scalar"], [391, 2, 1, "", "top_k"], [228, 2, 1, "", "total_mem_on_dev"], [229, 2, 1, "", "tpu_is_available"], [652, 2, 1, "", "trace"], [878, 2, 1, "", "trace_graph"], [879, 2, 1, "", "transpile"], [305, 2, 1, "", "trapz"], [644, 2, 1, "", "tril"], [382, 2, 1, "", "tril_indices"], [382, 2, 1, "", "trilu"], [391, 2, 1, "", "trim_zeros"], [644, 2, 1, "", "triu"], [644, 2, 1, "", "triu_indices"], [306, 2, 1, "", "trunc"], [307, 2, 1, "", "trunc_divide"], [389, 2, 1, "", "truncated_svd"], [649, 2, 1, "", "try_else_none"], [643, 2, 1, "", "try_except"], [389, 2, 1, "", "tt_matrix_to_tensor"], [389, 2, 1, "", "tucker"], [199, 2, 1, "", "type_promote_arrays"], [391, 2, 1, "", "unflatten"], [391, 2, 1, "", "unfold"], [880, 2, 1, "", "unify"], [660, 2, 1, "", "unique_all"], [391, 2, 1, "", "unique_consecutive"], [660, 2, 1, "", "unique_counts"], [660, 2, 1, "", "unique_inverse"], [660, 2, 1, "", "unique_values"], [396, 2, 1, "", "unravel_index"], [649, 2, 1, "", "unset_array_mode"], [200, 2, 1, "", "unset_default_complex_dtype"], [230, 2, 1, "", "unset_default_device"], [201, 2, 1, "", "unset_default_dtype"], [202, 2, 1, "", "unset_default_float_dtype"], [203, 2, 1, "", "unset_default_int_dtype"], [204, 2, 1, "", "unset_default_uint_dtype"], [649, 2, 1, "", "unset_exception_trace_mode"], [649, 2, 1, "", "unset_inplace_mode"], [649, 2, 1, "", "unset_min_base"], [649, 2, 1, "", "unset_min_denominator"], [649, 2, 1, "", "unset_nestable_mode"], [649, 2, 1, "", "unset_precise_mode"], [649, 2, 1, "", "unset_queue_timeout"], [649, 2, 1, "", "unset_shape_array_mode"], [649, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [231, 2, 1, "", "unset_soft_device_mode"], [649, 2, 1, "", "unset_tmp_dir"], [382, 2, 1, "", "unsorted_segment_mean"], [382, 2, 1, "", "unsorted_segment_min"], [382, 2, 1, "", "unsorted_segment_sum"], [654, 2, 1, "", "unstack"], [232, 2, 1, "", "used_mem_on_dev"], [205, 2, 1, "", "valid_dtype"], [650, 2, 1, "", "value_and_grad"], [649, 2, 1, "", "value_is_nan"], [652, 2, 1, "", "vander"], [662, 2, 1, "", "var"], [652, 2, 1, "", "vecdot"], [652, 2, 1, "", "vector_norm"], [652, 2, 1, "", "vector_to_skew_symmetric_matrix"], [387, 2, 1, "", "vjp"], [649, 2, 1, "", "vmap"], [382, 2, 1, "", "vorbis_window"], [391, 2, 1, "", "vsplit"], [391, 2, 1, "", "vstack"], [653, 2, 1, "", "wasserstein_loss_discriminator"], [653, 2, 1, "", "wasserstein_loss_generator"], [659, 2, 1, "", "where"], [643, 2, 1, "", "while_loop"], [385, 2, 1, "", "xlogy"], [654, 2, 1, "", "zero_pad"], [644, 2, 1, "", "zeros"], [644, 2, 1, "", "zeros_like"], [385, 2, 1, "", "zeta"]], "ivy.Container": [[233, 0, 1, "", "abs"], [234, 0, 1, "", "acos"], [235, 0, 1, "", "acosh"], [629, 0, 1, "", "adam_step"], [630, 0, 1, "", "adam_update"], [402, 0, 1, "", "adaptive_avg_pool1d"], [403, 0, 1, "", "adaptive_avg_pool2d"], [404, 0, 1, "", "adaptive_max_pool2d"], [405, 0, 1, "", "adaptive_max_pool3d"], [236, 0, 1, "", "add"], [437, 0, 1, "", "adjoint"], [785, 0, 1, "", "all"], [548, 0, 1, "", "all_equal"], [347, 0, 1, "", "allclose"], [348, 0, 1, "", "amax"], [349, 0, 1, "", "amin"], [237, 0, 1, "", "angle"], [786, 0, 1, "", "any"], [762, 0, 1, "", "argmax"], [763, 0, 1, "", "argmin"], [771, 0, 1, "", "argsort"], [764, 0, 1, "", "argwhere"], [551, 0, 1, "", "array_equal"], [473, 0, 1, "", "as_strided"], [141, 0, 1, "", "asarray"], [238, 0, 1, "", "asin"], [239, 0, 1, "", "asinh"], [552, 0, 1, "", "assert_supports_inplace"], [474, 0, 1, "", "associative_scan"], [165, 0, 1, "", "astype"], [240, 0, 1, "", "atan"], [241, 0, 1, "", "atan2"], [242, 0, 1, "", "atanh"], [475, 0, 1, "", "atleast_1d"], [476, 0, 1, "", "atleast_2d"], [477, 0, 1, "", "atleast_3d"], [407, 0, 1, "", "avg_pool1d"], [408, 0, 1, "", "avg_pool2d"], [409, 0, 1, "", "avg_pool3d"], [515, 0, 1, "", "batch_norm"], [438, 0, 1, "", "batched_outer"], [522, 0, 1, "", "bernoulli"], [523, 0, 1, "", "beta"], [350, 0, 1, "", "binarizer"], [711, 0, 1, "", "binary_cross_entropy"], [534, 0, 1, "", "bincount"], [243, 0, 1, "", "bitwise_and"], [244, 0, 1, "", "bitwise_invert"], [245, 0, 1, "", "bitwise_left_shift"], [246, 0, 1, "", "bitwise_or"], [247, 0, 1, "", "bitwise_right_shift"], [248, 0, 1, "", "bitwise_xor"], [325, 0, 1, "", "blackman_window"], [166, 0, 1, "", "broadcast_arrays"], [478, 0, 1, "", "broadcast_shapes"], [167, 0, 1, "", "broadcast_to"], [168, 0, 1, "", "can_cast"], [249, 0, 1, "", "ceil"], [308, 0, 1, "", "celu"], [682, 0, 1, "", "cholesky"], [717, 0, 1, "", "clip"], [554, 0, 1, "", "clip_matrix_norm"], [555, 0, 1, "", "clip_vector_norm"], [481, 0, 1, "", "column_stack"], [718, 0, 1, "", "concat"], [482, 0, 1, "", "concat_from_sequence"], [439, 0, 1, "", "cond"], [351, 0, 1, "", "conj"], [719, 0, 1, "", "constant_pad"], [665, 0, 1, "", "conv1d"], [666, 0, 1, "", "conv1d_transpose"], [667, 0, 1, "", "conv2d"], [668, 0, 1, "", "conv2d_transpose"], [669, 0, 1, "", "conv3d"], [670, 0, 1, "", "conv3d_transpose"], [142, 0, 1, "", "copy_array"], [352, 0, 1, "", "copysign"], [535, 0, 1, "", "corrcoef"], [250, 0, 1, "", "cos"], [251, 0, 1, "", "cosh"], [353, 0, 1, "", "count_nonzero"], [536, 0, 1, "", "cov"], [683, 0, 1, "", "cross"], [712, 0, 1, "", "cross_entropy"], [537, 0, 1, "", "cummax"], [538, 0, 1, "", "cummin"], [775, 0, 1, "", "cumprod"], [776, 0, 1, "", "cumsum"], [410, 0, 1, "", "dct"], [252, 0, 1, "", "deg2rad"], [673, 0, 1, "", "depthwise_conv2d"], [684, 0, 1, "", "det"], [210, 0, 1, "", "dev"], [411, 0, 1, "", "dft"], [685, 0, 1, "", "diag"], [440, 0, 1, "", "diagflat"], [686, 0, 1, "", "diagonal"], [354, 0, 1, "", "diff"], [355, 0, 1, "", "digamma"], [524, 0, 1, "", "dirichlet"], [253, 0, 1, "", "divide"], [441, 0, 1, "", "dot"], [674, 0, 1, "", "dropout"], [412, 0, 1, "", "dropout1d"], [413, 0, 1, "", "dropout2d"], [414, 0, 1, "", "dropout3d"], [483, 0, 1, "", "dsplit"], [484, 0, 1, "", "dstack"], [176, 0, 1, "", "dtype"], [442, 0, 1, "", "eig"], [688, 0, 1, "", "eigh"], [443, 0, 1, "", "eigh_tridiagonal"], [444, 0, 1, "", "eigvals"], [689, 0, 1, "", "eigvalsh"], [559, 0, 1, "", "einops_rearrange"], [560, 0, 1, "", "einops_reduce"], [561, 0, 1, "", "einops_repeat"], [777, 0, 1, "", "einsum"], [309, 0, 1, "", "elu"], [415, 0, 1, "", "embedding"], [144, 0, 1, "", "empty_like"], [254, 0, 1, "", "equal"], [255, 0, 1, "", "erf"], [356, 0, 1, "", "erfc"], [357, 0, 1, "", "erfinv"], [562, 0, 1, "", "exists"], [256, 0, 1, "", "exp"], [257, 0, 1, "", "exp2"], [485, 0, 1, "", "expand"], [720, 0, 1, "", "expand_dims"], [258, 0, 1, "", "expm1"], [326, 0, 1, "", "eye_like"], [416, 0, 1, "", "fft"], [486, 0, 1, "", "fill_diagonal"], [178, 0, 1, "", "finfo"], [358, 0, 1, "", "fix"], [487, 0, 1, "", "flatten"], [721, 0, 1, "", "flip"], [488, 0, 1, "", "fliplr"], [489, 0, 1, "", "flipud"], [359, 0, 1, "", "float_power"], [259, 0, 1, "", "floor"], [260, 0, 1, "", "floor_divide"], [360, 0, 1, "", "fmax"], [261, 0, 1, "", "fmin"], [262, 0, 1, "", "fmod"], [490, 0, 1, "", "fold"], [563, 0, 1, "", "fourier_encode"], [361, 0, 1, "", "frexp"], [146, 0, 1, "", "from_dlpack"], [147, 0, 1, "", "frombuffer"], [149, 0, 1, "", "full_like"], [525, 0, 1, "", "gamma"], [566, 0, 1, "", "gather"], [567, 0, 1, "", "gather_nd"], [263, 0, 1, "", "gcd"], [123, 0, 1, "", "gelu"], [445, 0, 1, "", "general_inner_product"], [570, 0, 1, "", "get_num_dims"], [362, 0, 1, "", "gradient"], [633, 0, 1, "", "gradient_descent_update"], [264, 0, 1, "", "greater"], [265, 0, 1, "", "greater_equal"], [516, 0, 1, "", "group_norm"], [327, 0, 1, "", "hamming_window"], [328, 0, 1, "", "hann_window"], [310, 0, 1, "", "hardshrink"], [311, 0, 1, "", "hardsilu"], [124, 0, 1, "", "hardswish"], [312, 0, 1, "", "hardtanh"], [572, 0, 1, "", "has_nans"], [491, 0, 1, "", "heaviside"], [446, 0, 1, "", "higher_order_moment"], [465, 0, 1, "", "hinge_embedding_loss"], [539, 0, 1, "", "histogram"], [492, 0, 1, "", "hsplit"], [493, 0, 1, "", "hstack"], [466, 0, 1, "", "huber_loss"], [363, 0, 1, "", "hypot"], [494, 0, 1, "", "i0"], [420, 0, 1, "", "idct"], [421, 0, 1, "", "ifft"], [422, 0, 1, "", "ifftn"], [540, 0, 1, "", "igamma"], [181, 0, 1, "", "iinfo"], [266, 0, 1, "", "imag"], [447, 0, 1, "", "initialize_tucker"], [690, 0, 1, "", "inner"], [574, 0, 1, "", "inplace_decrement"], [575, 0, 1, "", "inplace_increment"], [576, 0, 1, "", "inplace_update"], [517, 0, 1, "", "instance_norm"], [424, 0, 1, "", "interpolate"], [691, 0, 1, "", "inv"], [528, 0, 1, "", "invert_permutation"], [578, 0, 1, "", "is_array"], [184, 0, 1, "", "is_bool_dtype"], [185, 0, 1, "", "is_complex_dtype"], [186, 0, 1, "", "is_float_dtype"], [188, 0, 1, "", "is_int_dtype"], [579, 0, 1, "", "is_ivy_array"], [582, 0, 1, "", "is_native_array"], [190, 0, 1, "", "is_uint_dtype"], [364, 0, 1, "", "isclose"], [267, 0, 1, "", "isfinite"], [583, 0, 1, "", "isin"], [268, 0, 1, "", "isinf"], [269, 0, 1, "", "isnan"], [270, 0, 1, "", "isreal"], [585, 0, 1, "", "itemsize"], [330, 0, 1, "", "kaiser_bessel_derived_window"], [331, 0, 1, "", "kaiser_window"], [467, 0, 1, "", "kl_div"], [449, 0, 1, "", "kron"], [468, 0, 1, "", "l1_loss"], [518, 0, 1, "", "l1_normalize"], [519, 0, 1, "", "l2_normalize"], [635, 0, 1, "", "lamb_update"], [636, 0, 1, "", "lars_update"], [755, 0, 1, "", "layer_norm"], [271, 0, 1, "", "lcm"], [365, 0, 1, "", "ldexp"], [125, 0, 1, "", "leaky_relu"], [366, 0, 1, "", "lerp"], [272, 0, 1, "", "less"], [273, 0, 1, "", "less_equal"], [529, 0, 1, "", "lexsort"], [367, 0, 1, "", "lgamma"], [675, 0, 1, "", "linear"], [150, 0, 1, "", "linspace"], [274, 0, 1, "", "log"], [275, 0, 1, "", "log10"], [276, 0, 1, "", "log1p"], [277, 0, 1, "", "log2"], [469, 0, 1, "", "log_poisson_loss"], [126, 0, 1, "", "log_softmax"], [278, 0, 1, "", "logaddexp"], [279, 0, 1, "", "logaddexp2"], [280, 0, 1, "", "logical_and"], [281, 0, 1, "", "logical_not"], [282, 0, 1, "", "logical_or"], [283, 0, 1, "", "logical_xor"], [313, 0, 1, "", "logit"], [314, 0, 1, "", "logsigmoid"], [151, 0, 1, "", "logspace"], [521, 0, 1, "", "lp_normalize"], [677, 0, 1, "", "lstm_update"], [453, 0, 1, "", "make_svd_non_negative"], [692, 0, 1, "", "matmul"], [495, 0, 1, "", "matricize"], [454, 0, 1, "", "matrix_exp"], [693, 0, 1, "", "matrix_norm"], [694, 0, 1, "", "matrix_power"], [695, 0, 1, "", "matrix_rank"], [696, 0, 1, "", "matrix_transpose"], [778, 0, 1, "", "max"], [425, 0, 1, "", "max_pool1d"], [426, 0, 1, "", "max_pool2d"], [427, 0, 1, "", "max_pool3d"], [428, 0, 1, "", "max_unpool1d"], [284, 0, 1, "", "maximum"], [779, 0, 1, "", "mean"], [541, 0, 1, "", "median"], [332, 0, 1, "", "mel_weight_matrix"], [152, 0, 1, "", "meshgrid"], [780, 0, 1, "", "min"], [285, 0, 1, "", "minimum"], [127, 0, 1, "", "mish"], [455, 0, 1, "", "mode_dot"], [368, 0, 1, "", "modf"], [496, 0, 1, "", "moveaxis"], [772, 0, 1, "", "msort"], [456, 0, 1, "", "multi_dot"], [678, 0, 1, "", "multi_head_attention"], [457, 0, 1, "", "multi_mode_dot"], [756, 0, 1, "", "multinomial"], [286, 0, 1, "", "multiply"], [287, 0, 1, "", "nan_to_num"], [542, 0, 1, "", "nanmean"], [543, 0, 1, "", "nanmedian"], [544, 0, 1, "", "nanmin"], [545, 0, 1, "", "nanprod"], [369, 0, 1, "", "nansum"], [153, 0, 1, "", "native_array"], [288, 0, 1, "", "negative"], [370, 0, 1, "", "nextafter"], [765, 0, 1, "", "nonzero"], [289, 0, 1, "", "not_equal"], [154, 0, 1, "", "one_hot"], [156, 0, 1, "", "ones_like"], [637, 0, 1, "", "optimizer_update"], [547, 0, 1, "", "optional_get_element"], [697, 0, 1, "", "outer"], [497, 0, 1, "", "pad"], [499, 0, 1, "", "partial_fold"], [500, 0, 1, "", "partial_tensor_to_vec"], [458, 0, 1, "", "partial_tucker"], [501, 0, 1, "", "partial_unfold"], [502, 0, 1, "", "partial_vec_to_tensor"], [722, 0, 1, "", "permute_dims"], [698, 0, 1, "", "pinv"], [526, 0, 1, "", "poisson"], [470, 0, 1, "", "poisson_nll_loss"], [335, 0, 1, "", "polyval"], [290, 0, 1, "", "positive"], [291, 0, 1, "", "pow"], [315, 0, 1, "", "prelu"], [781, 0, 1, "", "prod"], [503, 0, 1, "", "put_along_axis"], [699, 0, 1, "", "qr"], [546, 0, 1, "", "quantile"], [292, 0, 1, "", "rad2deg"], [757, 0, 1, "", "randint"], [758, 0, 1, "", "random_normal"], [759, 0, 1, "", "random_uniform"], [293, 0, 1, "", "real"], [294, 0, 1, "", "reciprocal"], [376, 0, 1, "", "reduce"], [431, 0, 1, "", "reduce_window"], [128, 0, 1, "", "relu"], [316, 0, 1, "", "relu6"], [295, 0, 1, "", "remainder"], [723, 0, 1, "", "repeat"], [724, 0, 1, "", "reshape"], [193, 0, 1, "", "result_type"], [432, 0, 1, "", "rfft"], [433, 0, 1, "", "rfftn"], [725, 0, 1, "", "roll"], [504, 0, 1, "", "rot90"], [296, 0, 1, "", "round"], [681, 0, 1, "", "scaled_dot_product_attention"], [317, 0, 1, "", "scaled_tanh"], [590, 0, 1, "", "scatter_flat"], [591, 0, 1, "", "scatter_nd"], [773, 0, 1, "", "searchsorted"], [318, 0, 1, "", "selu"], [761, 0, 1, "", "shuffle"], [129, 0, 1, "", "sigmoid"], [297, 0, 1, "", "sign"], [371, 0, 1, "", "signbit"], [319, 0, 1, "", "silu"], [298, 0, 1, "", "sin"], [372, 0, 1, "", "sinc"], [299, 0, 1, "", "sinh"], [605, 0, 1, "", "size"], [435, 0, 1, "", "sliding_window"], [700, 0, 1, "", "slogdet"], [471, 0, 1, "", "smooth_l1_loss"], [472, 0, 1, "", "soft_margin_loss"], [505, 0, 1, "", "soft_thresholding"], [130, 0, 1, "", "softmax"], [131, 0, 1, "", "softplus"], [320, 0, 1, "", "softshrink"], [701, 0, 1, "", "solve"], [774, 0, 1, "", "sort"], [713, 0, 1, "", "sparse_cross_entropy"], [373, 0, 1, "", "sparsify_tensor"], [726, 0, 1, "", "split"], [300, 0, 1, "", "sqrt"], [301, 0, 1, "", "square"], [727, 0, 1, "", "squeeze"], [606, 0, 1, "", "stable_divide"], [607, 0, 1, "", "stable_pow"], [728, 0, 1, "", "stack"], [782, 0, 1, "", "std"], [436, 0, 1, "", "stft"], [639, 0, 1, "", "stop_gradient"], [608, 0, 1, "", "strides"], [302, 0, 1, "", "subtract"], [783, 0, 1, "", "sum"], [609, 0, 1, "", "supports_inplace_updates"], [702, 0, 1, "", "svd"], [460, 0, 1, "", "svd_flip"], [703, 0, 1, "", "svdvals"], [729, 0, 1, "", "swapaxes"], [506, 0, 1, "", "take"], [507, 0, 1, "", "take_along_axis"], [303, 0, 1, "", "tan"], [304, 0, 1, "", "tanh"], [322, 0, 1, "", "tanhshrink"], [461, 0, 1, "", "tensor_train"], [704, 0, 1, "", "tensordot"], [705, 0, 1, "", "tensorsolve"], [323, 0, 1, "", "threshold"], [324, 0, 1, "", "thresholded_relu"], [730, 0, 1, "", "tile"], [227, 0, 1, "", "to_device"], [611, 0, 1, "", "to_list"], [613, 0, 1, "", "to_numpy"], [614, 0, 1, "", "to_scalar"], [508, 0, 1, "", "top_k"], [706, 0, 1, "", "trace"], [305, 0, 1, "", "trapz"], [158, 0, 1, "", "tril"], [341, 0, 1, "", "tril_indices"], [342, 0, 1, "", "trilu"], [509, 0, 1, "", "trim_zeros"], [159, 0, 1, "", "triu"], [160, 0, 1, "", "triu_indices"], [306, 0, 1, "", "trunc"], [307, 0, 1, "", "trunc_divide"], [462, 0, 1, "", "truncated_svd"], [463, 0, 1, "", "tt_matrix_to_tensor"], [464, 0, 1, "", "tucker"], [510, 0, 1, "", "unflatten"], [511, 0, 1, "", "unfold"], [767, 0, 1, "", "unique_all"], [512, 0, 1, "", "unique_consecutive"], [768, 0, 1, "", "unique_counts"], [769, 0, 1, "", "unique_inverse"], [770, 0, 1, "", "unique_values"], [527, 0, 1, "", "unravel_index"], [343, 0, 1, "", "unsorted_segment_mean"], [344, 0, 1, "", "unsorted_segment_min"], [345, 0, 1, "", "unsorted_segment_sum"], [731, 0, 1, "", "unstack"], [627, 0, 1, "", "value_is_nan"], [707, 0, 1, "", "vander"], [784, 0, 1, "", "var"], [708, 0, 1, "", "vecdot"], [709, 0, 1, "", "vector_norm"], [710, 0, 1, "", "vector_to_skew_symmetric_matrix"], [346, 0, 1, "", "vorbis_window"], [513, 0, 1, "", "vsplit"], [514, 0, 1, "", "vstack"], [766, 0, 1, "", "where"], [374, 0, 1, "", "xlogy"], [732, 0, 1, "", "zero_pad"], [162, 0, 1, "", "zeros_like"], [375, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[64, 3, 0, "-", "activations"], [115, 3, 0, "-", "array"], [65, 3, 0, "-", "conversions"], [66, 3, 0, "-", "creation"], [67, 3, 0, "-", "data_type"], [68, 3, 0, "-", "device"], [69, 3, 0, "-", "elementwise"], [70, 3, 0, "-", "experimental"], [71, 3, 0, "-", "general"], [72, 3, 0, "-", "gradients"], [73, 3, 0, "-", "image"], [74, 3, 0, "-", "layers"], [75, 3, 0, "-", "linear_algebra"], [76, 3, 0, "-", "losses"], [77, 3, 0, "-", "manipulation"], [78, 3, 0, "-", "norms"], [79, 3, 0, "-", "random"], [80, 3, 0, "-", "searching"], [81, 3, 0, "-", "set"], [82, 3, 0, "-", "sorting"], [83, 3, 0, "-", "statistical"], [84, 3, 0, "-", "utility"], [85, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[64, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "gelu"], [64, 0, 1, "", "hardswish"], [64, 0, 1, "", "leaky_relu"], [64, 0, 1, "", "log_softmax"], [64, 0, 1, "", "mish"], [64, 0, 1, "", "relu"], [64, 0, 1, "", "sigmoid"], [64, 0, 1, "", "softmax"], [64, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[115, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[115, 5, 1, "", "T"], [115, 0, 1, "", "__abs__"], [115, 0, 1, "", "__add__"], [115, 0, 1, "", "__eq__"], [115, 0, 1, "", "__ge__"], [115, 0, 1, "", "__gt__"], [115, 0, 1, "", "__init__"], [115, 0, 1, "", "__le__"], [115, 0, 1, "", "__lt__"], [115, 0, 1, "", "__ne__"], [115, 0, 1, "", "__pow__"], [115, 0, 1, "", "__radd__"], [115, 0, 1, "", "__rrshift__"], [115, 0, 1, "", "__rshift__"], [115, 0, 1, "", "__rsub__"], [115, 0, 1, "", "__sub__"], [115, 0, 1, "", "__truediv__"], [115, 0, 1, "", "__xor__"], [115, 5, 1, "", "backend"], [115, 5, 1, "", "base"], [115, 5, 1, "", "data"], [115, 5, 1, "", "device"], [115, 5, 1, "", "dtype"], [115, 5, 1, "", "dynamic_backend"], [115, 5, 1, "", "imag"], [115, 5, 1, "", "itemsize"], [115, 5, 1, "", "mT"], [115, 5, 1, "", "ndim"], [115, 5, 1, "", "real"], [115, 5, 1, "", "shape"], [115, 5, 1, "", "size"], [115, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[65, 2, 1, "", "_array_to_new_backend"], [65, 2, 1, "", "_data_to_new_backend"], [65, 2, 1, "", "_to_ivy"], [65, 2, 1, "", "_to_native"], [65, 2, 1, "", "_to_new_backend"], [65, 2, 1, "", "args_to_ivy"], [65, 2, 1, "", "args_to_native"], [65, 2, 1, "", "args_to_new_backend"], [65, 2, 1, "", "to_ivy"], [65, 2, 1, "", "to_native"], [65, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[66, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "asarray"], [66, 0, 1, "", "copy_array"], [66, 0, 1, "", "empty_like"], [66, 0, 1, "", "from_dlpack"], [66, 0, 1, "", "full_like"], [66, 0, 1, "", "linspace"], [66, 0, 1, "", "logspace"], [66, 0, 1, "", "meshgrid"], [66, 0, 1, "", "native_array"], [66, 0, 1, "", "one_hot"], [66, 0, 1, "", "ones_like"], [66, 0, 1, "", "tril"], [66, 0, 1, "", "triu"], [66, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[67, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "astype"], [67, 0, 1, "", "broadcast_arrays"], [67, 0, 1, "", "broadcast_to"], [67, 0, 1, "", "can_cast"], [67, 0, 1, "", "dtype"], [67, 0, 1, "", "finfo"], [67, 0, 1, "", "iinfo"], [67, 0, 1, "", "is_bool_dtype"], [67, 0, 1, "", "is_float_dtype"], [67, 0, 1, "", "is_int_dtype"], [67, 0, 1, "", "is_uint_dtype"], [67, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[68, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "dev"], [68, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[69, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "abs"], [69, 0, 1, "", "acos"], [69, 0, 1, "", "acosh"], [69, 0, 1, "", "add"], [69, 0, 1, "", "angle"], [69, 0, 1, "", "asin"], [69, 0, 1, "", "asinh"], [69, 0, 1, "", "atan"], [69, 0, 1, "", "atan2"], [69, 0, 1, "", "atanh"], [69, 0, 1, "", "bitwise_and"], [69, 0, 1, "", "bitwise_invert"], [69, 0, 1, "", "bitwise_left_shift"], [69, 0, 1, "", "bitwise_or"], [69, 0, 1, "", "bitwise_right_shift"], [69, 0, 1, "", "bitwise_xor"], [69, 0, 1, "", "ceil"], [69, 0, 1, "", "cos"], [69, 0, 1, "", "cosh"], [69, 0, 1, "", "deg2rad"], [69, 0, 1, "", "divide"], [69, 0, 1, "", "equal"], [69, 0, 1, "", "erf"], [69, 0, 1, "", "exp"], [69, 0, 1, "", "exp2"], [69, 0, 1, "", "expm1"], [69, 0, 1, "", "floor"], [69, 0, 1, "", "floor_divide"], [69, 0, 1, "", "fmin"], [69, 0, 1, "", "gcd"], [69, 0, 1, "", "greater"], [69, 0, 1, "", "greater_equal"], [69, 0, 1, "", "isfinite"], [69, 0, 1, "", "isinf"], [69, 0, 1, "", "isnan"], [69, 0, 1, "", "isreal"], [69, 0, 1, "", "lcm"], [69, 0, 1, "", "less"], [69, 0, 1, "", "less_equal"], [69, 0, 1, "", "log"], [69, 0, 1, "", "log10"], [69, 0, 1, "", "log1p"], [69, 0, 1, "", "log2"], [69, 0, 1, "", "logaddexp"], [69, 0, 1, "", "logaddexp2"], [69, 0, 1, "", "logical_and"], [69, 0, 1, "", "logical_not"], [69, 0, 1, "", "logical_or"], [69, 0, 1, "", "logical_xor"], [69, 0, 1, "", "maximum"], [69, 0, 1, "", "minimum"], [69, 0, 1, "", "multiply"], [69, 0, 1, "", "nan_to_num"], [69, 0, 1, "", "negative"], [69, 0, 1, "", "not_equal"], [69, 0, 1, "", "positive"], [69, 0, 1, "", "pow"], [69, 0, 1, "", "rad2deg"], [69, 0, 1, "", "real"], [69, 0, 1, "", "reciprocal"], [69, 0, 1, "", "remainder"], [69, 0, 1, "", "round"], [69, 0, 1, "", "sign"], [69, 0, 1, "", "sin"], [69, 0, 1, "", "sinh"], [69, 0, 1, "", "sqrt"], [69, 0, 1, "", "square"], [69, 0, 1, "", "subtract"], [69, 0, 1, "", "tan"], [69, 0, 1, "", "tanh"], [69, 0, 1, "", "trapz"], [69, 0, 1, "", "trunc"], [69, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[70, 3, 0, "-", "activations"], [70, 3, 0, "-", "conversions"], [70, 3, 0, "-", "creation"], [70, 3, 0, "-", "data_type"], [70, 3, 0, "-", "device"], [70, 3, 0, "-", "elementwise"], [70, 3, 0, "-", "general"], [70, 3, 0, "-", "gradients"], [70, 3, 0, "-", "image"], [70, 3, 0, "-", "layers"], [70, 3, 0, "-", "linear_algebra"], [70, 3, 0, "-", "losses"], [70, 3, 0, "-", "manipulation"], [70, 3, 0, "-", "norms"], [70, 3, 0, "-", "random"], [70, 3, 0, "-", "searching"], [70, 3, 0, "-", "set"], [70, 3, 0, "-", "sorting"], [70, 3, 0, "-", "statistical"], [70, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[70, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "celu"], [70, 0, 1, "", "elu"], [70, 0, 1, "", "hardshrink"], [70, 0, 1, "", "hardsilu"], [70, 0, 1, "", "hardtanh"], [70, 0, 1, "", "logit"], [70, 0, 1, "", "logsigmoid"], [70, 0, 1, "", "prelu"], [70, 0, 1, "", "relu6"], [70, 0, 1, "", "scaled_tanh"], [70, 0, 1, "", "selu"], [70, 0, 1, "", "silu"], [70, 0, 1, "", "softshrink"], [70, 0, 1, "", "tanhshrink"], [70, 0, 1, "", "threshold"], [70, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[70, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[70, 1, 1, "", "_ArrayWithCreationExperimental"], [70, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "blackman_window"], [70, 0, 1, "", "eye_like"], [70, 0, 1, "", "mel_weight_matrix"], [70, 0, 1, "", "trilu"], [70, 0, 1, "", "unsorted_segment_mean"], [70, 0, 1, "", "unsorted_segment_min"], [70, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[70, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[70, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[70, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "allclose"], [70, 0, 1, "", "amax"], [70, 0, 1, "", "amin"], [70, 0, 1, "", "binarizer"], [70, 0, 1, "", "conj"], [70, 0, 1, "", "copysign"], [70, 0, 1, "", "count_nonzero"], [70, 0, 1, "", "diff"], [70, 0, 1, "", "digamma"], [70, 0, 1, "", "erfc"], [70, 0, 1, "", "erfinv"], [70, 0, 1, "", "fix"], [70, 0, 1, "", "float_power"], [70, 0, 1, "", "fmax"], [70, 0, 1, "", "fmod"], [70, 0, 1, "", "frexp"], [70, 0, 1, "", "gradient"], [70, 0, 1, "", "hypot"], [70, 0, 1, "", "isclose"], [70, 0, 1, "", "ldexp"], [70, 0, 1, "", "lerp"], [70, 0, 1, "", "lgamma"], [70, 0, 1, "", "modf"], [70, 0, 1, "", "nansum"], [70, 0, 1, "", "nextafter"], [70, 0, 1, "", "signbit"], [70, 0, 1, "", "sinc"], [70, 0, 1, "", "sparsify_tensor"], [70, 0, 1, "", "xlogy"], [70, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[70, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[70, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[70, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[70, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "adaptive_avg_pool1d"], [70, 0, 1, "", "adaptive_avg_pool2d"], [70, 0, 1, "", "adaptive_max_pool2d"], [70, 0, 1, "", "adaptive_max_pool3d"], [70, 0, 1, "", "avg_pool1d"], [70, 0, 1, "", "avg_pool2d"], [70, 0, 1, "", "avg_pool3d"], [70, 0, 1, "", "dct"], [70, 0, 1, "", "dft"], [70, 0, 1, "", "embedding"], [70, 0, 1, "", "fft"], [70, 0, 1, "", "fft2"], [70, 0, 1, "", "idct"], [70, 0, 1, "", "ifft"], [70, 0, 1, "", "ifftn"], [70, 0, 1, "", "interpolate"], [70, 0, 1, "", "max_pool1d"], [70, 0, 1, "", "max_pool2d"], [70, 0, 1, "", "max_pool3d"], [70, 0, 1, "", "max_unpool1d"], [70, 0, 1, "", "reduce_window"], [70, 0, 1, "", "rfft"], [70, 0, 1, "", "rfftn"], [70, 0, 1, "", "sliding_window"], [70, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[70, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "adjoint"], [70, 0, 1, "", "batched_outer"], [70, 0, 1, "", "cond"], [70, 0, 1, "", "diagflat"], [70, 0, 1, "", "dot"], [70, 0, 1, "", "eig"], [70, 0, 1, "", "eigh_tridiagonal"], [70, 0, 1, "", "eigvals"], [70, 0, 1, "", "general_inner_product"], [70, 0, 1, "", "higher_order_moment"], [70, 0, 1, "", "initialize_tucker"], [70, 0, 1, "", "kron"], [70, 0, 1, "", "make_svd_non_negative"], [70, 0, 1, "", "matrix_exp"], [70, 0, 1, "", "mode_dot"], [70, 0, 1, "", "multi_dot"], [70, 0, 1, "", "multi_mode_dot"], [70, 0, 1, "", "partial_tucker"], [70, 0, 1, "", "svd_flip"], [70, 0, 1, "", "tensor_train"], [70, 0, 1, "", "truncated_svd"], [70, 0, 1, "", "tt_matrix_to_tensor"], [70, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[70, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "hinge_embedding_loss"], [70, 0, 1, "", "huber_loss"], [70, 0, 1, "", "kl_div"], [70, 0, 1, "", "l1_loss"], [70, 0, 1, "", "log_poisson_loss"], [70, 0, 1, "", "poisson_nll_loss"], [70, 0, 1, "", "smooth_l1_loss"], [70, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[70, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "as_strided"], [70, 0, 1, "", "associative_scan"], [70, 0, 1, "", "atleast_1d"], [70, 0, 1, "", "atleast_2d"], [70, 0, 1, "", "atleast_3d"], [70, 0, 1, "", "column_stack"], [70, 0, 1, "", "concat_from_sequence"], [70, 0, 1, "", "dsplit"], [70, 0, 1, "", "dstack"], [70, 0, 1, "", "expand"], [70, 0, 1, "", "fill_diagonal"], [70, 0, 1, "", "flatten"], [70, 0, 1, "", "fliplr"], [70, 0, 1, "", "flipud"], [70, 0, 1, "", "fold"], [70, 0, 1, "", "heaviside"], [70, 0, 1, "", "hsplit"], [70, 0, 1, "", "hstack"], [70, 0, 1, "", "i0"], [70, 0, 1, "", "matricize"], [70, 0, 1, "", "moveaxis"], [70, 0, 1, "", "pad"], [70, 0, 1, "", "partial_fold"], [70, 0, 1, "", "partial_tensor_to_vec"], [70, 0, 1, "", "partial_unfold"], [70, 0, 1, "", "partial_vec_to_tensor"], [70, 0, 1, "", "put_along_axis"], [70, 0, 1, "", "rot90"], [70, 0, 1, "", "soft_thresholding"], [70, 0, 1, "", "take"], [70, 0, 1, "", "take_along_axis"], [70, 0, 1, "", "top_k"], [70, 0, 1, "", "trim_zeros"], [70, 0, 1, "", "unflatten"], [70, 0, 1, "", "unfold"], [70, 0, 1, "", "unique_consecutive"], [70, 0, 1, "", "vsplit"], [70, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[70, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "batch_norm"], [70, 0, 1, "", "group_norm"], [70, 0, 1, "", "instance_norm"], [70, 0, 1, "", "l1_normalize"], [70, 0, 1, "", "l2_normalize"], [70, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[70, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "bernoulli"], [70, 0, 1, "", "beta"], [70, 0, 1, "", "dirichlet"], [70, 0, 1, "", "gamma"], [70, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[70, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[70, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[70, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[70, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "bincount"], [70, 0, 1, "", "corrcoef"], [70, 0, 1, "", "cov"], [70, 0, 1, "", "cummax"], [70, 0, 1, "", "cummin"], [70, 0, 1, "", "histogram"], [70, 0, 1, "", "igamma"], [70, 0, 1, "", "median"], [70, 0, 1, "", "nanmean"], [70, 0, 1, "", "nanmedian"], [70, 0, 1, "", "nanmin"], [70, 0, 1, "", "nanprod"], [70, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[70, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[71, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "all_equal"], [71, 0, 1, "", "array_equal"], [71, 0, 1, "", "assert_supports_inplace"], [71, 0, 1, "", "clip_matrix_norm"], [71, 0, 1, "", "clip_vector_norm"], [71, 0, 1, "", "default"], [71, 0, 1, "", "einops_rearrange"], [71, 0, 1, "", "einops_reduce"], [71, 0, 1, "", "einops_repeat"], [71, 0, 1, "", "exists"], [71, 0, 1, "", "fourier_encode"], [71, 0, 1, "", "gather"], [71, 0, 1, "", "gather_nd"], [71, 0, 1, "", "get_num_dims"], [71, 0, 1, "", "has_nans"], [71, 0, 1, "", "inplace_decrement"], [71, 0, 1, "", "inplace_increment"], [71, 0, 1, "", "inplace_update"], [71, 0, 1, "", "is_array"], [71, 0, 1, "", "is_ivy_array"], [71, 0, 1, "", "is_ivy_container"], [71, 0, 1, "", "is_native_array"], [71, 0, 1, "", "isin"], [71, 0, 1, "", "scatter_flat"], [71, 0, 1, "", "scatter_nd"], [71, 0, 1, "", "stable_divide"], [71, 0, 1, "", "stable_pow"], [71, 0, 1, "", "supports_inplace_updates"], [71, 0, 1, "", "to_file"], [71, 0, 1, "", "to_list"], [71, 0, 1, "", "to_numpy"], [71, 0, 1, "", "to_scalar"], [71, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[72, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "adam_step"], [72, 0, 1, "", "adam_update"], [72, 0, 1, "", "gradient_descent_update"], [72, 0, 1, "", "lamb_update"], [72, 0, 1, "", "lars_update"], [72, 0, 1, "", "optimizer_update"], [72, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[73, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[74, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "conv1d"], [74, 0, 1, "", "conv1d_transpose"], [74, 0, 1, "", "conv2d"], [74, 0, 1, "", "conv2d_transpose"], [74, 0, 1, "", "conv3d"], [74, 0, 1, "", "conv3d_transpose"], [74, 0, 1, "", "depthwise_conv2d"], [74, 0, 1, "", "dropout"], [74, 0, 1, "", "dropout1d"], [74, 0, 1, "", "dropout2d"], [74, 0, 1, "", "dropout3d"], [74, 0, 1, "", "linear"], [74, 0, 1, "", "lstm_update"], [74, 0, 1, "", "multi_head_attention"], [74, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[75, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "cholesky"], [75, 0, 1, "", "cross"], [75, 0, 1, "", "det"], [75, 0, 1, "", "diag"], [75, 0, 1, "", "diagonal"], [75, 0, 1, "", "eig"], [75, 0, 1, "", "eigh"], [75, 0, 1, "", "eigvalsh"], [75, 0, 1, "", "inner"], [75, 0, 1, "", "inv"], [75, 0, 1, "", "matmul"], [75, 0, 1, "", "matrix_norm"], [75, 0, 1, "", "matrix_power"], [75, 0, 1, "", "matrix_rank"], [75, 0, 1, "", "matrix_transpose"], [75, 0, 1, "", "outer"], [75, 0, 1, "", "pinv"], [75, 0, 1, "", "qr"], [75, 0, 1, "", "slogdet"], [75, 0, 1, "", "solve"], [75, 0, 1, "", "svd"], [75, 0, 1, "", "svdvals"], [75, 0, 1, "", "tensordot"], [75, 0, 1, "", "tensorsolve"], [75, 0, 1, "", "trace"], [75, 0, 1, "", "vander"], [75, 0, 1, "", "vecdot"], [75, 0, 1, "", "vector_norm"], [75, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[76, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "binary_cross_entropy"], [76, 0, 1, "", "cross_entropy"], [76, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[77, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "clip"], [77, 0, 1, "", "concat"], [77, 0, 1, "", "constant_pad"], [77, 0, 1, "", "expand_dims"], [77, 0, 1, "", "flip"], [77, 0, 1, "", "permute_dims"], [77, 0, 1, "", "repeat"], [77, 0, 1, "", "reshape"], [77, 0, 1, "", "roll"], [77, 0, 1, "", "split"], [77, 0, 1, "", "squeeze"], [77, 0, 1, "", "stack"], [77, 0, 1, "", "swapaxes"], [77, 0, 1, "", "tile"], [77, 0, 1, "", "unstack"], [77, 0, 1, "", "view"], [77, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[78, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[79, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "multinomial"], [79, 0, 1, "", "randint"], [79, 0, 1, "", "random_normal"], [79, 0, 1, "", "random_uniform"], [79, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[80, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "argmax"], [80, 0, 1, "", "argmin"], [80, 0, 1, "", "argwhere"], [80, 0, 1, "", "nonzero"], [80, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[81, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "unique_all"], [81, 0, 1, "", "unique_counts"], [81, 0, 1, "", "unique_inverse"], [81, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[82, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "argsort"], [82, 0, 1, "", "msort"], [82, 0, 1, "", "searchsorted"], [82, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[83, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "cumprod"], [83, 0, 1, "", "cumsum"], [83, 0, 1, "", "einsum"], [83, 0, 1, "", "max"], [83, 0, 1, "", "mean"], [83, 0, 1, "", "min"], [83, 0, 1, "", "prod"], [83, 0, 1, "", "std"], [83, 0, 1, "", "sum"], [83, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[84, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "all"], [84, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[85, 2, 1, "", "_wrap_function"], [85, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[86, 3, 0, "-", "activations"], [87, 3, 0, "-", "base"], [116, 3, 0, "-", "container"], [88, 3, 0, "-", "conversions"], [89, 3, 0, "-", "creation"], [90, 3, 0, "-", "data_type"], [91, 3, 0, "-", "device"], [92, 3, 0, "-", "elementwise"], [93, 3, 0, "-", "experimental"], [94, 3, 0, "-", "general"], [95, 3, 0, "-", "gradients"], [96, 3, 0, "-", "image"], [97, 3, 0, "-", "layers"], [98, 3, 0, "-", "linear_algebra"], [99, 3, 0, "-", "losses"], [100, 3, 0, "-", "manipulation"], [101, 3, 0, "-", "norms"], [102, 3, 0, "-", "random"], [103, 3, 0, "-", "searching"], [104, 3, 0, "-", "set"], [105, 3, 0, "-", "sorting"], [106, 3, 0, "-", "statistical"], [107, 3, 0, "-", "utility"], [108, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[86, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_gelu"], [86, 0, 1, "", "_static_hardswish"], [86, 0, 1, "", "_static_leaky_relu"], [86, 0, 1, "", "_static_log_softmax"], [86, 0, 1, "", "_static_mish"], [86, 0, 1, "", "_static_relu"], [86, 0, 1, "", "_static_sigmoid"], [86, 0, 1, "", "_static_softmax"], [86, 0, 1, "", "_static_softplus"], [86, 0, 1, "", "gelu"], [86, 0, 1, "", "hardswish"], [86, 0, 1, "", "leaky_relu"], [86, 0, 1, "", "log_softmax"], [86, 0, 1, "", "mish"], [86, 0, 1, "", "relu"], [86, 0, 1, "", "sigmoid"], [86, 0, 1, "", "softmax"], [86, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[87, 1, 1, "", "ContainerBase"], [87, 2, 1, "", "_is_jsonable"], [87, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[87, 0, 1, "", "__getitem__"], [87, 0, 1, "", "__init__"], [87, 0, 1, "", "__setitem__"], [87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [87, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [87, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [87, 0, 1, "", "_cont_concat_unify"], [87, 0, 1, "", "_cont_get_dev"], [87, 0, 1, "", "_cont_get_dtype"], [87, 0, 1, "", "_cont_get_shape"], [87, 0, 1, "", "_cont_get_shapes"], [87, 5, 1, "", "_cont_ivy"], [87, 0, 1, "", "_cont_mean_unify"], [87, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [87, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [87, 0, 1, "", "_cont_slice_keys"], [87, 0, 1, "", "_cont_sum_unify"], [87, 0, 1, "", "_get_queue_item"], [87, 0, 1, "", "cont_all_false"], [87, 0, 1, "", "cont_all_key_chains"], [87, 0, 1, "", "cont_all_true"], [87, 0, 1, "", "cont_as_bools"], [87, 0, 1, "", "cont_assert_contains_sub_container"], [87, 0, 1, "", "cont_assert_contains_sub_structure"], [87, 0, 1, "", "cont_assert_identical"], [87, 0, 1, "", "cont_assert_identical_structure"], [87, 0, 1, "", "cont_at_key_chain"], [87, 0, 1, "", "cont_at_key_chains"], [87, 0, 1, "", "cont_at_keys"], [87, 0, 1, "", "cont_combine"], [87, 0, 1, "", "cont_common_key_chains"], [87, 5, 1, "", "cont_config"], [87, 0, 1, "", "cont_contains_sub_container"], [87, 0, 1, "", "cont_contains_sub_structure"], [87, 0, 1, "", "cont_copy"], [87, 0, 1, "", "cont_create_if_absent"], [87, 0, 1, "", "cont_cutoff_at_depth"], [87, 0, 1, "", "cont_cutoff_at_height"], [87, 0, 1, "", "cont_deep_copy"], [87, 5, 1, "", "cont_dev"], [87, 5, 1, "", "cont_dev_str"], [87, 0, 1, "", "cont_diff"], [87, 5, 1, "", "cont_dtype"], [87, 0, 1, "", "cont_duplicate_array_keychains"], [87, 0, 1, "", "cont_find_sub_container"], [87, 0, 1, "", "cont_find_sub_structure"], [87, 0, 1, "", "cont_flatten_key_chain"], [87, 0, 1, "", "cont_flatten_key_chains"], [87, 0, 1, "", "cont_format_key_chains"], [87, 0, 1, "", "cont_from_disk_as_hdf5"], [87, 0, 1, "", "cont_from_disk_as_json"], [87, 0, 1, "", "cont_from_disk_as_pickled"], [87, 0, 1, "", "cont_from_flat_list"], [87, 0, 1, "", "cont_handle_inplace"], [87, 0, 1, "", "cont_has_key"], [87, 0, 1, "", "cont_has_key_chain"], [87, 0, 1, "", "cont_identical"], [87, 0, 1, "", "cont_identical_array_shapes"], [87, 0, 1, "", "cont_identical_configs"], [87, 0, 1, "", "cont_identical_structure"], [87, 0, 1, "", "cont_if_exists"], [87, 0, 1, "", "cont_inplace_update"], [87, 5, 1, "", "cont_ivy"], [87, 0, 1, "", "cont_key_chains_containing"], [87, 0, 1, "", "cont_list_join"], [87, 0, 1, "", "cont_list_stack"], [87, 0, 1, "", "cont_load"], [87, 0, 1, "", "cont_map"], [87, 0, 1, "", "cont_map_sub_conts"], [87, 5, 1, "", "cont_max_depth"], [87, 0, 1, "", "cont_multi_map"], [87, 0, 1, "", "cont_multi_map_in_function"], [87, 0, 1, "", "cont_num_arrays"], [87, 0, 1, "", "cont_overwrite_at_key_chain"], [87, 0, 1, "", "cont_overwrite_at_key_chains"], [87, 0, 1, "", "cont_prune_empty"], [87, 0, 1, "", "cont_prune_key_chain"], [87, 0, 1, "", "cont_prune_key_chains"], [87, 0, 1, "", "cont_prune_key_from_key_chains"], [87, 0, 1, "", "cont_prune_keys"], [87, 0, 1, "", "cont_prune_keys_from_key_chains"], [87, 0, 1, "", "cont_reduce"], [87, 0, 1, "", "cont_remove_key_length_limit"], [87, 0, 1, "", "cont_remove_print_limit"], [87, 0, 1, "", "cont_reshape_like"], [87, 0, 1, "", "cont_restructure"], [87, 0, 1, "", "cont_restructure_key_chains"], [87, 0, 1, "", "cont_save"], [87, 0, 1, "", "cont_set_at_key_chain"], [87, 0, 1, "", "cont_set_at_key_chains"], [87, 0, 1, "", "cont_set_at_keys"], [87, 5, 1, "", "cont_shape"], [87, 5, 1, "", "cont_shapes"], [87, 0, 1, "", "cont_show"], [87, 0, 1, "", "cont_show_sub_container"], [87, 0, 1, "", "cont_size_ordered_arrays"], [87, 0, 1, "", "cont_slice_keys"], [87, 0, 1, "", "cont_slice_via_key"], [87, 0, 1, "", "cont_sort_by_key"], [87, 0, 1, "", "cont_structural_diff"], [87, 0, 1, "", "cont_to_dict"], [87, 0, 1, "", "cont_to_disk_as_hdf5"], [87, 0, 1, "", "cont_to_disk_as_json"], [87, 0, 1, "", "cont_to_disk_as_pickled"], [87, 0, 1, "", "cont_to_flat_list"], [87, 0, 1, "", "cont_to_iterator"], [87, 0, 1, "", "cont_to_iterator_keys"], [87, 0, 1, "", "cont_to_iterator_values"], [87, 0, 1, "", "cont_to_jsonable"], [87, 0, 1, "", "cont_to_nested_list"], [87, 0, 1, "", "cont_to_raw"], [87, 0, 1, "", "cont_trim_key"], [87, 0, 1, "", "cont_try_kc"], [87, 0, 1, "", "cont_unify"], [87, 0, 1, "", "cont_unstack_conts"], [87, 0, 1, "", "cont_update_config"], [87, 0, 1, "", "cont_with_default_key_color"], [87, 0, 1, "", "cont_with_entries_as_lists"], [87, 0, 1, "", "cont_with_ivy_backend"], [87, 0, 1, "", "cont_with_key_length_limit"], [87, 0, 1, "", "cont_with_print_indent"], [87, 0, 1, "", "cont_with_print_limit"], [87, 0, 1, "", "cont_with_print_line_spacing"], [87, 5, 1, "", "dynamic_backend"], [87, 0, 1, "", "h5_file_size"], [87, 0, 1, "", "shuffle_h5_file"], [87, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[116, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[116, 0, 1, "", "__abs__"], [116, 0, 1, "", "__add__"], [116, 0, 1, "", "__eq__"], [116, 0, 1, "", "__ge__"], [116, 0, 1, "", "__gt__"], [116, 0, 1, "", "__init__"], [116, 0, 1, "", "__le__"], [116, 0, 1, "", "__lt__"], [116, 0, 1, "", "__ne__"], [116, 0, 1, "", "__pow__"], [116, 0, 1, "", "__radd__"], [116, 0, 1, "", "__rrshift__"], [116, 0, 1, "", "__rshift__"], [116, 0, 1, "", "__rsub__"], [116, 0, 1, "", "__sub__"], [116, 0, 1, "", "__truediv__"], [116, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[88, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_to_ivy"], [88, 0, 1, "", "_static_to_native"], [88, 0, 1, "", "to_ivy"], [88, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[89, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_arange"], [89, 0, 1, "", "_static_asarray"], [89, 0, 1, "", "_static_copy_array"], [89, 0, 1, "", "_static_empty"], [89, 0, 1, "", "_static_empty_like"], [89, 0, 1, "", "_static_eye"], [89, 0, 1, "", "_static_from_dlpack"], [89, 0, 1, "", "_static_full"], [89, 0, 1, "", "_static_full_like"], [89, 0, 1, "", "_static_linspace"], [89, 0, 1, "", "_static_logspace"], [89, 0, 1, "", "_static_meshgrid"], [89, 0, 1, "", "_static_native_array"], [89, 0, 1, "", "_static_one_hot"], [89, 0, 1, "", "_static_ones"], [89, 0, 1, "", "_static_ones_like"], [89, 0, 1, "", "_static_tril"], [89, 0, 1, "", "_static_triu"], [89, 0, 1, "", "_static_zeros"], [89, 0, 1, "", "_static_zeros_like"], [89, 0, 1, "", "asarray"], [89, 0, 1, "", "copy_array"], [89, 0, 1, "", "empty_like"], [89, 0, 1, "", "from_dlpack"], [89, 0, 1, "", "frombuffer"], [89, 0, 1, "", "full_like"], [89, 0, 1, "", "linspace"], [89, 0, 1, "", "logspace"], [89, 0, 1, "", "meshgrid"], [89, 0, 1, "", "native_array"], [89, 0, 1, "", "one_hot"], [89, 0, 1, "", "ones_like"], [89, 0, 1, "", "static_frombuffer"], [89, 0, 1, "", "static_triu_indices"], [89, 0, 1, "", "tril"], [89, 0, 1, "", "triu"], [89, 0, 1, "", "triu_indices"], [89, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[90, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_astype"], [90, 0, 1, "", "_static_broadcast_arrays"], [90, 0, 1, "", "_static_broadcast_to"], [90, 0, 1, "", "_static_can_cast"], [90, 0, 1, "", "_static_default_complex_dtype"], [90, 0, 1, "", "_static_default_float_dtype"], [90, 0, 1, "", "_static_dtype"], [90, 0, 1, "", "_static_finfo"], [90, 0, 1, "", "_static_function_supported_dtypes"], [90, 0, 1, "", "_static_function_unsupported_dtypes"], [90, 0, 1, "", "_static_iinfo"], [90, 0, 1, "", "_static_is_bool_dtype"], [90, 0, 1, "", "_static_is_complex_dtype"], [90, 0, 1, "", "_static_is_float_dtype"], [90, 0, 1, "", "_static_is_int_dtype"], [90, 0, 1, "", "_static_is_uint_dtype"], [90, 0, 1, "", "_static_result_type"], [90, 0, 1, "", "astype"], [90, 0, 1, "", "broadcast_arrays"], [90, 0, 1, "", "broadcast_to"], [90, 0, 1, "", "can_cast"], [90, 0, 1, "", "dtype"], [90, 0, 1, "", "finfo"], [90, 0, 1, "", "iinfo"], [90, 0, 1, "", "is_bool_dtype"], [90, 0, 1, "", "is_complex_dtype"], [90, 0, 1, "", "is_float_dtype"], [90, 0, 1, "", "is_int_dtype"], [90, 0, 1, "", "is_uint_dtype"], [90, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[91, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_dev"], [91, 0, 1, "", "_static_to_device"], [91, 0, 1, "", "dev"], [91, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[92, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_abs"], [92, 0, 1, "", "_static_acos"], [92, 0, 1, "", "_static_acosh"], [92, 0, 1, "", "_static_add"], [92, 0, 1, "", "_static_asin"], [92, 0, 1, "", "_static_asinh"], [92, 0, 1, "", "_static_atan"], [92, 0, 1, "", "_static_atan2"], [92, 0, 1, "", "_static_atanh"], [92, 0, 1, "", "_static_bitwise_and"], [92, 0, 1, "", "_static_bitwise_invert"], [92, 0, 1, "", "_static_bitwise_left_shift"], [92, 0, 1, "", "_static_bitwise_or"], [92, 0, 1, "", "_static_bitwise_right_shift"], [92, 0, 1, "", "_static_bitwise_xor"], [92, 0, 1, "", "_static_ceil"], [92, 0, 1, "", "_static_cos"], [92, 0, 1, "", "_static_cosh"], [92, 0, 1, "", "_static_deg2rad"], [92, 0, 1, "", "_static_divide"], [92, 0, 1, "", "_static_equal"], [92, 0, 1, "", "_static_erf"], [92, 0, 1, "", "_static_exp"], [92, 0, 1, "", "_static_expm1"], [92, 0, 1, "", "_static_floor"], [92, 0, 1, "", "_static_floor_divide"], [92, 0, 1, "", "_static_greater"], [92, 0, 1, "", "_static_greater_equal"], [92, 0, 1, "", "_static_isfinite"], [92, 0, 1, "", "_static_isinf"], [92, 0, 1, "", "_static_isnan"], [92, 0, 1, "", "_static_isreal"], [92, 0, 1, "", "_static_lcm"], [92, 0, 1, "", "_static_less"], [92, 0, 1, "", "_static_less_equal"], [92, 0, 1, "", "_static_log"], [92, 0, 1, "", "_static_log10"], [92, 0, 1, "", "_static_log1p"], [92, 0, 1, "", "_static_log2"], [92, 0, 1, "", "_static_logaddexp"], [92, 0, 1, "", "_static_logical_and"], [92, 0, 1, "", "_static_logical_not"], [92, 0, 1, "", "_static_logical_or"], [92, 0, 1, "", "_static_logical_xor"], [92, 0, 1, "", "_static_maximum"], [92, 0, 1, "", "_static_minimum"], [92, 0, 1, "", "_static_multiply"], [92, 0, 1, "", "_static_negative"], [92, 0, 1, "", "_static_not_equal"], [92, 0, 1, "", "_static_positive"], [92, 0, 1, "", "_static_pow"], [92, 0, 1, "", "_static_rad2deg"], [92, 0, 1, "", "_static_reciprocal"], [92, 0, 1, "", "_static_remainder"], [92, 0, 1, "", "_static_round"], [92, 0, 1, "", "_static_sign"], [92, 0, 1, "", "_static_sin"], [92, 0, 1, "", "_static_sinh"], [92, 0, 1, "", "_static_sqrt"], [92, 0, 1, "", "_static_square"], [92, 0, 1, "", "_static_subtract"], [92, 0, 1, "", "_static_tan"], [92, 0, 1, "", "_static_tanh"], [92, 0, 1, "", "_static_trapz"], [92, 0, 1, "", "_static_trunc"], [92, 0, 1, "", "_static_trunc_divide"], [92, 0, 1, "", "abs"], [92, 0, 1, "", "acos"], [92, 0, 1, "", "acosh"], [92, 0, 1, "", "add"], [92, 0, 1, "", "angle"], [92, 0, 1, "", "asin"], [92, 0, 1, "", "asinh"], [92, 0, 1, "", "atan"], [92, 0, 1, "", "atan2"], [92, 0, 1, "", "atanh"], [92, 0, 1, "", "bitwise_and"], [92, 0, 1, "", "bitwise_invert"], [92, 0, 1, "", "bitwise_left_shift"], [92, 0, 1, "", "bitwise_or"], [92, 0, 1, "", "bitwise_right_shift"], [92, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "ceil"], [92, 0, 1, "", "cos"], [92, 0, 1, "", "cosh"], [92, 0, 1, "", "deg2rad"], [92, 0, 1, "", "divide"], [92, 0, 1, "", "equal"], [92, 0, 1, "", "erf"], [92, 0, 1, "", "exp"], [92, 0, 1, "", "exp2"], [92, 0, 1, "", "expm1"], [92, 0, 1, "", "floor"], [92, 0, 1, "", "floor_divide"], [92, 0, 1, "", "fmin"], [92, 0, 1, "", "gcd"], [92, 0, 1, "", "greater"], [92, 0, 1, "", "greater_equal"], [92, 0, 1, "", "imag"], [92, 0, 1, "", "isfinite"], [92, 0, 1, "", "isinf"], [92, 0, 1, "", "isnan"], [92, 0, 1, "", "isreal"], [92, 0, 1, "", "lcm"], [92, 0, 1, "", "less"], [92, 0, 1, "", "less_equal"], [92, 0, 1, "", "log"], [92, 0, 1, "", "log10"], [92, 0, 1, "", "log1p"], [92, 0, 1, "", "log2"], [92, 0, 1, "", "logaddexp"], [92, 0, 1, "", "logaddexp2"], [92, 0, 1, "", "logical_and"], [92, 0, 1, "", "logical_not"], [92, 0, 1, "", "logical_or"], [92, 0, 1, "", "logical_xor"], [92, 0, 1, "", "maximum"], [92, 0, 1, "", "minimum"], [92, 0, 1, "", "multiply"], [92, 0, 1, "", "nan_to_num"], [92, 0, 1, "", "negative"], [92, 0, 1, "", "not_equal"], [92, 0, 1, "", "positive"], [92, 0, 1, "", "pow"], [92, 0, 1, "", "rad2deg"], [92, 0, 1, "", "real"], [92, 0, 1, "", "reciprocal"], [92, 0, 1, "", "remainder"], [92, 0, 1, "", "round"], [92, 0, 1, "", "sign"], [92, 0, 1, "", "sin"], [92, 0, 1, "", "sinh"], [92, 0, 1, "", "sqrt"], [92, 0, 1, "", "square"], [92, 0, 1, "", "static_angle"], [92, 0, 1, "", "static_exp2"], [92, 0, 1, "", "static_fmin"], [92, 0, 1, "", "static_gcd"], [92, 0, 1, "", "static_imag"], [92, 0, 1, "", "static_logaddexp2"], [92, 0, 1, "", "static_nan_to_num"], [92, 0, 1, "", "static_real"], [92, 0, 1, "", "subtract"], [92, 0, 1, "", "tan"], [92, 0, 1, "", "tanh"], [92, 0, 1, "", "trapz"], [92, 0, 1, "", "trunc"], [92, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[93, 3, 0, "-", "activations"], [93, 3, 0, "-", "conversions"], [93, 3, 0, "-", "creation"], [93, 3, 0, "-", "data_type"], [93, 3, 0, "-", "device"], [93, 3, 0, "-", "elementwise"], [93, 3, 0, "-", "general"], [93, 3, 0, "-", "gradients"], [93, 3, 0, "-", "image"], [93, 3, 0, "-", "layers"], [93, 3, 0, "-", "linear_algebra"], [93, 3, 0, "-", "losses"], [93, 3, 0, "-", "manipulation"], [93, 3, 0, "-", "norms"], [93, 3, 0, "-", "random"], [93, 3, 0, "-", "searching"], [93, 3, 0, "-", "set"], [93, 3, 0, "-", "sorting"], [93, 3, 0, "-", "statistical"], [93, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[93, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_celu"], [93, 0, 1, "", "_static_elu"], [93, 0, 1, "", "_static_hardshrink"], [93, 0, 1, "", "_static_hardsilu"], [93, 0, 1, "", "_static_hardtanh"], [93, 0, 1, "", "_static_scaled_tanh"], [93, 0, 1, "", "_static_silu"], [93, 0, 1, "", "_static_softshrink"], [93, 0, 1, "", "_static_tanhshrink"], [93, 0, 1, "", "_static_threshold"], [93, 0, 1, "", "celu"], [93, 0, 1, "", "elu"], [93, 0, 1, "", "hardshrink"], [93, 0, 1, "", "hardsilu"], [93, 0, 1, "", "hardtanh"], [93, 0, 1, "", "logit"], [93, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "prelu"], [93, 0, 1, "", "relu6"], [93, 0, 1, "", "scaled_tanh"], [93, 0, 1, "", "selu"], [93, 0, 1, "", "silu"], [93, 0, 1, "", "softshrink"], [93, 0, 1, "", "static_logit"], [93, 0, 1, "", "static_logsigmoid"], [93, 0, 1, "", "static_prelu"], [93, 0, 1, "", "static_relu6"], [93, 0, 1, "", "static_selu"], [93, 0, 1, "", "static_thresholded_relu"], [93, 0, 1, "", "tanhshrink"], [93, 0, 1, "", "threshold"], [93, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[93, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[93, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_trilu"], [93, 0, 1, "", "blackman_window"], [93, 0, 1, "", "eye_like"], [93, 0, 1, "", "hamming_window"], [93, 0, 1, "", "hann_window"], [93, 0, 1, "", "kaiser_bessel_derived_window"], [93, 0, 1, "", "kaiser_window"], [93, 0, 1, "", "mel_weight_matrix"], [93, 0, 1, "", "polyval"], [93, 0, 1, "", "static_blackman_window"], [93, 0, 1, "", "static_eye_like"], [93, 0, 1, "", "static_hamming_window"], [93, 0, 1, "", "static_hann_window"], [93, 0, 1, "", "static_kaiser_bessel_derived_window"], [93, 0, 1, "", "static_kaiser_window"], [93, 0, 1, "", "static_mel_weight_matrix"], [93, 0, 1, "", "static_polyval"], [93, 0, 1, "", "static_tril_indices"], [93, 0, 1, "", "static_unsorted_segment_mean"], [93, 0, 1, "", "static_unsorted_segment_min"], [93, 0, 1, "", "static_unsorted_segment_sum"], [93, 0, 1, "", "static_vorbis_window"], [93, 0, 1, "", "tril_indices"], [93, 0, 1, "", "trilu"], [93, 0, 1, "", "unsorted_segment_mean"], [93, 0, 1, "", "unsorted_segment_min"], [93, 0, 1, "", "unsorted_segment_sum"], [93, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[93, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[93, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[93, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "allclose"], [93, 0, 1, "", "amax"], [93, 0, 1, "", "amin"], [93, 0, 1, "", "binarizer"], [93, 0, 1, "", "conj"], [93, 0, 1, "", "copysign"], [93, 0, 1, "", "count_nonzero"], [93, 0, 1, "", "diff"], [93, 0, 1, "", "digamma"], [93, 0, 1, "", "erfc"], [93, 0, 1, "", "erfinv"], [93, 0, 1, "", "fix"], [93, 0, 1, "", "float_power"], [93, 0, 1, "", "fmax"], [93, 0, 1, "", "fmod"], [93, 0, 1, "", "frexp"], [93, 0, 1, "", "gradient"], [93, 0, 1, "", "hypot"], [93, 0, 1, "", "isclose"], [93, 0, 1, "", "ldexp"], [93, 0, 1, "", "lerp"], [93, 0, 1, "", "modf"], [93, 0, 1, "", "nansum"], [93, 0, 1, "", "nextafter"], [93, 0, 1, "", "signbit"], [93, 0, 1, "", "sinc"], [93, 0, 1, "", "sparsify_tensor"], [93, 0, 1, "", "static_allclose"], [93, 0, 1, "", "static_amax"], [93, 0, 1, "", "static_amin"], [93, 0, 1, "", "static_binarizer"], [93, 0, 1, "", "static_conj"], [93, 0, 1, "", "static_copysign"], [93, 0, 1, "", "static_count_nonzero"], [93, 0, 1, "", "static_diff"], [93, 0, 1, "", "static_digamma"], [93, 0, 1, "", "static_erfc"], [93, 0, 1, "", "static_erfinv"], [93, 0, 1, "", "static_fix"], [93, 0, 1, "", "static_float_power"], [93, 0, 1, "", "static_fmax"], [93, 0, 1, "", "static_fmod"], [93, 0, 1, "", "static_frexp"], [93, 0, 1, "", "static_gradient"], [93, 0, 1, "", "static_hypot"], [93, 0, 1, "", "static_isclose"], [93, 0, 1, "", "static_ldexp"], [93, 0, 1, "", "static_lerp"], [93, 0, 1, "", "static_modf"], [93, 0, 1, "", "static_nansum"], [93, 0, 1, "", "static_nextafter"], [93, 0, 1, "", "static_signbit"], [93, 0, 1, "", "static_sinc"], [93, 0, 1, "", "static_sparsify_tensor"], [93, 0, 1, "", "static_xlogy"], [93, 0, 1, "", "static_zeta"], [93, 0, 1, "", "xlogy"], [93, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[93, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_reduce"], [93, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[93, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[93, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[93, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_fft"], [93, 0, 1, "", "_static_sliding_window"], [93, 0, 1, "", "adaptive_avg_pool1d"], [93, 0, 1, "", "adaptive_avg_pool2d"], [93, 0, 1, "", "adaptive_max_pool2d"], [93, 0, 1, "", "adaptive_max_pool3d"], [93, 0, 1, "", "avg_pool1d"], [93, 0, 1, "", "avg_pool2d"], [93, 0, 1, "", "avg_pool3d"], [93, 0, 1, "", "dct"], [93, 0, 1, "", "dft"], [93, 0, 1, "", "embedding"], [93, 0, 1, "", "fft"], [93, 0, 1, "", "idct"], [93, 0, 1, "", "ifft"], [93, 0, 1, "", "ifftn"], [93, 0, 1, "", "interpolate"], [93, 0, 1, "", "max_pool1d"], [93, 0, 1, "", "max_pool2d"], [93, 0, 1, "", "max_pool3d"], [93, 0, 1, "", "max_unpool1d"], [93, 0, 1, "", "rfft"], [93, 0, 1, "", "rfftn"], [93, 0, 1, "", "sliding_window"], [93, 0, 1, "", "static_adaptive_avg_pool1d"], [93, 0, 1, "", "static_adaptive_avg_pool2d"], [93, 0, 1, "", "static_adaptive_max_pool2d"], [93, 0, 1, "", "static_adaptive_max_pool3d"], [93, 0, 1, "", "static_avg_pool1d"], [93, 0, 1, "", "static_avg_pool2d"], [93, 0, 1, "", "static_avg_pool3d"], [93, 0, 1, "", "static_dct"], [93, 0, 1, "", "static_dft"], [93, 0, 1, "", "static_embedding"], [93, 0, 1, "", "static_idct"], [93, 0, 1, "", "static_ifft"], [93, 0, 1, "", "static_ifftn"], [93, 0, 1, "", "static_interpolate"], [93, 0, 1, "", "static_max_pool1d"], [93, 0, 1, "", "static_max_pool2d"], [93, 0, 1, "", "static_max_pool3d"], [93, 0, 1, "", "static_max_unpool1d"], [93, 0, 1, "", "static_rfft"], [93, 0, 1, "", "static_rfftn"], [93, 0, 1, "", "static_rnn"], [93, 0, 1, "", "static_stft"], [93, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[93, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "adjoint"], [93, 0, 1, "", "batched_outer"], [93, 0, 1, "", "cond"], [93, 0, 1, "", "diagflat"], [93, 0, 1, "", "dot"], [93, 0, 1, "", "eig"], [93, 0, 1, "", "eigh_tridiagonal"], [93, 0, 1, "", "eigvals"], [93, 0, 1, "", "higher_order_moment"], [93, 0, 1, "", "initialize_tucker"], [93, 0, 1, "", "kron"], [93, 0, 1, "", "make_svd_non_negative"], [93, 0, 1, "", "matrix_exp"], [93, 0, 1, "", "mode_dot"], [93, 0, 1, "", "multi_dot"], [93, 0, 1, "", "multi_mode_dot"], [93, 0, 1, "", "partial_tucker"], [93, 0, 1, "", "static_adjoint"], [93, 0, 1, "", "static_batched_outer"], [93, 0, 1, "", "static_cond"], [93, 0, 1, "", "static_diagflat"], [93, 0, 1, "", "static_dot"], [93, 0, 1, "", "static_eig"], [93, 0, 1, "", "static_eigh_tridiagonal"], [93, 0, 1, "", "static_eigvals"], [93, 0, 1, "", "static_higher_order_moment"], [93, 0, 1, "", "static_initialize_tucker"], [93, 0, 1, "", "static_kron"], [93, 0, 1, "", "static_make_svd_non_negative"], [93, 0, 1, "", "static_matrix_exp"], [93, 0, 1, "", "static_mode_dot"], [93, 0, 1, "", "static_multi_dot"], [93, 0, 1, "", "static_multi_mode_dot"], [93, 0, 1, "", "static_partial_tucker"], [93, 0, 1, "", "static_svd_flip"], [93, 0, 1, "", "static_tensor_train"], [93, 0, 1, "", "static_truncated_svd"], [93, 0, 1, "", "static_tt_matrix_to_tensor"], [93, 0, 1, "", "static_tucker"], [93, 0, 1, "", "svd_flip"], [93, 0, 1, "", "tensor_train"], [93, 0, 1, "", "truncated_svd"], [93, 0, 1, "", "tt_matrix_to_tensor"], [93, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[93, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_hinge_embedding_loss"], [93, 0, 1, "", "_static_huber_loss"], [93, 0, 1, "", "_static_kl_div"], [93, 0, 1, "", "_static_l1_loss"], [93, 0, 1, "", "_static_log_poisson_loss"], [93, 0, 1, "", "_static_poisson_nll_loss"], [93, 0, 1, "", "_static_smooth_l1_loss"], [93, 0, 1, "", "_static_soft_margin_loss"], [93, 0, 1, "", "hinge_embedding_loss"], [93, 0, 1, "", "huber_loss"], [93, 0, 1, "", "kl_div"], [93, 0, 1, "", "l1_loss"], [93, 0, 1, "", "log_poisson_loss"], [93, 0, 1, "", "poisson_nll_loss"], [93, 0, 1, "", "smooth_l1_loss"], [93, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[93, 1, 1, "", "_ContainerWithManipulationExperimental"], [93, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_fill_diagonal"], [93, 0, 1, "", "_static_put_along_axis"], [93, 0, 1, "", "_static_take"], [93, 0, 1, "", "_static_trim_zeros"], [93, 0, 1, "", "_static_unflatten"], [93, 0, 1, "", "_static_unique_consecutive"], [93, 0, 1, "", "as_strided"], [93, 0, 1, "", "associative_scan"], [93, 0, 1, "", "atleast_1d"], [93, 0, 1, "", "atleast_2d"], [93, 0, 1, "", "atleast_3d"], [93, 0, 1, "", "broadcast_shapes"], [93, 0, 1, "", "column_stack"], [93, 0, 1, "", "concat_from_sequence"], [93, 0, 1, "", "dsplit"], [93, 0, 1, "", "dstack"], [93, 0, 1, "", "expand"], [93, 0, 1, "", "fill_diagonal"], [93, 0, 1, "", "flatten"], [93, 0, 1, "", "fliplr"], [93, 0, 1, "", "flipud"], [93, 0, 1, "", "fold"], [93, 0, 1, "", "heaviside"], [93, 0, 1, "", "hsplit"], [93, 0, 1, "", "hstack"], [93, 0, 1, "", "i0"], [93, 0, 1, "", "matricize"], [93, 0, 1, "", "moveaxis"], [93, 0, 1, "", "pad"], [93, 0, 1, "", "partial_fold"], [93, 0, 1, "", "partial_tensor_to_vec"], [93, 0, 1, "", "partial_unfold"], [93, 0, 1, "", "partial_vec_to_tensor"], [93, 0, 1, "", "put_along_axis"], [93, 0, 1, "", "rot90"], [93, 0, 1, "", "soft_thresholding"], [93, 0, 1, "", "static_as_strided"], [93, 0, 1, "", "static_atleast_1d"], [93, 0, 1, "", "static_atleast_2d"], [93, 0, 1, "", "static_atleast_3d"], [93, 0, 1, "", "static_broadcast_shapes"], [93, 0, 1, "", "static_column_stack"], [93, 0, 1, "", "static_concat_from_sequence"], [93, 0, 1, "", "static_dsplit"], [93, 0, 1, "", "static_dstack"], [93, 0, 1, "", "static_expand"], [93, 0, 1, "", "static_flatten"], [93, 0, 1, "", "static_fliplr"], [93, 0, 1, "", "static_flipud"], [93, 0, 1, "", "static_fold"], [93, 0, 1, "", "static_heaviside"], [93, 0, 1, "", "static_hsplit"], [93, 0, 1, "", "static_hstack"], [93, 0, 1, "", "static_i0"], [93, 0, 1, "", "static_matricize"], [93, 0, 1, "", "static_moveaxis"], [93, 0, 1, "", "static_pad"], [93, 0, 1, "", "static_partial_fold"], [93, 0, 1, "", "static_partial_tensor_to_vec"], [93, 0, 1, "", "static_partial_unfold"], [93, 0, 1, "", "static_partial_vec_to_tensor"], [93, 0, 1, "", "static_rot90"], [93, 0, 1, "", "static_soft_thresholding"], [93, 0, 1, "", "static_take_along_axis"], [93, 0, 1, "", "static_top_k"], [93, 0, 1, "", "static_unfold"], [93, 0, 1, "", "static_vsplit"], [93, 0, 1, "", "static_vstack"], [93, 0, 1, "", "take"], [93, 0, 1, "", "take_along_axis"], [93, 0, 1, "", "top_k"], [93, 0, 1, "", "trim_zeros"], [93, 0, 1, "", "unflatten"], [93, 0, 1, "", "unfold"], [93, 0, 1, "", "unique_consecutive"], [93, 0, 1, "", "vsplit"], [93, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[93, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "batch_norm"], [93, 0, 1, "", "group_norm"], [93, 0, 1, "", "instance_norm"], [93, 0, 1, "", "l1_normalize"], [93, 0, 1, "", "l2_normalize"], [93, 0, 1, "", "lp_normalize"], [93, 0, 1, "", "static_batch_norm"], [93, 0, 1, "", "static_group_norm"], [93, 0, 1, "", "static_instance_norm"], [93, 0, 1, "", "static_l1_normalize"], [93, 0, 1, "", "static_l2_normalize"], [93, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[93, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "bernoulli"], [93, 0, 1, "", "beta"], [93, 0, 1, "", "dirichlet"], [93, 0, 1, "", "gamma"], [93, 0, 1, "", "poisson"], [93, 0, 1, "", "static_bernoulli"], [93, 0, 1, "", "static_beta"], [93, 0, 1, "", "static_dirichlet"], [93, 0, 1, "", "static_gamma"], [93, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[93, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "static_unravel_index"], [93, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[93, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[93, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "invert_permutation"], [93, 0, 1, "", "lexsort"], [93, 0, 1, "", "static_invert_permutation"], [93, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[93, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_cummax"], [93, 0, 1, "", "_static_cummin"], [93, 0, 1, "", "_static_nanmin"], [93, 0, 1, "", "bincount"], [93, 0, 1, "", "corrcoef"], [93, 0, 1, "", "cov"], [93, 0, 1, "", "cummax"], [93, 0, 1, "", "cummin"], [93, 0, 1, "", "histogram"], [93, 0, 1, "", "igamma"], [93, 0, 1, "", "lgamma"], [93, 0, 1, "", "median"], [93, 0, 1, "", "nanmean"], [93, 0, 1, "", "nanmedian"], [93, 0, 1, "", "nanmin"], [93, 0, 1, "", "nanprod"], [93, 0, 1, "", "quantile"], [93, 0, 1, "", "static_bincount"], [93, 0, 1, "", "static_corrcoef"], [93, 0, 1, "", "static_cov"], [93, 0, 1, "", "static_histogram"], [93, 0, 1, "", "static_igamma"], [93, 0, 1, "", "static_lgamma"], [93, 0, 1, "", "static_median"], [93, 0, 1, "", "static_nanmean"], [93, 0, 1, "", "static_nanmedian"], [93, 0, 1, "", "static_nanprod"], [93, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[93, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "optional_get_element"], [93, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[94, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_all_equal"], [94, 0, 1, "", "_static_array_equal"], [94, 0, 1, "", "_static_assert_supports_inplace"], [94, 0, 1, "", "_static_clip_matrix_norm"], [94, 0, 1, "", "_static_clip_vector_norm"], [94, 0, 1, "", "_static_einops_rearrange"], [94, 0, 1, "", "_static_einops_reduce"], [94, 0, 1, "", "_static_einops_repeat"], [94, 0, 1, "", "_static_exists"], [94, 0, 1, "", "_static_fourier_encode"], [94, 0, 1, "", "_static_gather"], [94, 0, 1, "", "_static_gather_nd"], [94, 0, 1, "", "_static_get_num_dims"], [94, 0, 1, "", "_static_has_nans"], [94, 0, 1, "", "_static_inplace_decrement"], [94, 0, 1, "", "_static_inplace_increment"], [94, 0, 1, "", "_static_inplace_update"], [94, 0, 1, "", "_static_is_array"], [94, 0, 1, "", "_static_is_ivy_array"], [94, 0, 1, "", "_static_is_native_array"], [94, 0, 1, "", "_static_scatter_flat"], [94, 0, 1, "", "_static_scatter_nd"], [94, 0, 1, "", "_static_size"], [94, 0, 1, "", "_static_stable_divide"], [94, 0, 1, "", "_static_stable_pow"], [94, 0, 1, "", "_static_supports_inplace_updates"], [94, 0, 1, "", "_static_to_list"], [94, 0, 1, "", "_static_to_numpy"], [94, 0, 1, "", "_static_to_scalar"], [94, 0, 1, "", "_static_value_is_nan"], [94, 0, 1, "", "all_equal"], [94, 0, 1, "", "array_equal"], [94, 0, 1, "", "assert_supports_inplace"], [94, 0, 1, "", "clip_matrix_norm"], [94, 0, 1, "", "clip_vector_norm"], [94, 0, 1, "", "einops_rearrange"], [94, 0, 1, "", "einops_reduce"], [94, 0, 1, "", "einops_repeat"], [94, 0, 1, "", "exists"], [94, 0, 1, "", "fourier_encode"], [94, 0, 1, "", "gather"], [94, 0, 1, "", "gather_nd"], [94, 0, 1, "", "get_num_dims"], [94, 0, 1, "", "has_nans"], [94, 0, 1, "", "inplace_decrement"], [94, 0, 1, "", "inplace_increment"], [94, 0, 1, "", "inplace_update"], [94, 0, 1, "", "is_array"], [94, 0, 1, "", "is_ivy_array"], [94, 0, 1, "", "is_native_array"], [94, 0, 1, "", "isin"], [94, 0, 1, "", "itemsize"], [94, 0, 1, "", "scatter_flat"], [94, 0, 1, "", "scatter_nd"], [94, 0, 1, "", "size"], [94, 0, 1, "", "stable_divide"], [94, 0, 1, "", "stable_pow"], [94, 0, 1, "", "static_isin"], [94, 0, 1, "", "static_itemsize"], [94, 0, 1, "", "static_strides"], [94, 0, 1, "", "strides"], [94, 0, 1, "", "supports_inplace_updates"], [94, 0, 1, "", "to_list"], [94, 0, 1, "", "to_numpy"], [94, 0, 1, "", "to_scalar"], [94, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[95, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_stop_gradient"], [95, 0, 1, "", "adam_step"], [95, 0, 1, "", "adam_update"], [95, 0, 1, "", "gradient_descent_update"], [95, 0, 1, "", "lamb_update"], [95, 0, 1, "", "lars_update"], [95, 0, 1, "", "optimizer_update"], [95, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[96, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[97, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_static_conv1d"], [97, 0, 1, "", "_static_conv1d_transpose"], [97, 0, 1, "", "_static_conv2d"], [97, 0, 1, "", "_static_conv2d_transpose"], [97, 0, 1, "", "_static_conv3d"], [97, 0, 1, "", "_static_conv3d_transpose"], [97, 0, 1, "", "_static_depthwise_conv2d"], [97, 0, 1, "", "_static_dropout"], [97, 0, 1, "", "_static_dropout1d"], [97, 0, 1, "", "_static_dropout2d"], [97, 0, 1, "", "_static_dropout3d"], [97, 0, 1, "", "_static_linear"], [97, 0, 1, "", "_static_lstm_update"], [97, 0, 1, "", "_static_multi_head_attention"], [97, 0, 1, "", "_static_reduce_window"], [97, 0, 1, "", "_static_scaled_dot_product_attention"], [97, 0, 1, "", "conv1d"], [97, 0, 1, "", "conv1d_transpose"], [97, 0, 1, "", "conv2d"], [97, 0, 1, "", "conv2d_transpose"], [97, 0, 1, "", "conv3d"], [97, 0, 1, "", "conv3d_transpose"], [97, 0, 1, "", "depthwise_conv2d"], [97, 0, 1, "", "dropout"], [97, 0, 1, "", "dropout1d"], [97, 0, 1, "", "dropout2d"], [97, 0, 1, "", "dropout3d"], [97, 0, 1, "", "linear"], [97, 0, 1, "", "lstm_update"], [97, 0, 1, "", "multi_head_attention"], [97, 0, 1, "", "reduce_window"], [97, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[98, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_cholesky"], [98, 0, 1, "", "_static_cross"], [98, 0, 1, "", "_static_det"], [98, 0, 1, "", "_static_diag"], [98, 0, 1, "", "_static_diagonal"], [98, 0, 1, "", "_static_eigh"], [98, 0, 1, "", "_static_eigvalsh"], [98, 0, 1, "", "_static_inner"], [98, 0, 1, "", "_static_inv"], [98, 0, 1, "", "_static_matmul"], [98, 0, 1, "", "_static_matrix_norm"], [98, 0, 1, "", "_static_matrix_power"], [98, 0, 1, "", "_static_matrix_rank"], [98, 0, 1, "", "_static_matrix_transpose"], [98, 0, 1, "", "_static_outer"], [98, 0, 1, "", "_static_pinv"], [98, 0, 1, "", "_static_qr"], [98, 0, 1, "", "_static_slogdet"], [98, 0, 1, "", "_static_solve"], [98, 0, 1, "", "_static_svd"], [98, 0, 1, "", "_static_svdvals"], [98, 0, 1, "", "_static_tensordot"], [98, 0, 1, "", "_static_tensorsolve"], [98, 0, 1, "", "_static_trace"], [98, 0, 1, "", "_static_vander"], [98, 0, 1, "", "_static_vecdot"], [98, 0, 1, "", "_static_vector_norm"], [98, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [98, 0, 1, "", "cholesky"], [98, 0, 1, "", "cross"], [98, 0, 1, "", "det"], [98, 0, 1, "", "diag"], [98, 0, 1, "", "diagonal"], [98, 0, 1, "", "eigh"], [98, 0, 1, "", "eigvalsh"], [98, 0, 1, "", "general_inner_product"], [98, 0, 1, "", "inner"], [98, 0, 1, "", "inv"], [98, 0, 1, "", "matmul"], [98, 0, 1, "", "matrix_norm"], [98, 0, 1, "", "matrix_power"], [98, 0, 1, "", "matrix_rank"], [98, 0, 1, "", "matrix_transpose"], [98, 0, 1, "", "outer"], [98, 0, 1, "", "pinv"], [98, 0, 1, "", "qr"], [98, 0, 1, "", "slogdet"], [98, 0, 1, "", "solve"], [98, 0, 1, "", "static_general_inner_product"], [98, 0, 1, "", "svd"], [98, 0, 1, "", "svdvals"], [98, 0, 1, "", "tensordot"], [98, 0, 1, "", "tensorsolve"], [98, 0, 1, "", "trace"], [98, 0, 1, "", "vander"], [98, 0, 1, "", "vecdot"], [98, 0, 1, "", "vector_norm"], [98, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[99, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "_static_binary_cross_entropy"], [99, 0, 1, "", "_static_cross_entropy"], [99, 0, 1, "", "_static_sparse_cross_entropy"], [99, 0, 1, "", "binary_cross_entropy"], [99, 0, 1, "", "cross_entropy"], [99, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[100, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_static_clip"], [100, 0, 1, "", "_static_concat"], [100, 0, 1, "", "_static_constant_pad"], [100, 0, 1, "", "_static_expand_dims"], [100, 0, 1, "", "_static_flip"], [100, 0, 1, "", "_static_permute_dims"], [100, 0, 1, "", "_static_repeat"], [100, 0, 1, "", "_static_reshape"], [100, 0, 1, "", "_static_roll"], [100, 0, 1, "", "_static_split"], [100, 0, 1, "", "_static_squeeze"], [100, 0, 1, "", "_static_stack"], [100, 0, 1, "", "_static_swapaxes"], [100, 0, 1, "", "_static_tile"], [100, 0, 1, "", "_static_unstack"], [100, 0, 1, "", "_static_zero_pad"], [100, 0, 1, "", "clip"], [100, 0, 1, "", "concat"], [100, 0, 1, "", "constant_pad"], [100, 0, 1, "", "expand_dims"], [100, 0, 1, "", "flip"], [100, 0, 1, "", "permute_dims"], [100, 0, 1, "", "repeat"], [100, 0, 1, "", "reshape"], [100, 0, 1, "", "roll"], [100, 0, 1, "", "split"], [100, 0, 1, "", "squeeze"], [100, 0, 1, "", "stack"], [100, 0, 1, "", "swapaxes"], [100, 0, 1, "", "tile"], [100, 0, 1, "", "unstack"], [100, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[101, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[102, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "_static_multinomial"], [102, 0, 1, "", "_static_randint"], [102, 0, 1, "", "_static_random_normal"], [102, 0, 1, "", "_static_random_uniform"], [102, 0, 1, "", "_static_shuffle"], [102, 0, 1, "", "multinomial"], [102, 0, 1, "", "randint"], [102, 0, 1, "", "random_normal"], [102, 0, 1, "", "random_uniform"], [102, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[103, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_argmax"], [103, 0, 1, "", "_static_argmin"], [103, 0, 1, "", "_static_argwhere"], [103, 0, 1, "", "_static_nonzero"], [103, 0, 1, "", "_static_where"], [103, 0, 1, "", "argmax"], [103, 0, 1, "", "argmin"], [103, 0, 1, "", "argwhere"], [103, 0, 1, "", "nonzero"], [103, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[104, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "_static_unique_all"], [104, 0, 1, "", "_static_unique_counts"], [104, 0, 1, "", "_static_unique_inverse"], [104, 0, 1, "", "_static_unique_values"], [104, 0, 1, "", "unique_all"], [104, 0, 1, "", "unique_counts"], [104, 0, 1, "", "unique_inverse"], [104, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[105, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_argsort"], [105, 0, 1, "", "_static_searchsorted"], [105, 0, 1, "", "_static_sort"], [105, 0, 1, "", "argsort"], [105, 0, 1, "", "msort"], [105, 0, 1, "", "searchsorted"], [105, 0, 1, "", "sort"], [105, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[106, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "_static_cumprod"], [106, 0, 1, "", "_static_cumsum"], [106, 0, 1, "", "_static_min"], [106, 0, 1, "", "_static_prod"], [106, 0, 1, "", "_static_sum"], [106, 0, 1, "", "_static_var"], [106, 0, 1, "", "cumprod"], [106, 0, 1, "", "cumsum"], [106, 0, 1, "", "einsum"], [106, 0, 1, "", "max"], [106, 0, 1, "", "mean"], [106, 0, 1, "", "min"], [106, 0, 1, "", "prod"], [106, 0, 1, "", "std"], [106, 0, 1, "", "sum"], [106, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[107, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "_static_all"], [107, 0, 1, "", "_static_any"], [107, 0, 1, "", "all"], [107, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[108, 2, 1, "", "_wrap_function"], [108, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[109, 3, 0, "-", "base"], [110, 3, 0, "-", "cp_tensor"], [111, 3, 0, "-", "parafac2_tensor"], [112, 3, 0, "-", "tr_tensor"], [113, 3, 0, "-", "tt_tensor"], [114, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[109, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[109, 0, 1, "", "__init__"], [109, 4, 1, "", "_abc_impl"], [109, 0, 1, "", "mode_dot"], [109, 0, 1, "", "norm"], [109, 0, 1, "", "to_tensor"], [109, 0, 1, "", "to_unfolded"], [109, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[110, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[110, 0, 1, "", "__init__"], [110, 4, 1, "", "_abc_impl"], [110, 0, 1, "", "cp_copy"], [110, 0, 1, "", "cp_flip_sign"], [110, 0, 1, "", "cp_lstsq_grad"], [110, 0, 1, "", "cp_mode_dot"], [110, 0, 1, "", "cp_n_param"], [110, 0, 1, "", "cp_norm"], [110, 0, 1, "", "cp_normalize"], [110, 0, 1, "", "cp_to_tensor"], [110, 0, 1, "", "cp_to_unfolded"], [110, 0, 1, "", "cp_to_vec"], [110, 0, 1, "", "mode_dot"], [110, 5, 1, "", "n_param"], [110, 0, 1, "", "norm"], [110, 0, 1, "", "normalize"], [110, 0, 1, "", "to_tensor"], [110, 0, 1, "", "to_unfolded"], [110, 0, 1, "", "to_vec"], [110, 0, 1, "", "unfolding_dot_khatri_rao"], [110, 0, 1, "", "validate_cp_rank"], [110, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[111, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[111, 0, 1, "", "__init__"], [111, 4, 1, "", "_abc_impl"], [111, 0, 1, "", "apply_parafac2_projections"], [111, 0, 1, "", "from_CPTensor"], [111, 5, 1, "", "n_param"], [111, 0, 1, "", "parafac2_normalise"], [111, 0, 1, "", "parafac2_to_slice"], [111, 0, 1, "", "parafac2_to_slices"], [111, 0, 1, "", "parafac2_to_tensor"], [111, 0, 1, "", "parafac2_to_unfolded"], [111, 0, 1, "", "parafac2_to_vec"], [111, 0, 1, "", "to_tensor"], [111, 0, 1, "", "to_unfolded"], [111, 0, 1, "", "to_vec"], [111, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[112, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 5, 1, "", "n_param"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolded"], [112, 0, 1, "", "to_vec"], [112, 0, 1, "", "tr_n_param"], [112, 0, 1, "", "tr_to_tensor"], [112, 0, 1, "", "tr_to_unfolded"], [112, 0, 1, "", "tr_to_vec"], [112, 0, 1, "", "validate_tr_rank"], [112, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[113, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[113, 0, 1, "", "__init__"], [113, 4, 1, "", "_abc_impl"], [113, 0, 1, "", "_tt_n_param"], [113, 0, 1, "", "index_update"], [113, 5, 1, "", "n_param"], [113, 0, 1, "", "pad_tt_rank"], [113, 0, 1, "", "to_tensor"], [113, 0, 1, "", "to_unfolding"], [113, 0, 1, "", "to_vec"], [113, 0, 1, "", "tt_to_tensor"], [113, 0, 1, "", "tt_to_unfolded"], [113, 0, 1, "", "tt_to_vec"], [113, 0, 1, "", "validate_tt_rank"], [113, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[114, 1, 1, "", "TuckerTensor"], [114, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[114, 0, 1, "", "__init__"], [114, 4, 1, "", "_abc_impl"], [114, 0, 1, "", "mode_dot"], [114, 5, 1, "", "n_param"], [114, 0, 1, "", "to_tensor"], [114, 0, 1, "", "to_unfolded"], [114, 0, 1, "", "to_vec"], [114, 0, 1, "", "tucker_copy"], [114, 0, 1, "", "tucker_mode_dot"], [114, 0, 1, "", "tucker_n_param"], [114, 0, 1, "", "tucker_normalize"], [114, 0, 1, "", "tucker_to_tensor"], [114, 0, 1, "", "tucker_to_unfolded"], [114, 0, 1, "", "tucker_to_vec"], [114, 0, 1, "", "validate_tucker_rank"], [114, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[119, 3, 0, "-", "base"], [120, 3, 0, "-", "elementwise"], [118, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[119, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[119, 0, 1, "", "__init__"], [119, 4, 1, "", "_abc_impl"], [119, 0, 1, "", "broadcast_shapes"], [119, 5, 1, "", "data"], [119, 5, 1, "", "device"], [119, 5, 1, "", "dtype"], [119, 5, 1, "", "inner_shape"], [119, 5, 1, "", "ndim"], [119, 0, 1, "", "nested_array"], [119, 5, 1, "", "nested_rank"], [119, 0, 1, "", "ragged_map"], [119, 0, 1, "", "ragged_multi_map"], [119, 0, 1, "", "ragged_multi_map_in_function"], [119, 0, 1, "", "replace_ivy_arrays"], [119, 5, 1, "", "shape"], [119, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[120, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[120, 4, 1, "", "_abc_impl"], [120, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[118, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[118, 0, 1, "", "__init__"], [118, 0, 1, "", "from_row_lengths"], [118, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[641, 3, 0, "-", "activations"], [642, 3, 0, "-", "constants"], [643, 3, 0, "-", "control_flow_ops"], [644, 3, 0, "-", "creation"], [645, 3, 0, "-", "data_type"], [646, 3, 0, "-", "device"], [647, 3, 0, "-", "elementwise"], [648, 3, 0, "-", "experimental"], [649, 3, 0, "-", "general"], [650, 3, 0, "-", "gradients"], [651, 3, 0, "-", "layers"], [652, 3, 0, "-", "linear_algebra"], [653, 3, 0, "-", "losses"], [654, 3, 0, "-", "manipulation"], [655, 3, 0, "-", "meta"], [656, 3, 0, "-", "nest"], [657, 3, 0, "-", "norms"], [658, 3, 0, "-", "random"], [659, 3, 0, "-", "searching"], [660, 3, 0, "-", "set"], [661, 3, 0, "-", "sorting"], [662, 3, 0, "-", "statistical"], [663, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[380, 3, 0, "-", "activations"], [381, 3, 0, "-", "constants"], [382, 3, 0, "-", "creation"], [383, 3, 0, "-", "data_type"], [384, 3, 0, "-", "device"], [385, 3, 0, "-", "elementwise"], [386, 3, 0, "-", "general"], [387, 3, 0, "-", "gradients"], [388, 3, 0, "-", "layers"], [389, 3, 0, "-", "linear_algebra"], [390, 3, 0, "-", "losses"], [391, 3, 0, "-", "manipulation"], [392, 3, 0, "-", "meta"], [393, 3, 0, "-", "nest"], [394, 3, 0, "-", "norms"], [395, 3, 0, "-", "random"], [396, 3, 0, "-", "searching"], [397, 3, 0, "-", "set"], [398, 3, 0, "-", "sorting"], [399, 3, 0, "-", "sparse_array"], [400, 3, 0, "-", "statistical"], [401, 3, 0, "-", "utility"]], "ivy.stateful": [[806, 3, 0, "-", "activations"], [807, 3, 0, "-", "converters"], [808, 3, 0, "-", "helpers"], [809, 3, 0, "-", "initializers"], [810, 3, 0, "-", "layers"], [811, 3, 0, "-", "losses"], [812, 3, 0, "-", "module"], [813, 3, 0, "-", "norms"], [814, 3, 0, "-", "optimizers"], [815, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[806, 1, 1, "", "ELU"], [806, 1, 1, "", "GEGLU"], [806, 1, 1, "", "GELU"], [806, 1, 1, "", "Hardswish"], [806, 1, 1, "", "LeakyReLU"], [806, 1, 1, "", "LogSigmoid"], [806, 1, 1, "", "LogSoftmax"], [806, 1, 1, "", "Logit"], [806, 1, 1, "", "Mish"], [806, 1, 1, "", "PReLU"], [806, 1, 1, "", "ReLU"], [806, 1, 1, "", "ReLU6"], [806, 1, 1, "", "SeLU"], [806, 1, 1, "", "SiLU"], [806, 1, 1, "", "Sigmoid"], [806, 1, 1, "", "Softmax"], [806, 1, 1, "", "Softplus"], [806, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[806, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[806, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[807, 1, 1, "", "ModuleConverters"], [807, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[807, 0, 1, "", "from_flax_module"], [807, 0, 1, "", "from_haiku_module"], [807, 0, 1, "", "from_keras_module"], [807, 0, 1, "", "from_paddle_module"], [807, 0, 1, "", "from_torch_module"], [807, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[808, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[809, 1, 1, "", "Constant"], [809, 1, 1, "", "FirstLayerSiren"], [809, 1, 1, "", "GlorotUniform"], [809, 1, 1, "", "Initializer"], [809, 1, 1, "", "KaimingNormal"], [809, 1, 1, "", "Ones"], [809, 1, 1, "", "RandomNormal"], [809, 1, 1, "", "Siren"], [809, 1, 1, "", "Uniform"], [809, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[809, 0, 1, "", "__init__"], [809, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[809, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[809, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[809, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[809, 0, 1, "", "__init__"], [809, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[809, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[809, 0, 1, "", "__init__"], [809, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[809, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[809, 0, 1, "", "__init__"], [809, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[809, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[810, 1, 1, "", "AdaptiveAvgPool1d"], [810, 1, 1, "", "AdaptiveAvgPool2d"], [810, 1, 1, "", "AvgPool1D"], [810, 1, 1, "", "AvgPool2D"], [810, 1, 1, "", "AvgPool3D"], [810, 1, 1, "", "Conv1D"], [810, 1, 1, "", "Conv1DTranspose"], [810, 1, 1, "", "Conv2D"], [810, 1, 1, "", "Conv2DTranspose"], [810, 1, 1, "", "Conv3D"], [810, 1, 1, "", "Conv3DTranspose"], [810, 1, 1, "", "Dct"], [810, 1, 1, "", "DepthwiseConv2D"], [810, 1, 1, "", "Dropout"], [810, 1, 1, "", "Embedding"], [810, 1, 1, "", "FFT"], [810, 1, 1, "", "IDct"], [810, 1, 1, "", "IFFT"], [810, 1, 1, "", "Identity"], [810, 1, 1, "", "LSTM"], [810, 1, 1, "", "Linear"], [810, 1, 1, "", "MaxPool1D"], [810, 1, 1, "", "MaxPool2D"], [810, 1, 1, "", "MaxPool3D"], [810, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[810, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[811, 1, 1, "", "BinaryCrossEntropyLoss"], [811, 1, 1, "", "CrossEntropyLoss"], [811, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[811, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[811, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[811, 0, 1, "", "__init__"]], "ivy.stateful.module": [[812, 1, 1, "", "Module"], [812, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[812, 0, 1, "", "__call__"], [812, 0, 1, "", "__init__"], [812, 5, 1, "", "buffers"], [812, 0, 1, "", "build"], [812, 5, 1, "", "build_mode"], [812, 5, 1, "", "built"], [812, 5, 1, "", "device"], [812, 5, 1, "", "dtype"], [812, 0, 1, "", "eval"], [812, 0, 1, "", "load"], [812, 5, 1, "", "module_dict"], [812, 0, 1, "", "register_buffer"], [812, 0, 1, "", "register_parameter"], [812, 0, 1, "", "save"], [812, 0, 1, "", "save_weights"], [812, 0, 1, "", "show_graph"], [812, 5, 1, "", "state_dict"], [812, 0, 1, "", "to_device"], [812, 0, 1, "", "trace_graph"], [812, 0, 1, "", "train"], [812, 5, 1, "", "training"], [812, 5, 1, "", "v"]], "ivy.stateful.norms": [[813, 1, 1, "", "BatchNorm2D"], [813, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[813, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[813, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[814, 1, 1, "", "Adam"], [814, 1, 1, "", "AdamW"], [814, 1, 1, "", "LAMB"], [814, 1, 1, "", "LARS"], [814, 1, 1, "", "Optimizer"], [814, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "set_state"], [814, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[814, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "set_state"], [814, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "set_state"], [814, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "set_state"], [814, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "set_state"], [814, 5, 1, "", "state"]], "ivy.stateful.sequential": [[815, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[815, 0, 1, "", "__init__"]], "ivy.utils": [[816, 3, 0, "-", "assertions"], [817, 3, 0, "-", "backend"], [821, 3, 0, "-", "binaries"], [822, 3, 0, "-", "decorator_utils"], [823, 3, 0, "-", "dynamic_import"], [824, 3, 0, "-", "einsum_parser"], [825, 3, 0, "-", "einsum_path_helpers"], [826, 3, 0, "-", "exceptions"], [827, 3, 0, "-", "inspection"], [828, 3, 0, "-", "logging"], [829, 3, 0, "-", "profiler"], [830, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[816, 2, 1, "", "check_all"], [816, 2, 1, "", "check_all_or_any_fn"], [816, 2, 1, "", "check_any"], [816, 2, 1, "", "check_dev_correct_formatting"], [816, 2, 1, "", "check_dimensions"], [816, 2, 1, "", "check_elem_in_list"], [816, 2, 1, "", "check_equal"], [816, 2, 1, "", "check_exists"], [816, 2, 1, "", "check_false"], [816, 2, 1, "", "check_gather_input_valid"], [816, 2, 1, "", "check_gather_nd_input_valid"], [816, 2, 1, "", "check_greater"], [816, 2, 1, "", "check_inplace_sizes_valid"], [816, 2, 1, "", "check_isinstance"], [816, 2, 1, "", "check_kernel_padding_size"], [816, 2, 1, "", "check_less"], [816, 2, 1, "", "check_one_way_broadcastable"], [816, 2, 1, "", "check_same_dtype"], [816, 2, 1, "", "check_shape"], [816, 2, 1, "", "check_shapes_broadcastable"], [816, 2, 1, "", "check_true"], [816, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[818, 3, 0, "-", "ast_helpers"], [819, 3, 0, "-", "handler"], [820, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[818, 1, 1, "", "ImportTransformer"], [818, 1, 1, "", "IvyLoader"], [818, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "impersonate_import"], [818, 0, 1, "", "visit_Import"], [818, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[818, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[819, 1, 1, "", "ContextManager"], [819, 2, 1, "", "choose_random_backend"], [819, 2, 1, "", "current_backend"], [819, 2, 1, "", "dynamic_backend_converter"], [819, 2, 1, "", "prevent_access_locally"], [819, 2, 1, "", "previous_backend"], [819, 2, 1, "", "set_backend"], [819, 2, 1, "", "set_backend_to_specific_version"], [819, 2, 1, "", "set_jax_backend"], [819, 2, 1, "", "set_mxnet_backend"], [819, 2, 1, "", "set_numpy_backend"], [819, 2, 1, "", "set_paddle_backend"], [819, 2, 1, "", "set_tensorflow_backend"], [819, 2, 1, "", "set_torch_backend"], [819, 2, 1, "", "unset_backend"], [819, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[819, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[820, 2, 1, "", "clear_sub_backends"], [820, 2, 1, "", "find_available_sub_backends"], [820, 2, 1, "", "fn_name_from_version_specific_fn_name"], [820, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [820, 2, 1, "", "set_sub_backend"], [820, 2, 1, "", "set_sub_backend_to_specific_version"], [820, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[821, 2, 1, "", "check_for_binaries"], [821, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[822, 1, 1, "", "CallVisitor"], [822, 1, 1, "", "TransposeType"], [822, 2, 1, "", "apply_transpose"], [822, 2, 1, "", "dummy_inplace_update"], [822, 2, 1, "", "get_next_func"], [822, 2, 1, "", "handle_get_item"], [822, 2, 1, "", "handle_methods"], [822, 2, 1, "", "handle_set_item"], [822, 2, 1, "", "handle_transpose_in_input_and_output"], [822, 2, 1, "", "retrieve_object"], [822, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[822, 0, 1, "", "__init__"], [822, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[822, 4, 1, "", "CONV1D"], [822, 4, 1, "", "CONV2D"], [822, 4, 1, "", "CONV3D"], [822, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[823, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[824, 2, 1, "", "convert_interleaved_input"], [824, 2, 1, "", "convert_subscripts"], [824, 2, 1, "", "find_output_shape"], [824, 2, 1, "", "find_output_str"], [824, 2, 1, "", "gen_unused_symbols"], [824, 2, 1, "", "get_symbol"], [824, 2, 1, "", "has_valid_einsum_chars_only"], [824, 2, 1, "", "is_valid_einsum_char"], [824, 2, 1, "", "legalise_einsum_expr"], [824, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[825, 2, 1, "", "can_dot"], [825, 2, 1, "", "compute_size_by_dict"], [825, 2, 1, "", "find_contraction"], [825, 2, 1, "", "flop_count"], [825, 2, 1, "", "greedy_path"], [825, 2, 1, "", "optimal_path"], [825, 2, 1, "", "parse_einsum_input"], [825, 2, 1, "", "parse_possible_contraction"], [825, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[826, 7, 1, "", "InplaceUpdateException"], [826, 7, 1, "", "IvyAttributeError"], [826, 7, 1, "", "IvyBackendException"], [826, 7, 1, "", "IvyBroadcastShapeError"], [826, 7, 1, "", "IvyDeviceError"], [826, 7, 1, "", "IvyDtypePromotionError"], [826, 7, 1, "", "IvyError"], [826, 7, 1, "", "IvyException"], [826, 7, 1, "", "IvyIndexError"], [826, 7, 1, "", "IvyInvalidBackendException"], [826, 7, 1, "", "IvyNotImplementedException"], [826, 7, 1, "", "IvyValueError"], [826, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[826, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[826, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[827, 2, 1, "", "add_array_specs"], [827, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[828, 2, 1, "", "set_logging_mode"], [828, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[829, 1, 1, "", "Profiler"], [829, 2, 1, "", "tensorflow_profile_start"], [829, 2, 1, "", "tensorflow_profile_stop"], [829, 2, 1, "", "torch_profiler_init"], [829, 2, 1, "", "torch_profiler_start"], [829, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[829, 0, 1, "", "__init__"], [829, 4, 1, "", "print_stats"], [829, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[830, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[789, 3, 0, "-", "assertions"], [790, 3, 0, "-", "available_frameworks"], [791, 3, 0, "-", "function_testing"], [792, 3, 0, "-", "globals"], [793, 3, 0, "-", "hypothesis_helpers"], [798, 3, 0, "-", "multiprocessing"], [799, 3, 0, "-", "pipeline_helper"], [800, 3, 0, "-", "structs"], [801, 3, 0, "-", "test_parameter_flags"], [802, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[789, 2, 1, "", "assert_all_close"], [789, 2, 1, "", "assert_same_type"], [789, 2, 1, "", "assert_same_type_and_shape"], [789, 2, 1, "", "check_unsupported_device"], [789, 2, 1, "", "check_unsupported_device_and_dtype"], [789, 2, 1, "", "check_unsupported_dtype"], [789, 2, 1, "", "test_unsupported_function"], [789, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[791, 2, 1, "", "args_to_container"], [791, 2, 1, "", "args_to_frontend"], [791, 2, 1, "", "arrays_to_frontend"], [791, 2, 1, "", "as_lists"], [791, 2, 1, "", "convtrue"], [791, 2, 1, "", "create_args_kwargs"], [791, 2, 1, "", "flatten"], [791, 2, 1, "", "flatten_and_to_np"], [791, 2, 1, "", "flatten_frontend"], [791, 2, 1, "", "flatten_frontend_fw_to_np"], [791, 2, 1, "", "flatten_frontend_to_np"], [791, 2, 1, "", "get_frontend_ret"], [791, 2, 1, "", "get_ret_and_flattened_np_array"], [791, 2, 1, "", "gradient_incompatible_function"], [791, 2, 1, "", "gradient_test"], [791, 2, 1, "", "gradient_unsupported_dtypes"], [791, 2, 1, "", "kwargs_to_args_n_kwargs"], [791, 2, 1, "", "test_frontend_function"], [791, 2, 1, "", "test_frontend_method"], [791, 2, 1, "", "test_function"], [791, 2, 1, "", "test_function_backend_computation"], [791, 2, 1, "", "test_function_ground_truth_computation"], [791, 2, 1, "", "test_gradient_backend_computation"], [791, 2, 1, "", "test_gradient_ground_truth_computation"], [791, 2, 1, "", "test_method"], [791, 2, 1, "", "test_method_backend_computation"], [791, 2, 1, "", "test_method_ground_truth_computation"], [791, 2, 1, "", "traced_if_required"], [791, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[792, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [792, 7, 1, "", "InterruptedTest"], [792, 1, 1, "", "TestData"], [792, 2, 1, "", "setup_api_test"], [792, 2, 1, "", "setup_frontend_test"], [792, 2, 1, "", "teardown_api_test"], [792, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[792, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[792, 0, 1, "", "__init__"], [792, 4, 1, "", "fn_name"], [792, 4, 1, "", "fn_tree"], [792, 4, 1, "", "is_method"], [792, 4, 1, "", "supported_device_dtypes"], [792, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[794, 3, 0, "-", "array_helpers"], [795, 3, 0, "-", "dtype_helpers"], [796, 3, 0, "-", "general_helpers"], [797, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[794, 2, 1, "", "array_and_broadcastable_shape"], [794, 2, 1, "", "array_bools"], [794, 2, 1, "", "array_helpers_dtype_info_helper"], [794, 2, 1, "", "array_indices_axis"], [794, 2, 1, "", "array_indices_put_along_axis"], [794, 2, 1, "", "array_values"], [794, 2, 1, "", "arrays_and_axes"], [794, 2, 1, "", "arrays_for_pooling"], [794, 2, 1, "", "broadcast_shapes"], [794, 2, 1, "", "cond_data_gen_helper"], [794, 2, 1, "", "create_concatenable_arrays_dtypes"], [794, 2, 1, "", "create_nested_input"], [794, 2, 1, "", "dtype_and_values"], [794, 2, 1, "", "dtype_array_query"], [794, 2, 1, "", "dtype_array_query_val"], [794, 2, 1, "", "dtype_values_axis"], [794, 2, 1, "", "einsum_helper"], [794, 2, 1, "", "get_first_solve_batch_matrix"], [794, 2, 1, "", "get_first_solve_matrix"], [794, 2, 1, "", "get_second_solve_batch_matrix"], [794, 2, 1, "", "get_second_solve_matrix"], [794, 2, 1, "", "list_of_size"], [794, 2, 1, "", "lists"], [794, 2, 1, "", "mutually_broadcastable_shapes"], [794, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[795, 2, 1, "", "array_dtypes"], [795, 2, 1, "", "cast_filter"], [795, 2, 1, "", "cast_filter_helper"], [795, 2, 1, "", "get_castable_dtype"], [795, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[796, 7, 1, "", "BroadcastError"], [796, 2, 1, "", "apply_safety_factor"], [796, 2, 1, "", "broadcast_shapes"], [796, 2, 1, "", "dims_and_offset"], [796, 2, 1, "", "embedding_helper"], [796, 2, 1, "", "general_helpers_dtype_info_helper"], [796, 2, 1, "", "get_axis"], [796, 2, 1, "", "get_bounds"], [796, 2, 1, "", "get_mean_std"], [796, 2, 1, "", "get_shape"], [796, 2, 1, "", "matrix_is_stable"], [796, 2, 1, "", "reshape_shapes"], [796, 2, 1, "", "sizes_"], [796, 2, 1, "", "subsets"], [796, 2, 1, "", "two_broadcastable_shapes"], [796, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[797, 2, 1, "", "floats"], [797, 2, 1, "", "ints"], [797, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[798, 2, 1, "", "backend_proc"], [798, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[799, 1, 1, "", "BackendHandler"], [799, 1, 1, "", "BackendHandlerMode"], [799, 1, 1, "", "WithBackendContext"], [799, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[799, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[799, 4, 1, "", "SetBackend"], [799, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[799, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[800, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[800, 0, 1, "", "__init__"], [800, 4, 1, "", "framework_init_module"], [800, 4, 1, "", "init_name"], [800, 4, 1, "", "ivy_init_module"], [800, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[801, 1, 1, "", "DynamicFlag"], [801, 1, 1, "", "FrontendFunctionTestFlags"], [801, 1, 1, "", "FrontendInitTestFlags"], [801, 1, 1, "", "FrontendMethodTestFlags"], [801, 1, 1, "", "FunctionTestFlags"], [801, 1, 1, "", "InitMethodTestFlags"], [801, 1, 1, "", "MethodTestFlags"], [801, 1, 1, "", "TestFlags"], [801, 2, 1, "", "build_flag"], [801, 2, 1, "", "frontend_function_flags"], [801, 2, 1, "", "frontend_init_flags"], [801, 2, 1, "", "frontend_method_flags"], [801, 2, 1, "", "function_flags"], [801, 2, 1, "", "init_method_flags"], [801, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[801, 0, 1, "", "__init__"], [801, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[801, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[802, 2, 1, "", "handle_example"], [802, 2, 1, "", "handle_frontend_method"], [802, 2, 1, "", "handle_frontend_test"], [802, 2, 1, "", "handle_method"], [802, 2, 1, "", "handle_test"], [802, 2, 1, "", "num_positional_args"], [802, 2, 1, "", "num_positional_args_helper"], [802, 2, 1, "", "num_positional_args_method"], [802, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 21, 22, 30, 38, 41, 60, 62, 831, 833, 837, 838, 842, 858, 861, 871, 877, 878], "ivi": [0, 4, 5, 6, 7, 12, 13, 21, 22, 30, 33, 41, 44, 45, 56, 57, 59, 60, 62, 831, 837, 839, 843, 845, 847, 850, 852, 858, 860, 861, 862, 863, 864, 865, 868, 869, 871, 877, 878, 879, 880, 884], "framework": [0, 8, 9, 23, 44, 50, 56, 790, 803, 831, 858, 861, 882], "librari": [0, 39, 44, 45, 60, 62, 831, 877], "instal": [0, 4, 5, 6, 7, 21, 22, 23, 33, 56, 57, 59, 831, 871], "import": [0, 6, 7, 12, 13, 21, 22, 26, 33, 56, 57, 60, 823], "configur": [0, 852, 861], "environ": [0, 838], "load": [0, 12, 13, 21, 22, 23, 26, 787], "dataset": [0, 58, 60], "preview": 0, "inspect": [0, 827], "end": [0, 60], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 861], "transact": 0, "class": [0, 121, 803, 831, 843, 852, 860], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 26, 33, 44, 56, 67, 90, 121, 383, 645, 660, 767, 768, 769, 770, 848, 860, 863, 870], "analysi": 0, "statist": [0, 83, 106, 400, 662], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 23, 26, 884], "metric": [0, 26, 60], "under": 0, "sampl": [0, 57], "balanc": [0, 866], "creat": [0, 1, 56, 57, 837], "split": [0, 726], "featur": [0, 863], "target": [0, 56], "train": [0, 23, 26, 56, 58, 60], "test": [0, 26, 58, 791, 801, 802, 805, 837, 838, 839, 842, 847, 853, 861, 863], "set": [0, 8, 9, 21, 22, 23, 52, 56, 57, 81, 104, 397, 660, 838, 844, 853, 865], "convert": [0, 8, 9, 10, 11, 23, 807, 831], "arrai": [0, 115, 118, 140, 399, 794, 842, 843, 847, 855, 878], "displai": [0, 61], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 21, 22], "function": [0, 12, 13, 33, 42, 44, 45, 56, 57, 58, 60, 62, 122, 791, 831, 837, 846, 848, 849, 852, 855, 856, 857, 858, 860, 861, 863, 864, 865, 866, 868, 870, 877], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 68, 91, 384, 646, 849, 855, 860], "mode": [0, 52, 848, 852, 865], "xgboost": [0, 26], "classifi": [0, 21, 22], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 40, 41, 43, 44, 45, 56, 57, 58, 59, 60, 62, 870], "time": [0, 26], "base": [0, 87, 109, 119], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 847, 858, 860], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 866], "classif": [0, 6, 7], "report": 0, "evalu": [0, 26], "ivyclassifi": 0, "xgbclassifi": [0, 26], "visual": [0, 23, 61], "comparison": [0, 26], "demo": [1, 3, 4, 5, 6, 7, 31, 44, 58, 59], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 21, 22, 26, 31, 52, 850, 855, 858, 861, 863, 866, 877, 878, 880], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 21, 22, 857], "torch": [4, 5, 6, 7, 12, 13, 21, 22, 52, 59, 882, 883], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 23, 26, 29, 42, 43, 52, 59, 60, 61, 882], "jax": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 26, 52, 59, 882], "appendix": [4, 5, 12, 13], "code": [4, 5, 33, 34, 35, 36, 45, 56, 831, 854, 862, 864], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 812, 831, 848, 849, 877], "sequenc": [6, 7, 855], "your": [8, 9, 12, 13, 21, 22, 23, 839, 863], "pytorch": [8, 9, 10, 11, 23, 24, 25, 26, 27, 42, 43, 58, 882], "project": [8, 9, 23], "incompat": [8, 9, 23], "transpil": [8, 9, 10, 11, 23, 27, 28, 29, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 58, 62, 831, 868, 869, 875, 877, 879], "about": [8, 9, 10, 11, 23, 56], "up": [8, 9, 23, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 58, 838, 853, 862], "sourc": [8, 9, 23, 868, 869, 871], "from": [8, 9, 10, 11, 23, 42, 43, 52, 59, 871], "result": [8, 9, 10, 11, 23, 57], "fine": [8, 9, 10, 11, 23], "tune": [8, 9, 10, 11, 23], "conclus": [8, 9, 10, 11, 23], "how": [10, 11, 38, 831, 837, 845, 853, 862, 863], "To": [10, 11, 62, 839], "paddlepaddl": [10, 11], "imag": [12, 13, 21, 22, 23, 73, 96, 266, 833, 845], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 843, 845, 858, 862, 870], "preprocess": [12, 13], "visualis": [12, 13, 21, 22], "initi": [12, 13, 21, 22, 809], "nativ": [12, 13, 21, 22, 843, 866], "pretrain": [12, 13, 21, 22], "weight": [12, 13, 21, 22], "mask": [12, 13], "backend": [12, 13, 26, 33, 44, 56, 57, 59, 60, 817, 820, 837, 844, 848, 858, 864, 868, 870], "acceler": [19, 20, 24, 25, 26], "mmpretrain": [19, 20], "resnet": [21, 22, 23, 63], "label": [21, 22], "resnet34": [21, 22], "resnet50": [21, 22], "few": 23, "pre": [23, 838, 854], "xgb_frontend": 26, "xgb": 26, "more": [26, 838, 866], "exhaust": 26, "v": [26, 37, 49, 52, 854, 870, 878], "number": [26, 797, 855], "boost": 26, "round": [26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 58, 296, 862], "fraction": 26, "build": [27, 28, 29, 60, 833, 845, 868], "top": [27, 28, 29, 840, 847], "haiku": 28, "develop": 30, "convolut": 30, "network": [30, 57, 60], "tutori": [31, 60], "And": 31, "learn": [31, 32, 831, 882], "basic": [31, 32, 56, 57, 839, 860], "write": [33, 41, 860, 863], "content": [33, 58], "handler": [33, 44, 819, 820, 868], "structur": [33, 44, 845, 858, 870], "api": [33, 44, 45, 837, 842, 846, 847, 858, 864, 868, 877, 878, 879, 880], "state": [33, 44, 45, 870, 878], "unifi": [34, 37, 46, 49, 50, 51, 56, 880], "trace": [35, 37, 38, 45, 706, 852], "lazi": [37, 49, 878], "eager": [37, 49, 878], "decor": [38, 51, 822, 852, 857, 863], "graph": [38, 44, 61, 869, 877, 883], "ani": [39, 40, 44, 45, 786], "odsc": 44, "tracer": [44, 869, 878, 883], "quickstart": 45, "get": [45, 831, 839, 871], "familiar": 45, "0": [46, 47, 48, 49, 53, 54], "1": [47, 49, 50, 51, 52, 55, 62, 882], "compil": [47, 49, 50, 51, 57, 878], "2": [48, 51, 53, 62, 882], "select": 50, "As": 51, "3": [52, 54, 55, 62], "dynam": [52, 60, 823, 844, 870], "static": 52, "todo": [52, 839], "explain": 52, "via": 52, "why": [52, 863, 875], "i": [52, 831, 845, 866], "true": 52, "default": [52, 558], "when": 52, "numpi": [52, 59, 860, 882], "fals": 52, "kornia": 53, "perceiv": 54, "stabl": 55, "diffus": 55, "oper": [56, 855, 865, 870], "ml": [56, 874], "chang": 56, "one": 56, "line": [56, 839], "No": [56, 838], "need": [56, 863], "worri": 56, "type": [56, 67, 90, 383, 645, 848, 856, 860, 870], "differ": 56, "them": 56, "all": [56, 785], "standalon": [56, 856], "defin": [56, 57, 58, 60], "optim": [56, 814], "input": [56, 57, 855], "loss": [56, 76, 99, 390, 653, 811], "loop": [56, 60], "check": [57, 854, 870], "simpl": 57, "neural": 57, "deepmind": [58, 59], "": [58, 60, 837, 845, 862], "perceiverio": [58, 59], "tabl": [58, 845, 848], "construct": 58, "some": 58, "helper": [58, 793, 794, 795, 796, 797, 799, 802, 808, 818, 825, 861, 863, 864], "pipelin": [58, 60, 799, 845, 847, 863, 870], "download": 58, "dataload": 58, "gpu": [59, 870], "introduct": [59, 62, 860, 861], "python3": 59, "8": 59, "setup": [59, 854], "kernel": 59, "clone": [59, 838, 847], "repo": [59, 838], "ivy_model": 59, "run": [59, 839, 842, 845, 853, 863], "let": 60, "we": [60, 863], "ar": 60, "mnist": 60, "thi": 60, "temporari": 60, "loader": 60, "util": [60, 84, 107, 401, 663, 804, 822], "plot": 60, "save": [60, 788], "huggingfac": 61, "deit": 61, "can": [61, 831], "html": 61, "file": 61, "browser": [61, 839], "interfac": 62, "telemetri": 62, "18": 63, "activ": [64, 86, 380, 641, 806], "convers": [65, 88, 857], "creation": [66, 89, 382, 644], "elementwis": [69, 92, 120, 385, 647], "experiment": [70, 93, 648, 837], "gener": [71, 94, 386, 649, 796, 858, 863, 866, 878], "gradient": [72, 95, 362, 387, 650, 858], "layer": [74, 97, 388, 651, 810], "linear": [75, 98, 389, 652, 675], "algebra": [75, 98, 389, 652], "manipul": [77, 100, 391, 654], "norm": [78, 101, 394, 657, 813], "random": [79, 102, 395, 658], "search": [80, 103, 396, 659], "sort": [82, 105, 398, 661, 774], "wrap": [85, 108, 857], "cp": 110, "tensor": [110, 111, 112, 113, 114, 117], "parafac2": 111, "tr": 112, "tt": 113, "tucker": [114, 464], "contain": [116, 839, 846], "factor": 117, "nest": [118, 393, 656], "gelu": 123, "hardswish": 124, "leaky_relu": 125, "log_softmax": 126, "mish": 127, "relu": 128, "sigmoid": 129, "softmax": 130, "softplu": 131, "softsign": 132, "cmp_i": 133, "cmp_isnot": 134, "for_loop": 135, "if_els": 136, "try_except": 137, "while_loop": 138, "arang": 139, "asarrai": 141, "copy_arrai": 142, "empti": 143, "empty_lik": 144, "ey": 145, "from_dlpack": 146, "note": [146, 157, 644], "frombuff": 147, "full": [148, 861], "full_lik": 149, "linspac": 150, "logspac": 151, "meshgrid": 152, "native_arrai": 153, "one_hot": 154, "ones": 155, "ones_lik": 156, "to_dlpack": 157, "tril": 158, "triu": 159, "triu_indic": 160, "zero": 161, "zeros_lik": 162, "as_ivy_dtyp": 163, "as_native_dtyp": 164, "astyp": 165, "broadcast_arrai": 166, "broadcast_to": 167, "can_cast": 168, "check_float": 169, "closest_valid_dtyp": 170, "default_complex_dtyp": 171, "default_dtyp": 172, "default_float_dtyp": 173, "default_int_dtyp": 174, "default_uint_dtyp": 175, "dtype": [176, 795, 855], "dtype_bit": 177, "finfo": 178, "function_supported_dtyp": 179, "function_unsupported_dtyp": 180, "iinfo": 181, "infer_default_dtyp": 182, "invalid_dtyp": 183, "is_bool_dtyp": 184, "is_complex_dtyp": 185, "is_float_dtyp": 186, "is_hashable_dtyp": 187, "is_int_dtyp": 188, "is_native_dtyp": 189, "is_uint_dtyp": 190, "promote_typ": 191, "promote_types_of_input": 192, "result_typ": 193, "set_default_complex_dtyp": 194, "set_default_dtyp": 195, "set_default_float_dtyp": 196, "set_default_int_dtyp": 197, "set_default_uint_dtyp": 198, "type_promote_arrai": 199, "unset_default_complex_dtyp": 200, "unset_default_dtyp": 201, "unset_default_float_dtyp": 202, "unset_default_int_dtyp": 203, "unset_default_uint_dtyp": 204, "valid_dtyp": 205, "as_ivy_dev": 206, "as_native_dev": 207, "clear_cached_mem_on_dev": 208, "default_devic": 209, "dev": 210, "dev_util": 211, "function_supported_devic": 212, "function_unsupported_devic": 213, "get_all_ivy_arrays_on_dev": 214, "gpu_is_avail": 215, "handle_soft_device_vari": 216, "num_cpu_cor": 217, "num_gpu": 218, "num_ivy_arrays_on_dev": 219, "percent_used_mem_on_dev": 220, "print_all_ivy_arrays_on_dev": 221, "set_default_devic": 222, "set_soft_device_mod": 223, "paramet": [223, 592, 593, 598, 599, 601, 602, 646, 649, 801, 806, 865], "set_split_factor": 224, "split_factor": 225, "split_func_cal": 226, "to_devic": 227, "total_mem_on_dev": 228, "tpu_is_avail": 229, "unset_default_devic": 230, "unset_soft_device_mod": 231, "used_mem_on_dev": 232, "ab": 233, "aco": 234, "acosh": 235, "add": [236, 850, 861], "angl": 237, "asin": 238, "asinh": 239, "atan": 240, "atan2": 241, "atanh": 242, "bitwise_and": 243, "bitwise_invert": 244, "bitwise_left_shift": 245, "bitwise_or": 246, "bitwise_right_shift": 247, "bitwise_xor": 248, "ceil": 249, "co": 250, "cosh": 251, "deg2rad": 252, "divid": 253, "equal": 254, "erf": 255, "exp": 256, "exp2": 257, "expm1": 258, "floor": 259, "floor_divid": 260, "fmin": 261, "fmod": 262, "gcd": 263, "greater": 264, "greater_equ": 265, "isfinit": 267, "isinf": 268, "isnan": 269, "isreal": 270, "lcm": 271, "less": 272, "less_equ": 273, "log": [274, 828, 838], "log10": 275, "log1p": 276, "log2": 277, "logaddexp": 278, "logaddexp2": 279, "logical_and": 280, "logical_not": 281, "logical_or": 282, "logical_xor": 283, "maximum": 284, "minimum": 285, "multipli": 286, "nan_to_num": 287, "neg": 288, "not_equ": 289, "posit": [290, 855], "pow": 291, "rad2deg": 292, "real": 293, "reciproc": 294, "remaind": 295, "sign": 297, "sin": 298, "sinh": 299, "sqrt": 300, "squar": 301, "subtract": 302, "tan": [303, 850, 861], "tanh": 304, "trapz": 305, "trunc": 306, "trunc_divid": 307, "celu": 308, "elu": 309, "hardshrink": 310, "hardsilu": 311, "hardtanh": 312, "logit": 313, "logsigmoid": 314, "prelu": 315, "relu6": 316, "scaled_tanh": 317, "selu": 318, "silu": 319, "softshrink": 320, "stanh": 321, "tanhshrink": 322, "threshold": 323, "thresholded_relu": 324, "blackman_window": 325, "eye_lik": 326, "hamming_window": 327, "hann_window": 328, "indic": 329, "kaiser_bessel_derived_window": 330, "kaiser_window": 331, "mel_weight_matrix": 332, "ndenumer": 333, "ndindex": 334, "polyv": 335, "random_cp": 336, "random_parafac2": 337, "random_tr": 338, "random_tt": 339, "random_tuck": 340, "tril_indic": 341, "trilu": 342, "unsorted_segment_mean": 343, "unsorted_segment_min": 344, "unsorted_segment_sum": 345, "vorbis_window": 346, "allclos": 347, "amax": 348, "amin": 349, "binar": 350, "conj": 351, "copysign": 352, "count_nonzero": 353, "diff": 354, "digamma": 355, "erfc": 356, "erfinv": 357, "fix": [358, 837, 853], "float_pow": 359, "fmax": 360, "frexp": 361, "hypot": 363, "isclos": 364, "ldexp": 365, "lerp": 366, "lgamma": 367, "modf": 368, "nansum": 369, "nextaft": 370, "signbit": 371, "sinc": 372, "sparsify_tensor": 373, "xlogi": 374, "zeta": 375, "reduc": 376, "bind_custom_gradient_funct": 377, "jvp": 378, "vjp": 379, "constant": [381, 642], "meta": [392, 655], "spars": 399, "adaptive_avg_pool1d": 402, "adaptive_avg_pool2d": 403, "adaptive_max_pool2d": 404, "adaptive_max_pool3d": 405, "area_interpol": 406, "avg_pool1d": 407, "avg_pool2d": 408, "avg_pool3d": 409, "dct": 410, "dft": 411, "dropout1d": 412, "dropout2d": 413, "dropout3d": 414, "embed": 415, "fft": 416, "fft2": 417, "generate_einsum_equ": 418, "get_interpolate_kernel": 419, "idct": 420, "ifft": 421, "ifftn": 422, "interp": 423, "interpol": 424, "max_pool1d": 425, "max_pool2d": 426, "max_pool3d": 427, "max_unpool1d": 428, "nearest_interpol": 429, "pool": 430, "reduce_window": 431, "rfft": 432, "rfftn": 433, "rnn": 434, "sliding_window": 435, "stft": 436, "adjoint": 437, "batched_out": 438, "cond": 439, "diagflat": 440, "dot": 441, "eig": [442, 687], "eigh_tridiagon": 443, "eigval": 444, "general_inner_product": 445, "higher_order_mo": 446, "initialize_tuck": 447, "khatri_rao": 448, "kron": 449, "kroneck": 450, "lu_factor": 451, "lu_solv": 452, "make_svd_non_neg": 453, "matrix_exp": 454, "mode_dot": 455, "multi_dot": 456, "multi_mode_dot": 457, "partial_tuck": 458, "solve_triangular": 459, "svd_flip": 460, "tensor_train": 461, "truncated_svd": 462, "tt_matrix_to_tensor": 463, "hinge_embedding_loss": 465, "huber_loss": 466, "kl_div": 467, "l1_loss": 468, "log_poisson_loss": 469, "poisson_nll_loss": 470, "smooth_l1_loss": 471, "soft_margin_loss": 472, "as_strid": 473, "associative_scan": 474, "atleast_1d": 475, "atleast_2d": 476, "atleast_3d": 477, "broadcast_shap": 478, "check_scalar": 479, "choos": 480, "column_stack": 481, "concat_from_sequ": 482, "dsplit": 483, "dstack": 484, "expand": 485, "fill_diagon": 486, "flatten": 487, "fliplr": 488, "flipud": 489, "fold": 490, "heavisid": 491, "hsplit": 492, "hstack": 493, "i0": 494, "matric": 495, "moveaxi": 496, "pad": 497, "pad_sequ": 498, "partial_fold": 499, "partial_tensor_to_vec": 500, "partial_unfold": 501, "partial_vec_to_tensor": 502, "put_along_axi": 503, "rot90": 504, "soft_threshold": 505, "take": 506, "take_along_axi": 507, "top_k": 508, "trim_zero": 509, "unflatten": 510, "unfold": 511, "unique_consecut": 512, "vsplit": 513, "vstack": 514, "batch_norm": 515, "group_norm": 516, "instance_norm": 517, "l1_normal": 518, "l2_normal": 519, "local_response_norm": 520, "lp_normal": 521, "bernoulli": 522, "beta": 523, "dirichlet": 524, "gamma": 525, "poisson": 526, "unravel_index": 527, "invert_permut": 528, "lexsort": 529, "is_ivy_sparse_arrai": 530, "is_native_sparse_arrai": 531, "native_sparse_arrai": 532, "native_sparse_array_to_indices_values_and_shap": 533, "bincount": 534, "corrcoef": 535, "cov": 536, "cummax": 537, "cummin": 538, "histogram": 539, "igamma": 540, "median": 541, "nanmean": 542, "nanmedian": 543, "nanmin": 544, "nanprod": 545, "quantil": 546, "optional_get_el": 547, "all_equ": 548, "arg_info": 549, "arg_nam": 550, "array_equ": 551, "assert_supports_inplac": 552, "cache_fn": 553, "clip_matrix_norm": 554, "clip_vector_norm": 555, "container_typ": 556, "current_backend_str": 557, "einops_rearrang": 559, "einops_reduc": 560, "einops_repeat": 561, "exist": [562, 833, 862], "fourier_encod": 563, "function_supported_devices_and_dtyp": 564, "function_unsupported_devices_and_dtyp": 565, "gather": 566, "gather_nd": 567, "get_all_arrays_in_memori": 568, "get_item": 569, "get_num_dim": 570, "get_referrers_recurs": 571, "has_nan": 572, "inplace_arrays_support": 573, "inplace_decr": 574, "inplace_incr": 575, "inplace_upd": 576, "inplace_variables_support": 577, "is_arrai": 578, "is_ivy_arrai": 579, "is_ivy_contain": 580, "is_ivy_nested_arrai": 581, "is_native_arrai": 582, "isin": 583, "isscalar": 584, "items": 585, "match_kwarg": 586, "multiprocess": [587, 798], "num_arrays_in_memori": 588, "print_all_arrays_in_memori": 589, "scatter_flat": 590, "scatter_nd": 591, "set_array_mod": 592, "set_exception_trace_mod": 593, "set_inplace_mod": 594, "set_item": 595, "set_min_bas": 596, "set_min_denomin": 597, "set_nestable_mod": 598, "set_precise_mod": 599, "set_queue_timeout": 600, "set_shape_array_mod": 601, "set_show_func_wrapper_trace_mod": 602, "set_tmp_dir": 603, "shape": [604, 660, 767, 768, 769, 770, 857, 870], "size": [605, 870], "stable_divid": 606, "stable_pow": 607, "stride": 608, "supports_inplace_upd": 609, "to_ivy_shap": 610, "to_list": 611, "to_native_shap": 612, "to_numpi": 613, "to_scalar": 614, "try_else_non": 615, "unset_array_mod": 616, "unset_exception_trace_mod": 617, "unset_inplace_mod": 618, "unset_min_bas": 619, "unset_min_denomin": 620, "unset_nestable_mod": 621, "unset_precise_mod": 622, "unset_queue_timeout": 623, "unset_shape_array_mod": 624, "unset_show_func_wrapper_trace_mod": 625, "unset_tmp_dir": 626, "value_is_nan": 627, "vmap": 628, "adam_step": 629, "adam_upd": 630, "execute_with_gradi": [631, 858], "grad": 632, "gradient_descent_upd": 633, "jac": 634, "lamb_upd": 635, "lars_upd": 636, "optimizer_upd": 637, "requires_gradi": 638, "stop_gradi": 639, "value_and_grad": 640, "control": [643, 870], "flow": [643, 870], "op": 643, "depend": [660, 767, 768, 769, 770], "output": [660, 767, 768, 769, 770], "conv": 664, "conv1d": 665, "conv1d_transpos": 666, "conv2d": 667, "conv2d_transpos": 668, "conv3d": 669, "conv3d_transpos": 670, "conv_general_dil": 671, "conv_general_transpos": 672, "depthwise_conv2d": 673, "dropout": 674, "lstm": 676, "lstm_updat": 677, "multi_head_attent": 678, "nm": 679, "roi_align": 680, "scaled_dot_product_attent": 681, "choleski": 682, "cross": 683, "det": 684, "diag": 685, "diagon": 686, "eigh": 688, "eigvalsh": 689, "inner": 690, "inv": 691, "matmul": 692, "matrix_norm": 693, "matrix_pow": 694, "matrix_rank": 695, "matrix_transpos": 696, "outer": 697, "pinv": 698, "qr": 699, "slogdet": 700, "solv": 701, "svd": 702, "svdval": 703, "tensordot": 704, "tensorsolv": 705, "vander": 707, "vecdot": 708, "vector_norm": 709, "vector_to_skew_symmetric_matrix": 710, "binary_cross_entropi": 711, "cross_entropi": 712, "sparse_cross_entropi": 713, "ssim_loss": 714, "wasserstein_loss_discrimin": 715, "wasserstein_loss_gener": 716, "clip": 717, "concat": 718, "constant_pad": 719, "expand_dim": 720, "flip": 721, "permute_dim": 722, "repeat": 723, "reshap": 724, "roll": [725, 850], "squeez": 727, "stack": [728, 852], "swapax": 729, "tile": 730, "unstack": 731, "zero_pad": 732, "fomaml_step": 733, "maml_step": 734, "reptile_step": 735, "all_nested_indic": 736, "copy_nest": 737, "duplicate_array_index_chain": 738, "index_nest": 739, "insert_into_nest_at_index": 740, "insert_into_nest_at_indic": 741, "map": [742, 847], "map_nest_at_index": 743, "map_nest_at_indic": 744, "multi_index_nest": 745, "nested_ani": 746, "nested_argwher": 747, "nested_map": 748, "nested_multi_map": 749, "prune_empti": 750, "prune_nest_at_index": 751, "prune_nest_at_indic": 752, "set_nest_at_index": 753, "set_nest_at_indic": 754, "layer_norm": 755, "multinomi": 756, "randint": 757, "random_norm": 758, "random_uniform": 759, "seed": 760, "shuffl": 761, "argmax": 762, "argmin": 763, "argwher": 764, "nonzero": 765, "where": [766, 837, 853], "unique_al": 767, "unique_count": 768, "unique_invers": 769, "unique_valu": 770, "argsort": 771, "msort": 772, "searchsort": 773, "cumprod": 775, "cumsum": 776, "einsum": [777, 824, 825], "max": 778, "mean": 779, "min": 780, "prod": 781, "std": 782, "sum": 783, "var": 784, "assert": [789, 816, 852], "avail": 790, "global": [792, 865], "hypothesi": [793, 838, 861, 863], "struct": 800, "flag": 801, "sequenti": 815, "ast": 818, "sub": 820, "binari": [821, 838], "parser": 824, "path": 825, "except": [826, 852, 857], "profil": 829, "verbos": 830, "machin": 831, "between": 831, "support": [831, 844, 848, 857, 860, 870], "start": [831, 871], "work": [831, 862, 881], "eagerli": 831, "provid": 831, "lazili": 831, "trace_graph": [831, 878], "document": 831, "contribut": [831, 832, 837, 862], "commun": 831, "citat": 831, "doc": [833, 845], "docker": [833, 838, 839, 845, 871], "conveni": [833, 845, 856], "script": [833, 845], "hub": 833, "local": [833, 839, 854], "without": [833, 861], "contributor": [834, 840], "reward": 834, "badg": 834, "tier": 834, "error": [835, 852, 853], "handl": [835, 843, 849, 852, 857, 870], "help": [836, 839, 853], "resourc": 836, "open": 837, "task": 837, "fail": [837, 853, 863], "frontend": [837, 844, 860, 861, 868], "place": 837, "checklist": 837, "format": [837, 854], "extend": [837, 863, 866], "an": [837, 858], "issu": [837, 839, 854, 871], "github": [837, 838], "templat": 837, "fork": [838, 839], "commit": [838, 839, 847, 854], "pycharm": [838, 839, 854], "virtual": 838, "miniconda": 838, "venv": 838, "interpret": 838, "window": 838, "maco": 838, "ubuntu": 838, "detail": 838, "free": 838, "wsl": 838, "codespac": 838, "The": [838, 839, 845, 858, 860, 870], "list": 839, "manag": 839, "who": 839, "ask": [839, 853], "With": 839, "command": 839, "pull": [839, 847], "request": [839, 847], "small": 839, "often": 839, "interact": 839, "most": 839, "out": [839, 855, 857, 859], "id": [839, 842], "program": 840, "core": 840, "rise": 840, "deep": 841, "dive": 841, "termin": 842, "regener": 842, "failur": 842, "skip": 842, "integr": [843, 847, 854, 862, 863], "version": [844, 864, 870], "builder": 845, "being": 845, "option": 845, "index": 845, "rst": 845, "partial_conf": 845, "py": 845, "prebuild": 845, "sh": 845, "extens": 845, "custom_autosummari": 845, "hide": 845, "discussion_link": 845, "skippable_funct": 845, "ivy_data": 845, "instanc": [846, 860, 861], "method": [846, 860, 861], "special": [846, 848, 860], "nestabl": [846, 855, 856, 857], "continu": [847, 854], "push": 847, "pr": 847, "trigger": 847, "A": [847, 866], "down": 847, "view": [847, 857, 859], "store": 847, "retriev": 847, "repositori": 847, "nitti": 847, "gritti": 847, "storag": 847, "space": 847, "unifyai": 847, "determin": 847, "coverag": 847, "workflow": 847, "multipl": 847, "runner": 847, "race": 847, "condit": 847, "period": 847, "manual": 847, "dispatch": 847, "ci": 847, "dashboard": 847, "promot": [848, 860], "precis": 848, "non": [848, 866], "argument": [848, 849, 855, 857, 859, 860], "other": [848, 849], "unsupport": 848, "attribut": [848, 865], "case": 848, "bug": 848, "cast": [848, 860], "superset": [848, 866], "docstr": [850, 851], "func_wrapp": 852, "prune": 852, "handle_except": 852, "consist": [852, 863], "prerequir": 853, "common": [853, 854], "lint": [854, 862], "keyword": 855, "integ": 855, "primari": 856, "composit": 856, "mix": [856, 857, 863], "partial": [856, 857, 863], "order": 857, "wrapper": 857, "miscellan": 857, "overview": [858, 862], "usag": [858, 862, 866, 880], "signatur": 858, "design": [858, 864, 867], "our": 858, "polici": [858, 860], "specif": 858, "consider": 858, "inplac": 859, "updat": 859, "copi": 859, "short": 860, "unus": 860, "rule": 860, "duplic": [860, 866], "alia": 861, "formatt": 862, "functionorderingformatt": 862, "own": 863, "strategi": 863, "ad": 863, "explicit": 863, "do": 863, "effect": 863, "bonu": 863, "self": 863, "test_array_funct": 863, "re": 863, "navig": 864, "categor": 864, "submodul": 864, "unpin": 864, "properti": 865, "getter": 865, "setter": 865, "set_": 865, "unset_": 865, "behaviour": 866, "what": 866, "effici": 866, "maxim": 866, "block": 868, "faq": 870, "maintain": 870, "deploy": 870, "auto": 870, "differenti": 870, "replica": 870, "parallel": 870, "altern": 870, "pip": 871, "folder": 871, "question": 871, "glossari": 872, "motiv": 873, "explos": 874, "One": 876, "liner": 876, "graph_transpil": 877, "sharp": [877, 878, 880], "bit": [877, 878, 880], "cach": 878, "relat": 881, "matlab": 882, "scipi": 882, "scikit": 882, "theano": 882, "panda": 882, "julia": 882, "apach": 882, "spark": 882, "mllib": 882, "caff": 882, "chainer": 882, "mxnet": 882, "cntk": 882, "flux": 882, "dex": 882, "languag": 882, "tf": 883, "jaxpr": 883, "jit": 883, "fx": 883, "onnx": 884}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"dtype": [[176, "dtype"]], "zeros": [[161, "zeros"]], "check_float": [[169, "check-float"]], "default_int_dtype": [[174, "default-int-dtype"]], "triu": [[159, "triu"]], "linspace": [[150, "linspace"]], "empty_like": [[144, "empty-like"]], "full_like": [[149, "full-like"]], "one_hot": [[154, "one-hot"]], "empty": [[143, "empty"]], "eye": [[145, "eye"]], "can_cast": [[168, "can-cast"]], "is_hashable_dtype": [[187, "is-hashable-dtype"]], "infer_default_dtype": [[182, "infer-default-dtype"]], "to_dlpack": [[157, "to-dlpack"]], "Note": [[157, null], [146, null], [644, null], [644, null]], "default_float_dtype": [[173, "default-float-dtype"]], "function_unsupported_dtypes": [[180, "function-unsupported-dtypes"]], "default_dtype": [[172, "default-dtype"]], "function_supported_dtypes": [[179, "function-supported-dtypes"]], "tril": [[158, "tril"]], "asarray": [[141, "asarray"]], "is_complex_dtype": [[185, "is-complex-dtype"]], "broadcast_to": [[167, "broadcast-to"]], "ones_like": [[156, "ones-like"]], "native_array": [[153, "native-array"]], "is_bool_dtype": [[184, "is-bool-dtype"]], "astype": [[165, "astype"]], "invalid_dtype": [[183, "invalid-dtype"]], "copy_array": [[142, "copy-array"]], "ones": [[155, "ones"]], "triu_indices": [[160, "triu-indices"]], "zeros_like": [[162, "zeros-like"]], "full": [[148, "full"]], "as_ivy_dtype": [[163, "as-ivy-dtype"]], "logspace": [[151, "logspace"]], "as_native_dtype": [[164, "as-native-dtype"]], "default_uint_dtype": [[175, "default-uint-dtype"]], "iinfo": [[181, "iinfo"]], "is_float_dtype": [[186, "is-float-dtype"]], "default_complex_dtype": [[171, "default-complex-dtype"]], "frombuffer": [[147, "frombuffer"]], "broadcast_arrays": [[166, "broadcast-arrays"]], "meshgrid": [[152, "meshgrid"]], "from_dlpack": [[146, "from-dlpack"]], "dtype_bits": [[177, "dtype-bits"]], "closest_valid_dtype": [[170, "closest-valid-dtype"]], "finfo": [[178, "finfo"]], "One liners": [[876, "one-liners"]], "Frameworks": [[882, "frameworks"]], "MATLAB matlab": [[882, "matlab-matlab"]], "SciPy scipy": [[882, "scipy-scipy"]], "Torch torch": [[882, "torch-torch"]], "NumPy numpy": [[882, "numpy-numpy"]], "SciKit Learn scikit-learn": [[882, "scikit-learn-scikit-learn"]], "Theano theano": [[882, "theano-theano"]], "Pandas pandas": [[882, "pandas-pandas"]], "Julia julia": [[882, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[882, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[882, "caffe-caffe"]], "Chainer chainer": [[882, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[882, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[882, "mxnet-mxnet"]], "CNTK cntk": [[882, "cntk-cntk"]], "PyTorch pytorch": [[882, "pytorch-pytorch"]], "Flux flux": [[882, "flux-flux"]], "JAX jax": [[882, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[882, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[882, "dex-language-dex-language"]], "Get Started": [[871, "get-started"]], "Installing using pip": [[871, "installing-using-pip"]], "Installing from source": [[871, "installing-from-source"]], "Docker": [[871, "docker"]], "Ivy Folder": [[871, "ivy-folder"]], "Issues and Questions": [[871, "issues-and-questions"]], "ML Explosion": [[874, "ml-explosion"]], "Motivation": [[873, "motivation"]], "Graph Tracers": [[883, "graph-tracers"]], "tf.Graph": [[883, "tf-graph"]], "Jaxpr": [[883, "jaxpr"]], "torch.jit": [[883, "torch-jit"]], "torch.fx": [[883, "torch-fx"]], "Navigating the Code": [[864, "navigating-the-code"]], "Categorization": [[864, "categorization"]], "Submodule Design": [[864, "submodule-design"]], "Ivy API": [[864, "ivy-api"]], "Backend API": [[864, "backend-api"]], "Submodule Helper Functions": [[864, "submodule-helper-functions"]], "Version Unpinning": [[864, "version-unpinning"]], "Formatting": [[854, "formatting"]], "Lint Checks": [[854, "lint-checks"], [854, "id2"]], "Setup Formatting Locally": [[854, "setup-formatting-locally"]], "Pre-commit": [[854, "pre-commit"]], "VS Code": [[854, "vs-code"]], "PyCharm": [[854, "pycharm"], [838, "pycharm"]], "Common Issues with Pre-Commit": [[854, "common-issues-with-pre-commit"]], "Continuous Integration": [[854, "continuous-integration"], [847, "continuous-integration"]], "Lint Formatting": [[854, "lint-formatting"]], "Function Types": [[856, "function-types"]], "Primary Functions": [[856, "primary-functions"]], "Compositional Functions": [[856, "compositional-functions"]], "Mixed Functions": [[856, "mixed-functions"]], "Partial Mixed Functions": [[856, "partial-mixed-functions"]], "Standalone Functions": [[856, "standalone-functions"]], "Nestable Functions": [[856, "nestable-functions"], [846, "nestable-functions"], [855, "nestable-functions"]], "Convenience Functions": [[856, "convenience-functions"]], "Operating Modes": [[865, "operating-modes"]], "Global Parameter Properties": [[865, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[865, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[865, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Glossary": [[872, "glossary"]], "Ivy as a Transpiler": [[869, "ivy-as-a-transpiler"], [44, "Ivy-as-a-Transpiler"], [45, "Ivy-as-a-Transpiler"]], "Source-to-Source Transpiler \u2705": [[869, "source-to-source-transpiler"], [868, "source-to-source-transpiler"]], "Graph Tracer \u2705": [[869, "graph-tracer"]], "Devices": [[849, "devices"]], "Device Module": [[849, "device-module"]], "Arguments in other Functions": [[849, "arguments-in-other-functions"], [848, "arguments-in-other-functions"]], "Device handling": [[849, "device-handling"]], "Function Wrapping": [[857, "function-wrapping"]], "Decorator order": [[857, "decorator-order"]], "Conversion Wrappers": [[857, "conversion-wrappers"]], "Inference Wrappers": [[857, "inference-wrappers"]], "Out Argument Support": [[857, "out-argument-support"]], "Nestable Support": [[857, "nestable-support"]], "Partial Mixed Function Support": [[857, "partial-mixed-function-support"]], "Shape Conversion": [[857, "shape-conversion"]], "View Handling": [[857, "view-handling"]], "Exception Handling": [[857, "exception-handling"], [852, "exception-handling"]], "Miscellaneous Wrappers": [[857, "miscellaneous-wrappers"]], "ivy.graph_transpile()": [[877, "ivy-graph-transpile"]], "Graph Transpiler API": [[877, "graph-transpiler-api"]], "Using the transpiler": [[877, "using-the-transpiler"]], "Transpiling functions": [[877, "transpiling-functions"]], "Transpiling Libraries": [[877, "transpiling-libraries"]], "Transpiling Modules": [[877, "transpiling-modules"]], "Sharp bits": [[877, "sharp-bits"], [878, "sharp-bits"], [880, "sharp-bits"]], "Examples": [[877, "examples"], [878, "examples"], [880, "examples"], [855, "examples"]], "Ivy Tests": [[863, "ivy-tests"], [847, "ivy-tests"]], "Testing Pipeline": [[863, "testing-pipeline"]], "Hypothesis": [[863, "id2"]], "Data Generation": [[863, "id3"]], "Writing your own strategy": [[863, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[863, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[863, "ivy-test-decorators"]], "Writing Ivy Tests": [[863, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[863, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[863, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[863, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[863, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[863, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[863, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[863, "self-consistent-and-explicit-testing"]], "test_array_function": [[863, "id5"]], "Running Ivy Tests": [[863, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[863, "re-running-failed-ivy-tests"]], "ivy.transpile()": [[879, "ivy-transpile"]], "Transpiler API": [[879, "transpiler-api"]], "Docstrings": [[851, "docstrings"]], "Inplace Updates": [[859, "inplace-updates"]], "out argument": [[859, "out-argument"]], "copy argument": [[859, "copy-argument"]], "Views": [[859, "views"]], "Containers": [[846, "containers"]], "Container Instance Methods": [[846, "container-instance-methods"]], "API Instance Methods": [[846, "api-instance-methods"]], "API Special Methods": [[846, "api-special-methods"]], "Docstring Examples": [[850, "docstring-examples"]], "ivy.tan": [[850, "ivy-tan"]], "ivy.roll": [[850, "ivy-roll"]], "ivy.add": [[850, "ivy-add"]], "Fix Failing Tests:": [[853, "fix-failing-tests"]], "Prerequirement:": [[853, "prerequirement"]], "Setting Up": [[853, "setting-up"], [838, "setting-up"]], "How to run tests": [[853, "how-to-run-tests"]], "Common Errors": [[853, "common-errors"]], "Where to ask for Help": [[853, "where-to-ask-for-help"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[862, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[862, "overview"], [858, "overview"]], "Existing Formatters": [[862, "existing-formatters"]], "FunctionOrderingFormatter": [[862, "functionorderingformatter"]], "How the Formatter Works:": [[862, "how-the-formatter-works"]], "Integration and Usage": [[862, "integration-and-usage"]], "Contribution": [[862, "contribution"]], "Round Up": [[862, "round-up"], [35, "Round-Up"], [37, "Round-Up"], [27, "Round-Up"], [34, "Round-Up"], [36, "Round-Up"], [46, "Round-Up"], [29, "Round-Up"], [39, "Round-Up"], [45, "Round-Up"], [33, "Round-Up"], [50, "Round-Up"], [48, "Round-Up"], [47, "Round-Up"], [58, "Round-Up"], [51, "Round-Up"], [49, "Round-Up"]], "Related Work": [[881, "related-work"]], "Ivy Exception Class": [[852, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[852, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[852, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[852, "handle-exceptions-decorator"]], "Consistency in Errors": [[852, "consistency-in-errors"]], "Assertion Function": [[852, "assertion-function"]], "Superset Behaviour": [[866, "superset-behaviour"]], "Extending the Standard": [[866, "extending-the-standard"]], "What is the Superset?": [[866, "what-is-the-superset"]], "A Non-Duplicate Superset": [[866, "a-non-duplicate-superset"]], "What is not the Superset?": [[866, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[866, "balancing-generalization-with-efficiency"]], "More Examples": [[866, "more-examples"]], "Maximizing Usage of Native Functionality": [[866, "maximizing-usage-of-native-functionality"]], "Design": [[867, "design"]], "Commit (Push/PR) Triggered Testing": [[847, "commit-push-pr-triggered-testing"]], "Implementation": [[847, "implementation"]], "A Top-Down View": [[847, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[847, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[847, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[847, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[847, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[847, "determine-test-coverage-workflow"]], "Multiple Runners": [[847, "multiple-runners"]], "Race Condition": [[847, "race-condition"]], "Array API Tests": [[847, "array-api-tests"], [842, "array-api-tests"]], "Periodic Testing": [[847, "periodic-testing"]], "Manually Dispatched Workflows": [[847, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[847, "ci-pipeline"]], "Push": [[847, "push"]], "Pull Request": [[847, "pull-request"]], "Dashboard": [[847, "dashboard"]], "Gradients": [[858, "gradients"], [95, "module-ivy.data_classes.container.gradients"], [650, "gradients"], [387, "gradients"], [72, "module-ivy.data_classes.array.gradients"]], "Example Usage of the Gradient API": [[858, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[858, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[858, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[858, "custom-gradient-functions"]], "Design of the Gradient API": [[858, "design-of-the-gradient-api"]], "Our policy on gradients": [[858, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[858, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[858, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[858, "framework-specific-considerations"]], "Building Blocks": [[868, "building-blocks"]], "Backend Functional APIs \u2705": [[868, "backend-functional-apis"]], "Ivy Functional API \u2705": [[868, "ivy-functional-api"]], "Frontend Functional APIs \u2705": [[868, "frontend-functional-apis"]], "Backend Handler \u2705": [[868, "backend-handler"]], "ivy.trace_graph()": [[878, "ivy-trace-graph"]], "Tracer API": [[878, "tracer-api"]], "Using the tracer": [[878, "using-the-tracer"]], "Eager vs lazy Compilation": [[878, "eager-vs-lazy-compilation"]], "Array caching": [[878, "array-caching"]], "Generators": [[878, "generators"]], "Stateful": [[878, "stateful"]], "ivy.unify()": [[880, "ivy-unify"]], "Unify API": [[880, "unify-api"]], "Usage": [[880, "usage"]], "Ivy Frontends": [[860, "ivy-frontends"]], "Introduction": [[860, "introduction"], [861, "introduction"], [59, "Introduction"]], "The Frontend Basics": [[860, "the-frontend-basics"]], "Writing Frontend Functions": [[860, "writing-frontend-functions"]], "Short Frontend Implementations": [[860, "short-frontend-implementations"]], "Unused Arguments": [[860, "unused-arguments"]], "Supported Data Types and Devices": [[860, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[860, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[860, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[860, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[860, "frontends-duplicate-policy"]], "Function Arguments": [[855, "function-arguments"]], "Positional and Keyword Arguments": [[855, "positional-and-keyword-arguments"]], "Input Arrays": [[855, "input-arrays"]], "out Argument": [[855, "out-argument"]], "dtype and device arguments": [[855, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[855, "numbers-in-operator-functions"]], "Integer Sequences": [[855, "integer-sequences"]], "Ivy Frontend Tests": [[861, "ivy-frontend-tests"]], "Frontend Test Examples": [[861, "frontend-test-examples"]], "ivy.tan()": [[861, "ivy-tan"]], "ivy.full()": [[861, "ivy-full"]], "Testing Without Using Tests Values": [[861, "testing-without-using-tests-values"]], "Alias functions": [[861, "alias-functions"]], "Frontend Instance Method Tests": [[861, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[861, "frontend-instance-method-test-examples"]], "ivy.add()": [[861, "ivy-add"]], "Hypothesis Helpers": [[861, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[861, "frontend-framework-testing-configuration"]], "Why Transpile?": [[875, "why-transpile"]], "Data Types": [[848, "data-types"]], "Data Type Module": [[848, "data-type-module"]], "Data Type Promotion": [[848, "data-type-promotion"]], "Precise Mode": [[848, "precise-mode"]], "Precise Promotion Table": [[848, "precise-promotion-table"]], "Non-Precise Promotion Table": [[848, "non-precise-promotion-table"]], "Supported and Unsupported Data Types": [[848, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[848, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[848, "special-case"]], "Backend Data Type Bugs": [[848, "backend-data-type-bugs"]], "Data Type Casting Modes": [[848, "data-type-casting-modes"]], "Superset Data Type Support": [[848, "superset-data-type-support"]], "Comparing Ivy with ONNX": [[884, "comparing-ivy-with-onnx"]], "ONNX onnx": [[884, "onnx-onnx"]], "ivy": [[884, "ivy"]], "FAQ": [[870, "faq"]], "Maintaining Backend Versions": [[870, "maintaining-backend-versions"]], "Dynamic Sizes": [[870, "dynamic-sizes"]], "Type and Shape Checking": [[870, "type-and-shape-checking"]], "GPU handling": [[870, "gpu-handling"]], "Model Deployment": [[870, "model-deployment"]], "Dynamic Control Flow": [[870, "dynamic-control-flow"]], "Auto-Differentiation": [[870, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[870, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[870, "support-for-functions"]], "Alternative Data Structures": [[870, "alternative-data-structures"]], "Custom Operations": [[870, "custom-operations"]], "The Pipeline": [[870, "the-pipeline"]], "State": [[870, "state"]], "Deep Dive": [[841, "deep-dive"]], "Assertions": [[816, "module-ivy.utils.assertions"], [789, "module-ivy_tests.test_ivy.helpers.assertions"]], "Contributor Program": [[840, "contributor-program"]], "Contributor": [[840, "contributor"]], "Core Contributor": [[840, "core-contributor"]], "Rising Contributor": [[840, "rising-contributor"]], "Top Contributor": [[840, "top-contributor"]], "Sub backend handler": [[820, "module-ivy.utils.backend.sub_backend_handler"]], "Binaries": [[821, "module-ivy.utils.binaries"]], "Handler": [[819, "module-ivy.utils.backend.handler"]], "Utils": [[804, "utils"]], "Ast helpers": [[818, "module-ivy.utils.backend.ast_helpers"]], "Einsum parser": [[824, "module-ivy.utils.einsum_parser"]], "Building the Docs": [[833, "building-the-docs"]], "Building the Docs using Docker": [[833, "building-the-docs-using-docker"]], "Using convenience script": [[833, "using-convenience-script"]], "Using existing image on Docker Hub": [[833, "using-existing-image-on-docker-hub"]], "Building the image locally": [[833, "building-the-image-locally"]], "Building the Docs without Docker": [[833, "building-the-docs-without-docker"]], "Initializers": [[809, "module-ivy.stateful.initializers"]], "Optimizers": [[814, "module-ivy.stateful.optimizers"]], "Losses": [[811, "module-ivy.stateful.losses"], [99, "module-ivy.data_classes.container.losses"], [653, "losses"], [390, "losses"], [76, "module-ivy.data_classes.array.losses"]], "Test parameter flags": [[801, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Helpers": [[808, "module-ivy.stateful.helpers"]], "Open Tasks": [[837, "open-tasks"]], "Fixing Failing Tests": [[837, "fixing-failing-tests"]], "How to Contribute": [[837, "how-to-contribute"]], "Frontend APIs": [[837, "frontend-apis"]], "Where to place a frontend function": [[837, "where-to-place-a-frontend-function"]], "Frontend checklist": [[837, "frontend-checklist"]], "Function Formatting": [[837, "function-formatting"]], "Formatting checklist": [[837, "formatting-checklist"]], "Ivy Experimental API": [[837, "ivy-experimental-api"]], "Extending the Ivy API": [[837, "extending-the-ivy-api"]], "Where to place a backend function": [[837, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[837, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Testing": [[805, "testing"], [58, "Testing"]], "Logging": [[828, "module-ivy.utils.logging"]], "Contributing": [[832, "contributing"], [831, "contributing"]], "Helpful Resources": [[836, "helpful-resources"]], "Contributor Rewards": [[834, "contributor-rewards"]], "Badges": [[834, "badges"]], "Badge Tiers": [[834, "badge-tiers"]], "Pipeline helper": [[799, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Converters": [[807, "module-ivy.stateful.converters"]], "Einsum path helpers": [[825, "module-ivy.utils.einsum_path_helpers"]], "Profiler": [[829, "module-ivy.utils.profiler"]], "Testing helpers": [[802, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Verbosity": [[830, "module-ivy.utils.verbosity"]], "Running the Tests": [[842, "running-the-tests"]], "Using Terminal": [[842, "using-terminal"]], "Using the IDE": [[842, "using-the-ide"]], "Regenerating Test Failures": [[842, "regenerating-test-failures"]], "Test Skipping": [[842, "test-skipping"]], "Layers": [[810, "module-ivy.stateful.layers"], [97, "module-ivy.data_classes.container.layers"], [651, "layers"], [388, "layers"], [74, "module-ivy.data_classes.array.layers"]], "Building the Docs Pipeline": [[845, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[845, "how-the-doc-builder-is-being-run"]], "The convenience script": [[845, "the-convenience-script"]], "Options": [[845, "options"]], "The Docker image": [[845, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[845, "how-ivy-s-docs-is-structured"]], "index.rst": [[845, "index-rst"]], "partial_conf.py": [[845, "partial-conf-py"]], "prebuild.sh": [[845, "prebuild-sh"]], "Custom Extensions": [[845, "custom-extensions"]], "custom_autosummary": [[845, "custom-autosummary"]], ":hide-table:": [[845, "hide-table"]], "discussion_linker": [[845, "discussion-linker"]], "skippable_function": [[845, "skippable-function"]], "ivy_data": [[845, "ivy-data"]], "Sequential": [[815, "module-ivy.stateful.sequential"]], "Inspection": [[827, "module-ivy.utils.inspection"]], "Activations": [[806, "module-ivy.stateful.activations"], [641, "activations"], [380, "activations"], [86, "module-ivy.data_classes.container.activations"], [64, "module-ivy.data_classes.array.activations"]], "Parameter": [[806, "parameter"], [806, "id1"], [601, "parameter"], [602, "parameter"], [599, "parameter"], [592, "parameter"], [593, "parameter"], [598, "parameter"], [649, "parameter"], [649, "id1"], [649, "id2"], [649, "id3"], [649, "id4"], [649, "id5"], [646, "parameter"], [223, "parameter"]], "Arrays": [[843, "arrays"]], "Native Array": [[843, "native-array"]], "Ivy Array": [[843, "ivy-array"]], "Array Handling": [[843, "array-handling"]], "Integrating custom classes with Ivy": [[843, "integrating-custom-classes-with-ivy"]], "Exceptions": [[826, "module-ivy.utils.exceptions"]], "Framework classes": [[803, "framework-classes"]], "Error Handling": [[835, "error-handling"]], "Forking and cloning the repo": [[838, "forking-and-cloning-the-repo"]], "Pre-Commit": [[838, "pre-commit"]], "Virtual environments - No Docker": [[838, "virtual-environments-no-docker"]], "Using miniconda": [[838, "using-miniconda"]], "Using venv": [[838, "using-venv"]], "Docker Interpreter with PyCharm": [[838, "docker-interpreter-with-pycharm"]], "Windows": [[838, "windows"], [838, "id6"]], "MacOS": [[838, "macos"]], "Ubuntu": [[838, "ubuntu"], [838, "id8"]], "Setting Up Testing in PyCharm": [[838, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[838, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[838, "setting-up-for-free"]], "WSL": [[838, "wsl"]], "GitHub Codespaces": [[838, "github-codespaces"]], "The Binaries": [[838, "the-binaries"]], "The Basics": [[839, "the-basics"]], "Getting Help": [[839, "getting-help"]], "ToDo List Issues": [[839, "todo-list-issues"]], "Managing Your Fork": [[839, "managing-your-fork"]], "Who To Ask": [[839, "who-to-ask"]], "With Command Line:": [[839, "with-command-line"]], "With Browser:": [[839, "with-browser"]], "Pull Requests": [[839, "pull-requests"]], "Small Commits Often": [[839, "small-commits-often"]], "Interactive Ivy Docker Container": [[839, "interactive-ivy-docker-container"]], "Running Tests Locally": [[839, "running-tests-locally"]], "With Docker": [[839, "with-docker"]], "Getting the most out of IDE": [[839, "getting-the-most-out-of-ide"]], "with PyCharm": [[839, "with-pycharm"]], "Structs": [[800, "module-ivy_tests.test_ivy.helpers.structs"]], "Backend": [[817, "backend"]], "Decorator utils": [[822, "module-ivy.utils.decorator_utils"]], "Convert Machine Learning Code Between Frameworks": [[831, "convert-machine-learning-code-between-frameworks"]], "Installing ivy": [[831, "installing-ivy"]], "Supported Frameworks": [[831, "supported-frameworks"]], "Getting started": [[831, "getting-started"]], "Using ivy": [[831, "using-ivy"]], "How ivy works?": [[831, "how-ivy-works"]], "ivy.transpile will eagerly transpile if a class or function is provided": [[831, "ivy-transpile-will-eagerly-transpile-if-a-class-or-function-is-provided"]], "ivy.transpile will lazily transpile if a module (library) is provided": [[831, "ivy-transpile-will-lazily-transpile-if-a-module-library-is-provided"]], "ivy.trace_graph can be used eagerly or lazily": [[831, "ivy-trace-graph-can-be-used-eagerly-or-lazily"]], "Documentation": [[831, "documentation"]], "Community": [[831, "community"]], "Citation": [[831, "citation"]], "Backend Setting": [[844, "backend-setting"]], "Dynamic Backend Setting": [[844, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[844, "backend-and-frontend-version-support"]], "Norms": [[813, "module-ivy.stateful.norms"], [101, "module-ivy.data_classes.container.norms"], [657, "norms"], [394, "norms"], [78, "module-ivy.data_classes.array.norms"]], "Module": [[812, "module-ivy.stateful.module"]], "Dynamic import": [[823, "module-ivy.utils.dynamic_import"]], "try_except": [[137, "try-except"]], "Nested array": [[118, "nested-array"]], "Data classes": [[121, "data-classes"]], "Linear algebra": [[98, "module-ivy.data_classes.container.linear_algebra"], [652, "linear-algebra"], [389, "linear-algebra"], [75, "module-ivy.data_classes.array.linear_algebra"]], "Statistical": [[106, "module-ivy.data_classes.container.statistical"], [662, "statistical"], [400, "statistical"], [83, "module-ivy.data_classes.array.statistical"]], "Tr tensor": [[112, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "General": [[94, "module-ivy.data_classes.container.general"], [649, "general"], [386, "general"], [71, "module-ivy.data_classes.array.general"]], "cmp_is": [[133, "cmp-is"]], "while_loop": [[138, "while-loop"]], "Array": [[115, "array"]], "for_loop": [[135, "for-loop"]], "Manipulation": [[100, "module-ivy.data_classes.container.manipulation"], [654, "manipulation"], [391, "manipulation"], [77, "module-ivy.data_classes.array.manipulation"]], "softplus": [[131, "softplus"]], "array": [[140, "array"]], "gelu": [[123, "gelu"]], "Container": [[116, "container"]], "relu": [[128, "relu"]], "Searching": [[103, "module-ivy.data_classes.container.searching"], [659, "searching"], [396, "searching"], [80, "module-ivy.data_classes.array.searching"]], "Elementwise": [[120, "module-ivy.data_classes.nested_array.elementwise"], [647, "elementwise"], [385, "elementwise"], [69, "module-ivy.data_classes.array.elementwise"], [92, "module-ivy.data_classes.container.elementwise"]], "Tt tensor": [[113, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Set": [[104, "module-ivy.data_classes.container.set"], [660, "set"], [397, "module-ivy.functional.ivy.experimental.set"], [81, "module-ivy.data_classes.array.set"]], "Sorting": [[105, "module-ivy.data_classes.container.sorting"], [661, "sorting"], [398, "sorting"], [82, "module-ivy.data_classes.array.sorting"]], "Image": [[96, "module-ivy.data_classes.container.image"], [73, "module-ivy.data_classes.array.image"]], "hardswish": [[124, "hardswish"]], "Functions": [[122, "functions"]], "Tucker tensor": [[114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Utility": [[107, "module-ivy.data_classes.container.utility"], [663, "utility"], [401, "utility"], [84, "module-ivy.data_classes.array.utility"]], "log_softmax": [[126, "log-softmax"]], "Wrapping": [[108, "module-ivy.data_classes.container.wrapping"], [85, "module-ivy.data_classes.array.wrapping"]], "sigmoid": [[129, "sigmoid"]], "softsign": [[132, "softsign"]], "cmp_isnot": [[134, "cmp-isnot"]], "Base": [[119, "module-ivy.data_classes.nested_array.base"], [109, "module-ivy.data_classes.factorized_tensor.base"], [87, "module-ivy.data_classes.container.base"]], "softmax": [[130, "softmax"]], "Random": [[102, "module-ivy.data_classes.container.random"], [658, "random"], [395, "random"], [79, "module-ivy.data_classes.array.random"]], "Factorized tensor": [[117, "factorized-tensor"]], "arange": [[139, "arange"]], "leaky_relu": [[125, "leaky-relu"]], "if_else": [[136, "if-else"]], "Parafac2 tensor": [[111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "mish": [[127, "mish"]], "Cp tensor": [[110, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "nonzero": [[765, "nonzero"]], "argmin": [[763, "argmin"]], "cumprod": [[775, "cumprod"]], "Array helpers": [[794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "cumsum": [[776, "cumsum"]], "Dtype helpers": [[795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "sort": [[774, "sort"]], "min": [[780, "min"]], "random_normal": [[758, "random-normal"]], "unique_all": [[767, "unique-all"]], "Data-dependent output shape": [[767, null], [769, null], [768, null], [770, null], [660, null], [660, null], [660, null], [660, null]], "std": [[782, "std"]], "Number helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "argsort": [[771, "argsort"]], "multinomial": [[756, "multinomial"]], "General helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "argmax": [[762, "argmax"]], "seed": [[760, "seed"]], "sum": [[783, "sum"]], "set_nest_at_indices": [[754, "set-nest-at-indices"]], "unique_inverse": [[769, "unique-inverse"]], "Function testing": [[791, "module-ivy_tests.test_ivy.helpers.function_testing"]], "Globals": [[792, "module-ivy_tests.test_ivy.helpers.globals"]], "shuffle": [[761, "shuffle"]], "msort": [[772, "msort"]], "all": [[785, "all"]], "max": [[778, "max"]], "unique_counts": [[768, "unique-counts"]], "save": [[788, "save"]], "random_uniform": [[759, "random-uniform"]], "Hypothesis helpers": [[793, "hypothesis-helpers"]], "searchsorted": [[773, "searchsorted"]], "prod": [[781, "prod"]], "einsum": [[777, "einsum"]], "layer_norm": [[755, "layer-norm"]], "Multiprocessing": [[798, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "unique_values": [[770, "unique-values"]], "load": [[787, "load"]], "randint": [[757, "randint"]], "argwhere": [[764, "argwhere"]], "var": [[784, "var"]], "set_nest_at_index": [[753, "set-nest-at-index"]], "where": [[766, "where"]], "any": [[786, "any"]], "Available frameworks": [[790, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "prune_nest_at_indices": [[752, "prune-nest-at-indices"]], "mean": [[779, "mean"]], "squeeze": [[727, "squeeze"]], "roll": [[725, "roll"]], "map": [[742, "map"]], "binary_cross_entropy": [[711, "binary-cross-entropy"]], "ssim_loss": [[714, "ssim-loss"]], "wasserstein_loss_generator": [[716, "wasserstein-loss-generator"]], "all_nested_indices": [[736, "all-nested-indices"]], "trace": [[706, "trace"]], "wasserstein_loss_discriminator": [[715, "wasserstein-loss-discriminator"]], "copy_nest": [[737, "copy-nest"]], "insert_into_nest_at_index": [[740, "insert-into-nest-at-index"]], "nested_map": [[748, "nested-map"]], "zero_pad": [[732, "zero-pad"]], "prune_nest_at_index": [[751, "prune-nest-at-index"]], "fomaml_step": [[733, "fomaml-step"]], "vander": [[707, "vander"]], "nested_argwhere": [[747, "nested-argwhere"]], "nested_multi_map": [[749, "nested-multi-map"]], "vector_to_skew_symmetric_matrix": [[710, "vector-to-skew-symmetric-matrix"]], "prune_empty": [[750, "prune-empty"]], "insert_into_nest_at_indices": [[741, "insert-into-nest-at-indices"]], "split": [[726, "split"]], "maml_step": [[734, "maml-step"]], "index_nest": [[739, "index-nest"]], "nested_any": [[746, "nested-any"]], "sparse_cross_entropy": [[713, "sparse-cross-entropy"]], "expand_dims": [[720, "expand-dims"]], "clip": [[717, "clip"]], "tile": [[730, "tile"]], "reshape": [[724, "reshape"]], "vector_norm": [[709, "vector-norm"]], "vecdot": [[708, "vecdot"]], "tensorsolve": [[705, "tensorsolve"]], "duplicate_array_index_chains": [[738, "duplicate-array-index-chains"]], "map_nest_at_index": [[743, "map-nest-at-index"]], "stack": [[728, "stack"]], "cross_entropy": [[712, "cross-entropy"]], "flip": [[721, "flip"]], "concat": [[718, "concat"]], "repeat": [[723, "repeat"]], "reptile_step": [[735, "reptile-step"]], "constant_pad": [[719, "constant-pad"]], "swapaxes": [[729, "swapaxes"]], "multi_index_nest": [[745, "multi-index-nest"]], "map_nest_at_indices": [[744, "map-nest-at-indices"]], "permute_dims": [[722, "permute-dims"]], "unstack": [[731, "unstack"]], "roi_align": [[680, "roi-align"]], "slogdet": [[700, "slogdet"]], "lstm_update": [[677, "lstm-update"]], "eig": [[687, "eig"], [442, "eig"]], "inv": [[691, "inv"]], "nms": [[679, "nms"]], "matrix_norm": [[693, "matrix-norm"]], "svdvals": [[703, "svdvals"]], "linear": [[675, "linear"]], "dropout": [[674, "dropout"]], "scaled_dot_product_attention": [[681, "scaled-dot-product-attention"]], "conv": [[664, "conv"]], "multi_head_attention": [[678, "multi-head-attention"]], "conv3d": [[669, "conv3d"]], "det": [[684, "det"]], "solve": [[701, "solve"]], "svd": [[702, "svd"]], "matrix_power": [[694, "matrix-power"]], "inner": [[690, "inner"]], "qr": [[699, "qr"]], "conv1d": [[665, "conv1d"]], "cross": [[683, "cross"]], "pinv": [[698, "pinv"]], "conv1d_transpose": [[666, "conv1d-transpose"]], "diagonal": [[686, "diagonal"]], "conv_general_transpose": [[672, "conv-general-transpose"]], "eigvalsh": [[689, "eigvalsh"]], "lstm": [[676, "lstm"]], "eigh": [[688, "eigh"]], "cholesky": [[682, "cholesky"]], "tensordot": [[704, "tensordot"]], "matmul": [[692, "matmul"]], "matrix_rank": [[695, "matrix-rank"]], "conv_general_dilated": [[671, "conv-general-dilated"]], "matrix_transpose": [[696, "matrix-transpose"]], "depthwise_conv2d": [[673, "depthwise-conv2d"]], "diag": [[685, "diag"]], "conv3d_transpose": [[670, "conv3d-transpose"]], "conv2d_transpose": [[668, "conv2d-transpose"]], "conv2d": [[667, "conv2d"]], "outer": [[697, "outer"]], "get_item": [[569, "get-item"]], "function_unsupported_devices_and_dtypes": [[565, "function-unsupported-devices-and-dtypes"]], "inplace_increment": [[575, "inplace-increment"]], "stable_divide": [[606, "stable-divide"]], "set_item": [[595, "set-item"]], "gather": [[566, "gather"]], "set_shape_array_mode": [[601, "set-shape-array-mode"]], "shape": [[604, "shape"]], "inplace_variables_supported": [[577, "inplace-variables-supported"]], "stable_pow": [[607, "stable-pow"]], "supports_inplace_updates": [[609, "supports-inplace-updates"]], "itemsize": [[585, "itemsize"]], "isscalar": [[584, "isscalar"]], "set_show_func_wrapper_trace_mode": [[602, "set-show-func-wrapper-trace-mode"]], "strides": [[608, "strides"]], "get_num_dims": [[570, "get-num-dims"]], "inplace_update": [[576, "inplace-update"]], "is_native_array": [[582, "is-native-array"]], "is_ivy_nested_array": [[581, "is-ivy-nested-array"]], "is_ivy_array": [[579, "is-ivy-array"]], "num_arrays_in_memory": [[588, "num-arrays-in-memory"]], "isin": [[583, "isin"]], "inplace_decrement": [[574, "inplace-decrement"]], "set_precise_mode": [[599, "set-precise-mode"]], "inplace_arrays_supported": [[573, "inplace-arrays-supported"]], "is_array": [[578, "is-array"]], "scatter_nd": [[591, "scatter-nd"]], "set_array_mode": [[592, "set-array-mode"]], "set_min_base": [[596, "set-min-base"]], "set_tmp_dir": [[603, "set-tmp-dir"]], "function_supported_devices_and_dtypes": [[564, "function-supported-devices-and-dtypes"]], "set_min_denominator": [[597, "set-min-denominator"]], "get_all_arrays_in_memory": [[568, "get-all-arrays-in-memory"]], "set_queue_timeout": [[600, "set-queue-timeout"]], "scatter_flat": [[590, "scatter-flat"]], "set_exception_trace_mode": [[593, "set-exception-trace-mode"]], "multiprocessing": [[587, "multiprocessing"]], "set_nestable_mode": [[598, "set-nestable-mode"]], "size": [[605, "size"]], "is_ivy_container": [[580, "is-ivy-container"]], "get_referrers_recursive": [[571, "get-referrers-recursive"]], "has_nans": [[572, "has-nans"]], "match_kwargs": [[586, "match-kwargs"]], "set_inplace_mode": [[594, "set-inplace-mode"]], "print_all_arrays_in_memory": [[589, "print-all-arrays-in-memory"]], "to_ivy_shape": [[610, "to-ivy-shape"]], "gather_nd": [[567, "gather-nd"]], "lp_normalize": [[521, "lp-normalize"]], "native_sparse_array_to_indices_values_and_shape": [[533, "native-sparse-array-to-indices-values-and-shape"]], "container_types": [[556, "container-types"]], "instance_norm": [[517, "instance-norm"]], "invert_permutation": [[528, "invert-permutation"]], "bincount": [[534, "bincount"]], "clip_matrix_norm": [[554, "clip-matrix-norm"]], "l1_normalize": [[518, "l1-normalize"]], "corrcoef": [[535, "corrcoef"]], "cache_fn": [[553, "cache-fn"]], "histogram": [[539, "histogram"]], "cummin": [[538, "cummin"]], "igamma": [[540, "igamma"]], "array_equal": [[551, "array-equal"]], "nanprod": [[545, "nanprod"]], "einops_rearrange": [[559, "einops-rearrange"]], "cummax": [[537, "cummax"]], "quantile": [[546, "quantile"]], "arg_names": [[550, "arg-names"]], "beta": [[523, "beta"]], "fourier_encode": [[563, "fourier-encode"]], "l2_normalize": [[519, "l2-normalize"]], "nanmedian": [[543, "nanmedian"]], "is_ivy_sparse_array": [[530, "is-ivy-sparse-array"]], "bernoulli": [[522, "bernoulli"]], "default": [[558, "default"]], "all_equal": [[548, "all-equal"]], "arg_info": [[549, "arg-info"]], "is_native_sparse_array": [[531, "is-native-sparse-array"]], "einops_repeat": [[561, "einops-repeat"]], "native_sparse_array": [[532, "native-sparse-array"]], "nanmin": [[544, "nanmin"]], "einops_reduce": [[560, "einops-reduce"]], "exists": [[562, "exists"]], "dirichlet": [[524, "dirichlet"]], "unravel_index": [[527, "unravel-index"]], "gamma": [[525, "gamma"]], "optional_get_element": [[547, "optional-get-element"]], "clip_vector_norm": [[555, "clip-vector-norm"]], "cov": [[536, "cov"]], "nanmean": [[542, "nanmean"]], "median": [[541, "median"]], "current_backend_str": [[557, "current-backend-str"]], "local_response_norm": [[520, "local-response-norm"]], "poisson": [[526, "poisson"]], "lexsort": [[529, "lexsort"]], "assert_supports_inplace": [[552, "assert-supports-inplace"]], "unset_shape_array_mode": [[624, "unset-shape-array-mode"]], "jac": [[634, "jac"]], "Constants": [[642, "module-ivy.functional.ivy.constants"], [381, "module-ivy.functional.ivy.experimental.constants"]], "stop_gradient": [[639, "stop-gradient"]], "Nest": [[656, "nest"], [393, "module-ivy.functional.ivy.experimental.nest"]], "execute_with_gradients": [[631, "execute-with-gradients"]], "unset_tmp_dir": [[626, "unset-tmp-dir"]], "Creation": [[644, "creation"], [382, "creation"], [89, "module-ivy.data_classes.container.creation"], [66, "module-ivy.data_classes.array.creation"]], "unset_precise_mode": [[622, "unset-precise-mode"]], "Experimental": [[648, "experimental"], [93, "module-ivy.data_classes.container.experimental"], [70, "module-ivy.data_classes.array.experimental"]], "unset_array_mode": [[616, "unset-array-mode"]], "vmap": [[628, "vmap"]], "Control flow ops": [[643, "control-flow-ops"]], "to_native_shape": [[612, "to-native-shape"]], "unset_min_base": [[619, "unset-min-base"]], "requires_gradient": [[638, "requires-gradient"]], "gradient_descent_update": [[633, "gradient-descent-update"]], "unset_nestable_mode": [[621, "unset-nestable-mode"]], "unset_queue_timeout": [[623, "unset-queue-timeout"]], "grad": [[632, "grad"]], "value_is_nan": [[627, "value-is-nan"]], "to_numpy": [[613, "to-numpy"]], "adam_update": [[630, "adam-update"]], "Meta": [[655, "meta"], [392, "module-ivy.functional.ivy.experimental.meta"]], "unset_exception_trace_mode": [[617, "unset-exception-trace-mode"]], "to_scalar": [[614, "to-scalar"]], "optimizer_update": [[637, "optimizer-update"]], "adam_step": [[629, "adam-step"]], "lars_update": [[636, "lars-update"]], "unset_min_denominator": [[620, "unset-min-denominator"]], "value_and_grad": [[640, "value-and-grad"]], "try_else_none": [[615, "try-else-none"]], "Device": [[646, "device"], [384, "module-ivy.functional.ivy.experimental.device"], [68, "module-ivy.data_classes.array.device"], [91, "module-ivy.data_classes.container.device"]], "Data type": [[645, "data-type"], [383, "module-ivy.functional.ivy.experimental.data_type"], [90, "module-ivy.data_classes.container.data_type"], [67, "module-ivy.data_classes.array.data_type"]], "to_list": [[611, "to-list"]], "unset_inplace_mode": [[618, "unset-inplace-mode"]], "lamb_update": [[635, "lamb-update"]], "unset_show_func_wrapper_trace_mode": [[625, "unset-show-func-wrapper-trace-mode"]], "as_strided": [[473, "as-strided"]], "unfold": [[511, "unfold"]], "unique_consecutive": [[512, "unique-consecutive"]], "group_norm": [[516, "group-norm"]], "moveaxis": [[496, "moveaxis"]], "broadcast_shapes": [[478, "broadcast-shapes"]], "hstack": [[493, "hstack"]], "expand": [[485, "expand"]], "soft_margin_loss": [[472, "soft-margin-loss"]], "vstack": [[514, "vstack"]], "dstack": [[484, "dstack"]], "unflatten": [[510, "unflatten"]], "heaviside": [[491, "heaviside"]], "pad_sequence": [[498, "pad-sequence"]], "atleast_3d": [[477, "atleast-3d"]], "batch_norm": [[515, "batch-norm"]], "fold": [[490, "fold"]], "take_along_axis": [[507, "take-along-axis"]], "smooth_l1_loss": [[471, "smooth-l1-loss"]], "flipud": [[489, "flipud"]], "take": [[506, "take"]], "i0": [[494, "i0"]], "poisson_nll_loss": [[470, "poisson-nll-loss"]], "choose": [[480, "choose"]], "pad": [[497, "pad"]], "top_k": [[508, "top-k"]], "put_along_axis": [[503, "put-along-axis"]], "dsplit": [[483, "dsplit"]], "partial_vec_to_tensor": [[502, "partial-vec-to-tensor"]], "soft_thresholding": [[505, "soft-thresholding"]], "concat_from_sequence": [[482, "concat-from-sequence"]], "trim_zeros": [[509, "trim-zeros"]], "check_scalar": [[479, "check-scalar"]], "flatten": [[487, "flatten"]], "atleast_1d": [[475, "atleast-1d"]], "associative_scan": [[474, "associative-scan"]], "atleast_2d": [[476, "atleast-2d"]], "column_stack": [[481, "column-stack"]], "fliplr": [[488, "fliplr"]], "hsplit": [[492, "hsplit"]], "fill_diagonal": [[486, "fill-diagonal"]], "vsplit": [[513, "vsplit"]], "partial_unfold": [[501, "partial-unfold"]], "matricize": [[495, "matricize"]], "partial_fold": [[499, "partial-fold"]], "rot90": [[504, "rot90"]], "partial_tensor_to_vec": [[500, "partial-tensor-to-vec"]], "cond": [[439, "cond"]], "sliding_window": [[435, "sliding-window"]], "interp": [[423, "interp"]], "kron": [[449, "kron"]], "huber_loss": [[466, "huber-loss"]], "batched_outer": [[438, "batched-outer"]], "truncated_svd": [[462, "truncated-svd"]], "make_svd_non_negative": [[453, "make-svd-non-negative"]], "max_pool1d": [[425, "max-pool1d"]], "nearest_interpolate": [[429, "nearest-interpolate"]], "general_inner_product": [[445, "general-inner-product"]], "interpolate": [[424, "interpolate"]], "max_unpool1d": [[428, "max-unpool1d"]], "pool": [[430, "pool"]], "stft": [[436, "stft"]], "matrix_exp": [[454, "matrix-exp"]], "tt_matrix_to_tensor": [[463, "tt-matrix-to-tensor"]], "rfftn": [[433, "rfftn"]], "rnn": [[434, "rnn"]], "eigvals": [[444, "eigvals"]], "l1_loss": [[468, "l1-loss"]], "hinge_embedding_loss": [[465, "hinge-embedding-loss"]], "initialize_tucker": [[447, "initialize-tucker"]], "dot": [[441, "dot"]], "multi_dot": [[456, "multi-dot"]], "max_pool3d": [[427, "max-pool3d"]], "solve_triangular": [[459, "solve-triangular"]], "svd_flip": [[460, "svd-flip"]], "log_poisson_loss": [[469, "log-poisson-loss"]], "tucker": [[464, "tucker"]], "lu_factor": [[451, "lu-factor"]], "mode_dot": [[455, "mode-dot"]], "khatri_rao": [[448, "khatri-rao"]], "diagflat": [[440, "diagflat"]], "partial_tucker": [[458, "partial-tucker"]], "rfft": [[432, "rfft"]], "reduce_window": [[431, "reduce-window"]], "lu_solve": [[452, "lu-solve"]], "max_pool2d": [[426, "max-pool2d"]], "higher_order_moment": [[446, "higher-order-moment"]], "tensor_train": [[461, "tensor-train"]], "kl_div": [[467, "kl-div"]], "multi_mode_dot": [[457, "multi-mode-dot"]], "eigh_tridiagonal": [[443, "eigh-tridiagonal"]], "kronecker": [[450, "kronecker"]], "adjoint": [[437, "adjoint"]], "sparsify_tensor": [[373, "sparsify-tensor"]], "lgamma": [[367, "lgamma"]], "conj": [[351, "conj"]], "unsorted_segment_min": [[344, "unsorted-segment-min"]], "binarizer": [[350, "binarizer"]], "hypot": [[363, "hypot"]], "mel_weight_matrix": [[332, "mel-weight-matrix"]], "erfinv": [[357, "erfinv"]], "lerp": [[366, "lerp"]], "modf": [[368, "modf"]], "random_tr": [[338, "random-tr"]], "random_tt": [[339, "random-tt"]], "copysign": [[352, "copysign"]], "digamma": [[355, "digamma"]], "random_parafac2": [[337, "random-parafac2"]], "fmax": [[360, "fmax"]], "nansum": [[369, "nansum"]], "polyval": [[335, "polyval"]], "sinc": [[372, "sinc"]], "float_power": [[359, "float-power"]], "ndenumerate": [[333, "ndenumerate"]], "tril_indices": [[341, "tril-indices"]], "trilu": [[342, "trilu"]], "allclose": [[347, "allclose"]], "fix": [[358, "fix"]], "random_tucker": [[340, "random-tucker"]], "ndindex": [[334, "ndindex"]], "erfc": [[356, "erfc"]], "signbit": [[371, "signbit"]], "unsorted_segment_sum": [[345, "unsorted-segment-sum"]], "nextafter": [[370, "nextafter"]], "unsorted_segment_mean": [[343, "unsorted-segment-mean"]], "amax": [[348, "amax"]], "zeta": [[375, "zeta"]], "xlogy": [[374, "xlogy"]], "kaiser_bessel_derived_window": [[330, "kaiser-bessel-derived-window"]], "indices": [[329, "indices"]], "ldexp": [[365, "ldexp"]], "gradient": [[362, "gradient"]], "diff": [[354, "diff"]], "isclose": [[364, "isclose"]], "frexp": [[361, "frexp"]], "kaiser_window": [[331, "kaiser-window"]], "count_nonzero": [[353, "count-nonzero"]], "vorbis_window": [[346, "vorbis-window"]], "random_cp": [[336, "random-cp"]], "amin": [[349, "amin"]], "dropout3d": [[414, "dropout3d"]], "vjp": [[379, "vjp"]], "adaptive_max_pool3d": [[405, "adaptive-max-pool3d"]], "dropout2d": [[413, "dropout2d"]], "avg_pool2d": [[408, "avg-pool2d"]], "Sparse array": [[399, "sparse-array"]], "adaptive_avg_pool2d": [[403, "adaptive-avg-pool2d"]], "embedding": [[415, "embedding"]], "dft": [[411, "dft"]], "ifftn": [[422, "ifftn"]], "dct": [[410, "dct"]], "area_interpolate": [[406, "area-interpolate"]], "reduce": [[376, "reduce"]], "get_interpolate_kernel": [[419, "get-interpolate-kernel"]], "idct": [[420, "idct"]], "ifft": [[421, "ifft"]], "adaptive_max_pool2d": [[404, "adaptive-max-pool2d"]], "fft": [[416, "fft"]], "jvp": [[378, "jvp"]], "dropout1d": [[412, "dropout1d"]], "generate_einsum_equation": [[418, "generate-einsum-equation"]], "adaptive_avg_pool1d": [[402, "adaptive-avg-pool1d"]], "avg_pool1d": [[407, "avg-pool1d"]], "bind_custom_gradient_function": [[377, "bind-custom-gradient-function"]], "avg_pool3d": [[409, "avg-pool3d"]], "fft2": [[417, "fft2"]], "tanh": [[304, "tanh"]], "elu": [[309, "elu"]], "celu": [[308, "celu"]], "prelu": [[315, "prelu"]], "minimum": [[285, "minimum"]], "nan_to_num": [[287, "nan-to-num"]], "subtract": [[302, "subtract"]], "hardshrink": [[310, "hardshrink"]], "square": [[301, "square"]], "pow": [[291, "pow"]], "reciprocal": [[294, "reciprocal"]], "logical_or": [[282, "logical-or"]], "tanhshrink": [[322, "tanhshrink"]], "remainder": [[295, "remainder"]], "hardtanh": [[312, "hardtanh"]], "trunc_divide": [[307, "trunc-divide"]], "sqrt": [[300, "sqrt"]], "maximum": [[284, "maximum"]], "logical_xor": [[283, "logical-xor"]], "sign": [[297, "sign"]], "threshold": [[323, "threshold"]], "softshrink": [[320, "softshrink"]], "thresholded_relu": [[324, "thresholded-relu"]], "logsigmoid": [[314, "logsigmoid"]], "blackman_window": [[325, "blackman-window"]], "sinh": [[299, "sinh"]], "trapz": [[305, "trapz"]], "hardsilu": [[311, "hardsilu"]], "trunc": [[306, "trunc"]], "negative": [[288, "negative"]], "sin": [[298, "sin"]], "logit": [[313, "logit"]], "silu": [[319, "silu"]], "hamming_window": [[327, "hamming-window"]], "hann_window": [[328, "hann-window"]], "relu6": [[316, "relu6"]], "eye_like": [[326, "eye-like"]], "tan": [[303, "tan"]], "positive": [[290, "positive"]], "real": [[293, "real"]], "multiply": [[286, "multiply"]], "not_equal": [[289, "not-equal"]], "round": [[296, "round"]], "stanh": [[321, "stanh"]], "rad2deg": [[292, "rad2deg"]], "selu": [[318, "selu"]], "scaled_tanh": [[317, "scaled-tanh"]], "set_default_float_dtype": [[196, "set-default-float-dtype"]], "percent_used_mem_on_dev": [[220, "percent-used-mem-on-dev"]], "dev": [[210, "dev"]], "is_native_dtype": [[189, "is-native-dtype"]], "valid_dtype": [[205, "valid-dtype"]], "num_gpus": [[218, "num-gpus"]], "split_factor": [[225, "split-factor"]], "unset_default_uint_dtype": [[204, "unset-default-uint-dtype"]], "used_mem_on_dev": [[232, "used-mem-on-dev"]], "clear_cached_mem_on_dev": [[208, "clear-cached-mem-on-dev"]], "set_split_factor": [[224, "set-split-factor"]], "result_type": [[193, "result-type"]], "promote_types_of_inputs": [[192, "promote-types-of-inputs"]], "set_default_device": [[222, "set-default-device"]], "promote_types": [[191, "promote-types"]], "function_unsupported_devices": [[213, "function-unsupported-devices"]], "split_func_call": [[226, "split-func-call"]], "to_device": [[227, "to-device"]], "gpu_is_available": [[215, "gpu-is-available"]], "as_native_dev": [[207, "as-native-dev"]], "get_all_ivy_arrays_on_dev": [[214, "get-all-ivy-arrays-on-dev"]], "set_default_complex_dtype": [[194, "set-default-complex-dtype"]], "abs": [[233, "abs"]], "set_default_uint_dtype": [[198, "set-default-uint-dtype"]], "unset_soft_device_mode": [[231, "unset-soft-device-mode"]], "type_promote_arrays": [[199, "type-promote-arrays"]], "set_default_int_dtype": [[197, "set-default-int-dtype"]], "handle_soft_device_variable": [[216, "handle-soft-device-variable"]], "print_all_ivy_arrays_on_dev": [[221, "print-all-ivy-arrays-on-dev"]], "num_ivy_arrays_on_dev": [[219, "num-ivy-arrays-on-dev"]], "set_default_dtype": [[195, "set-default-dtype"]], "function_supported_devices": [[212, "function-supported-devices"]], "num_cpu_cores": [[217, "num-cpu-cores"]], "dev_util": [[211, "dev-util"]], "unset_default_float_dtype": [[202, "unset-default-float-dtype"]], "unset_default_device": [[230, "unset-default-device"]], "acos": [[234, "acos"]], "as_ivy_dev": [[206, "as-ivy-dev"]], "set_soft_device_mode": [[223, "set-soft-device-mode"]], "unset_default_dtype": [[201, "unset-default-dtype"]], "total_mem_on_dev": [[228, "total-mem-on-dev"]], "tpu_is_available": [[229, "tpu-is-available"]], "default_device": [[209, "default-device"]], "is_int_dtype": [[188, "is-int-dtype"]], "unset_default_complex_dtype": [[200, "unset-default-complex-dtype"]], "unset_default_int_dtype": [[203, "unset-default-int-dtype"]], "is_uint_dtype": [[190, "is-uint-dtype"]], "Write a model using Ivy": [[41, "Write-a-model-using-Ivy"]], "Accelerating PyTorch models with JAX": [[24, "Accelerating-PyTorch-models-with-JAX"], [25, "Accelerating-PyTorch-models-with-JAX"]], "Using Ivy ResNet": [[21, "Using-Ivy-ResNet"], [22, "Using-Ivy-ResNet"]], "Installation": [[21, "Installation"], [5, "Installation"], [23, "Installation"], [4, "Installation"], [22, "Installation"]], "Imports": [[21, "Imports"], [26, "Imports"], [12, "Imports"], [22, "Imports"], [13, "Imports"]], "Data Preparation": [[21, "Data-Preparation"], [5, "Data-Preparation"], [12, "Data-Preparation"], [4, "Data-Preparation"], [6, "Data-Preparation"], [22, "Data-Preparation"], [7, "Data-Preparation"], [13, "Data-Preparation"]], "Prepare the set of labels": [[21, "Prepare-the-set-of-labels"], [22, "Prepare-the-set-of-labels"]], "Load the image example \ud83d\uddbc\ufe0f": [[21, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [12, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [22, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [13, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[21, "Visualise-image"], [12, "Visualise-image"], [22, "Visualise-image"], [13, "Visualise-image"]], "Model Inference ResNet34": [[21, "Model-Inference-ResNet34"], [22, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[21, "Initializing-Native-Torch-ResNet34"], [22, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[21, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [22, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[21, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [21, "id1"], [22, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [22, "id1"]], "Model Inference ResNet50": [[21, "Model-Inference-ResNet50"], [22, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[21, "Initializing-Native-Torch-ResNet50"], [22, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[21, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [22, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Trace code": [[35, "Trace-code"]], "Ivy AlexNet demo": [[5, "Ivy-AlexNet-demo"], [4, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[5, "Ivy-AlexNet-inference-in-Torch"], [4, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[5, "TensorFlow-inference"], [4, "TensorFlow-inference"]], "JAX inference": [[5, "JAX-inference"], [4, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[5, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [4, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "How To Convert Models from PyTorch to PaddlePaddle": [[11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[11, "About-the-Model"], [10, "About-the-Model"]], "Transpiling the Model": [[11, "Transpiling-the-Model"], [10, "Transpiling-the-Model"]], "Comparing the results": [[11, "Comparing-the-results"], [9, "Comparing-the-results"], [23, "Comparing-the-results"], [10, "Comparing-the-results"], [8, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[11, "Fine-tuning-the-transpiled-model"], [9, "Fine-tuning-the-transpiled-model"], [23, "Fine-tuning-the-transpiled-model"], [10, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[11, "Conclusion"], [9, "Conclusion"], [23, "Conclusion"], [10, "Conclusion"], [8, "Conclusion"]], "Accelerating MMPreTrain models with JAX": [[19, "Accelerating-MMPreTrain-models-with-JAX"], [20, "Accelerating-MMPreTrain-models-with-JAX"]], "Examples and Demos": [[3, "examples-and-demos"], [31, "examples-and-demos"]], "Accelerating XGBoost with JAX": [[26, "Accelerating-XGBoost-with-JAX"]], "Tests": [[26, "Tests"]], "Loading the Data": [[26, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[26, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[26, "JAX-backend"]], "Tensorflow backend": [[26, "Tensorflow-backend"]], "PyTorch backend": [[26, "PyTorch-backend"]], "More exhaustive example": [[26, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[26, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[26, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[26, "Comparison-of-Metrics"]], "Tutorials And Examples": [[31, "tutorials-and-examples"]], "Learn the basics": [[31, "learn-the-basics"], [32, "learn-the-basics"]], "Image Segmentation with Ivy UNet": [[12, "Image-Segmentation-with-Ivy-UNet"], [13, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[12, "Custom-Preprocessing"], [13, "Custom-Preprocessing"]], "Model Inference": [[12, "Model-Inference"], [13, "Model-Inference"]], "Initializing Native Torch UNet": [[12, "Initializing-Native-Torch-UNet"], [13, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[12, "Custom-masking-function"], [13, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[12, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [13, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[12, "TensorFlow-backend"], [13, "TensorFlow-backend"]], "JAX": [[12, "JAX"], [13, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[12, "Appendix:-the-Ivy-native-implementation-of-UNet"], [13, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Transpiling Functions from PyTorch to TensorFlow": [[42, "Transpiling-Functions-from-PyTorch-to-TensorFlow"]], "Using TensorFlow Models in your PyTorch Projects": [[9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[9, "Framework-Incompatibility"], [23, "Framework-Incompatibility"], [8, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[9, "Transpiling-a-TensorFlow-model-to-PyTorch"], [8, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[9, "About-the-transpiled-model"], [23, "About-the-transpiled-model"], [8, "About-the-transpiled-model"]], "Setting-up the source model": [[9, "Setting-up-the-source-model"], [23, "Setting-up-the-source-model"], [8, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [23, "Converting-the-model-from-TensorFlow-to-PyTorch"], [8, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Training PyTorch ResNet in your TensorFlow Projects": [[23, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Transpiling a PyTorch model to TensorFlow": [[23, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "Load the Data": [[23, "Load-the-Data"]], "Visualize a few images": [[23, "Visualize-a-few-images"]], "Load the pre-trained model": [[23, "Load-the-pre-trained-model"]], "Developing a convolutional network using Ivy": [[30, "Developing-a-convolutional-network-using-Ivy"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Transpiling a haiku model to build on top": [[28, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpiling Models from PyTorch to TensorFlow": [[43, "Transpiling-Models-from-PyTorch-to-TensorFlow"]], "# Ivy Bert Demo": [[6, "#-Ivy-Bert-Demo"], [7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[6, "Install-the-dependecies"], [7, "Install-the-dependecies"]], "Import the modules": [[6, "Import-the-modules"], [7, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[6, "Ivy-inference-with-Sequence-Classification"], [7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[6, "Ivy-model-inference-with-tensorflow"], [7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[6, "Ivy-model-inference-with-Jax"], [7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[6, "Ivy-model-inference-with-torch"], [7, "Ivy-model-inference-with-torch"]], "Lazy vs Eager": [[37, "Lazy-vs-Eager"]], "Unify": [[37, "Unify"], [50, "Unify"], [51, "Unify"], [49, "Unify"]], "Trace": [[37, "Trace"], [38, "Trace"]], "Transpile": [[37, "Transpile"], [50, "Transpile"], [51, "Transpile"], [49, "Transpile"]], "Transpiling a PyTorch model to build on top": [[27, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Unify code": [[34, "Unify-code"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "Transpile code": [[36, "Transpile-code"]], "Transpile any model": [[40, "Transpile-any-model"]], "Round up": [[40, "Round-up"]], "0.0: Unify": [[46, "0.0:-Unify"]], "Transpiling a Tensorflow model to build on top": [[29, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "ODSC Ivy Demo": [[44, "ODSC-Ivy-Demo"]], "Ivy as a Framework": [[44, "Ivy-as-a-Framework"]], "Ivy Backend Handler": [[44, "Ivy-Backend-Handler"], [33, "Ivy-Backend-Handler"]], "Data Structures": [[44, "Data-Structures"], [33, "Data-Structures"]], "Ivy Functional API": [[44, "Ivy-Functional-API"], [33, "Ivy-Functional-API"]], "Ivy Stateful API": [[44, "Ivy-Stateful-API"], [33, "Ivy-Stateful-API"]], "Graph Tracer": [[44, "Graph-Tracer"]], "Any function": [[44, "Any-function"], [45, "Any-function"]], "Any library": [[44, "Any-library"], [45, "Any-library"]], "Any model": [[44, "Any-model"], [45, "Any-model"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Importing Ivy": [[0, "Importing-Ivy"], [33, "Importing-Ivy"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Transpile any library": [[39, "Transpile-any-library"]], "How to use decorators": [[38, "How-to-use-decorators"]], "Graph Transpile": [[38, "Graph-Transpile"]], "Transpile \ud83d\udea7": [[38, "Transpile-\ud83d\udea7"]], "Quickstart": [[45, "Quickstart"]], "Get familiar with Ivy": [[45, "Get-familiar-with-Ivy"]], "Functional API": [[45, "Functional-API"]], "Stateful API": [[45, "Stateful-API"]], "Tracing code": [[45, "Tracing-code"]], "Write Ivy code": [[33, "Write-Ivy-code"]], "Contents": [[33, "Contents"]], "Installing Ivy": [[33, "Installing-Ivy"]], "gcd": [[263, "gcd"]], "atan": [[240, "atan"]], "greater": [[264, "greater"]], "floor_divide": [[260, "floor-divide"]], "bitwise_xor": [[248, "bitwise-xor"]], "log": [[274, "log"]], "fmod": [[262, "fmod"]], "less": [[272, "less"]], "log2": [[277, "log2"]], "cos": [[250, "cos"]], "angle": [[237, "angle"]], "lcm": [[271, "lcm"]], "atanh": [[242, "atanh"]], "asinh": [[239, "asinh"]], "isinf": [[268, "isinf"]], "ceil": [[249, "ceil"]], "asin": [[238, "asin"]], "logaddexp2": [[279, "logaddexp2"]], "divide": [[253, "divide"]], "isreal": [[270, "isreal"]], "isfinite": [[267, "isfinite"]], "logaddexp": [[278, "logaddexp"]], "erf": [[255, "erf"]], "bitwise_invert": [[244, "bitwise-invert"]], "greater_equal": [[265, "greater-equal"]], "exp": [[256, "exp"]], "add": [[236, "add"]], "log10": [[275, "log10"]], "bitwise_and": [[243, "bitwise-and"]], "cosh": [[251, "cosh"]], "isnan": [[269, "isnan"]], "deg2rad": [[252, "deg2rad"]], "fmin": [[261, "fmin"]], "atan2": [[241, "atan2"]], "less_equal": [[273, "less-equal"]], "log1p": [[276, "log1p"]], "expm1": [[258, "expm1"]], "logical_and": [[280, "logical-and"]], "logical_not": [[281, "logical-not"]], "acosh": [[235, "acosh"]], "exp2": [[257, "exp2"]], "imag": [[266, "imag"]], "floor": [[259, "floor"]], "bitwise_right_shift": [[247, "bitwise-right-shift"]], "bitwise_left_shift": [[245, "bitwise-left-shift"]], "bitwise_or": [[246, "bitwise-or"]], "equal": [[254, "equal"]], "1.1: Framework Selection": [[50, "1.1:-Framework-Selection"]], "Compile": [[50, "Compile"], [51, "Compile"], [49, "Compile"]], "Ivy as a Transpiler Introduction": [[62, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[62, "To-use-the-transpiler:"]], "Transpiler Interface": [[62, "Transpiler-Interface"]], "Telemetry": [[62, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[62, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[62, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[62, "3.-Transpile-Models-\ud83c\udf10"]], "0.2: Transpile": [[48, "0.2:-Transpile"]], "1.3: Dynamic vs Static": [[52, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[52, "Dynamic"]], "Static": [[52, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[52, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Conversions": [[65, "module-ivy.data_classes.array.conversions"], [88, "module-ivy.data_classes.container.conversions"]], "Compilation of a Basic Function": [[57, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[57, "Installs-\ud83d\udcbe"], [56, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[57, "Imports-\ud83d\udec3"], [56, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[57, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[57, "Function-compilation-\ud83d\udee0"]], "Set backend": [[57, "Set-backend"]], "Sample input": [[57, "Sample-input"]], "Define function to compile": [[57, "Define-function-to-compile"]], "Compile the function": [[57, "Compile-the-function"]], "Check results": [[57, "Check-results"], [57, "id1"]], "Compiling simple neural network \ud83e\udde0": [[57, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[57, "Define-Model"], [56, "Define-Model"]], "Create model": [[57, "Create-model"]], "Define input": [[57, "Define-input"]], "Compile network": [[57, "Compile-network"]], "0.1: Compile": [[47, "0.1:-Compile"]], "Basic Operations with Ivy": [[56, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[56, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[56, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[56, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[56, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[56, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[56, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[56, "Set-Backend-Framework"]], "Create Model": [[56, "Create-Model"]], "Create Optimizer": [[56, "Create-Optimizer"]], "Input and Target": [[56, "Input-and-Target"]], "Loss Function": [[56, "Loss-Function"]], "Training Loop": [[56, "Training-Loop"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[58, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[58, "Table-of-Contents"]], "Defining the model": [[58, "Defining-the-model"]], "Model construction": [[58, "Model-construction"]], "Some helper functions": [[58, "Some-helper-functions"]], "Transpiling the model": [[58, "Transpiling-the-model"]], "PyTorch pipeline": [[58, "PyTorch-pipeline"]], "Dataset download": [[58, "Dataset-download"]], "DataLoader": [[58, "DataLoader"]], "Training": [[58, "Training"]], "3.0: Perceiver": [[54, "3.0:-Perceiver"]], "Deepmind PerceiverIO on GPU": [[59, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[59, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[59, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[59, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[59, "Run-the-demo..."]], "\u2026with torch backend": [[59, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[59, "....with-tensorflow-backend"]], "\u2026with jax backend": [[59, "...with-jax-backend"]], "\u2026with numpy backend": [[59, "...with-numpy-backend"]], "1.2: As a Decorator": [[51, "1.2:-As-a-Decorator"]], "1.0: Lazy vs Eager": [[49, "1.0:-Lazy-vs-Eager"]], "End-to-End Training Pipeline in Ivy": [[60, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[60, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[60, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[60, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[60, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[60, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[60, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[60, "Plotting-the-training-metrics"]], "Save the trained Model": [[60, "Save-the-trained-Model"]], "2.0: Kornia": [[53, "2.0:-Kornia"]], "Resnet 18": [[63, "Resnet-18"]], "3.1: Stable Diffusion": [[55, "3.1:-Stable-Diffusion"]], "HuggingFace Tensorflow DeiT": [[61, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[61, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[64, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[64, "module-ivy.data_classes.array.activations"], [65, "module-ivy.data_classes.array.conversions"], [66, "module-ivy.data_classes.array.creation"], [67, "module-ivy.data_classes.array.data_type"], [68, "module-ivy.data_classes.array.device"], [69, "module-ivy.data_classes.array.elementwise"], [70, "module-ivy.data_classes.array.experimental"], [70, "module-ivy.data_classes.array.experimental.activations"], [70, "module-ivy.data_classes.array.experimental.conversions"], [70, "module-ivy.data_classes.array.experimental.creation"], [70, "module-ivy.data_classes.array.experimental.data_type"], [70, "module-ivy.data_classes.array.experimental.device"], [70, "module-ivy.data_classes.array.experimental.elementwise"], [70, "module-ivy.data_classes.array.experimental.general"], [70, "module-ivy.data_classes.array.experimental.gradients"], [70, "module-ivy.data_classes.array.experimental.image"], [70, "module-ivy.data_classes.array.experimental.layers"], [70, "module-ivy.data_classes.array.experimental.linear_algebra"], [70, "module-ivy.data_classes.array.experimental.losses"], [70, "module-ivy.data_classes.array.experimental.manipulation"], [70, "module-ivy.data_classes.array.experimental.norms"], [70, "module-ivy.data_classes.array.experimental.random"], [70, "module-ivy.data_classes.array.experimental.searching"], [70, "module-ivy.data_classes.array.experimental.set"], [70, "module-ivy.data_classes.array.experimental.sorting"], [70, "module-ivy.data_classes.array.experimental.statistical"], [70, "module-ivy.data_classes.array.experimental.utility"], [71, "module-ivy.data_classes.array.general"], [72, "module-ivy.data_classes.array.gradients"], [73, "module-ivy.data_classes.array.image"], [74, "module-ivy.data_classes.array.layers"], [75, "module-ivy.data_classes.array.linear_algebra"], [76, "module-ivy.data_classes.array.losses"], [77, "module-ivy.data_classes.array.manipulation"], [78, "module-ivy.data_classes.array.norms"], [79, "module-ivy.data_classes.array.random"], [80, "module-ivy.data_classes.array.searching"], [81, "module-ivy.data_classes.array.set"], [82, "module-ivy.data_classes.array.sorting"], [83, "module-ivy.data_classes.array.statistical"], [84, "module-ivy.data_classes.array.utility"], [85, "module-ivy.data_classes.array.wrapping"], [86, "module-ivy.data_classes.container.activations"], [87, "module-ivy.data_classes.container.base"], [88, "module-ivy.data_classes.container.conversions"], [89, "module-ivy.data_classes.container.creation"], [90, "module-ivy.data_classes.container.data_type"], [91, "module-ivy.data_classes.container.device"], [92, "module-ivy.data_classes.container.elementwise"], [93, "module-ivy.data_classes.container.experimental"], [93, "module-ivy.data_classes.container.experimental.activations"], [93, "module-ivy.data_classes.container.experimental.conversions"], [93, "module-ivy.data_classes.container.experimental.creation"], [93, "module-ivy.data_classes.container.experimental.data_type"], [93, "module-ivy.data_classes.container.experimental.device"], [93, "module-ivy.data_classes.container.experimental.elementwise"], [93, "module-ivy.data_classes.container.experimental.general"], [93, "module-ivy.data_classes.container.experimental.gradients"], [93, "module-ivy.data_classes.container.experimental.image"], [93, "module-ivy.data_classes.container.experimental.layers"], [93, "module-ivy.data_classes.container.experimental.linear_algebra"], [93, "module-ivy.data_classes.container.experimental.losses"], [93, "module-ivy.data_classes.container.experimental.manipulation"], [93, "module-ivy.data_classes.container.experimental.norms"], [93, "module-ivy.data_classes.container.experimental.random"], [93, "module-ivy.data_classes.container.experimental.searching"], [93, "module-ivy.data_classes.container.experimental.set"], [93, "module-ivy.data_classes.container.experimental.sorting"], [93, "module-ivy.data_classes.container.experimental.statistical"], [93, "module-ivy.data_classes.container.experimental.utility"], [94, "module-ivy.data_classes.container.general"], [95, "module-ivy.data_classes.container.gradients"], [96, "module-ivy.data_classes.container.image"], [97, "module-ivy.data_classes.container.layers"], [98, "module-ivy.data_classes.container.linear_algebra"], [99, "module-ivy.data_classes.container.losses"], [100, "module-ivy.data_classes.container.manipulation"], [101, "module-ivy.data_classes.container.norms"], [102, "module-ivy.data_classes.container.random"], [103, "module-ivy.data_classes.container.searching"], [104, "module-ivy.data_classes.container.set"], [105, "module-ivy.data_classes.container.sorting"], [106, "module-ivy.data_classes.container.statistical"], [107, "module-ivy.data_classes.container.utility"], [108, "module-ivy.data_classes.container.wrapping"], [109, "module-ivy.data_classes.factorized_tensor.base"], [110, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [112, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [113, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [115, "module-ivy.data_classes.array.array"], [116, "module-ivy.data_classes.container.container"], [118, "module-ivy.data_classes.nested_array.nested_array"], [119, "module-ivy.data_classes.nested_array.base"], [120, "module-ivy.data_classes.nested_array.elementwise"], [380, "module-ivy.functional.ivy.experimental.activations"], [381, "module-ivy.functional.ivy.experimental.constants"], [382, "module-ivy.functional.ivy.experimental.creation"], [383, "module-ivy.functional.ivy.experimental.data_type"], [384, "module-ivy.functional.ivy.experimental.device"], [385, "module-ivy.functional.ivy.experimental.elementwise"], [386, "module-ivy.functional.ivy.experimental.general"], [387, "module-ivy.functional.ivy.experimental.gradients"], [388, "module-ivy.functional.ivy.experimental.layers"], [389, "module-ivy.functional.ivy.experimental.linear_algebra"], [390, "module-ivy.functional.ivy.experimental.losses"], [391, "module-ivy.functional.ivy.experimental.manipulation"], [392, "module-ivy.functional.ivy.experimental.meta"], [393, "module-ivy.functional.ivy.experimental.nest"], [394, "module-ivy.functional.ivy.experimental.norms"], [395, "module-ivy.functional.ivy.experimental.random"], [396, "module-ivy.functional.ivy.experimental.searching"], [397, "module-ivy.functional.ivy.experimental.set"], [398, "module-ivy.functional.ivy.experimental.sorting"], [399, "module-ivy.functional.ivy.experimental.sparse_array"], [400, "module-ivy.functional.ivy.experimental.statistical"], [401, "module-ivy.functional.ivy.experimental.utility"], [641, "module-ivy.functional.ivy.activations"], [642, "module-ivy.functional.ivy.constants"], [643, "module-ivy.functional.ivy.control_flow_ops"], [644, "module-ivy.functional.ivy.creation"], [645, "module-ivy.functional.ivy.data_type"], [646, "module-ivy.functional.ivy.device"], [647, "module-ivy.functional.ivy.elementwise"], [648, "module-ivy.functional.ivy.experimental"], [649, "module-ivy.functional.ivy.general"], [650, "module-ivy.functional.ivy.gradients"], [651, "module-ivy.functional.ivy.layers"], [652, "module-ivy.functional.ivy.linear_algebra"], [653, "module-ivy.functional.ivy.losses"], [654, "module-ivy.functional.ivy.manipulation"], [655, "module-ivy.functional.ivy.meta"], [656, "module-ivy.functional.ivy.nest"], [657, "module-ivy.functional.ivy.norms"], [658, "module-ivy.functional.ivy.random"], [659, "module-ivy.functional.ivy.searching"], [660, "module-ivy.functional.ivy.set"], [661, "module-ivy.functional.ivy.sorting"], [662, "module-ivy.functional.ivy.statistical"], [663, "module-ivy.functional.ivy.utility"], [789, "module-ivy_tests.test_ivy.helpers.assertions"], [790, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [791, "module-ivy_tests.test_ivy.helpers.function_testing"], [792, "module-ivy_tests.test_ivy.helpers.globals"], [793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [798, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [799, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [800, "module-ivy_tests.test_ivy.helpers.structs"], [801, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [802, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [806, "module-ivy.stateful.activations"], [807, "module-ivy.stateful.converters"], [808, "module-ivy.stateful.helpers"], [809, "module-ivy.stateful.initializers"], [810, "module-ivy.stateful.layers"], [811, "module-ivy.stateful.losses"], [812, "module-ivy.stateful.module"], [813, "module-ivy.stateful.norms"], [814, "module-ivy.stateful.optimizers"], [815, "module-ivy.stateful.sequential"], [816, "module-ivy.utils.assertions"], [817, "module-ivy.utils.backend"], [818, "module-ivy.utils.backend.ast_helpers"], [819, "module-ivy.utils.backend.handler"], [820, "module-ivy.utils.backend.sub_backend_handler"], [821, "module-ivy.utils.binaries"], [822, "module-ivy.utils.decorator_utils"], [823, "module-ivy.utils.dynamic_import"], [824, "module-ivy.utils.einsum_parser"], [825, "module-ivy.utils.einsum_path_helpers"], [826, "module-ivy.utils.exceptions"], [827, "module-ivy.utils.inspection"], [828, "module-ivy.utils.logging"], [829, "module-ivy.utils.profiler"], [830, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_data_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._data_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[65, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[66, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[67, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[68, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[68, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[68, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[68, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[68, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[69, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[70, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[70, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[70, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[70, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[70, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[70, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[70, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[70, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[70, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[70, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[70, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[70, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[70, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[70, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[70, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[70, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[70, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[70, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[70, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[70, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[70, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[70, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[70, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[70, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[70, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[70, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[70, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[70, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[70, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[70, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[70, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[70, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[71, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[72, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[73, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[73, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[73, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[74, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[75, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[76, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[77, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[78, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[79, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[79, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[79, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[80, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[81, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[81, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[81, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[82, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[83, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[84, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[85, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[85, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[85, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[86, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[87, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[87, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[88, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[89, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[90, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[91, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[91, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[92, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[93, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[93, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[93, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[93, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[93, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[93, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[93, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[93, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[93, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[93, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[93, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[93, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[93, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[93, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[93, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[93, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[93, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[93, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[93, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[93, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[93, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[93, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[93, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[93, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[93, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[93, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[93, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[93, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[93, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[93, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[93, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[93, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[93, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[93, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[94, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[95, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[96, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[96, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[96, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[97, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[98, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[99, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[100, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[101, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[102, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[102, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[103, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[104, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[104, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[104, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[105, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[106, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[107, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[108, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[108, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[108, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[109, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[110, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[112, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[113, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[115, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[115, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[116, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[116, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[118, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[119, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[120, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[123, "ivy.gelu"], [641, "ivy.gelu"]], "gelu() (ivy.array method)": [[123, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[123, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[124, "ivy.hardswish"], [641, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[124, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[124, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[125, "ivy.leaky_relu"], [641, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[125, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[125, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[126, "ivy.log_softmax"], [641, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[126, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[126, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[127, "ivy.mish"], [641, "ivy.mish"]], "mish() (ivy.array method)": [[127, "ivy.Array.mish"]], "mish() (ivy.container method)": [[127, "ivy.Container.mish"]], "relu() (in module ivy)": [[128, "ivy.relu"], [641, "ivy.relu"]], "relu() (ivy.array method)": [[128, "ivy.Array.relu"]], "relu() (ivy.container method)": [[128, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[129, "ivy.sigmoid"], [641, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[129, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[129, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[130, "ivy.softmax"], [641, "ivy.softmax"]], "softmax() (ivy.array method)": [[130, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[130, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[131, "ivy.softplus"], [641, "ivy.softplus"]], "softplus() (ivy.array method)": [[131, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[131, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[132, "ivy.softsign"], [641, "ivy.softsign"]], "cmp_is() (in module ivy)": [[133, "ivy.cmp_is"], [643, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[134, "ivy.cmp_isnot"], [643, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[135, "ivy.for_loop"], [643, "ivy.for_loop"]], "if_else() (in module ivy)": [[136, "ivy.if_else"], [643, "ivy.if_else"]], "try_except() (in module ivy)": [[137, "ivy.try_except"], [643, "ivy.try_except"]], "while_loop() (in module ivy)": [[138, "ivy.while_loop"], [643, "ivy.while_loop"]], "arange() (in module ivy)": [[139, "ivy.arange"], [644, "ivy.arange"]], "array() (in module ivy)": [[140, "ivy.array"], [644, "ivy.array"]], "asarray() (in module ivy)": [[141, "ivy.asarray"], [644, "ivy.asarray"]], "asarray() (ivy.array method)": [[141, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[141, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[142, "ivy.copy_array"], [644, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[142, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[142, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[143, "ivy.empty"], [644, "ivy.empty"]], "empty_like() (in module ivy)": [[144, "ivy.empty_like"], [644, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[144, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[144, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[145, "ivy.eye"], [644, "ivy.eye"]], "from_dlpack() (in module ivy)": [[146, "ivy.from_dlpack"], [644, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[146, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[146, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[147, "ivy.frombuffer"], [644, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[147, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[148, "ivy.full"], [644, "ivy.full"]], "full_like() (in module ivy)": [[149, "ivy.full_like"], [644, "ivy.full_like"]], "full_like() (ivy.array method)": [[149, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[149, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[150, "ivy.linspace"], [644, "ivy.linspace"]], "linspace() (ivy.array method)": [[150, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[150, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[151, "ivy.logspace"], [644, "ivy.logspace"]], "logspace() (ivy.array method)": [[151, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[151, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[152, "ivy.meshgrid"], [644, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[152, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[152, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[153, "ivy.native_array"], [644, "ivy.native_array"]], "native_array() (ivy.array method)": [[153, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[153, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[154, "ivy.one_hot"], [644, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[154, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[154, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[155, "ivy.ones"], [644, "ivy.ones"]], "ones_like() (in module ivy)": [[156, "ivy.ones_like"], [644, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[156, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[156, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[157, "ivy.to_dlpack"], [644, "ivy.to_dlpack"]], "tril() (in module ivy)": [[158, "ivy.tril"], [644, "ivy.tril"]], "tril() (ivy.array method)": [[158, "ivy.Array.tril"]], "tril() (ivy.container method)": [[158, "ivy.Container.tril"]], "triu() (in module ivy)": [[159, "ivy.triu"], [644, "ivy.triu"]], "triu() (ivy.array method)": [[159, "ivy.Array.triu"]], "triu() (ivy.container method)": [[159, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[160, "ivy.triu_indices"], [644, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[160, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[161, "ivy.zeros"], [644, "ivy.zeros"]], "zeros_like() (in module ivy)": [[162, "ivy.zeros_like"], [644, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[162, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[162, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[163, "ivy.as_ivy_dtype"], [645, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[164, "ivy.as_native_dtype"], [645, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[165, "ivy.astype"], [645, "ivy.astype"]], "astype() (ivy.array method)": [[165, "ivy.Array.astype"]], "astype() (ivy.container method)": [[165, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[166, "ivy.broadcast_arrays"], [645, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[166, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[166, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[167, "ivy.broadcast_to"], [645, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[167, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[167, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[168, "ivy.can_cast"], [645, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[168, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[168, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[169, "ivy.check_float"], [645, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[170, "ivy.closest_valid_dtype"], [645, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[171, "ivy.default_complex_dtype"], [645, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[172, "ivy.default_dtype"], [645, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[173, "ivy.default_float_dtype"], [645, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[174, "ivy.default_int_dtype"], [645, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[175, "ivy.default_uint_dtype"], [645, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[176, "ivy.dtype"], [645, "ivy.dtype"]], "dtype() (ivy.array method)": [[176, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[176, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[177, "ivy.dtype_bits"], [645, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[178, "ivy.finfo"], [645, "ivy.finfo"]], "finfo() (ivy.array method)": [[178, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[178, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[179, "ivy.function_supported_dtypes"], [645, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[180, "ivy.function_unsupported_dtypes"], [645, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[181, "ivy.iinfo"], [645, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[181, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[181, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[182, "ivy.infer_default_dtype"], [645, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[183, "ivy.invalid_dtype"], [645, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[184, "ivy.is_bool_dtype"], [645, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[184, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[184, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[185, "ivy.is_complex_dtype"], [645, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[185, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[186, "ivy.is_float_dtype"], [645, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[186, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[186, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[187, "ivy.is_hashable_dtype"], [645, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[188, "ivy.is_int_dtype"], [645, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[188, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[188, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[189, "ivy.is_native_dtype"], [645, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[190, "ivy.is_uint_dtype"], [645, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[190, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[190, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[191, "ivy.promote_types"], [645, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[192, "ivy.promote_types_of_inputs"], [645, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[193, "ivy.result_type"], [645, "ivy.result_type"]], "result_type() (ivy.array method)": [[193, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[193, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[194, "ivy.set_default_complex_dtype"], [645, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[195, "ivy.set_default_dtype"], [645, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[196, "ivy.set_default_float_dtype"], [645, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[197, "ivy.set_default_int_dtype"], [645, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[198, "ivy.set_default_uint_dtype"], [645, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[199, "ivy.type_promote_arrays"], [645, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[200, "ivy.unset_default_complex_dtype"], [645, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[201, "ivy.unset_default_dtype"], [645, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[202, "ivy.unset_default_float_dtype"], [645, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[203, "ivy.unset_default_int_dtype"], [645, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[204, "ivy.unset_default_uint_dtype"], [645, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[205, "ivy.valid_dtype"], [645, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[206, "ivy.as_ivy_dev"], [646, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[207, "ivy.as_native_dev"], [646, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[208, "ivy.clear_cached_mem_on_dev"], [646, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[209, "ivy.default_device"], [646, "ivy.default_device"]], "dev() (in module ivy)": [[210, "ivy.dev"], [646, "ivy.dev"]], "dev() (ivy.array method)": [[210, "ivy.Array.dev"]], "dev() (ivy.container method)": [[210, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[211, "ivy.dev_util"], [646, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[212, "ivy.function_supported_devices"], [646, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[213, "ivy.function_unsupported_devices"], [646, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[214, "ivy.get_all_ivy_arrays_on_dev"], [646, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[215, "ivy.gpu_is_available"], [646, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[216, "ivy.handle_soft_device_variable"], [646, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[217, "ivy.num_cpu_cores"], [646, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[218, "ivy.num_gpus"], [646, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[219, "ivy.num_ivy_arrays_on_dev"], [646, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[220, "ivy.percent_used_mem_on_dev"], [646, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[221, "ivy.print_all_ivy_arrays_on_dev"], [646, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[222, "ivy.set_default_device"], [646, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[223, "ivy.set_soft_device_mode"], [646, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[224, "ivy.set_split_factor"], [646, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[225, "ivy.split_factor"], [646, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[226, "ivy.split_func_call"], [646, "ivy.split_func_call"]], "to_device() (in module ivy)": [[227, "ivy.to_device"], [646, "ivy.to_device"]], "to_device() (ivy.array method)": [[227, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[227, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[228, "ivy.total_mem_on_dev"], [646, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[229, "ivy.tpu_is_available"], [646, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[230, "ivy.unset_default_device"], [646, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[231, "ivy.unset_soft_device_mode"], [646, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[232, "ivy.used_mem_on_dev"], [646, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[233, "ivy.abs"], [647, "ivy.abs"]], "abs() (ivy.array method)": [[233, "ivy.Array.abs"]], "abs() (ivy.container method)": [[233, "ivy.Container.abs"]], "acos() (in module ivy)": [[234, "ivy.acos"], [647, "ivy.acos"]], "acos() (ivy.array method)": [[234, "ivy.Array.acos"]], "acos() (ivy.container method)": [[234, "ivy.Container.acos"]], "acosh() (in module ivy)": [[235, "ivy.acosh"], [647, "ivy.acosh"]], "acosh() (ivy.array method)": [[235, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[235, "ivy.Container.acosh"]], "add() (in module ivy)": [[236, "ivy.add"], [647, "ivy.add"]], "add() (ivy.array method)": [[236, "ivy.Array.add"]], "add() (ivy.container method)": [[236, "ivy.Container.add"]], "angle() (in module ivy)": [[237, "ivy.angle"], [647, "ivy.angle"]], "angle() (ivy.array method)": [[237, "ivy.Array.angle"]], "angle() (ivy.container method)": [[237, "ivy.Container.angle"]], "asin() (in module ivy)": [[238, "ivy.asin"], [647, "ivy.asin"]], "asin() (ivy.array method)": [[238, "ivy.Array.asin"]], "asin() (ivy.container method)": [[238, "ivy.Container.asin"]], "asinh() (in module ivy)": [[239, "ivy.asinh"], [647, "ivy.asinh"]], "asinh() (ivy.array method)": [[239, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[239, "ivy.Container.asinh"]], "atan() (in module ivy)": [[240, "ivy.atan"], [647, "ivy.atan"]], "atan() (ivy.array method)": [[240, "ivy.Array.atan"]], "atan() (ivy.container method)": [[240, "ivy.Container.atan"]], "atan2() (in module ivy)": [[241, "ivy.atan2"], [647, "ivy.atan2"]], "atan2() (ivy.array method)": [[241, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[241, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[242, "ivy.atanh"], [647, "ivy.atanh"]], "atanh() (ivy.array method)": [[242, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[242, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[243, "ivy.bitwise_and"], [647, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[243, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[243, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[244, "ivy.bitwise_invert"], [647, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[244, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[244, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[245, "ivy.bitwise_left_shift"], [647, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[245, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[245, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[246, "ivy.bitwise_or"], [647, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[246, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[246, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[247, "ivy.bitwise_right_shift"], [647, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[247, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[247, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[248, "ivy.bitwise_xor"], [647, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[248, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[248, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[249, "ivy.ceil"], [647, "ivy.ceil"]], "ceil() (ivy.array method)": [[249, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[249, "ivy.Container.ceil"]], "cos() (in module ivy)": [[250, "ivy.cos"], [647, "ivy.cos"]], "cos() (ivy.array method)": [[250, "ivy.Array.cos"]], "cos() (ivy.container method)": [[250, "ivy.Container.cos"]], "cosh() (in module ivy)": [[251, "ivy.cosh"], [647, "ivy.cosh"]], "cosh() (ivy.array method)": [[251, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[251, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[252, "ivy.deg2rad"], [647, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[252, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[252, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[253, "ivy.divide"], [647, "ivy.divide"]], "divide() (ivy.array method)": [[253, "ivy.Array.divide"]], "divide() (ivy.container method)": [[253, "ivy.Container.divide"]], "equal() (in module ivy)": [[254, "ivy.equal"], [647, "ivy.equal"]], "equal() (ivy.array method)": [[254, "ivy.Array.equal"]], "equal() (ivy.container method)": [[254, "ivy.Container.equal"]], "erf() (in module ivy)": [[255, "ivy.erf"], [647, "ivy.erf"]], "erf() (ivy.array method)": [[255, "ivy.Array.erf"]], "erf() (ivy.container method)": [[255, "ivy.Container.erf"]], "exp() (in module ivy)": [[256, "ivy.exp"], [647, "ivy.exp"]], "exp() (ivy.array method)": [[256, "ivy.Array.exp"]], "exp() (ivy.container method)": [[256, "ivy.Container.exp"]], "exp2() (in module ivy)": [[257, "ivy.exp2"], [647, "ivy.exp2"]], "exp2() (ivy.array method)": [[257, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[257, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[258, "ivy.expm1"], [647, "ivy.expm1"]], "expm1() (ivy.array method)": [[258, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[258, "ivy.Container.expm1"]], "floor() (in module ivy)": [[259, "ivy.floor"], [647, "ivy.floor"]], "floor() (ivy.array method)": [[259, "ivy.Array.floor"]], "floor() (ivy.container method)": [[259, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[260, "ivy.floor_divide"], [647, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[260, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[260, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[261, "ivy.fmin"], [647, "ivy.fmin"]], "fmin() (ivy.array method)": [[261, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[261, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[262, "ivy.fmod"], [647, "ivy.fmod"]], "fmod() (ivy.array method)": [[262, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[262, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[263, "ivy.gcd"], [647, "ivy.gcd"]], "gcd() (ivy.array method)": [[263, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[263, "ivy.Container.gcd"]], "greater() (in module ivy)": [[264, "ivy.greater"], [647, "ivy.greater"]], "greater() (ivy.array method)": [[264, "ivy.Array.greater"]], "greater() (ivy.container method)": [[264, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[265, "ivy.greater_equal"], [647, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[265, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[265, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[266, "ivy.imag"], [647, "ivy.imag"]], "imag() (ivy.array method)": [[266, "ivy.Array.imag"]], "imag() (ivy.container method)": [[266, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[267, "ivy.isfinite"], [647, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[267, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[267, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[268, "ivy.isinf"], [647, "ivy.isinf"]], "isinf() (ivy.array method)": [[268, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[268, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[269, "ivy.isnan"], [647, "ivy.isnan"]], "isnan() (ivy.array method)": [[269, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[269, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[270, "ivy.isreal"], [647, "ivy.isreal"]], "isreal() (ivy.array method)": [[270, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[270, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[271, "ivy.lcm"], [647, "ivy.lcm"]], "lcm() (ivy.array method)": [[271, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[271, "ivy.Container.lcm"]], "less() (in module ivy)": [[272, "ivy.less"], [647, "ivy.less"]], "less() (ivy.array method)": [[272, "ivy.Array.less"]], "less() (ivy.container method)": [[272, "ivy.Container.less"]], "less_equal() (in module ivy)": [[273, "ivy.less_equal"], [647, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[273, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[273, "ivy.Container.less_equal"]], "log() (in module ivy)": [[274, "ivy.log"], [647, "ivy.log"]], "log() (ivy.array method)": [[274, "ivy.Array.log"]], "log() (ivy.container method)": [[274, "ivy.Container.log"]], "log10() (in module ivy)": [[275, "ivy.log10"], [647, "ivy.log10"]], "log10() (ivy.array method)": [[275, "ivy.Array.log10"]], "log10() (ivy.container method)": [[275, "ivy.Container.log10"]], "log1p() (in module ivy)": [[276, "ivy.log1p"], [647, "ivy.log1p"]], "log1p() (ivy.array method)": [[276, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[276, "ivy.Container.log1p"]], "log2() (in module ivy)": [[277, "ivy.log2"], [647, "ivy.log2"]], "log2() (ivy.array method)": [[277, "ivy.Array.log2"]], "log2() (ivy.container method)": [[277, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[278, "ivy.logaddexp"], [647, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[278, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[278, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[279, "ivy.logaddexp2"], [647, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[279, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[279, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[280, "ivy.logical_and"], [647, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[280, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[280, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[281, "ivy.logical_not"], [647, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[281, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[281, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[282, "ivy.logical_or"], [647, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[282, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[282, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[283, "ivy.logical_xor"], [647, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[283, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[283, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[284, "ivy.maximum"], [647, "ivy.maximum"]], "maximum() (ivy.array method)": [[284, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[284, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[285, "ivy.minimum"], [647, "ivy.minimum"]], "minimum() (ivy.array method)": [[285, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[285, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[286, "ivy.multiply"], [647, "ivy.multiply"]], "multiply() (ivy.array method)": [[286, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[286, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[287, "ivy.nan_to_num"], [647, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[287, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[287, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[288, "ivy.negative"], [647, "ivy.negative"]], "negative() (ivy.array method)": [[288, "ivy.Array.negative"]], "negative() (ivy.container method)": [[288, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[289, "ivy.not_equal"], [647, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[289, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[289, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[290, "ivy.positive"], [647, "ivy.positive"]], "positive() (ivy.array method)": [[290, "ivy.Array.positive"]], "positive() (ivy.container method)": [[290, "ivy.Container.positive"]], "pow() (in module ivy)": [[291, "ivy.pow"], [647, "ivy.pow"]], "pow() (ivy.array method)": [[291, "ivy.Array.pow"]], "pow() (ivy.container method)": [[291, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[292, "ivy.rad2deg"], [647, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[292, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[292, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[293, "ivy.real"], [647, "ivy.real"]], "real() (ivy.array method)": [[293, "ivy.Array.real"]], "real() (ivy.container method)": [[293, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[294, "ivy.reciprocal"], [647, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[294, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[294, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[295, "ivy.remainder"], [647, "ivy.remainder"]], "remainder() (ivy.array method)": [[295, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[295, "ivy.Container.remainder"]], "round() (in module ivy)": [[296, "ivy.round"], [647, "ivy.round"]], "round() (ivy.array method)": [[296, "ivy.Array.round"]], "round() (ivy.container method)": [[296, "ivy.Container.round"]], "sign() (in module ivy)": [[297, "ivy.sign"], [647, "ivy.sign"]], "sign() (ivy.array method)": [[297, "ivy.Array.sign"]], "sign() (ivy.container method)": [[297, "ivy.Container.sign"]], "sin() (in module ivy)": [[298, "ivy.sin"], [647, "ivy.sin"]], "sin() (ivy.array method)": [[298, "ivy.Array.sin"]], "sin() (ivy.container method)": [[298, "ivy.Container.sin"]], "sinh() (in module ivy)": [[299, "ivy.sinh"], [647, "ivy.sinh"]], "sinh() (ivy.array method)": [[299, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[299, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[300, "ivy.sqrt"], [647, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[300, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[300, "ivy.Container.sqrt"]], "square() (in module ivy)": [[301, "ivy.square"], [647, "ivy.square"]], "square() (ivy.array method)": [[301, "ivy.Array.square"]], "square() (ivy.container method)": [[301, "ivy.Container.square"]], "subtract() (in module ivy)": [[302, "ivy.subtract"], [647, "ivy.subtract"]], "subtract() (ivy.array method)": [[302, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[302, "ivy.Container.subtract"]], "tan() (in module ivy)": [[303, "ivy.tan"], [647, "ivy.tan"]], "tan() (ivy.array method)": [[303, "ivy.Array.tan"]], "tan() (ivy.container method)": [[303, "ivy.Container.tan"]], "tanh() (in module ivy)": [[304, "ivy.tanh"], [647, "ivy.tanh"]], "tanh() (ivy.array method)": [[304, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[304, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[305, "ivy.trapz"], [647, "ivy.trapz"]], "trapz() (ivy.array method)": [[305, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[305, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[306, "ivy.trunc"], [647, "ivy.trunc"]], "trunc() (ivy.array method)": [[306, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[306, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[307, "ivy.trunc_divide"], [647, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[307, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[307, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[308, "ivy.celu"], [380, "ivy.celu"]], "celu() (ivy.array method)": [[308, "ivy.Array.celu"]], "celu() (ivy.container method)": [[308, "ivy.Container.celu"]], "elu() (in module ivy)": [[309, "ivy.elu"], [380, "ivy.elu"]], "elu() (ivy.array method)": [[309, "ivy.Array.elu"]], "elu() (ivy.container method)": [[309, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[310, "ivy.hardshrink"], [380, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[310, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[310, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[311, "ivy.hardsilu"], [380, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[311, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[311, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[312, "ivy.hardtanh"], [380, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[312, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[312, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[313, "ivy.logit"], [380, "ivy.logit"]], "logit() (ivy.array method)": [[313, "ivy.Array.logit"]], "logit() (ivy.container method)": [[313, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[314, "ivy.logsigmoid"], [380, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[314, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[314, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[315, "ivy.prelu"], [380, "ivy.prelu"]], "prelu() (ivy.array method)": [[315, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[315, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[316, "ivy.relu6"], [380, "ivy.relu6"]], "relu6() (ivy.array method)": [[316, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[316, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[317, "ivy.scaled_tanh"], [380, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[317, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[317, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[318, "ivy.selu"], [380, "ivy.selu"]], "selu() (ivy.array method)": [[318, "ivy.Array.selu"]], "selu() (ivy.container method)": [[318, "ivy.Container.selu"]], "silu() (in module ivy)": [[319, "ivy.silu"], [380, "ivy.silu"]], "silu() (ivy.array method)": [[319, "ivy.Array.silu"]], "silu() (ivy.container method)": [[319, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[320, "ivy.softshrink"], [380, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[320, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[320, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[321, "ivy.stanh"], [380, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[322, "ivy.tanhshrink"], [380, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[322, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[322, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[323, "ivy.threshold"], [380, "ivy.threshold"]], "threshold() (ivy.array method)": [[323, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[323, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[324, "ivy.thresholded_relu"], [380, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[324, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[324, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[325, "ivy.blackman_window"], [382, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[325, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[325, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[326, "ivy.eye_like"], [382, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[326, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[326, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[327, "ivy.hamming_window"], [382, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[327, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[328, "ivy.hann_window"], [382, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[328, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[329, "ivy.indices"], [382, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[330, "ivy.kaiser_bessel_derived_window"], [382, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[330, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[331, "ivy.kaiser_window"], [382, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[331, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[332, "ivy.mel_weight_matrix"], [382, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[332, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[332, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[333, "ivy.ndenumerate"], [382, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[334, "ivy.ndindex"], [382, "ivy.ndindex"]], "polyval() (in module ivy)": [[335, "ivy.polyval"], [382, "ivy.polyval"]], "polyval() (ivy.container method)": [[335, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[336, "ivy.random_cp"], [382, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[337, "ivy.random_parafac2"], [382, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[338, "ivy.random_tr"], [382, "ivy.random_tr"]], "random_tt() (in module ivy)": [[339, "ivy.random_tt"], [382, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[340, "ivy.random_tucker"], [382, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[341, "ivy.tril_indices"], [382, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[341, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[342, "ivy.trilu"], [382, "ivy.trilu"]], "trilu() (ivy.array method)": [[342, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[342, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[343, "ivy.unsorted_segment_mean"], [382, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[343, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[343, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[344, "ivy.unsorted_segment_min"], [382, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[344, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[344, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[345, "ivy.unsorted_segment_sum"], [382, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[345, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[345, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[346, "ivy.vorbis_window"], [382, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[346, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[347, "ivy.allclose"], [385, "ivy.allclose"]], "allclose() (ivy.array method)": [[347, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[347, "ivy.Container.allclose"]], "amax() (in module ivy)": [[348, "ivy.amax"], [385, "ivy.amax"]], "amax() (ivy.array method)": [[348, "ivy.Array.amax"]], "amax() (ivy.container method)": [[348, "ivy.Container.amax"]], "amin() (in module ivy)": [[349, "ivy.amin"], [385, "ivy.amin"]], "amin() (ivy.array method)": [[349, "ivy.Array.amin"]], "amin() (ivy.container method)": [[349, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[350, "ivy.binarizer"], [385, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[350, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[350, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[351, "ivy.conj"], [385, "ivy.conj"]], "conj() (ivy.array method)": [[351, "ivy.Array.conj"]], "conj() (ivy.container method)": [[351, "ivy.Container.conj"]], "copysign() (in module ivy)": [[352, "ivy.copysign"], [385, "ivy.copysign"]], "copysign() (ivy.array method)": [[352, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[352, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[353, "ivy.count_nonzero"], [385, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[353, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[353, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[354, "ivy.diff"], [385, "ivy.diff"]], "diff() (ivy.array method)": [[354, "ivy.Array.diff"]], "diff() (ivy.container method)": [[354, "ivy.Container.diff"]], "digamma() (in module ivy)": [[355, "ivy.digamma"], [385, "ivy.digamma"]], "digamma() (ivy.array method)": [[355, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[355, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[356, "ivy.erfc"], [385, "ivy.erfc"]], "erfc() (ivy.array method)": [[356, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[356, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[357, "ivy.erfinv"], [385, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[357, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[357, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[358, "ivy.fix"], [385, "ivy.fix"]], "fix() (ivy.array method)": [[358, "ivy.Array.fix"]], "fix() (ivy.container method)": [[358, "ivy.Container.fix"]], "float_power() (in module ivy)": [[359, "ivy.float_power"], [385, "ivy.float_power"]], "float_power() (ivy.array method)": [[359, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[359, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[360, "ivy.fmax"], [385, "ivy.fmax"]], "fmax() (ivy.array method)": [[360, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[360, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[361, "ivy.frexp"], [385, "ivy.frexp"]], "frexp() (ivy.array method)": [[361, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[361, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[362, "ivy.gradient"], [385, "ivy.gradient"]], "gradient() (ivy.array method)": [[362, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[362, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[363, "ivy.hypot"], [385, "ivy.hypot"]], "hypot() (ivy.array method)": [[363, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[363, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[364, "ivy.isclose"], [385, "ivy.isclose"]], "isclose() (ivy.array method)": [[364, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[364, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[365, "ivy.ldexp"], [385, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[365, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[365, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[366, "ivy.lerp"], [385, "ivy.lerp"]], "lerp() (ivy.array method)": [[366, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[366, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[367, "ivy.lgamma"], [385, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[367, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[367, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[368, "ivy.modf"], [385, "ivy.modf"]], "modf() (ivy.array method)": [[368, "ivy.Array.modf"]], "modf() (ivy.container method)": [[368, "ivy.Container.modf"]], "nansum() (in module ivy)": [[369, "ivy.nansum"], [385, "ivy.nansum"]], "nansum() (ivy.array method)": [[369, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[369, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[370, "ivy.nextafter"], [385, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[370, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[370, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[371, "ivy.signbit"], [385, "ivy.signbit"]], "signbit() (ivy.array method)": [[371, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[371, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[372, "ivy.sinc"], [385, "ivy.sinc"]], "sinc() (ivy.array method)": [[372, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[372, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[373, "ivy.sparsify_tensor"], [385, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[373, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[373, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[374, "ivy.xlogy"], [385, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[374, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[374, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[375, "ivy.zeta"], [385, "ivy.zeta"]], "zeta() (ivy.array method)": [[375, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[375, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[376, "ivy.reduce"], [386, "ivy.reduce"]], "reduce() (ivy.array method)": [[376, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[376, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[377, "ivy.bind_custom_gradient_function"], [387, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[378, "ivy.jvp"], [387, "ivy.jvp"]], "vjp() (in module ivy)": [[379, "ivy.vjp"], [387, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[380, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[381, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[382, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[383, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[384, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[385, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[386, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[387, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[388, "ivy.adaptive_avg_pool1d"], [402, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[388, "ivy.adaptive_avg_pool2d"], [403, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[388, "ivy.adaptive_max_pool2d"], [404, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[388, "ivy.adaptive_max_pool3d"], [405, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[388, "ivy.area_interpolate"], [406, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[388, "ivy.avg_pool1d"], [407, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[388, "ivy.avg_pool2d"], [408, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[388, "ivy.avg_pool3d"], [409, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[388, "ivy.dct"], [410, "ivy.dct"]], "dft() (in module ivy)": [[388, "ivy.dft"], [411, "ivy.dft"]], "dropout1d() (in module ivy)": [[388, "ivy.dropout1d"], [412, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[388, "ivy.dropout2d"], [413, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[388, "ivy.dropout3d"], [414, "ivy.dropout3d"]], "embedding() (in module ivy)": [[388, "ivy.embedding"], [415, "ivy.embedding"]], "fft() (in module ivy)": [[388, "ivy.fft"], [416, "ivy.fft"]], "fft2() (in module ivy)": [[388, "ivy.fft2"], [417, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[388, "ivy.generate_einsum_equation"], [418, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[388, "ivy.get_interpolate_kernel"], [419, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[388, "ivy.idct"], [420, "ivy.idct"]], "ifft() (in module ivy)": [[388, "ivy.ifft"], [421, "ivy.ifft"]], "ifftn() (in module ivy)": [[388, "ivy.ifftn"], [422, "ivy.ifftn"]], "interp() (in module ivy)": [[388, "ivy.interp"], [423, "ivy.interp"]], "interpolate() (in module ivy)": [[388, "ivy.interpolate"], [424, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[388, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[388, "ivy.max_pool1d"], [425, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[388, "ivy.max_pool2d"], [426, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[388, "ivy.max_pool3d"], [427, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[388, "ivy.max_unpool1d"], [428, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[388, "ivy.nearest_interpolate"], [429, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[388, "ivy.pool"], [430, "ivy.pool"]], "reduce_window() (in module ivy)": [[388, "ivy.reduce_window"], [431, "ivy.reduce_window"]], "rfft() (in module ivy)": [[388, "ivy.rfft"], [432, "ivy.rfft"]], "rfftn() (in module ivy)": [[388, "ivy.rfftn"], [433, "ivy.rfftn"]], "rnn() (in module ivy)": [[388, "ivy.rnn"], [434, "ivy.rnn"]], "sliding_window() (in module ivy)": [[388, "ivy.sliding_window"], [435, "ivy.sliding_window"]], "stft() (in module ivy)": [[388, "ivy.stft"], [436, "ivy.stft"]], "adjoint() (in module ivy)": [[389, "ivy.adjoint"], [437, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[389, "ivy.batched_outer"], [438, "ivy.batched_outer"]], "cond() (in module ivy)": [[389, "ivy.cond"], [439, "ivy.cond"]], "diagflat() (in module ivy)": [[389, "ivy.diagflat"], [440, "ivy.diagflat"]], "dot() (in module ivy)": [[389, "ivy.dot"], [441, "ivy.dot"]], "eig() (in module ivy)": [[389, "ivy.eig"], [442, "ivy.eig"], [652, "ivy.eig"], [687, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[389, "ivy.eigh_tridiagonal"], [443, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[389, "ivy.eigvals"], [444, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[389, "ivy.general_inner_product"], [445, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[389, "ivy.higher_order_moment"], [446, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[389, "ivy.initialize_tucker"], [447, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[389, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[389, "ivy.khatri_rao"], [448, "ivy.khatri_rao"]], "kron() (in module ivy)": [[389, "ivy.kron"], [449, "ivy.kron"]], "kronecker() (in module ivy)": [[389, "ivy.kronecker"], [450, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[389, "ivy.lu_factor"], [451, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[389, "ivy.lu_solve"], [452, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[389, "ivy.make_svd_non_negative"], [453, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[389, "ivy.matrix_exp"], [454, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[389, "ivy.mode_dot"], [455, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[389, "ivy.multi_dot"], [456, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[389, "ivy.multi_mode_dot"], [457, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[389, "ivy.partial_tucker"], [458, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[389, "ivy.solve_triangular"], [459, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[389, "ivy.svd_flip"], [460, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[389, "ivy.tensor_train"], [461, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[389, "ivy.truncated_svd"], [462, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[389, "ivy.tt_matrix_to_tensor"], [463, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[389, "ivy.tucker"], [464, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[390, "ivy.hinge_embedding_loss"], [465, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[390, "ivy.huber_loss"], [466, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[390, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[390, "ivy.kl_div"], [467, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[390, "ivy.l1_loss"], [468, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[390, "ivy.log_poisson_loss"], [469, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[390, "ivy.poisson_nll_loss"], [470, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[390, "ivy.smooth_l1_loss"], [471, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[390, "ivy.soft_margin_loss"], [472, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[391, "ivy.as_strided"], [473, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[391, "ivy.associative_scan"], [474, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[391, "ivy.atleast_1d"], [475, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[391, "ivy.atleast_2d"], [476, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[391, "ivy.atleast_3d"], [477, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[391, "ivy.broadcast_shapes"], [478, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[391, "ivy.check_scalar"], [479, "ivy.check_scalar"]], "choose() (in module ivy)": [[391, "ivy.choose"], [480, "ivy.choose"]], "column_stack() (in module ivy)": [[391, "ivy.column_stack"], [481, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[391, "ivy.concat_from_sequence"], [482, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[391, "ivy.dsplit"], [483, "ivy.dsplit"]], "dstack() (in module ivy)": [[391, "ivy.dstack"], [484, "ivy.dstack"]], "expand() (in module ivy)": [[391, "ivy.expand"], [485, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[391, "ivy.fill_diagonal"], [486, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[391, "ivy.flatten"], [487, "ivy.flatten"]], "fliplr() (in module ivy)": [[391, "ivy.fliplr"], [488, "ivy.fliplr"]], "flipud() (in module ivy)": [[391, "ivy.flipud"], [489, "ivy.flipud"]], "fold() (in module ivy)": [[391, "ivy.fold"], [490, "ivy.fold"]], "heaviside() (in module ivy)": [[391, "ivy.heaviside"], [491, "ivy.heaviside"]], "hsplit() (in module ivy)": [[391, "ivy.hsplit"], [492, "ivy.hsplit"]], "hstack() (in module ivy)": [[391, "ivy.hstack"], [493, "ivy.hstack"]], "i0() (in module ivy)": [[391, "ivy.i0"], [494, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[391, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[391, "ivy.matricize"], [495, "ivy.matricize"]], "moveaxis() (in module ivy)": [[391, "ivy.moveaxis"], [496, "ivy.moveaxis"]], "pad() (in module ivy)": [[391, "ivy.pad"], [497, "ivy.pad"]], "pad_sequence() (in module ivy)": [[391, "ivy.pad_sequence"], [498, "ivy.pad_sequence"]], "partial_fold() (in module ivy)": [[391, "ivy.partial_fold"], [499, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[391, "ivy.partial_tensor_to_vec"], [500, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[391, "ivy.partial_unfold"], [501, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[391, "ivy.partial_vec_to_tensor"], [502, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[391, "ivy.put_along_axis"], [503, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[391, "ivy.rot90"], [504, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[391, "ivy.soft_thresholding"], [505, "ivy.soft_thresholding"]], "take() (in module ivy)": [[391, "ivy.take"], [506, "ivy.take"]], "take_along_axis() (in module ivy)": [[391, "ivy.take_along_axis"], [507, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[391, "ivy.top_k"], [508, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[391, "ivy.trim_zeros"], [509, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[391, "ivy.unflatten"], [510, "ivy.unflatten"]], "unfold() (in module ivy)": [[391, "ivy.unfold"], [511, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[391, "ivy.unique_consecutive"], [512, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[391, "ivy.vsplit"], [513, "ivy.vsplit"]], "vstack() (in module ivy)": [[391, "ivy.vstack"], [514, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[392, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[393, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[394, "ivy.batch_norm"], [515, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[394, "ivy.group_norm"], [516, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[394, "ivy.instance_norm"], [517, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[394, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[394, "ivy.l1_normalize"], [518, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[394, "ivy.l2_normalize"], [519, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[394, "ivy.local_response_norm"], [520, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[394, "ivy.lp_normalize"], [521, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[395, "ivy.bernoulli"], [522, "ivy.bernoulli"]], "beta() (in module ivy)": [[395, "ivy.beta"], [523, "ivy.beta"]], "dirichlet() (in module ivy)": [[395, "ivy.dirichlet"], [524, "ivy.dirichlet"]], "gamma() (in module ivy)": [[395, "ivy.gamma"], [525, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[395, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[395, "ivy.poisson"], [526, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[396, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[396, "ivy.unravel_index"], [527, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[397, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[398, "ivy.invert_permutation"], [528, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[398, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[398, "ivy.lexsort"], [529, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[399, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[399, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[399, "ivy.is_ivy_sparse_array"], [530, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[399, "ivy.is_native_sparse_array"], [531, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[399, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[399, "ivy.native_sparse_array"], [532, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[399, "ivy.native_sparse_array_to_indices_values_and_shape"], [533, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[400, "ivy.bincount"], [534, "ivy.bincount"]], "corrcoef() (in module ivy)": [[400, "ivy.corrcoef"], [535, "ivy.corrcoef"]], "cov() (in module ivy)": [[400, "ivy.cov"], [536, "ivy.cov"]], "cummax() (in module ivy)": [[400, "ivy.cummax"], [537, "ivy.cummax"]], "cummin() (in module ivy)": [[400, "ivy.cummin"], [538, "ivy.cummin"]], "histogram() (in module ivy)": [[400, "ivy.histogram"], [539, "ivy.histogram"]], "igamma() (in module ivy)": [[400, "ivy.igamma"], [540, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[400, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[400, "ivy.median"], [541, "ivy.median"]], "nanmean() (in module ivy)": [[400, "ivy.nanmean"], [542, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[400, "ivy.nanmedian"], [543, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[400, "ivy.nanmin"], [544, "ivy.nanmin"]], "nanprod() (in module ivy)": [[400, "ivy.nanprod"], [545, "ivy.nanprod"]], "quantile() (in module ivy)": [[400, "ivy.quantile"], [546, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[401, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[401, "ivy.optional_get_element"], [547, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[402, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[402, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[403, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[403, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[404, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[404, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[405, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[405, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[407, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[407, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[408, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[408, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[409, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[409, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[410, "ivy.Array.dct"]], "dct() (ivy.container method)": [[410, "ivy.Container.dct"]], "dft() (ivy.array method)": [[411, "ivy.Array.dft"]], "dft() (ivy.container method)": [[411, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[412, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[412, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[413, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[413, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[414, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[414, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[415, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[415, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[416, "ivy.Array.fft"]], "fft() (ivy.container method)": [[416, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[417, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[420, "ivy.Array.idct"]], "idct() (ivy.container method)": [[420, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[421, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[421, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[422, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[422, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[424, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[424, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[425, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[425, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[426, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[426, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[427, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[427, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[428, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[428, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[431, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[431, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[432, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[432, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[433, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[433, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[435, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[435, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[436, "ivy.Array.stft"]], "stft() (ivy.container method)": [[436, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[437, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[437, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[438, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[438, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[439, "ivy.Array.cond"]], "cond() (ivy.container method)": [[439, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[440, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[440, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[441, "ivy.Array.dot"]], "dot() (ivy.container method)": [[441, "ivy.Container.dot"]], "eig() (ivy.array method)": [[442, "ivy.Array.eig"], [687, "ivy.Array.eig"]], "eig() (ivy.container method)": [[442, "ivy.Container.eig"], [687, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[443, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[443, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[444, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[444, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[445, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[445, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[446, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[446, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[447, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[447, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[449, "ivy.Array.kron"]], "kron() (ivy.container method)": [[449, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[453, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[453, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[454, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[454, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[455, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[455, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[456, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[456, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[457, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[457, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[458, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[458, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[460, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[460, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[461, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[461, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[462, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[462, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[463, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[463, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[464, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[464, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[465, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[465, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[466, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[466, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[467, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[467, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[468, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[468, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[469, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[469, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[470, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[470, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[471, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[471, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[472, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[472, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[473, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[473, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[474, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[474, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[475, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[475, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[476, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[476, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[477, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[477, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[478, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[481, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[481, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[482, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[482, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[483, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[483, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[484, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[484, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[485, "ivy.Array.expand"]], "expand() (ivy.container method)": [[485, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[486, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[486, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[487, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[487, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[488, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[488, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[489, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[489, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[490, "ivy.Array.fold"]], "fold() (ivy.container method)": [[490, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[491, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[491, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[492, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[492, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[493, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[493, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[494, "ivy.Array.i0"]], "i0() (ivy.container method)": [[494, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[495, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[495, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[496, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[496, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[497, "ivy.Array.pad"]], "pad() (ivy.container method)": [[497, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[499, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[499, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[500, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[500, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[501, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[501, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[502, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[502, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[503, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[503, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[504, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[504, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[505, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[505, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[506, "ivy.Array.take"]], "take() (ivy.container method)": [[506, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[507, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[507, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[508, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[508, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[509, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[509, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[510, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[510, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[511, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[511, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[512, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[512, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[513, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[513, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[514, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[514, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[515, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[515, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[516, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[516, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[517, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[517, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[518, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[518, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[519, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[519, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[521, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[521, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[522, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[522, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[523, "ivy.Array.beta"]], "beta() (ivy.container method)": [[523, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[524, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[524, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[525, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[525, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[526, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[526, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[527, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[527, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[528, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[529, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[529, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[534, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[534, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[535, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[535, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[536, "ivy.Array.cov"]], "cov() (ivy.container method)": [[536, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[537, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[537, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[538, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[538, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[539, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[539, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[540, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[540, "ivy.Container.igamma"]], "median() (ivy.array method)": [[541, "ivy.Array.median"]], "median() (ivy.container method)": [[541, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[542, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[542, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[543, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[543, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[544, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[544, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[545, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[545, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[546, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[546, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[547, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[547, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[548, "ivy.all_equal"], [649, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[548, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[548, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[549, "ivy.arg_info"], [649, "ivy.arg_info"]], "arg_names() (in module ivy)": [[550, "ivy.arg_names"], [649, "ivy.arg_names"]], "array_equal() (in module ivy)": [[551, "ivy.array_equal"], [649, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[551, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[551, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[552, "ivy.assert_supports_inplace"], [649, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[552, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[552, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[553, "ivy.cache_fn"], [649, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[554, "ivy.clip_matrix_norm"], [649, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[554, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[554, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[555, "ivy.clip_vector_norm"], [649, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[555, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[555, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[556, "ivy.container_types"], [649, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[557, "ivy.current_backend_str"], [649, "ivy.current_backend_str"]], "default() (in module ivy)": [[558, "ivy.default"], [649, "ivy.default"]], "default() (ivy.array method)": [[558, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[559, "ivy.einops_rearrange"], [649, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[559, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[559, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[560, "ivy.einops_reduce"], [649, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[560, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[560, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[561, "ivy.einops_repeat"], [649, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[561, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[561, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[562, "ivy.exists"], [649, "ivy.exists"]], "exists() (ivy.array method)": [[562, "ivy.Array.exists"]], "exists() (ivy.container method)": [[562, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[563, "ivy.fourier_encode"], [649, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[563, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[563, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[564, "ivy.function_supported_devices_and_dtypes"], [649, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[565, "ivy.function_unsupported_devices_and_dtypes"], [649, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[566, "ivy.gather"], [649, "ivy.gather"]], "gather() (ivy.array method)": [[566, "ivy.Array.gather"]], "gather() (ivy.container method)": [[566, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[567, "ivy.gather_nd"], [649, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[567, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[567, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[568, "ivy.get_all_arrays_in_memory"], [649, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[569, "ivy.get_item"], [649, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[570, "ivy.get_num_dims"], [649, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[570, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[570, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[571, "ivy.get_referrers_recursive"], [649, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[572, "ivy.has_nans"], [649, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[572, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[572, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[573, "ivy.inplace_arrays_supported"], [649, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[574, "ivy.inplace_decrement"], [649, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[574, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[574, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[575, "ivy.inplace_increment"], [649, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[575, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[575, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[576, "ivy.inplace_update"], [649, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[576, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[576, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[577, "ivy.inplace_variables_supported"], [649, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[578, "ivy.is_array"], [649, "ivy.is_array"]], "is_array() (ivy.array method)": [[578, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[578, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[579, "ivy.is_ivy_array"], [649, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[579, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[579, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[580, "ivy.is_ivy_container"], [649, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[580, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[581, "ivy.is_ivy_nested_array"], [649, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[582, "ivy.is_native_array"], [649, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[582, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[582, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[583, "ivy.isin"], [649, "ivy.isin"]], "isin() (ivy.array method)": [[583, "ivy.Array.isin"]], "isin() (ivy.container method)": [[583, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[584, "ivy.isscalar"], [649, "ivy.isscalar"]], "itemsize() (in module ivy)": [[585, "ivy.itemsize"], [649, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[585, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[585, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[586, "ivy.match_kwargs"], [649, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[587, "ivy.multiprocessing"], [649, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[588, "ivy.num_arrays_in_memory"], [649, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[589, "ivy.print_all_arrays_in_memory"], [649, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[590, "ivy.scatter_flat"], [649, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[590, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[590, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[591, "ivy.scatter_nd"], [649, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[591, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[591, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[592, "ivy.set_array_mode"], [649, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[593, "ivy.set_exception_trace_mode"], [649, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[594, "ivy.set_inplace_mode"], [649, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[595, "ivy.set_item"], [649, "ivy.set_item"]], "set_min_base() (in module ivy)": [[596, "ivy.set_min_base"], [649, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[597, "ivy.set_min_denominator"], [649, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[598, "ivy.set_nestable_mode"], [649, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[599, "ivy.set_precise_mode"], [649, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[600, "ivy.set_queue_timeout"], [649, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[601, "ivy.set_shape_array_mode"], [649, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[602, "ivy.set_show_func_wrapper_trace_mode"], [649, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[603, "ivy.set_tmp_dir"], [649, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[604, "ivy.shape"], [649, "ivy.shape"]], "shape() (ivy.array method)": [[604, "ivy.Array.shape"]], "size() (in module ivy)": [[605, "ivy.size"], [649, "ivy.size"]], "size() (ivy.array method)": [[605, "ivy.Array.size"]], "size() (ivy.container method)": [[605, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[606, "ivy.stable_divide"], [649, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[606, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[606, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[607, "ivy.stable_pow"], [649, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[607, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[607, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[608, "ivy.strides"], [649, "ivy.strides"]], "strides() (ivy.array method)": [[608, "ivy.Array.strides"]], "strides() (ivy.container method)": [[608, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[609, "ivy.supports_inplace_updates"], [649, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[609, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[609, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[610, "ivy.to_ivy_shape"], [649, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[611, "ivy.to_list"], [649, "ivy.to_list"]], "to_list() (ivy.array method)": [[611, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[611, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[612, "ivy.to_native_shape"], [649, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[613, "ivy.to_numpy"], [649, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[613, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[613, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[614, "ivy.to_scalar"], [649, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[614, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[614, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[615, "ivy.try_else_none"], [649, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[616, "ivy.unset_array_mode"], [649, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[617, "ivy.unset_exception_trace_mode"], [649, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[618, "ivy.unset_inplace_mode"], [649, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[619, "ivy.unset_min_base"], [649, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[620, "ivy.unset_min_denominator"], [649, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[621, "ivy.unset_nestable_mode"], [649, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[622, "ivy.unset_precise_mode"], [649, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[623, "ivy.unset_queue_timeout"], [649, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[624, "ivy.unset_shape_array_mode"], [649, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[625, "ivy.unset_show_func_wrapper_trace_mode"], [649, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[626, "ivy.unset_tmp_dir"], [649, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[627, "ivy.value_is_nan"], [649, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[627, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[627, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[628, "ivy.vmap"], [649, "ivy.vmap"]], "adam_step() (in module ivy)": [[629, "ivy.adam_step"], [650, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[629, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[629, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[630, "ivy.adam_update"], [650, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[630, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[630, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[631, "ivy.execute_with_gradients"], [650, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[632, "ivy.grad"], [650, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[633, "ivy.gradient_descent_update"], [650, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[633, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[633, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[634, "ivy.jac"], [650, "ivy.jac"]], "lamb_update() (in module ivy)": [[635, "ivy.lamb_update"], [650, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[635, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[635, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[636, "ivy.lars_update"], [650, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[636, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[636, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[637, "ivy.optimizer_update"], [650, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[637, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[637, "ivy.Container.optimizer_update"]], "requires_gradient() (in module ivy)": [[638, "ivy.requires_gradient"], [650, "ivy.requires_gradient"]], "stop_gradient() (in module ivy)": [[639, "ivy.stop_gradient"], [650, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[639, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[639, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[640, "ivy.value_and_grad"], [650, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[641, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[642, "ivy.e"]], "inf (in module ivy)": [[642, "ivy.inf"]], "ivy.functional.ivy.constants": [[642, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[642, "ivy.nan"]], "newaxis (in module ivy)": [[642, "ivy.newaxis"]], "pi (in module ivy)": [[642, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[643, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[644, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[644, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[645, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[645, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[645, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[645, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[645, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[645, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[646, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[646, "ivy.Profiler"]], "ivy.functional.ivy.device": [[646, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[647, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[648, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[649, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[649, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[649, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[650, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[651, "ivy.conv"], [664, "ivy.conv"]], "conv1d() (in module ivy)": [[651, "ivy.conv1d"], [665, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[651, "ivy.conv1d_transpose"], [666, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[651, "ivy.conv2d"], [667, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[651, "ivy.conv2d_transpose"], [668, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[651, "ivy.conv3d"], [669, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[651, "ivy.conv3d_transpose"], [670, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[651, "ivy.conv_general_dilated"], [671, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[651, "ivy.conv_general_transpose"], [672, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[651, "ivy.depthwise_conv2d"], [673, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[651, "ivy.dropout"], [674, "ivy.dropout"]], "ivy.functional.ivy.layers": [[651, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[651, "ivy.linear"], [675, "ivy.linear"]], "lstm() (in module ivy)": [[651, "ivy.lstm"], [676, "ivy.lstm"]], "lstm_update() (in module ivy)": [[651, "ivy.lstm_update"], [677, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[651, "ivy.multi_head_attention"], [678, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[651, "ivy.nms"], [679, "ivy.nms"]], "roi_align() (in module ivy)": [[651, "ivy.roi_align"], [680, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[651, "ivy.scaled_dot_product_attention"], [681, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[652, "ivy.cholesky"], [682, "ivy.cholesky"]], "cross() (in module ivy)": [[652, "ivy.cross"], [683, "ivy.cross"]], "det() (in module ivy)": [[652, "ivy.det"], [684, "ivy.det"]], "diag() (in module ivy)": [[652, "ivy.diag"], [685, "ivy.diag"]], "diagonal() (in module ivy)": [[652, "ivy.diagonal"], [686, "ivy.diagonal"]], "eigh() (in module ivy)": [[652, "ivy.eigh"], [688, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[652, "ivy.eigvalsh"], [689, "ivy.eigvalsh"]], "inner() (in module ivy)": [[652, "ivy.inner"], [690, "ivy.inner"]], "inv() (in module ivy)": [[652, "ivy.inv"], [691, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[652, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[652, "ivy.matmul"], [692, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[652, "ivy.matrix_norm"], [693, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[652, "ivy.matrix_power"], [694, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[652, "ivy.matrix_rank"], [695, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[652, "ivy.matrix_transpose"], [696, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[652, "ivy.outer"], [697, "ivy.outer"]], "pinv() (in module ivy)": [[652, "ivy.pinv"], [698, "ivy.pinv"]], "qr() (in module ivy)": [[652, "ivy.qr"], [699, "ivy.qr"]], "slogdet() (in module ivy)": [[652, "ivy.slogdet"], [700, "ivy.slogdet"]], "solve() (in module ivy)": [[652, "ivy.solve"], [701, "ivy.solve"]], "svd() (in module ivy)": [[652, "ivy.svd"], [702, "ivy.svd"]], "svdvals() (in module ivy)": [[652, "ivy.svdvals"], [703, "ivy.svdvals"]], "tensordot() (in module ivy)": [[652, "ivy.tensordot"], [704, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[652, "ivy.tensorsolve"], [705, "ivy.tensorsolve"]], "trace() (in module ivy)": [[652, "ivy.trace"], [706, "ivy.trace"]], "vander() (in module ivy)": [[652, "ivy.vander"], [707, "ivy.vander"]], "vecdot() (in module ivy)": [[652, "ivy.vecdot"], [708, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[652, "ivy.vector_norm"], [709, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[652, "ivy.vector_to_skew_symmetric_matrix"], [710, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[653, "ivy.binary_cross_entropy"], [711, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[653, "ivy.cross_entropy"], [712, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[653, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[653, "ivy.sparse_cross_entropy"], [713, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[653, "ivy.ssim_loss"], [714, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[653, "ivy.wasserstein_loss_discriminator"], [715, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[653, "ivy.wasserstein_loss_generator"], [716, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[654, "ivy.clip"], [717, "ivy.clip"]], "concat() (in module ivy)": [[654, "ivy.concat"], [718, "ivy.concat"]], "constant_pad() (in module ivy)": [[654, "ivy.constant_pad"], [719, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[654, "ivy.expand_dims"], [720, "ivy.expand_dims"]], "flip() (in module ivy)": [[654, "ivy.flip"], [721, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[654, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[654, "ivy.permute_dims"], [722, "ivy.permute_dims"]], "repeat() (in module ivy)": [[654, "ivy.repeat"], [723, "ivy.repeat"]], "reshape() (in module ivy)": [[654, "ivy.reshape"], [724, "ivy.reshape"]], "roll() (in module ivy)": [[654, "ivy.roll"], [725, "ivy.roll"]], "split() (in module ivy)": [[654, "ivy.split"], [726, "ivy.split"]], "squeeze() (in module ivy)": [[654, "ivy.squeeze"], [727, "ivy.squeeze"]], "stack() (in module ivy)": [[654, "ivy.stack"], [728, "ivy.stack"]], "swapaxes() (in module ivy)": [[654, "ivy.swapaxes"], [729, "ivy.swapaxes"]], "tile() (in module ivy)": [[654, "ivy.tile"], [730, "ivy.tile"]], "unstack() (in module ivy)": [[654, "ivy.unstack"], [731, "ivy.unstack"]], "zero_pad() (in module ivy)": [[654, "ivy.zero_pad"], [732, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[655, "ivy.fomaml_step"], [733, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[655, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[655, "ivy.maml_step"], [734, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[655, "ivy.reptile_step"], [735, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[656, "ivy.all_nested_indices"], [736, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[656, "ivy.copy_nest"], [737, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[656, "ivy.duplicate_array_index_chains"], [738, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[656, "ivy.index_nest"], [739, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[656, "ivy.insert_into_nest_at_index"], [740, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[656, "ivy.insert_into_nest_at_indices"], [741, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[656, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[656, "ivy.map"], [742, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[656, "ivy.map_nest_at_index"], [743, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[656, "ivy.map_nest_at_indices"], [744, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[656, "ivy.multi_index_nest"], [745, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[656, "ivy.nested_any"], [746, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[656, "ivy.nested_argwhere"], [747, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[656, "ivy.nested_map"], [748, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[656, "ivy.nested_multi_map"], [749, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[656, "ivy.prune_empty"], [750, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[656, "ivy.prune_nest_at_index"], [751, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[656, "ivy.prune_nest_at_indices"], [752, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[656, "ivy.set_nest_at_index"], [753, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[656, "ivy.set_nest_at_indices"], [754, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[657, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[657, "ivy.layer_norm"], [755, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[658, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[658, "ivy.multinomial"], [756, "ivy.multinomial"]], "randint() (in module ivy)": [[658, "ivy.randint"], [757, "ivy.randint"]], "random_normal() (in module ivy)": [[658, "ivy.random_normal"], [758, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[658, "ivy.random_uniform"], [759, "ivy.random_uniform"]], "seed() (in module ivy)": [[658, "ivy.seed"], [760, "ivy.seed"]], "shuffle() (in module ivy)": [[658, "ivy.shuffle"], [761, "ivy.shuffle"]], "argmax() (in module ivy)": [[659, "ivy.argmax"], [762, "ivy.argmax"]], "argmin() (in module ivy)": [[659, "ivy.argmin"], [763, "ivy.argmin"]], "argwhere() (in module ivy)": [[659, "ivy.argwhere"], [764, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[659, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[659, "ivy.nonzero"], [765, "ivy.nonzero"]], "where() (in module ivy)": [[659, "ivy.where"], [766, "ivy.where"]], "ivy.functional.ivy.set": [[660, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[660, "ivy.unique_all"], [767, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[660, "ivy.unique_counts"], [768, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[660, "ivy.unique_inverse"], [769, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[660, "ivy.unique_values"], [770, "ivy.unique_values"]], "argsort() (in module ivy)": [[661, "ivy.argsort"], [771, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[661, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[661, "ivy.msort"], [772, "ivy.msort"]], "searchsorted() (in module ivy)": [[661, "ivy.searchsorted"], [773, "ivy.searchsorted"]], "sort() (in module ivy)": [[661, "ivy.sort"], [774, "ivy.sort"]], "cumprod() (in module ivy)": [[662, "ivy.cumprod"], [775, "ivy.cumprod"]], "cumsum() (in module ivy)": [[662, "ivy.cumsum"], [776, "ivy.cumsum"]], "einsum() (in module ivy)": [[662, "ivy.einsum"], [777, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[662, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[662, "ivy.max"], [778, "ivy.max"]], "mean() (in module ivy)": [[662, "ivy.mean"], [779, "ivy.mean"]], "min() (in module ivy)": [[662, "ivy.min"], [780, "ivy.min"]], "prod() (in module ivy)": [[662, "ivy.prod"], [781, "ivy.prod"]], "std() (in module ivy)": [[662, "ivy.std"], [782, "ivy.std"]], "sum() (in module ivy)": [[662, "ivy.sum"], [783, "ivy.sum"]], "var() (in module ivy)": [[662, "ivy.var"], [784, "ivy.var"]], "all() (in module ivy)": [[663, "ivy.all"], [785, "ivy.all"]], "any() (in module ivy)": [[663, "ivy.any"], [786, "ivy.any"]], "ivy.functional.ivy.utility": [[663, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[663, "ivy.load"], [787, "ivy.load"]], "save() (in module ivy)": [[663, "ivy.save"], [788, "ivy.save"]], "conv1d() (ivy.array method)": [[665, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[665, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[666, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[666, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[667, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[667, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[668, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[668, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[669, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[669, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[670, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[670, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[673, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[673, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[674, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[674, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[675, "ivy.Array.linear"]], "linear() (ivy.container method)": [[675, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[677, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[677, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[678, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[678, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[681, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[681, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[682, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[682, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[683, "ivy.Array.cross"]], "cross() (ivy.container method)": [[683, "ivy.Container.cross"]], "det() (ivy.array method)": [[684, "ivy.Array.det"]], "det() (ivy.container method)": [[684, "ivy.Container.det"]], "diag() (ivy.array method)": [[685, "ivy.Array.diag"]], "diag() (ivy.container method)": [[685, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[686, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[686, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[688, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[688, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[689, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[689, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[690, "ivy.Array.inner"]], "inner() (ivy.container method)": [[690, "ivy.Container.inner"]], "inv() (ivy.array method)": [[691, "ivy.Array.inv"]], "inv() (ivy.container method)": [[691, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[692, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[692, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[693, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[693, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[694, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[694, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[695, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[695, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[696, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[696, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[697, "ivy.Array.outer"]], "outer() (ivy.container method)": [[697, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[698, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[698, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[699, "ivy.Array.qr"]], "qr() (ivy.container method)": [[699, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[700, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[700, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[701, "ivy.Array.solve"]], "solve() (ivy.container method)": [[701, "ivy.Container.solve"]], "svd() (ivy.array method)": [[702, "ivy.Array.svd"]], "svd() (ivy.container method)": [[702, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[703, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[703, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[704, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[704, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[705, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[705, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[706, "ivy.Array.trace"]], "trace() (ivy.container method)": [[706, "ivy.Container.trace"]], "vander() (ivy.array method)": [[707, "ivy.Array.vander"]], "vander() (ivy.container method)": [[707, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[708, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[708, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[709, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[709, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[710, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[710, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[711, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[711, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[712, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[712, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[713, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[713, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[717, "ivy.Array.clip"]], "clip() (ivy.container method)": [[717, "ivy.Container.clip"]], "concat() (ivy.array method)": [[718, "ivy.Array.concat"]], "concat() (ivy.container method)": [[718, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[719, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[719, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[720, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[720, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[721, "ivy.Array.flip"]], "flip() (ivy.container method)": [[721, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[722, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[722, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[723, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[723, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[724, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[724, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[725, "ivy.Array.roll"]], "roll() (ivy.container method)": [[725, "ivy.Container.roll"]], "split() (ivy.array method)": [[726, "ivy.Array.split"]], "split() (ivy.container method)": [[726, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[727, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[727, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[728, "ivy.Array.stack"]], "stack() (ivy.container method)": [[728, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[729, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[729, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[730, "ivy.Array.tile"]], "tile() (ivy.container method)": [[730, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[731, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[731, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[732, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[732, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[755, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[755, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[756, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[756, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[757, "ivy.Array.randint"]], "randint() (ivy.container method)": [[757, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[758, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[758, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[759, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[759, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[761, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[761, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[762, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[762, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[763, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[763, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[764, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[764, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[765, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[765, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[766, "ivy.Array.where"]], "where() (ivy.container method)": [[766, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[767, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[767, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[768, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[768, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[769, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[769, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[770, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[770, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[771, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[771, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[772, "ivy.Array.msort"]], "msort() (ivy.container method)": [[772, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[773, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[773, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[774, "ivy.Array.sort"]], "sort() (ivy.container method)": [[774, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[775, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[775, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[776, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[776, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[777, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[777, "ivy.Container.einsum"]], "max() (ivy.array method)": [[778, "ivy.Array.max"]], "max() (ivy.container method)": [[778, "ivy.Container.max"]], "mean() (ivy.array method)": [[779, "ivy.Array.mean"]], "mean() (ivy.container method)": [[779, "ivy.Container.mean"]], "min() (ivy.array method)": [[780, "ivy.Array.min"]], "min() (ivy.container method)": [[780, "ivy.Container.min"]], "prod() (ivy.array method)": [[781, "ivy.Array.prod"]], "prod() (ivy.container method)": [[781, "ivy.Container.prod"]], "std() (ivy.array method)": [[782, "ivy.Array.std"]], "std() (ivy.container method)": [[782, "ivy.Container.std"]], "sum() (ivy.array method)": [[783, "ivy.Array.sum"]], "sum() (ivy.container method)": [[783, "ivy.Container.sum"]], "var() (ivy.array method)": [[784, "ivy.Array.var"]], "var() (ivy.container method)": [[784, "ivy.Container.var"]], "all() (ivy.array method)": [[785, "ivy.Array.all"]], "all() (ivy.container method)": [[785, "ivy.Container.all"]], "any() (ivy.array method)": [[786, "ivy.Array.any"]], "any() (ivy.container method)": [[786, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[789, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[789, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[790, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[791, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[791, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[792, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[792, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[792, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[792, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[792, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[793, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[794, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[798, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[798, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[798, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[799, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[799, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[800, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[800, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[801, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[801, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[802, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[802, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[806, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[806, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[806, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[806, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[806, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[806, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[806, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[806, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[806, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[806, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[806, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[806, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[806, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[806, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[806, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[806, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[806, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[806, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[806, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[806, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[807, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[807, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[807, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[807, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[807, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[807, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[807, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[807, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[807, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[808, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[808, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[809, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[809, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[809, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[809, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[809, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[809, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[809, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[809, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[809, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[809, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[809, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[809, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[809, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[809, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[809, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[809, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[810, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[810, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[810, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[810, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[810, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[810, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[810, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[810, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[810, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[810, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[810, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[810, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[810, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[810, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[810, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[810, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[810, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[810, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[810, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[810, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[810, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[810, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[810, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[810, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[810, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[810, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[810, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[810, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[810, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[811, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[811, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[811, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[811, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[811, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[811, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[811, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[812, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[812, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[812, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[812, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[812, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[812, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[813, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[813, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[813, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[813, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[813, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[814, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[814, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[814, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[814, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[814, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[814, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[814, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[814, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[814, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[814, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[814, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[814, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[814, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[814, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[814, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[814, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[814, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[814, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[815, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[815, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[815, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[816, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[816, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[817, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[818, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[818, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[818, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[818, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[818, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[818, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[818, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[818, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[818, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[818, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[818, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[819, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[819, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[819, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[820, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[820, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[821, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[821, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[821, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[822, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[822, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[822, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[822, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[822, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.apply_transpose"]], "dummy_inplace_update() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.dummy_inplace_update"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "ivy.utils.decorator_utils": [[822, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[822, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[822, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[823, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[823, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[824, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[824, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[825, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[825, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[826, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[826, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[826, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[826, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[826, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[826, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[826, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[826, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[826, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[826, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[826, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[826, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[826, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[826, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[826, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[826, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[826, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[826, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[826, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[826, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[826, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[826, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[826, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[826, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[826, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[826, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[827, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[827, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[827, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[828, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[828, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[828, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[829, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[829, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[829, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[829, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[829, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[829, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[829, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[829, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[829, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[829, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[830, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[830, "module-ivy.utils.verbosity"]], "automatic code conversions": [[872, "term-Automatic-Code-Conversions"]], "backend handler": [[872, "term-Backend-Handler"]], "compositional functions": [[872, "term-Compositional-Functions"]], "convenience functions": [[872, "term-Convenience-Functions"]], "framework": [[872, "term-Framework"]], "framework handler": [[872, "term-Framework-Handler"]], "graph compiler": [[872, "term-Graph-Compiler"]], "ivy array": [[872, "term-Ivy-Array"]], "ivy backends": [[872, "term-Ivy-Backends"]], "ivy compiler": [[872, "term-Ivy-Compiler"]], "ivy container": [[872, "term-Ivy-Container"]], "ivy frontends": [[872, "term-Ivy-Frontends"]], "ivy functional api": [[872, "term-Ivy-Functional-API"]], "ivy tracer": [[872, "term-Ivy-Tracer"]], "ivy transpiler": [[872, "term-Ivy-Transpiler"]], "mixed functions": [[872, "term-Mixed-Functions"]], "native array": [[872, "term-Native-Array"]], "nestable functions": [[872, "term-Nestable-Functions"]], "pipeline": [[872, "term-Pipeline"]], "primary functions": [[872, "term-Primary-Functions"]], "standalone functions": [[872, "term-Standalone-Functions"]], "submodule helper functions": [[872, "term-Submodule-Helper-Functions"]], "built-in function": [[877, "ivy.graph_transpile"], [878, "ivy.trace_graph"], [879, "ivy.transpile"], [880, "ivy.unify"]], "ivy.graph_transpile()": [[877, "ivy.graph_transpile"]], "ivy.trace_graph()": [[878, "ivy.trace_graph"]], "ivy.transpile()": [[879, "ivy.transpile"]], "ivy.unify()": [[880, "ivy.unify"]]}})