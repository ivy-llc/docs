Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/kornia_demo", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/learn_the_basics/torch_to_tf_functions", "demos/learn_the_basics/torch_to_tf_models", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/why_transpile", "overview/one_liners", "overview/one_liners/graph_transpile", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ivy_vs_onnx"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/kornia_demo.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/learn_the_basics/torch_to_tf_functions.ipynb", "demos/learn_the_basics/torch_to_tf_models.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/why_transpile.rst", "overview/one_liners.rst", "overview/one_liners/graph_transpile.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ivy_vs_onnx.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "Transpiling Functions from PyTorch to TensorFlow", "Transpiling Models from PyTorch to TensorFlow", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "complex", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "pad_sequence", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "requires_gradient", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Why Transpile?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.graph_transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "Frameworks", "Graph Tracers", "Comparing Ivy with ONNX"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 179, 182, 185, 186, 187, 189, 193, 194, 208, 211, 221, 227, 228, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 595, 601, 606, 607, 608, 609, 610, 612, 614, 615, 628, 629, 630, 631, 632, 634, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 741, 743, 744, 749, 750, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 875, 876, 878, 879, 881, 882, 883, 884, 885], "notebook": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 50, 59, 813, 832], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 206, 208, 210, 211, 213, 214, 216, 218, 221, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 399, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 423, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 446, 447, 448, 449, 451, 452, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 587, 588, 591, 592, 593, 595, 601, 605, 606, 607, 608, 610, 612, 614, 615, 616, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 793, 795, 796, 797, 798, 803, 807, 808, 810, 811, 812, 813, 814, 815, 817, 820, 821, 825, 826, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 881, 883, 884, 885], "dedic": [0, 808, 841, 856, 867], "task": [0, 1, 8, 9, 61, 656, 734, 735, 736, 832, 833, 835, 839, 840, 841, 861, 862, 875, 883], "util": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 58, 61, 70, 93, 212, 390, 461, 647, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 839, 846, 850, 853, 854, 857, 860, 864, 865, 869, 878], "power": [0, 33, 44, 45, 69, 70, 71, 75, 92, 93, 94, 98, 115, 116, 248, 257, 258, 292, 347, 360, 383, 386, 389, 437, 597, 608, 620, 648, 650, 653, 657, 695, 708, 743, 810, 866, 883], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 61, 62, 63, 70, 75, 76, 77, 85, 93, 98, 99, 108, 110, 111, 131, 378, 388, 392, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 509, 514, 560, 570, 610, 632, 633, 635, 641, 642, 650, 651, 653, 654, 655, 696, 712, 721, 722, 723, 725, 727, 728, 730, 732, 807, 813, 820, 826, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884], "emploi": [0, 26], "build": [0, 5, 15, 16, 30, 33, 40, 44, 45, 48, 49, 50, 51, 56, 58, 63, 81, 87, 116, 661, 768, 769, 770, 771, 811, 812, 813, 832, 833, 839, 842, 848, 849, 857, 859, 868, 870, 871, 873, 876, 878, 883], "The": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 60, 61, 62, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 142, 147, 148, 150, 152, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 184, 186, 187, 188, 191, 192, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 210, 212, 213, 214, 215, 220, 221, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 446, 448, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 487, 488, 489, 490, 494, 497, 498, 499, 504, 505, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 586, 588, 591, 592, 595, 597, 598, 601, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 797, 798, 803, 807, 808, 810, 811, 813, 814, 815, 820, 825, 826, 832, 833, 834, 836, 838, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 864, 865, 867, 868, 869, 870, 872, 873, 875, 876, 878, 879, 880, 881, 883, 884, 885], "goal": [0, 31, 58, 261, 648, 838, 841, 883, 885], "accur": [0, 8, 9, 23, 259, 277, 648, 653, 701, 858], "distinguish": 0, "between": [0, 8, 9, 26, 31, 32, 37, 49, 50, 51, 56, 69, 70, 71, 74, 75, 76, 77, 81, 87, 92, 93, 97, 98, 99, 100, 116, 139, 179, 242, 255, 290, 306, 348, 365, 367, 386, 389, 390, 391, 392, 401, 413, 414, 415, 426, 427, 428, 436, 442, 446, 467, 468, 469, 470, 471, 472, 473, 498, 499, 547, 645, 646, 648, 652, 654, 655, 657, 659, 661, 675, 698, 712, 713, 714, 715, 721, 729, 743, 758, 769, 770, 771, 796, 803, 815, 844, 845, 849, 851, 856, 857, 858, 860, 861, 862, 863, 864, 867, 870, 874, 875, 876, 878, 879, 880, 883, 884, 885], "activ": [0, 8, 9, 23, 27, 40, 44, 45, 70, 71, 74, 85, 93, 97, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 309, 310, 311, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 610, 652, 679, 682, 810, 811, 830, 832, 839, 840, 849, 855, 865, 866, 878, 883], "therebi": [0, 8, 9, 23, 864], "enhanc": [0, 39, 44, 45, 832, 863, 878], "secur": 0, "usag": [0, 10, 11, 227, 647, 832, 849, 857, 860, 864, 869, 871], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 34, 35, 36, 37, 46, 47, 48, 49, 50, 51, 58, 70, 74, 75, 77, 81, 83, 87, 93, 97, 98, 106, 224, 227, 232, 389, 392, 401, 417, 422, 432, 436, 482, 489, 490, 491, 498, 538, 539, 647, 652, 653, 655, 656, 657, 661, 663, 665, 666, 667, 668, 670, 672, 674, 678, 679, 682, 693, 694, 710, 719, 734, 735, 749, 768, 769, 770, 771, 776, 777, 780, 782, 784, 792, 811, 820, 825, 838, 839, 840, 843, 844, 846, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 869, 871, 878, 879, 883], "dive": [0, 26, 33, 44, 56, 832, 833, 834, 837, 838, 840, 843, 847, 849, 855, 862, 868, 871], "need": [0, 1, 4, 5, 10, 11, 19, 20, 24, 25, 31, 33, 39, 40, 44, 45, 58, 59, 60, 70, 71, 77, 93, 94, 100, 389, 390, 401, 412, 417, 418, 422, 443, 544, 555, 556, 577, 650, 652, 653, 655, 657, 679, 688, 718, 721, 748, 796, 834, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 867, 869, 871, 875, 878, 879, 883, 884], "up": [0, 4, 5, 10, 11, 12, 13, 19, 20, 24, 25, 26, 42, 44, 70, 71, 93, 94, 389, 392, 412, 425, 482, 490, 572, 584, 650, 652, 675, 677, 832, 833, 836, 838, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 875, 879, 884], "our": [0, 4, 5, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 31, 34, 35, 37, 39, 42, 44, 45, 46, 47, 49, 50, 51, 56, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 858, 861, 862, 863, 864, 865, 867, 870, 871, 875, 879], "necessari": [0, 8, 9, 10, 11, 23, 50, 66, 70, 89, 93, 100, 141, 254, 287, 391, 392, 466, 476, 477, 478, 484, 486, 487, 488, 489, 490, 497, 514, 600, 623, 648, 650, 721, 722, 723, 725, 727, 728, 730, 732, 832, 838, 839, 844, 845, 847, 849, 851, 860, 861, 864, 866, 867, 878, 879], "follow": [0, 1, 5, 8, 9, 10, 11, 23, 26, 36, 37, 40, 43, 44, 45, 48, 49, 50, 56, 59, 60, 70, 71, 72, 74, 75, 81, 87, 93, 94, 95, 97, 98, 148, 179, 182, 227, 237, 254, 261, 287, 289, 296, 297, 333, 383, 389, 391, 392, 395, 412, 425, 433, 471, 486, 498, 516, 518, 575, 576, 577, 607, 608, 631, 634, 636, 637, 638, 645, 646, 647, 648, 650, 651, 652, 653, 657, 661, 679, 682, 694, 700, 710, 743, 749, 768, 769, 770, 771, 811, 815, 834, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 879, 883], "command": [0, 5, 58, 60, 834, 839, 843, 846, 848, 854, 855, 872], "which": [0, 1, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 113, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 167, 169, 171, 177, 179, 182, 184, 187, 194, 206, 211, 215, 220, 222, 225, 226, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 336, 339, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 362, 364, 365, 366, 367, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 399, 401, 412, 413, 414, 415, 417, 418, 422, 423, 432, 433, 434, 436, 441, 444, 456, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 504, 505, 506, 507, 508, 509, 511, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 530, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 583, 584, 589, 590, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 675, 676, 677, 679, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 707, 709, 710, 712, 713, 714, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 732, 733, 742, 743, 744, 745, 750, 752, 753, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 807, 808, 810, 811, 812, 813, 814, 815, 816, 820, 821, 828, 830, 832, 834, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 876, 878, 879, 882, 883, 884, 885], "an": [0, 1, 4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 23, 24, 25, 26, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 50, 56, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 179, 182, 185, 189, 193, 194, 224, 228, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 330, 331, 332, 334, 335, 342, 343, 344, 345, 346, 347, 349, 350, 352, 355, 359, 364, 368, 373, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 421, 423, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 470, 471, 475, 476, 477, 478, 482, 483, 484, 486, 493, 497, 498, 505, 507, 511, 513, 514, 516, 517, 518, 521, 523, 524, 526, 529, 530, 535, 536, 537, 538, 539, 540, 541, 544, 545, 548, 553, 555, 556, 564, 567, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 586, 592, 595, 596, 605, 606, 610, 614, 615, 616, 629, 632, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 677, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 743, 756, 758, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 883, 884, 885], "machin": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 37, 39, 40, 47, 48, 56, 62, 70, 75, 93, 98, 179, 182, 390, 444, 646, 653, 696, 699, 839, 843, 857, 870, 872, 873, 875, 876, 883], "learn": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 34, 35, 36, 38, 40, 44, 45, 46, 47, 48, 49, 56, 58, 70, 72, 95, 390, 391, 461, 466, 560, 631, 634, 636, 637, 638, 650, 651, 656, 734, 735, 736, 815, 833, 837, 838, 839, 842, 843, 849, 854, 855, 857, 859, 868, 870, 873, 875, 876, 885], "other": [0, 4, 5, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 40, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 67, 69, 70, 71, 77, 83, 87, 90, 92, 93, 94, 100, 106, 110, 115, 116, 139, 155, 167, 193, 254, 259, 261, 277, 286, 287, 351, 355, 386, 392, 482, 483, 491, 549, 550, 645, 646, 648, 650, 659, 663, 719, 729, 760, 783, 785, 792, 797, 832, 836, 838, 839, 840, 841, 843, 844, 847, 848, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 864, 865, 867, 870, 871, 872, 873, 878, 879, 882, 883, 885], "essenti": [0, 835, 838, 845, 847, 850, 851, 857, 860, 861, 862], "panda": [0, 26, 58, 60], "matplotlib": [0, 5, 8, 9, 10, 11, 23, 26, 37, 39, 40, 58, 59, 60, 63], "scikit": [0, 26, 390, 461], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 61, 62, 63, 66, 71, 75, 85, 94, 98, 143, 181, 208, 209, 213, 223, 225, 230, 297, 349, 350, 386, 392, 511, 553, 577, 610, 645, 646, 647, 648, 650, 653, 656, 703, 735, 736, 792, 803, 808, 820, 830, 832, 836, 839, 840, 843, 844, 845, 846, 848, 849, 850, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 873, 878, 879, 880, 881], "cryptographi": [0, 5, 26], "These": [0, 26, 51, 70, 93, 390, 392, 401, 443, 497, 537, 652, 653, 679, 688, 689, 832, 835, 837, 838, 839, 840, 843, 847, 849, 851, 852, 856, 857, 860, 861, 864, 869, 871, 873, 875, 878, 883], "tool": [0, 23, 26, 33, 44, 45, 832, 839, 840, 851, 855, 871, 876, 878, 883, 884, 885], "provid": [0, 8, 9, 15, 16, 23, 31, 33, 37, 40, 44, 45, 49, 50, 56, 62, 66, 70, 71, 75, 77, 80, 83, 84, 87, 89, 93, 94, 98, 100, 103, 106, 107, 135, 153, 155, 172, 173, 174, 175, 176, 184, 194, 206, 210, 223, 306, 389, 390, 392, 395, 401, 425, 433, 437, 442, 446, 459, 460, 464, 465, 482, 484, 493, 514, 516, 518, 547, 559, 591, 592, 644, 645, 646, 647, 648, 650, 652, 653, 655, 657, 660, 663, 664, 679, 695, 698, 709, 721, 722, 729, 741, 763, 783, 785, 786, 787, 796, 811, 815, 820, 821, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 871, 876, 878, 879, 881, 883, 884, 885], "robust": [0, 875], "foundat": [0, 33], "manipul": [0, 70, 93, 860, 861, 865, 867, 869, 883], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 39, 40, 44, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 130, 131, 139, 140, 141, 142, 143, 146, 148, 150, 151, 152, 153, 154, 155, 157, 161, 163, 167, 168, 169, 177, 179, 182, 187, 189, 194, 211, 212, 220, 225, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 334, 335, 342, 344, 349, 350, 352, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 408, 409, 410, 411, 413, 414, 416, 417, 418, 421, 422, 426, 427, 428, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 454, 460, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 481, 482, 483, 484, 485, 488, 489, 490, 493, 494, 495, 497, 498, 499, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 519, 520, 521, 522, 525, 527, 528, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 570, 573, 575, 576, 577, 584, 591, 592, 607, 608, 609, 610, 612, 616, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 798, 810, 811, 815, 825, 826, 832, 836, 838, 839, 845, 846, 847, 848, 849, 851, 854, 859, 862, 864, 867, 869, 870, 879, 883], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 62, 63, 832, 836, 839, 846, 855], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 58, 59, 60, 70, 74, 75, 93, 97, 98, 376, 386, 390, 401, 443, 547, 652, 653, 657, 679, 682, 688, 689, 700, 745, 839, 840, 842, 862, 871], "r": [0, 4, 5, 21, 22, 23, 58, 59, 70, 75, 87, 93, 98, 110, 111, 363, 378, 386, 388, 632, 651, 653, 655, 700, 732, 839, 840, 842, 859, 862, 872], "requir": [0, 5, 8, 9, 10, 11, 23, 36, 37, 39, 40, 42, 43, 49, 58, 59, 60, 63, 69, 70, 87, 92, 93, 288, 301, 305, 390, 392, 443, 444, 498, 639, 648, 651, 653, 655, 688, 689, 690, 729, 795, 803, 808, 826, 834, 838, 839, 844, 846, 848, 849, 850, 851, 852, 853, 855, 856, 858, 861, 862, 863, 864, 865, 867, 869, 871, 872, 875, 878, 883], "txt": [0, 4, 5, 8, 9, 21, 22, 59, 71, 839, 843, 846, 872], "16": [0, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 23, 26, 37, 39, 40, 56, 58, 60, 69, 70, 71, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 102, 115, 116, 182, 248, 277, 297, 304, 360, 363, 367, 386, 389, 392, 401, 408, 409, 411, 417, 421, 422, 426, 427, 432, 436, 471, 488, 538, 544, 561, 564, 586, 607, 608, 641, 646, 648, 650, 651, 652, 653, 655, 657, 659, 660, 663, 674, 676, 683, 687, 690, 691, 698, 700, 704, 732, 745, 758, 759, 760, 767, 777, 778, 795, 798, 840, 849, 851], "mb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 58, 60, 63, 848], "25": [0, 14, 23, 26, 56, 58, 59, 60, 69, 70, 71, 75, 76, 79, 83, 86, 92, 93, 94, 97, 98, 101, 102, 106, 115, 116, 131, 142, 151, 237, 238, 248, 254, 256, 267, 272, 287, 292, 295, 297, 300, 301, 302, 307, 329, 383, 391, 401, 432, 467, 470, 538, 547, 575, 576, 592, 607, 645, 648, 650, 653, 654, 657, 658, 663, 666, 683, 687, 692, 708, 713, 738, 745, 749, 756, 758, 759, 760, 777, 778, 780, 785, 841, 847, 859], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 166, 167, 168, 169, 173, 177, 178, 179, 182, 187, 189, 194, 210, 211, 215, 219, 220, 222, 223, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 459, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 587, 589, 591, 592, 596, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 798, 800, 803, 807, 810, 811, 812, 813, 814, 815, 816, 820, 825, 826, 830, 832, 835, 836, 839, 840, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 867, 869, 870, 871, 878, 879, 881], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 56, 59, 61, 62, 63, 66, 70, 71, 72, 75, 83, 93, 95, 98, 106, 135, 153, 159, 160, 180, 181, 210, 213, 214, 226, 261, 296, 343, 348, 349, 350, 352, 363, 365, 371, 375, 377, 383, 386, 387, 389, 390, 391, 392, 395, 396, 401, 404, 405, 412, 418, 423, 434, 442, 446, 454, 463, 468, 470, 471, 487, 489, 490, 498, 516, 517, 518, 527, 537, 547, 565, 566, 572, 586, 609, 610, 631, 633, 634, 635, 636, 638, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 657, 663, 667, 669, 671, 673, 679, 686, 694, 696, 703, 704, 710, 749, 783, 785, 796, 810, 811, 812, 813, 814, 815, 816, 820, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 878, 879, 880, 881, 883, 884, 885], "eta": [0, 10, 11, 15, 16, 17, 18, 58, 60, 63], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 44, 45, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 143, 146, 148, 149, 150, 151, 152, 155, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 177, 179, 182, 183, 187, 189, 194, 207, 210, 212, 215, 220, 221, 222, 223, 225, 226, 227, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 399, 401, 408, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 426, 427, 428, 429, 432, 433, 434, 436, 439, 440, 441, 443, 444, 445, 448, 449, 451, 454, 455, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 481, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 554, 555, 556, 559, 560, 561, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 587, 589, 591, 592, 596, 601, 605, 606, 607, 608, 610, 612, 614, 615, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 798, 800, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 820, 825, 826, 830, 832, 836, 839, 840, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 859, 860, 861, 862, 864, 865, 869, 871, 878, 879], "00": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 26, 58, 60, 63, 70, 71, 75, 93, 94, 98, 259, 326, 357, 358, 383, 389, 411, 417, 421, 422, 564, 608, 648, 650, 653, 690, 700, 795, 855, 864], "44": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 56, 60, 69, 70, 79, 92, 93, 102, 240, 287, 297, 301, 302, 353, 386, 389, 410, 411, 648, 652, 653, 657, 660, 663, 675, 698, 745, 758, 759, 767, 778], "6": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 39, 40, 42, 44, 45, 56, 58, 59, 60, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 115, 116, 123, 125, 130, 135, 140, 141, 149, 150, 153, 154, 157, 163, 167, 168, 169, 177, 179, 187, 233, 234, 236, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 282, 284, 285, 286, 287, 289, 290, 291, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 310, 311, 313, 315, 317, 319, 320, 321, 323, 324, 325, 326, 327, 333, 344, 349, 350, 352, 354, 363, 364, 366, 367, 368, 370, 377, 381, 383, 386, 387, 389, 390, 391, 392, 397, 399, 401, 411, 413, 416, 417, 421, 422, 426, 432, 433, 434, 436, 439, 442, 445, 446, 450, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 482, 484, 488, 489, 493, 494, 497, 498, 499, 504, 505, 507, 508, 511, 514, 515, 525, 527, 528, 530, 535, 537, 538, 539, 540, 542, 544, 546, 547, 553, 555, 556, 559, 560, 561, 567, 568, 575, 576, 577, 592, 606, 607, 608, 609, 610, 612, 616, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 682, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 748, 749, 755, 756, 757, 758, 759, 760, 762, 763, 764, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 795, 810, 836, 839, 843, 845, 847, 848, 849, 851, 854, 859, 864, 867, 869], "kb": [0, 8, 9, 10, 11, 15, 16, 17, 18, 21, 22, 23, 58, 60, 63], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 42, 43, 44, 45, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 146, 148, 150, 151, 153, 154, 155, 156, 157, 161, 162, 163, 166, 167, 168, 169, 173, 177, 179, 187, 189, 194, 208, 210, 211, 222, 225, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 344, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 406, 408, 409, 410, 411, 413, 416, 417, 418, 421, 422, 426, 427, 428, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 457, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 519, 520, 521, 522, 525, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 587, 591, 592, 605, 606, 607, 608, 612, 615, 616, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 798, 811, 825, 826, 830, 832, 836, 838, 839, 843, 844, 845, 847, 848, 849, 851, 853, 854, 857, 859, 862, 864, 869, 870, 878, 879], "45": [0, 5, 10, 11, 14, 15, 16, 17, 18, 56, 58, 60, 69, 70, 83, 92, 93, 95, 97, 102, 116, 238, 242, 254, 297, 298, 357, 358, 371, 386, 389, 401, 411, 421, 432, 538, 544, 630, 636, 648, 651, 653, 655, 663, 698, 727, 759, 760, 778, 795], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 37, 39, 40, 44, 45, 56, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 110, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 139, 140, 141, 142, 148, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 167, 168, 169, 173, 177, 179, 187, 189, 194, 211, 220, 225, 228, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 344, 347, 349, 350, 352, 354, 356, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 397, 399, 401, 408, 409, 410, 411, 413, 414, 416, 417, 418, 421, 422, 426, 427, 428, 431, 432, 433, 434, 436, 439, 442, 443, 445, 446, 448, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485, 488, 489, 492, 493, 494, 497, 498, 499, 504, 505, 506, 507, 508, 509, 511, 514, 515, 520, 521, 522, 525, 527, 528, 530, 535, 537, 538, 539, 540, 541, 542, 544, 547, 553, 554, 555, 556, 559, 560, 561, 562, 564, 567, 568, 570, 573, 575, 576, 577, 591, 592, 596, 607, 608, 609, 610, 612, 616, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 708, 709, 712, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 740, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 811, 825, 826, 832, 835, 838, 839, 840, 843, 845, 847, 848, 849, 851, 853, 854, 856, 859, 862, 864, 878], "143": [0, 10, 11, 15, 16, 17, 18, 75, 92, 116, 304, 648, 653, 691, 851], "8": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 56, 58, 60, 63, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 115, 116, 123, 138, 149, 150, 154, 157, 163, 172, 174, 175, 176, 179, 187, 212, 229, 237, 239, 240, 244, 245, 248, 249, 250, 252, 258, 261, 265, 266, 272, 273, 274, 278, 279, 282, 283, 285, 286, 287, 292, 293, 296, 297, 298, 301, 302, 305, 306, 307, 311, 317, 319, 320, 321, 323, 324, 326, 327, 344, 348, 360, 363, 365, 366, 367, 370, 377, 381, 383, 386, 389, 390, 391, 392, 401, 408, 409, 410, 411, 416, 417, 421, 422, 426, 427, 431, 432, 436, 439, 442, 450, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 482, 484, 488, 493, 494, 504, 505, 508, 509, 510, 511, 514, 515, 525, 527, 539, 542, 543, 547, 553, 554, 560, 561, 564, 567, 571, 575, 576, 577, 579, 580, 583, 586, 591, 592, 596, 606, 607, 608, 609, 610, 630, 633, 635, 637, 638, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 666, 670, 671, 673, 674, 675, 676, 679, 685, 686, 687, 689, 690, 691, 693, 694, 695, 698, 700, 701, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 718, 722, 729, 730, 732, 738, 745, 749, 757, 758, 759, 760, 762, 767, 768, 770, 772, 773, 775, 777, 778, 780, 782, 784, 785, 795, 798, 811, 839, 847, 848, 851, 864], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 35, 37, 39, 40, 56, 58, 59, 60, 62, 63, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 125, 126, 127, 128, 139, 140, 141, 151, 154, 155, 173, 179, 182, 212, 234, 237, 240, 244, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 260, 261, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 284, 285, 286, 287, 289, 290, 291, 293, 294, 297, 298, 299, 301, 304, 305, 307, 308, 310, 311, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 332, 333, 344, 348, 352, 354, 355, 363, 364, 365, 367, 369, 370, 377, 381, 383, 386, 387, 389, 390, 391, 392, 397, 401, 408, 409, 410, 411, 416, 417, 421, 422, 426, 431, 432, 433, 434, 436, 439, 442, 455, 467, 468, 469, 470, 472, 473, 476, 477, 478, 482, 484, 488, 493, 494, 497, 498, 504, 505, 507, 508, 510, 511, 514, 515, 525, 527, 528, 535, 538, 539, 541, 542, 547, 553, 555, 556, 560, 561, 564, 575, 576, 577, 584, 591, 592, 607, 610, 630, 631, 633, 634, 635, 636, 637, 638, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 669, 671, 673, 674, 675, 676, 682, 684, 685, 686, 687, 689, 690, 691, 693, 695, 698, 700, 701, 703, 704, 705, 707, 708, 709, 712, 713, 714, 718, 721, 722, 727, 729, 730, 732, 737, 738, 745, 749, 756, 757, 758, 759, 760, 762, 767, 768, 770, 772, 773, 775, 776, 777, 778, 780, 782, 784, 785, 795, 839, 840, 845, 847, 848, 851, 857, 860, 864], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 40, 43, 56, 58, 60, 63, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 81, 82, 83, 86, 90, 92, 93, 94, 95, 97, 98, 100, 102, 104, 105, 106, 115, 116, 123, 139, 140, 141, 154, 172, 173, 174, 175, 176, 179, 182, 235, 237, 239, 240, 243, 244, 245, 248, 249, 254, 255, 256, 261, 268, 274, 275, 276, 278, 282, 283, 285, 286, 287, 290, 292, 293, 297, 298, 301, 302, 303, 308, 314, 317, 318, 319, 356, 359, 363, 369, 370, 377, 381, 386, 387, 389, 391, 392, 399, 401, 408, 409, 410, 411, 416, 417, 421, 422, 426, 427, 431, 432, 436, 450, 467, 469, 471, 472, 476, 477, 478, 484, 488, 493, 504, 505, 506, 507, 509, 511, 514, 525, 527, 530, 539, 556, 560, 561, 562, 564, 567, 575, 576, 579, 580, 583, 591, 592, 606, 607, 609, 630, 631, 632, 636, 637, 642, 645, 646, 648, 650, 651, 652, 653, 655, 657, 659, 660, 661, 662, 663, 666, 667, 668, 674, 675, 676, 684, 685, 687, 689, 690, 691, 693, 694, 695, 698, 700, 701, 703, 704, 705, 707, 708, 709, 718, 722, 726, 727, 729, 730, 732, 737, 738, 743, 745, 748, 749, 757, 758, 759, 760, 762, 767, 768, 770, 772, 773, 775, 777, 778, 780, 782, 784, 785, 795, 815, 847, 849, 851, 859, 864], "756": [0, 10, 11, 15, 16, 17, 18], "21": [0, 4, 5, 10, 11, 15, 16, 23, 26, 56, 58, 60, 63, 69, 70, 71, 79, 89, 92, 93, 97, 98, 102, 106, 115, 152, 182, 237, 240, 242, 248, 272, 287, 318, 370, 389, 390, 391, 392, 401, 408, 411, 421, 426, 432, 434, 436, 440, 466, 481, 538, 592, 645, 646, 648, 650, 653, 657, 663, 687, 698, 702, 743, 758, 759, 776, 777, 778, 853, 859], "116": [0, 10, 11, 15, 16, 17, 18], "23": [0, 5, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 69, 70, 75, 79, 89, 92, 93, 94, 97, 102, 150, 249, 252, 269, 270, 271, 294, 296, 297, 298, 300, 307, 352, 353, 386, 389, 392, 401, 408, 409, 411, 421, 426, 427, 428, 432, 436, 481, 538, 544, 645, 648, 652, 653, 657, 660, 671, 673, 687, 691, 694, 702, 704, 705, 738, 745, 749, 758, 759, 760, 767, 832, 848, 864, 869], "29": [0, 5, 8, 9, 23, 26, 56, 58, 60, 63, 75, 92, 94, 95, 97, 102, 242, 401, 432, 538, 560, 561, 632, 636, 648, 650, 651, 653, 691, 758, 759, 760], "823": 0, "46": [0, 8, 9, 14, 23, 56, 58, 60, 70, 79, 93, 97, 102, 152, 277, 298, 328, 383, 389, 409, 427, 428, 645, 648, 657, 738, 758, 759], "14": [0, 4, 5, 8, 9, 12, 13, 19, 20, 21, 22, 23, 56, 58, 59, 60, 67, 69, 70, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 102, 166, 179, 182, 235, 240, 242, 249, 253, 279, 283, 287, 293, 300, 308, 359, 389, 390, 392, 401, 408, 409, 410, 411, 421, 426, 428, 431, 432, 433, 436, 440, 446, 447, 482, 484, 488, 493, 514, 538, 607, 630, 646, 648, 650, 651, 652, 653, 655, 657, 661, 663, 666, 667, 669, 671, 673, 675, 687, 689, 691, 698, 705, 707, 709, 732, 749, 758, 759, 760, 768, 777, 778, 847, 851, 864], "731": [0, 64, 129], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 33, 35, 37, 39, 40, 44, 45, 56, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 166, 167, 168, 169, 173, 177, 179, 187, 189, 194, 210, 211, 212, 215, 218, 220, 222, 225, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 335, 342, 344, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 399, 401, 405, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 421, 422, 423, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 455, 457, 460, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 519, 520, 522, 525, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 587, 589, 591, 592, 596, 605, 606, 607, 608, 609, 610, 612, 616, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 797, 798, 807, 810, 811, 820, 825, 826, 830, 832, 836, 839, 840, 843, 845, 846, 847, 848, 849, 851, 853, 854, 856, 857, 859, 860, 861, 862, 864, 869, 870, 871, 878, 879, 881], "121": 0, "56": [0, 21, 22, 26, 56, 58, 69, 70, 74, 79, 92, 93, 97, 152, 287, 301, 304, 307, 389, 411, 421, 630, 645, 648, 651, 652, 653, 657, 663, 667, 669, 671, 673, 676, 698, 737, 759, 778, 851], "124": [0, 652, 676], "196": [0, 97, 652, 676], "166": [0, 86, 123, 642], "99": [0, 23, 26, 56, 69, 70, 72, 90, 92, 102, 149, 236, 251, 374, 386, 607, 634, 645, 648, 650, 651, 657, 663, 741, 749, 759, 778], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 33, 35, 37, 39, 40, 56, 58, 59, 60, 63, 69, 70, 71, 74, 75, 79, 83, 92, 93, 94, 97, 98, 100, 102, 106, 116, 237, 241, 244, 249, 259, 296, 297, 303, 367, 386, 389, 390, 392, 408, 409, 421, 426, 427, 431, 432, 436, 445, 481, 482, 484, 488, 493, 495, 514, 538, 539, 554, 560, 561, 567, 576, 592, 648, 650, 652, 653, 654, 655, 657, 659, 660, 661, 663, 666, 667, 675, 676, 687, 690, 691, 692, 693, 694, 698, 702, 703, 704, 705, 707, 709, 712, 722, 727, 728, 730, 732, 743, 745, 755, 758, 759, 760, 767, 768, 776, 777, 778, 785, 847, 848, 849, 851, 859], "71": [0, 56, 69, 92, 97, 253, 293, 432, 648], "To": [0, 1, 8, 9, 21, 22, 23, 24, 25, 26, 27, 29, 33, 37, 39, 40, 44, 45, 56, 59, 60, 61, 111, 261, 391, 470, 601, 648, 650, 810, 838, 839, 843, 844, 845, 846, 849, 851, 853, 854, 855, 857, 858, 861, 862, 863, 864, 865, 878, 879], "ensur": [0, 1, 21, 22, 24, 25, 27, 29, 37, 39, 40, 70, 71, 93, 94, 389, 390, 426, 427, 428, 461, 577, 650, 790, 832, 835, 838, 839, 840, 844, 849, 850, 851, 853, 855, 856, 858, 860, 861, 862, 863, 864, 865, 883, 885], "begin": [0, 10, 11, 70, 93, 298, 391, 392, 466, 482, 498, 500, 501, 502, 503, 648, 657, 737, 748, 795, 839, 843, 848, 862], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 56, 57, 58, 60, 61, 62, 63, 69, 70, 71, 83, 92, 93, 94, 161, 190, 208, 213, 238, 298, 321, 342, 383, 401, 537, 544, 553, 577, 607, 610, 614, 645, 646, 647, 648, 650, 653, 663, 701, 778, 790, 792, 803, 820, 825, 826, 832, 837, 838, 839, 840, 843, 844, 845, 848, 849, 850, 853, 854, 856, 860, 862, 864, 865, 867, 869, 870, 872, 873, 875, 878, 879, 881], "handl": [0, 4, 5, 12, 13, 56, 58, 64, 68, 69, 70, 86, 87, 91, 92, 93, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 207, 208, 209, 210, 211, 215, 220, 221, 229, 233, 239, 251, 276, 278, 292, 298, 299, 304, 305, 309, 314, 315, 317, 381, 392, 481, 508, 642, 647, 648, 653, 663, 707, 782, 784, 807, 815, 833, 835, 842, 847, 848, 849, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 885], "its": [0, 1, 8, 9, 23, 24, 25, 33, 35, 44, 45, 47, 50, 57, 58, 60, 65, 67, 70, 77, 87, 90, 93, 94, 100, 113, 125, 128, 131, 136, 167, 172, 173, 174, 175, 176, 227, 254, 287, 306, 316, 381, 389, 392, 401, 429, 437, 511, 513, 540, 564, 613, 642, 644, 646, 647, 648, 650, 653, 655, 657, 693, 721, 725, 726, 730, 743, 792, 826, 838, 839, 844, 847, 848, 849, 850, 852, 853, 854, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 871, 873, 875, 876, 879, 883, 885], "backend": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 35, 36, 37, 39, 40, 45, 47, 48, 50, 65, 66, 70, 71, 75, 87, 93, 94, 98, 115, 143, 180, 181, 184, 206, 213, 214, 216, 219, 230, 349, 350, 386, 390, 442, 444, 544, 553, 565, 566, 574, 577, 578, 588, 595, 610, 613, 645, 646, 647, 650, 653, 701, 703, 790, 792, 793, 795, 796, 797, 800, 802, 803, 808, 812, 813, 815, 819, 820, 836, 837, 839, 840, 842, 843, 844, 848, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 866, 867, 870, 873, 878, 879, 881, 883], "jax": [0, 3, 8, 9, 21, 22, 23, 31, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 50, 56, 58, 62, 64, 69, 70, 71, 81, 86, 92, 93, 94, 123, 124, 125, 126, 127, 128, 129, 130, 131, 223, 305, 309, 314, 315, 317, 363, 381, 386, 401, 547, 577, 610, 629, 642, 647, 648, 650, 661, 768, 769, 770, 771, 803, 807, 820, 832, 836, 837, 838, 839, 840, 843, 845, 849, 850, 853, 854, 856, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 875, 876, 878, 879, 881, 884], "capabl": [0, 8, 9, 31, 39, 45, 864, 867], "optim": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 33, 37, 40, 44, 45, 58, 60, 61, 63, 70, 72, 93, 95, 326, 383, 391, 470, 471, 551, 638, 650, 651, 656, 734, 735, 736, 810, 826, 832, 849, 860, 867, 875, 876, 878, 883, 884, 885], "frontend": [0, 26, 594, 650, 792, 793, 796, 800, 803, 837, 840, 842, 848, 849, 853, 854, 859, 863, 864, 867, 870, 873, 878, 883], "xgb_frontend": 0, "access": [0, 1, 39, 44, 45, 87, 832, 838, 839, 840, 848, 849, 855, 860, 861, 878, 883], "compat": [0, 8, 9, 15, 16, 34, 40, 46, 50, 56, 63, 69, 70, 75, 77, 80, 83, 84, 92, 93, 98, 100, 103, 106, 107, 115, 116, 168, 237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 265, 266, 273, 274, 279, 281, 283, 284, 287, 290, 292, 296, 303, 308, 349, 350, 386, 646, 648, 653, 655, 660, 663, 664, 684, 696, 699, 702, 705, 709, 710, 725, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 830, 839, 845, 856, 861, 862, 865, 869, 871], "manner": [0, 35, 45, 47, 57, 65, 88, 657, 749, 839, 849, 850, 852, 857, 861, 865, 871], "sklearn": [0, 26], "model_select": [0, 26], "timeit": [0, 19, 20, 24, 25, 26, 35, 44, 45, 61, 63], "oper": [0, 8, 9, 33, 34, 37, 39, 40, 44, 45, 46, 50, 57, 60, 66, 67, 69, 70, 71, 74, 75, 83, 87, 89, 90, 92, 93, 94, 97, 98, 106, 116, 131, 151, 152, 194, 224, 232, 237, 239, 248, 251, 254, 261, 276, 278, 287, 288, 292, 296, 299, 304, 316, 324, 344, 345, 346, 378, 381, 383, 388, 389, 391, 392, 403, 404, 405, 406, 408, 409, 410, 416, 417, 418, 422, 426, 427, 428, 429, 431, 432, 434, 436, 437, 466, 504, 506, 553, 560, 561, 562, 610, 642, 645, 646, 647, 648, 650, 652, 653, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 679, 694, 705, 707, 780, 782, 784, 795, 798, 811, 826, 830, 838, 839, 842, 843, 844, 847, 849, 850, 851, 852, 853, 857, 860, 861, 864, 867, 869, 873, 879, 883, 884, 885], "xgb": 0, "functool": [0, 26, 58, 853, 861], "higher": [0, 26, 70, 93, 390, 392, 401, 447, 459, 465, 476, 477, 478, 547, 810, 849, 860, 869, 870, 871, 883, 884], "order": [0, 4, 5, 36, 48, 50, 58, 61, 63, 66, 70, 71, 74, 75, 77, 81, 82, 87, 93, 97, 98, 100, 104, 105, 110, 115, 116, 140, 141, 153, 161, 242, 261, 304, 342, 363, 383, 386, 389, 390, 392, 395, 399, 435, 440, 443, 444, 445, 446, 447, 451, 457, 459, 462, 465, 488, 489, 490, 495, 496, 509, 516, 517, 518, 521, 530, 645, 648, 652, 653, 655, 656, 660, 661, 662, 666, 667, 668, 669, 670, 671, 674, 688, 689, 694, 703, 704, 708, 710, 722, 725, 734, 735, 766, 768, 769, 770, 771, 772, 774, 775, 792, 814, 816, 826, 838, 839, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 871, 883, 884, 885], "callabl": [0, 21, 22, 62, 70, 71, 85, 93, 94, 97, 108, 135, 136, 138, 180, 181, 213, 214, 227, 377, 379, 380, 387, 388, 389, 392, 432, 435, 437, 475, 498, 550, 554, 559, 561, 565, 566, 587, 616, 629, 633, 635, 641, 644, 646, 647, 650, 651, 656, 657, 734, 735, 736, 743, 744, 745, 747, 748, 749, 750, 790, 793, 803, 815, 827, 830, 847, 853, 859, 861, 869, 877, 878, 879, 881], "object": [0, 5, 14, 26, 33, 40, 44, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 116, 119, 120, 143, 147, 148, 158, 170, 179, 182, 190, 193, 228, 286, 524, 572, 588, 632, 645, 646, 647, 650, 651, 657, 659, 740, 741, 742, 744, 745, 746, 752, 753, 754, 755, 762, 790, 792, 793, 800, 801, 802, 808, 809, 811, 812, 813, 820, 825, 844, 845, 847, 848, 857, 858, 861, 862, 864, 867, 870, 878, 879, 880, 881, 883], "tqdm_notebook": [0, 26], "tqdm": [0, 5, 8, 9, 10, 11, 26, 37, 39, 40, 58, 60], "progress": [0, 653, 708, 835, 839, 840, 870, 876], "bar": [0, 839, 854], "jupyt": [0, 1, 5], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 21, 22, 26, 44, 45, 58, 61, 879], "step": [0, 1, 2, 8, 9, 10, 11, 23, 28, 29, 30, 41, 44, 45, 56, 58, 59, 60, 70, 72, 89, 93, 95, 139, 151, 389, 392, 435, 437, 492, 630, 631, 634, 636, 637, 638, 645, 651, 656, 734, 735, 736, 815, 830, 832, 838, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 854, 859, 861, 864, 869, 883], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 37, 38, 39, 40, 42, 44, 45, 46, 49, 50, 51, 56, 57, 58, 59, 60, 61, 63, 66, 70, 92, 93, 94, 140, 141, 143, 154, 190, 267, 271, 321, 389, 390, 417, 422, 438, 607, 645, 646, 648, 650, 657, 743, 792, 820, 825, 826, 832, 838, 844, 849, 850, 853, 856, 860, 861, 862, 864, 865, 867, 869, 873, 881], "pd": [0, 26, 60], "set_backend": [0, 4, 5, 6, 7, 12, 13, 21, 22, 26, 33, 34, 35, 36, 37, 38, 44, 45, 47, 48, 49, 50, 51, 57, 59, 60, 61, 69, 71, 85, 92, 94, 181, 190, 208, 209, 213, 223, 225, 230, 238, 553, 577, 646, 647, 650, 653, 656, 701, 735, 736, 820, 832, 843, 845, 849, 850, 857, 858, 859, 869, 878, 879, 881], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 36, 39, 44, 45, 58, 59, 61, 87, 657, 750, 832, 839, 843, 846, 848, 855, 862, 879, 884], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 34, 36, 37, 39, 40, 44, 45, 58, 60, 65, 71, 72, 87, 94, 95, 110, 392, 504, 577, 591, 592, 595, 596, 619, 630, 631, 634, 636, 637, 638, 650, 651, 652, 656, 657, 675, 678, 734, 735, 736, 744, 745, 749, 754, 755, 803, 808, 814, 815, 820, 826, 832, 838, 839, 840, 842, 843, 844, 847, 848, 849, 851, 856, 858, 859, 861, 862, 864, 867, 869, 871], "jax_enable_x64": [0, 6, 7, 12, 13, 19, 20, 24, 25, 26, 36, 39, 44, 45, 832], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 36, 37, 39, 40, 42, 44, 45, 49, 50, 51, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 170, 177, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 194, 206, 210, 211, 213, 214, 218, 221, 222, 224, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 383, 386, 387, 389, 390, 391, 392, 395, 401, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 484, 485, 486, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 530, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 591, 592, 593, 596, 599, 600, 602, 603, 605, 606, 607, 608, 610, 612, 614, 615, 617, 622, 623, 625, 626, 628, 631, 632, 634, 636, 637, 638, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 743, 744, 745, 747, 748, 749, 750, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 800, 811, 812, 813, 814, 815, 817, 820, 822, 823, 825, 826, 830, 832, 836, 839, 845, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 860, 861, 862, 864, 866, 867, 869, 870, 878, 879], "from": [0, 2, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 80, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 103, 106, 107, 108, 110, 111, 113, 116, 139, 141, 145, 147, 148, 149, 150, 153, 154, 157, 161, 163, 169, 187, 193, 194, 210, 215, 220, 226, 227, 253, 261, 262, 289, 293, 294, 301, 305, 326, 327, 333, 336, 342, 344, 345, 346, 353, 356, 360, 361, 363, 364, 376, 380, 383, 386, 388, 389, 390, 391, 392, 396, 401, 413, 414, 415, 429, 434, 435, 454, 461, 466, 467, 471, 481, 484, 493, 498, 505, 507, 508, 510, 511, 513, 514, 523, 524, 525, 526, 527, 538, 539, 559, 567, 568, 570, 590, 601, 612, 629, 631, 632, 636, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 659, 660, 661, 663, 664, 666, 674, 675, 684, 687, 703, 707, 708, 709, 719, 722, 725, 728, 734, 735, 736, 738, 749, 750, 751, 757, 758, 759, 760, 764, 767, 768, 770, 776, 777, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 803, 808, 810, 811, 812, 813, 815, 820, 826, 830, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "classification_report": [0, 26], "train_test_split": [0, 26], "usr": [0, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 58, 59, 60, 63, 839], "local": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 45, 49, 50, 51, 58, 59, 60, 63, 395, 521, 572, 650, 833, 839, 843, 846, 854, 857, 862, 864], "lib": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 26, 37, 39, 40, 58, 59, 60, 63], "python3": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 37, 39, 40, 44, 58, 60, 63, 839, 840], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 51, 56, 58, 60, 62, 63, 66, 69, 70, 71, 72, 74, 75, 79, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 139, 150, 151, 152, 236, 244, 245, 248, 249, 252, 259, 264, 266, 272, 274, 276, 287, 293, 300, 301, 306, 315, 348, 349, 350, 353, 357, 358, 360, 362, 363, 365, 366, 367, 369, 370, 374, 377, 386, 389, 392, 401, 408, 409, 410, 411, 421, 426, 427, 431, 432, 433, 434, 436, 466, 478, 481, 484, 488, 493, 504, 505, 514, 535, 538, 539, 542, 544, 547, 560, 561, 562, 564, 567, 568, 570, 575, 576, 584, 592, 596, 601, 607, 609, 621, 624, 636, 645, 648, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 669, 675, 685, 687, 691, 692, 693, 694, 695, 698, 703, 704, 705, 707, 709, 722, 727, 728, 729, 730, 732, 743, 745, 748, 756, 757, 758, 759, 760, 766, 768, 774, 776, 777, 778, 779, 781, 782, 784, 785, 795, 797, 815, 832, 836, 839, 843, 847, 848, 849, 851, 854, 859, 862, 864, 869, 881], "dist": [0, 10, 11, 12, 13, 15, 16, 17, 18, 23, 58, 59, 60, 63], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 27, 37, 39, 40, 45, 58, 59, 60, 63, 824, 836, 839, 848, 861, 871, 872, 883], "except": [0, 10, 11, 15, 16, 17, 18, 23, 24, 25, 34, 37, 39, 40, 59, 60, 63, 70, 71, 77, 79, 84, 87, 93, 94, 98, 102, 107, 168, 349, 350, 355, 374, 386, 392, 396, 401, 482, 507, 511, 524, 543, 544, 559, 577, 594, 610, 616, 646, 650, 653, 655, 659, 660, 664, 699, 719, 721, 729, 758, 759, 760, 766, 786, 787, 790, 793, 797, 840, 841, 842, 843, 844, 848, 849, 850, 852, 854, 856, 860, 861, 865, 866, 867, 871], "py": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 58, 60, 63, 106, 390, 461, 778, 820, 825, 832, 838, 839, 840, 843, 845, 848, 849, 850, 852, 853, 854, 855, 856, 857, 861, 862, 864, 865, 869, 870], "383": [0, 10, 11, 15, 16, 17, 18, 34], "userwarn": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 34, 37, 39, 40, 63], "current": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 44, 45, 58, 59, 65, 70, 71, 87, 93, 116, 135, 180, 181, 184, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 220, 222, 390, 392, 442, 443, 498, 507, 565, 566, 569, 572, 574, 578, 589, 590, 610, 644, 646, 647, 650, 653, 657, 688, 737, 747, 748, 792, 796, 812, 813, 820, 821, 826, 829, 830, 832, 834, 838, 839, 840, 843, 845, 847, 848, 849, 850, 853, 854, 855, 857, 860, 861, 862, 863, 864, 867, 871, 879, 883], "39": [0, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 37, 39, 40, 56, 58, 59, 60, 61, 63, 64, 69, 70, 75, 79, 86, 92, 93, 95, 98, 102, 125, 240, 275, 277, 279, 309, 310, 313, 381, 389, 401, 409, 411, 428, 431, 538, 630, 642, 648, 651, 653, 663, 691, 698, 759, 778], "doe": [0, 5, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 44, 57, 59, 69, 70, 71, 77, 87, 92, 93, 100, 110, 161, 288, 290, 298, 342, 383, 390, 391, 401, 402, 443, 470, 471, 543, 544, 548, 577, 645, 648, 650, 653, 655, 688, 727, 790, 826, 836, 838, 840, 842, 845, 848, 849, 851, 852, 854, 855, 856, 857, 860, 861, 862, 864, 867, 869, 870, 871, 873, 879, 883, 884], "support": [0, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 33, 34, 37, 39, 40, 44, 47, 59, 68, 70, 71, 75, 91, 93, 94, 98, 161, 180, 184, 206, 213, 228, 237, 254, 261, 282, 283, 287, 297, 316, 342, 363, 381, 383, 386, 390, 392, 425, 443, 452, 507, 553, 565, 574, 577, 578, 595, 610, 645, 646, 647, 648, 650, 652, 653, 676, 688, 689, 690, 694, 703, 710, 790, 796, 803, 815, 820, 821, 825, 830, 834, 836, 838, 839, 840, 843, 844, 846, 850, 851, 852, 854, 856, 857, 859, 860, 862, 864, 865, 867, 869, 870, 872, 873, 878, 883, 885], "inplac": [0, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 65, 71, 87, 94, 110, 113, 551, 553, 574, 577, 578, 595, 596, 650, 657, 744, 745, 749, 754, 755, 802, 803, 808, 815, 842, 844, 851, 854, 856, 858, 861, 867], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 33, 34, 37, 39, 40, 44, 45, 65, 66, 67, 68, 71, 88, 91, 94, 115, 119, 154, 164, 165, 171, 172, 173, 174, 175, 176, 190, 193, 208, 209, 210, 211, 221, 229, 233, 577, 579, 583, 590, 595, 613, 645, 646, 647, 650, 792, 803, 808, 820, 832, 836, 838, 849, 850, 853, 854, 857, 858, 860, 861, 862, 864, 869, 870, 873, 878, 879, 881], "would": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 34, 36, 37, 39, 40, 42, 44, 45, 48, 50, 52, 60, 66, 68, 70, 89, 91, 93, 100, 126, 130, 141, 228, 389, 392, 417, 422, 476, 477, 484, 486, 488, 489, 490, 497, 502, 514, 642, 647, 721, 722, 723, 725, 727, 728, 730, 732, 797, 807, 811, 832, 833, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 854, 856, 858, 860, 861, 862, 864, 865, 867, 868, 869, 871, 876, 879, 883], "quietli": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40], "new": [0, 1, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 27, 29, 34, 37, 39, 40, 42, 44, 45, 46, 60, 62, 65, 70, 71, 72, 77, 78, 87, 89, 93, 94, 95, 98, 100, 101, 144, 147, 149, 150, 155, 156, 157, 162, 163, 200, 223, 243, 289, 291, 295, 348, 353, 365, 370, 386, 389, 392, 401, 425, 474, 482, 483, 497, 504, 511, 544, 560, 561, 562, 564, 567, 568, 570, 591, 592, 595, 597, 604, 607, 608, 614, 631, 634, 636, 637, 638, 645, 646, 647, 648, 650, 651, 652, 655, 657, 658, 679, 691, 698, 721, 725, 729, 742, 754, 755, 756, 808, 811, 814, 815, 820, 826, 833, 835, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 851, 852, 854, 855, 858, 860, 861, 862, 863, 864, 865, 867, 873, 875, 877, 879, 880], "when": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 59, 61, 65, 66, 67, 69, 70, 75, 76, 79, 80, 83, 87, 89, 90, 92, 93, 98, 99, 102, 103, 106, 116, 155, 166, 237, 254, 259, 261, 277, 287, 305, 306, 314, 349, 350, 381, 386, 389, 390, 391, 395, 396, 401, 412, 425, 437, 444, 448, 459, 465, 466, 471, 516, 518, 524, 544, 547, 577, 593, 601, 608, 645, 646, 648, 650, 652, 653, 654, 655, 657, 659, 660, 663, 665, 677, 679, 696, 701, 712, 713, 714, 725, 748, 749, 758, 759, 760, 763, 764, 766, 767, 779, 781, 783, 785, 795, 798, 810, 811, 812, 813, 814, 820, 830, 832, 833, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 870, 871, 872, 878, 879, 883], "lead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 75, 87, 98, 116, 261, 390, 454, 595, 648, 650, 653, 700, 703, 797, 848, 849, 851, 863, 865, 871, 875], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 66, 70, 77, 89, 93, 100, 141, 153, 209, 221, 227, 229, 233, 392, 401, 476, 477, 484, 486, 488, 489, 490, 497, 514, 544, 590, 595, 619, 645, 647, 650, 652, 655, 677, 678, 721, 722, 723, 725, 727, 728, 730, 732, 826, 830, 848, 849, 850, 860, 861, 867, 869, 871, 879, 883], "overhead": [0, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 35, 37, 39, 40, 44, 45, 47, 871, 879], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 34, 35, 37, 39, 40, 42, 44, 47, 49, 51, 56, 57, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 77, 79, 81, 82, 83, 87, 89, 90, 92, 93, 94, 95, 97, 98, 100, 102, 104, 106, 110, 111, 112, 113, 114, 115, 129, 139, 142, 145, 150, 152, 153, 155, 157, 159, 160, 161, 163, 166, 167, 168, 179, 182, 227, 234, 235, 236, 237, 239, 241, 245, 247, 250, 254, 260, 261, 267, 287, 289, 291, 294, 296, 297, 298, 307, 315, 327, 341, 342, 343, 344, 345, 346, 349, 350, 352, 360, 376, 381, 383, 386, 389, 390, 391, 392, 395, 397, 399, 401, 408, 409, 410, 426, 427, 428, 429, 431, 432, 433, 434, 436, 443, 448, 449, 459, 460, 461, 462, 463, 465, 466, 468, 471, 481, 483, 498, 499, 507, 508, 511, 516, 518, 528, 530, 535, 536, 537, 538, 539, 540, 541, 547, 584, 640, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 679, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 719, 722, 723, 725, 726, 728, 729, 734, 735, 750, 760, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 790, 792, 795, 796, 797, 803, 811, 825, 832, 839, 840, 844, 845, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 879, 881], "appli": [0, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 34, 37, 39, 40, 44, 45, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 386, 387, 389, 390, 391, 392, 395, 401, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 425, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 642, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 707, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 743, 746, 749, 750, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 797, 798, 807, 811, 814, 832, 838, 839, 840, 844, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 861, 864, 865, 867, 871, 878, 879, 884], "view": [0, 5, 10, 11, 12, 13, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 70, 77, 93, 115, 147, 158, 392, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 511, 514, 570, 645, 650, 655, 721, 722, 723, 725, 727, 728, 730, 732, 839, 840, 853, 883], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 44, 45, 50, 59, 62, 63, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 139, 140, 141, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 194, 210, 226, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 342, 343, 345, 348, 349, 350, 351, 352, 354, 355, 356, 360, 364, 365, 370, 371, 373, 375, 376, 377, 383, 386, 387, 389, 390, 391, 392, 395, 396, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 418, 421, 423, 425, 426, 427, 428, 433, 434, 435, 437, 442, 444, 446, 448, 449, 456, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 484, 486, 487, 488, 489, 490, 493, 497, 499, 504, 505, 506, 507, 508, 509, 511, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 583, 584, 591, 592, 596, 606, 607, 608, 610, 612, 614, 615, 628, 629, 632, 634, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 675, 676, 679, 682, 683, 684, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 712, 713, 714, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 749, 750, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 810, 811, 813, 814, 820, 826, 830, 832, 833, 834, 835, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 871, 872, 878, 879, 881], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 486, 544, 567, 568, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 679, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879, 881, 883], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 57, 58, 60, 70, 85, 93, 108, 254, 287, 392, 486, 648, 813, 832, 833, 834, 838, 839, 840, 846, 848, 850, 853, 855, 857, 858, 859, 860, 864, 867, 871, 872, 876, 878], "control": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 52, 70, 93, 161, 310, 342, 381, 383, 389, 392, 413, 414, 415, 481, 508, 595, 645, 650, 653, 686, 847, 849, 850, 859, 860, 861, 862, 867, 873, 879, 883], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 45, 48, 56, 58, 60, 62, 832, 833, 835, 836, 837, 838, 839, 841, 843, 845, 846, 848, 852, 854, 855, 859, 861, 863, 865, 867, 871, 872, 878, 879, 880, 883], "manag": [0, 10, 11, 15, 16, 17, 18, 24, 25, 33, 34, 37, 39, 40, 44, 595, 619, 650, 833, 841, 845, 849, 850, 860, 863, 871], "consid": [0, 8, 9, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 49, 50, 70, 75, 81, 93, 98, 131, 161, 282, 283, 342, 348, 353, 365, 383, 386, 390, 401, 444, 448, 459, 537, 642, 645, 648, 653, 661, 686, 696, 768, 769, 770, 771, 797, 810, 844, 848, 849, 857, 859, 865, 867, 879, 884], "do": [0, 2, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 56, 58, 60, 70, 71, 87, 93, 94, 254, 287, 296, 389, 391, 392, 401, 435, 471, 483, 544, 547, 577, 648, 650, 657, 737, 744, 747, 748, 749, 754, 797, 826, 832, 836, 838, 839, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 867, 869, 871, 873, 884], "set_inplace_mod": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 619, 650], "strict": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 595, 619, 650], "should": [0, 1, 6, 7, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 130, 138, 153, 155, 159, 160, 168, 193, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 316, 327, 343, 349, 350, 362, 366, 367, 368, 369, 373, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 413, 414, 415, 417, 422, 433, 448, 459, 465, 472, 497, 498, 499, 523, 524, 537, 538, 539, 554, 572, 577, 629, 631, 634, 636, 637, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 707, 709, 710, 725, 741, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 776, 777, 778, 779, 780, 781, 782, 784, 785, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 878, 883], "rais": [0, 5, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 59, 60, 66, 70, 71, 79, 81, 84, 87, 89, 93, 94, 100, 102, 104, 107, 141, 168, 257, 292, 349, 350, 360, 386, 389, 391, 392, 396, 401, 423, 434, 471, 476, 477, 484, 486, 488, 489, 490, 497, 507, 514, 524, 543, 544, 553, 577, 595, 597, 608, 610, 616, 620, 646, 648, 650, 653, 655, 659, 660, 661, 663, 664, 693, 695, 709, 721, 722, 723, 725, 727, 728, 729, 730, 732, 758, 759, 760, 766, 771, 779, 781, 786, 787, 790, 797, 815, 840, 843, 845, 849, 850, 853, 860, 861, 865, 866, 872], "error": [0, 5, 10, 11, 15, 16, 17, 18, 23, 24, 25, 26, 34, 37, 39, 40, 50, 61, 63, 69, 70, 74, 87, 92, 93, 97, 123, 256, 304, 349, 350, 357, 358, 386, 390, 391, 392, 401, 402, 459, 465, 467, 469, 507, 544, 548, 595, 642, 648, 650, 652, 653, 663, 682, 701, 704, 779, 781, 797, 815, 829, 833, 837, 838, 839, 840, 843, 844, 845, 848, 849, 850, 851, 855, 856, 861, 864, 865, 866, 871, 883], "whenev": [0, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 811, 840, 845, 848, 849, 853, 860, 863, 864, 866], "attempt": [0, 8, 9, 10, 11, 15, 16, 17, 18, 24, 25, 34, 37, 39, 40, 58, 60, 63, 839, 866, 871], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 34, 37, 39, 40, 58, 59, 60, 63, 829, 839, 840, 866, 879, 881], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 21, 22, 23, 27, 33, 35, 36, 37, 39, 42, 43, 44, 45, 47, 48, 49, 58, 61, 62, 63, 66, 69, 70, 75, 77, 79, 80, 81, 83, 89, 92, 93, 94, 98, 100, 102, 104, 106, 110, 111, 115, 116, 135, 136, 151, 152, 161, 192, 200, 210, 237, 242, 244, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 272, 273, 274, 279, 280, 281, 283, 284, 287, 290, 292, 303, 304, 316, 326, 327, 342, 344, 345, 346, 348, 361, 363, 364, 365, 371, 375, 376, 381, 383, 386, 389, 390, 391, 392, 399, 401, 412, 442, 443, 444, 446, 450, 472, 482, 484, 488, 495, 498, 501, 502, 505, 513, 524, 526, 530, 538, 539, 540, 547, 552, 644, 645, 646, 647, 648, 650, 652, 653, 655, 656, 657, 660, 661, 662, 663, 679, 684, 687, 688, 689, 691, 693, 698, 700, 701, 703, 705, 707, 709, 725, 726, 729, 730, 734, 735, 736, 737, 738, 747, 748, 750, 762, 763, 764, 768, 769, 770, 773, 774, 776, 777, 792, 810, 811, 812, 813, 815, 820, 832, 834, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 850, 851, 855, 856, 857, 858, 860, 861, 864, 867, 869, 870, 872, 878, 879, 883, 884], "datafram": [0, 883], "allow": [0, 8, 9, 23, 26, 40, 44, 45, 56, 70, 83, 93, 106, 151, 292, 390, 401, 462, 540, 544, 587, 645, 648, 650, 662, 663, 774, 781, 795, 796, 797, 798, 812, 813, 826, 830, 832, 838, 840, 841, 844, 845, 848, 849, 853, 855, 857, 858, 859, 860, 861, 862, 864, 867, 869, 871, 873, 875, 878, 879, 881, 883, 885], "u": [0, 4, 5, 19, 20, 58, 60, 62, 63, 70, 75, 89, 93, 98, 110, 111, 152, 390, 454, 461, 463, 653, 657, 683, 689, 690, 703, 745, 832, 833, 839, 840, 842, 847, 848, 855, 858, 860, 861, 862, 863, 864, 865, 867, 871], "leverag": [0, 39, 44, 45, 839, 860, 875, 876, 878, 883, 885], "explor": [0, 8, 9, 10, 11, 23, 26, 27, 29, 33, 37, 39, 44, 45, 50, 51, 52, 838, 839, 840, 849, 854, 867, 883], "expect": [0, 4, 5, 12, 13, 19, 20, 24, 25, 35, 39, 44, 45, 47, 60, 61, 63, 70, 75, 76, 93, 99, 193, 261, 305, 389, 391, 412, 434, 471, 551, 646, 648, 650, 652, 654, 677, 698, 712, 810, 811, 832, 839, 840, 843, 849, 850, 853, 855, 858, 860, 862, 864, 867, 871, 878, 879, 881], "contain": [0, 15, 16, 33, 44, 45, 59, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 177, 179, 180, 181, 182, 185, 186, 187, 189, 191, 194, 211, 213, 214, 215, 220, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 383, 386, 388, 389, 390, 391, 392, 395, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 596, 599, 601, 606, 607, 608, 609, 610, 612, 614, 615, 622, 628, 629, 630, 631, 632, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 744, 745, 746, 749, 750, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 802, 803, 811, 812, 813, 815, 816, 820, 825, 826, 830, 832, 834, 836, 838, 839, 842, 843, 844, 845, 846, 848, 849, 851, 852, 854, 856, 857, 858, 859, 860, 862, 864, 866, 867, 869, 871, 872, 873, 879, 883, 884], "variou": [0, 8, 9, 26, 36, 48, 50, 56, 832, 835, 838, 839, 840, 843, 848, 849, 852, 853, 856, 858, 859, 861, 862, 863, 864, 872, 883, 885], "among": [0, 8, 9, 87, 847, 848, 864, 867, 875, 883], "pattern": [0, 70, 71, 93, 94, 390, 454, 560, 561, 562, 650, 849, 852, 863], "signal": [0, 70, 93, 333, 383, 389, 403, 404, 405, 406, 411, 412, 421, 437, 811, 883, 885], "credit_card_data": 0, "read_csv": [0, 26, 60], "creditcard": 0, "csv": [0, 26, 60], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 58, 59, 61, 67, 68, 75, 87, 91, 98, 115, 177, 178, 179, 182, 210, 211, 212, 215, 221, 226, 229, 233, 392, 504, 551, 569, 590, 609, 646, 647, 650, 653, 657, 710, 739, 795, 810, 811, 825, 833, 835, 837, 838, 839, 841, 842, 843, 848, 849, 850, 854, 857, 858, 859, 860, 861, 862, 863, 864, 869, 870, 873, 878, 881, 883], "sens": [0, 843, 849, 851, 861, 863], "re": [0, 23, 26, 31, 34, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 61, 63, 70, 71, 80, 93, 103, 113, 227, 333, 383, 390, 392, 464, 500, 501, 560, 647, 650, 653, 655, 660, 705, 726, 765, 767, 832, 833, 834, 838, 839, 840, 841, 842, 843, 846, 849, 854, 859, 860, 861, 862, 863, 865, 867, 869, 871, 875, 880, 883], "work": [0, 1, 8, 9, 23, 40, 44, 45, 56, 57, 59, 63, 65, 70, 93, 110, 401, 547, 653, 657, 704, 744, 745, 749, 754, 755, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 860, 861, 862, 864, 865, 868, 869, 870, 872, 876, 878, 879, 881, 883, 885], "help": [0, 1, 31, 60, 62, 67, 550, 595, 650, 663, 784, 810, 832, 833, 834, 838, 839, 841, 844, 845, 846, 847, 848, 849, 851, 855, 857, 858, 860, 861, 864, 865, 873, 876, 883], "few": [0, 8, 9, 10, 11, 832, 837, 838, 840, 847, 849, 850, 856, 857, 859, 860, 862, 864, 867, 870, 875, 883], "entri": [0, 70, 77, 87, 93, 100, 104, 111, 151, 390, 392, 396, 460, 487, 489, 490, 523, 645, 655, 657, 727, 750, 768, 839, 848, 864, 883], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 60, 63, 66, 67, 70, 71, 75, 77, 79, 81, 89, 90, 93, 94, 98, 100, 102, 104, 110, 111, 125, 128, 140, 141, 152, 154, 169, 208, 225, 226, 227, 316, 333, 381, 383, 389, 390, 391, 392, 395, 396, 399, 401, 412, 425, 449, 456, 458, 463, 471, 483, 499, 511, 516, 524, 525, 530, 537, 584, 595, 629, 632, 642, 645, 646, 647, 650, 651, 652, 653, 655, 659, 679, 687, 693, 703, 707, 725, 729, 758, 759, 760, 768, 792, 795, 796, 797, 798, 803, 826, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879, 881, 883, 884, 885], "give": [0, 12, 13, 34, 46, 56, 70, 74, 93, 97, 193, 379, 388, 389, 432, 436, 646, 652, 655, 665, 666, 667, 668, 670, 672, 674, 725, 810, 832, 839, 840, 842, 845, 848, 849, 851, 852, 854, 855, 856, 864, 883], "insight": 0, "structur": [0, 26, 45, 87, 90, 116, 179, 182, 557, 650, 654, 657, 715, 741, 750, 838, 840, 841, 844, 847, 857, 862, 863, 864, 865, 883, 885], "type": [0, 6, 7, 19, 20, 23, 27, 29, 33, 39, 44, 45, 50, 58, 59, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 792, 795, 796, 797, 798, 802, 803, 807, 810, 811, 812, 813, 817, 820, 823, 825, 826, 827, 830, 838, 839, 840, 842, 843, 844, 847, 850, 851, 852, 853, 856, 858, 860, 862, 864, 865, 867, 869, 878, 879, 880, 881, 883, 884], "present": [0, 59, 70, 83, 87, 93, 106, 352, 386, 395, 516, 517, 518, 663, 781, 838, 839, 840, 847, 849, 850, 856, 860, 875], "initi": [0, 6, 7, 8, 9, 15, 16, 44, 45, 61, 70, 74, 83, 87, 93, 97, 106, 116, 390, 401, 448, 459, 465, 545, 546, 652, 663, 677, 678, 781, 808, 811, 812, 813, 815, 816, 830, 832, 835, 840, 841, 845, 849, 850, 854, 862, 864, 869, 878, 879, 881, 883], "qualiti": [0, 835, 840], "below": [0, 2, 21, 22, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 49, 50, 51, 56, 59, 60, 61, 66, 70, 75, 93, 98, 106, 159, 160, 161, 261, 271, 294, 342, 343, 352, 383, 386, 392, 507, 645, 648, 653, 687, 707, 785, 833, 836, 838, 839, 842, 843, 847, 848, 849, 850, 851, 853, 854, 857, 860, 861, 862, 864, 865, 866, 867, 869, 870, 878, 879, 881], "head": [0, 8, 9, 10, 11, 23, 61, 62, 652, 679, 811, 832, 837, 839, 848, 861], "method": [0, 26, 33, 44, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 166, 167, 168, 169, 179, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 386, 389, 390, 391, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 645, 646, 648, 650, 651, 653, 654, 657, 660, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 704, 707, 708, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 748, 749, 750, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 792, 803, 809, 810, 811, 812, 813, 838, 840, 843, 844, 848, 849, 850, 851, 852, 856, 864, 865, 869, 870, 871, 878, 879, 881, 884], "five": 0, "row": [0, 58, 70, 93, 111, 146, 161, 342, 383, 390, 392, 399, 401, 449, 461, 490, 496, 515, 530, 536, 537, 645, 653, 659, 660, 694, 702, 703, 708, 757, 766, 810], "v1": 0, "v2": 0, "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 883], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 26, 76, 99, 229, 647, 654, 712, 713, 714, 826, 839, 848, 850, 862], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 75, 653, 691], "62": [0, 23, 26, 56, 58, 64, 86, 92, 93, 102, 126, 272, 300, 648, 658, 659, 756, 758, 760], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 23, 35, 56, 63, 69, 95, 102, 235, 277, 389, 411, 421, 634, 648, 651, 653, 694, 695, 759, 864], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 293, 648], "66": [0, 5, 23, 37, 39, 40, 56, 58, 60, 83, 93, 94, 95, 389, 421, 560, 561, 634, 650, 651, 653, 663, 698, 778], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 34, 89, 90, 93, 150, 182, 470, 563, 645, 650, 826, 864], "50": [0, 24, 25, 26, 44, 45, 56, 60, 70, 83, 92, 93, 94, 253, 293, 371, 386, 389, 390, 392, 418, 442, 450, 504, 562, 568, 575, 576, 592, 607, 648, 650, 653, 657, 660, 663, 692, 698, 709, 738, 740, 766, 778, 795, 798, 859, 878, 879], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 26, 37, 39, 40, 56, 58, 59, 63, 64, 69, 70, 92, 93, 94, 97, 102, 126, 131, 152, 248, 279, 287, 389, 392, 401, 410, 411, 481, 538, 555, 642, 645, 648, 650, 759, 760], "column": [0, 26, 60, 70, 75, 93, 98, 110, 111, 146, 161, 342, 383, 390, 392, 399, 401, 443, 449, 461, 482, 487, 489, 490, 494, 496, 530, 536, 537, 645, 653, 688, 689, 694, 700, 702, 703, 708, 795, 810], "It": [0, 1, 4, 5, 10, 11, 24, 25, 26, 34, 37, 39, 40, 44, 45, 46, 47, 56, 57, 58, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 166, 168, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 343, 349, 350, 351, 352, 357, 358, 362, 364, 366, 367, 368, 369, 373, 381, 383, 386, 389, 390, 391, 392, 395, 396, 401, 402, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 431, 433, 438, 440, 441, 449, 450, 455, 456, 457, 458, 466, 467, 468, 469, 470, 472, 473, 483, 486, 491, 500, 501, 502, 503, 505, 507, 511, 512, 516, 519, 520, 522, 523, 524, 526, 527, 537, 538, 539, 540, 548, 555, 556, 560, 561, 562, 567, 568, 577, 591, 592, 593, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 702, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 736, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 771, 772, 775, 776, 777, 780, 782, 783, 785, 786, 787, 810, 811, 832, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 858, 860, 861, 862, 863, 864, 865, 866, 867, 870, 881, 883, 884], "just": [0, 8, 9, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 56, 58, 60, 70, 75, 83, 98, 110, 113, 161, 342, 383, 390, 458, 645, 653, 663, 696, 778, 803, 811, 832, 836, 839, 840, 841, 843, 845, 848, 849, 850, 851, 852, 854, 857, 858, 860, 861, 862, 864, 870, 871, 875, 878, 883, 884], "verifi": [0, 8, 9, 15, 16, 17, 26, 39, 339, 340, 383, 838, 849, 850, 861, 864, 865], "consist": [0, 8, 9, 10, 11, 21, 22, 23, 24, 25, 26, 37, 39, 40, 44, 45, 83, 87, 254, 261, 287, 389, 390, 433, 443, 648, 653, 663, 688, 689, 778, 812, 813, 835, 843, 844, 848, 849, 855, 860, 870, 884, 885], "complet": [0, 75, 87, 98, 653, 700, 796, 832, 838, 839, 840, 841, 843, 844, 847, 848, 851, 853, 857, 861, 862, 864, 867], "By": [0, 34, 56, 63, 70, 76, 77, 83, 84, 93, 99, 100, 106, 107, 301, 347, 349, 350, 363, 370, 383, 386, 389, 391, 392, 399, 401, 412, 470, 471, 507, 511, 530, 537, 540, 595, 648, 650, 653, 654, 655, 663, 664, 684, 709, 712, 724, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 839, 845, 849, 851, 853, 857, 859, 860, 861, 869, 876, 879, 885], "tail": 0, "last": [0, 5, 14, 35, 40, 44, 47, 66, 70, 74, 75, 76, 77, 80, 82, 83, 84, 87, 89, 93, 97, 98, 99, 100, 105, 106, 107, 111, 115, 151, 152, 155, 210, 327, 355, 383, 386, 389, 390, 391, 392, 399, 401, 418, 423, 433, 434, 435, 446, 470, 488, 498, 501, 507, 511, 530, 538, 539, 645, 647, 652, 653, 654, 655, 660, 662, 663, 664, 678, 679, 684, 687, 698, 707, 709, 713, 714, 719, 722, 725, 726, 727, 729, 763, 764, 772, 774, 775, 776, 777, 786, 787, 811, 820, 840, 843, 845, 846, 849, 851, 860, 862, 864, 867, 869, 871, 878, 883], "well": [0, 23, 26, 44, 45, 58, 59, 60, 94, 391, 470, 573, 650, 653, 702, 797, 834, 838, 840, 846, 848, 849, 853, 860, 861, 862, 864, 876, 878, 883, 884, 885], "readi": [0, 27, 29, 34, 35, 36, 46, 47, 48, 49, 50, 51, 58, 60, 838, 839], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 26, 56, 60, 94, 608, 653, 663, 698, 778], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 23, 26, 35, 56, 58, 69, 70, 75, 83, 92, 93, 94, 97, 98, 102, 115, 249, 257, 272, 274, 287, 297, 298, 301, 363, 366, 386, 389, 401, 408, 410, 411, 421, 426, 427, 428, 432, 436, 538, 560, 561, 648, 650, 653, 657, 663, 666, 687, 694, 698, 738, 749, 758, 759, 760, 776, 778, 792, 853], "79": [0, 56, 58, 70, 71, 93, 94, 97, 102, 115, 254, 389, 411, 421, 432, 555, 556, 648, 650, 760], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 26, 56, 69, 70, 71, 75, 92, 93, 94, 97, 102, 115, 252, 257, 297, 298, 300, 307, 318, 322, 381, 401, 432, 538, 560, 561, 607, 633, 635, 648, 650, 651, 653, 691, 760], "88": [0, 5, 26, 56, 95, 102, 125, 401, 538, 634, 642, 651, 653, 659, 663, 698, 760, 778], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 58, 853], "understand": [0, 31, 32, 33, 37, 56, 62, 836, 837, 838, 839, 840, 842, 843, 846, 851, 852, 856, 862, 863, 868], "composit": [0, 33, 44, 180, 181, 213, 214, 306, 390, 450, 565, 566, 646, 647, 648, 650, 796, 798, 838, 842, 844, 845, 847, 849, 850, 858, 860, 861, 862, 864, 867, 869, 870, 871, 873, 879, 884], "crucial": [0, 850, 859, 876], "proce": [0, 26, 838, 839], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 27, 29, 33, 34, 35, 42, 43, 46, 47, 50, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 169, 170, 185, 189, 193, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 342, 343, 349, 350, 352, 355, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 434, 435, 444, 449, 466, 487, 498, 507, 511, 516, 517, 518, 537, 540, 543, 544, 545, 549, 559, 560, 561, 562, 563, 567, 571, 573, 575, 579, 581, 582, 600, 606, 608, 615, 616, 623, 629, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 743, 744, 746, 747, 754, 756, 760, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885], "info": [0, 5, 23, 58, 829, 830, 832, 846, 852, 855], "concis": 0, "summari": [0, 87, 183, 557, 646, 650, 839, 840, 864], "includ": [0, 1, 8, 9, 23, 26, 35, 47, 52, 66, 69, 70, 71, 75, 80, 83, 84, 87, 89, 92, 93, 94, 98, 103, 106, 107, 139, 140, 141, 151, 152, 154, 161, 234, 258, 262, 263, 264, 267, 269, 272, 280, 288, 301, 306, 328, 331, 332, 333, 336, 342, 345, 347, 349, 350, 354, 355, 356, 359, 360, 361, 362, 364, 366, 367, 369, 370, 371, 372, 375, 376, 383, 386, 389, 392, 401, 408, 409, 410, 440, 443, 445, 489, 490, 492, 495, 497, 500, 503, 525, 527, 528, 536, 540, 542, 543, 545, 546, 547, 573, 628, 645, 648, 650, 652, 653, 657, 659, 660, 663, 664, 677, 688, 708, 710, 737, 760, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 798, 810, 811, 814, 828, 830, 832, 838, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 860, 861, 862, 863, 864, 865, 867, 869, 878, 879, 883, 885], "number": [0, 58, 60, 61, 62, 63, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 87, 89, 90, 92, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 110, 111, 113, 115, 116, 119, 139, 142, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 161, 167, 172, 173, 174, 175, 176, 178, 179, 182, 185, 186, 187, 189, 191, 194, 218, 219, 220, 234, 235, 236, 237, 238, 240, 242, 243, 250, 252, 254, 255, 257, 259, 260, 261, 267, 268, 269, 271, 275, 277, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 300, 301, 305, 307, 333, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 365, 370, 374, 383, 386, 389, 390, 391, 392, 395, 401, 423, 434, 437, 440, 443, 447, 448, 449, 459, 463, 465, 466, 476, 477, 478, 498, 499, 500, 501, 502, 503, 505, 507, 509, 511, 513, 516, 517, 518, 535, 537, 538, 539, 540, 546, 564, 571, 589, 606, 607, 608, 615, 628, 629, 643, 645, 646, 647, 648, 650, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 672, 673, 675, 677, 679, 684, 688, 689, 690, 696, 701, 703, 707, 708, 709, 712, 718, 720, 721, 723, 724, 726, 727, 729, 731, 733, 734, 735, 736, 757, 761, 766, 768, 769, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 803, 810, 811, 814, 826, 830, 832, 839, 840, 847, 848, 849, 850, 851, 858, 859, 860, 864, 865, 866, 867, 869, 874, 879], "presenc": [0, 790, 847, 860], "null": [0, 839, 854], "each": [0, 19, 20, 23, 24, 25, 26, 35, 36, 37, 44, 45, 47, 48, 49, 51, 58, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 81, 83, 87, 90, 92, 93, 94, 95, 97, 98, 100, 103, 104, 106, 110, 111, 113, 115, 116, 124, 125, 127, 128, 129, 131, 135, 142, 153, 167, 179, 182, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 309, 311, 312, 317, 319, 320, 321, 323, 324, 325, 330, 341, 344, 345, 346, 352, 360, 364, 368, 373, 376, 381, 383, 386, 389, 390, 392, 395, 396, 399, 401, 408, 409, 410, 413, 414, 415, 418, 426, 427, 428, 429, 432, 434, 435, 436, 443, 444, 449, 458, 459, 463, 465, 476, 477, 478, 482, 483, 484, 489, 490, 492, 493, 495, 497, 498, 499, 502, 504, 513, 514, 521, 523, 530, 535, 536, 537, 538, 539, 540, 549, 552, 560, 567, 568, 584, 609, 629, 631, 632, 634, 636, 637, 638, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 657, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 683, 684, 685, 688, 689, 690, 693, 695, 696, 697, 699, 701, 702, 703, 708, 720, 724, 726, 727, 729, 731, 733, 743, 750, 757, 766, 768, 769, 771, 777, 778, 785, 792, 795, 797, 803, 811, 814, 815, 816, 826, 830, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 875, 878, 879, 884, 885], "invalu": 0, "plan": [0, 872], "right": [0, 59, 70, 75, 87, 93, 98, 116, 133, 134, 246, 248, 301, 364, 386, 389, 390, 392, 424, 454, 460, 461, 463, 489, 560, 644, 648, 650, 653, 662, 703, 708, 774, 795, 833, 838, 839, 840, 842, 843, 851, 854, 867, 879], "format": [0, 1, 39, 40, 44, 45, 56, 58, 59, 60, 68, 71, 74, 83, 86, 87, 88, 91, 97, 113, 131, 177, 211, 389, 390, 400, 431, 464, 533, 560, 642, 646, 647, 650, 652, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 677, 778, 788, 789, 790, 807, 832, 839, 840, 842, 848, 849, 850, 851, 852, 853, 861, 863, 878, 883, 884, 885], "lt": [0, 4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 56, 58, 60, 116], "core": [0, 5, 8, 9, 37, 40, 58, 59, 60, 62, 63, 70, 93, 110, 113, 218, 390, 448, 459, 464, 465, 647, 839, 850, 854, 864, 883, 884, 885], "frame": [0, 60, 70, 93, 333, 383, 389, 437, 823, 883], "gt": [0, 4, 5, 8, 9, 10, 11, 14, 21, 22, 23, 27, 29, 33, 37, 38, 39, 40, 56, 58, 60, 63, 116, 862, 869], "rangeindex": 0, "284807": 0, "total": [0, 5, 58, 60, 70, 83, 87, 93, 106, 116, 148, 229, 344, 345, 346, 354, 383, 386, 391, 466, 645, 647, 660, 663, 766, 783, 785, 826, 833, 839, 840, 849, 850, 851, 864, 867, 871], "non": [0, 10, 11, 35, 47, 67, 69, 70, 75, 79, 80, 83, 84, 90, 92, 93, 98, 102, 103, 106, 107, 148, 166, 184, 193, 262, 282, 283, 288, 349, 350, 354, 361, 374, 386, 389, 390, 392, 401, 433, 444, 448, 454, 477, 478, 540, 543, 645, 646, 648, 653, 657, 659, 660, 663, 664, 684, 685, 694, 696, 703, 705, 709, 710, 750, 759, 763, 764, 765, 766, 779, 780, 781, 782, 783, 785, 786, 787, 795, 810, 812, 813, 815, 844, 847, 851, 869, 878, 879, 881, 883], "count": [0, 5, 62, 70, 77, 81, 84, 89, 93, 100, 104, 107, 148, 220, 354, 386, 392, 401, 507, 511, 513, 535, 540, 645, 647, 653, 655, 661, 664, 684, 709, 719, 722, 768, 769, 786, 787, 846, 847, 851], "dtype": [0, 4, 5, 12, 13, 21, 22, 26, 29, 35, 37, 38, 39, 40, 56, 59, 66, 67, 70, 71, 74, 75, 79, 80, 83, 87, 89, 90, 92, 93, 94, 97, 98, 102, 103, 106, 115, 118, 119, 120, 139, 140, 141, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 222, 249, 253, 285, 286, 288, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 347, 352, 354, 370, 383, 386, 389, 390, 391, 392, 396, 401, 411, 421, 433, 434, 437, 460, 466, 471, 482, 507, 523, 524, 525, 526, 527, 537, 538, 539, 540, 543, 546, 547, 564, 565, 566, 568, 577, 586, 614, 645, 646, 647, 648, 650, 652, 653, 656, 659, 660, 662, 663, 664, 668, 675, 694, 710, 735, 736, 758, 759, 760, 763, 764, 765, 774, 775, 776, 777, 780, 782, 784, 786, 787, 790, 792, 795, 797, 798, 810, 811, 812, 813, 814, 816, 832, 836, 843, 845, 849, 850, 851, 853, 854, 857, 858, 860, 861, 862, 864, 865, 869, 878], "float64": [0, 37, 38, 67, 70, 79, 83, 89, 90, 92, 93, 94, 102, 106, 139, 148, 149, 166, 169, 173, 174, 179, 180, 183, 184, 189, 190, 194, 196, 197, 203, 206, 288, 360, 386, 391, 401, 466, 471, 537, 586, 645, 646, 650, 653, 659, 689, 690, 694, 710, 759, 760, 777, 792, 795, 796, 849, 862, 864], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 26, 33, 35, 37, 39, 40, 56, 58, 59, 60, 67, 69, 70, 71, 74, 75, 79, 83, 90, 92, 93, 94, 97, 98, 100, 101, 102, 106, 115, 116, 182, 237, 239, 244, 248, 249, 252, 254, 255, 256, 274, 287, 290, 297, 300, 307, 308, 331, 332, 363, 366, 367, 383, 386, 389, 392, 401, 408, 409, 410, 411, 413, 417, 418, 426, 427, 431, 432, 433, 434, 436, 481, 482, 484, 488, 493, 511, 514, 527, 538, 544, 545, 546, 556, 560, 561, 592, 598, 607, 621, 648, 650, 652, 653, 655, 657, 658, 659, 660, 661, 663, 666, 670, 675, 676, 687, 689, 691, 694, 698, 702, 704, 705, 707, 709, 722, 726, 728, 730, 732, 749, 756, 758, 759, 760, 767, 768, 776, 777, 778, 782, 784, 795, 839, 845, 847, 849, 851, 859], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 33, 37, 39, 40, 56, 58, 60, 64, 69, 70, 74, 75, 79, 83, 92, 93, 94, 95, 97, 100, 102, 106, 115, 131, 182, 212, 237, 252, 261, 272, 292, 301, 363, 370, 377, 386, 389, 392, 410, 411, 421, 432, 436, 481, 482, 484, 488, 493, 514, 527, 538, 539, 555, 560, 561, 576, 598, 607, 630, 642, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 663, 666, 667, 675, 676, 687, 691, 698, 702, 704, 707, 732, 736, 749, 758, 759, 760, 767, 768, 776, 777, 778, 847, 849, 851, 861], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 56, 58, 59, 60, 63, 69, 70, 71, 75, 79, 83, 89, 90, 92, 93, 94, 97, 98, 100, 102, 106, 116, 150, 179, 237, 244, 248, 254, 256, 265, 272, 273, 278, 279, 287, 296, 297, 298, 363, 377, 386, 387, 389, 390, 392, 401, 408, 409, 426, 428, 431, 432, 436, 442, 484, 488, 493, 514, 538, 556, 560, 561, 564, 575, 576, 601, 607, 624, 645, 646, 648, 650, 652, 653, 655, 657, 659, 660, 661, 663, 666, 676, 687, 690, 691, 692, 698, 704, 705, 726, 732, 737, 758, 759, 766, 768, 777, 778, 792, 835, 839, 848, 851, 859], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 15, 16, 17, 18, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 63, 64, 70, 75, 86, 92, 93, 94, 95, 97, 98, 102, 116, 125, 126, 152, 237, 254, 279, 287, 318, 326, 377, 383, 389, 392, 408, 409, 417, 418, 421, 422, 426, 427, 432, 436, 488, 561, 576, 630, 632, 642, 645, 648, 650, 651, 652, 653, 657, 659, 666, 675, 676, 687, 691, 745, 758, 759, 760, 762, 847], "v17": 0, "18": [0, 4, 5, 17, 18, 23, 24, 25, 26, 37, 39, 40, 56, 58, 60, 69, 70, 79, 92, 93, 94, 97, 98, 102, 106, 126, 249, 254, 296, 300, 309, 310, 363, 381, 386, 389, 392, 411, 417, 421, 422, 426, 432, 436, 488, 606, 642, 648, 653, 659, 663, 670, 687, 693, 698, 705, 758, 759, 760, 777, 778, 782, 847, 849, 851], "v18": 0, "19": [0, 4, 5, 23, 24, 25, 37, 39, 40, 56, 58, 59, 60, 63, 69, 70, 79, 92, 93, 97, 98, 102, 240, 249, 277, 287, 304, 389, 390, 392, 401, 410, 411, 422, 426, 432, 436, 442, 447, 488, 538, 648, 653, 657, 659, 662, 687, 694, 707, 748, 758, 759, 760, 775, 851], "v19": 0, "20": [0, 4, 15, 16, 17, 18, 23, 26, 29, 56, 58, 59, 60, 63, 69, 70, 71, 74, 79, 83, 92, 93, 94, 97, 98, 102, 106, 249, 253, 257, 293, 297, 301, 318, 363, 365, 367, 386, 389, 392, 408, 410, 426, 432, 436, 481, 504, 560, 567, 568, 570, 592, 596, 607, 648, 650, 653, 659, 660, 663, 666, 667, 678, 687, 692, 694, 698, 705, 758, 766, 767, 776, 777, 778, 782, 784, 832, 848, 867], "v20": 0, "22": [0, 5, 23, 26, 37, 39, 40, 56, 58, 60, 63, 64, 69, 70, 71, 79, 83, 86, 93, 94, 97, 102, 126, 131, 249, 257, 318, 322, 381, 389, 390, 391, 392, 397, 401, 408, 409, 411, 426, 427, 428, 432, 436, 442, 466, 481, 528, 538, 561, 592, 628, 642, 648, 652, 653, 657, 660, 663, 675, 676, 687, 692, 698, 702, 745, 755, 758, 759, 760, 767, 777, 778, 839, 847, 853], "26": [0, 5, 14, 23, 37, 39, 40, 43, 56, 58, 60, 63, 69, 70, 78, 79, 93, 94, 95, 102, 249, 254, 300, 389, 390, 411, 447, 457, 575, 630, 648, 650, 651, 652, 653, 657, 658, 663, 674, 687, 698, 705, 738, 756, 758, 759, 778], "27": [0, 14, 23, 26, 56, 58, 63, 69, 70, 75, 79, 92, 93, 94, 97, 98, 102, 106, 248, 249, 252, 292, 300, 301, 360, 386, 389, 411, 421, 576, 606, 648, 650, 653, 657, 663, 693, 698, 708, 738, 745, 759, 778, 782, 795], "28": [0, 23, 26, 40, 42, 43, 44, 45, 56, 58, 60, 63, 69, 70, 74, 78, 92, 93, 94, 97, 98, 102, 106, 253, 256, 277, 293, 389, 390, 411, 421, 442, 544, 575, 630, 648, 650, 651, 652, 653, 654, 658, 663, 667, 669, 671, 673, 674, 676, 698, 715, 756, 758, 759, 760, 778, 782], "30": [0, 23, 26, 37, 39, 40, 56, 58, 69, 70, 71, 93, 94, 102, 106, 116, 287, 318, 363, 371, 386, 389, 392, 411, 421, 432, 481, 504, 528, 560, 562, 567, 568, 575, 576, 592, 601, 607, 648, 650, 653, 657, 663, 692, 698, 746, 758, 759, 777, 778, 782, 797, 810, 826, 835, 848], "int64": [0, 12, 13, 70, 79, 80, 82, 83, 90, 102, 103, 105, 106, 156, 169, 175, 178, 180, 182, 186, 187, 191, 198, 330, 383, 399, 401, 530, 538, 539, 645, 646, 660, 662, 663, 758, 763, 764, 765, 774, 776, 777, 782, 784, 795, 796, 849, 861, 864, 869], "proceed": [0, 58], "within": [0, 10, 11, 26, 27, 29, 33, 44, 45, 65, 70, 93, 139, 348, 365, 386, 389, 395, 426, 427, 428, 433, 436, 476, 477, 478, 521, 645, 659, 760, 826, 835, 838, 840, 841, 844, 848, 849, 861, 862, 863, 864, 871, 876, 878, 884, 885], "significantli": [0, 15, 16, 19, 20, 24, 25, 44, 70, 75, 93, 98, 390, 463, 653, 703, 848], "impact": [0, 835, 848, 864], "isnul": 0, "sum": [0, 8, 9, 10, 11, 58, 60, 69, 70, 71, 74, 75, 76, 83, 87, 92, 93, 94, 97, 98, 99, 106, 110, 115, 116, 227, 237, 279, 303, 346, 370, 383, 386, 390, 391, 392, 395, 401, 432, 442, 466, 467, 468, 469, 470, 471, 472, 473, 504, 521, 543, 544, 561, 591, 592, 647, 648, 650, 652, 653, 654, 663, 675, 682, 694, 703, 707, 710, 712, 777, 778, 810, 812, 825, 832, 847, 849, 857, 859, 860, 861, 869, 870, 878, 879, 881], "quickli": [0, 8, 9, 839, 840, 848, 883], "appropri": [0, 8, 9, 19, 20, 33, 37, 40, 44, 45, 71, 80, 85, 103, 108, 237, 254, 261, 287, 348, 365, 386, 648, 660, 763, 838, 839, 840, 853, 858, 864], "either": [0, 26, 37, 38, 49, 50, 51, 52, 56, 62, 69, 70, 71, 74, 83, 87, 92, 93, 94, 97, 98, 125, 128, 131, 136, 147, 148, 158, 234, 235, 236, 237, 242, 252, 254, 255, 257, 259, 261, 268, 269, 275, 276, 277, 278, 279, 287, 296, 298, 299, 301, 304, 305, 351, 373, 386, 389, 395, 401, 411, 421, 431, 432, 436, 521, 538, 539, 559, 579, 587, 588, 596, 616, 642, 644, 645, 648, 650, 652, 653, 656, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 693, 698, 701, 705, 734, 735, 736, 776, 777, 782, 784, 797, 811, 812, 813, 820, 834, 838, 839, 840, 845, 846, 847, 849, 850, 851, 852, 853, 855, 857, 860, 861, 862, 863, 864, 867, 869, 871, 878, 883], "imput": [0, 70, 93, 390, 448, 459, 465], "remov": [0, 8, 9, 15, 16, 23, 26, 35, 40, 44, 45, 47, 75, 87, 98, 653, 655, 656, 657, 687, 693, 707, 728, 734, 735, 751, 826, 829, 832, 838, 845, 846, 848, 849, 852, 857, 863, 864, 867, 878, 879, 883], "maintain": [0, 82, 105, 662, 772, 775, 832, 839, 840, 843, 855, 860, 862, 863, 864], "integr": [0, 4, 5, 6, 7, 8, 9, 27, 29, 36, 45, 48, 67, 69, 70, 90, 92, 93, 166, 306, 369, 386, 401, 540, 646, 648, 832, 837, 839, 841, 842, 858, 876, 878, 883], "check": [0, 4, 5, 6, 7, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 61, 63, 65, 67, 71, 75, 87, 90, 94, 98, 131, 170, 171, 180, 181, 184, 186, 187, 188, 191, 206, 213, 214, 221, 233, 553, 563, 565, 566, 573, 579, 580, 581, 582, 583, 599, 610, 622, 628, 639, 642, 646, 647, 650, 651, 653, 657, 689, 690, 696, 737, 747, 748, 749, 790, 797, 825, 826, 832, 833, 834, 837, 838, 839, 840, 841, 843, 847, 848, 850, 851, 853, 858, 860, 861, 862, 863, 864, 865, 866, 869, 872, 879], "A": [0, 8, 9, 44, 45, 59, 66, 67, 70, 71, 77, 79, 83, 84, 87, 90, 92, 93, 94, 97, 98, 100, 102, 104, 107, 110, 111, 116, 135, 136, 138, 142, 146, 154, 161, 167, 208, 227, 289, 291, 295, 327, 338, 342, 344, 345, 346, 348, 362, 365, 369, 370, 383, 386, 389, 390, 391, 392, 395, 396, 401, 404, 418, 432, 435, 437, 444, 452, 457, 460, 468, 472, 483, 486, 499, 505, 509, 510, 516, 517, 518, 519, 523, 524, 525, 526, 527, 535, 544, 547, 552, 554, 563, 572, 575, 576, 607, 608, 609, 612, 639, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 659, 663, 664, 675, 679, 687, 689, 692, 697, 698, 702, 703, 715, 718, 721, 723, 727, 729, 737, 740, 742, 744, 745, 746, 747, 748, 752, 753, 754, 755, 757, 758, 759, 760, 762, 768, 778, 786, 787, 790, 792, 793, 795, 796, 797, 798, 803, 810, 826, 830, 832, 837, 838, 839, 842, 847, 849, 850, 853, 856, 857, 861, 862, 864, 869, 871, 872, 873, 874, 878, 879, 881, 883, 884], "critic": [0, 8, 9, 37, 40, 44, 45, 654, 716, 830, 883], "grasp": [0, 861], "imbal": 0, "common": [0, 23, 33, 36, 44, 48, 69, 70, 87, 92, 193, 264, 272, 353, 360, 386, 646, 648, 833, 836, 838, 839, 846, 849, 850, 851, 857, 858, 861, 865, 867, 871, 883], "scenario": [0, 39, 849, 859], "call": [0, 4, 5, 8, 9, 14, 19, 20, 27, 29, 33, 35, 36, 37, 38, 39, 42, 44, 45, 47, 48, 49, 50, 51, 58, 62, 70, 85, 90, 93, 108, 110, 116, 135, 186, 187, 227, 390, 401, 457, 544, 595, 601, 616, 632, 633, 635, 644, 647, 650, 651, 653, 657, 701, 737, 743, 747, 748, 792, 803, 811, 812, 813, 815, 820, 826, 830, 832, 838, 839, 840, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 870, 871, 876, 878, 879, 881, 883, 884], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 34, 35, 40, 44, 45, 46, 47, 51, 56, 57, 63, 64, 67, 69, 70, 75, 80, 81, 83, 84, 86, 92, 93, 98, 103, 106, 107, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 147, 151, 158, 161, 168, 187, 194, 237, 242, 244, 246, 247, 248, 249, 254, 255, 259, 261, 265, 266, 273, 274, 277, 279, 281, 283, 284, 287, 290, 292, 296, 303, 305, 308, 309, 314, 315, 317, 342, 349, 350, 381, 383, 386, 390, 391, 392, 440, 468, 507, 642, 645, 646, 648, 653, 660, 661, 663, 664, 684, 696, 699, 702, 709, 710, 764, 768, 769, 770, 771, 779, 780, 781, 782, 783, 784, 785, 786, 787, 807, 832, 833, 836, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 861, 862, 864, 867, 869, 870, 871], "instanc": [0, 8, 9, 26, 33, 39, 44, 45, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 179, 182, 185, 186, 187, 189, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 386, 389, 390, 391, 392, 395, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 426, 427, 428, 432, 433, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 602, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 645, 646, 648, 650, 651, 652, 653, 654, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 803, 808, 830, 838, 839, 840, 843, 844, 845, 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 864, 873, 875, 879, 884], "typic": [0, 8, 9, 23, 70, 93, 348, 365, 386, 401, 537, 662, 774, 811, 843, 857, 885], "repres": [0, 66, 69, 70, 74, 75, 92, 93, 97, 98, 113, 138, 142, 153, 155, 178, 236, 237, 240, 243, 252, 254, 261, 287, 300, 304, 305, 330, 344, 345, 346, 363, 380, 383, 386, 388, 389, 390, 391, 392, 395, 396, 399, 432, 436, 450, 464, 466, 471, 498, 510, 516, 517, 518, 523, 529, 536, 572, 644, 645, 646, 648, 650, 652, 653, 675, 676, 677, 691, 698, 701, 702, 797, 810, 814, 826, 839, 844, 849, 867, 884], "ones": [0, 8, 9, 23, 33, 40, 44, 56, 62, 66, 70, 72, 74, 79, 87, 89, 93, 97, 102, 146, 150, 155, 157, 163, 213, 214, 250, 327, 383, 401, 546, 630, 645, 647, 648, 651, 652, 654, 670, 671, 715, 758, 759, 760, 796, 838, 844, 848, 851, 856, 857, 863, 864, 883], "how": [0, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 56, 59, 62, 63, 64, 69, 70, 86, 92, 93, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 254, 287, 305, 309, 314, 315, 317, 381, 391, 392, 466, 481, 507, 508, 642, 648, 807, 810, 811, 812, 813, 833, 834, 836, 837, 839, 840, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 875, 876, 882, 883], "approach": [0, 49, 836, 838, 839, 840, 844, 847, 849, 850, 854, 857, 861, 864, 865, 867, 871, 885], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 15, 16, 19, 20, 23, 44, 45, 56, 58, 59, 60, 70, 75, 81, 85, 93, 98, 104, 108, 261, 389, 390, 392, 437, 443, 452, 509, 513, 550, 551, 648, 650, 653, 661, 688, 689, 700, 701, 703, 704, 708, 768, 769, 770, 792, 796, 803, 813, 820, 821, 823, 824, 830, 838, 839, 840, 845, 846, 847, 848, 851, 852, 853, 856, 861, 862, 864, 865, 866, 867, 869, 875, 883], "highli": [0, 59, 838, 883], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 21, 22, 23, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 70, 78, 79, 93, 101, 102, 110, 111, 373, 386, 389, 395, 401, 411, 412, 417, 418, 421, 422, 423, 433, 434, 516, 517, 518, 519, 520, 521, 522, 537, 540, 655, 658, 659, 719, 729, 756, 757, 759, 810, 811, 814, 832, 838, 860, 861, 867, 879, 881], "unifi": [0, 33, 35, 36, 44, 47, 48, 52, 59, 87, 227, 647, 841, 842, 843, 844, 848, 849, 853, 858, 859, 861, 867, 869, 871, 883], "write": [0, 23, 44, 45, 56, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 166, 168, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 343, 347, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 372, 373, 374, 381, 383, 386, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 431, 433, 434, 437, 438, 440, 441, 449, 450, 452, 455, 456, 457, 458, 464, 467, 468, 469, 470, 472, 473, 482, 483, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 555, 556, 560, 561, 562, 567, 568, 577, 591, 592, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 756, 757, 758, 759, 760, 762, 764, 765, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 793, 832, 837, 838, 840, 842, 843, 845, 846, 848, 849, 851, 852, 853, 857, 860, 862, 865, 869, 883], "code": [0, 1, 6, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 31, 32, 39, 40, 44, 46, 47, 48, 49, 50, 51, 58, 59, 68, 69, 87, 91, 92, 116, 228, 274, 401, 544, 553, 561, 562, 577, 591, 595, 610, 647, 650, 652, 653, 655, 674, 695, 696, 697, 729, 830, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 860, 861, 862, 864, 867, 869, 870, 871, 873, 875, 877, 878, 879, 881, 882, 883, 884, 885], "agnost": [0, 33, 34, 44, 45, 46, 50, 56, 844, 849, 856, 869, 871], "underli": [0, 33, 44, 45, 56, 70, 77, 93, 100, 113, 244, 247, 249, 284, 391, 392, 471, 488, 648, 653, 655, 701, 725, 847, 860, 867, 879, 883], "deep": [0, 8, 9, 23, 33, 40, 44, 56, 87, 560, 650, 832, 833, 834, 837, 838, 840, 843, 846, 847, 849, 855, 859, 862, 868, 883, 885], "develop": [0, 8, 9, 10, 11, 23, 27, 41, 44, 45, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 846, 848, 854, 863, 865, 871, 873, 875, 876, 878, 879, 883, 884, 885], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 61, 62, 65, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 87, 89, 92, 93, 94, 97, 98, 100, 102, 103, 104, 110, 111, 115, 116, 139, 150, 152, 155, 161, 215, 220, 222, 227, 251, 253, 254, 257, 261, 282, 283, 287, 292, 293, 297, 299, 304, 305, 306, 342, 344, 345, 346, 348, 351, 353, 354, 355, 359, 360, 365, 370, 373, 377, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 398, 401, 405, 406, 412, 413, 414, 415, 418, 423, 425, 433, 434, 443, 444, 448, 458, 459, 461, 465, 466, 467, 471, 472, 476, 477, 478, 488, 489, 490, 492, 498, 502, 506, 507, 516, 518, 523, 524, 525, 526, 527, 537, 542, 543, 544, 545, 546, 547, 549, 552, 553, 554, 563, 569, 574, 578, 589, 590, 599, 610, 622, 632, 645, 647, 648, 650, 651, 652, 653, 655, 657, 659, 660, 661, 675, 676, 677, 679, 682, 684, 688, 689, 690, 693, 694, 696, 699, 700, 703, 704, 708, 709, 710, 718, 719, 722, 726, 728, 738, 743, 748, 749, 750, 758, 759, 760, 763, 764, 765, 766, 768, 770, 790, 792, 795, 796, 797, 798, 803, 810, 813, 816, 817, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 878, 879, 881, 883, 884], "tensorflow": [0, 3, 14, 15, 16, 17, 18, 24, 25, 27, 31, 32, 33, 34, 37, 38, 39, 40, 44, 45, 46, 49, 50, 51, 56, 62, 69, 70, 71, 92, 93, 161, 208, 223, 238, 342, 383, 390, 444, 610, 645, 647, 650, 790, 803, 820, 832, 836, 837, 838, 839, 840, 843, 848, 849, 850, 854, 856, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 875, 876, 878, 880, 881, 884], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 28, 29, 31, 32, 40, 44, 45, 56, 63, 297, 349, 350, 386, 648, 815, 832, 837, 838, 844, 849, 850, 853, 856, 857, 860, 861, 862, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879, 884], "flexibl": [0, 847, 849, 856, 859, 865, 867, 876, 883, 885], "particularli": [0, 840, 871, 879], "research": [0, 8, 9, 44, 45, 58, 832, 875, 876, 878, 883], "where": [0, 1, 19, 20, 23, 35, 39, 47, 48, 52, 60, 66, 69, 70, 71, 75, 77, 79, 80, 83, 84, 87, 89, 92, 93, 94, 98, 100, 102, 103, 106, 107, 110, 111, 142, 149, 150, 153, 155, 161, 242, 252, 254, 257, 259, 261, 262, 271, 276, 277, 278, 285, 286, 287, 292, 294, 298, 300, 304, 314, 316, 342, 344, 345, 346, 361, 365, 372, 381, 383, 386, 389, 390, 391, 392, 395, 396, 401, 403, 404, 405, 406, 412, 417, 418, 422, 437, 443, 444, 448, 449, 451, 452, 459, 465, 466, 467, 476, 477, 478, 492, 498, 499, 516, 517, 518, 521, 523, 524, 526, 527, 537, 545, 546, 547, 577, 591, 629, 645, 648, 650, 652, 653, 655, 657, 659, 660, 663, 664, 677, 679, 684, 688, 689, 694, 696, 698, 699, 700, 703, 704, 707, 709, 718, 720, 721, 723, 729, 733, 741, 748, 757, 758, 759, 760, 765, 766, 781, 783, 785, 786, 787, 795, 810, 814, 826, 830, 832, 833, 836, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 852, 853, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 871, 872, 879], "abil": [0, 839, 867, 871, 876, 883], "switch": [0, 44, 56, 803, 845, 853, 857, 858, 875], "differ": [0, 4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 23, 24, 25, 26, 27, 31, 32, 36, 37, 38, 44, 45, 48, 49, 50, 51, 69, 70, 71, 75, 83, 87, 93, 94, 106, 115, 116, 125, 128, 179, 237, 254, 261, 262, 287, 303, 348, 355, 360, 361, 365, 386, 389, 390, 392, 401, 423, 434, 459, 465, 482, 489, 490, 505, 538, 539, 547, 567, 568, 642, 646, 648, 650, 652, 653, 655, 663, 675, 676, 691, 701, 719, 729, 776, 777, 782, 784, 785, 790, 795, 803, 812, 813, 832, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 875, 876, 878, 879, 881, 883, 885], "without": [0, 1, 4, 5, 26, 47, 56, 60, 63, 81, 87, 113, 601, 616, 650, 655, 657, 661, 725, 738, 768, 769, 770, 771, 795, 798, 825, 839, 840, 844, 845, 847, 848, 849, 850, 851, 853, 856, 857, 861, 864, 865, 867, 871, 876, 879, 883, 884], "chang": [0, 4, 5, 6, 7, 26, 33, 45, 58, 59, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 386, 389, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 642, 648, 655, 657, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 703, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 738, 749, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 792, 832, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 851, 852, 854, 855, 861, 862, 863, 864, 865, 866, 867, 869, 871, 872, 879], "codebas": [0, 8, 9, 23, 44, 45, 225, 226, 647, 833, 835, 842, 849, 855, 860, 861, 863, 864, 865, 875, 876, 885], "signific": [0, 26, 70, 391, 471, 866, 871, 875, 883], "advantag": [0, 8, 9, 23, 40, 43, 44, 45, 832, 839, 840, 849, 860, 861, 872, 878, 883], "effect": [0, 8, 9, 23, 50, 66, 70, 72, 83, 93, 95, 106, 153, 391, 425, 470, 630, 638, 645, 651, 652, 663, 679, 783, 785, 795, 798, 838, 844, 847, 848, 852, 856, 860, 862, 867, 871], "analyz": [0, 838, 873], "done": [0, 5, 58, 60, 63, 653, 690, 837, 838, 839, 840, 843, 846, 848, 850, 851, 854, 855, 860, 861, 864, 878, 879, 883], "two": [0, 36, 48, 50, 56, 66, 70, 75, 81, 93, 94, 98, 115, 116, 136, 139, 146, 153, 159, 160, 161, 192, 200, 248, 262, 263, 297, 342, 343, 348, 361, 362, 364, 365, 367, 369, 376, 383, 386, 389, 390, 391, 392, 401, 418, 441, 442, 443, 452, 457, 466, 468, 472, 477, 498, 505, 509, 537, 547, 552, 644, 645, 646, 648, 650, 652, 653, 654, 655, 661, 677, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 715, 730, 768, 769, 770, 771, 795, 797, 803, 811, 838, 839, 843, 844, 849, 850, 851, 852, 857, 861, 862, 864, 867, 869], "distinct": [0, 70, 81, 93, 344, 345, 346, 383, 661, 768, 769, 770, 771, 835, 839, 847, 852, 859, 860, 861, 883], "one": [0, 4, 5, 8, 9, 14, 19, 20, 23, 24, 25, 27, 29, 35, 36, 39, 40, 44, 45, 47, 48, 60, 61, 62, 66, 70, 71, 74, 75, 77, 80, 81, 83, 87, 89, 92, 93, 94, 95, 97, 98, 100, 101, 103, 104, 105, 106, 110, 139, 143, 153, 155, 156, 157, 167, 169, 227, 248, 254, 261, 262, 279, 285, 286, 287, 306, 316, 326, 329, 330, 348, 354, 357, 358, 361, 362, 365, 366, 367, 369, 370, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 401, 411, 413, 417, 418, 421, 422, 425, 433, 438, 440, 449, 458, 472, 476, 477, 478, 482, 488, 489, 490, 495, 497, 503, 506, 516, 517, 518, 523, 528, 538, 539, 542, 543, 544, 545, 546, 547, 549, 587, 591, 592, 594, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 645, 646, 647, 648, 650, 651, 652, 653, 655, 658, 660, 661, 663, 666, 667, 668, 669, 670, 671, 674, 691, 693, 694, 698, 700, 709, 710, 721, 722, 723, 726, 728, 732, 756, 763, 766, 768, 769, 770, 771, 776, 778, 795, 797, 814, 817, 820, 826, 829, 832, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 867, 869, 871, 873, 878, 880, 883, 884], "anoth": [0, 4, 5, 14, 33, 35, 36, 39, 40, 44, 45, 47, 48, 60, 61, 147, 167, 169, 645, 646, 832, 838, 839, 840, 845, 847, 849, 850, 853, 855, 857, 860, 861, 864, 869, 870, 873, 877, 878, 879, 880, 883], "characterist": [0, 846], "clear": [0, 26, 209, 647, 838, 840, 845, 849, 850, 851, 861, 867, 869, 875, 883], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 29, 33, 34, 36, 40, 44, 45, 46, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 166, 167, 168, 169, 171, 177, 178, 179, 180, 181, 184, 186, 187, 189, 194, 206, 207, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 323, 324, 325, 327, 334, 335, 342, 344, 348, 349, 350, 352, 367, 368, 373, 377, 381, 383, 386, 389, 390, 391, 392, 395, 401, 408, 409, 410, 411, 413, 414, 416, 418, 421, 423, 426, 427, 428, 431, 433, 434, 439, 442, 444, 446, 447, 457, 464, 467, 468, 469, 470, 471, 472, 473, 479, 481, 483, 494, 498, 499, 504, 505, 507, 508, 509, 511, 515, 519, 520, 522, 537, 538, 539, 540, 547, 549, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 587, 588, 590, 591, 592, 596, 597, 598, 601, 604, 605, 606, 607, 608, 610, 612, 614, 615, 616, 620, 621, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 712, 713, 714, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 820, 825, 826, 830, 839, 840, 847, 849, 851, 862, 864, 866, 869, 870, 879, 881], "shape": [0, 4, 5, 6, 7, 12, 13, 15, 16, 18, 23, 26, 27, 29, 35, 36, 37, 38, 42, 43, 44, 45, 50, 56, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 222, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 349, 350, 351, 352, 353, 355, 357, 358, 360, 362, 364, 366, 367, 368, 369, 373, 374, 376, 381, 383, 386, 389, 390, 391, 392, 395, 396, 397, 399, 401, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 431, 433, 434, 435, 438, 439, 440, 441, 443, 444, 445, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 481, 483, 486, 491, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 555, 556, 560, 561, 562, 564, 567, 568, 571, 577, 584, 591, 592, 602, 611, 613, 625, 629, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 772, 773, 775, 776, 777, 778, 780, 782, 783, 785, 786, 787, 792, 795, 797, 810, 811, 814, 825, 830, 832, 840, 841, 847, 849, 850, 851, 852, 853, 854, 856, 860, 861, 862, 864, 865, 866, 869, 878, 879], "gain": [0, 26, 810, 840, 841, 843, 868, 875, 883], "descript": [0, 1, 2, 53, 54, 55, 60, 63, 66, 69, 70, 75, 92, 93, 98, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 343, 349, 350, 352, 355, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 498, 507, 511, 537, 540, 567, 571, 573, 575, 606, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 838, 840, 852, 859, 860], "describ": [0, 10, 11, 70, 83, 93, 111, 237, 254, 255, 287, 290, 292, 391, 396, 399, 471, 527, 530, 648, 652, 663, 679, 778, 782, 784, 834, 835, 838, 839, 840, 846, 848, 860, 861, 864, 869, 883], "obtain": [0, 44, 45, 63, 70, 93, 333, 383, 389, 429, 652, 679, 797, 861, 879], "mean": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 33, 34, 35, 36, 37, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 59, 60, 70, 71, 74, 76, 77, 79, 83, 85, 87, 89, 93, 94, 97, 99, 100, 102, 106, 108, 110, 148, 227, 344, 354, 383, 386, 389, 390, 391, 392, 395, 396, 401, 418, 423, 441, 454, 466, 467, 468, 469, 470, 471, 472, 473, 483, 488, 498, 516, 518, 524, 543, 544, 561, 632, 633, 635, 641, 645, 647, 650, 651, 652, 653, 654, 655, 656, 657, 659, 663, 667, 669, 670, 671, 673, 674, 675, 686, 712, 713, 714, 725, 734, 735, 736, 743, 758, 759, 795, 797, 798, 810, 811, 814, 832, 839, 840, 842, 843, 845, 847, 849, 850, 851, 857, 859, 860, 861, 864, 865, 867, 869, 870, 871, 873, 875, 878, 881, 883], "deviat": [0, 78, 79, 83, 101, 102, 106, 658, 659, 663, 756, 759, 783, 797, 810, 814, 843], "minimum": [0, 58, 69, 70, 71, 77, 80, 83, 92, 93, 94, 100, 103, 106, 234, 262, 289, 313, 345, 349, 350, 360, 381, 383, 386, 392, 401, 498, 535, 539, 545, 597, 598, 607, 608, 620, 621, 648, 650, 655, 660, 663, 718, 764, 779, 781, 795, 797, 798, 803, 849, 866], "maximum": [0, 69, 70, 71, 72, 77, 80, 83, 87, 92, 93, 94, 95, 100, 103, 106, 116, 227, 313, 349, 350, 361, 374, 381, 386, 389, 390, 392, 401, 405, 406, 416, 459, 462, 465, 498, 499, 538, 540, 545, 555, 556, 564, 572, 636, 647, 648, 650, 651, 653, 655, 660, 663, 694, 718, 763, 764, 779, 781, 795, 797, 798, 803, 826, 840, 849, 851, 860], "quartil": 0, "overview": [0, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 846, 848, 862, 864, 881], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 21, 22, 23, 50, 71, 111, 193, 559, 646, 650, 836, 838, 839, 840, 848, 849, 851, 854, 855, 858, 861, 864, 865, 867, 869, 873], "indic": [0, 4, 5, 21, 22, 66, 70, 71, 74, 75, 77, 78, 80, 81, 82, 87, 89, 90, 93, 94, 97, 98, 100, 101, 103, 104, 105, 110, 113, 140, 141, 155, 159, 161, 182, 186, 187, 298, 342, 343, 344, 363, 383, 386, 389, 390, 391, 392, 397, 399, 408, 409, 410, 412, 416, 417, 418, 422, 423, 426, 427, 428, 429, 433, 434, 444, 465, 468, 476, 477, 478, 481, 484, 486, 488, 489, 490, 493, 497, 504, 505, 507, 508, 509, 511, 513, 514, 528, 529, 530, 552, 567, 568, 570, 591, 592, 596, 629, 632, 633, 639, 645, 648, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 666, 668, 669, 670, 671, 674, 679, 696, 710, 721, 722, 723, 725, 726, 727, 728, 730, 732, 737, 740, 742, 744, 745, 746, 748, 752, 753, 754, 755, 756, 757, 763, 764, 765, 766, 768, 770, 772, 774, 775, 792, 793, 795, 797, 811, 817, 825, 826, 828, 839, 848, 856, 859, 861, 869, 870, 879], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 59, 74, 79, 83, 97, 102, 106, 396, 524, 652, 659, 663, 667, 669, 670, 671, 673, 674, 758, 759, 851, 881], "250": 0, "105092": 0, "min": [0, 56, 60, 67, 70, 71, 75, 83, 90, 93, 94, 98, 106, 159, 161, 179, 182, 286, 342, 345, 350, 383, 386, 390, 392, 444, 504, 545, 561, 591, 592, 607, 645, 646, 648, 650, 653, 663, 694, 700, 703, 704, 710], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 23, 56, 69, 70, 92, 93, 94, 97, 102, 132, 142, 151, 240, 242, 254, 256, 267, 329, 362, 363, 383, 386, 432, 547, 562, 575, 607, 642, 645, 648, 650, 653, 657, 659, 666, 692, 698, 745, 760], "050000": 0, "max": [0, 56, 58, 67, 70, 71, 75, 83, 90, 93, 94, 98, 106, 179, 182, 285, 349, 386, 389, 390, 391, 392, 408, 409, 410, 426, 427, 428, 429, 431, 433, 444, 466, 504, 506, 507, 555, 556, 561, 577, 591, 592, 646, 648, 650, 653, 663, 694, 696, 699, 795, 811, 815, 848, 861], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 864], "receiv": [0, 5, 8, 9, 58, 62, 110, 551, 587, 650, 656, 734, 735, 736, 811, 830, 835, 839, 840, 849, 850, 864, 867], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 70, 81, 254, 261, 287, 296, 402, 548, 595, 619, 648, 650, 661, 768, 769, 770, 771, 838, 846, 847, 848, 849, 860, 861, 862, 864, 867, 869, 871], "associ": [0, 21, 22, 70, 75, 93, 98, 237, 287, 392, 401, 475, 540, 648, 653, 696, 699, 711, 792, 840, 849, 857, 858, 861, 862, 864, 871], "122": [0, 24, 25, 67, 182, 252, 648], "211321": 0, "256": [0, 4, 5, 12, 13, 21, 22, 23, 69, 94, 297, 298, 608, 652, 667, 669, 795], "683288": 0, "250000": 0, "105": [0, 23, 75, 97, 652, 653, 675, 676, 691, 698], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 58, 60, 70, 72, 76, 93, 95, 99, 389, 391, 395, 401, 403, 404, 408, 409, 410, 468, 469, 470, 471, 472, 473, 521, 537, 630, 631, 636, 651, 652, 654, 656, 679, 712, 734, 735, 810, 811], "across": [0, 1, 21, 22, 24, 25, 26, 37, 39, 40, 56, 70, 80, 87, 93, 94, 103, 115, 225, 226, 254, 261, 287, 305, 391, 395, 466, 518, 521, 552, 573, 609, 647, 648, 650, 652, 657, 660, 675, 679, 743, 763, 764, 811, 838, 843, 849, 851, 853, 856, 857, 859, 864, 867, 876, 883, 885], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 37, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 57, 58, 60, 61, 63, 65, 66, 70, 71, 74, 75, 77, 79, 84, 85, 87, 88, 89, 92, 93, 94, 97, 98, 100, 102, 107, 108, 110, 111, 139, 148, 155, 159, 160, 161, 215, 222, 254, 258, 286, 287, 342, 343, 355, 374, 383, 386, 389, 390, 391, 392, 401, 423, 432, 434, 435, 436, 444, 449, 459, 460, 462, 465, 466, 487, 498, 499, 507, 513, 543, 549, 552, 569, 589, 590, 607, 614, 615, 629, 632, 645, 647, 648, 650, 651, 652, 653, 655, 656, 657, 659, 660, 664, 675, 678, 679, 684, 696, 701, 702, 705, 710, 722, 726, 728, 734, 735, 736, 737, 738, 739, 748, 749, 750, 751, 757, 760, 765, 790, 792, 795, 796, 797, 798, 810, 811, 817, 820, 826, 828, 830, 832, 833, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 878, 879, 880, 883, 884, 885], "group": [0, 8, 9, 23, 70, 93, 392, 395, 513, 517, 652, 657, 665, 672, 673, 739, 830, 841, 843, 847, 849, 857, 861, 862], "calcul": [0, 4, 5, 26, 58, 69, 70, 71, 76, 83, 87, 92, 93, 94, 98, 99, 106, 116, 234, 235, 236, 237, 238, 239, 240, 241, 242, 251, 252, 254, 257, 258, 259, 275, 276, 277, 278, 279, 280, 285, 286, 287, 292, 299, 300, 301, 303, 304, 305, 311, 321, 349, 350, 363, 373, 386, 389, 390, 391, 392, 395, 401, 408, 409, 410, 444, 466, 471, 498, 516, 518, 544, 584, 648, 650, 653, 654, 663, 690, 698, 701, 712, 713, 714, 715, 779, 780, 781, 782, 783, 784, 785, 795, 797, 810, 811, 814, 838, 852, 869, 879], "pictur": [0, 60, 832, 838, 869, 875], "vital": 0, "select": [0, 33, 44, 49, 62, 70, 83, 93, 106, 390, 392, 401, 444, 457, 507, 508, 511, 538, 539, 663, 776, 777, 838, 839, 840, 848, 854, 860, 864, 869, 870, 871, 876, 883], "guid": [0, 27, 40, 832, 833, 838, 839, 840, 846, 855, 861, 863], "recogn": [0, 60, 835, 841], "both": [0, 8, 9, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 42, 44, 45, 49, 50, 57, 59, 66, 69, 70, 71, 74, 75, 89, 92, 93, 94, 97, 98, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 169, 185, 189, 192, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 343, 349, 350, 352, 353, 355, 360, 365, 383, 386, 389, 390, 392, 396, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 492, 498, 507, 510, 511, 523, 537, 540, 567, 571, 573, 575, 584, 606, 615, 640, 641, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 811, 832, 836, 838, 840, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 860, 861, 864, 867, 869, 871, 878, 879, 883, 885], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 60], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 14, 23, 27, 29, 31, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 58, 63, 68, 70, 71, 77, 91, 93, 94, 100, 110, 111, 221, 228, 229, 233, 237, 254, 255, 261, 269, 270, 287, 290, 296, 298, 389, 392, 395, 413, 414, 415, 435, 476, 477, 478, 484, 486, 488, 489, 490, 491, 493, 497, 504, 505, 514, 516, 518, 550, 570, 577, 595, 647, 648, 650, 653, 655, 659, 701, 721, 722, 723, 725, 727, 728, 730, 732, 760, 838, 839, 840, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 869, 871, 878, 879, 881, 882, 883, 884, 885], "outnumb": 0, "address": [0, 44, 45, 70, 71, 93, 392, 507, 614, 650, 838, 840, 843, 844, 856, 863, 875, 882, 883, 885], "fair": 0, "dure": [0, 19, 20, 23, 24, 25, 35, 37, 44, 47, 49, 50, 68, 72, 83, 87, 91, 95, 106, 228, 389, 413, 414, 415, 595, 616, 630, 631, 636, 647, 650, 651, 652, 653, 656, 663, 675, 693, 734, 735, 736, 783, 785, 803, 814, 815, 830, 839, 847, 849, 850, 853, 857, 858, 860, 861, 862, 863, 864, 867, 871, 879, 883, 884], "similar": [0, 1, 8, 9, 23, 33, 44, 45, 70, 296, 391, 466, 648, 652, 654, 679, 715, 811, 836, 838, 839, 847, 848, 849, 850, 853, 854, 855, 857, 858, 859, 861, 862, 864, 865, 871, 878], "here": [0, 2, 4, 5, 8, 9, 10, 11, 15, 16, 23, 26, 28, 30, 33, 38, 41, 42, 43, 44, 45, 56, 58, 59, 60, 61, 63, 93, 297, 473, 648, 832, 836, 837, 838, 839, 840, 843, 845, 846, 847, 848, 849, 851, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 869, 870, 871, 878, 879, 881, 883, 884], "take": [0, 4, 5, 8, 9, 21, 22, 23, 33, 40, 42, 43, 44, 45, 50, 56, 58, 61, 70, 75, 77, 83, 93, 100, 110, 135, 136, 138, 155, 294, 301, 316, 381, 389, 390, 392, 409, 417, 422, 427, 437, 446, 460, 481, 488, 508, 538, 539, 644, 645, 648, 652, 653, 655, 656, 679, 693, 697, 725, 736, 776, 795, 803, 810, 811, 825, 830, 832, 833, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 860, 861, 862, 864, 867, 869, 870, 871, 872, 878, 879], "random": [0, 8, 9, 15, 16, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 58, 60, 61, 70, 74, 87, 93, 97, 337, 338, 339, 340, 341, 383, 390, 391, 448, 459, 465, 471, 523, 524, 525, 526, 527, 652, 675, 757, 758, 759, 760, 761, 762, 795, 797, 810, 825, 826, 832, 838, 850, 862, 864, 865, 878, 881, 883], "match": [0, 1, 67, 70, 87, 90, 93, 166, 261, 296, 353, 355, 386, 389, 391, 392, 434, 466, 481, 499, 504, 508, 587, 646, 648, 650, 653, 689, 690, 694, 710, 790, 836, 838, 844, 846, 847, 851, 854, 862, 884], "prevent": [0, 70, 72, 83, 93, 95, 106, 391, 471, 572, 630, 631, 636, 650, 651, 652, 663, 675, 780, 784, 810, 815, 838, 840, 848, 849, 853, 860, 861, 865], "being": [0, 8, 9, 10, 11, 15, 16, 23, 44, 45, 56, 70, 87, 93, 108, 115, 119, 139, 390, 392, 454, 482, 498, 601, 645, 650, 652, 653, 677, 690, 792, 798, 810, 839, 840, 843, 844, 845, 847, 849, 850, 851, 854, 856, 858, 860, 861, 862, 864, 865, 867, 869, 871, 874, 876, 883, 884, 885], "bias": [0, 652, 677], "toward": [0, 70, 77, 93, 100, 261, 308, 359, 371, 386, 392, 401, 505, 540, 648, 655, 726, 832, 836, 838, 839, 854, 870, 883], "legit_sampl": 0, "n": [0, 26, 56, 59, 60, 61, 63, 66, 69, 70, 74, 75, 77, 79, 80, 83, 84, 92, 93, 97, 98, 100, 102, 103, 106, 107, 110, 115, 153, 159, 160, 161, 234, 304, 306, 342, 343, 355, 383, 386, 389, 390, 391, 392, 395, 396, 399, 401, 403, 404, 405, 406, 411, 412, 417, 418, 421, 422, 423, 431, 432, 433, 434, 436, 444, 445, 452, 456, 458, 460, 465, 466, 478, 484, 487, 491, 493, 505, 514, 516, 517, 518, 521, 523, 524, 525, 526, 527, 530, 537, 547, 645, 648, 652, 653, 655, 657, 659, 660, 663, 664, 665, 666, 667, 668, 670, 672, 674, 679, 684, 687, 691, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 707, 708, 709, 710, 720, 721, 723, 729, 733, 745, 758, 759, 760, 766, 780, 782, 783, 784, 785, 786, 787, 811, 814, 825, 842, 846, 848, 864, 878], "after": [0, 4, 5, 6, 7, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 44, 45, 59, 70, 71, 72, 74, 78, 87, 93, 94, 95, 97, 101, 200, 301, 318, 322, 371, 381, 386, 389, 390, 392, 412, 413, 414, 415, 432, 436, 457, 487, 498, 577, 631, 634, 636, 637, 638, 646, 648, 650, 651, 652, 657, 658, 665, 666, 667, 668, 670, 672, 674, 675, 748, 756, 815, 820, 838, 839, 840, 843, 845, 846, 848, 849, 851, 853, 856, 859, 862, 864, 870, 878, 879, 883], "combin": [0, 26, 50, 70, 87, 93, 116, 142, 389, 401, 423, 434, 537, 565, 566, 645, 650, 653, 684, 693, 840, 844, 847, 848, 849, 851, 853, 857, 864, 869, 876, 883], "them": [0, 3, 4, 5, 19, 20, 24, 25, 27, 29, 31, 44, 45, 50, 390, 460, 554, 590, 650, 795, 811, 834, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 853, 855, 858, 860, 861, 862, 864, 866, 869, 871, 873, 874, 875, 877, 878, 879, 881, 883], "achiev": [0, 19, 20, 24, 25, 26, 44, 833, 835, 841, 848, 849, 857, 858, 864, 867, 869, 873], "concaten": [0, 56, 70, 71, 77, 93, 98, 392, 483, 560, 564, 650, 652, 655, 679, 698, 719, 795, 862, 867, 870], "along": [0, 59, 64, 66, 69, 70, 71, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 89, 92, 93, 94, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 113, 126, 130, 135, 151, 152, 227, 301, 304, 306, 344, 345, 346, 349, 350, 354, 355, 370, 377, 383, 386, 387, 389, 390, 391, 392, 395, 401, 411, 417, 418, 421, 422, 423, 433, 434, 459, 470, 483, 484, 485, 487, 489, 490, 498, 504, 507, 509, 511, 519, 520, 521, 522, 538, 539, 540, 542, 543, 544, 545, 546, 547, 560, 567, 644, 645, 647, 648, 650, 653, 654, 655, 656, 659, 660, 662, 663, 664, 684, 698, 707, 709, 710, 712, 713, 714, 719, 722, 723, 724, 726, 727, 729, 731, 732, 734, 735, 736, 762, 763, 764, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 811, 838, 841, 842, 851, 860, 863, 865, 867, 869, 883], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 23, 26, 59, 60, 61, 64, 66, 69, 70, 71, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 126, 130, 151, 152, 155, 227, 301, 306, 349, 350, 354, 355, 363, 370, 386, 389, 391, 392, 395, 399, 401, 411, 412, 418, 421, 423, 433, 434, 470, 475, 483, 484, 485, 488, 489, 490, 493, 498, 504, 505, 507, 508, 509, 511, 513, 514, 519, 520, 522, 530, 535, 538, 539, 540, 542, 543, 544, 545, 546, 547, 560, 567, 629, 642, 645, 647, 648, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 674, 684, 687, 694, 707, 709, 710, 712, 713, 714, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 762, 763, 764, 768, 770, 772, 773, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 797, 807, 811, 812, 817, 847, 849, 851, 853, 856, 857, 860, 861, 864, 867, 869], "result": [0, 1, 4, 5, 12, 13, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 29, 37, 39, 40, 44, 45, 56, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 166, 168, 193, 194, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 446, 447, 449, 450, 454, 455, 456, 457, 458, 460, 464, 467, 468, 469, 470, 472, 473, 475, 482, 483, 486, 488, 489, 490, 491, 492, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 555, 556, 560, 561, 562, 567, 568, 572, 577, 584, 591, 592, 630, 631, 632, 634, 636, 637, 638, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 740, 743, 744, 746, 750, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 797, 803, 817, 826, 830, 836, 838, 840, 843, 844, 846, 847, 848, 849, 851, 852, 854, 856, 857, 859, 860, 861, 862, 864, 865, 869, 870, 871, 878, 879, 881, 884], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 60, 811, 812, 813, 832, 839, 843, 844, 845, 846, 847, 848, 849, 850, 854, 856, 858, 861, 862, 864, 865, 867, 869, 871, 878, 879, 881, 883], "equal": [0, 6, 7, 66, 67, 69, 70, 71, 75, 76, 77, 79, 81, 82, 83, 87, 90, 92, 93, 94, 98, 99, 100, 102, 105, 111, 115, 116, 146, 148, 149, 150, 156, 157, 166, 246, 248, 252, 257, 259, 268, 269, 290, 292, 297, 300, 301, 305, 344, 345, 346, 348, 365, 383, 386, 389, 390, 392, 395, 401, 412, 433, 460, 484, 493, 507, 511, 514, 519, 520, 522, 540, 549, 552, 629, 645, 646, 648, 650, 653, 654, 655, 659, 660, 661, 662, 663, 687, 695, 696, 699, 701, 707, 712, 718, 720, 725, 727, 733, 760, 766, 768, 769, 770, 771, 772, 775, 780, 782, 783, 784, 785, 803, 810, 811, 846, 847, 849, 851, 853, 862, 864], "unbias": [0, 70, 83, 93, 106, 401, 537, 663, 785], "concat": [0, 12, 13, 56, 61, 71, 77, 87, 100, 227, 564, 647, 650, 655, 733, 862, 867, 869, 879], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 23, 56, 64, 70, 72, 79, 86, 92, 95, 102, 126, 252, 300, 374, 386, 634, 642, 651, 653, 657, 660, 663, 698, 738, 749, 758, 760, 767, 778], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 293, 648], "03": [0, 8, 9, 26, 59, 66, 69, 71, 72, 92, 93, 95, 102, 152, 252, 277, 357, 358, 607, 608, 631, 636, 645, 648, 650, 651, 653, 692, 759], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 795], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 24, 25, 37, 39, 40], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 26, 35, 56, 69, 70, 83, 90, 92, 93, 102, 182, 236, 252, 300, 336, 383, 421, 646, 648, 653, 657, 663, 705, 745, 759, 778], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 26, 56, 69, 79, 90, 92, 93, 102, 116, 182, 249, 646, 653, 663, 705, 759, 760, 784], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 69, 97, 242, 652, 675, 676], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 14, 19, 20, 24, 25, 26, 35, 36, 40, 44, 45, 56, 58, 59, 64, 79, 86, 95, 102, 131, 248, 389, 411, 421, 630, 634, 642, 648, 651, 653, 658, 659, 663, 694, 698, 756, 757, 758, 759, 760, 761, 778, 832, 869, 878], "53": [0, 17, 18, 26, 37, 56, 75, 79, 92, 97, 173, 229, 259, 432, 633, 635, 646, 647, 651, 653, 658, 691, 756, 760], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 15, 16, 19, 20, 24, 25, 27, 29, 39, 42, 44, 45, 50, 56, 57, 66, 70, 71, 93, 94, 110, 138, 151, 152, 336, 383, 389, 434, 564, 644, 645, 650, 652, 677, 678, 679, 826, 838, 840, 841, 843, 844, 846, 848, 849, 851, 852, 857, 859, 860, 861, 863, 867, 878, 879], "predictor": [0, 871], "label": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 70, 76, 93, 99, 391, 466, 467, 469, 470, 471, 472, 473, 654, 712, 713, 714, 832, 838, 843, 861, 872, 883], "whether": [0, 31, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 140, 141, 148, 150, 155, 157, 163, 166, 167, 169, 172, 173, 174, 175, 176, 177, 180, 181, 182, 184, 185, 186, 187, 189, 190, 191, 192, 194, 206, 210, 211, 213, 214, 216, 218, 221, 222, 224, 227, 228, 230, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 343, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 383, 386, 389, 390, 391, 392, 401, 408, 409, 410, 412, 413, 414, 415, 431, 433, 435, 437, 452, 454, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 483, 484, 486, 488, 489, 490, 493, 497, 505, 507, 508, 509, 511, 514, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 587, 591, 592, 593, 594, 596, 599, 600, 602, 603, 605, 606, 607, 608, 610, 612, 614, 615, 622, 623, 626, 628, 631, 632, 634, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 663, 664, 666, 667, 668, 669, 675, 676, 677, 678, 679, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 702, 707, 712, 713, 714, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 743, 744, 745, 747, 748, 749, 750, 754, 755, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 790, 792, 795, 807, 808, 811, 812, 813, 814, 815, 825, 832, 833, 838, 839, 844, 847, 849, 851, 856, 860, 861, 864, 866, 867, 875, 878, 879, 880], "x": [0, 4, 5, 12, 13, 15, 16, 17, 18, 23, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 186, 187, 189, 194, 210, 211, 213, 215, 220, 221, 222, 226, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 342, 343, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 399, 400, 401, 402, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 438, 440, 441, 443, 445, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 479, 480, 482, 483, 485, 486, 488, 491, 494, 495, 496, 497, 498, 500, 501, 502, 503, 506, 507, 509, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 596, 597, 598, 601, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 628, 629, 631, 632, 633, 635, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 740, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 811, 814, 817, 820, 823, 825, 830, 832, 836, 838, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 864, 865, 867, 869, 870, 878, 879, 881], "y": [0, 26, 44, 45, 56, 57, 59, 60, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 143, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 163, 166, 167, 168, 177, 179, 182, 194, 207, 211, 215, 220, 221, 222, 226, 228, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 348, 349, 350, 356, 364, 365, 366, 367, 368, 373, 375, 377, 381, 383, 386, 389, 390, 391, 392, 395, 401, 409, 411, 413, 414, 418, 421, 423, 427, 433, 440, 444, 450, 457, 464, 466, 467, 469, 470, 471, 472, 473, 483, 485, 494, 498, 499, 507, 508, 509, 511, 515, 519, 520, 522, 530, 536, 537, 538, 539, 540, 543, 545, 546, 547, 549, 552, 555, 556, 559, 560, 562, 563, 564, 567, 568, 569, 573, 575, 576, 577, 579, 580, 583, 584, 589, 596, 597, 598, 601, 604, 605, 607, 608, 610, 612, 614, 615, 616, 620, 621, 624, 627, 628, 629, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 667, 669, 671, 673, 674, 675, 676, 683, 684, 685, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 703, 704, 705, 707, 709, 710, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 740, 743, 744, 746, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 830, 845, 847, 850, 851, 859, 861, 862, 864, 865, 867, 870, 879], "upcom": 0, "phase": [0, 864, 871, 883], "drop": [0, 26, 60, 70, 93, 345, 383, 391, 392, 470, 508, 810, 811, 839, 871], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 305, 648], "length": [0, 8, 9, 21, 22, 58, 59, 66, 70, 76, 77, 87, 93, 99, 100, 110, 111, 116, 139, 148, 153, 328, 331, 332, 347, 355, 383, 386, 389, 390, 392, 396, 399, 411, 412, 417, 418, 421, 422, 423, 433, 434, 435, 437, 449, 458, 498, 499, 508, 525, 530, 629, 645, 650, 652, 653, 654, 655, 661, 679, 703, 704, 712, 725, 768, 795, 811, 864], "valid": [0, 12, 13, 23, 58, 60, 70, 74, 84, 93, 97, 107, 110, 111, 171, 389, 390, 408, 409, 410, 426, 427, 428, 429, 431, 432, 436, 457, 465, 580, 646, 650, 652, 655, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 721, 729, 786, 787, 795, 796, 811, 825, 839, 845, 849, 851, 855, 859, 862, 864, 879, 884], "gener": [0, 1, 10, 11, 12, 13, 23, 31, 35, 40, 44, 45, 47, 50, 58, 60, 62, 63, 66, 69, 70, 74, 79, 85, 89, 92, 93, 97, 102, 108, 111, 139, 151, 152, 161, 169, 254, 257, 267, 268, 283, 287, 296, 326, 329, 333, 334, 335, 337, 338, 339, 340, 341, 342, 349, 350, 383, 386, 389, 390, 392, 396, 401, 433, 439, 461, 507, 525, 537, 645, 646, 648, 652, 653, 654, 655, 659, 663, 675, 701, 702, 705, 708, 717, 733, 757, 758, 760, 761, 783, 795, 798, 803, 815, 825, 838, 839, 840, 842, 843, 844, 846, 849, 850, 851, 852, 853, 856, 857, 860, 861, 862, 865, 868, 869, 870, 871, 873, 876, 883, 884, 885], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 48, 56, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 179, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 343, 349, 350, 351, 352, 357, 358, 362, 364, 366, 367, 368, 369, 373, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 431, 433, 434, 438, 440, 441, 443, 444, 449, 450, 455, 456, 457, 458, 463, 467, 468, 469, 470, 471, 472, 473, 477, 478, 483, 484, 486, 491, 499, 500, 501, 502, 503, 505, 507, 509, 511, 512, 519, 520, 522, 523, 524, 526, 527, 528, 530, 537, 538, 539, 540, 544, 548, 555, 556, 560, 561, 562, 567, 568, 577, 591, 592, 595, 630, 631, 634, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 874, 875, 876, 879, 881, 883, 885], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 26, 29, 40, 44, 45, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 587, 588, 591, 592, 595, 596, 597, 598, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 803, 808, 810, 811, 812, 813, 814, 815, 816, 820, 821, 825, 826, 828, 830, 832, 838, 844, 852, 853, 856, 861, 862, 864, 865, 869, 878, 879, 880, 881, 884], "test_siz": [0, 26, 58], "specifi": [0, 23, 39, 40, 44, 45, 49, 50, 51, 62, 64, 66, 67, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 86, 87, 90, 92, 93, 94, 97, 98, 99, 100, 102, 103, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 144, 149, 151, 156, 159, 160, 162, 166, 168, 215, 220, 222, 226, 227, 228, 296, 305, 309, 314, 315, 317, 343, 348, 365, 370, 381, 383, 386, 389, 390, 391, 392, 396, 401, 408, 409, 410, 412, 418, 423, 433, 434, 435, 436, 444, 456, 458, 463, 466, 470, 471, 472, 474, 488, 491, 501, 502, 504, 505, 507, 511, 524, 535, 537, 538, 539, 542, 543, 547, 550, 567, 568, 570, 572, 573, 586, 588, 596, 629, 642, 645, 646, 647, 648, 650, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 677, 679, 682, 684, 686, 687, 689, 690, 694, 702, 705, 707, 708, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 726, 728, 729, 732, 733, 741, 742, 744, 745, 752, 753, 754, 755, 758, 759, 760, 762, 763, 764, 766, 769, 770, 771, 772, 776, 777, 778, 780, 782, 784, 786, 787, 795, 798, 807, 811, 812, 813, 826, 830, 839, 842, 846, 849, 850, 856, 857, 858, 860, 861, 862, 864, 869, 878, 879, 881], "reserv": [0, 838], "x_train": [0, 26], "x_test": [0, 26], "y_train": [0, 26, 60], "y_test": [0, 26], "random_st": [0, 26, 390, 448], "With": [0, 4, 5, 8, 9, 23, 35, 47, 56, 64, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 83, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 163, 166, 167, 168, 169, 171, 177, 178, 179, 182, 189, 194, 195, 196, 197, 198, 208, 211, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 349, 350, 352, 354, 357, 358, 362, 365, 366, 367, 369, 370, 373, 381, 383, 386, 389, 390, 391, 392, 401, 411, 413, 414, 421, 433, 440, 441, 442, 444, 445, 446, 457, 460, 472, 488, 489, 490, 492, 495, 497, 498, 499, 505, 507, 509, 511, 513, 528, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 553, 554, 555, 556, 559, 560, 561, 562, 563, 567, 568, 571, 573, 575, 576, 577, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 640, 641, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 682, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 707, 708, 709, 712, 714, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 839, 849, 851, 861, 864, 867, 879, 883], "next": [0, 1, 8, 9, 10, 11, 12, 13, 23, 34, 35, 36, 37, 39, 40, 43, 46, 47, 48, 49, 50, 51, 58, 60, 70, 93, 179, 362, 366, 371, 375, 386, 646, 810, 815, 838, 839, 840, 845, 849, 851, 852, 854, 855, 858, 883], "convers": [0, 69, 70, 93, 253, 293, 593, 603, 650, 812, 813, 832, 838, 870, 871, 873, 875, 876, 885], "becaus": [0, 37, 47, 49, 59, 70, 389, 412, 790, 839, 840, 843, 844, 845, 846, 847, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 867, 869, 871, 883], "own": [0, 8, 9, 10, 11, 17, 23, 27, 29, 33, 44, 45, 50, 832, 839, 843, 848, 849, 852, 853, 860, 861, 865, 869, 871, 873, 875, 883, 885], "confirm": [0, 4, 5, 59, 835, 838], "been": [0, 8, 9, 10, 11, 23, 24, 25, 27, 29, 37, 39, 44, 45, 70, 71, 79, 93, 94, 102, 210, 297, 392, 506, 560, 561, 562, 647, 648, 650, 659, 757, 825, 826, 838, 840, 843, 845, 847, 848, 849, 850, 852, 853, 856, 857, 860, 864, 869, 870, 871, 879, 883], "correctli": [0, 1, 39, 44, 45, 58, 70, 75, 80, 93, 98, 103, 354, 386, 401, 543, 544, 545, 546, 547, 653, 660, 694, 763, 838, 839, 840, 844, 847, 849, 851, 853, 855, 856, 862, 864, 867, 871, 878, 879], "size": [0, 5, 12, 13, 26, 27, 29, 34, 37, 46, 47, 49, 50, 51, 58, 60, 63, 70, 71, 74, 75, 77, 79, 80, 87, 93, 94, 97, 98, 100, 102, 103, 110, 111, 115, 116, 148, 151, 225, 226, 227, 326, 329, 333, 344, 345, 346, 347, 354, 370, 377, 383, 386, 387, 389, 390, 391, 392, 395, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 425, 426, 427, 429, 430, 436, 437, 444, 447, 459, 465, 466, 468, 482, 484, 496, 507, 509, 511, 517, 518, 521, 525, 530, 542, 543, 544, 545, 546, 547, 586, 591, 645, 647, 650, 652, 653, 655, 659, 660, 664, 677, 679, 682, 684, 687, 691, 694, 698, 700, 703, 709, 721, 726, 727, 728, 757, 763, 766, 786, 787, 795, 797, 798, 811, 826, 860, 862, 864, 867, 879, 881], "correct": [0, 19, 20, 27, 29, 38, 50, 56, 58, 60, 83, 106, 200, 390, 461, 646, 655, 663, 718, 783, 785, 792, 795, 836, 838, 840, 842, 847, 848, 849, 850, 853, 854, 856, 857, 860, 862, 864, 878], "787": 0, "197": [0, 69, 242, 648], "success": [0, 23, 653, 663, 707, 782, 784, 835, 839, 848], "prepare_data": [0, 26], "list": [0, 1, 6, 7, 12, 13, 19, 20, 21, 22, 26, 60, 65, 66, 67, 69, 70, 71, 74, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 148, 150, 153, 154, 155, 157, 163, 167, 169, 182, 186, 187, 194, 210, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 363, 364, 365, 371, 372, 373, 375, 376, 377, 386, 389, 390, 392, 399, 408, 409, 410, 412, 413, 414, 415, 426, 427, 428, 429, 433, 435, 439, 444, 448, 451, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 482, 483, 484, 493, 499, 505, 507, 508, 509, 511, 514, 516, 518, 519, 520, 522, 524, 529, 537, 538, 539, 540, 549, 551, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 569, 571, 573, 575, 576, 577, 579, 580, 583, 587, 591, 592, 606, 607, 608, 610, 612, 613, 614, 615, 616, 628, 629, 634, 640, 645, 646, 647, 648, 650, 652, 653, 655, 657, 658, 661, 662, 666, 667, 668, 669, 670, 671, 674, 675, 676, 679, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 705, 707, 712, 713, 714, 718, 719, 722, 725, 726, 727, 728, 729, 732, 733, 737, 738, 739, 740, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 773, 774, 776, 777, 780, 782, 783, 785, 786, 787, 790, 792, 795, 796, 797, 798, 803, 808, 811, 817, 825, 826, 830, 835, 837, 838, 839, 841, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 869, 871, 879, 883, 884], "tupl": [0, 26, 62, 65, 66, 67, 69, 70, 71, 74, 75, 77, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 113, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 140, 141, 148, 150, 154, 155, 157, 161, 163, 167, 168, 169, 180, 181, 182, 186, 187, 193, 194, 200, 210, 213, 214, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 330, 335, 339, 342, 348, 349, 350, 351, 352, 354, 355, 356, 359, 360, 362, 363, 364, 365, 369, 370, 371, 372, 373, 375, 376, 377, 378, 383, 386, 388, 389, 390, 392, 395, 396, 397, 399, 401, 408, 409, 410, 412, 413, 414, 415, 417, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 443, 444, 448, 452, 454, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 482, 483, 493, 498, 499, 505, 507, 508, 509, 511, 513, 516, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 537, 538, 539, 540, 542, 543, 544, 545, 546, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 596, 606, 607, 608, 609, 610, 612, 613, 614, 615, 628, 629, 630, 631, 632, 634, 636, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 683, 684, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 705, 706, 707, 710, 712, 713, 714, 718, 719, 720, 722, 723, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 744, 745, 746, 748, 749, 752, 753, 754, 755, 757, 758, 759, 760, 762, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 810, 811, 813, 825, 826, 844, 849, 856, 857, 860, 862, 864, 869, 871, 878, 879, 881], "thei": [0, 1, 26, 51, 56, 61, 70, 75, 79, 81, 87, 98, 102, 104, 192, 306, 360, 386, 646, 648, 652, 653, 656, 659, 661, 677, 708, 734, 735, 757, 768, 790, 816, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 860, 861, 864, 865, 867, 869, 870, 871, 876, 879, 883], "dimension": [0, 66, 69, 70, 75, 77, 80, 83, 84, 87, 89, 92, 93, 98, 100, 106, 107, 115, 139, 146, 148, 153, 161, 306, 342, 349, 350, 383, 386, 389, 390, 392, 401, 417, 418, 422, 423, 433, 434, 441, 476, 477, 478, 482, 487, 488, 535, 547, 645, 648, 653, 655, 660, 663, 664, 684, 685, 691, 693, 696, 698, 699, 709, 710, 727, 763, 764, 766, 779, 780, 781, 782, 783, 784, 785, 786, 787, 857, 859, 864, 867, 869, 883], "reshap": [0, 4, 5, 44, 45, 60, 61, 70, 74, 75, 77, 87, 93, 97, 98, 100, 374, 386, 389, 390, 392, 408, 409, 410, 413, 426, 427, 428, 431, 440, 457, 482, 488, 629, 650, 652, 653, 655, 668, 670, 674, 694, 710, 860, 861, 864, 867, 869], "float32": [0, 4, 5, 12, 13, 21, 22, 26, 27, 29, 34, 35, 56, 58, 59, 60, 66, 67, 70, 71, 74, 89, 90, 93, 94, 97, 106, 152, 155, 157, 163, 164, 165, 169, 173, 174, 177, 178, 179, 180, 183, 186, 187, 189, 194, 197, 203, 253, 267, 294, 347, 360, 383, 386, 389, 390, 391, 401, 411, 421, 434, 460, 466, 471, 540, 577, 614, 645, 646, 648, 650, 652, 653, 656, 668, 670, 671, 674, 701, 703, 704, 710, 735, 736, 792, 795, 796, 832, 849, 851, 862, 864, 865, 878, 881], "def": [0, 4, 5, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 69, 92, 135, 238, 554, 644, 650, 656, 657, 735, 736, 743, 825, 832, 836, 838, 839, 843, 844, 847, 849, 850, 851, 853, 854, 856, 857, 859, 860, 861, 862, 864, 865, 867, 869, 870, 878, 879, 881], "isinst": [0, 12, 13, 26, 40, 44, 45, 853, 861, 864, 865, 869], "rang": [0, 4, 5, 8, 9, 10, 11, 15, 16, 17, 23, 26, 44, 45, 56, 57, 58, 60, 66, 70, 83, 89, 93, 139, 151, 152, 301, 313, 321, 333, 381, 383, 390, 392, 401, 444, 456, 491, 500, 502, 507, 512, 538, 539, 540, 560, 629, 645, 648, 650, 661, 663, 768, 776, 777, 782, 784, 795, 797, 798, 810, 832, 835, 838, 849, 853, 857, 864, 869, 883], "len": [0, 8, 9, 10, 11, 12, 13, 23, 26, 58, 60, 66, 70, 75, 93, 98, 153, 330, 339, 340, 383, 389, 390, 401, 423, 434, 446, 449, 459, 465, 547, 645, 653, 689, 708, 847, 848, 853, 860, 861, 864, 869, 879], "expand_dim": [0, 8, 9, 26, 39, 44, 45, 60, 62, 77, 100, 652, 655, 674, 832, 861, 869, 878], "astyp": [0, 26, 27, 29, 34, 58, 59, 60, 67, 74, 90, 97, 646, 652, 668, 670, 671, 674, 832, 849, 860, 861, 867, 881], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 23, 26, 59, 60, 62, 63, 70, 71, 79, 92, 93, 102, 172, 173, 174, 175, 176, 188, 294, 298, 389, 390, 396, 435, 448, 459, 463, 465, 524, 559, 563, 646, 648, 650, 652, 657, 659, 678, 747, 750, 758, 759, 760, 790, 825, 826, 838, 839, 840, 843, 845, 849, 850, 853, 857, 860, 861, 862, 864, 865, 867, 869, 871, 884], "return": [0, 4, 5, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 200, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 802, 803, 808, 810, 811, 813, 815, 820, 821, 825, 826, 827, 828, 829, 830, 832, 839, 840, 844, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 878, 879, 880, 881, 884], "defin": [0, 34, 40, 43, 44, 45, 46, 66, 70, 71, 75, 89, 93, 94, 98, 113, 129, 155, 159, 160, 161, 237, 254, 261, 287, 288, 296, 298, 301, 314, 318, 322, 328, 331, 332, 333, 342, 343, 344, 345, 346, 349, 350, 352, 381, 383, 386, 389, 390, 392, 401, 425, 442, 498, 505, 540, 575, 576, 596, 642, 645, 648, 650, 652, 653, 663, 677, 684, 689, 690, 702, 779, 780, 781, 783, 838, 839, 844, 845, 848, 849, 852, 856, 859, 861, 862, 864, 865, 871, 873, 881, 883, 884, 885], "proper": [0, 832, 838, 861, 878], "adjust": [0, 58, 83, 106, 390, 461, 663, 783, 785, 820, 830], "comput": [0, 8, 9, 23, 39, 40, 42, 44, 45, 51, 52, 57, 58, 60, 64, 69, 70, 71, 72, 74, 75, 76, 81, 83, 86, 87, 92, 93, 94, 95, 97, 98, 99, 106, 110, 111, 113, 126, 130, 227, 237, 244, 247, 249, 254, 255, 256, 261, 262, 263, 265, 266, 272, 273, 274, 281, 282, 283, 284, 286, 287, 290, 295, 296, 314, 318, 322, 328, 331, 332, 344, 345, 346, 349, 350, 352, 356, 358, 361, 363, 364, 368, 370, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 399, 401, 408, 409, 410, 411, 412, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 437, 438, 440, 442, 443, 444, 445, 447, 448, 450, 452, 455, 457, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 492, 495, 509, 516, 518, 529, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 555, 556, 600, 623, 630, 632, 633, 635, 639, 640, 641, 647, 648, 650, 651, 652, 653, 654, 655, 657, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 683, 684, 688, 689, 690, 693, 694, 696, 698, 700, 702, 703, 705, 707, 709, 710, 712, 713, 714, 716, 717, 721, 743, 768, 769, 770, 771, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 792, 797, 811, 814, 826, 832, 839, 847, 848, 849, 857, 859, 861, 864, 866, 867, 869, 870, 871, 873, 875, 876, 878, 879, 882, 883, 884], "most": [0, 5, 8, 9, 14, 26, 33, 44, 45, 87, 89, 110, 113, 155, 390, 443, 600, 623, 645, 650, 653, 688, 689, 829, 832, 837, 838, 839, 844, 847, 848, 849, 850, 854, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 870, 871, 883, 884], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 21, 22, 23, 37, 40, 44, 45, 60, 71, 94, 210, 216, 218, 219, 230, 561, 647, 650, 653, 704, 796, 830, 832, 839, 840, 847, 848, 849, 850, 852, 853, 861, 864, 867, 870, 871, 872, 876, 878, 879, 881], "cpu": [0, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 37, 39, 40, 44, 58, 59, 60, 62, 63, 66, 68, 70, 79, 89, 91, 93, 102, 139, 146, 149, 151, 152, 155, 156, 157, 163, 207, 208, 210, 211, 212, 213, 218, 221, 223, 225, 228, 229, 231, 233, 390, 396, 452, 523, 524, 526, 527, 645, 647, 659, 757, 758, 759, 760, 792, 810, 811, 812, 813, 814, 815, 816, 830, 836, 839, 840, 846, 849, 850, 854, 861, 864, 871, 883], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 58, 60, 62, 63, 210, 212, 213, 216, 219, 221, 223, 225, 226, 229, 231, 233, 647, 830, 839, 840, 848, 850, 872, 883], "tpu": [0, 58, 208, 214, 223, 225, 230, 647, 830, 850, 883], "explicitli": [0, 653, 689, 690, 705, 792, 811, 812, 813, 836, 843, 844, 845, 847, 849, 852, 853, 854, 857, 858, 859, 860, 862, 864, 869, 871, 878, 883], "hardwar": [0, 4, 5, 58, 115, 119, 839, 867, 872, 883, 884, 885], "mai": [0, 1, 8, 9, 68, 69, 70, 75, 81, 82, 91, 92, 98, 105, 115, 116, 139, 147, 158, 228, 254, 255, 261, 266, 274, 282, 283, 287, 288, 290, 305, 349, 350, 386, 418, 559, 595, 645, 647, 648, 650, 653, 661, 662, 663, 701, 710, 768, 769, 770, 771, 772, 775, 779, 780, 781, 783, 795, 826, 837, 838, 839, 840, 843, 847, 848, 849, 853, 854, 857, 858, 859, 861, 862, 864, 867, 885], "vari": [0, 70, 81, 110, 111, 305, 392, 418, 499, 560, 648, 650, 653, 661, 700, 769, 770, 771, 826, 847, 851, 861, 864], "known": [0, 70, 93, 298, 390, 462, 464, 648, 810, 843, 848, 849, 861, 864, 876], "advanc": [0, 31, 56, 839, 841, 876, 885], "set_soft_device_mod": [0, 4, 5, 26, 29, 232, 647, 850], "section": [0, 1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 64, 70, 81, 93, 125, 389, 392, 423, 434, 484, 493, 514, 661, 768, 769, 770, 771, 832, 833, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 881, 882], "binari": [0, 8, 9, 26, 37, 40, 70, 71, 74, 76, 93, 97, 99, 244, 247, 249, 284, 304, 389, 391, 435, 470, 473, 648, 652, 654, 675, 679, 712], "logist": [0, 26], "gblinear": [0, 26], "booster": [0, 26], "linear": [0, 4, 5, 21, 22, 23, 29, 41, 43, 44, 45, 56, 57, 58, 60, 63, 70, 71, 74, 86, 93, 94, 97, 123, 125, 127, 128, 131, 309, 313, 317, 319, 320, 321, 325, 367, 381, 386, 389, 392, 401, 425, 460, 498, 547, 564, 587, 642, 650, 652, 657, 679, 702, 744, 795, 797, 798, 810, 811, 832, 847, 852, 857, 858, 860, 861, 864, 867, 870, 878, 883, 885], "estim": [0, 70, 93, 363, 386, 401, 537, 830], "rate": [0, 70, 72, 93, 95, 389, 396, 431, 527, 631, 634, 636, 637, 638, 651, 652, 656, 677, 734, 735, 736, 815, 848], "fine": [0, 27, 29, 44, 45, 839, 840, 849, 851, 861], "tune": [0, 27, 29, 44, 45], "regular": [0, 59, 93, 390, 401, 452, 457, 541, 839, 861, 883], "term": [0, 8, 9, 23, 70, 93, 326, 333, 336, 383, 391, 470, 471, 652, 677, 678, 811, 826, 832, 840, 847, 869, 873, 883], "reg_lambda": [0, 26], "reg_alpha": [0, 26], "overfit": [0, 652, 675], "compil": [0, 8, 9, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 37, 40, 44, 45, 48, 61, 63, 305, 648, 803, 839, 861, 865, 870, 871, 873, 875, 878, 883, 884, 885], "param": [0, 19, 20, 24, 25, 26, 44, 58, 59, 60, 62, 87, 93, 94, 116, 550, 567, 568, 650, 817, 832, 878], "n_estim": [0, 26], "100": [0, 5, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 24, 25, 26, 56, 58, 60, 66, 69, 70, 89, 92, 93, 94, 97, 114, 152, 161, 248, 288, 301, 342, 365, 374, 383, 386, 389, 390, 392, 413, 414, 459, 465, 504, 568, 576, 592, 645, 648, 650, 653, 657, 692, 743, 848, 849, 864, 871, 879], "learning_r": [0, 10, 11, 23, 26], "base_margin": [0, 26], "none": [0, 4, 5, 8, 9, 12, 13, 19, 20, 23, 24, 25, 26, 44, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 114, 115, 116, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 186, 187, 189, 191, 194, 206, 209, 210, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 389, 390, 391, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 583, 588, 591, 592, 593, 594, 595, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 640, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 748, 749, 750, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 797, 798, 803, 807, 808, 810, 811, 812, 813, 814, 815, 816, 819, 820, 824, 826, 830, 832, 836, 839, 843, 844, 845, 847, 848, 849, 850, 851, 853, 854, 856, 857, 860, 861, 862, 864, 865, 867, 869, 870, 878, 879, 881], "xgb_cl": [0, 26], "better": [0, 19, 20, 26, 47, 56, 62, 63, 838, 842, 861, 862, 865, 867, 868], "ivy_cl": [0, 26], "effici": [0, 12, 13, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 44, 45, 46, 47, 70, 75, 93, 98, 390, 391, 454, 470, 600, 623, 650, 653, 696, 832, 839, 840, 847, 857, 858, 860, 864, 866, 870, 871, 875, 876, 878, 883, 885], "fit": [0, 26, 77, 100, 655, 724, 838, 861, 869, 883], "magic": [0, 848], "durat": 0, "70": [0, 26, 56, 58, 70, 93, 94, 389, 411, 421, 568, 592, 653, 663, 698, 778], "m": [0, 5, 19, 20, 21, 22, 23, 24, 25, 26, 44, 57, 59, 61, 63, 66, 70, 75, 79, 92, 93, 98, 102, 115, 153, 159, 160, 161, 281, 342, 343, 383, 389, 390, 391, 392, 396, 412, 443, 448, 449, 451, 452, 467, 478, 489, 490, 505, 523, 524, 525, 526, 527, 645, 653, 657, 659, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 745, 758, 759, 760, 832, 839, 840, 842, 848, 870], "per": [0, 19, 20, 24, 25, 26, 35, 58, 60, 70, 74, 93, 97, 333, 383, 389, 390, 392, 408, 409, 410, 426, 427, 428, 429, 458, 506, 652, 666, 668, 669, 670, 671, 674, 679, 811, 840, 848, 858, 861], "loop": [0, 8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 35, 52, 85, 93, 108, 135, 138, 389, 435, 644, 656, 734, 735, 736, 845, 871, 879], "dev": [0, 4, 5, 19, 20, 21, 22, 24, 25, 26, 35, 58, 60, 63, 68, 87, 91, 215, 222, 647, 832, 839, 850, 854, 857, 872], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 58, 60, 61, 62, 70, 72, 93, 95, 395, 516, 518, 630, 631, 636, 651, 652, 656, 677, 734, 735, 736, 792, 793, 811, 812, 813, 814, 825, 832, 834, 838, 839, 842, 844, 845, 848, 850, 851, 853, 855, 856, 858, 861, 862, 869, 870, 871, 872, 878, 879, 881, 883, 884], "59": [0, 10, 11, 56, 69, 249, 401, 538], "04": [0, 8, 9, 23, 58, 59, 66, 72, 86, 90, 93, 95, 125, 126, 152, 179, 259, 597, 630, 631, 636, 642, 645, 646, 648, 650, 651, 795, 839, 864], "slowest": [0, 47, 70, 77, 93, 100, 392, 488, 655, 725], "took": [0, 19, 20, 92, 294], "87": [0, 26, 56, 95, 97, 248, 277, 401, 432, 538, 630, 648, 651, 795, 854], "longer": [0, 26, 839, 849, 860, 864, 876, 883], "than": [0, 10, 11, 15, 16, 17, 26, 42, 44, 45, 47, 50, 69, 70, 71, 74, 75, 77, 79, 80, 81, 83, 87, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 115, 116, 139, 148, 179, 227, 235, 236, 239, 240, 242, 243, 246, 248, 250, 254, 260, 261, 275, 276, 277, 278, 285, 287, 292, 296, 298, 300, 301, 305, 306, 307, 316, 326, 348, 351, 365, 372, 383, 386, 389, 390, 391, 392, 401, 411, 412, 417, 418, 421, 422, 423, 433, 434, 438, 440, 459, 465, 466, 489, 490, 538, 539, 540, 579, 580, 583, 600, 623, 645, 646, 647, 648, 650, 652, 653, 655, 659, 660, 661, 663, 677, 682, 684, 693, 694, 695, 696, 699, 710, 718, 722, 728, 760, 766, 769, 770, 771, 776, 777, 782, 783, 784, 785, 811, 826, 836, 838, 840, 843, 847, 848, 849, 851, 853, 854, 860, 861, 862, 864, 865, 866, 867, 869, 871, 872, 883, 885], "fastest": [0, 47, 70, 77, 93, 100, 390, 392, 457, 488, 655, 725], "could": [0, 8, 9, 24, 25, 44, 45, 50, 81, 661, 768, 769, 770, 771, 838, 839, 840, 843, 848, 849, 851, 858, 860, 861, 862, 864, 869, 883], "intermedi": [0, 57, 883, 884, 885], "cach": [0, 5, 10, 11, 14, 21, 22, 24, 25, 37, 39, 40, 58, 60, 63, 209, 554, 647, 650, 800, 820, 855, 857, 860, 864], "400": [0, 26, 94, 97, 389, 413, 414, 568, 592, 650, 653, 692], "\u00b5": [0, 19, 20, 24, 25, 26, 35], "487": [0, 293, 648, 652, 676], "make": [0, 1, 4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 34, 44, 45, 46, 58, 62, 70, 93, 389, 433, 820, 832, 835, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 875, 878, 883, 884], "out": [0, 4, 5, 8, 9, 12, 13, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 56, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 168, 177, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 431, 433, 434, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 460, 464, 467, 468, 469, 470, 472, 473, 479, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 555, 556, 560, 561, 562, 564, 567, 568, 577, 587, 591, 592, 630, 631, 634, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 859, 861, 862, 863, 864, 865, 867, 869, 870, 872, 875, 876, 878, 879, 883], "respect": [0, 66, 69, 70, 72, 75, 92, 93, 95, 98, 110, 153, 234, 237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 265, 266, 273, 274, 279, 281, 283, 284, 287, 290, 296, 300, 303, 304, 314, 363, 378, 381, 386, 388, 390, 392, 395, 446, 463, 475, 516, 518, 572, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 645, 648, 650, 651, 652, 653, 656, 665, 672, 673, 679, 684, 700, 703, 734, 735, 736, 792, 795, 810, 826, 837, 838, 839, 840, 844, 845, 847, 848, 849, 850, 851, 856, 857, 859, 860, 861, 864, 865, 866], "kei": [0, 8, 9, 10, 11, 14, 19, 20, 23, 35, 36, 44, 45, 60, 62, 65, 70, 74, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 182, 186, 187, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 399, 413, 414, 415, 433, 466, 467, 468, 469, 470, 471, 472, 473, 482, 483, 505, 507, 509, 511, 516, 518, 519, 520, 522, 524, 530, 537, 538, 539, 540, 549, 550, 552, 553, 555, 556, 557, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 650, 652, 656, 657, 666, 667, 668, 669, 675, 676, 679, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 734, 735, 740, 746, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 795, 796, 802, 808, 811, 815, 832, 835, 846, 847, 848, 857, 860, 861, 862, 864, 878, 883], "precis": [0, 26, 70, 75, 93, 98, 179, 267, 287, 294, 301, 360, 386, 390, 401, 444, 537, 600, 623, 646, 648, 650, 653, 689, 690, 694, 701, 703, 704, 710, 803, 848, 861, 866, 867], "recal": [0, 26], "f1": [0, 26, 849], "score": [0, 26, 74, 97, 391, 473, 652, 680, 682, 832], "ivy_pr": [0, 26], "xgb_pred": [0, 26], "nxgbclassifi": [0, 26], "86": [0, 23, 26, 56, 79, 93, 102, 389, 401, 421, 538, 630, 651, 759, 760], "93": [0, 26, 56, 70, 92, 94, 102, 212, 301, 374, 386, 560, 561, 647, 650, 759, 760], "84": [0, 23, 56, 74, 83, 92, 102, 182, 212, 277, 646, 647, 653, 658, 663, 676, 698, 756, 759, 760, 778], "91": [0, 23, 56, 70, 97, 102, 374, 386, 432, 652, 653, 659, 663, 676, 698, 759, 778], "accuraci": [0, 8, 9, 26, 58, 60, 63, 389, 433, 849], "92": [0, 26, 56, 60, 70, 71, 102, 374, 386, 628, 638, 651, 653, 685, 759, 760], "macro": [0, 26], "avg": [0, 26, 389, 408, 410, 431], "weight": [0, 4, 5, 8, 9, 23, 26, 27, 29, 44, 45, 58, 59, 70, 72, 74, 76, 93, 95, 97, 99, 110, 111, 329, 333, 367, 383, 386, 389, 390, 401, 416, 449, 535, 537, 540, 630, 631, 634, 636, 637, 638, 651, 652, 654, 656, 676, 677, 678, 679, 682, 712, 736, 797, 810, 811, 813, 815, 830, 832, 847, 857, 864, 869, 885], "90": [0, 26, 56, 58, 60, 69, 70, 92, 93, 253, 293, 297, 374, 386, 392, 401, 505, 538, 648, 653, 663, 698, 778, 826], "summar": [0, 44, 45, 110, 864], "perfect": [0, 832], "fals": [0, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 33, 34, 44, 47, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 210, 211, 216, 218, 221, 222, 224, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 383, 386, 387, 389, 390, 391, 392, 395, 401, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 529, 530, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 570, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 587, 591, 592, 593, 596, 599, 600, 602, 603, 605, 606, 607, 608, 610, 612, 614, 615, 617, 622, 623, 625, 626, 628, 631, 632, 634, 638, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 743, 747, 748, 749, 750, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 793, 795, 796, 797, 798, 803, 807, 808, 811, 812, 813, 815, 817, 820, 823, 825, 826, 827, 830, 832, 836, 839, 843, 845, 848, 849, 850, 851, 853, 854, 860, 861, 862, 864, 866, 867, 869, 878, 879, 880], "posit": [0, 60, 62, 65, 69, 70, 71, 75, 76, 77, 92, 93, 94, 98, 99, 100, 110, 146, 148, 161, 179, 234, 235, 236, 240, 243, 254, 261, 268, 269, 275, 277, 287, 288, 295, 296, 300, 301, 305, 327, 342, 348, 353, 365, 383, 386, 390, 392, 441, 461, 472, 497, 507, 554, 564, 629, 643, 645, 646, 648, 650, 653, 654, 655, 659, 660, 664, 683, 686, 707, 712, 721, 726, 761, 766, 786, 787, 792, 795, 803, 808, 812, 813, 826, 838, 840, 843, 847, 861, 864, 865, 879], "excel": [0, 8, 9], "high": [0, 8, 9, 33, 44, 45, 63, 70, 74, 79, 93, 97, 102, 389, 432, 436, 600, 650, 652, 659, 665, 666, 667, 668, 670, 672, 674, 758, 760, 797, 835, 838, 853, 859, 861, 873, 876, 883, 885], "show": [0, 4, 5, 6, 7, 8, 9, 10, 11, 21, 22, 37, 44, 45, 46, 47, 49, 56, 58, 60, 61, 594, 603, 626, 650, 832, 838, 839, 840, 846, 848, 851, 855, 860, 861, 864, 866, 871, 879, 883], "trade": [0, 879], "off": [0, 23, 35, 47, 74, 75, 97, 98, 413, 414, 415, 652, 653, 675, 687, 707, 810, 811, 839, 854, 879], "wa": [0, 15, 16, 23, 44, 45, 50, 59, 70, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 113, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 372, 373, 375, 376, 377, 383, 386, 390, 413, 414, 415, 433, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 505, 507, 508, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 616, 628, 634, 640, 648, 650, 657, 663, 664, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 820, 832, 834, 840, 843, 845, 846, 848, 851, 857, 859, 861, 869, 876, 878, 879, 883], "overal": [0, 652, 675, 826, 847, 849, 850, 852, 879, 883], "slightli": [0, 26, 326, 383, 847, 861, 864, 869, 870], "lower": [0, 26, 60, 66, 69, 70, 75, 79, 92, 93, 98, 102, 146, 159, 285, 321, 327, 333, 342, 343, 381, 383, 401, 540, 541, 547, 645, 648, 653, 659, 683, 689, 690, 696, 760, 797, 810, 840, 849, 851, 861, 864, 869, 870, 871, 873, 883, 884], "good": [0, 33, 44, 45, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 862, 864, 865, 867, 869], "due": [0, 35, 44, 45, 47, 61, 63, 287, 297, 392, 507, 648, 839, 843, 848, 853, 860, 861, 878, 879, 883], "97": [0, 21, 22, 26, 56, 70, 72, 92, 95, 102, 240, 374, 386, 634, 648, 651, 759], "suggest": [0, 1, 8, 9, 23, 838, 839, 840, 846, 849, 855, 859, 861, 864, 865, 866], "slight": [0, 44, 45, 849, 864], "edg": [0, 62, 70, 77, 93, 100, 333, 383, 389, 392, 401, 425, 498, 540, 655, 718, 720, 733, 798, 843, 864, 875, 878, 883], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 19, 20, 23, 44, 45, 48, 49, 50, 51, 390, 450, 832, 840, 847, 849, 853, 857, 864, 868, 871, 873, 878], "design": [0, 1, 8, 9, 26, 33, 44, 93, 261, 326, 331, 332, 383, 648, 832, 835, 842, 846, 848, 849, 860, 861, 862, 863, 867, 871, 883], "heatmap": 0, "seaborn": [0, 60], "aesthet": 0, "appeal": 0, "eas": [0, 859, 876, 883], "plot_classification_report": 0, "argument": [0, 8, 9, 15, 16, 23, 37, 39, 40, 44, 45, 47, 49, 50, 51, 56, 58, 60, 62, 65, 66, 69, 70, 71, 75, 87, 88, 92, 93, 94, 110, 111, 116, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 194, 223, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 342, 343, 349, 350, 352, 355, 357, 358, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 426, 427, 428, 433, 435, 437, 444, 498, 507, 511, 537, 540, 544, 550, 551, 553, 554, 559, 561, 562, 567, 571, 573, 575, 577, 587, 591, 592, 606, 610, 615, 616, 629, 640, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 677, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 743, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 803, 808, 811, 812, 813, 820, 825, 828, 832, 838, 842, 843, 844, 845, 846, 847, 851, 852, 855, 857, 862, 864, 865, 867, 869, 870, 873, 878, 879, 881, 883], "plot": [0, 8, 9, 10, 11, 23, 26, 59, 883], "color": [0, 14, 42, 59, 87, 116, 831, 832], "represent": [0, 62, 70, 71, 87, 93, 94, 116, 164, 165, 179, 182, 207, 208, 234, 237, 244, 247, 249, 254, 261, 284, 287, 289, 304, 330, 362, 366, 371, 375, 383, 386, 550, 612, 643, 646, 647, 648, 650, 795, 797, 798, 811, 849, 884, 885], "easi": [0, 1, 44, 45, 58, 839, 840, 844, 845, 847, 857, 859, 862, 864, 867, 883], "assess": [0, 35, 47, 838, 867], "side": [0, 82, 105, 364, 386, 390, 460, 662, 774, 795, 811, 825, 826, 839, 840, 846], "pyplot": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 63], "plt": [0, 8, 9, 10, 11, 23, 26, 58, 59, 60, 63], "sn": 0, "model_nam": [0, 8, 9, 60], "ax": [0, 23, 59, 64, 70, 75, 77, 80, 83, 84, 86, 93, 98, 100, 103, 106, 107, 115, 119, 126, 130, 227, 349, 350, 354, 355, 370, 377, 386, 387, 389, 390, 392, 395, 401, 418, 423, 434, 460, 497, 498, 505, 519, 542, 543, 544, 545, 546, 547, 560, 629, 647, 650, 653, 655, 660, 663, 664, 684, 694, 702, 705, 706, 710, 720, 722, 723, 726, 728, 730, 733, 763, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 797, 811, 849, 851, 864, 865, 869], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 45, 50, 56, 58, 59, 60, 70, 74, 85, 93, 97, 108, 110, 111, 115, 363, 378, 386, 388, 390, 444, 577, 595, 610, 632, 650, 651, 652, 657, 676, 678, 745, 790, 811, 832, 834, 835, 838, 839, 840, 842, 844, 845, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 860, 864, 865, 867, 869, 871, 872, 879, 881, 883], "annot": [0, 856], "fmt": 0, "2f": [0, 6, 7, 19, 20, 23], "cmap": 0, "blue": 0, "set_titl": [0, 23, 59, 60], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 21, 22, 23, 44, 45, 57, 58, 60, 70, 77, 93, 100, 316, 333, 381, 383, 392, 488, 510, 655, 657, 725, 740, 744, 745, 746, 749, 754, 755, 833, 840, 842, 847, 848, 853, 865, 869, 870], "figur": [0, 23, 59, 866], "fig": [0, 23, 59, 60], "ax1": [0, 60], "ax2": [0, 60], "subplot": [0, 23, 59, 60], "figsiz": [0, 59, 60], "tight_layout": [0, 60], "observ": [0, 26, 70, 93, 401, 536, 537, 840, 849, 853, 870, 879], "exhibit": [0, 47], "strong": [0, 797, 871, 883], "commend": 0, "impli": [0, 81, 661, 768, 769, 770, 771, 864], "neg": [0, 64, 69, 70, 75, 77, 79, 84, 86, 92, 93, 98, 100, 102, 107, 110, 125, 128, 131, 139, 146, 148, 161, 254, 261, 268, 269, 287, 288, 296, 301, 309, 327, 342, 345, 381, 383, 390, 391, 392, 396, 441, 448, 454, 471, 507, 511, 527, 642, 645, 648, 653, 655, 659, 664, 684, 686, 703, 707, 709, 710, 719, 721, 722, 726, 759, 786, 787, 795, 797, 807, 847, 860], "depend": [0, 5, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 66, 67, 70, 71, 75, 81, 82, 90, 93, 98, 105, 106, 136, 143, 166, 234, 235, 236, 239, 240, 241, 242, 251, 252, 254, 257, 259, 275, 276, 277, 278, 287, 289, 292, 299, 300, 304, 305, 373, 386, 389, 390, 435, 443, 461, 610, 644, 645, 646, 648, 650, 652, 653, 660, 662, 677, 688, 689, 700, 701, 702, 703, 767, 772, 775, 785, 834, 836, 838, 839, 840, 846, 849, 850, 852, 854, 858, 860, 861, 862, 863, 864, 867, 869, 870, 871, 872, 879, 883, 884], "applic": [0, 8, 9, 29, 31, 58, 60, 63, 70, 74, 93, 97, 113, 390, 465, 652, 653, 657, 663, 679, 682, 707, 743, 744, 745, 749, 750, 782, 784, 832, 839, 848, 849, 850, 858, 876, 883], "conclus": 0, "appear": [0, 392, 489, 490, 629, 650, 839, 840, 843, 861, 867, 879], "outperform": [0, 26], "especi": [0, 10, 11, 839, 845, 855, 883], "increas": [0, 19, 20, 24, 25, 26, 35, 44, 47, 70, 75, 77, 93, 98, 100, 113, 392, 401, 498, 540, 653, 655, 708, 720, 733, 797, 849, 853, 861, 865, 867, 879, 883], "context": [0, 339, 383, 588, 650, 838, 839, 840, 845, 849, 850, 851], "specif": [0, 8, 9, 10, 11, 23, 33, 34, 39, 40, 43, 44, 45, 46, 48, 50, 58, 68, 70, 71, 91, 93, 94, 194, 225, 228, 261, 282, 283, 292, 336, 349, 350, 383, 386, 392, 396, 507, 527, 560, 561, 562, 588, 646, 647, 648, 650, 653, 655, 656, 659, 662, 663, 689, 690, 705, 729, 734, 735, 736, 757, 774, 779, 780, 781, 783, 790, 792, 812, 813, 820, 821, 828, 830, 832, 835, 836, 838, 839, 840, 843, 844, 845, 846, 847, 849, 850, 853, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 873, 878, 879, 881, 884, 885], "problem": [0, 10, 11, 23, 832, 835, 838, 840, 843, 844, 850, 861, 875], "domain": [0, 235, 236, 239, 240, 241, 242, 251, 252, 257, 259, 275, 276, 278, 299, 300, 301, 304, 305, 373, 386, 648, 852, 883], "repo": [1, 27, 58, 837, 840, 843, 846, 848, 849, 854, 862, 864], "hold": [1, 70, 71, 75, 83, 93, 98, 106, 110, 111, 348, 365, 370, 386, 401, 484, 514, 538, 539, 544, 591, 592, 650, 653, 663, 694, 777, 793, 841, 884], "exampl": [1, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 33, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 344, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 408, 409, 410, 411, 413, 414, 416, 417, 418, 421, 422, 423, 426, 427, 428, 431, 432, 433, 434, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 455, 457, 460, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 519, 520, 522, 525, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 803, 820, 825, 826, 830, 832, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 857, 858, 860, 861, 865, 869, 870, 871, 876, 884], "tab": [1, 838, 839, 848, 854], "ivi": [1, 2, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 842, 843, 845, 847, 849, 850, 852, 854, 855, 856, 857, 858, 860, 867, 868, 871, 873, 875, 876, 877, 882], "web": 1, "relev": [1, 66, 89, 152, 645, 815, 838, 839, 840, 844, 847, 848, 849, 851, 854, 858, 859, 862, 863, 864, 872], "link": [1, 33, 44, 45, 59, 838, 839, 840, 846, 848, 849, 855, 861, 878], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 59, 60, 61, 71, 79, 102, 139, 645, 659, 758, 760, 832, 833, 834, 835, 839, 840, 841, 846, 849, 852, 854, 861, 862, 867, 878, 879, 883, 885], "avil": 1, "discuss": [1, 838, 840, 846, 849, 850, 860, 861, 863, 864, 867, 871, 884], "comprehens": [1, 31, 840, 843, 863, 885], "possibl": [1, 4, 5, 50, 66, 70, 89, 93, 100, 110, 141, 261, 304, 326, 349, 350, 383, 386, 389, 391, 392, 412, 467, 476, 477, 478, 484, 486, 488, 489, 490, 497, 514, 587, 648, 650, 652, 663, 675, 721, 722, 723, 725, 727, 728, 730, 732, 779, 781, 795, 811, 823, 826, 829, 833, 836, 838, 839, 840, 843, 846, 847, 849, 851, 852, 854, 855, 857, 859, 860, 861, 862, 864, 867, 869, 871, 883], "us": [1, 2, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 58, 59, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 106, 108, 110, 111, 113, 116, 123, 152, 155, 166, 178, 180, 181, 192, 193, 213, 214, 216, 221, 225, 226, 227, 228, 230, 233, 239, 247, 275, 276, 278, 279, 281, 282, 283, 285, 286, 288, 297, 301, 306, 326, 328, 329, 331, 332, 333, 341, 363, 366, 367, 370, 383, 386, 389, 390, 391, 392, 395, 396, 397, 399, 401, 408, 409, 410, 412, 413, 414, 415, 416, 418, 423, 425, 426, 427, 428, 431, 433, 434, 435, 437, 442, 444, 448, 454, 456, 458, 459, 461, 462, 463, 465, 466, 471, 488, 492, 496, 498, 499, 507, 511, 516, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 544, 547, 565, 566, 575, 576, 587, 588, 595, 597, 598, 600, 607, 608, 620, 621, 623, 630, 631, 636, 637, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 661, 663, 676, 677, 679, 682, 687, 689, 696, 700, 704, 707, 710, 712, 724, 725, 726, 730, 734, 735, 736, 737, 739, 740, 746, 747, 748, 750, 757, 758, 759, 760, 762, 763, 764, 765, 768, 770, 778, 780, 793, 795, 796, 797, 798, 803, 807, 808, 810, 811, 812, 813, 814, 815, 820, 825, 826, 830, 833, 835, 837, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 880, 881, 883, 884, 885], "attract": 1, "visual": [1, 8, 9, 10, 11, 26, 62, 830, 839, 854, 861, 864, 871, 883], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 31, 32, 35, 37, 39, 40, 45, 51, 52, 57, 62, 63, 81, 661, 768, 769, 770, 771, 803, 832, 847, 857, 861, 863, 867, 871, 873, 875, 877, 879, 881, 882, 883], "nice": [1, 864, 883], "etc": [1, 47, 52, 59, 66, 70, 79, 81, 85, 89, 93, 102, 108, 143, 151, 152, 155, 389, 396, 418, 423, 434, 523, 524, 526, 527, 645, 659, 661, 757, 758, 759, 760, 768, 769, 770, 771, 795, 798, 810, 811, 812, 813, 814, 815, 816, 832, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 851, 853, 856, 861, 862, 864, 865, 870, 871, 872, 873, 879, 883], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 23, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 875, 876, 879], "free": [1, 8, 9, 10, 11, 12, 13, 23, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 875, 876, 879, 884], "emoji": [1, 838], "don": [1, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 44, 45, 58, 60, 85, 108, 832, 838, 839, 840, 848, 849, 850, 855, 859, 864, 867, 871, 879], "keep": [1, 2, 27, 29, 33, 39, 40, 44, 70, 77, 87, 93, 100, 110, 113, 374, 390, 465, 655, 732, 837, 838, 839, 840, 843, 846, 847, 848, 853, 860, 861, 864, 865, 867, 870, 872, 878], "thing": [1, 10, 11, 40, 56, 58, 825, 837, 838, 839, 840, 845, 861, 864, 867, 883], "super": [1, 4, 5, 12, 13, 27, 29, 43, 44, 45, 58, 70, 93, 390, 444, 832, 853, 870, 878], "seriou": 1, "given": [1, 4, 5, 10, 11, 14, 33, 42, 44, 57, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 139, 144, 151, 152, 172, 173, 174, 175, 176, 188, 193, 212, 221, 225, 226, 227, 229, 233, 306, 336, 345, 348, 354, 355, 363, 364, 365, 367, 370, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 408, 409, 410, 411, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 434, 444, 449, 464, 468, 469, 470, 472, 473, 474, 475, 485, 486, 487, 494, 496, 509, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 537, 538, 539, 540, 546, 568, 572, 591, 592, 602, 630, 631, 634, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 711, 712, 713, 714, 718, 721, 722, 723, 724, 726, 727, 731, 732, 744, 745, 754, 755, 758, 759, 760, 762, 774, 775, 776, 777, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 870, 876, 880], "intern": [1, 26, 87, 118, 119, 120, 657, 737, 747, 748, 810, 811, 812, 813, 814, 816, 841, 844, 847, 850, 852, 860, 862, 864, 866], "releas": [1, 8, 9, 59, 838, 839, 849, 865, 867, 871, 883], "tracer": [1, 4, 5, 12, 13, 21, 22, 24, 25, 31, 32, 34, 37, 39, 40, 45, 61, 63, 861, 869, 871, 872, 873, 878, 881, 882], "around": [1, 27, 29, 70, 87, 93, 116, 392, 498, 507, 838, 840, 843, 844, 846, 850, 856, 857, 861, 864, 865, 871, 873, 879, 883], "corner": [1, 70, 93, 389, 425, 839, 840, 854, 861], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 23, 38, 46, 50, 61, 63, 87, 110, 839, 840, 841, 843, 849, 854, 857, 860, 861, 865, 870, 874, 879], "start": [1, 2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 60, 66, 70, 87, 89, 93, 97, 139, 148, 151, 152, 367, 377, 386, 387, 389, 392, 401, 432, 488, 491, 500, 502, 512, 546, 645, 797, 825, 830, 833, 838, 839, 840, 841, 842, 848, 849, 851, 852, 854, 855, 856, 861, 864, 867, 869, 871, 878, 879, 883], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 56, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 386, 389, 392, 399, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 652, 657, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 703, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 748, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 826, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 865, 867, 869, 871, 876, 878, 879, 881, 883, 884], "worri": [1, 44, 45, 838, 839, 855, 876], "about": [1, 31, 32, 33, 36, 38, 40, 42, 43, 44, 45, 48, 59, 60, 67, 90, 179, 182, 646, 830, 832, 834, 837, 838, 839, 840, 841, 842, 843, 846, 848, 849, 850, 855, 856, 860, 862, 863, 864, 865, 866, 867, 868, 871, 876, 881, 884], "transpil": [1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 31, 32, 34, 35, 47, 802, 803, 838, 839, 853, 854, 861, 868, 872, 873, 874, 875, 877, 879, 881, 883, 885], "style": [1, 26, 58, 60, 392, 498, 660, 766, 840, 855, 883], "stori": 1, "anyon": [1, 833, 840, 848, 871], "ha": [1, 4, 5, 8, 9, 12, 13, 17, 21, 22, 23, 24, 25, 26, 27, 29, 33, 35, 39, 44, 45, 47, 50, 52, 56, 63, 66, 70, 75, 77, 81, 83, 87, 90, 93, 94, 98, 100, 104, 106, 110, 153, 210, 234, 254, 257, 259, 261, 271, 287, 289, 294, 297, 299, 300, 304, 344, 345, 346, 383, 390, 391, 392, 401, 425, 460, 470, 481, 506, 508, 513, 536, 538, 539, 541, 573, 645, 647, 648, 652, 653, 655, 660, 661, 663, 678, 679, 693, 694, 702, 703, 705, 707, 710, 721, 728, 766, 769, 770, 771, 776, 777, 780, 782, 783, 784, 785, 792, 795, 798, 820, 832, 838, 840, 843, 845, 846, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 875, 876, 879, 881, 883, 885], "question": [1, 8, 9, 10, 11, 23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 871, 875, 876], "ping": 1, "me": [1, 840], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 23, 59, 833, 838, 839, 840, 841, 871, 876, 883, 885], "ux": 1, "team": [1, 832, 833, 835, 838, 839, 840, 841, 861, 872], "discord": [1, 8, 9, 10, 11, 23, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 872, 875, 876], "channel": [1, 40, 60, 70, 71, 74, 93, 94, 97, 389, 395, 413, 414, 415, 425, 516, 517, 518, 521, 560, 564, 650, 652, 654, 666, 667, 668, 669, 670, 671, 674, 715, 811, 814, 840, 846, 854, 863], "templat": [1, 832, 846, 852, 864], "locat": [1, 60, 155, 401, 538, 645, 657, 659, 662, 741, 757, 774, 826, 838, 840, 845, 846, 850, 861, 862, 864, 865, 872], "asset": [1, 873], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 50, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 872], "copi": [1, 60, 63, 66, 67, 68, 69, 70, 71, 77, 87, 89, 90, 91, 92, 93, 94, 100, 110, 114, 140, 141, 143, 147, 158, 166, 228, 288, 392, 474, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 514, 570, 596, 607, 614, 615, 645, 646, 647, 648, 650, 655, 657, 662, 721, 722, 723, 725, 727, 728, 730, 732, 738, 773, 775, 803, 826, 839, 840, 843, 845, 848, 849, 852, 861, 862, 869, 871, 878, 879, 881], "firstli": [1, 34, 35, 46, 47, 51, 56, 844, 849, 851, 852, 853, 857, 858, 860, 867], "file": [1, 5, 8, 9, 10, 11, 14, 23, 58, 59, 60, 71, 87, 604, 627, 650, 813, 830, 834, 838, 839, 840, 843, 844, 845, 846, 847, 848, 850, 852, 853, 854, 855, 857, 861, 862, 863, 864, 865, 869, 872, 883, 884, 885], "topic": [1, 31, 34, 35, 36, 46, 47, 48, 49, 50, 51, 858, 883], "Then": [1, 63, 652, 679, 834, 838, 839, 840, 845, 846, 848, 854, 855, 858, 860, 864, 865, 871], "place": [1, 10, 11, 21, 22, 24, 25, 37, 39, 40, 58, 65, 66, 69, 70, 71, 75, 77, 87, 89, 91, 92, 93, 94, 98, 100, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 326, 327, 330, 342, 343, 348, 349, 350, 352, 355, 356, 357, 358, 362, 364, 365, 366, 367, 369, 370, 371, 375, 376, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 488, 498, 504, 507, 511, 524, 537, 540, 544, 553, 561, 562, 567, 571, 573, 575, 576, 577, 591, 595, 606, 610, 615, 619, 640, 645, 646, 647, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 815, 832, 836, 837, 840, 842, 843, 846, 847, 848, 850, 851, 852, 854, 856, 857, 861, 862, 864, 865, 867, 873], "folder": [1, 5, 21, 22, 24, 25, 37, 39, 40, 60, 839, 840, 843, 846, 848, 854, 857, 861, 864, 865, 866], "edit": [1, 838, 839, 840, 855, 870], "titl": [1, 23, 26, 28, 30, 41, 59, 62, 832, 838, 840, 846], "accordingli": [1, 70, 75, 80, 81, 83, 84, 93, 98, 103, 106, 107, 153, 254, 259, 261, 277, 287, 301, 349, 350, 386, 645, 648, 653, 660, 661, 663, 664, 710, 764, 768, 769, 770, 771, 779, 780, 781, 782, 783, 784, 785, 786, 787, 861, 869, 872], "render": [1, 846, 852], "webpag": [1, 31], "content": [1, 2, 23, 28, 30, 41, 44, 59, 60, 70, 87, 93, 401, 544, 838, 840, 846, 850, 860, 863, 869], "behind": [1, 33, 44, 832, 842, 856, 864, 868], "exist": [1, 33, 44, 45, 58, 59, 60, 63, 66, 70, 71, 87, 89, 93, 94, 100, 141, 392, 476, 477, 483, 484, 486, 488, 489, 490, 497, 514, 559, 595, 650, 655, 719, 721, 722, 723, 725, 727, 728, 730, 732, 815, 817, 830, 832, 838, 839, 843, 845, 850, 851, 852, 857, 858, 860, 861, 864, 867, 869, 870, 871, 873, 883], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 59, 74, 97, 652, 677, 678, 811, 848, 869], "h2": [1, 2, 28, 30, 41], "tag": [1, 2, 28, 30, 41, 839, 840], "h3": [1, 2, 28, 30, 41], "subsect": [1, 2, 28, 30, 41, 838, 839, 840, 843, 848], "explan": [1, 2, 28, 30, 41, 838, 839, 840, 847, 852, 856, 861, 865], "go": [1, 6, 7, 8, 9, 10, 11, 23, 27, 29, 33, 40, 42, 43, 45, 50, 65, 70, 93, 97, 389, 432, 436, 657, 748, 749, 832, 833, 836, 838, 839, 840, 842, 845, 846, 849, 851, 854, 855, 861, 862, 864, 865, 868, 871, 883, 884], "default": [1, 4, 5, 8, 9, 12, 13, 44, 45, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 113, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 186, 187, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 210, 211, 213, 214, 218, 221, 222, 223, 225, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 444, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 583, 584, 587, 588, 591, 592, 595, 596, 601, 605, 606, 607, 608, 610, 612, 614, 615, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 743, 744, 745, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 803, 807, 808, 810, 811, 812, 813, 814, 815, 816, 825, 826, 830, 838, 839, 840, 845, 846, 849, 850, 851, 852, 853, 856, 857, 861, 864, 867, 869, 873, 879, 883], "text": [1, 6, 7, 8, 9, 21, 22, 26, 58, 70, 71, 390, 391, 458, 466, 838, 840, 846, 851, 852], "paragraph": [1, 2, 28, 30, 41, 846], "p": [1, 2, 28, 30, 41, 56, 70, 71, 75, 93, 94, 98, 111, 153, 258, 390, 395, 440, 453, 522, 555, 556, 645, 648, 650, 653, 657, 694, 710, 745, 811, 832, 839, 840, 842], "path": [1, 21, 22, 23, 24, 25, 26, 37, 39, 40, 59, 60, 792, 803, 819, 839, 846, 860, 861, 862, 872, 883], "correspond": [1, 4, 5, 19, 20, 24, 25, 29, 44, 45, 59, 67, 69, 70, 71, 74, 77, 80, 81, 83, 87, 90, 92, 93, 97, 100, 106, 110, 113, 116, 142, 167, 179, 182, 242, 292, 306, 345, 359, 360, 383, 386, 389, 390, 392, 395, 401, 412, 418, 429, 434, 440, 443, 444, 445, 464, 489, 490, 511, 516, 517, 518, 521, 538, 539, 607, 629, 645, 646, 648, 650, 652, 653, 655, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 679, 684, 688, 689, 694, 701, 702, 725, 726, 757, 763, 764, 768, 769, 770, 771, 776, 777, 782, 783, 784, 785, 792, 795, 797, 825, 830, 832, 838, 840, 844, 845, 847, 848, 849, 851, 852, 853, 856, 857, 859, 861, 864, 867, 869, 878, 879, 881, 883], "toctre": [1, 846], "index": [1, 58, 59, 60, 63, 66, 70, 71, 77, 80, 81, 82, 87, 89, 93, 94, 100, 103, 104, 105, 146, 153, 327, 334, 335, 344, 345, 346, 383, 389, 390, 392, 397, 399, 401, 412, 418, 449, 451, 458, 481, 488, 491, 500, 502, 504, 507, 508, 511, 512, 528, 529, 538, 547, 550, 568, 570, 591, 592, 596, 643, 645, 650, 654, 655, 657, 660, 661, 662, 715, 725, 729, 739, 740, 741, 744, 745, 746, 752, 754, 763, 764, 766, 768, 769, 770, 772, 774, 796, 811, 826, 828, 847, 848, 853, 857, 858, 859, 860, 862, 864, 883], "rst": [1, 857], "left": [1, 35, 47, 58, 59, 70, 75, 80, 82, 93, 98, 103, 105, 133, 134, 246, 261, 354, 370, 377, 386, 387, 389, 390, 392, 401, 424, 443, 448, 454, 461, 463, 489, 500, 542, 543, 544, 545, 546, 547, 560, 644, 648, 650, 653, 660, 662, 688, 689, 694, 703, 708, 763, 774, 795, 839, 840, 843, 846, 848, 849, 851, 854], "add": [1, 35, 47, 60, 62, 69, 70, 78, 85, 87, 92, 93, 101, 108, 115, 116, 377, 387, 389, 391, 432, 471, 587, 616, 648, 650, 652, 653, 658, 663, 679, 707, 756, 784, 792, 803, 811, 814, 830, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 858, 860, 861, 864, 865, 867, 869, 871, 872, 883], "grid": [1, 23, 60, 66, 153, 330, 383, 645, 851, 864], "item": [1, 6, 7, 8, 9, 10, 11, 44, 45, 56, 58, 60, 65, 71, 85, 87, 89, 92, 93, 94, 148, 173, 210, 264, 280, 288, 355, 359, 372, 557, 567, 568, 572, 607, 608, 645, 646, 647, 650, 657, 664, 742, 743, 744, 745, 749, 754, 755, 789, 838, 847, 849, 869, 879], "card": [1, 70, 93, 374, 386], "refer": [1, 12, 13, 70, 77, 83, 84, 93, 95, 100, 106, 107, 146, 161, 259, 277, 327, 342, 372, 383, 386, 389, 390, 392, 418, 423, 434, 441, 465, 488, 630, 631, 645, 648, 651, 653, 655, 663, 664, 684, 686, 709, 725, 783, 785, 786, 787, 811, 832, 837, 838, 839, 840, 843, 844, 846, 848, 849, 856, 857, 858, 859, 860, 861, 862, 863, 864, 871, 873, 883], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 17, 19, 20, 23, 24, 25, 26, 27, 29, 33, 35, 37, 40, 43, 44, 45, 47, 49, 50, 51, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 182, 185, 186, 187, 189, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 386, 389, 390, 392, 399, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 645, 646, 648, 650, 651, 652, 653, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 747, 748, 749, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 810, 811, 820, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 875, 878, 879, 882, 883, 884, 885], "look": [1, 8, 9, 10, 11, 12, 13, 23, 33, 44, 45, 58, 60, 63, 832, 836, 838, 839, 840, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 861, 862, 864, 865, 866, 867, 869, 870, 872, 879, 883], "document": [1, 5, 8, 9, 10, 11, 14, 23, 33, 44, 77, 261, 349, 350, 386, 629, 648, 650, 729, 833, 834, 837, 840, 846, 848, 849, 851, 860, 861, 862, 864, 870], "sphinx": [1, 834, 846], "websit": [1, 62, 832, 839, 843], "alreadi": [2, 5, 8, 9, 23, 24, 25, 34, 37, 38, 39, 40, 44, 45, 50, 58, 60, 63, 70, 75, 87, 93, 98, 250, 260, 287, 297, 307, 392, 401, 477, 478, 498, 535, 544, 648, 653, 691, 698, 825, 826, 832, 838, 839, 840, 845, 847, 849, 850, 856, 860, 861, 867, 871, 872, 883], "instal": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 58, 60, 61, 62, 63, 834, 839, 840, 845, 846, 854, 855], "skip": [2, 6, 7, 23, 60, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 390, 392, 413, 414, 415, 433, 449, 451, 458, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 500, 503, 505, 507, 508, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 657, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 796, 825, 846, 857, 864], "colab": [2, 6, 7, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 58, 60, 62, 63], "manual": [2, 8, 9, 10, 11, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 657, 737, 747, 748, 838, 839, 840, 849, 855, 864, 870], "mind": [2, 27, 29, 33, 39, 44, 48, 838, 839, 844, 847, 864, 872, 878], "click": [2, 4, 5, 60, 838, 839, 840, 848, 852, 854, 855], "runtim": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 23, 24, 25, 35, 44, 47, 58, 59, 842, 857, 864, 867, 883], "restart": [2, 4, 5, 6, 7, 12, 13, 21, 22, 23, 58, 59, 839, 854], "git": [2, 4, 5, 6, 7, 12, 13, 21, 22, 44, 58, 59, 60, 61, 832, 834, 837, 839, 840, 843, 846, 848, 854, 855, 864, 872], "clone": [2, 4, 5, 12, 13, 21, 22, 44, 58, 60, 61, 832, 834, 840, 854, 872], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 29, 37, 39, 40, 44, 45, 58, 59, 60, 61, 62, 63, 69, 70, 92, 93, 95, 161, 169, 257, 267, 268, 283, 342, 349, 350, 383, 386, 389, 392, 401, 433, 507, 537, 630, 631, 645, 646, 648, 651, 653, 655, 663, 701, 702, 733, 783, 832, 834, 839, 840, 843, 846, 848, 849, 852, 854, 872, 878], "github": [2, 4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 24, 25, 44, 58, 59, 60, 61, 62, 832, 834, 835, 837, 840, 841, 843, 846, 848, 849, 851, 852, 854, 855, 863, 864, 872], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 29, 44, 58, 59, 60, 61, 62, 832, 834, 839, 840, 843, 846, 848, 849, 854, 872], "llc": [2, 4, 5, 12, 13, 21, 22, 44, 58, 59, 60, 61, 832, 872], "model": [2, 3, 4, 5, 15, 16, 26, 31, 32, 33, 61, 63, 254, 287, 391, 467, 648, 808, 812, 813, 830, 832, 870, 873, 875, 876, 878, 879, 883, 884, 885], "depth": [2, 4, 5, 8, 9, 12, 13, 21, 22, 59, 66, 70, 74, 89, 93, 97, 155, 389, 392, 425, 485, 560, 572, 645, 650, 652, 670, 671, 840, 848, 869, 872], "repositori": [2, 4, 5, 12, 13, 21, 22, 834, 838, 839, 840, 842, 843, 846, 854, 863], "cd": [2, 4, 5, 12, 13, 21, 22, 44, 61, 832, 834, 839, 840, 854, 872], "acceler": [3, 31, 849, 861, 876], "convert": [3, 12, 13, 14, 15, 16, 19, 20, 24, 25, 26, 27, 29, 31, 34, 36, 39, 40, 42, 43, 44, 45, 46, 48, 50, 58, 61, 63, 65, 66, 69, 87, 88, 89, 92, 110, 140, 141, 154, 164, 165, 207, 208, 209, 210, 221, 229, 233, 253, 293, 392, 397, 476, 477, 478, 528, 593, 611, 613, 614, 615, 617, 645, 646, 647, 648, 650, 653, 657, 711, 738, 749, 750, 792, 820, 825, 838, 844, 845, 858, 859, 861, 864, 866, 869, 870, 871, 873, 874, 876, 877, 878, 880, 885], "faster": [3, 4, 5, 15, 16, 19, 20, 24, 25, 26, 31, 44, 45, 61, 63, 70, 75, 93, 98, 390, 463, 653, 703, 834, 837, 846, 873], "infer": [3, 8, 9, 10, 11, 15, 16, 19, 20, 23, 24, 25, 26, 31, 35, 47, 49, 50, 59, 61, 63, 66, 70, 71, 74, 77, 89, 93, 94, 97, 100, 139, 141, 145, 149, 150, 154, 157, 163, 172, 173, 174, 175, 176, 326, 327, 389, 392, 396, 425, 511, 525, 571, 605, 606, 645, 646, 650, 652, 655, 675, 725, 820, 821, 842, 845, 849, 850, 864, 869, 878, 885], "finetun": [3, 31, 58], "project": [3, 21, 22, 24, 25, 31, 36, 37, 39, 40, 44, 45, 48, 111, 652, 679, 811, 832, 834, 835, 838, 839, 840, 841, 844, 845, 846, 864, 871, 876, 878, 883], "resnet": [3, 8, 9, 24, 25, 31, 44, 878, 879], "video": [4, 12, 19, 21, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 45, 832, 833, 838, 839, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 872], "tutori": [4, 8, 9, 10, 11, 12, 19, 21, 23, 24, 27, 29, 33, 34, 35, 36, 37, 38, 39, 40, 45, 832, 840, 861, 872], "written": [4, 5, 6, 7, 8, 9, 23, 33, 43, 44, 45, 58, 71, 392, 487, 839, 843, 844, 852, 855, 856, 860, 861, 865, 869, 870, 871, 878, 880, 883], "imag": [4, 5, 8, 9, 10, 11, 19, 20, 24, 25, 27, 39, 44, 45, 58, 59, 60, 61, 62, 63, 70, 74, 92, 93, 97, 115, 142, 234, 235, 236, 237, 240, 243, 252, 255, 257, 259, 268, 269, 270, 275, 277, 290, 297, 298, 300, 301, 305, 389, 408, 409, 425, 426, 427, 429, 560, 645, 648, 650, 652, 654, 665, 666, 667, 668, 669, 672, 673, 674, 715, 811, 832, 839, 854, 867, 872, 878, 879, 883], "classif": [4, 5, 21, 22, 26, 58, 883], "three": [4, 5, 6, 7, 31, 37, 49, 50, 60, 70, 153, 326, 383, 392, 478, 645, 839, 840, 847, 848, 849, 851, 861, 864, 867, 870, 884], "major": [4, 5, 6, 7, 660, 766, 849, 850, 862, 864, 871, 883], "ml": [4, 5, 6, 7, 8, 9, 23, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 58, 60, 63, 832, 833, 837, 861, 870, 874, 876, 878, 882, 883, 885], "framework": [4, 5, 6, 7, 10, 11, 14, 15, 16, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 51, 58, 60, 62, 65, 71, 184, 206, 216, 219, 230, 558, 574, 578, 610, 613, 646, 647, 650, 657, 739, 790, 792, 796, 803, 808, 815, 820, 821, 835, 836, 838, 839, 842, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 856, 857, 858, 860, 861, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885], "sinc": [4, 5, 12, 13, 21, 22, 23, 39, 40, 44, 45, 58, 60, 70, 93, 111, 386, 834, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 853, 860, 861, 871, 883], "automat": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 44, 45, 50, 838, 839, 840, 842, 845, 846, 848, 849, 855, 857, 860, 864, 867, 873, 875, 883], "sure": [4, 5, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 44, 58, 835, 838, 839, 840, 843, 848, 853, 854, 861, 862, 864, 867], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 37, 40, 59, 70, 75, 87, 98, 116, 389, 391, 412, 470, 595, 639, 650, 651, 653, 696, 813, 830, 832, 839, 840, 841, 844, 847, 849, 857, 858, 859, 860, 861, 864, 865, 869, 870, 871, 873, 876, 879, 883, 884, 885], "dm": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 44, 45, 56, 58], "haiku": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 40, 44, 45, 56, 58, 62, 808, 832, 878, 883], "exit": [4, 12, 21, 23, 44, 45, 850], "download": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 44, 45, 59, 60, 63, 834, 839, 846, 864, 878, 879], "imagenet": [4, 5, 8, 9, 23, 29, 59, 61, 832], "class": [4, 5, 8, 9, 10, 11, 12, 13, 14, 21, 22, 23, 26, 27, 29, 33, 43, 44, 45, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 148, 157, 163, 179, 182, 195, 197, 198, 257, 294, 352, 374, 386, 400, 401, 409, 410, 443, 543, 544, 551, 560, 564, 577, 587, 610, 645, 646, 647, 648, 650, 652, 653, 654, 657, 658, 673, 678, 682, 688, 698, 702, 703, 705, 712, 731, 738, 749, 756, 771, 778, 782, 783, 792, 793, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 825, 830, 838, 845, 846, 847, 849, 850, 851, 852, 856, 858, 859, 862, 863, 864, 867, 869, 870, 873, 877, 878, 879, 880, 883, 884], "wget": [4, 5, 8, 9, 12, 13, 21, 22, 58, 59, 62, 839], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 58, 61, 62, 87, 832, 852, 878, 884], "githubusercont": [4, 5, 8, 9, 12, 13, 21, 22, 58, 62], "hub": [4, 5, 8, 9, 12, 13, 21, 22, 58, 61, 63], "master": [4, 5, 12, 13, 21, 22, 34, 35, 36, 46, 47, 48, 49, 50, 51, 58, 60, 61, 62, 835, 848, 883], "imagenet_class": [4, 5, 21, 22], "categori": [4, 5, 8, 9, 21, 22, 838, 843, 844, 847, 849, 853, 861, 865], "strip": [4, 5, 21, 22, 35, 47], "readlin": [4, 5, 21, 22, 59], "cat": [4, 5, 10, 11, 21, 22, 59, 862, 867, 869, 870, 878, 879], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 60, 61, 832, 878], "filenam": [4, 5, 12, 13, 21, 22, 23, 44, 45, 58, 60, 63, 71, 813, 819], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 61, 62, 63, 70, 81, 85, 89, 93, 108, 208, 209, 213, 225, 321, 401, 537, 572, 588, 647, 650, 654, 656, 661, 715, 735, 736, 771, 803, 820, 821, 832, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 855, 858, 859, 860, 861, 862, 863, 864, 865, 869, 870, 871, 872, 878, 879, 881, 882, 883], "devic": [4, 5, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 23, 24, 25, 59, 60, 63, 66, 70, 79, 87, 89, 93, 102, 115, 118, 119, 120, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 326, 327, 342, 343, 383, 396, 486, 523, 524, 526, 527, 551, 565, 566, 645, 650, 659, 757, 758, 759, 760, 790, 792, 793, 808, 810, 811, 812, 813, 814, 815, 816, 817, 830, 840, 842, 845, 849, 853, 857, 858, 862, 864, 865, 867, 869, 871, 873, 883], "torchvis": [4, 5, 8, 9, 19, 20, 21, 22, 23, 58], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 59, 61, 70, 74, 93, 97, 389, 390, 411, 412, 417, 418, 421, 422, 423, 433, 434, 437, 454, 652, 676, 795, 798, 811, 832, 858, 864, 873, 878, 879, 883, 884], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 24, 25, 39, 44, 45, 59, 60, 61, 832, 878], "time": [4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 40, 44, 45, 50, 58, 60, 61, 62, 70, 72, 75, 81, 93, 95, 104, 110, 111, 148, 355, 386, 389, 390, 392, 401, 418, 423, 435, 437, 458, 465, 498, 505, 537, 631, 636, 645, 651, 652, 653, 655, 656, 660, 661, 675, 678, 693, 731, 734, 735, 736, 763, 764, 768, 769, 811, 812, 813, 830, 838, 839, 840, 843, 845, 847, 848, 849, 851, 854, 856, 857, 858, 860, 861, 864, 865, 869, 870, 871, 872, 875, 878, 879, 883, 884], "filterwarn": [4, 5, 6, 7, 23], "ignor": [4, 5, 6, 7, 23, 57, 65, 66, 70, 87, 93, 153, 389, 390, 392, 401, 413, 414, 415, 444, 452, 460, 501, 502, 506, 545, 645, 652, 657, 679, 748, 749, 815, 839, 846, 848, 851, 864, 871], "compos": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 44, 45, 58, 70, 93, 389, 403, 404, 405, 406, 839, 847, 861, 864, 879, 881, 883], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 58, 59, 70, 93, 389, 425, 867], "centercrop": [4, 5, 21, 22, 23], "224": [4, 5, 8, 9, 10, 11, 21, 22, 23, 27, 29, 44, 45, 58, 59, 61, 832, 878], "totensor": [4, 5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 58], "485": [4, 5, 21, 22, 23, 58], "456": [4, 5, 21, 22, 23, 58, 864], "406": [4, 5, 21, 22, 23, 58, 70, 93, 411, 555, 650], "229": [4, 5, 21, 22, 23, 58, 293, 648], "225": [4, 5, 21, 22, 23, 58, 60, 248, 648], "torch_img": [4, 5, 12, 13, 21, 22], "unsqueez": [4, 5, 12, 13, 19, 20, 21, 22], "img": [4, 5, 12, 13, 21, 22, 39, 44, 45, 58, 59, 60, 62, 832, 878], "ipython": [4, 5, 12, 13, 21, 22, 37, 39, 40, 44, 45, 63], "displai": [4, 5, 12, 13, 21, 22, 23, 39, 44, 45, 58, 59, 60, 62, 63, 839, 846, 848, 853, 864], "end": [4, 5, 12, 13, 23, 58, 59, 70, 93, 139, 242, 298, 367, 386, 389, 391, 392, 437, 466, 488, 498, 501, 502, 645, 648, 826, 839, 840, 845, 848, 854, 860, 865, 867, 871, 885], "set_default_devic": [4, 6, 8, 9, 12, 13, 19, 21, 23, 24, 231, 647, 850], "ivy_model": [4, 5, 6, 7, 12, 13, 21, 22, 61], "ivy_alexnet": [4, 5], "quick": [4, 5, 31, 45, 840, 842, 862], "trace_graph": [4, 5, 6, 7, 12, 13, 21, 22, 35, 36, 37, 38, 44, 45, 47, 48, 49, 50, 51, 52, 61, 813, 870, 877], "moment": [4, 5, 70, 72, 93, 95, 390, 447, 630, 631, 636, 651, 815, 830, 838, 845, 871, 878, 879], "cost": [4, 5, 72, 95, 630, 631, 634, 636, 637, 638, 651, 656, 734, 735, 736, 826, 849, 867], "arg": [4, 5, 8, 9, 12, 13, 15, 16, 17, 19, 20, 21, 22, 23, 27, 29, 37, 38, 40, 44, 45, 49, 50, 51, 62, 65, 87, 109, 119, 135, 217, 227, 616, 644, 645, 647, 650, 790, 792, 807, 808, 811, 812, 813, 817, 820, 825, 830, 832, 844, 849, 850, 853, 859, 860, 861, 867, 869, 878, 879, 881], "asarrai": [4, 5, 6, 7, 12, 13, 19, 20, 21, 22, 59, 66, 70, 71, 82, 89, 93, 94, 105, 140, 399, 529, 530, 560, 571, 575, 576, 606, 607, 608, 645, 650, 652, 661, 662, 666, 769, 773, 853, 858, 861, 862], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 33, 44, 59, 60, 63, 66, 70, 79, 89, 93, 102, 151, 152, 155, 207, 208, 209, 225, 396, 523, 524, 526, 527, 645, 647, 653, 659, 704, 757, 758, 759, 760, 810, 811, 812, 813, 814, 815, 816, 830, 869, 870, 871, 873], "output": [4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 33, 39, 40, 42, 44, 45, 57, 58, 59, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 166, 168, 193, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 336, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 386, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 431, 433, 434, 435, 437, 438, 440, 441, 442, 444, 446, 449, 450, 452, 455, 456, 457, 458, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 481, 482, 483, 486, 488, 489, 490, 491, 492, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 554, 555, 556, 560, 561, 562, 564, 568, 577, 584, 591, 592, 593, 617, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 750, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 795, 810, 811, 825, 826, 832, 834, 839, 840, 842, 843, 844, 846, 847, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 869, 871, 873, 878, 879, 884], "softmax": [4, 5, 8, 9, 10, 11, 21, 22, 27, 40, 44, 45, 60, 64, 74, 85, 86, 97, 391, 468, 642, 652, 679, 682, 807, 832], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 40, 42, 44, 45, 51, 57, 58, 60, 62, 63, 69, 70, 85, 87, 92, 93, 108, 116, 135, 136, 138, 171, 193, 208, 227, 242, 288, 389, 391, 392, 395, 396, 401, 435, 468, 488, 516, 518, 523, 543, 544, 577, 644, 646, 647, 648, 650, 656, 734, 735, 790, 792, 796, 803, 808, 812, 813, 815, 816, 820, 825, 830, 832, 836, 838, 840, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 867, 871, 878, 879, 881], "argsort": [4, 5, 21, 22, 82, 105, 662, 774, 861], "descend": [4, 5, 21, 22, 82, 105, 653, 662, 703, 704, 772, 775], "top": [4, 5, 21, 22, 40, 42, 44, 45, 58, 59, 70, 77, 93, 333, 383, 391, 392, 466, 509, 560, 650, 719, 839, 840, 849, 854, 861, 863, 864, 867, 883], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, 58, 59, 60, 61, 70, 76, 93, 99, 381, 396, 523, 526, 654, 712, 714, 807, 879], "gather": [4, 5, 21, 22, 58, 70, 71, 93, 94, 344, 345, 346, 383, 568, 570, 650], "to_list": [4, 5, 21, 22, 71, 94, 650], "arraitiger": [4, 5, 21, 22], "tabbi": [4, 5, 10, 11, 21, 22], "egyptian": [4, 5, 21, 22], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 21, 22, 23], "dropout": [4, 5, 74, 97, 389, 413, 414, 415, 652, 677, 679, 682, 811], "torch_output": [4, 5, 12, 13, 14, 15, 16, 21, 22], "dim": [4, 5, 21, 22, 60, 70, 87, 89, 93, 155, 327, 383, 389, 392, 407, 417, 418, 419, 422, 430, 488, 511, 645, 652, 665, 672, 673, 678, 797, 811, 849, 861, 862, 867], "torch_class": [4, 5, 21, 22], "torch_logit": [4, 5, 21, 22], "tensor": [4, 5, 6, 7, 8, 9, 15, 16, 19, 20, 21, 22, 23, 24, 25, 27, 29, 33, 34, 37, 38, 40, 42, 44, 45, 46, 50, 56, 58, 66, 69, 70, 71, 74, 75, 76, 77, 79, 83, 87, 89, 92, 93, 94, 97, 98, 99, 100, 102, 106, 109, 143, 151, 152, 155, 161, 177, 193, 285, 286, 316, 333, 337, 338, 339, 340, 341, 342, 351, 374, 381, 383, 386, 389, 390, 391, 392, 401, 402, 408, 409, 412, 416, 425, 426, 427, 428, 435, 437, 439, 446, 447, 448, 449, 452, 454, 456, 458, 459, 462, 464, 465, 466, 468, 471, 472, 488, 491, 496, 499, 500, 501, 502, 503, 506, 511, 512, 543, 548, 591, 592, 645, 646, 648, 650, 652, 653, 654, 655, 659, 663, 675, 678, 679, 694, 705, 712, 725, 727, 757, 780, 811, 820, 826, 830, 832, 844, 845, 849, 850, 854, 856, 857, 860, 861, 862, 864, 865, 867, 869, 870, 871, 873, 878, 879, 881, 884], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 21, 22, 40, 56, 633, 641, 651], "takebackward0": [4, 5, 21, 22], "great": [4, 5, 10, 11, 12, 13, 840, 864], "simpl": [4, 5, 10, 11, 27, 34, 37, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 56, 58, 60, 63, 70, 93, 401, 537, 797, 811, 826, 832, 838, 839, 840, 844, 846, 847, 849, 850, 851, 852, 857, 860, 861, 864, 865, 867, 869, 871, 873, 875, 878, 879, 883, 884], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 56, 58, 59, 61, 63, 71, 83, 94, 234, 235, 236, 237, 240, 243, 252, 255, 257, 259, 268, 269, 270, 275, 277, 290, 298, 300, 301, 305, 567, 568, 648, 650, 653, 663, 707, 780, 782, 783, 784, 785, 832, 838, 841, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 861, 862, 864, 865, 866, 867, 869, 870, 878, 879], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 25, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 832, 833, 835, 836, 838, 839, 840, 841, 846, 851, 854, 855, 859, 860, 878, 879], "try": [4, 5, 8, 9, 10, 11, 23, 34, 46, 56, 59, 63, 87, 616, 650, 810, 820, 832, 838, 839, 840, 843, 844, 847, 848, 849, 853, 855, 860, 862, 869, 871, 881], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 27, 29, 34, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 56, 61, 62, 808, 832, 844, 849, 850, 856, 860, 861, 864, 865, 867, 869, 870, 871, 873, 878, 879, 881, 883], "onc": [4, 5, 8, 9, 12, 13, 44, 45, 56, 58, 75, 79, 98, 102, 227, 390, 443, 647, 653, 659, 688, 689, 690, 703, 757, 838, 839, 840, 847, 848, 849, 850, 851, 854, 855, 860, 861, 864, 867, 869, 871, 879], "set": [4, 5, 10, 11, 15, 16, 27, 29, 35, 44, 45, 47, 50, 58, 59, 60, 61, 62, 65, 70, 71, 74, 75, 80, 82, 83, 87, 93, 94, 97, 98, 103, 105, 106, 128, 131, 138, 159, 161, 195, 196, 197, 198, 199, 210, 223, 224, 225, 226, 227, 242, 342, 354, 370, 372, 377, 383, 386, 387, 389, 390, 391, 392, 401, 412, 433, 437, 441, 445, 448, 466, 471, 472, 488, 498, 502, 509, 537, 542, 543, 544, 545, 546, 547, 549, 553, 560, 572, 577, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 610, 618, 642, 644, 645, 646, 647, 648, 650, 652, 653, 657, 659, 660, 662, 663, 675, 682, 684, 694, 696, 699, 702, 703, 737, 744, 747, 748, 749, 754, 755, 761, 763, 764, 768, 770, 771, 772, 775, 783, 785, 792, 795, 796, 797, 798, 803, 810, 811, 813, 815, 820, 826, 829, 830, 832, 833, 840, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 855, 857, 858, 860, 861, 862, 864, 865, 867, 869, 870, 872, 877, 878, 879, 883, 884], "post": [4, 5, 8, 9, 12, 13, 23, 58, 78, 101, 658, 756, 839, 854, 859], "process": [4, 5, 8, 9, 12, 13, 37, 44, 45, 49, 58, 221, 233, 647, 833, 839, 840, 846, 847, 848, 854, 855, 857, 859, 861, 862, 863, 864, 867, 869, 870, 879, 883, 885], "st": [4, 5, 6, 7, 19, 20, 795, 843, 862, 864], "perf_count": [4, 5, 15, 16, 17, 19, 20], "raw_logit": [4, 5], "latenc": [4, 5, 19, 20], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 17, 18, 29, 40, 43, 44, 45, 58, 62, 153, 645, 832, 857, 862, 867, 869, 870, 878, 884], "direct": [4, 5, 70, 93, 355, 362, 366, 371, 375, 386, 389, 392, 423, 434, 489, 490, 505, 662, 775, 838, 844, 846, 861, 867, 869, 882, 883, 884], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 56, 58, 67, 70, 71, 79, 80, 83, 90, 93, 94, 102, 103, 146, 151, 155, 157, 163, 166, 169, 171, 173, 175, 177, 180, 182, 183, 187, 190, 194, 198, 202, 204, 222, 249, 285, 286, 397, 401, 528, 538, 539, 540, 568, 577, 614, 645, 646, 647, 648, 650, 659, 660, 663, 758, 759, 760, 764, 776, 777, 782, 784, 795, 796, 849, 861, 864, 869], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 29, 35, 39, 40, 44, 45, 47, 50, 56, 57, 81, 85, 108, 653, 661, 701, 768, 769, 770, 771, 836, 838, 839, 840, 841, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 867, 871, 878, 879, 881, 883], "ident": [4, 5, 8, 9, 15, 16, 26, 40, 42, 59, 61, 75, 87, 146, 215, 570, 596, 645, 647, 650, 653, 657, 691, 695, 750, 811, 847, 857, 858, 861, 862, 865, 867, 871, 873], "had": [4, 5, 847, 848, 860, 865, 869, 870, 883, 884], "postprocess": [4, 5], "routin": [4, 5, 848, 860, 861, 867, 871, 883], "feed": [4, 5, 227, 647, 879, 883, 884], "carefulli": [4, 5, 292, 648, 810, 861], "rewrit": [4, 5], "easili": [4, 5, 39, 44, 45, 56, 839, 844, 848, 854, 861, 864, 867, 870, 871, 876, 883], "quickest": [4, 5], "particular": [4, 5, 44, 45, 282, 648, 796, 839, 840, 843, 845, 848, 849, 851, 858, 860, 861, 864, 865, 883], "again": [4, 5, 12, 13, 36, 37, 47, 48, 49, 50, 653, 701, 840, 844, 845, 846, 847, 851, 853, 855, 860, 861, 864, 865, 867, 869, 871], "speed": [4, 5, 19, 20, 24, 25, 26, 44, 45, 58, 63, 71, 94, 584, 650, 864], "repeat": [4, 5, 6, 7, 36, 48, 70, 71, 77, 93, 94, 100, 389, 392, 401, 418, 423, 487, 537, 562, 650, 655, 656, 731, 735, 736, 825, 840, 844, 845, 851, 852, 860, 864], "previou": [4, 5, 26, 35, 36, 37, 39, 47, 48, 49, 51, 72, 93, 95, 201, 202, 203, 204, 205, 378, 388, 389, 435, 617, 619, 620, 621, 622, 624, 625, 627, 631, 636, 646, 650, 651, 810, 829, 839, 840, 843, 845, 848, 850, 856, 861, 864, 867, 871], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 19, 20, 21, 22, 23, 24, 25, 31, 32, 36, 39, 44, 47, 49, 50, 62, 71, 75, 87, 94, 98, 579, 580, 583, 594, 603, 618, 626, 650, 653, 792, 803, 813, 815, 830, 832, 843, 847, 849, 861, 866, 867, 870, 871, 877, 878, 879, 884], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 50, 59, 66, 70, 89, 93, 155, 401, 537, 645, 844, 846], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 604, 627, 650, 826, 849, 866], "fix": [4, 5, 12, 13, 60, 70, 93, 110, 111, 386, 389, 390, 435, 465, 652, 679, 832, 836, 839, 840, 843, 849, 855, 864, 865], "until": [4, 5, 12, 13, 826, 840, 860, 869, 871, 879], "o": [4, 5, 12, 13, 23, 57, 58, 59, 60, 62, 587, 650, 652, 679, 832, 839, 842, 848, 870, 872], "environ": [4, 5, 12, 13, 24, 25, 37, 39, 40, 59, 62, 832, 833, 840, 872, 875, 883, 885], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 23, 26, 37, 40, 834, 837, 839, 846, 885], "jit": [4, 5, 19, 20, 24, 25, 44, 47, 870, 871, 879, 883], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 19, 20], "warm": [4, 5], "_": [4, 5, 15, 16, 17, 19, 20, 24, 25, 26, 44, 57, 58, 69, 70, 87, 92, 93, 95, 111, 169, 257, 259, 267, 268, 283, 349, 350, 386, 389, 392, 401, 433, 462, 465, 507, 537, 560, 630, 631, 646, 648, 650, 651, 653, 655, 657, 663, 701, 702, 704, 733, 744, 783, 840, 848, 849, 852, 860, 864], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 70, 86, 87, 123, 389, 391, 425, 430, 470, 471, 661, 768, 770, 797, 807, 839, 840, 843, 851, 870], "note": [4, 5, 8, 9, 12, 13, 23, 26, 44, 45, 50, 59, 60, 61, 70, 71, 75, 77, 81, 93, 98, 100, 110, 148, 161, 193, 261, 296, 297, 304, 342, 343, 363, 383, 386, 389, 390, 392, 412, 443, 448, 458, 459, 465, 488, 507, 646, 648, 652, 653, 655, 661, 663, 679, 688, 689, 700, 701, 703, 725, 729, 769, 771, 780, 811, 826, 830, 836, 838, 839, 840, 844, 849, 851, 852, 855, 860, 861, 862, 864, 865, 867], "were": [4, 5, 12, 13, 61, 87, 90, 182, 186, 187, 261, 648, 652, 679, 838, 839, 840, 849, 853, 855, 859, 860, 862, 864, 865, 867, 869, 879, 883, 884], "function": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 23, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 179, 180, 181, 182, 185, 186, 187, 189, 193, 194, 211, 213, 214, 223, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 587, 590, 591, 592, 595, 596, 599, 601, 603, 606, 607, 608, 609, 610, 612, 614, 615, 616, 622, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 743, 744, 745, 747, 748, 749, 750, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 793, 795, 796, 797, 798, 803, 807, 810, 813, 820, 821, 828, 830, 836, 839, 840, 842, 843, 844, 845, 846, 848, 851, 852, 854, 860, 863, 870, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885], "dog": [4, 5], "006431100999861883": [4, 5], "258": [4, 5, 652, 667, 669], "104": [4, 5, 83, 653, 663, 698, 778], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5, 848], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 21, 22, 23, 26, 58, 59, 60, 61, 70, 76, 93, 99, 391, 467, 470, 473, 654, 712, 713, 714, 832, 849], "down": [4, 5, 35, 47, 61, 70, 93, 389, 392, 425, 490, 832, 839, 864, 873, 883], "itself": [4, 5, 10, 11, 37, 49, 69, 110, 288, 550, 616, 648, 650, 657, 749, 826, 836, 839, 840, 843, 846, 847, 848, 849, 850, 853, 854, 855, 860, 861, 871, 879, 883, 884], "version": [4, 5, 8, 9, 15, 16, 26, 39, 40, 47, 58, 59, 60, 63, 64, 70, 93, 110, 123, 305, 354, 356, 386, 401, 542, 547, 629, 648, 650, 653, 689, 690, 792, 820, 821, 832, 839, 840, 846, 848, 849, 852, 860, 862, 869, 876, 878], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5], "0587": [4, 5], "promis": [4, 5, 10, 11], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 18, 21, 22, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 797, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 838, 839, 840, 843, 844, 846, 847, 848, 861, 863, 875, 877, 878, 880, 881, 883, 884, 885], "modul": [4, 5, 8, 9, 12, 13, 19, 20, 24, 25, 27, 29, 33, 37, 39, 40, 43, 44, 45, 46, 50, 56, 57, 58, 60, 61, 62, 85, 87, 108, 116, 382, 384, 385, 393, 394, 398, 588, 650, 664, 788, 792, 807, 808, 809, 811, 812, 814, 816, 819, 820, 830, 834, 839, 844, 845, 846, 853, 857, 860, 861, 863, 864, 869, 870, 871, 877, 879, 880, 881, 883, 884], "__init__": [4, 5, 12, 13, 27, 29, 43, 44, 45, 56, 57, 58, 60, 87, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 793, 800, 801, 802, 807, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 825, 827, 830, 832, 838, 844, 845, 849, 853, 861, 865, 870, 878], "self": [4, 5, 8, 9, 10, 11, 12, 13, 27, 29, 43, 44, 45, 56, 57, 58, 60, 62, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 177, 179, 182, 185, 186, 187, 189, 191, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 652, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 815, 825, 832, 840, 844, 847, 853, 861, 862, 870, 878], "num_class": [4, 5, 27, 29, 44, 45, 58, 60, 62, 832, 869, 878], "1000": [4, 5, 8, 9, 15, 16, 17, 19, 20, 21, 22, 23, 27, 44, 45, 58, 59, 60, 61, 63, 66, 89, 152, 645, 832, 878], "v": [4, 5, 6, 7, 12, 13, 31, 32, 35, 44, 45, 47, 50, 51, 56, 59, 60, 70, 74, 82, 89, 93, 97, 105, 152, 252, 257, 259, 300, 390, 392, 444, 454, 461, 462, 487, 648, 652, 656, 662, 679, 682, 735, 736, 774, 792, 811, 812, 813, 814, 815, 816, 834, 839, 840, 842, 846, 854, 869, 882], "_build": [4, 5, 12, 13, 812, 813], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 24, 25, 26, 44, 58, 62, 65, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 116, 119, 217, 392, 498, 587, 616, 645, 647, 650, 790, 792, 807, 808, 811, 812, 813, 820, 830, 832, 844, 849, 850, 853, 857, 860, 861, 867, 869, 878, 879, 881], "featur": [4, 5, 10, 11, 24, 25, 26, 27, 29, 31, 33, 43, 44, 45, 58, 62, 70, 93, 389, 403, 405, 406, 413, 414, 415, 810, 811, 830, 832, 838, 839, 840, 844, 845, 848, 849, 856, 865, 867, 871, 875, 876, 878, 883, 884, 885], "sequenti": [4, 5, 12, 13, 15, 16, 21, 22, 23, 40, 44, 45, 60, 846, 847, 878], "conv2d": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 45, 60, 63, 74, 97, 652, 669, 811, 823], "64": [4, 5, 12, 13, 21, 22, 23, 56, 58, 59, 60, 63, 69, 70, 74, 92, 93, 94, 97, 98, 102, 106, 116, 178, 248, 258, 292, 301, 302, 360, 386, 389, 411, 421, 560, 561, 608, 636, 646, 648, 650, 651, 652, 653, 657, 663, 667, 669, 671, 673, 674, 695, 698, 708, 745, 749, 759, 778, 782, 839, 849], "data_format": [4, 5, 60, 70, 74, 93, 97, 389, 395, 404, 408, 409, 410, 413, 414, 415, 426, 427, 428, 429, 431, 516, 517, 518, 521, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 795, 811, 814], "nchw": [4, 5, 60, 70, 74, 93, 97, 389, 395, 404, 409, 414, 427, 431, 521, 652, 665, 668, 669, 672, 673, 674, 811], "relu": [4, 5, 12, 13, 21, 22, 23, 40, 43, 44, 45, 56, 63, 64, 70, 85, 86, 93, 125, 316, 317, 325, 381, 642, 807, 862], "maxpool2d": [4, 5, 12, 13, 21, 22, 23, 58, 811, 832], "192": [4, 5, 60, 795, 825], "384": [4, 5, 95, 630, 651, 657, 737], "avgpool": [4, 5, 21, 22, 23], "adaptiveavgpool2d": [4, 5, 21, 22, 23, 811], "classifi": [4, 5, 10, 11, 23, 26, 27, 29, 44, 45, 58, 60, 61, 832, 838, 878, 879], "prob": [4, 5, 8, 9, 10, 11, 60, 70, 74, 93, 97, 102, 389, 396, 413, 414, 415, 523, 652, 659, 675, 757, 811], "4096": [4, 5], "_forward": [4, 5, 12, 13, 19, 20, 24, 25, 44, 45, 56, 57, 60, 852, 870], "invalid": [5, 70, 84, 93, 107, 392, 507, 653, 655, 664, 709, 721, 786, 787, 795, 839, 849], "distribut": [5, 63, 70, 76, 79, 93, 99, 102, 389, 390, 391, 396, 413, 414, 415, 448, 459, 465, 468, 470, 471, 473, 523, 524, 525, 526, 527, 654, 659, 712, 713, 714, 757, 758, 759, 760, 762, 810, 811, 838, 839, 848, 850, 871, 883], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 14, 37, 39, 40, 62, 839, 845, 849, 860, 864, 867], "homebrew": [5, 14], "site": [5, 14, 37, 39, 40, 884], "resolv": [5, 8, 9, 21, 22, 58, 60, 70, 83, 261, 401, 538, 539, 648, 655, 663, 721, 776, 777, 782, 784, 840, 846, 849, 855, 869], "account": [5, 50, 60, 62, 70, 77, 93, 100, 301, 392, 488, 648, 655, 725, 810, 825, 839, 848, 852, 861, 865, 879], "behaviour": [5, 24, 25, 37, 39, 40, 125, 128, 288, 642, 648, 837, 840, 842, 843, 844, 847, 849, 850, 852, 853, 856, 857, 858, 860, 861, 864, 865], "conflict": [5, 24, 25, 37, 39, 40, 50, 839, 840, 848, 861], "maco": 5, "incompat": [5, 168, 646], "remot": [5, 839, 843, 854, 855], "enumer": [5, 8, 9, 10, 11, 12, 13, 23, 58, 60, 800], "compress": 5, "156": [5, 292, 648, 795], "delta": [5, 70, 72, 93, 95, 391, 467, 630, 651], "37": [5, 23, 26, 37, 39, 40, 56, 64, 69, 70, 86, 92, 93, 97, 115, 126, 240, 248, 297, 300, 304, 397, 432, 528, 648, 652, 653, 657, 659, 676, 695, 745, 759, 848], "reus": [5, 58, 66, 89, 93, 100, 141, 476, 477, 484, 486, 488, 489, 490, 497, 514, 721, 722, 723, 725, 727, 728, 730, 732, 853, 864], "pack": [5, 652, 677], "83": [5, 21, 22, 23, 26, 56, 75, 97, 102, 301, 389, 401, 411, 421, 432, 538, 648, 652, 653, 676, 691, 759], "mib": 5, "user": [5, 8, 9, 10, 11, 14, 23, 24, 25, 31, 37, 39, 40, 44, 59, 60, 62, 288, 305, 392, 498, 595, 648, 650, 811, 812, 813, 825, 832, 839, 840, 842, 844, 845, 847, 848, 849, 850, 853, 858, 859, 860, 861, 864, 866, 867, 868, 869, 871, 872, 883], "samuelarmstrong": [5, 14], "examples_and_demos_cpu": 5, "metadata": [5, 58, 60, 63, 860], "setup": [5, 58, 60, 63, 839, 840, 846, 848, 854], "satisfi": [5, 23, 37, 39, 40, 58, 60, 63, 70, 389, 390, 412, 444, 849, 851], "scipi": [5, 838], "einop": [5, 37, 39, 40, 58, 60, 63, 71, 94, 560, 561, 562, 650, 849], "psutil": [5, 37, 39, 40, 58, 60, 63], "termcolor": [5, 37, 39, 40, 58, 60, 63, 87, 116], "colorama": [5, 37, 39, 40, 58, 60], "nvidia": [5, 19, 20, 23, 24, 25, 37, 39, 40, 58, 60, 63], "535": [5, 37, 39, 40, 64, 86, 131, 642, 853], "133": [5, 8, 9, 21, 22, 58, 74, 676], "diskcach": [5, 37, 39, 40, 58], "googl": [5, 6, 7, 37, 39, 40, 58, 59, 60, 62, 848], "auth": [5, 37, 39, 40], "urllib3": [5, 37, 39, 40, 58], "request": [5, 8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 37, 39, 40, 44, 45, 58, 61, 70, 218, 396, 527, 647, 830, 832, 833, 835, 838, 851, 855, 865, 867, 878], "pyvi": [5, 37, 39, 40, 44, 45], "dill": [5, 37, 39, 40, 58], "astunpars": [5, 37, 39, 40], "cloudpickl": [5, 37, 39, 40], "gast": [5, 37, 39, 40], "wheel": [5, 37, 39, 40, 58, 60, 63], "43": [5, 6, 7, 26, 56, 58, 60, 70, 93, 102, 116, 248, 389, 390, 401, 410, 442, 538, 648, 659, 660, 759, 760, 767], "six": [5, 37, 39, 40, 58, 63, 839, 867], "cffi": 5, "cachetool": [5, 37, 39, 40], "pyasn1": [5, 37, 39, 40], "rsa": [5, 37, 39, 40], "jinja2": [5, 23, 37, 39, 40], "jsonpickl": [5, 37, 39, 40], "networkx": [5, 23, 37, 39, 40, 63], "charset": [5, 37, 39, 40, 58], "idna": [5, 37, 39, 40, 58], "certifi": [5, 37, 39, 40, 58], "2017": [5, 37, 39, 40, 58, 652, 679], "2024": [5, 8, 9], "pycpars": 5, "decor": [5, 31, 32, 37, 39, 40, 50, 62, 554, 650, 795, 797, 803, 836, 843, 844, 847, 849, 850, 854, 857, 860, 861, 862, 867], "jedi": [5, 37, 39, 40], "inlin": [5, 37, 39, 40, 846], "prompt": [5, 37, 39, 40, 838, 840], "toolkit": [5, 37, 39, 40, 883, 884], "41": [5, 26, 37, 39, 40, 56, 58, 63, 69, 70, 75, 92, 93, 94, 97, 98, 126, 241, 249, 256, 287, 301, 389, 390, 397, 401, 409, 427, 432, 454, 528, 538, 555, 642, 648, 650, 653, 663, 683, 691, 784], "pygment": [5, 37, 39, 40], "stack": [5, 26, 35, 37, 39, 40, 47, 56, 60, 70, 75, 77, 87, 93, 98, 100, 115, 159, 160, 343, 383, 390, 392, 443, 482, 483, 485, 494, 499, 515, 594, 603, 626, 645, 650, 653, 655, 657, 685, 687, 688, 689, 690, 692, 693, 695, 696, 697, 699, 700, 701, 703, 704, 707, 737, 747, 748, 811, 832, 837, 843, 860, 869, 882], "traitlet": [5, 37, 39, 40], "exceptiongroup": [5, 37, 39, 40], "pexpect": [5, 37, 39, 40], "markupsaf": [5, 23, 37, 39, 40], "parso": [5, 37, 39, 40], "ptyprocess": [5, 37, 39, 40], "wcwidth": [5, 37, 39, 40], "execut": [5, 8, 9, 19, 20, 24, 25, 33, 34, 35, 37, 39, 40, 44, 45, 47, 49, 52, 59, 61, 63, 136, 138, 616, 644, 647, 650, 839, 840, 846, 847, 848, 849, 850, 851, 853, 857, 858, 860, 864, 867, 870, 871, 873, 879, 883, 884], "asttoken": [5, 37, 39, 40], "pure": [5, 37, 39, 40, 50, 60, 852, 856, 861, 867, 869, 871, 883], "eval": [5, 6, 7, 8, 9, 12, 13, 21, 22, 23, 29, 37, 39, 40, 652, 677, 813], "collect": [5, 23, 48, 58, 60, 62, 63, 65, 87, 88, 642, 647, 650, 651, 652, 654, 657, 658, 659, 750, 807, 811, 812, 813, 814, 815, 839, 848, 853, 854, 858, 859, 862, 864, 883], "creat": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 33, 34, 35, 37, 39, 40, 44, 45, 46, 47, 49, 50, 51, 58, 59, 60, 62, 63, 66, 69, 70, 79, 87, 89, 92, 93, 98, 102, 111, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 161, 162, 163, 288, 326, 327, 337, 339, 341, 342, 383, 389, 390, 392, 396, 408, 409, 410, 431, 448, 459, 465, 474, 482, 498, 504, 523, 524, 525, 526, 527, 595, 612, 629, 641, 645, 648, 650, 651, 659, 698, 757, 758, 759, 760, 762, 792, 803, 808, 810, 811, 812, 813, 814, 815, 816, 832, 833, 835, 839, 840, 841, 844, 845, 846, 848, 849, 850, 853, 857, 858, 860, 861, 862, 864, 867, 870, 872, 873, 878, 879, 881, 883, 884], "py3": [5, 23, 58, 60, 63], "whl": [5, 23, 58, 59, 60, 63], "76449": 5, "sha256": [5, 58, 60, 63], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 58, 60, 63, 67, 70, 71, 75, 77, 87, 90, 93, 94, 98, 100, 168, 389, 390, 434, 442, 446, 460, 464, 564, 650, 653, 655, 707, 727, 792, 793, 811, 812, 813, 834, 840, 844, 845, 847, 852, 858, 860, 861, 862, 870, 873, 879], "directori": [5, 8, 9, 23, 58, 59, 60, 63, 604, 627, 647, 650, 830, 834, 838, 839, 840, 846, 848, 854, 861, 864, 870, 872], "privat": [5, 815, 861, 864], "var": [5, 14, 57, 83, 106, 108, 135, 136, 137, 138, 644, 656, 663, 734, 735, 817, 839, 851, 870], "3x": [5, 19, 20], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 58, 60], "abb7vdwj": 5, "01": [5, 10, 11, 21, 22, 37, 40, 60, 66, 70, 71, 72, 75, 93, 94, 95, 98, 102, 152, 279, 297, 298, 326, 332, 357, 358, 365, 383, 389, 411, 421, 422, 564, 607, 608, 630, 631, 636, 645, 648, 650, 651, 653, 656, 659, 690, 700, 735, 736, 759, 760, 795, 845], "2d": [5, 44, 45, 60, 70, 93, 110, 327, 383, 389, 390, 392, 401, 404, 405, 413, 414, 456, 463, 477, 487, 537, 811, 830, 861, 867], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 23, 58, 60, 63, 813, 835, 839, 844], "built": [5, 42, 44, 45, 50, 58, 60, 63, 139, 645, 811, 812, 813, 839, 840, 846, 847, 864, 872, 879, 883], "zsh": 5, "found": [5, 10, 11, 58, 60, 61, 63, 75, 77, 81, 87, 93, 98, 100, 104, 116, 215, 401, 483, 538, 647, 657, 687, 693, 729, 748, 768, 826, 835, 838, 839, 840, 844, 845, 846, 847, 849, 850, 852, 855, 858, 860, 861], "filenotfounderror": 5, "traceback": [5, 14, 864], "recent": [5, 14, 60, 829, 839, 840, 864], "line": [5, 8, 9, 14, 19, 20, 24, 25, 26, 35, 36, 39, 44, 45, 47, 48, 59, 60, 304, 648, 830, 832, 839, 843, 844, 848, 850, 851, 853, 861, 864, 867, 878], "get_ipython": 5, "system": [5, 24, 25, 37, 39, 40, 60, 390, 460, 653, 702, 795, 832, 839, 840, 841, 845, 848, 849, 871, 878, 883], "34": [5, 14, 21, 22, 26, 56, 58, 92, 93, 94, 102, 182, 252, 279, 300, 389, 401, 432, 544, 560, 561, 646, 648, 650, 652, 653, 659, 676, 695, 759, 760, 850], "interactiveshel": 5, "324": [5, 843], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 66, 70, 77, 89, 93, 100, 104, 141, 389, 391, 423, 434, 471, 476, 477, 484, 486, 488, 489, 490, 497, 514, 655, 721, 722, 723, 725, 727, 728, 730, 732, 771, 797, 827, 853], "319": 5, "won": [5, 839, 840, 847, 849, 872, 879, 881], "fd": [5, 74, 97, 652, 665, 670, 671, 672, 673], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 34, 35, 36, 38, 44, 46, 47, 48, 49, 50, 51, 61, 63, 66, 69, 70, 77, 89, 92, 93, 97, 100, 105, 152, 170, 193, 238, 258, 264, 267, 280, 298, 355, 360, 372, 386, 389, 390, 391, 392, 399, 401, 432, 434, 443, 468, 477, 478, 487, 488, 529, 530, 547, 645, 646, 648, 653, 655, 659, 662, 688, 725, 760, 773, 826, 832, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 875, 878, 879, 883, 885], "crash": 5, "know": [5, 37, 49, 50, 51, 81, 661, 768, 769, 770, 771, 832, 834, 838, 840, 850, 858, 862, 864, 867, 881, 884], "what": [5, 8, 9, 19, 20, 24, 25, 31, 36, 44, 45, 48, 49, 52, 57, 58, 389, 423, 434, 797, 826, 838, 840, 842, 847, 848, 851, 852, 855, 856, 858, 859, 860, 861, 862, 864, 868, 871, 876, 884], "321": 5, "builtin": [5, 21, 22, 839], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 44, 45, 58, 70, 76, 93, 99, 391, 468, 469, 470, 472, 473, 654, 712, 840, 848, 849, 883], "kernel": [5, 70, 74, 93, 97, 389, 408, 409, 410, 426, 427, 428, 429, 652, 678, 869, 871, 883], "while": [5, 8, 9, 10, 11, 23, 26, 44, 45, 52, 70, 74, 87, 93, 97, 110, 111, 116, 138, 155, 193, 261, 262, 282, 283, 361, 386, 389, 390, 392, 434, 435, 457, 501, 502, 536, 644, 645, 646, 648, 652, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 768, 780, 783, 793, 832, 836, 838, 839, 840, 844, 845, 846, 848, 849, 850, 851, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 869, 871, 872, 879, 883, 885], "review": [5, 70, 93, 390, 465, 834, 835, 838, 840, 846, 848, 851, 861, 865], "identifi": [5, 70, 93, 344, 345, 346, 383, 838, 843, 848, 849, 864, 867], "caus": [5, 26, 391, 468, 839, 840, 843, 845, 847, 848, 849, 851, 860, 862, 864, 871], "failur": [5, 840, 848, 862, 864], "href": 5, "aka": 5, "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 23, 27, 30, 33, 34, 35, 36, 40, 42, 43, 44, 45, 46, 47, 56, 58, 59, 60, 64, 69, 70, 75, 77, 81, 86, 92, 93, 98, 100, 104, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 167, 259, 261, 277, 292, 305, 309, 314, 315, 317, 377, 381, 387, 390, 391, 392, 438, 440, 452, 454, 457, 470, 476, 477, 478, 483, 505, 595, 642, 645, 646, 648, 650, 653, 655, 661, 687, 693, 696, 699, 701, 703, 710, 722, 729, 768, 769, 770, 771, 797, 807, 826, 832, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 876, 878, 881, 883, 884, 885], "viewoutput": 5, "log": [5, 8, 9, 23, 66, 69, 70, 75, 89, 92, 93, 98, 131, 152, 277, 279, 292, 314, 315, 368, 375, 381, 386, 391, 396, 468, 470, 471, 523, 642, 645, 648, 701, 795, 797, 798, 807, 840, 847, 848, 851, 857, 860, 861, 862, 864, 866, 867, 869], "further": [5, 8, 9, 10, 11, 23, 33, 87, 116, 797, 832, 840, 843, 844, 848, 851, 853, 856, 857, 860, 861, 863, 864, 870], "detail": [5, 8, 9, 10, 11, 23, 35, 47, 60, 64, 69, 70, 75, 77, 81, 86, 92, 93, 94, 98, 100, 104, 123, 124, 125, 126, 127, 128, 129, 130, 131, 147, 158, 305, 309, 314, 315, 317, 381, 390, 440, 483, 563, 642, 645, 648, 661, 687, 693, 699, 703, 729, 768, 769, 770, 771, 807, 832, 838, 840, 843, 845, 846, 847, 848, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 870], "bidirect": [6, 7, 652, 677], "encod": [6, 7, 27, 29, 44, 45, 58, 60, 71, 76, 94, 99, 564, 650, 654, 712, 832, 878], "mlm": [6, 7], "choos": [6, 7, 58, 60, 68, 80, 81, 91, 228, 254, 261, 282, 283, 287, 349, 350, 386, 392, 647, 648, 660, 661, 663, 767, 768, 769, 770, 771, 779, 780, 781, 783, 795, 838, 839, 840, 858, 864, 879], "librari": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 40, 42, 56, 58, 68, 81, 91, 228, 259, 261, 277, 282, 283, 305, 349, 350, 386, 647, 648, 653, 661, 663, 689, 690, 768, 769, 770, 771, 779, 780, 781, 783, 830, 838, 839, 843, 849, 871, 876, 879, 883, 885], "pretrain": [6, 7, 19, 20, 27, 28, 29, 44, 45, 63, 832, 878], "save": [6, 7, 8, 9, 21, 22, 23, 58, 70, 87, 93, 401, 544, 604, 627, 647, 650, 664, 813, 830, 839, 848, 855, 864, 870, 871, 876, 885], "some": [6, 7, 12, 13, 15, 16, 17, 23, 24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 42, 44, 45, 49, 50, 56, 60, 61, 87, 95, 259, 261, 277, 389, 413, 414, 415, 630, 631, 634, 636, 637, 638, 647, 648, 651, 657, 748, 811, 832, 836, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 871, 872, 873, 878, 879, 883, 884, 885], "mohame54": [6, 7], "automodel": [6, 7, 24, 25, 44], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 58, 59, 60, 61, 62, 63, 87, 390, 461, 664, 813, 864, 871, 885], "token": [6, 7, 60, 841], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 24, 25, 44, 61, 878, 879], "base": [6, 7, 10, 11, 26, 58, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 118, 120, 152, 161, 193, 257, 258, 275, 276, 277, 278, 292, 333, 342, 344, 351, 354, 360, 367, 383, 386, 389, 390, 391, 399, 432, 436, 461, 466, 529, 597, 608, 620, 645, 646, 648, 650, 653, 655, 661, 663, 694, 721, 768, 769, 770, 771, 778, 793, 796, 797, 800, 801, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 823, 826, 827, 830, 832, 839, 840, 841, 843, 847, 848, 849, 853, 856, 858, 859, 860, 862, 863, 864, 865, 866, 867, 869, 883], "uncas": [6, 7], "evalu": [6, 7, 69, 70, 87, 92, 93, 257, 259, 275, 276, 277, 278, 282, 289, 291, 298, 302, 336, 368, 379, 380, 383, 388, 390, 391, 392, 457, 466, 471, 495, 641, 648, 651, 657, 664, 747, 748, 786, 787, 812, 813, 840, 847, 849, 857, 858, 883], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 19, 20, 23, 24, 25, 27, 29, 39, 44, 45, 59, 66, 69, 70, 79, 83, 89, 92, 93, 102, 106, 151, 152, 306, 333, 383, 389, 391, 392, 396, 413, 414, 415, 425, 435, 437, 466, 471, 502, 523, 524, 525, 526, 527, 645, 648, 659, 663, 757, 758, 759, 760, 783, 785, 811, 862, 864], "test": [6, 7, 10, 11, 34, 35, 37, 46, 47, 49, 50, 51, 59, 60, 69, 71, 84, 92, 94, 107, 138, 185, 189, 268, 269, 270, 271, 294, 389, 413, 414, 415, 584, 644, 646, 648, 650, 664, 786, 787, 790, 793, 796, 826, 832, 834, 836, 837, 842, 846, 849, 851, 853, 855, 858, 861, 863, 865, 871, 872, 878, 879, 881, 883], "did": [6, 7, 58, 838, 846], "realli": [6, 7, 56, 839, 847, 854, 871, 874, 879], "input": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 23, 24, 25, 27, 29, 39, 40, 42, 44, 49, 50, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 208, 210, 211, 224, 227, 228, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 455, 457, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 570, 571, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 591, 592, 593, 599, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 617, 622, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 745, 746, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 796, 803, 807, 810, 811, 812, 813, 814, 823, 825, 826, 830, 843, 844, 845, 847, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 878, 879, 884], "pad": [6, 7, 21, 22, 23, 58, 60, 70, 74, 77, 93, 97, 100, 111, 113, 389, 392, 408, 409, 410, 411, 412, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 499, 564, 650, 652, 655, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 720, 733, 797, 811], "longest": [6, 7, 392, 499], "return_tensor": [6, 7, 10, 11, 24, 25, 44, 61, 878, 879], "pt": [6, 7, 10, 11, 24, 25, 44, 879], "max_length": [6, 7, 87], "512": [6, 7, 12, 13, 21, 22, 23, 58, 60, 98, 652, 667, 708, 832], "input_id": [6, 7], "101": [6, 7, 26, 59, 652, 653, 657, 676, 692, 743], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 26, 70, 93, 102, 411, 758], "token_type_id": [6, 7], "attention_mask": [6, 7, 74, 97, 652, 679], "pooler": [6, 7], "compar": [6, 7, 15, 16, 17, 19, 20, 24, 25, 44, 57, 61, 63, 70, 71, 81, 82, 83, 87, 93, 94, 105, 106, 348, 365, 386, 401, 545, 549, 552, 650, 652, 661, 662, 663, 677, 768, 769, 770, 771, 772, 775, 781, 792, 832, 845, 851, 853, 862, 864, 867, 882, 883], "no_grad": [6, 7, 58, 879], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 19, 20, 57, 60, 66, 70, 71, 74, 75, 79, 89, 92, 93, 97, 98, 102, 110, 111, 135, 146, 159, 160, 161, 281, 327, 342, 343, 383, 390, 392, 396, 399, 401, 441, 456, 460, 462, 464, 505, 509, 523, 524, 525, 526, 527, 530, 540, 552, 644, 645, 650, 652, 653, 657, 659, 660, 679, 682, 686, 693, 694, 700, 702, 703, 704, 707, 745, 758, 759, 760, 766, 842, 843, 861, 862, 869, 870, 879, 883], "ivy_output": [6, 7, 61], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 42, 44, 61, 63, 70, 93, 386], "detach": [6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 44, 859], "rtol": [6, 7, 10, 11, 27, 29, 70, 75, 93, 98, 348, 365, 386, 653, 696, 699, 790, 792, 836, 854, 862], "005": [6, 7, 21, 22, 70, 93, 348, 365, 386, 467], "atol": [6, 7, 10, 11, 14, 15, 16, 17, 19, 20, 23, 24, 25, 42, 44, 70, 75, 93, 98, 348, 365, 386, 653, 696, 790, 792, 836, 854, 862], "768": [6, 7], "fn": [6, 7, 61, 63, 70, 87, 90, 93, 119, 180, 181, 213, 214, 217, 392, 475, 550, 565, 566, 616, 646, 647, 650, 657, 743, 744, 745, 747, 748, 749, 790, 792, 817, 820, 823, 827, 828, 830, 850, 853, 860, 861, 870, 879], "finish": [6, 7, 10, 11, 31, 44, 45, 56, 59, 833, 838, 839, 842], "sec": [6, 7], "procedur": [6, 7, 846, 848, 851, 862], "60": [6, 7, 23, 56, 60, 69, 83, 92, 94, 102, 106, 238, 272, 392, 504, 568, 576, 592, 607, 629, 648, 650, 653, 657, 663, 698, 740, 758, 776, 778, 782, 826, 848], "big": [6, 7, 810, 833, 871, 883], "jnp": [6, 7, 34, 39, 44, 45, 46, 47, 50, 56, 58, 62, 832, 849, 850, 853, 856, 860, 865, 869, 878, 881], "ref": [6, 7, 12, 13, 19, 20, 24, 25, 94, 98, 273, 287, 290, 296, 303, 648, 655, 729, 839, 860], "fast": [6, 7, 37, 49, 70, 389, 412, 883], "valu": [6, 7, 26, 56, 57, 59, 60, 66, 67, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 113, 115, 116, 118, 131, 135, 136, 138, 139, 146, 149, 150, 151, 152, 155, 161, 166, 183, 187, 193, 226, 227, 234, 235, 236, 237, 239, 241, 242, 243, 250, 254, 255, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 313, 316, 321, 324, 325, 327, 334, 336, 342, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 362, 363, 365, 366, 368, 371, 373, 374, 375, 376, 377, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 400, 401, 412, 425, 432, 433, 435, 437, 441, 444, 448, 454, 459, 461, 463, 465, 466, 467, 469, 470, 471, 472, 481, 487, 492, 498, 499, 504, 506, 507, 508, 509, 511, 513, 516, 518, 523, 524, 526, 527, 533, 535, 538, 539, 540, 543, 544, 545, 546, 547, 553, 555, 556, 557, 559, 564, 567, 568, 570, 575, 576, 577, 584, 591, 592, 596, 597, 598, 601, 610, 615, 620, 621, 624, 627, 628, 629, 630, 631, 632, 636, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 682, 686, 689, 690, 694, 695, 696, 699, 700, 701, 702, 703, 704, 707, 710, 718, 719, 720, 724, 725, 733, 734, 735, 739, 741, 742, 743, 744, 745, 750, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 790, 792, 795, 796, 797, 798, 800, 802, 807, 810, 811, 812, 813, 814, 815, 823, 830, 836, 839, 840, 843, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 860, 861, 864, 866, 867, 869, 871, 879, 883, 884], "emerg": [8, 9, 875, 883], "popular": [8, 9, 10, 11, 843, 883], "Its": [8, 9, 70, 391, 466, 883], "python": [8, 9, 10, 11, 21, 22, 27, 33, 47, 52, 56, 58, 59, 60, 62, 63, 70, 79, 93, 102, 139, 221, 233, 261, 296, 389, 396, 435, 523, 524, 525, 526, 527, 629, 645, 647, 648, 650, 659, 757, 758, 759, 760, 762, 820, 825, 826, 830, 832, 837, 839, 840, 843, 846, 847, 848, 853, 854, 861, 863, 864, 870, 871, 873, 879, 883, 884], "superior": [8, 9], "eager": [8, 9, 23, 31, 32, 35, 38, 40, 47, 50, 51, 62, 830, 847, 871, 883], "mode": [8, 9, 10, 11, 12, 13, 50, 62, 70, 75, 87, 93, 98, 109, 110, 111, 112, 113, 114, 224, 227, 232, 237, 254, 287, 341, 379, 380, 383, 388, 389, 390, 392, 420, 425, 433, 434, 446, 448, 456, 458, 459, 465, 481, 491, 496, 498, 500, 502, 504, 507, 508, 512, 593, 594, 595, 599, 600, 602, 603, 617, 618, 622, 623, 625, 626, 647, 648, 650, 652, 653, 677, 700, 803, 811, 812, 813, 829, 830, 839, 840, 842, 847, 850, 851, 854, 867, 871, 883], "made": [8, 9, 19, 20, 24, 25, 44, 70, 77, 93, 390, 392, 450, 476, 477, 478, 729, 838, 840, 841, 843, 844, 847, 848, 853, 855, 857, 859, 860, 861, 865, 867, 869, 883], "favorit": [8, 9, 875], "increasingli": [8, 9, 851, 879], "span": [8, 9, 840], "industri": [8, 9, 875, 883], "still": [8, 9, 23, 26, 36, 38, 39, 44, 45, 47, 48, 51, 75, 87, 98, 653, 703, 795, 838, 839, 840, 844, 845, 849, 852, 853, 855, 857, 860, 861, 864, 867, 871, 878, 879, 883], "practition": [8, 9, 10, 11, 23, 883], "larg": [8, 9, 23, 59, 69, 70, 92, 93, 237, 254, 261, 287, 288, 392, 401, 507, 537, 648, 653, 701, 834, 839, 840, 846, 848, 854, 875, 879, 883], "unabl": [8, 9, 14, 23, 24, 25, 840, 867], "rich": [8, 9, 23, 876], "ecosystem": [8, 9, 23, 875, 883], "state": [8, 9, 23, 30, 41, 42, 58, 74, 93, 97, 113, 201, 202, 203, 204, 205, 287, 389, 435, 617, 619, 622, 624, 625, 646, 648, 650, 652, 677, 678, 793, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 836, 839, 846, 849, 850, 852, 853, 854, 855, 856, 861, 864, 869, 876, 878], "art": [8, 9, 23, 42, 876], "sota": [8, 9, 10, 11, 23], "inaccur": [8, 9, 23], "dynam": [8, 9, 15, 16, 23, 51, 655, 725, 813, 820, 842, 848, 849, 850, 860, 861, 866, 870, 875, 879, 883], "connect": [8, 9, 21, 22, 23, 58, 811, 834, 839, 846, 863], "layer": [8, 9, 10, 11, 15, 16, 17, 23, 27, 29, 33, 39, 40, 44, 45, 56, 61, 70, 78, 93, 101, 658, 677, 678, 679, 756, 808, 810, 812, 813, 814, 815, 816, 832, 852, 861, 865, 867, 869, 878, 883], "togeth": [8, 9, 23, 70, 87, 93, 348, 365, 386, 390, 444, 816, 841, 844, 847, 849, 860, 861, 864, 865, 867, 869, 871, 883, 884], "For": [8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 33, 35, 44, 45, 47, 50, 52, 66, 70, 75, 81, 93, 98, 139, 153, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 268, 269, 270, 275, 276, 277, 278, 279, 282, 287, 289, 290, 292, 296, 297, 298, 299, 300, 301, 304, 305, 307, 344, 345, 346, 349, 350, 352, 373, 383, 386, 390, 392, 456, 458, 478, 498, 502, 645, 648, 653, 655, 661, 663, 701, 703, 707, 718, 729, 768, 769, 770, 771, 779, 781, 782, 784, 796, 808, 838, 839, 840, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 876, 879, 884], "seamless": [8, 9, 23, 870, 876, 885], "wai": [8, 9, 23, 26, 31, 32, 33, 36, 38, 44, 48, 50, 56, 110, 113, 832, 834, 837, 838, 839, 843, 844, 845, 846, 848, 849, 850, 860, 861, 862, 864, 867, 871, 872, 881], "introduc": [8, 9, 23, 44, 45, 261, 648, 655, 661, 726, 768, 838, 847, 848, 849, 858, 862, 864, 867], "pipelin": [8, 9, 10, 11, 23, 832, 834, 842, 843, 844, 862, 865, 873, 878, 883, 884], "blog": [8, 9, 10, 11, 23, 840], "through": [8, 9, 10, 11, 23, 42, 43, 45, 50, 58, 70, 93, 113, 242, 401, 543, 544, 648, 657, 740, 746, 813, 825, 833, 836, 837, 838, 840, 841, 842, 845, 846, 847, 848, 850, 851, 853, 854, 855, 857, 858, 860, 861, 862, 864, 866, 867, 869, 879, 883, 884], "train": [8, 9, 10, 11, 27, 29, 40, 44, 45, 61, 70, 72, 74, 93, 95, 97, 113, 389, 390, 395, 413, 414, 415, 462, 516, 518, 630, 631, 636, 651, 652, 675, 677, 679, 682, 810, 811, 812, 813, 814, 832, 847, 850, 857, 871, 878, 885], "illustr": [8, 9, 23, 35, 47, 845, 869], "workflow": [8, 9, 23, 36, 48, 59, 838, 840, 841, 845, 849, 859, 861, 873, 885], "pre": [8, 9, 44, 45, 836, 838, 863, 864, 869, 871, 872, 883], "convnext": [8, 9, 19, 20, 23], "belong": [8, 9, 87, 838, 843], "convolut": [8, 9, 23, 40, 70, 74, 93, 97, 389, 410, 428, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 797, 811, 830, 878, 883], "neural": [8, 9, 652, 807, 811, 832, 878, 883, 885], "network": [8, 9, 33, 40, 44, 45, 56, 58, 63, 652, 676, 807, 810, 811, 832, 847, 857, 870, 878, 883, 885], "cnn": [8, 9, 44, 45, 883], "architectur": [8, 9, 23, 61, 832, 839, 871, 883, 885], "inspir": [8, 9, 844], "vision": [8, 9, 10, 11, 42, 44, 45, 63], "perform": [8, 9, 12, 13, 14, 17, 26, 35, 37, 39, 40, 44, 45, 47, 49, 56, 58, 66, 70, 74, 75, 83, 84, 89, 93, 94, 97, 98, 106, 107, 126, 130, 151, 152, 224, 232, 254, 287, 308, 355, 377, 386, 387, 389, 390, 392, 399, 401, 412, 413, 414, 415, 417, 418, 422, 423, 431, 433, 459, 475, 530, 538, 539, 560, 561, 562, 575, 576, 577, 593, 603, 642, 645, 647, 648, 650, 652, 653, 656, 657, 663, 664, 675, 678, 694, 703, 705, 710, 734, 735, 736, 744, 745, 776, 777, 780, 786, 787, 790, 807, 811, 826, 830, 843, 844, 845, 847, 849, 850, 851, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 871, 875, 876, 878, 879, 880, 883, 884], "strength": [8, 9, 875, 876], "wise": [8, 9, 44, 64, 69, 70, 75, 86, 92, 93, 98, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 234, 235, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 253, 254, 255, 256, 258, 261, 262, 263, 264, 265, 266, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 293, 295, 296, 303, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 321, 323, 324, 325, 348, 351, 356, 359, 360, 361, 364, 365, 366, 367, 371, 372, 375, 376, 381, 386, 389, 390, 392, 413, 414, 415, 442, 449, 485, 492, 494, 495, 515, 642, 645, 648, 655, 684, 718, 815, 867], "supervis": [8, 9, 10, 11, 70, 391, 466], "convent": [8, 9, 301, 648, 653, 663, 693, 778, 840, 845, 856, 865], "demonstr": [8, 9, 10, 11, 23, 26, 39, 44, 45, 59, 841, 849, 851, 853], "improv": [8, 9, 19, 20, 24, 25, 26, 44, 47, 835, 840, 849, 856, 857, 867, 869, 873, 879, 883], "scalabl": [8, 9, 869], "sometim": [8, 9, 838, 839, 840, 843, 849, 857, 861, 864, 867], "rival": [8, 9], "even": [8, 9, 19, 20, 23, 39, 44, 45, 70, 93, 110, 254, 287, 292, 297, 392, 401, 498, 537, 648, 832, 839, 840, 841, 843, 845, 848, 849, 850, 852, 856, 857, 860, 861, 862, 867, 871], "downsampl": [8, 9, 21, 22, 23, 70, 93, 425], "detial": [8, 9], "outsid": [8, 9, 23, 655, 718, 729, 849, 850, 857], "scope": [8, 9, 23, 845, 884], "demo": [8, 9, 10, 11, 12, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 45, 52, 56, 60, 832], "interest": [8, 9, 10, 11, 23, 40, 44, 56, 254, 287, 648, 838, 840], "reader": [8, 9, 10, 11, 23], "paper": [8, 9, 23, 652, 679, 832], "mostli": [8, 9, 23, 850, 860, 864], "kera": [8, 9, 15, 16, 17, 23, 27, 29, 40, 44, 45, 61, 62, 808, 832, 878], "wrapper": [8, 9, 35, 70, 93, 312, 803, 844, 846, 847, 849, 853, 857, 860, 861, 864, 873, 883], "prepar": [8, 9, 23, 45, 58, 60, 63, 848], "data": [8, 9, 10, 11, 29, 37, 39, 40, 45, 50, 58, 60, 63, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 84, 86, 87, 89, 92, 93, 94, 97, 98, 100, 102, 103, 104, 105, 106, 107, 115, 116, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 169, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 206, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 314, 315, 316, 317, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 349, 350, 351, 368, 373, 381, 383, 386, 389, 390, 392, 396, 400, 401, 404, 413, 414, 415, 431, 433, 435, 441, 443, 463, 481, 504, 507, 508, 510, 511, 523, 524, 525, 526, 527, 533, 537, 538, 539, 543, 546, 547, 564, 577, 579, 580, 583, 610, 642, 645, 647, 648, 650, 652, 653, 655, 657, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 719, 722, 723, 725, 726, 728, 729, 733, 741, 758, 759, 760, 762, 763, 764, 766, 767, 772, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 793, 795, 796, 797, 798, 803, 807, 810, 811, 812, 813, 817, 826, 830, 839, 842, 843, 844, 845, 846, 847, 850, 852, 856, 857, 858, 860, 862, 865, 867, 869, 873, 883, 884], "experiment": [8, 17, 23, 830, 836, 840, 849, 861, 865, 869, 883], "set_memory_growth": [8, 23], "list_physical_devic": [8, 9, 23], "manual_se": [8, 9, 10, 11, 23, 40], "set_se": [8, 9, 23], "51": [8, 9, 23, 26, 56, 60, 69, 70, 92, 93, 94, 102, 249, 287, 300, 390, 411, 465, 648, 760, 795], "38": [8, 9, 24, 25, 26, 56, 58, 60, 63, 67, 70, 92, 93, 102, 179, 304, 371, 386, 389, 401, 409, 428, 431, 432, 538, 646, 648, 653, 695, 795, 851], "926817": [8, 9], "e": [8, 9, 24, 25, 44, 61, 62, 66, 70, 75, 79, 81, 82, 83, 85, 92, 93, 98, 102, 105, 106, 108, 110, 111, 115, 143, 152, 153, 156, 157, 161, 165, 194, 207, 234, 235, 236, 240, 242, 243, 246, 248, 250, 254, 255, 257, 260, 261, 267, 268, 275, 276, 277, 278, 285, 286, 287, 288, 290, 294, 296, 297, 300, 301, 305, 315, 342, 349, 350, 383, 386, 389, 390, 391, 392, 396, 401, 402, 408, 409, 412, 426, 427, 428, 429, 433, 446, 449, 457, 471, 507, 511, 523, 524, 525, 526, 527, 538, 539, 548, 643, 645, 646, 647, 648, 652, 653, 655, 657, 659, 661, 662, 663, 679, 684, 689, 690, 693, 694, 696, 699, 702, 703, 704, 707, 710, 721, 729, 740, 744, 745, 746, 749, 754, 755, 758, 759, 760, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 811, 825, 826, 830, 832, 833, 836, 838, 839, 840, 842, 843, 845, 847, 849, 853, 854, 859, 861, 864, 869, 871, 872, 873, 879], "extern": [8, 9, 847, 856, 861, 864, 865], "local_xla": [8, 9], "xla": [8, 9, 24, 25, 861, 871, 873, 883], "stream_executor": [8, 9, 24, 25], "cuda_dnn": [8, 9, 24, 25], "cc": [8, 9, 24, 25, 37, 40, 59, 854], "9261": [8, 9], "regist": [8, 9, 24, 25, 813, 840, 879], "cudnn": [8, 9, 23, 24, 25], "factori": [8, 9, 24, 25, 70, 391, 470, 471, 826], "plugin": [8, 9, 24, 25, 839], "926873": [8, 9], "cuda_fft": [8, 9, 24, 25], "607": [8, 9], "cufft": [8, 9, 23, 24, 25], "928224": [8, 9], "cuda_bla": [8, 9, 24, 25], "1515": [8, 9], "cubla": [8, 9, 23, 24, 25], "936743": [8, 9], "cpu_feature_guard": [8, 9, 37, 40], "182": [8, 9, 37, 40, 93], "instruct": [8, 9, 37, 40, 87, 116, 832, 838, 839, 843, 853, 855, 862, 864, 872, 884], "avx2": [8, 9, 37, 40], "fma": [8, 9, 37, 40], "rebuild": [8, 9, 37, 40, 87, 116], "flag": [8, 9, 23, 37, 40, 87, 210, 391, 401, 468, 537, 647, 652, 679, 792, 803, 814, 840, 849, 850, 860, 861, 862, 864, 878, 879], "40": [8, 9, 14, 15, 16, 23, 26, 56, 58, 60, 70, 71, 92, 93, 94, 102, 106, 116, 248, 252, 272, 301, 363, 386, 389, 392, 409, 411, 421, 427, 504, 560, 562, 567, 568, 592, 607, 629, 632, 648, 650, 651, 653, 657, 663, 692, 698, 746, 759, 778, 782, 848], "071672": [8, 9], "w": [8, 9, 12, 13, 24, 25, 59, 60, 70, 71, 72, 74, 87, 92, 93, 94, 95, 97, 110, 281, 363, 378, 386, 388, 389, 390, 395, 408, 409, 410, 412, 426, 427, 428, 429, 445, 465, 521, 536, 560, 562, 607, 630, 631, 632, 634, 636, 637, 638, 650, 651, 652, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 743, 842, 859, 870, 878], "tf2tensorrt": [8, 9, 24, 25], "py_util": [8, 9, 24, 25], "trt": [8, 9, 24, 25], "find": [8, 9, 14, 24, 25, 31, 36, 42, 43, 59, 60, 63, 75, 81, 87, 98, 653, 657, 661, 696, 739, 768, 769, 770, 771, 825, 826, 832, 833, 834, 835, 837, 838, 839, 840, 843, 846, 848, 854, 859, 864, 867, 869, 872, 873, 879], "tensorrt": [8, 9, 24, 25], "map": [8, 9, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 182, 186, 187, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 386, 389, 413, 414, 415, 433, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 505, 507, 508, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 629, 634, 640, 650, 657, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 744, 745, 749, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 826, 844, 847, 849, 856, 857, 861, 864, 865, 871, 873, 878, 884], "dataset": [8, 9, 10, 11, 23, 26, 44, 87, 878, 879], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 58, 60, 70, 77, 87, 89, 93, 100, 148, 392, 488, 645, 655, 725, 838, 839, 846, 848, 854, 864, 866, 867, 883], "185": [8, 9, 21, 22, 58, 86], "199": [8, 9, 21, 22, 58, 240, 648], "108": [8, 9, 21, 22, 26, 37, 39, 40, 58, 652, 663, 676, 778], "109": [8, 9, 21, 22, 58, 75, 653, 691], "111": [8, 9, 21, 22, 58, 657, 755], "443": [8, 9, 21, 22, 58, 299, 648], "sent": [8, 9, 21, 22, 58], "await": [8, 9, 21, 22, 58], "respons": [8, 9, 21, 22, 23, 58, 395, 521, 840, 848, 849], "200": [8, 9, 21, 22, 23, 26, 58, 94, 97, 248, 389, 413, 414, 568, 592, 648, 650, 825], "ok": [8, 9, 21, 22, 58, 839], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 21, 22, 58], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 23, 26], "url": [8, 9, 10, 11, 19, 20, 23, 24, 25, 39, 44, 45, 58, 61, 832, 878], "cocodataset": [8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 45, 61, 832, 878], "org": [8, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 39, 44, 45, 58, 60, 61, 63, 69, 70, 92, 93, 95, 161, 169, 257, 267, 268, 283, 342, 349, 350, 383, 386, 389, 392, 401, 433, 507, 537, 630, 631, 645, 646, 648, 651, 653, 655, 663, 701, 702, 733, 783, 832, 852, 878], "val2017": [8, 9, 10, 11, 19, 20, 24, 25, 44, 61], "000000039769": [8, 9, 10, 11, 19, 20, 24, 25, 44, 61], "stream": [8, 9, 10, 11, 19, 20, 24, 25, 39, 44, 45, 58, 61, 68, 91, 228, 647, 832, 878], "initialis": [8, 9, 23, 843, 861, 864], "api": [8, 9, 10, 11, 14, 23, 30, 35, 40, 41, 47, 60, 62, 69, 70, 75, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 156, 157, 158, 159, 160, 162, 163, 169, 179, 182, 192, 194, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 349, 350, 352, 386, 389, 392, 401, 433, 507, 511, 537, 645, 646, 648, 653, 655, 660, 661, 662, 663, 664, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 719, 721, 722, 723, 725, 726, 728, 729, 733, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 832, 836, 839, 840, 842, 844, 846, 849, 850, 851, 852, 853, 854, 856, 858, 860, 861, 862, 864, 867, 870, 871, 873, 875, 883], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 23, 35, 47, 66, 67, 70, 87, 90, 93, 153, 167, 194, 336, 391, 468, 476, 477, 478, 632, 645, 646, 651, 856, 857, 859, 860, 861, 864, 871, 879, 881, 884], "regardless": [8, 9, 23, 44, 45, 56, 87, 833, 849, 853], "host": [8, 9, 23, 830, 834, 848, 871], "convnext_xlarg": [8, 9], "include_top": [8, 9, 29, 832], "include_preprocess": [8, 9], "input_tensor": [8, 9, 70, 93, 390, 391, 462, 466, 471, 861], "input_shap": [8, 9, 19, 20, 29, 40, 44, 45, 832], "pool": [8, 9, 70, 93, 97, 389, 403, 404, 405, 406, 408, 409, 410, 426, 427, 428, 429, 432, 811, 839], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 59], "gpu_devic": [8, 9], "1929": [8, 9], "job": [8, 9, 44, 45, 832, 846, 848], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 19, 20], "pcie": [8, 9], "16gb": [8, 9], "pci": [8, 9], "bu": [8, 9, 98], "id": [8, 9, 26, 59, 70, 93, 210, 344, 345, 346, 383, 572, 647, 650, 832, 837, 839, 844, 846, 847, 855, 859, 864, 872], "0001": [8, 9, 69, 70, 93, 297, 298, 390, 459, 465, 795, 798, 815], "over": [8, 9, 10, 11, 15, 16, 23, 33, 40, 45, 47, 58, 70, 75, 83, 84, 85, 90, 93, 97, 98, 106, 107, 108, 110, 135, 334, 335, 349, 350, 363, 370, 383, 386, 389, 390, 391, 392, 399, 401, 403, 404, 405, 406, 409, 418, 423, 427, 431, 432, 433, 434, 435, 436, 458, 466, 475, 488, 504, 507, 508, 511, 530, 540, 546, 595, 629, 644, 650, 653, 658, 659, 663, 664, 684, 694, 705, 707, 709, 710, 756, 760, 779, 780, 781, 782, 783, 784, 785, 786, 787, 811, 814, 820, 825, 832, 839, 840, 845, 851, 852, 859, 860, 862, 865, 869, 871, 875, 883], "wonder": [8, 9], "why": [8, 9, 33, 832, 840, 860, 874], "One": [8, 9, 10, 11, 23, 60, 70, 71, 77, 79, 93, 94, 100, 102, 113, 392, 476, 477, 478, 481, 498, 508, 511, 561, 650, 655, 659, 725, 758, 844, 847, 849, 851, 857, 862, 864], "reason": [8, 9, 23, 296, 305, 648, 838, 840, 843, 844, 847, 848, 849, 851, 857, 860, 861, 864, 865, 867], "highlight": [8, 9, 840, 848, 851, 861, 863], "directli": [8, 9, 27, 29, 33, 36, 40, 44, 45, 48, 389, 390, 425, 449, 657, 749, 832, 838, 839, 840, 841, 843, 844, 847, 848, 849, 850, 852, 855, 857, 858, 860, 861, 862, 865, 866, 869, 870, 871, 878, 879, 881], "much": [8, 9, 19, 20, 24, 25, 26, 33, 34, 40, 44, 45, 46, 47, 58, 113, 348, 365, 386, 810, 838, 839, 840, 844, 847, 849, 857, 860, 861, 862, 865, 866, 867, 869, 883], "There": [8, 9, 23, 33, 40, 45, 50, 110, 382, 384, 385, 393, 394, 398, 797, 838, 839, 840, 843, 844, 846, 847, 849, 850, 851, 853, 855, 857, 859, 861, 862, 866, 869, 871, 872, 879, 884], "deeper": [8, 9, 33, 45, 65, 657, 748, 749, 832, 840, 842, 864, 868], "offer": [8, 9, 861, 876, 883, 885], "limit": [8, 9, 87, 116, 179, 182, 555, 556, 572, 646, 650, 655, 718, 795, 797, 798, 810, 817, 826, 839, 840, 846, 848, 851, 853, 861, 864, 867, 871, 883, 884, 885], "soon": [8, 9, 838, 840, 848, 849, 871, 879], "comparison": [8, 9, 17, 21, 22, 70, 93, 255, 290, 351, 386, 391, 470, 471, 648, 653, 704, 790, 853], "separ": [8, 9, 59, 70, 71, 93, 395, 517, 564, 650, 652, 679, 792, 803, 839, 840, 844, 847, 848, 851, 862, 863, 864, 869, 884], "stai": [8, 9, 848], "origin": [8, 9, 10, 11, 15, 16, 17, 19, 20, 23, 24, 25, 26, 40, 42, 44, 45, 46, 47, 48, 50, 57, 58, 59, 63, 70, 75, 77, 83, 87, 93, 98, 100, 106, 110, 113, 115, 116, 242, 267, 294, 333, 383, 389, 390, 392, 401, 433, 459, 491, 497, 500, 503, 538, 539, 543, 544, 545, 546, 547, 648, 653, 655, 663, 694, 725, 726, 777, 792, 797, 820, 821, 832, 834, 838, 839, 840, 845, 846, 848, 849, 854, 858, 860, 861, 862, 869, 870, 878, 879, 883, 884, 885], "convert_to_tensor": [8, 9, 14, 23, 42, 832, 870], "tmp": [8, 9, 58, 60, 604, 627, 650], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 27, 33, 56, 807, 820, 830, 865, 869, 870, 871], "deprec": [8, 9, 63], "futur": [8, 9, 15, 16, 33, 38, 40, 44, 58, 653, 689, 690, 839, 840, 841, 848, 849, 864, 865, 867, 871], "instead": [8, 9, 23, 24, 25, 27, 29, 33, 37, 39, 40, 44, 51, 58, 63, 69, 70, 75, 92, 93, 98, 111, 208, 296, 330, 383, 389, 401, 426, 427, 428, 537, 540, 647, 648, 653, 696, 795, 838, 839, 840, 843, 846, 848, 849, 851, 852, 853, 856, 857, 858, 860, 861, 862, 864, 867, 869, 871, 878, 879, 881, 883], "logits_np": [8, 9, 10, 11, 23], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 58, 61, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 113, 115, 119, 126, 130, 131, 140, 141, 146, 148, 149, 150, 151, 152, 155, 159, 160, 161, 168, 175, 178, 179, 182, 189, 204, 218, 219, 220, 227, 228, 237, 244, 245, 246, 247, 248, 249, 261, 264, 288, 292, 297, 303, 306, 314, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 354, 355, 359, 363, 370, 372, 374, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 440, 444, 446, 447, 448, 449, 451, 456, 458, 459, 462, 463, 465, 470, 474, 475, 479, 483, 484, 487, 488, 491, 493, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 530, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 550, 560, 561, 562, 564, 567, 568, 571, 572, 586, 589, 591, 606, 607, 608, 609, 613, 629, 630, 631, 632, 633, 636, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 684, 686, 687, 694, 695, 700, 705, 707, 708, 709, 710, 712, 713, 714, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 743, 744, 746, 748, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 770, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 807, 810, 811, 825, 826, 830, 847, 849, 850, 851, 853, 856, 857, 860, 862, 864, 865, 867, 869, 879], "argmax": [8, 9, 10, 11, 12, 13, 23, 59, 60, 61, 80, 103, 392, 504, 660, 861, 879], "57": [8, 9, 21, 22, 26, 56, 58, 69, 70, 92, 93, 212, 235, 236, 239, 240, 242, 252, 253, 293, 309, 310, 381, 647, 648], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 15, 16, 58, 59, 60, 63, 70, 304, 476, 477, 478, 648, 840, 843, 845, 849, 861, 870], "spawn": [8, 9, 588, 650], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 17, 18, 56, 278, 555, 648, 650], "578886": [8, 9], "servic": [8, 9], "168": [8, 9, 60, 555, 650, 657, 737], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 661, 768, 770, 830, 844, 849, 860, 871], "578915": [8, 9], "176": [8, 9, 555, 650], "streamexecutor": [8, 9], "messag": [8, 9, 23, 817, 827, 831, 839, 840, 848, 851, 853, 855, 861, 870], "absl": [8, 9, 58], "initializelog": [8, 9], "stderr": [8, 9], "i0000": [8, 9], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 70, 71, 74, 93, 94, 97, 389, 395, 409, 410, 427, 428, 521, 560, 562, 650, 652, 657, 665, 668, 669, 670, 671, 672, 673, 674, 740, 744, 746, 749, 754, 833, 842, 846, 847, 848, 878], "186": [8, 9], "cluster": [8, 9, 70, 93, 390, 444, 871, 883], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 23, 37, 38, 44, 45, 49, 50, 51, 58, 878, 879, 881], "explain": [8, 9, 10, 11, 23, 50, 70, 93, 389, 423, 434, 832, 838, 839, 840, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 864, 865, 867, 869, 870, 882], "doc": [8, 9, 23, 24, 25, 26, 27, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 59, 60, 93, 161, 342, 349, 350, 383, 386, 539, 645, 832, 833, 837, 838, 842, 851, 852, 855, 856, 864, 869, 879, 881], "involv": [8, 9, 23, 27, 30, 40, 67, 90, 194, 237, 254, 261, 287, 292, 646, 648, 826, 833, 841, 842, 848, 849, 851, 862, 867, 883], "dummi": [8, 9, 23, 37, 49, 50, 51, 57, 840], "transpiled_model": [8, 9, 10, 11, 23], "backend_compil": [8, 9, 44, 45], "root": [8, 9, 10, 11, 15, 16, 21, 22, 23, 24, 25, 37, 39, 40, 58, 59, 60, 63, 69, 92, 301, 648, 834, 838, 839, 840, 846, 854, 861], "placement": [8, 9, 23, 24, 25, 838], "case": [8, 9, 23, 27, 29, 35, 37, 44, 45, 47, 48, 49, 50, 58, 65, 66, 70, 71, 77, 83, 87, 89, 93, 94, 100, 110, 111, 116, 141, 153, 180, 181, 208, 213, 214, 221, 229, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 262, 268, 269, 270, 275, 276, 277, 278, 279, 282, 287, 290, 292, 296, 297, 298, 299, 300, 301, 304, 305, 307, 349, 350, 361, 363, 373, 386, 389, 391, 392, 395, 396, 402, 413, 414, 415, 435, 466, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 504, 505, 511, 514, 516, 518, 525, 548, 565, 566, 570, 577, 591, 592, 593, 645, 646, 647, 648, 650, 653, 655, 657, 663, 701, 707, 721, 722, 723, 725, 727, 728, 730, 732, 740, 746, 779, 780, 781, 782, 783, 784, 785, 795, 796, 815, 826, 832, 836, 838, 839, 840, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 871, 878, 879, 881], "ad": [8, 9, 21, 22, 23, 24, 25, 26, 37, 39, 40, 70, 77, 93, 100, 108, 254, 287, 348, 365, 386, 395, 516, 517, 518, 607, 608, 648, 650, 652, 653, 655, 679, 689, 690, 721, 811, 816, 832, 836, 837, 838, 839, 840, 843, 844, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 865, 867, 871, 879, 883, 885], "logits_transpil": [8, 9, 23], "logits_transpiled_np": [8, 9, 23], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 44, 45, 797, 847, 848, 852, 855, 858, 867, 869], "produc": [8, 9, 10, 11, 15, 16, 23, 57, 70, 71, 74, 93, 97, 316, 326, 329, 381, 383, 389, 437, 652, 682, 795, 826, 838, 849, 854, 855, 860, 862, 864, 865, 879, 884], "granular": [8, 9, 10, 11, 23], "level": [8, 9, 10, 11, 23, 33, 44, 45, 47, 70, 93, 94, 390, 462, 552, 826, 830, 832, 833, 838, 839, 840, 841, 847, 849, 853, 857, 859, 860, 861, 863, 866, 867, 869, 870, 871, 873, 883, 884], "close": [8, 9, 10, 11, 23, 60, 75, 259, 277, 297, 326, 383, 648, 653, 655, 703, 721, 835, 836, 838, 839, 840, 841, 849, 852, 854, 861, 867, 883], "inde": [8, 9, 10, 11, 23, 856, 867, 871], "benefit": [8, 9, 10, 11, 23, 45, 839, 844, 847, 860, 867, 871, 876], "trainabl": [8, 9, 10, 11, 23, 27, 29, 33, 39, 40, 44, 45, 62, 808, 812, 813, 816, 832, 852, 878, 881], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 23], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 23, 58, 60, 63, 70, 74, 79, 93, 97, 102, 389, 391, 392, 408, 409, 410, 426, 427, 428, 429, 473, 499, 652, 654, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 679, 715, 757], "shuffl": [8, 9, 10, 11, 23, 60, 70, 79, 87, 93, 102, 525, 659], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 23], "sgd": [8, 9, 10, 11, 23, 58, 815, 883], "lr": [8, 9, 58, 72, 95, 551, 631, 634, 636, 637, 638, 650, 651, 815], "1e": [8, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 42, 44, 56, 60, 67, 70, 72, 75, 76, 78, 90, 93, 95, 98, 99, 101, 114, 179, 348, 365, 386, 391, 395, 471, 516, 517, 518, 597, 598, 607, 620, 621, 630, 631, 636, 638, 646, 650, 651, 653, 654, 658, 703, 712, 713, 714, 756, 790, 792, 812, 814, 815, 836, 847, 854, 857, 860, 862], "loss_fn": [8, 9, 23, 44, 45, 56, 58, 60], "crossentropyloss": [8, 9, 58, 812], "epoch": [8, 9, 10, 11, 23, 44, 45, 58, 60], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 21, 22, 58, 77, 100, 115, 399, 529, 655, 723, 730, 878], "loss": [8, 9, 10, 11, 23, 44, 45, 58, 60, 70, 93, 110, 466, 467, 468, 469, 470, 471, 472, 473, 600, 623, 650, 712, 713, 714, 715, 716, 717, 832, 848, 849, 857, 861, 865, 866, 883], "backward": [8, 9, 10, 11, 58, 70, 84, 93, 107, 296, 389, 412, 417, 418, 422, 423, 433, 434, 648, 653, 664, 684, 709, 786, 787, 811, 830, 865, 871], "append": [8, 9, 10, 11, 26, 59, 60, 70, 75, 87, 93, 246, 355, 386, 648, 653, 655, 687, 693, 721, 826, 848, 864, 869], "avg_loss": [8, 9, 10, 11, 58], "02": [8, 9, 21, 22, 24, 25, 58, 66, 71, 72, 78, 79, 92, 95, 102, 152, 239, 240, 279, 389, 411, 421, 422, 607, 608, 630, 631, 636, 645, 648, 650, 651, 658, 659, 756, 759, 760, 862], "94": [8, 9, 23, 26, 56, 69, 70, 72, 79, 92, 93, 95, 102, 221, 297, 298, 374, 386, 421, 634, 647, 651, 760], "ve": [8, 9, 10, 11, 12, 13, 15, 16, 23, 26, 31, 40, 44, 79, 102, 659, 757, 838, 839, 840, 841, 854, 864, 867, 873], "And": [8, 9, 10, 11, 19, 20, 23, 24, 25, 26, 27, 29, 34, 37, 44, 45, 46, 59, 90, 379, 380, 388, 843, 846, 855, 857, 864, 875, 879], "plug": [8, 9, 23], "seen": [8, 9, 23, 27, 29, 34, 40, 44, 390, 396, 449, 525, 572, 650, 820, 848, 849, 851, 853, 861, 864, 869], "d": [8, 9, 10, 11, 23, 59, 70, 71, 74, 75, 77, 89, 93, 94, 97, 98, 100, 113, 129, 152, 161, 194, 237, 254, 255, 287, 290, 342, 383, 389, 390, 392, 395, 396, 399, 408, 409, 410, 417, 422, 426, 427, 428, 429, 431, 435, 441, 457, 478, 484, 486, 489, 493, 508, 510, 514, 521, 523, 529, 552, 563, 642, 645, 646, 648, 652, 653, 655, 657, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 686, 687, 691, 694, 698, 707, 708, 727, 740, 744, 745, 746, 749, 754, 755, 796, 826, 832, 833, 839, 842, 845, 846, 847, 854, 859, 864, 867], "sign": [8, 9, 10, 11, 23, 69, 70, 75, 81, 83, 92, 93, 98, 110, 139, 234, 235, 236, 237, 240, 242, 243, 248, 252, 254, 257, 259, 261, 287, 289, 296, 300, 301, 305, 353, 386, 390, 392, 401, 461, 506, 507, 538, 539, 645, 648, 653, 661, 663, 701, 768, 769, 770, 771, 776, 777, 782, 784, 839, 841, 849, 869, 870], "ask": [8, 9, 10, 11, 23, 832, 838, 839, 851, 871], "server": [8, 9, 10, 11, 23, 58, 832, 839, 840, 846, 854, 872, 883], "forward": [8, 9, 10, 11, 12, 13, 21, 22, 23, 29, 43, 44, 45, 58, 60, 70, 93, 379, 388, 389, 412, 417, 418, 422, 423, 433, 434, 808, 810, 811, 813, 815, 830, 832, 839, 845, 852, 859, 864, 865, 867, 870, 871, 879, 883, 884], "come": [10, 11, 33, 58, 835, 838, 839, 840, 844, 848, 861, 866, 867, 873, 883], "onto": [10, 11, 657, 743, 749, 874, 875, 883], "scene": [10, 11, 842, 868, 874, 875, 883], "almost": [10, 11, 58, 837, 847, 862], "alwai": [10, 11, 66, 67, 70, 71, 77, 89, 90, 93, 100, 123, 141, 166, 237, 287, 360, 386, 390, 392, 461, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 514, 570, 577, 642, 646, 648, 650, 655, 721, 722, 723, 725, 727, 728, 730, 732, 797, 838, 839, 840, 844, 845, 847, 849, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 870, 871, 879], "huggingfac": [10, 11, 58, 878, 879], "implement": [10, 11, 26, 33, 34, 44, 46, 50, 58, 61, 67, 68, 70, 81, 82, 90, 91, 93, 98, 105, 110, 166, 180, 181, 194, 213, 214, 228, 234, 235, 236, 239, 240, 241, 242, 251, 252, 254, 257, 259, 261, 275, 276, 277, 278, 287, 289, 292, 296, 299, 300, 304, 305, 349, 350, 373, 386, 390, 401, 442, 443, 543, 544, 565, 566, 646, 647, 648, 650, 652, 653, 661, 662, 663, 679, 688, 689, 690, 698, 707, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 796, 798, 820, 832, 836, 838, 842, 843, 844, 845, 847, 849, 850, 852, 853, 854, 856, 857, 858, 860, 862, 864, 865, 867, 869, 871, 873, 883, 885], "conveni": [10, 11, 36, 48, 838, 849, 850, 856, 862, 873], "who": [10, 11, 835, 841, 842, 853, 868, 871, 883], "must": [10, 11, 50, 58, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 339, 340, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 357, 358, 360, 362, 364, 366, 367, 368, 369, 373, 376, 381, 383, 386, 389, 390, 391, 392, 395, 396, 399, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 431, 433, 434, 436, 438, 440, 441, 443, 449, 450, 455, 456, 457, 458, 463, 467, 468, 469, 470, 472, 473, 476, 477, 478, 483, 484, 486, 488, 489, 490, 491, 493, 497, 500, 501, 502, 503, 505, 507, 508, 509, 511, 512, 514, 519, 520, 522, 523, 524, 526, 527, 530, 537, 538, 539, 540, 547, 555, 556, 560, 561, 562, 567, 568, 570, 577, 591, 592, 629, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 810, 811, 815, 817, 837, 838, 839, 840, 843, 844, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 864, 865, 866, 867, 869, 878, 881, 884], "reimplement": [10, 11], "choic": [10, 11, 23, 26, 45, 62, 70, 83, 93, 106, 390, 392, 461, 481, 663, 783, 785, 832, 839, 848, 860, 861, 878, 880, 883], "veri": [10, 11, 23, 27, 35, 44, 45, 47, 69, 92, 288, 348, 365, 386, 648, 653, 701, 797, 837, 838, 839, 840, 846, 847, 849, 850, 851, 853, 854, 856, 857, 860, 861, 862, 864, 865, 867, 869, 871, 882, 883, 884], "thousand": [10, 11, 871], "china": [10, 11], "howev": [10, 11, 26, 33, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 75, 98, 261, 304, 305, 392, 395, 507, 516, 518, 595, 648, 650, 653, 701, 703, 820, 838, 839, 843, 844, 845, 847, 849, 850, 851, 852, 853, 855, 856, 857, 860, 861, 862, 864, 867, 869, 870, 871, 875, 879, 883], "suffer": [10, 11], "abov": [10, 11, 33, 38, 44, 45, 50, 51, 66, 69, 70, 75, 79, 86, 92, 93, 98, 102, 111, 131, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 325, 327, 342, 343, 349, 350, 352, 355, 381, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 423, 426, 427, 428, 433, 434, 435, 443, 444, 498, 507, 511, 537, 540, 567, 571, 573, 575, 577, 606, 615, 640, 642, 645, 646, 648, 650, 651, 652, 653, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 758, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 836, 838, 839, 840, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 864, 867, 869, 870, 883], "dinov2": [10, 11], "second": [10, 11, 15, 16, 69, 70, 72, 75, 77, 81, 92, 93, 94, 95, 98, 100, 104, 111, 115, 116, 136, 161, 192, 200, 237, 242, 244, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 272, 273, 274, 279, 280, 281, 283, 284, 287, 290, 292, 303, 333, 342, 348, 361, 363, 364, 365, 371, 375, 376, 383, 386, 390, 391, 392, 399, 401, 442, 443, 444, 446, 450, 472, 505, 513, 524, 526, 530, 537, 540, 552, 601, 624, 630, 631, 636, 644, 645, 646, 648, 650, 651, 653, 655, 656, 657, 661, 684, 687, 688, 689, 691, 693, 698, 700, 701, 703, 705, 707, 709, 729, 730, 735, 738, 768, 769, 770, 815, 839, 843, 846, 849, 851, 855, 860, 861, 864, 866], "iter": [10, 11, 23, 58, 60, 65, 70, 71, 77, 85, 87, 93, 94, 100, 108, 113, 116, 135, 227, 334, 335, 383, 389, 390, 392, 435, 448, 459, 465, 482, 498, 499, 549, 587, 644, 647, 650, 655, 657, 720, 724, 731, 733, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 752, 753, 755, 825, 826, 830, 843, 845, 847, 869, 879], "dino": [10, 11], "meta": [10, 11, 58, 734, 735, 736, 844, 865, 883], "vit": [10, 11], "purpos": [10, 11, 35, 44, 45, 47, 58, 60, 161, 259, 277, 342, 383, 645, 648, 653, 701, 840, 842, 844, 847, 848, 850, 851, 853, 856, 857, 858, 861, 863, 864, 867, 873, 884, 885], "abund": [10, 11], "literatur": [10, 11], "mainli": [10, 11, 838, 842, 859, 861, 864, 873, 883], "focus": [10, 11, 832, 849, 865, 883, 885], "rather": [10, 11, 42, 50, 71, 87, 94, 139, 227, 579, 580, 583, 645, 647, 650, 652, 677, 836, 840, 843, 847, 849, 852, 854, 861, 862, 864, 865, 871, 883, 885], "65": [10, 11, 23, 26, 56, 58, 60, 63, 92, 95, 102, 248, 287, 575, 630, 648, 650, 651, 653, 663, 698, 759, 760, 778, 848], "749": [10, 11], "env": [10, 11, 14, 37, 39, 40], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 37, 39, 40, 223, 349, 350, 386, 647, 808, 820, 838, 839, 849, 854], "autoimageprocessor": [10, 11, 878, 879], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 34, 37, 60, 61, 70, 74, 79, 81, 87, 93, 97, 102, 337, 338, 339, 340, 341, 383, 390, 396, 448, 459, 465, 523, 524, 525, 526, 527, 652, 659, 661, 675, 757, 758, 759, 760, 762, 768, 803, 808, 810, 826, 858, 862, 864], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11], "facebook": [10, 11, 61], "imagenet1k": [10, 11], "id2label": [10, 11, 61, 879], "predicted_class_idx": [10, 11, 61], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 109, 110, 111, 112, 113, 114], "stop_gradi": [10, 11, 72, 95, 227, 551, 631, 634, 636, 637, 638, 647, 650, 651, 656, 734, 735, 736, 815], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 69, 92, 297, 648, 866], "io": [10, 11, 24, 25, 37, 39, 40, 59, 62, 839, 848], "to_rgb": [10, 11], "cv2": [10, 11, 58, 60, 62], "tar": [10, 11, 58, 59, 60, 63], "gz": [10, 11, 58, 59, 60, 63], "bj": [10, 11, 237, 254, 287, 352, 386, 648], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 60, 76, 99, 654, 714, 847, 857, 860], "33": [10, 11, 26, 56, 58, 59, 69, 79, 83, 92, 93, 94, 95, 97, 240, 241, 248, 297, 389, 390, 392, 401, 409, 431, 432, 462, 481, 538, 556, 607, 634, 648, 650, 651, 652, 653, 657, 663, 675, 676, 698, 755, 758, 778, 785, 795, 798], "bring": [10, 11, 44, 45, 843, 863, 864, 869, 873, 875], "hope": [10, 11, 56, 871], "milesi": [12, 13], "blob": [12, 13, 58, 60, 832], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 19, 20, 58, 70, 74, 78, 93, 95, 97, 101, 125, 225, 226, 318, 319, 322, 333, 363, 381, 383, 386, 389, 390, 395, 407, 413, 414, 415, 423, 425, 430, 434, 450, 516, 517, 518, 637, 642, 647, 651, 652, 658, 675, 679, 682, 756, 795, 797, 798, 810, 811, 815, 826, 875, 876, 883], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 14, 18, 26, 59, 61, 63, 87, 553, 650, 803, 836, 842, 843, 854, 857, 860, 861, 862, 864, 865], "too": [12, 13, 70, 93, 237, 254, 261, 287, 392, 507, 648, 810, 838, 839, 840, 843, 849, 853, 865, 871], "small": [12, 13, 23, 26, 60, 69, 70, 75, 78, 92, 93, 98, 101, 254, 261, 287, 288, 348, 365, 386, 390, 391, 395, 454, 471, 516, 517, 518, 648, 653, 658, 696, 699, 701, 756, 810, 814, 832, 839, 848, 851, 857, 862, 867, 869, 871, 878, 879, 884], "pixel": [12, 13, 58, 70, 93, 389, 425], "resampl": [12, 13], "nearest": [12, 13, 70, 93, 237, 254, 287, 297, 359, 386, 389, 401, 425, 547, 648, 867], "bicub": [12, 13, 70, 93, 389, 425, 867], "zero": [12, 13, 58, 66, 67, 69, 70, 71, 72, 74, 75, 77, 80, 81, 83, 84, 89, 90, 92, 93, 95, 97, 98, 102, 103, 106, 107, 111, 125, 127, 128, 129, 131, 143, 144, 146, 148, 153, 155, 156, 157, 159, 160, 163, 166, 167, 235, 236, 237, 239, 240, 241, 242, 243, 246, 248, 249, 251, 252, 253, 254, 256, 259, 260, 261, 268, 269, 270, 271, 277, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 304, 305, 307, 308, 310, 312, 313, 317, 319, 325, 327, 336, 343, 349, 350, 353, 354, 355, 359, 367, 370, 372, 373, 374, 375, 381, 383, 386, 389, 390, 392, 399, 401, 411, 412, 413, 414, 415, 417, 418, 421, 422, 423, 432, 433, 434, 435, 436, 437, 442, 444, 452, 457, 460, 482, 492, 497, 498, 510, 511, 529, 538, 539, 556, 560, 567, 587, 592, 630, 631, 636, 637, 638, 640, 642, 645, 646, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 679, 682, 683, 685, 689, 690, 692, 693, 694, 695, 696, 697, 699, 701, 707, 709, 710, 715, 720, 721, 722, 723, 725, 726, 733, 756, 758, 759, 760, 763, 764, 765, 766, 768, 769, 770, 771, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 810, 811, 815, 830, 844, 847, 849, 850, 851, 856, 858, 859, 862, 869, 870], "ndim": [12, 13, 70, 75, 80, 93, 98, 103, 115, 119, 390, 392, 458, 459, 465, 476, 477, 478, 491, 500, 502, 512, 629, 650, 653, 660, 700, 703, 766, 847, 857, 864], "newaxi": [12, 13, 643], "transpos": [12, 13, 23, 39, 44, 45, 62, 70, 74, 75, 87, 93, 97, 98, 115, 390, 438, 456, 458, 460, 536, 652, 653, 665, 667, 669, 671, 672, 673, 677, 693, 697, 699, 705, 797, 811, 823, 832, 854, 860, 869, 878], "255": [12, 13, 39, 44, 45, 58, 59, 60, 62, 74, 93, 97, 248, 648, 674, 832, 878], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 15, 16], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 66, 70, 71, 89, 93, 111, 140, 141, 154, 389, 390, 392, 401, 434, 459, 504, 543, 544, 614, 645, 650, 820, 825, 838, 844, 849, 850, 853, 856, 860, 861, 862, 865, 867, 869, 873], "uint8": [12, 13, 39, 44, 45, 60, 169, 176, 180, 191, 194, 199, 205, 646, 795, 796, 849, 864], "elif": [12, 13, 19, 20, 848, 853, 860, 861, 862], "bool": [12, 13, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 140, 141, 143, 148, 149, 150, 151, 152, 153, 155, 157, 163, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 202, 206, 210, 211, 213, 214, 216, 218, 221, 222, 227, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 340, 341, 343, 348, 349, 350, 351, 352, 354, 356, 364, 365, 370, 371, 373, 375, 376, 377, 383, 386, 387, 389, 390, 391, 392, 395, 401, 408, 409, 410, 412, 413, 414, 415, 425, 426, 427, 428, 431, 433, 435, 437, 444, 448, 451, 452, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 483, 484, 486, 487, 488, 489, 490, 493, 497, 499, 502, 505, 507, 508, 509, 511, 514, 516, 518, 519, 520, 521, 522, 524, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 591, 592, 596, 605, 606, 607, 608, 610, 612, 614, 615, 628, 631, 632, 634, 636, 637, 638, 639, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 675, 676, 677, 678, 679, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 707, 708, 710, 712, 713, 714, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 743, 744, 745, 747, 748, 749, 754, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 793, 795, 796, 797, 807, 811, 814, 815, 825, 826, 830, 849, 851, 853, 860, 861, 864, 865, 867, 869, 878, 879, 880], "fromarrai": [12, 13, 39, 44, 45, 60], "interpol": [12, 13, 58, 70, 93, 367, 386, 389, 401, 547, 652, 679, 867, 883], "bilinear": [12, 13, 70, 93, 389, 425, 867], "torch_mask": [12, 13], "squeez": [12, 13, 58, 77, 100, 655, 883], "torch_result": [12, 13], "to_numpi": [12, 13, 26, 44, 45, 56, 59, 60, 63, 71, 94, 650, 854, 862], "img_tf": [12, 13], "math": [12, 13, 61, 111, 304, 648, 849, 860, 861, 862, 869], "lot": [12, 13, 848, 849, 858, 864, 871], "far": [12, 13, 23, 44, 45, 657, 737, 748, 826, 850, 851], "space": [12, 13, 66, 69, 70, 71, 89, 92, 93, 94, 139, 151, 152, 306, 363, 386, 391, 468, 560, 564, 645, 648, 650, 867], "del": [12, 13, 848], "empty_cach": 12, "permute_dim": [12, 13, 77, 100, 655, 854], "func_wrapp": [12, 13, 64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 305, 309, 314, 315, 317, 381, 642, 648, 807, 850, 861, 866], "242": [12, 13, 93], "mani": [12, 13, 44, 45, 48, 77, 87, 100, 161, 342, 383, 645, 655, 727, 838, 839, 840, 844, 845, 847, 848, 849, 850, 851, 852, 856, 857, 858, 860, 861, 862, 864, 867, 869, 871, 875, 882, 883], "factor": [12, 13, 26, 70, 72, 74, 75, 93, 95, 97, 98, 109, 110, 111, 112, 113, 225, 226, 227, 389, 390, 395, 423, 434, 448, 449, 459, 462, 464, 465, 521, 630, 631, 636, 637, 647, 651, 652, 653, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 683, 795, 797, 798, 810, 811, 815, 853], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 21, 22, 23, 44, 45, 58, 67, 69, 74, 90, 92, 97, 116, 182, 258, 389, 411, 421, 560, 570, 646, 648, 650, 652, 653, 667, 669, 674, 698], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 21, 22, 58, 59, 832], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 33, 44, 45, 63, 67, 69, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 105, 115, 116, 120, 167, 177, 193, 200, 220, 237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 262, 263, 264, 265, 266, 272, 273, 274, 279, 280, 281, 283, 284, 285, 286, 287, 290, 292, 296, 303, 308, 327, 348, 353, 360, 361, 362, 364, 366, 371, 375, 383, 386, 390, 392, 401, 460, 492, 537, 549, 552, 646, 647, 648, 650, 653, 660, 662, 684, 691, 693, 698, 702, 705, 706, 709, 767, 774, 792, 817, 832, 843, 849, 851, 853, 856, 860, 861, 878, 881], "x2": [12, 13, 33, 44, 45, 67, 69, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 115, 116, 120, 167, 193, 200, 220, 237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 262, 263, 264, 265, 266, 272, 273, 274, 279, 280, 281, 283, 284, 285, 286, 287, 290, 292, 296, 303, 308, 348, 353, 360, 361, 362, 364, 366, 371, 375, 386, 390, 392, 401, 446, 460, 492, 537, 549, 552, 646, 647, 648, 650, 653, 660, 684, 691, 693, 698, 702, 705, 706, 709, 767, 792, 817, 832, 843, 849, 851, 853, 856, 860, 861], "x3": [12, 13, 67, 71, 167, 549, 646, 650], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13], "out_channel": [12, 13], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 811, 832, 878], "batchnorm2d": [12, 13, 21, 22, 23, 814], "downscal": [12, 13, 71, 94, 555, 556, 577, 650], "maxpool": [12, 13, 21, 22, 23], "doubl": [12, 13], "conv": [12, 13, 652, 811, 867], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 70, 93, 389, 425, 867], "align_corn": [12, 13, 70, 93, 389, 425, 867], "conv2dtranspos": [12, 13, 811], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 70, 77, 93, 100, 392, 498, 655, 720, 733], "constant_pad": [12, 13, 77, 100, 655], "kornia": [14, 31, 32, 39, 42, 44, 45, 58, 62, 832, 878], "tf_rgb_to_grayscal": [14, 42], "rgb_to_grayscal": [14, 42, 832], "target": [14, 18, 26, 27, 29, 35, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 60, 70, 93, 209, 391, 466, 467, 468, 469, 470, 471, 472, 473, 647, 790, 811, 813, 819, 832, 836, 839, 842, 845, 854, 855, 862, 863, 868, 870, 878, 880, 881, 883, 885], "databas": [14, 848, 864], "examples_and_demo": 14, "sqlite": 14, "tabl": [14, 237, 254, 287, 600, 623, 648, 650, 795, 796, 811, 861, 866, 875, 883], "autotun": 14, "ivyexcept": [14, 577, 610, 650, 827, 850, 853, 858, 860, 861, 865], "source_to_sourc": 14, "profil": [14, 647, 880], "translat": 14, "_compil": [14, 839], "_source_to_sourc": 14, "47": [14, 26, 56, 60, 69, 70, 75, 79, 92, 93, 94, 95, 97, 102, 243, 301, 389, 401, 409, 427, 428, 538, 560, 561, 634, 648, 650, 651, 652, 653, 659, 676, 691, 759, 760], "48": [14, 26, 56, 60, 69, 70, 92, 93, 94, 95, 102, 125, 236, 259, 301, 389, 409, 410, 411, 421, 427, 428, 431, 575, 630, 634, 642, 648, 650, 651, 653, 657, 663, 698, 738, 759, 778], "49": [14, 56, 60, 70, 79, 93, 97, 98, 301, 389, 390, 401, 411, 421, 432, 457, 538, 648, 663, 708, 759, 778], "vll": 14, "pyx": 14, "ivy_kei": 14, "pem": 14, "torch_input": [14, 15, 16], "rand": [14, 15, 16, 17, 18, 40, 42, 44, 45, 60, 825, 826, 832, 879], "tf_input": [14, 15, 16, 878], "tf_output": [14, 15, 16], "via": [15, 16, 42, 43, 47, 50, 261, 390, 392, 459, 462, 465, 507, 648, 657, 747, 748, 840, 843, 847, 849, 850, 860, 865, 867, 869, 870, 883], "alongsid": [15, 16, 33, 34, 46, 652, 679], "basic": [15, 16, 27, 29, 33, 36, 40, 44, 45, 48, 51, 392, 506, 833, 838, 851, 864], "singl": [15, 16, 35, 47, 56, 61, 69, 79, 87, 92, 102, 111, 306, 365, 386, 390, 396, 457, 524, 615, 628, 632, 648, 650, 651, 652, 659, 661, 679, 758, 759, 760, 768, 795, 811, 830, 838, 839, 840, 843, 848, 851, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 871, 875, 876], "lstm": [15, 16, 17, 18, 652, 678, 811, 869, 883], "sample_input": [15, 16], "uniform": [15, 16, 34, 35, 36, 37, 38, 42, 44, 45, 46, 47, 49, 50, 51, 58, 70, 79, 93, 102, 401, 540, 659, 757, 758, 760, 810, 832, 863, 878, 881], "tf_lstm": [15, 16, 17, 18], "torch_lstm": [15, 16, 17, 18], "physicaldevic": [15, 16], "physical_devic": [15, 16], "device_typ": [15, 16], "alloc": [15, 16, 66, 67, 70, 90, 159, 160, 166, 343, 383, 645, 646, 830, 838, 840, 871], "physic": [15, 16, 218, 647], "modifi": [15, 16, 60, 70, 87, 93, 110, 392, 401, 495, 498, 504, 544, 795, 826, 838, 839, 840, 843, 845, 846, 849, 850, 852, 854, 855, 857, 860, 862, 864, 865, 869], "164": [15, 16, 23], "state_upd": [15, 16, 40], "properti": [15, 16, 40, 87, 110, 111, 112, 113, 114, 115, 119, 813, 815, 843, 847, 857, 862, 864], "_transpil": [15, 16, 40], "those": [15, 16, 57, 58, 75, 77, 87, 93, 98, 100, 139, 193, 254, 287, 508, 629, 645, 646, 648, 650, 653, 655, 657, 660, 700, 703, 718, 739, 766, 835, 838, 839, 840, 841, 844, 847, 848, 849, 858, 860, 861, 862, 864, 867], "constant": [15, 16, 17, 18, 27, 29, 34, 37, 46, 49, 51, 56, 70, 77, 78, 93, 100, 101, 110, 111, 336, 383, 389, 391, 392, 435, 470, 471, 498, 655, 657, 658, 720, 743, 756, 810, 814, 832, 857, 862, 865, 871, 879, 881], "toler": [15, 16, 17, 70, 75, 93, 98, 348, 365, 386, 390, 444, 459, 465, 653, 696, 699, 790, 792, 843, 862, 883], "benchmark": [15, 16, 17], "n_run": [15, 16, 17], "tf_time": [15, 16], "round": [15, 16, 69, 70, 92, 93, 110, 112, 113, 114, 237, 250, 254, 260, 261, 287, 301, 307, 308, 359, 386, 648, 836, 838, 839, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 875], "torch_tim": [15, 16], "cpu_speedup": [15, 16], "gpu_speedup": 15, "ntranspil": [15, 16], "5017": [15, 16], "1101": [15, 16], "7519": [15, 16], "901": [15, 16], "607x": [15, 16], "944x": [15, 16], "32": [17, 18, 26, 40, 44, 45, 56, 58, 59, 60, 69, 70, 79, 92, 93, 97, 98, 102, 115, 116, 125, 178, 236, 248, 249, 258, 272, 278, 294, 297, 298, 352, 386, 389, 390, 392, 401, 409, 410, 411, 421, 431, 432, 442, 446, 481, 538, 560, 576, 642, 646, 648, 650, 652, 653, 659, 660, 663, 667, 669, 670, 674, 676, 693, 698, 709, 758, 759, 760, 767, 778, 795, 798, 848, 849, 859], "original_output": [17, 18], "transpiled_output": [17, 18], "original_torch_tim": 17, "autograph": 17, "do_not_convert": 17, "compiled_tf_lstm": 17, "transpiled_tf_tim": 17, "original_tf_lstm": 17, "time_major": [17, 93, 389, 435, 652, 678], "return_sequ": [17, 811], "original_tf_tim": 17, "slower": [17, 35, 861], "480074623755541x": 17, "362692848996253x": 17, "openmim": [19, 20], "mim": [19, 20], "0rc8": [19, 20], "get_model": [19, 20], "list_model": [19, 20], "mmengin": [19, 20], "configdict": [19, 20], "saniti": [19, 20, 24, 25, 26, 44, 861], "checkpoint": [19, 20, 21, 22, 61, 871], "against": [19, 20, 67, 70, 71, 75, 80, 90, 92, 93, 94, 98, 103, 167, 286, 305, 348, 351, 354, 365, 386, 401, 543, 544, 545, 546, 547, 584, 646, 648, 650, 653, 660, 693, 694, 696, 699, 763, 864, 870, 871, 883], "zoo": [19, 20], "checkpoint_nam": [19, 20, 24, 25, 44], "tiny_32xb128": [19, 20], "noema_in1k": [19, 20], "openmmlab": [19, 20], "get_scal": [19, 20], "cfg": [19, 20, 855], "_config": [19, 20], "train_pipelin": [19, 20], "tensor_imag": [19, 20], "transpiled_graph": [19, 20, 24, 25, 44], "issu": [19, 20, 24, 25, 391, 468, 810, 833, 834, 835, 836, 837, 839, 841, 843, 845, 846, 848, 849, 850, 851, 853, 854, 861, 864, 865, 867, 871, 879], "107960": [19, 20, 24, 25], "export": [19, 20, 24, 25, 59, 848, 885], "lc_all": [19, 20, 24, 25], "en_u": [19, 20, 24, 25], "utf": [19, 20, 24, 25], "ld_library_path": [19, 20, 24, 25], "lib64": [19, 20, 24, 25], "library_path": [19, 20, 24, 25], "stub": [19, 20, 24, 25, 846], "ldconfig": [19, 20, 24, 25], "_f": [19, 20, 24, 25, 44], "comp_model": [19, 20, 24, 25, 44], "equival": [19, 20, 24, 25, 42, 44, 75, 98, 110, 111, 139, 248, 261, 282, 283, 296, 297, 392, 482, 507, 513, 645, 648, 653, 696, 699, 702, 710, 820, 860, 861, 867, 869, 878], "np_imag": [19, 20, 39, 44, 45], "jax_imag": [19, 20], "hk": [19, 20, 24, 25, 44, 58, 62, 832, 878], "rng_kei": [19, 20, 24, 25, 44, 832, 878], "prngkei": [19, 20, 24, 25, 35, 36, 44, 45, 58, 832, 878], "jax_mlp_forward": [19, 20], "init": [19, 20, 24, 25, 44, 58, 60, 70, 93, 390, 448, 459, 465, 832, 843, 878], "rng": [19, 20, 24, 25, 44, 58, 832, 878], "06": [19, 20, 26, 37, 60, 67, 79, 92, 95, 114, 123, 179, 236, 252, 389, 411, 421, 636, 642, 646, 651, 760, 790, 792, 864], "block_until_readi": [19, 20], "08": [19, 20, 70, 83, 93, 102, 240, 348, 365, 386, 389, 391, 411, 421, 471, 648, 759, 760, 785, 790, 795, 855], "train2017": [19, 20, 24, 25, 39, 44, 45, 832, 878], "000000283921": [19, 20, 24, 25, 44], "out_torch": [19, 20, 24, 25, 44], "et": [19, 20, 652, 653, 679, 703], "out_jax": [19, 20, 24, 25, 44], "66m": [19, 20], "53m": [19, 20], "That": [19, 20, 24, 25, 27, 29, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 50, 51, 58, 296, 391, 470, 648, 825, 839, 840, 844, 864, 884], "pretti": [19, 20, 24, 25, 44, 45, 58, 836, 854], "solid": [19, 20, 24, 25, 44], "2023": [21, 22, 23, 24, 25, 37, 39, 40, 58], "52": [21, 22, 26, 56, 69, 92, 94, 95, 102, 242, 252, 254, 401, 538, 560, 561, 576, 630, 648, 650, 651, 652, 653, 663, 676, 698, 760, 778, 825], "110": [21, 22, 58], "10472": [21, 22], "10k": [21, 22], "tx": [21, 22], "23k": [21, 22], "unifyai": [21, 22, 62, 832, 834, 839, 840, 846, 854], "634575": [21, 22], "620k": [21, 22], "jpeg": [21, 22, 59, 60], "619": [21, 22], "70k": [21, 22], "113": [21, 22], "resnet34_weight": [21, 22], "torch_resnet_34": [21, 22], "conv1": [21, 22, 23, 43], "kernel_s": [21, 22, 23, 40, 43, 44, 45, 60, 70, 93, 389, 408, 409, 410, 429, 436, 811, 817], "stride": [21, 22, 23, 70, 74, 93, 94, 97, 115, 389, 392, 408, 409, 410, 426, 427, 428, 429, 431, 432, 436, 474, 650, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 811, 860, 865, 883], "bia": [21, 22, 23, 70, 74, 93, 97, 101, 395, 401, 521, 537, 587, 650, 652, 658, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 756, 811, 857, 864, 869], "bn1": [21, 22, 23], "ep": [21, 22, 23, 70, 75, 78, 93, 98, 101, 179, 314, 381, 390, 391, 395, 444, 471, 516, 517, 518, 646, 653, 658, 696, 699, 756, 807, 814], "05": [21, 22, 23, 26, 60, 66, 69, 70, 72, 78, 92, 93, 95, 101, 152, 279, 332, 348, 357, 358, 365, 383, 386, 395, 516, 517, 518, 575, 597, 620, 630, 631, 636, 645, 648, 650, 651, 653, 658, 694, 756, 790, 795, 810, 814, 862, 864], "momentum": [21, 22, 23, 58, 70, 93, 395, 516, 518, 814], "affin": [21, 22, 23, 814], "track_running_stat": [21, 22, 23, 814], "dilat": [21, 22, 23, 62, 70, 74, 93, 97, 389, 392, 426, 427, 428, 431, 432, 436, 498, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 811], "ceil_mod": [21, 22, 23, 70, 93, 389, 408, 409, 410, 426, 427, 428, 431, 811], "layer1": [21, 22, 23], "basicblock": [21, 22, 23], "conv2": [21, 22, 23], "bn2": [21, 22, 23], "layer2": [21, 22, 23], "layer3": [21, 22, 23], "layer4": [21, 22, 23], "output_s": [21, 22, 23, 70, 93, 389, 403, 404, 405, 406, 652, 681, 811, 832, 878], "fc": [21, 22, 23, 29, 43, 58, 832, 878], "in_featur": [21, 22, 23, 74, 97, 652, 676, 864], "out_featur": [21, 22, 23, 74, 97, 652, 676, 864], "resnet_34": [21, 22], "ivy_resnet_34": [21, 22], "333f7ec4": [21, 22], "pth": [21, 22], "3m": [21, 22], "4mb": [21, 22], "preserv": [21, 22, 24, 25, 37, 39, 40, 70, 71, 72, 87, 93, 94, 95, 116, 389, 390, 392, 401, 425, 459, 476, 477, 478, 489, 490, 510, 544, 577, 640, 650, 651, 655, 722, 795, 863, 864, 871, 878, 880, 885], "multipl": [21, 22, 24, 25, 33, 37, 39, 40, 44, 69, 70, 75, 78, 83, 84, 87, 92, 93, 94, 95, 98, 100, 101, 106, 107, 148, 248, 272, 279, 285, 286, 287, 289, 349, 350, 386, 389, 390, 392, 395, 399, 411, 418, 421, 423, 457, 484, 493, 511, 514, 521, 530, 549, 556, 587, 630, 631, 634, 636, 637, 638, 640, 645, 648, 650, 651, 652, 653, 655, 658, 660, 663, 664, 667, 668, 669, 670, 683, 692, 693, 694, 707, 718, 721, 726, 727, 756, 763, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 811, 826, 830, 838, 840, 844, 845, 847, 851, 853, 855, 857, 860, 861, 862, 864, 867, 869, 871, 879, 883, 885], "rel": [21, 22, 24, 25, 37, 39, 40, 70, 72, 75, 77, 82, 89, 93, 95, 98, 100, 105, 115, 150, 348, 365, 386, 391, 401, 470, 471, 537, 631, 634, 636, 637, 638, 651, 653, 655, 662, 687, 696, 699, 707, 722, 726, 772, 775, 790, 792, 840, 848, 862, 867, 883], "home": [21, 22, 24, 25, 37, 39, 40, 848], "workspac": [21, 22, 24, 25, 34, 37, 39, 40, 839, 854], "95": [21, 22, 23, 26, 56, 70, 72, 75, 79, 86, 95, 97, 102, 123, 374, 386, 432, 630, 634, 638, 642, 651, 653, 659, 691, 759, 760], "track": [21, 22, 33, 44, 45, 57, 58, 830, 839, 840, 843, 859, 860, 879, 883], "properli": [21, 22, 839, 842, 853, 855, 861, 864], "_trace_graph": [21, 22], "shown": [21, 22, 40, 44, 85, 87, 108, 271, 294, 352, 386, 648, 838, 839, 840, 843, 846, 848, 849, 851, 853, 855, 856, 861, 862, 864, 865, 866, 869, 870, 871], "8507": [21, 22], "1351": [21, 22], "0069": [21, 22], "85072625": [21, 22], "13506091": [21, 22], "00688289": [21, 22], "resnet50_weight": [21, 22], "torch_resnet_50": [21, 22], "imagenet1k_v2": [21, 22], "11ad3fa6": [21, 22], "8m": [21, 22], "8mb": [21, 22], "bottleneck": [21, 22], "conv3": [21, 22], "bn3": [21, 22], "2048": [21, 22, 608, 650], "resnet_50": [21, 22], "ivy_resnet_50": [21, 22], "3429": [21, 22], "0408": [21, 22], "0121": [21, 22], "34288204": [21, 22], "04077014": [21, 22], "01212029": [21, 22], "deploy": [23, 839, 875, 876, 878, 885], "ow": 23, "residu": 23, "extrem": 23, "though": [23, 39, 837, 838, 840, 849, 850, 852, 857, 860, 861, 867, 871], "idea": [23, 832, 838, 863, 865, 876, 885], "revolutionari": 23, "reach": [23, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 875, 876, 883], "152": 23, "vanish": [23, 810], "explod": [23, 810, 874, 875], "gradient": [23, 44, 45, 58, 60, 70, 93, 110, 227, 378, 386, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 647, 656, 734, 735, 736, 792, 803, 815, 842, 865, 871, 883], "astor": 23, "cu121": 23, "pillow": [23, 63], "filelock": [23, 39, 58], "extens": [23, 39, 58, 69, 75, 92, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 156, 157, 158, 159, 160, 162, 163, 169, 179, 182, 194, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 349, 350, 352, 386, 389, 392, 401, 433, 507, 511, 537, 645, 646, 648, 653, 655, 660, 661, 662, 663, 664, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 719, 721, 722, 723, 725, 726, 728, 729, 733, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 837, 839, 840, 852, 854, 855, 864, 883], "sympi": [23, 39], "fsspec": [23, 39, 58], "nvrtc": 23, "cu12": 23, "cupti": 23, "54": [23, 56, 67, 69, 74, 92, 93, 97, 102, 182, 251, 252, 257, 272, 301, 307, 328, 383, 389, 401, 411, 421, 538, 648, 652, 653, 663, 676, 695, 698, 758, 759, 760, 778, 848, 851], "curand": 23, "106": [23, 60], "cusolv": [23, 653, 704], "107": 23, "cuspars": 23, "nccl": 23, "nvtx": 23, "triton": 23, "nvjitlink": 23, "mpmath": [23, 39], "py2": [23, 58, 60], "filter": [23, 58, 60, 62, 70, 74, 93, 97, 331, 332, 383, 389, 410, 428, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 797, 811, 832, 845, 848], "get_logg": 23, "setlevel": 23, "solv": [23, 75, 98, 390, 454, 653, 795, 832, 839, 843, 854, 861, 885], "todai": 23, "ant": 23, "bee": 23, "120": [23, 60, 83, 106, 116, 653, 698, 776], "usual": [23, 27, 29, 61, 254, 287, 648, 825, 839, 843, 849, 861, 864, 867], "upon": [23, 44, 45, 62, 830, 840, 841, 851, 860, 864, 867, 871, 883], "scratch": [23, 864], "transfer": 23, "subset": [23, 60, 797, 844, 848, 852, 856, 859, 861, 864, 869, 883], "extract": [23, 44, 45, 52, 59, 70, 93, 111, 392, 481, 508, 861, 863, 865, 870, 882, 883, 884], "zipfil": 23, "zip": [23, 60, 869], "hymenoptera_data": 23, "replac": [23, 28, 30, 41, 59, 69, 70, 71, 77, 79, 87, 92, 93, 94, 100, 102, 146, 288, 324, 327, 381, 383, 392, 504, 507, 511, 591, 592, 596, 645, 648, 650, 655, 659, 718, 757, 795, 840, 846, 847, 849, 850, 858, 861, 864, 869, 871, 878], "send": 23, "statu": [23, 838, 841, 848, 855], "status_cod": 23, "basenam": 23, "zip_save_path": 23, "join": [23, 59, 60, 77, 87, 93, 100, 482, 483, 655, 719, 729, 832, 841, 872], "getcwd": 23, "wb": 23, "zip_ref": 23, "extractal": 23, "option": [23, 50, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 182, 184, 194, 206, 210, 222, 225, 226, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 433, 434, 435, 437, 438, 440, 441, 442, 444, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 558, 560, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 575, 576, 577, 579, 580, 583, 588, 591, 592, 596, 606, 607, 608, 610, 612, 614, 615, 616, 628, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 743, 744, 748, 749, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 796, 803, 807, 808, 810, 811, 813, 815, 816, 825, 830, 838, 839, 840, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 864, 865, 867, 869, 871, 872, 875, 878, 879, 880, 881, 883], "delet": [23, 59, 840, 848], "fail": [23, 59, 790, 832, 836, 839, 840, 843, 848, 849, 851, 855, 858, 860, 861, 862], "augment": [23, 58], "data_transform": 23, "randomresizedcrop": 23, "randomhorizontalflip": 23, "val": [23, 71, 87, 92, 94, 267, 392, 487, 575, 576, 577, 596, 597, 598, 648, 650, 823, 849, 860], "data_dir": 23, "image_dataset": 23, "imagefold": 23, "dataset_s": [23, 60], "class_nam": [23, 60, 792], "imshow": [23, 58, 59], "inp": [23, 97, 652, 674], "clip": [23, 56, 69, 70, 77, 92, 93, 94, 100, 285, 286, 392, 481, 507, 508, 555, 556, 648, 650, 655, 847, 857, 859, 860, 869], "paus": 23, "001": [23, 58, 69, 70, 78, 90, 93, 95, 179, 277, 294, 352, 365, 386, 631, 646, 648, 651, 658, 756, 795], "bit": [23, 70, 83, 178, 179, 182, 245, 246, 248, 401, 538, 539, 646, 648, 663, 776, 777, 782, 784, 837, 838, 839, 847, 848, 849, 851, 857, 869], "batch": [23, 58, 59, 60, 70, 71, 75, 87, 93, 94, 98, 225, 226, 389, 390, 391, 395, 403, 405, 406, 412, 425, 435, 452, 466, 468, 516, 517, 518, 521, 564, 567, 568, 629, 647, 650, 652, 653, 656, 658, 676, 677, 678, 679, 710, 734, 735, 736, 756, 795, 811, 814, 847, 857, 862], "make_grid": 23, "resnet18": [23, 62, 63], "train_model": 23, "train_dataset": 23, "val_dataset": 23, "metric": [23, 832, 871], "train_acc_metr": 23, "sparsecategoricalaccuraci": 23, "val_acc_metr": 23, "nstart": 23, "start_tim": 23, "x_batch_train": 23, "y_batch_train": 23, "gradienttap": 23, "tape": 23, "loss_valu": 23, "grad": [23, 44, 45, 56, 60, 630, 651, 815, 859], "trainable_weight": 23, "apply_gradi": 23, "update_st": 23, "everi": [23, 39, 44, 45, 50, 58, 66, 70, 71, 93, 94, 149, 150, 315, 349, 350, 363, 381, 386, 389, 392, 426, 427, 428, 435, 513, 549, 645, 650, 838, 840, 843, 845, 846, 848, 849, 851, 855, 856, 857, 858, 860, 861, 862, 864, 869, 878, 879, 881, 883], "4f": 23, "float": [23, 64, 66, 67, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 86, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 106, 110, 113, 115, 125, 131, 139, 140, 141, 144, 146, 148, 149, 150, 151, 152, 156, 157, 162, 166, 170, 174, 179, 183, 187, 193, 194, 197, 203, 212, 221, 225, 226, 229, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 258, 259, 260, 261, 265, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 318, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 348, 349, 350, 351, 359, 360, 365, 367, 368, 371, 372, 373, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 401, 404, 413, 414, 415, 432, 433, 440, 443, 444, 446, 459, 463, 465, 466, 467, 471, 472, 487, 506, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 537, 538, 539, 540, 545, 546, 547, 554, 555, 556, 564, 573, 597, 598, 601, 607, 608, 628, 630, 631, 634, 636, 637, 638, 642, 643, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 663, 675, 677, 679, 682, 683, 685, 688, 689, 690, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 710, 712, 713, 714, 734, 735, 736, 743, 756, 759, 760, 766, 768, 769, 770, 771, 776, 777, 779, 780, 781, 782, 783, 784, 785, 792, 795, 796, 798, 807, 810, 811, 814, 815, 830, 836, 843, 847, 849, 852, 853, 854, 856, 857, 859, 860, 862, 864, 865, 867, 869], "train_acc": 23, "acc": 23, "reset": [23, 201, 202, 203, 204, 205, 231, 232, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 646, 647, 650, 850], "reset_st": 23, "x_batch_val": 23, "y_batch_val": 23, "val_logit": 23, "val_acc": 23, "taken": [23, 50, 70, 75, 93, 98, 355, 386, 389, 434, 653, 687, 707, 838, 848, 861, 865, 884], "instanti": [23, 44, 45, 803, 852], "sparsecategoricalcrossentropi": 23, "from_logit": [23, 76, 99, 654, 712, 812], "3121": 23, "2126": 23, "4992": 23, "6072": 23, "244": [23, 69, 259, 832], "3852": 23, "1830": 23, "1015": 23, "1364": 23, "3915": 23, "7465": 23, "8033": 23, "3333": 23, "214": 23, "2763": 23, "3526": 23, "4220": 23, "1592": 23, "8525": 23, "3660": 23, "1085": 23, "1366": 23, "4634": 23, "8115": 23, "3987": 23, "36": [23, 26, 56, 60, 69, 70, 74, 83, 93, 94, 98, 242, 297, 298, 363, 386, 389, 390, 401, 411, 421, 447, 538, 560, 561, 608, 648, 650, 653, 657, 663, 676, 695, 698, 708, 748, 778], "3875": 23, "8096": 23, "5836": 23, "4432": 23, "8402": 23, "3529": 23, "218": [23, 60], "0323": 23, "0982": 23, "4332": 23, "0324": [23, 60], "8197": 23, "3464": 23, "228": [23, 63], "1794": 23, "9244": 23, "9429": 23, "7951": 23, "231": [23, 130, 642], "0132": 23, "4156": 23, "2132": 23, "1413": 23, "8279": 23, "4183": 23, "3028": 23, "1461": 23, "3779": 23, "4553": 23, "8607": 23, "4444": 23, "223": [23, 99], "2835": 23, "0436": 23, "7022": 23, "1335": 23, "8648": 23, "4052": 23, "215": 23, "0863": 23, "0237": 23, "0181": 23, "1331": 23, "8975": 23, "4967": 23, "209": 23, "1050": 23, "2271": 23, "3540": 23, "0588": 23, "8689": 23, "4902": 23, "222": 23, "7880": 23, "4800": 23, "4741": 23, "0218": 23, "5033": 23, "220": [23, 92, 259], "61": [23, 56, 58, 69, 70, 75, 92, 93, 95, 99, 102, 240, 275, 277, 302, 411, 630, 648, 651, 652, 653, 674, 691, 760, 854], "2198": 23, "6509": 23, "3352": 23, "0270": 23, "4771": 23, "216": [23, 95, 98, 630, 651, 708], "0385": 23, "1798": 23, "0143": 23, "0309": 23, "5359": 23, "213": [23, 864], "7697": 23, "3405": 23, "6033": 23, "8392": 23, "8770": 23, "205": [23, 60], "0623": 23, "4221": 23, "0138": 23, "4607": 23, "5294": 23, "221": [23, 64, 126], "0349": 23, "6545": 23, "1935": 23, "1512": 23, "8852": 23, "5098": 23, "212": [23, 58, 70, 74, 93, 373, 386, 676], "0821": 23, "1985": 23, "7769": 23, "3897": 23, "204": 23, "1106": 23, "1354": 23, "1801": 23, "0276": 23, "8893": 23, "5621": 23, "1185": 23, "0447": 23, "2817": 23, "1006": 23, "5752": 23, "2220": 23, "0387": 23, "1639": 23, "0080": 23, "9221": 23, "5686": 23, "0287": 23, "0115": 23, "1679": 23, "7920": 23, "208": 23, "0071": 23, "0790": 23, "2657": 23, "0758": 23, "8934": 23, "210": [23, 850], "2406": 23, "9193": 23, "2372": 23, "9555": 23, "9139": 23, "5817": 23, "211": 23, "1150": [23, 293, 648], "0810": 23, "2205": 23, "1616": 23, "9344": 23, "82": [23, 26, 56, 58, 63, 64, 69, 95, 102, 126, 240, 401, 538, 630, 651, 759, 760, 836, 854], "0200": 23, "0117": 23, "2090": 23, "1444": 23, "5948": 23, "63": [23, 24, 25, 26, 56, 60, 69, 86, 92, 97, 98, 131, 293, 300, 301, 389, 401, 411, 421, 432, 538, 648, 653, 657, 663, 683, 698, 738, 749, 778], "0482": 23, "0338": 23, "5971": 23, "0368": 23, "6144": 23, "207": 23, "1593": 23, "4745": 23, "0733": 23, "0434": 23, "6078": 23, "68": [23, 26, 56, 60, 63, 69, 102, 126, 149, 242, 389, 411, 421, 642, 645, 648, 653, 658, 709, 756, 759, 760], "3923": 23, "1614": 23, "3711": [23, 391, 473], "2719": 23, "6275": 23, "visualize_model": 23, "num_imag": 23, "was_train": 23, "learning_phas": 23, "images_so_far": 23, "pred": [23, 44, 45, 59, 60, 70, 76, 93, 99, 391, 467, 470, 654, 712, 713, 714, 715, 847, 857, 860], "j": [23, 66, 69, 70, 71, 75, 83, 89, 92, 93, 98, 110, 138, 142, 155, 235, 236, 237, 238, 240, 243, 252, 254, 257, 259, 267, 275, 277, 281, 287, 298, 300, 301, 304, 305, 352, 386, 389, 390, 401, 417, 418, 422, 433, 434, 438, 443, 445, 456, 462, 547, 552, 644, 645, 648, 650, 653, 663, 688, 707, 778, 826, 840, 842, 846, 879], "continu": [23, 40, 44, 45, 60, 138, 301, 309, 381, 644, 648, 832, 837, 838, 839, 842, 843, 854, 860, 863, 864, 871, 875, 883], "yet": [24, 25, 26, 27, 29, 33, 34, 35, 37, 38, 39, 40, 45, 60, 382, 384, 385, 393, 394, 398, 838, 839, 854, 871, 879, 881], "broken": [24, 25, 37, 39, 40, 883], "permiss": [24, 25, 37, 39, 40, 839, 848], "recommend": [24, 25, 37, 39, 40, 282, 283, 296, 391, 468, 648, 663, 780, 783, 834, 839, 845, 846, 855, 858, 859, 872, 879], "virtual": [24, 25, 37, 39, 40, 840, 861], "pypa": [24, 25, 37, 39, 40], "venv": [24, 25, 37, 39, 40], "autofeatureextractor": [24, 25, 44], "extractor": [24, 25, 27, 29, 44, 60], "hug": [24, 25, 44, 879], "face": [24, 25, 44, 833, 839, 843, 854, 855, 859, 867, 869, 879, 883], "arch_nam": [24, 25, 44], "microsoft": [24, 25, 44, 878, 879, 883], "feature_extractor": [24, 25, 44], "980130": [24, 25], "9342": [24, 25], "980177": [24, 25], "609": [24, 25], "980207": [24, 25], "1518": [24, 25], "351203": [24, 25], "inputs_jax": [24, 25, 44], "last_hidden_st": [24, 25, 44], "jax_forward": [24, 25, 44], "jit_appli": [24, 25], "134": [24, 25, 74, 653, 676, 695], "2x": [24, 25, 44], "ipytest": 26, "load_breast_canc": 26, "autoconfig": 26, "sole": [26, 56, 856, 865, 883, 884, 885], "test_jax_gpu": 26, "xla_bridg": [26, 58], "get_backend": [26, 857], "test_torch_gpu": 26, "test_xgboost_gpu": 26, "capsi": 26, "load_diabet": 26, "xgb_model": 26, "xgbregressor": 26, "tree_method": 26, "consol": [26, 590, 650, 840, 855, 864], "gpu_hist": 26, "captur": [26, 859, 864, 869, 884], "readouterr": 26, "err": 26, "tabular": 26, "pulsar": 26, "standard": [26, 69, 75, 78, 79, 83, 92, 101, 102, 106, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 156, 157, 158, 159, 160, 162, 163, 169, 179, 182, 194, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 349, 350, 352, 386, 389, 390, 392, 401, 433, 463, 507, 511, 537, 629, 645, 646, 648, 650, 653, 655, 658, 659, 660, 661, 662, 663, 664, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 719, 721, 722, 723, 725, 726, 728, 729, 733, 756, 759, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 797, 810, 814, 825, 826, 832, 835, 842, 843, 844, 847, 849, 852, 856, 860, 863, 864, 865, 871, 875, 878, 885], "extra": [26, 45, 87, 116, 135, 629, 644, 650, 844, 849, 851, 858, 860, 861, 862, 867, 870, 878, 879], "dimens": [26, 66, 70, 71, 74, 75, 76, 77, 79, 80, 81, 83, 84, 87, 89, 93, 94, 97, 98, 99, 100, 102, 103, 104, 106, 107, 113, 115, 116, 119, 126, 130, 155, 159, 160, 330, 341, 343, 344, 345, 346, 349, 350, 354, 355, 363, 370, 377, 383, 386, 387, 389, 390, 391, 392, 395, 396, 399, 401, 403, 405, 406, 408, 409, 410, 412, 417, 418, 422, 426, 427, 428, 429, 432, 433, 435, 436, 438, 440, 443, 452, 461, 466, 470, 476, 477, 478, 482, 488, 500, 501, 502, 503, 505, 507, 511, 516, 517, 518, 521, 525, 527, 530, 540, 542, 543, 544, 545, 546, 547, 560, 561, 562, 564, 571, 605, 609, 629, 642, 645, 650, 652, 653, 654, 655, 656, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 710, 713, 714, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 734, 735, 736, 762, 763, 764, 766, 768, 769, 770, 771, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 797, 807, 811, 814, 851, 853, 859, 861, 862, 864, 867, 869], "load_data": 26, "standardscal": 26, "df": [26, 60], "delimit": 26, "sc": 26, "fit_transform": 26, "117564": 26, "navig": [26, 836, 839, 840, 842, 854], "rerun": [26, 58], "436": 26, "t4": 26, "tier": [26, 841], "reduc": [26, 70, 71, 75, 80, 83, 84, 87, 93, 94, 98, 103, 106, 107, 227, 349, 350, 370, 386, 387, 401, 542, 543, 544, 545, 546, 547, 561, 647, 650, 653, 660, 663, 664, 700, 763, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 825, 826, 848, 853, 861, 867, 869, 879], "although": [26, 653, 701, 834, 844, 846, 847, 861, 867, 883], "experi": [26, 31, 60, 839, 853, 864, 871], "substanti": [26, 835, 840, 844, 849, 864, 883], "stuff": 26, "201": [26, 92, 93, 239, 411, 648], "20x": 26, "ivyclassifi": 26, "106597": 26, "10967": 26, "96": [26, 56, 70, 72, 92, 93, 94, 102, 251, 272, 304, 374, 386, 389, 411, 560, 561, 634, 648, 650, 651, 653, 663, 698, 760, 778], "73": [26, 56, 69, 98, 301, 401, 538, 653, 659, 683, 759, 864], "852": [26, 652, 676], "449": 26, "nevertheless": 26, "fall": [26, 58, 815, 838, 849], "short": [26, 56, 70, 93, 437, 652, 677, 678, 838, 840, 849, 869], "blaze": 26, "35": [26, 56, 64, 74, 75, 86, 92, 93, 97, 98, 102, 126, 242, 301, 389, 411, 421, 648, 652, 653, 660, 663, 676, 684, 691, 759, 767, 778], "surpass": 26, "remark": [26, 871], "artifici": 26, "simpli": [26, 33, 44, 45, 47, 56, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 648, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 703, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 832, 838, 839, 840, 844, 845, 846, 848, 849, 850, 851, 852, 854, 856, 857, 860, 861, 862, 864, 867, 869, 870, 871, 873, 884], "x_doubl": 26, "vstack": [26, 70, 93, 392, 494], "y_doubl": 26, "235128": 26, "315": [26, 293, 648], "879": 26, "380": 26, "seem": [26, 838, 839, 867, 869, 871, 883], "examin": 26, "600": [26, 60, 94, 97, 389, 413, 414, 568, 848], "conduct": [26, 876], "num_boosting_round": 26, "300": [26, 92, 94, 97, 297, 389, 413, 414, 568, 592, 648, 650, 653, 692, 864], "500": [26, 70, 93, 94, 97, 389, 390, 413, 414, 465, 568, 650], "ivy_elapsed_tim": 26, "xgb_elapsed_tim": 26, "ivy_tim": 26, "partial": [26, 70, 87, 93, 180, 181, 213, 214, 363, 386, 389, 390, 392, 401, 437, 452, 459, 500, 501, 502, 503, 544, 565, 566, 635, 646, 647, 650, 651, 796, 798, 812, 813, 840, 846, 867], "xgb_time": 26, "fivethirtyeight": 26, "legend": [26, 60, 838], "loc": 26, "best": [26, 58, 587, 650, 826, 830, 832, 833, 836, 837, 838, 839, 840, 842, 848, 849, 853, 854, 863, 864, 865, 872, 876], "xlabel": 26, "ylabel": 26, "obviou": [26, 883], "trend": 26, "gap": 26, "train_siz": [26, 58], "widen": 26, "impress": 26, "outcom": [26, 70, 93, 351, 363, 386, 826], "tend": 26, "95933": 26, "9874": 26, "105807": 26, "wrap": [26, 33, 35, 44, 45, 47, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 603, 606, 607, 608, 609, 610, 612, 614, 615, 626, 628, 630, 631, 634, 636, 637, 638, 640, 650, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 703, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 792, 832, 842, 843, 844, 845, 847, 848, 849, 850, 852, 853, 856, 857, 860, 861, 864, 869, 870, 871, 873, 878, 879, 883, 884], "balanc": 26, "breast": 26, "cancer": 26, "return_x_i": 26, "171": [26, 75, 653, 691, 795], "perfectli": [26, 797], "align": [26, 70, 87, 93, 389, 390, 425, 441, 652, 681, 826, 835, 839, 848, 861, 863, 869, 873], "timm": [27, 44, 45, 832, 878], "focu": [27, 40, 838, 859, 885], "mlp": 27, "mixer": 27, "onli": [27, 29, 44, 45, 50, 56, 58, 60, 62, 65, 66, 69, 70, 75, 77, 79, 87, 89, 92, 93, 98, 100, 102, 110, 113, 115, 131, 152, 192, 193, 222, 282, 283, 288, 294, 326, 356, 363, 383, 386, 389, 390, 392, 396, 401, 412, 425, 435, 444, 449, 463, 465, 476, 477, 478, 488, 523, 524, 540, 554, 642, 645, 646, 647, 648, 650, 652, 653, 655, 657, 659, 660, 662, 663, 679, 693, 700, 703, 704, 722, 725, 737, 738, 744, 745, 747, 748, 749, 754, 755, 758, 759, 760, 763, 764, 774, 780, 783, 793, 795, 796, 798, 811, 815, 825, 830, 832, 833, 834, 838, 839, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 856, 857, 859, 860, 861, 862, 864, 865, 866, 867, 869, 870, 871, 878, 879, 883, 884, 885], "retriev": [27, 29, 33, 550, 572, 597, 650, 840, 861], "mlp_encod": [27, 44, 45, 832, 878], "create_model": [27, 44, 45, 832, 878], "mixer_b16_224": [27, 44, 45, 832, 878], "nois": [27, 29, 44, 45, 832, 878, 879], "randn": [27, 29, 44, 45, 392, 511, 832, 878], "tf_mlp_encod": [27, 44, 45], "output_torch": [27, 29], "output_tf": [27, 29], "output_dens": [27, 44, 45, 832], "dens": [27, 40, 44, 45, 330, 383, 811, 832], "unit": [27, 44, 45, 70, 86, 93, 110, 111, 123, 125, 126, 127, 128, 129, 130, 131, 309, 310, 313, 317, 319, 320, 323, 324, 325, 381, 519, 520, 642, 832, 839, 843, 849, 861, 862, 864, 871, 884], "mention": [27, 29, 44, 45, 50, 838, 839, 840, 844, 851, 856, 857, 860, 861, 864, 867, 881, 883], "fulli": [27, 29, 31, 32, 35, 40, 44, 45, 58, 70, 93, 401, 544, 811, 832, 844, 849, 856, 859, 867, 869, 871, 881, 883, 885], "ground": [27, 29, 391, 467, 790, 792, 803, 836, 854, 861, 864], "ret": [27, 29, 44, 45, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 399, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 450, 452, 455, 457, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 591, 592, 596, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 743, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 796, 797, 798, 808, 813, 815, 820, 826, 828, 832, 849, 850, 852, 853, 859, 860, 861, 862, 865, 869, 870, 878], "eagertensor": [27, 33, 56, 820, 862], "deepmind": 28, "perceiverio": 28, "backbon": [28, 58, 832, 870], "TO": [28, 30, 41], "efficientnet": 29, "eff_encod": [29, 832], "efficientnet_v2": [29, 832], "efficientnetv2b0": [29, 832], "storag": [29, 58, 59], "googleapi": [29, 58, 59], "efficientnetv2": 29, "b0_notop": 29, "h5": [29, 87], "24274472": 29, "0u": 29, "torch_eff_encod": [29, 832], "modes_to_trac": 29, "1280": [29, 560, 650, 832], "welcom": [31, 59, 832, 833, 839, 840, 841, 863], "varieti": [31, 843, 848, 849, 850, 864, 866], "organ": [31, 844, 847, 857, 861, 863, 865, 873, 875, 876], "main": [31, 45, 66, 70, 75, 93, 98, 146, 159, 160, 161, 327, 342, 343, 383, 390, 392, 441, 487, 645, 653, 686, 687, 707, 832, 835, 838, 839, 840, 841, 843, 846, 847, 854, 858, 860, 883, 884], "exactli": [31, 35, 42, 47, 56, 57, 61, 304, 648, 838, 847, 848, 849, 850, 851, 853, 864, 867], "rush": 31, "jump": [31, 862], "straight": [31, 832, 848, 861, 864], "quickstart": [31, 832], "introduct": [31, 33, 40, 44, 45, 883], "point": [31, 40, 67, 69, 70, 75, 79, 81, 83, 90, 92, 93, 98, 102, 106, 139, 140, 141, 144, 146, 149, 156, 157, 162, 166, 179, 183, 187, 194, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 267, 268, 269, 270, 275, 276, 277, 278, 279, 287, 289, 290, 292, 294, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 326, 327, 329, 349, 350, 367, 368, 371, 373, 383, 386, 389, 390, 391, 396, 401, 404, 413, 414, 415, 433, 443, 463, 467, 523, 524, 525, 526, 527, 537, 538, 539, 547, 643, 645, 646, 648, 653, 659, 660, 661, 662, 663, 683, 685, 688, 689, 690, 692, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 707, 710, 759, 760, 766, 768, 769, 770, 771, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 820, 821, 830, 836, 838, 839, 840, 843, 844, 846, 848, 849, 851, 852, 854, 856, 860, 861, 864, 865, 867, 869, 879], "showcas": [31, 832], "real": [31, 39, 69, 70, 83, 92, 93, 106, 115, 125, 128, 131, 142, 156, 157, 234, 235, 236, 237, 239, 240, 241, 242, 243, 252, 254, 255, 257, 259, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 284, 287, 289, 290, 292, 296, 297, 298, 300, 301, 302, 303, 304, 305, 307, 308, 349, 350, 356, 357, 358, 368, 386, 389, 390, 412, 433, 434, 443, 444, 642, 645, 648, 653, 660, 663, 688, 689, 690, 694, 701, 703, 704, 707, 710, 766, 779, 781, 782, 783, 784, 847], "world": [31, 39, 840], "beginn": [31, 833, 883], "got": [31, 56, 853], "cover": [31, 44, 70, 93, 389, 426, 427, 428, 838, 843, 844, 846, 849, 851, 852, 857, 858, 864, 867], "lazi": [31, 32, 35, 38, 47, 50, 51, 62], "familiar": [33, 838, 839], "concept": 33, "roundup": [33, 876], "indep": [33, 44], "proof": [33, 44], "delv": [33, 45, 832], "theori": [33, 834, 846], "esenti": [33, 44], "abstract": [33, 44, 45, 810, 815, 832, 847, 849, 860, 861, 864, 867, 883], "quirk": [33, 44], "perk": [33, 44, 832, 844, 847], "under": [33, 44, 45, 70, 391, 470, 471, 825, 838, 839, 842, 843, 850, 851, 852, 855, 861, 862, 864, 867, 868, 870, 871, 878, 879, 883], "hood": [33, 44, 45, 842, 850, 851, 855, 861, 864, 867, 868, 870, 878, 879], "appropi": 33, "string": [33, 44, 45, 60, 70, 71, 74, 87, 93, 97, 164, 165, 177, 184, 206, 207, 208, 209, 210, 212, 221, 228, 229, 233, 389, 390, 392, 432, 436, 444, 498, 510, 539, 558, 646, 647, 650, 652, 653, 665, 666, 667, 668, 670, 672, 674, 690, 790, 792, 796, 825, 826, 845, 846, 848, 849, 850, 853, 861, 869], "simplest": [33, 839, 851, 864, 867], "interact": [33, 44, 59, 62, 838, 883], "submodul": [33, 44, 58, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 838, 839, 840, 843, 846, 848, 850, 854, 857, 858, 864, 869, 873], "likewis": [33, 38, 44, 51, 840, 847, 849, 852, 856, 857, 861, 867, 878, 879], "nativearrai": [33, 44, 45, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 140, 141, 142, 143, 145, 150, 151, 152, 153, 154, 155, 157, 159, 160, 163, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 179, 182, 185, 186, 187, 189, 191, 193, 194, 200, 210, 211, 227, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 331, 332, 336, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 537, 538, 539, 540, 541, 549, 552, 553, 555, 556, 560, 561, 562, 564, 567, 568, 569, 570, 571, 573, 575, 576, 577, 580, 583, 584, 586, 591, 592, 593, 596, 605, 606, 607, 608, 609, 610, 612, 614, 615, 617, 628, 630, 631, 632, 634, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 738, 739, 740, 744, 745, 746, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 816, 844, 847, 851, 853, 856, 857, 858, 860, 861, 865, 866, 869, 873], "alia": [33, 44, 349, 350, 386, 643, 838, 861, 881], "lastli": [33, 44, 844], "subclass": [33, 44, 45, 858, 861, 867, 878], "dict": [33, 44, 45, 58, 62, 65, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 148, 150, 155, 157, 163, 167, 169, 180, 181, 182, 186, 187, 194, 210, 213, 214, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 339, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 383, 392, 412, 413, 414, 415, 433, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 498, 505, 507, 508, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 550, 552, 553, 555, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 587, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 640, 644, 646, 647, 650, 657, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 737, 738, 740, 743, 744, 745, 746, 748, 749, 750, 754, 755, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 792, 793, 808, 811, 813, 820, 826, 844, 847, 873, 878, 879, 881], "recurs": [33, 44, 45, 58, 60, 65, 87, 88, 180, 181, 213, 214, 390, 462, 565, 566, 572, 646, 647, 650, 657, 737, 738, 741, 747, 748, 749, 790, 839, 843, 846, 847, 854, 857, 860, 871], "fashion": [33, 797, 864, 878], "native_arrai": [33, 44, 45, 66, 67, 69, 89, 91, 92, 93, 94, 98, 105, 123, 126, 150, 153, 155, 157, 163, 166, 167, 168, 169, 177, 182, 189, 211, 220, 228, 244, 248, 253, 254, 255, 257, 261, 265, 273, 274, 282, 287, 290, 293, 296, 301, 349, 350, 377, 386, 391, 392, 472, 498, 499, 505, 509, 549, 552, 579, 580, 583, 614, 642, 645, 646, 647, 648, 650, 652, 653, 654, 655, 659, 660, 663, 664, 666, 667, 674, 682, 685, 689, 690, 695, 696, 700, 704, 705, 707, 710, 712, 714, 718, 725, 757, 766, 775, 781, 784, 786, 792, 802, 820, 836, 854, 862, 864], "data_class": [33, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 409, 410, 560, 564, 703, 731], "low": [33, 44, 47, 63, 70, 74, 79, 93, 97, 102, 389, 432, 436, 652, 659, 665, 666, 667, 668, 670, 672, 674, 758, 760, 797, 847, 853, 860, 861, 867, 870, 883, 884], "c": [33, 44, 50, 59, 60, 66, 70, 71, 72, 74, 77, 83, 89, 90, 92, 93, 94, 95, 97, 98, 100, 104, 106, 110, 111, 129, 140, 141, 152, 155, 179, 182, 237, 248, 254, 255, 275, 276, 278, 287, 290, 298, 305, 389, 390, 392, 395, 401, 403, 404, 405, 406, 417, 422, 438, 440, 442, 443, 445, 457, 476, 477, 478, 488, 507, 511, 516, 517, 518, 521, 539, 552, 560, 561, 562, 563, 571, 575, 576, 606, 615, 630, 631, 634, 636, 637, 638, 642, 645, 646, 648, 650, 651, 652, 653, 655, 657, 660, 661, 663, 666, 667, 668, 669, 670, 671, 673, 688, 690, 692, 725, 729, 737, 740, 744, 745, 746, 748, 749, 754, 755, 766, 771, 777, 778, 783, 785, 814, 825, 826, 833, 839, 842, 845, 846, 847, 851, 857, 859, 869, 870, 871, 873, 878, 882, 883], "fundament": [33, 44, 848, 861, 867, 869, 883], "signatur": [33, 44, 392, 401, 498, 537, 849, 850, 851, 852, 856, 860, 864, 865, 867], "matmul": [33, 44, 45, 61, 75, 98, 390, 460, 629, 650, 653, 703, 845, 864, 865, 869, 870], "to_n": [33, 44, 45, 56, 65, 88, 869], "jaxlib": [33, 36, 39, 59, 820, 839, 844, 849, 850, 856, 865, 869], "xla_extens": [33, 39, 820, 844, 849, 850, 856, 865, 869], "arrayimpl": [33, 39, 820], "disabl": [33, 44, 70, 93, 392, 507, 813, 830, 846], "array_mod": [33, 44, 593, 617, 650, 866], "set_array_mod": [33, 44, 617, 650, 866], "ultim": [33, 44, 875, 879], "sigmoid": [33, 44, 45, 56, 64, 70, 86, 93, 315, 381, 396, 523, 642, 807, 869], "z": [33, 44, 45, 57, 58, 66, 69, 70, 71, 75, 76, 79, 81, 83, 89, 92, 93, 94, 98, 99, 100, 102, 106, 115, 116, 151, 152, 154, 155, 215, 237, 238, 242, 244, 247, 249, 254, 265, 266, 269, 270, 271, 273, 274, 279, 281, 283, 284, 285, 286, 294, 303, 314, 315, 349, 350, 352, 381, 386, 391, 401, 467, 469, 470, 471, 472, 473, 479, 483, 494, 536, 537, 540, 547, 552, 564, 567, 568, 575, 576, 592, 605, 607, 608, 616, 629, 645, 647, 648, 650, 653, 654, 655, 657, 659, 660, 661, 663, 684, 693, 698, 699, 703, 710, 712, 713, 714, 718, 740, 744, 746, 754, 758, 759, 760, 763, 768, 778, 779, 781, 782, 783, 810, 845, 847, 850, 851, 869, 870, 879], "divid": [33, 38, 44, 45, 61, 69, 70, 71, 77, 87, 92, 93, 100, 115, 116, 261, 395, 468, 516, 517, 518, 521, 607, 648, 650, 655, 727, 844, 847, 851, 855, 864], "exp": [33, 44, 45, 69, 70, 92, 93, 129, 131, 259, 279, 292, 315, 381, 389, 391, 417, 422, 471, 642, 648, 653, 701, 859, 861], "entir": [33, 44, 45, 47, 60, 70, 83, 84, 87, 93, 94, 106, 107, 227, 257, 259, 299, 300, 349, 350, 386, 389, 392, 401, 413, 414, 415, 498, 540, 573, 647, 648, 663, 664, 779, 780, 781, 782, 783, 784, 785, 786, 787, 811, 826, 838, 839, 840, 843, 844, 847, 849, 851, 853, 860, 861, 862, 864, 867, 869, 871, 875, 878, 883, 885], "congratul": [33, 39], "independ": [33, 45, 70, 79, 93, 102, 237, 254, 287, 297, 395, 396, 521, 523, 648, 653, 659, 684, 702, 757, 832, 843, 849, 851, 858, 869, 878], "div": [34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 881], "sub": [34, 35, 36, 37, 38, 44, 45, 46, 47, 48, 49, 50, 51, 70, 75, 77, 87, 88, 92, 93, 94, 98, 100, 116, 286, 390, 392, 401, 444, 484, 493, 514, 543, 544, 572, 650, 653, 655, 656, 687, 707, 727, 734, 735, 736, 838, 840, 842, 847, 853, 861, 862, 864, 875, 881], "with_numpi": 34, "reproduc": [34, 61, 74, 97, 652, 675, 795, 796, 797, 798, 803, 836, 843, 854, 876], "x_": [34, 46, 111, 298, 648, 881], "66391283": 34, "12516928": 34, "38367081": 34, "03102401": 34, "76419425": 34, "52797794": 34, "90346956": 34, "61316347": 34, "27585283": 34, "66309303": 34, "ivy_repo": 34, "sever": [34, 35, 46, 47, 49, 50, 51, 70, 93, 110, 389, 390, 403, 404, 405, 406, 458, 795, 839, 840, 865, 871], "pro": [34, 35, 36, 46, 47, 48, 49, 50, 51, 875], "turn": [35, 47, 74, 97, 110, 111, 413, 414, 415, 652, 675, 811, 839, 846, 847, 850, 851, 861, 864], "unus": [35, 851, 860], "part": [35, 66, 69, 70, 92, 93, 98, 115, 125, 128, 131, 142, 159, 160, 161, 267, 271, 294, 342, 343, 369, 383, 386, 389, 390, 392, 401, 433, 444, 498, 547, 642, 645, 648, 653, 689, 690, 792, 838, 839, 840, 841, 843, 846, 849, 855, 857, 860, 861, 864, 865, 867, 871, 878, 879, 881, 882, 883], "pick": [35, 47, 810], "trigger": [35, 47, 813, 838, 855], "unif": [35, 37, 47, 49, 833], "55563945": 35, "65538704": 35, "14150524": 35, "46951997": 35, "30220294": 35, "14739668": 35, "57017946": 35, "91962677": 35, "51029003": 35, "59644395": 35, "constitu": [35, 47, 87], "5556394": 35, "655387": 35, "1415051": 35, "4695197": 35, "3022028": 35, "1473966": 35, "5701794": 35, "91962665": 35, "51028997": 35, "5964439": 35, "985": 35, "000": [35, 92, 288, 795, 836, 848, 854], "On": [35, 44, 45, 839, 849, 850, 855, 861, 864, 867], "hand": [35, 69, 390, 460, 795, 843, 849, 850, 855, 857, 864, 871], "learnt": [36, 48], "ivy_norm": 36, "jax_norm": [36, 44, 45], "wider": [36, 48, 600, 623, 650, 849, 866], "avoid": [36, 48, 50, 70, 77, 93, 254, 259, 261, 277, 287, 391, 392, 395, 468, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 514, 516, 517, 518, 554, 570, 572, 595, 600, 623, 648, 650, 655, 721, 722, 723, 725, 727, 728, 730, 732, 797, 798, 839, 840, 845, 846, 847, 848, 849, 853, 858, 861, 864, 865, 866, 867, 883], "act": [36, 48, 70, 93, 312, 377, 387, 840, 851, 866, 871], "shorthand": [36, 48, 50, 864], "pair": [36, 48, 58, 70, 74, 93, 97, 242, 261, 334, 376, 383, 386, 389, 423, 432, 434, 436, 648, 652, 653, 665, 666, 667, 668, 670, 672, 674, 682, 684, 826], "93968587": 36, "26075466": 36, "22723222": 36, "06276492": 36, "47426987": 36, "72835908": 36, "71737559": 36, "50411096": 36, "65419174": 36, "15576624": 36, "implic": [36, 48, 49, 52, 847], "fw": [37, 39, 40, 74, 97, 401, 537, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 792, 839, 864], "mxnet": [37, 39, 40, 223, 647, 820, 838, 839], "miniconda": [37, 39, 40], "multienv": [37, 39, 40], "lazili": [37, 38, 39, 44, 45, 49, 51, 62, 878, 879, 881], "actual": [37, 49, 836, 840, 842, 848, 854, 857, 858, 860, 861, 862, 864, 867, 868, 871, 884], "occur": [37, 44, 45, 49, 62, 67, 69, 81, 90, 92, 104, 169, 288, 304, 646, 648, 660, 661, 763, 764, 768, 769, 770, 771, 832, 843, 848, 850, 853, 866], "altern": [37, 49, 59, 70, 93, 98, 110, 111, 348, 356, 357, 358, 362, 364, 365, 366, 367, 369, 370, 371, 375, 376, 386, 838, 839, 846, 860], "assum": [37, 49, 50, 51, 66, 69, 70, 71, 74, 75, 76, 92, 93, 94, 97, 98, 99, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 327, 343, 349, 350, 352, 355, 373, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 458, 460, 498, 507, 511, 537, 540, 567, 571, 573, 575, 584, 606, 615, 640, 645, 646, 648, 650, 651, 652, 653, 654, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 811, 825, 839, 843, 845, 848, 849, 852, 862, 864, 867, 871], "201733": 37, "slowli": [37, 49], "norm": [37, 49, 50, 70, 71, 75, 93, 94, 98, 109, 110, 389, 390, 411, 412, 416, 417, 418, 421, 422, 423, 433, 434, 440, 444, 519, 520, 522, 555, 556, 577, 650, 653, 694, 710, 756, 811, 815, 865], "slow": [37, 49, 834, 839, 846], "34431235": [37, 38], "51129461": [37, 38], "06686894": [37, 38], "36452447": [37, 38], "98795534": [37, 38], "15493582": [37, 38], "91630631": [37, 38], "41939619": [37, 38], "78909753": [37, 38], "19475674": [37, 38], "norm_trac": 37, "norm_tran": [37, 49], "subtract": [38, 44, 45, 69, 92, 115, 116, 148, 392, 498, 645, 648, 844, 847, 851], "happen": [38, 44, 45, 306, 648, 832, 839, 840, 841, 850, 860, 864, 878, 879], "wherea": [38, 51, 93, 389, 435, 840, 844, 847, 849, 850, 851, 856, 857, 864, 885], "graph_transpil": [38, 877], "often": [39, 70, 391, 466, 837, 843, 853, 856, 857, 861, 864, 871, 875, 884], "fortun": [39, 40, 843], "everyth": [39, 59, 825, 832, 838, 839, 840, 841, 842, 848, 851, 860, 861, 862, 864, 871], "practic": [39, 840, 845, 848, 861, 863], "jax_kornia": [39, 44, 45, 832, 878], "000000000034": [39, 44, 45, 832, 878], "raw_img": [39, 44, 45, 832, 878], "sharp": [39, 44, 45, 832], "prefer": [39, 44, 45, 261, 648, 839, 847, 853, 854, 858, 861, 872, 875, 876, 883], "whole": [40, 70, 93, 392, 395, 506, 519, 520, 522, 840, 846, 855], "full": [40, 70, 75, 93, 97, 98, 110, 111, 113, 179, 266, 274, 337, 338, 339, 340, 341, 383, 390, 391, 392, 463, 464, 470, 471, 500, 503, 594, 603, 618, 626, 645, 646, 648, 650, 652, 653, 667, 669, 670, 671, 673, 696, 700, 702, 703, 796, 803, 832, 839, 840, 846, 849, 852, 853, 856, 857, 861, 864, 867, 869, 871, 883, 885], "complex": [40, 44, 45, 58, 64, 69, 70, 75, 83, 86, 90, 92, 93, 98, 106, 123, 124, 125, 126, 127, 128, 129, 130, 131, 156, 157, 172, 186, 195, 201, 234, 235, 236, 237, 238, 239, 240, 243, 251, 252, 254, 255, 257, 259, 267, 268, 269, 270, 271, 275, 276, 277, 278, 287, 289, 290, 292, 294, 297, 298, 299, 300, 301, 304, 305, 309, 314, 315, 317, 352, 357, 358, 381, 386, 389, 390, 401, 412, 423, 433, 434, 438, 443, 444, 445, 456, 458, 545, 546, 607, 608, 642, 645, 646, 648, 650, 653, 660, 663, 688, 689, 690, 694, 701, 703, 705, 707, 710, 766, 781, 782, 784, 796, 807, 826, 835, 838, 841, 846, 849, 851, 858, 861, 864, 865, 867, 869, 871, 873, 876, 878, 883], "neccessari": 40, "set_random_se": [40, 61], "301436": 40, "_c": 40, "0x7f252c392390": 40, "flatten": [40, 43, 44, 45, 58, 60, 63, 70, 71, 75, 77, 80, 81, 93, 94, 98, 100, 103, 104, 354, 370, 386, 390, 392, 401, 441, 487, 497, 502, 507, 508, 511, 513, 535, 542, 543, 544, 545, 546, 547, 560, 564, 650, 653, 655, 660, 661, 691, 698, 710, 719, 724, 726, 763, 764, 768, 769, 770, 771, 790, 792, 832, 860, 867], "keyword": [40, 44, 45, 60, 62, 65, 66, 70, 87, 93, 116, 153, 288, 389, 392, 401, 437, 498, 537, 551, 554, 587, 616, 645, 648, 650, 653, 657, 663, 704, 743, 784, 790, 792, 796, 812, 813, 825, 838, 844, 847, 849, 850, 858, 860, 861, 862, 864, 865, 867, 878, 879, 881], "input_arrai": [40, 44, 45, 860], "torch_model": [40, 44, 45, 62], "159": [40, 86, 123, 642, 652, 676], "thank": 40, "fledg": [40, 839], "output_arrai": [40, 44, 45, 70, 468], "0893": 40, "1504": 40, "1372": 40, "0991": 40, "0867": 40, "0851": 40, "0911": 40, "0804": 40, "0926": 40, "0881": 40, "softmaxbackward0": 40, "furthermor": 40, "relat": [40, 261, 648, 832, 834, 837, 838, 839, 840, 846, 853, 861, 864, 865, 866, 867, 878], "regress": [41, 883], "boiler": 42, "plate": 42, "mathemat": [42, 75, 98, 237, 242, 254, 259, 261, 277, 287, 643, 648, 653, 694, 710, 849, 861, 867, 883], "minut": [42, 839, 848], "tensorshap": [42, 43], "torch_x": [42, 832], "tf_x": [42, 832], "torch_out": 42, "tf_out": 42, "example_model": 43, "simplemodel": 43, "tfsimplemodel": 43, "tf_model": [43, 878], "compiled_model": 43, "checkout": [44, 59, 840, 843, 864], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 44, "theoret": 44, "aspect": [44, 45, 833, 859, 883, 885], "easiest": [44, 832, 834, 839, 872], "defer": [44, 45, 838, 844, 849, 850, 857, 860, 861, 864], "similarli": [44, 57, 153, 161, 237, 342, 349, 350, 383, 386, 645, 648, 845, 849, 861, 867, 876], "essenc": [44, 884], "becom": [44, 70, 93, 110, 360, 386, 392, 478, 655, 718, 820, 840, 841, 847, 849, 851, 853, 860, 871, 879], "slide": [44, 70, 74, 93, 97, 389, 408, 409, 410, 426, 427, 428, 429, 432, 436, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 811], "regressor": [44, 45], "input_dim": [44, 45, 59], "output_dim": [44, 45, 59], "linear0": [44, 45, 56], "linear1": [44, 45, 56], "adam": [44, 45, 56, 60, 72, 95, 551, 630, 631, 636, 650, 651, 815, 883], "n_training_exampl": [44, 45], "2000": [44, 45, 93, 328, 383], "random_norm": [44, 45, 74, 75, 79, 97, 98, 102, 560, 650, 652, 653, 659, 667, 669, 670, 671, 673, 674, 678, 703], "linspac": [44, 45, 66, 89, 139, 645, 856, 867, 869], "execute_with_gradi": [44, 45, 56, 60, 651, 871], "lambda": [44, 45, 61, 63, 93, 136, 138, 311, 321, 559, 572, 632, 633, 635, 641, 644, 650, 651, 653, 657, 689, 744, 745, 749, 838, 857, 858, 859, 862, 867, 870], "5f": [44, 45], "nonetheless": [44, 45], "gc": [44, 45, 572, 650], "decompos": [44, 45, 70, 93, 110, 113, 337, 338, 339, 340, 341, 362, 369, 383, 386, 390, 454, 459, 462, 465, 861], "said": [44, 45, 797, 865, 879], "otherwis": [44, 45, 62, 65, 66, 67, 69, 70, 71, 74, 75, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 139, 141, 143, 148, 150, 151, 152, 155, 157, 163, 166, 167, 169, 170, 172, 173, 174, 175, 176, 185, 189, 193, 194, 210, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 323, 324, 325, 327, 337, 338, 339, 340, 341, 348, 349, 350, 351, 352, 354, 355, 356, 364, 365, 371, 373, 375, 376, 377, 381, 383, 386, 389, 390, 392, 395, 408, 409, 410, 413, 414, 415, 433, 446, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 484, 486, 488, 489, 490, 497, 505, 507, 508, 509, 511, 514, 516, 518, 519, 520, 522, 524, 536, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 584, 591, 592, 606, 607, 608, 610, 612, 614, 615, 616, 628, 632, 634, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 656, 657, 660, 661, 662, 663, 664, 666, 667, 668, 669, 675, 676, 677, 679, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 703, 707, 709, 710, 712, 713, 714, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 750, 757, 758, 759, 760, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 795, 796, 811, 813, 814, 820, 832, 840, 844, 847, 849, 850, 851, 857, 858, 860, 864, 869, 878, 879], "x0": [44, 45, 63, 94, 552, 650, 851], "normalize_trac": [44, 45], "html": [44, 45, 59, 69, 70, 92, 93, 161, 169, 257, 267, 268, 283, 342, 349, 350, 383, 386, 389, 392, 401, 433, 507, 537, 645, 646, 648, 653, 655, 663, 701, 702, 733, 783, 852], "fname": [44, 45, 61, 63, 813], "anticip": [44, 45], "addition": [44, 45, 847, 860, 861], "normalize_native_comp": [44, 45], "return_backend_compiled_fn": 44, "immedi": [44, 45, 830, 832, 838, 839, 870], "eager_graph": [44, 45, 832, 878, 879], "lazy_graph": [44, 45, 832, 878, 879], "thought": [44, 45, 839, 840, 856], "matter": [44, 45, 50, 851], "haven": [44, 45, 50, 883], "jax_out": [44, 45], "ideal": [44, 45, 848, 849, 861, 867], "worth": [44, 45], "differenti": [44, 45, 309, 379, 380, 381, 388, 875, 883], "chosen": [44, 45, 63, 113, 139, 242, 645, 648, 660, 767, 838, 848, 861], "plai": [44, 45, 391, 470, 832, 835, 839, 841, 844, 850, 854, 861, 864, 870, 883], "role": [44, 45, 832, 835, 840, 841, 850, 861, 870, 884], "dl": [44, 45], "effortlessli": [44, 45], "previous": [44, 45, 618, 650, 820, 838, 839, 845, 857, 859, 864, 869], "default_devic": [44, 45, 220, 223, 224, 225, 231, 232, 647, 850, 853, 854], "as_n": [44, 45, 67, 68, 87, 90, 91, 172, 173, 174, 175, 176, 177, 183, 210, 211, 646, 647, 849], "certainli": [44, 45], "unnecessari": [44, 45, 861], "extend": [44, 45, 70, 93, 392, 401, 498, 540, 845, 846, 849, 852, 853, 856, 861, 865, 871, 883], "infrastructur": [44, 45], "least": [44, 69, 70, 75, 92, 93, 254, 272, 287, 389, 392, 401, 417, 422, 476, 477, 478, 487, 489, 537, 648, 653, 660, 693, 766, 840, 844, 848, 849, 850, 851, 857, 860, 864, 878], "coco": 44, "seamlessli": [45, 864], "therefor": [45, 50, 66, 69, 70, 75, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 193, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 342, 343, 349, 350, 352, 355, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 491, 498, 500, 502, 507, 511, 512, 537, 540, 544, 553, 561, 562, 567, 571, 573, 575, 577, 591, 606, 610, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 838, 840, 843, 844, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 860, 861, 862, 864, 865, 867, 869, 870, 871, 883], "wide": [45, 832, 840, 864, 883], "plenti": 45, "resourc": [45, 833, 838, 839, 848], "visit": [45, 838, 839, 840, 848], "page": [45, 832, 838, 839, 840, 846, 848, 854, 872, 881], "newli": [46, 47, 59, 61, 67, 90, 166, 554, 646, 650, 840, 848, 860, 864], "randon": [46, 47, 49, 50, 51], "mean_": 46, "std_": 46, "detect": [46, 50, 69, 87, 92, 269, 648, 657, 737, 748, 838, 839, 845, 847, 848, 855, 864], "inspect": [46, 50, 550, 650], "__": [46, 47, 48, 49, 50, 51, 87, 851], "script": [47, 832, 839, 840, 843, 848, 851, 870, 871, 883], "comp": 47, "low_level": 47, "chain": [47, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 182, 186, 187, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 413, 414, 415, 433, 466, 467, 468, 469, 470, 471, 472, 473, 482, 483, 505, 507, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 656, 657, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 734, 735, 739, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 816, 844, 847, 859, 861, 869, 871, 883], "un": [47, 184, 646, 849, 869], "partial_comp": 47, "time_funct": 47, "express": [47, 69, 70, 92, 93, 111, 235, 239, 241, 242, 251, 253, 293, 299, 304, 373, 386, 648, 817, 826, 852, 861, 869, 870, 883, 884], "maxim": [47, 857, 860, 870], "conclud": [48, 865], "norm_comp": [49, 50], "global": [49, 50, 60, 71, 87, 94, 116, 172, 173, 174, 175, 176, 225, 226, 227, 597, 598, 601, 607, 608, 620, 621, 624, 646, 647, 650, 803, 814, 820, 839, 844, 845, 848, 849, 850, 853, 857, 861, 869, 883], "b": [50, 64, 69, 70, 71, 74, 75, 83, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 143, 148, 149, 150, 152, 155, 157, 163, 166, 167, 168, 169, 177, 187, 189, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 344, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 376, 377, 381, 383, 386, 389, 390, 391, 392, 396, 399, 401, 408, 409, 410, 411, 413, 414, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 439, 442, 444, 446, 450, 453, 457, 460, 465, 466, 467, 469, 470, 471, 472, 476, 477, 478, 479, 482, 483, 484, 485, 488, 489, 490, 492, 493, 494, 495, 497, 498, 505, 507, 508, 509, 510, 511, 514, 515, 520, 522, 524, 525, 527, 528, 530, 537, 538, 539, 540, 542, 544, 547, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 584, 591, 592, 606, 607, 608, 610, 614, 615, 628, 630, 631, 632, 634, 636, 637, 638, 640, 642, 645, 646, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 712, 713, 714, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 737, 740, 743, 744, 745, 746, 748, 749, 754, 755, 756, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 825, 826, 830, 832, 833, 836, 840, 842, 843, 845, 847, 848, 851, 854, 857, 859, 862, 868, 869, 870, 874, 879, 882], "prioriti": [50, 87, 820, 835, 838, 840, 841, 850, 860], "normalize_via_oper": 50, "determin": [50, 69, 70, 75, 77, 81, 84, 87, 92, 93, 94, 98, 105, 107, 110, 113, 115, 116, 146, 169, 171, 178, 184, 185, 186, 187, 189, 190, 191, 206, 216, 218, 219, 230, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 254, 257, 259, 261, 267, 268, 269, 270, 271, 275, 276, 277, 278, 279, 284, 287, 292, 296, 299, 300, 301, 302, 303, 304, 305, 308, 318, 322, 368, 373, 381, 386, 389, 390, 391, 392, 401, 425, 433, 444, 466, 467, 499, 507, 511, 537, 549, 552, 573, 574, 578, 579, 580, 581, 582, 583, 610, 628, 645, 646, 647, 648, 650, 653, 655, 656, 661, 664, 683, 684, 685, 687, 691, 692, 693, 695, 696, 698, 699, 701, 702, 707, 709, 710, 719, 734, 735, 736, 768, 769, 770, 771, 772, 786, 787, 797, 803, 810, 814, 847, 849, 850, 852, 857, 861, 864, 866, 867], "think": [50, 838, 840, 848, 851, 867, 884], "uniqu": [50, 60, 70, 71, 81, 93, 94, 104, 389, 390, 392, 437, 460, 497, 498, 513, 584, 650, 656, 657, 661, 734, 735, 736, 739, 743, 768, 769, 770, 771, 797, 832, 843, 847, 857, 861, 862, 863, 867, 871, 875], "rule": [50, 67, 69, 70, 75, 90, 92, 93, 98, 166, 169, 192, 193, 194, 243, 254, 287, 289, 296, 298, 306, 308, 389, 392, 401, 433, 486, 537, 646, 648, 653, 655, 683, 684, 691, 695, 698, 702, 719, 797, 825, 843, 844, 847, 848, 849, 851, 855, 856, 857, 859, 864, 867, 884], "broadcast": [50, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 115, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 343, 349, 350, 351, 352, 353, 354, 357, 358, 360, 362, 364, 366, 367, 368, 369, 373, 381, 383, 386, 389, 390, 391, 392, 395, 396, 401, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 431, 433, 438, 440, 441, 449, 450, 455, 456, 458, 467, 468, 469, 470, 472, 473, 479, 483, 486, 491, 499, 500, 501, 502, 503, 505, 507, 509, 511, 512, 516, 519, 520, 522, 523, 524, 526, 527, 537, 538, 539, 540, 543, 544, 545, 546, 547, 555, 556, 560, 561, 562, 567, 568, 577, 591, 592, 630, 631, 634, 636, 637, 638, 640, 642, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 704, 705, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 767, 771, 772, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 797, 825, 847, 849, 851, 852, 853, 864, 865, 869], "elementwis": [50, 70, 78, 93, 101, 314, 316, 376, 381, 653, 658, 708, 756, 857, 865, 869], "fact": [50, 110, 840, 843, 848, 861, 864, 870], "consum": [50, 792, 847, 848, 856, 862, 864], "thrown": [50, 577, 650, 839, 844, 850, 853, 855, 871], "doesn": [50, 577, 595, 650, 790, 811, 838, 839, 845, 847, 848, 849, 850, 851, 854, 855, 857, 859, 864, 867, 869, 871, 879], "consider": [50, 838, 851, 856, 867], "standalon": [51, 838, 844, 864, 873, 882, 884], "static": [51, 70, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 119, 120, 143, 333, 389, 410, 423, 428, 437, 459, 465, 505, 517, 610, 645, 652, 679, 698, 808, 813, 861, 866, 871, 875, 883, 884, 885], "flow": [52, 847, 879, 883, 884], "statement": [52, 57, 848, 860, 864, 867, 871, 878, 879], "opposit": 52, "exclud": [52, 83, 93, 106, 139, 161, 342, 383, 538, 539, 645, 659, 760, 776, 795, 798, 820, 851, 870, 879], "todo": [53, 54, 55, 60, 63, 93, 539, 838, 849, 861], "aim": [56, 836, 840, 843, 854, 858, 861, 864, 868, 883, 885], "interfac": [56, 89, 148, 645, 871, 873, 875, 883], "set_framework": [56, 63], "underneath": [56, 848], "sai": [56, 838, 839, 854, 858], "a_min": 56, "a_max": 56, "tensforflow": 56, "clip_by_valu": [56, 869], "clip_value_min": 56, "clip_value_max": 56, "clamp": [56, 70, 93, 314, 381, 869], "devicearrai": [56, 844, 861, 869], "accept": [56, 65, 66, 69, 70, 75, 88, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 342, 343, 349, 350, 352, 355, 356, 378, 383, 386, 388, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 498, 507, 511, 537, 540, 544, 553, 561, 562, 567, 571, 573, 575, 577, 591, 606, 610, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 838, 839, 840, 844, 847, 849, 850, 851, 852, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 873], "jax_concat": 56, "tf_concat": 56, "np_concat": 56, "torch_concat": 56, "85": [56, 64, 70, 79, 86, 92, 93, 95, 97, 102, 116, 125, 239, 248, 249, 293, 309, 310, 313, 381, 401, 538, 607, 634, 642, 648, 650, 651, 652, 659, 676, 758, 759, 760], "mymodel": 56, "x_in": 56, "reduce_mean": [56, 832], "49040043354034424": 56, "48975786566734314": 56, "4892795979976654": 56, "48886892199516296": 56, "4884953498840332": 56, "4881443977355957": 56, "4878086447715759": 56, "48748287558555603": 56, "48716384172439575": 56, "48684927821159363": 56, "48653748631477356": 56, "48622724413871765": 56, "4859171509742737": 56, "48560672998428345": 56, "48529526591300964": 56, "4849821627140045": 56, "48466697335243225": 56, "4843493402004242": 56, "4840289056301117": 56, "4837053418159485": 56, "4833785891532898": 56, "4830484390258789": 56, "48271444439888": 56, "48237672448158264": 56, "48203518986701965": 56, "48168954253196716": 56, "4813397228717804": 56, "4809857904911041": 56, "48062753677368164": 56, "48026490211486816": 56, "479898065328598": 56, "47952669858932495": 56, "4791509211063385": 56, "4787706732749939": 56, "47838595509529114": 56, "4779967665672302": 56, "47760307788848877": 56, "4772048890590668": 56, "47680220007896423": 56, "47639501094818115": 56, "47598329186439514": 56, "4755673110485077": 56, "4751465618610382": 56, "4747215211391449": 56, "4742920398712158": 56, "47385817766189575": 56, "47341999411582947": 56, "47297725081443787": 56, "4725303053855896": 56, "47207894921302795": 56, "47162333130836487": 56, "47116345167160034": 56, "470699280500412": 56, "47023090720176697": 56, "4697583019733429": 56, "55": [56, 64, 93, 102, 131, 248, 307, 401, 538, 575, 648, 650, 653, 659, 663, 692, 698, 759, 760, 778, 843], "46928152441978455": 56, "46880054473876953": 56, "4683155119419098": 56, "4678264260292053": 56, "46733325719833374": 56, "46683603525161743": 56, "4663347601890564": 56, "4658295214176178": 56, "465320348739624": 56, "4648073613643646": 56, "46429020166397095": 56, "4637692868709564": 56, "46324464678764343": 56, "4627160429954529": 56, "4621836841106415": 56, "4616474211215973": 56, "46110764145851135": 56, "72": [56, 70, 79, 93, 95, 259, 363, 386, 389, 411, 421, 634, 648, 651, 653, 663, 698, 759, 778], "460563987493515": 56, "4600166976451874": 56, "74": [56, 58, 69, 102, 249, 279, 648, 653, 695], "45946577191352844": 56, "45891112089157104": 56, "45835286378860474": 56, "4577910006046295": 56, "78": [56, 72, 298, 636, 648, 651, 653, 659, 663, 698, 759, 778], "45722562074661255": 56, "45665669441223145": 56, "80": [56, 70, 93, 363, 386, 390, 401, 457, 538, 653, 657, 663, 698, 748, 778], "4560841917991638": 56, "81": [56, 60, 69, 75, 90, 92, 98, 102, 182, 252, 277, 278, 302, 401, 538, 646, 648, 653, 657, 659, 663, 691, 695, 708, 745, 760, 778, 864], "4555082619190216": 56, "45492875576019287": 56, "45434585213661194": 56, "45375964045524597": 56, "4531698524951935": 56, "4525766670703888": 56, "45198020339012146": 56, "4513803720474243": 56, "4507772624492645": 56, "4501707851886749": 56, "4495610296726227": 56, "4489481747150421": 56, "44833192229270935": 56, "4477125108242035": 56, "44708991050720215": 56, "44646409153938293": 56, "44583529233932495": 56, "4452032148838043": 56, "44456806778907776": 56, "4439": 56, "selectbackward0": 56, "ivy_compil": 57, "ic": 57, "numer": [57, 66, 67, 69, 70, 71, 75, 79, 80, 83, 90, 92, 93, 94, 98, 102, 103, 105, 115, 116, 153, 166, 234, 237, 250, 254, 259, 260, 261, 268, 269, 270, 273, 282, 283, 287, 289, 290, 291, 292, 296, 297, 298, 302, 303, 307, 308, 389, 391, 396, 401, 433, 468, 524, 537, 597, 598, 607, 608, 620, 621, 645, 646, 648, 650, 653, 659, 660, 663, 684, 691, 693, 698, 701, 703, 705, 707, 709, 758, 759, 760, 762, 763, 764, 766, 767, 772, 779, 782, 784, 795, 796, 797, 798, 810, 836, 849, 854, 859, 861, 862, 864, 865, 866, 867, 869, 883], "anyth": [57, 70, 93, 401, 543, 544, 840, 853, 864, 865, 883, 884], "affect": [57, 63, 70, 391, 471, 848, 861], "variabl": [57, 59, 60, 62, 70, 71, 72, 78, 87, 93, 94, 95, 101, 135, 136, 138, 336, 383, 389, 390, 392, 396, 401, 435, 461, 499, 525, 536, 537, 553, 577, 578, 579, 580, 583, 610, 631, 632, 634, 636, 637, 638, 644, 650, 651, 653, 656, 658, 702, 734, 735, 736, 756, 792, 803, 808, 810, 811, 812, 813, 814, 815, 816, 840, 845, 849, 852, 856, 859, 860, 864, 865, 869, 871, 872, 879, 884], "original_fn": 57, "100000": 57, "co": [57, 58, 69, 71, 92, 252, 257, 259, 300, 564, 648, 650, 837, 849, 870], "sin": [57, 69, 71, 92, 252, 257, 259, 300, 564, 648, 650, 844, 870], "tan": [57, 69, 92, 551, 648, 650, 852, 856, 857, 860, 861, 870], "comp_fn": 57, "compile_graph": [57, 63], "expected_result": 57, "compiled_result": 57, "irrelev": [57, 848, 849, 851], "opeat": 57, "_layer": [57, 870], "net": [57, 62, 63, 870], "compiled_net": 57, "latest": [58, 60, 69, 70, 92, 93, 169, 257, 267, 268, 283, 349, 350, 386, 389, 392, 401, 433, 435, 507, 537, 646, 648, 653, 655, 663, 701, 702, 733, 783, 811, 832, 838, 839, 840, 843, 845, 848, 852, 854, 865, 871, 872, 878], "pypi": [58, 60, 63, 838, 839, 865, 871], "pkg": [58, 60, 63], "public": [58, 60, 63, 557, 650, 848, 859], "revis": [58, 60, 840], "req": [58, 60], "tabqrujw": 58, "quiet": [58, 60], "commit": [58, 60, 835, 836, 838, 841, 843, 851, 863, 864], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 58, "cp39": [58, 60], "manylinux_2_12_x86_64": [58, 60], "manylinux2010_x86_64": [58, 60], "manylinux_2_17_x86_64": [58, 60, 839], "manylinux2014_x86_64": [58, 59, 60], "495": [58, 60], "nvidia_ml_pi": [58, 60], "pypars": [58, 60, 63], "ivy_cor": [58, 60, 63, 839], "1338326": 58, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 58, "njrc_e6b": 58, "07": [58, 60, 72, 76, 92, 95, 99, 102, 242, 275, 278, 279, 298, 389, 421, 620, 630, 631, 633, 634, 635, 636, 648, 650, 651, 654, 713, 714, 759, 812, 815], "2e": [58, 60], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [58, 60], "4845": [58, 60], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 58, "b6": [58, 60], "0d": [58, 60], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [58, 60], "uninstal": [58, 60, 63], "vnd": [58, 60, 63], "json": [58, 60, 63, 87, 839, 854], "psst": 58, "pickl": [58, 59, 87, 813, 847], "imageio": 58, "urllib": [58, 63], "_src": 58, "back": [58, 70, 77, 93, 100, 392, 488, 510, 593, 617, 650, 652, 655, 679, 725, 810, 815, 826, 839, 844, 849, 850, 853, 858, 859, 866, 871, 872], "tf_cpp_min_log_level": 58, "mkdir": [58, 59, 60, 839, 848], "perceiv": [58, 59], "touch": 58, "io_processor": 58, "position_encod": 58, "jmp": 58, "tabul": 58, "29359": 58, "29k": 58, "67k": 58, "002": 58, "30179": 58, "47k": 58, "8107": 58, "9k": 58, "92k": 58, "itertool": 58, "preprocessor": 58, "vector": [58, 66, 70, 71, 74, 75, 93, 94, 97, 98, 110, 111, 113, 153, 379, 380, 388, 389, 390, 392, 395, 396, 401, 412, 443, 448, 456, 458, 463, 498, 501, 503, 521, 525, 537, 556, 560, 577, 629, 645, 650, 652, 653, 676, 679, 684, 688, 689, 691, 693, 698, 703, 704, 708, 709, 710, 711, 795, 811, 883], "perceiverbackbon": 58, "input_preprocessor": 58, "_input_preprocessor": 58, "_encod": 58, "__call__": [58, 792, 811, 812, 813, 832, 878], "is_train": 58, "po": [58, 826], "input_mask": 58, "network_input_is_1d": 58, "_input_is_1d": 58, "queri": [58, 59, 74, 87, 97, 212, 226, 570, 596, 647, 650, 652, 679, 682, 811, 847, 849, 854, 883], "decod": 58, "cross": [58, 60, 75, 76, 98, 99, 111, 653, 654, 712, 713, 714, 848, 849], "attend": [58, 652, 679], "encoder_queri": 58, "latent": [58, 656, 735, 736], "imagepreprocessor": 58, "deal": [58, 813, 836, 850, 857, 859, 861, 864, 871], "image_s": 58, "fourier_pos_config": 58, "position_encoding_typ": 58, "fourier": [58, 70, 93, 389, 412, 417, 418, 422, 423, 433, 434, 437, 564, 650], "fourier_position_encoding_kwarg": 58, "concat_po": 58, "max_resolut": 58, "num_band": [58, 71, 94, 564, 650], "sine_onli": 58, "prep_typ": 58, "spatial_downsampl": 58, "cross_attend_widening_factor": 58, "cross_attention_shape_for_attn": 58, "kv": 58, "dropout_prob": 58, "num_block": 58, "num_cross_attend_head": 58, "num_self_attend_head": 58, "num_self_attends_per_block": 58, "num_z_channel": 58, "self_attend_widening_factor": 58, "use_query_residu": 58, "z_index_dim": 58, "z_pos_enc_init_scal": 58, "perceiver_backbon": [58, 832], "perceiverencod": 58, "At": [58, 838, 839, 840, 843, 854, 864, 865, 883], "publish": [58, 832, 871, 878], "thankfulli": [58, 864], "perceiver_io": [58, 59], "imagenet_fourier_position_encod": 58, "pystat": 58, "imagenet_checkpoint": 58, "rb": 58, "ckpt": 58, "09": [58, 64, 69, 95, 102, 131, 292, 302, 630, 642, 648, 651, 759], "173": [58, 75, 653, 691], "194": 58, "125": [58, 70, 75, 98, 248, 360, 386, 391, 467, 648, 653, 708], "177": [58, 60], "193776248": 58, "185m": 58, "octet": 58, "184": 58, "80m": 58, "144mb": 58, "144": 58, "mean_rgb": 58, "stddev_rgb": 58, "im": 58, "denorm": 58, "resize_and_center_crop": 58, "crop": [58, 70, 93, 389, 418, 423, 434], "center": [58, 810], "image_height": [58, 60], "image_width": 58, "padded_center_crop_s": 58, "offset_height": 58, "offset_width": 58, "crop_window": 58, "inter_cub": 58, "ye": [58, 871], "dummy_input": [58, 832], "transpili": 58, "torch_perceiver_backbon": 58, "quicker": 58, "params_v": [58, 832, 878], "perceiverioclassifi": [58, 832], "max_pool": [58, 832], "Of": [58, 844, 860, 861], "cours": [58, 839, 840, 843, 844, 851, 860, 861, 867, 871], "468": 58, "huggingface_hub": 58, "multiprocess": [58, 87, 116, 650, 871], "py39": 58, "132": [58, 93], "pyarrow": 58, "xxhash": 58, "pyyaml": 58, "2021": [58, 70, 93, 376, 386, 832], "aiohttp": 58, "async": 58, "timeout": [58, 87, 116, 601, 624, 650, 866], "0a3": 58, "async_timeout": 58, "frozenlist": 58, "manylinux_2_5_x86_64": [58, 63], "manylinux1_x86_64": [58, 63], "158": 58, "attr": [58, 849], "aiosign": 58, "multidict": 58, "114": [58, 389, 411, 421], "yarl": 58, "264": [58, 657, 737], "2022": [58, 59], "pytz": 58, "2020": [58, 843, 883], "dateutil": [58, 63], "wikiart": 58, "paint": [58, 832, 869, 875], "load_dataset": [58, 878, 879], "n_sampl": [58, 70, 93, 390, 392, 439, 447, 502], "10000": [58, 60, 66, 89, 152, 645], "huggan": 58, "split": [58, 59, 60, 64, 69, 70, 77, 86, 87, 92, 93, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 225, 226, 227, 305, 309, 314, 315, 317, 362, 369, 381, 392, 484, 493, 514, 560, 587, 642, 647, 648, 650, 652, 655, 665, 672, 673, 730, 792, 807, 811, 832, 833, 840, 848, 869, 871], "wiki_art": 58, "gib": 58, "unknown": [58, 795], "huggan___parquet": 58, "36ee951979f9b56c": 58, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 58, "parquet": 58, "subsequ": [58, 820, 839, 844, 848, 849, 851, 856, 857, 860, 864, 884], "curl": [58, 839], "2fwikiart": 58, "xferd": 58, "dload": 58, "upload": [58, 864], "spent": 58, "25936": 58, "278k": 58, "abstract_expression": 58, "action_paint": 58, "analytical_cub": 58, "art_nouveau": 58, "baroqu": 58, "color_field_paint": 58, "contemporary_r": 58, "cubism": 58, "early_renaiss": 58, "expression": 58, "fauvism": 58, "high_renaiss": 58, "impression": 58, "mannerism_late_renaiss": 58, "minim": [58, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 389, 391, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 699, 700, 701, 703, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 826, 852, 860, 862, 867, 869, 879], "naive_art_primitiv": 58, "new_real": 58, "northern_renaiss": 58, "pointil": 58, "pop_art": 58, "post_impression": 58, "realism": 58, "rococo": 58, "romantic": 58, "symbol": [58, 825, 838, 839, 883, 884], "synthetic_cub": 58, "ukiyo_": 58, "custom": [58, 70, 93, 313, 325, 378, 381, 388, 795, 825, 834, 842, 848, 853, 858, 862, 864, 867, 883], "hugginfac": 58, "customdataset": 58, "__len__": [58, 847], "__getitem__": [58, 87, 847], "idx": [58, 59, 60, 550, 650, 850], "random_split": 58, "224x224": 58, "val_siz": 58, "dataset_train": 58, "dataset_v": 58, "dataset_test": 58, "dataloader_train": 58, "dataloader_v": 58, "dataloader_test": 58, "train_featur": 58, "train_label": 58, "train_step": 58, "running_loss": [58, 60], "last_loss": 58, "training_load": 58, "intra": 58, "report": [58, 835, 838, 864], "zero_grad": 58, "999": [58, 72, 92, 95, 305, 630, 631, 636, 638, 648, 651, 815], "epoch_numb": 58, "best_vloss": 58, "1_000_000": 58, "running_vloss": 58, "vdata": 58, "vinput": 58, "vlabel": 58, "voutput": 58, "vloss": 58, "avg_vloss": 58, "model_path": 58, "model_": 58, "state_dict": [58, 812, 813], "highest": [58, 70, 79, 93, 102, 333, 336, 383, 659, 758, 849], "energi": 58, "mayb": [58, 59, 65, 832, 839, 848, 869], "deploi": [58, 832, 848, 873, 878, 883, 885], "percieverio": 59, "ai": [59, 848], "contribut": [59, 70, 93, 401, 540, 835, 837, 839, 840, 841, 846, 854, 855, 861, 862, 870, 872, 879], "invit": [59, 838, 841, 861, 867], "g4ar9q7dtn": 59, "step1": 59, "printf": 59, "8packag": 59, "share": [59, 87, 200, 646, 795, 796, 832, 845, 847, 851, 857, 859, 861, 862, 864, 867, 869, 876], "googledr": 59, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 59, "file_id": 59, "drive": [59, 60], "uc": 59, "tee": [59, 839], "file_id_wget_cmd": 59, "perl": 59, "pe": 59, "g": [59, 61, 62, 70, 79, 81, 83, 85, 93, 102, 108, 110, 165, 194, 207, 254, 267, 287, 294, 297, 349, 350, 386, 389, 390, 392, 396, 401, 426, 428, 465, 507, 523, 524, 525, 526, 527, 538, 539, 646, 647, 648, 653, 657, 659, 661, 663, 689, 690, 694, 701, 703, 704, 710, 740, 744, 746, 749, 754, 758, 759, 760, 768, 769, 770, 771, 776, 777, 779, 781, 782, 784, 810, 830, 833, 838, 839, 842, 843, 845, 846, 847, 859, 861, 864, 869, 871, 873], "uuid": 59, "anywai": [59, 844, 858, 861], "bin": [59, 70, 93, 401, 535, 540, 839, 840, 843, 847], "bash": [59, 839, 840, 843], "step2": 59, "interpret": [59, 66, 70, 89, 93, 140, 141, 148, 154, 391, 401, 468, 537, 645, 848, 884], "sudo": [59, 839], "apt": [59, 839], "yf": 59, "step3": 59, "xvzf": 59, "rm": [59, 61, 834, 840], "step4": 59, "symlink": 59, "unzip": [59, 60], "fr": 59, "l": [59, 70, 75, 92, 98, 281, 390, 391, 443, 466, 652, 653, 679, 683, 688, 689, 690, 693, 707, 840, 842], "ln": 59, "sf": 59, "la": 59, "step5": 59, "step6": 59, "ipkykernel": 59, "step7": 59, "engbjapanpython3": 59, "ipykernel": 59, "reconnect": 59, "sy": 59, "oct": 59, "gcc": 59, "lf": 59, "upgrad": 59, "cuda11": 59, "cudnn805": 59, "cp38": [59, 63, 839], "helper": [59, 790, 792, 793, 799, 801, 802, 836, 846, 849, 853, 854, 863, 873], "feedforward": 59, "prenorm": 59, "perceiveriospec": 59, "fetch": [59, 572, 650, 839, 840, 843, 848], "ogbanugot": 59, "xmartlab": 59, "caffeflow": 59, "fetch_class": 59, "class_label": 59, "ground_truth": 59, "127": [59, 67, 70, 75, 90, 93, 182, 373, 386, 646, 653, 691], "path_to_imag": 59, "get_imag": 59, "spine": 59, "set_vis": 59, "bottom": [59, 560, 650, 838, 839, 848, 854], "tick_param": 59, "set_xticklabel": 59, "set_yticklabel": 59, "show_result": 59, "listdir": [59, 60], "endswith": 59, "this_dir": 59, "dirnam": 59, "add_subplot": 59, "xtick": 59, "ytick": 59, "green": [59, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 831, 838, 839, 840], "red": 59, "perceiver_io_img_classif": 59, "normalize_imag": 59, "batch_shap": [59, 74, 79, 89, 97, 102, 146, 155, 645, 652, 653, 659, 678, 682, 711, 757, 811, 867, 869], "img_dim": 59, "queries_dim": 59, "learn_queri": 59, "load_weight": 59, "num_input_ax": 59, "network_depth": 59, "num_lat_att_per_lay": 59, "query_shap": 59, "num_fourier_freq_band": 59, "weight_fpath": 59, "pretrained_weight": 59, "isfil": 59, "noinspect": 59, "pybroadexcept": 59, "from_disk_as_pickl": 59, "action": [59, 830, 837, 848, 851, 855, 864], "placehold": [59, 657, 744, 749, 754, 811, 840, 844, 856, 873], "pyunboundlocalvari": 59, "max_fourier_freq": 59, "random_uniform": [59, 63, 79, 102, 659, 850, 853, 864, 870], "817437": 59, "gpu_bfc_alloc": 59, "orig_valu": 59, "tf_force_gpu_allow_growth": 59, "autograd": [59, 871], "declar": [59, 840, 863], "_3r2_73j": 60, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 60, "1297564": 60, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 60, "le3bu3_v": 60, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 60, "third": [60, 110, 111, 392, 485, 513, 653, 661, 703, 768, 846, 849, 860, 871, 883, 885], "parti": [60, 846, 849, 871, 883, 885], "mount": [60, 834, 840], "mydriv": 60, "chdir": 60, "kaggl": 60, "medium": 60, "articl": [60, 832, 855], "insert": [60, 70, 80, 93, 103, 392, 473, 483, 655, 657, 660, 662, 721, 741, 742, 763, 774, 848, 855], "www": [60, 349, 350, 386], "your_kaggle_usernam": 60, "competit": 60, "digit": 60, "readabl": [60, 844, 847, 853, 855, 856, 864, 865], "chmod": [60, 839, 848], "forc": [60, 846, 848, 850], "archiv": [60, 839], "inflat": [60, 849], "sample_submiss": 60, "later": [60, 87, 554, 650, 838, 855, 860, 864, 865, 883], "my": [60, 848], "label_df": 60, "mod_train": 60, "data_valu": 60, "test_data_valu": 60, "correct_label": 60, "train_path": 60, "str": [60, 62, 65, 66, 70, 71, 74, 75, 76, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 148, 150, 153, 155, 157, 163, 164, 167, 169, 171, 172, 173, 174, 178, 179, 182, 183, 184, 185, 186, 187, 189, 191, 194, 195, 196, 197, 198, 199, 206, 207, 227, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 389, 390, 391, 392, 395, 401, 404, 408, 409, 410, 412, 413, 414, 415, 417, 418, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 440, 444, 459, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 481, 482, 483, 488, 505, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 522, 524, 526, 537, 538, 539, 540, 547, 549, 550, 552, 553, 555, 556, 558, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 588, 591, 592, 594, 595, 604, 606, 607, 608, 610, 612, 614, 615, 628, 632, 640, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 704, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 734, 735, 736, 743, 744, 749, 754, 757, 758, 759, 760, 762, 765, 768, 769, 770, 772, 776, 777, 778, 780, 782, 783, 785, 786, 787, 792, 793, 795, 796, 801, 803, 811, 813, 814, 825, 826, 830, 849, 850, 853, 857, 860, 861, 865, 869, 878, 879, 880, 881], "makedir": 60, "valid_path": 60, "28x28": 60, "pic": 60, "int8": [60, 67, 79, 89, 90, 102, 148, 175, 180, 182, 183, 187, 645, 646, 758, 795, 796, 849, 864], "new_img": [60, 62], "builder": [60, 834], "batchwis": 60, "goe": [60, 392, 481, 842, 855, 860, 867], "seed_valu": [60, 87, 659, 761], "randomize_dataset": 60, "create_dataset": 60, "num_examples_per_class": 60, "img_arrai": 60, "dir": 60, "img_path": 60, "imread": [60, 62], "imread_grayscal": 60, "generate_batch": 60, "ivyerror": [60, 827, 853], "smaller": [60, 70, 77, 83, 93, 100, 316, 348, 365, 381, 386, 389, 391, 401, 418, 423, 434, 466, 537, 538, 539, 560, 650, 655, 663, 718, 726, 776, 777, 782, 784, 840, 853, 869], "yield": [60, 80, 334, 335, 383, 392, 498, 660, 767, 848], "x_batch_inst": 60, "form": [60, 62, 65, 66, 70, 75, 87, 89, 98, 109, 110, 111, 140, 141, 142, 154, 159, 160, 326, 329, 343, 352, 383, 386, 390, 392, 443, 454, 485, 494, 498, 515, 550, 611, 613, 645, 650, 652, 653, 657, 683, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 707, 738, 749, 795, 810, 833, 838, 839, 857, 864, 867, 883, 884], "intialis": 60, "num_epoch": 60, "inherit": [60, 844, 847, 853, 871, 873], "creation": [60, 70, 87, 93, 116, 846, 849, 850, 856, 858, 861, 862, 864, 865, 869, 879, 883], "inform": [60, 62, 67, 70, 72, 90, 95, 179, 182, 333, 383, 550, 640, 646, 650, 651, 656, 736, 830, 832, 837, 838, 839, 840, 841, 843, 847, 848, 853, 857, 858, 860, 862, 864], "insid": [60, 75, 98, 116, 392, 509, 653, 696, 793, 839, 840, 844, 847, 849, 850, 854, 857, 858, 864, 865, 879], "ivynet": 60, "h_w": 60, "input_channel": [60, 811, 869], "output_channel": [60, 811], "gelu": [60, 61, 64, 86, 642, 807], "image_widht": 60, "start_dim": [60, 70, 93, 392, 488], "end_dim": [60, 70, 93, 392, 488], "gpu_is_avail": [60, 647], "__name__": [60, 61, 63, 616, 650, 853], "heavi": [60, 797, 839, 861, 862, 867, 884], "lift": [60, 862, 884], "num_correct": 60, "y_pred": 60, "epoch_loss": 60, "field": [60, 75, 81, 98, 104, 390, 392, 443, 513, 653, 661, 688, 689, 700, 701, 703, 768, 769, 770, 848], "training_accuraci": 60, "train_loss": 60, "train_correct": 60, "train_loop": 60, "leav": [60, 65, 70, 88, 90, 92, 93, 94, 97, 98, 100, 106, 116, 179, 182, 254, 311, 314, 315, 321, 392, 482, 483, 488, 501, 502, 503, 519, 520, 522, 538, 539, 544, 564, 612, 655, 657, 671, 682, 687, 703, 720, 724, 729, 731, 732, 737, 738, 747, 748, 749, 750, 776, 777, 825, 838, 847, 848, 849, 851, 852, 856, 857, 860, 861, 864], "xbatch": 60, "ybatch": 60, "to_devic": [60, 68, 91, 210, 647, 813], "entropi": [60, 76, 99, 654, 712, 713, 714], "hot": [60, 66, 89, 155, 645], "ybatch_encod": 60, "one_hot": [60, 66, 89, 645, 869], "loss_prob": 60, "ret_grad_idx": [60, 632, 651, 792, 859], "xs_grad_idx": [60, 632, 651, 792, 859], "batch_loss": 60, "set_descript": 60, "set_postfix": 60, "accuracy_percentag": 60, "naverag": 60, "6f": 60, "_train_summari": 60, "writer": 60, "writerow": 60, "157it": 60, "06it": 60, "475401": 60, "11it": 60, "081436": 60, "13it": 60, "0187": 60, "029279": 60, "008382": 60, "07it": 60, "00456": 60, "003816": 60, "82it": 60, "00277": 60, "002179": 60, "05it": 60, "00175": 60, "001569": 60, "00147": 60, "09it": 60, "00128": 60, "001005": 60, "10it": 60, "00112": 60, "000837": 60, "129": [60, 652, 671, 673], "12it": 60, "000989": 60, "000709": 60, "145": 60, "000873": 60, "000606": 60, "08it": 60, "000774": 60, "000524": 60, "000688": 60, "000455": 60, "000613": 60, "000398": 60, "000547": 60, "000350": 60, "000488": 60, "000308": 60, "000437": 60, "000273": 60, "000391": 60, "000243": 60, "238": [60, 261, 648], "98it": 60, "000351": 60, "000216": 60, "260": 60, "plot_summari": 60, "whitegrid": 60, "nrow": 60, "ncol": 60, "fontweight": 60, "bold": 60, "set_xlabel": 60, "set_ylabel": 60, "savefig": 60, "summary_plot": 60, "png": [60, 62, 63], "save_weight": [60, 813], "model_param": 60, "ivynet_weight": 60, "hdf5": [60, 87, 813], "deitimageprocessor": 61, "tfdeitforimageclassif": 61, "tfdeitforimageclassificationwithteach": 61, "distillation_classifi": 61, "cls_classifi": 61, "randomli": [61, 389, 413, 414, 415, 652, 675, 795, 796, 797, 798, 803, 811], "henc": [61, 81, 237, 352, 386, 648, 655, 661, 721, 768, 769, 770, 771, 820, 839, 847, 848, 849, 860, 864], "image_processor": [61, 878, 879], "distil": [61, 884], "patch16": 61, "outputs_from_original_model": 61, "bertforsequenceclassif": 61, "bertforpretrain": 61, "NOT": [61, 282, 648, 825, 838], "probabl": [61, 70, 74, 76, 79, 93, 97, 99, 102, 389, 391, 396, 401, 413, 414, 415, 468, 523, 537, 540, 544, 652, 654, 659, 675, 679, 682, 712, 757, 797, 810, 811, 832, 864, 872], "ptarmigan": 61, "rf": [61, 840], "branch": [61, 242, 254, 257, 259, 287, 299, 300, 301, 304, 648, 839, 840, 843, 848, 855, 871, 879, 883], "moduleconvert": [61, 808, 813], "mc": 61, "from_keras_modul": [61, 808], "compiled_func": 61, "return_graph": [61, 63], "compiled_output": 61, "diverg": [61, 70, 93, 261, 391, 468, 648], "_all_funct": [61, 63], "convert_to_tensor_v2_with_dispatch": 61, "transpose_v2": 61, "convolution_v2": 61, "bias_add": 61, "binary_op_wrapp": 61, "cast": [61, 67, 69, 70, 75, 83, 90, 92, 98, 106, 166, 169, 194, 288, 401, 538, 539, 646, 648, 653, 663, 694, 710, 776, 777, 780, 782, 784, 796, 857, 862, 869], "moments_v2": 61, "batch_norm": [61, 63, 70, 93, 395], "tensordot": [61, 75, 98, 653, 826, 849], "softmax_v2": 61, "_slice_help": 61, "save_to_disk": [61, 63, 813], "12265048989200113": 61, "11038777417100028": 61, "1167045795539998": 61, "ivy_api_kei": 62, "obj": [62, 140, 141, 572, 645, 650, 823, 878, 879, 881], "combo": 62, "permit": [62, 844, 856, 861, 864, 867], "usabl": [62, 856, 865], "neither": [62, 237, 254, 261, 287, 648, 653, 705, 848, 861, 867], "nor": [62, 237, 254, 261, 287, 648, 848, 861], "specifc": 62, "invoc": 62, "externally_link": 62, "logo": 62, "patch": [62, 305, 648, 849, 883], "cv2_imshow": 62, "envrion": 62, "canni": 62, "original_img": 62, "fn_arg": 62, "dilate_edg": 62, "morphologi": 62, "hk_model": 62, "keras_model": 62, "odsc": 62, "talk": 62, "352": [63, 97, 652, 676, 853], "nvidia_ml_py3": 63, "19190": 63, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 63, "b9": 63, "b1": [63, 653, 702], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 63, "cycler": 63, "fonttool": 63, "965": 63, "kiwisolv": 63, "show_graph": [63, 813], "to_ivy_modul": [63, 808], "image_dim": 63, "v0": 63, "urlerror": 63, "dev_str": 63, "comp_network": 63, "time_chronolog": 63, "ret0_nc": 63, "ret1_nc": 63, "ret0_c": 63, "ret1_c": 63, "pytorch_vision_v0": 63, "distributed_c10d": 63, "262": 63, "reduce_op": 63, "reduceop": 63, "004645566477999864": 63, "0044566806820000695": 63, "attribut": [63, 87, 179, 180, 181, 182, 213, 214, 222, 565, 566, 646, 647, 650, 793, 845, 846, 847, 852, 853, 857, 858, 860, 861, 867], "definit": [63, 69, 75, 92, 98, 306, 648, 653, 683, 832, 836, 840, 844, 849, 854, 857], "max_pool2d": [63, 70, 93, 389, 409], "__iadd__": 63, "adaptive_avg_pool2d": [63, 70, 93, 389], "_arraywithactiv": [64, 115], "abc": [64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 119, 563, 650, 657, 755, 810, 815, 825, 826], "_abc_impl": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "_abc": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "_abc_data": [64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120], "approxim": [64, 69, 70, 75, 86, 92, 93, 98, 110, 113, 123, 235, 236, 239, 240, 241, 242, 251, 252, 257, 259, 261, 275, 276, 277, 278, 292, 299, 300, 304, 305, 306, 363, 373, 386, 391, 470, 471, 642, 648, 653, 696, 699, 807, 852, 861], "complex_mod": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 305, 309, 314, 315, 317, 381, 642, 648, 807, 858], "variant": [64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 152, 153, 154, 155, 157, 159, 160, 163, 167, 168, 169, 179, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 389, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 630, 631, 634, 636, 637, 638, 640, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 700, 701, 703, 707, 708, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 844, 851, 852, 867], "docstr": [64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 123, 124, 125, 126, 127, 128, 129, 130, 131, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 167, 168, 169, 179, 182, 186, 187, 194, 211, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 386, 389, 392, 401, 408, 409, 410, 411, 413, 414, 415, 417, 421, 422, 423, 426, 427, 428, 432, 433, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 559, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 581, 583, 584, 586, 591, 592, 606, 607, 608, 609, 610, 612, 614, 615, 628, 629, 630, 631, 634, 636, 637, 638, 640, 645, 646, 648, 650, 653, 655, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 837, 838, 842, 846, 855, 856, 857, 858, 861, 863, 865], "liter": [64, 69, 70, 75, 86, 92, 93, 98, 123, 124, 125, 126, 127, 128, 129, 130, 131, 305, 309, 314, 315, 317, 381, 389, 390, 392, 395, 411, 421, 425, 433, 448, 454, 459, 462, 465, 498, 521, 642, 648, 653, 662, 694, 710, 774, 807, 867], "magnitud": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 234, 237, 254, 261, 287, 305, 309, 314, 315, 317, 381, 642, 648, 653, 703, 704, 807, 849], "handle_complex_input": [64, 69, 70, 86, 92, 93, 123, 124, 125, 126, 127, 128, 129, 130, 131, 305, 309, 314, 315, 317, 381, 642, 648, 807, 858], "element": [64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 81, 83, 86, 87, 89, 90, 92, 93, 94, 97, 98, 100, 102, 103, 104, 106, 111, 115, 116, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 142, 143, 149, 150, 159, 160, 161, 177, 179, 182, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 321, 323, 324, 325, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 356, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 383, 386, 389, 390, 391, 392, 401, 402, 413, 414, 415, 418, 423, 426, 427, 428, 432, 434, 435, 436, 442, 443, 444, 466, 476, 477, 478, 488, 489, 490, 492, 495, 506, 507, 509, 511, 513, 535, 536, 538, 539, 540, 541, 542, 543, 545, 546, 548, 552, 555, 556, 567, 568, 584, 586, 606, 607, 608, 610, 614, 615, 642, 645, 648, 650, 652, 653, 655, 657, 659, 660, 661, 662, 663, 664, 675, 684, 686, 688, 689, 693, 698, 700, 701, 703, 707, 718, 721, 722, 723, 724, 725, 726, 727, 728, 737, 740, 746, 757, 765, 766, 767, 768, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 792, 795, 797, 811, 826, 852, 862, 864, 867, 869], "138": [64, 123, 642], "165": [64, 123, 642, 652, 676], "hardswish": [64, 70, 86, 93, 312, 381, 642, 807], "leaky_relu": [64, 86, 93, 309, 642, 796], "alpha": [64, 69, 70, 86, 92, 93, 120, 125, 237, 303, 309, 310, 318, 322, 328, 381, 383, 390, 395, 396, 444, 521, 524, 525, 526, 642, 648, 807, 856, 861, 862], "slope": [64, 70, 86, 93, 125, 309, 310, 316, 318, 322, 381, 642, 807], "leaki": [64, 86, 125, 642, 807], "log_softmax": [64, 86, 642, 807], "0719": [64, 86, 126], "mish": [64, 86, 642, 807], "30340147": [64, 127, 642], "86509842": [64, 86, 127, 642], "269": [64, 129], "881": [64, 69, 92, 129, 240, 253, 293, 648], "422": [64, 130, 642], "155": [64, 97, 130, 642, 652, 676], "softplu": [64, 86, 642, 807, 867], "beta": [64, 70, 78, 86, 93, 101, 131, 318, 322, 328, 331, 332, 381, 383, 390, 391, 395, 396, 444, 472, 521, 525, 526, 642, 658, 756, 807, 867], "threshold": [64, 69, 70, 86, 92, 93, 131, 285, 286, 325, 351, 381, 386, 391, 392, 467, 472, 506, 642, 648, 807, 867], "union": [64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 225, 226, 227, 228, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 573, 575, 576, 577, 579, 580, 583, 584, 586, 587, 591, 592, 596, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 748, 749, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 792, 795, 810, 815, 816, 844, 847, 849, 850, 851, 853, 856, 857, 860, 865, 867, 869, 878, 879, 880, 881], "3461": [64, 86, 131, 642], "6491": [64, 86, 131, 642], "hopefulli": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 867, 869, 870, 875, 876], "_array_to_new_backend": 65, "_data_to_new_backend": 65, "native_x": 65, "native_x_backend": 65, "_to_ivi": 65, "_to_n": 65, "to_ignor": [65, 85, 108, 657, 748, 749], "_to_new_backend": 65, "args_to_ivi": 65, "include_deriv": [65, 88, 657, 738, 749, 792], "nest": [65, 87, 88, 116, 119, 257, 582, 612, 629, 632, 648, 650, 651, 656, 734, 735, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 815, 844, 846, 847, 857, 859, 865, 871, 873, 883], "unchang": [65, 69, 389, 392, 434, 488, 652, 675], "deriv": [65, 66, 70, 72, 88, 89, 93, 95, 145, 150, 157, 163, 327, 331, 356, 383, 386, 630, 631, 634, 635, 636, 637, 638, 645, 651, 656, 657, 736, 738, 749, 813, 815, 816, 849, 850], "word": [65, 139, 392, 491, 645, 659, 760, 808, 811, 847, 860, 861, 873], "args_to_n": [65, 860], "cont_inplac": 65, "decid": [65, 87, 657, 748, 749, 838, 839, 849, 867], "args_to_new_backend": 65, "shallow": [65, 657, 744, 745, 749, 754, 755], "nativevari": 65, "mutabl": [65, 657, 738, 744, 745, 749, 754, 755, 845], "to_ivi": [65, 88, 657, 750, 860], "leaf": [65, 87, 94, 106, 116, 563, 657, 747, 748, 750, 777, 847, 857], "travers": [65, 88, 657, 741, 749, 847, 849, 853, 870], "lowest": [65, 70, 79, 88, 93, 102, 401, 540, 657, 659, 749, 758, 826, 857, 871, 873, 884], "search": [65, 70, 88, 93, 763, 764, 803, 837, 839, 847, 851, 854, 864, 865], "to_new_backend": 65, "_arraywithcr": [66, 115], "boolean": [66, 67, 69, 70, 71, 77, 80, 83, 87, 89, 90, 92, 93, 94, 100, 103, 106, 115, 116, 136, 138, 140, 141, 143, 149, 166, 182, 184, 186, 187, 190, 206, 216, 224, 230, 244, 245, 246, 247, 248, 249, 281, 282, 283, 284, 349, 350, 365, 386, 390, 392, 448, 459, 465, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 507, 514, 549, 552, 563, 570, 573, 574, 578, 579, 580, 581, 582, 583, 584, 593, 596, 599, 600, 602, 603, 628, 639, 644, 645, 646, 647, 648, 650, 651, 652, 655, 656, 657, 660, 663, 679, 721, 722, 723, 725, 727, 728, 730, 732, 734, 735, 747, 765, 766, 767, 779, 781, 795, 796, 797, 798, 803, 814, 847, 849, 857, 861, 864, 867], "never": [66, 70, 77, 89, 93, 100, 141, 392, 476, 477, 478, 484, 486, 488, 489, 490, 493, 497, 505, 514, 570, 650, 655, 721, 722, 723, 725, 727, 728, 730, 732, 840, 849, 860, 861, 864], "buffer": [66, 89, 93, 100, 141, 148, 476, 477, 484, 486, 488, 489, 490, 497, 514, 645, 721, 722, 723, 725, 727, 728, 730, 732, 812, 813, 860, 871], "nativedtyp": [66, 67, 70, 74, 75, 79, 80, 83, 89, 93, 98, 102, 103, 106, 139, 140, 141, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 162, 163, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 188, 190, 192, 196, 206, 326, 327, 328, 329, 330, 331, 332, 347, 354, 370, 383, 386, 396, 401, 523, 524, 525, 526, 527, 537, 538, 539, 540, 543, 546, 645, 646, 652, 653, 659, 660, 662, 663, 675, 694, 710, 758, 759, 760, 763, 764, 774, 776, 777, 780, 782, 784, 810, 849, 850, 856, 865, 869], "datatyp": [66, 70, 87, 89, 93, 141, 150, 154, 171, 192, 196, 389, 437, 645, 646, 790, 865, 879], "nativedevic": [66, 68, 70, 79, 89, 91, 93, 102, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 161, 162, 163, 208, 209, 210, 211, 212, 215, 220, 221, 222, 223, 225, 226, 227, 228, 229, 233, 326, 327, 342, 383, 396, 523, 524, 526, 527, 645, 647, 659, 757, 758, 759, 760, 810, 815, 816, 849, 850, 853, 856, 865], "39999998": [66, 140, 141, 645, 661, 769], "5999999": [66, 70, 93, 97, 140, 141, 311, 381, 390, 439, 645, 652, 675, 682], "0999999": [66, 83, 140, 141, 311, 321, 324, 367, 381, 386, 645, 780], "10000038": [66, 140, 141, 645], "90786433e": [66, 140, 141, 645], "310": [66, 140, 141, 645], "copy_arrai": [66, 89, 645], "to_ivy_arrai": [66, 89, 143, 645], "empty_lik": [66, 70, 89, 93, 278, 390, 442, 645, 648], "uniniti": [66, 144, 145, 645, 855], "from_dlpack": [66, 89, 645], "full_lik": [66, 89, 645, 865], "fill_valu": [66, 70, 80, 89, 93, 103, 149, 150, 266, 274, 392, 396, 507, 527, 645, 648, 660, 766, 849, 862, 865], "scalar": [66, 69, 70, 71, 75, 86, 89, 92, 93, 94, 98, 110, 125, 150, 155, 237, 258, 303, 309, 352, 353, 355, 360, 363, 365, 367, 372, 386, 389, 390, 391, 392, 437, 444, 466, 476, 477, 478, 487, 492, 615, 628, 645, 648, 650, 653, 710, 849, 859, 861, 871, 883], "fill": [66, 69, 70, 79, 80, 87, 89, 92, 93, 102, 103, 144, 149, 150, 152, 155, 156, 157, 162, 163, 288, 327, 383, 390, 392, 396, 448, 454, 459, 465, 487, 507, 508, 524, 526, 527, 645, 648, 659, 660, 758, 766, 810, 838, 862], "000123": [66, 150, 645], "stop": [66, 70, 72, 89, 93, 95, 139, 151, 152, 227, 390, 459, 465, 593, 631, 634, 636, 637, 638, 640, 645, 647, 650, 651, 656, 657, 734, 735, 736, 748, 815, 830, 856, 859, 867, 869, 871, 883], "num": [66, 89, 151, 152, 645, 795, 840, 856, 869], "endpoint": [66, 89, 151, 152, 645, 810, 856], "logspac": [66, 89, 645, 869], "sequenc": [66, 70, 74, 75, 77, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 148, 150, 152, 155, 157, 163, 167, 169, 182, 186, 187, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 330, 337, 338, 339, 340, 341, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 379, 380, 383, 386, 387, 388, 389, 390, 392, 396, 401, 402, 404, 405, 406, 413, 414, 415, 417, 418, 422, 423, 425, 432, 433, 434, 435, 436, 439, 447, 448, 449, 451, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 482, 483, 484, 485, 491, 493, 494, 496, 497, 499, 500, 503, 505, 507, 508, 509, 511, 514, 515, 516, 518, 519, 520, 522, 524, 525, 537, 538, 539, 540, 547, 548, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 587, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 629, 632, 633, 634, 640, 645, 648, 650, 651, 652, 653, 655, 657, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 679, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 710, 712, 713, 714, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 732, 733, 737, 744, 754, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 811, 814, 816, 840, 848, 849, 850, 851, 853, 864, 865, 867, 869], "on_valu": [66, 89, 152, 155, 645], "off_valu": [66, 89, 152, 155, 645], "evenli": [66, 69, 70, 74, 77, 87, 89, 92, 93, 97, 100, 139, 151, 152, 306, 389, 432, 436, 645, 648, 652, 655, 665, 666, 667, 668, 670, 672, 674, 727], "hint": [66, 69, 70, 75, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 343, 349, 350, 352, 355, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 498, 507, 511, 537, 540, 567, 571, 573, 575, 606, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 838, 844, 852, 854, 856, 857, 860, 861, 865], "simplic": [66, 69, 70, 75, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 343, 349, 350, 352, 355, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 498, 507, 511, 537, 540, 567, 571, 573, 575, 606, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 852, 867], "nestabl": [66, 69, 70, 75, 92, 93, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 169, 185, 189, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 327, 342, 343, 349, 350, 352, 355, 383, 386, 389, 390, 392, 401, 408, 409, 410, 411, 413, 414, 415, 421, 426, 427, 428, 433, 435, 444, 498, 507, 511, 537, 540, 544, 553, 561, 562, 567, 571, 573, 575, 577, 591, 606, 610, 615, 640, 645, 646, 648, 650, 651, 652, 653, 655, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 756, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 838, 842, 851, 852, 860, 864, 873], "464": [66, 69, 102, 152, 241, 242, 648], "15888336": [66, 152], "2154": [66, 152], "43469003": [66, 152], "meshgrid": [66, 89, 645], "spars": [66, 70, 76, 89, 93, 99, 153, 330, 383, 390, 448, 459, 465, 645, 654, 714], "xy": [66, 89, 153, 645], "coordin": [66, 69, 80, 92, 93, 103, 153, 161, 242, 304, 334, 335, 342, 363, 383, 397, 528, 645, 648, 660, 766], "conserv": [66, 153, 645], "cartesian": [66, 153, 645], "matrix": [66, 70, 71, 74, 75, 93, 94, 97, 98, 110, 111, 113, 115, 153, 159, 160, 161, 342, 343, 383, 390, 392, 401, 440, 443, 444, 447, 448, 449, 451, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 496, 537, 549, 555, 645, 650, 652, 653, 676, 683, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 711, 795, 797, 810, 811, 826, 830, 838, 849, 861, 883], "ij": [66, 83, 153, 645, 663, 778, 826], "rank": [66, 70, 75, 77, 84, 93, 98, 100, 107, 110, 111, 112, 113, 114, 119, 153, 337, 338, 339, 340, 341, 383, 390, 392, 401, 448, 449, 459, 462, 465, 498, 507, 511, 547, 645, 653, 655, 660, 664, 684, 686, 694, 696, 700, 702, 707, 709, 710, 720, 721, 729, 732, 733, 766, 786, 787, 833], "ni": [66, 153, 645], "xi": [66, 153, 645], "scatter": [66, 71, 89, 94, 155, 591, 592, 645, 650, 846, 860, 867], "unless": [66, 70, 75, 89, 93, 155, 287, 348, 365, 370, 386, 645, 648, 653, 696, 845, 850, 860, 871, 878, 881], "ones_lik": [66, 89, 645, 845, 869], "tril": [66, 89, 645], "whose": [66, 69, 70, 71, 75, 77, 81, 83, 89, 92, 93, 94, 98, 100, 104, 106, 111, 113, 115, 150, 159, 160, 236, 240, 243, 251, 252, 253, 292, 293, 299, 300, 304, 305, 306, 343, 357, 358, 362, 366, 367, 369, 373, 383, 390, 392, 443, 464, 497, 507, 513, 554, 610, 645, 648, 650, 653, 655, 661, 663, 683, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 710, 722, 726, 768, 769, 770, 777, 778, 797, 835, 852, 864], "innermost": [66, 70, 75, 98, 159, 160, 343, 383, 390, 443, 645, 653, 683, 685, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 707], "mxn": [66, 70, 75, 98, 159, 160, 343, 383, 645, 653, 687, 694, 696, 697, 699, 700, 704, 707], "matric": [66, 70, 75, 93, 98, 110, 111, 115, 153, 159, 160, 343, 383, 390, 392, 443, 448, 449, 451, 457, 458, 463, 487, 645, 652, 653, 676, 683, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 707, 708, 797, 836, 854, 883], "diagon": [66, 70, 75, 93, 98, 111, 146, 159, 160, 161, 327, 342, 343, 383, 390, 392, 441, 444, 454, 460, 487, 645, 653, 686, 707], "triangular": [66, 70, 75, 98, 159, 160, 161, 342, 343, 383, 390, 460, 645, 653, 683, 689, 690, 696, 700], "triu": [66, 89, 645], "upper": [66, 70, 75, 79, 93, 98, 102, 146, 160, 161, 327, 343, 383, 390, 401, 460, 540, 645, 653, 659, 683, 689, 690, 700, 760, 849, 860, 864], "zeros_lik": [66, 70, 89, 166, 283, 392, 507, 630, 631, 634, 636, 637, 638, 645, 646, 648, 651, 653, 655, 700, 718, 861, 867], "data_typ": [67, 70, 90, 93, 196, 384, 646, 846, 849, 864, 865], "_arraywithdatatyp": [67, 115], "irrespect": [67, 75, 90, 98, 166, 646, 653, 703, 847, 860], "promot": [67, 69, 70, 75, 90, 92, 93, 98, 105, 115, 116, 166, 169, 192, 193, 194, 200, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 251, 252, 254, 257, 259, 261, 275, 276, 277, 278, 279, 284, 287, 292, 296, 299, 300, 301, 302, 303, 304, 305, 308, 360, 368, 373, 386, 389, 401, 433, 537, 600, 623, 646, 648, 650, 653, 655, 663, 683, 684, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 709, 710, 719, 729, 772, 780, 783, 795, 796, 841, 843, 852, 853, 857, 866, 876], "nan": [67, 69, 70, 71, 81, 83, 90, 92, 93, 94, 166, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 268, 269, 270, 275, 276, 277, 278, 279, 282, 287, 288, 290, 292, 293, 296, 297, 298, 299, 300, 301, 304, 305, 307, 314, 348, 349, 350, 361, 365, 370, 373, 381, 386, 392, 401, 507, 535, 536, 543, 544, 545, 546, 573, 628, 643, 646, 648, 650, 661, 663, 664, 768, 769, 770, 771, 779, 780, 781, 783, 784, 785, 786, 787, 795, 798, 843, 849, 852, 859, 865, 866], "infin": [67, 69, 71, 75, 90, 92, 98, 166, 234, 235, 236, 237, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 268, 269, 275, 276, 277, 278, 279, 282, 287, 288, 290, 292, 296, 297, 299, 300, 301, 304, 305, 307, 349, 350, 373, 386, 573, 643, 646, 648, 650, 653, 663, 664, 701, 710, 779, 781, 786, 787, 843, 852], "desir": [67, 68, 70, 80, 83, 87, 90, 91, 93, 103, 106, 110, 166, 168, 169, 228, 333, 374, 383, 386, 392, 401, 496, 543, 546, 547, 646, 647, 653, 660, 663, 705, 765, 780, 810, 811, 840, 845, 848, 849, 850, 861, 870, 879, 883], "broadcast_arrai": [67, 90, 646], "mix": [67, 69, 90, 92, 93, 94, 99, 102, 115, 116, 167, 180, 181, 194, 213, 214, 244, 247, 248, 249, 254, 255, 261, 265, 273, 274, 284, 287, 290, 296, 391, 401, 472, 544, 563, 565, 566, 567, 568, 577, 612, 615, 646, 647, 648, 650, 652, 653, 654, 655, 658, 663, 666, 668, 671, 673, 674, 676, 682, 683, 705, 712, 714, 718, 756, 778, 780, 783, 796, 798, 838, 842, 849, 850, 851, 860, 867, 870, 873, 883], "broadcast_to": [67, 90, 646, 849], "can_cast": [67, 90, 646, 849, 857, 861], "accord": [67, 70, 71, 77, 83, 90, 100, 106, 169, 179, 237, 248, 254, 261, 287, 298, 333, 383, 389, 392, 434, 498, 567, 570, 591, 592, 646, 648, 650, 653, 655, 663, 709, 720, 733, 783, 785, 790, 797, 817, 825, 838, 839, 843, 849, 855, 857, 861, 864], "finfo": [67, 90, 646, 864], "resolut": [67, 90, 179, 646, 840], "4028235e": [67, 179, 646], "iinfo": [67, 90, 646], "integ": [67, 69, 70, 74, 75, 77, 79, 83, 84, 87, 92, 93, 94, 97, 98, 100, 102, 106, 107, 115, 116, 139, 149, 182, 183, 189, 193, 194, 198, 234, 244, 245, 246, 247, 248, 249, 250, 260, 261, 272, 284, 289, 292, 296, 297, 307, 308, 344, 345, 346, 349, 350, 354, 359, 360, 383, 386, 389, 392, 396, 399, 401, 417, 422, 432, 435, 436, 437, 484, 493, 498, 507, 511, 514, 523, 524, 525, 526, 527, 529, 530, 535, 537, 538, 539, 544, 547, 570, 586, 596, 629, 645, 646, 648, 650, 652, 653, 655, 659, 662, 663, 664, 665, 666, 667, 668, 670, 672, 674, 684, 686, 695, 709, 710, 727, 757, 758, 759, 760, 761, 762, 774, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 795, 796, 797, 798, 803, 811, 826, 840, 847, 849, 859, 862, 864, 869], "119": [67, 182], "1220": [67, 182], "int16": [67, 70, 79, 83, 90, 102, 169, 173, 175, 180, 182, 189, 204, 401, 538, 539, 646, 663, 758, 776, 777, 782, 784, 795, 796, 849, 861, 864, 869], "32768": [67, 90, 182, 608, 650], "32767": [67, 90, 182], "is_bool_dtyp": [67, 90, 646], "is_float_dtyp": [67, 90, 646, 865], "is_int_dtyp": [67, 90, 646, 862, 865], "is_uint_dtyp": [67, 90, 646, 862, 865], "result_typ": [67, 90, 646, 849], "arrays_and_dtyp": [67, 90, 194, 646], "_arraywithdevic": [68, 115], "move": [68, 70, 91, 93, 161, 224, 228, 232, 342, 383, 392, 497, 645, 647, 813, 840, 850, 865], "addit": [68, 70, 71, 78, 91, 93, 94, 101, 136, 138, 228, 237, 297, 391, 395, 401, 466, 521, 536, 541, 560, 561, 562, 629, 644, 647, 648, 650, 652, 656, 658, 679, 736, 756, 811, 826, 838, 839, 840, 845, 849, 851, 852, 855, 857, 859, 860, 861, 864, 865, 867, 870, 879, 883, 884], "__dlpack__": [68, 91, 147, 228, 645, 647], "caveat": [68, 91, 228, 391, 470, 647], "portabl": [68, 91, 228, 647, 832], "_arraywithelementwis": [69, 115], "ab": [69, 75, 85, 92, 108, 115, 116, 292, 348, 365, 386, 392, 506, 648, 653, 657, 694, 704, 710, 745, 748, 792, 825, 826, 832, 836, 844, 849, 854, 858, 861, 864], "absolut": [69, 70, 75, 85, 87, 92, 93, 98, 115, 234, 298, 348, 365, 368, 374, 386, 390, 391, 444, 461, 467, 469, 648, 653, 694, 695, 696, 701, 790, 792, 795, 797, 798, 833, 839], "aco": [69, 92, 648], "invers": [69, 70, 75, 92, 93, 98, 235, 236, 239, 240, 241, 242, 243, 358, 386, 389, 399, 412, 421, 423, 433, 529, 648, 653, 692, 695, 699, 817, 849], "cosin": [69, 92, 235, 236, 251, 252, 326, 329, 383, 389, 411, 421, 648, 811], "acosh": [69, 92, 180, 181, 646, 648, 836, 854], "area": [69, 70, 92, 93, 97, 236, 240, 243, 389, 392, 425, 432, 436, 499, 648, 835, 860, 867], "hyperbol": [69, 92, 236, 240, 243, 252, 300, 304, 305, 318, 322, 381, 648], "sector": [69, 92, 236, 240, 243, 648], "multipli": [69, 70, 74, 83, 92, 93, 97, 110, 237, 303, 366, 389, 390, 425, 456, 457, 538, 539, 648, 652, 663, 675, 776, 782, 840, 844, 845, 847, 851], "angl": [69, 92, 242, 252, 300, 305, 364, 386, 648], "deg": [69, 92, 238, 648], "radian": [69, 70, 92, 93, 235, 238, 239, 241, 242, 251, 253, 293, 299, 304, 373, 386, 648, 852], "degre": [69, 70, 83, 92, 93, 106, 238, 253, 293, 336, 383, 392, 505, 648, 663, 783, 785, 885], "1j": [69, 92, 93, 238, 239, 251, 252, 257, 259, 271, 294, 299, 300, 304, 352, 607, 648, 650], "2j": [69, 70, 92, 93, 238, 267, 352, 389, 417, 422, 608, 648, 650], "3j": [69, 70, 92, 93, 238, 271, 294, 352, 386, 648], "35619449": [69, 238, 648], "78539816": [69, 238, 648], "135": [69, 238, 555, 648, 650], "asin": [69, 92, 648], "sine": [69, 92, 239, 240, 299, 300, 648], "927": [69, 92, 239], "asinh": [69, 92, 239, 648], "atan": [69, 92, 648], "tangent": [69, 92, 241, 242, 243, 304, 305, 318, 322, 379, 381, 388, 648, 852], "785": [69, 92, 241, 242, 648], "atan2": [69, 92, 648], "quotient": [69, 92, 242, 254, 261, 648], "588": [69, 242, 648], "inf": [69, 70, 71, 75, 92, 93, 94, 98, 242, 259, 268, 269, 270, 271, 275, 276, 278, 288, 314, 358, 368, 381, 386, 390, 401, 440, 540, 573, 628, 643, 648, 650, 652, 653, 680, 694, 710, 795, 798, 836, 849, 854, 859], "719": [69, 242, 648], "atanh": [69, 92, 648], "549": [69, 92, 97, 243, 648, 652, 676], "bitwise_and": [69, 92, 648], "bitwise_invert": [69, 92, 648], "bitiwse_invert": [69, 245], "bitwise_left_shift": [69, 92, 648], "bitwise_or": [69, 92, 648], "bitwise_right_shift": [69, 92, 115, 648], "bitwise_xor": [69, 92, 115, 648], "ceil": [69, 70, 92, 93, 110, 113, 139, 389, 408, 409, 410, 426, 427, 428, 431, 645, 648, 811, 860], "416": [69, 251, 648], "540": [69, 251], "990": [69, 251], "cosh": [69, 92, 251, 648], "deg2rad": [69, 92, 648], "180": [69, 92, 253, 293, 648], "270": [69, 92, 253, 293, 648], "360": [69, 92, 253, 293, 648, 848], "dividend": [69, 92, 254, 261, 296, 308, 648], "divisor": [69, 70, 72, 83, 92, 93, 95, 106, 254, 261, 264, 265, 296, 308, 389, 392, 408, 409, 410, 484, 493, 514, 630, 631, 636, 648, 651, 663, 783, 785, 811, 815], "375": [69, 255, 290], "erf": [69, 92, 357, 386, 648], "exponenti": [69, 70, 92, 93, 256, 257, 259, 279, 292, 309, 319, 381, 390, 455, 648], "gauss": [69, 92, 256, 648], "328": [69, 256, 304, 648], "677": [69, 256], "842": [69, 256, 304, 648], "71828198": [69, 92, 257], "38905573": [69, 92, 257], "08553696": [69, 92, 257, 648], "exp2": [69, 92, 648], "expm1": [69, 92, 648, 849], "918": [69, 259], "147": [69, 259, 648], "floor": [69, 70, 92, 93, 110, 113, 248, 261, 389, 408, 409, 410, 412, 426, 427, 428, 431, 648, 811, 860], "floor_divid": [69, 92, 648, 803, 849], "fmin": [69, 92, 648, 849], "gcd": [69, 92, 648, 849], "greater": [69, 70, 74, 77, 79, 92, 93, 97, 102, 115, 116, 148, 235, 236, 239, 240, 242, 243, 246, 248, 254, 260, 261, 275, 277, 292, 296, 298, 300, 301, 305, 306, 307, 351, 386, 389, 412, 417, 422, 433, 645, 648, 652, 653, 655, 659, 682, 684, 695, 728, 760, 797, 811, 840, 841, 862, 875], "greater_equ": [69, 92, 115, 116, 279, 648], "isfinit": [69, 92, 648, 861], "out_i": [69, 92, 268, 269, 270, 271, 294, 648], "self_i": [69, 92, 268, 269, 270, 271, 294], "finit": [69, 92, 234, 235, 236, 237, 240, 242, 243, 252, 254, 255, 257, 259, 261, 268, 269, 275, 277, 287, 288, 290, 292, 296, 300, 301, 305, 648], "isinf": [69, 92, 648], "detect_posit": [69, 92, 269, 648], "detect_neg": [69, 92, 269, 648], "isnan": [69, 92, 648], "isreal": [69, 92, 648], "5j": [69, 92, 93, 271, 294, 352, 386, 648], "6j": [69, 70, 92, 267, 271, 352, 648], "lcm": [69, 92, 648, 849], "less": [69, 70, 75, 79, 83, 92, 93, 98, 102, 115, 116, 235, 236, 239, 242, 243, 250, 254, 261, 275, 276, 277, 278, 292, 296, 298, 301, 372, 386, 389, 390, 401, 411, 412, 421, 433, 459, 465, 537, 540, 648, 653, 659, 663, 694, 695, 696, 699, 710, 760, 783, 785, 811, 839, 840, 847, 849, 851, 853, 856, 861, 864, 867, 868, 869, 883], "less_equ": [69, 92, 115, 116, 648, 853], "log10": [69, 70, 92, 333, 383, 648], "logarithm": [69, 92, 257, 275, 276, 277, 278, 279, 356, 368, 386, 648, 653, 701], "602": [69, 276, 648], "699": [69, 276, 648], "log1p": [69, 92, 648, 859], "693": [69, 92, 130, 240, 277, 642, 648], "0953": [69, 92, 275, 277, 648], "log2": [69, 92, 280, 648], "logaddexp": [69, 92, 648], "logaddexp2": [69, 92, 648, 836, 854], "169925": [69, 92, 280, 648], "logical_and": [69, 92, 648, 861, 867], "logical_not": [69, 92, 648, 849], "logical_or": [69, 92, 648], "conform": [69, 75, 92, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 156, 157, 158, 159, 160, 162, 163, 169, 179, 182, 194, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 259, 260, 261, 265, 266, 267, 268, 269, 270, 274, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 349, 350, 352, 386, 389, 392, 401, 433, 507, 511, 537, 645, 646, 648, 653, 655, 660, 661, 662, 663, 664, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 719, 721, 722, 723, 725, 726, 728, 729, 733, 763, 764, 766, 767, 768, 769, 770, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 852, 855], "api_specif": [69, 70, 92, 93, 169, 257, 267, 268, 283, 349, 350, 386, 389, 392, 433, 507, 646, 648, 655, 663, 733, 783, 852], "array_api": [69, 92, 169, 257, 267, 268, 283, 389, 392, 433, 507, 646, 648, 653, 655, 663, 701, 702, 733, 783, 852], "logical_xor": [69, 92, 648], "use_wher": [69, 92, 285, 286, 648], "formula": [69, 70, 92, 254, 276, 278, 285, 286, 287, 333, 367, 383, 386, 395, 516, 518, 648, 830], "exce": [69, 70, 93, 286, 392, 509, 648], "product": [69, 70, 74, 75, 83, 92, 93, 97, 98, 106, 110, 111, 113, 287, 379, 380, 388, 390, 392, 401, 439, 442, 446, 449, 450, 451, 456, 457, 458, 511, 538, 539, 546, 648, 652, 653, 663, 679, 682, 684, 691, 693, 698, 705, 709, 776, 777, 778, 782, 783, 826, 838, 869, 875, 876, 883], "nan_to_num": [69, 92, 648], "posinf": [69, 92, 288, 648], "neginf": [69, 92, 288, 648], "5e": [69, 72, 92, 93, 288, 371, 636, 648, 651], "not_equ": [69, 92, 115, 116, 648], "pow": [69, 92, 115, 116, 648, 843], "expon": [69, 70, 71, 93, 94, 292, 360, 362, 366, 386, 395, 521, 608, 648, 650, 653, 695], "rad2deg": [69, 92, 648], "286": [69, 93, 293], "458": [69, 293], "573": [69, 293, 648], "reciproc": [69, 92, 648], "333": [69, 92, 254, 295, 648], "remaind": [69, 70, 77, 87, 92, 93, 100, 263, 648, 655, 727, 843, 860], "modulu": [69, 92, 296, 648, 860], "x2_i": [69, 92, 237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 265, 266, 273, 274, 279, 281, 283, 284, 287, 290, 292, 296, 303, 648, 843], "678": [69, 297, 298], "np_variant": [69, 92, 298, 648], "841": [69, 86, 92, 123, 299, 642, 648], "909": [69, 92, 94, 299, 648], "141": [69, 92, 166, 299, 646, 648], "sinh": [69, 92, 299, 648], "232": [69, 92, 300, 648], "sqrt": [69, 70, 92, 93, 389, 412, 417, 418, 422, 423, 433, 648, 810, 811, 832], "squar": [69, 70, 75, 92, 93, 98, 301, 390, 391, 395, 401, 443, 455, 467, 521, 537, 632, 633, 635, 641, 648, 651, 653, 657, 683, 685, 686, 688, 689, 690, 692, 695, 701, 702, 703, 708, 743, 832], "tanh": [69, 70, 92, 93, 304, 318, 322, 381, 648, 807, 869], "762": [69, 92, 305, 648], "964": [69, 92, 305, 648], "trapz": [69, 92, 648], "dx": [69, 92, 306, 648], "apart": [69, 92, 306, 648], "trapezoid": [69, 92, 306, 648], "trunc": [69, 92, 648], "025": [69, 307, 391, 472, 648, 656, 736], "trunc_divid": [69, 92, 648], "_arraywithactivationsexperiment": [70, 115], "celu": [70, 93, 381], "formul": [70, 86, 93, 111, 123, 309, 311, 381, 807], "elu": [70, 93, 313, 381, 807], "scaler": [70, 93, 310, 381, 795, 798, 864], "hardshrink": [70, 93, 381], "lambd": [70, 93, 311, 321, 381], "hardsilu": [70, 93, 381], "66666667": [70, 132, 312, 401, 537, 642], "hardtanh": [70, 93, 381], "max_val": [70, 93, 313, 381], "min_val": [70, 93, 313, 381], "region": [70, 93, 313, 321, 381, 839], "19722438": [70, 93, 314, 381], "38629448": [70, 93, 314, 381], "38629436": [70, 93, 314, 381], "logsigmoid": [70, 93, 381, 807], "31326175": [70, 86, 315, 381], "126928": [70, 93, 315], "01814993": [70, 315], "00004578": [70, 315], "57888985": [70, 315], "31326169": [70, 93, 315, 381], "69314718": [70, 75, 86, 93, 98, 315, 368, 381, 386, 653, 701], "01104775": [70, 315], "prelu": [70, 93, 381, 807], "unidirect": [70, 316, 381, 652, 677], "relu6": [70, 93, 381, 807], "rectifi": [70, 86, 93, 125, 127, 128, 317, 320, 325, 381, 642], "scaled_tanh": [70, 93, 322, 381], "7159": [70, 93, 318, 322, 381], "amplitud": [70, 93, 318, 322, 381], "65537548": [70, 93, 318], "49570239": [70, 93, 318], "77637792": [70, 318], "selu": [70, 93, 381, 807], "11133075": [70, 319, 381], "05070102": [70, 93, 319, 381], "10140204": [70, 319, 381], "15210295": [70, 319, 381], "20280409": [70, 319, 381], "25350523": [70, 319, 381], "30420589": [70, 319, 381], "35490704": [70, 319, 381], "silu": [70, 93, 381, 807], "26894143": [70, 320], "73105854": [70, 93, 320], "softshrink": [70, 93, 381], "bound": [70, 93, 321, 333, 381, 383, 392, 481, 507, 508, 795, 849, 853, 861, 864, 869], "tanhshrink": [70, 93, 381], "23840582": [70, 93, 323, 381], "condit": [70, 80, 93, 103, 136, 324, 339, 340, 383, 390, 440, 644, 657, 660, 747, 748, 767, 797, 843, 849, 851, 853, 857, 858, 860, 864, 879], "met": [70, 93, 324, 853], "hreshold": [70, 324], "thresholded_relu": [70, 93, 381], "_arraywithconversionsexperiment": [70, 115], "_arraywithcreationexperiment": [70, 115], "blackman_window": [70, 93, 383], "period": [70, 93, 300, 304, 326, 328, 329, 331, 332, 383, 389, 424, 648, 840], "window": [70, 74, 93, 97, 326, 328, 329, 331, 332, 347, 383, 389, 395, 408, 409, 410, 412, 426, 427, 428, 429, 431, 432, 436, 437, 521, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 811, 834, 840, 846, 854], "symmetr": [70, 75, 93, 98, 110, 111, 326, 328, 329, 331, 332, 383, 390, 392, 443, 498, 653, 683, 688, 689, 690, 711, 847], "38777878e": [70, 93, 326, 383], "40000000e": [70, 326, 383], "00000000e": [70, 75, 93, 94, 326, 357, 358, 383, 389, 411, 417, 421, 422, 653, 700, 836, 854], "30000000e": [70, 93, 326, 383], "eye_lik": [70, 93, 383], "elsewher": [70, 93, 146, 327, 383, 645, 660, 767, 839], "mel_weight_matrix": [70, 93, 383], "num_mel_bin": [70, 93, 333, 383], "dft_length": [70, 93, 333, 383, 389, 412], "sample_r": [70, 93, 333, 383], "lower_edge_hertz": [70, 93, 333, 383], "upper_edge_hertz": [70, 93, 333, 383], "3000": [70, 93, 333, 383], "melweightmatrix": [70, 93, 333, 383], "linearli": [70, 71, 94, 333, 383, 564, 650, 653, 702], "frequenc": [70, 71, 93, 94, 333, 383, 401, 537, 564, 650, 840], "spectra": [70, 333, 383], "dft": [70, 93, 333, 383, 389], "stft": [70, 93, 333, 383, 389], "mel": [70, 93, 333, 383], "hertz": [70, 333, 383], "2595": [70, 333, 383], "700": [70, 94, 333, 383, 568], "band": [70, 71, 93, 94, 333, 383, 564, 650], "spectrum": [70, 93, 333, 383], "n_fft": [70, 93, 333, 383, 389, 412], "8000": [70, 93, 328, 333, 383], "75694758": [70, 333, 383], "trilu": [70, 93, 383], "retain": [70, 161, 342, 343, 383, 632, 645, 651, 859, 863, 873], "unsorted_segment_mean": [70, 93, 383], "segment_id": [70, 93, 344, 345, 346, 383, 817], "num_seg": [70, 93, 344, 345, 346, 383, 817], "segment": [70, 93, 344, 345, 346, 383, 846, 851], "th": [70, 93, 111, 344, 345, 346, 355, 383, 386, 390, 391, 401, 441, 448, 466, 547], "unsorted_segment_min": [70, 93, 383], "unsorted_segment_sum": [70, 93, 383], "polyv": [70, 93, 383], "coeff": [70, 93, 336, 383], "polynomi": [70, 93, 336, 383], "coeffici": [70, 93, 328, 336, 383, 390, 460, 653, 702, 815], "indetermin": [70, 93, 336, 383], "simplifi": [70, 93, 336, 383, 825, 826, 853, 861, 869, 879, 883, 885], "substitut": [70, 93, 336, 383], "_arraywithdata_typeexperiment": [70, 115], "_arraywithdeviceexperiment": [70, 115], "_arraywithelementwiseexperiment": [70, 115], "equal_nan": [70, 93, 348, 365, 386], "1e10": [70, 348, 365, 386], "00001e10": [70, 348, 365, 386], "00001e": [70, 348, 386], "amax": [70, 93, 386], "keepdim": [70, 75, 77, 80, 83, 84, 87, 93, 98, 100, 103, 106, 107, 349, 350, 354, 370, 377, 386, 387, 392, 401, 504, 542, 543, 544, 545, 546, 547, 653, 655, 660, 663, 664, 694, 710, 732, 763, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 853, 861, 869], "singleton": [70, 75, 80, 83, 84, 93, 98, 103, 106, 107, 349, 350, 386, 653, 655, 660, 663, 664, 710, 721, 728, 764, 779, 780, 781, 782, 783, 784, 785, 786, 787, 869], "amin": [70, 93, 386], "binar": [70, 93, 386], "conj": [70, 93, 252, 257, 259, 300, 301, 305, 386, 648], "conjug": [70, 75, 93, 98, 352, 386, 389, 390, 396, 412, 438, 444, 456, 458, 460, 525, 653, 693, 697, 705], "copysign": [70, 93, 386], "unsign": [70, 83, 93, 353, 386, 392, 401, 507, 538, 539, 663, 776, 777, 782, 784, 796, 849, 869], "count_nonzero": [70, 93, 386], "diff": [70, 87, 93, 386, 851, 860], "prepend": [70, 93, 355, 386, 653, 655, 693, 721, 839], "differenc": [70, 93, 355, 386], "prior": [70, 93, 355, 386, 396, 525, 653, 705, 853, 865], "expand": [70, 71, 77, 93, 94, 355, 386, 392, 511, 564, 650, 655, 721, 847, 863], "discret": [70, 93, 355, 386, 389, 411, 412, 417, 418, 421, 422, 423, 433, 434, 654, 713, 811], "digamma": [70, 93, 386], "7549271": [70, 356, 386], "92278427": [70, 93, 356, 386], "9988394": [70, 356, 386], "erfc": [70, 93, 386], "complementari": [70, 93, 347, 357, 383, 386], "84270084e": [70, 357, 358], "80259693e": [70, 357, 358], "erfinv": [70, 93, 386], "float_pow": [70, 93, 386], "fmax": [70, 93, 386], "fmod": [70, 93, 648], "divis": [70, 71, 72, 93, 94, 95, 248, 254, 261, 263, 296, 298, 308, 392, 484, 598, 607, 621, 630, 631, 636, 648, 650, 651, 652, 665, 672, 673, 815, 857, 866, 875], "frexp": [70, 93, 386], "edge_ord": [70, 93, 363, 386], "boundari": [70, 79, 93, 102, 113, 339, 340, 363, 383, 386, 389, 425, 659, 760, 883], "33333333": [70, 93, 295, 363, 386, 466, 648], "hypot": [70, 93, 386], "hypotenus": [70, 364, 386], "4031": [70, 364, 386], "8102": [70, 364, 386], "isclos": [70, 93, 386, 843], "ldexp": [70, 93, 386], "lerp": [70, 93, 386], "lgamma": [70, 93, 386], "45373654": [70, 368, 386], "6477685": [70, 368, 386], "modf": [70, 93, 386], "fraction": [70, 93, 369, 386, 401, 547, 652, 675], "nansum": [70, 93, 386], "accumul": [70, 93, 370, 386, 392, 504], "nextaft": [70, 93, 386], "0e": [70, 72, 93, 95, 371, 386, 636, 651], "4013e": [70, 93, 371, 386], "4028e": [70, 93, 371, 386], "signbit": [70, 93, 386], "637": [70, 93, 373, 386], "0909": [70, 93, 373, 386], "sparsify_tensor": [70, 93, 386], "sparsifi": [70, 93, 374, 386], "arang": [70, 75, 83, 93, 98, 151, 374, 386, 389, 390, 408, 409, 410, 417, 422, 426, 427, 428, 431, 440, 457, 490, 587, 629, 645, 650, 653, 656, 663, 694, 710, 735, 736, 778, 832, 849, 860], "xlogi": [70, 93, 386], "0986": [70, 93, 375, 386], "3863": [70, 93, 375, 386], "0000": [70, 93, 328, 329, 332, 358, 375, 383, 386, 390, 392, 455, 492], "zeta": [70, 93, 386], "0369": [70, 93, 376, 386], "_arraywithgeneralexperiment": [70, 115], "init_valu": [70, 93, 97, 377, 387, 389, 432], "reduct": [70, 71, 76, 84, 87, 93, 94, 97, 99, 107, 377, 387, 389, 391, 392, 432, 466, 467, 468, 469, 470, 471, 472, 473, 504, 561, 591, 592, 650, 654, 664, 712, 713, 714, 786, 787, 812, 849, 857, 860, 864], "_arraywithgradientsexperiment": [70, 115], "_arraywithimageexperiment": [70, 115], "_arraywithlayersexperiment": [70, 115], "adaptive_avg_pool1d": [70, 93, 389], "1d": [70, 93, 110, 111, 389, 390, 392, 401, 403, 411, 413, 415, 421, 456, 476, 481, 504, 508, 537, 795, 811], "adapt": [70, 93, 95, 389, 403, 404, 405, 406, 637, 651, 811, 815], "plane": [70, 93, 254, 257, 259, 287, 299, 300, 301, 304, 389, 392, 403, 404, 405, 406, 505, 648], "l_in": [70, 93, 389, 403], "spatial": [70, 74, 93, 97, 389, 395, 403, 404, 405, 406, 425, 432, 436, 516, 517, 518, 521, 652, 665, 666, 667, 668, 670, 672, 674, 814], "Will": [70, 93, 389, 403, 404, 405, 406, 820, 871], "l_out": [70, 93, 389, 403], "nhwc": [70, 74, 93, 97, 389, 395, 404, 409, 414, 427, 431, 521, 652, 665, 668, 669, 672, 673, 674, 811], "3d": [70, 75, 93, 389, 404, 406, 413, 414, 478, 653, 691, 811, 867], "4d": [70, 93, 389, 390, 395, 404, 414, 415, 464, 521, 654, 715], "s_0": [70, 93, 389, 404, 405], "s_1": [70, 93, 389, 404, 405], "adaptive_max_pool2d": [70, 93, 389], "h_in": [70, 93, 389, 405, 406], "w_in": [70, 93, 389, 405, 406], "adaptive_max_pool3d": [70, 93, 389], "avg_pool1d": [70, 93, 389], "nwc": [70, 74, 93, 97, 389, 408, 413, 426, 429, 652, 665, 666, 667, 672, 673, 811], "count_include_pad": [70, 93, 389, 408, 409, 410, 811], "d_in": [70, 74, 93, 97, 389, 406, 408, 409, 410, 412, 417, 418, 422, 426, 427, 428, 429, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674], "algorithm": [70, 74, 86, 93, 97, 123, 389, 390, 408, 409, 410, 425, 426, 427, 428, 429, 459, 461, 465, 653, 666, 668, 669, 670, 671, 674, 701, 807, 811, 826, 849, 861, 867, 871, 883], "ncw": [70, 74, 93, 97, 389, 408, 413, 414, 426, 429, 652, 665, 666, 667, 672, 673, 811], "avg_pool2d": [70, 93, 389], "divisor_overrid": [70, 93, 389, 408, 409, 410, 811], "avg_pool3d": [70, 93, 389], "ndhwc": [70, 74, 93, 97, 389, 410, 415, 428, 652, 665, 670, 671, 672, 673, 811], "volum": [70, 74, 93, 97, 389, 410, 412, 417, 418, 422, 428, 652, 670, 671], "ncdhw": [70, 74, 93, 97, 389, 410, 415, 428, 652, 665, 670, 671, 672, 673, 811], "dct": [70, 93, 389, 811], "truncat": [70, 93, 389, 390, 411, 417, 421, 422, 423, 434, 463, 594, 650, 811, 853], "larger": [70, 77, 83, 93, 100, 106, 179, 389, 411, 418, 421, 423, 434, 646, 655, 663, 718, 726, 783, 785, 811, 864, 867], "ortho": [70, 93, 389, 411, 412, 417, 418, 421, 422, 423, 433, 434, 811], "onesid": [70, 93, 389, 412], "fft": [70, 93, 389, 412, 418, 433, 434, 437, 811, 838, 883], "symmetri": [70, 389, 412], "rfft": [70, 93, 389, 412, 434], "invok": [70, 389, 412, 832, 855, 878, 879], "batch_idx": [70, 389, 412], "signal_dim1": [70, 389, 412], "signal_dim2": [70, 389, 412], "signal_dimn": [70, 389, 412], "signal_dim": [70, 389, 412], "embed": [70, 93, 389, 391, 466, 652, 679, 797, 811, 883], "max_norm": [70, 71, 93, 94, 389, 416, 555, 556, 650, 811], "ifft": [70, 93, 389, 417, 423, 811], "pi": [70, 93, 300, 304, 389, 391, 417, 422, 471, 643, 648], "44509285e": [70, 93, 389, 417], "14423775e": [70, 93, 389, 417], "17j": [70, 93, 389, 417, 422], "11483250e": [70, 93, 389, 417], "16j": [70, 93, 389, 417, 422], "33486982e": [70, 93, 389, 417], "22464680e": [70, 93, 389, 417], "95799250e": [70, 93, 389, 417], "66951701e": [70, 93, 389, 417], "fft2": [70, 389], "20477401j": [70, 389, 418], "0614962j": [70, 389, 418], "idct": [70, 93, 389, 811], "49862671": [70, 93, 389, 411, 421], "37691498": [70, 93, 389, 411, 421], "00390816": [70, 93, 389, 411, 421], "58938599": [70, 93, 389, 411, 421], "92713165": [70, 93, 389, 411, 421], "078475": [70, 93, 389, 411, 421], "19664812": [70, 93, 389, 411, 421], "95411837": [70, 93, 389, 411, 421], "30636606e": [70, 93, 389, 422], "43029718e": [70, 93, 389, 422], "18j": [70, 93, 389, 417, 422], "53080850e": [70, 93, 389, 422], "58689626e": [70, 93, 389, 422], "24474906e": [70, 93, 389, 422], "91858728e": [70, 93, 389, 422], "01435406e": [70, 93, 389, 422], "ifftn": [70, 93, 389], "24730653": [70, 93, 389, 423], "90832391j": [70, 93, 389, 423], "49495562": [70, 93, 389, 423], "9039565j": [70, 93, 389, 423], "98193269": [70, 93, 389, 423], "49560517j": [70, 93, 389, 423], "93280757": [70, 93, 389, 423], "48075343j": [70, 93, 389, 423], "28526384": [70, 93, 389, 423], "3351205j": [70, 93, 389, 423], "2343787": [70, 93, 389, 423], "83528011j": [70, 93, 389, 423], "18791352": [70, 93, 389, 423], "30690572j": [70, 93, 389, 423], "82115787": [70, 93, 389, 423], "96195183j": [70, 93, 389, 423], "44719226": [70, 93, 389, 423], "72654048j": [70, 93, 389, 423], "51476765": [70, 389, 423], "66160417j": [70, 389, 423], "04319742": [70, 389, 423], "05411636j": [70, 389, 423], "015561": [70, 389, 423], "04216015j": [70, 389, 423], "06310689": [70, 389, 423], "05347854j": [70, 389, 423], "13392983": [70, 389, 423], "16052352j": [70, 389, 423], "08371392": [70, 389, 423], "17252843j": [70, 389, 423], "0031429": [70, 389, 423], "05421245j": [70, 389, 423], "10446617": [70, 389, 423], "17747098j": [70, 389, 423], "05344324": [70, 389, 423], "07972424j": [70, 389, 423], "8344667": [70, 93, 389, 423], "98222595j": [70, 93, 389, 423], "48472244": [70, 93, 389, 423], "30233797j": [70, 93, 389, 423], "recompute_scale_factor": [70, 93, 389, 425, 867], "antialia": [70, 93, 389, 425, 867], "height": [70, 71, 74, 93, 94, 97, 389, 425, 560, 650, 652, 654, 668, 669, 670, 671, 674, 715, 841], "width": [70, 71, 74, 93, 94, 97, 389, 390, 392, 395, 401, 425, 444, 498, 521, 540, 560, 650, 652, 654, 666, 667, 668, 669, 670, 671, 674, 679, 715], "trilinear": [70, 93, 389, 425, 867], "nearest_exact": [70, 93, 389, 425, 867], "tf_area": [70, 93, 389, 425, 867], "mitchellcub": [70, 93, 389, 425, 867], "lanczos3": [70, 93, 389, 425, 867], "lanczos5": [70, 93, 389, 425, 867], "gaussian": [70, 93, 123, 389, 425, 642, 867], "overwrit": [70, 87, 93, 227, 389, 425, 647, 840, 860, 861, 869], "thu": [70, 93, 248, 261, 296, 304, 305, 389, 390, 425, 443, 648, 653, 688, 689, 838, 848, 853, 858, 861, 865, 885], "antialias": [70, 93, 425], "max_pool1d": [70, 93, 389], "dilaton": [70, 93, 426, 427, 428], "max_pool3d": [70, 93, 389], "max_unpool1d": [70, 93, 389], "unpool": [70, 93, 389, 429], "reduce_window": [70, 97, 389], "window_dimens": [70, 97, 389, 432], "window_strid": [70, 97, 389, 432], "base_dil": [70, 97, 389, 432], "window_dil": [70, 97, 389, 432], "trim": [70, 87, 93, 389, 392, 433, 510], "orthonorm": [70, 75, 93, 98, 389, 433, 653, 700, 703], "8660254j": [70, 93, 389, 433], "rfftn": [70, 93, 389], "sliding_window": [70, 93, 389], "window_s": [70, 93, 389, 436], "frame_length": [70, 93, 389, 437], "frame_step": [70, 93, 389, 437], "fft_length": [70, 93, 389, 437], "window_fn": [70, 93, 389, 437], "pad_end": [70, 93, 389, 437], "smallest": [70, 87, 93, 179, 182, 250, 389, 392, 437, 509, 646, 648, 653, 694, 795, 797, 798], "enclos": [70, 93, 389, 437, 884], "window_length": [70, 93, 326, 328, 331, 332, 347, 383, 389, 437], "li": [70, 93, 389, 390, 401, 437, 444, 547], "past": [70, 93, 389, 437, 840, 843, 862, 864, 883], "fft_unique_bin": [70, 93, 389, 437], "complex64": [70, 90, 93, 172, 186, 195, 201, 267, 294, 389, 433, 437, 646, 648, 653, 701, 703, 704, 796, 849, 854], "complex128": [70, 93, 94, 172, 173, 186, 195, 201, 389, 437, 586, 646, 650, 653, 689, 690, 694, 710, 795, 796, 836, 849, 854], "compon": [70, 93, 142, 156, 157, 235, 236, 237, 240, 243, 252, 254, 255, 257, 259, 287, 289, 290, 297, 300, 301, 304, 305, 337, 341, 352, 383, 386, 389, 390, 395, 437, 448, 459, 521, 645, 648, 660, 766, 863, 869, 876, 884], "linear_algebra": [70, 75, 93, 98, 390, 653, 865], "_arraywithlinearalgebraexperiment": [70, 115], "adjoint": [70, 75, 93, 98, 390, 460, 653, 692, 702, 703, 795], "batched_out": [70, 93, 390], "j1": [70, 93, 390, 439], "jn": [70, 93, 390, 439], "k1": [70, 93, 390, 439], "km": [70, 93, 390, 439], "outer": [70, 75, 93, 98, 110, 390, 439, 653, 656, 734, 735, 736, 826, 838], "30000001": [70, 93, 390, 439, 560, 650, 661, 769], "40000001": [70, 74, 86, 93, 115, 116, 125, 128, 310, 381, 390, 439, 642, 652, 661, 682, 769], "60000002": [70, 93, 106, 116, 390, 395, 439, 520, 522, 556, 650, 780], "80000001": [70, 93, 390, 395, 439, 520, 522], "60000001": [70, 93, 390, 439], "90000004": [70, 93, 390, 439, 663, 780], "20000002": [70, 93, 390, 439, 556, 650], "20000005": [70, 72, 93, 310, 318, 321, 322, 381, 390, 439, 630], "00000012": [70, 93, 390, 439], "49999994": [70, 93, 390, 439], "00000006": [70, 93, 390, 439], "60000014": [70, 93, 390, 439], "19999993": [70, 93, 390, 439], "80000007": [70, 93, 390, 439, 556, 650], "20000017": [70, 93, 390, 439], "89999992": [70, 93, 390, 439], "60000008": [70, 93, 390, 439], "80000019": [70, 93, 367, 386, 390, 439], "4000001": [70, 93, 97, 390, 439, 652, 675, 682], "cond": [70, 93, 136, 390, 644, 871], "933034373659268": [70, 440], "diagflat": [70, 93, 390, 450, 455], "offset": [70, 75, 78, 89, 93, 98, 101, 148, 390, 395, 441, 516, 517, 518, 645, 653, 658, 687, 707, 756, 802], "padding_valu": [70, 93, 390, 392, 441, 499], "right_left": [70, 93, 390, 441], "num_row": [70, 93, 390, 441], "num_col": [70, 93, 390, 441], "dot": [70, 74, 93, 97, 110, 390, 391, 457, 466, 652, 653, 679, 682, 709, 826, 839, 848], "eig": [70, 75, 93, 390, 653, 689, 690], "37228132": [70, 93, 390, 443, 445, 688], "82456484": [70, 443, 688], "41597356": [70, 443, 688], "56576746": [70, 443, 688], "90937671": [70, 443, 688], "eigh_tridiagon": [70, 93, 390], "eigvals_onli": [70, 93, 390, 444], "select_rang": [70, 93, 390, 444], "tol": [70, 93, 114, 390, 444, 459, 465], "eigenvalu": [70, 75, 93, 98, 110, 111, 390, 443, 444, 445, 653, 688, 689, 690, 696], "eigenvector": [70, 93, 390, 443, 444, 653, 688, 689], "interv": [70, 79, 84, 93, 102, 107, 139, 151, 152, 159, 390, 401, 444, 540, 645, 653, 655, 659, 664, 684, 709, 718, 721, 729, 758, 760, 786, 787], "converg": [70, 93, 390, 444], "_2": [70, 93, 390, 444], "eig_val": [70, 93, 390, 444], "decreas": [70, 93, 390, 444, 797], "eig_vector": [70, 93, 390, 444], "38196": [70, 444], "61803": [70, 444], "eigval": [70, 93, 390], "general_inner_product": [70, 98, 390], "n_mode": [70, 98, 390, 446], "tradit": [70, 98, 390, 446], "inner": [70, 75, 89, 98, 119, 155, 390, 443, 446, 645, 653, 656, 688, 689, 693, 734, 735, 736, 826, 838, 860], "higher_order_mo": [70, 93, 390], "n_featur": [70, 93, 390, 447], "d1": [70, 93, 390, 447], "dn": [70, 93, 390, 447], "initialize_tuck": [70, 93, 390], "svd": [70, 75, 93, 98, 113, 390, 448, 454, 459, 461, 462, 463, 465, 653, 704], "truncated_svd": [70, 93, 390, 448, 459, 462, 465], "non_neg": [70, 93, 341, 383, 390, 448], "mask": [70, 74, 93, 97, 110, 389, 390, 392, 435, 448, 449, 459, 465, 506, 570, 650, 652, 675, 679, 682, 867], "svd_mask_repeat": [70, 93, 390, 448, 459, 465], "tuckertensor": [70, 93, 114, 341, 383, 390, 448, 459, 465], "scheme": [70, 93, 390, 448, 459, 843, 883], "tucker": [70, 93, 341, 383, 390, 448, 459], "decomposit": [70, 75, 93, 98, 110, 111, 113, 337, 338, 339, 340, 341, 383, 390, 448, 452, 459, 462, 464, 465, 653, 683, 689, 700, 703, 838], "miss": [70, 93, 390, 392, 448, 459, 465, 506, 815, 838, 839, 844, 847, 848, 851, 861, 864, 867], "everywher": [70, 93, 390, 448, 459, 465], "kron": [70, 93, 390, 455], "make_svd_non_neg": [70, 93, 390, 463], "nntype": [70, 93, 390, 454], "nndsvd": [70, 93, 390, 454], "singular": [70, 75, 93, 98, 390, 448, 454, 461, 463, 653, 694, 696, 699, 703, 704, 795, 797, 849], "nndsvda": [70, 93, 390, 454], "boutsidi": [70, 93, 390, 454], "gallopoulo": [70, 93, 390, 454], "recognit": [70, 93, 390, 454, 835], "1350": [70, 93, 390, 454], "1362": [70, 93, 390, 454], "2008": [70, 93, 390, 454, 883], "matrix_exp": [70, 93, 390], "7183": [70, 93, 390, 455], "3891": [70, 93, 390, 455], "mode_dot": [70, 93, 109, 110, 114, 390], "matrix_or_vector": [70, 93, 110, 114, 390, 456], "i_1": [70, 93, 110, 111, 390, 456], "i_k": [70, 93, 110, 390, 456], "i_n": [70, 93, 110, 390, 456], "i_": [70, 93, 110, 390, 401, 456, 540], "multi_dot": [70, 93, 390], "148": [70, 92, 93, 257, 390, 457], "multi_mode_dot": [70, 93, 390], "mat_or_vec_list": [70, 93, 390, 458], "times_0": [70, 390, 458], "vec": [70, 390, 458], "times_1": [70, 390, 458], "cdot": [70, 287, 390, 458, 648], "times_n": [70, 390, 458], "partial_tuck": [70, 93, 390], "n_iter_max": [70, 93, 390, 459, 465], "verbos": [70, 93, 390, 459, 462, 465, 830, 864, 869], "return_error": [70, 93, 390, 459, 465], "variat": [70, 93, 390, 459, 465, 851, 861, 864], "reconstruct": [70, 75, 81, 93, 104, 113, 390, 392, 459, 465, 513, 653, 661, 703, 768, 770, 862], "return_erro": [70, 390, 459, 465], "svd_flip": [70, 93, 390], "u_based_decis": [70, 93, 390, 461], "basi": [70, 93, 390, 461, 840, 843], "flip": [70, 77, 93, 100, 110, 245, 390, 392, 461, 489, 490, 648, 655, 860, 869], "decis": [70, 93, 390, 461, 832, 843, 849, 867, 869, 883], "u_adjust": [70, 93, 390, 461], "v_adjust": [70, 93, 390, 461], "tensor_train": [70, 93, 390], "tt": [70, 93, 340, 383, 390, 462, 464], "kth": [70, 390, 462], "tttensor": [70, 113, 340, 383, 390, 462], "compute_uv": [70, 75, 93, 98, 390, 463, 653, 703], "n_eigenvec": [70, 93, 390, 463], "returnedv": [70, 463], "vh": [70, 75, 93, 98, 390, 463, 653, 703], "eigen": [70, 93, 390, 463], "namedtupl": [70, 75, 81, 93, 98, 104, 390, 392, 443, 463, 513, 653, 661, 688, 689, 700, 701, 703, 768, 769, 770], "tt_matrix_to_tensor": [70, 93, 390], "rank_k": [70, 93, 390, 464], "left_dim_k": [70, 93, 390, 464], "right_dim_k": [70, 93, 390, 464], "rank_": [70, 93, 390, 464], "49671414": [70, 93, 390, 464, 659, 759], "1382643": [70, 93, 390, 464, 659, 759], "64768857": [70, 93, 390, 464, 659, 759], "5230298": [70, 93, 390, 464, 659, 759], "23415337": [70, 93, 390, 464, 659, 759], "23413695": [70, 93, 390, 464, 659, 759], "57921278": [70, 93, 390, 464], "76743472": [70, 93, 390, 464], "1163073": [70, 93, 390, 464], "11629914": [70, 93, 390, 464], "03237505": [70, 93, 390, 464], "03237278": [70, 93, 390, 464], "78441733": [70, 93, 390, 464], "38119566": [70, 93, 390, 464], "21834874": [70, 93, 390, 464], "10610882": [70, 93, 390, 464], "15165846": [70, 93, 390, 464], "15164782": [70, 93, 390, 464], "35662258": [70, 93, 390, 464], "35659757": [70, 93, 390, 464], "02283812": [70, 93, 390, 464], "49705869": [70, 93, 390, 464], "40518808": [70, 93, 390, 464], "16882598": [70, 93, 390, 464], "fixed_factor": [70, 93, 390, 465], "tl": [70, 93, 390, 465], "kolda": [70, 93, 390, 465], "bader": [70, 93, 390, 465], "siam": [70, 93, 390, 462, 465], "vol": [70, 93, 390, 465], "pp": [70, 93, 390, 465], "455": [70, 93, 390, 465], "2009": [70, 93, 390, 465], "_arraywithlossesexperiment": [70, 115], "hinge_embedding_loss": [70, 93, 391], "margin": [70, 93, 391, 466, 473, 861], "measur": [70, 391, 466, 652, 654, 679, 715, 811], "semi": [70, 391, 466], "l_n": [70, 391, 466], "x_n": [70, 391, 466], "y_n": [70, 391, 466], "ell": [70, 391, 466], "operatornam": [70, 298, 300, 391, 466, 648, 653, 689], "l_1": [70, 391, 466], "hyperparamet": [70, 93, 391, 466], "aggreg": [70, 93, 391, 466, 661, 768, 848], "unreduc": [70, 93, 391, 466], "hing": [70, 93, 391, 466, 473], "target_tensor": [70, 391, 466, 471], "huber_loss": [70, 93, 391], "transit": [70, 93, 391, 467, 883], "huber": [70, 93, 391, 467], "kl_div": [70, 93, 391], "log_target": [70, 93, 391, 468], "contai": [70, 468], "batchmean": [70, 391, 468], "kullback": [70, 93, 391, 468], "leibler": [70, 93, 391, 468], "0916": [70, 468], "l1_loss": [70, 93, 391, 470], "l1": [70, 75, 93, 98, 391, 395, 467, 469, 470, 472, 519, 653, 710, 847], "targetict": [70, 93, 391, 469, 470, 472, 473], "20000000000000004": [70, 469], "log_poisson_loss": [70, 93, 391], "compute_full_loss": [70, 93, 391, 470, 812], "favor": [70, 93, 391, 470], "likelihood": [70, 93, 391, 470, 471], "28402555": [70, 391, 470], "03402555": [70, 391, 470], "1573164": [70, 391, 470], "poisson_nll_loss": [70, 93, 391], "log_input": [70, 93, 391, 471], "poisson": [70, 93, 391, 396, 470, 471], "assumpt": [70, 391, 470, 471], "minu": [70, 391, 470, 471], "omiss": [70, 391, 471], "stirl": [70, 93, 391, 470, 471], "1977562": [70, 471], "smooth_l1_loss": [70, 93, 391], "smooth": [70, 76, 93, 99, 391, 467, 472, 654, 712, 713, 714, 859], "8125": [70, 472], "soft_margin_loss": [70, 93, 391], "soft": [70, 93, 321, 391, 392, 473, 506, 850], "35667497": [70, 473], "22314353": [70, 473], "60943791": [70, 473], "_arraywithmanipulationexperiment": [70, 115], "as_strid": [70, 93, 392], "nativeshap": [70, 74, 77, 79, 93, 100, 102, 140, 141, 144, 149, 156, 162, 392, 396, 474, 486, 491, 500, 503, 523, 524, 525, 526, 527, 592, 605, 611, 613, 645, 650, 652, 655, 659, 665, 667, 669, 671, 673, 725, 758, 759, 760, 856, 858], "byte": [70, 71, 89, 93, 94, 115, 148, 392, 474, 586, 645, 650], "associative_scan": [70, 93, 392], "revers": [70, 71, 75, 83, 93, 98, 106, 115, 116, 380, 388, 389, 390, 392, 401, 435, 451, 475, 489, 490, 538, 539, 559, 650, 653, 655, 663, 708, 722, 776, 777, 838, 847, 848, 849, 851, 852, 860, 861, 867, 869, 871], "scan": [70, 93, 392, 475, 871], "atleast_1d": [70, 93, 392], "ari": [70, 93, 392, 476, 477, 478, 484, 493, 514], "a1": [70, 94, 392, 476, 477, 478, 482, 552], "a2": [70, 94, 392, 476, 477, 478, 482, 552], "atleast_2d": [70, 93, 392], "atleast_3d": [70, 93, 392], "column_stack": [70, 93, 392], "concat_from_sequ": [70, 93, 392], "input_sequ": [70, 93, 392, 483], "new_axi": [70, 93, 392, 483, 869], "dsplit": [70, 93, 392], "indices_or_sect": [70, 93, 392, 484, 493, 514], "3rd": [70, 93, 392, 484], "dstack": [70, 93, 392], "fill_diagon": [70, 93, 392], "fill_diag": [70, 487], "fortran": [70, 77, 93, 100, 392, 488, 655, 725, 883], "layout": [70, 77, 93, 100, 392, 488, 655, 725, 845, 860, 861, 867], "fliplr": [70, 93, 392, 860], "diag": [70, 75, 93, 98, 111, 392, 489, 490, 653, 689, 870], "flipud": [70, 93, 392, 860], "fold": [70, 93, 392, 500, 501, 848], "unfold": [70, 93, 110, 111, 113, 390, 392, 448, 491, 500, 502], "folded_tensor": [70, 392, 491], "heavisid": [70, 93, 392], "5000": [70, 392, 492, 653, 692, 826], "hsplit": [70, 93, 392], "horizont": [70, 93, 392, 482, 493, 560, 650], "hstack": [70, 93, 392, 482], "i0": [70, 93, 392, 401, 540], "bessel": [70, 83, 93, 106, 331, 383, 392, 495, 663, 783, 785], "kind": [70, 83, 93, 179, 182, 183, 401, 495, 538, 539, 544, 646, 663, 776, 777, 782, 784, 795, 796, 837, 861, 864, 867, 869, 871], "26606588": [70, 93, 392, 495], "2795853": [70, 93, 392, 495], "88079259": [70, 93, 392, 495], "row_mod": [70, 93, 392, 496], "column_mod": [70, 93, 392, 496], "ascend": [70, 82, 93, 105, 392, 399, 496, 530, 662, 772, 774, 841], "prod": [70, 71, 83, 94, 106, 390, 392, 449, 451, 496, 546, 561, 650, 663, 795, 826, 849, 851, 869], "moveaxi": [70, 93, 392], "destin": [70, 93, 392, 497], "unstack": [70, 77, 87, 100, 497, 655, 847, 869], "reorder": [70, 77, 93, 100, 392, 497, 560, 650, 655, 722, 863], "stat_length": [70, 93, 392, 498], "constant_valu": [70, 93, 392, 498], "end_valu": [70, 93, 392, 498], "reflect_typ": [70, 93, 392, 498], "partial_fold": [70, 93, 392], "skip_begin": [70, 93, 392, 500, 501, 502, 503], "untouch": [70, 93, 392, 500, 501, 502, 503], "partial_tensor_to_vec": [70, 93, 392], "skip_end": [70, 93, 392, 501, 502], "vectoris": [70, 93, 110, 392, 501, 503], "partial_unfold": [70, 93, 392], "ravel_tensor": [70, 93, 392, 502], "n_1": [70, 93, 392, 502], "n_2": [70, 93, 392, 502], "n_i": [70, 93, 390, 392, 449, 502], "partial_vec_to_tensor": [70, 93, 392], "put_along_axi": [70, 93, 392], "rot90": [70, 93, 392, 860], "rotat": [70, 93, 392, 505], "soft_threshold": [70, 93, 392], "behav": [70, 93, 349, 350, 386, 390, 392, 443, 507, 653, 688, 843, 853, 858, 860, 861, 862, 884], "slice": [70, 83, 87, 93, 94, 106, 111, 161, 342, 383, 392, 481, 504, 507, 508, 567, 568, 570, 596, 645, 650, 657, 663, 746, 781, 864, 883], "inexact": [70, 93, 360, 386, 392, 507], "largest": [70, 87, 93, 179, 182, 390, 392, 461, 507, 509, 646, 653, 694, 703], "take_along_axi": [70, 93, 392], "arr": [70, 71, 90, 93, 187, 392, 481, 504, 508, 592, 646, 849, 850], "top_k": [70, 93, 392], "sort": [70, 81, 87, 93, 104, 116, 213, 306, 390, 392, 401, 443, 509, 530, 544, 647, 648, 653, 661, 688, 689, 703, 704, 768, 772, 773, 774, 797, 837, 848, 863, 865], "trim_zero": [70, 93, 392], "fb": [70, 93, 392, 510], "front": [70, 93, 392, 510, 861, 869, 883], "unflatten": [70, 93, 392], "unfolded_tensor": [70, 392, 512], "unique_consecut": [70, 93, 392], "vsplit": [70, 93, 392], "vertic": [70, 93, 392, 514, 515, 560, 650, 840], "_arraywithnormsexperiment": [70, 115], "varianc": [70, 83, 93, 106, 395, 516, 518, 663, 785, 810, 814], "nsc": [70, 93, 395, 516, 517, 518, 814], "braodcast": [70, 93, 395, 516], "running_mean": [70, 93, 395, 516, 518, 814], "running_var": [70, 93, 395, 516, 518, 814], "nc": [70, 93, 395, 516, 517, 518, 814], "group_norm": [70, 93, 395], "num_group": [70, 93, 395, 517], "instance_norm": [70, 93, 395], "l1_normal": [70, 93, 395], "33333334": [70, 93, 312, 381, 395, 519, 522, 556, 632, 650, 651, 652, 653, 674, 710], "33333337": [70, 151, 395, 519, 632, 645, 651], "28571439": [70, 395, 519], "l2_normal": [70, 93, 395, 522], "l2": [70, 75, 98, 109, 110, 395, 520, 522, 653, 710, 811, 847], "44721359": [70, 93, 395, 520, 522], "89442718": [70, 93, 395, 520, 522, 556, 650], "lp_normal": [70, 93, 395], "lp": [70, 395, 522], "_arraywithrandomexperiment": [70, 115], "bernoulli": [70, 93, 389, 396, 413, 414, 415], "event": [70, 93, 396, 523, 864], "parameter": [70, 79, 93, 102, 396, 523, 524, 526, 527, 659, 757, 759, 760], "odd": [70, 93, 292, 392, 396, 498, 523, 648, 826, 837, 843], "drawn": [70, 79, 93, 102, 396, 523, 524, 525, 526, 527, 659, 757, 758, 759, 760, 795, 796, 797, 810, 864], "dirichlet": [70, 93, 396], "10598304": [70, 396, 525], "21537054": [70, 396, 525], "67864642": [70, 396, 525], "48006698": [70, 396, 525], "07472073": [70, 396, 525], "44521229": [70, 396, 525], "55479872": [70, 396, 525], "05426367": [70, 396, 525], "39093761": [70, 396, 525], "19531053": [70, 396, 525], "51675832": [70, 396, 525], "28793114": [70, 396, 525], "12315625": [70, 396, 525], "29823365": [70, 396, 525], "5786101": [70, 396, 525], "15564976": [70, 396, 525], "50542368": [70, 396, 525], "33892656": [70, 396, 525], "1325352": [70, 396, 525], "44439589": [70, 396, 525], "42306891": [70, 396, 525], "gamma": [70, 78, 93, 101, 356, 368, 386, 396, 401, 541, 658, 756], "lam": [70, 93, 396, 527], "_arraywithsearchingexperiment": [70, 115], "unravel_index": [70, 93, 397], "unravel": [70, 93, 397, 528], "_arraywithsetexperiment": [70, 115], "_arraywithsortingexperiment": [70, 115], "lexsort": [70, 93, 399], "indirectli": [70, 93, 399, 530], "statist": [70, 93, 108, 392, 498, 814, 830, 838, 849, 864, 865, 883], "_arraywithstatisticalexperiment": [70, 115], "bincount": [70, 93, 401], "minlength": [70, 93, 401, 535], "corrcoef": [70, 93, 401], "rowvar": [70, 93, 401, 536, 537], "relationship": [70, 93, 536, 810, 863], "cov": [70, 93, 401], "ddof": [70, 93, 401, 537], "fweight": [70, 93, 401, 537], "aweight": [70, 93, 401, 537], "overridden": [70, 93, 401, 537, 815, 844], "assign": [70, 93, 110, 401, 537, 838, 840, 845, 849, 860, 863], "covari": [70, 93, 401, 537], "cummax": [70, 93, 401], "exclus": [70, 71, 83, 87, 93, 94, 106, 139, 390, 401, 459, 538, 539, 579, 580, 583, 645, 650, 659, 663, 758, 776, 777, 835, 847, 849, 857, 869], "cumul": [70, 83, 93, 106, 401, 538, 539, 663, 776, 777], "uint64": [70, 83, 176, 181, 183, 184, 194, 196, 199, 401, 538, 539, 646, 663, 776, 777, 782, 784, 795, 796, 849, 864, 869], "uint16": [70, 83, 171, 176, 181, 182, 191, 401, 538, 539, 646, 663, 776, 777, 782, 784, 795, 796, 849, 861, 864, 869], "uint32": [70, 83, 176, 181, 182, 183, 205, 401, 538, 539, 646, 663, 776, 777, 782, 784, 795, 796, 849, 864, 869], "cummin": [70, 93, 401], "histogram": [70, 93, 401], "extend_lower_interv": [70, 93, 401, 540], "extend_upper_interv": [70, 93, 401, 540], "densiti": [70, 93, 401, 540], "monoton": [70, 93, 401, 540], "rightmost": [70, 93, 401, 540], "c1": [70, 93, 401, 540, 847], "ff": [70, 93, 401, 540], "c_": [70, 93, 111, 401, 540], "igamma": [70, 93, 401], "incomplet": [70, 93, 401, 541, 840], "3614": [70, 93, 401, 541], "2085": [70, 93, 401, 541], "median": [70, 93, 392, 401, 498, 544], "nanmean": [70, 93, 401], "6666666666666665": [70, 93, 401, 543], "nanmedian": [70, 93, 401], "overwrite_input": [70, 93, 401, 544], "treat": [70, 87, 93, 116, 292, 370, 386, 392, 395, 401, 508, 521, 544, 546, 648, 792, 859, 864], "undefin": [70, 93, 392, 401, 402, 498, 544, 548, 849, 853, 859], "nanmin": [70, 93, 401], "nanprod": [70, 93, 401], "Not": [70, 93, 370, 386, 390, 401, 445, 546, 643, 845, 853, 862, 871], "quantil": [70, 93, 401], "inclus": [70, 93, 139, 401, 547, 645, 659, 758, 833, 845, 860, 867], "midpoint": [70, 93, 401, 547], "surround": [70, 93, 401, 547, 867], "whichev": [70, 93, 401, 547], "_arraywithutilityexperiment": [70, 115], "optional_get_el": [70, 93, 402], "empti": [70, 71, 83, 87, 94, 106, 139, 392, 402, 498, 548, 555, 592, 645, 650, 653, 657, 663, 664, 707, 710, 751, 781, 782, 784, 786, 787, 838, 839, 844, 846, 849, 850, 860], "_arraywithgener": [71, 115], "all_equ": [71, 94, 650], "equality_matrix": [71, 94, 549, 650], "array_equ": [71, 94, 650], "assert_supports_inplac": [71, 94, 650], "ivybackendexcept": [71, 94, 553, 577, 650, 827, 844, 850, 853, 854], "clip_matrix_norm": [71, 94, 650], "894": [71, 94, 555, 556, 650, 658, 756], "clip_vector_norm": [71, 94, 650], "default_v": [71, 559, 650], "catch_except": [71, 559, 650], "rev": [71, 559, 650], "with_cal": [71, 559, 650], "catch": [71, 559, 650, 858, 864], "einops_rearrang": [71, 94, 650], "axes_length": [71, 94, 560, 561, 562, 650], "arrang": [71, 560, 650], "rearrang": [71, 94, 560, 562, 650, 863], "einops_reduc": [71, 94, 650, 849], "einops_repeat": [71, 94, 650], "fourier_encod": [71, 94, 650], "max_freq": [71, 94, 564, 650], "oppos": [71, 94, 564, 650, 849], "geometr": [71, 94, 564, 650, 653, 708], "0000000e": [71, 94, 564, 650], "2246468e": [71, 94, 564, 650], "4492936e": [71, 564, 650], "6739404e": [71, 94, 564, 650], "batch_dim": [71, 94, 567, 568, 650, 817], "gather_nd": [71, 94, 650], "get_num_dim": [71, 94, 650], "as_arrai": [71, 94, 571, 605, 650, 817], "has_nan": [71, 94, 650], "include_inf": [71, 94, 573, 628, 650], "inplace_decr": [71, 94, 650], "decrement": [71, 94, 575, 650], "inplace_incr": [71, 94, 650], "increment": [71, 94, 576, 650, 840, 883], "inplace_upd": [71, 94, 595, 650, 808, 860], "ensure_in_backend": [71, 94, 577, 650, 823, 860], "keep_input_dtyp": [71, 94, 577, 650, 823, 860], "is_arrai": [71, 94, 650, 860, 861], "is_ivy_arrai": [71, 94, 650, 860], "is_ivy_contain": [71, 650], "is_native_arrai": [71, 94, 190, 580, 646, 650], "isin": [71, 94, 650], "test_el": [71, 94, 584, 650], "assume_uniqu": [71, 94, 584, 650], "invert": [71, 94, 245, 584, 648, 650, 653, 695], "scatter_flat": [71, 94, 650], "occupi": [71, 179, 182, 591, 592, 646, 650], "scatter_nd": [71, 94, 650, 867], "stable_divid": [71, 94, 650, 857], "denomin": [71, 78, 94, 101, 598, 607, 621, 650, 658, 756, 814, 857, 866, 871], "min_denomin": [71, 94, 598, 607, 621, 650, 866], "_min_denomin": [71, 607, 650], "stable_pow": [71, 94, 650], "min_bas": [71, 94, 597, 608, 620, 650, 814, 866], "stabl": [71, 82, 94, 105, 161, 342, 349, 350, 383, 386, 399, 530, 597, 598, 607, 608, 620, 621, 645, 650, 662, 772, 775, 797, 839, 845, 849, 861, 866, 869, 871], "00004": [71, 94, 608, 650], "00008": [71, 94, 608, 650], "00004000e": [71, 608], "56002560e": [71, 608], "60001200e": [71, 608], "09602048e": [71, 608], "supports_inplace_upd": [71, 94, 650], "to_fil": 71, "fid": 71, "sep": 71, "format_": 71, "recov": [71, 853, 861], "to_scalar": [71, 94, 650], "value_is_nan": [71, 94, 650], "_arraywithgradi": [72, 115], "adam_step": [72, 95, 651], "mw": [72, 95, 630, 631, 651], "vw": [72, 95, 630, 631, 651], "beta1": [72, 95, 551, 630, 631, 636, 650, 651, 815], "beta2": [72, 95, 551, 630, 631, 636, 650, 651, 815], "epsilon": [72, 75, 76, 95, 98, 99, 551, 630, 631, 636, 650, 651, 653, 654, 696, 699, 712, 713, 714, 807, 812, 814, 815, 847, 857, 860], "dc": [72, 95, 630, 631, 634, 636, 637, 638, 651], "dw": [72, 95, 630, 631, 634, 636, 637, 638, 651], "forget": [72, 95, 630, 631, 636, 651, 815, 832, 849], "dcdw": [72, 95, 630, 631, 634, 636, 637, 651], "adam_step_delta": [72, 95, 630, 651], "2020105": [72, 630, 651], "22187898": [72, 630, 651], "24144873": [72, 630, 651], "10000002": [72, 106, 310, 381, 630, 780], "00300002": [72, 630], "00800002": [72, 630], "adam_upd": [72, 95, 651], "mw_tm1": [72, 95, 631, 636, 651], "vw_tm1": [72, 95, 631, 636, 651], "ws_new": [72, 95, 631, 636, 637, 638, 651], "updated_weight": [72, 95, 631, 651], "92558753": [72, 631], "92558873": [72, 631, 651], "92558718": [72, 631, 651], "00000063e": [72, 95, 631, 651], "00000016e": [72, 95, 631, 651], "00000086e": [72, 95, 631, 651], "gradient_descent_upd": [72, 95, 651, 656, 734, 735, 736], "descent": [72, 95, 634, 651, 815, 883], "new_weight": [72, 95, 634, 636, 637, 651], "lamb_upd": [72, 95, 651], "max_trust_ratio": [72, 95, 636, 651, 815], "decay_lambda": [72, 95, 636, 637, 651, 815], "trust": [72, 95, 636, 651, 815], "ratio": [72, 95, 636, 651, 815], "decai": [72, 95, 636, 637, 651, 815], "lamb": [72, 95, 636, 651, 815], "784": [72, 636, 651], "lars_upd": [72, 95, 651], "lar": [72, 95, 637, 651, 815], "34077978": [72, 637, 651], "78025991": [72, 637, 651], "56051969": [72, 637, 651], "78026009": [72, 637, 651], "56051981": [72, 637, 651], "12103939": [72, 637, 651], "optimizer_upd": [72, 95, 651], "effective_grad": [72, 95, 638, 651], "3e": [72, 95, 638, 651], "preserve_typ": [72, 95, 640, 651], "_arraywithimag": [73, 115], "_arraywithlay": [74, 115], "conv1d": [74, 97, 652, 811, 823], "filter_format": [74, 97, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673], "channel_last": [74, 97, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673, 795], "x_dilat": [74, 97, 652, 665, 666, 668, 669, 670, 672], "d_out": [74, 97, 389, 406, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673], "channel_first": [74, 97, 652, 665, 666, 667, 668, 669, 670, 671, 672, 673], "wio": [74, 652, 665, 666, 667, 672], "conv1d_transpos": [74, 97, 652], "output_shap": [74, 97, 652, 665, 667, 669, 671, 673, 811], "iow": [74, 97, 652, 667], "woi": [74, 97, 652, 667], "fh": [74, 97, 652, 657, 665, 668, 669, 670, 671, 672, 673, 674, 749], "hwio": [74, 652, 665, 666, 668, 672], "conv2d_transpos": [74, 97, 652], "iohw": [74, 97, 652, 669], "hwoi": [74, 97, 652, 669], "conv3d": [74, 97, 652, 671, 811, 823], "conv3d_transpos": [74, 97, 652, 673], "iodhw": [74, 97, 652, 671, 673], "dhwoi": [74, 97, 652, 671, 673], "depthwise_conv2d": [74, 97, 652], "randint": [74, 79, 81, 97, 102, 659, 661, 674, 678, 768, 849, 879], "noise_shap": [74, 97, 652, 675], "42857146": [74, 652, 675], "85714293": [74, 652, 675], "28571415": [74, 97, 652, 675], "71428585": [74, 97, 652, 675], "14285755": [74, 97, 652, 675], "5714283": [74, 652, 675], "4285717": [74, 97, 652, 675], "8571434": [74, 97, 652, 675], "2857151": [74, 652, 675], "dropout1d": [74, 97, 389, 414], "dropout2d": [74, 97, 389], "dropout3d": [74, 97, 389], "outer_batch_shap": [74, 97, 652, 676], "inner_batch_shap": [74, 97, 652, 676], "lstm_updat": [74, 97, 652, 869], "init_h": [74, 97, 652, 678, 869], "init_c": [74, 97, 652, 678, 869], "recurrent_kernel": [74, 97, 652, 678, 869], "recurrent_bia": [74, 97, 652, 678, 869], "hidden": [74, 97, 652, 677, 678, 811, 846, 853, 869], "recurr": [74, 93, 97, 389, 435, 652, 678, 869, 883], "timestep": [74, 93, 97, 389, 435, 652, 677, 678, 679, 811, 869], "h_i": [74, 97, 678], "c_i": [74, 97, 678], "rc": [74, 97, 678], "multi_head_attent": [74, 97, 652, 860], "num_head": [74, 97, 652, 679, 811], "in_proj_weight": [74, 97, 652, 679], "q_proj_weight": [74, 97, 652, 679], "k_proj_weight": [74, 97, 652, 679], "v_proj_weight": [74, 97, 652, 679], "out_proj_weight": [74, 97, 652, 679], "in_proj_bia": [74, 97, 652, 679], "out_proj_bia": [74, 97, 652, 679], "is_caus": [74, 97, 652, 679, 682], "key_padding_mask": [74, 97, 652, 679], "bias_k": [74, 97, 652, 679], "bias_v": [74, 97, 652, 679], "static_k": [74, 97, 652, 679], "static_v": [74, 97, 652, 679], "add_zero_attn": [74, 97, 652, 679], "return_attention_weight": [74, 97, 652, 679], "average_attention_weight": [74, 97, 652, 679], "scaled_dot_product_attent": [74, 97, 652], "dropout_p": [74, 97, 652, 682], "num_queri": [74, 97, 652, 682], "feat_dim": [74, 97, 652, 682], "num_kei": [74, 97, 652, 682], "causal": [74, 97, 652, 679, 682], "attent": [74, 97, 652, 679, 682, 811, 840, 844], "29999995": [74, 310, 311, 321, 381, 389, 433, 652, 661, 682, 769], "19994521": [74, 652, 682], "09994531": [74, 652, 682], "30000019": [74, 392, 482, 652, 682], "_arraywithlinearalgebra": [75, 115], "choleski": [75, 98, 653, 860], "625": [75, 93, 362, 653, 683], "vif": [75, 98, 684], "det": [75, 98, 653, 701, 848], "axis1": [75, 77, 98, 100, 653, 655, 687, 707, 730], "axis2": [75, 98, 653, 687, 707], "eigh": [75, 98, 390, 443, 653, 688], "uplo": [75, 98, 653, 689, 690], "eigvalsh": [75, 98, 653], "array_lik": [75, 98, 389, 391, 392, 434, 467, 468, 472, 473, 504, 653, 691, 698, 826], "203": [75, 92, 243, 653, 658, 691, 756], "233": [75, 653, 691], "inv": [75, 98, 653], "transpose_a": [75, 98, 653, 693], "transpose_b": [75, 98, 653, 693], "adjoint_a": [75, 98, 653, 693], "adjoint_b": [75, 98, 653, 693], "matrix_norm": [75, 98, 653], "ord": [75, 98, 653, 694, 710], "fro": [75, 98, 391, 467, 653, 694], "nuc": [75, 98, 653, 694], "performingth": [75, 694], "matrix_pow": [75, 98, 653], "matrix_rank": [75, 98, 653], "hermitian": [75, 98, 390, 443, 444, 653, 688, 689, 690, 696, 703], "largest_singular_valu": [75, 98, 653, 696, 699], "defici": [75, 653, 696], "matrix_transpos": [75, 98, 653], "pinv": [75, 98, 653], "pseudo": [75, 98, 653, 699, 859], "99999988": [75, 98, 653, 699], "qr": [75, 98, 653, 862], "12309149": [75, 653, 700], "90453403": [75, 653, 700], "40824829": [75, 653, 700], "49236596": [75, 653, 700], "30151134": [75, 653, 700], "81649658": [75, 653, 700], "86164044": [75, 653, 700], "12403841e": [75, 653, 700], "60113630e": [75, 653, 700], "10782342e": [75, 653, 700], "04534034e": [75, 653, 700], "80906807e": [75, 653, 700], "88178420e": [75, 98, 653, 690, 700], "slogdet": [75, 98, 653], "logabsdet": [75, 98, 653, 701], "natur": [75, 98, 257, 275, 276, 277, 278, 297, 368, 386, 648, 653, 701, 844, 851, 853, 862], "098611": [75, 653, 701], "full_matric": [75, 98, 653, 703], "svf": [75, 703], "reconstructed_x": [75, 653, 703], "svdval": [75, 98, 653], "tensorsolv": [75, 98, 653], "vander": [75, 98, 653], "vandermond": [75, 98, 653, 708], "vecdot": [75, 98, 653], "vector_norm": [75, 98, 653], "manhattan": [75, 98, 653, 710], "euclidean": [75, 98, 110, 111, 653, 710], "7416575": [75, 98, 653, 710], "vector_to_skew_symmetric_matrix": [75, 98, 653], "_arraywithloss": [76, 115], "binary_cross_entropi": [76, 99, 654, 848], "pos_weight": [76, 99, 654, 712], "crossentropi": [76, 99, 654, 712], "26765382": [76, 654, 712], "34657359": [76, 654, 713], "sparse_cross_entropi": [76, 99, 654], "07438118": [76, 99, 714], "11889165": [76, 714], "_arraywithmanipul": [77, 115], "x_min": [77, 100, 655, 718, 869], "x_max": [77, 100, 655, 718, 869], "before_1": [77, 100, 392, 498, 655, 720, 733], "after_1": [77, 100, 392, 498, 655, 720, 733], "before_n": [77, 100, 392, 498, 655, 720, 733], "after_n": [77, 100, 392, 498, 655, 720, 733], "repetit": [77, 100, 655, 724, 731, 867], "flat": [77, 87, 100, 397, 528, 591, 650, 655, 724], "allowzero": [77, 100, 655, 725], "remain": [77, 80, 93, 100, 103, 237, 254, 255, 261, 269, 270, 287, 290, 296, 298, 389, 413, 414, 415, 434, 648, 655, 657, 660, 725, 743, 766, 826, 839, 840, 848, 851, 853, 857, 865, 867, 871], "roll": [77, 100, 655, 856], "shift": [77, 89, 100, 116, 150, 161, 246, 248, 342, 383, 645, 648, 655, 726, 839, 840, 850, 851, 856, 863], "restor": [77, 100, 655, 726, 855], "num_or_size_split": [77, 87, 100, 655, 727, 869], "with_remaind": [77, 87, 100, 655, 727], "squeezabl": [77, 655, 728], "swapax": [77, 100, 655], "axis0": [77, 100, 655, 730], "swap_ax": [77, 730], "swap": [77, 100, 655, 730, 820, 878], "tile": [77, 94, 100, 562, 655], "unpack": [77, 100, 655, 732, 862, 864], "zero_pad": [77, 100, 655], "_arraywithnorm": [78, 115], "layer_norm": [78, 101, 658], "normalized_idx": [78, 101, 658, 756], "new_std": [78, 101, 658, 756, 814], "learnabl": [78, 101, 652, 656, 658, 677, 736, 756, 811, 814], "0976": [78, 658, 756], "3452": [78, 658, 756], "2740": [78, 658, 756], "1047": [78, 658, 756], "5886": [78, 658, 756], "2732": [78, 658, 756], "7696": [78, 658, 756, 795], "7024": [78, 658, 756], "2518": [78, 658, 756], "826": [78, 658, 756], "178": [78, 658, 756], "981": [78, 658, 756], "831": [78, 658, 756], "421": [78, 658, 756], "_arraywithrandom": [79, 115], "multinomi": [79, 102, 396, 525, 659], "population_s": [79, 102, 659, 757], "num_sampl": [79, 102, 659, 757], "unnorm": [79, 102, 659, 757, 864], "popul": [79, 83, 87, 102, 106, 659, 663, 757, 783, 785, 849, 850, 860, 864, 869], "draw": [79, 102, 396, 523, 525, 527, 659, 757, 759, 760, 795, 796, 797, 798, 803, 810, 838, 843, 862, 864], "half": [79, 102, 139, 301, 645, 648, 659, 758, 760, 836, 854, 867], "235": [79, 759], "float16": [79, 90, 102, 148, 171, 173, 174, 179, 181, 360, 386, 645, 646, 653, 710, 759, 760, 795, 796, 836, 849, 854, 861, 864], "807": [79, 759], "_arraywithsearch": [80, 115], "select_last_index": [80, 103, 660, 763, 764], "occurr": [80, 392, 401, 513, 535, 660, 661, 763, 764, 768], "argmin": [80, 103, 660], "output_dtyp": [80, 103, 660, 764], "argwher": [80, 103, 660], "nonzero": [80, 103, 111, 235, 236, 237, 240, 243, 252, 254, 257, 259, 261, 287, 300, 305, 648, 660], "as_tupl": [80, 103, 660, 766], "fewer": [80, 103, 660, 766], "_arraywithset": [81, 115], "unique_al": [81, 104, 661], "by_valu": [81, 104, 661, 768], "inverse_indic": [81, 104, 392, 513, 661, 768, 770], "unique_count": [81, 104, 661], "unique_invers": [81, 104, 661], "unique_valu": [81, 104, 661], "admonit": [81, 771], "dask": [81, 661, 768, 769, 770, 771], "difficult": [81, 661, 768, 769, 770, 771, 840, 843, 849, 864, 871], "omit": [81, 297, 648, 661, 768, 769, 770, 771, 856, 860, 861], "x_i": [81, 83, 92, 111, 234, 235, 236, 239, 240, 241, 243, 245, 250, 251, 252, 257, 259, 260, 267, 268, 269, 270, 271, 275, 276, 277, 278, 282, 289, 294, 297, 298, 299, 300, 301, 302, 304, 305, 307, 349, 350, 352, 373, 386, 648, 661, 663, 768, 769, 770, 771, 779, 780, 781, 783, 784, 785, 810, 852], "x_j": [81, 661, 768, 769, 770, 771], "typeerror": [81, 104, 661, 771], "_arraywithsort": [82, 115], "stabil": [82, 105, 607, 608, 650, 662, 772, 775, 849, 859, 865, 867], "msort": [82, 105, 662], "searchsort": [82, 105, 662, 796], "sorter": [82, 105, 662, 774], "ret_dtyp": [82, 105, 662, 774], "_arraywithstatist": [83, 115], "cumprod": [83, 106, 663, 861, 869], "cumsum": [83, 106, 663, 849], "einsum": [83, 106, 663], "equat": [83, 93, 106, 328, 383, 390, 460, 653, 663, 702, 778, 795, 825, 848, 883], "operand": [83, 93, 97, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 268, 269, 270, 275, 276, 277, 278, 279, 287, 290, 292, 296, 297, 298, 299, 300, 301, 304, 305, 307, 349, 350, 373, 377, 386, 387, 389, 432, 648, 653, 663, 701, 707, 778, 779, 781, 782, 784, 825, 826, 844, 847, 852, 861], "contract": [83, 653, 663, 705, 778, 826], "seq": [83, 663, 778, 795], "ii": [83, 106, 663, 778, 840], "jk": [83, 663, 778, 826], "ik": [83, 663, 778, 826], "126": [83, 123, 293, 642, 648, 653, 663, 695, 778], "510": [83, 663, 778], "special": [83, 98, 110, 111, 115, 116, 234, 235, 236, 237, 239, 240, 241, 242, 243, 250, 251, 252, 254, 255, 257, 259, 260, 261, 268, 269, 270, 275, 276, 277, 278, 279, 282, 287, 290, 292, 296, 297, 298, 299, 300, 301, 304, 305, 307, 349, 350, 373, 386, 648, 653, 663, 701, 707, 779, 780, 781, 782, 783, 784, 785, 795, 796, 797, 798, 803, 810, 838, 841, 843, 844, 846, 848, 851, 852, 853, 856, 860, 862, 863, 864, 865, 867, 883, 884], "arithmet": [83, 106, 248, 254, 287, 648, 663, 780, 861], "propag": [83, 248, 349, 350, 386, 648, 663, 779, 780, 781, 783, 784, 785, 859], "overflow": [83, 106, 237, 254, 261, 648, 653, 663, 701, 780, 784, 837, 849], "04999995": [83, 780], "freedom": [83, 106, 663, 783, 785, 845], "constitut": [83, 106, 663, 783, 785, 857, 869, 884], "commonli": [83, 106, 663, 783, 785, 853, 857, 859], "81649661": [83, 663, 783], "6666665": [83, 785], "667": [83, 94, 254, 556, 607, 648, 650, 785], "_arraywithutil": [84, 115], "logic": [84, 107, 218, 254, 255, 281, 282, 283, 287, 290, 647, 648, 664, 786, 787, 838, 844, 848, 849, 850, 853, 857, 858, 859, 860, 861, 863, 864, 867, 878, 880], "AND": [84, 107, 244, 255, 281, 648, 664, 786], "OR": [84, 107, 247, 283, 290, 648, 664, 787, 839, 840, 859], "_wrap_funct": [85, 108, 846, 857, 858], "function_nam": [85, 108, 838, 865], "new_funct": [85, 108, 846], "add_ivy_array_instance_method": 85, "cl": [85, 108], "moduletyp": [85, 108, 878, 879, 881], "toi": [85, 108], "arrayexampl": 85, "hasattr": [85, 108], "_containerwithactiv": [86, 116], "dict_in": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "queue": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 601, 624, 650, 866], "queue_load_s": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "container_combine_method": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "list_join": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "queue_timeout": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 601, 624, 650, 866], "print_limit": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "key_length_limit": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "print_ind": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "print_line_spac": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "ivyh": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "default_key_color": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "keyword_color_dict": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "rebuild_child_contain": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "types_to_iteratively_nest": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "alphabetical_kei": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "dynamic_backend": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 115, 116, 812, 813, 845, 866], "build_cal": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116], "containerbas": [86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 847], "_static_gelu": 86, "key_chain": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 177, 179, 182, 185, 186, 187, 189, 191, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 331, 332, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 374, 375, 376, 377, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 485, 494, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 522, 524, 529, 530, 537, 538, 539, 540, 547, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "to_appli": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 177, 179, 182, 185, 186, 187, 189, 191, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 331, 332, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 374, 375, 376, 377, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 432, 433, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 485, 494, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 522, 524, 529, 530, 537, 538, 539, 540, 547, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 657, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "prune_unappli": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 177, 179, 182, 185, 186, 187, 189, 191, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 331, 332, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 374, 375, 376, 377, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 432, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 485, 494, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 522, 524, 529, 530, 537, 538, 539, 540, 547, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 657, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 750, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "map_sequ": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 141, 143, 145, 147, 148, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 166, 167, 168, 169, 177, 179, 182, 185, 186, 187, 189, 191, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 331, 332, 342, 343, 347, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 374, 375, 376, 377, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 425, 426, 427, 428, 432, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 485, 494, 496, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 522, 524, 529, 530, 537, 538, 539, 540, 547, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787], "prune": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 150, 155, 157, 163, 167, 169, 182, 186, 187, 194, 228, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 323, 324, 325, 327, 348, 349, 350, 351, 352, 354, 356, 364, 365, 371, 373, 375, 376, 377, 413, 414, 415, 433, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 482, 483, 505, 507, 508, 509, 511, 516, 518, 519, 520, 522, 524, 537, 538, 539, 540, 549, 552, 553, 555, 556, 560, 561, 562, 563, 564, 567, 568, 571, 573, 575, 576, 577, 579, 580, 583, 591, 592, 606, 607, 608, 610, 612, 614, 615, 628, 634, 640, 657, 666, 667, 668, 669, 675, 676, 682, 683, 684, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 707, 712, 713, 714, 718, 722, 725, 726, 727, 728, 729, 732, 733, 750, 751, 752, 753, 757, 758, 759, 760, 762, 765, 768, 769, 770, 771, 772, 776, 777, 780, 782, 783, 785, 786, 787, 793, 796, 848], "static_gelu": 86, "046": 86, "_static_hardswish": 86, "_static_leaky_relu": 86, "static_leaky_relu": 86, "38999999": [86, 93, 125, 309, 310, 381], "_static_log_softmax": 86, "static_log_softmax": 86, "371": [86, 126], "_static_mish": 86, "static_mish": 86, "30883577": [86, 127, 642], "28903052": [86, 127, 642], "10714479": [86, 127, 642], "_static_relu": 86, "static_relu": 86, "_static_sigmoid": 86, "static_sigmoid": 86, "2689414": [86, 129, 130, 642], "7310586": [86, 129, 130, 642], "88079703": [86, 129, 642], "62245935": [86, 129], "4750208": [86, 129], "_static_softmax": 86, "static_softmax": 86, "72844321": [86, 130], "19852395": [86, 130], "07303288": [86, 130], "_static_softplu": 86, "revert": [86, 131, 642], "static_softplu": 86, "53499615": 86, "42036411": 86, "948": [86, 131, 657, 737], "dictionari": [87, 104, 116, 226, 616, 632, 647, 650, 651, 771, 790, 792, 826, 844, 848, 849, 857, 861, 862, 871], "asynchron": [87, 116, 883], "wait": [87, 116, 601, 650, 838, 840, 848, 861], "arriv": [87, 116, 601, 650, 867], "cont_list_join": [87, 116], "whitespac": [87, 116], "indent": [87, 116], "newlin": [87, 116, 852], "termin": [87, 116, 839, 840, 847, 854, 855, 869], "constructor": [87, 116, 551, 650, 792, 808, 816, 849, 850, 852], "kept": [87, 116, 656, 734, 735, 840, 860, 865], "encount": [87, 116, 811, 836, 838, 849, 853, 854, 864], "node": [87, 94, 116, 553, 563, 610, 657, 747, 748, 810, 819, 823, 846, 847, 861, 878, 879, 884], "alphabet": [87, 116], "__setitem__": [87, 392, 507, 844, 847], "_cont_at_key_chains_input_as_dict": 87, "current_chain": 87, "ignore_key_error": 87, "_cont_at_key_chains_input_as_seq": 87, "_cont_call_static_method_with_flexible_arg": 87, "static_method": 87, "kw": 87, "self_idx": 87, "_cont_concat_unifi": 87, "_cont_get_dev": 87, "_cont_get_dtyp": 87, "_cont_get_shap": 87, "_cont_ivi": 87, "_cont_mean_unifi": 87, "_1": 87, "_cont_prune_key_chains_input_as_dict": 87, "return_cont": 87, "_cont_prune_key_chains_input_as_seq": 87, "_cont_slice_kei": 87, "key_slic": 87, "_cont_sum_unifi": 87, "_get_queue_item": 87, "cont_all_fals": 87, "assert_is_bool": 87, "cont_all_key_chain": 87, "include_empti": 87, "cont_all_tru": [87, 847], "cont_as_bool": 87, "cont_assert_contains_sub_contain": 87, "sub_cont": 87, "screen": [87, 838, 839], "cont_assert_contains_sub_structur": 87, "check_shap": [87, 817], "cont_assert_ident": 87, "check_typ": 87, "same_arrai": 87, "arrays_equ": 87, "cont_assert_identical_structur": 87, "assert_and_assign": 87, "congruent": 87, "cont_at_key_chain": 87, "ignore_non": 87, "cont_at_kei": 87, "substr": 87, "cont_combin": 87, "duplic": [87, 392, 504, 572, 650, 657, 739, 845, 852, 858, 859, 862], "configur": [87, 226, 647, 657, 750, 839, 840, 846, 848, 849, 854, 855], "container_rightmost": 87, "cont_common_key_chain": 87, "cont_config": 87, "cont_contains_sub_contain": 87, "cont_contains_sub_structur": 87, "cont_copi": 87, "cont_create_if_abs": 87, "noth": [87, 867], "cont_cutoff_at_depth": 87, "depth_cutoff": 87, "cont_cutoff_at_height": 87, "height_cutoff": 87, "cont_deep_copi": [87, 879], "cont_dev": 87, "cont_dev_str": 87, "cont_diff": 87, "diff_kei": 87, "detect_key_diff": 87, "detect_value_diff": 87, "detect_shape_diff": 87, "container0": 87, "cont_dtyp": 87, "cont_duplicate_array_keychain": 87, "cont_find_sub_contain": 87, "sub_cont_to_find": 87, "cont_find_sub_structur": 87, "sub_struc_to_find": 87, "cont_flatten_key_chain": 87, "above_height": 87, "below_depth": 87, "cont_format_key_chain": 87, "format_fn": 87, "cont_from_disk_as_hdf5": 87, "h5_obj_or_filepath": 87, "slice_obj": 87, "disk": [87, 813, 885], "h5py": 87, "filepath": [87, 664, 788, 789, 840, 843], "cont_from_disk_as_json": 87, "json_filepath": 87, "cont_from_disk_as_pickl": 87, "pickle_filepath": 87, "cont_from_flat_list": 87, "flat_list": 87, "hierarchi": [87, 830, 838, 863], "cont_handle_inplac": 87, "prime": [87, 849], "overwritten": [87, 844, 845], "cont_has_kei": 87, "query_kei": 87, "somewher": [87, 848], "cont_has_key_chain": 87, "cont_ident": 87, "cont_identical_array_shap": 87, "cont_identical_config": 87, "cont_identical_structur": 87, "cont_if_exist": 87, "cont_inplace_upd": 87, "cont_ivi": 87, "cont_key_chains_contain": 87, "sub_str": 87, "cont_list_stack": 87, "cont_load": 87, "cont_map": [87, 847], "func": [87, 110, 227, 378, 379, 380, 388, 554, 629, 632, 633, 635, 641, 647, 650, 651, 657, 750, 792, 838, 843, 844, 851, 853, 859], "cont_map_sub_cont": 87, "include_self": 87, "possibli": [87, 612, 650, 795, 864, 871], "cont_max_depth": 87, "cont_multi_map": 87, "map_nest": 87, "assert_ident": 87, "leftmost": [87, 657, 750], "cont_multi_map_in_funct": 87, "cont_num_arrai": 87, "cont_overwrite_at_key_chain": 87, "target_dict": 87, "return_dict": 87, "cont_prune_empti": 87, "keep_non": 87, "cont_prune_key_chain": 87, "key1": [87, 832], "key2": [87, 832], "key3": 87, "cont_prune_key_from_key_chain": 87, "certain": [87, 139, 151, 152, 391, 468, 645, 838, 839, 840, 843, 849, 857, 863, 864, 867, 871, 879, 881], "cont_prune_kei": 87, "cont_prune_keys_from_key_chain": 87, "cont_reduc": 87, "cont_remove_key_length_limit": 87, "cont_remove_print_limit": 87, "cont_reshape_lik": 87, "leading_shap": 87, "cont_restructur": 87, "keep_orig": 87, "old": [87, 839, 845, 860], "cont_restructure_key_chain": 87, "keychain_map": 87, "cont_sav": 87, "cont_set_at_key_chain": 87, "cont_set_at_kei": 87, "cont_shap": [87, 652, 670], "cont_show": 87, "cont_show_sub_contain": 87, "sub_cont_or_keychain": 87, "cont_size_ordered_arrai": 87, "keychain": [87, 93, 312, 351, 476, 477, 478, 508], "cont_slice_kei": 87, "all_depth": 87, "cont_slice_via_kei": 87, "slice_kei": 87, "cont_sort_by_kei": 87, "cont_structural_diff": 87, "cont_to_dict": 87, "cont_to_disk_as_hdf5": 87, "starting_index": 87, "max_batch_s": 87, "cont_to_disk_as_json": 87, "cont_to_disk_as_pickl": 87, "cont_to_flat_list": 87, "cont_to_iter": [87, 847], "leaf_keys_onli": 87, "cont_to_iterator_kei": 87, "cont_to_iterator_valu": 87, "cont_to_json": 87, "cont_to_nested_list": 87, "cont_to_raw": 87, "cont_trim_kei": 87, "cont_try_kc": 87, "cont_unifi": 87, "concatten": [87, 227, 647], "cont_unstack_cont": 87, "dim_siz": 87, "cont_update_config": 87, "cont_with_default_key_color": 87, "cont_with_entries_as_list": 87, "cont_with_ivy_backend": 87, "ivy_backend": [87, 862], "cont_with_key_length_limit": 87, "cont_with_print_ind": 87, "cont_with_print_limit": 87, "cont_with_print_line_spac": 87, "h5_file_s": 87, "shuffle_h5_fil": 87, "split_cont": 87, "_is_json": 87, "_repr": 87, "_containerwithconvers": [88, 116], "_static_to_ivi": 88, "_static_to_n": 88, "_containerwithcr": [89, 116], "_static_arang": 89, "_static_asarrai": 89, "_static_copy_arrai": 89, "_static_empti": 89, "_static_empty_lik": 89, "_static_ey": 89, "n_row": [89, 93, 146, 161, 342, 383, 390, 451, 645], "n_col": [89, 93, 146, 161, 342, 383, 645], "_static_from_dlpack": 89, "_static_ful": 89, "_static_full_lik": 89, "static_full_lik": 89, "2324": [89, 150, 645], "234": [89, 92, 150, 173, 256, 307, 645, 646, 648, 652, 676, 795], "_static_linspac": 89, "_static_logspac": 89, "static_logspac": 89, "15443469": [89, 152], "64158883": [89, 152], "_static_meshgrid": 89, "_static_native_arrai": 89, "_static_one_hot": 89, "static_one_hot": 89, "_static_on": 89, "_static_ones_lik": 89, "_static_tril": 89, "_static_triu": 89, "_static_zero": 89, "_static_zeros_lik": 89, "frombuff": [89, 645], "expos": [89, 148, 557, 645, 650, 832, 848, 869], "x00": [89, 148, 645], "xf0": [89, 148, 645], "x01": [89, 148, 645], "x02": [89, 148, 645], "x03": [89, 148, 645], "x04": [89, 148, 645], "x05": [89, 148], "5443469": [89, 152, 645], "static_frombuff": 89, "static_triu_indic": 89, "triu_indic": [89, 645], "_containerwithdatatyp": [90, 116], "_static_astyp": 90, "718": [90, 92, 166, 283, 646], "618": [90, 92, 166, 283, 646], "static_astyp": 90, "_static_broadcast_arrai": 90, "static_broadcast_arrai": 90, "_static_broadcast_to": 90, "static_broadcast_to": 90, "_static_can_cast": 90, "from_": [90, 169, 646], "static_can_cast": 90, "_static_default_complex_dtyp": 90, "complex_dtyp": [90, 172, 195, 646], "_static_default_float_dtyp": 90, "float_dtyp": [90, 174, 197, 646], "_static_dtyp": 90, "_static_finfo": 90, "inquir": [90, 179, 182], "static_finfo": 90, "55040e": [90, 179, 646], "7976931348623157e": [90, 179, 646], "308": [90, 179, 646, 795, 864], "_static_function_supported_dtyp": 90, "_static_function_unsupported_dtyp": 90, "_static_iinfo": 90, "1800": [90, 182, 646], "1084": 90, "40000": 90, "static_iinfo": 90, "2147483648": [90, 93, 182, 392, 507, 646], "2147483647": [90, 182, 646], "_static_is_bool_dtyp": 90, "dtype_in": [90, 164, 165, 178, 184, 185, 186, 187, 188, 189, 190, 191, 206, 646], "_static_is_complex_dtyp": 90, "is_complex_dtyp": [90, 646, 865], "roughli": [90, 839, 843], "static_is_complex_dtyp": 90, "_static_is_float_dtyp": 90, "static_is_float_dtyp": 90, "_static_is_int_dtyp": 90, "_static_is_uint_dtyp": 90, "_static_result_typ": 90, "static_result_typ": 90, "broadcats": [90, 167], "_containerwithdevic": [91, 116], "_static_dev": 91, "static_dev": 91, "_static_to_devic": 91, "static_to_devic": 91, "contaion": [91, 211], "_containerwithelementwis": [92, 116], "_static_ab": 92, "static_ab": 92, "_static_aco": 92, "static_aco": 92, "_static_acosh": 92, "static_acosh": 92, "_static_add": 92, "static_add": [92, 120], "_static_asin": 92, "static_asin": 92, "524": [92, 239, 648], "412": [92, 97, 239, 648, 657, 737], "_static_asinh": 92, "static_asinh": 92, "_static_atan": 92, "static_atan": 92, "_static_atan2": 92, "static_atan2": 92, "915": [92, 242, 648], "983": [92, 242, 648], "978": [92, 242, 648], "696": [92, 102, 242, 648, 759], "993": [92, 242, 648], "_static_atanh": 92, "static_atanh": 92, "_static_bitwise_and": 92, "static_bitwise_and": 92, "_static_bitwise_invert": 92, "static_bitwise_invert": 92, "_static_bitwise_left_shift": 92, "_static_bitwise_or": 92, "static_bitwise_or": 92, "_static_bitwise_right_shift": 92, "static_bitwise_right_shift": 92, "_static_bitwise_xor": 92, "static_bitwise_xor": 92, "_static_ceil": 92, "static_ceil": 92, "_static_co": 92, "static_co": 92, "_static_cosh": 92, "static_cosh": 92, "_static_deg2rad": 92, "static_deg2rad": 92, "0262": [92, 253, 293, 648], "873": [92, 253, 293, 648], "_static_divid": 92, "static_divid": 92, "_static_equ": 92, "static_equ": 92, "_static_erf": 92, "static_erf": 92, "27632612": [92, 256], "934008": [92, 256, 648], "99999928": [92, 256], "91903949": [92, 256], "_static_exp": 92, "static_exp": 92, "59814835": [92, 257, 648], "4131622": [92, 257], "_static_expm1": 92, "thefunct": [92, 256], "areal": 92, "static_expm1": 92, "71828175": [92, 257, 648], "38905621": [92, 257, 648], "59815216": 92, "_static_floor": 92, "static_floor": 92, "_static_floor_divid": 92, "static_floor_divid": 92, "_static_great": 92, "static_great": 92, "_static_greater_equ": 92, "static_greater_equ": 92, "_static_isfinit": 92, "999999999999": [92, 268, 648], "static_isfinit": 92, "_static_isinf": 92, "static_isinf": 92, "_static_isnan": 92, "static_isnan": 92, "_static_isr": 92, "0j": [92, 93, 156, 157, 235, 236, 237, 240, 243, 252, 257, 259, 271, 275, 277, 294, 298, 300, 301, 305, 352, 386, 645, 648, 653, 701], "23j": [92, 93], "9j": [92, 93], "static_isr": 92, "_static_lcm": 92, "1080": [92, 272], "1550": [92, 272], "130": [92, 272], "_static_less": 92, "static_less": 92, "_static_less_equ": 92, "static_less_equ": 92, "_static_log": 92, "static_log": 92, "_static_log10": 92, "static_log10": 92, "898": [92, 276, 648], "0414": [92, 276, 648], "_static_log1p": 92, "static_log1p": 92, "_static_log2": 92, "static_log2": 92, "_static_logaddexp": 92, "static_logaddexp": 92, "_static_logical_and": 92, "static_logical_and": 92, "_static_logical_not": 92, "static_logical_not": 92, "_static_logical_or": 92, "static_logical_or": 92, "_static_logical_xor": 92, "static_logical_xor": 92, "_static_maximum": 92, "static_maximum": 92, "_static_minimum": 92, "static_minimum": 92, "_static_multipli": 92, "static_multipli": 92, "_static_neg": 92, "static_neg": 92, "_static_not_equ": 92, "static_not_equ": 92, "_static_posit": 92, "static_posit": 92, "_static_pow": 92, "static_pow": 92, "_static_rad2deg": 92, "static_rad2deg": 92, "5160": 92, "10300": [92, 293, 648], "15500": 92, "20600": 92, "2860": [92, 293], "_static_reciproc": 92, "recirpoc": [92, 295], "static_reciproc": 92, "_static_remaind": 92, "static_remaind": 92, "_static_round": 92, "thevfunct": 92, "527": [92, 297, 648], "static_round": 92, "301": [92, 297, 648], "_static_sign": 92, "static_sign": 92, "_static_sin": 92, "static_sin": 92, "757": [92, 299, 648], "959": [92, 259, 299, 648], "279": [92, 299, 389, 411, 421, 555, 648, 650], "_static_sinh": 92, "static_sinh": 92, "835": [92, 300], "347": [92, 300], "721": [92, 300], "_static_sqrt": 92, "static_sqrt": 92, "_static_squar": 92, "static_squar": 92, "_static_subtract": 92, "static_subtract": 92, "_static_tan": 92, "static_tan": 92, "_static_tanh": 92, "static_tanh": 92, "995": [92, 305, 648], "9999": 92, "_static_trapz": 92, "static_trapz": 92, "_static_trunc": 92, "static_trunc": 92, "_static_trunc_divid": 92, "75j": [92, 142, 238, 267, 645], "01317055": [92, 238], "05634501": [92, 238], "115": [92, 238, 293, 648], "3461759": [92, 238], "524111": [92, 238], "644": [92, 239, 648], "305": [92, 97, 239, 648], "351": [92, 253, 293], "00613": [92, 253], "0154": [92, 253], "403": [92, 257], "428772": [92, 257], "649": [92, 259], "865": [92, 259], "metho": [92, 266, 278], "imaginari": [92, 115, 125, 128, 131, 142, 156, 157, 235, 236, 237, 252, 254, 255, 257, 259, 267, 287, 289, 290, 297, 300, 301, 305, 352, 386, 389, 390, 433, 444, 642, 645, 648, 660, 766, 851], "4j": [92, 267, 389, 433, 608, 648, 650], "7j": [92, 93, 271, 294, 352, 386, 648], "956": [92, 277], "08746284": [92, 280], "32192809": [92, 280], "nuner": [92, 287], "413": [92, 293], "335": [92, 93, 294, 352], "345j": [92, 93, 294, 352], "static_angl": 92, "static_exp2": 92, "static_fmin": 92, "static_gcd": 92, "static_imag": 92, "static_logaddexp2": 92, "static_nan_to_num": 92, "static_r": 92, "_containerwithactivationexperiment": [93, 116], "_static_celu": 93, "formlat": 93, "static_celu": 93, "_static_elu": 93, "static_elu": 93, "_static_hardshrink": 93, "hard": [93, 311, 832, 840, 883], "shrinkag": [93, 311, 321, 392, 506], "_static_hardsilu": 93, "20833333": [93, 312, 381], "29166666": [93, 312, 381], "66666669": [93, 116, 312, 381, 395, 522, 632, 651], "66666663": [93, 151, 312, 381, 645], "_static_hardtanh": 93, "3899": 93, "_static_scaled_tanh": 93, "931": 93, "71587813": 93, "88367474": 93, "00376701": [93, 318], "2285642": 93, "99999881": 93, "49999905": 93, "_static_silu": 93, "static_silu": 93, "27777028": [93, 320], "23947507": [93, 320], "0900332": [93, 320], "_static_softshrink": 93, "_static_tanhshrink": 93, "36634541": [93, 323], "02005103": [93, 323], "00262468": [93, 323], "_static_threshold": 93, "389999": [93, 313], "19722462": [93, 314], "84729779": [93, 314], "31326163": [93, 315], "46328258": [93, 315], "51301527": [93, 315], "79813886": [93, 315], "simplywrap": [93, 318], "54939651": [93, 318], "09999998": [93, 318, 630, 651], "09999999": [93, 318], "08336546": [93, 318], "0379949": [93, 318], "22856998": [93, 319], "42028043": [93, 319], "31868932": [93, 319], "static_logit": 93, "static_logsigmoid": 93, "34115386": 93, "64439666": 93, "24115384": 93, "55435526": 93, "07888974": 93, "00741899": 93, "26328245": 93, "00012302": 93, "static_prelu": 93, "static_relu6": 93, "static_selu": 93, "static_thresholded_relu": 93, "_containerwithconversionexperiment": [93, 116], "_containerwithcreationexperiment": [93, 116], "_static_trilu": 93, "blackman": [93, 326, 383], "00770143e": [93, 326], "49229857e": [93, 326], "hamming_window": [93, 383], "ham": [93, 328, 383], "4180": [93, 328], "8180": [93, 328], "hann_window": [93, 383], "hann": [93, 329, 383], "7500": [93, 329], "3455": [93, 329], "9045": [93, 329], "kaiser_bessel_derived_window": [93, 383], "suitabl": [93, 331, 332, 383, 662, 774, 797, 839, 840, 847, 865, 883], "spectral": [93, 331, 332, 383], "analysi": [93, 331, 332, 383, 883, 884], "kaiser": [93, 326, 331, 332, 383], "70710677": [93, 331, 520, 522], "18493208": [93, 331, 383], "9827513": [93, 331, 383], "kaiser_window": [93, 383], "static_kaiser_window": [93, 332], "2049": [93, 332], "8712": [93, 332], "0367": [93, 332, 383], "7753": [93, 332], "static_blackman_window": 93, "static_eye_lik": 93, "static_hamming_window": 93, "static_hann_window": 93, "static_hann": 93, "static_kaiser_bessel_derived_window": 93, "static_mel_weight_matrix": 93, "static_polyv": 93, "static_tril_indic": 93, "static_unsorted_segment_mean": 93, "static_unsorted_segment_min": 93, "static_unsorted_segment_sum": 93, "static_vorbis_window": 93, "vorbis_window": [93, 383], "vorbi": [93, 347, 383], "38268343": [93, 347, 653, 689], "92387953": [93, 347], "14943586": [93, 347, 383], "51644717": [93, 347], "85631905": [93, 347], "98877142": [93, 347], "tril_indic": [93, 383], "_containerwithdata_typeexperiment": [93, 116], "_containerwithdeviceexperiment": [93, 116], "_containerwithelementwiseexperiment": [93, 116], "0003": [93, 348, 653, 692, 795, 798], "0006": [93, 348, 376], "2345j": [93, 352], "5772": [93, 356], "9635": [93, 356], "4228": [93, 356], "9228": [93, 356], "57299206e": [93, 357, 358], "67773480e": [93, 357, 358], "20904985e": [93, 357, 358], "84270084": [93, 357, 358, 386], "99532223": [93, 357, 358], "99997795": [93, 357, 358], "mantissa": [93, 362, 386, 849], "frist": [93, 363, 386], "coord": [93, 363], "6055": [93, 364], "160": [93, 366], "10240": [93, 366], "60000038": [93, 367, 386, 653, 709], "0707": [93, 373, 386], "0579": [93, 373, 386], "static_allclos": 93, "static_amax": 93, "static_amin": 93, "static_binar": 93, "static_conj": 93, "static_copysign": 93, "static_count_nonzero": 93, "static_diff": 93, "static_digamma": 93, "57721537": 93, "96351004": 93, "static_erfc": 93, "15729921": 93, "00467773": [93, 357, 386], "static_erfinv": 93, "static_fix": 93, "static_float_pow": 93, "static_fmax": 93, "static_fmod": 93, "static_frexp": 93, "static_gradi": 93, "static_hypot": 93, "static_isclos": 93, "static_ldexp": 93, "static_lerp": 93, "90000057": [93, 367, 386], "70000076": [93, 367, 386], "55000019": [93, 367, 386], "05000019": [93, 367, 386], "static_modf": 93, "static_nansum": 93, "static_nextaft": 93, "static_signbit": 93, "static_sinc": 93, "636": 93, "090": 93, "070": 93, "057": 93, "static_sparsify_tensor": 93, "static_xlogi": 93, "static_zeta": 93, "0244": [93, 376], "_containerwithgeneralexperiment": [93, 116], "_static_reduc": 93, "static_reduc": 93, "_containerwithgradientsexperiment": [93, 116], "_containerwithimageexperiment": [93, 116], "_containerwithlayersexperiment": [93, 116], "_static_fft": 93, "static_fft": 93, "_static_sliding_window": 93, "673": [93, 411], "0507": [93, 411], "79711437": [93, 389, 411, 421], "94867325": [93, 389, 411, 421], "74089146": [93, 389, 411, 421], "25980937": [93, 389, 411, 421], "64958102": [93, 389, 411, 421], "2442648": [93, 389, 411, 421], "247306": [93, 423], "908323j": [93, 423], "494955": [93, 423], "90395j": [93, 423], "static_adaptive_avg_pool1d": 93, "static_adaptive_avg_pool2d": 93, "static_adaptive_max_pool2d": 93, "static_adaptive_max_pool3d": 93, "static_avg_pool1d": 93, "static_avg_pool2d": 93, "static_avg_pool3d": 93, "static_dct": 93, "253": [93, 300, 648], "515": [93, 659, 759], "467": 93, "static_dft": 93, "static_embed": 93, "static_idct": 93, "93732834": [93, 389, 411], "75048852": [93, 389, 411], "29723358": [93, 389, 421], "6950531": 93, "93914509": 93, "88008738": 93, "18951225": 93, "06697273": [93, 389, 421], "57439804": 93, "68861485": [93, 389, 421], "41308832": [93, 389, 421], "0700836": 93, "2449036": 93, "6711426": 93, "514": 93, "501709": 93, "4924011": 93, "static_ifft": 93, "static_ifftn": 93, "static_interpol": 93, "static_max_pool1d": 93, "static_max_pool2d": 93, "max_pool2dd": 93, "static_max_pool3d": 93, "static_max_unpool1d": 93, "static_rfft": 93, "static_rfftn": 93, "static_rnn": 93, "step_funct": [93, 389, 435], "initial_st": [93, 389, 435, 652, 677], "go_backward": [93, 389, 435], "unrol": [93, 389, 435, 652, 678, 869], "input_length": [93, 389, 435], "zero_output_for_mask": [93, 389, 435], "return_all_output": [93, 389, 435], "rnn": [93, 389, 883], "tempor": [93, 389, 435], "state_s": [93, 389, 435], "while_loop": [93, 389, 435, 644], "otput": [93, 389, 435], "funciton": [93, 389, 435], "static_stft": 93, "_containerwithlinearalgebraexperiment": [93, 116], "933034": [93, 390, 440], "eigenvealu": [93, 443, 688], "xx": [93, 443, 445, 688], "37228107": [93, 443, 688], "3722816": [93, 443, 688], "8245648": [93, 443, 688], "41597357": [93, 443, 688], "56576747": [93, 443, 688], "9093767": [93, 443, 688], "56155": [93, 444], "82842": [93, 444], "450": [93, 450], "static_adjoint": 93, "static_batched_out": 93, "static_cond": 93, "static_diagflat": 93, "static_dot": 93, "static_eig": 93, "static_eigh_tridiagon": 93, "static_eigv": 93, "static_higher_order_mo": 93, "static_initialize_tuck": 93, "static_kron": 93, "kroneck": [93, 390, 449, 450], "static_make_svd_non_neg": 93, "static_matrix_exp": 93, "static_mode_dot": 93, "static_multi_dot": 93, "static_multi_mode_dot": 93, "static_partial_tuck": 93, "static_svd_flip": 93, "static_tensor_train": 93, "static_truncated_svd": 93, "static_tt_matrix_to_tensor": 93, "tt_matrix": [93, 390, 464], "output_tensor": [93, 113, 390, 464], "static_tuck": 93, "_containerwithlossesexperiment": [93, 116], "_static_hinge_embedding_loss": 93, "_static_huber_loss": 93, "static_huber_loss": 93, "0575": [93, 467], "_static_kl_div": 93, "_static_l1_loss": 93, "static_l1_loss": 93, "_static_log_poisson_loss": 93, "static_log_poisson_loss": 93, "_static_poisson_nll_loss": 93, "06446016": 93, "55611551": 93, "30244565": [93, 471], "_static_smooth_l1_loss": 93, "static_smooth_l1_loss": 93, "_static_soft_margin_loss": 93, "3890561": [93, 470], "413159": [93, 470], "06429195": [93, 471], "43333333": [93, 472], "10666666": [93, 472], "_containerwithmanipulationexperiment": [93, 116], "_static_fill_diagon": 93, "_static_put_along_axi": 93, "_static_tak": 93, "69999981": [93, 321, 381, 392, 482, 507], "_static_trim_zero": 93, "_static_unflatten": 93, "_static_unique_consecut": 93, "ary1": [93, 392, 476, 477, 478], "ary2": [93, 392, 476, 477, 478], "broadcast_shap": [93, 119, 392, 795, 797], "static_concat_from_sequ": [93, 483], "30192195": [93, 495], "static_as_strid": 93, "static_atleast_1d": 93, "static_atleast_2d": 93, "static_atleast_3d": 93, "static_broadcast_shap": 93, "static_column_stack": 93, "static_dsplit": 93, "static_dstack": 93, "static_expand": 93, "static_flatten": 93, "static_fliplr": 93, "static_flipud": 93, "static_fold": 93, "static_heavisid": 93, "static_hsplit": 93, "static_hstack": 93, "static_i0": 93, "static_matric": 93, "static_moveaxi": 93, "static_pad": 93, "static_partial_fold": 93, "static_partial_tensor_to_vec": 93, "static_partial_unfold": 93, "static_partial_vec_to_tensor": 93, "static_rot90": 93, "static_soft_threshold": 93, "static_take_along_axi": 93, "static_top_k": 93, "static_unfold": 93, "static_vsplit": 93, "static_vstack": 93, "_containerwithnormsexperiment": [93, 116], "16903085": [93, 520, 522], "50709254": [93, 520, 522], "84515423": [93, 520, 522], "44183609": [93, 520, 522], "56807494": [93, 520, 522], "69431382": [93, 520, 522], "static_batch_norm": 93, "static_group_norm": 93, "static_instance_norm": 93, "static_l1_norm": 93, "static_l2_norm": 93, "static_lp_norm": 93, "12500000": 93, "37500000": 93, "62500000": 93, "27500000": 93, "35000000": 93, "42500000": 93, "0000000": 93, "5000000": 93, "2500000": 93, "_containerwithrandomexperiment": [93, 116], "43643127": [93, 525], "32325703": [93, 525], "24031169": [93, 525], "34251311": [93, 525], "31692529": [93, 525], "3405616": [93, 525], "5319725": [93, 525], "22458365": [93, 525], "24344385": [93, 525], "26588406": [93, 525], "61075421": [93, 525], "12336174": [93, 525], "51142915": [93, 525], "25041268": [93, 525], "23815817": [93, 525], "64042903": [93, 525], "25763214": [93, 525], "10193883": [93, 525], "31624692": [93, 525], "46567987": [93, 525], "21807321": [93, 525], "37677699": [93, 525], "39914594": [93, 525], "22407707": [93, 525], "static_bernoulli": 93, "static_beta": 93, "static_dirichlet": 93, "static_gamma": 93, "static_poisson": 93, "_containerwithsearchingexperiment": [93, 116], "static_unravel_index": 93, "_containerwithsetexperiment": [93, 116], "_containerwithsortingexperiment": [93, 116], "invert_permut": [93, 399], "static_invert_permut": 93, "static_lexsort": [93, 105], "_containerwithstatisticalexperiment": [93, 116], "_static_cummax": 93, "static_cummax": 93, "_static_cummin": 93, "static_cummin": 93, "_static_nanmin": 93, "static_nanmin": 93, "func_nam": [93, 540, 838, 851, 852, 857, 861], "static_bincount": 93, "static_corrcoef": 93, "static_cov": [93, 401, 537], "static_histogram": 93, "static_igamma": 93, "static_lgamma": 93, "static_median": 93, "static_nanmean": 93, "static_nanmedian": 93, "static_nanprod": 93, "static_quantil": 93, "_containerwithutilityexperiment": [93, 116], "static_optional_get_el": 93, "_containerwithgener": [94, 116], "_static_all_equ": 94, "static_all_equ": 94, "_static_array_equ": 94, "a0": [94, 392, 482], "static_array_equ": 94, "_static_assert_supports_inplac": 94, "_static_clip_matrix_norm": 94, "static_clip_matrix_norm": 94, "849": [94, 555, 650], "_static_clip_vector_norm": 94, "static_clip_vector_norm": 94, "_static_einops_rearrang": 94, "static_einops_rearrang": 94, "_static_einops_reduc": 94, "static_einops_reduc": 94, "29333329": [94, 561, 650], "53000069": [94, 561, 650], "39666676": [94, 561, 650], "20666695": [94, 561, 650], "_static_einops_repeat": 94, "static_einops_repeat": 94, "_static_exist": 94, "_static_fourier_encod": 94, "static_fourier_encod": 94, "classivi": [94, 661, 769], "89858720e": 94, "79717439e": 94, "_static_gath": 94, "static_gath": 94, "_static_gather_nd": 94, "static_gather_nd": 94, "_static_get_num_dim": 94, "static_get_num_dim": 94, "_static_has_nan": 94, "leafwis": 94, "static_has_nan": 94, "_static_inplace_decr": 94, "_static_inplace_incr": 94, "_static_inplace_upd": 94, "_static_is_arrai": 94, "static_is_arrai": 94, "_static_is_ivy_arrai": 94, "static_is_ivy_arrai": 94, "_static_is_native_arrai": 94, "static_is_native_arrai": 94, "_static_scatter_flat": 94, "_static_scatter_nd": 94, "static_scatter_nd": 94, "_static_s": 94, "static_s": 94, "_static_stable_divid": 94, "22222222": 94, "11111111": 94, "857": [94, 607, 650], "444": 94, "_static_stable_pow": 94, "00012": [94, 608, 650], "00016": [94, 95, 608, 636, 650, 651], "00001": [94, 608, 650, 795], "00032": [94, 608], "00256": [94, 608], "1679638": [94, 608], "395": [94, 608], "16777383": [94, 608], "_static_supports_inplace_upd": 94, "_static_to_list": 94, "static_to_list": 94, "_static_to_numpi": 94, "static_to_numpi": 94, "_static_to_scalar": 94, "static_to_scalar": 94, "_static_value_is_nan": 94, "452": 94, "static_value_is_nan": 94, "833": [94, 556], "items": [94, 115, 650], "static_isin": 94, "static_items": 94, "static_strid": 94, "425": [94, 628], "_containerwithgradi": [95, 116], "_static_stop_gradi": 95, "static_stop_gradi": 95, "976": [95, 305, 630, 648, 651], "49e": [95, 630, 651], "74e": [95, 630, 651], "95e": [95, 630, 651], "024": [95, 630, 651], "096": [95, 630, 651], "626": [95, 630, 651], "en": [95, 630, 631, 651, 848], "wikipedia": [95, 630, 631, 651], "wiki": [95, 630, 631, 651], "stochastic_gradient_desc": [95, 630, 631, 651], "01099": [95, 631], "01003": [95, 631, 651], "01015": [95, 631, 651], "99936122": [95, 631, 651], "99936116": [95, 631, 651], "99936128": [95, 631, 651], "99936104": [95, 631, 651], "w_new": [95, 634, 651], "708": [95, 636, 651], "445": [95, 636, 651], "6e": [95, 636, 651], "00036": [95, 636, 651], "00049": [95, 636, 651], "layerwis": [95, 637, 651], "01132035": [95, 637, 651], "22264051": [95, 637, 651], "2056601": [95, 637, 651], "1324538": [95, 637, 651], "56490755": [95, 637, 651], "96622658": [95, 637, 651], "90848625": [95, 637, 651], "93616199": [95, 637, 651], "77232409": [95, 637, 651], "_containerwithimag": [96, 116], "_containerwithlay": [97, 116], "_static_conv1d": 97, "static_conv1d": 97, "_static_conv1d_transpos": 97, "static_conv1d_transpos": 97, "112": [97, 653, 663, 667, 698, 778], "_static_conv2d": 97, "ey": [97, 645, 652, 668, 674, 867, 869], "static_conv2d": 97, "_static_conv2d_transpos": 97, "static_conv2d_transpos": 97, "_static_conv3d": 97, "fdfh": [97, 670], "static_conv3d": 97, "_static_conv3d_transpos": 97, "static_conv3d_transpos": 97, "_static_depthwise_conv2d": 97, "static_depthwise_conv2d": 97, "_static_dropout": 97, "static_dropout": 97, "_static_dropout1d": 97, "static_dropout1d": 97, "_static_dropout2d": 97, "_static_dropout3d": 97, "_static_linear": 97, "278": [97, 652, 675, 676], "static_linear": 97, "195": 97, "_static_lstm_upd": 97, "_static_multi_head_attent": 97, "_static_reduce_window": 97, "_static_scaled_dot_product_attent": 97, "static_scaled_dot_product_attent": 97, "39999962": [97, 652, 675, 676], "19999695": [97, 676], "11600018": [97, 676], "88399887": [97, 676], "306": [97, 652, 676], "19999981": [97, 311, 324, 381, 389, 433, 652, 675, 682], "59249449": [97, 652, 682], "68226194": [97, 652, 682], "19603825": [97, 652, 682], "9960382": [97, 652, 682], "26894283": [97, 652, 682], "40236187": [97, 652, 682], "39999437": [97, 652, 682], "59999037": [97, 652, 682], "35046196": [97, 652, 682], "54282808": [97, 652, 682], "39989519": [97, 652, 682], "5998764": [97, 652, 682], "_containerwithlinearalgebra": [98, 116], "_static_choleski": 98, "static_choleski": 98, "577": [98, 653, 683], "707": [98, 653, 683], "static_rol": [98, 100], "_static_cross": 98, "static_cross": 98, "_static_det": 98, "_static_diag": 98, "_static_diagon": 98, "static_diagon": 98, "_static_eigh": 98, "_static_eigvalsh": 98, "static_eigvalsh": 98, "51572949": [98, 653, 690], "17091519": [98, 653, 690], "3448143": [98, 653, 690], "35898387e": [98, 653, 690], "46410179e": [98, 653, 690], "_static_inn": 98, "static_inn": 98, "_static_inv": 98, "static_inv": 98, "_static_matmul": 98, "matul": 98, "static_matmul": 98, "_static_matrix_norm": 98, "deimens": 98, "static_matrix_norm": 98, "_static_matrix_pow": 98, "_static_matrix_rank": 98, "static_matrix_rank": 98, "_static_matrix_transpos": 98, "static_matrix_transpos": 98, "_static_out": 98, "n1": [98, 153, 645], "n2": [98, 153, 645], "static_out": [98, 698], "_static_pinv": 98, "static_pinv": 98, "0426": 98, "0964": 98, "0605": 98, "1368": 98, "_static_qr": 98, "static_qr": 98, "31622777": [98, 653, 700], "9486833": [98, 653, 700], "4472136": [98, 653, 700], "89442719": [98, 653, 700], "16227766": [98, 653, 700], "42718872": [98, 653, 700], "63245553": [98, 653, 700], "47213595": [98, 653, 700], "81377674": [98, 653, 700], "_static_slogdet": 98, "static_slogdet": 98, "6931472": 98, "0986123": 98, "_static_solv": 98, "_static_svd": 98, "static_svd": 98, "au": 98, "aS": 98, "avh": 98, "bvh": 98, "_static_svdv": 98, "_static_tensordot": 98, "_static_tensorsolv": 98, "_static_trac": 98, "static_trac": 98, "_static_vand": 98, "static_vand": 98, "343": [98, 297, 648, 708], "729": [98, 708], "_static_vecdot": 98, "_static_vector_norm": 98, "static_vector_norm": 98, "77359247": [98, 710], "_static_vector_to_skew_symmetric_matrix": 98, "09861231": [98, 653, 701], "static_general_inner_product": 98, "3475602": [98, 703], "93765765": [98, 703], "58776021": [98, 703], "10416126": [98, 703], "80644298": [98, 703], "87024701": [98, 703], "48127627": [98, 703], "79101127": [98, 703], "98288572": [98, 703], "68917423": [98, 703], "_containerwithloss": [99, 116], "_static_binary_cross_entropi": 99, "static_binary_cross_entropi": 99, "511": 99, "357": 99, "_static_cross_entropi": 99, "static_cross_entropi": 99, "20397282": 99, "83258148": 99, "60943794": [99, 653, 701], "_static_sparse_cross_entropi": 99, "static_sparse_cross_entropi": 99, "36354783": [99, 654, 712], "14733934": [99, 654, 712], "17027519": [99, 713], "53647931": [99, 713], "53647929": [99, 714], "1702752": [99, 714], "_containerwithmanipul": [100, 116], "_static_clip": 100, "static_clip": 100, "_static_concat": 100, "_static_constant_pad": 100, "static_constant_pad": 100, "_static_expand_dim": 100, "static_expand_dim": 100, "container_axi": [100, 655, 721], "_static_flip": 100, "static_flip": 100, "_static_permute_dim": 100, "static_permute_dim": 100, "_static_repeat": 100, "static_repeat": 100, "_static_reshap": 100, "static_reshap": 100, "_static_rol": 100, "positivclip": 100, "_static_split": 100, "static_split": 100, "_static_squeez": 100, "static_squeez": 100, "_static_stack": 100, "leavv": 100, "static_stack": 100, "_static_swapax": 100, "_static_til": 100, "static_til": 100, "_static_unstack": 100, "static_unstack": 100, "_static_zero_pad": 100, "repreat": [100, 724], "_containerwithnorm": [101, 116], "34198591": [101, 658, 756], "04274819": [101, 658, 756], "29923761": [101, 658, 756], "24053511": [101, 658, 756], "62221265": [101, 756], "20277636": [101, 756], "41943574": [101, 756], "83710337": [101, 756], "_containerwithrandom": [102, 116], "_static_multinomi": 102, "_static_randint": 102, "static_randint": 102, "_static_random_norm": 102, "static_random_norm": 102, "651": 102, "_static_random_uniform": 102, "static_random_uniform": 102, "481": 102, "0999": 102, "_static_shuffl": 102, "static_shuffl": 102, "431": [102, 759], "274": [102, 759], "_containerwithsearch": [103, 116], "_static_argmax": 103, "static_argmax": 103, "_static_argmin": 103, "static_argmin": 103, "_static_argwher": 103, "static_argwher": 103, "_static_nonzero": 103, "_static_wher": 103, "static_wher": 103, "_containerwithset": [104, 116], "_static_unique_al": 104, "static_unique_al": 104, "_static_unique_count": 104, "static_unique_count": 104, "_static_unique_invers": 104, "static_unique_invers": 104, "_static_unique_valu": 104, "_containerwithsort": [105, 116], "_static_argsort": 105, "static_argsort": 105, "_static_searchsort": 105, "_static_sort": 105, "static_sort": 105, "static_msort": 105, "_containerwithstatist": [106, 116], "_static_cumprod": 106, "static_cumprod": 106, "_static_cumsum": 106, "static_cumsum": 106, "_static_min": 106, "_static_prod": 106, "static_prod": 106, "11000001": [106, 782], "23100001": [106, 782], "30800003": [106, 663, 782], "_static_sum": 106, "_static_var": 106, "static_var": 106, "12666667": [106, 663, 785], "11555555": [106, 663, 785], "rtype": [106, 778, 825], "respectv": [106, 783], "81649649": [106, 783], "94280904": [106, 783], "509902": [106, 663, 783], "2472192": [106, 783], "44948983": [106, 783], "41421354": [106, 783], "6666667": [106, 785], "_containerwithutil": [107, 116], "_static_al": 107, "static_al": 107, "_static_ani": 107, "static_ani": 107, "add_ivy_container_instance_method": 108, "containerexampl": 108, "factorized_tensor": [109, 110, 111, 112, 113, 114, 117], "factorizedtensor": [109, 110, 111, 112, 113, 114], "matrix_or_tensor": 109, "to_unfold": [109, 110, 111, 112, 113, 114], "to_vec": [109, 110, 111, 112, 113, 114], "cp_tensor": [110, 111], "cptensor": [110, 111, 337, 383], "cp_copi": 110, "cp_flip_sign": 110, "s_i": [110, 111], "normalisation_weight": [110, 111], "normalised_factor": [110, 111], "cp_lstsq_grad": 110, "return_loss": 110, "nabla": 110, "mathcal": 110, "mathbf": 110, "factor_matric": 110, "cp_gradient": 110, "quantiti": 110, "cp_mode_dot": 110, "keep_dim": [110, 114], "cp_multi_mode_dot": 110, "cp_n_param": 110, "tensor_shap": [110, 112, 113, 114], "n_param": [110, 111, 112, 113, 114], "cp_norm": 110, "cp_to_tensor": 110, "khatria": 110, "rao": [110, 390, 449], "khatri": [110, 390, 449], "cp_normal": 110, "normalis": [110, 111], "u_1": [110, 111], "u_n": [110, 111], "v_1": [110, 111], "v_n": [110, 111], "v_k": [110, 111], "u_k": [110, 111], "absorb": [110, 111], "refold": [110, 392, 491, 503], "cp_to_unfold": 110, "ie": 110, "s_u_i": 110, "exploit": 110, "khatri_rao": [110, 390], "cp_to_vec": 110, "ravel": [110, 867], "unfolding_dot_khatri_rao": 110, "mttkrp": 110, "validate_cp_rank": 110, "percent": [110, 113], "validate_cp_tensor": 110, "parafac2_tensor": 111, "parafac2tensor": [111, 338, 383], "apply_parafac2_project": 111, "evolv": [111, 883], "b_i": 111, "ijk": [111, 826], "sum_r": 111, "a_": 111, "ir": [111, 884], "jr": 111, "kr": 111, "coupl": [111, 839, 844, 883], "factoris": 111, "i1": [111, 401, 540], "classmethod": [111, 118, 119, 800], "from_cptensor": 111, "parafac2_tensor_ok": 111, "parafac2_normalis": 111, "normalised_project": 111, "parafac2_to_slic": 111, "slice_idx": 111, "frontal": 111, "a_i": 111, "j_i": 111, "b_": 111, "reformul": 111, "p_i": 111, "orthogon": [111, 337, 341, 383, 390, 443, 459, 465, 653, 688, 689], "sum_": 111, "ijr": 111, "constraint": [111, 826, 848, 849, 859], "projection_matric": 111, "parafac2_to_tensor": 111, "construct": [111, 655, 731, 811, 814, 815, 816, 863, 869, 870, 883], "uneven": 111, "parafac2_to_unfold": 111, "parafac2_to_vec": 111, "validate_parafac2_tensor": 111, "cp": [111, 337, 383, 840], "tr_tensor": 112, "trtensor": [112, 339, 383], "tr_n_param": 112, "tr_to_tensor": 112, "tr_to_unfold": 112, "tr_to_vec": 112, "validate_tr_rank": 112, "validate_tr_tensor": 112, "tt_tensor": 113, "_tt_n_param": 113, "mp": [113, 340, 383], "index_upd": 113, "pad_tt_rank": 113, "factor_list": 113, "n_pad": 113, "pad_boundari": 113, "ring": 113, "bond": 113, "padded_factor_list": 113, "tt_to_tensor": 113, "assembl": [113, 390, 464], "tt_to_unfold": 113, "reassembl": 113, "tt_to_vec": 113, "validate_tt_rank": 113, "constant_rank": 113, "allow_overparametr": 113, "proport": [113, 810], "realiz": [113, 883], "validate_tt_tensor": 113, "tucker_tensor": 114, "tucker_copi": 114, "tucker_mode_dot": 114, "tucker_n_param": 114, "tucker_norm": 114, "tucker_to_tensor": 114, "skip_factor": 114, "transpose_factor": 114, "tucker_to_unfold": 114, "tucker_to_vec": 114, "validate_tucker_rank": 114, "fixed_mod": 114, "validate_tucker_tensor": 114, "_bisection_root_find": 114, "fun": [114, 380, 388, 629, 650, 657, 748, 848], "max_it": 114, "__abs__": [115, 116], "__add__": [115, 116, 844, 847, 851, 852, 856, 861, 862], "__eq__": [115, 116], "__ge__": [115, 116], "__gt__": [115, 116, 867], "__le__": [115, 116], "__lt__": [115, 116], "__ne__": [115, 116], "__pow__": [115, 116], "69678056": 115, "59876156": 115, "82660675": 115, "__radd__": [115, 116, 851, 852, 861], "__rrshift__": [115, 116], "__rshift__": [115, 116], "__rsub__": [115, 116], "__sub__": [115, 116, 844, 847, 851, 856], "__truediv__": [115, 116, 844, 847, 851], "__xor__": [115, 116], "referenc": [115, 853, 860], "resid": [115, 119, 655, 721, 861, 869], "mt": 115, "eq": 116, "ge": 116, "le": 116, "ne": 116, "75979435": 116, "52153397": 116, "13532257": 116, "rshift": 116, "truediv": 116, "nested_arrai": [118, 119, 120, 846], "nestedarrai": 118, "nested_rank": [118, 119, 120], "inner_shap": [118, 119, 120], "nestedarraybas": [118, 119, 120], "from_row_length": 118, "row_length": 118, "from_row_split": 118, "row_split": 118, "ragged_map": 119, "ragged_multi_map": 119, "ragged_arrai": 119, "ragged_multi_map_in_funct": 119, "replace_ivy_arrai": 119, "unbind": 119, "nestedarrayelementwis": 120, "strictli": [125, 128, 131, 261, 642, 648, 856, 860], "24000001": [125, 642], "703": [126, 642], "683": [126, 642], "408": [126, 642], "313": [126, 642], "437": [126, 642], "40337825": [127, 642], "56114835": [127, 642], "20788449": [127, 642], "0768": [130, 642], "\u03b2": [131, 642], "body_fn": [135, 136, 138, 644], "bodi": [135, 138, 644, 843, 864], "lst": [135, 644], "orelse_fn": [136, 644], "body1": [137, 644], "body2": [137, 644], "test_fn": [138, 644, 793, 832, 878, 881], "repeatedli": [138, 644, 657, 746, 848, 864], "ml_framework": [139, 645], "distanc": [139, 645], "adjac": [139, 645], "nestedsequ": [140, 141, 645], "typevar": [140, 141, 645], "supportsbufferprotocol": [140, 141, 645], "static_copy_arrai": [143, 645], "intdtyp": [146, 157, 163, 175, 186, 191, 198, 204, 645, 646], "pycapsul": [147, 158, 645], "interchang": [147, 158, 645, 655, 730], "plu": [148, 645], "x00b": [148, 645], "x00d": [148, 645], "x00e": [148, 645], "41588834": [152, 645], "7827941": [152, 645], "6227766": [152, 645], "23413252": [152, 645], "n3": [153, 645], "xv": [153, 645], "yv": [153, 645], "x_nativ": [154, 645, 860], "y_nativ": [154, 645], "z_nativ": [154, 645], "d_type": [156, 645], "col": [161, 342, 383, 645], "primari": [161, 180, 181, 213, 214, 342, 383, 399, 530, 565, 566, 645, 646, 647, 650, 796, 798, 838, 842, 845, 849, 858, 860, 861, 863, 864, 867, 871, 873], "upward": [161, 342, 383, 645], "downward": [161, 342, 383, 645], "2xn": [161, 342, 383, 645], "subarrai": [161, 342, 383, 645], "closest": [171, 250, 260, 261, 297, 307, 646, 648, 864, 867], "xtype": [171, 646], "ytype": [171, 646], "native_uint16": [171, 646], "complexdtyp": [172, 186, 195, 646], "set_default_complex_dtyp": [172, 201, 646], "4294": [172, 174, 646], "967346": [172, 174, 646], "set_default_dtyp": [173, 202, 646, 849, 857], "floatdtyp": [174, 197, 646], "set_default_float_dtyp": [174, 183, 195, 203, 646, 849], "int_dtyp": [175, 198, 646], "set_default_int_dtyp": [175, 183, 204, 646, 849], "4294967346": [175, 176, 646], "uint_dtyp": [176, 199, 646], "uint": [176, 191, 199, 205, 646, 849, 862], "uintdtyp": [176, 191, 199, 205, 646], "set_default_uint_dtyp": [176, 183, 205, 646], "native_bool": [178, 646], "ieee": [179, 237, 254, 259, 277, 287, 296, 301, 304, 643, 646, 648], "754": [179, 237, 254, 259, 277, 287, 296, 301, 304, 643, 646, 648], "smallest_norm": [179, 646], "bfloat16": [180, 646, 795, 796, 849, 861, 864, 865], "unsupport": [181, 214, 566, 646, 647, 650, 790, 793, 836, 839, 854, 861], "encapsul": [182, 646, 848], "314": [182, 294, 352, 386, 646, 648], "9223372036854775808": [182, 646], "9223372036854775807": [182, 646], "65535": [182, 646], "4294967295": [182, 646], "native_uint8": [184, 646], "hashabl": [188, 646], "type1": [192, 646], "type2": [192, 646], "array_api_promot": [192, 193, 646, 795, 796], "unexpect": [193, 261, 646, 648, 849], "default_complex_dtyp": [195, 646], "default_dtype_stack": [196, 202, 646], "unset_default_dtyp": [196, 646], "native_uint64": [196, 646], "default_float_dtyp": [197, 646, 849], "default_int_dtyp": [198, 204, 646, 849], "default_uint_dtyp": [199, 205, 646], "ret1": [200, 646], "ret2": [200, 646], "default_complex_dtype_stack": [201, 646], "default_float_dtype_stack": [203, 646], "native_float16": [206, 646], "unmodifi": [208, 647, 845, 849], "aliv": [215, 220, 222, 569, 589, 590, 647, 650, 850], "139740789224448": [215, 647], "process_specif": [221, 233, 647], "percentag": [221, 647], "ram": [221, 229, 233, 647], "alon": [221, 233, 647, 855, 864], "036902561555": [221, 647], "7024003467681645": [221, 647], "as_native_dev": [221, 647], "7095597456708771": [221, 647], "attr_onli": [222, 647], "soft_device_mod": [224, 232, 647], "chunk": [225, 226, 227, 647], "split_factor": [225, 647, 853], "max_chunk_s": [227, 647], "chunk_siz": [227, 647], "input_ax": [227, 647], "output_ax": [227, 647], "fed": [227, 647], "fist": [227, 647], "gb": [229, 233, 647, 839, 854], "66700032": [229, 647], "589934592": [229, 647], "219563008": [233, 647], "902400346": [233, 647], "525205504": [233, 647], "na": [234, 648, 864], "noqa": [234, 301, 648, 811, 820, 862], "princip": [235, 239, 241, 373, 386, 648], "codomain": [235, 236, 239, 240, 241, 242, 251, 252, 257, 259, 275, 276, 278, 299, 300, 301, 304, 305, 373, 386, 648, 852], "\u03c0": [235, 239, 241, 242, 643, 648], "3\u03c0": [235, 242, 648], "unspecifi": [235, 236, 240, 243, 252, 257, 259, 261, 296, 300, 301, 305, 390, 443, 648, 653, 655, 688, 689, 729, 860], "\u03c0j": [236, 240, 243, 275, 277, 648], "3\u03c0j": [236, 275, 277, 648], "x1_i": [237, 242, 244, 246, 247, 248, 249, 254, 255, 261, 265, 266, 273, 274, 279, 281, 283, 284, 287, 290, 292, 296, 303, 648, 843], "2019": [237, 254, 259, 277, 287, 648, 883], "commut": [237, 648], "dj": [237, 254, 287, 648], "z1": [237, 648], "z2": [237, 648], "yj": [238, 648], "nanj": [240, 648], "809": [240, 648], "569": [240, 648], "733": [240, 648], "notat": [242, 648, 663, 778, 848], "denot": [242, 648, 813], "quadrant": [242, 648], "rai": [242, 648], "bitwis": [244, 247, 249, 284, 648], "170": [248, 648], "243": [248, 648], "xor": [249, 284, 648], "654": [251, 648], "ci": [252, 257, 259, 300, 648, 843, 849, 855, 862, 864, 871], "368": [252, 648], "670": [252, 648], "202": [252, 648, 843], "548": [252, 648], "1490": [252, 648], "57079633": [253, 648], "14159265": [253, 648], "71238898": [253, 648], "28318531": [253, 648], "02617994": [253, 648], "87266463": [253, 648], "01919862": [253, 648], "03839725": [253, 648], "05759586": [253, 648], "07679449": [253, 648], "09599311": [253, 648], "11519173": [253, 648], "35081118": [253, 648], "88139129": [253, 648], "underflow": [254, 261, 648, 653, 701, 849], "textbook": [254, 287, 648], "frac": [254, 276, 278, 298, 300, 304, 389, 395, 417, 418, 422, 423, 516, 518, 648], "ac": [254, 287, 648, 825, 826], "bd": [254, 287, 648], "bc": [254, 287, 648, 825, 826], "versu": [254, 287, 648], "riemann": [254, 287, 648], "sphere": [254, 287, 648], "c99": [254, 287, 648], "infinit": [254, 287, 301, 648], "unlik": [254, 287, 648, 843, 848, 851], "698": [254, 648], "truth": [255, 265, 266, 273, 274, 290, 391, 467, 648, 790, 792, 803, 836, 854, 861, 864], "32862675": [256, 648], "67780113": [256, 648], "11246294": [256, 648], "42839241": [256, 648], "52050018": [256, 648], "16799599": [256, 648], "30787992": [256, 648], "43796915": [256, 648], "98667163": [256, 648], "79690808": [256, 648], "88020504": [256, 648], "91031402": [256, 648], "95228523": [256, 648], "96610528": [256, 648], "cut": [257, 259, 299, 300, 301, 304, 648, 875], "08553692": [257, 648], "567": [257, 648], "00344786": [257, 648], "76297021": [257, 648], "197948": [257, 648], "53253174": [257, 648], "fdlibm": [259, 277, 648], "compliant": [259, 277, 282, 283, 349, 350, 386, 648, 663, 779, 780, 781, 783], "potenti": [259, 277, 648, 832, 838, 839, 848, 849, 861, 868], "632": [259, 648], "20e": [259, 648], "72e": [259, 648, 795], "greatest": [260, 261, 264, 648], "pep": [261, 648, 856], "disambigu": [261, 648, 859], "former": [261, 648, 839, 849, 852, 861], "latter": [261, 648, 839, 843, 845, 849, 852, 861], "overload": [261, 648, 864], "led": [261, 648, 843], "subtl": [261, 648, 849], "bug": [261, 648, 832, 838, 840, 846, 854, 855, 861, 864, 872], "ambigu": [261, 648], "semant": [261, 296, 392, 507, 648, 849, 869, 884], "ill": [261, 648, 797], "surpris": [261, 648, 871], "arrau": [267, 648], "log_": [276, 278, 648], "742": [277, 648], "negat": [289, 352, 386, 648], "52095687": [292, 648], "92457771": [292, 648], "49372482": [292, 648], "22738838": [292, 648], "5877228": [292, 648], "189": [293, 648, 657, 737], "252": [293, 648], "2890": [293, 648], "344": [293, 648], "355j": [294, 352, 386, 648], "55j": [294, 352, 386, 648], "primarili": [296, 648, 838, 847, 883, 885], "counterpart": [297, 648, 847, 858], "deliber": [297, 648, 867], "imprecis": [297, 648], "5654": [297, 648], "034": [297, 648], "433": [297, 633, 635, 648, 651], "signum": [298, 648], "textrm": [298, 648], "932": [299, 648], "746": [299, 648], "657": [299, 648], "indistinguish": [301, 648], "infti": [301, 648], "32455532": [301, 648], "89897949": [301, 648], "169": [301, 648], "analyt": [304, 648, 883], "pole": [304, 648], "546": [304, 648, 652, 676], "916": [304, 648], "996": [304, 648], "histor": [305, 648], "stem": [305, 648, 860], "older": [305, 648], "advis": [305, 648, 861], "462": [305, 648], "604": [305, 648], "997": [305, 648], "0375": [307, 648], "032": [307, 648], "57258511": [310, 381], "69999999": [310, 381, 641, 651], "90928203": [310, 381], "98772264": [310, 381], "99591321": [310, 381], "99863964": [310, 381], "69880581": [310, 381], "18126924": [310, 381], "79999995": [311, 321, 324, 381], "70000005": [311, 324, 381], "1241": [312, 381], "4897": [312, 381], "4090": [312, 381], "31008321": [312, 381], "1147176": [312, 381], "40899992": [312, 381], "20141329": [315, 381], "40318608": [315, 381], "48683619": [315, 381], "46328247": [315, 381], "59813893": [315, 381], "43748799": [315, 381], "parametr": [316, 381, 843, 864, 883], "71589994": [318, 322, 381], "14324772": [318, 322, 381], "70648694": [318, 322, 381], "54488957": [318, 322, 381], "10740992": [318, 322, 381], "19514863": [318, 322, 381], "6705687": [319, 381], "52016652": [319, 381], "40560818": [319, 381], "45630932": [319, 381], "2689": [320, 381], "7310": [320, 381], "7615": [320, 381], "2784": [320, 381], "7168": [320, 381], "8708": [320, 381], "4374": [320, 381], "1379": [320, 381], "0089": [320, 381], "59999991": [321, 381], "03597236": [323, 381], "43827677": [323, 381], "80100036": [323, 381], "12954807": [323, 381], "76459098": [323, 381], "20044947": [323, 381], "60000372": [323, 381], "taper": [326, 329, 383], "summat": [326, 383, 663, 778, 825, 826], "leakag": [326, 383], "wors": [326, 383], "y1": [327, 383], "0800": [328, 383], "3979": [328, 383], "9121": [328, 383], "5400": [328, 383], "han": [329, 383], "ith": [330, 383], "00726415": [331, 383], "9999736": [331, 383], "2773e": [332, 383], "0172e": [332, 383], "9294e": [332, 383], "4149": [332, 383], "9138": [332, 383], "5529": [332, 383], "multidimension": [334, 335, 383, 883], "normalise_factor": [337, 338, 383], "parafac2": [338, 383], "tr": [339, 383], "38268346": [347, 383], "38268352": [347, 383], "8563191": [347, 383], "14943568": [347, 383], "paddlepaddl": [349, 350, 386, 839], "cn": [349, 350, 386], "zh": [349, 350, 386], "amax_cn": [349, 386], "sentinel": [349, 350, 386, 663, 779, 781], "amin_cn": [350, 386], "4769": [358, 386], "position": [360, 386], "triangl": [364, 386], "999999e": [365, 386], "65999985": [367, 386], "52000046": [367, 386], "1500001": [367, 386, 561, 650], "11259177": [368, 386], "3574118": [368, 386], "20097363": [368, 386], "suppli": [372, 386, 392, 498, 825, 844, 846, 864], "217234": [373, 386], "hurwitz": [376, 386], "custom_grad_func": [378, 388], "bind": [378, 388, 838, 859, 883, 885], "upstream": [378, 388, 839, 840, 843, 854, 859], "primal": [379, 380, 388], "jacobian": [379, 380, 388, 635, 651, 871, 883], "cotang": [380, 388], "stanh": 381, "ndenumer": 383, "ndindex": 383, "random_cp": 383, "random_parafac2": 383, "random_tr": 383, "random_tt": 383, "random_tuck": 383, "bind_custom_gradient_funct": [388, 859], "jvp": 388, "vjp": 388, "h_out": [389, 406, 652, 677], "w_out": [389, 406], "area_interpol": 389, "01823380e": [389, 411, 421], "15385818e": [389, 411, 421], "36371466e": [389, 411, 421], "38763905e": [389, 411, 421], "60722279e": [389, 411, 421], "80319249e": [389, 411, 421], "05617893e": [389, 411, 421], "21500000e": [389, 411, 421], "24000015e": [389, 411, 421], "90734863e": [389, 411, 421], "10000420e": [389, 411, 421], "15899994e": [389, 411, 421], "24000053e": [389, 411, 421], "81469727e": [389, 411, 421], "09999847e": [389, 411, 421], "4135742": [389, 411, 421], "6779785": [389, 411, 421], "3770599": [389, 411, 421], "8719864": [389, 411, 421], "72109985": [389, 411, 421], "52869415": [389, 411, 421], "79182434": [389, 411, 421], "72489166": [389, 411, 421], "container_n": [389, 411, 421], "container_typ": [389, 411, 421, 650], "container_norm": [389, 411, 421], "1580677": [389, 411], "89422607": [389, 411], "86190414": [389, 411], "00041008": [389, 411], "75149155": [389, 411], "97056389": [389, 411], "87819386": [389, 411], "89381361": [389, 411], "50000000e": [389, 411, 421, 795], "22044605e": [389, 411, 421], "ed": [389, 413, 414, 415], "rest": [389, 392, 413, 414, 415, 484, 839, 846, 848, 864, 870], "5d": [389, 415, 811], "emb": [389, 416], "51285338": [389, 416], "87183261": [389, 416], "2308116": [389, 416], "02733949e": [389, 417], "00j": [389, 417], "49660576e": [389, 417], "68178638e": [389, 417], "01j": [389, 417, 422], "98912367e": [389, 417], "21802426e": [389, 417, 422], "04549134e": [389, 417, 422], "82842712e": [389, 417, 422], "86902654e": [389, 417, 422], "25501143e": [389, 417, 422], "32978028e": [389, 417, 422], "52068201e": [389, 417, 422], "71158374e": [389, 417, 422], "generate_einsum_equ": 389, "get_interpolate_kernel": 389, "27279224e": [389, 421], "44232273e": [389, 421], "70464332e": [389, 421], "73454881e": [389, 421], "00902849e": [389, 421], "10039906e": [389, 421], "07022366e": [389, 421], "69506073": [389, 421], "93914604": [389, 421], "88008881": [389, 421], "18951607": [389, 421], "57439613": [389, 421], "15318303e": [389, 422], "15148591e": [389, 422], "19j": [389, 422], "25000000e": [389, 422], "35378602e": [389, 422], "02j": [389, 422], "65404249e": [389, 422], "17611649e": [389, 422], "24320230e": [389, 422], "79344813e": [389, 422], "22374531e": [389, 422], "45929364e": [389, 422], "14208718e": [389, 422], "07177031e": [389, 422], "indexerror": [389, 423, 434, 655, 721, 827, 853], "interp": [389, 867], "xp": [389, 424, 843], "fp": [389, 424], "nd": [389, 425], "tf_bicub": [389, 425, 867], "nearest_interpol": 389, "window_shap": [389, 431], "pool_typ": [389, 431], "irfft": [389, 433], "silent": [389, 433], "discard": [389, 433, 848], "1400001": [389, 433], "3999999": [389, 433], "3999996": [389, 433], "99038106j": [389, 434], "33012702": [389, 434], "23205081j": [389, 434], "33012702j": [389, 434], "superdiagon": [390, 441, 653, 686], "subdiagon": [390, 441, 653, 686], "eigendecomposit": [390, 443, 653, 688, 689], "qlq\u1d40": [390, 443, 653, 688, 689], "tridiagon": [390, 444], "38196602": [390, 444], "61803389": [390, 444], "35048741": [390, 444], "56710052": [390, 444], "06693714": [390, 444], "74234426": [390, 444], "56155282": [390, 444], "56155276": [390, 444], "82842714": [390, 444], "82842731": [390, 444, 653, 689], "necessarili": [390, 445, 844, 847], "generalis": [390, 446], "skip_matrix": [390, 449, 451], "khatri_rao_product": [390, 449], "kronecker_product": [390, 451], "n_column": [390, 451], "lu_factor": 390, "pivot": [390, 452], "lu": [390, 452, 453], "lu_solv": 390, "nnmf": [390, 454], "hoi": [390, 459, 465], "solve_triangular": 390, "unit_diagon": [390, 460], "solut": [390, 460, 653, 702, 795, 832, 836, 838, 839, 840, 847, 849, 854, 862, 864, 867, 885], "determinist": [390, 461, 864], "borrow": [390, 461, 842], "extmath": [390, 461], "ivan": [390, 462], "oseledet": [390, 462], "scientif": [390, 462, 883], "2295": [390, 462], "2317": [390, 462], "2011": [390, 462], "convention": [391, 468], "explicit": [391, 392, 468, 507, 839, 847, 849, 859, 860, 861, 869, 871, 883], "555969": [391, 468], "223876": [391, 468], "111938": [391, 468], "42649534": [391, 468], "68651628": [391, 468], "51119184": [391, 468], "59967244": [391, 468], "mae": [391, 469], "666": [391, 469, 652, 653, 676, 694], "91097307": [391, 471], "3467": [391, 472], "0133": [391, 472], "0250": [391, 472], "0056": [391, 472], "0025": [391, 472], "0675": [391, 472], "6987": [391, 473], "1606": [391, 473], "4032": [391, 473], "6931": [391, 473], "whilst": [392, 476, 477, 478, 873, 883], "ary3": [392, 478], "check_scalar": 392, "force_integ": [392, 480], "force_posit": [392, 480], "mod": [392, 481, 843], "tall": [392, 487], "horizot": [392, 494], "shortcut": [392, 498, 839], "linear_ramp": [392, 498], "reflect": [392, 498, 840, 844, 860, 864], "ramp": [392, 498], "mirror": [392, 498, 835, 838, 883], "padding_func": [392, 498], "iaxis_pad_width": [392, 498], "iaxi": [392, 498], "unalt": [392, 498], "pad_sequ": 392, "batch_first": [392, 499, 652, 677, 679], "seq_len": [392, 499, 652, 677], "feature_s": [392, 499], "max_len": [392, 499], "shorter": [392, 499], "seq1": [392, 499], "seq2": [392, 499], "put": [392, 504, 838, 864, 871], "mul": [392, 504, 832, 860], "conceptu": [392, 507, 884], "concern": [392, 507, 840, 842, 847, 849, 851, 860, 867, 868], "regard": [392, 507, 837, 847, 861, 862, 867], "mutat": [392, 507], "elimin": [392, 513, 839], "consecut": [392, 513], "batch_mean": [395, 516, 518], "batch_var": [395, 516, 518], "running_vari": [395, 516, 518], "local_response_norm": 395, "neighbour": [395, 521], "42857143": [395, 522], "5714286": [395, 522], "multivari": [396, 525], "bayesian": [396, 525], "supposedli": [399, 529], "indirect": [399, 530], "secondari": [399, 530], "is_ivy_sparse_arrai": 400, "is_native_sparse_arrai": 400, "native_sparse_arrai": 400, "coo_indic": [400, 533], "crow_indic": [400, 533], "col_indic": [400, 533], "ccol_indic": [400, 533], "row_indic": [400, 533], "dense_shap": [400, 533], "native_sparse_array_to_indices_values_and_shap": 400, "nativesparsearrai": 400, "sparsearrai": 400, "sparse_arrai": 400, "linalg": [401, 537, 653, 701, 702, 838, 860, 862], "aw": [401, 537], "48447205": [401, 537], "c0": [401, 540], "ck": [401, 540], "c2": [401, 540], "nearest_jax": [401, 547], "trace_on_next_step": [551, 650, 815], "recalcul": [554, 650], "my_sum": [554, 650], "val1": [554, 650], "val2": [554, 650], "cached_sum": [554, 650], "line_eq": [554, 650], "slp": [554, 650], "itc": [554, 650], "cached_line_eq": [554, 650], "0353": [555, 650], "424": [555, 650], "339": [555, 650], "271": [555, 650], "391": [555, 650], "78885436": [556, 650], "41666666": [556, 650], "58333331": [556, 650], "06666667": [556, 650], "13333334": [556, 650], "40000004": [556, 650], "26666668": [556, 650], "13137734": [556, 650], "26275468": [556, 650], "39413199": [556, 650], "52550936": [556, 650], "6568867": [556, 650], "78826398": [556, 650], "84852815": [556, 650], "1313709": [556, 650], "41421366": [556, 650], "27279221": [556, 650], "69705628": [556, 650], "12132034": [556, 650], "default_str": [559, 650], "46999979": [560, 650], "66000009": [560, 650], "93000001": [560, 650], "29000092": [560, 650], "33999991": [560, 650], "6400001": [560, 650], "96000004": [560, 650], "36000013": [560, 650], "51999998": [560, 650], "67000008": [560, 650], "suppos": [560, 650, 849, 864], "960": [560, 650], "3600": [560, 650], "h1": [560, 650], "w1": [560, 650], "40499985": [561, 650], "61000061": [561, 650], "max_depth": [572, 650], "seen_set": [572, 650], "local_set": [572, 650], "referr": [572, 650], "redund": [572, 650, 832, 849, 853, 861, 879], "example_funct": [572, 650], "repr": [572, 650], "allow_dupl": [587, 650], "fork": [588, 650, 833, 843, 848, 854], "forkserv": [588, 650], "mp_default": [588, 650], "defaultcontext": [588, 650], "0x7f4e3193e520": [588, 650], "mp_fork": [588, 650], "forkcontext": [588, 650], "0x7f4e3193e580": [588, 650], "mp_spawn": [588, 650], "spawncontext": [588, 650], "0x7f4e3193e5e0": [588, 650], "mp_forkserv": [588, 650], "forkservercontext": [588, 650], "0x7f4e3193e640": [588, 650], "garbag": [590, 650], "collector": [590, 650], "get_all_arrays_in_memori": [590, 650], "exception_trace_mod": [594, 618, 650, 866], "lenient": [595, 619, 650], "inplace_mod": [595, 619, 650], "break": [595, 650, 845, 849, 856, 865, 871], "infus": [596, 650], "unset": [597, 604, 650, 653, 701, 820, 845, 869], "unset_min_bas": [597, 650], "nestable_mod": [599, 622, 650, 866], "precise_mod": [600, 623, 650, 866], "shape_array_mod": [602, 625, 650, 866], "show_func_wrapper_trace_mod": [603, 626, 650, 866], "tmp_dr": [604, 650], "tmp_dir": [604, 627, 650, 866], "my_tmp": [604, 650], "unset_tmp_dir": [604, 650], "49999999999975": [607, 650], "5015015015010504": [607, 650], "000444502911705e": [607, 650], "9999999999995j": [607, 650], "00000262": [608, 650], "15605032": [608, 650], "01208451j": [608, 650], "00048": [608, 650], "1296": [608, 650], "00864": [608, 650], "isn": [610, 650, 835, 840, 858, 860, 864, 871], "100000023841858": [612, 650], "200000047683716": [612, 650], "299999952316284": [612, 650], "400000095367432": [612, 650], "599999904632568": [612, 650], "hemant": [616, 650], "unset_shape_array_mod": [617, 650], "set_exception_trace_mod": [618, 650, 853], "set_min_bas": [620, 650], "set_min_denomin": [621, 650], "set_nestable_mod": [622, 650], "set_precise_mod": [623, 650], "set_queue_timeout": [624, 650], "set_shape_array_mod": [625, 650], "set_show_func_wrapper_trace_mod": [626, 650, 853], "set_tmp_dir": [627, 650], "my_dir": [627, 650], "451": [628, 650], "in_ax": [629, 650], "out_ax": [629, 650], "thereof": [629, 650], "summaris": [629, 650], "99999998": [630, 651], "19999998": [630, 651], "00000001": [630, 651], "00300001": [630, 651], "00800001": [630, 651], "0125": [630, 651], "17294501": [630, 651], "15770318": [630, 651], "20863818": [630, 651], "90000075": [631, 651], "90000164": [631, 651], "9000032": [631, 651], "50000012e": [631, 651], "92558754": [631, 651], "92558694": [631, 651], "92558682": [631, 651], "92558861": [631, 651], "60000025e": [631, 651], "01024": [631, 651], "retain_grad": [632, 651], "func_ret": [632, 651, 859], "666666": [632, 651], "333332": [632, 651], "66666675": [632, 641, 651], "argnum": [633, 651], "933": [633, 635, 651], "jac_fn": [635, 651], "639": [636, 651], "361": [636, 651], "52565837": [637, 651], "8418861": [637, 651], "68377209": [637, 651], "value_grad": [641, 651], "42333412": [641, 651], "5333333": [641, 651], "93333334": [641, 651], "43333334": [641, 651], "0666666": [641, 651], "softsign": 642, "718281828459045": 643, "euler": 643, "141592653589793": 643, "cmp_i": 644, "cmp_isnot": 644, "for_loop": 644, "if_els": 644, "try_except": 644, "control_flow_op": 644, "to_dlpack": 645, "as_ivy_dtyp": [646, 861], "as_native_dtyp": 646, "check_float": 646, "closest_valid_dtyp": 646, "default_dtyp": [646, 849, 857], "dtype_bit": 646, "function_supported_dtyp": [646, 849, 864], "function_unsupported_dtyp": [646, 849], "infer_default_dtyp": 646, "invalid_dtyp": [646, 849], "is_hashable_dtyp": 646, "is_native_dtyp": 646, "promote_typ": [646, 849], "promote_types_of_input": [646, 849, 860], "type_promote_arrai": [646, 849], "unset_default_complex_dtyp": 646, "unset_default_float_dtyp": 646, "unset_default_int_dtyp": 646, "unset_default_uint_dtyp": 646, "valid_dtyp": 646, "defaultcomplexdtyp": 646, "defaultdtyp": 646, "defaultfloatdtyp": 646, "defaultintdtyp": 646, "defaultuintdtyp": 646, "as_ivy_dev": 647, "clear_cached_mem_on_dev": 647, "dev_util": [647, 850], "function_supported_devic": 647, "function_unsupported_devic": 647, "get_all_ivy_arrays_on_dev": [647, 850], "handle_soft_device_vari": [647, 850], "num_cpu_cor": [647, 850], "num_gpu": [647, 850, 864], "num_ivy_arrays_on_dev": 647, "percent_used_mem_on_dev": 647, "print_all_ivy_arrays_on_dev": 647, "set_split_factor": [647, 853], "split_func_cal": 647, "total_mem_on_dev": [647, 850], "tpu_is_avail": 647, "unset_default_devic": [647, 850], "unset_soft_device_mod": [647, 850], "used_mem_on_dev": 647, "defaultdevic": [647, 850], "save_dir": 647, "arg_info": 650, "arg_nam": 650, "cache_fn": [650, 857], "current_backend_str": [650, 864, 869], "function_supported_devices_and_dtyp": 650, "function_unsupported_devices_and_dtyp": 650, "get_item": [650, 860], "get_referrers_recurs": 650, "inplace_arrays_support": 650, "inplace_variables_support": 650, "is_ivy_nested_arrai": 650, "isscalar": 650, "match_kwarg": 650, "num_arrays_in_memori": 650, "print_all_arrays_in_memori": 650, "set_item": [650, 864], "to_ivy_shap": 650, "to_native_shap": 650, "try_else_non": 650, "unset_array_mod": [650, 866], "unset_exception_trace_mod": 650, "unset_inplace_mod": 650, "unset_min_denomin": 650, "unset_nestable_mod": 650, "unset_precise_mod": 650, "unset_queue_timeout": 650, "unset_show_func_wrapper_trace_mod": 650, "vmap": [650, 871, 883], "arraymod": 650, "precisemod": [650, 849], "jac": 651, "requires_gradi": 651, "value_and_grad": [651, 859], "feature_group_count": [652, 665, 672, 673], "oiw": [652, 665, 666, 672], "oihw": [652, 665, 668, 672], "oidhw": [652, 665, 670, 672], "dhwio": [652, 665, 666, 670, 672], "conv_general_dil": [652, 861], "conv_general_transpos": 652, "depthwis": [652, 674, 797, 811], "1428566": [652, 675], "49000001": [652, 675], "55599999": [652, 675], "21000004": [652, 675], "incom": [652, 676], "4269": [652, 676], "911": [652, 676, 853], "157": [652, 676], "753": [652, 676], "545": [652, 659, 676, 760], "547": [652, 676, 850], "963": [652, 676], "98495483": [652, 676], "0293808": [652, 676], "0159359": [652, 676], "74752808": [652, 676], "20942307": [652, 676], "3205719": [652, 676], "all_weight": [652, 677], "num_lay": [652, 677, 811], "weights_transpos": [652, 677], "has_ih_bia": [652, 677], "has_hh_bia": [652, 677], "multi": [652, 653, 677, 679, 684, 797, 811, 851, 871, 883], "long": [652, 677, 678, 839, 840, 848, 849, 851, 853, 854, 861, 869, 883], "input_s": [652, 677], "h_0": [652, 677], "c_0": [652, 677], "num_direct": [652, 677], "hidden_s": [652, 677], "four": [652, 677, 835, 844, 849, 851, 856, 857, 864, 867], "w_ih": [652, 677], "w_hh": [652, 677], "b_ih": [652, 677], "b_hh": [652, 677], "c_out": [652, 677], "vaswani": [652, 679], "al": [652, 679], "num_attention_head": [652, 679], "key_dim": [652, 679, 811], "value_dim": [652, 679, 811], "attention_weight": [652, 679], "unbatch": [652, 679], "nm": 652, "box": [652, 680, 681, 839], "iou_threshold": [652, 680], "max_output_s": [652, 680], "score_threshold": [652, 680], "roi_align": 652, "spatial_scal": [652, 681], "sampling_ratio": [652, 681], "23333359": [652, 682], "03946018": [652, 682], "0280633": [652, 682], "29981947": [652, 682], "29981089": [652, 682], "06345534": [652, 682], "9634552": [652, 682], "19336844": [652, 682], "09336829": [652, 682], "axisa": [653, 684], "axisb": [653, 684], "axisc": [653, 684], "293": [653, 685], "46997": [653, 685], "17157288": [653, 689], "9238795": [653, 689], "78930789": [653, 689], "59803128": [653, 689], "19127655": [653, 689], "31213903": [653, 689], "63418275": [653, 689], "84632206": [653, 689], "70548367": [653, 689], "70223427": [653, 689], "09570674": [653, 689], "63116378": [653, 689], "56109613": [653, 689], "53554028": [653, 689], "32237405": [653, 689], "43822157": [653, 689], "83906901": [653, 689], "50766778": [653, 689], "71475857": [653, 689], "48103389": [653, 689], "3676433": [653, 689], "68466955": [653, 689], "62933773": [653, 689], "77917379": [653, 689], "14264561": [653, 689], "61036086": [653, 689], "45033181e": [653, 690], "02829754e": [653, 690], "54220343e": [653, 690], "12647155e": [653, 690], "38447177e": [653, 690], "56155300e": [653, 690], "26794919": [653, 690], "7320509": [653, 690], "0012": [653, 692], "00342": [653, 692], "000565": [653, 692], "0104": [653, 692], "000981": [653, 692], "00282": [653, 692], "000766": [653, 692], "0322": [653, 692], "00237": [653, 692], "000151": [653, 692], "00101": [653, 692], "00019": [653, 692], "0214": [653, 692], "00171": [653, 692], "0107": [653, 692], "0167": [653, 692], "0472": [653, 692], "0536": [653, 692], "0177": [653, 692], "000429": [653, 692], "00762": [653, 692], "frobeniu": [653, 694], "nuclear": [653, 694], "induc": [653, 694], "ranl": [653, 694], "47722558": [653, 694], "776": [653, 694], "6000004": [653, 694], "118": [653, 695], "moor": [653, 699], "penros": [653, 699], "31622776": [653, 700], "94868332": [653, 700], "1622777": [653, 700], "42718887": [653, 700], "deteremin": [653, 701], "logsabsdet": [653, 701], "subject": [653, 701], "unset_backend": [653, 701, 820, 845], "ordin": [653, 702], "b2": [653, 702], "usvh": [653, 703], "cetera": [653, 703], "driver": [653, 704, 871], "gesvd": [653, 704], "gesvdj": [653, 704], "gesvda": [653, 704], "86217213": [653, 704], "31816804": [653, 704], "615": [653, 704], "ss": [653, 704], "25994301": [653, 704], "16403675": [653, 704], "61529762": [653, 704], "51231241": [653, 704], "39777088": [653, 704], "15413129": [653, 704], "1029852": [653, 704], "01383495": [653, 704], "86647356": [653, 704], "7786541": [653, 704], "55970621": [653, 704], "16857576": [653, 704], "86412698": [653, 704], "37566757": [653, 704], "88477993": [653, 704], "95925522": [653, 704], "6444726": [653, 704], "54687881": [653, 704], "16134834": [653, 704], "35037804": [653, 704], "31025076": [653, 704], "35769391": [653, 704], "transposit": [653, 705], "0x": [653, 708], "Such": [653, 708, 857, 864], "alexandr": [653, 708], "theophil": [653, 708], "dot_product": [653, 709], "9000001": [653, 710], "64158917": [653, 710], "skew": [653, 711], "60309976": [654, 712], "6666193": [654, 712], "01348412": [654, 712], "05393649": [654, 712], "49992943": [654, 712], "83330965": [654, 712], "02136981": [654, 712], "32844672": [654, 712], "26561815": [654, 712], "22314337": [654, 712], "08916873": [654, 713, 714], "44832274": [654, 714], "75646281": [654, 714], "13862944": [654, 714], "57564628": [654, 714], "ssim_loss": 654, "ssim": [654, 715], "99989986": [654, 715], "wasserstein_loss_discrimin": 654, "p_real": [654, 716], "p_fake": [654, 716], "wasserstein": [654, 716, 717], "discrimin": [654, 716], "wasserstein_loss_gener": 654, "pred_fak": [654, 717], "honor": [655, 725], "beyond": [655, 726, 832, 852, 861], "famili": [655, 729], "intxx": [655, 729], "floatxx": [655, 729], "rep": [655, 731], "fomaml_step": 656, "inner_cost_fn": [656, 734, 735, 736], "outer_cost_fn": [656, 734, 735], "inner_grad_step": [656, 734, 735, 736], "inner_learning_r": [656, 734, 735, 736], "inner_optimization_step": [656, 734, 735, 736], "inner_batch_fn": [656, 734, 735], "outer_batch_fn": [656, 734, 735], "average_across_step": [656, 734, 735], "inner_v": [656, 734, 735], "keep_inner_v": [656, 734, 735], "outer_v": [656, 734, 735], "keep_outer_v": [656, 734, 735], "return_inner_v": [656, 734, 735, 736], "num_task": [656, 734, 735, 736], "maml": [656, 734, 735], "0x7f9af7631fc0": [656, 734, 735, 736], "maml_step": 656, "vanilla": [656, 735, 883], "_variabl": [656, 735, 736], "sub_batch": [656, 735], "40069818": [656, 735], "13723135": [656, 735], "reptile_step": 656, "cost_fn": [656, 736], "reptil": [656, 736], "batch_in": [656, 736], "4485182": [656, 736], "139": [656, 736], "9569855": [656, 736], "9880483": [656, 736], "01766968": [656, 736], "02197957": [656, 736], "02197981": [656, 736], "all_nested_indic": 657, "include_nest": [657, 737], "_index": [657, 737, 748], "_base": [657, 737, 747, 748, 860], "themselv": [657, 737, 847, 849, 850, 852, 857, 861], "863": [657, 737, 850], "672": [657, 737], "482": [657, 737], "674": [657, 737], "341": [657, 737], "copy_nest": 657, "to_mut": [657, 738, 749], "deepli": [657, 738, 841, 871, 883], "copied_nest": [657, 738], "1337": [657, 738, 749], "duplicate_array_index_chain": 657, "index_nest": [657, 857], "insert_into_nest_at_index": 657, "insert_into_nest_at_indic": 657, "special_squar": [657, 743], "6666666666666667": [657, 743], "special_pow": [657, 743], "linear_model": [657, 743], "map_nest_at_index": 657, "_result": [657, 744, 754], "hh": [657, 744, 749], "map_nest_at_indic": 657, "ub": [657, 745], "tb": [657, 745], "multi_index_nest": 657, "nested_ani": 657, "check_nest": [657, 747, 748], "nested_argwher": 657, "stop_after_n_found": [657, 748], "nested_indic": [657, 748], "nested_map": [657, 850, 857], "_tuple_check_fn": [657, 749], "_list_check_fn": [657, 749], "_dict_check_fn": [657, 749], "wherebi": [657, 749, 838], "ah": [657, 749], "bh": [657, 749], "ch": [657, 749], "dh": [657, 749, 843], "eh": [657, 749], "gh": [657, 749, 839, 854], "ih": [657, 749], "1338": [657, 749], "nested_multi_map": 657, "index_chain": [657, 750], "nest0": [657, 750], "ivy_arrai": [657, 750, 844, 861], "unappli": [657, 750], "prune_empti": 657, "prune_nest_at_index": 657, "prune_nest_at_indic": 657, "set_nest_at_index": 657, "set_nest_at_indic": 657, "xyz": [657, 755], "pqr": [657, 755], "mini": [658, 756, 811, 814], "uniformli": [659, 758, 760], "22346112": [659, 759], "0922": [659, 759], "9213753": [659, 759], "12818667": [659, 759], "799": [659, 759], "469": [659, 759], "287": [659, 759], "0366": [659, 759], "26431865": [659, 760], "475": [659, 760], "878": [659, 760], "861": [659, 760], "929": [659, 760], "789": [659, 760], "519": [659, 760], "0435": [659, 760], "381": [659, 760], "4608004": [659, 760], "8458502": [659, 760], "67270088": [659, 760], "31128597": [659, 760], "394": [659, 762], "zeroel": [660, 766], "fourth": [661, 768], "1141": [661, 768], "8101": [661, 768], "9298": [661, 768], "8460": [661, 768], "2119": [661, 768], "3519": [661, 768], "6252": [661, 768], "4033": [661, 768], "7443": [661, 768], "2577": [661, 768], "3707": [661, 768], "0545": [661, 768], "3238": [661, 768], "5944": [661, 768], "0775": [661, 768], "4327": [661, 768], "62519997": [661, 768], "40329999": [661, 768], "59439999": [661, 768], "74430001": [661, 768], "81010002": [661, 768], "84600002": [661, 768], "92979997": [661, 768], "einstein": [663, 778, 825], "117": [663, 778], "intend": [663, 784, 793, 810, 843, 856, 859, 883], "07472222": [663, 785], "00666667": [663, 785], "08966666": [663, 785], "simplicit": [664, 786, 787], "ivy_test": [790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 838, 839, 840, 843, 846, 848, 854, 862], "test_ivi": [790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 838, 839, 840, 846, 848, 854, 862, 864], "assert_all_clos": [790, 862], "ret_np": [790, 792, 862], "ret_from_gt_np": [790, 862], "ground_truth_backend": [790, 792, 793, 802, 803, 836, 854, 862], "mark": [790, 835, 838, 840, 843, 864, 869], "assert_same_typ": 790, "ret_from_target": 790, "ret_from_gt": 790, "backend_to_test": [790, 792, 836, 854, 862], "gt_backend": 790, "with_backend": [790, 820], "assert_same_type_and_shap": 790, "this_key_chain": 790, "check_unsupported_devic": 790, "input_devic": 790, "all_as_kwargs_np": [790, 792], "check_unsupported_device_and_dtyp": 790, "input_dtyp": [790, 792, 802, 836, 854, 862, 864], "check_unsupported_dtyp": 790, "test_unsupported_funct": 790, "value_test": 790, "ret_np_flat": 790, "ret_np_from_gt_flat": 790, "specific_tolerance_dict": 790, "ret_from_np_gt_flat": 790, "available_framework": 791, "function_test": 792, "args_to_contain": 792, "array_arg": [792, 857], "args_to_frontend": 792, "frontend_array_fn": 792, "arrays_to_frontend": 792, "as_list": 792, "convtru": 792, "nativeclass": 792, "counter": 792, "create_args_kwarg": 792, "args_np": 792, "arg_np_val": 792, "args_idx": 792, "kwargs_np": 792, "kwarg_np_val": 792, "kwargs_idx": 792, "test_flag": [792, 836, 854, 862, 864], "on_devic": [792, 802, 836, 854, 862], "flatten_and_to_np": 792, "flatten_frontend": 792, "flatten_frontend_fw_to_np": 792, "frontend_ret": [792, 862], "isscalar_func": 792, "is_native_array_func": 792, "to_numpy_func": 792, "flatten_frontend_to_np": 792, "get_frontend_ret": 792, "frontend_fn": 792, "frontend_array_funct": 792, "precision_mod": [792, 802, 803, 854], "test_trac": [792, 802, 803, 836, 843, 854], "test_trace_each": [792, 802, 803], "get_ret_and_flattened_np_arrai": 792, "gradient_incompatible_funct": 792, "gradient_test": [792, 864], "rtol_": [792, 836, 854], "atol_": [792, 836, 854, 862], "tolerance_dict": 792, "gradient_unsupported_dtyp": 792, "kwargs_to_args_n_kwarg": 792, "num_positional_arg": [792, 802, 803, 836, 854, 862, 864], "port": 792, "test_frontend_funct": [792, 862], "fn_tree": [792, 793, 803, 836, 854, 861, 862, 864], "gt_fn_tree": [792, 803], "test_valu": [792, 862, 864], "frontend_function_flag": [792, 802], "functiontestflag": [792, 802, 836, 854], "with_out": [792, 802, 836, 854, 862, 864], "instance_method": [792, 802, 836, 854, 864], "as_vari": [792, 802, 836, 854, 862, 864], "namespac": [792, 838, 849, 858, 861, 862, 865, 869], "arg_": 792, "test_frontend_method": [792, 862], "init_input_dtyp": [792, 862], "method_input_dtyp": [792, 862], "init_flag": [792, 862, 864], "method_flag": [792, 802, 862, 864], "init_all_as_kwargs_np": [792, 862], "method_all_as_kwargs_np": [792, 862], "frontend_method_data": [792, 862], "init_as_variable_flag": [792, 803], "dictat": [792, 844, 851, 856, 860], "init_num_positional_arg": [792, 803], "init_native_array_flag": 792, "with_v": 792, "ret_gt": 792, "test_funct": [792, 836, 839, 840, 848, 854, 862, 864], "fn_name": [792, 793, 803, 836, 845, 854, 862, 864], "return_flat_np_arrai": 792, "as_variable_flag": [792, 803, 864], "native_array_flag": [792, 803, 864], "container_flag": [792, 802, 803, 864], "test_function_backend_comput": 792, "test_function_ground_truth_comput": 792, "arg_np_arrai": 792, "arrays_args_indic": 792, "arrays_kwargs_indic": 792, "kwarg_np_arrai": 792, "test_gradient_backend_comput": 792, "test_gradient_ground_truth_comput": 792, "test_method": 792, "method_nam": [792, 801, 803, 862], "init_with_v": 792, "method_with_v": 792, "test_gradi": [792, 802, 803, 836, 854, 864], "method_as_variable_flag": [792, 803], "method_num_positional_arg": [792, 803], "method_native_array_flag": 792, "method_container_flag": [792, 803], "test_method_backend_comput": 792, "test_method_ground_truth_comput": 792, "org_con_data": 792, "args_np_method": 792, "met_arg_np_v": 792, "met_args_idx": 792, "kwargs_np_method": 792, "met_kwarg_np_v": 792, "met_kwargs_idx": 792, "v_np": 792, "traced_if_requir": 792, "wrap_frontend_function_arg": 792, "holder": 793, "current_frontend_config": 793, "0x7f9aeb495e70": 793, "interruptedtest": 793, "test_interrupt": 793, "baseexcept": 793, "tri": [793, 849], "testdata": 793, "supported_device_dtyp": 793, "is_method": 793, "setup_api_test": 793, "test_data": 793, "setup_frontend_test": 793, "teardown_api_test": 793, "teardown_frontend_test": 793, "hypothesis_help": [794, 795, 796, 797, 798], "array_help": 795, "array_and_broadcastable_shap": 795, "searchstrategi": [795, 796, 797, 798, 802, 803, 864], "array_bool": [795, 864], "min_valu": [795, 796, 797, 798, 836, 854, 862, 864], "max_valu": [795, 796, 797, 798, 862, 864], "ex": [795, 796, 797, 798, 803, 848, 878], "strategi": [795, 796, 797, 798, 802, 803, 838, 862], "array_helpers_dtype_info_help": 795, "kind_dtyp": [795, 797], "array_indices_axi": 795, "array_dtyp": [795, 796, 864], "indices_dtyp": 795, "get_dtyp": [795, 796, 836, 854, 862, 864], "abs_smallest_v": [795, 797, 798], "large_abs_safety_factor": [795, 797, 798, 836, 854, 862, 864], "small_abs_safety_factor": [795, 797, 798, 836, 854, 862], "safety_factor_scal": [795, 797, 798, 862, 864], "disable_random_axi": 795, "axis_zero": 795, "allow_inf": [795, 798, 862, 864], "min_num_dim": [795, 797, 862, 864], "max_num_dim": [795, 797, 862, 864], "min_dim_s": [795, 797, 862, 864], "max_dim_s": [795, 797, 862], "first_dimension_onli": 795, "indices_same_dim": 795, "valid_bound": 795, "safeti": [795, 797, 798, 883], "0002": [795, 798], "hypothesi": [795, 797, 803, 838, 840, 843, 848, 858], "65536": 795, "44758124e": [795, 864], "array_indices_put_along_axi": 795, "values_dtyp": 795, "array_valu": [795, 864], "allow_nan": [795, 798, 864], "allow_subnorm": [795, 798, 864], "exclude_min": [795, 798, 864], "exclude_max": [795, 798], "subnorm": [795, 798], "get_shap": [795, 797, 862, 864], "1806": 795, "36912": 795, "6955": 795, "59576": 795, "arrays_and_ax": 795, "available_dtyp": [795, 796, 836, 854, 862, 864], "allow_non": [795, 797, 862, 864], "return_dtyp": 795, "force_int_axi": 795, "26e": 795, "10e": 795, "24322108": 795, "26446279e": 795, "96046448e": 795, "008": 795, "17549435e": 795, "038": 795, "06541027e": 795, "13725760e": 795, "07143888": 795, "arrays_for_pool": 795, "min_dim": 795, "max_dim": 795, "min_sid": 795, "max_sid": 795, "explicit_or_str_pad": 795, "only_explicit_pad": 795, "return_dil": 795, "mixed_fn_compo": [795, 796, 797, 798, 864], "return_data_format": 795, "cond_data_gen_help": 795, "create_concatenable_arrays_dtyp": 795, "min_num_arrai": 795, "max_num_arrai": 795, "concat_dim": 795, "common_shap": [795, 864], "stackabl": 795, "given_common_shap": 795, "create_nested_input": 795, "leaf_valu": 795, "dtype_and_valu": [795, 836, 854, 862, 864], "num_arrai": [795, 796, 862, 864], "shared_dtyp": [795, 796, 862], "ret_shap": 795, "array_api_dtyp": [795, 796], "shape_kei": 795, "37915": 795, "6322": 795, "26765": 795, "12413": 795, "26986": 795, "34665": 795, "000e": 795, "711e": 795, "100e": 795, "955e": [795, 864], "40817": 795, "56193": 795, "29200": 795, "5851": 795, "9746": 795, "9604645e": 795, "103": 795, "41795": 795, "1170789994": 795, "44251": 795, "44209": 795, "433075925": 795, "24791": 795, "24691": 795, "24892": 795, "16711": 795, "972": 795, "15357": 795, "72057594037927936": 795, "dtype_array_queri": 795, "allow_mask": 795, "allow_neg_step": 795, "dtype_array_query_v": 795, "dtype_values_axi": [795, 864], "min_axi": 795, "max_axi": 795, "valid_axi": 795, "allow_neg_ax": 795, "min_axes_s": 795, "max_axes_s": 795, "force_tuple_axi": 795, "29788": 795, "62222885e": 795, "68281172e": 795, "257j": 795, "40129846e": 795, "90000000e": 795, "63426649e": 795, "91931887e": 795, "29488e": 795, "14361019e": 795, "12445": 795, "einsum_help": 795, "get_first_solve_batch_matrix": 795, "choose_adjoint": 795, "get_second_solve_batch_matrix": 795, "get_first_solve_matrix": 795, "allow_simplifi": 795, "choose_sid": 795, "xa": 795, "get_second_solve_matrix": 795, "list_of_s": 795, "sampled_from": [795, 862, 864], "min_siz": [795, 797, 803, 864], "max_siz": [795, 797, 803, 864], "size_bound": [795, 864], "999999999999999": 795, "9394938006792373": 795, "mutually_broadcastable_shap": 795, "num_shap": 795, "base_shap": 795, "dtype_help": 796, "univers": [796, 861], "cast_filt": 796, "cast_filter_help": 796, "current_backend": [796, 820, 838, 845, 853, 857, 862, 865, 869], "get_castable_dtyp": 796, "castabl": 796, "prune_funct": 796, "intersect": [796, 848, 864], "signed_integ": 796, "real_and_complex": 796, "float_and_complex": 796, "general_help": 797, "broadcasterror": 797, "apply_safety_factor": 797, "dims_and_offset": 797, "ensure_dim_uniqu": 797, "embedding_help": 797, "general_helpers_dtype_info_help": 797, "get_axi": [797, 864], "allow_neg": 797, "sort_valu": 797, "force_tupl": 797, "force_int": 797, "assertionerror": [797, 836, 843, 853, 854, 862, 864], "get_bound": [797, 864], "get_mean_std": 797, "matrix_is_st": 797, "cond_limit": 797, "instabl": [797, 836, 849, 854], "computation": [797, 839], "prone": [797, 849], "thumb": 797, "gradual": 797, "collinear": 797, "reshape_shap": [797, 864], "sizes_": 797, "two_broadcastable_shap": 797, "x_and_filt": 797, "number_help": 798, "arbitrarili": 798, "safety_factor": 798, "backend_proc": 799, "input_queu": 799, "output_queu": 799, "frontend_proc": 799, "pipeline_help": 800, "backendhandl": 800, "update_backend": [800, 862], "backendhandlermod": 800, "enum": [800, 823], "setbackend": 800, "withbackend": 800, "withbackendcontext": 800, "get_frontend_config": 800, "frontendmethoddata": 801, "ivy_init_modul": 801, "framework_init_modul": 801, "init_nam": 801, "test_parameter_flag": 802, "dynamicflag": [802, 803], "frontendfunctiontestflag": [802, 854], "with_copi": 802, "generate_frontend_arrai": [802, 803, 854], "testflag": 802, "apply_flag": 802, "args_to_iter": 802, "frontendinittestflag": 802, "frontendmethodtestflag": 802, "test_cython_wrapp": [802, 803], "initmethodtestflag": 802, "methodtestflag": 802, "build_flag": 802, "frontend_init_flag": 802, "frontend_method_flag": 802, "function_flag": 802, "init_method_flag": 802, "testing_help": 803, "handle_exampl": [803, 864], "test_exampl": [803, 864], "test_frontend_exampl": [803, 864], "test_method_exampl": [803, 864], "test_frontend_method_exampl": [803, 864], "given_kwarg": 803, "handle_frontend_method": [803, 862, 864], "class_tre": [803, 862], "init_tre": [803, 862], "init_native_arrai": 803, "_as_varaible_strategi": 803, "method_native_arrai": 803, "test_inplac": [803, 864], "_given_kwarg": 803, "test_compil": 803, "handle_frontend_test": [803, 862, 864], "alias": [803, 838, 861, 862], "number_positional_arg": [803, 862], "test_with_out": [803, 862, 864], "test_with_copi": 803, "handle_method": [803, 823, 864], "method_tre": [803, 862, 864], "_gradient_strategi": 803, "handle_test": [803, 836, 854, 864], "test_instance_method": [803, 864], "num_positional_args_help": 803, "num_positional_args_method": 803, "geglu": 807, "leakyrelu": 807, "logsoftmax": 807, "from_flax_modul": 808, "native_modul": 808, "params_fx": 808, "rng_seed": 808, "constructor_arg": 808, "constructor_kwarg": 808, "instance_arg": 808, "instance_kwarg": 808, "flax": [808, 871, 883], "from_haiku_modul": 808, "params_hk": 808, "from_paddle_modul": 808, "from_torch_modul": 808, "to_keras_modul": 808, "native_module_class": 808, "modulehelp": [809, 813], "create_vari": 810, "var_shap": 810, "fan_out": 810, "fan_in": 810, "rectangular": 810, "firstlayersiren": 810, "siren": 810, "glorotuniform": [810, 811], "glorot": 810, "xavier": 810, "neuron": 810, "w_1x_1": 810, "w_2x_2": 810, "w_nx_n": 810, "w_i": 810, "kaimingnorm": 810, "fan_mod": 810, "kaim": 810, "he": 810, "negative_slop": 810, "fan": 810, "propog": 810, "fan_sum": 810, "Ones": 810, "randomnorm": 810, "stddev": 810, "w0": 810, "wlim": 810, "predefin": 810, "fan_avg": 810, "adaptiveavgpool1d": 811, "avgpool1d": 811, "implicit": [811, 847, 852, 861, 864, 869, 883], "avgpool2d": 811, "avgpool3d": 811, "e501": 811, "filter_s": 811, "weight_initi": 811, "bias_initi": 811, "0x7f9af733cbe0": 811, "0x7f9af733cf40": 811, "conv1dtranspos": 811, "0x7f9af733cb80": 811, "0x7f9af733cdf0": 811, "filter_shap": 811, "0x7f9af733ce20": 811, "0x7f9af733d4b0": 811, "0x7f9af733d510": 811, "0x7f9af733d570": 811, "0x7f9af733c7c0": 811, "0x7f9af733d990": 811, "conv3dtranspos": 811, "0x7f9af733d9f0": 811, "0x7f9af733da50": 811, "depthwiseconv2d": 811, "num_channel": 811, "0x7f9af733ea70": 811, "0x7f9af733e950": 811, "bernoul": 811, "num_embed": 811, "embedding_dim": 811, "padding_idx": 811, "lookup": 811, "num_embeddingss": 811, "renorm": 811, "extra_repr": 811, "insensit": 811, "return_st": 811, "0x7f9af733dab0": 811, "get_initial_st": 811, "0x7f9af733c8e0": 811, "0x7f9af733c940": 811, "maxpool1d": 811, "maxpool3d": 811, "multiheadattent": 811, "embed_dim": 811, "head_dim": 811, "dropout_r": 811, "use_proj_bia": 811, "attention_ax": 811, "build_mod": [811, 812, 813], "on_init": [811, 813], "parallel": [811, 846, 883], "binarycrossentropyloss": 812, "store_var": [812, 813], "with_partial_v": [812, 813], "logpoissonloss": 812, "modulemeta": 813, "temporarili": [813, 836, 843, 854], "from_cal": 813, "module_dict": 813, "register_buff": 813, "register_paramet": 813, "weights_path": 813, "randomness_factor": 813, "with_edge_label": 813, "with_arg_label": 813, "with_output_label": 813, "output_connected_onli": 813, "highlight_subgraph": 813, "trace_kwarg": 813, "_unified_ivy_graph": 813, "_call": 813, "num_featur": 814, "trail": 814, "layernorm": 814, "normalized_shap": 814, "elementwise_affin": 814, "set_stat": 815, "adamw": 815, "weight_decai": 815, "init_on_first_step": 815, "fallback_to_non_trac": 815, "ignore_miss": 815, "_step": 815, "stochast": [815, 883], "sub_modul": 816, "check_al": 817, "check_all_or_any_fn": 817, "check_ani": 817, "check_dev_correct_format": 817, "check_dimens": 817, "check_elem_in_list": [817, 857, 860, 861], "elem": 817, "check_equ": [817, 861], "check_exist": 817, "check_fals": 817, "check_gather_input_valid": 817, "check_gather_nd_input_valid": 817, "check_great": 817, "allow_equ": [817, 853], "check_inplace_sizes_valid": [817, 860], "check_isinst": 817, "allowed_typ": 817, "check_kernel_padding_s": 817, "padding_s": 817, "check_less": [817, 853], "check_one_way_broadcast": 817, "check_same_dtyp": 817, "check_shapes_broadcast": 817, "check_tru": 817, "check_unsorted_segment_valid_param": 817, "ast_help": 819, "importtransform": 819, "nodetransform": 819, "impersonate_import": 819, "tree": [819, 849], "local_ivy_id": 819, "visit_import": 819, "visit_importfrom": 819, "ivyload": 819, "loader": [819, 871], "exec_modul": 819, "ivypathfind": 819, "metapathfind": 819, "find_spec": 819, "fullnam": 819, "contextmanag": 820, "choose_random_backend": 820, "global_backend": 820, "dynamic_backend_convert": 820, "backend_stack": [820, 869], "prevent_access_loc": 820, "previous_backend": [820, 845], "Or": [820, 832, 834, 839, 860, 876], "set_backend_to_specific_vers": 820, "set_jax_backend": 820, "set_mxnet_backend": 820, "mx": 820, "set_numpy_backend": 820, "set_paddle_backend": 820, "set_tensorflow_backend": 820, "set_torch_backend": 820, "sub_backend_handl": 821, "clear_sub_backend": 821, "find_available_sub_backend": 821, "sub_backends_loc": 821, "fn_name_from_version_specific_fn_nam": 821, "fn_name_from_version_specific_fn_name_sub_backend": 821, "sub_backend_vers": 821, "backend_vers": [821, 836, 849, 854], "set_sub_backend": 821, "sub_backend_str": 821, "set_sub_backend_to_specific_vers": 821, "sub_backend": 821, "unset_sub_backend": 821, "check_for_binari": 822, "cleanup_and_fetch_binari": [822, 839], "clean": [822, 840, 865, 870], "decorator_util": 823, "callvisitor": 823, "nodevisitor": 823, "visit_cal": 823, "transposetyp": 823, "no_transpos": 823, "apply_transpos": 823, "pt_to_tf": 823, "dummy_inplace_upd": 823, "get_next_func": 823, "handle_get_item": 823, "handle_set_item": 823, "handle_transpose_in_input_and_output": 823, "retrieve_object": 823, "store_config_info": 823, "dynamic_import": 824, "import_modul": [824, 869], "einsum_pars": 825, "convert_interleaved_input": 825, "interleav": 825, "convert_subscript": 825, "old_sub": 825, "symbol_map": 825, "subscript": [825, 826], "oe": 825, "ellipsi": [825, 826], "find_output_shap": 825, "find_output_str": 825, "canon": 825, "gen_unused_symbol": 825, "abd": [825, 826], "get_symbol": 825, "letter": 825, "resort": 825, "unicod": 825, "charact": [825, 861], "chr": 825, "surrog": 825, "\u0155": 825, "20000": 825, "\u4eac": 825, "has_valid_einsum_chars_onli": 825, "einsum_str": 825, "abaz": 825, "\u00f6ver": 825, "is_valid_einsum_char": 825, "\u01f5": 825, "legalise_einsum_expr": 825, "reproduct": [825, 826], "pars": [825, 826, 846, 851, 871], "intak": 825, "contract_path": 825, "parse_einsum_input": [825, 826], "einsum_eqn": 825, "legalis": 825, "legalise_einsum_eqn": 825, "za": [825, 826], "xza": [825, 826], "xz": [825, 826], "possibly_convert_to_numpi": 825, "myshap": 825, "__main__": 825, "0x10f850710": 825, "einsum_path_help": 826, "can_dot": 826, "idx_remov": 826, "bla": 826, "benefici": 826, "movement": 826, "costli": 826, "gemm": 826, "ijj": 826, "ddot": 826, "ikj": 826, "compute_size_by_dict": 826, "idx_dict": 826, "abbc": 826, "find_contract": 826, "input_set": 826, "output_set": 826, "lh": 826, "rh": 826, "new_result": 826, "idx_contract": 826, "iset": 826, "oset": 826, "bdc": 826, "flop_count": 826, "num_term": 826, "size_dictionari": 826, "flop": [826, 830], "greedy_path": 826, "memory_limit": 826, "exhaust": [826, 860, 864], "indices_remov": 826, "priorit": [826, 838, 863, 867], "hadamard": 826, "cubic": 826, "greedi": 826, "idx_siz": 826, "optimal_path": 826, "siev": 826, "input_str": 826, "output_str": 826, "parse_possible_contract": 826, "path_cost": 826, "naive_cost": 826, "propos": [826, 840, 861, 867, 883], "intermediari": [826, 845], "unoptim": 826, "new_input_set": 826, "update_other_result": 826, "provision": 826, "_parse_possible_contract": 826, "mod_result": 826, "inplaceupdateexcept": 827, "include_backend": [827, 853], "ivyattributeerror": [827, 853], "attributeerror": [827, 853], "ivybroadcastshapeerror": [827, 853], "ivydeviceerror": 827, "ivydtypepromotionerror": [827, 853], "ivyindexerror": [827, 853], "ivyinvalidbackendexcept": 827, "ivynotimplementedexcept": [827, 853], "notimplementederror": 827, "ivyvalueerror": [827, 853], "handle_except": [827, 856, 858], "add_array_spec": 828, "fn_array_spec": 828, "set_logging_mod": 829, "debug": [829, 835, 839, 840, 847, 848, 859, 864, 867, 883], "unset_logging_mod": 829, "print_stat": 830, "viz": 830, "snakeviz": 830, "bonu": 830, "cprofil": 830, "tensorflow_profile_start": 830, "logdir": 830, "host_tracer_level": 830, "python_tracer_level": 830, "device_tracer_level": 830, "delay_m": 830, "toggl": [830, 840], "timestamp": 830, "awai": [830, 883], "millisecond": 830, "guess": 830, "tensorflow_profile_stop": 830, "torch_profiler_init": 830, "schedul": [830, 848, 871, 883], "on_trace_readi": 830, "record_shap": 830, "profile_memori": 830, "with_stack": 830, "with_flop": 830, "with_modul": 830, "experimental_config": 830, "profileract": 830, "record_and_sav": 830, "dealloc": 830, "record": [830, 839, 871, 884], "callstack": 830, "aten": 830, "torchscript": [830, 870, 873], "_experimentalconfig": 830, "kineto": 830, "torch_profiler_start": 830, "torch_profiler_stop": 830, "cprint": [831, 869], "faq": [832, 846], "docker": [832, 836, 837, 854], "pull": [832, 833, 835, 838, 839, 843, 851, 855, 865, 867, 871, 872], "ivyllc": [832, 839, 872], "brief": [832, 860, 864, 870], "torch_fn": 832, "tf_fn": 832, "jax_fn": 832, "ensp": 832, "customiz": [832, 846], "15c235f": 832, "deepmind_perceiver_io": 832, "sm_framework": 832, "segmentation_model": 832, "sm": 832, "torch_sm": 832, "iou_scor": 832, "rax": 832, "torch_rax": 832, "poly1_softmax_loss": 832, "madmom": 832, "madmon": 832, "torch_madmom": 832, "freq": 832, "audio": 832, "hz2midi": 832, "torch_loss": 832, "maxpooling1d": 832, "pool_siz": 832, "tf_kornia": 832, "tf_rax": 832, "tf_madmom": 832, "tf_loss": 832, "_forward_classifi": [832, 878], "forward_classifi": [832, 878], "hk_eff_encod": 832, "dummy_x": 832, "jax_sm": 832, "jax_madmom": 832, "jax_loss": 832, "np_kornia": 832, "np_sm": 832, "np_rax": 832, "np_loss": 832, "migrat": [832, 876], "instantli": [832, 878], "tensorflwo": 832, "happend": 832, "motiv": 832, "contextu": 832, "explos": [832, 874], "adher": [832, 843, 849, 852, 856, 867, 869], "orient": [832, 876], "contributor": [832, 833, 836, 838, 839, 840, 854, 861, 868, 883], "believ": [832, 840], "everyon": [832, 833, 838, 839, 840, 871], "feedback": [832, 838, 848], "appreci": [832, 841], "dashboard": 832, "grow": [832, 835, 841, 883], "mission": [832, 841], "season": 832, "fellow": 832, "credit": 832, "accompani": 832, "lenton2021ivi": 832, "inter": 832, "author": [832, 838, 840], "lenton": 832, "daniel": 832, "pardo": 832, "fabio": 832, "falck": 832, "fabian": 832, "jame": 832, "stephen": 832, "clark": 832, "ronald": 832, "journal": 832, "arxiv": 832, "preprint": 832, "2102": 832, "02886": 832, "year": [832, 843, 871, 883], "strongli": [833, 839, 861], "engag": [833, 840, 841], "skill": [833, 841], "veteran": 833, "journei": [833, 841], "effort": [833, 838, 871, 875, 883], "board": [833, 846], "stage": [833, 840, 842, 843, 846, 864, 883], "excit": [833, 842], "reward": [833, 841], "badg": [833, 841, 848], "program": [833, 860, 883], "climb": [833, 837], "Be": [834, 846], "awar": [834, 846, 853, 855], "linux": [834, 839, 840, 846], "regularli": [834, 846, 848], "internet": [834, 846], "codespac": [834, 846, 854], "make_doc": 834, "sh": [834, 839, 840, 843, 848], "pwd": 834, "ssh": [834, 848], "make_docs_without_dock": [834, 846], "award": 835, "formal": 835, "dynamo": 835, "earn": [835, 841], "thoroughli": [835, 843], "valuabl": [835, 838, 840], "merg": [835, 838, 840, 843, 848, 861, 883], "meet": [835, 841, 861], "wizard": 835, "inspector": 835, "acknowledg": [835, 841], "honour": 835, "dilig": 835, "bronz": [835, 841], "silver": [835, 841], "gold": [835, 841, 871], "expertis": [835, 841], "assist": [836, 854], "runtimeerror": [836, 854], "logaddexp2_cpu": [836, 854], "falsifi": [836, 843, 854, 864], "test_logaddexp2": [836, 854], "backend_fw": [836, 854, 862], "dtype_and_x": [836, 854, 862, 864], "reproduce_failur": [836, 843, 854, 858, 864], "axicy2bkaamobaar2waaaacvaai": [836, 854], "decoartor": [836, 854], "someth": [836, 840, 845, 854, 855, 865, 871], "with_unsupported_dtyp": [836, 849, 854, 861], "25830078125": [836, 854], "258544921875": [836, 854], "test_acosh": [836, 854], "axicy2baabyqwqgiaabdaai": [836, 854], "quit": [836, 840, 844, 851, 852, 854, 857, 858, 864, 867, 883], "41421356": [836, 854], "41421356e": [836, 854], "34078079e": [836, 854], "154": [836, 854], "test_ab": [836, 839, 854, 864], "000j": [836, 854], "154j": [836, 854], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [836, 854], "thread": [836, 838, 839, 840, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 883], "pycharm": [836, 862, 864], "steep": 837, "curv": 837, "realpython": 837, "pyn": 837, "exchang": [837, 885], "pilot": 837, "stuck": [837, 838], "spell": 837, "sound": [837, 848], "peopl": [837, 839, 840, 842, 883], "frequent": [838, 840, 845, 883], "outlin": [838, 839, 840, 842, 847, 849, 852, 857, 860, 861, 864], "broad": 838, "individu": [838, 840, 843, 845, 849, 857, 861, 883], "clearli": [838, 840, 851, 862, 864], "straightforward": [838, 841], "lie": 838, "urgent": 838, "encourag": [838, 841, 855, 871], "tackl": [838, 841, 861], "challeng": [838, 845, 875, 885], "categoris": [838, 843, 861], "comfort": [838, 839, 853], "linkag": 838, "pr": [838, 840, 841, 843, 855, 861, 862, 864], "confid": 838, "submit": [838, 855], "mindspor": 838, "simpler": [838, 840, 855, 879, 884], "member": [838, 840, 861, 872], "comment": [838, 839, 840, 843, 849, 855, 861, 863, 867], "composition": 838, "feasibl": [838, 848, 864, 879], "pend": 838, "helpfulli": [838, 867], "problemat": [838, 839], "unimpl": 838, "issue_link": 838, "alias_nam": 838, "notic": [838, 844, 848, 854, 855, 864, 867, 879], "push": [838, 840, 841, 843, 862, 864], "liner": 838, "meanwhil": [838, 848], "reselect": 838, "faithfulli": 838, "creation_routin": [838, 862], "indexing_routin": 838, "ma": 838, "manipulation_routin": 838, "mathematical_funct": [838, 861], "sorting_searching_count": 838, "ufunc": [838, 861], "matrix_and_vector_product": 838, "matrix_eigenvalu": 838, "norms_and_other_numb": 838, "solving_equations_and_inverting_matric": 838, "gleam": 838, "uncom": 838, "test_numpy_inn": 838, "test_frontend": [838, 848, 854, 862], "unsur": [838, 864], "refrain": 838, "checkbox": [838, 839], "yourself": [838, 840, 855, 864, 867], "aforement": 838, "parent": [838, 848], "arraywithelementwis": [838, 844], "containerwithmanipul": 838, "thorough": [838, 852, 856, 864], "add_reformatting_checklist_": 838, "category_nam": [838, 849, 850, 852, 856, 857], "autom": [838, 848, 855, 864, 873], "bot": [838, 855], "markdown": [838, 846], "patient": [838, 839], "elabor": 838, "struggl": 838, "assigne": 838, "status": 838, "central": [838, 855, 867], "relevant_submodul": 838, "roadmap": [838, 848], "deem": [838, 861], "subtask": 838, "clearer": [838, 853, 862], "backend_nam": [838, 845, 849, 850, 852, 856, 857, 858], "rare": [838, 850, 871], "button": [838, 839, 840, 854], "centr": 838, "predetermin": 838, "superset": [838, 842, 857, 860, 871], "happi": [839, 854, 871], "your_usernam": [839, 854], "your_fold": [839, 854], "enter": [839, 840, 844, 849, 850, 854, 856, 858], "sync": [839, 843, 854], "nutshel": [839, 856], "hook": [839, 855, 863], "lint": [839, 842], "succe": [839, 879], "whatev": [839, 847, 871], "elig": [839, 841], "student": 839, "licens": 839, "remind": 839, "expir": 839, "profession": 839, "trial": 839, "jetbrain": 839, "month": [839, 876], "bui": 839, "paid": 839, "rapid": [839, 883], "pace": 839, "person": [839, 840], "perhap": [839, 871], "conda": 839, "ivy_dev": [839, 840], "icon": [839, 840, 854], "panel": 839, "vscode": [839, 854], "palett": 839, "ctrl": [839, 840], "mac": [839, 840], "intel": 839, "m1": 839, "optional_apple_silicon_1": 839, "optional_apple_silicon_2": 839, "array_api_test": [839, 840, 843, 854], "test_array_api": [839, 840, 843, 854, 864], "suit": [839, 842, 843, 848, 854, 863, 864, 883], "cmd": 839, "bat": [839, 840], "virtualenv": 839, "tick": [839, 840, 848], "nz2": 839, "openssl": 839, "libssl1": 839, "1_1": 839, "1f": 839, "1ubuntu2": 839, "20_amd64": 839, "deb": 839, "dpkg": 839, "mitig": 839, "desktop": [839, 854], "powershel": 839, "admin": 839, "menu": [839, 854], "introspect": 839, "dialog": 839, "persist": 839, "earlier": [839, 840, 849, 865], "virtualis": 839, "bio": 839, "dropdown": [839, 848], "dockerfil": 839, "ca": 839, "certif": 839, "gnupg": 839, "lsb": 839, "keyr": 839, "fssl": 839, "gpg": 839, "dearmor": 839, "echo": [839, 848], "arch": 839, "lsb_releas": 839, "ce": 839, "cli": 839, "containerd": 839, "systemctl": 839, "softwar": [839, 840], "press": [839, 840], "4a": 839, "socket": 839, "rwx": 839, "sock": 839, "pid": 839, "editor": 839, "pytest": [839, 840, 843, 848, 854, 858, 864], "keyboard": 839, "screenshot": 839, "pop": [839, 854], "test_elementwis": 839, "shell": [839, 840, 843, 848], "setup_test": 839, "run_ivy_core_test": 839, "run_ivy_nn_test": 839, "run_ivy_stateful_test": 839, "run_test": [839, 848], "test_depend": 839, "test_ivy_cor": 839, "test_ivy_nn": 839, "test_ivy_st": 839, "unix": 839, "test_": [839, 862], "test_cor": [839, 840, 862], "offici": [839, 849, 869], "wish": [839, 861], "ivy_nn": 839, "ivy_st": 839, "header": [839, 840, 863], "arrow": 839, "test_stat": 839, "test_submodule_nam": 839, "test_function_nam": 839, "debugg": 839, "studio": [839, 854, 864], "afterward": 839, "background": [839, 846, 854, 883], "overlap": [839, 848, 854, 865, 867, 884], "test_file_path": [839, 854], "test_fn_nam": [839, 854], "engin": [839, 876, 883], "devcontain": 839, "comma": 839, "postcreatecommand": 839, "post_create_command": 839, "poststartcommand": 839, "safe": [839, 861], "containerworkspacefold": 839, "reopen": 839, "test_fle_path": 839, "slash": 839, "isol": [839, 840, 884], "container": 839, "intens": 839, "headach": 839, "arm": [839, 840], "vm": [839, 848], "azur": 839, "cloud": [839, 848], "favourit": 839, "theme": [839, 846], "ipad": 839, "browser": [839, 846], "quota": 839, "requisit": 839, "pane": [839, 840, 848], "dockerfilegpu": 839, "ivv": 839, "multiv": 839, "multivers": [839, 865], "dockerfilemultivers": 839, "dockerhub": 839, "upto": [839, 840], "launch": 839, "kindli": [839, 863], "guidelin": 839, "colour": 839, "chanc": 839, "troubleshoot": 839, "ever": 839, "flask": [839, 854], "toolbar": [839, 840, 854], "_array_modul": [839, 843, 854], "refresh": [839, 854], "pytestarg": [839, 854], "unittesten": [839, 854], "pytesten": [839, 854], "autotestdiscoveronsaveen": [839, 854], "conftest": 839, "serv": [839, 840, 844, 847, 856, 857, 861, 862, 864, 867, 873, 876], "aren": [839, 849], "available_config": 839, "cp310": 839, "x86": 839, "newer": [839, 864], "meantim": 839, "suffici": [839, 851, 861, 864], "bear": [839, 844, 847, 849, 861], "tendenc": 840, "land": 840, "unrel": 840, "fly": [840, 883], "internship": 840, "suspect": 840, "iii": 840, "issue_numb": 840, "12345": 840, "rememb": 840, "respond": 840, "dai": [840, 855], "freed": 840, "situat": [840, 848, 869], "obvious": [840, 848], "hypothet": 840, "frustrat": 840, "delai": [840, 879], "busi": 840, "inact": 840, "unfairli": 840, "investig": 840, "name_of_your_branch": 840, "date": [840, 843], "complic": [840, 862, 869], "merge_with_upstream": 840, "abort": 840, "tediou": [840, 851, 867], "stash": [840, 855], "reinstat": 840, "uncommit": 840, "unstag": [840, 855], "untrack": 840, "atlassian": 840, "wrote": 840, "piec": [840, 844, 857, 858, 870, 879, 882], "blame": 840, "eg": 840, "week": 840, "grep": 840, "commit_id": 840, "handi": 840, "histori": 840, "approv": 840, "someon": [840, 871], "hash": 840, "cancel": 840, "speedup": 840, "unavail": 840, "tickbox": 840, "intent": [840, 860], "discourag": 840, "adopt": [840, 844, 856, 867, 883], "philosophi": 840, "infrequ": 840, "earli": [840, 883], "wast": [840, 848], "spot": [840, 851, 857], "mistak": 840, "mountain": 840, "advoc": [840, 871], "session": [840, 883], "beauti": 840, "care": [840, 850, 861, 867], "undo": 840, "stress": 840, "nifti": 840, "reassur": 840, "local_path_to_ivi": 840, "subfold": [840, 862, 864, 865], "dep": 840, "fresh": 840, "arsen": 840, "exec": 840, "ivy_contain": 840, "test_imag": 840, "test_random_crop": 840, "test_creation_funct": 840, "test_arang": 840, "cursor": 840, "alt": 840, "breakpoint": 840, "gutter": 840, "caret": 840, "f8": 840, "f9": 840, "Into": 840, "f7": 840, "smart": 840, "fragment": [840, 875, 876, 882], "wherein": [840, 857, 864], "facilit": [841, 876], "embark": 841, "innov": 841, "door": [841, 871], "elev": 841, "opportun": 841, "testament": [841, 863], "stone": 841, "gift": 841, "acquir": 841, "peak": 841, "privileg": 841, "bounti": 841, "cash": 841, "delight": 841, "weed": [842, 868], "tour": 842, "formatt": [842, 855], "conjunct": 843, "establish": 843, "unconnect": 843, "strang": 843, "test_linalg": [843, 862], "test_set_funct": 843, "test_signatur": 843, "excess": [843, 845, 851], "array_modul": 843, "vv": 843, "test_manipulation_funct": 843, "test_concat": [843, 864], "nb": 843, "liber": 843, "______________________": 843, "test_remaind": 843, "_______________________": 843, "test_operators_and_elementwise_funct": 843, "1264": 843, "1277": 843, "binary_param_assert_against_refimpl": 843, "ctx": 843, "620": 843, "binary_assert_against_refimpl": 843, "scalar_o": 843, "17304064": 843, "binaryparamcontext": 843, "axic42baaowcnp": 843, "rumwmabaear0": 843, "make_binary_param": 843, "numeric_dtyp": 843, "left_strat": 843, "left_sym": 843, "right_strat": 843, "right_sym": 843, "right_is_scalar": 843, "binary_param_assert_dtyp": 843, "binary_param_assert_shap": 843, "recreat": 843, "unexpectedli": 843, "discrep": [843, 862], "test_asarray_arrai": 843, "test_floor_divid": 843, "health": 843, "test_iop": 843, "__imod__": 843, "isequ": 843, "test_matrix_norm": 843, "alter": 843, "tweak": 843, "array_api_methods_to_test": 843, "test_special_cas": 843, "__ipow__": 843, "is_integ": 843, "easier": [843, 844, 845, 849, 862, 865, 873, 876, 883], "revisit": [843, 856], "_data": [844, 860, 861], "organiz": [844, 847, 861], "underpin": [844, 847, 869, 870], "programmat": [844, 847, 884], "backup": [844, 846, 847], "accident": [844, 847, 861], "absent": [844, 847], "auto": [844, 846, 847, 855], "__mul__": [844, 847, 851, 856, 867], "throw": [844, 849, 850, 853, 854, 883], "imposs": 844, "inputs_to_native_arrai": [844, 857, 858], "outputs_to_ivy_arrai": [844, 849, 850, 856, 857, 858], "secondli": [844, 849], "__ivy_array_function__": 844, "__torch_function__": 844, "myarrai": 844, "handled_funct": 844, "notimpl": 844, "issubclass": 844, "enough": [844, 848, 849, 850, 864], "ivy_funct": 844, "my_ab": 844, "my_arrai": 844, "implicit_backend": [845, 869], "__dict__": [845, 860, 869], "ivy_original_dict": [845, 869], "fallback": 845, "live": [845, 846, 849], "dlpack": 845, "set_dynamic_backend": 845, "unset_dynamic_backend": 845, "dynamic_backend_a": 845, "set_": 845, "unset_": 845, "backend_handl": 845, "requires_grad": 845, "memory_format": 845, "preserve_format": 845, "weren": 845, "vast": [845, 849, 883], "minor": [845, 867, 871], "fn_name_v_1p12_and_abov": 845, "fn_name_v_1p01_to_1p1": 845, "heavili": [846, 858, 871], "conf": 846, "cleanup": 846, "readm": [846, 871], "maxdepth": 846, "caption": 846, "related_work": 846, "deep_div": 846, "glossari": 846, "autosummari": 846, "top_functional_toc": 846, "restructuredtext": 846, "discov": [846, 849], "ivy_toctree_caption_map": 846, "unfortun": [846, 855], "linker": 846, "foo": 846, "discussion_channel_map": 846, "1000043690254946374": 846, "1000043749088436315": 846, "forum": 846, "seri": [846, 849, 861, 864, 883], "discussion_paragraph": 846, "discord_link": 846, "channel_link": 846, "gg": 846, "uyrmypxmqq": 846, "799879767196958751": 846, "channel_id": 846, "autoskippablemethod": 846, "skippable_method_attribut": 846, "__qualname__": 846, "autodoc": 846, "__doc__": 846, "autoivydata": 846, "mutual": [847, 857], "containerwithelementwis": 847, "__repr__": 847, "__getattr__": [847, 879], "__setattr__": [847, 879], "__contains__": 847, "__getstate__": 847, "__setstate__": 847, "unpickl": 847, "num_dim": [847, 869], "restrict": [847, 848, 861, 870, 879], "enforc": 847, "lefthand": 847, "righthand": 847, "handle_nest": [847, 856, 857, 858, 869], "absenc": [847, 856, 883], "implicitli": [847, 859, 864, 869], "log_pr": [847, 857, 860], "intuit": [847, 864, 875], "chronolog": 847, "concurr": [847, 848, 857, 883], "despit": [847, 849, 850, 862, 870, 883], "__list__": 847, "whatsoev": [847, 857, 873], "children": 847, "shallowest": 847, "deepest": 847, "rollback": 848, "incorpor": [848, 862, 883], "techniqu": 848, "triplet": 848, "test_torch": [848, 862], "test_tensor": [848, 862], "test_torch_instance_arctan_": 848, "12500": 848, "daili": 848, "huge": [848, 874, 883], "shoot": 848, "_reduce_loss": [848, 857, 860], "test_nn": 848, "test_loss": 848, "test_binary_cross_entropy_with_logit": 848, "test_cross_entropi": 848, "test_binary_cross_entropi": 848, "test_sparse_cross_entropi": 848, "test_loss_funct": 848, "test_torch_binary_cross_entropi": 848, "test_torch_cross_entropi": 848, "binary_cross_entropy_with_logit": 848, "torch_binary_cross_entropi": 848, "torch_cross_entropi": 848, "readthedoc": 848, "pedagog": 848, "f_1": 848, "t_1": 848, "t_3": 848, "t_7": 848, "t_": 848, "f_m": 848, "cyclic": 848, "intellig": [848, 864], "tests_fil": 848, "file_nam": [848, 864, 865], "tests_lin": 848, "correspondingli": 848, "tests_to_run": 848, "determine_tests_lin": 848, "mongodb": 848, "mechan": [848, 871], "secret": 848, "db": 848, "ssh_deploy_kei": 848, "suffic": [848, 858, 864], "massiv": 848, "yml": 848, "felicit": 848, "clone_map": 848, "deploy_kei": 848, "user_email": 848, "user_nam": 848, "target_branch": 848, "github_serv": 848, "deploy_key_fil": 848, "ssh_known_hosts_fil": 848, "known_host": 848, "keyscan": 848, "git_ssh_command": 848, "userknownhostsfil": 848, "email": 848, "methodologi": 848, "master1": 848, "restructur": 848, "_map": 848, "t_2": 848, "t_n": 848, "index_map": 848, "test_map": 848, "snowbal": 848, "recalibr": 848, "workflow_dispatch": 848, "cron": 848, "saturdai": 848, "night": 848, "pm": 848, "gut": 848, "lesser": [848, 853], "lol": 848, "hour": 848, "cater": [848, 863, 875], "master2": 848, "master32": 848, "synchron": 848, "runner2": 848, "corrupt": 848, "decoupl": 848, "150": 848, "cycl": [848, 864], "yellow": 848, "queu": 848, "redirect": 848, "book": 848, "onrend": 848, "jo": 848, "ran": 848, "clickabl": 848, "all_dtyp": 849, "all_numeric_dtyp": 849, "all_int_dtyp": 849, "all_float_dtyp": 849, "replic": [849, 859, 860, 861], "thirdli": 849, "native_float32": 849, "importantli": [849, 869], "arguabl": [849, 850, 861], "jaxarrai": [849, 850, 853, 856, 860, 865, 869], "_handle_0_dim_output": 849, "subtli": [849, 860], "promote_types_frontend_nam": 849, "promote_types_of_frontend_name_input": 849, "frontend_nam": 849, "upcast": 849, "nearli": [849, 856, 858, 883], "downcast": 849, "footprint": 849, "concret": 849, "aris": [849, 855, 871], "utterli": 849, "meant": [849, 851, 860], "twice": 849, "disadvantag": 849, "relax": 849, "f64": 849, "unwant": 849, "primaci": 849, "resembl": 849, "compound": 849, "infer_dtyp": [849, 850, 856, 858], "settabl": [849, 850], "handle_out_argu": [849, 850, 856, 857, 858, 860, 869], "infer_devic": [849, 850, 856, 858], "deleg": 849, "shape_to_tupl": 849, "with_supported_dtyp": 849, "unment": 849, "_cast_for_unary_op": [849, 857, 860], "target_typ": 849, "syntax": [849, 875, 883], "unsupported_dtyp": 849, "supported_dtypes_and_devic": 849, "with_unsupported_device_and_dtyp": 849, "globals_getter_func": 849, "f2": 849, "lack": [849, 860, 875, 883], "mandat": [849, 860, 864, 865], "confus": [849, 853, 860, 867, 873], "inconsist": [849, 853, 859], "is_nan": 849, "supported_dtyp": 849, "anytim": 849, "84530": 849, "unwarr": 849, "risk": 849, "needlessli": 849, "bloat": 849, "undergo": [849, 871], "unsupported_devic": 849, "supported_devic": 849, "downsid": 849, "coverag": [849, 864], "undesir": 849, "accomplish": 849, "upcast_data_typ": 849, "downcast_data_typ": 849, "crosscast_data_typ": 849, "cast_data_typ": 849, "downcast_data_dtyp": 849, "vice": 849, "versa": 849, "till": 849, "crosscast": 849, "exmp1": 849, "watch": [849, 861], "handle_numpy_arrays_in_specific_backend": [849, 856], "cate": 849, "understood": 849, "consumpt": 849, "dual": 850, "categor": [850, 857, 861], "_handle_except": [850, 853], "1013": 850, "_handle_nest": [850, 853], "905": 850, "_handle_out_argu": [850, 853], "441": 850, "_inputs_to_native_arrai": [850, 853], "new_arg": [850, 853], "new_kwarg": [850, 853], "_outputs_to_ivy_arrai": [850, 853], "358": 850, "_handle_array_funct": [850, 853], "_handle_device_shift": 850, "handle_device_shift": [850, 858], "device_shifting_dev": 850, "__enter__": 850, "__exit__": 850, "soft_devic": 850, "eight": 851, "op_nam": 851, "__r": 851, "unsurprisingli": 851, "recap": 851, "combinatori": 851, "okai": [851, 867, 869], "spec": [851, 852], "my_func": [851, 865], "some_flag": 851, "another_flag": 851, "jointli": 851, "5574077": 851, "1850398": 851, "5463025": 851, "8422884": 851, "91601413": 851, "9647598": 851, "3738229": 851, "1597457": 851, "0963247": 851, "9955841": 851, "3278579": 851, "asid": 851, "14254655": 851, "1578213": 851, "380515": 851, "trivial": [851, 860], "failing_fn_nam": 851, "onlin": [851, 852], "minutest": 851, "fault": [851, 883], "contrast": [852, 856, 861, 885], "preview": 852, "incorrectli": [852, 879], "needless": [852, 862], "renam": [852, 861], "judgment": 852, "operator_nam": 852, "succinct": 852, "docst": 852, "native_error": 853, "_combine_messag": 853, "truli": 853, "wrong": [853, 855, 858, 861, 867], "198": 853, "392": 853, "_handle_array_like_without_promot": 853, "805": 853, "432": 853, "349": 853, "other_test": 853, "523": 853, "_handle_numpy_out": 853, "396": 853, "_outputs_to_numpy_arrai": 853, "_inputs_to_ivy_arrays_np": 853, "ivy_arg": 853, "ivy_kwarg": 853, "453": 853, "_from_zero_dim_arrays_to_scalar": 853, "truth_value_test": 853, "visibl": 853, "unwieldi": 853, "squash": 853, "hide": [853, 879], "cleaner": 853, "caught": [853, 855], "rethrow": 853, "_print_traceback_histori": 853, "error_stack": 853, "axiserror": 853, "polici": [853, 858, 864, 866], "moreov": 853, "submoodul": 854, "test_jax_transpos": 854, "manipulaiton": 854, "test_jax": [854, 862], "test_numpi": [854, 862], "test_manipul": [854, 862, 864], "preconditionnotmet": 854, "densetensor": 854, "holder_": 854, "phi": 854, "dense_tensor_impl": 854, "array_and_ax": 854, "aaegbaegaqaaaaaaaaaaaaab": 854, "black": 855, "flake8": 855, "linter": 855, "autoflak": 855, "docformatt": 855, "pydocstyl": 855, "yaml": 855, "patch1687898304": 855, "8072": 855, "3516aed563": 855, "reformat": 855, "akshai": 855, "jain": 855, "gui": 855, "cryptic": 855, "garden": 855, "utc": 855, "didn": 855, "human": 855, "intervent": 855, "typo": 855, "ui": 855, "handle_array_like_without_promot": [856, 858], "to_native_arrays_and_back": [856, 858, 869], "handle_array_funct": [856, 858], "inputs_to_native_shap": [856, 858], "rational": [856, 860, 867], "__div__": [856, 867], "484": 856, "brittl": 856, "freeli": 856, "technic": [856, 860, 871, 883], "original_typ": 856, "cumbersom": 856, "hinder": [856, 875], "venn": 857, "diagram": 857, "light": [857, 865, 871, 873, 884], "maximis": 857, "encompass": 857, "partial_mixed_handl": [857, 858, 867], "handle_partial_mixed_funct": [857, 858, 867], "fn_decor": 857, "mixed_backend_wrapp": [857, 860], "to_add": 857, "to_skip": 857, "inputs_to_ivy_arrai": [857, 858], "modif": [857, 883], "briefli": [857, 864], "get_all_arrays_on_dev": 857, "outputs_to_ivy_shap": 858, "outputs_to_native_arrai": 858, "handle_view_index": [858, 860], "handle_view": [858, 860], "handle_rag": 858, "handle_backend_invalid": 858, "handle_nan": 858, "to_native_shapes_and_back": 858, "modern": 859, "inter_func": 859, "custom_grad_fn": 859, "args1": 859, "speak": 860, "val_n": 860, "base_idx": 860, "_manipulation_stack": 860, "base_flat": 860, "_view_ref": 860, "_update_view": 860, "contigu": 860, "c_contigu": 860, "ascontiguousarrai": 860, "copyto": 860, "_is_vari": 860, "tensor_scatter_nd_upd": 860, "is_vari": 860, "_update_torch_view": 860, "predominantli": [860, 865], "support_native_out": [860, 869], "_scalar_output_to_0d_arrai": 860, "_wrap_fn": 860, "dim0": 860, "dim1": 860, "res_floor": 860, "extent": [860, 861], "to_out_fn": 860, "add_wrapp": 860, "paradigm": [860, 871, 875, 883], "expans": [860, 875], "weak": 860, "_torch_bas": 860, "_torch_view_ref": 860, "_torch_manipul": 860, "weakli": 860, "adequ": 860, "tf_frontend": 861, "lax": [861, 862, 867, 869, 871], "torch_frontend": [861, 862], "numpy_frontend": 861, "jax_frontend": 861, "to_ivy_arrays_and_back": [861, 862], "fidel": 861, "algebra": [861, 883, 885], "dynamic": 861, "mimic": 861, "arithmetic_oper": 861, "handle_numpy_out": 861, "handle_numpy_dtyp": 861, "handle_numpy_cast": 861, "from_zero_dim_arrays_to_scalar": 861, "_add": 861, "same_kind": 861, "subok": [861, 862, 867], "promote_types_of_numpy_input": 861, "underscor": 861, "unhandl": 861, "trigonometric_funct": 861, "_tan": 861, "check_tensorflow_cast": 861, "raw_op": [861, 862], "map_raw_ops_alia": 861, "output_typ": 861, "kwargs_to_upd": 861, "pointwise_op": 861, "sensibl": 861, "ahead": [861, 865, 883], "reduce_logsumexp": 861, "logsumexp": 861, "trick": 861, "max_input_tensor": 861, "preferred_element_typ": 861, "languag": [861, 870, 873, 884], "finer": 861, "logicaland": 861, "np_frontend": 861, "_ivy_arrai": 861, "radd": 861, "_init_data": 861, "_process_str_data": 861, "_dtype": [861, 862], "_shape": 861, "govern": 861, "promote_types_of_": 861, "_input": 861, "promote_types_of_torch_input": [861, 862], "handle_numpy_casting_speci": 861, "new_fn": 861, "equiv": 861, "unsaf": 861, "array_type_test": 861, "_isfinit": 861, "organis": 861, "youtub": 861, "knowledg": [862, 876], "np_frontend_help": 862, "open_task": 862, "test_lax": 862, "test_oper": 862, "test_jax_tan": 862, "test_mathematical_funct": 862, "test_trigonometric_funct": 862, "dtypes_values_cast": 862, "dtypes_values_casting_dtyp": 862, "arr_func": 862, "get_num_positional_args_ufunc": 862, "test_numpy_tan": 862, "handle_where_and_array_bool": 862, "test_tensorflow": 862, "test_math": 862, "test_tensorflow_tan": 862, "test_pointwise_op": 862, "test_torch_tan": 862, "_fill_valu": 862, "test_glob": 862, "test_jax_ful": 862, "test_from_shape_or_valu": 862, "_input_fill_and_dtyp": 862, "dtype_and_input": 862, "dtype_to_cast": 862, "input_fill_dtyp": 862, "test_numpy_ful": 862, "test_raw_op": 862, "test_tensorflow_fil": 862, "test_creation_op": 862, "with_arrai": 862, "test_torch_ful": 862, "add_nois": 862, "all_clos": 862, "_get_dtype_and_matrix": 862, "test_torch_qr": 862, "frontend_q": 862, "frontend_r": 862, "walkthrough": 862, "comparison_op": 862, "test_comparison_op": 862, "test_torch_great": 862, "all_alias": 862, "test_ndarrai": 862, "test_numpy_instance_add__": 862, "test_tensorflow_instance_add": 862, "1e04": 862, "allow_infin": 862, "test_torch_instance_add": 862, "_arrays_idx_n_dtyp": 862, "surprisingli": 862, "closest_relevant_group": 862, "strive": [862, 864, 867, 871], "craft": [863, 864], "tailor": 863, "clariti": [863, 864, 867, 883], "weav": 863, "thrill": 863, "brim": 863, "stand": [863, 864], "landscap": [863, 876], "forese": 863, "refin": 863, "inquiri": 863, "fixtur": 864, "hit": [864, 879], "eleg": [864, 883], "unexplor": 864, "artifact": 864, "bespok": 864, "_array_or_typ": 864, "rigor": 864, "test_default_int_dtyp": 864, "print_hypothesis_exampl": 864, "custom_strategi": 864, "randomis": 864, "simplist": 864, "intricaci": 864, "glanc": 864, "one_of": 864, "datum": 864, "pipe": 864, "array_or_scal": 864, "len_of_arrai": 864, "test_add": 864, "test_gpu_is_avail": 864, "pretest": 864, "snippet": [864, 878], "frontend_test": 864, "frontend_method": 864, "criterion": 864, "valid_ax": 864, "hoc": 864, "11228": 864, "268": 864, "wherev": 864, "9622": 864, "28136": 864, "6375": 864, "12720": 864, "21354": 864, "900e": 864, "57384": 864, "25687": 864, "248": 864, "test_devic": 864, "array_shap": 864, "test_lay": 864, "some_sequ": 864, "arrays_valu": 864, "36418": 864, "21716926": 864, "none_or_list_of_float": 864, "get_prob": 864, "103515625e": 864, "099609375": 864, "probabilist": 864, "number_positional_argu": 864, "unreproduc": 864, "x_and_linear": 864, "is_torch_backend": 864, "x_shape": [864, 869], "weight_shap": 864, "bias_shap": 864, "ivy_np": 864, "valid_float_dtyp": 864, "test_demo": 864, "failing_test": 864, "shrink": 864, "prescrib": 864, "test_gelu": 864, "test_fil": 864, "notabl": [864, 883], "max_exampl": 864, "deadlin": 864, "weird": 864, "systemat": 864, "safeguard": 864, "inabl": 864, "test_result_typ": 864, "9090909090909091": 864, "judgement": 865, "some_namespac": 865, "some_backend": 865, "another_backend": 865, "refactor": 865, "ongo": 865, "check_fill_value_and_dtype_are_compat": 865, "_to_devic": 865, "shouldn": [865, 879], "pin": 865, "unpinn": 865, "culmin": 865, "unsett": 866, "array_significant_figur": 866, "array_decimal_valu": 866, "warning_level": 866, "nan_polici": 866, "stablest": 866, "constantli": 867, "answer": [867, 871], "contradict": 867, "entail": 867, "sacrif": 867, "jacfwd": 867, "jacrev": 867, "banner": 867, "expens": 867, "incredibli": [867, 871, 875], "price": 867, "pai": 867, "intrus": 867, "x_beta": 867, "equip": 867, "simplif": 867, "allevi": 867, "ineffici": [867, 871, 883], "fuse": 867, "hybrid": 867, "workaround": 867, "slip": 867, "radar": 867, "stumbl": 867, "syntact": 869, "power_seq": 869, "sparse_funct": 869, "_determine_backend_from_arg": 869, "importlib": 869, "_backend_dict": 869, "x_flat": 869, "wi": 869, "wi_x": 869, "wii_x": 869, "wif_x": 869, "wig_x": 869, "wio_x": 869, "wh": 869, "ht": 869, "ct": 869, "hts_list": 869, "wii_xt": 869, "wif_xt": 869, "wig_xt": 869, "wio_xt": 869, "htm1": 869, "ctm1": 869, "wh_htm1": 869, "whi_htm1": 869, "whf_htm1": 869, "whg_htm1": 869, "who_htm1": 869, "ft": 869, "ot": 869, "reliabl": 869, "sacrific": 869, "_linear": 870, "tfnetwork": 870, "translated_output": 870, "pure_ivi": 870, "pure_torch": 870, "unclean": 870, "wx": 870, "temp": 870, "ivy_func": 870, "emphas": 870, "example_input": 870, "static_argnum": [870, 879], "static_argnam": [870, 879], "matur": [871, 883], "doubt": 871, "grate": 871, "probe": 871, "lock": 871, "dex": 871, "primit": [871, 883], "tricki": [871, 873], "tight": 871, "dispatch": [871, 883], "ast": 871, "autodiff": 871, "shine": 871, "merci": 871, "compet": [871, 883], "parallelis": 871, "spmd": 871, "mixtur": 871, "expert": 871, "sophist": 871, "depart": 871, "hundr": 871, "broadli": 871, "supplementari": 871, "reusabl": [871, 883], "fanci": [871, 883], "fusion": 871, "lose": 871, "pmap": 871, "eventu": 871, "supplement": 871, "backdoor": 871, "callback": 871, "somewhat": [871, 883], "outsourc": 871, "appl": 872, "silicon": 872, "ivy_root": 872, "asap": 872, "nail": 873, "scientist": 873, "handler": 873, "correl": 873, "con": 875, "renown": 875, "traction": [875, 883], "invest": 875, "worsen": 875, "mlx": 875, "exemplifi": 875, "diversif": 875, "painless": 875, "interoper": [876, 883, 885], "divers": [876, 885], "downstream": 876, "consequ": 876, "colleagu": 876, "collabor": 876, "constrain": 876, "prototyp": [876, 883], "legaci": 876, "painstak": 876, "debug_mod": 878, "lazygraph": [878, 879, 881], "rough": 878, "transformed_with_st": 878, "bigger": 878, "hf": 878, "resnetforimageclassif": [878, 879], "publicli": [879, 881], "logger": 879, "arg_stateful_idx": 879, "kwarg_stateful_idx": 879, "include_gener": 879, "array_cach": 879, "return_backend_traced_fn": 879, "sum_j": 879, "traced_fn": 879, "impos": 879, "comp_func": 879, "bake": 879, "cont": 879, "new_attribut": 879, "wip": 879, "resnet50": 879, "breed": 879, "traced_graph": 879, "predicted_label": 879, "methodtyp": 880, "functiontyp": 880, "transpile_kwarg": 881, "transpiled_func": 881, "unified_func": 881, "one_lin": 881, "onnx": 882, "acycl": [882, 884], "promin": 883, "abbrevi": 883, "laboratori": 883, "proprietari": 883, "mathwork": 883, "commerci": 883, "1984": 883, "toolbox": 883, "mupad": 883, "simulink": 883, "graphic": 883, "simul": 883, "million": 883, "worldwid": 883, "scienc": 883, "econom": 883, "2001": 883, "od": 883, "solver": 883, "cython": 883, "friendli": 883, "2002": 883, "lua": 883, "luajit": 883, "idiap": 883, "epfl": 883, "2005": 883, "numarrai": 883, "cpython": 883, "partli": 883, "2007": 883, "forest": 883, "boost": 883, "dbscan": 883, "inbuilt": 883, "esqu": 883, "aesara": 883, "2012": 883, "polymorph": 883, "mpi": 883, "openmp": 883, "glue": 883, "jaot": 883, "nasa": 883, "cern": 883, "climat": 883, "allianc": 883, "influenti": 883, "2014": 883, "scala": 883, "ship": 883, "forgiv": 883, "2015": 883, "cupi": 883, "decemb": 883, "announc": 883, "mainten": 883, "meaning": 883, "hierarch": 883, "2016": 883, "imper": 883, "amazon": 883, "cognit": 883, "grade": 883, "dnn": 883, "backpropag": 883, "succumb": 883, "came": 883, "monitor": 883, "hobbyist": 883, "tremend": 883, "gear": 883, "batteri": 883, "principl": 883, "zygot": 883, "jl": 883, "workload": 883, "daggerflux": 883, "frontier": 883, "hessian": 883, "2018": 883, "lightweight": 883, "shortcom": 883, "barrier": 883, "inexperienc": 883, "underdevelop": 883, "fanat": 883, "ounc": 883, "infanc": 883, "nich": 883, "mobil": 883, "lite": 883, "enterpris": 883, "reinvent": 883, "inertia": 883, "creator": 883, "paszk": 883, "spend": 883, "hi": 883, "bulk": 883, "haskel": 883, "inevit": 884, "sit": 884, "dataflow": 884, "trace_modul": 884, "scriptfunct": 884, "scriptmodul": 884, "fake": 884, "proxi": 884, "graphmodul": 884, "holist": 885, "ultmat": 885, "broader": 885}, "objects": {"ivy.Array": [[234, 0, 1, "", "abs"], [235, 0, 1, "", "acos"], [236, 0, 1, "", "acosh"], [630, 0, 1, "", "adam_step"], [631, 0, 1, "", "adam_update"], [403, 0, 1, "", "adaptive_avg_pool1d"], [404, 0, 1, "", "adaptive_avg_pool2d"], [405, 0, 1, "", "adaptive_max_pool2d"], [406, 0, 1, "", "adaptive_max_pool3d"], [237, 0, 1, "", "add"], [438, 0, 1, "", "adjoint"], [786, 0, 1, "", "all"], [549, 0, 1, "", "all_equal"], [348, 0, 1, "", "allclose"], [349, 0, 1, "", "amax"], [350, 0, 1, "", "amin"], [238, 0, 1, "", "angle"], [787, 0, 1, "", "any"], [763, 0, 1, "", "argmax"], [764, 0, 1, "", "argmin"], [772, 0, 1, "", "argsort"], [765, 0, 1, "", "argwhere"], [552, 0, 1, "", "array_equal"], [474, 0, 1, "", "as_strided"], [141, 0, 1, "", "asarray"], [239, 0, 1, "", "asin"], [240, 0, 1, "", "asinh"], [553, 0, 1, "", "assert_supports_inplace"], [475, 0, 1, "", "associative_scan"], [166, 0, 1, "", "astype"], [241, 0, 1, "", "atan"], [242, 0, 1, "", "atan2"], [243, 0, 1, "", "atanh"], [476, 0, 1, "", "atleast_1d"], [477, 0, 1, "", "atleast_2d"], [478, 0, 1, "", "atleast_3d"], [408, 0, 1, "", "avg_pool1d"], [409, 0, 1, "", "avg_pool2d"], [410, 0, 1, "", "avg_pool3d"], [516, 0, 1, "", "batch_norm"], [439, 0, 1, "", "batched_outer"], [523, 0, 1, "", "bernoulli"], [524, 0, 1, "", "beta"], [351, 0, 1, "", "binarizer"], [712, 0, 1, "", "binary_cross_entropy"], [535, 0, 1, "", "bincount"], [244, 0, 1, "", "bitwise_and"], [245, 0, 1, "", "bitwise_invert"], [246, 0, 1, "", "bitwise_left_shift"], [247, 0, 1, "", "bitwise_or"], [248, 0, 1, "", "bitwise_right_shift"], [249, 0, 1, "", "bitwise_xor"], [326, 0, 1, "", "blackman_window"], [167, 0, 1, "", "broadcast_arrays"], [168, 0, 1, "", "broadcast_to"], [169, 0, 1, "", "can_cast"], [250, 0, 1, "", "ceil"], [309, 0, 1, "", "celu"], [683, 0, 1, "", "cholesky"], [718, 0, 1, "", "clip"], [555, 0, 1, "", "clip_matrix_norm"], [556, 0, 1, "", "clip_vector_norm"], [482, 0, 1, "", "column_stack"], [719, 0, 1, "", "concat"], [483, 0, 1, "", "concat_from_sequence"], [440, 0, 1, "", "cond"], [352, 0, 1, "", "conj"], [720, 0, 1, "", "constant_pad"], [666, 0, 1, "", "conv1d"], [667, 0, 1, "", "conv1d_transpose"], [668, 0, 1, "", "conv2d"], [669, 0, 1, "", "conv2d_transpose"], [670, 0, 1, "", "conv3d"], [671, 0, 1, "", "conv3d_transpose"], [143, 0, 1, "", "copy_array"], [353, 0, 1, "", "copysign"], [536, 0, 1, "", "corrcoef"], [251, 0, 1, "", "cos"], [252, 0, 1, "", "cosh"], [354, 0, 1, "", "count_nonzero"], [537, 0, 1, "", "cov"], [684, 0, 1, "", "cross"], [713, 0, 1, "", "cross_entropy"], [538, 0, 1, "", "cummax"], [539, 0, 1, "", "cummin"], [776, 0, 1, "", "cumprod"], [777, 0, 1, "", "cumsum"], [411, 0, 1, "", "dct"], [559, 0, 1, "", "default"], [253, 0, 1, "", "deg2rad"], [674, 0, 1, "", "depthwise_conv2d"], [685, 0, 1, "", "det"], [211, 0, 1, "", "dev"], [412, 0, 1, "", "dft"], [686, 0, 1, "", "diag"], [441, 0, 1, "", "diagflat"], [687, 0, 1, "", "diagonal"], [355, 0, 1, "", "diff"], [356, 0, 1, "", "digamma"], [525, 0, 1, "", "dirichlet"], [254, 0, 1, "", "divide"], [442, 0, 1, "", "dot"], [675, 0, 1, "", "dropout"], [413, 0, 1, "", "dropout1d"], [414, 0, 1, "", "dropout2d"], [415, 0, 1, "", "dropout3d"], [484, 0, 1, "", "dsplit"], [485, 0, 1, "", "dstack"], [177, 0, 1, "", "dtype"], [443, 0, 1, "", "eig"], [689, 0, 1, "", "eigh"], [444, 0, 1, "", "eigh_tridiagonal"], [445, 0, 1, "", "eigvals"], [690, 0, 1, "", "eigvalsh"], [560, 0, 1, "", "einops_rearrange"], [561, 0, 1, "", "einops_reduce"], [562, 0, 1, "", "einops_repeat"], [778, 0, 1, "", "einsum"], [310, 0, 1, "", "elu"], [416, 0, 1, "", "embedding"], [145, 0, 1, "", "empty_like"], [255, 0, 1, "", "equal"], [256, 0, 1, "", "erf"], [357, 0, 1, "", "erfc"], [358, 0, 1, "", "erfinv"], [563, 0, 1, "", "exists"], [257, 0, 1, "", "exp"], [258, 0, 1, "", "exp2"], [486, 0, 1, "", "expand"], [721, 0, 1, "", "expand_dims"], [259, 0, 1, "", "expm1"], [327, 0, 1, "", "eye_like"], [417, 0, 1, "", "fft"], [418, 0, 1, "", "fft2"], [487, 0, 1, "", "fill_diagonal"], [179, 0, 1, "", "finfo"], [359, 0, 1, "", "fix"], [488, 0, 1, "", "flatten"], [722, 0, 1, "", "flip"], [489, 0, 1, "", "fliplr"], [490, 0, 1, "", "flipud"], [360, 0, 1, "", "float_power"], [260, 0, 1, "", "floor"], [261, 0, 1, "", "floor_divide"], [361, 0, 1, "", "fmax"], [262, 0, 1, "", "fmin"], [263, 0, 1, "", "fmod"], [491, 0, 1, "", "fold"], [564, 0, 1, "", "fourier_encode"], [362, 0, 1, "", "frexp"], [147, 0, 1, "", "from_dlpack"], [150, 0, 1, "", "full_like"], [526, 0, 1, "", "gamma"], [567, 0, 1, "", "gather"], [568, 0, 1, "", "gather_nd"], [264, 0, 1, "", "gcd"], [123, 0, 1, "", "gelu"], [446, 0, 1, "", "general_inner_product"], [571, 0, 1, "", "get_num_dims"], [363, 0, 1, "", "gradient"], [634, 0, 1, "", "gradient_descent_update"], [265, 0, 1, "", "greater"], [266, 0, 1, "", "greater_equal"], [517, 0, 1, "", "group_norm"], [311, 0, 1, "", "hardshrink"], [312, 0, 1, "", "hardsilu"], [124, 0, 1, "", "hardswish"], [313, 0, 1, "", "hardtanh"], [573, 0, 1, "", "has_nans"], [492, 0, 1, "", "heaviside"], [447, 0, 1, "", "higher_order_moment"], [466, 0, 1, "", "hinge_embedding_loss"], [540, 0, 1, "", "histogram"], [493, 0, 1, "", "hsplit"], [494, 0, 1, "", "hstack"], [467, 0, 1, "", "huber_loss"], [364, 0, 1, "", "hypot"], [495, 0, 1, "", "i0"], [421, 0, 1, "", "idct"], [422, 0, 1, "", "ifft"], [423, 0, 1, "", "ifftn"], [541, 0, 1, "", "igamma"], [182, 0, 1, "", "iinfo"], [267, 0, 1, "", "imag"], [448, 0, 1, "", "initialize_tucker"], [691, 0, 1, "", "inner"], [575, 0, 1, "", "inplace_decrement"], [576, 0, 1, "", "inplace_increment"], [577, 0, 1, "", "inplace_update"], [518, 0, 1, "", "instance_norm"], [425, 0, 1, "", "interpolate"], [692, 0, 1, "", "inv"], [579, 0, 1, "", "is_array"], [185, 0, 1, "", "is_bool_dtype"], [187, 0, 1, "", "is_float_dtype"], [189, 0, 1, "", "is_int_dtype"], [580, 0, 1, "", "is_ivy_array"], [581, 0, 1, "", "is_ivy_container"], [583, 0, 1, "", "is_native_array"], [191, 0, 1, "", "is_uint_dtype"], [365, 0, 1, "", "isclose"], [268, 0, 1, "", "isfinite"], [584, 0, 1, "", "isin"], [269, 0, 1, "", "isinf"], [270, 0, 1, "", "isnan"], [271, 0, 1, "", "isreal"], [586, 0, 1, "", "itemsize"], [468, 0, 1, "", "kl_div"], [450, 0, 1, "", "kron"], [469, 0, 1, "", "l1_loss"], [519, 0, 1, "", "l1_normalize"], [520, 0, 1, "", "l2_normalize"], [636, 0, 1, "", "lamb_update"], [637, 0, 1, "", "lars_update"], [756, 0, 1, "", "layer_norm"], [272, 0, 1, "", "lcm"], [366, 0, 1, "", "ldexp"], [125, 0, 1, "", "leaky_relu"], [367, 0, 1, "", "lerp"], [273, 0, 1, "", "less"], [274, 0, 1, "", "less_equal"], [530, 0, 1, "", "lexsort"], [368, 0, 1, "", "lgamma"], [676, 0, 1, "", "linear"], [151, 0, 1, "", "linspace"], [275, 0, 1, "", "log"], [276, 0, 1, "", "log10"], [277, 0, 1, "", "log1p"], [278, 0, 1, "", "log2"], [470, 0, 1, "", "log_poisson_loss"], [126, 0, 1, "", "log_softmax"], [279, 0, 1, "", "logaddexp"], [280, 0, 1, "", "logaddexp2"], [281, 0, 1, "", "logical_and"], [282, 0, 1, "", "logical_not"], [283, 0, 1, "", "logical_or"], [284, 0, 1, "", "logical_xor"], [314, 0, 1, "", "logit"], [315, 0, 1, "", "logsigmoid"], [152, 0, 1, "", "logspace"], [522, 0, 1, "", "lp_normalize"], [678, 0, 1, "", "lstm_update"], [454, 0, 1, "", "make_svd_non_negative"], [693, 0, 1, "", "matmul"], [496, 0, 1, "", "matricize"], [455, 0, 1, "", "matrix_exp"], [694, 0, 1, "", "matrix_norm"], [695, 0, 1, "", "matrix_power"], [696, 0, 1, "", "matrix_rank"], [697, 0, 1, "", "matrix_transpose"], [779, 0, 1, "", "max"], [426, 0, 1, "", "max_pool1d"], [427, 0, 1, "", "max_pool2d"], [428, 0, 1, "", "max_pool3d"], [429, 0, 1, "", "max_unpool1d"], [285, 0, 1, "", "maximum"], [780, 0, 1, "", "mean"], [542, 0, 1, "", "median"], [333, 0, 1, "", "mel_weight_matrix"], [153, 0, 1, "", "meshgrid"], [781, 0, 1, "", "min"], [286, 0, 1, "", "minimum"], [127, 0, 1, "", "mish"], [456, 0, 1, "", "mode_dot"], [369, 0, 1, "", "modf"], [497, 0, 1, "", "moveaxis"], [773, 0, 1, "", "msort"], [457, 0, 1, "", "multi_dot"], [679, 0, 1, "", "multi_head_attention"], [458, 0, 1, "", "multi_mode_dot"], [757, 0, 1, "", "multinomial"], [287, 0, 1, "", "multiply"], [288, 0, 1, "", "nan_to_num"], [543, 0, 1, "", "nanmean"], [544, 0, 1, "", "nanmedian"], [545, 0, 1, "", "nanmin"], [546, 0, 1, "", "nanprod"], [370, 0, 1, "", "nansum"], [154, 0, 1, "", "native_array"], [289, 0, 1, "", "negative"], [371, 0, 1, "", "nextafter"], [766, 0, 1, "", "nonzero"], [290, 0, 1, "", "not_equal"], [155, 0, 1, "", "one_hot"], [157, 0, 1, "", "ones_like"], [638, 0, 1, "", "optimizer_update"], [548, 0, 1, "", "optional_get_element"], [698, 0, 1, "", "outer"], [498, 0, 1, "", "pad"], [500, 0, 1, "", "partial_fold"], [501, 0, 1, "", "partial_tensor_to_vec"], [459, 0, 1, "", "partial_tucker"], [502, 0, 1, "", "partial_unfold"], [503, 0, 1, "", "partial_vec_to_tensor"], [723, 0, 1, "", "permute_dims"], [699, 0, 1, "", "pinv"], [527, 0, 1, "", "poisson"], [471, 0, 1, "", "poisson_nll_loss"], [291, 0, 1, "", "positive"], [292, 0, 1, "", "pow"], [316, 0, 1, "", "prelu"], [782, 0, 1, "", "prod"], [504, 0, 1, "", "put_along_axis"], [700, 0, 1, "", "qr"], [547, 0, 1, "", "quantile"], [293, 0, 1, "", "rad2deg"], [758, 0, 1, "", "randint"], [759, 0, 1, "", "random_normal"], [760, 0, 1, "", "random_uniform"], [294, 0, 1, "", "real"], [295, 0, 1, "", "reciprocal"], [377, 0, 1, "", "reduce"], [432, 0, 1, "", "reduce_window"], [128, 0, 1, "", "relu"], [317, 0, 1, "", "relu6"], [296, 0, 1, "", "remainder"], [724, 0, 1, "", "repeat"], [725, 0, 1, "", "reshape"], [194, 0, 1, "", "result_type"], [433, 0, 1, "", "rfft"], [434, 0, 1, "", "rfftn"], [726, 0, 1, "", "roll"], [505, 0, 1, "", "rot90"], [297, 0, 1, "", "round"], [682, 0, 1, "", "scaled_dot_product_attention"], [318, 0, 1, "", "scaled_tanh"], [591, 0, 1, "", "scatter_flat"], [592, 0, 1, "", "scatter_nd"], [774, 0, 1, "", "searchsorted"], [319, 0, 1, "", "selu"], [605, 0, 1, "", "shape"], [762, 0, 1, "", "shuffle"], [129, 0, 1, "", "sigmoid"], [298, 0, 1, "", "sign"], [372, 0, 1, "", "signbit"], [320, 0, 1, "", "silu"], [299, 0, 1, "", "sin"], [373, 0, 1, "", "sinc"], [300, 0, 1, "", "sinh"], [606, 0, 1, "", "size"], [436, 0, 1, "", "sliding_window"], [701, 0, 1, "", "slogdet"], [472, 0, 1, "", "smooth_l1_loss"], [473, 0, 1, "", "soft_margin_loss"], [506, 0, 1, "", "soft_thresholding"], [130, 0, 1, "", "softmax"], [131, 0, 1, "", "softplus"], [321, 0, 1, "", "softshrink"], [702, 0, 1, "", "solve"], [775, 0, 1, "", "sort"], [714, 0, 1, "", "sparse_cross_entropy"], [374, 0, 1, "", "sparsify_tensor"], [727, 0, 1, "", "split"], [301, 0, 1, "", "sqrt"], [302, 0, 1, "", "square"], [728, 0, 1, "", "squeeze"], [607, 0, 1, "", "stable_divide"], [608, 0, 1, "", "stable_pow"], [729, 0, 1, "", "stack"], [783, 0, 1, "", "std"], [437, 0, 1, "", "stft"], [640, 0, 1, "", "stop_gradient"], [609, 0, 1, "", "strides"], [303, 0, 1, "", "subtract"], [784, 0, 1, "", "sum"], [610, 0, 1, "", "supports_inplace_updates"], [703, 0, 1, "", "svd"], [461, 0, 1, "", "svd_flip"], [704, 0, 1, "", "svdvals"], [730, 0, 1, "", "swapaxes"], [507, 0, 1, "", "take"], [508, 0, 1, "", "take_along_axis"], [304, 0, 1, "", "tan"], [305, 0, 1, "", "tanh"], [323, 0, 1, "", "tanhshrink"], [462, 0, 1, "", "tensor_train"], [705, 0, 1, "", "tensordot"], [706, 0, 1, "", "tensorsolve"], [324, 0, 1, "", "threshold"], [325, 0, 1, "", "thresholded_relu"], [731, 0, 1, "", "tile"], [228, 0, 1, "", "to_device"], [612, 0, 1, "", "to_list"], [614, 0, 1, "", "to_numpy"], [615, 0, 1, "", "to_scalar"], [509, 0, 1, "", "top_k"], [707, 0, 1, "", "trace"], [306, 0, 1, "", "trapz"], [159, 0, 1, "", "tril"], [343, 0, 1, "", "trilu"], [510, 0, 1, "", "trim_zeros"], [160, 0, 1, "", "triu"], [307, 0, 1, "", "trunc"], [308, 0, 1, "", "trunc_divide"], [463, 0, 1, "", "truncated_svd"], [464, 0, 1, "", "tt_matrix_to_tensor"], [465, 0, 1, "", "tucker"], [511, 0, 1, "", "unflatten"], [512, 0, 1, "", "unfold"], [768, 0, 1, "", "unique_all"], [513, 0, 1, "", "unique_consecutive"], [769, 0, 1, "", "unique_counts"], [770, 0, 1, "", "unique_inverse"], [771, 0, 1, "", "unique_values"], [528, 0, 1, "", "unravel_index"], [344, 0, 1, "", "unsorted_segment_mean"], [345, 0, 1, "", "unsorted_segment_min"], [346, 0, 1, "", "unsorted_segment_sum"], [732, 0, 1, "", "unstack"], [628, 0, 1, "", "value_is_nan"], [708, 0, 1, "", "vander"], [785, 0, 1, "", "var"], [709, 0, 1, "", "vecdot"], [710, 0, 1, "", "vector_norm"], [711, 0, 1, "", "vector_to_skew_symmetric_matrix"], [514, 0, 1, "", "vsplit"], [515, 0, 1, "", "vstack"], [767, 0, 1, "", "where"], [375, 0, 1, "", "xlogy"], [733, 0, 1, "", "zero_pad"], [163, 0, 1, "", "zeros_like"], [376, 0, 1, "", "zeta"]], "ivy": [[650, 1, 1, "", "ArrayMode"], [646, 1, 1, "", "DefaultComplexDtype"], [647, 1, 1, "", "DefaultDevice"], [646, 1, 1, "", "DefaultDtype"], [646, 1, 1, "", "DefaultFloatDtype"], [646, 1, 1, "", "DefaultIntDtype"], [646, 1, 1, "", "DefaultUintDtype"], [400, 1, 1, "", "NativeSparseArray"], [645, 1, 1, "", "NestedSequence"], [650, 1, 1, "", "PreciseMode"], [647, 1, 1, "", "Profiler"], [400, 1, 1, "", "SparseArray"], [234, 2, 1, "", "abs"], [235, 2, 1, "", "acos"], [236, 2, 1, "", "acosh"], [651, 2, 1, "", "adam_step"], [651, 2, 1, "", "adam_update"], [403, 2, 1, "", "adaptive_avg_pool1d"], [404, 2, 1, "", "adaptive_avg_pool2d"], [405, 2, 1, "", "adaptive_max_pool2d"], [406, 2, 1, "", "adaptive_max_pool3d"], [237, 2, 1, "", "add"], [390, 2, 1, "", "adjoint"], [664, 2, 1, "", "all"], [650, 2, 1, "", "all_equal"], [657, 2, 1, "", "all_nested_indices"], [386, 2, 1, "", "allclose"], [386, 2, 1, "", "amax"], [386, 2, 1, "", "amin"], [238, 2, 1, "", "angle"], [664, 2, 1, "", "any"], [645, 2, 1, "", "arange"], [407, 2, 1, "", "area_interpolate"], [650, 2, 1, "", "arg_info"], [650, 2, 1, "", "arg_names"], [660, 2, 1, "", "argmax"], [660, 2, 1, "", "argmin"], [662, 2, 1, "", "argsort"], [660, 2, 1, "", "argwhere"], [645, 2, 1, "", "array"], [650, 2, 1, "", "array_equal"], [207, 2, 1, "", "as_ivy_dev"], [646, 2, 1, "", "as_ivy_dtype"], [208, 2, 1, "", "as_native_dev"], [646, 2, 1, "", "as_native_dtype"], [392, 2, 1, "", "as_strided"], [645, 2, 1, "", "asarray"], [239, 2, 1, "", "asin"], [240, 2, 1, "", "asinh"], [650, 2, 1, "", "assert_supports_inplace"], [392, 2, 1, "", "associative_scan"], [646, 2, 1, "", "astype"], [241, 2, 1, "", "atan"], [242, 2, 1, "", "atan2"], [243, 2, 1, "", "atanh"], [392, 2, 1, "", "atleast_1d"], [392, 2, 1, "", "atleast_2d"], [392, 2, 1, "", "atleast_3d"], [408, 2, 1, "", "avg_pool1d"], [409, 2, 1, "", "avg_pool2d"], [410, 2, 1, "", "avg_pool3d"], [395, 2, 1, "", "batch_norm"], [390, 2, 1, "", "batched_outer"], [396, 2, 1, "", "bernoulli"], [396, 2, 1, "", "beta"], [386, 2, 1, "", "binarizer"], [654, 2, 1, "", "binary_cross_entropy"], [401, 2, 1, "", "bincount"], [388, 2, 1, "", "bind_custom_gradient_function"], [244, 2, 1, "", "bitwise_and"], [245, 2, 1, "", "bitwise_invert"], [246, 2, 1, "", "bitwise_left_shift"], [247, 2, 1, "", "bitwise_or"], [248, 2, 1, "", "bitwise_right_shift"], [249, 2, 1, "", "bitwise_xor"], [326, 2, 1, "", "blackman_window"], [646, 2, 1, "", "broadcast_arrays"], [392, 2, 1, "", "broadcast_shapes"], [646, 2, 1, "", "broadcast_to"], [650, 2, 1, "", "cache_fn"], [646, 2, 1, "", "can_cast"], [250, 2, 1, "", "ceil"], [309, 2, 1, "", "celu"], [646, 2, 1, "", "check_float"], [392, 2, 1, "", "check_scalar"], [653, 2, 1, "", "cholesky"], [392, 2, 1, "", "choose"], [209, 2, 1, "", "clear_cached_mem_on_dev"], [655, 2, 1, "", "clip"], [650, 2, 1, "", "clip_matrix_norm"], [650, 2, 1, "", "clip_vector_norm"], [646, 2, 1, "", "closest_valid_dtype"], [644, 2, 1, "", "cmp_is"], [644, 2, 1, "", "cmp_isnot"], [392, 2, 1, "", "column_stack"], [645, 2, 1, "", "complex"], [655, 2, 1, "", "concat"], [392, 2, 1, "", "concat_from_sequence"], [390, 2, 1, "", "cond"], [386, 2, 1, "", "conj"], [655, 2, 1, "", "constant_pad"], [650, 2, 1, "", "container_types"], [652, 2, 1, "", "conv"], [652, 2, 1, "", "conv1d"], [652, 2, 1, "", "conv1d_transpose"], [652, 2, 1, "", "conv2d"], [652, 2, 1, "", "conv2d_transpose"], [652, 2, 1, "", "conv3d"], [652, 2, 1, "", "conv3d_transpose"], [652, 2, 1, "", "conv_general_dilated"], [652, 2, 1, "", "conv_general_transpose"], [645, 2, 1, "", "copy_array"], [657, 2, 1, "", "copy_nest"], [386, 2, 1, "", "copysign"], [401, 2, 1, "", "corrcoef"], [251, 2, 1, "", "cos"], [252, 2, 1, "", "cosh"], [386, 2, 1, "", "count_nonzero"], [401, 2, 1, "", "cov"], [653, 2, 1, "", "cross"], [654, 2, 1, "", "cross_entropy"], [401, 2, 1, "", "cummax"], [401, 2, 1, "", "cummin"], [663, 2, 1, "", "cumprod"], [663, 2, 1, "", "cumsum"], [650, 2, 1, "", "current_backend_str"], [411, 2, 1, "", "dct"], [650, 2, 1, "", "default"], [646, 2, 1, "", "default_complex_dtype"], [210, 2, 1, "", "default_device"], [646, 2, 1, "", "default_dtype"], [646, 2, 1, "", "default_float_dtype"], [646, 2, 1, "", "default_int_dtype"], [646, 2, 1, "", "default_uint_dtype"], [253, 2, 1, "", "deg2rad"], [652, 2, 1, "", "depthwise_conv2d"], [653, 2, 1, "", "det"], [211, 2, 1, "", "dev"], [212, 2, 1, "", "dev_util"], [412, 2, 1, "", "dft"], [653, 2, 1, "", "diag"], [390, 2, 1, "", "diagflat"], [653, 2, 1, "", "diagonal"], [386, 2, 1, "", "diff"], [386, 2, 1, "", "digamma"], [396, 2, 1, "", "dirichlet"], [254, 2, 1, "", "divide"], [390, 2, 1, "", "dot"], [652, 2, 1, "", "dropout"], [413, 2, 1, "", "dropout1d"], [414, 2, 1, "", "dropout2d"], [415, 2, 1, "", "dropout3d"], [392, 2, 1, "", "dsplit"], [392, 2, 1, "", "dstack"], [646, 2, 1, "", "dtype"], [646, 2, 1, "", "dtype_bits"], [657, 2, 1, "", "duplicate_array_index_chains"], [643, 6, 1, "", "e"], [390, 2, 1, "", "eig"], [653, 2, 1, "", "eigh"], [390, 2, 1, "", "eigh_tridiagonal"], [390, 2, 1, "", "eigvals"], [653, 2, 1, "", "eigvalsh"], [650, 2, 1, "", "einops_rearrange"], [650, 2, 1, "", "einops_reduce"], [650, 2, 1, "", "einops_repeat"], [663, 2, 1, "", "einsum"], [310, 2, 1, "", "elu"], [416, 2, 1, "", "embedding"], [645, 2, 1, "", "empty"], [645, 2, 1, "", "empty_like"], [255, 2, 1, "", "equal"], [256, 2, 1, "", "erf"], [386, 2, 1, "", "erfc"], [386, 2, 1, "", "erfinv"], [651, 2, 1, "", "execute_with_gradients"], [650, 2, 1, "", "exists"], [257, 2, 1, "", "exp"], [258, 2, 1, "", "exp2"], [392, 2, 1, "", "expand"], [655, 2, 1, "", "expand_dims"], [259, 2, 1, "", "expm1"], [645, 2, 1, "", "eye"], [327, 2, 1, "", "eye_like"], [417, 2, 1, "", "fft"], [418, 2, 1, "", "fft2"], [392, 2, 1, "", "fill_diagonal"], [646, 2, 1, "", "finfo"], [386, 2, 1, "", "fix"], [392, 2, 1, "", "flatten"], [655, 2, 1, "", "flip"], [392, 2, 1, "", "fliplr"], [392, 2, 1, "", "flipud"], [386, 2, 1, "", "float_power"], [260, 2, 1, "", "floor"], [261, 2, 1, "", "floor_divide"], [386, 2, 1, "", "fmax"], [262, 2, 1, "", "fmin"], [263, 2, 1, "", "fmod"], [392, 2, 1, "", "fold"], [656, 2, 1, "", "fomaml_step"], [644, 2, 1, "", "for_loop"], [650, 2, 1, "", "fourier_encode"], [386, 2, 1, "", "frexp"], [645, 2, 1, "", "from_dlpack"], [645, 2, 1, "", "frombuffer"], [645, 2, 1, "", "full"], [645, 2, 1, "", "full_like"], [213, 2, 1, "", "function_supported_devices"], [650, 2, 1, "", "function_supported_devices_and_dtypes"], [646, 2, 1, "", "function_supported_dtypes"], [214, 2, 1, "", "function_unsupported_devices"], [650, 2, 1, "", "function_unsupported_devices_and_dtypes"], [646, 2, 1, "", "function_unsupported_dtypes"], [396, 2, 1, "", "gamma"], [650, 2, 1, "", "gather"], [650, 2, 1, "", "gather_nd"], [264, 2, 1, "", "gcd"], [642, 2, 1, "", "gelu"], [390, 2, 1, "", "general_inner_product"], [419, 2, 1, "", "generate_einsum_equation"], [650, 2, 1, "", "get_all_arrays_in_memory"], [215, 2, 1, "", "get_all_ivy_arrays_on_dev"], [420, 2, 1, "", "get_interpolate_kernel"], [650, 2, 1, "", "get_item"], [650, 2, 1, "", "get_num_dims"], [650, 2, 1, "", "get_referrers_recursive"], [216, 2, 1, "", "gpu_is_available"], [651, 2, 1, "", "grad"], [386, 2, 1, "", "gradient"], [651, 2, 1, "", "gradient_descent_update"], [878, 2, 1, "", "graph_transpile"], [265, 2, 1, "", "greater"], [266, 2, 1, "", "greater_equal"], [395, 2, 1, "", "group_norm"], [328, 2, 1, "", "hamming_window"], [217, 2, 1, "", "handle_soft_device_variable"], [383, 2, 1, "", "hann_window"], [311, 2, 1, "", "hardshrink"], [312, 2, 1, "", "hardsilu"], [642, 2, 1, "", "hardswish"], [313, 2, 1, "", "hardtanh"], [650, 2, 1, "", "has_nans"], [392, 2, 1, "", "heaviside"], [390, 2, 1, "", "higher_order_moment"], [391, 2, 1, "", "hinge_embedding_loss"], [401, 2, 1, "", "histogram"], [392, 2, 1, "", "hsplit"], [392, 2, 1, "", "hstack"], [391, 2, 1, "", "huber_loss"], [386, 2, 1, "", "hypot"], [392, 2, 1, "", "i0"], [421, 2, 1, "", "idct"], [644, 2, 1, "", "if_else"], [422, 2, 1, "", "ifft"], [389, 2, 1, "", "ifftn"], [401, 2, 1, "", "igamma"], [646, 2, 1, "", "iinfo"], [267, 2, 1, "", "imag"], [657, 2, 1, "", "index_nest"], [383, 2, 1, "", "indices"], [643, 6, 1, "", "inf"], [646, 2, 1, "", "infer_default_dtype"], [390, 2, 1, "", "initialize_tucker"], [653, 2, 1, "", "inner"], [650, 2, 1, "", "inplace_arrays_supported"], [650, 2, 1, "", "inplace_decrement"], [650, 2, 1, "", "inplace_increment"], [650, 2, 1, "", "inplace_update"], [650, 2, 1, "", "inplace_variables_supported"], [657, 2, 1, "", "insert_into_nest_at_index"], [657, 2, 1, "", "insert_into_nest_at_indices"], [395, 2, 1, "", "instance_norm"], [389, 2, 1, "", "interp"], [389, 2, 1, "", "interpolate"], [653, 2, 1, "", "inv"], [646, 2, 1, "", "invalid_dtype"], [399, 2, 1, "", "invert_permutation"], [650, 2, 1, "", "is_array"], [646, 2, 1, "", "is_bool_dtype"], [646, 2, 1, "", "is_complex_dtype"], [646, 2, 1, "", "is_float_dtype"], [188, 2, 1, "", "is_hashable_dtype"], [189, 2, 1, "", "is_int_dtype"], [650, 2, 1, "", "is_ivy_array"], [650, 2, 1, "", "is_ivy_container"], [650, 2, 1, "", "is_ivy_nested_array"], [400, 2, 1, "", "is_ivy_sparse_array"], [650, 2, 1, "", "is_native_array"], [190, 2, 1, "", "is_native_dtype"], [400, 2, 1, "", "is_native_sparse_array"], [191, 2, 1, "", "is_uint_dtype"], [386, 2, 1, "", "isclose"], [268, 2, 1, "", "isfinite"], [650, 2, 1, "", "isin"], [269, 2, 1, "", "isinf"], [270, 2, 1, "", "isnan"], [271, 2, 1, "", "isreal"], [650, 2, 1, "", "isscalar"], [650, 2, 1, "", "itemsize"], [651, 2, 1, "", "jac"], [388, 2, 1, "", "jvp"], [383, 2, 1, "", "kaiser_bessel_derived_window"], [383, 2, 1, "", "kaiser_window"], [390, 2, 1, "", "khatri_rao"], [391, 2, 1, "", "kl_div"], [390, 2, 1, "", "kron"], [390, 2, 1, "", "kronecker"], [391, 2, 1, "", "l1_loss"], [395, 2, 1, "", "l1_normalize"], [395, 2, 1, "", "l2_normalize"], [651, 2, 1, "", "lamb_update"], [651, 2, 1, "", "lars_update"], [658, 2, 1, "", "layer_norm"], [272, 2, 1, "", "lcm"], [386, 2, 1, "", "ldexp"], [642, 2, 1, "", "leaky_relu"], [386, 2, 1, "", "lerp"], [273, 2, 1, "", "less"], [274, 2, 1, "", "less_equal"], [399, 2, 1, "", "lexsort"], [386, 2, 1, "", "lgamma"], [652, 2, 1, "", "linear"], [645, 2, 1, "", "linspace"], [664, 2, 1, "", "load"], [395, 2, 1, "", "local_response_norm"], [275, 2, 1, "", "log"], [276, 2, 1, "", "log10"], [277, 2, 1, "", "log1p"], [278, 2, 1, "", "log2"], [391, 2, 1, "", "log_poisson_loss"], [642, 2, 1, "", "log_softmax"], [279, 2, 1, "", "logaddexp"], [280, 2, 1, "", "logaddexp2"], [281, 2, 1, "", "logical_and"], [282, 2, 1, "", "logical_not"], [283, 2, 1, "", "logical_or"], [284, 2, 1, "", "logical_xor"], [314, 2, 1, "", "logit"], [315, 2, 1, "", "logsigmoid"], [645, 2, 1, "", "logspace"], [395, 2, 1, "", "lp_normalize"], [652, 2, 1, "", "lstm"], [652, 2, 1, "", "lstm_update"], [390, 2, 1, "", "lu_factor"], [390, 2, 1, "", "lu_solve"], [390, 2, 1, "", "make_svd_non_negative"], [656, 2, 1, "", "maml_step"], [657, 2, 1, "", "map"], [657, 2, 1, "", "map_nest_at_index"], [657, 2, 1, "", "map_nest_at_indices"], [650, 2, 1, "", "match_kwargs"], [653, 2, 1, "", "matmul"], [392, 2, 1, "", "matricize"], [390, 2, 1, "", "matrix_exp"], [653, 2, 1, "", "matrix_norm"], [653, 2, 1, "", "matrix_power"], [653, 2, 1, "", "matrix_rank"], [653, 2, 1, "", "matrix_transpose"], [663, 2, 1, "", "max"], [389, 2, 1, "", "max_pool1d"], [389, 2, 1, "", "max_pool2d"], [389, 2, 1, "", "max_pool3d"], [389, 2, 1, "", "max_unpool1d"], [285, 2, 1, "", "maximum"], [663, 2, 1, "", "mean"], [401, 2, 1, "", "median"], [383, 2, 1, "", "mel_weight_matrix"], [645, 2, 1, "", "meshgrid"], [663, 2, 1, "", "min"], [286, 2, 1, "", "minimum"], [642, 2, 1, "", "mish"], [390, 2, 1, "", "mode_dot"], [386, 2, 1, "", "modf"], [392, 2, 1, "", "moveaxis"], [662, 2, 1, "", "msort"], [390, 2, 1, "", "multi_dot"], [652, 2, 1, "", "multi_head_attention"], [657, 2, 1, "", "multi_index_nest"], [390, 2, 1, "", "multi_mode_dot"], [659, 2, 1, "", "multinomial"], [287, 2, 1, "", "multiply"], [650, 2, 1, "", "multiprocessing"], [643, 6, 1, "", "nan"], [288, 2, 1, "", "nan_to_num"], [401, 2, 1, "", "nanmean"], [401, 2, 1, "", "nanmedian"], [401, 2, 1, "", "nanmin"], [401, 2, 1, "", "nanprod"], [386, 2, 1, "", "nansum"], [645, 2, 1, "", "native_array"], [400, 2, 1, "", "native_sparse_array"], [400, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [383, 2, 1, "", "ndenumerate"], [383, 2, 1, "", "ndindex"], [389, 2, 1, "", "nearest_interpolate"], [289, 2, 1, "", "negative"], [657, 2, 1, "", "nested_any"], [657, 2, 1, "", "nested_argwhere"], [657, 2, 1, "", "nested_map"], [657, 2, 1, "", "nested_multi_map"], [643, 6, 1, "", "newaxis"], [386, 2, 1, "", "nextafter"], [652, 2, 1, "", "nms"], [660, 2, 1, "", "nonzero"], [290, 2, 1, "", "not_equal"], [650, 2, 1, "", "num_arrays_in_memory"], [218, 2, 1, "", "num_cpu_cores"], [219, 2, 1, "", "num_gpus"], [220, 2, 1, "", "num_ivy_arrays_on_dev"], [645, 2, 1, "", "one_hot"], [645, 2, 1, "", "ones"], [645, 2, 1, "", "ones_like"], [651, 2, 1, "", "optimizer_update"], [402, 2, 1, "", "optional_get_element"], [653, 2, 1, "", "outer"], [392, 2, 1, "", "pad"], [392, 2, 1, "", "pad_sequence"], [392, 2, 1, "", "partial_fold"], [392, 2, 1, "", "partial_tensor_to_vec"], [390, 2, 1, "", "partial_tucker"], [392, 2, 1, "", "partial_unfold"], [392, 2, 1, "", "partial_vec_to_tensor"], [221, 2, 1, "", "percent_used_mem_on_dev"], [655, 2, 1, "", "permute_dims"], [643, 6, 1, "", "pi"], [653, 2, 1, "", "pinv"], [396, 2, 1, "", "poisson"], [391, 2, 1, "", "poisson_nll_loss"], [383, 2, 1, "", "polyval"], [389, 2, 1, "", "pool"], [291, 2, 1, "", "positive"], [292, 2, 1, "", "pow"], [316, 2, 1, "", "prelu"], [650, 2, 1, "", "print_all_arrays_in_memory"], [222, 2, 1, "", "print_all_ivy_arrays_on_dev"], [663, 2, 1, "", "prod"], [192, 2, 1, "", "promote_types"], [193, 2, 1, "", "promote_types_of_inputs"], [657, 2, 1, "", "prune_empty"], [657, 2, 1, "", "prune_nest_at_index"], [657, 2, 1, "", "prune_nest_at_indices"], [392, 2, 1, "", "put_along_axis"], [653, 2, 1, "", "qr"], [401, 2, 1, "", "quantile"], [293, 2, 1, "", "rad2deg"], [659, 2, 1, "", "randint"], [383, 2, 1, "", "random_cp"], [659, 2, 1, "", "random_normal"], [383, 2, 1, "", "random_parafac2"], [383, 2, 1, "", "random_tr"], [383, 2, 1, "", "random_tt"], [383, 2, 1, "", "random_tucker"], [659, 2, 1, "", "random_uniform"], [294, 2, 1, "", "real"], [295, 2, 1, "", "reciprocal"], [387, 2, 1, "", "reduce"], [389, 2, 1, "", "reduce_window"], [642, 2, 1, "", "relu"], [317, 2, 1, "", "relu6"], [296, 2, 1, "", "remainder"], [655, 2, 1, "", "repeat"], [656, 2, 1, "", "reptile_step"], [651, 2, 1, "", "requires_gradient"], [655, 2, 1, "", "reshape"], [194, 2, 1, "", "result_type"], [389, 2, 1, "", "rfft"], [389, 2, 1, "", "rfftn"], [389, 2, 1, "", "rnn"], [652, 2, 1, "", "roi_align"], [655, 2, 1, "", "roll"], [392, 2, 1, "", "rot90"], [297, 2, 1, "", "round"], [664, 2, 1, "", "save"], [652, 2, 1, "", "scaled_dot_product_attention"], [318, 2, 1, "", "scaled_tanh"], [650, 2, 1, "", "scatter_flat"], [650, 2, 1, "", "scatter_nd"], [662, 2, 1, "", "searchsorted"], [659, 2, 1, "", "seed"], [319, 2, 1, "", "selu"], [650, 2, 1, "", "set_array_mode"], [195, 2, 1, "", "set_default_complex_dtype"], [223, 2, 1, "", "set_default_device"], [196, 2, 1, "", "set_default_dtype"], [197, 2, 1, "", "set_default_float_dtype"], [198, 2, 1, "", "set_default_int_dtype"], [199, 2, 1, "", "set_default_uint_dtype"], [650, 2, 1, "", "set_exception_trace_mode"], [650, 2, 1, "", "set_inplace_mode"], [650, 2, 1, "", "set_item"], [650, 2, 1, "", "set_min_base"], [650, 2, 1, "", "set_min_denominator"], [657, 2, 1, "", "set_nest_at_index"], [657, 2, 1, "", "set_nest_at_indices"], [650, 2, 1, "", "set_nestable_mode"], [650, 2, 1, "", "set_precise_mode"], [650, 2, 1, "", "set_queue_timeout"], [650, 2, 1, "", "set_shape_array_mode"], [650, 2, 1, "", "set_show_func_wrapper_trace_mode"], [224, 2, 1, "", "set_soft_device_mode"], [225, 2, 1, "", "set_split_factor"], [650, 2, 1, "", "set_tmp_dir"], [650, 2, 1, "", "shape"], [659, 2, 1, "", "shuffle"], [642, 2, 1, "", "sigmoid"], [298, 2, 1, "", "sign"], [386, 2, 1, "", "signbit"], [320, 2, 1, "", "silu"], [299, 2, 1, "", "sin"], [386, 2, 1, "", "sinc"], [300, 2, 1, "", "sinh"], [650, 2, 1, "", "size"], [389, 2, 1, "", "sliding_window"], [653, 2, 1, "", "slogdet"], [391, 2, 1, "", "smooth_l1_loss"], [391, 2, 1, "", "soft_margin_loss"], [392, 2, 1, "", "soft_thresholding"], [642, 2, 1, "", "softmax"], [642, 2, 1, "", "softplus"], [321, 2, 1, "", "softshrink"], [642, 2, 1, "", "softsign"], [653, 2, 1, "", "solve"], [390, 2, 1, "", "solve_triangular"], [662, 2, 1, "", "sort"], [654, 2, 1, "", "sparse_cross_entropy"], [386, 2, 1, "", "sparsify_tensor"], [655, 2, 1, "", "split"], [226, 2, 1, "", "split_factor"], [227, 2, 1, "", "split_func_call"], [301, 2, 1, "", "sqrt"], [302, 2, 1, "", "square"], [655, 2, 1, "", "squeeze"], [654, 2, 1, "", "ssim_loss"], [650, 2, 1, "", "stable_divide"], [650, 2, 1, "", "stable_pow"], [655, 2, 1, "", "stack"], [322, 2, 1, "", "stanh"], [663, 2, 1, "", "std"], [389, 2, 1, "", "stft"], [651, 2, 1, "", "stop_gradient"], [650, 2, 1, "", "strides"], [303, 2, 1, "", "subtract"], [663, 2, 1, "", "sum"], [650, 2, 1, "", "supports_inplace_updates"], [653, 2, 1, "", "svd"], [390, 2, 1, "", "svd_flip"], [653, 2, 1, "", "svdvals"], [655, 2, 1, "", "swapaxes"], [392, 2, 1, "", "take"], [392, 2, 1, "", "take_along_axis"], [304, 2, 1, "", "tan"], [305, 2, 1, "", "tanh"], [323, 2, 1, "", "tanhshrink"], [390, 2, 1, "", "tensor_train"], [653, 2, 1, "", "tensordot"], [653, 2, 1, "", "tensorsolve"], [324, 2, 1, "", "threshold"], [325, 2, 1, "", "thresholded_relu"], [655, 2, 1, "", "tile"], [228, 2, 1, "", "to_device"], [645, 2, 1, "", "to_dlpack"], [650, 2, 1, "", "to_ivy_shape"], [650, 2, 1, "", "to_list"], [650, 2, 1, "", "to_native_shape"], [650, 2, 1, "", "to_numpy"], [650, 2, 1, "", "to_scalar"], [392, 2, 1, "", "top_k"], [229, 2, 1, "", "total_mem_on_dev"], [230, 2, 1, "", "tpu_is_available"], [653, 2, 1, "", "trace"], [879, 2, 1, "", "trace_graph"], [880, 2, 1, "", "transpile"], [306, 2, 1, "", "trapz"], [645, 2, 1, "", "tril"], [383, 2, 1, "", "tril_indices"], [383, 2, 1, "", "trilu"], [392, 2, 1, "", "trim_zeros"], [645, 2, 1, "", "triu"], [645, 2, 1, "", "triu_indices"], [307, 2, 1, "", "trunc"], [308, 2, 1, "", "trunc_divide"], [390, 2, 1, "", "truncated_svd"], [650, 2, 1, "", "try_else_none"], [644, 2, 1, "", "try_except"], [390, 2, 1, "", "tt_matrix_to_tensor"], [390, 2, 1, "", "tucker"], [200, 2, 1, "", "type_promote_arrays"], [392, 2, 1, "", "unflatten"], [392, 2, 1, "", "unfold"], [881, 2, 1, "", "unify"], [661, 2, 1, "", "unique_all"], [392, 2, 1, "", "unique_consecutive"], [661, 2, 1, "", "unique_counts"], [661, 2, 1, "", "unique_inverse"], [661, 2, 1, "", "unique_values"], [397, 2, 1, "", "unravel_index"], [650, 2, 1, "", "unset_array_mode"], [201, 2, 1, "", "unset_default_complex_dtype"], [231, 2, 1, "", "unset_default_device"], [202, 2, 1, "", "unset_default_dtype"], [203, 2, 1, "", "unset_default_float_dtype"], [204, 2, 1, "", "unset_default_int_dtype"], [205, 2, 1, "", "unset_default_uint_dtype"], [650, 2, 1, "", "unset_exception_trace_mode"], [650, 2, 1, "", "unset_inplace_mode"], [650, 2, 1, "", "unset_min_base"], [650, 2, 1, "", "unset_min_denominator"], [650, 2, 1, "", "unset_nestable_mode"], [650, 2, 1, "", "unset_precise_mode"], [650, 2, 1, "", "unset_queue_timeout"], [650, 2, 1, "", "unset_shape_array_mode"], [650, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [232, 2, 1, "", "unset_soft_device_mode"], [650, 2, 1, "", "unset_tmp_dir"], [383, 2, 1, "", "unsorted_segment_mean"], [383, 2, 1, "", "unsorted_segment_min"], [383, 2, 1, "", "unsorted_segment_sum"], [655, 2, 1, "", "unstack"], [233, 2, 1, "", "used_mem_on_dev"], [206, 2, 1, "", "valid_dtype"], [651, 2, 1, "", "value_and_grad"], [650, 2, 1, "", "value_is_nan"], [653, 2, 1, "", "vander"], [663, 2, 1, "", "var"], [653, 2, 1, "", "vecdot"], [653, 2, 1, "", "vector_norm"], [653, 2, 1, "", "vector_to_skew_symmetric_matrix"], [388, 2, 1, "", "vjp"], [650, 2, 1, "", "vmap"], [383, 2, 1, "", "vorbis_window"], [392, 2, 1, "", "vsplit"], [392, 2, 1, "", "vstack"], [654, 2, 1, "", "wasserstein_loss_discriminator"], [654, 2, 1, "", "wasserstein_loss_generator"], [660, 2, 1, "", "where"], [644, 2, 1, "", "while_loop"], [386, 2, 1, "", "xlogy"], [655, 2, 1, "", "zero_pad"], [645, 2, 1, "", "zeros"], [645, 2, 1, "", "zeros_like"], [386, 2, 1, "", "zeta"]], "ivy.Container": [[234, 0, 1, "", "abs"], [235, 0, 1, "", "acos"], [236, 0, 1, "", "acosh"], [630, 0, 1, "", "adam_step"], [631, 0, 1, "", "adam_update"], [403, 0, 1, "", "adaptive_avg_pool1d"], [404, 0, 1, "", "adaptive_avg_pool2d"], [405, 0, 1, "", "adaptive_max_pool2d"], [406, 0, 1, "", "adaptive_max_pool3d"], [237, 0, 1, "", "add"], [438, 0, 1, "", "adjoint"], [786, 0, 1, "", "all"], [549, 0, 1, "", "all_equal"], [348, 0, 1, "", "allclose"], [349, 0, 1, "", "amax"], [350, 0, 1, "", "amin"], [238, 0, 1, "", "angle"], [787, 0, 1, "", "any"], [763, 0, 1, "", "argmax"], [764, 0, 1, "", "argmin"], [772, 0, 1, "", "argsort"], [765, 0, 1, "", "argwhere"], [552, 0, 1, "", "array_equal"], [474, 0, 1, "", "as_strided"], [141, 0, 1, "", "asarray"], [239, 0, 1, "", "asin"], [240, 0, 1, "", "asinh"], [553, 0, 1, "", "assert_supports_inplace"], [475, 0, 1, "", "associative_scan"], [166, 0, 1, "", "astype"], [241, 0, 1, "", "atan"], [242, 0, 1, "", "atan2"], [243, 0, 1, "", "atanh"], [476, 0, 1, "", "atleast_1d"], [477, 0, 1, "", "atleast_2d"], [478, 0, 1, "", "atleast_3d"], [408, 0, 1, "", "avg_pool1d"], [409, 0, 1, "", "avg_pool2d"], [410, 0, 1, "", "avg_pool3d"], [516, 0, 1, "", "batch_norm"], [439, 0, 1, "", "batched_outer"], [523, 0, 1, "", "bernoulli"], [524, 0, 1, "", "beta"], [351, 0, 1, "", "binarizer"], [712, 0, 1, "", "binary_cross_entropy"], [535, 0, 1, "", "bincount"], [244, 0, 1, "", "bitwise_and"], [245, 0, 1, "", "bitwise_invert"], [246, 0, 1, "", "bitwise_left_shift"], [247, 0, 1, "", "bitwise_or"], [248, 0, 1, "", "bitwise_right_shift"], [249, 0, 1, "", "bitwise_xor"], [326, 0, 1, "", "blackman_window"], [167, 0, 1, "", "broadcast_arrays"], [479, 0, 1, "", "broadcast_shapes"], [168, 0, 1, "", "broadcast_to"], [169, 0, 1, "", "can_cast"], [250, 0, 1, "", "ceil"], [309, 0, 1, "", "celu"], [683, 0, 1, "", "cholesky"], [718, 0, 1, "", "clip"], [555, 0, 1, "", "clip_matrix_norm"], [556, 0, 1, "", "clip_vector_norm"], [482, 0, 1, "", "column_stack"], [719, 0, 1, "", "concat"], [483, 0, 1, "", "concat_from_sequence"], [440, 0, 1, "", "cond"], [352, 0, 1, "", "conj"], [720, 0, 1, "", "constant_pad"], [666, 0, 1, "", "conv1d"], [667, 0, 1, "", "conv1d_transpose"], [668, 0, 1, "", "conv2d"], [669, 0, 1, "", "conv2d_transpose"], [670, 0, 1, "", "conv3d"], [671, 0, 1, "", "conv3d_transpose"], [143, 0, 1, "", "copy_array"], [353, 0, 1, "", "copysign"], [536, 0, 1, "", "corrcoef"], [251, 0, 1, "", "cos"], [252, 0, 1, "", "cosh"], [354, 0, 1, "", "count_nonzero"], [537, 0, 1, "", "cov"], [684, 0, 1, "", "cross"], [713, 0, 1, "", "cross_entropy"], [538, 0, 1, "", "cummax"], [539, 0, 1, "", "cummin"], [776, 0, 1, "", "cumprod"], [777, 0, 1, "", "cumsum"], [411, 0, 1, "", "dct"], [253, 0, 1, "", "deg2rad"], [674, 0, 1, "", "depthwise_conv2d"], [685, 0, 1, "", "det"], [211, 0, 1, "", "dev"], [412, 0, 1, "", "dft"], [686, 0, 1, "", "diag"], [441, 0, 1, "", "diagflat"], [687, 0, 1, "", "diagonal"], [355, 0, 1, "", "diff"], [356, 0, 1, "", "digamma"], [525, 0, 1, "", "dirichlet"], [254, 0, 1, "", "divide"], [442, 0, 1, "", "dot"], [675, 0, 1, "", "dropout"], [413, 0, 1, "", "dropout1d"], [414, 0, 1, "", "dropout2d"], [415, 0, 1, "", "dropout3d"], [484, 0, 1, "", "dsplit"], [485, 0, 1, "", "dstack"], [177, 0, 1, "", "dtype"], [443, 0, 1, "", "eig"], [689, 0, 1, "", "eigh"], [444, 0, 1, "", "eigh_tridiagonal"], [445, 0, 1, "", "eigvals"], [690, 0, 1, "", "eigvalsh"], [560, 0, 1, "", "einops_rearrange"], [561, 0, 1, "", "einops_reduce"], [562, 0, 1, "", "einops_repeat"], [778, 0, 1, "", "einsum"], [310, 0, 1, "", "elu"], [416, 0, 1, "", "embedding"], [145, 0, 1, "", "empty_like"], [255, 0, 1, "", "equal"], [256, 0, 1, "", "erf"], [357, 0, 1, "", "erfc"], [358, 0, 1, "", "erfinv"], [563, 0, 1, "", "exists"], [257, 0, 1, "", "exp"], [258, 0, 1, "", "exp2"], [486, 0, 1, "", "expand"], [721, 0, 1, "", "expand_dims"], [259, 0, 1, "", "expm1"], [327, 0, 1, "", "eye_like"], [417, 0, 1, "", "fft"], [487, 0, 1, "", "fill_diagonal"], [179, 0, 1, "", "finfo"], [359, 0, 1, "", "fix"], [488, 0, 1, "", "flatten"], [722, 0, 1, "", "flip"], [489, 0, 1, "", "fliplr"], [490, 0, 1, "", "flipud"], [360, 0, 1, "", "float_power"], [260, 0, 1, "", "floor"], [261, 0, 1, "", "floor_divide"], [361, 0, 1, "", "fmax"], [262, 0, 1, "", "fmin"], [263, 0, 1, "", "fmod"], [491, 0, 1, "", "fold"], [564, 0, 1, "", "fourier_encode"], [362, 0, 1, "", "frexp"], [147, 0, 1, "", "from_dlpack"], [148, 0, 1, "", "frombuffer"], [150, 0, 1, "", "full_like"], [526, 0, 1, "", "gamma"], [567, 0, 1, "", "gather"], [568, 0, 1, "", "gather_nd"], [264, 0, 1, "", "gcd"], [123, 0, 1, "", "gelu"], [446, 0, 1, "", "general_inner_product"], [571, 0, 1, "", "get_num_dims"], [363, 0, 1, "", "gradient"], [634, 0, 1, "", "gradient_descent_update"], [265, 0, 1, "", "greater"], [266, 0, 1, "", "greater_equal"], [517, 0, 1, "", "group_norm"], [328, 0, 1, "", "hamming_window"], [329, 0, 1, "", "hann_window"], [311, 0, 1, "", "hardshrink"], [312, 0, 1, "", "hardsilu"], [124, 0, 1, "", "hardswish"], [313, 0, 1, "", "hardtanh"], [573, 0, 1, "", "has_nans"], [492, 0, 1, "", "heaviside"], [447, 0, 1, "", "higher_order_moment"], [466, 0, 1, "", "hinge_embedding_loss"], [540, 0, 1, "", "histogram"], [493, 0, 1, "", "hsplit"], [494, 0, 1, "", "hstack"], [467, 0, 1, "", "huber_loss"], [364, 0, 1, "", "hypot"], [495, 0, 1, "", "i0"], [421, 0, 1, "", "idct"], [422, 0, 1, "", "ifft"], [423, 0, 1, "", "ifftn"], [541, 0, 1, "", "igamma"], [182, 0, 1, "", "iinfo"], [267, 0, 1, "", "imag"], [448, 0, 1, "", "initialize_tucker"], [691, 0, 1, "", "inner"], [575, 0, 1, "", "inplace_decrement"], [576, 0, 1, "", "inplace_increment"], [577, 0, 1, "", "inplace_update"], [518, 0, 1, "", "instance_norm"], [425, 0, 1, "", "interpolate"], [692, 0, 1, "", "inv"], [529, 0, 1, "", "invert_permutation"], [579, 0, 1, "", "is_array"], [185, 0, 1, "", "is_bool_dtype"], [186, 0, 1, "", "is_complex_dtype"], [187, 0, 1, "", "is_float_dtype"], [189, 0, 1, "", "is_int_dtype"], [580, 0, 1, "", "is_ivy_array"], [583, 0, 1, "", "is_native_array"], [191, 0, 1, "", "is_uint_dtype"], [365, 0, 1, "", "isclose"], [268, 0, 1, "", "isfinite"], [584, 0, 1, "", "isin"], [269, 0, 1, "", "isinf"], [270, 0, 1, "", "isnan"], [271, 0, 1, "", "isreal"], [586, 0, 1, "", "itemsize"], [331, 0, 1, "", "kaiser_bessel_derived_window"], [332, 0, 1, "", "kaiser_window"], [468, 0, 1, "", "kl_div"], [450, 0, 1, "", "kron"], [469, 0, 1, "", "l1_loss"], [519, 0, 1, "", "l1_normalize"], [520, 0, 1, "", "l2_normalize"], [636, 0, 1, "", "lamb_update"], [637, 0, 1, "", "lars_update"], [756, 0, 1, "", "layer_norm"], [272, 0, 1, "", "lcm"], [366, 0, 1, "", "ldexp"], [125, 0, 1, "", "leaky_relu"], [367, 0, 1, "", "lerp"], [273, 0, 1, "", "less"], [274, 0, 1, "", "less_equal"], [530, 0, 1, "", "lexsort"], [368, 0, 1, "", "lgamma"], [676, 0, 1, "", "linear"], [151, 0, 1, "", "linspace"], [275, 0, 1, "", "log"], [276, 0, 1, "", "log10"], [277, 0, 1, "", "log1p"], [278, 0, 1, "", "log2"], [470, 0, 1, "", "log_poisson_loss"], [126, 0, 1, "", "log_softmax"], [279, 0, 1, "", "logaddexp"], [280, 0, 1, "", "logaddexp2"], [281, 0, 1, "", "logical_and"], [282, 0, 1, "", "logical_not"], [283, 0, 1, "", "logical_or"], [284, 0, 1, "", "logical_xor"], [314, 0, 1, "", "logit"], [315, 0, 1, "", "logsigmoid"], [152, 0, 1, "", "logspace"], [522, 0, 1, "", "lp_normalize"], [678, 0, 1, "", "lstm_update"], [454, 0, 1, "", "make_svd_non_negative"], [693, 0, 1, "", "matmul"], [496, 0, 1, "", "matricize"], [455, 0, 1, "", "matrix_exp"], [694, 0, 1, "", "matrix_norm"], [695, 0, 1, "", "matrix_power"], [696, 0, 1, "", "matrix_rank"], [697, 0, 1, "", "matrix_transpose"], [779, 0, 1, "", "max"], [426, 0, 1, "", "max_pool1d"], [427, 0, 1, "", "max_pool2d"], [428, 0, 1, "", "max_pool3d"], [429, 0, 1, "", "max_unpool1d"], [285, 0, 1, "", "maximum"], [780, 0, 1, "", "mean"], [542, 0, 1, "", "median"], [333, 0, 1, "", "mel_weight_matrix"], [153, 0, 1, "", "meshgrid"], [781, 0, 1, "", "min"], [286, 0, 1, "", "minimum"], [127, 0, 1, "", "mish"], [456, 0, 1, "", "mode_dot"], [369, 0, 1, "", "modf"], [497, 0, 1, "", "moveaxis"], [773, 0, 1, "", "msort"], [457, 0, 1, "", "multi_dot"], [679, 0, 1, "", "multi_head_attention"], [458, 0, 1, "", "multi_mode_dot"], [757, 0, 1, "", "multinomial"], [287, 0, 1, "", "multiply"], [288, 0, 1, "", "nan_to_num"], [543, 0, 1, "", "nanmean"], [544, 0, 1, "", "nanmedian"], [545, 0, 1, "", "nanmin"], [546, 0, 1, "", "nanprod"], [370, 0, 1, "", "nansum"], [154, 0, 1, "", "native_array"], [289, 0, 1, "", "negative"], [371, 0, 1, "", "nextafter"], [766, 0, 1, "", "nonzero"], [290, 0, 1, "", "not_equal"], [155, 0, 1, "", "one_hot"], [157, 0, 1, "", "ones_like"], [638, 0, 1, "", "optimizer_update"], [548, 0, 1, "", "optional_get_element"], [698, 0, 1, "", "outer"], [498, 0, 1, "", "pad"], [500, 0, 1, "", "partial_fold"], [501, 0, 1, "", "partial_tensor_to_vec"], [459, 0, 1, "", "partial_tucker"], [502, 0, 1, "", "partial_unfold"], [503, 0, 1, "", "partial_vec_to_tensor"], [723, 0, 1, "", "permute_dims"], [699, 0, 1, "", "pinv"], [527, 0, 1, "", "poisson"], [471, 0, 1, "", "poisson_nll_loss"], [336, 0, 1, "", "polyval"], [291, 0, 1, "", "positive"], [292, 0, 1, "", "pow"], [316, 0, 1, "", "prelu"], [782, 0, 1, "", "prod"], [504, 0, 1, "", "put_along_axis"], [700, 0, 1, "", "qr"], [547, 0, 1, "", "quantile"], [293, 0, 1, "", "rad2deg"], [758, 0, 1, "", "randint"], [759, 0, 1, "", "random_normal"], [760, 0, 1, "", "random_uniform"], [294, 0, 1, "", "real"], [295, 0, 1, "", "reciprocal"], [377, 0, 1, "", "reduce"], [432, 0, 1, "", "reduce_window"], [128, 0, 1, "", "relu"], [317, 0, 1, "", "relu6"], [296, 0, 1, "", "remainder"], [724, 0, 1, "", "repeat"], [725, 0, 1, "", "reshape"], [194, 0, 1, "", "result_type"], [433, 0, 1, "", "rfft"], [434, 0, 1, "", "rfftn"], [726, 0, 1, "", "roll"], [505, 0, 1, "", "rot90"], [297, 0, 1, "", "round"], [682, 0, 1, "", "scaled_dot_product_attention"], [318, 0, 1, "", "scaled_tanh"], [591, 0, 1, "", "scatter_flat"], [592, 0, 1, "", "scatter_nd"], [774, 0, 1, "", "searchsorted"], [319, 0, 1, "", "selu"], [762, 0, 1, "", "shuffle"], [129, 0, 1, "", "sigmoid"], [298, 0, 1, "", "sign"], [372, 0, 1, "", "signbit"], [320, 0, 1, "", "silu"], [299, 0, 1, "", "sin"], [373, 0, 1, "", "sinc"], [300, 0, 1, "", "sinh"], [606, 0, 1, "", "size"], [436, 0, 1, "", "sliding_window"], [701, 0, 1, "", "slogdet"], [472, 0, 1, "", "smooth_l1_loss"], [473, 0, 1, "", "soft_margin_loss"], [506, 0, 1, "", "soft_thresholding"], [130, 0, 1, "", "softmax"], [131, 0, 1, "", "softplus"], [321, 0, 1, "", "softshrink"], [702, 0, 1, "", "solve"], [775, 0, 1, "", "sort"], [714, 0, 1, "", "sparse_cross_entropy"], [374, 0, 1, "", "sparsify_tensor"], [727, 0, 1, "", "split"], [301, 0, 1, "", "sqrt"], [302, 0, 1, "", "square"], [728, 0, 1, "", "squeeze"], [607, 0, 1, "", "stable_divide"], [608, 0, 1, "", "stable_pow"], [729, 0, 1, "", "stack"], [783, 0, 1, "", "std"], [437, 0, 1, "", "stft"], [640, 0, 1, "", "stop_gradient"], [609, 0, 1, "", "strides"], [303, 0, 1, "", "subtract"], [784, 0, 1, "", "sum"], [610, 0, 1, "", "supports_inplace_updates"], [703, 0, 1, "", "svd"], [461, 0, 1, "", "svd_flip"], [704, 0, 1, "", "svdvals"], [730, 0, 1, "", "swapaxes"], [507, 0, 1, "", "take"], [508, 0, 1, "", "take_along_axis"], [304, 0, 1, "", "tan"], [305, 0, 1, "", "tanh"], [323, 0, 1, "", "tanhshrink"], [462, 0, 1, "", "tensor_train"], [705, 0, 1, "", "tensordot"], [706, 0, 1, "", "tensorsolve"], [324, 0, 1, "", "threshold"], [325, 0, 1, "", "thresholded_relu"], [731, 0, 1, "", "tile"], [228, 0, 1, "", "to_device"], [612, 0, 1, "", "to_list"], [614, 0, 1, "", "to_numpy"], [615, 0, 1, "", "to_scalar"], [509, 0, 1, "", "top_k"], [707, 0, 1, "", "trace"], [306, 0, 1, "", "trapz"], [159, 0, 1, "", "tril"], [342, 0, 1, "", "tril_indices"], [343, 0, 1, "", "trilu"], [510, 0, 1, "", "trim_zeros"], [160, 0, 1, "", "triu"], [161, 0, 1, "", "triu_indices"], [307, 0, 1, "", "trunc"], [308, 0, 1, "", "trunc_divide"], [463, 0, 1, "", "truncated_svd"], [464, 0, 1, "", "tt_matrix_to_tensor"], [465, 0, 1, "", "tucker"], [511, 0, 1, "", "unflatten"], [512, 0, 1, "", "unfold"], [768, 0, 1, "", "unique_all"], [513, 0, 1, "", "unique_consecutive"], [769, 0, 1, "", "unique_counts"], [770, 0, 1, "", "unique_inverse"], [771, 0, 1, "", "unique_values"], [528, 0, 1, "", "unravel_index"], [344, 0, 1, "", "unsorted_segment_mean"], [345, 0, 1, "", "unsorted_segment_min"], [346, 0, 1, "", "unsorted_segment_sum"], [732, 0, 1, "", "unstack"], [628, 0, 1, "", "value_is_nan"], [708, 0, 1, "", "vander"], [785, 0, 1, "", "var"], [709, 0, 1, "", "vecdot"], [710, 0, 1, "", "vector_norm"], [711, 0, 1, "", "vector_to_skew_symmetric_matrix"], [347, 0, 1, "", "vorbis_window"], [514, 0, 1, "", "vsplit"], [515, 0, 1, "", "vstack"], [767, 0, 1, "", "where"], [375, 0, 1, "", "xlogy"], [733, 0, 1, "", "zero_pad"], [163, 0, 1, "", "zeros_like"], [376, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[64, 3, 0, "-", "activations"], [115, 3, 0, "-", "array"], [65, 3, 0, "-", "conversions"], [66, 3, 0, "-", "creation"], [67, 3, 0, "-", "data_type"], [68, 3, 0, "-", "device"], [69, 3, 0, "-", "elementwise"], [70, 3, 0, "-", "experimental"], [71, 3, 0, "-", "general"], [72, 3, 0, "-", "gradients"], [73, 3, 0, "-", "image"], [74, 3, 0, "-", "layers"], [75, 3, 0, "-", "linear_algebra"], [76, 3, 0, "-", "losses"], [77, 3, 0, "-", "manipulation"], [78, 3, 0, "-", "norms"], [79, 3, 0, "-", "random"], [80, 3, 0, "-", "searching"], [81, 3, 0, "-", "set"], [82, 3, 0, "-", "sorting"], [83, 3, 0, "-", "statistical"], [84, 3, 0, "-", "utility"], [85, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[64, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "gelu"], [64, 0, 1, "", "hardswish"], [64, 0, 1, "", "leaky_relu"], [64, 0, 1, "", "log_softmax"], [64, 0, 1, "", "mish"], [64, 0, 1, "", "relu"], [64, 0, 1, "", "sigmoid"], [64, 0, 1, "", "softmax"], [64, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[115, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[115, 5, 1, "", "T"], [115, 0, 1, "", "__abs__"], [115, 0, 1, "", "__add__"], [115, 0, 1, "", "__eq__"], [115, 0, 1, "", "__ge__"], [115, 0, 1, "", "__gt__"], [115, 0, 1, "", "__init__"], [115, 0, 1, "", "__le__"], [115, 0, 1, "", "__lt__"], [115, 0, 1, "", "__ne__"], [115, 0, 1, "", "__pow__"], [115, 0, 1, "", "__radd__"], [115, 0, 1, "", "__rrshift__"], [115, 0, 1, "", "__rshift__"], [115, 0, 1, "", "__rsub__"], [115, 0, 1, "", "__sub__"], [115, 0, 1, "", "__truediv__"], [115, 0, 1, "", "__xor__"], [115, 5, 1, "", "backend"], [115, 5, 1, "", "base"], [115, 5, 1, "", "data"], [115, 5, 1, "", "device"], [115, 5, 1, "", "dtype"], [115, 5, 1, "", "dynamic_backend"], [115, 5, 1, "", "imag"], [115, 5, 1, "", "itemsize"], [115, 5, 1, "", "mT"], [115, 5, 1, "", "ndim"], [115, 5, 1, "", "real"], [115, 5, 1, "", "shape"], [115, 5, 1, "", "size"], [115, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[65, 2, 1, "", "_array_to_new_backend"], [65, 2, 1, "", "_data_to_new_backend"], [65, 2, 1, "", "_to_ivy"], [65, 2, 1, "", "_to_native"], [65, 2, 1, "", "_to_new_backend"], [65, 2, 1, "", "args_to_ivy"], [65, 2, 1, "", "args_to_native"], [65, 2, 1, "", "args_to_new_backend"], [65, 2, 1, "", "to_ivy"], [65, 2, 1, "", "to_native"], [65, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[66, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "asarray"], [66, 0, 1, "", "copy_array"], [66, 0, 1, "", "empty_like"], [66, 0, 1, "", "from_dlpack"], [66, 0, 1, "", "full_like"], [66, 0, 1, "", "linspace"], [66, 0, 1, "", "logspace"], [66, 0, 1, "", "meshgrid"], [66, 0, 1, "", "native_array"], [66, 0, 1, "", "one_hot"], [66, 0, 1, "", "ones_like"], [66, 0, 1, "", "tril"], [66, 0, 1, "", "triu"], [66, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[67, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "astype"], [67, 0, 1, "", "broadcast_arrays"], [67, 0, 1, "", "broadcast_to"], [67, 0, 1, "", "can_cast"], [67, 0, 1, "", "dtype"], [67, 0, 1, "", "finfo"], [67, 0, 1, "", "iinfo"], [67, 0, 1, "", "is_bool_dtype"], [67, 0, 1, "", "is_float_dtype"], [67, 0, 1, "", "is_int_dtype"], [67, 0, 1, "", "is_uint_dtype"], [67, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[68, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "dev"], [68, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[69, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "abs"], [69, 0, 1, "", "acos"], [69, 0, 1, "", "acosh"], [69, 0, 1, "", "add"], [69, 0, 1, "", "angle"], [69, 0, 1, "", "asin"], [69, 0, 1, "", "asinh"], [69, 0, 1, "", "atan"], [69, 0, 1, "", "atan2"], [69, 0, 1, "", "atanh"], [69, 0, 1, "", "bitwise_and"], [69, 0, 1, "", "bitwise_invert"], [69, 0, 1, "", "bitwise_left_shift"], [69, 0, 1, "", "bitwise_or"], [69, 0, 1, "", "bitwise_right_shift"], [69, 0, 1, "", "bitwise_xor"], [69, 0, 1, "", "ceil"], [69, 0, 1, "", "cos"], [69, 0, 1, "", "cosh"], [69, 0, 1, "", "deg2rad"], [69, 0, 1, "", "divide"], [69, 0, 1, "", "equal"], [69, 0, 1, "", "erf"], [69, 0, 1, "", "exp"], [69, 0, 1, "", "exp2"], [69, 0, 1, "", "expm1"], [69, 0, 1, "", "floor"], [69, 0, 1, "", "floor_divide"], [69, 0, 1, "", "fmin"], [69, 0, 1, "", "gcd"], [69, 0, 1, "", "greater"], [69, 0, 1, "", "greater_equal"], [69, 0, 1, "", "isfinite"], [69, 0, 1, "", "isinf"], [69, 0, 1, "", "isnan"], [69, 0, 1, "", "isreal"], [69, 0, 1, "", "lcm"], [69, 0, 1, "", "less"], [69, 0, 1, "", "less_equal"], [69, 0, 1, "", "log"], [69, 0, 1, "", "log10"], [69, 0, 1, "", "log1p"], [69, 0, 1, "", "log2"], [69, 0, 1, "", "logaddexp"], [69, 0, 1, "", "logaddexp2"], [69, 0, 1, "", "logical_and"], [69, 0, 1, "", "logical_not"], [69, 0, 1, "", "logical_or"], [69, 0, 1, "", "logical_xor"], [69, 0, 1, "", "maximum"], [69, 0, 1, "", "minimum"], [69, 0, 1, "", "multiply"], [69, 0, 1, "", "nan_to_num"], [69, 0, 1, "", "negative"], [69, 0, 1, "", "not_equal"], [69, 0, 1, "", "positive"], [69, 0, 1, "", "pow"], [69, 0, 1, "", "rad2deg"], [69, 0, 1, "", "real"], [69, 0, 1, "", "reciprocal"], [69, 0, 1, "", "remainder"], [69, 0, 1, "", "round"], [69, 0, 1, "", "sign"], [69, 0, 1, "", "sin"], [69, 0, 1, "", "sinh"], [69, 0, 1, "", "sqrt"], [69, 0, 1, "", "square"], [69, 0, 1, "", "subtract"], [69, 0, 1, "", "tan"], [69, 0, 1, "", "tanh"], [69, 0, 1, "", "trapz"], [69, 0, 1, "", "trunc"], [69, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[70, 3, 0, "-", "activations"], [70, 3, 0, "-", "conversions"], [70, 3, 0, "-", "creation"], [70, 3, 0, "-", "data_type"], [70, 3, 0, "-", "device"], [70, 3, 0, "-", "elementwise"], [70, 3, 0, "-", "general"], [70, 3, 0, "-", "gradients"], [70, 3, 0, "-", "image"], [70, 3, 0, "-", "layers"], [70, 3, 0, "-", "linear_algebra"], [70, 3, 0, "-", "losses"], [70, 3, 0, "-", "manipulation"], [70, 3, 0, "-", "norms"], [70, 3, 0, "-", "random"], [70, 3, 0, "-", "searching"], [70, 3, 0, "-", "set"], [70, 3, 0, "-", "sorting"], [70, 3, 0, "-", "statistical"], [70, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[70, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "celu"], [70, 0, 1, "", "elu"], [70, 0, 1, "", "hardshrink"], [70, 0, 1, "", "hardsilu"], [70, 0, 1, "", "hardtanh"], [70, 0, 1, "", "logit"], [70, 0, 1, "", "logsigmoid"], [70, 0, 1, "", "prelu"], [70, 0, 1, "", "relu6"], [70, 0, 1, "", "scaled_tanh"], [70, 0, 1, "", "selu"], [70, 0, 1, "", "silu"], [70, 0, 1, "", "softshrink"], [70, 0, 1, "", "tanhshrink"], [70, 0, 1, "", "threshold"], [70, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[70, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[70, 1, 1, "", "_ArrayWithCreationExperimental"], [70, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "blackman_window"], [70, 0, 1, "", "eye_like"], [70, 0, 1, "", "mel_weight_matrix"], [70, 0, 1, "", "trilu"], [70, 0, 1, "", "unsorted_segment_mean"], [70, 0, 1, "", "unsorted_segment_min"], [70, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[70, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[70, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[70, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "allclose"], [70, 0, 1, "", "amax"], [70, 0, 1, "", "amin"], [70, 0, 1, "", "binarizer"], [70, 0, 1, "", "conj"], [70, 0, 1, "", "copysign"], [70, 0, 1, "", "count_nonzero"], [70, 0, 1, "", "diff"], [70, 0, 1, "", "digamma"], [70, 0, 1, "", "erfc"], [70, 0, 1, "", "erfinv"], [70, 0, 1, "", "fix"], [70, 0, 1, "", "float_power"], [70, 0, 1, "", "fmax"], [70, 0, 1, "", "fmod"], [70, 0, 1, "", "frexp"], [70, 0, 1, "", "gradient"], [70, 0, 1, "", "hypot"], [70, 0, 1, "", "isclose"], [70, 0, 1, "", "ldexp"], [70, 0, 1, "", "lerp"], [70, 0, 1, "", "lgamma"], [70, 0, 1, "", "modf"], [70, 0, 1, "", "nansum"], [70, 0, 1, "", "nextafter"], [70, 0, 1, "", "signbit"], [70, 0, 1, "", "sinc"], [70, 0, 1, "", "sparsify_tensor"], [70, 0, 1, "", "xlogy"], [70, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[70, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[70, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[70, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[70, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "adaptive_avg_pool1d"], [70, 0, 1, "", "adaptive_avg_pool2d"], [70, 0, 1, "", "adaptive_max_pool2d"], [70, 0, 1, "", "adaptive_max_pool3d"], [70, 0, 1, "", "avg_pool1d"], [70, 0, 1, "", "avg_pool2d"], [70, 0, 1, "", "avg_pool3d"], [70, 0, 1, "", "dct"], [70, 0, 1, "", "dft"], [70, 0, 1, "", "embedding"], [70, 0, 1, "", "fft"], [70, 0, 1, "", "fft2"], [70, 0, 1, "", "idct"], [70, 0, 1, "", "ifft"], [70, 0, 1, "", "ifftn"], [70, 0, 1, "", "interpolate"], [70, 0, 1, "", "max_pool1d"], [70, 0, 1, "", "max_pool2d"], [70, 0, 1, "", "max_pool3d"], [70, 0, 1, "", "max_unpool1d"], [70, 0, 1, "", "reduce_window"], [70, 0, 1, "", "rfft"], [70, 0, 1, "", "rfftn"], [70, 0, 1, "", "sliding_window"], [70, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[70, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "adjoint"], [70, 0, 1, "", "batched_outer"], [70, 0, 1, "", "cond"], [70, 0, 1, "", "diagflat"], [70, 0, 1, "", "dot"], [70, 0, 1, "", "eig"], [70, 0, 1, "", "eigh_tridiagonal"], [70, 0, 1, "", "eigvals"], [70, 0, 1, "", "general_inner_product"], [70, 0, 1, "", "higher_order_moment"], [70, 0, 1, "", "initialize_tucker"], [70, 0, 1, "", "kron"], [70, 0, 1, "", "make_svd_non_negative"], [70, 0, 1, "", "matrix_exp"], [70, 0, 1, "", "mode_dot"], [70, 0, 1, "", "multi_dot"], [70, 0, 1, "", "multi_mode_dot"], [70, 0, 1, "", "partial_tucker"], [70, 0, 1, "", "svd_flip"], [70, 0, 1, "", "tensor_train"], [70, 0, 1, "", "truncated_svd"], [70, 0, 1, "", "tt_matrix_to_tensor"], [70, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[70, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "hinge_embedding_loss"], [70, 0, 1, "", "huber_loss"], [70, 0, 1, "", "kl_div"], [70, 0, 1, "", "l1_loss"], [70, 0, 1, "", "log_poisson_loss"], [70, 0, 1, "", "poisson_nll_loss"], [70, 0, 1, "", "smooth_l1_loss"], [70, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[70, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "as_strided"], [70, 0, 1, "", "associative_scan"], [70, 0, 1, "", "atleast_1d"], [70, 0, 1, "", "atleast_2d"], [70, 0, 1, "", "atleast_3d"], [70, 0, 1, "", "column_stack"], [70, 0, 1, "", "concat_from_sequence"], [70, 0, 1, "", "dsplit"], [70, 0, 1, "", "dstack"], [70, 0, 1, "", "expand"], [70, 0, 1, "", "fill_diagonal"], [70, 0, 1, "", "flatten"], [70, 0, 1, "", "fliplr"], [70, 0, 1, "", "flipud"], [70, 0, 1, "", "fold"], [70, 0, 1, "", "heaviside"], [70, 0, 1, "", "hsplit"], [70, 0, 1, "", "hstack"], [70, 0, 1, "", "i0"], [70, 0, 1, "", "matricize"], [70, 0, 1, "", "moveaxis"], [70, 0, 1, "", "pad"], [70, 0, 1, "", "partial_fold"], [70, 0, 1, "", "partial_tensor_to_vec"], [70, 0, 1, "", "partial_unfold"], [70, 0, 1, "", "partial_vec_to_tensor"], [70, 0, 1, "", "put_along_axis"], [70, 0, 1, "", "rot90"], [70, 0, 1, "", "soft_thresholding"], [70, 0, 1, "", "take"], [70, 0, 1, "", "take_along_axis"], [70, 0, 1, "", "top_k"], [70, 0, 1, "", "trim_zeros"], [70, 0, 1, "", "unflatten"], [70, 0, 1, "", "unfold"], [70, 0, 1, "", "unique_consecutive"], [70, 0, 1, "", "vsplit"], [70, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[70, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "batch_norm"], [70, 0, 1, "", "group_norm"], [70, 0, 1, "", "instance_norm"], [70, 0, 1, "", "l1_normalize"], [70, 0, 1, "", "l2_normalize"], [70, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[70, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "bernoulli"], [70, 0, 1, "", "beta"], [70, 0, 1, "", "dirichlet"], [70, 0, 1, "", "gamma"], [70, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[70, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[70, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[70, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[70, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[70, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "bincount"], [70, 0, 1, "", "corrcoef"], [70, 0, 1, "", "cov"], [70, 0, 1, "", "cummax"], [70, 0, 1, "", "cummin"], [70, 0, 1, "", "histogram"], [70, 0, 1, "", "igamma"], [70, 0, 1, "", "median"], [70, 0, 1, "", "nanmean"], [70, 0, 1, "", "nanmedian"], [70, 0, 1, "", "nanmin"], [70, 0, 1, "", "nanprod"], [70, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[70, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[71, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "all_equal"], [71, 0, 1, "", "array_equal"], [71, 0, 1, "", "assert_supports_inplace"], [71, 0, 1, "", "clip_matrix_norm"], [71, 0, 1, "", "clip_vector_norm"], [71, 0, 1, "", "default"], [71, 0, 1, "", "einops_rearrange"], [71, 0, 1, "", "einops_reduce"], [71, 0, 1, "", "einops_repeat"], [71, 0, 1, "", "exists"], [71, 0, 1, "", "fourier_encode"], [71, 0, 1, "", "gather"], [71, 0, 1, "", "gather_nd"], [71, 0, 1, "", "get_num_dims"], [71, 0, 1, "", "has_nans"], [71, 0, 1, "", "inplace_decrement"], [71, 0, 1, "", "inplace_increment"], [71, 0, 1, "", "inplace_update"], [71, 0, 1, "", "is_array"], [71, 0, 1, "", "is_ivy_array"], [71, 0, 1, "", "is_ivy_container"], [71, 0, 1, "", "is_native_array"], [71, 0, 1, "", "isin"], [71, 0, 1, "", "scatter_flat"], [71, 0, 1, "", "scatter_nd"], [71, 0, 1, "", "stable_divide"], [71, 0, 1, "", "stable_pow"], [71, 0, 1, "", "supports_inplace_updates"], [71, 0, 1, "", "to_file"], [71, 0, 1, "", "to_list"], [71, 0, 1, "", "to_numpy"], [71, 0, 1, "", "to_scalar"], [71, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[72, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "adam_step"], [72, 0, 1, "", "adam_update"], [72, 0, 1, "", "gradient_descent_update"], [72, 0, 1, "", "lamb_update"], [72, 0, 1, "", "lars_update"], [72, 0, 1, "", "optimizer_update"], [72, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[73, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[74, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "conv1d"], [74, 0, 1, "", "conv1d_transpose"], [74, 0, 1, "", "conv2d"], [74, 0, 1, "", "conv2d_transpose"], [74, 0, 1, "", "conv3d"], [74, 0, 1, "", "conv3d_transpose"], [74, 0, 1, "", "depthwise_conv2d"], [74, 0, 1, "", "dropout"], [74, 0, 1, "", "dropout1d"], [74, 0, 1, "", "dropout2d"], [74, 0, 1, "", "dropout3d"], [74, 0, 1, "", "linear"], [74, 0, 1, "", "lstm_update"], [74, 0, 1, "", "multi_head_attention"], [74, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[75, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "cholesky"], [75, 0, 1, "", "cross"], [75, 0, 1, "", "det"], [75, 0, 1, "", "diag"], [75, 0, 1, "", "diagonal"], [75, 0, 1, "", "eig"], [75, 0, 1, "", "eigh"], [75, 0, 1, "", "eigvalsh"], [75, 0, 1, "", "inner"], [75, 0, 1, "", "inv"], [75, 0, 1, "", "matmul"], [75, 0, 1, "", "matrix_norm"], [75, 0, 1, "", "matrix_power"], [75, 0, 1, "", "matrix_rank"], [75, 0, 1, "", "matrix_transpose"], [75, 0, 1, "", "outer"], [75, 0, 1, "", "pinv"], [75, 0, 1, "", "qr"], [75, 0, 1, "", "slogdet"], [75, 0, 1, "", "solve"], [75, 0, 1, "", "svd"], [75, 0, 1, "", "svdvals"], [75, 0, 1, "", "tensordot"], [75, 0, 1, "", "tensorsolve"], [75, 0, 1, "", "trace"], [75, 0, 1, "", "vander"], [75, 0, 1, "", "vecdot"], [75, 0, 1, "", "vector_norm"], [75, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[76, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "binary_cross_entropy"], [76, 0, 1, "", "cross_entropy"], [76, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[77, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "clip"], [77, 0, 1, "", "concat"], [77, 0, 1, "", "constant_pad"], [77, 0, 1, "", "expand_dims"], [77, 0, 1, "", "flip"], [77, 0, 1, "", "permute_dims"], [77, 0, 1, "", "repeat"], [77, 0, 1, "", "reshape"], [77, 0, 1, "", "roll"], [77, 0, 1, "", "split"], [77, 0, 1, "", "squeeze"], [77, 0, 1, "", "stack"], [77, 0, 1, "", "swapaxes"], [77, 0, 1, "", "tile"], [77, 0, 1, "", "unstack"], [77, 0, 1, "", "view"], [77, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[78, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[79, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "multinomial"], [79, 0, 1, "", "randint"], [79, 0, 1, "", "random_normal"], [79, 0, 1, "", "random_uniform"], [79, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[80, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "argmax"], [80, 0, 1, "", "argmin"], [80, 0, 1, "", "argwhere"], [80, 0, 1, "", "nonzero"], [80, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[81, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "unique_all"], [81, 0, 1, "", "unique_counts"], [81, 0, 1, "", "unique_inverse"], [81, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[82, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "argsort"], [82, 0, 1, "", "msort"], [82, 0, 1, "", "searchsorted"], [82, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[83, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "cumprod"], [83, 0, 1, "", "cumsum"], [83, 0, 1, "", "einsum"], [83, 0, 1, "", "max"], [83, 0, 1, "", "mean"], [83, 0, 1, "", "min"], [83, 0, 1, "", "prod"], [83, 0, 1, "", "std"], [83, 0, 1, "", "sum"], [83, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[84, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "all"], [84, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[85, 2, 1, "", "_wrap_function"], [85, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[86, 3, 0, "-", "activations"], [87, 3, 0, "-", "base"], [116, 3, 0, "-", "container"], [88, 3, 0, "-", "conversions"], [89, 3, 0, "-", "creation"], [90, 3, 0, "-", "data_type"], [91, 3, 0, "-", "device"], [92, 3, 0, "-", "elementwise"], [93, 3, 0, "-", "experimental"], [94, 3, 0, "-", "general"], [95, 3, 0, "-", "gradients"], [96, 3, 0, "-", "image"], [97, 3, 0, "-", "layers"], [98, 3, 0, "-", "linear_algebra"], [99, 3, 0, "-", "losses"], [100, 3, 0, "-", "manipulation"], [101, 3, 0, "-", "norms"], [102, 3, 0, "-", "random"], [103, 3, 0, "-", "searching"], [104, 3, 0, "-", "set"], [105, 3, 0, "-", "sorting"], [106, 3, 0, "-", "statistical"], [107, 3, 0, "-", "utility"], [108, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[86, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_gelu"], [86, 0, 1, "", "_static_hardswish"], [86, 0, 1, "", "_static_leaky_relu"], [86, 0, 1, "", "_static_log_softmax"], [86, 0, 1, "", "_static_mish"], [86, 0, 1, "", "_static_relu"], [86, 0, 1, "", "_static_sigmoid"], [86, 0, 1, "", "_static_softmax"], [86, 0, 1, "", "_static_softplus"], [86, 0, 1, "", "gelu"], [86, 0, 1, "", "hardswish"], [86, 0, 1, "", "leaky_relu"], [86, 0, 1, "", "log_softmax"], [86, 0, 1, "", "mish"], [86, 0, 1, "", "relu"], [86, 0, 1, "", "sigmoid"], [86, 0, 1, "", "softmax"], [86, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[87, 1, 1, "", "ContainerBase"], [87, 2, 1, "", "_is_jsonable"], [87, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[87, 0, 1, "", "__getitem__"], [87, 0, 1, "", "__init__"], [87, 0, 1, "", "__setitem__"], [87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [87, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [87, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [87, 0, 1, "", "_cont_concat_unify"], [87, 0, 1, "", "_cont_get_dev"], [87, 0, 1, "", "_cont_get_dtype"], [87, 0, 1, "", "_cont_get_shape"], [87, 0, 1, "", "_cont_get_shapes"], [87, 5, 1, "", "_cont_ivy"], [87, 0, 1, "", "_cont_mean_unify"], [87, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [87, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [87, 0, 1, "", "_cont_slice_keys"], [87, 0, 1, "", "_cont_sum_unify"], [87, 0, 1, "", "_get_queue_item"], [87, 0, 1, "", "cont_all_false"], [87, 0, 1, "", "cont_all_key_chains"], [87, 0, 1, "", "cont_all_true"], [87, 0, 1, "", "cont_as_bools"], [87, 0, 1, "", "cont_assert_contains_sub_container"], [87, 0, 1, "", "cont_assert_contains_sub_structure"], [87, 0, 1, "", "cont_assert_identical"], [87, 0, 1, "", "cont_assert_identical_structure"], [87, 0, 1, "", "cont_at_key_chain"], [87, 0, 1, "", "cont_at_key_chains"], [87, 0, 1, "", "cont_at_keys"], [87, 0, 1, "", "cont_combine"], [87, 0, 1, "", "cont_common_key_chains"], [87, 5, 1, "", "cont_config"], [87, 0, 1, "", "cont_contains_sub_container"], [87, 0, 1, "", "cont_contains_sub_structure"], [87, 0, 1, "", "cont_copy"], [87, 0, 1, "", "cont_create_if_absent"], [87, 0, 1, "", "cont_cutoff_at_depth"], [87, 0, 1, "", "cont_cutoff_at_height"], [87, 0, 1, "", "cont_deep_copy"], [87, 5, 1, "", "cont_dev"], [87, 5, 1, "", "cont_dev_str"], [87, 0, 1, "", "cont_diff"], [87, 5, 1, "", "cont_dtype"], [87, 0, 1, "", "cont_duplicate_array_keychains"], [87, 0, 1, "", "cont_find_sub_container"], [87, 0, 1, "", "cont_find_sub_structure"], [87, 0, 1, "", "cont_flatten_key_chain"], [87, 0, 1, "", "cont_flatten_key_chains"], [87, 0, 1, "", "cont_format_key_chains"], [87, 0, 1, "", "cont_from_disk_as_hdf5"], [87, 0, 1, "", "cont_from_disk_as_json"], [87, 0, 1, "", "cont_from_disk_as_pickled"], [87, 0, 1, "", "cont_from_flat_list"], [87, 0, 1, "", "cont_handle_inplace"], [87, 0, 1, "", "cont_has_key"], [87, 0, 1, "", "cont_has_key_chain"], [87, 0, 1, "", "cont_identical"], [87, 0, 1, "", "cont_identical_array_shapes"], [87, 0, 1, "", "cont_identical_configs"], [87, 0, 1, "", "cont_identical_structure"], [87, 0, 1, "", "cont_if_exists"], [87, 0, 1, "", "cont_inplace_update"], [87, 5, 1, "", "cont_ivy"], [87, 0, 1, "", "cont_key_chains_containing"], [87, 0, 1, "", "cont_list_join"], [87, 0, 1, "", "cont_list_stack"], [87, 0, 1, "", "cont_load"], [87, 0, 1, "", "cont_map"], [87, 0, 1, "", "cont_map_sub_conts"], [87, 5, 1, "", "cont_max_depth"], [87, 0, 1, "", "cont_multi_map"], [87, 0, 1, "", "cont_multi_map_in_function"], [87, 0, 1, "", "cont_num_arrays"], [87, 0, 1, "", "cont_overwrite_at_key_chain"], [87, 0, 1, "", "cont_overwrite_at_key_chains"], [87, 0, 1, "", "cont_prune_empty"], [87, 0, 1, "", "cont_prune_key_chain"], [87, 0, 1, "", "cont_prune_key_chains"], [87, 0, 1, "", "cont_prune_key_from_key_chains"], [87, 0, 1, "", "cont_prune_keys"], [87, 0, 1, "", "cont_prune_keys_from_key_chains"], [87, 0, 1, "", "cont_reduce"], [87, 0, 1, "", "cont_remove_key_length_limit"], [87, 0, 1, "", "cont_remove_print_limit"], [87, 0, 1, "", "cont_reshape_like"], [87, 0, 1, "", "cont_restructure"], [87, 0, 1, "", "cont_restructure_key_chains"], [87, 0, 1, "", "cont_save"], [87, 0, 1, "", "cont_set_at_key_chain"], [87, 0, 1, "", "cont_set_at_key_chains"], [87, 0, 1, "", "cont_set_at_keys"], [87, 5, 1, "", "cont_shape"], [87, 5, 1, "", "cont_shapes"], [87, 0, 1, "", "cont_show"], [87, 0, 1, "", "cont_show_sub_container"], [87, 0, 1, "", "cont_size_ordered_arrays"], [87, 0, 1, "", "cont_slice_keys"], [87, 0, 1, "", "cont_slice_via_key"], [87, 0, 1, "", "cont_sort_by_key"], [87, 0, 1, "", "cont_structural_diff"], [87, 0, 1, "", "cont_to_dict"], [87, 0, 1, "", "cont_to_disk_as_hdf5"], [87, 0, 1, "", "cont_to_disk_as_json"], [87, 0, 1, "", "cont_to_disk_as_pickled"], [87, 0, 1, "", "cont_to_flat_list"], [87, 0, 1, "", "cont_to_iterator"], [87, 0, 1, "", "cont_to_iterator_keys"], [87, 0, 1, "", "cont_to_iterator_values"], [87, 0, 1, "", "cont_to_jsonable"], [87, 0, 1, "", "cont_to_nested_list"], [87, 0, 1, "", "cont_to_raw"], [87, 0, 1, "", "cont_trim_key"], [87, 0, 1, "", "cont_try_kc"], [87, 0, 1, "", "cont_unify"], [87, 0, 1, "", "cont_unstack_conts"], [87, 0, 1, "", "cont_update_config"], [87, 0, 1, "", "cont_with_default_key_color"], [87, 0, 1, "", "cont_with_entries_as_lists"], [87, 0, 1, "", "cont_with_ivy_backend"], [87, 0, 1, "", "cont_with_key_length_limit"], [87, 0, 1, "", "cont_with_print_indent"], [87, 0, 1, "", "cont_with_print_limit"], [87, 0, 1, "", "cont_with_print_line_spacing"], [87, 5, 1, "", "dynamic_backend"], [87, 0, 1, "", "h5_file_size"], [87, 0, 1, "", "shuffle_h5_file"], [87, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[116, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[116, 0, 1, "", "__abs__"], [116, 0, 1, "", "__add__"], [116, 0, 1, "", "__eq__"], [116, 0, 1, "", "__ge__"], [116, 0, 1, "", "__gt__"], [116, 0, 1, "", "__init__"], [116, 0, 1, "", "__le__"], [116, 0, 1, "", "__lt__"], [116, 0, 1, "", "__ne__"], [116, 0, 1, "", "__pow__"], [116, 0, 1, "", "__radd__"], [116, 0, 1, "", "__rrshift__"], [116, 0, 1, "", "__rshift__"], [116, 0, 1, "", "__rsub__"], [116, 0, 1, "", "__sub__"], [116, 0, 1, "", "__truediv__"], [116, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[88, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_to_ivy"], [88, 0, 1, "", "_static_to_native"], [88, 0, 1, "", "to_ivy"], [88, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[89, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_arange"], [89, 0, 1, "", "_static_asarray"], [89, 0, 1, "", "_static_copy_array"], [89, 0, 1, "", "_static_empty"], [89, 0, 1, "", "_static_empty_like"], [89, 0, 1, "", "_static_eye"], [89, 0, 1, "", "_static_from_dlpack"], [89, 0, 1, "", "_static_full"], [89, 0, 1, "", "_static_full_like"], [89, 0, 1, "", "_static_linspace"], [89, 0, 1, "", "_static_logspace"], [89, 0, 1, "", "_static_meshgrid"], [89, 0, 1, "", "_static_native_array"], [89, 0, 1, "", "_static_one_hot"], [89, 0, 1, "", "_static_ones"], [89, 0, 1, "", "_static_ones_like"], [89, 0, 1, "", "_static_tril"], [89, 0, 1, "", "_static_triu"], [89, 0, 1, "", "_static_zeros"], [89, 0, 1, "", "_static_zeros_like"], [89, 0, 1, "", "asarray"], [89, 0, 1, "", "copy_array"], [89, 0, 1, "", "empty_like"], [89, 0, 1, "", "from_dlpack"], [89, 0, 1, "", "frombuffer"], [89, 0, 1, "", "full_like"], [89, 0, 1, "", "linspace"], [89, 0, 1, "", "logspace"], [89, 0, 1, "", "meshgrid"], [89, 0, 1, "", "native_array"], [89, 0, 1, "", "one_hot"], [89, 0, 1, "", "ones_like"], [89, 0, 1, "", "static_frombuffer"], [89, 0, 1, "", "static_triu_indices"], [89, 0, 1, "", "tril"], [89, 0, 1, "", "triu"], [89, 0, 1, "", "triu_indices"], [89, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[90, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_astype"], [90, 0, 1, "", "_static_broadcast_arrays"], [90, 0, 1, "", "_static_broadcast_to"], [90, 0, 1, "", "_static_can_cast"], [90, 0, 1, "", "_static_default_complex_dtype"], [90, 0, 1, "", "_static_default_float_dtype"], [90, 0, 1, "", "_static_dtype"], [90, 0, 1, "", "_static_finfo"], [90, 0, 1, "", "_static_function_supported_dtypes"], [90, 0, 1, "", "_static_function_unsupported_dtypes"], [90, 0, 1, "", "_static_iinfo"], [90, 0, 1, "", "_static_is_bool_dtype"], [90, 0, 1, "", "_static_is_complex_dtype"], [90, 0, 1, "", "_static_is_float_dtype"], [90, 0, 1, "", "_static_is_int_dtype"], [90, 0, 1, "", "_static_is_uint_dtype"], [90, 0, 1, "", "_static_result_type"], [90, 0, 1, "", "astype"], [90, 0, 1, "", "broadcast_arrays"], [90, 0, 1, "", "broadcast_to"], [90, 0, 1, "", "can_cast"], [90, 0, 1, "", "dtype"], [90, 0, 1, "", "finfo"], [90, 0, 1, "", "iinfo"], [90, 0, 1, "", "is_bool_dtype"], [90, 0, 1, "", "is_complex_dtype"], [90, 0, 1, "", "is_float_dtype"], [90, 0, 1, "", "is_int_dtype"], [90, 0, 1, "", "is_uint_dtype"], [90, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[91, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_dev"], [91, 0, 1, "", "_static_to_device"], [91, 0, 1, "", "dev"], [91, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[92, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_abs"], [92, 0, 1, "", "_static_acos"], [92, 0, 1, "", "_static_acosh"], [92, 0, 1, "", "_static_add"], [92, 0, 1, "", "_static_asin"], [92, 0, 1, "", "_static_asinh"], [92, 0, 1, "", "_static_atan"], [92, 0, 1, "", "_static_atan2"], [92, 0, 1, "", "_static_atanh"], [92, 0, 1, "", "_static_bitwise_and"], [92, 0, 1, "", "_static_bitwise_invert"], [92, 0, 1, "", "_static_bitwise_left_shift"], [92, 0, 1, "", "_static_bitwise_or"], [92, 0, 1, "", "_static_bitwise_right_shift"], [92, 0, 1, "", "_static_bitwise_xor"], [92, 0, 1, "", "_static_ceil"], [92, 0, 1, "", "_static_cos"], [92, 0, 1, "", "_static_cosh"], [92, 0, 1, "", "_static_deg2rad"], [92, 0, 1, "", "_static_divide"], [92, 0, 1, "", "_static_equal"], [92, 0, 1, "", "_static_erf"], [92, 0, 1, "", "_static_exp"], [92, 0, 1, "", "_static_expm1"], [92, 0, 1, "", "_static_floor"], [92, 0, 1, "", "_static_floor_divide"], [92, 0, 1, "", "_static_greater"], [92, 0, 1, "", "_static_greater_equal"], [92, 0, 1, "", "_static_isfinite"], [92, 0, 1, "", "_static_isinf"], [92, 0, 1, "", "_static_isnan"], [92, 0, 1, "", "_static_isreal"], [92, 0, 1, "", "_static_lcm"], [92, 0, 1, "", "_static_less"], [92, 0, 1, "", "_static_less_equal"], [92, 0, 1, "", "_static_log"], [92, 0, 1, "", "_static_log10"], [92, 0, 1, "", "_static_log1p"], [92, 0, 1, "", "_static_log2"], [92, 0, 1, "", "_static_logaddexp"], [92, 0, 1, "", "_static_logical_and"], [92, 0, 1, "", "_static_logical_not"], [92, 0, 1, "", "_static_logical_or"], [92, 0, 1, "", "_static_logical_xor"], [92, 0, 1, "", "_static_maximum"], [92, 0, 1, "", "_static_minimum"], [92, 0, 1, "", "_static_multiply"], [92, 0, 1, "", "_static_negative"], [92, 0, 1, "", "_static_not_equal"], [92, 0, 1, "", "_static_positive"], [92, 0, 1, "", "_static_pow"], [92, 0, 1, "", "_static_rad2deg"], [92, 0, 1, "", "_static_reciprocal"], [92, 0, 1, "", "_static_remainder"], [92, 0, 1, "", "_static_round"], [92, 0, 1, "", "_static_sign"], [92, 0, 1, "", "_static_sin"], [92, 0, 1, "", "_static_sinh"], [92, 0, 1, "", "_static_sqrt"], [92, 0, 1, "", "_static_square"], [92, 0, 1, "", "_static_subtract"], [92, 0, 1, "", "_static_tan"], [92, 0, 1, "", "_static_tanh"], [92, 0, 1, "", "_static_trapz"], [92, 0, 1, "", "_static_trunc"], [92, 0, 1, "", "_static_trunc_divide"], [92, 0, 1, "", "abs"], [92, 0, 1, "", "acos"], [92, 0, 1, "", "acosh"], [92, 0, 1, "", "add"], [92, 0, 1, "", "angle"], [92, 0, 1, "", "asin"], [92, 0, 1, "", "asinh"], [92, 0, 1, "", "atan"], [92, 0, 1, "", "atan2"], [92, 0, 1, "", "atanh"], [92, 0, 1, "", "bitwise_and"], [92, 0, 1, "", "bitwise_invert"], [92, 0, 1, "", "bitwise_left_shift"], [92, 0, 1, "", "bitwise_or"], [92, 0, 1, "", "bitwise_right_shift"], [92, 0, 1, "", "bitwise_xor"], [92, 0, 1, "", "ceil"], [92, 0, 1, "", "cos"], [92, 0, 1, "", "cosh"], [92, 0, 1, "", "deg2rad"], [92, 0, 1, "", "divide"], [92, 0, 1, "", "equal"], [92, 0, 1, "", "erf"], [92, 0, 1, "", "exp"], [92, 0, 1, "", "exp2"], [92, 0, 1, "", "expm1"], [92, 0, 1, "", "floor"], [92, 0, 1, "", "floor_divide"], [92, 0, 1, "", "fmin"], [92, 0, 1, "", "gcd"], [92, 0, 1, "", "greater"], [92, 0, 1, "", "greater_equal"], [92, 0, 1, "", "imag"], [92, 0, 1, "", "isfinite"], [92, 0, 1, "", "isinf"], [92, 0, 1, "", "isnan"], [92, 0, 1, "", "isreal"], [92, 0, 1, "", "lcm"], [92, 0, 1, "", "less"], [92, 0, 1, "", "less_equal"], [92, 0, 1, "", "log"], [92, 0, 1, "", "log10"], [92, 0, 1, "", "log1p"], [92, 0, 1, "", "log2"], [92, 0, 1, "", "logaddexp"], [92, 0, 1, "", "logaddexp2"], [92, 0, 1, "", "logical_and"], [92, 0, 1, "", "logical_not"], [92, 0, 1, "", "logical_or"], [92, 0, 1, "", "logical_xor"], [92, 0, 1, "", "maximum"], [92, 0, 1, "", "minimum"], [92, 0, 1, "", "multiply"], [92, 0, 1, "", "nan_to_num"], [92, 0, 1, "", "negative"], [92, 0, 1, "", "not_equal"], [92, 0, 1, "", "positive"], [92, 0, 1, "", "pow"], [92, 0, 1, "", "rad2deg"], [92, 0, 1, "", "real"], [92, 0, 1, "", "reciprocal"], [92, 0, 1, "", "remainder"], [92, 0, 1, "", "round"], [92, 0, 1, "", "sign"], [92, 0, 1, "", "sin"], [92, 0, 1, "", "sinh"], [92, 0, 1, "", "sqrt"], [92, 0, 1, "", "square"], [92, 0, 1, "", "static_angle"], [92, 0, 1, "", "static_exp2"], [92, 0, 1, "", "static_fmin"], [92, 0, 1, "", "static_gcd"], [92, 0, 1, "", "static_imag"], [92, 0, 1, "", "static_logaddexp2"], [92, 0, 1, "", "static_nan_to_num"], [92, 0, 1, "", "static_real"], [92, 0, 1, "", "subtract"], [92, 0, 1, "", "tan"], [92, 0, 1, "", "tanh"], [92, 0, 1, "", "trapz"], [92, 0, 1, "", "trunc"], [92, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[93, 3, 0, "-", "activations"], [93, 3, 0, "-", "conversions"], [93, 3, 0, "-", "creation"], [93, 3, 0, "-", "data_type"], [93, 3, 0, "-", "device"], [93, 3, 0, "-", "elementwise"], [93, 3, 0, "-", "general"], [93, 3, 0, "-", "gradients"], [93, 3, 0, "-", "image"], [93, 3, 0, "-", "layers"], [93, 3, 0, "-", "linear_algebra"], [93, 3, 0, "-", "losses"], [93, 3, 0, "-", "manipulation"], [93, 3, 0, "-", "norms"], [93, 3, 0, "-", "random"], [93, 3, 0, "-", "searching"], [93, 3, 0, "-", "set"], [93, 3, 0, "-", "sorting"], [93, 3, 0, "-", "statistical"], [93, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[93, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_celu"], [93, 0, 1, "", "_static_elu"], [93, 0, 1, "", "_static_hardshrink"], [93, 0, 1, "", "_static_hardsilu"], [93, 0, 1, "", "_static_hardtanh"], [93, 0, 1, "", "_static_scaled_tanh"], [93, 0, 1, "", "_static_silu"], [93, 0, 1, "", "_static_softshrink"], [93, 0, 1, "", "_static_tanhshrink"], [93, 0, 1, "", "_static_threshold"], [93, 0, 1, "", "celu"], [93, 0, 1, "", "elu"], [93, 0, 1, "", "hardshrink"], [93, 0, 1, "", "hardsilu"], [93, 0, 1, "", "hardtanh"], [93, 0, 1, "", "logit"], [93, 0, 1, "", "logsigmoid"], [93, 0, 1, "", "prelu"], [93, 0, 1, "", "relu6"], [93, 0, 1, "", "scaled_tanh"], [93, 0, 1, "", "selu"], [93, 0, 1, "", "silu"], [93, 0, 1, "", "softshrink"], [93, 0, 1, "", "static_logit"], [93, 0, 1, "", "static_logsigmoid"], [93, 0, 1, "", "static_prelu"], [93, 0, 1, "", "static_relu6"], [93, 0, 1, "", "static_selu"], [93, 0, 1, "", "static_thresholded_relu"], [93, 0, 1, "", "tanhshrink"], [93, 0, 1, "", "threshold"], [93, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[93, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[93, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_trilu"], [93, 0, 1, "", "blackman_window"], [93, 0, 1, "", "eye_like"], [93, 0, 1, "", "hamming_window"], [93, 0, 1, "", "hann_window"], [93, 0, 1, "", "kaiser_bessel_derived_window"], [93, 0, 1, "", "kaiser_window"], [93, 0, 1, "", "mel_weight_matrix"], [93, 0, 1, "", "polyval"], [93, 0, 1, "", "static_blackman_window"], [93, 0, 1, "", "static_eye_like"], [93, 0, 1, "", "static_hamming_window"], [93, 0, 1, "", "static_hann_window"], [93, 0, 1, "", "static_kaiser_bessel_derived_window"], [93, 0, 1, "", "static_kaiser_window"], [93, 0, 1, "", "static_mel_weight_matrix"], [93, 0, 1, "", "static_polyval"], [93, 0, 1, "", "static_tril_indices"], [93, 0, 1, "", "static_unsorted_segment_mean"], [93, 0, 1, "", "static_unsorted_segment_min"], [93, 0, 1, "", "static_unsorted_segment_sum"], [93, 0, 1, "", "static_vorbis_window"], [93, 0, 1, "", "tril_indices"], [93, 0, 1, "", "trilu"], [93, 0, 1, "", "unsorted_segment_mean"], [93, 0, 1, "", "unsorted_segment_min"], [93, 0, 1, "", "unsorted_segment_sum"], [93, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[93, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[93, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[93, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "allclose"], [93, 0, 1, "", "amax"], [93, 0, 1, "", "amin"], [93, 0, 1, "", "binarizer"], [93, 0, 1, "", "conj"], [93, 0, 1, "", "copysign"], [93, 0, 1, "", "count_nonzero"], [93, 0, 1, "", "diff"], [93, 0, 1, "", "digamma"], [93, 0, 1, "", "erfc"], [93, 0, 1, "", "erfinv"], [93, 0, 1, "", "fix"], [93, 0, 1, "", "float_power"], [93, 0, 1, "", "fmax"], [93, 0, 1, "", "fmod"], [93, 0, 1, "", "frexp"], [93, 0, 1, "", "gradient"], [93, 0, 1, "", "hypot"], [93, 0, 1, "", "isclose"], [93, 0, 1, "", "ldexp"], [93, 0, 1, "", "lerp"], [93, 0, 1, "", "modf"], [93, 0, 1, "", "nansum"], [93, 0, 1, "", "nextafter"], [93, 0, 1, "", "signbit"], [93, 0, 1, "", "sinc"], [93, 0, 1, "", "sparsify_tensor"], [93, 0, 1, "", "static_allclose"], [93, 0, 1, "", "static_amax"], [93, 0, 1, "", "static_amin"], [93, 0, 1, "", "static_binarizer"], [93, 0, 1, "", "static_conj"], [93, 0, 1, "", "static_copysign"], [93, 0, 1, "", "static_count_nonzero"], [93, 0, 1, "", "static_diff"], [93, 0, 1, "", "static_digamma"], [93, 0, 1, "", "static_erfc"], [93, 0, 1, "", "static_erfinv"], [93, 0, 1, "", "static_fix"], [93, 0, 1, "", "static_float_power"], [93, 0, 1, "", "static_fmax"], [93, 0, 1, "", "static_fmod"], [93, 0, 1, "", "static_frexp"], [93, 0, 1, "", "static_gradient"], [93, 0, 1, "", "static_hypot"], [93, 0, 1, "", "static_isclose"], [93, 0, 1, "", "static_ldexp"], [93, 0, 1, "", "static_lerp"], [93, 0, 1, "", "static_modf"], [93, 0, 1, "", "static_nansum"], [93, 0, 1, "", "static_nextafter"], [93, 0, 1, "", "static_signbit"], [93, 0, 1, "", "static_sinc"], [93, 0, 1, "", "static_sparsify_tensor"], [93, 0, 1, "", "static_xlogy"], [93, 0, 1, "", "static_zeta"], [93, 0, 1, "", "xlogy"], [93, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[93, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_reduce"], [93, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[93, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[93, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[93, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_fft"], [93, 0, 1, "", "_static_sliding_window"], [93, 0, 1, "", "adaptive_avg_pool1d"], [93, 0, 1, "", "adaptive_avg_pool2d"], [93, 0, 1, "", "adaptive_max_pool2d"], [93, 0, 1, "", "adaptive_max_pool3d"], [93, 0, 1, "", "avg_pool1d"], [93, 0, 1, "", "avg_pool2d"], [93, 0, 1, "", "avg_pool3d"], [93, 0, 1, "", "dct"], [93, 0, 1, "", "dft"], [93, 0, 1, "", "embedding"], [93, 0, 1, "", "fft"], [93, 0, 1, "", "idct"], [93, 0, 1, "", "ifft"], [93, 0, 1, "", "ifftn"], [93, 0, 1, "", "interpolate"], [93, 0, 1, "", "max_pool1d"], [93, 0, 1, "", "max_pool2d"], [93, 0, 1, "", "max_pool3d"], [93, 0, 1, "", "max_unpool1d"], [93, 0, 1, "", "rfft"], [93, 0, 1, "", "rfftn"], [93, 0, 1, "", "sliding_window"], [93, 0, 1, "", "static_adaptive_avg_pool1d"], [93, 0, 1, "", "static_adaptive_avg_pool2d"], [93, 0, 1, "", "static_adaptive_max_pool2d"], [93, 0, 1, "", "static_adaptive_max_pool3d"], [93, 0, 1, "", "static_avg_pool1d"], [93, 0, 1, "", "static_avg_pool2d"], [93, 0, 1, "", "static_avg_pool3d"], [93, 0, 1, "", "static_dct"], [93, 0, 1, "", "static_dft"], [93, 0, 1, "", "static_embedding"], [93, 0, 1, "", "static_idct"], [93, 0, 1, "", "static_ifft"], [93, 0, 1, "", "static_ifftn"], [93, 0, 1, "", "static_interpolate"], [93, 0, 1, "", "static_max_pool1d"], [93, 0, 1, "", "static_max_pool2d"], [93, 0, 1, "", "static_max_pool3d"], [93, 0, 1, "", "static_max_unpool1d"], [93, 0, 1, "", "static_rfft"], [93, 0, 1, "", "static_rfftn"], [93, 0, 1, "", "static_rnn"], [93, 0, 1, "", "static_stft"], [93, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[93, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "adjoint"], [93, 0, 1, "", "batched_outer"], [93, 0, 1, "", "cond"], [93, 0, 1, "", "diagflat"], [93, 0, 1, "", "dot"], [93, 0, 1, "", "eig"], [93, 0, 1, "", "eigh_tridiagonal"], [93, 0, 1, "", "eigvals"], [93, 0, 1, "", "higher_order_moment"], [93, 0, 1, "", "initialize_tucker"], [93, 0, 1, "", "kron"], [93, 0, 1, "", "make_svd_non_negative"], [93, 0, 1, "", "matrix_exp"], [93, 0, 1, "", "mode_dot"], [93, 0, 1, "", "multi_dot"], [93, 0, 1, "", "multi_mode_dot"], [93, 0, 1, "", "partial_tucker"], [93, 0, 1, "", "static_adjoint"], [93, 0, 1, "", "static_batched_outer"], [93, 0, 1, "", "static_cond"], [93, 0, 1, "", "static_diagflat"], [93, 0, 1, "", "static_dot"], [93, 0, 1, "", "static_eig"], [93, 0, 1, "", "static_eigh_tridiagonal"], [93, 0, 1, "", "static_eigvals"], [93, 0, 1, "", "static_higher_order_moment"], [93, 0, 1, "", "static_initialize_tucker"], [93, 0, 1, "", "static_kron"], [93, 0, 1, "", "static_make_svd_non_negative"], [93, 0, 1, "", "static_matrix_exp"], [93, 0, 1, "", "static_mode_dot"], [93, 0, 1, "", "static_multi_dot"], [93, 0, 1, "", "static_multi_mode_dot"], [93, 0, 1, "", "static_partial_tucker"], [93, 0, 1, "", "static_svd_flip"], [93, 0, 1, "", "static_tensor_train"], [93, 0, 1, "", "static_truncated_svd"], [93, 0, 1, "", "static_tt_matrix_to_tensor"], [93, 0, 1, "", "static_tucker"], [93, 0, 1, "", "svd_flip"], [93, 0, 1, "", "tensor_train"], [93, 0, 1, "", "truncated_svd"], [93, 0, 1, "", "tt_matrix_to_tensor"], [93, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[93, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_hinge_embedding_loss"], [93, 0, 1, "", "_static_huber_loss"], [93, 0, 1, "", "_static_kl_div"], [93, 0, 1, "", "_static_l1_loss"], [93, 0, 1, "", "_static_log_poisson_loss"], [93, 0, 1, "", "_static_poisson_nll_loss"], [93, 0, 1, "", "_static_smooth_l1_loss"], [93, 0, 1, "", "_static_soft_margin_loss"], [93, 0, 1, "", "hinge_embedding_loss"], [93, 0, 1, "", "huber_loss"], [93, 0, 1, "", "kl_div"], [93, 0, 1, "", "l1_loss"], [93, 0, 1, "", "log_poisson_loss"], [93, 0, 1, "", "poisson_nll_loss"], [93, 0, 1, "", "smooth_l1_loss"], [93, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[93, 1, 1, "", "_ContainerWithManipulationExperimental"], [93, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_fill_diagonal"], [93, 0, 1, "", "_static_put_along_axis"], [93, 0, 1, "", "_static_take"], [93, 0, 1, "", "_static_trim_zeros"], [93, 0, 1, "", "_static_unflatten"], [93, 0, 1, "", "_static_unique_consecutive"], [93, 0, 1, "", "as_strided"], [93, 0, 1, "", "associative_scan"], [93, 0, 1, "", "atleast_1d"], [93, 0, 1, "", "atleast_2d"], [93, 0, 1, "", "atleast_3d"], [93, 0, 1, "", "broadcast_shapes"], [93, 0, 1, "", "column_stack"], [93, 0, 1, "", "concat_from_sequence"], [93, 0, 1, "", "dsplit"], [93, 0, 1, "", "dstack"], [93, 0, 1, "", "expand"], [93, 0, 1, "", "fill_diagonal"], [93, 0, 1, "", "flatten"], [93, 0, 1, "", "fliplr"], [93, 0, 1, "", "flipud"], [93, 0, 1, "", "fold"], [93, 0, 1, "", "heaviside"], [93, 0, 1, "", "hsplit"], [93, 0, 1, "", "hstack"], [93, 0, 1, "", "i0"], [93, 0, 1, "", "matricize"], [93, 0, 1, "", "moveaxis"], [93, 0, 1, "", "pad"], [93, 0, 1, "", "partial_fold"], [93, 0, 1, "", "partial_tensor_to_vec"], [93, 0, 1, "", "partial_unfold"], [93, 0, 1, "", "partial_vec_to_tensor"], [93, 0, 1, "", "put_along_axis"], [93, 0, 1, "", "rot90"], [93, 0, 1, "", "soft_thresholding"], [93, 0, 1, "", "static_as_strided"], [93, 0, 1, "", "static_atleast_1d"], [93, 0, 1, "", "static_atleast_2d"], [93, 0, 1, "", "static_atleast_3d"], [93, 0, 1, "", "static_broadcast_shapes"], [93, 0, 1, "", "static_column_stack"], [93, 0, 1, "", "static_concat_from_sequence"], [93, 0, 1, "", "static_dsplit"], [93, 0, 1, "", "static_dstack"], [93, 0, 1, "", "static_expand"], [93, 0, 1, "", "static_flatten"], [93, 0, 1, "", "static_fliplr"], [93, 0, 1, "", "static_flipud"], [93, 0, 1, "", "static_fold"], [93, 0, 1, "", "static_heaviside"], [93, 0, 1, "", "static_hsplit"], [93, 0, 1, "", "static_hstack"], [93, 0, 1, "", "static_i0"], [93, 0, 1, "", "static_matricize"], [93, 0, 1, "", "static_moveaxis"], [93, 0, 1, "", "static_pad"], [93, 0, 1, "", "static_partial_fold"], [93, 0, 1, "", "static_partial_tensor_to_vec"], [93, 0, 1, "", "static_partial_unfold"], [93, 0, 1, "", "static_partial_vec_to_tensor"], [93, 0, 1, "", "static_rot90"], [93, 0, 1, "", "static_soft_thresholding"], [93, 0, 1, "", "static_take_along_axis"], [93, 0, 1, "", "static_top_k"], [93, 0, 1, "", "static_unfold"], [93, 0, 1, "", "static_vsplit"], [93, 0, 1, "", "static_vstack"], [93, 0, 1, "", "take"], [93, 0, 1, "", "take_along_axis"], [93, 0, 1, "", "top_k"], [93, 0, 1, "", "trim_zeros"], [93, 0, 1, "", "unflatten"], [93, 0, 1, "", "unfold"], [93, 0, 1, "", "unique_consecutive"], [93, 0, 1, "", "vsplit"], [93, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[93, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "batch_norm"], [93, 0, 1, "", "group_norm"], [93, 0, 1, "", "instance_norm"], [93, 0, 1, "", "l1_normalize"], [93, 0, 1, "", "l2_normalize"], [93, 0, 1, "", "lp_normalize"], [93, 0, 1, "", "static_batch_norm"], [93, 0, 1, "", "static_group_norm"], [93, 0, 1, "", "static_instance_norm"], [93, 0, 1, "", "static_l1_normalize"], [93, 0, 1, "", "static_l2_normalize"], [93, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[93, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "bernoulli"], [93, 0, 1, "", "beta"], [93, 0, 1, "", "dirichlet"], [93, 0, 1, "", "gamma"], [93, 0, 1, "", "poisson"], [93, 0, 1, "", "static_bernoulli"], [93, 0, 1, "", "static_beta"], [93, 0, 1, "", "static_dirichlet"], [93, 0, 1, "", "static_gamma"], [93, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[93, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "static_unravel_index"], [93, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[93, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[93, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[93, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "invert_permutation"], [93, 0, 1, "", "lexsort"], [93, 0, 1, "", "static_invert_permutation"], [93, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[93, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_cummax"], [93, 0, 1, "", "_static_cummin"], [93, 0, 1, "", "_static_nanmin"], [93, 0, 1, "", "bincount"], [93, 0, 1, "", "corrcoef"], [93, 0, 1, "", "cov"], [93, 0, 1, "", "cummax"], [93, 0, 1, "", "cummin"], [93, 0, 1, "", "histogram"], [93, 0, 1, "", "igamma"], [93, 0, 1, "", "lgamma"], [93, 0, 1, "", "median"], [93, 0, 1, "", "nanmean"], [93, 0, 1, "", "nanmedian"], [93, 0, 1, "", "nanmin"], [93, 0, 1, "", "nanprod"], [93, 0, 1, "", "quantile"], [93, 0, 1, "", "static_bincount"], [93, 0, 1, "", "static_corrcoef"], [93, 0, 1, "", "static_cov"], [93, 0, 1, "", "static_histogram"], [93, 0, 1, "", "static_igamma"], [93, 0, 1, "", "static_lgamma"], [93, 0, 1, "", "static_median"], [93, 0, 1, "", "static_nanmean"], [93, 0, 1, "", "static_nanmedian"], [93, 0, 1, "", "static_nanprod"], [93, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[93, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "optional_get_element"], [93, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[94, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_all_equal"], [94, 0, 1, "", "_static_array_equal"], [94, 0, 1, "", "_static_assert_supports_inplace"], [94, 0, 1, "", "_static_clip_matrix_norm"], [94, 0, 1, "", "_static_clip_vector_norm"], [94, 0, 1, "", "_static_einops_rearrange"], [94, 0, 1, "", "_static_einops_reduce"], [94, 0, 1, "", "_static_einops_repeat"], [94, 0, 1, "", "_static_exists"], [94, 0, 1, "", "_static_fourier_encode"], [94, 0, 1, "", "_static_gather"], [94, 0, 1, "", "_static_gather_nd"], [94, 0, 1, "", "_static_get_num_dims"], [94, 0, 1, "", "_static_has_nans"], [94, 0, 1, "", "_static_inplace_decrement"], [94, 0, 1, "", "_static_inplace_increment"], [94, 0, 1, "", "_static_inplace_update"], [94, 0, 1, "", "_static_is_array"], [94, 0, 1, "", "_static_is_ivy_array"], [94, 0, 1, "", "_static_is_native_array"], [94, 0, 1, "", "_static_scatter_flat"], [94, 0, 1, "", "_static_scatter_nd"], [94, 0, 1, "", "_static_size"], [94, 0, 1, "", "_static_stable_divide"], [94, 0, 1, "", "_static_stable_pow"], [94, 0, 1, "", "_static_supports_inplace_updates"], [94, 0, 1, "", "_static_to_list"], [94, 0, 1, "", "_static_to_numpy"], [94, 0, 1, "", "_static_to_scalar"], [94, 0, 1, "", "_static_value_is_nan"], [94, 0, 1, "", "all_equal"], [94, 0, 1, "", "array_equal"], [94, 0, 1, "", "assert_supports_inplace"], [94, 0, 1, "", "clip_matrix_norm"], [94, 0, 1, "", "clip_vector_norm"], [94, 0, 1, "", "einops_rearrange"], [94, 0, 1, "", "einops_reduce"], [94, 0, 1, "", "einops_repeat"], [94, 0, 1, "", "exists"], [94, 0, 1, "", "fourier_encode"], [94, 0, 1, "", "gather"], [94, 0, 1, "", "gather_nd"], [94, 0, 1, "", "get_num_dims"], [94, 0, 1, "", "has_nans"], [94, 0, 1, "", "inplace_decrement"], [94, 0, 1, "", "inplace_increment"], [94, 0, 1, "", "inplace_update"], [94, 0, 1, "", "is_array"], [94, 0, 1, "", "is_ivy_array"], [94, 0, 1, "", "is_native_array"], [94, 0, 1, "", "isin"], [94, 0, 1, "", "itemsize"], [94, 0, 1, "", "scatter_flat"], [94, 0, 1, "", "scatter_nd"], [94, 0, 1, "", "size"], [94, 0, 1, "", "stable_divide"], [94, 0, 1, "", "stable_pow"], [94, 0, 1, "", "static_isin"], [94, 0, 1, "", "static_itemsize"], [94, 0, 1, "", "static_strides"], [94, 0, 1, "", "strides"], [94, 0, 1, "", "supports_inplace_updates"], [94, 0, 1, "", "to_list"], [94, 0, 1, "", "to_numpy"], [94, 0, 1, "", "to_scalar"], [94, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[95, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_stop_gradient"], [95, 0, 1, "", "adam_step"], [95, 0, 1, "", "adam_update"], [95, 0, 1, "", "gradient_descent_update"], [95, 0, 1, "", "lamb_update"], [95, 0, 1, "", "lars_update"], [95, 0, 1, "", "optimizer_update"], [95, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[96, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[97, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_static_conv1d"], [97, 0, 1, "", "_static_conv1d_transpose"], [97, 0, 1, "", "_static_conv2d"], [97, 0, 1, "", "_static_conv2d_transpose"], [97, 0, 1, "", "_static_conv3d"], [97, 0, 1, "", "_static_conv3d_transpose"], [97, 0, 1, "", "_static_depthwise_conv2d"], [97, 0, 1, "", "_static_dropout"], [97, 0, 1, "", "_static_dropout1d"], [97, 0, 1, "", "_static_dropout2d"], [97, 0, 1, "", "_static_dropout3d"], [97, 0, 1, "", "_static_linear"], [97, 0, 1, "", "_static_lstm_update"], [97, 0, 1, "", "_static_multi_head_attention"], [97, 0, 1, "", "_static_reduce_window"], [97, 0, 1, "", "_static_scaled_dot_product_attention"], [97, 0, 1, "", "conv1d"], [97, 0, 1, "", "conv1d_transpose"], [97, 0, 1, "", "conv2d"], [97, 0, 1, "", "conv2d_transpose"], [97, 0, 1, "", "conv3d"], [97, 0, 1, "", "conv3d_transpose"], [97, 0, 1, "", "depthwise_conv2d"], [97, 0, 1, "", "dropout"], [97, 0, 1, "", "dropout1d"], [97, 0, 1, "", "dropout2d"], [97, 0, 1, "", "dropout3d"], [97, 0, 1, "", "linear"], [97, 0, 1, "", "lstm_update"], [97, 0, 1, "", "multi_head_attention"], [97, 0, 1, "", "reduce_window"], [97, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[98, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_cholesky"], [98, 0, 1, "", "_static_cross"], [98, 0, 1, "", "_static_det"], [98, 0, 1, "", "_static_diag"], [98, 0, 1, "", "_static_diagonal"], [98, 0, 1, "", "_static_eigh"], [98, 0, 1, "", "_static_eigvalsh"], [98, 0, 1, "", "_static_inner"], [98, 0, 1, "", "_static_inv"], [98, 0, 1, "", "_static_matmul"], [98, 0, 1, "", "_static_matrix_norm"], [98, 0, 1, "", "_static_matrix_power"], [98, 0, 1, "", "_static_matrix_rank"], [98, 0, 1, "", "_static_matrix_transpose"], [98, 0, 1, "", "_static_outer"], [98, 0, 1, "", "_static_pinv"], [98, 0, 1, "", "_static_qr"], [98, 0, 1, "", "_static_slogdet"], [98, 0, 1, "", "_static_solve"], [98, 0, 1, "", "_static_svd"], [98, 0, 1, "", "_static_svdvals"], [98, 0, 1, "", "_static_tensordot"], [98, 0, 1, "", "_static_tensorsolve"], [98, 0, 1, "", "_static_trace"], [98, 0, 1, "", "_static_vander"], [98, 0, 1, "", "_static_vecdot"], [98, 0, 1, "", "_static_vector_norm"], [98, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [98, 0, 1, "", "cholesky"], [98, 0, 1, "", "cross"], [98, 0, 1, "", "det"], [98, 0, 1, "", "diag"], [98, 0, 1, "", "diagonal"], [98, 0, 1, "", "eigh"], [98, 0, 1, "", "eigvalsh"], [98, 0, 1, "", "general_inner_product"], [98, 0, 1, "", "inner"], [98, 0, 1, "", "inv"], [98, 0, 1, "", "matmul"], [98, 0, 1, "", "matrix_norm"], [98, 0, 1, "", "matrix_power"], [98, 0, 1, "", "matrix_rank"], [98, 0, 1, "", "matrix_transpose"], [98, 0, 1, "", "outer"], [98, 0, 1, "", "pinv"], [98, 0, 1, "", "qr"], [98, 0, 1, "", "slogdet"], [98, 0, 1, "", "solve"], [98, 0, 1, "", "static_general_inner_product"], [98, 0, 1, "", "svd"], [98, 0, 1, "", "svdvals"], [98, 0, 1, "", "tensordot"], [98, 0, 1, "", "tensorsolve"], [98, 0, 1, "", "trace"], [98, 0, 1, "", "vander"], [98, 0, 1, "", "vecdot"], [98, 0, 1, "", "vector_norm"], [98, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[99, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "_static_binary_cross_entropy"], [99, 0, 1, "", "_static_cross_entropy"], [99, 0, 1, "", "_static_sparse_cross_entropy"], [99, 0, 1, "", "binary_cross_entropy"], [99, 0, 1, "", "cross_entropy"], [99, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[100, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_static_clip"], [100, 0, 1, "", "_static_concat"], [100, 0, 1, "", "_static_constant_pad"], [100, 0, 1, "", "_static_expand_dims"], [100, 0, 1, "", "_static_flip"], [100, 0, 1, "", "_static_permute_dims"], [100, 0, 1, "", "_static_repeat"], [100, 0, 1, "", "_static_reshape"], [100, 0, 1, "", "_static_roll"], [100, 0, 1, "", "_static_split"], [100, 0, 1, "", "_static_squeeze"], [100, 0, 1, "", "_static_stack"], [100, 0, 1, "", "_static_swapaxes"], [100, 0, 1, "", "_static_tile"], [100, 0, 1, "", "_static_unstack"], [100, 0, 1, "", "_static_zero_pad"], [100, 0, 1, "", "clip"], [100, 0, 1, "", "concat"], [100, 0, 1, "", "constant_pad"], [100, 0, 1, "", "expand_dims"], [100, 0, 1, "", "flip"], [100, 0, 1, "", "permute_dims"], [100, 0, 1, "", "repeat"], [100, 0, 1, "", "reshape"], [100, 0, 1, "", "roll"], [100, 0, 1, "", "split"], [100, 0, 1, "", "squeeze"], [100, 0, 1, "", "stack"], [100, 0, 1, "", "swapaxes"], [100, 0, 1, "", "tile"], [100, 0, 1, "", "unstack"], [100, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[101, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[102, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "_static_multinomial"], [102, 0, 1, "", "_static_randint"], [102, 0, 1, "", "_static_random_normal"], [102, 0, 1, "", "_static_random_uniform"], [102, 0, 1, "", "_static_shuffle"], [102, 0, 1, "", "multinomial"], [102, 0, 1, "", "randint"], [102, 0, 1, "", "random_normal"], [102, 0, 1, "", "random_uniform"], [102, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[103, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_argmax"], [103, 0, 1, "", "_static_argmin"], [103, 0, 1, "", "_static_argwhere"], [103, 0, 1, "", "_static_nonzero"], [103, 0, 1, "", "_static_where"], [103, 0, 1, "", "argmax"], [103, 0, 1, "", "argmin"], [103, 0, 1, "", "argwhere"], [103, 0, 1, "", "nonzero"], [103, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[104, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "_static_unique_all"], [104, 0, 1, "", "_static_unique_counts"], [104, 0, 1, "", "_static_unique_inverse"], [104, 0, 1, "", "_static_unique_values"], [104, 0, 1, "", "unique_all"], [104, 0, 1, "", "unique_counts"], [104, 0, 1, "", "unique_inverse"], [104, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[105, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_argsort"], [105, 0, 1, "", "_static_searchsorted"], [105, 0, 1, "", "_static_sort"], [105, 0, 1, "", "argsort"], [105, 0, 1, "", "msort"], [105, 0, 1, "", "searchsorted"], [105, 0, 1, "", "sort"], [105, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[106, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "_static_cumprod"], [106, 0, 1, "", "_static_cumsum"], [106, 0, 1, "", "_static_min"], [106, 0, 1, "", "_static_prod"], [106, 0, 1, "", "_static_sum"], [106, 0, 1, "", "_static_var"], [106, 0, 1, "", "cumprod"], [106, 0, 1, "", "cumsum"], [106, 0, 1, "", "einsum"], [106, 0, 1, "", "max"], [106, 0, 1, "", "mean"], [106, 0, 1, "", "min"], [106, 0, 1, "", "prod"], [106, 0, 1, "", "std"], [106, 0, 1, "", "sum"], [106, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[107, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "_static_all"], [107, 0, 1, "", "_static_any"], [107, 0, 1, "", "all"], [107, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[108, 2, 1, "", "_wrap_function"], [108, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[109, 3, 0, "-", "base"], [110, 3, 0, "-", "cp_tensor"], [111, 3, 0, "-", "parafac2_tensor"], [112, 3, 0, "-", "tr_tensor"], [113, 3, 0, "-", "tt_tensor"], [114, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[109, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[109, 0, 1, "", "__init__"], [109, 4, 1, "", "_abc_impl"], [109, 0, 1, "", "mode_dot"], [109, 0, 1, "", "norm"], [109, 0, 1, "", "to_tensor"], [109, 0, 1, "", "to_unfolded"], [109, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[110, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[110, 0, 1, "", "__init__"], [110, 4, 1, "", "_abc_impl"], [110, 0, 1, "", "cp_copy"], [110, 0, 1, "", "cp_flip_sign"], [110, 0, 1, "", "cp_lstsq_grad"], [110, 0, 1, "", "cp_mode_dot"], [110, 0, 1, "", "cp_n_param"], [110, 0, 1, "", "cp_norm"], [110, 0, 1, "", "cp_normalize"], [110, 0, 1, "", "cp_to_tensor"], [110, 0, 1, "", "cp_to_unfolded"], [110, 0, 1, "", "cp_to_vec"], [110, 0, 1, "", "mode_dot"], [110, 5, 1, "", "n_param"], [110, 0, 1, "", "norm"], [110, 0, 1, "", "normalize"], [110, 0, 1, "", "to_tensor"], [110, 0, 1, "", "to_unfolded"], [110, 0, 1, "", "to_vec"], [110, 0, 1, "", "unfolding_dot_khatri_rao"], [110, 0, 1, "", "validate_cp_rank"], [110, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[111, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[111, 0, 1, "", "__init__"], [111, 4, 1, "", "_abc_impl"], [111, 0, 1, "", "apply_parafac2_projections"], [111, 0, 1, "", "from_CPTensor"], [111, 5, 1, "", "n_param"], [111, 0, 1, "", "parafac2_normalise"], [111, 0, 1, "", "parafac2_to_slice"], [111, 0, 1, "", "parafac2_to_slices"], [111, 0, 1, "", "parafac2_to_tensor"], [111, 0, 1, "", "parafac2_to_unfolded"], [111, 0, 1, "", "parafac2_to_vec"], [111, 0, 1, "", "to_tensor"], [111, 0, 1, "", "to_unfolded"], [111, 0, 1, "", "to_vec"], [111, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[112, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 5, 1, "", "n_param"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolded"], [112, 0, 1, "", "to_vec"], [112, 0, 1, "", "tr_n_param"], [112, 0, 1, "", "tr_to_tensor"], [112, 0, 1, "", "tr_to_unfolded"], [112, 0, 1, "", "tr_to_vec"], [112, 0, 1, "", "validate_tr_rank"], [112, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[113, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[113, 0, 1, "", "__init__"], [113, 4, 1, "", "_abc_impl"], [113, 0, 1, "", "_tt_n_param"], [113, 0, 1, "", "index_update"], [113, 5, 1, "", "n_param"], [113, 0, 1, "", "pad_tt_rank"], [113, 0, 1, "", "to_tensor"], [113, 0, 1, "", "to_unfolding"], [113, 0, 1, "", "to_vec"], [113, 0, 1, "", "tt_to_tensor"], [113, 0, 1, "", "tt_to_unfolded"], [113, 0, 1, "", "tt_to_vec"], [113, 0, 1, "", "validate_tt_rank"], [113, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[114, 1, 1, "", "TuckerTensor"], [114, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[114, 0, 1, "", "__init__"], [114, 4, 1, "", "_abc_impl"], [114, 0, 1, "", "mode_dot"], [114, 5, 1, "", "n_param"], [114, 0, 1, "", "to_tensor"], [114, 0, 1, "", "to_unfolded"], [114, 0, 1, "", "to_vec"], [114, 0, 1, "", "tucker_copy"], [114, 0, 1, "", "tucker_mode_dot"], [114, 0, 1, "", "tucker_n_param"], [114, 0, 1, "", "tucker_normalize"], [114, 0, 1, "", "tucker_to_tensor"], [114, 0, 1, "", "tucker_to_unfolded"], [114, 0, 1, "", "tucker_to_vec"], [114, 0, 1, "", "validate_tucker_rank"], [114, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[119, 3, 0, "-", "base"], [120, 3, 0, "-", "elementwise"], [118, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[119, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[119, 0, 1, "", "__init__"], [119, 4, 1, "", "_abc_impl"], [119, 0, 1, "", "broadcast_shapes"], [119, 5, 1, "", "data"], [119, 5, 1, "", "device"], [119, 5, 1, "", "dtype"], [119, 5, 1, "", "inner_shape"], [119, 5, 1, "", "ndim"], [119, 0, 1, "", "nested_array"], [119, 5, 1, "", "nested_rank"], [119, 0, 1, "", "ragged_map"], [119, 0, 1, "", "ragged_multi_map"], [119, 0, 1, "", "ragged_multi_map_in_function"], [119, 0, 1, "", "replace_ivy_arrays"], [119, 5, 1, "", "shape"], [119, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[120, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[120, 4, 1, "", "_abc_impl"], [120, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[118, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[118, 0, 1, "", "__init__"], [118, 0, 1, "", "from_row_lengths"], [118, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[642, 3, 0, "-", "activations"], [643, 3, 0, "-", "constants"], [644, 3, 0, "-", "control_flow_ops"], [645, 3, 0, "-", "creation"], [646, 3, 0, "-", "data_type"], [647, 3, 0, "-", "device"], [648, 3, 0, "-", "elementwise"], [649, 3, 0, "-", "experimental"], [650, 3, 0, "-", "general"], [651, 3, 0, "-", "gradients"], [652, 3, 0, "-", "layers"], [653, 3, 0, "-", "linear_algebra"], [654, 3, 0, "-", "losses"], [655, 3, 0, "-", "manipulation"], [656, 3, 0, "-", "meta"], [657, 3, 0, "-", "nest"], [658, 3, 0, "-", "norms"], [659, 3, 0, "-", "random"], [660, 3, 0, "-", "searching"], [661, 3, 0, "-", "set"], [662, 3, 0, "-", "sorting"], [663, 3, 0, "-", "statistical"], [664, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[381, 3, 0, "-", "activations"], [382, 3, 0, "-", "constants"], [383, 3, 0, "-", "creation"], [384, 3, 0, "-", "data_type"], [385, 3, 0, "-", "device"], [386, 3, 0, "-", "elementwise"], [387, 3, 0, "-", "general"], [388, 3, 0, "-", "gradients"], [389, 3, 0, "-", "layers"], [390, 3, 0, "-", "linear_algebra"], [391, 3, 0, "-", "losses"], [392, 3, 0, "-", "manipulation"], [393, 3, 0, "-", "meta"], [394, 3, 0, "-", "nest"], [395, 3, 0, "-", "norms"], [396, 3, 0, "-", "random"], [397, 3, 0, "-", "searching"], [398, 3, 0, "-", "set"], [399, 3, 0, "-", "sorting"], [400, 3, 0, "-", "sparse_array"], [401, 3, 0, "-", "statistical"], [402, 3, 0, "-", "utility"]], "ivy.stateful": [[807, 3, 0, "-", "activations"], [808, 3, 0, "-", "converters"], [809, 3, 0, "-", "helpers"], [810, 3, 0, "-", "initializers"], [811, 3, 0, "-", "layers"], [812, 3, 0, "-", "losses"], [813, 3, 0, "-", "module"], [814, 3, 0, "-", "norms"], [815, 3, 0, "-", "optimizers"], [816, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[807, 1, 1, "", "ELU"], [807, 1, 1, "", "GEGLU"], [807, 1, 1, "", "GELU"], [807, 1, 1, "", "Hardswish"], [807, 1, 1, "", "LeakyReLU"], [807, 1, 1, "", "LogSigmoid"], [807, 1, 1, "", "LogSoftmax"], [807, 1, 1, "", "Logit"], [807, 1, 1, "", "Mish"], [807, 1, 1, "", "PReLU"], [807, 1, 1, "", "ReLU"], [807, 1, 1, "", "ReLU6"], [807, 1, 1, "", "SeLU"], [807, 1, 1, "", "SiLU"], [807, 1, 1, "", "Sigmoid"], [807, 1, 1, "", "Softmax"], [807, 1, 1, "", "Softplus"], [807, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[807, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[807, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[808, 1, 1, "", "ModuleConverters"], [808, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[808, 0, 1, "", "from_flax_module"], [808, 0, 1, "", "from_haiku_module"], [808, 0, 1, "", "from_keras_module"], [808, 0, 1, "", "from_paddle_module"], [808, 0, 1, "", "from_torch_module"], [808, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[809, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[810, 1, 1, "", "Constant"], [810, 1, 1, "", "FirstLayerSiren"], [810, 1, 1, "", "GlorotUniform"], [810, 1, 1, "", "Initializer"], [810, 1, 1, "", "KaimingNormal"], [810, 1, 1, "", "Ones"], [810, 1, 1, "", "RandomNormal"], [810, 1, 1, "", "Siren"], [810, 1, 1, "", "Uniform"], [810, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[810, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[810, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[810, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[810, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[810, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[810, 0, 1, "", "__init__"], [810, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[810, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[811, 1, 1, "", "AdaptiveAvgPool1d"], [811, 1, 1, "", "AdaptiveAvgPool2d"], [811, 1, 1, "", "AvgPool1D"], [811, 1, 1, "", "AvgPool2D"], [811, 1, 1, "", "AvgPool3D"], [811, 1, 1, "", "Conv1D"], [811, 1, 1, "", "Conv1DTranspose"], [811, 1, 1, "", "Conv2D"], [811, 1, 1, "", "Conv2DTranspose"], [811, 1, 1, "", "Conv3D"], [811, 1, 1, "", "Conv3DTranspose"], [811, 1, 1, "", "Dct"], [811, 1, 1, "", "DepthwiseConv2D"], [811, 1, 1, "", "Dropout"], [811, 1, 1, "", "Embedding"], [811, 1, 1, "", "FFT"], [811, 1, 1, "", "IDct"], [811, 1, 1, "", "IFFT"], [811, 1, 1, "", "Identity"], [811, 1, 1, "", "LSTM"], [811, 1, 1, "", "Linear"], [811, 1, 1, "", "MaxPool1D"], [811, 1, 1, "", "MaxPool2D"], [811, 1, 1, "", "MaxPool3D"], [811, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[811, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[812, 1, 1, "", "BinaryCrossEntropyLoss"], [812, 1, 1, "", "CrossEntropyLoss"], [812, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[812, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[812, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[812, 0, 1, "", "__init__"]], "ivy.stateful.module": [[813, 1, 1, "", "Module"], [813, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[813, 0, 1, "", "__call__"], [813, 0, 1, "", "__init__"], [813, 5, 1, "", "buffers"], [813, 0, 1, "", "build"], [813, 5, 1, "", "build_mode"], [813, 5, 1, "", "built"], [813, 5, 1, "", "device"], [813, 5, 1, "", "dtype"], [813, 0, 1, "", "eval"], [813, 0, 1, "", "load"], [813, 5, 1, "", "module_dict"], [813, 0, 1, "", "register_buffer"], [813, 0, 1, "", "register_parameter"], [813, 0, 1, "", "save"], [813, 0, 1, "", "save_weights"], [813, 0, 1, "", "show_graph"], [813, 5, 1, "", "state_dict"], [813, 0, 1, "", "to_device"], [813, 0, 1, "", "trace_graph"], [813, 0, 1, "", "train"], [813, 5, 1, "", "training"], [813, 5, 1, "", "v"]], "ivy.stateful.norms": [[814, 1, 1, "", "BatchNorm2D"], [814, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[814, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[815, 1, 1, "", "Adam"], [815, 1, 1, "", "AdamW"], [815, 1, 1, "", "LAMB"], [815, 1, 1, "", "LARS"], [815, 1, 1, "", "Optimizer"], [815, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "set_state"], [815, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[815, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "set_state"], [815, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "set_state"], [815, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "set_state"], [815, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[815, 0, 1, "", "__init__"], [815, 0, 1, "", "set_state"], [815, 5, 1, "", "state"]], "ivy.stateful.sequential": [[816, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[816, 0, 1, "", "__init__"]], "ivy.utils": [[817, 3, 0, "-", "assertions"], [818, 3, 0, "-", "backend"], [822, 3, 0, "-", "binaries"], [823, 3, 0, "-", "decorator_utils"], [824, 3, 0, "-", "dynamic_import"], [825, 3, 0, "-", "einsum_parser"], [826, 3, 0, "-", "einsum_path_helpers"], [827, 3, 0, "-", "exceptions"], [828, 3, 0, "-", "inspection"], [829, 3, 0, "-", "logging"], [830, 3, 0, "-", "profiler"], [831, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[817, 2, 1, "", "check_all"], [817, 2, 1, "", "check_all_or_any_fn"], [817, 2, 1, "", "check_any"], [817, 2, 1, "", "check_dev_correct_formatting"], [817, 2, 1, "", "check_dimensions"], [817, 2, 1, "", "check_elem_in_list"], [817, 2, 1, "", "check_equal"], [817, 2, 1, "", "check_exists"], [817, 2, 1, "", "check_false"], [817, 2, 1, "", "check_gather_input_valid"], [817, 2, 1, "", "check_gather_nd_input_valid"], [817, 2, 1, "", "check_greater"], [817, 2, 1, "", "check_inplace_sizes_valid"], [817, 2, 1, "", "check_isinstance"], [817, 2, 1, "", "check_kernel_padding_size"], [817, 2, 1, "", "check_less"], [817, 2, 1, "", "check_one_way_broadcastable"], [817, 2, 1, "", "check_same_dtype"], [817, 2, 1, "", "check_shape"], [817, 2, 1, "", "check_shapes_broadcastable"], [817, 2, 1, "", "check_true"], [817, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[819, 3, 0, "-", "ast_helpers"], [820, 3, 0, "-", "handler"], [821, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[819, 1, 1, "", "ImportTransformer"], [819, 1, 1, "", "IvyLoader"], [819, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[819, 0, 1, "", "__init__"], [819, 0, 1, "", "impersonate_import"], [819, 0, 1, "", "visit_Import"], [819, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[819, 0, 1, "", "__init__"], [819, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[819, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[820, 1, 1, "", "ContextManager"], [820, 2, 1, "", "choose_random_backend"], [820, 2, 1, "", "current_backend"], [820, 2, 1, "", "dynamic_backend_converter"], [820, 2, 1, "", "prevent_access_locally"], [820, 2, 1, "", "previous_backend"], [820, 2, 1, "", "set_backend"], [820, 2, 1, "", "set_backend_to_specific_version"], [820, 2, 1, "", "set_jax_backend"], [820, 2, 1, "", "set_mxnet_backend"], [820, 2, 1, "", "set_numpy_backend"], [820, 2, 1, "", "set_paddle_backend"], [820, 2, 1, "", "set_tensorflow_backend"], [820, 2, 1, "", "set_torch_backend"], [820, 2, 1, "", "unset_backend"], [820, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[820, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[821, 2, 1, "", "clear_sub_backends"], [821, 2, 1, "", "find_available_sub_backends"], [821, 2, 1, "", "fn_name_from_version_specific_fn_name"], [821, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [821, 2, 1, "", "set_sub_backend"], [821, 2, 1, "", "set_sub_backend_to_specific_version"], [821, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[822, 2, 1, "", "check_for_binaries"], [822, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[823, 1, 1, "", "CallVisitor"], [823, 1, 1, "", "TransposeType"], [823, 2, 1, "", "apply_transpose"], [823, 2, 1, "", "dummy_inplace_update"], [823, 2, 1, "", "get_next_func"], [823, 2, 1, "", "handle_get_item"], [823, 2, 1, "", "handle_methods"], [823, 2, 1, "", "handle_set_item"], [823, 2, 1, "", "handle_transpose_in_input_and_output"], [823, 2, 1, "", "retrieve_object"], [823, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[823, 0, 1, "", "__init__"], [823, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[823, 4, 1, "", "CONV1D"], [823, 4, 1, "", "CONV2D"], [823, 4, 1, "", "CONV3D"], [823, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[824, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[825, 2, 1, "", "convert_interleaved_input"], [825, 2, 1, "", "convert_subscripts"], [825, 2, 1, "", "find_output_shape"], [825, 2, 1, "", "find_output_str"], [825, 2, 1, "", "gen_unused_symbols"], [825, 2, 1, "", "get_symbol"], [825, 2, 1, "", "has_valid_einsum_chars_only"], [825, 2, 1, "", "is_valid_einsum_char"], [825, 2, 1, "", "legalise_einsum_expr"], [825, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[826, 2, 1, "", "can_dot"], [826, 2, 1, "", "compute_size_by_dict"], [826, 2, 1, "", "find_contraction"], [826, 2, 1, "", "flop_count"], [826, 2, 1, "", "greedy_path"], [826, 2, 1, "", "optimal_path"], [826, 2, 1, "", "parse_einsum_input"], [826, 2, 1, "", "parse_possible_contraction"], [826, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[827, 7, 1, "", "InplaceUpdateException"], [827, 7, 1, "", "IvyAttributeError"], [827, 7, 1, "", "IvyBackendException"], [827, 7, 1, "", "IvyBroadcastShapeError"], [827, 7, 1, "", "IvyDeviceError"], [827, 7, 1, "", "IvyDtypePromotionError"], [827, 7, 1, "", "IvyError"], [827, 7, 1, "", "IvyException"], [827, 7, 1, "", "IvyIndexError"], [827, 7, 1, "", "IvyInvalidBackendException"], [827, 7, 1, "", "IvyNotImplementedException"], [827, 7, 1, "", "IvyValueError"], [827, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[827, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[827, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[828, 2, 1, "", "add_array_specs"], [828, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[829, 2, 1, "", "set_logging_mode"], [829, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[830, 1, 1, "", "Profiler"], [830, 2, 1, "", "tensorflow_profile_start"], [830, 2, 1, "", "tensorflow_profile_stop"], [830, 2, 1, "", "torch_profiler_init"], [830, 2, 1, "", "torch_profiler_start"], [830, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[830, 0, 1, "", "__init__"], [830, 4, 1, "", "print_stats"], [830, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[831, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[790, 3, 0, "-", "assertions"], [791, 3, 0, "-", "available_frameworks"], [792, 3, 0, "-", "function_testing"], [793, 3, 0, "-", "globals"], [794, 3, 0, "-", "hypothesis_helpers"], [799, 3, 0, "-", "multiprocessing"], [800, 3, 0, "-", "pipeline_helper"], [801, 3, 0, "-", "structs"], [802, 3, 0, "-", "test_parameter_flags"], [803, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[790, 2, 1, "", "assert_all_close"], [790, 2, 1, "", "assert_same_type"], [790, 2, 1, "", "assert_same_type_and_shape"], [790, 2, 1, "", "check_unsupported_device"], [790, 2, 1, "", "check_unsupported_device_and_dtype"], [790, 2, 1, "", "check_unsupported_dtype"], [790, 2, 1, "", "test_unsupported_function"], [790, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[792, 2, 1, "", "args_to_container"], [792, 2, 1, "", "args_to_frontend"], [792, 2, 1, "", "arrays_to_frontend"], [792, 2, 1, "", "as_lists"], [792, 2, 1, "", "convtrue"], [792, 2, 1, "", "create_args_kwargs"], [792, 2, 1, "", "flatten"], [792, 2, 1, "", "flatten_and_to_np"], [792, 2, 1, "", "flatten_frontend"], [792, 2, 1, "", "flatten_frontend_fw_to_np"], [792, 2, 1, "", "flatten_frontend_to_np"], [792, 2, 1, "", "get_frontend_ret"], [792, 2, 1, "", "get_ret_and_flattened_np_array"], [792, 2, 1, "", "gradient_incompatible_function"], [792, 2, 1, "", "gradient_test"], [792, 2, 1, "", "gradient_unsupported_dtypes"], [792, 2, 1, "", "kwargs_to_args_n_kwargs"], [792, 2, 1, "", "test_frontend_function"], [792, 2, 1, "", "test_frontend_method"], [792, 2, 1, "", "test_function"], [792, 2, 1, "", "test_function_backend_computation"], [792, 2, 1, "", "test_function_ground_truth_computation"], [792, 2, 1, "", "test_gradient_backend_computation"], [792, 2, 1, "", "test_gradient_ground_truth_computation"], [792, 2, 1, "", "test_method"], [792, 2, 1, "", "test_method_backend_computation"], [792, 2, 1, "", "test_method_ground_truth_computation"], [792, 2, 1, "", "traced_if_required"], [792, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[793, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [793, 7, 1, "", "InterruptedTest"], [793, 1, 1, "", "TestData"], [793, 2, 1, "", "setup_api_test"], [793, 2, 1, "", "setup_frontend_test"], [793, 2, 1, "", "teardown_api_test"], [793, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[793, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[793, 0, 1, "", "__init__"], [793, 4, 1, "", "fn_name"], [793, 4, 1, "", "fn_tree"], [793, 4, 1, "", "is_method"], [793, 4, 1, "", "supported_device_dtypes"], [793, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[795, 3, 0, "-", "array_helpers"], [796, 3, 0, "-", "dtype_helpers"], [797, 3, 0, "-", "general_helpers"], [798, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[795, 2, 1, "", "array_and_broadcastable_shape"], [795, 2, 1, "", "array_bools"], [795, 2, 1, "", "array_helpers_dtype_info_helper"], [795, 2, 1, "", "array_indices_axis"], [795, 2, 1, "", "array_indices_put_along_axis"], [795, 2, 1, "", "array_values"], [795, 2, 1, "", "arrays_and_axes"], [795, 2, 1, "", "arrays_for_pooling"], [795, 2, 1, "", "broadcast_shapes"], [795, 2, 1, "", "cond_data_gen_helper"], [795, 2, 1, "", "create_concatenable_arrays_dtypes"], [795, 2, 1, "", "create_nested_input"], [795, 2, 1, "", "dtype_and_values"], [795, 2, 1, "", "dtype_array_query"], [795, 2, 1, "", "dtype_array_query_val"], [795, 2, 1, "", "dtype_values_axis"], [795, 2, 1, "", "einsum_helper"], [795, 2, 1, "", "get_first_solve_batch_matrix"], [795, 2, 1, "", "get_first_solve_matrix"], [795, 2, 1, "", "get_second_solve_batch_matrix"], [795, 2, 1, "", "get_second_solve_matrix"], [795, 2, 1, "", "list_of_size"], [795, 2, 1, "", "lists"], [795, 2, 1, "", "mutually_broadcastable_shapes"], [795, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[796, 2, 1, "", "array_dtypes"], [796, 2, 1, "", "cast_filter"], [796, 2, 1, "", "cast_filter_helper"], [796, 2, 1, "", "get_castable_dtype"], [796, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[797, 7, 1, "", "BroadcastError"], [797, 2, 1, "", "apply_safety_factor"], [797, 2, 1, "", "broadcast_shapes"], [797, 2, 1, "", "dims_and_offset"], [797, 2, 1, "", "embedding_helper"], [797, 2, 1, "", "general_helpers_dtype_info_helper"], [797, 2, 1, "", "get_axis"], [797, 2, 1, "", "get_bounds"], [797, 2, 1, "", "get_mean_std"], [797, 2, 1, "", "get_shape"], [797, 2, 1, "", "matrix_is_stable"], [797, 2, 1, "", "reshape_shapes"], [797, 2, 1, "", "sizes_"], [797, 2, 1, "", "subsets"], [797, 2, 1, "", "two_broadcastable_shapes"], [797, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[798, 2, 1, "", "floats"], [798, 2, 1, "", "ints"], [798, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[799, 2, 1, "", "backend_proc"], [799, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[800, 1, 1, "", "BackendHandler"], [800, 1, 1, "", "BackendHandlerMode"], [800, 1, 1, "", "WithBackendContext"], [800, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[800, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[800, 4, 1, "", "SetBackend"], [800, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[800, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[801, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[801, 0, 1, "", "__init__"], [801, 4, 1, "", "framework_init_module"], [801, 4, 1, "", "init_name"], [801, 4, 1, "", "ivy_init_module"], [801, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[802, 1, 1, "", "DynamicFlag"], [802, 1, 1, "", "FrontendFunctionTestFlags"], [802, 1, 1, "", "FrontendInitTestFlags"], [802, 1, 1, "", "FrontendMethodTestFlags"], [802, 1, 1, "", "FunctionTestFlags"], [802, 1, 1, "", "InitMethodTestFlags"], [802, 1, 1, "", "MethodTestFlags"], [802, 1, 1, "", "TestFlags"], [802, 2, 1, "", "build_flag"], [802, 2, 1, "", "frontend_function_flags"], [802, 2, 1, "", "frontend_init_flags"], [802, 2, 1, "", "frontend_method_flags"], [802, 2, 1, "", "function_flags"], [802, 2, 1, "", "init_method_flags"], [802, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[802, 0, 1, "", "__init__"], [802, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[802, 0, 1, "", "__init__"], [802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[802, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[803, 2, 1, "", "handle_example"], [803, 2, 1, "", "handle_frontend_method"], [803, 2, 1, "", "handle_frontend_test"], [803, 2, 1, "", "handle_method"], [803, 2, 1, "", "handle_test"], [803, 2, 1, "", "num_positional_args"], [803, 2, 1, "", "num_positional_args_helper"], [803, 2, 1, "", "num_positional_args_method"], [803, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 21, 22, 30, 38, 41, 60, 62, 832, 834, 838, 839, 843, 859, 862, 872, 878, 879], "ivi": [0, 4, 5, 6, 7, 12, 13, 21, 22, 30, 33, 41, 44, 45, 56, 57, 59, 60, 62, 832, 838, 840, 844, 846, 848, 851, 853, 859, 861, 862, 863, 864, 865, 866, 869, 870, 872, 878, 879, 880, 881, 885], "framework": [0, 8, 9, 23, 44, 50, 56, 791, 804, 832, 859, 862, 883], "librari": [0, 39, 44, 45, 60, 62, 832, 878], "instal": [0, 4, 5, 6, 7, 21, 22, 23, 33, 56, 57, 59, 832, 872], "import": [0, 6, 7, 12, 13, 21, 22, 26, 33, 56, 57, 60, 824], "configur": [0, 853, 862], "environ": [0, 839], "load": [0, 12, 13, 21, 22, 23, 26, 788], "dataset": [0, 58, 60], "preview": 0, "inspect": [0, 828], "end": [0, 60], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 862], "transact": 0, "class": [0, 121, 804, 832, 844, 853, 861], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 21, 22, 23, 26, 33, 44, 56, 67, 90, 121, 384, 646, 661, 768, 769, 770, 771, 849, 861, 864, 871], "analysi": 0, "statist": [0, 83, 106, 401, 663], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 23, 26, 885], "metric": [0, 26, 60], "under": 0, "sampl": [0, 57], "balanc": [0, 867], "creat": [0, 1, 56, 57, 838], "split": [0, 727], "featur": [0, 864], "target": [0, 56], "train": [0, 23, 26, 56, 58, 60], "test": [0, 26, 58, 792, 802, 803, 806, 838, 839, 840, 843, 848, 854, 862, 864], "set": [0, 8, 9, 21, 22, 23, 52, 56, 57, 81, 104, 398, 661, 839, 845, 854, 866], "convert": [0, 8, 9, 10, 11, 23, 808, 832], "arrai": [0, 115, 118, 140, 400, 795, 843, 844, 848, 856, 879], "displai": [0, 61], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 21, 22], "function": [0, 12, 13, 33, 42, 44, 45, 56, 57, 58, 60, 62, 122, 792, 832, 838, 847, 849, 850, 853, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 869, 871, 878], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 68, 91, 385, 647, 850, 856, 861], "mode": [0, 52, 849, 853, 866], "xgboost": [0, 26], "classifi": [0, 21, 22], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 40, 41, 43, 44, 45, 56, 57, 58, 59, 60, 62, 871], "time": [0, 26], "base": [0, 87, 109, 119], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 848, 859, 861], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 867], "classif": [0, 6, 7], "report": 0, "evalu": [0, 26], "ivyclassifi": 0, "xgbclassifi": [0, 26], "visual": [0, 23, 61], "comparison": [0, 26], "demo": [1, 3, 4, 5, 6, 7, 31, 44, 58, 59], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 21, 22, 26, 31, 52, 851, 856, 859, 862, 864, 867, 878, 879, 881], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 21, 22, 858], "torch": [4, 5, 6, 7, 12, 13, 21, 22, 52, 59, 883, 884], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 23, 26, 29, 42, 43, 52, 59, 60, 61, 883], "jax": [4, 5, 6, 7, 12, 13, 19, 20, 24, 25, 26, 52, 59, 883], "appendix": [4, 5, 12, 13], "code": [4, 5, 33, 34, 35, 36, 45, 56, 832, 855, 863, 865], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 813, 832, 849, 850, 878], "sequenc": [6, 7, 856], "your": [8, 9, 12, 13, 21, 22, 23, 840, 864], "pytorch": [8, 9, 10, 11, 23, 24, 25, 26, 27, 42, 43, 58, 883], "project": [8, 9, 23], "incompat": [8, 9, 23], "transpil": [8, 9, 10, 11, 23, 27, 28, 29, 36, 37, 38, 39, 40, 42, 43, 44, 45, 48, 49, 50, 51, 52, 58, 62, 832, 869, 870, 876, 878, 880], "about": [8, 9, 10, 11, 23, 56], "up": [8, 9, 23, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 58, 839, 854, 863], "sourc": [8, 9, 23, 869, 870, 872], "from": [8, 9, 10, 11, 23, 42, 43, 52, 59, 872], "result": [8, 9, 10, 11, 23, 57], "fine": [8, 9, 10, 11, 23], "tune": [8, 9, 10, 11, 23], "conclus": [8, 9, 10, 11, 23], "how": [10, 11, 38, 832, 838, 846, 854, 863, 864], "To": [10, 11, 62, 840], "paddlepaddl": [10, 11], "imag": [12, 13, 21, 22, 23, 73, 96, 267, 834, 846], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 844, 846, 859, 863, 871], "preprocess": [12, 13], "visualis": [12, 13, 21, 22], "initi": [12, 13, 21, 22, 810], "nativ": [12, 13, 21, 22, 844, 867], "pretrain": [12, 13, 21, 22], "weight": [12, 13, 21, 22], "mask": [12, 13], "backend": [12, 13, 26, 33, 44, 56, 57, 59, 60, 818, 821, 838, 845, 849, 859, 865, 869, 871], "acceler": [19, 20, 24, 25, 26], "mmpretrain": [19, 20], "resnet": [21, 22, 23, 63], "label": [21, 22], "resnet34": [21, 22], "resnet50": [21, 22], "few": 23, "pre": [23, 839, 855], "xgb_frontend": 26, "xgb": 26, "more": [26, 839, 867], "exhaust": 26, "v": [26, 37, 49, 52, 855, 871, 879], "number": [26, 798, 856], "boost": 26, "round": [26, 27, 29, 33, 34, 35, 36, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 58, 297, 863], "fraction": 26, "build": [27, 28, 29, 60, 834, 846, 869], "top": [27, 28, 29, 841, 848], "haiku": 28, "develop": 30, "convolut": 30, "network": [30, 57, 60], "tutori": [31, 60], "And": 31, "learn": [31, 32, 832, 883], "basic": [31, 32, 56, 57, 840, 861], "write": [33, 41, 861, 864], "content": [33, 58], "handler": [33, 44, 820, 821, 869], "structur": [33, 44, 846, 859, 871], "api": [33, 44, 45, 838, 843, 847, 848, 859, 865, 869, 878, 879, 880, 881], "state": [33, 44, 45, 871, 879], "unifi": [34, 37, 46, 49, 50, 51, 56, 881], "trace": [35, 37, 38, 45, 707, 853], "lazi": [37, 49, 879], "eager": [37, 49, 879], "decor": [38, 51, 823, 853, 858, 864], "graph": [38, 44, 61, 870, 878, 884], "ani": [39, 40, 44, 45, 787], "odsc": 44, "tracer": [44, 870, 879, 884], "quickstart": 45, "get": [45, 832, 840, 872], "familiar": 45, "0": [46, 47, 48, 49, 53, 54], "1": [47, 49, 50, 51, 52, 55, 62, 883], "compil": [47, 49, 50, 51, 57, 879], "2": [48, 51, 53, 62, 883], "select": 50, "As": 51, "3": [52, 54, 55, 62], "dynam": [52, 60, 824, 845, 871], "static": 52, "todo": [52, 840], "explain": 52, "via": 52, "why": [52, 864, 876], "i": [52, 832, 846, 867], "true": 52, "default": [52, 559], "when": 52, "numpi": [52, 59, 861, 883], "fals": 52, "kornia": 53, "perceiv": 54, "stabl": 55, "diffus": 55, "oper": [56, 856, 866, 871], "ml": [56, 875], "chang": 56, "one": 56, "line": [56, 840], "No": [56, 839], "need": [56, 864], "worri": 56, "type": [56, 67, 90, 384, 646, 849, 857, 861, 871], "differ": 56, "them": 56, "all": [56, 786], "standalon": [56, 857], "defin": [56, 57, 58, 60], "optim": [56, 815], "input": [56, 57, 856], "loss": [56, 76, 99, 391, 654, 812], "loop": [56, 60], "check": [57, 855, 871], "simpl": 57, "neural": 57, "deepmind": [58, 59], "": [58, 60, 838, 846, 863], "perceiverio": [58, 59], "tabl": [58, 846, 849], "construct": 58, "some": 58, "helper": [58, 794, 795, 796, 797, 798, 800, 803, 809, 819, 826, 862, 864, 865], "pipelin": [58, 60, 800, 846, 848, 864, 871], "download": 58, "dataload": 58, "gpu": [59, 871], "introduct": [59, 62, 861, 862], "python3": 59, "8": 59, "setup": [59, 855], "kernel": 59, "clone": [59, 839, 848], "repo": [59, 839], "ivy_model": 59, "run": [59, 840, 843, 846, 854, 864], "let": 60, "we": [60, 864], "ar": 60, "mnist": 60, "thi": 60, "temporari": 60, "loader": 60, "util": [60, 84, 107, 402, 664, 805, 823], "plot": 60, "save": [60, 789], "huggingfac": 61, "deit": 61, "can": [61, 832], "html": 61, "file": 61, "browser": [61, 840], "interfac": 62, "telemetri": 62, "18": 63, "activ": [64, 86, 381, 642, 807], "convers": [65, 88, 858], "creation": [66, 89, 383, 645], "elementwis": [69, 92, 120, 386, 648], "experiment": [70, 93, 649, 838], "gener": [71, 94, 387, 650, 797, 859, 864, 867, 879], "gradient": [72, 95, 363, 388, 651, 859], "layer": [74, 97, 389, 652, 811], "linear": [75, 98, 390, 653, 676], "algebra": [75, 98, 390, 653], "manipul": [77, 100, 392, 655], "norm": [78, 101, 395, 658, 814], "random": [79, 102, 396, 659], "search": [80, 103, 397, 660], "sort": [82, 105, 399, 662, 775], "wrap": [85, 108, 858], "cp": 110, "tensor": [110, 111, 112, 113, 114, 117], "parafac2": 111, "tr": 112, "tt": 113, "tucker": [114, 465], "contain": [116, 840, 847], "factor": 117, "nest": [118, 394, 657], "gelu": 123, "hardswish": 124, "leaky_relu": 125, "log_softmax": 126, "mish": 127, "relu": 128, "sigmoid": 129, "softmax": 130, "softplu": 131, "softsign": 132, "cmp_i": 133, "cmp_isnot": 134, "for_loop": 135, "if_els": 136, "try_except": 137, "while_loop": 138, "arang": 139, "asarrai": 141, "complex": 142, "copy_arrai": 143, "empti": 144, "empty_lik": 145, "ey": 146, "from_dlpack": 147, "note": [147, 158, 645], "frombuff": 148, "full": [149, 862], "full_lik": 150, "linspac": 151, "logspac": 152, "meshgrid": 153, "native_arrai": 154, "one_hot": 155, "ones": 156, "ones_lik": 157, "to_dlpack": 158, "tril": 159, "triu": 160, "triu_indic": 161, "zero": 162, "zeros_lik": 163, "as_ivy_dtyp": 164, "as_native_dtyp": 165, "astyp": 166, "broadcast_arrai": 167, "broadcast_to": 168, "can_cast": 169, "check_float": 170, "closest_valid_dtyp": 171, "default_complex_dtyp": 172, "default_dtyp": 173, "default_float_dtyp": 174, "default_int_dtyp": 175, "default_uint_dtyp": 176, "dtype": [177, 796, 856], "dtype_bit": 178, "finfo": 179, "function_supported_dtyp": 180, "function_unsupported_dtyp": 181, "iinfo": 182, "infer_default_dtyp": 183, "invalid_dtyp": 184, "is_bool_dtyp": 185, "is_complex_dtyp": 186, "is_float_dtyp": 187, "is_hashable_dtyp": 188, "is_int_dtyp": 189, "is_native_dtyp": 190, "is_uint_dtyp": 191, "promote_typ": 192, "promote_types_of_input": 193, "result_typ": 194, "set_default_complex_dtyp": 195, "set_default_dtyp": 196, "set_default_float_dtyp": 197, "set_default_int_dtyp": 198, "set_default_uint_dtyp": 199, "type_promote_arrai": 200, "unset_default_complex_dtyp": 201, "unset_default_dtyp": 202, "unset_default_float_dtyp": 203, "unset_default_int_dtyp": 204, "unset_default_uint_dtyp": 205, "valid_dtyp": 206, "as_ivy_dev": 207, "as_native_dev": 208, "clear_cached_mem_on_dev": 209, "default_devic": 210, "dev": 211, "dev_util": 212, "function_supported_devic": 213, "function_unsupported_devic": 214, "get_all_ivy_arrays_on_dev": 215, "gpu_is_avail": 216, "handle_soft_device_vari": 217, "num_cpu_cor": 218, "num_gpu": 219, "num_ivy_arrays_on_dev": 220, "percent_used_mem_on_dev": 221, "print_all_ivy_arrays_on_dev": 222, "set_default_devic": 223, "set_soft_device_mod": 224, "paramet": [224, 593, 594, 599, 600, 602, 603, 647, 650, 802, 807, 866], "set_split_factor": 225, "split_factor": 226, "split_func_cal": 227, "to_devic": 228, "total_mem_on_dev": 229, "tpu_is_avail": 230, "unset_default_devic": 231, "unset_soft_device_mod": 232, "used_mem_on_dev": 233, "ab": 234, "aco": 235, "acosh": 236, "add": [237, 851, 862], "angl": 238, "asin": 239, "asinh": 240, "atan": 241, "atan2": 242, "atanh": 243, "bitwise_and": 244, "bitwise_invert": 245, "bitwise_left_shift": 246, "bitwise_or": 247, "bitwise_right_shift": 248, "bitwise_xor": 249, "ceil": 250, "co": 251, "cosh": 252, "deg2rad": 253, "divid": 254, "equal": 255, "erf": 256, "exp": 257, "exp2": 258, "expm1": 259, "floor": 260, "floor_divid": 261, "fmin": 262, "fmod": 263, "gcd": 264, "greater": 265, "greater_equ": 266, "isfinit": 268, "isinf": 269, "isnan": 270, "isreal": 271, "lcm": 272, "less": 273, "less_equ": 274, "log": [275, 829, 839], "log10": 276, "log1p": 277, "log2": 278, "logaddexp": 279, "logaddexp2": 280, "logical_and": 281, "logical_not": 282, "logical_or": 283, "logical_xor": 284, "maximum": 285, "minimum": 286, "multipli": 287, "nan_to_num": 288, "neg": 289, "not_equ": 290, "posit": [291, 856], "pow": 292, "rad2deg": 293, "real": 294, "reciproc": 295, "remaind": 296, "sign": 298, "sin": 299, "sinh": 300, "sqrt": 301, "squar": 302, "subtract": 303, "tan": [304, 851, 862], "tanh": 305, "trapz": 306, "trunc": 307, "trunc_divid": 308, "celu": 309, "elu": 310, "hardshrink": 311, "hardsilu": 312, "hardtanh": 313, "logit": 314, "logsigmoid": 315, "prelu": 316, "relu6": 317, "scaled_tanh": 318, "selu": 319, "silu": 320, "softshrink": 321, "stanh": 322, "tanhshrink": 323, "threshold": 324, "thresholded_relu": 325, "blackman_window": 326, "eye_lik": 327, "hamming_window": 328, "hann_window": 329, "indic": 330, "kaiser_bessel_derived_window": 331, "kaiser_window": 332, "mel_weight_matrix": 333, "ndenumer": 334, "ndindex": 335, "polyv": 336, "random_cp": 337, "random_parafac2": 338, "random_tr": 339, "random_tt": 340, "random_tuck": 341, "tril_indic": 342, "trilu": 343, "unsorted_segment_mean": 344, "unsorted_segment_min": 345, "unsorted_segment_sum": 346, "vorbis_window": 347, "allclos": 348, "amax": 349, "amin": 350, "binar": 351, "conj": 352, "copysign": 353, "count_nonzero": 354, "diff": 355, "digamma": 356, "erfc": 357, "erfinv": 358, "fix": [359, 838, 854], "float_pow": 360, "fmax": 361, "frexp": 362, "hypot": 364, "isclos": 365, "ldexp": 366, "lerp": 367, "lgamma": 368, "modf": 369, "nansum": 370, "nextaft": 371, "signbit": 372, "sinc": 373, "sparsify_tensor": 374, "xlogi": 375, "zeta": 376, "reduc": 377, "bind_custom_gradient_funct": 378, "jvp": 379, "vjp": 380, "constant": [382, 643], "meta": [393, 656], "spars": 400, "adaptive_avg_pool1d": 403, "adaptive_avg_pool2d": 404, "adaptive_max_pool2d": 405, "adaptive_max_pool3d": 406, "area_interpol": 407, "avg_pool1d": 408, "avg_pool2d": 409, "avg_pool3d": 410, "dct": 411, "dft": 412, "dropout1d": 413, "dropout2d": 414, "dropout3d": 415, "embed": 416, "fft": 417, "fft2": 418, "generate_einsum_equ": 419, "get_interpolate_kernel": 420, "idct": 421, "ifft": 422, "ifftn": 423, "interp": 424, "interpol": 425, "max_pool1d": 426, "max_pool2d": 427, "max_pool3d": 428, "max_unpool1d": 429, "nearest_interpol": 430, "pool": 431, "reduce_window": 432, "rfft": 433, "rfftn": 434, "rnn": 435, "sliding_window": 436, "stft": 437, "adjoint": 438, "batched_out": 439, "cond": 440, "diagflat": 441, "dot": 442, "eig": [443, 688], "eigh_tridiagon": 444, "eigval": 445, "general_inner_product": 446, "higher_order_mo": 447, "initialize_tuck": 448, "khatri_rao": 449, "kron": 450, "kroneck": 451, "lu_factor": 452, "lu_solv": 453, "make_svd_non_neg": 454, "matrix_exp": 455, "mode_dot": 456, "multi_dot": 457, "multi_mode_dot": 458, "partial_tuck": 459, "solve_triangular": 460, "svd_flip": 461, "tensor_train": 462, "truncated_svd": 463, "tt_matrix_to_tensor": 464, "hinge_embedding_loss": 466, "huber_loss": 467, "kl_div": 468, "l1_loss": 469, "log_poisson_loss": 470, "poisson_nll_loss": 471, "smooth_l1_loss": 472, "soft_margin_loss": 473, "as_strid": 474, "associative_scan": 475, "atleast_1d": 476, "atleast_2d": 477, "atleast_3d": 478, "broadcast_shap": 479, "check_scalar": 480, "choos": 481, "column_stack": 482, "concat_from_sequ": 483, "dsplit": 484, "dstack": 485, "expand": 486, "fill_diagon": 487, "flatten": 488, "fliplr": 489, "flipud": 490, "fold": 491, "heavisid": 492, "hsplit": 493, "hstack": 494, "i0": 495, "matric": 496, "moveaxi": 497, "pad": 498, "pad_sequ": 499, "partial_fold": 500, "partial_tensor_to_vec": 501, "partial_unfold": 502, "partial_vec_to_tensor": 503, "put_along_axi": 504, "rot90": 505, "soft_threshold": 506, "take": 507, "take_along_axi": 508, "top_k": 509, "trim_zero": 510, "unflatten": 511, "unfold": 512, "unique_consecut": 513, "vsplit": 514, "vstack": 515, "batch_norm": 516, "group_norm": 517, "instance_norm": 518, "l1_normal": 519, "l2_normal": 520, "local_response_norm": 521, "lp_normal": 522, "bernoulli": 523, "beta": 524, "dirichlet": 525, "gamma": 526, "poisson": 527, "unravel_index": 528, "invert_permut": 529, "lexsort": 530, "is_ivy_sparse_arrai": 531, "is_native_sparse_arrai": 532, "native_sparse_arrai": 533, "native_sparse_array_to_indices_values_and_shap": 534, "bincount": 535, "corrcoef": 536, "cov": 537, "cummax": 538, "cummin": 539, "histogram": 540, "igamma": 541, "median": 542, "nanmean": 543, "nanmedian": 544, "nanmin": 545, "nanprod": 546, "quantil": 547, "optional_get_el": 548, "all_equ": 549, "arg_info": 550, "arg_nam": 551, "array_equ": 552, "assert_supports_inplac": 553, "cache_fn": 554, "clip_matrix_norm": 555, "clip_vector_norm": 556, "container_typ": 557, "current_backend_str": 558, "einops_rearrang": 560, "einops_reduc": 561, "einops_repeat": 562, "exist": [563, 834, 863], "fourier_encod": 564, "function_supported_devices_and_dtyp": 565, "function_unsupported_devices_and_dtyp": 566, "gather": 567, "gather_nd": 568, "get_all_arrays_in_memori": 569, "get_item": 570, "get_num_dim": 571, "get_referrers_recurs": 572, "has_nan": 573, "inplace_arrays_support": 574, "inplace_decr": 575, "inplace_incr": 576, "inplace_upd": 577, "inplace_variables_support": 578, "is_arrai": 579, "is_ivy_arrai": 580, "is_ivy_contain": 581, "is_ivy_nested_arrai": 582, "is_native_arrai": 583, "isin": 584, "isscalar": 585, "items": 586, "match_kwarg": 587, "multiprocess": [588, 799], "num_arrays_in_memori": 589, "print_all_arrays_in_memori": 590, "scatter_flat": 591, "scatter_nd": 592, "set_array_mod": 593, "set_exception_trace_mod": 594, "set_inplace_mod": 595, "set_item": 596, "set_min_bas": 597, "set_min_denomin": 598, "set_nestable_mod": 599, "set_precise_mod": 600, "set_queue_timeout": 601, "set_shape_array_mod": 602, "set_show_func_wrapper_trace_mod": 603, "set_tmp_dir": 604, "shape": [605, 661, 768, 769, 770, 771, 858, 871], "size": [606, 871], "stable_divid": 607, "stable_pow": 608, "stride": 609, "supports_inplace_upd": 610, "to_ivy_shap": 611, "to_list": 612, "to_native_shap": 613, "to_numpi": 614, "to_scalar": 615, "try_else_non": 616, "unset_array_mod": 617, "unset_exception_trace_mod": 618, "unset_inplace_mod": 619, "unset_min_bas": 620, "unset_min_denomin": 621, "unset_nestable_mod": 622, "unset_precise_mod": 623, "unset_queue_timeout": 624, "unset_shape_array_mod": 625, "unset_show_func_wrapper_trace_mod": 626, "unset_tmp_dir": 627, "value_is_nan": 628, "vmap": 629, "adam_step": 630, "adam_upd": 631, "execute_with_gradi": [632, 859], "grad": 633, "gradient_descent_upd": 634, "jac": 635, "lamb_upd": 636, "lars_upd": 637, "optimizer_upd": 638, "requires_gradi": 639, "stop_gradi": 640, "value_and_grad": 641, "control": [644, 871], "flow": [644, 871], "op": 644, "depend": [661, 768, 769, 770, 771], "output": [661, 768, 769, 770, 771], "conv": 665, "conv1d": 666, "conv1d_transpos": 667, "conv2d": 668, "conv2d_transpos": 669, "conv3d": 670, "conv3d_transpos": 671, "conv_general_dil": 672, "conv_general_transpos": 673, "depthwise_conv2d": 674, "dropout": 675, "lstm": 677, "lstm_updat": 678, "multi_head_attent": 679, "nm": 680, "roi_align": 681, "scaled_dot_product_attent": 682, "choleski": 683, "cross": 684, "det": 685, "diag": 686, "diagon": 687, "eigh": 689, "eigvalsh": 690, "inner": 691, "inv": 692, "matmul": 693, "matrix_norm": 694, "matrix_pow": 695, "matrix_rank": 696, "matrix_transpos": 697, "outer": 698, "pinv": 699, "qr": 700, "slogdet": 701, "solv": 702, "svd": 703, "svdval": 704, "tensordot": 705, "tensorsolv": 706, "vander": 708, "vecdot": 709, "vector_norm": 710, "vector_to_skew_symmetric_matrix": 711, "binary_cross_entropi": 712, "cross_entropi": 713, "sparse_cross_entropi": 714, "ssim_loss": 715, "wasserstein_loss_discrimin": 716, "wasserstein_loss_gener": 717, "clip": 718, "concat": 719, "constant_pad": 720, "expand_dim": 721, "flip": 722, "permute_dim": 723, "repeat": 724, "reshap": 725, "roll": [726, 851], "squeez": 728, "stack": [729, 853], "swapax": 730, "tile": 731, "unstack": 732, "zero_pad": 733, "fomaml_step": 734, "maml_step": 735, "reptile_step": 736, "all_nested_indic": 737, "copy_nest": 738, "duplicate_array_index_chain": 739, "index_nest": 740, "insert_into_nest_at_index": 741, "insert_into_nest_at_indic": 742, "map": [743, 848], "map_nest_at_index": 744, "map_nest_at_indic": 745, "multi_index_nest": 746, "nested_ani": 747, "nested_argwher": 748, "nested_map": 749, "nested_multi_map": 750, "prune_empti": 751, "prune_nest_at_index": 752, "prune_nest_at_indic": 753, "set_nest_at_index": 754, "set_nest_at_indic": 755, "layer_norm": 756, "multinomi": 757, "randint": 758, "random_norm": 759, "random_uniform": 760, "seed": 761, "shuffl": 762, "argmax": 763, "argmin": 764, "argwher": 765, "nonzero": 766, "where": [767, 838, 854], "unique_al": 768, "unique_count": 769, "unique_invers": 770, "unique_valu": 771, "argsort": 772, "msort": 773, "searchsort": 774, "cumprod": 776, "cumsum": 777, "einsum": [778, 825, 826], "max": 779, "mean": 780, "min": 781, "prod": 782, "std": 783, "sum": 784, "var": 785, "assert": [790, 817, 853], "avail": 791, "global": [793, 866], "hypothesi": [794, 839, 862, 864], "struct": 801, "flag": 802, "sequenti": 816, "ast": 819, "sub": 821, "binari": [822, 839], "parser": 825, "path": 826, "except": [827, 853, 858], "profil": 830, "verbos": 831, "machin": 832, "between": 832, "support": [832, 845, 849, 858, 861, 871], "start": [832, 872], "work": [832, 863, 882], "eagerli": 832, "provid": 832, "lazili": 832, "trace_graph": [832, 879], "document": 832, "contribut": [832, 833, 838, 863], "commun": 832, "citat": 832, "doc": [834, 846], "docker": [834, 839, 840, 846, 872], "conveni": [834, 846, 857], "script": [834, 846], "hub": 834, "local": [834, 840, 855], "without": [834, 862], "contributor": [835, 841], "reward": 835, "badg": 835, "tier": 835, "error": [836, 853, 854], "handl": [836, 844, 850, 853, 858, 871], "help": [837, 840, 854], "resourc": 837, "open": 838, "task": 838, "fail": [838, 854, 864], "frontend": [838, 845, 861, 862, 869], "place": 838, "checklist": 838, "format": [838, 855], "extend": [838, 864, 867], "an": [838, 859], "issu": [838, 840, 855, 872], "github": [838, 839], "templat": 838, "fork": [839, 840], "commit": [839, 840, 848, 855], "pycharm": [839, 840, 855], "virtual": 839, "miniconda": 839, "venv": 839, "interpret": 839, "window": 839, "maco": 839, "ubuntu": 839, "detail": 839, "free": 839, "wsl": 839, "codespac": 839, "The": [839, 840, 846, 859, 861, 871], "list": 840, "manag": 840, "who": 840, "ask": [840, 854], "With": 840, "command": 840, "pull": [840, 848], "request": [840, 848], "small": 840, "often": 840, "interact": 840, "most": 840, "out": [840, 856, 858, 860], "id": [840, 843], "program": 841, "core": 841, "rise": 841, "deep": 842, "dive": 842, "termin": 843, "regener": 843, "failur": 843, "skip": 843, "integr": [844, 848, 855, 863, 864], "version": [845, 865, 871], "builder": 846, "being": 846, "option": 846, "index": 846, "rst": 846, "partial_conf": 846, "py": 846, "prebuild": 846, "sh": 846, "extens": 846, "custom_autosummari": 846, "hide": 846, "discussion_link": 846, "skippable_funct": 846, "ivy_data": 846, "instanc": [847, 861, 862], "method": [847, 861, 862], "special": [847, 849, 861], "nestabl": [847, 856, 857, 858], "continu": [848, 855], "push": 848, "pr": 848, "trigger": 848, "A": [848, 867], "down": 848, "view": [848, 858, 860], "store": 848, "retriev": 848, "repositori": 848, "nitti": 848, "gritti": 848, "storag": 848, "space": 848, "unifyai": 848, "determin": 848, "coverag": 848, "workflow": 848, "multipl": 848, "runner": 848, "race": 848, "condit": 848, "period": 848, "manual": 848, "dispatch": 848, "ci": 848, "dashboard": 848, "promot": [849, 861], "precis": 849, "non": [849, 867], "argument": [849, 850, 856, 858, 860, 861], "other": [849, 850], "unsupport": 849, "attribut": [849, 866], "case": 849, "bug": 849, "cast": [849, 861], "superset": [849, 867], "docstr": [851, 852], "func_wrapp": 853, "prune": 853, "handle_except": 853, "consist": [853, 864], "prerequir": 854, "common": [854, 855], "lint": [855, 863], "keyword": 856, "integ": 856, "primari": 857, "composit": 857, "mix": [857, 858, 864], "partial": [857, 858, 864], "order": 858, "wrapper": 858, "miscellan": 858, "overview": [859, 863], "usag": [859, 863, 867, 881], "signatur": 859, "design": [859, 865, 868], "our": 859, "polici": [859, 861], "specif": 859, "consider": 859, "inplac": 860, "updat": 860, "copi": 860, "short": 861, "unus": 861, "rule": 861, "duplic": [861, 867], "alia": 862, "formatt": 863, "functionorderingformatt": 863, "own": 864, "strategi": 864, "ad": 864, "explicit": 864, "do": 864, "effect": 864, "bonu": 864, "self": 864, "test_array_funct": 864, "re": 864, "navig": 865, "categor": 865, "submodul": 865, "unpin": 865, "properti": 866, "getter": 866, "setter": 866, "set_": 866, "unset_": 866, "behaviour": 867, "what": 867, "effici": 867, "maxim": 867, "block": 869, "faq": 871, "maintain": 871, "deploy": 871, "auto": 871, "differenti": 871, "replica": 871, "parallel": 871, "altern": 871, "pip": 872, "folder": 872, "question": 872, "glossari": 873, "motiv": 874, "explos": 875, "One": 877, "liner": 877, "graph_transpil": 878, "sharp": [878, 879, 881], "bit": [878, 879, 881], "cach": 879, "relat": 882, "matlab": 883, "scipi": 883, "scikit": 883, "theano": 883, "panda": 883, "julia": 883, "apach": 883, "spark": 883, "mllib": 883, "caff": 883, "chainer": 883, "mxnet": 883, "cntk": 883, "flux": 883, "dex": 883, "languag": 883, "tf": 884, "jaxpr": 884, "jit": 884, "fx": 884, "onnx": 885}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"frombuffer": [[148, "frombuffer"]], "logspace": [[152, "logspace"]], "dtype_bits": [[178, "dtype-bits"]], "tril": [[159, "tril"]], "function_supported_dtypes": [[180, "function-supported-dtypes"]], "native_array": [[154, "native-array"]], "from_dlpack": [[147, "from-dlpack"]], "Note": [[147, null], [158, null], [645, null], [645, null]], "astype": [[166, "astype"]], "is_bool_dtype": [[185, "is-bool-dtype"]], "meshgrid": [[153, "meshgrid"]], "is_float_dtype": [[187, "is-float-dtype"]], "one_hot": [[155, "one-hot"]], "eye": [[146, "eye"]], "zeros": [[162, "zeros"]], "broadcast_to": [[168, "broadcast-to"]], "default_uint_dtype": [[176, "default-uint-dtype"]], "function_unsupported_dtypes": [[181, "function-unsupported-dtypes"]], "full_like": [[150, "full-like"]], "broadcast_arrays": [[167, "broadcast-arrays"]], "asarray": [[141, "asarray"]], "finfo": [[179, "finfo"]], "default_complex_dtype": [[172, "default-complex-dtype"]], "ones_like": [[157, "ones-like"]], "ones": [[156, "ones"]], "triu": [[160, "triu"]], "can_cast": [[169, "can-cast"]], "linspace": [[151, "linspace"]], "closest_valid_dtype": [[171, "closest-valid-dtype"]], "empty_like": [[145, "empty-like"]], "full": [[149, "full"]], "dtype": [[177, "dtype"]], "empty": [[144, "empty"]], "as_ivy_dtype": [[164, "as-ivy-dtype"]], "as_native_dtype": [[165, "as-native-dtype"]], "iinfo": [[182, "iinfo"]], "zeros_like": [[163, "zeros-like"]], "to_dlpack": [[158, "to-dlpack"]], "default_dtype": [[173, "default-dtype"]], "is_complex_dtype": [[186, "is-complex-dtype"]], "complex": [[142, "complex"]], "default_int_dtype": [[175, "default-int-dtype"]], "triu_indices": [[161, "triu-indices"]], "default_float_dtype": [[174, "default-float-dtype"]], "copy_array": [[143, "copy-array"]], "check_float": [[170, "check-float"]], "infer_default_dtype": [[183, "infer-default-dtype"]], "invalid_dtype": [[184, "invalid-dtype"]], "ML Explosion": [[875, "ml-explosion"]], "Fix Failing Tests:": [[854, "fix-failing-tests"]], "Prerequirement:": [[854, "prerequirement"]], "Setting Up": [[854, "setting-up"], [839, "setting-up"]], "How to run tests": [[854, "how-to-run-tests"]], "Common Errors": [[854, "common-errors"]], "Where to ask for Help": [[854, "where-to-ask-for-help"]], "ivy.graph_transpile()": [[878, "ivy-graph-transpile"]], "Graph Transpiler API": [[878, "graph-transpiler-api"]], "Using the transpiler": [[878, "using-the-transpiler"]], "Transpiling functions": [[878, "transpiling-functions"]], "Transpiling Libraries": [[878, "transpiling-libraries"]], "Transpiling Modules": [[878, "transpiling-modules"]], "Sharp bits": [[878, "sharp-bits"], [879, "sharp-bits"], [881, "sharp-bits"]], "Examples": [[878, "examples"], [879, "examples"], [856, "examples"], [881, "examples"]], "Related Work": [[882, "related-work"]], "Frameworks": [[883, "frameworks"]], "MATLAB matlab": [[883, "matlab-matlab"]], "SciPy scipy": [[883, "scipy-scipy"]], "Torch torch": [[883, "torch-torch"]], "NumPy numpy": [[883, "numpy-numpy"]], "SciKit Learn scikit-learn": [[883, "scikit-learn-scikit-learn"]], "Theano theano": [[883, "theano-theano"]], "Pandas pandas": [[883, "pandas-pandas"]], "Julia julia": [[883, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[883, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[883, "caffe-caffe"]], "Chainer chainer": [[883, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[883, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[883, "mxnet-mxnet"]], "CNTK cntk": [[883, "cntk-cntk"]], "PyTorch pytorch": [[883, "pytorch-pytorch"]], "Flux flux": [[883, "flux-flux"]], "JAX jax": [[883, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[883, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[883, "dex-language-dex-language"]], "Formatting": [[855, "formatting"]], "Lint Checks": [[855, "lint-checks"], [855, "id2"]], "Setup Formatting Locally": [[855, "setup-formatting-locally"]], "Pre-commit": [[855, "pre-commit"]], "VS Code": [[855, "vs-code"]], "PyCharm": [[855, "pycharm"], [839, "pycharm"]], "Common Issues with Pre-Commit": [[855, "common-issues-with-pre-commit"]], "Continuous Integration": [[855, "continuous-integration"], [848, "continuous-integration"]], "Lint Formatting": [[855, "lint-formatting"]], "Operating Modes": [[866, "operating-modes"]], "Global Parameter Properties": [[866, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[866, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[866, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Containers": [[847, "containers"]], "Container Instance Methods": [[847, "container-instance-methods"]], "API Instance Methods": [[847, "api-instance-methods"]], "API Special Methods": [[847, "api-special-methods"]], "Nestable Functions": [[847, "nestable-functions"], [856, "nestable-functions"], [857, "nestable-functions"]], "Docstrings": [[852, "docstrings"]], "Ivy as a Transpiler": [[870, "ivy-as-a-transpiler"], [44, "Ivy-as-a-Transpiler"], [45, "Ivy-as-a-Transpiler"]], "Source-to-Source Transpiler \u2705": [[870, "source-to-source-transpiler"], [869, "source-to-source-transpiler"]], "Graph Tracer \u2705": [[870, "graph-tracer"]], "FAQ": [[871, "faq"]], "Maintaining Backend Versions": [[871, "maintaining-backend-versions"]], "Dynamic Sizes": [[871, "dynamic-sizes"]], "Type and Shape Checking": [[871, "type-and-shape-checking"]], "GPU handling": [[871, "gpu-handling"]], "Model Deployment": [[871, "model-deployment"]], "Dynamic Control Flow": [[871, "dynamic-control-flow"]], "Auto-Differentiation": [[871, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[871, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[871, "support-for-functions"]], "Alternative Data Structures": [[871, "alternative-data-structures"]], "Custom Operations": [[871, "custom-operations"]], "The Pipeline": [[871, "the-pipeline"]], "State": [[871, "state"]], "Motivation": [[874, "motivation"]], "ivy.trace_graph()": [[879, "ivy-trace-graph"]], "Tracer API": [[879, "tracer-api"]], "Using the tracer": [[879, "using-the-tracer"]], "Eager vs lazy Compilation": [[879, "eager-vs-lazy-compilation"]], "Array caching": [[879, "array-caching"]], "Generators": [[879, "generators"]], "Stateful": [[879, "stateful"]], "Function Arguments": [[856, "function-arguments"]], "Positional and Keyword Arguments": [[856, "positional-and-keyword-arguments"]], "Input Arrays": [[856, "input-arrays"]], "out Argument": [[856, "out-argument"]], "dtype and device arguments": [[856, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[856, "numbers-in-operator-functions"]], "Integer Sequences": [[856, "integer-sequences"]], "Docstring Examples": [[851, "docstring-examples"]], "ivy.tan": [[851, "ivy-tan"]], "ivy.roll": [[851, "ivy-roll"]], "ivy.add": [[851, "ivy-add"]], "Inplace Updates": [[860, "inplace-updates"]], "out argument": [[860, "out-argument"]], "copy argument": [[860, "copy-argument"]], "Views": [[860, "views"]], "Function Types": [[857, "function-types"]], "Primary Functions": [[857, "primary-functions"]], "Compositional Functions": [[857, "compositional-functions"]], "Mixed Functions": [[857, "mixed-functions"]], "Partial Mixed Functions": [[857, "partial-mixed-functions"]], "Standalone Functions": [[857, "standalone-functions"]], "Convenience Functions": [[857, "convenience-functions"]], "Superset Behaviour": [[867, "superset-behaviour"]], "Extending the Standard": [[867, "extending-the-standard"]], "What is the Superset?": [[867, "what-is-the-superset"]], "A Non-Duplicate Superset": [[867, "a-non-duplicate-superset"]], "What is not the Superset?": [[867, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[867, "balancing-generalization-with-efficiency"]], "More Examples": [[867, "more-examples"]], "Maximizing Usage of Native Functionality": [[867, "maximizing-usage-of-native-functionality"]], "Comparing Ivy with ONNX": [[885, "comparing-ivy-with-onnx"]], "ONNX onnx": [[885, "onnx-onnx"]], "ivy": [[885, "ivy"]], "Gradients": [[859, "gradients"], [95, "module-ivy.data_classes.container.gradients"], [651, "gradients"], [388, "gradients"], [72, "module-ivy.data_classes.array.gradients"]], "Overview": [[859, "overview"], [863, "overview"]], "Example Usage of the Gradient API": [[859, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[859, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[859, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[859, "custom-gradient-functions"]], "Design of the Gradient API": [[859, "design-of-the-gradient-api"]], "Our policy on gradients": [[859, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[859, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[859, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[859, "framework-specific-considerations"]], "Graph Tracers": [[884, "graph-tracers"]], "tf.Graph": [[884, "tf-graph"]], "Jaxpr": [[884, "jaxpr"]], "torch.jit": [[884, "torch-jit"]], "torch.fx": [[884, "torch-fx"]], "Data Types": [[849, "data-types"]], "Data Type Module": [[849, "data-type-module"]], "Data Type Promotion": [[849, "data-type-promotion"]], "Precise Mode": [[849, "precise-mode"]], "Precise Promotion Table": [[849, "precise-promotion-table"]], "Non-Precise Promotion Table": [[849, "non-precise-promotion-table"]], "Arguments in other Functions": [[849, "arguments-in-other-functions"], [850, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[849, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[849, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[849, "special-case"]], "Backend Data Type Bugs": [[849, "backend-data-type-bugs"]], "Data Type Casting Modes": [[849, "data-type-casting-modes"]], "Superset Data Type Support": [[849, "superset-data-type-support"]], "Exception Handling": [[853, "exception-handling"], [858, "exception-handling"]], "Ivy Exception Class": [[853, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[853, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[853, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[853, "handle-exceptions-decorator"]], "Consistency in Errors": [[853, "consistency-in-errors"]], "Assertion Function": [[853, "assertion-function"]], "Design": [[868, "design"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[863, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[863, "existing-formatters"]], "FunctionOrderingFormatter": [[863, "functionorderingformatter"]], "How the Formatter Works:": [[863, "how-the-formatter-works"]], "Integration and Usage": [[863, "integration-and-usage"]], "Contribution": [[863, "contribution"]], "Round Up": [[863, "round-up"], [39, "Round-Up"], [27, "Round-Up"], [45, "Round-Up"], [29, "Round-Up"], [33, "Round-Up"], [36, "Round-Up"], [46, "Round-Up"], [34, "Round-Up"], [35, "Round-Up"], [37, "Round-Up"], [58, "Round-Up"], [49, "Round-Up"], [47, "Round-Up"], [48, "Round-Up"], [50, "Round-Up"], [51, "Round-Up"]], "Building the Docs Pipeline": [[846, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[846, "how-the-doc-builder-is-being-run"]], "The convenience script": [[846, "the-convenience-script"]], "Options": [[846, "options"]], "The Docker image": [[846, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[846, "how-ivy-s-docs-is-structured"]], "index.rst": [[846, "index-rst"]], "partial_conf.py": [[846, "partial-conf-py"]], "prebuild.sh": [[846, "prebuild-sh"]], "Custom Extensions": [[846, "custom-extensions"]], "custom_autosummary": [[846, "custom-autosummary"]], ":hide-table:": [[846, "hide-table"]], "discussion_linker": [[846, "discussion-linker"]], "skippable_function": [[846, "skippable-function"]], "ivy_data": [[846, "ivy-data"]], "Commit (Push/PR) Triggered Testing": [[848, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[848, "ivy-tests"], [864, "ivy-tests"]], "Implementation": [[848, "implementation"]], "A Top-Down View": [[848, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[848, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[848, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[848, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[848, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[848, "determine-test-coverage-workflow"]], "Multiple Runners": [[848, "multiple-runners"]], "Race Condition": [[848, "race-condition"]], "Array API Tests": [[848, "array-api-tests"], [843, "array-api-tests"]], "Periodic Testing": [[848, "periodic-testing"]], "Manually Dispatched Workflows": [[848, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[848, "ci-pipeline"]], "Push": [[848, "push"]], "Pull Request": [[848, "pull-request"]], "Dashboard": [[848, "dashboard"]], "Ivy Frontend Tests": [[862, "ivy-frontend-tests"]], "Introduction": [[862, "introduction"], [861, "introduction"], [59, "Introduction"]], "Frontend Test Examples": [[862, "frontend-test-examples"]], "ivy.tan()": [[862, "ivy-tan"]], "ivy.full()": [[862, "ivy-full"]], "Testing Without Using Tests Values": [[862, "testing-without-using-tests-values"]], "Alias functions": [[862, "alias-functions"]], "Frontend Instance Method Tests": [[862, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[862, "frontend-instance-method-test-examples"]], "ivy.add()": [[862, "ivy-add"]], "Hypothesis Helpers": [[862, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[862, "frontend-framework-testing-configuration"]], "Devices": [[850, "devices"]], "Device Module": [[850, "device-module"]], "Device handling": [[850, "device-handling"]], "Navigating the Code": [[865, "navigating-the-code"]], "Categorization": [[865, "categorization"]], "Submodule Design": [[865, "submodule-design"]], "Ivy API": [[865, "ivy-api"]], "Backend API": [[865, "backend-api"]], "Submodule Helper Functions": [[865, "submodule-helper-functions"]], "Version Unpinning": [[865, "version-unpinning"]], "Why Transpile?": [[876, "why-transpile"]], "Testing Pipeline": [[864, "testing-pipeline"]], "Hypothesis": [[864, "id2"]], "Data Generation": [[864, "id3"]], "Writing your own strategy": [[864, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[864, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[864, "ivy-test-decorators"]], "Writing Ivy Tests": [[864, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[864, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[864, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[864, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[864, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[864, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[864, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[864, "self-consistent-and-explicit-testing"]], "test_array_function": [[864, "id5"]], "Running Ivy Tests": [[864, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[864, "re-running-failed-ivy-tests"]], "ivy.transpile()": [[880, "ivy-transpile"]], "Transpiler API": [[880, "transpiler-api"]], "One liners": [[877, "one-liners"]], "Ivy Frontends": [[861, "ivy-frontends"]], "The Frontend Basics": [[861, "the-frontend-basics"]], "Writing Frontend Functions": [[861, "writing-frontend-functions"]], "Short Frontend Implementations": [[861, "short-frontend-implementations"]], "Unused Arguments": [[861, "unused-arguments"]], "Supported Data Types and Devices": [[861, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[861, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[861, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[861, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[861, "frontends-duplicate-policy"]], "Building Blocks": [[869, "building-blocks"]], "Backend Functional APIs \u2705": [[869, "backend-functional-apis"]], "Ivy Functional API \u2705": [[869, "ivy-functional-api"]], "Frontend Functional APIs \u2705": [[869, "frontend-functional-apis"]], "Backend Handler \u2705": [[869, "backend-handler"]], "Get Started": [[872, "get-started"]], "Installing using pip": [[872, "installing-using-pip"]], "Installing from source": [[872, "installing-from-source"]], "Docker": [[872, "docker"]], "Ivy Folder": [[872, "ivy-folder"]], "Issues and Questions": [[872, "issues-and-questions"]], "Function Wrapping": [[858, "function-wrapping"]], "Decorator order": [[858, "decorator-order"]], "Conversion Wrappers": [[858, "conversion-wrappers"]], "Inference Wrappers": [[858, "inference-wrappers"]], "Out Argument Support": [[858, "out-argument-support"]], "Nestable Support": [[858, "nestable-support"]], "Partial Mixed Function Support": [[858, "partial-mixed-function-support"]], "Shape Conversion": [[858, "shape-conversion"]], "View Handling": [[858, "view-handling"]], "Miscellaneous Wrappers": [[858, "miscellaneous-wrappers"]], "Glossary": [[873, "glossary"]], "ivy.unify()": [[881, "ivy-unify"]], "Unify API": [[881, "unify-api"]], "Usage": [[881, "usage"]], "Backend": [[818, "backend"]], "Error Handling": [[836, "error-handling"]], "Binaries": [[822, "module-ivy.utils.binaries"]], "Contributor Rewards": [[835, "contributor-rewards"]], "Badges": [[835, "badges"]], "Badge Tiers": [[835, "badge-tiers"]], "Deep Dive": [[842, "deep-dive"]], "Building the Docs": [[834, "building-the-docs"]], "Building the Docs using Docker": [[834, "building-the-docs-using-docker"]], "Using convenience script": [[834, "using-convenience-script"]], "Using existing image on Docker Hub": [[834, "using-existing-image-on-docker-hub"]], "Building the image locally": [[834, "building-the-image-locally"]], "Building the Docs without Docker": [[834, "building-the-docs-without-docker"]], "Norms": [[814, "module-ivy.stateful.norms"], [101, "module-ivy.data_classes.container.norms"], [658, "norms"], [395, "norms"], [78, "module-ivy.data_classes.array.norms"]], "Inspection": [[828, "module-ivy.utils.inspection"]], "Testing": [[806, "testing"], [58, "Testing"]], "Logging": [[829, "module-ivy.utils.logging"]], "Sub backend handler": [[821, "module-ivy.utils.backend.sub_backend_handler"]], "Einsum path helpers": [[826, "module-ivy.utils.einsum_path_helpers"]], "Dynamic import": [[824, "module-ivy.utils.dynamic_import"]], "Forking and cloning the repo": [[839, "forking-and-cloning-the-repo"]], "Pre-Commit": [[839, "pre-commit"]], "Virtual environments - No Docker": [[839, "virtual-environments-no-docker"]], "Using miniconda": [[839, "using-miniconda"]], "Using venv": [[839, "using-venv"]], "Docker Interpreter with PyCharm": [[839, "docker-interpreter-with-pycharm"]], "Windows": [[839, "windows"], [839, "id6"]], "MacOS": [[839, "macos"]], "Ubuntu": [[839, "ubuntu"], [839, "id8"]], "Setting Up Testing in PyCharm": [[839, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[839, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[839, "setting-up-for-free"]], "WSL": [[839, "wsl"]], "GitHub Codespaces": [[839, "github-codespaces"]], "The Binaries": [[839, "the-binaries"]], "Verbosity": [[831, "module-ivy.utils.verbosity"]], "Losses": [[812, "module-ivy.stateful.losses"], [99, "module-ivy.data_classes.container.losses"], [654, "losses"], [391, "losses"], [76, "module-ivy.data_classes.array.losses"]], "Einsum parser": [[825, "module-ivy.utils.einsum_parser"]], "Multiprocessing": [[799, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "Test parameter flags": [[802, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Assertions": [[817, "module-ivy.utils.assertions"], [790, "module-ivy_tests.test_ivy.helpers.assertions"]], "Backend Setting": [[845, "backend-setting"]], "Dynamic Backend Setting": [[845, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[845, "backend-and-frontend-version-support"]], "Contributing": [[833, "contributing"], [832, "contributing"]], "Utils": [[805, "utils"]], "Pipeline helper": [[800, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Ast helpers": [[819, "module-ivy.utils.backend.ast_helpers"]], "Decorator utils": [[823, "module-ivy.utils.decorator_utils"]], "Convert Machine Learning Code Between Frameworks": [[832, "convert-machine-learning-code-between-frameworks"]], "Installing ivy": [[832, "installing-ivy"]], "Supported Frameworks": [[832, "supported-frameworks"]], "Getting started": [[832, "getting-started"]], "Using ivy": [[832, "using-ivy"]], "How ivy works?": [[832, "how-ivy-works"]], "ivy.transpile will eagerly transpile if a class or function is provided": [[832, "ivy-transpile-will-eagerly-transpile-if-a-class-or-function-is-provided"]], "ivy.transpile will lazily transpile if a module (library) is provided": [[832, "ivy-transpile-will-lazily-transpile-if-a-module-library-is-provided"]], "ivy.trace_graph can be used eagerly or lazily": [[832, "ivy-trace-graph-can-be-used-eagerly-or-lazily"]], "Documentation": [[832, "documentation"]], "Community": [[832, "community"]], "Citation": [[832, "citation"]], "Helpers": [[809, "module-ivy.stateful.helpers"]], "Converters": [[808, "module-ivy.stateful.converters"]], "Arrays": [[844, "arrays"]], "Native Array": [[844, "native-array"]], "Ivy Array": [[844, "ivy-array"]], "Array Handling": [[844, "array-handling"]], "Integrating custom classes with Ivy": [[844, "integrating-custom-classes-with-ivy"]], "Framework classes": [[804, "framework-classes"]], "Testing helpers": [[803, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Open Tasks": [[838, "open-tasks"]], "Fixing Failing Tests": [[838, "fixing-failing-tests"]], "How to Contribute": [[838, "how-to-contribute"]], "Frontend APIs": [[838, "frontend-apis"]], "Where to place a frontend function": [[838, "where-to-place-a-frontend-function"]], "Frontend checklist": [[838, "frontend-checklist"]], "Function Formatting": [[838, "function-formatting"]], "Formatting checklist": [[838, "formatting-checklist"]], "Ivy Experimental API": [[838, "ivy-experimental-api"]], "Extending the Ivy API": [[838, "extending-the-ivy-api"]], "Where to place a backend function": [[838, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[838, "creating-an-issue-on-ivy-s-github-using-a-template"]], "The Basics": [[840, "the-basics"]], "Getting Help": [[840, "getting-help"]], "ToDo List Issues": [[840, "todo-list-issues"]], "Managing Your Fork": [[840, "managing-your-fork"]], "Who To Ask": [[840, "who-to-ask"]], "With Command Line:": [[840, "with-command-line"]], "With Browser:": [[840, "with-browser"]], "Pull Requests": [[840, "pull-requests"]], "Small Commits Often": [[840, "small-commits-often"]], "Interactive Ivy Docker Container": [[840, "interactive-ivy-docker-container"]], "Running Tests Locally": [[840, "running-tests-locally"]], "With Docker": [[840, "with-docker"]], "Getting the most out of IDE": [[840, "getting-the-most-out-of-ide"]], "with PyCharm": [[840, "with-pycharm"]], "Layers": [[811, "module-ivy.stateful.layers"], [97, "module-ivy.data_classes.container.layers"], [652, "layers"], [389, "layers"], [74, "module-ivy.data_classes.array.layers"]], "Sequential": [[816, "module-ivy.stateful.sequential"]], "Initializers": [[810, "module-ivy.stateful.initializers"]], "Handler": [[820, "module-ivy.utils.backend.handler"]], "Profiler": [[830, "module-ivy.utils.profiler"]], "Activations": [[807, "module-ivy.stateful.activations"], [642, "activations"], [381, "activations"], [64, "module-ivy.data_classes.array.activations"], [86, "module-ivy.data_classes.container.activations"]], "Parameter": [[807, "parameter"], [807, "id1"], [603, "parameter"], [599, "parameter"], [593, "parameter"], [600, "parameter"], [594, "parameter"], [602, "parameter"], [650, "parameter"], [650, "id1"], [650, "id2"], [650, "id3"], [650, "id4"], [650, "id5"], [647, "parameter"], [224, "parameter"]], "Module": [[813, "module-ivy.stateful.module"]], "Structs": [[801, "module-ivy_tests.test_ivy.helpers.structs"]], "Exceptions": [[827, "module-ivy.utils.exceptions"]], "Running the Tests": [[843, "running-the-tests"]], "Using Terminal": [[843, "using-terminal"]], "Using the IDE": [[843, "using-the-ide"]], "Regenerating Test Failures": [[843, "regenerating-test-failures"]], "Test Skipping": [[843, "test-skipping"]], "Contributor Program": [[841, "contributor-program"]], "Contributor": [[841, "contributor"]], "Core Contributor": [[841, "core-contributor"]], "Rising Contributor": [[841, "rising-contributor"]], "Top Contributor": [[841, "top-contributor"]], "Optimizers": [[815, "module-ivy.stateful.optimizers"]], "Helpful Resources": [[837, "helpful-resources"]], "cmp_is": [[133, "cmp-is"]], "Cp tensor": [[110, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Functions": [[122, "functions"]], "array": [[140, "array"]], "Nested array": [[118, "nested-array"]], "while_loop": [[138, "while-loop"]], "softsign": [[132, "softsign"]], "if_else": [[136, "if-else"]], "try_except": [[137, "try-except"]], "Tucker tensor": [[114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "Random": [[102, "module-ivy.data_classes.container.random"], [659, "random"], [396, "random"], [79, "module-ivy.data_classes.array.random"]], "Tt tensor": [[113, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Searching": [[103, "module-ivy.data_classes.container.searching"], [660, "searching"], [397, "searching"], [80, "module-ivy.data_classes.array.searching"]], "gelu": [[123, "gelu"]], "relu": [[128, "relu"]], "Utility": [[107, "module-ivy.data_classes.container.utility"], [664, "utility"], [402, "utility"], [84, "module-ivy.data_classes.array.utility"]], "Manipulation": [[100, "module-ivy.data_classes.container.manipulation"], [655, "manipulation"], [392, "manipulation"], [77, "module-ivy.data_classes.array.manipulation"]], "Image": [[96, "module-ivy.data_classes.container.image"], [73, "module-ivy.data_classes.array.image"]], "for_loop": [[135, "for-loop"]], "sigmoid": [[129, "sigmoid"]], "hardswish": [[124, "hardswish"]], "leaky_relu": [[125, "leaky-relu"]], "Container": [[116, "container"]], "Statistical": [[106, "module-ivy.data_classes.container.statistical"], [663, "statistical"], [401, "statistical"], [83, "module-ivy.data_classes.array.statistical"]], "mish": [[127, "mish"]], "softplus": [[131, "softplus"]], "Linear algebra": [[98, "module-ivy.data_classes.container.linear_algebra"], [653, "linear-algebra"], [390, "linear-algebra"], [75, "module-ivy.data_classes.array.linear_algebra"]], "General": [[94, "module-ivy.data_classes.container.general"], [650, "general"], [387, "general"], [71, "module-ivy.data_classes.array.general"]], "Set": [[104, "module-ivy.data_classes.container.set"], [661, "set"], [398, "module-ivy.functional.ivy.experimental.set"], [81, "module-ivy.data_classes.array.set"]], "Wrapping": [[108, "module-ivy.data_classes.container.wrapping"], [85, "module-ivy.data_classes.array.wrapping"]], "Parafac2 tensor": [[111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Base": [[109, "module-ivy.data_classes.factorized_tensor.base"], [119, "module-ivy.data_classes.nested_array.base"], [87, "module-ivy.data_classes.container.base"]], "Tr tensor": [[112, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "cmp_isnot": [[134, "cmp-isnot"]], "Data classes": [[121, "data-classes"]], "softmax": [[130, "softmax"]], "Array": [[115, "array"]], "Factorized tensor": [[117, "factorized-tensor"]], "log_softmax": [[126, "log-softmax"]], "Sorting": [[105, "module-ivy.data_classes.container.sorting"], [662, "sorting"], [399, "sorting"], [82, "module-ivy.data_classes.array.sorting"]], "arange": [[139, "arange"]], "Elementwise": [[120, "module-ivy.data_classes.nested_array.elementwise"], [648, "elementwise"], [386, "elementwise"], [69, "module-ivy.data_classes.array.elementwise"], [92, "module-ivy.data_classes.container.elementwise"]], "wasserstein_loss_discriminator": [[716, "wasserstein-loss-discriminator"]], "concat": [[719, "concat"]], "copy_nest": [[738, "copy-nest"]], "index_nest": [[740, "index-nest"]], "vecdot": [[709, "vecdot"]], "vector_norm": [[710, "vector-norm"]], "constant_pad": [[720, "constant-pad"]], "nested_multi_map": [[750, "nested-multi-map"]], "prune_empty": [[751, "prune-empty"]], "binary_cross_entropy": [[712, "binary-cross-entropy"]], "roll": [[726, "roll"]], "all_nested_indices": [[737, "all-nested-indices"]], "vector_to_skew_symmetric_matrix": [[711, "vector-to-skew-symmetric-matrix"]], "duplicate_array_index_chains": [[739, "duplicate-array-index-chains"]], "insert_into_nest_at_indices": [[742, "insert-into-nest-at-indices"]], "tensorsolve": [[706, "tensorsolve"]], "map": [[743, "map"]], "permute_dims": [[723, "permute-dims"]], "trace": [[707, "trace"]], "sparse_cross_entropy": [[714, "sparse-cross-entropy"]], "expand_dims": [[721, "expand-dims"]], "flip": [[722, "flip"]], "zero_pad": [[733, "zero-pad"]], "repeat": [[724, "repeat"]], "unstack": [[732, "unstack"]], "nested_argwhere": [[748, "nested-argwhere"]], "ssim_loss": [[715, "ssim-loss"]], "nested_any": [[747, "nested-any"]], "split": [[727, "split"]], "cross_entropy": [[713, "cross-entropy"]], "tensordot": [[705, "tensordot"]], "reshape": [[725, "reshape"]], "map_nest_at_indices": [[745, "map-nest-at-indices"]], "squeeze": [[728, "squeeze"]], "maml_step": [[735, "maml-step"]], "stack": [[729, "stack"]], "nested_map": [[749, "nested-map"]], "swapaxes": [[730, "swapaxes"]], "multi_index_nest": [[746, "multi-index-nest"]], "map_nest_at_index": [[744, "map-nest-at-index"]], "fomaml_step": [[734, "fomaml-step"]], "vander": [[708, "vander"]], "insert_into_nest_at_index": [[741, "insert-into-nest-at-index"]], "reptile_step": [[736, "reptile-step"]], "clip": [[718, "clip"]], "wasserstein_loss_generator": [[717, "wasserstein-loss-generator"]], "tile": [[731, "tile"]], "set_nest_at_indices": [[755, "set-nest-at-indices"]], "random_normal": [[759, "random-normal"]], "unique_counts": [[769, "unique-counts"]], "Data-dependent output shape": [[769, null], [770, null], [768, null], [771, null], [661, null], [661, null], [661, null], [661, null]], "random_uniform": [[760, "random-uniform"]], "sort": [[775, "sort"]], "prod": [[782, "prod"]], "load": [[788, "load"]], "save": [[789, "save"]], "msort": [[773, "msort"]], "mean": [[780, "mean"]], "einsum": [[778, "einsum"]], "any": [[787, "any"]], "Function testing": [[792, "module-ivy_tests.test_ivy.helpers.function_testing"]], "unique_inverse": [[770, "unique-inverse"]], "Hypothesis helpers": [[794, "hypothesis-helpers"]], "prune_nest_at_index": [[752, "prune-nest-at-index"]], "layer_norm": [[756, "layer-norm"]], "nonzero": [[766, "nonzero"]], "General helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "min": [[781, "min"]], "searchsorted": [[774, "searchsorted"]], "argsort": [[772, "argsort"]], "unique_all": [[768, "unique-all"]], "sum": [[784, "sum"]], "argmin": [[764, "argmin"]], "std": [[783, "std"]], "argwhere": [[765, "argwhere"]], "prune_nest_at_indices": [[753, "prune-nest-at-indices"]], "Number helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "all": [[786, "all"]], "seed": [[761, "seed"]], "max": [[779, "max"]], "Array helpers": [[795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "set_nest_at_index": [[754, "set-nest-at-index"]], "randint": [[758, "randint"]], "where": [[767, "where"]], "unique_values": [[771, "unique-values"]], "Dtype helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Available frameworks": [[791, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "cumsum": [[777, "cumsum"]], "multinomial": [[757, "multinomial"]], "argmax": [[763, "argmax"]], "var": [[785, "var"]], "Globals": [[793, "module-ivy_tests.test_ivy.helpers.globals"]], "shuffle": [[762, "shuffle"]], "cumprod": [[776, "cumprod"]], "svd": [[703, "svd"]], "conv2d": [[668, "conv2d"]], "lstm_update": [[678, "lstm-update"]], "scaled_dot_product_attention": [[682, "scaled-dot-product-attention"]], "eigvalsh": [[690, "eigvalsh"]], "matrix_rank": [[696, "matrix-rank"]], "conv_general_transpose": [[673, "conv-general-transpose"]], "eig": [[688, "eig"], [443, "eig"]], "conv1d_transpose": [[667, "conv1d-transpose"]], "conv2d_transpose": [[669, "conv2d-transpose"]], "conv3d_transpose": [[671, "conv3d-transpose"]], "linear": [[676, "linear"]], "svdvals": [[704, "svdvals"]], "cross": [[684, "cross"]], "conv": [[665, "conv"]], "diag": [[686, "diag"]], "diagonal": [[687, "diagonal"]], "nms": [[680, "nms"]], "roi_align": [[681, "roi-align"]], "multi_head_attention": [[679, "multi-head-attention"]], "matrix_transpose": [[697, "matrix-transpose"]], "depthwise_conv2d": [[674, "depthwise-conv2d"]], "slogdet": [[701, "slogdet"]], "conv3d": [[670, "conv3d"]], "conv_general_dilated": [[672, "conv-general-dilated"]], "matrix_norm": [[694, "matrix-norm"]], "pinv": [[699, "pinv"]], "conv1d": [[666, "conv1d"]], "inv": [[692, "inv"]], "matrix_power": [[695, "matrix-power"]], "lstm": [[677, "lstm"]], "inner": [[691, "inner"]], "eigh": [[689, "eigh"]], "outer": [[698, "outer"]], "dropout": [[675, "dropout"]], "qr": [[700, "qr"]], "solve": [[702, "solve"]], "det": [[685, "det"]], "cholesky": [[683, "cholesky"]], "matmul": [[693, "matmul"]], "set_show_func_wrapper_trace_mode": [[603, "set-show-func-wrapper-trace-mode"]], "stable_pow": [[608, "stable-pow"]], "itemsize": [[586, "itemsize"]], "supports_inplace_updates": [[610, "supports-inplace-updates"]], "get_item": [[570, "get-item"]], "scatter_nd": [[592, "scatter-nd"]], "function_supported_devices_and_dtypes": [[565, "function-supported-devices-and-dtypes"]], "isin": [[584, "isin"]], "scatter_flat": [[591, "scatter-flat"]], "inplace_decrement": [[575, "inplace-decrement"]], "multiprocessing": [[588, "multiprocessing"]], "gather_nd": [[568, "gather-nd"]], "set_nestable_mode": [[599, "set-nestable-mode"]], "shape": [[605, "shape"]], "match_kwargs": [[587, "match-kwargs"]], "set_array_mode": [[593, "set-array-mode"]], "gather": [[567, "gather"]], "num_arrays_in_memory": [[589, "num-arrays-in-memory"]], "is_native_array": [[583, "is-native-array"]], "set_inplace_mode": [[595, "set-inplace-mode"]], "inplace_update": [[577, "inplace-update"]], "has_nans": [[573, "has-nans"]], "get_referrers_recursive": [[572, "get-referrers-recursive"]], "is_ivy_array": [[580, "is-ivy-array"]], "is_array": [[579, "is-array"]], "set_min_denominator": [[598, "set-min-denominator"]], "get_all_arrays_in_memory": [[569, "get-all-arrays-in-memory"]], "get_num_dims": [[571, "get-num-dims"]], "set_item": [[596, "set-item"]], "is_ivy_nested_array": [[582, "is-ivy-nested-array"]], "function_unsupported_devices_and_dtypes": [[566, "function-unsupported-devices-and-dtypes"]], "strides": [[609, "strides"]], "set_precise_mode": [[600, "set-precise-mode"]], "inplace_increment": [[576, "inplace-increment"]], "set_min_base": [[597, "set-min-base"]], "fourier_encode": [[564, "fourier-encode"]], "set_tmp_dir": [[604, "set-tmp-dir"]], "size": [[606, "size"]], "set_exception_trace_mode": [[594, "set-exception-trace-mode"]], "stable_divide": [[607, "stable-divide"]], "is_ivy_container": [[581, "is-ivy-container"]], "set_shape_array_mode": [[602, "set-shape-array-mode"]], "isscalar": [[585, "isscalar"]], "inplace_arrays_supported": [[574, "inplace-arrays-supported"]], "set_queue_timeout": [[601, "set-queue-timeout"]], "inplace_variables_supported": [[578, "inplace-variables-supported"]], "print_all_arrays_in_memory": [[590, "print-all-arrays-in-memory"]], "cummin": [[539, "cummin"]], "native_sparse_array": [[533, "native-sparse-array"]], "einops_rearrange": [[560, "einops-rearrange"]], "array_equal": [[552, "array-equal"]], "arg_info": [[550, "arg-info"]], "assert_supports_inplace": [[553, "assert-supports-inplace"]], "cov": [[537, "cov"]], "native_sparse_array_to_indices_values_and_shape": [[534, "native-sparse-array-to-indices-values-and-shape"]], "current_backend_str": [[558, "current-backend-str"]], "dirichlet": [[525, "dirichlet"]], "bincount": [[535, "bincount"]], "bernoulli": [[523, "bernoulli"]], "lp_normalize": [[522, "lp-normalize"]], "cache_fn": [[554, "cache-fn"]], "corrcoef": [[536, "corrcoef"]], "beta": [[524, "beta"]], "all_equal": [[549, "all-equal"]], "nanmedian": [[544, "nanmedian"]], "quantile": [[547, "quantile"]], "container_types": [[557, "container-types"]], "local_response_norm": [[521, "local-response-norm"]], "instance_norm": [[518, "instance-norm"]], "lexsort": [[530, "lexsort"]], "invert_permutation": [[529, "invert-permutation"]], "l2_normalize": [[520, "l2-normalize"]], "gamma": [[526, "gamma"]], "default": [[559, "default"]], "l1_normalize": [[519, "l1-normalize"]], "nanmin": [[545, "nanmin"]], "arg_names": [[551, "arg-names"]], "clip_vector_norm": [[556, "clip-vector-norm"]], "nanmean": [[543, "nanmean"]], "exists": [[563, "exists"]], "igamma": [[541, "igamma"]], "optional_get_element": [[548, "optional-get-element"]], "is_ivy_sparse_array": [[531, "is-ivy-sparse-array"]], "histogram": [[540, "histogram"]], "einops_repeat": [[562, "einops-repeat"]], "is_native_sparse_array": [[532, "is-native-sparse-array"]], "group_norm": [[517, "group-norm"]], "nanprod": [[546, "nanprod"]], "unravel_index": [[528, "unravel-index"]], "cummax": [[538, "cummax"]], "poisson": [[527, "poisson"]], "clip_matrix_norm": [[555, "clip-matrix-norm"]], "einops_reduce": [[561, "einops-reduce"]], "median": [[542, "median"]], "value_and_grad": [[641, "value-and-grad"]], "unset_shape_array_mode": [[625, "unset-shape-array-mode"]], "Meta": [[656, "meta"], [393, "module-ivy.functional.ivy.experimental.meta"]], "unset_show_func_wrapper_trace_mode": [[626, "unset-show-func-wrapper-trace-mode"]], "jac": [[635, "jac"]], "unset_min_denominator": [[621, "unset-min-denominator"]], "unset_array_mode": [[617, "unset-array-mode"]], "stop_gradient": [[640, "stop-gradient"]], "adam_update": [[631, "adam-update"]], "try_else_none": [[616, "try-else-none"]], "lamb_update": [[636, "lamb-update"]], "unset_inplace_mode": [[619, "unset-inplace-mode"]], "to_numpy": [[614, "to-numpy"]], "unset_exception_trace_mode": [[618, "unset-exception-trace-mode"]], "lars_update": [[637, "lars-update"]], "Control flow ops": [[644, "control-flow-ops"]], "Constants": [[643, "module-ivy.functional.ivy.constants"], [382, "module-ivy.functional.ivy.experimental.constants"]], "Device": [[647, "device"], [385, "module-ivy.functional.ivy.experimental.device"], [68, "module-ivy.data_classes.array.device"], [91, "module-ivy.data_classes.container.device"]], "Experimental": [[649, "experimental"], [93, "module-ivy.data_classes.container.experimental"], [70, "module-ivy.data_classes.array.experimental"]], "Creation": [[645, "creation"], [383, "creation"], [89, "module-ivy.data_classes.container.creation"], [66, "module-ivy.data_classes.array.creation"]], "vmap": [[629, "vmap"]], "unset_min_base": [[620, "unset-min-base"]], "Data type": [[646, "data-type"], [384, "module-ivy.functional.ivy.experimental.data_type"], [67, "module-ivy.data_classes.array.data_type"], [90, "module-ivy.data_classes.container.data_type"]], "unset_precise_mode": [[623, "unset-precise-mode"]], "to_list": [[612, "to-list"]], "Nest": [[657, "nest"], [394, "module-ivy.functional.ivy.experimental.nest"]], "to_native_shape": [[613, "to-native-shape"]], "unset_tmp_dir": [[627, "unset-tmp-dir"]], "unset_queue_timeout": [[624, "unset-queue-timeout"]], "adam_step": [[630, "adam-step"]], "unset_nestable_mode": [[622, "unset-nestable-mode"]], "execute_with_gradients": [[632, "execute-with-gradients"]], "grad": [[633, "grad"]], "requires_gradient": [[639, "requires-gradient"]], "optimizer_update": [[638, "optimizer-update"]], "value_is_nan": [[628, "value-is-nan"]], "gradient_descent_update": [[634, "gradient-descent-update"]], "to_scalar": [[615, "to-scalar"]], "to_ivy_shape": [[611, "to-ivy-shape"]], "moveaxis": [[497, "moveaxis"]], "check_scalar": [[480, "check-scalar"]], "fliplr": [[489, "fliplr"]], "atleast_2d": [[477, "atleast-2d"]], "flipud": [[490, "flipud"]], "associative_scan": [[475, "associative-scan"]], "i0": [[495, "i0"]], "partial_fold": [[500, "partial-fold"]], "dstack": [[485, "dstack"]], "partial_tensor_to_vec": [[501, "partial-tensor-to-vec"]], "trim_zeros": [[510, "trim-zeros"]], "unique_consecutive": [[513, "unique-consecutive"]], "expand": [[486, "expand"]], "log_poisson_loss": [[470, "log-poisson-loss"]], "heaviside": [[492, "heaviside"]], "put_along_axis": [[504, "put-along-axis"]], "unfold": [[512, "unfold"]], "concat_from_sequence": [[483, "concat-from-sequence"]], "column_stack": [[482, "column-stack"]], "vstack": [[515, "vstack"]], "batch_norm": [[516, "batch-norm"]], "fill_diagonal": [[487, "fill-diagonal"]], "partial_vec_to_tensor": [[503, "partial-vec-to-tensor"]], "top_k": [[509, "top-k"]], "vsplit": [[514, "vsplit"]], "atleast_1d": [[476, "atleast-1d"]], "dsplit": [[484, "dsplit"]], "soft_margin_loss": [[473, "soft-margin-loss"]], "rot90": [[505, "rot90"]], "as_strided": [[474, "as-strided"]], "atleast_3d": [[478, "atleast-3d"]], "broadcast_shapes": [[479, "broadcast-shapes"]], "pad_sequence": [[499, "pad-sequence"]], "soft_thresholding": [[506, "soft-thresholding"]], "partial_unfold": [[502, "partial-unfold"]], "fold": [[491, "fold"]], "take": [[507, "take"]], "hsplit": [[493, "hsplit"]], "poisson_nll_loss": [[471, "poisson-nll-loss"]], "take_along_axis": [[508, "take-along-axis"]], "flatten": [[488, "flatten"]], "pad": [[498, "pad"]], "unflatten": [[511, "unflatten"]], "smooth_l1_loss": [[472, "smooth-l1-loss"]], "choose": [[481, "choose"]], "matricize": [[496, "matricize"]], "hstack": [[494, "hstack"]], "pool": [[431, "pool"]], "cond": [[440, "cond"]], "solve_triangular": [[460, "solve-triangular"]], "multi_mode_dot": [[458, "multi-mode-dot"]], "khatri_rao": [[449, "khatri-rao"]], "interp": [[424, "interp"]], "truncated_svd": [[463, "truncated-svd"]], "diagflat": [[441, "diagflat"]], "eigvals": [[445, "eigvals"]], "kronecker": [[451, "kronecker"]], "adjoint": [[438, "adjoint"]], "lu_factor": [[452, "lu-factor"]], "interpolate": [[425, "interpolate"]], "stft": [[437, "stft"]], "higher_order_moment": [[447, "higher-order-moment"]], "initialize_tucker": [[448, "initialize-tucker"]], "batched_outer": [[439, "batched-outer"]], "kl_div": [[468, "kl-div"]], "dot": [[442, "dot"]], "make_svd_non_negative": [[454, "make-svd-non-negative"]], "multi_dot": [[457, "multi-dot"]], "ifftn": [[423, "ifftn"]], "max_unpool1d": [[429, "max-unpool1d"]], "reduce_window": [[432, "reduce-window"]], "mode_dot": [[456, "mode-dot"]], "l1_loss": [[469, "l1-loss"]], "lu_solve": [[453, "lu-solve"]], "tensor_train": [[462, "tensor-train"]], "svd_flip": [[461, "svd-flip"]], "general_inner_product": [[446, "general-inner-product"]], "hinge_embedding_loss": [[466, "hinge-embedding-loss"]], "kron": [[450, "kron"]], "partial_tucker": [[459, "partial-tucker"]], "rfft": [[433, "rfft"]], "matrix_exp": [[455, "matrix-exp"]], "nearest_interpolate": [[430, "nearest-interpolate"]], "sliding_window": [[436, "sliding-window"]], "rnn": [[435, "rnn"]], "max_pool3d": [[428, "max-pool3d"]], "tt_matrix_to_tensor": [[464, "tt-matrix-to-tensor"]], "max_pool2d": [[427, "max-pool2d"]], "huber_loss": [[467, "huber-loss"]], "eigh_tridiagonal": [[444, "eigh-tridiagonal"]], "rfftn": [[434, "rfftn"]], "max_pool1d": [[426, "max-pool1d"]], "tucker": [[465, "tucker"]], "random_cp": [[337, "random-cp"]], "unsorted_segment_sum": [[346, "unsorted-segment-sum"]], "mel_weight_matrix": [[333, "mel-weight-matrix"]], "ndindex": [[335, "ndindex"]], "kaiser_window": [[332, "kaiser-window"]], "isclose": [[365, "isclose"]], "trilu": [[343, "trilu"]], "fix": [[359, "fix"]], "modf": [[369, "modf"]], "amin": [[350, "amin"]], "random_tucker": [[341, "random-tucker"]], "ndenumerate": [[334, "ndenumerate"]], "digamma": [[356, "digamma"]], "fmax": [[361, "fmax"]], "count_nonzero": [[354, "count-nonzero"]], "random_parafac2": [[338, "random-parafac2"]], "erfinv": [[358, "erfinv"]], "indices": [[330, "indices"]], "sparsify_tensor": [[374, "sparsify-tensor"]], "frexp": [[362, "frexp"]], "random_tt": [[340, "random-tt"]], "tril_indices": [[342, "tril-indices"]], "nansum": [[370, "nansum"]], "random_tr": [[339, "random-tr"]], "binarizer": [[351, "binarizer"]], "polyval": [[336, "polyval"]], "hann_window": [[329, "hann-window"]], "amax": [[349, "amax"]], "conj": [[352, "conj"]], "hypot": [[364, "hypot"]], "lerp": [[367, "lerp"]], "xlogy": [[375, "xlogy"]], "copysign": [[353, "copysign"]], "allclose": [[348, "allclose"]], "diff": [[355, "diff"]], "ldexp": [[366, "ldexp"]], "vorbis_window": [[347, "vorbis-window"]], "lgamma": [[368, "lgamma"]], "gradient": [[363, "gradient"]], "sinc": [[373, "sinc"]], "unsorted_segment_min": [[345, "unsorted-segment-min"]], "kaiser_bessel_derived_window": [[331, "kaiser-bessel-derived-window"]], "float_power": [[360, "float-power"]], "unsorted_segment_mean": [[344, "unsorted-segment-mean"]], "nextafter": [[371, "nextafter"]], "signbit": [[372, "signbit"]], "erfc": [[357, "erfc"]], "idct": [[421, "idct"]], "avg_pool3d": [[410, "avg-pool3d"]], "ifft": [[422, "ifft"]], "dropout2d": [[414, "dropout2d"]], "dct": [[411, "dct"]], "zeta": [[376, "zeta"]], "adaptive_avg_pool2d": [[404, "adaptive-avg-pool2d"]], "dft": [[412, "dft"]], "bind_custom_gradient_function": [[378, "bind-custom-gradient-function"]], "avg_pool1d": [[408, "avg-pool1d"]], "area_interpolate": [[407, "area-interpolate"]], "dropout1d": [[413, "dropout1d"]], "embedding": [[416, "embedding"]], "Sparse array": [[400, "sparse-array"]], "avg_pool2d": [[409, "avg-pool2d"]], "generate_einsum_equation": [[419, "generate-einsum-equation"]], "jvp": [[379, "jvp"]], "vjp": [[380, "vjp"]], "dropout3d": [[415, "dropout3d"]], "adaptive_avg_pool1d": [[403, "adaptive-avg-pool1d"]], "adaptive_max_pool2d": [[405, "adaptive-max-pool2d"]], "get_interpolate_kernel": [[420, "get-interpolate-kernel"]], "adaptive_max_pool3d": [[406, "adaptive-max-pool3d"]], "reduce": [[377, "reduce"]], "fft": [[417, "fft"]], "fft2": [[418, "fft2"]], "elu": [[310, "elu"]], "hardsilu": [[312, "hardsilu"]], "sign": [[298, "sign"]], "sinh": [[300, "sinh"]], "prelu": [[316, "prelu"]], "softshrink": [[321, "softshrink"]], "thresholded_relu": [[325, "thresholded-relu"]], "square": [[302, "square"]], "maximum": [[285, "maximum"]], "minimum": [[286, "minimum"]], "remainder": [[296, "remainder"]], "trunc": [[307, "trunc"]], "sin": [[299, "sin"]], "hardshrink": [[311, "hardshrink"]], "selu": [[319, "selu"]], "relu6": [[317, "relu6"]], "silu": [[320, "silu"]], "tanh": [[305, "tanh"]], "eye_like": [[327, "eye-like"]], "scaled_tanh": [[318, "scaled-tanh"]], "reciprocal": [[295, "reciprocal"]], "rad2deg": [[293, "rad2deg"]], "hamming_window": [[328, "hamming-window"]], "not_equal": [[290, "not-equal"]], "logical_xor": [[284, "logical-xor"]], "multiply": [[287, "multiply"]], "positive": [[291, "positive"]], "tanhshrink": [[323, "tanhshrink"]], "subtract": [[303, "subtract"]], "round": [[297, "round"]], "stanh": [[322, "stanh"]], "sqrt": [[301, "sqrt"]], "pow": [[292, "pow"]], "logical_or": [[283, "logical-or"]], "logical_not": [[282, "logical-not"]], "real": [[294, "real"]], "tan": [[304, "tan"]], "negative": [[289, "negative"]], "blackman_window": [[326, "blackman-window"]], "celu": [[309, "celu"]], "hardtanh": [[313, "hardtanh"]], "nan_to_num": [[288, "nan-to-num"]], "logsigmoid": [[315, "logsigmoid"]], "trapz": [[306, "trapz"]], "threshold": [[324, "threshold"]], "trunc_divide": [[308, "trunc-divide"]], "logit": [[314, "logit"]], "get_all_ivy_arrays_on_dev": [[215, "get-all-ivy-arrays-on-dev"]], "is_native_dtype": [[190, "is-native-dtype"]], "type_promote_arrays": [[200, "type-promote-arrays"]], "split_func_call": [[227, "split-func-call"]], "is_uint_dtype": [[191, "is-uint-dtype"]], "result_type": [[194, "result-type"]], "set_soft_device_mode": [[224, "set-soft-device-mode"]], "function_unsupported_devices": [[214, "function-unsupported-devices"]], "num_cpu_cores": [[218, "num-cpu-cores"]], "total_mem_on_dev": [[229, "total-mem-on-dev"]], "valid_dtype": [[206, "valid-dtype"]], "percent_used_mem_on_dev": [[221, "percent-used-mem-on-dev"]], "unset_default_complex_dtype": [[201, "unset-default-complex-dtype"]], "set_default_uint_dtype": [[199, "set-default-uint-dtype"]], "unset_default_float_dtype": [[203, "unset-default-float-dtype"]], "tpu_is_available": [[230, "tpu-is-available"]], "unset_default_device": [[231, "unset-default-device"]], "set_default_complex_dtype": [[195, "set-default-complex-dtype"]], "handle_soft_device_variable": [[217, "handle-soft-device-variable"]], "used_mem_on_dev": [[233, "used-mem-on-dev"]], "is_hashable_dtype": [[188, "is-hashable-dtype"]], "default_device": [[210, "default-device"]], "clear_cached_mem_on_dev": [[209, "clear-cached-mem-on-dev"]], "gpu_is_available": [[216, "gpu-is-available"]], "set_default_int_dtype": [[198, "set-default-int-dtype"]], "unset_default_int_dtype": [[204, "unset-default-int-dtype"]], "function_supported_devices": [[213, "function-supported-devices"]], "set_default_float_dtype": [[197, "set-default-float-dtype"]], "set_default_dtype": [[196, "set-default-dtype"]], "unset_soft_device_mode": [[232, "unset-soft-device-mode"]], "dev": [[211, "dev"]], "num_ivy_arrays_on_dev": [[220, "num-ivy-arrays-on-dev"]], "abs": [[234, "abs"]], "to_device": [[228, "to-device"]], "as_native_dev": [[208, "as-native-dev"]], "split_factor": [[226, "split-factor"]], "set_default_device": [[223, "set-default-device"]], "print_all_ivy_arrays_on_dev": [[222, "print-all-ivy-arrays-on-dev"]], "unset_default_uint_dtype": [[205, "unset-default-uint-dtype"]], "set_split_factor": [[225, "set-split-factor"]], "promote_types_of_inputs": [[193, "promote-types-of-inputs"]], "dev_util": [[212, "dev-util"]], "num_gpus": [[219, "num-gpus"]], "promote_types": [[192, "promote-types"]], "is_int_dtype": [[189, "is-int-dtype"]], "unset_default_dtype": [[202, "unset-default-dtype"]], "as_ivy_dev": [[207, "as-ivy-dev"]], "Ivy AlexNet demo": [[4, "Ivy-AlexNet-demo"], [5, "Ivy-AlexNet-demo"]], "Installation": [[4, "Installation"], [22, "Installation"], [21, "Installation"], [23, "Installation"], [5, "Installation"]], "Data Preparation": [[4, "Data-Preparation"], [12, "Data-Preparation"], [7, "Data-Preparation"], [13, "Data-Preparation"], [22, "Data-Preparation"], [21, "Data-Preparation"], [6, "Data-Preparation"], [5, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[4, "Ivy-AlexNet-inference-in-Torch"], [5, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[4, "TensorFlow-inference"], [5, "TensorFlow-inference"]], "JAX inference": [[4, "JAX-inference"], [5, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[4, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [5, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "ODSC Ivy Demo": [[44, "ODSC-Ivy-Demo"]], "Ivy as a Framework": [[44, "Ivy-as-a-Framework"]], "Ivy Backend Handler": [[44, "Ivy-Backend-Handler"], [33, "Ivy-Backend-Handler"]], "Data Structures": [[44, "Data-Structures"], [33, "Data-Structures"]], "Ivy Functional API": [[44, "Ivy-Functional-API"], [33, "Ivy-Functional-API"]], "Ivy Stateful API": [[44, "Ivy-Stateful-API"], [33, "Ivy-Stateful-API"]], "Graph Tracer": [[44, "Graph-Tracer"]], "Any function": [[44, "Any-function"], [45, "Any-function"]], "Any library": [[44, "Any-library"], [45, "Any-library"]], "Any model": [[44, "Any-model"], [45, "Any-model"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "Accelerating PyTorch models with JAX": [[25, "Accelerating-PyTorch-models-with-JAX"], [24, "Accelerating-PyTorch-models-with-JAX"]], "How to use decorators": [[38, "How-to-use-decorators"]], "Trace": [[38, "Trace"], [37, "Trace"]], "Graph Transpile": [[38, "Graph-Transpile"]], "Transpile \ud83d\udea7": [[38, "Transpile-\ud83d\udea7"]], "Image Segmentation with Ivy UNet": [[12, "Image-Segmentation-with-Ivy-UNet"], [13, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[12, "Imports"], [26, "Imports"], [13, "Imports"], [22, "Imports"], [21, "Imports"]], "Custom Preprocessing": [[12, "Custom-Preprocessing"], [13, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[12, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [13, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [22, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [21, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[12, "Visualise-image"], [13, "Visualise-image"], [22, "Visualise-image"], [21, "Visualise-image"]], "Model Inference": [[12, "Model-Inference"], [13, "Model-Inference"]], "Initializing Native Torch UNet": [[12, "Initializing-Native-Torch-UNet"], [13, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[12, "Custom-masking-function"], [13, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[12, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [13, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[12, "TensorFlow-backend"], [13, "TensorFlow-backend"]], "JAX": [[12, "JAX"], [13, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[12, "Appendix:-the-Ivy-native-implementation-of-UNet"], [13, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Accelerating XGBoost with JAX": [[26, "Accelerating-XGBoost-with-JAX"]], "Tests": [[26, "Tests"]], "Loading the Data": [[26, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[26, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[26, "JAX-backend"]], "Tensorflow backend": [[26, "Tensorflow-backend"]], "PyTorch backend": [[26, "PyTorch-backend"]], "More exhaustive example": [[26, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[26, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[26, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[26, "Comparison-of-Metrics"]], "Transpile any library": [[39, "Transpile-any-library"]], "Accelerating MMPreTrain models with JAX": [[19, "Accelerating-MMPreTrain-models-with-JAX"], [20, "Accelerating-MMPreTrain-models-with-JAX"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Transpiling a PyTorch model to build on top": [[27, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Transpiling Models from PyTorch to TensorFlow": [[43, "Transpiling-Models-from-PyTorch-to-TensorFlow"]], "Examples and Demos": [[3, "examples-and-demos"], [31, "examples-and-demos"]], "How To Convert Models from PyTorch to PaddlePaddle": [[10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[10, "About-the-Model"], [11, "About-the-Model"]], "Transpiling the Model": [[10, "Transpiling-the-Model"], [11, "Transpiling-the-Model"]], "Comparing the results": [[10, "Comparing-the-results"], [9, "Comparing-the-results"], [11, "Comparing-the-results"], [8, "Comparing-the-results"], [23, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[10, "Fine-tuning-the-transpiled-model"], [9, "Fine-tuning-the-transpiled-model"], [11, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"], [23, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[10, "Conclusion"], [9, "Conclusion"], [11, "Conclusion"], [8, "Conclusion"], [23, "Conclusion"]], "Quickstart": [[45, "Quickstart"]], "Get familiar with Ivy": [[45, "Get-familiar-with-Ivy"]], "Functional API": [[45, "Functional-API"]], "Stateful API": [[45, "Stateful-API"]], "Tracing code": [[45, "Tracing-code"]], "# Ivy Bert Demo": [[7, "#-Ivy-Bert-Demo"], [6, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[7, "Install-the-dependecies"], [6, "Install-the-dependecies"]], "Import the modules": [[7, "Import-the-modules"], [6, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[7, "Ivy-inference-with-Sequence-Classification"], [6, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[7, "Ivy-model-inference-with-tensorflow"], [6, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[7, "Ivy-model-inference-with-Jax"], [6, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[7, "Ivy-model-inference-with-torch"], [6, "Ivy-model-inference-with-torch"]], "Transpiling a haiku model to build on top": [[28, "Transpiling-a-haiku-model-to-build-on-top"]], "Learn the basics": [[32, "learn-the-basics"], [31, "learn-the-basics"]], "Using TensorFlow Models in your PyTorch Projects": [[9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[9, "Framework-Incompatibility"], [8, "Framework-Incompatibility"], [23, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[9, "Transpiling-a-TensorFlow-model-to-PyTorch"], [8, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[9, "About-the-transpiled-model"], [8, "About-the-transpiled-model"], [23, "About-the-transpiled-model"]], "Setting-up the source model": [[9, "Setting-up-the-source-model"], [8, "Setting-up-the-source-model"], [23, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [8, "Converting-the-model-from-TensorFlow-to-PyTorch"], [23, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Using Ivy ResNet": [[22, "Using-Ivy-ResNet"], [21, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[22, "Prepare-the-set-of-labels"], [21, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[22, "Model-Inference-ResNet34"], [21, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[22, "Initializing-Native-Torch-ResNet34"], [21, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [21, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[22, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [22, "id1"], [21, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [21, "id1"]], "Model Inference ResNet50": [[22, "Model-Inference-ResNet50"], [21, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[22, "Initializing-Native-Torch-ResNet50"], [21, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [21, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Transpiling a Tensorflow model to build on top": [[29, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Write a model using Ivy": [[41, "Write-a-model-using-Ivy"]], "Write Ivy code": [[33, "Write-Ivy-code"]], "Contents": [[33, "Contents"]], "Installing Ivy": [[33, "Installing-Ivy"]], "Importing Ivy": [[33, "Importing-Ivy"], [0, "Importing-Ivy"]], "Transpile code": [[36, "Transpile-code"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Training PyTorch ResNet in your TensorFlow Projects": [[23, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Transpiling a PyTorch model to TensorFlow": [[23, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "Load the Data": [[23, "Load-the-Data"]], "Visualize a few images": [[23, "Visualize-a-few-images"]], "Load the pre-trained model": [[23, "Load-the-pre-trained-model"]], "Transpiling Functions from PyTorch to TensorFlow": [[42, "Transpiling-Functions-from-PyTorch-to-TensorFlow"]], "0.0: Unify": [[46, "0.0:-Unify"]], "Developing a convolutional network using Ivy": [[30, "Developing-a-convolutional-network-using-Ivy"]], "Tutorials And Examples": [[31, "tutorials-and-examples"]], "Unify code": [[34, "Unify-code"]], "Transpile any model": [[40, "Transpile-any-model"]], "Round up": [[40, "Round-up"]], "Trace code": [[35, "Trace-code"]], "Lazy vs Eager": [[37, "Lazy-vs-Eager"]], "Unify": [[37, "Unify"], [49, "Unify"], [50, "Unify"], [51, "Unify"]], "Transpile": [[37, "Transpile"], [49, "Transpile"], [50, "Transpile"], [51, "Transpile"]], "atan2": [[242, "atan2"]], "exp": [[257, "exp"]], "bitwise_right_shift": [[248, "bitwise-right-shift"]], "greater": [[265, "greater"]], "less_equal": [[274, "less-equal"]], "logical_and": [[281, "logical-and"]], "fmod": [[263, "fmod"]], "divide": [[254, "divide"]], "log1p": [[277, "log1p"]], "add": [[237, "add"]], "atanh": [[243, "atanh"]], "bitwise_xor": [[249, "bitwise-xor"]], "erf": [[256, "erf"]], "gcd": [[264, "gcd"]], "cos": [[251, "cos"]], "isinf": [[269, "isinf"]], "less": [[273, "less"]], "expm1": [[259, "expm1"]], "greater_equal": [[266, "greater-equal"]], "acos": [[235, "acos"]], "isnan": [[270, "isnan"]], "atan": [[241, "atan"]], "isreal": [[271, "isreal"]], "bitwise_or": [[247, "bitwise-or"]], "ceil": [[250, "ceil"]], "isfinite": [[268, "isfinite"]], "cosh": [[252, "cosh"]], "exp2": [[258, "exp2"]], "floor": [[260, "floor"]], "lcm": [[272, "lcm"]], "bitwise_and": [[244, "bitwise-and"]], "floor_divide": [[261, "floor-divide"]], "bitwise_invert": [[245, "bitwise-invert"]], "imag": [[267, "imag"]], "logaddexp2": [[280, "logaddexp2"]], "deg2rad": [[253, "deg2rad"]], "logaddexp": [[279, "logaddexp"]], "asin": [[239, "asin"]], "log": [[275, "log"]], "log10": [[276, "log10"]], "equal": [[255, "equal"]], "angle": [[238, "angle"]], "fmin": [[262, "fmin"]], "acosh": [[236, "acosh"]], "asinh": [[240, "asinh"]], "bitwise_left_shift": [[246, "bitwise-left-shift"]], "log2": [[278, "log2"]], "1.3: Dynamic vs Static": [[52, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[52, "Dynamic"]], "Static": [[52, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[52, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "3.0: Perceiver": [[54, "3.0:-Perceiver"]], "2.0: Kornia": [[53, "2.0:-Kornia"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[58, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[58, "Table-of-Contents"]], "Defining the model": [[58, "Defining-the-model"]], "Model construction": [[58, "Model-construction"]], "Some helper functions": [[58, "Some-helper-functions"]], "Transpiling the model": [[58, "Transpiling-the-model"]], "PyTorch pipeline": [[58, "PyTorch-pipeline"]], "Dataset download": [[58, "Dataset-download"]], "DataLoader": [[58, "DataLoader"]], "Training": [[58, "Training"]], "Resnet 18": [[63, "Resnet-18"]], "Compilation of a Basic Function": [[57, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[57, "Installs-\ud83d\udcbe"], [56, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[57, "Imports-\ud83d\udec3"], [56, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[57, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[57, "Function-compilation-\ud83d\udee0"]], "Set backend": [[57, "Set-backend"]], "Sample input": [[57, "Sample-input"]], "Define function to compile": [[57, "Define-function-to-compile"]], "Compile the function": [[57, "Compile-the-function"]], "Check results": [[57, "Check-results"], [57, "id1"]], "Compiling simple neural network \ud83e\udde0": [[57, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[57, "Define-Model"], [56, "Define-Model"]], "Create model": [[57, "Create-model"]], "Define input": [[57, "Define-input"]], "Compile network": [[57, "Compile-network"]], "3.1: Stable Diffusion": [[55, "3.1:-Stable-Diffusion"]], "Ivy as a Transpiler Introduction": [[62, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[62, "To-use-the-transpiler:"]], "Transpiler Interface": [[62, "Transpiler-Interface"]], "Telemetry": [[62, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[62, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[62, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[62, "3.-Transpile-Models-\ud83c\udf10"]], "Basic Operations with Ivy": [[56, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[56, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[56, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[56, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[56, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[56, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[56, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[56, "Set-Backend-Framework"]], "Create Model": [[56, "Create-Model"]], "Create Optimizer": [[56, "Create-Optimizer"]], "Input and Target": [[56, "Input-and-Target"]], "Loss Function": [[56, "Loss-Function"]], "Training Loop": [[56, "Training-Loop"]], "Conversions": [[88, "module-ivy.data_classes.container.conversions"], [65, "module-ivy.data_classes.array.conversions"]], "1.0: Lazy vs Eager": [[49, "1.0:-Lazy-vs-Eager"]], "Compile": [[49, "Compile"], [50, "Compile"], [51, "Compile"]], "0.1: Compile": [[47, "0.1:-Compile"]], "0.2: Transpile": [[48, "0.2:-Transpile"]], "Deepmind PerceiverIO on GPU": [[59, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[59, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[59, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[59, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[59, "Run-the-demo..."]], "\u2026with torch backend": [[59, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[59, "....with-tensorflow-backend"]], "\u2026with jax backend": [[59, "...with-jax-backend"]], "\u2026with numpy backend": [[59, "...with-numpy-backend"]], "End-to-End Training Pipeline in Ivy": [[60, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[60, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[60, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[60, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[60, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[60, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[60, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[60, "Plotting-the-training-metrics"]], "Save the trained Model": [[60, "Save-the-trained-Model"]], "HuggingFace Tensorflow DeiT": [[61, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[61, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "1.1: Framework Selection": [[50, "1.1:-Framework-Selection"]], "1.2: As a Decorator": [[51, "1.2:-As-a-Decorator"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[64, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[64, "module-ivy.data_classes.array.activations"], [65, "module-ivy.data_classes.array.conversions"], [66, "module-ivy.data_classes.array.creation"], [67, "module-ivy.data_classes.array.data_type"], [68, "module-ivy.data_classes.array.device"], [69, "module-ivy.data_classes.array.elementwise"], [70, "module-ivy.data_classes.array.experimental"], [70, "module-ivy.data_classes.array.experimental.activations"], [70, "module-ivy.data_classes.array.experimental.conversions"], [70, "module-ivy.data_classes.array.experimental.creation"], [70, "module-ivy.data_classes.array.experimental.data_type"], [70, "module-ivy.data_classes.array.experimental.device"], [70, "module-ivy.data_classes.array.experimental.elementwise"], [70, "module-ivy.data_classes.array.experimental.general"], [70, "module-ivy.data_classes.array.experimental.gradients"], [70, "module-ivy.data_classes.array.experimental.image"], [70, "module-ivy.data_classes.array.experimental.layers"], [70, "module-ivy.data_classes.array.experimental.linear_algebra"], [70, "module-ivy.data_classes.array.experimental.losses"], [70, "module-ivy.data_classes.array.experimental.manipulation"], [70, "module-ivy.data_classes.array.experimental.norms"], [70, "module-ivy.data_classes.array.experimental.random"], [70, "module-ivy.data_classes.array.experimental.searching"], [70, "module-ivy.data_classes.array.experimental.set"], [70, "module-ivy.data_classes.array.experimental.sorting"], [70, "module-ivy.data_classes.array.experimental.statistical"], [70, "module-ivy.data_classes.array.experimental.utility"], [71, "module-ivy.data_classes.array.general"], [72, "module-ivy.data_classes.array.gradients"], [73, "module-ivy.data_classes.array.image"], [74, "module-ivy.data_classes.array.layers"], [75, "module-ivy.data_classes.array.linear_algebra"], [76, "module-ivy.data_classes.array.losses"], [77, "module-ivy.data_classes.array.manipulation"], [78, "module-ivy.data_classes.array.norms"], [79, "module-ivy.data_classes.array.random"], [80, "module-ivy.data_classes.array.searching"], [81, "module-ivy.data_classes.array.set"], [82, "module-ivy.data_classes.array.sorting"], [83, "module-ivy.data_classes.array.statistical"], [84, "module-ivy.data_classes.array.utility"], [85, "module-ivy.data_classes.array.wrapping"], [86, "module-ivy.data_classes.container.activations"], [87, "module-ivy.data_classes.container.base"], [88, "module-ivy.data_classes.container.conversions"], [89, "module-ivy.data_classes.container.creation"], [90, "module-ivy.data_classes.container.data_type"], [91, "module-ivy.data_classes.container.device"], [92, "module-ivy.data_classes.container.elementwise"], [93, "module-ivy.data_classes.container.experimental"], [93, "module-ivy.data_classes.container.experimental.activations"], [93, "module-ivy.data_classes.container.experimental.conversions"], [93, "module-ivy.data_classes.container.experimental.creation"], [93, "module-ivy.data_classes.container.experimental.data_type"], [93, "module-ivy.data_classes.container.experimental.device"], [93, "module-ivy.data_classes.container.experimental.elementwise"], [93, "module-ivy.data_classes.container.experimental.general"], [93, "module-ivy.data_classes.container.experimental.gradients"], [93, "module-ivy.data_classes.container.experimental.image"], [93, "module-ivy.data_classes.container.experimental.layers"], [93, "module-ivy.data_classes.container.experimental.linear_algebra"], [93, "module-ivy.data_classes.container.experimental.losses"], [93, "module-ivy.data_classes.container.experimental.manipulation"], [93, "module-ivy.data_classes.container.experimental.norms"], [93, "module-ivy.data_classes.container.experimental.random"], [93, "module-ivy.data_classes.container.experimental.searching"], [93, "module-ivy.data_classes.container.experimental.set"], [93, "module-ivy.data_classes.container.experimental.sorting"], [93, "module-ivy.data_classes.container.experimental.statistical"], [93, "module-ivy.data_classes.container.experimental.utility"], [94, "module-ivy.data_classes.container.general"], [95, "module-ivy.data_classes.container.gradients"], [96, "module-ivy.data_classes.container.image"], [97, "module-ivy.data_classes.container.layers"], [98, "module-ivy.data_classes.container.linear_algebra"], [99, "module-ivy.data_classes.container.losses"], [100, "module-ivy.data_classes.container.manipulation"], [101, "module-ivy.data_classes.container.norms"], [102, "module-ivy.data_classes.container.random"], [103, "module-ivy.data_classes.container.searching"], [104, "module-ivy.data_classes.container.set"], [105, "module-ivy.data_classes.container.sorting"], [106, "module-ivy.data_classes.container.statistical"], [107, "module-ivy.data_classes.container.utility"], [108, "module-ivy.data_classes.container.wrapping"], [109, "module-ivy.data_classes.factorized_tensor.base"], [110, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [112, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [113, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [115, "module-ivy.data_classes.array.array"], [116, "module-ivy.data_classes.container.container"], [118, "module-ivy.data_classes.nested_array.nested_array"], [119, "module-ivy.data_classes.nested_array.base"], [120, "module-ivy.data_classes.nested_array.elementwise"], [381, "module-ivy.functional.ivy.experimental.activations"], [382, "module-ivy.functional.ivy.experimental.constants"], [383, "module-ivy.functional.ivy.experimental.creation"], [384, "module-ivy.functional.ivy.experimental.data_type"], [385, "module-ivy.functional.ivy.experimental.device"], [386, "module-ivy.functional.ivy.experimental.elementwise"], [387, "module-ivy.functional.ivy.experimental.general"], [388, "module-ivy.functional.ivy.experimental.gradients"], [389, "module-ivy.functional.ivy.experimental.layers"], [390, "module-ivy.functional.ivy.experimental.linear_algebra"], [391, "module-ivy.functional.ivy.experimental.losses"], [392, "module-ivy.functional.ivy.experimental.manipulation"], [393, "module-ivy.functional.ivy.experimental.meta"], [394, "module-ivy.functional.ivy.experimental.nest"], [395, "module-ivy.functional.ivy.experimental.norms"], [396, "module-ivy.functional.ivy.experimental.random"], [397, "module-ivy.functional.ivy.experimental.searching"], [398, "module-ivy.functional.ivy.experimental.set"], [399, "module-ivy.functional.ivy.experimental.sorting"], [400, "module-ivy.functional.ivy.experimental.sparse_array"], [401, "module-ivy.functional.ivy.experimental.statistical"], [402, "module-ivy.functional.ivy.experimental.utility"], [642, "module-ivy.functional.ivy.activations"], [643, "module-ivy.functional.ivy.constants"], [644, "module-ivy.functional.ivy.control_flow_ops"], [645, "module-ivy.functional.ivy.creation"], [646, "module-ivy.functional.ivy.data_type"], [647, "module-ivy.functional.ivy.device"], [648, "module-ivy.functional.ivy.elementwise"], [649, "module-ivy.functional.ivy.experimental"], [650, "module-ivy.functional.ivy.general"], [651, "module-ivy.functional.ivy.gradients"], [652, "module-ivy.functional.ivy.layers"], [653, "module-ivy.functional.ivy.linear_algebra"], [654, "module-ivy.functional.ivy.losses"], [655, "module-ivy.functional.ivy.manipulation"], [656, "module-ivy.functional.ivy.meta"], [657, "module-ivy.functional.ivy.nest"], [658, "module-ivy.functional.ivy.norms"], [659, "module-ivy.functional.ivy.random"], [660, "module-ivy.functional.ivy.searching"], [661, "module-ivy.functional.ivy.set"], [662, "module-ivy.functional.ivy.sorting"], [663, "module-ivy.functional.ivy.statistical"], [664, "module-ivy.functional.ivy.utility"], [790, "module-ivy_tests.test_ivy.helpers.assertions"], [791, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [792, "module-ivy_tests.test_ivy.helpers.function_testing"], [793, "module-ivy_tests.test_ivy.helpers.globals"], [794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [799, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [800, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [801, "module-ivy_tests.test_ivy.helpers.structs"], [802, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [803, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [807, "module-ivy.stateful.activations"], [808, "module-ivy.stateful.converters"], [809, "module-ivy.stateful.helpers"], [810, "module-ivy.stateful.initializers"], [811, "module-ivy.stateful.layers"], [812, "module-ivy.stateful.losses"], [813, "module-ivy.stateful.module"], [814, "module-ivy.stateful.norms"], [815, "module-ivy.stateful.optimizers"], [816, "module-ivy.stateful.sequential"], [817, "module-ivy.utils.assertions"], [818, "module-ivy.utils.backend"], [819, "module-ivy.utils.backend.ast_helpers"], [820, "module-ivy.utils.backend.handler"], [821, "module-ivy.utils.backend.sub_backend_handler"], [822, "module-ivy.utils.binaries"], [823, "module-ivy.utils.decorator_utils"], [824, "module-ivy.utils.dynamic_import"], [825, "module-ivy.utils.einsum_parser"], [826, "module-ivy.utils.einsum_path_helpers"], [827, "module-ivy.utils.exceptions"], [828, "module-ivy.utils.inspection"], [829, "module-ivy.utils.logging"], [830, "module-ivy.utils.profiler"], [831, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[64, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_data_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._data_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[65, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[65, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[66, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[66, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[67, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[67, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[68, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[68, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[68, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[68, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[68, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[69, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[69, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[70, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[70, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[70, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[70, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[70, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[70, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[70, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[70, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[70, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[70, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[70, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[70, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[70, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[70, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[70, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[70, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[70, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[70, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[70, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[70, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[70, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[70, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[70, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[70, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[70, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[70, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[70, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[70, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[70, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[70, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[70, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[70, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[70, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[70, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[70, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[70, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[70, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[70, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[70, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[70, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[70, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[70, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[70, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[70, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[70, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[70, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[71, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[71, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[72, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[72, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[73, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[73, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[73, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[74, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[74, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[75, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[75, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[76, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[76, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[77, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[77, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[78, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[78, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[79, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[79, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[79, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[79, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[80, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[80, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[81, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[81, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[81, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[81, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[82, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[82, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[83, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[83, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[84, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[84, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[85, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[85, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[85, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[86, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[86, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[87, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[87, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[87, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[87, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[87, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[87, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[88, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[88, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[89, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[89, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[90, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[90, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[91, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[91, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[91, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[92, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[92, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[93, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[93, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[93, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[93, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[93, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[93, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[93, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[93, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[93, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[93, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[93, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[93, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[93, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[93, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[93, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[93, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[93, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[93, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[93, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[93, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[93, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[93, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[93, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[93, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[93, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[93, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[93, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[93, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[93, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[93, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[93, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[93, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[93, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[93, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[93, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[93, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[93, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[93, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[93, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[93, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[93, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[93, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[93, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[93, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[93, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[93, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[93, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[93, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[94, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[94, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[95, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[95, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[96, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[96, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[96, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[97, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[97, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[98, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[98, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[99, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[99, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[100, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[100, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[101, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[101, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[102, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[102, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[102, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[103, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[103, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[104, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[104, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[104, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[104, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[104, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[105, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[105, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[106, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[106, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[107, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[107, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[108, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[108, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[108, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[109, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[109, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[110, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[110, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[111, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[111, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[112, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[112, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[113, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[113, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[114, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[114, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[115, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[115, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[115, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[115, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[116, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[116, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[116, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[118, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[118, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[119, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[119, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[120, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[120, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[123, "ivy.gelu"], [642, "ivy.gelu"]], "gelu() (ivy.array method)": [[123, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[123, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[124, "ivy.hardswish"], [642, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[124, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[124, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[125, "ivy.leaky_relu"], [642, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[125, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[125, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[126, "ivy.log_softmax"], [642, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[126, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[126, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[127, "ivy.mish"], [642, "ivy.mish"]], "mish() (ivy.array method)": [[127, "ivy.Array.mish"]], "mish() (ivy.container method)": [[127, "ivy.Container.mish"]], "relu() (in module ivy)": [[128, "ivy.relu"], [642, "ivy.relu"]], "relu() (ivy.array method)": [[128, "ivy.Array.relu"]], "relu() (ivy.container method)": [[128, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[129, "ivy.sigmoid"], [642, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[129, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[129, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[130, "ivy.softmax"], [642, "ivy.softmax"]], "softmax() (ivy.array method)": [[130, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[130, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[131, "ivy.softplus"], [642, "ivy.softplus"]], "softplus() (ivy.array method)": [[131, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[131, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[132, "ivy.softsign"], [642, "ivy.softsign"]], "cmp_is() (in module ivy)": [[133, "ivy.cmp_is"], [644, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[134, "ivy.cmp_isnot"], [644, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[135, "ivy.for_loop"], [644, "ivy.for_loop"]], "if_else() (in module ivy)": [[136, "ivy.if_else"], [644, "ivy.if_else"]], "try_except() (in module ivy)": [[137, "ivy.try_except"], [644, "ivy.try_except"]], "while_loop() (in module ivy)": [[138, "ivy.while_loop"], [644, "ivy.while_loop"]], "arange() (in module ivy)": [[139, "ivy.arange"], [645, "ivy.arange"]], "array() (in module ivy)": [[140, "ivy.array"], [645, "ivy.array"]], "asarray() (in module ivy)": [[141, "ivy.asarray"], [645, "ivy.asarray"]], "asarray() (ivy.array method)": [[141, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[141, "ivy.Container.asarray"]], "complex() (in module ivy)": [[142, "ivy.complex"], [645, "ivy.complex"]], "copy_array() (in module ivy)": [[143, "ivy.copy_array"], [645, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[143, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[143, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[144, "ivy.empty"], [645, "ivy.empty"]], "empty_like() (in module ivy)": [[145, "ivy.empty_like"], [645, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[145, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[145, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[146, "ivy.eye"], [645, "ivy.eye"]], "from_dlpack() (in module ivy)": [[147, "ivy.from_dlpack"], [645, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[147, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[147, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[148, "ivy.frombuffer"], [645, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[148, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[149, "ivy.full"], [645, "ivy.full"]], "full_like() (in module ivy)": [[150, "ivy.full_like"], [645, "ivy.full_like"]], "full_like() (ivy.array method)": [[150, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[150, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[151, "ivy.linspace"], [645, "ivy.linspace"]], "linspace() (ivy.array method)": [[151, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[151, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[152, "ivy.logspace"], [645, "ivy.logspace"]], "logspace() (ivy.array method)": [[152, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[152, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[153, "ivy.meshgrid"], [645, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[153, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[153, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[154, "ivy.native_array"], [645, "ivy.native_array"]], "native_array() (ivy.array method)": [[154, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[154, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[155, "ivy.one_hot"], [645, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[155, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[155, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[156, "ivy.ones"], [645, "ivy.ones"]], "ones_like() (in module ivy)": [[157, "ivy.ones_like"], [645, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[157, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[157, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[158, "ivy.to_dlpack"], [645, "ivy.to_dlpack"]], "tril() (in module ivy)": [[159, "ivy.tril"], [645, "ivy.tril"]], "tril() (ivy.array method)": [[159, "ivy.Array.tril"]], "tril() (ivy.container method)": [[159, "ivy.Container.tril"]], "triu() (in module ivy)": [[160, "ivy.triu"], [645, "ivy.triu"]], "triu() (ivy.array method)": [[160, "ivy.Array.triu"]], "triu() (ivy.container method)": [[160, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[161, "ivy.triu_indices"], [645, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[161, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[162, "ivy.zeros"], [645, "ivy.zeros"]], "zeros_like() (in module ivy)": [[163, "ivy.zeros_like"], [645, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[163, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[163, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[164, "ivy.as_ivy_dtype"], [646, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[165, "ivy.as_native_dtype"], [646, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[166, "ivy.astype"], [646, "ivy.astype"]], "astype() (ivy.array method)": [[166, "ivy.Array.astype"]], "astype() (ivy.container method)": [[166, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[167, "ivy.broadcast_arrays"], [646, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[167, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[167, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[168, "ivy.broadcast_to"], [646, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[168, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[168, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[169, "ivy.can_cast"], [646, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[169, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[169, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[170, "ivy.check_float"], [646, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[171, "ivy.closest_valid_dtype"], [646, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[172, "ivy.default_complex_dtype"], [646, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[173, "ivy.default_dtype"], [646, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[174, "ivy.default_float_dtype"], [646, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[175, "ivy.default_int_dtype"], [646, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[176, "ivy.default_uint_dtype"], [646, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[177, "ivy.dtype"], [646, "ivy.dtype"]], "dtype() (ivy.array method)": [[177, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[177, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[178, "ivy.dtype_bits"], [646, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[179, "ivy.finfo"], [646, "ivy.finfo"]], "finfo() (ivy.array method)": [[179, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[179, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[180, "ivy.function_supported_dtypes"], [646, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[181, "ivy.function_unsupported_dtypes"], [646, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[182, "ivy.iinfo"], [646, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[182, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[182, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[183, "ivy.infer_default_dtype"], [646, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[184, "ivy.invalid_dtype"], [646, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[185, "ivy.is_bool_dtype"], [646, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[185, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[185, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[186, "ivy.is_complex_dtype"], [646, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[186, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[187, "ivy.is_float_dtype"], [646, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[187, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[187, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[188, "ivy.is_hashable_dtype"], [646, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[189, "ivy.is_int_dtype"], [646, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[189, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[189, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[190, "ivy.is_native_dtype"], [646, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[191, "ivy.is_uint_dtype"], [646, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[191, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[191, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[192, "ivy.promote_types"], [646, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[193, "ivy.promote_types_of_inputs"], [646, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[194, "ivy.result_type"], [646, "ivy.result_type"]], "result_type() (ivy.array method)": [[194, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[194, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[195, "ivy.set_default_complex_dtype"], [646, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[196, "ivy.set_default_dtype"], [646, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[197, "ivy.set_default_float_dtype"], [646, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[198, "ivy.set_default_int_dtype"], [646, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[199, "ivy.set_default_uint_dtype"], [646, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[200, "ivy.type_promote_arrays"], [646, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[201, "ivy.unset_default_complex_dtype"], [646, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[202, "ivy.unset_default_dtype"], [646, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[203, "ivy.unset_default_float_dtype"], [646, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[204, "ivy.unset_default_int_dtype"], [646, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[205, "ivy.unset_default_uint_dtype"], [646, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[206, "ivy.valid_dtype"], [646, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[207, "ivy.as_ivy_dev"], [647, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[208, "ivy.as_native_dev"], [647, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[209, "ivy.clear_cached_mem_on_dev"], [647, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[210, "ivy.default_device"], [647, "ivy.default_device"]], "dev() (in module ivy)": [[211, "ivy.dev"], [647, "ivy.dev"]], "dev() (ivy.array method)": [[211, "ivy.Array.dev"]], "dev() (ivy.container method)": [[211, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[212, "ivy.dev_util"], [647, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[213, "ivy.function_supported_devices"], [647, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[214, "ivy.function_unsupported_devices"], [647, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[215, "ivy.get_all_ivy_arrays_on_dev"], [647, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[216, "ivy.gpu_is_available"], [647, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[217, "ivy.handle_soft_device_variable"], [647, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[218, "ivy.num_cpu_cores"], [647, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[219, "ivy.num_gpus"], [647, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[220, "ivy.num_ivy_arrays_on_dev"], [647, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[221, "ivy.percent_used_mem_on_dev"], [647, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[222, "ivy.print_all_ivy_arrays_on_dev"], [647, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[223, "ivy.set_default_device"], [647, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[224, "ivy.set_soft_device_mode"], [647, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[225, "ivy.set_split_factor"], [647, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[226, "ivy.split_factor"], [647, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[227, "ivy.split_func_call"], [647, "ivy.split_func_call"]], "to_device() (in module ivy)": [[228, "ivy.to_device"], [647, "ivy.to_device"]], "to_device() (ivy.array method)": [[228, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[228, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[229, "ivy.total_mem_on_dev"], [647, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[230, "ivy.tpu_is_available"], [647, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[231, "ivy.unset_default_device"], [647, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[232, "ivy.unset_soft_device_mode"], [647, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[233, "ivy.used_mem_on_dev"], [647, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[234, "ivy.abs"], [648, "ivy.abs"]], "abs() (ivy.array method)": [[234, "ivy.Array.abs"]], "abs() (ivy.container method)": [[234, "ivy.Container.abs"]], "acos() (in module ivy)": [[235, "ivy.acos"], [648, "ivy.acos"]], "acos() (ivy.array method)": [[235, "ivy.Array.acos"]], "acos() (ivy.container method)": [[235, "ivy.Container.acos"]], "acosh() (in module ivy)": [[236, "ivy.acosh"], [648, "ivy.acosh"]], "acosh() (ivy.array method)": [[236, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[236, "ivy.Container.acosh"]], "add() (in module ivy)": [[237, "ivy.add"], [648, "ivy.add"]], "add() (ivy.array method)": [[237, "ivy.Array.add"]], "add() (ivy.container method)": [[237, "ivy.Container.add"]], "angle() (in module ivy)": [[238, "ivy.angle"], [648, "ivy.angle"]], "angle() (ivy.array method)": [[238, "ivy.Array.angle"]], "angle() (ivy.container method)": [[238, "ivy.Container.angle"]], "asin() (in module ivy)": [[239, "ivy.asin"], [648, "ivy.asin"]], "asin() (ivy.array method)": [[239, "ivy.Array.asin"]], "asin() (ivy.container method)": [[239, "ivy.Container.asin"]], "asinh() (in module ivy)": [[240, "ivy.asinh"], [648, "ivy.asinh"]], "asinh() (ivy.array method)": [[240, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[240, "ivy.Container.asinh"]], "atan() (in module ivy)": [[241, "ivy.atan"], [648, "ivy.atan"]], "atan() (ivy.array method)": [[241, "ivy.Array.atan"]], "atan() (ivy.container method)": [[241, "ivy.Container.atan"]], "atan2() (in module ivy)": [[242, "ivy.atan2"], [648, "ivy.atan2"]], "atan2() (ivy.array method)": [[242, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[242, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[243, "ivy.atanh"], [648, "ivy.atanh"]], "atanh() (ivy.array method)": [[243, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[243, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[244, "ivy.bitwise_and"], [648, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[244, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[244, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[245, "ivy.bitwise_invert"], [648, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[245, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[245, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[246, "ivy.bitwise_left_shift"], [648, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[246, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[246, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[247, "ivy.bitwise_or"], [648, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[247, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[247, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[248, "ivy.bitwise_right_shift"], [648, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[248, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[248, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[249, "ivy.bitwise_xor"], [648, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[249, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[249, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[250, "ivy.ceil"], [648, "ivy.ceil"]], "ceil() (ivy.array method)": [[250, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[250, "ivy.Container.ceil"]], "cos() (in module ivy)": [[251, "ivy.cos"], [648, "ivy.cos"]], "cos() (ivy.array method)": [[251, "ivy.Array.cos"]], "cos() (ivy.container method)": [[251, "ivy.Container.cos"]], "cosh() (in module ivy)": [[252, "ivy.cosh"], [648, "ivy.cosh"]], "cosh() (ivy.array method)": [[252, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[252, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[253, "ivy.deg2rad"], [648, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[253, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[253, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[254, "ivy.divide"], [648, "ivy.divide"]], "divide() (ivy.array method)": [[254, "ivy.Array.divide"]], "divide() (ivy.container method)": [[254, "ivy.Container.divide"]], "equal() (in module ivy)": [[255, "ivy.equal"], [648, "ivy.equal"]], "equal() (ivy.array method)": [[255, "ivy.Array.equal"]], "equal() (ivy.container method)": [[255, "ivy.Container.equal"]], "erf() (in module ivy)": [[256, "ivy.erf"], [648, "ivy.erf"]], "erf() (ivy.array method)": [[256, "ivy.Array.erf"]], "erf() (ivy.container method)": [[256, "ivy.Container.erf"]], "exp() (in module ivy)": [[257, "ivy.exp"], [648, "ivy.exp"]], "exp() (ivy.array method)": [[257, "ivy.Array.exp"]], "exp() (ivy.container method)": [[257, "ivy.Container.exp"]], "exp2() (in module ivy)": [[258, "ivy.exp2"], [648, "ivy.exp2"]], "exp2() (ivy.array method)": [[258, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[258, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[259, "ivy.expm1"], [648, "ivy.expm1"]], "expm1() (ivy.array method)": [[259, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[259, "ivy.Container.expm1"]], "floor() (in module ivy)": [[260, "ivy.floor"], [648, "ivy.floor"]], "floor() (ivy.array method)": [[260, "ivy.Array.floor"]], "floor() (ivy.container method)": [[260, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[261, "ivy.floor_divide"], [648, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[261, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[261, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[262, "ivy.fmin"], [648, "ivy.fmin"]], "fmin() (ivy.array method)": [[262, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[262, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[263, "ivy.fmod"], [648, "ivy.fmod"]], "fmod() (ivy.array method)": [[263, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[263, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[264, "ivy.gcd"], [648, "ivy.gcd"]], "gcd() (ivy.array method)": [[264, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[264, "ivy.Container.gcd"]], "greater() (in module ivy)": [[265, "ivy.greater"], [648, "ivy.greater"]], "greater() (ivy.array method)": [[265, "ivy.Array.greater"]], "greater() (ivy.container method)": [[265, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[266, "ivy.greater_equal"], [648, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[266, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[266, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[267, "ivy.imag"], [648, "ivy.imag"]], "imag() (ivy.array method)": [[267, "ivy.Array.imag"]], "imag() (ivy.container method)": [[267, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[268, "ivy.isfinite"], [648, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[268, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[268, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[269, "ivy.isinf"], [648, "ivy.isinf"]], "isinf() (ivy.array method)": [[269, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[269, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[270, "ivy.isnan"], [648, "ivy.isnan"]], "isnan() (ivy.array method)": [[270, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[270, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[271, "ivy.isreal"], [648, "ivy.isreal"]], "isreal() (ivy.array method)": [[271, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[271, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[272, "ivy.lcm"], [648, "ivy.lcm"]], "lcm() (ivy.array method)": [[272, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[272, "ivy.Container.lcm"]], "less() (in module ivy)": [[273, "ivy.less"], [648, "ivy.less"]], "less() (ivy.array method)": [[273, "ivy.Array.less"]], "less() (ivy.container method)": [[273, "ivy.Container.less"]], "less_equal() (in module ivy)": [[274, "ivy.less_equal"], [648, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[274, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[274, "ivy.Container.less_equal"]], "log() (in module ivy)": [[275, "ivy.log"], [648, "ivy.log"]], "log() (ivy.array method)": [[275, "ivy.Array.log"]], "log() (ivy.container method)": [[275, "ivy.Container.log"]], "log10() (in module ivy)": [[276, "ivy.log10"], [648, "ivy.log10"]], "log10() (ivy.array method)": [[276, "ivy.Array.log10"]], "log10() (ivy.container method)": [[276, "ivy.Container.log10"]], "log1p() (in module ivy)": [[277, "ivy.log1p"], [648, "ivy.log1p"]], "log1p() (ivy.array method)": [[277, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[277, "ivy.Container.log1p"]], "log2() (in module ivy)": [[278, "ivy.log2"], [648, "ivy.log2"]], "log2() (ivy.array method)": [[278, "ivy.Array.log2"]], "log2() (ivy.container method)": [[278, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[279, "ivy.logaddexp"], [648, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[279, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[279, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[280, "ivy.logaddexp2"], [648, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[280, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[280, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[281, "ivy.logical_and"], [648, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[281, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[281, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[282, "ivy.logical_not"], [648, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[282, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[282, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[283, "ivy.logical_or"], [648, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[283, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[283, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[284, "ivy.logical_xor"], [648, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[284, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[284, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[285, "ivy.maximum"], [648, "ivy.maximum"]], "maximum() (ivy.array method)": [[285, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[285, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[286, "ivy.minimum"], [648, "ivy.minimum"]], "minimum() (ivy.array method)": [[286, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[286, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[287, "ivy.multiply"], [648, "ivy.multiply"]], "multiply() (ivy.array method)": [[287, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[287, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[288, "ivy.nan_to_num"], [648, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[288, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[288, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[289, "ivy.negative"], [648, "ivy.negative"]], "negative() (ivy.array method)": [[289, "ivy.Array.negative"]], "negative() (ivy.container method)": [[289, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[290, "ivy.not_equal"], [648, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[290, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[290, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[291, "ivy.positive"], [648, "ivy.positive"]], "positive() (ivy.array method)": [[291, "ivy.Array.positive"]], "positive() (ivy.container method)": [[291, "ivy.Container.positive"]], "pow() (in module ivy)": [[292, "ivy.pow"], [648, "ivy.pow"]], "pow() (ivy.array method)": [[292, "ivy.Array.pow"]], "pow() (ivy.container method)": [[292, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[293, "ivy.rad2deg"], [648, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[293, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[293, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[294, "ivy.real"], [648, "ivy.real"]], "real() (ivy.array method)": [[294, "ivy.Array.real"]], "real() (ivy.container method)": [[294, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[295, "ivy.reciprocal"], [648, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[295, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[295, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[296, "ivy.remainder"], [648, "ivy.remainder"]], "remainder() (ivy.array method)": [[296, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[296, "ivy.Container.remainder"]], "round() (in module ivy)": [[297, "ivy.round"], [648, "ivy.round"]], "round() (ivy.array method)": [[297, "ivy.Array.round"]], "round() (ivy.container method)": [[297, "ivy.Container.round"]], "sign() (in module ivy)": [[298, "ivy.sign"], [648, "ivy.sign"]], "sign() (ivy.array method)": [[298, "ivy.Array.sign"]], "sign() (ivy.container method)": [[298, "ivy.Container.sign"]], "sin() (in module ivy)": [[299, "ivy.sin"], [648, "ivy.sin"]], "sin() (ivy.array method)": [[299, "ivy.Array.sin"]], "sin() (ivy.container method)": [[299, "ivy.Container.sin"]], "sinh() (in module ivy)": [[300, "ivy.sinh"], [648, "ivy.sinh"]], "sinh() (ivy.array method)": [[300, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[300, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[301, "ivy.sqrt"], [648, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[301, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[301, "ivy.Container.sqrt"]], "square() (in module ivy)": [[302, "ivy.square"], [648, "ivy.square"]], "square() (ivy.array method)": [[302, "ivy.Array.square"]], "square() (ivy.container method)": [[302, "ivy.Container.square"]], "subtract() (in module ivy)": [[303, "ivy.subtract"], [648, "ivy.subtract"]], "subtract() (ivy.array method)": [[303, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[303, "ivy.Container.subtract"]], "tan() (in module ivy)": [[304, "ivy.tan"], [648, "ivy.tan"]], "tan() (ivy.array method)": [[304, "ivy.Array.tan"]], "tan() (ivy.container method)": [[304, "ivy.Container.tan"]], "tanh() (in module ivy)": [[305, "ivy.tanh"], [648, "ivy.tanh"]], "tanh() (ivy.array method)": [[305, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[305, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[306, "ivy.trapz"], [648, "ivy.trapz"]], "trapz() (ivy.array method)": [[306, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[306, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[307, "ivy.trunc"], [648, "ivy.trunc"]], "trunc() (ivy.array method)": [[307, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[307, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[308, "ivy.trunc_divide"], [648, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[308, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[308, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[309, "ivy.celu"], [381, "ivy.celu"]], "celu() (ivy.array method)": [[309, "ivy.Array.celu"]], "celu() (ivy.container method)": [[309, "ivy.Container.celu"]], "elu() (in module ivy)": [[310, "ivy.elu"], [381, "ivy.elu"]], "elu() (ivy.array method)": [[310, "ivy.Array.elu"]], "elu() (ivy.container method)": [[310, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[311, "ivy.hardshrink"], [381, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[311, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[311, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[312, "ivy.hardsilu"], [381, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[312, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[312, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[313, "ivy.hardtanh"], [381, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[313, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[313, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[314, "ivy.logit"], [381, "ivy.logit"]], "logit() (ivy.array method)": [[314, "ivy.Array.logit"]], "logit() (ivy.container method)": [[314, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[315, "ivy.logsigmoid"], [381, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[315, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[315, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[316, "ivy.prelu"], [381, "ivy.prelu"]], "prelu() (ivy.array method)": [[316, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[316, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[317, "ivy.relu6"], [381, "ivy.relu6"]], "relu6() (ivy.array method)": [[317, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[317, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[318, "ivy.scaled_tanh"], [381, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[318, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[318, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[319, "ivy.selu"], [381, "ivy.selu"]], "selu() (ivy.array method)": [[319, "ivy.Array.selu"]], "selu() (ivy.container method)": [[319, "ivy.Container.selu"]], "silu() (in module ivy)": [[320, "ivy.silu"], [381, "ivy.silu"]], "silu() (ivy.array method)": [[320, "ivy.Array.silu"]], "silu() (ivy.container method)": [[320, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[321, "ivy.softshrink"], [381, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[321, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[321, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[322, "ivy.stanh"], [381, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[323, "ivy.tanhshrink"], [381, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[323, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[323, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[324, "ivy.threshold"], [381, "ivy.threshold"]], "threshold() (ivy.array method)": [[324, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[324, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[325, "ivy.thresholded_relu"], [381, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[325, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[325, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[326, "ivy.blackman_window"], [383, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[326, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[326, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[327, "ivy.eye_like"], [383, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[327, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[327, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[328, "ivy.hamming_window"], [383, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[328, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[329, "ivy.hann_window"], [383, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[329, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[330, "ivy.indices"], [383, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[331, "ivy.kaiser_bessel_derived_window"], [383, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[331, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[332, "ivy.kaiser_window"], [383, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[332, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[333, "ivy.mel_weight_matrix"], [383, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[333, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[333, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[334, "ivy.ndenumerate"], [383, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[335, "ivy.ndindex"], [383, "ivy.ndindex"]], "polyval() (in module ivy)": [[336, "ivy.polyval"], [383, "ivy.polyval"]], "polyval() (ivy.container method)": [[336, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[337, "ivy.random_cp"], [383, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[338, "ivy.random_parafac2"], [383, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[339, "ivy.random_tr"], [383, "ivy.random_tr"]], "random_tt() (in module ivy)": [[340, "ivy.random_tt"], [383, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[341, "ivy.random_tucker"], [383, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[342, "ivy.tril_indices"], [383, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[342, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[343, "ivy.trilu"], [383, "ivy.trilu"]], "trilu() (ivy.array method)": [[343, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[343, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[344, "ivy.unsorted_segment_mean"], [383, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[344, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[344, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[345, "ivy.unsorted_segment_min"], [383, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[345, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[345, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[346, "ivy.unsorted_segment_sum"], [383, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[346, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[346, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[347, "ivy.vorbis_window"], [383, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[347, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[348, "ivy.allclose"], [386, "ivy.allclose"]], "allclose() (ivy.array method)": [[348, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[348, "ivy.Container.allclose"]], "amax() (in module ivy)": [[349, "ivy.amax"], [386, "ivy.amax"]], "amax() (ivy.array method)": [[349, "ivy.Array.amax"]], "amax() (ivy.container method)": [[349, "ivy.Container.amax"]], "amin() (in module ivy)": [[350, "ivy.amin"], [386, "ivy.amin"]], "amin() (ivy.array method)": [[350, "ivy.Array.amin"]], "amin() (ivy.container method)": [[350, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[351, "ivy.binarizer"], [386, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[351, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[351, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[352, "ivy.conj"], [386, "ivy.conj"]], "conj() (ivy.array method)": [[352, "ivy.Array.conj"]], "conj() (ivy.container method)": [[352, "ivy.Container.conj"]], "copysign() (in module ivy)": [[353, "ivy.copysign"], [386, "ivy.copysign"]], "copysign() (ivy.array method)": [[353, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[353, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[354, "ivy.count_nonzero"], [386, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[354, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[354, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[355, "ivy.diff"], [386, "ivy.diff"]], "diff() (ivy.array method)": [[355, "ivy.Array.diff"]], "diff() (ivy.container method)": [[355, "ivy.Container.diff"]], "digamma() (in module ivy)": [[356, "ivy.digamma"], [386, "ivy.digamma"]], "digamma() (ivy.array method)": [[356, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[356, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[357, "ivy.erfc"], [386, "ivy.erfc"]], "erfc() (ivy.array method)": [[357, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[357, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[358, "ivy.erfinv"], [386, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[358, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[358, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[359, "ivy.fix"], [386, "ivy.fix"]], "fix() (ivy.array method)": [[359, "ivy.Array.fix"]], "fix() (ivy.container method)": [[359, "ivy.Container.fix"]], "float_power() (in module ivy)": [[360, "ivy.float_power"], [386, "ivy.float_power"]], "float_power() (ivy.array method)": [[360, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[360, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[361, "ivy.fmax"], [386, "ivy.fmax"]], "fmax() (ivy.array method)": [[361, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[361, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[362, "ivy.frexp"], [386, "ivy.frexp"]], "frexp() (ivy.array method)": [[362, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[362, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[363, "ivy.gradient"], [386, "ivy.gradient"]], "gradient() (ivy.array method)": [[363, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[363, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[364, "ivy.hypot"], [386, "ivy.hypot"]], "hypot() (ivy.array method)": [[364, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[364, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[365, "ivy.isclose"], [386, "ivy.isclose"]], "isclose() (ivy.array method)": [[365, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[365, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[366, "ivy.ldexp"], [386, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[366, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[366, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[367, "ivy.lerp"], [386, "ivy.lerp"]], "lerp() (ivy.array method)": [[367, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[367, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[368, "ivy.lgamma"], [386, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[368, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[368, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[369, "ivy.modf"], [386, "ivy.modf"]], "modf() (ivy.array method)": [[369, "ivy.Array.modf"]], "modf() (ivy.container method)": [[369, "ivy.Container.modf"]], "nansum() (in module ivy)": [[370, "ivy.nansum"], [386, "ivy.nansum"]], "nansum() (ivy.array method)": [[370, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[370, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[371, "ivy.nextafter"], [386, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[371, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[371, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[372, "ivy.signbit"], [386, "ivy.signbit"]], "signbit() (ivy.array method)": [[372, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[372, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[373, "ivy.sinc"], [386, "ivy.sinc"]], "sinc() (ivy.array method)": [[373, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[373, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[374, "ivy.sparsify_tensor"], [386, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[374, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[374, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[375, "ivy.xlogy"], [386, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[375, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[375, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[376, "ivy.zeta"], [386, "ivy.zeta"]], "zeta() (ivy.array method)": [[376, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[376, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[377, "ivy.reduce"], [387, "ivy.reduce"]], "reduce() (ivy.array method)": [[377, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[377, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[378, "ivy.bind_custom_gradient_function"], [388, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[379, "ivy.jvp"], [388, "ivy.jvp"]], "vjp() (in module ivy)": [[380, "ivy.vjp"], [388, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[381, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[382, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[383, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[384, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[385, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[386, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[387, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[388, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[389, "ivy.adaptive_avg_pool1d"], [403, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[389, "ivy.adaptive_avg_pool2d"], [404, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[389, "ivy.adaptive_max_pool2d"], [405, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[389, "ivy.adaptive_max_pool3d"], [406, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[389, "ivy.area_interpolate"], [407, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[389, "ivy.avg_pool1d"], [408, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[389, "ivy.avg_pool2d"], [409, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[389, "ivy.avg_pool3d"], [410, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[389, "ivy.dct"], [411, "ivy.dct"]], "dft() (in module ivy)": [[389, "ivy.dft"], [412, "ivy.dft"]], "dropout1d() (in module ivy)": [[389, "ivy.dropout1d"], [413, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[389, "ivy.dropout2d"], [414, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[389, "ivy.dropout3d"], [415, "ivy.dropout3d"]], "embedding() (in module ivy)": [[389, "ivy.embedding"], [416, "ivy.embedding"]], "fft() (in module ivy)": [[389, "ivy.fft"], [417, "ivy.fft"]], "fft2() (in module ivy)": [[389, "ivy.fft2"], [418, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[389, "ivy.generate_einsum_equation"], [419, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[389, "ivy.get_interpolate_kernel"], [420, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[389, "ivy.idct"], [421, "ivy.idct"]], "ifft() (in module ivy)": [[389, "ivy.ifft"], [422, "ivy.ifft"]], "ifftn() (in module ivy)": [[389, "ivy.ifftn"], [423, "ivy.ifftn"]], "interp() (in module ivy)": [[389, "ivy.interp"], [424, "ivy.interp"]], "interpolate() (in module ivy)": [[389, "ivy.interpolate"], [425, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[389, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[389, "ivy.max_pool1d"], [426, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[389, "ivy.max_pool2d"], [427, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[389, "ivy.max_pool3d"], [428, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[389, "ivy.max_unpool1d"], [429, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[389, "ivy.nearest_interpolate"], [430, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[389, "ivy.pool"], [431, "ivy.pool"]], "reduce_window() (in module ivy)": [[389, "ivy.reduce_window"], [432, "ivy.reduce_window"]], "rfft() (in module ivy)": [[389, "ivy.rfft"], [433, "ivy.rfft"]], "rfftn() (in module ivy)": [[389, "ivy.rfftn"], [434, "ivy.rfftn"]], "rnn() (in module ivy)": [[389, "ivy.rnn"], [435, "ivy.rnn"]], "sliding_window() (in module ivy)": [[389, "ivy.sliding_window"], [436, "ivy.sliding_window"]], "stft() (in module ivy)": [[389, "ivy.stft"], [437, "ivy.stft"]], "adjoint() (in module ivy)": [[390, "ivy.adjoint"], [438, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[390, "ivy.batched_outer"], [439, "ivy.batched_outer"]], "cond() (in module ivy)": [[390, "ivy.cond"], [440, "ivy.cond"]], "diagflat() (in module ivy)": [[390, "ivy.diagflat"], [441, "ivy.diagflat"]], "dot() (in module ivy)": [[390, "ivy.dot"], [442, "ivy.dot"]], "eig() (in module ivy)": [[390, "ivy.eig"], [443, "ivy.eig"], [653, "ivy.eig"], [688, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[390, "ivy.eigh_tridiagonal"], [444, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[390, "ivy.eigvals"], [445, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[390, "ivy.general_inner_product"], [446, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[390, "ivy.higher_order_moment"], [447, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[390, "ivy.initialize_tucker"], [448, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[390, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[390, "ivy.khatri_rao"], [449, "ivy.khatri_rao"]], "kron() (in module ivy)": [[390, "ivy.kron"], [450, "ivy.kron"]], "kronecker() (in module ivy)": [[390, "ivy.kronecker"], [451, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[390, "ivy.lu_factor"], [452, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[390, "ivy.lu_solve"], [453, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[390, "ivy.make_svd_non_negative"], [454, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[390, "ivy.matrix_exp"], [455, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[390, "ivy.mode_dot"], [456, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[390, "ivy.multi_dot"], [457, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[390, "ivy.multi_mode_dot"], [458, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[390, "ivy.partial_tucker"], [459, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[390, "ivy.solve_triangular"], [460, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[390, "ivy.svd_flip"], [461, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[390, "ivy.tensor_train"], [462, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[390, "ivy.truncated_svd"], [463, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[390, "ivy.tt_matrix_to_tensor"], [464, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[390, "ivy.tucker"], [465, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[391, "ivy.hinge_embedding_loss"], [466, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[391, "ivy.huber_loss"], [467, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[391, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[391, "ivy.kl_div"], [468, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[391, "ivy.l1_loss"], [469, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[391, "ivy.log_poisson_loss"], [470, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[391, "ivy.poisson_nll_loss"], [471, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[391, "ivy.smooth_l1_loss"], [472, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[391, "ivy.soft_margin_loss"], [473, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[392, "ivy.as_strided"], [474, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[392, "ivy.associative_scan"], [475, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[392, "ivy.atleast_1d"], [476, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[392, "ivy.atleast_2d"], [477, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[392, "ivy.atleast_3d"], [478, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[392, "ivy.broadcast_shapes"], [479, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[392, "ivy.check_scalar"], [480, "ivy.check_scalar"]], "choose() (in module ivy)": [[392, "ivy.choose"], [481, "ivy.choose"]], "column_stack() (in module ivy)": [[392, "ivy.column_stack"], [482, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[392, "ivy.concat_from_sequence"], [483, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[392, "ivy.dsplit"], [484, "ivy.dsplit"]], "dstack() (in module ivy)": [[392, "ivy.dstack"], [485, "ivy.dstack"]], "expand() (in module ivy)": [[392, "ivy.expand"], [486, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[392, "ivy.fill_diagonal"], [487, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[392, "ivy.flatten"], [488, "ivy.flatten"]], "fliplr() (in module ivy)": [[392, "ivy.fliplr"], [489, "ivy.fliplr"]], "flipud() (in module ivy)": [[392, "ivy.flipud"], [490, "ivy.flipud"]], "fold() (in module ivy)": [[392, "ivy.fold"], [491, "ivy.fold"]], "heaviside() (in module ivy)": [[392, "ivy.heaviside"], [492, "ivy.heaviside"]], "hsplit() (in module ivy)": [[392, "ivy.hsplit"], [493, "ivy.hsplit"]], "hstack() (in module ivy)": [[392, "ivy.hstack"], [494, "ivy.hstack"]], "i0() (in module ivy)": [[392, "ivy.i0"], [495, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[392, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[392, "ivy.matricize"], [496, "ivy.matricize"]], "moveaxis() (in module ivy)": [[392, "ivy.moveaxis"], [497, "ivy.moveaxis"]], "pad() (in module ivy)": [[392, "ivy.pad"], [498, "ivy.pad"]], "pad_sequence() (in module ivy)": [[392, "ivy.pad_sequence"], [499, "ivy.pad_sequence"]], "partial_fold() (in module ivy)": [[392, "ivy.partial_fold"], [500, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[392, "ivy.partial_tensor_to_vec"], [501, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[392, "ivy.partial_unfold"], [502, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[392, "ivy.partial_vec_to_tensor"], [503, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[392, "ivy.put_along_axis"], [504, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[392, "ivy.rot90"], [505, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[392, "ivy.soft_thresholding"], [506, "ivy.soft_thresholding"]], "take() (in module ivy)": [[392, "ivy.take"], [507, "ivy.take"]], "take_along_axis() (in module ivy)": [[392, "ivy.take_along_axis"], [508, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[392, "ivy.top_k"], [509, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[392, "ivy.trim_zeros"], [510, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[392, "ivy.unflatten"], [511, "ivy.unflatten"]], "unfold() (in module ivy)": [[392, "ivy.unfold"], [512, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[392, "ivy.unique_consecutive"], [513, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[392, "ivy.vsplit"], [514, "ivy.vsplit"]], "vstack() (in module ivy)": [[392, "ivy.vstack"], [515, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[393, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[394, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[395, "ivy.batch_norm"], [516, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[395, "ivy.group_norm"], [517, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[395, "ivy.instance_norm"], [518, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[395, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[395, "ivy.l1_normalize"], [519, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[395, "ivy.l2_normalize"], [520, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[395, "ivy.local_response_norm"], [521, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[395, "ivy.lp_normalize"], [522, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[396, "ivy.bernoulli"], [523, "ivy.bernoulli"]], "beta() (in module ivy)": [[396, "ivy.beta"], [524, "ivy.beta"]], "dirichlet() (in module ivy)": [[396, "ivy.dirichlet"], [525, "ivy.dirichlet"]], "gamma() (in module ivy)": [[396, "ivy.gamma"], [526, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[396, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[396, "ivy.poisson"], [527, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[397, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[397, "ivy.unravel_index"], [528, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[398, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[399, "ivy.invert_permutation"], [529, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[399, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[399, "ivy.lexsort"], [530, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[400, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[400, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[400, "ivy.is_ivy_sparse_array"], [531, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[400, "ivy.is_native_sparse_array"], [532, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[400, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[400, "ivy.native_sparse_array"], [533, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[400, "ivy.native_sparse_array_to_indices_values_and_shape"], [534, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[401, "ivy.bincount"], [535, "ivy.bincount"]], "corrcoef() (in module ivy)": [[401, "ivy.corrcoef"], [536, "ivy.corrcoef"]], "cov() (in module ivy)": [[401, "ivy.cov"], [537, "ivy.cov"]], "cummax() (in module ivy)": [[401, "ivy.cummax"], [538, "ivy.cummax"]], "cummin() (in module ivy)": [[401, "ivy.cummin"], [539, "ivy.cummin"]], "histogram() (in module ivy)": [[401, "ivy.histogram"], [540, "ivy.histogram"]], "igamma() (in module ivy)": [[401, "ivy.igamma"], [541, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[401, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[401, "ivy.median"], [542, "ivy.median"]], "nanmean() (in module ivy)": [[401, "ivy.nanmean"], [543, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[401, "ivy.nanmedian"], [544, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[401, "ivy.nanmin"], [545, "ivy.nanmin"]], "nanprod() (in module ivy)": [[401, "ivy.nanprod"], [546, "ivy.nanprod"]], "quantile() (in module ivy)": [[401, "ivy.quantile"], [547, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[402, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[402, "ivy.optional_get_element"], [548, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[403, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[403, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[404, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[404, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[405, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[405, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[406, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[406, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[408, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[408, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[409, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[409, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[410, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[410, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[411, "ivy.Array.dct"]], "dct() (ivy.container method)": [[411, "ivy.Container.dct"]], "dft() (ivy.array method)": [[412, "ivy.Array.dft"]], "dft() (ivy.container method)": [[412, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[413, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[413, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[414, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[414, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[415, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[415, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[416, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[416, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[417, "ivy.Array.fft"]], "fft() (ivy.container method)": [[417, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[418, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[421, "ivy.Array.idct"]], "idct() (ivy.container method)": [[421, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[422, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[422, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[423, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[423, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[425, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[425, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[426, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[426, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[427, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[427, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[428, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[428, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[429, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[429, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[432, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[432, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[433, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[433, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[434, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[434, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[436, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[436, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[437, "ivy.Array.stft"]], "stft() (ivy.container method)": [[437, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[438, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[438, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[439, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[439, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[440, "ivy.Array.cond"]], "cond() (ivy.container method)": [[440, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[441, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[441, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[442, "ivy.Array.dot"]], "dot() (ivy.container method)": [[442, "ivy.Container.dot"]], "eig() (ivy.array method)": [[443, "ivy.Array.eig"], [688, "ivy.Array.eig"]], "eig() (ivy.container method)": [[443, "ivy.Container.eig"], [688, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[444, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[444, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[445, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[445, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[446, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[446, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[447, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[447, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[448, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[448, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[450, "ivy.Array.kron"]], "kron() (ivy.container method)": [[450, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[454, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[454, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[455, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[455, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[456, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[456, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[457, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[457, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[458, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[458, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[459, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[459, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[461, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[461, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[462, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[462, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[463, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[463, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[464, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[464, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[465, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[465, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[466, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[466, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[467, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[467, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[468, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[468, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[469, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[469, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[470, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[470, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[471, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[471, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[472, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[472, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[473, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[473, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[474, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[474, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[475, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[475, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[476, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[476, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[477, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[477, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[478, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[478, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[479, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[482, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[482, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[483, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[483, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[484, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[484, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[485, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[485, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[486, "ivy.Array.expand"]], "expand() (ivy.container method)": [[486, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[487, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[487, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[488, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[488, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[489, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[489, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[490, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[490, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[491, "ivy.Array.fold"]], "fold() (ivy.container method)": [[491, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[492, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[492, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[493, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[493, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[494, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[494, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[495, "ivy.Array.i0"]], "i0() (ivy.container method)": [[495, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[496, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[496, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[497, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[497, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[498, "ivy.Array.pad"]], "pad() (ivy.container method)": [[498, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[500, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[500, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[501, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[501, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[502, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[502, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[503, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[503, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[504, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[504, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[505, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[505, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[506, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[506, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[507, "ivy.Array.take"]], "take() (ivy.container method)": [[507, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[508, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[508, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[509, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[509, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[510, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[510, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[511, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[511, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[512, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[512, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[513, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[513, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[514, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[514, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[515, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[515, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[516, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[516, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[517, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[517, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[518, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[518, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[519, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[519, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[520, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[520, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[522, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[522, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[523, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[523, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[524, "ivy.Array.beta"]], "beta() (ivy.container method)": [[524, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[525, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[525, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[526, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[526, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[527, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[527, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[528, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[528, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[529, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[530, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[530, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[535, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[535, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[536, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[536, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[537, "ivy.Array.cov"]], "cov() (ivy.container method)": [[537, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[538, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[538, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[539, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[539, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[540, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[540, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[541, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[541, "ivy.Container.igamma"]], "median() (ivy.array method)": [[542, "ivy.Array.median"]], "median() (ivy.container method)": [[542, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[543, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[543, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[544, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[544, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[545, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[545, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[546, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[546, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[547, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[547, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[548, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[548, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[549, "ivy.all_equal"], [650, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[549, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[549, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[550, "ivy.arg_info"], [650, "ivy.arg_info"]], "arg_names() (in module ivy)": [[551, "ivy.arg_names"], [650, "ivy.arg_names"]], "array_equal() (in module ivy)": [[552, "ivy.array_equal"], [650, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[552, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[552, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[553, "ivy.assert_supports_inplace"], [650, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[553, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[553, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[554, "ivy.cache_fn"], [650, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[555, "ivy.clip_matrix_norm"], [650, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[555, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[555, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[556, "ivy.clip_vector_norm"], [650, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[556, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[556, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[557, "ivy.container_types"], [650, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[558, "ivy.current_backend_str"], [650, "ivy.current_backend_str"]], "default() (in module ivy)": [[559, "ivy.default"], [650, "ivy.default"]], "default() (ivy.array method)": [[559, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[560, "ivy.einops_rearrange"], [650, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[560, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[560, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[561, "ivy.einops_reduce"], [650, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[561, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[561, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[562, "ivy.einops_repeat"], [650, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[562, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[562, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[563, "ivy.exists"], [650, "ivy.exists"]], "exists() (ivy.array method)": [[563, "ivy.Array.exists"]], "exists() (ivy.container method)": [[563, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[564, "ivy.fourier_encode"], [650, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[564, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[564, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[565, "ivy.function_supported_devices_and_dtypes"], [650, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[566, "ivy.function_unsupported_devices_and_dtypes"], [650, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[567, "ivy.gather"], [650, "ivy.gather"]], "gather() (ivy.array method)": [[567, "ivy.Array.gather"]], "gather() (ivy.container method)": [[567, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[568, "ivy.gather_nd"], [650, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[568, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[568, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[569, "ivy.get_all_arrays_in_memory"], [650, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[570, "ivy.get_item"], [650, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[571, "ivy.get_num_dims"], [650, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[571, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[571, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[572, "ivy.get_referrers_recursive"], [650, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[573, "ivy.has_nans"], [650, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[573, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[573, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[574, "ivy.inplace_arrays_supported"], [650, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[575, "ivy.inplace_decrement"], [650, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[575, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[575, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[576, "ivy.inplace_increment"], [650, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[576, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[576, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[577, "ivy.inplace_update"], [650, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[577, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[577, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[578, "ivy.inplace_variables_supported"], [650, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[579, "ivy.is_array"], [650, "ivy.is_array"]], "is_array() (ivy.array method)": [[579, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[579, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[580, "ivy.is_ivy_array"], [650, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[580, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[580, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[581, "ivy.is_ivy_container"], [650, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[581, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[582, "ivy.is_ivy_nested_array"], [650, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[583, "ivy.is_native_array"], [650, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[583, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[583, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[584, "ivy.isin"], [650, "ivy.isin"]], "isin() (ivy.array method)": [[584, "ivy.Array.isin"]], "isin() (ivy.container method)": [[584, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[585, "ivy.isscalar"], [650, "ivy.isscalar"]], "itemsize() (in module ivy)": [[586, "ivy.itemsize"], [650, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[586, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[586, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[587, "ivy.match_kwargs"], [650, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[588, "ivy.multiprocessing"], [650, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[589, "ivy.num_arrays_in_memory"], [650, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[590, "ivy.print_all_arrays_in_memory"], [650, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[591, "ivy.scatter_flat"], [650, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[591, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[591, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[592, "ivy.scatter_nd"], [650, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[592, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[592, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[593, "ivy.set_array_mode"], [650, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[594, "ivy.set_exception_trace_mode"], [650, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[595, "ivy.set_inplace_mode"], [650, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[596, "ivy.set_item"], [650, "ivy.set_item"]], "set_min_base() (in module ivy)": [[597, "ivy.set_min_base"], [650, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[598, "ivy.set_min_denominator"], [650, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[599, "ivy.set_nestable_mode"], [650, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[600, "ivy.set_precise_mode"], [650, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[601, "ivy.set_queue_timeout"], [650, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[602, "ivy.set_shape_array_mode"], [650, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[603, "ivy.set_show_func_wrapper_trace_mode"], [650, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[604, "ivy.set_tmp_dir"], [650, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[605, "ivy.shape"], [650, "ivy.shape"]], "shape() (ivy.array method)": [[605, "ivy.Array.shape"]], "size() (in module ivy)": [[606, "ivy.size"], [650, "ivy.size"]], "size() (ivy.array method)": [[606, "ivy.Array.size"]], "size() (ivy.container method)": [[606, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[607, "ivy.stable_divide"], [650, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[607, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[607, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[608, "ivy.stable_pow"], [650, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[608, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[608, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[609, "ivy.strides"], [650, "ivy.strides"]], "strides() (ivy.array method)": [[609, "ivy.Array.strides"]], "strides() (ivy.container method)": [[609, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[610, "ivy.supports_inplace_updates"], [650, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[610, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[610, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[611, "ivy.to_ivy_shape"], [650, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[612, "ivy.to_list"], [650, "ivy.to_list"]], "to_list() (ivy.array method)": [[612, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[612, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[613, "ivy.to_native_shape"], [650, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[614, "ivy.to_numpy"], [650, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[614, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[614, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[615, "ivy.to_scalar"], [650, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[615, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[615, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[616, "ivy.try_else_none"], [650, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[617, "ivy.unset_array_mode"], [650, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[618, "ivy.unset_exception_trace_mode"], [650, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[619, "ivy.unset_inplace_mode"], [650, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[620, "ivy.unset_min_base"], [650, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[621, "ivy.unset_min_denominator"], [650, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[622, "ivy.unset_nestable_mode"], [650, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[623, "ivy.unset_precise_mode"], [650, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[624, "ivy.unset_queue_timeout"], [650, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[625, "ivy.unset_shape_array_mode"], [650, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[626, "ivy.unset_show_func_wrapper_trace_mode"], [650, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[627, "ivy.unset_tmp_dir"], [650, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[628, "ivy.value_is_nan"], [650, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[628, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[628, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[629, "ivy.vmap"], [650, "ivy.vmap"]], "adam_step() (in module ivy)": [[630, "ivy.adam_step"], [651, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[630, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[630, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[631, "ivy.adam_update"], [651, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[631, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[631, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[632, "ivy.execute_with_gradients"], [651, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[633, "ivy.grad"], [651, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[634, "ivy.gradient_descent_update"], [651, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[634, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[634, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[635, "ivy.jac"], [651, "ivy.jac"]], "lamb_update() (in module ivy)": [[636, "ivy.lamb_update"], [651, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[636, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[636, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[637, "ivy.lars_update"], [651, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[637, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[637, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[638, "ivy.optimizer_update"], [651, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[638, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[638, "ivy.Container.optimizer_update"]], "requires_gradient() (in module ivy)": [[639, "ivy.requires_gradient"], [651, "ivy.requires_gradient"]], "stop_gradient() (in module ivy)": [[640, "ivy.stop_gradient"], [651, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[640, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[640, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[641, "ivy.value_and_grad"], [651, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[642, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[643, "ivy.e"]], "inf (in module ivy)": [[643, "ivy.inf"]], "ivy.functional.ivy.constants": [[643, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[643, "ivy.nan"]], "newaxis (in module ivy)": [[643, "ivy.newaxis"]], "pi (in module ivy)": [[643, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[644, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[645, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[645, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[646, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[646, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[646, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[646, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[646, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[646, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[647, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[647, "ivy.Profiler"]], "ivy.functional.ivy.device": [[647, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[648, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[649, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[650, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[650, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[650, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[651, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[652, "ivy.conv"], [665, "ivy.conv"]], "conv1d() (in module ivy)": [[652, "ivy.conv1d"], [666, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[652, "ivy.conv1d_transpose"], [667, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[652, "ivy.conv2d"], [668, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[652, "ivy.conv2d_transpose"], [669, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[652, "ivy.conv3d"], [670, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[652, "ivy.conv3d_transpose"], [671, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[652, "ivy.conv_general_dilated"], [672, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[652, "ivy.conv_general_transpose"], [673, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[652, "ivy.depthwise_conv2d"], [674, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[652, "ivy.dropout"], [675, "ivy.dropout"]], "ivy.functional.ivy.layers": [[652, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[652, "ivy.linear"], [676, "ivy.linear"]], "lstm() (in module ivy)": [[652, "ivy.lstm"], [677, "ivy.lstm"]], "lstm_update() (in module ivy)": [[652, "ivy.lstm_update"], [678, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[652, "ivy.multi_head_attention"], [679, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[652, "ivy.nms"], [680, "ivy.nms"]], "roi_align() (in module ivy)": [[652, "ivy.roi_align"], [681, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[652, "ivy.scaled_dot_product_attention"], [682, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[653, "ivy.cholesky"], [683, "ivy.cholesky"]], "cross() (in module ivy)": [[653, "ivy.cross"], [684, "ivy.cross"]], "det() (in module ivy)": [[653, "ivy.det"], [685, "ivy.det"]], "diag() (in module ivy)": [[653, "ivy.diag"], [686, "ivy.diag"]], "diagonal() (in module ivy)": [[653, "ivy.diagonal"], [687, "ivy.diagonal"]], "eigh() (in module ivy)": [[653, "ivy.eigh"], [689, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[653, "ivy.eigvalsh"], [690, "ivy.eigvalsh"]], "inner() (in module ivy)": [[653, "ivy.inner"], [691, "ivy.inner"]], "inv() (in module ivy)": [[653, "ivy.inv"], [692, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[653, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[653, "ivy.matmul"], [693, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[653, "ivy.matrix_norm"], [694, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[653, "ivy.matrix_power"], [695, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[653, "ivy.matrix_rank"], [696, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[653, "ivy.matrix_transpose"], [697, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[653, "ivy.outer"], [698, "ivy.outer"]], "pinv() (in module ivy)": [[653, "ivy.pinv"], [699, "ivy.pinv"]], "qr() (in module ivy)": [[653, "ivy.qr"], [700, "ivy.qr"]], "slogdet() (in module ivy)": [[653, "ivy.slogdet"], [701, "ivy.slogdet"]], "solve() (in module ivy)": [[653, "ivy.solve"], [702, "ivy.solve"]], "svd() (in module ivy)": [[653, "ivy.svd"], [703, "ivy.svd"]], "svdvals() (in module ivy)": [[653, "ivy.svdvals"], [704, "ivy.svdvals"]], "tensordot() (in module ivy)": [[653, "ivy.tensordot"], [705, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[653, "ivy.tensorsolve"], [706, "ivy.tensorsolve"]], "trace() (in module ivy)": [[653, "ivy.trace"], [707, "ivy.trace"]], "vander() (in module ivy)": [[653, "ivy.vander"], [708, "ivy.vander"]], "vecdot() (in module ivy)": [[653, "ivy.vecdot"], [709, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[653, "ivy.vector_norm"], [710, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[653, "ivy.vector_to_skew_symmetric_matrix"], [711, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[654, "ivy.binary_cross_entropy"], [712, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[654, "ivy.cross_entropy"], [713, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[654, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[654, "ivy.sparse_cross_entropy"], [714, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[654, "ivy.ssim_loss"], [715, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[654, "ivy.wasserstein_loss_discriminator"], [716, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[654, "ivy.wasserstein_loss_generator"], [717, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[655, "ivy.clip"], [718, "ivy.clip"]], "concat() (in module ivy)": [[655, "ivy.concat"], [719, "ivy.concat"]], "constant_pad() (in module ivy)": [[655, "ivy.constant_pad"], [720, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[655, "ivy.expand_dims"], [721, "ivy.expand_dims"]], "flip() (in module ivy)": [[655, "ivy.flip"], [722, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[655, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[655, "ivy.permute_dims"], [723, "ivy.permute_dims"]], "repeat() (in module ivy)": [[655, "ivy.repeat"], [724, "ivy.repeat"]], "reshape() (in module ivy)": [[655, "ivy.reshape"], [725, "ivy.reshape"]], "roll() (in module ivy)": [[655, "ivy.roll"], [726, "ivy.roll"]], "split() (in module ivy)": [[655, "ivy.split"], [727, "ivy.split"]], "squeeze() (in module ivy)": [[655, "ivy.squeeze"], [728, "ivy.squeeze"]], "stack() (in module ivy)": [[655, "ivy.stack"], [729, "ivy.stack"]], "swapaxes() (in module ivy)": [[655, "ivy.swapaxes"], [730, "ivy.swapaxes"]], "tile() (in module ivy)": [[655, "ivy.tile"], [731, "ivy.tile"]], "unstack() (in module ivy)": [[655, "ivy.unstack"], [732, "ivy.unstack"]], "zero_pad() (in module ivy)": [[655, "ivy.zero_pad"], [733, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[656, "ivy.fomaml_step"], [734, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[656, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[656, "ivy.maml_step"], [735, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[656, "ivy.reptile_step"], [736, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[657, "ivy.all_nested_indices"], [737, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[657, "ivy.copy_nest"], [738, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[657, "ivy.duplicate_array_index_chains"], [739, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[657, "ivy.index_nest"], [740, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[657, "ivy.insert_into_nest_at_index"], [741, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[657, "ivy.insert_into_nest_at_indices"], [742, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[657, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[657, "ivy.map"], [743, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[657, "ivy.map_nest_at_index"], [744, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[657, "ivy.map_nest_at_indices"], [745, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[657, "ivy.multi_index_nest"], [746, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[657, "ivy.nested_any"], [747, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[657, "ivy.nested_argwhere"], [748, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[657, "ivy.nested_map"], [749, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[657, "ivy.nested_multi_map"], [750, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[657, "ivy.prune_empty"], [751, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[657, "ivy.prune_nest_at_index"], [752, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[657, "ivy.prune_nest_at_indices"], [753, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[657, "ivy.set_nest_at_index"], [754, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[657, "ivy.set_nest_at_indices"], [755, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[658, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[658, "ivy.layer_norm"], [756, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[659, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[659, "ivy.multinomial"], [757, "ivy.multinomial"]], "randint() (in module ivy)": [[659, "ivy.randint"], [758, "ivy.randint"]], "random_normal() (in module ivy)": [[659, "ivy.random_normal"], [759, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[659, "ivy.random_uniform"], [760, "ivy.random_uniform"]], "seed() (in module ivy)": [[659, "ivy.seed"], [761, "ivy.seed"]], "shuffle() (in module ivy)": [[659, "ivy.shuffle"], [762, "ivy.shuffle"]], "argmax() (in module ivy)": [[660, "ivy.argmax"], [763, "ivy.argmax"]], "argmin() (in module ivy)": [[660, "ivy.argmin"], [764, "ivy.argmin"]], "argwhere() (in module ivy)": [[660, "ivy.argwhere"], [765, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[660, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[660, "ivy.nonzero"], [766, "ivy.nonzero"]], "where() (in module ivy)": [[660, "ivy.where"], [767, "ivy.where"]], "ivy.functional.ivy.set": [[661, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[661, "ivy.unique_all"], [768, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[661, "ivy.unique_counts"], [769, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[661, "ivy.unique_inverse"], [770, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[661, "ivy.unique_values"], [771, "ivy.unique_values"]], "argsort() (in module ivy)": [[662, "ivy.argsort"], [772, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[662, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[662, "ivy.msort"], [773, "ivy.msort"]], "searchsorted() (in module ivy)": [[662, "ivy.searchsorted"], [774, "ivy.searchsorted"]], "sort() (in module ivy)": [[662, "ivy.sort"], [775, "ivy.sort"]], "cumprod() (in module ivy)": [[663, "ivy.cumprod"], [776, "ivy.cumprod"]], "cumsum() (in module ivy)": [[663, "ivy.cumsum"], [777, "ivy.cumsum"]], "einsum() (in module ivy)": [[663, "ivy.einsum"], [778, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[663, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[663, "ivy.max"], [779, "ivy.max"]], "mean() (in module ivy)": [[663, "ivy.mean"], [780, "ivy.mean"]], "min() (in module ivy)": [[663, "ivy.min"], [781, "ivy.min"]], "prod() (in module ivy)": [[663, "ivy.prod"], [782, "ivy.prod"]], "std() (in module ivy)": [[663, "ivy.std"], [783, "ivy.std"]], "sum() (in module ivy)": [[663, "ivy.sum"], [784, "ivy.sum"]], "var() (in module ivy)": [[663, "ivy.var"], [785, "ivy.var"]], "all() (in module ivy)": [[664, "ivy.all"], [786, "ivy.all"]], "any() (in module ivy)": [[664, "ivy.any"], [787, "ivy.any"]], "ivy.functional.ivy.utility": [[664, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[664, "ivy.load"], [788, "ivy.load"]], "save() (in module ivy)": [[664, "ivy.save"], [789, "ivy.save"]], "conv1d() (ivy.array method)": [[666, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[666, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[667, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[667, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[668, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[668, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[669, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[669, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[670, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[670, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[671, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[671, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[674, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[674, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[675, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[675, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[676, "ivy.Array.linear"]], "linear() (ivy.container method)": [[676, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[678, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[678, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[679, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[679, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[682, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[682, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[683, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[683, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[684, "ivy.Array.cross"]], "cross() (ivy.container method)": [[684, "ivy.Container.cross"]], "det() (ivy.array method)": [[685, "ivy.Array.det"]], "det() (ivy.container method)": [[685, "ivy.Container.det"]], "diag() (ivy.array method)": [[686, "ivy.Array.diag"]], "diag() (ivy.container method)": [[686, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[687, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[687, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[689, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[689, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[690, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[690, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[691, "ivy.Array.inner"]], "inner() (ivy.container method)": [[691, "ivy.Container.inner"]], "inv() (ivy.array method)": [[692, "ivy.Array.inv"]], "inv() (ivy.container method)": [[692, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[693, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[693, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[694, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[694, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[695, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[695, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[696, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[696, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[697, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[697, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[698, "ivy.Array.outer"]], "outer() (ivy.container method)": [[698, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[699, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[699, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[700, "ivy.Array.qr"]], "qr() (ivy.container method)": [[700, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[701, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[701, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[702, "ivy.Array.solve"]], "solve() (ivy.container method)": [[702, "ivy.Container.solve"]], "svd() (ivy.array method)": [[703, "ivy.Array.svd"]], "svd() (ivy.container method)": [[703, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[704, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[704, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[705, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[705, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[706, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[706, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[707, "ivy.Array.trace"]], "trace() (ivy.container method)": [[707, "ivy.Container.trace"]], "vander() (ivy.array method)": [[708, "ivy.Array.vander"]], "vander() (ivy.container method)": [[708, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[709, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[709, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[710, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[710, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[711, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[711, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[712, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[712, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[713, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[713, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[714, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[714, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[718, "ivy.Array.clip"]], "clip() (ivy.container method)": [[718, "ivy.Container.clip"]], "concat() (ivy.array method)": [[719, "ivy.Array.concat"]], "concat() (ivy.container method)": [[719, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[720, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[720, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[721, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[721, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[722, "ivy.Array.flip"]], "flip() (ivy.container method)": [[722, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[723, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[723, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[724, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[724, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[725, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[725, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[726, "ivy.Array.roll"]], "roll() (ivy.container method)": [[726, "ivy.Container.roll"]], "split() (ivy.array method)": [[727, "ivy.Array.split"]], "split() (ivy.container method)": [[727, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[728, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[728, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[729, "ivy.Array.stack"]], "stack() (ivy.container method)": [[729, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[730, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[730, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[731, "ivy.Array.tile"]], "tile() (ivy.container method)": [[731, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[732, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[732, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[733, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[733, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[756, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[756, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[757, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[757, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[758, "ivy.Array.randint"]], "randint() (ivy.container method)": [[758, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[759, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[759, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[760, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[760, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[762, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[762, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[763, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[763, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[764, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[764, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[765, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[765, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[766, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[766, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[767, "ivy.Array.where"]], "where() (ivy.container method)": [[767, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[768, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[768, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[769, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[769, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[770, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[770, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[771, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[771, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[772, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[772, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[773, "ivy.Array.msort"]], "msort() (ivy.container method)": [[773, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[774, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[774, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[775, "ivy.Array.sort"]], "sort() (ivy.container method)": [[775, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[776, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[776, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[777, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[777, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[778, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[778, "ivy.Container.einsum"]], "max() (ivy.array method)": [[779, "ivy.Array.max"]], "max() (ivy.container method)": [[779, "ivy.Container.max"]], "mean() (ivy.array method)": [[780, "ivy.Array.mean"]], "mean() (ivy.container method)": [[780, "ivy.Container.mean"]], "min() (ivy.array method)": [[781, "ivy.Array.min"]], "min() (ivy.container method)": [[781, "ivy.Container.min"]], "prod() (ivy.array method)": [[782, "ivy.Array.prod"]], "prod() (ivy.container method)": [[782, "ivy.Container.prod"]], "std() (ivy.array method)": [[783, "ivy.Array.std"]], "std() (ivy.container method)": [[783, "ivy.Container.std"]], "sum() (ivy.array method)": [[784, "ivy.Array.sum"]], "sum() (ivy.container method)": [[784, "ivy.Container.sum"]], "var() (ivy.array method)": [[785, "ivy.Array.var"]], "var() (ivy.container method)": [[785, "ivy.Container.var"]], "all() (ivy.array method)": [[786, "ivy.Array.all"]], "all() (ivy.container method)": [[786, "ivy.Container.all"]], "any() (ivy.array method)": [[787, "ivy.Array.any"]], "any() (ivy.container method)": [[787, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[790, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[790, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[791, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[792, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[792, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[793, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[793, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[793, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[793, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[793, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[794, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[795, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[799, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[799, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[799, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[800, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[800, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[801, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[801, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[802, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[802, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[803, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[803, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[807, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[807, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[807, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[807, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[807, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[807, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[807, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[807, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[807, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[807, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[807, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[807, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[807, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[807, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[807, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[807, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[807, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[807, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[807, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[807, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[808, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[808, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[808, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[808, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[808, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[808, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[808, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[808, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[808, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[809, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[809, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[810, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[810, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[810, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[810, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[810, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[810, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[810, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[810, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[810, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[810, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[810, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[810, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[810, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[810, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[810, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[810, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[811, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[811, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[811, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[811, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[811, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[811, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[811, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[811, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[811, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[811, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[811, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[811, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[811, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[811, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[811, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[811, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[811, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[811, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[811, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[811, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[811, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[811, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[811, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[811, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[811, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[811, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[811, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[811, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[811, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[812, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[812, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[812, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[812, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[812, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[812, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[812, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[813, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[813, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[813, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[813, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[813, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[813, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[814, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[814, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[814, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[814, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[814, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[815, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[815, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[815, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[815, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[815, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[815, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[815, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[815, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[815, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[815, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[815, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[815, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[815, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[815, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[815, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[815, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[815, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[815, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[816, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[816, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[816, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[817, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[817, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[818, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[819, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[819, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[819, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[819, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[819, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[819, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[819, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[819, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[819, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[819, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[819, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[820, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[820, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[820, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[821, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[821, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[822, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[822, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[822, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[823, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[823, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[823, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[823, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[823, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.apply_transpose"]], "dummy_inplace_update() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.dummy_inplace_update"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "ivy.utils.decorator_utils": [[823, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[823, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[823, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[824, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[824, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[825, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[825, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[826, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[826, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[827, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[827, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[827, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[827, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[827, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[827, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[827, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[827, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[827, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[827, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[827, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[827, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[827, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[827, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[827, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[827, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[827, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[827, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[827, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[827, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[827, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[827, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[827, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[827, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[827, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[827, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[828, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[828, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[828, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[829, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[829, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[829, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[830, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[830, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[830, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[830, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[830, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[830, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[830, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[830, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[830, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[830, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[831, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[831, "module-ivy.utils.verbosity"]], "automatic code conversions": [[873, "term-Automatic-Code-Conversions"]], "backend handler": [[873, "term-Backend-Handler"]], "compositional functions": [[873, "term-Compositional-Functions"]], "convenience functions": [[873, "term-Convenience-Functions"]], "framework": [[873, "term-Framework"]], "framework handler": [[873, "term-Framework-Handler"]], "graph compiler": [[873, "term-Graph-Compiler"]], "ivy array": [[873, "term-Ivy-Array"]], "ivy backends": [[873, "term-Ivy-Backends"]], "ivy compiler": [[873, "term-Ivy-Compiler"]], "ivy container": [[873, "term-Ivy-Container"]], "ivy frontends": [[873, "term-Ivy-Frontends"]], "ivy functional api": [[873, "term-Ivy-Functional-API"]], "ivy tracer": [[873, "term-Ivy-Tracer"]], "ivy transpiler": [[873, "term-Ivy-Transpiler"]], "mixed functions": [[873, "term-Mixed-Functions"]], "native array": [[873, "term-Native-Array"]], "nestable functions": [[873, "term-Nestable-Functions"]], "pipeline": [[873, "term-Pipeline"]], "primary functions": [[873, "term-Primary-Functions"]], "standalone functions": [[873, "term-Standalone-Functions"]], "submodule helper functions": [[873, "term-Submodule-Helper-Functions"]], "built-in function": [[878, "ivy.graph_transpile"], [879, "ivy.trace_graph"], [880, "ivy.transpile"], [881, "ivy.unify"]], "ivy.graph_transpile()": [[878, "ivy.graph_transpile"]], "ivy.trace_graph()": [[879, "ivy.trace_graph"]], "ivy.transpile()": [[880, "ivy.transpile"]], "ivy.unify()": [[881, "ivy.unify"]]}})