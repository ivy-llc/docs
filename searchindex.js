Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/kornia_So3", "demos/examples_and_demos/kornia_demo", "demos/examples_and_demos/kornia_image_points_transforms", "demos/examples_and_demos/kornia_total_variation_denoising", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/learn_the_basics/torch_to_tf_functions", "demos/learn_the_basics/torch_to_tf_models", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/stateful/ivy.stateful.utilities", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "index", "overview/api_key", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/why_transpile", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/related_work", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ivy_vs_onnx"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/kornia_So3.ipynb", "demos/examples_and_demos/kornia_demo.ipynb", "demos/examples_and_demos/kornia_image_points_transforms.ipynb", "demos/examples_and_demos/kornia_total_variation_denoising.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/learn_the_basics/torch_to_tf_functions.ipynb", "demos/learn_the_basics/torch_to_tf_models.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/stateful/ivy.stateful.utilities.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "index.rst", "overview/api_key.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/why_transpile.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/related_work.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ivy_vs_onnx.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "Image and Keypoints Augmentations using Kornia and Ivy\u2019s Transpiler", "Denoise image using Kornia and Ivy\u2019s Transpiler", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the Basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "Transpiling Functions from PyTorch to TensorFlow", "Transpiling Models from PyTorch to TensorFlow", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "complex", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "pad_sequence", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "requires_gradient", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Utilities", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Home", "Setting up your API key", "Contributing", "Building the Docs", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Why Transpile?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "Related Work", "Frameworks", "Graph Tracers", "Comparing Ivy with ONNX"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 182, 185, 188, 189, 190, 192, 196, 197, 211, 214, 224, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 598, 604, 609, 610, 611, 612, 613, 615, 617, 618, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 742, 744, 746, 747, 752, 753, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 876, 877, 879, 881, 882, 883, 884], "notebook": [0, 4, 5, 6, 7, 12, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 53, 62, 816], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 209, 211, 213, 214, 216, 217, 219, 221, 224, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 402, 404, 405, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 424, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 502, 503, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 590, 591, 594, 595, 596, 598, 604, 608, 609, 610, 611, 613, 615, 617, 618, 619, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 798, 799, 800, 801, 806, 810, 811, 813, 814, 815, 816, 817, 818, 820, 821, 824, 825, 829, 830, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 882, 883, 884], "dedic": [0, 811, 857, 868], "task": [0, 1, 8, 9, 64, 659, 737, 738, 739, 835, 842, 843, 862, 863, 876, 882], "util": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 26, 27, 28, 37, 40, 41, 42, 43, 45, 46, 61, 64, 73, 96, 215, 393, 464, 650, 821, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 842, 848, 851, 854, 855, 858, 861, 865, 866, 870], "power": [0, 36, 41, 47, 48, 72, 73, 74, 78, 95, 96, 97, 101, 118, 119, 251, 260, 261, 295, 350, 363, 386, 389, 392, 440, 600, 611, 623, 651, 653, 656, 660, 698, 711, 746, 813, 867, 882], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 64, 65, 66, 73, 78, 79, 80, 88, 96, 101, 102, 111, 113, 114, 134, 381, 391, 395, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 512, 517, 563, 573, 613, 635, 636, 638, 644, 645, 653, 654, 656, 657, 658, 699, 715, 724, 725, 726, 728, 730, 731, 733, 735, 810, 816, 824, 830, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883], "emploi": [0, 29], "build": [0, 5, 18, 19, 33, 36, 43, 47, 51, 52, 53, 54, 59, 61, 66, 84, 90, 119, 664, 771, 772, 773, 774, 814, 815, 816, 837, 842, 844, 850, 858, 860, 869, 871, 872, 874, 877, 882], "The": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 63, 64, 65, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 145, 150, 151, 153, 155, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 183, 184, 185, 187, 189, 190, 191, 194, 195, 197, 198, 200, 201, 202, 203, 209, 210, 211, 212, 213, 215, 216, 217, 218, 223, 224, 225, 226, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 443, 444, 445, 446, 447, 449, 451, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 490, 491, 492, 493, 497, 500, 501, 502, 507, 508, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 589, 591, 594, 595, 598, 600, 601, 604, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 800, 801, 806, 810, 811, 813, 814, 816, 817, 818, 820, 824, 829, 830, 835, 836, 837, 838, 839, 841, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 876, 877, 879, 880, 882, 883, 884], "goal": [0, 34, 61, 264, 651, 841, 882, 884], "accur": [0, 8, 9, 26, 262, 280, 651, 656, 704, 859], "distinguish": 0, "between": [0, 8, 9, 17, 29, 34, 35, 40, 52, 53, 54, 59, 72, 73, 74, 77, 78, 79, 80, 84, 90, 95, 96, 100, 101, 102, 103, 119, 142, 182, 245, 258, 293, 309, 351, 368, 370, 389, 392, 393, 394, 395, 404, 416, 417, 418, 429, 430, 431, 439, 445, 449, 470, 471, 472, 473, 474, 475, 476, 501, 502, 550, 648, 649, 651, 655, 657, 658, 660, 662, 664, 678, 701, 715, 716, 717, 718, 724, 732, 746, 761, 772, 773, 774, 799, 806, 818, 820, 846, 847, 850, 852, 857, 858, 859, 861, 862, 863, 864, 865, 868, 871, 875, 876, 877, 879, 880, 882, 883, 884], "activ": [0, 8, 9, 26, 30, 43, 47, 48, 73, 74, 77, 88, 96, 100, 111, 126, 127, 128, 129, 130, 131, 132, 133, 134, 312, 313, 314, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 613, 655, 682, 685, 813, 814, 834, 842, 843, 850, 856, 866, 867, 882], "therebi": [0, 8, 9, 865], "enhanc": [0, 42, 47, 48, 864], "secur": 0, "usag": [0, 10, 11, 26, 48, 230, 650, 835, 850, 858, 861, 865, 870, 872], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 26, 37, 38, 39, 40, 41, 45, 46, 49, 50, 51, 52, 53, 54, 61, 73, 77, 78, 80, 84, 86, 90, 96, 100, 101, 109, 227, 230, 235, 392, 395, 404, 420, 425, 435, 439, 485, 492, 493, 494, 501, 541, 542, 650, 655, 656, 658, 659, 660, 664, 666, 668, 669, 670, 671, 673, 675, 677, 681, 682, 685, 696, 697, 713, 722, 737, 738, 752, 771, 772, 773, 774, 779, 780, 783, 785, 787, 795, 814, 824, 829, 841, 842, 843, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 870, 872, 879, 882], "dive": [0, 16, 17, 29, 36, 47, 59, 837, 838, 840, 841, 843, 845, 849, 850, 856, 863, 869, 872], "need": [0, 1, 4, 5, 10, 11, 22, 23, 28, 34, 36, 41, 42, 43, 47, 48, 61, 62, 63, 73, 74, 80, 96, 97, 103, 392, 393, 404, 415, 420, 421, 425, 446, 547, 558, 559, 580, 653, 655, 656, 658, 660, 682, 691, 721, 724, 751, 799, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 872, 876, 879, 882, 883], "up": [0, 4, 5, 10, 11, 12, 13, 22, 23, 27, 28, 29, 45, 47, 73, 74, 96, 97, 392, 395, 415, 428, 485, 493, 575, 587, 653, 655, 678, 680, 837, 839, 841, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 879, 883], "our": [0, 4, 5, 8, 9, 10, 11, 16, 17, 22, 23, 26, 27, 28, 29, 30, 32, 34, 37, 38, 40, 42, 45, 47, 48, 49, 50, 52, 53, 54, 59, 61, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 852, 854, 855, 856, 859, 862, 863, 864, 865, 866, 868, 871, 872, 876, 879], "necessari": [0, 8, 9, 10, 11, 26, 53, 69, 73, 92, 96, 103, 144, 257, 290, 394, 395, 469, 479, 480, 481, 487, 489, 490, 491, 492, 493, 500, 517, 603, 626, 651, 653, 724, 725, 726, 728, 730, 731, 733, 735, 841, 842, 846, 847, 849, 850, 852, 861, 862, 865, 867, 868, 879], "follow": [0, 1, 5, 8, 9, 10, 11, 26, 27, 29, 39, 40, 41, 43, 45, 46, 47, 48, 51, 52, 53, 59, 62, 63, 73, 74, 75, 77, 78, 84, 90, 96, 97, 98, 100, 101, 151, 182, 185, 230, 240, 257, 264, 290, 292, 299, 300, 336, 386, 392, 394, 395, 398, 415, 428, 436, 474, 489, 501, 519, 521, 578, 579, 580, 610, 611, 634, 637, 639, 640, 641, 648, 649, 650, 651, 653, 654, 655, 656, 660, 664, 682, 685, 697, 703, 713, 746, 752, 771, 772, 773, 774, 814, 818, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 879, 882], "command": [0, 5, 61, 63, 838, 842, 845, 848, 855, 856, 873], "which": [0, 1, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 28, 36, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 60, 61, 62, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 113, 116, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 170, 172, 174, 180, 182, 185, 187, 190, 197, 209, 214, 218, 223, 225, 228, 229, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 339, 342, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 372, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 402, 404, 415, 416, 417, 418, 420, 421, 425, 426, 435, 436, 437, 439, 444, 447, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 507, 508, 509, 510, 511, 512, 514, 519, 521, 522, 523, 525, 526, 527, 528, 529, 530, 532, 533, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 587, 592, 593, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 678, 679, 680, 682, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 710, 712, 713, 715, 716, 717, 721, 722, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 745, 746, 747, 748, 753, 755, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 810, 811, 813, 814, 815, 816, 817, 818, 819, 824, 825, 832, 834, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 877, 879, 881, 882, 883, 884], "an": [0, 1, 3, 4, 5, 8, 9, 10, 11, 15, 16, 18, 19, 20, 21, 26, 27, 28, 29, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 53, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 182, 185, 188, 192, 196, 197, 227, 231, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 333, 334, 335, 337, 338, 345, 346, 347, 348, 349, 350, 352, 353, 355, 358, 362, 367, 371, 376, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 424, 426, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 447, 448, 473, 474, 478, 479, 480, 481, 485, 486, 487, 489, 496, 500, 501, 508, 510, 514, 516, 517, 519, 520, 521, 524, 526, 527, 529, 532, 533, 538, 539, 540, 541, 542, 543, 544, 547, 548, 551, 556, 558, 559, 567, 570, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 589, 595, 598, 599, 608, 609, 613, 617, 618, 619, 632, 635, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 746, 759, 761, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 882, 883, 884], "machin": [0, 8, 9, 10, 11, 24, 25, 26, 27, 28, 40, 42, 43, 50, 51, 59, 65, 73, 78, 96, 101, 182, 185, 393, 447, 649, 656, 699, 702, 842, 845, 858, 871, 873, 874, 876, 877, 882], "learn": [0, 8, 9, 10, 11, 26, 29, 30, 32, 36, 37, 39, 41, 43, 47, 48, 49, 50, 51, 52, 59, 61, 73, 75, 98, 393, 394, 464, 469, 563, 634, 637, 639, 640, 641, 653, 654, 659, 737, 738, 739, 818, 837, 840, 841, 842, 844, 845, 850, 855, 856, 858, 860, 869, 871, 874, 876, 877, 884], "other": [0, 4, 5, 8, 9, 10, 11, 18, 19, 22, 23, 26, 27, 28, 30, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 63, 70, 72, 73, 74, 80, 86, 90, 93, 95, 96, 97, 103, 109, 113, 118, 119, 142, 158, 170, 196, 257, 262, 264, 280, 289, 290, 354, 358, 389, 395, 485, 486, 494, 552, 553, 648, 649, 651, 653, 662, 666, 722, 732, 763, 786, 788, 795, 800, 835, 836, 839, 841, 842, 843, 845, 846, 849, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 868, 871, 872, 873, 874, 879, 881, 882, 884], "essenti": [0, 841, 847, 849, 851, 852, 858, 861, 862, 863], "panda": [0, 29, 61, 63], "matplotlib": [0, 5, 8, 9, 10, 11, 16, 17, 26, 29, 40, 42, 43, 48, 61, 62, 63, 66], "scikit": [0, 29, 393, 464], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 64, 65, 66, 69, 74, 78, 88, 97, 101, 146, 184, 211, 212, 216, 226, 228, 233, 300, 352, 353, 389, 395, 514, 556, 580, 613, 648, 649, 650, 651, 653, 656, 659, 706, 738, 739, 795, 806, 811, 820, 824, 834, 835, 839, 842, 843, 845, 846, 847, 848, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 879, 880], "cryptographi": [0, 5, 29, 48], "These": [0, 29, 54, 73, 96, 393, 395, 404, 446, 500, 540, 655, 656, 682, 691, 692, 835, 840, 841, 842, 843, 845, 849, 850, 852, 853, 857, 858, 861, 862, 865, 870, 872, 874, 876, 882], "tool": [0, 26, 29, 36, 47, 48, 835, 842, 843, 852, 856, 872, 877, 882, 883, 884], "provid": [0, 8, 9, 18, 19, 26, 34, 36, 40, 43, 47, 52, 53, 59, 65, 69, 73, 74, 78, 80, 83, 86, 87, 90, 92, 96, 97, 101, 103, 106, 109, 110, 138, 156, 158, 175, 176, 177, 178, 179, 187, 197, 209, 213, 226, 309, 392, 393, 395, 398, 404, 428, 436, 440, 445, 449, 462, 463, 467, 468, 485, 487, 496, 517, 519, 521, 550, 562, 594, 595, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 660, 663, 666, 667, 682, 698, 701, 712, 715, 724, 725, 732, 744, 766, 786, 788, 789, 790, 799, 814, 818, 824, 825, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 866, 868, 872, 877, 879, 882, 883, 884], "robust": [0, 876], "foundat": [0, 36], "manipul": [0, 73, 96, 861, 862, 866, 868, 870, 882], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 126, 127, 128, 129, 130, 131, 133, 134, 142, 143, 144, 145, 146, 149, 151, 153, 154, 155, 156, 157, 158, 160, 164, 166, 170, 171, 172, 180, 182, 185, 190, 192, 197, 214, 215, 223, 228, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 337, 338, 345, 347, 352, 353, 355, 357, 358, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 376, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 411, 412, 413, 414, 416, 417, 419, 420, 421, 424, 425, 429, 430, 431, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 457, 463, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 484, 485, 486, 487, 488, 491, 492, 493, 496, 497, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 522, 523, 524, 525, 528, 530, 531, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 573, 576, 578, 579, 580, 587, 594, 595, 610, 611, 612, 613, 615, 619, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 801, 813, 814, 818, 829, 830, 835, 839, 841, 842, 847, 848, 849, 850, 852, 855, 860, 863, 865, 868, 870, 871, 879, 882], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 65, 66, 835, 839, 842, 848, 856], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 61, 62, 63, 73, 77, 78, 96, 100, 101, 379, 389, 393, 404, 446, 550, 655, 656, 660, 682, 685, 691, 692, 703, 748, 842, 843, 844, 863, 872], "r": [0, 4, 5, 16, 17, 24, 25, 26, 48, 61, 62, 73, 78, 90, 96, 101, 113, 114, 366, 381, 389, 391, 635, 654, 656, 658, 703, 735, 842, 843, 844, 860, 863, 873], "requir": [0, 5, 8, 9, 10, 11, 26, 39, 40, 41, 42, 43, 45, 46, 48, 52, 61, 62, 63, 66, 72, 73, 90, 95, 96, 291, 304, 308, 393, 395, 446, 447, 501, 642, 651, 654, 656, 658, 691, 692, 693, 732, 798, 806, 811, 830, 838, 841, 842, 846, 848, 850, 851, 852, 853, 854, 856, 857, 859, 862, 863, 864, 865, 866, 868, 870, 872, 873, 876, 882], "txt": [0, 4, 5, 8, 9, 24, 25, 62, 74, 842, 845, 848, 873], "16": [0, 4, 5, 10, 11, 12, 13, 17, 18, 19, 20, 26, 29, 40, 42, 43, 48, 59, 61, 63, 72, 73, 74, 77, 78, 82, 86, 93, 95, 96, 97, 100, 101, 103, 105, 118, 119, 185, 251, 280, 300, 307, 363, 366, 370, 389, 392, 395, 404, 411, 412, 414, 420, 424, 425, 429, 430, 435, 439, 474, 491, 541, 547, 564, 567, 589, 610, 611, 644, 649, 651, 653, 654, 655, 656, 658, 660, 662, 663, 666, 677, 679, 686, 690, 693, 694, 701, 703, 707, 735, 748, 761, 762, 763, 770, 780, 781, 798, 801, 843, 850, 852], "mb": [0, 8, 9, 10, 11, 18, 19, 20, 24, 25, 61, 63, 66], "25": [0, 15, 26, 27, 29, 59, 61, 62, 63, 72, 73, 74, 78, 79, 82, 86, 89, 95, 96, 97, 100, 101, 104, 105, 109, 118, 119, 134, 145, 154, 240, 241, 251, 257, 259, 270, 275, 290, 295, 298, 300, 303, 304, 305, 310, 332, 386, 394, 404, 435, 470, 473, 541, 550, 578, 579, 595, 610, 648, 651, 653, 656, 657, 660, 661, 666, 669, 686, 690, 695, 711, 716, 741, 748, 752, 759, 761, 762, 763, 780, 781, 783, 788, 849, 860], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 118, 119, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 164, 166, 169, 170, 171, 172, 176, 180, 181, 182, 185, 190, 192, 197, 213, 214, 218, 222, 223, 225, 226, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 342, 343, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 590, 592, 594, 595, 599, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 801, 803, 806, 810, 813, 814, 815, 816, 817, 818, 819, 824, 829, 830, 834, 835, 839, 842, 843, 845, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 868, 870, 871, 872, 879], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 59, 62, 64, 65, 66, 69, 73, 74, 75, 78, 86, 96, 98, 101, 109, 138, 156, 162, 163, 183, 184, 213, 216, 217, 229, 264, 299, 346, 351, 352, 353, 355, 366, 368, 374, 378, 380, 386, 389, 390, 392, 393, 394, 395, 398, 399, 404, 407, 408, 415, 421, 426, 437, 445, 449, 457, 466, 471, 473, 474, 490, 492, 493, 501, 519, 520, 521, 530, 540, 550, 568, 569, 575, 589, 612, 613, 634, 636, 637, 638, 639, 641, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 660, 666, 670, 672, 674, 676, 682, 689, 697, 699, 706, 707, 713, 715, 752, 786, 788, 799, 813, 814, 815, 816, 817, 818, 819, 820, 824, 834, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 880, 882, 883, 884], "eta": [0, 10, 11, 18, 19, 20, 61, 63, 66], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 146, 149, 151, 152, 153, 154, 155, 158, 160, 162, 163, 164, 165, 166, 169, 170, 171, 172, 180, 182, 185, 186, 190, 192, 197, 210, 213, 215, 218, 223, 224, 225, 226, 228, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 402, 404, 411, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 435, 436, 437, 439, 442, 443, 444, 446, 447, 448, 451, 452, 454, 457, 458, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 484, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 557, 558, 559, 562, 563, 564, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 590, 592, 594, 595, 599, 604, 608, 609, 610, 611, 613, 615, 617, 618, 627, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 801, 803, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 824, 829, 830, 834, 839, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 865, 866, 870, 879], "00": [0, 8, 9, 10, 11, 18, 19, 20, 24, 25, 26, 29, 40, 41, 45, 46, 61, 63, 66, 73, 74, 78, 96, 97, 101, 262, 329, 360, 361, 386, 392, 414, 420, 424, 425, 567, 611, 651, 653, 656, 693, 703, 798, 856, 865], "44": [0, 8, 9, 10, 11, 15, 17, 18, 19, 20, 26, 59, 63, 72, 73, 82, 95, 96, 105, 243, 290, 300, 304, 305, 356, 389, 392, 413, 414, 651, 655, 656, 660, 663, 666, 678, 701, 748, 761, 762, 770, 781], "6": [0, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 40, 42, 43, 45, 47, 48, 59, 61, 62, 63, 66, 67, 69, 70, 72, 73, 74, 75, 77, 78, 80, 82, 83, 85, 86, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 118, 119, 126, 128, 133, 138, 143, 144, 152, 153, 156, 157, 160, 166, 170, 171, 172, 180, 182, 190, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 287, 288, 289, 290, 292, 293, 294, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 313, 314, 316, 318, 320, 322, 323, 324, 326, 327, 328, 329, 330, 336, 347, 352, 353, 355, 357, 366, 367, 369, 370, 371, 373, 380, 384, 386, 389, 390, 392, 393, 394, 395, 400, 402, 404, 414, 416, 419, 420, 424, 425, 429, 435, 436, 437, 439, 442, 445, 448, 449, 453, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 485, 487, 491, 492, 496, 497, 500, 501, 502, 507, 508, 510, 511, 514, 517, 518, 528, 530, 531, 533, 538, 540, 541, 542, 543, 545, 547, 549, 550, 556, 558, 559, 562, 563, 564, 570, 571, 578, 579, 580, 595, 609, 610, 611, 612, 613, 615, 619, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 685, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 751, 752, 758, 759, 760, 761, 762, 763, 765, 766, 767, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 813, 839, 842, 845, 847, 849, 850, 852, 855, 860, 865, 868, 870], "kb": [0, 8, 9, 10, 11, 18, 19, 20, 24, 25, 26, 61, 63, 66], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 84, 86, 87, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 149, 151, 153, 154, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 171, 172, 176, 180, 182, 190, 192, 197, 211, 213, 214, 225, 228, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 345, 347, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 409, 411, 412, 413, 414, 416, 419, 420, 421, 424, 425, 429, 430, 431, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 460, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 522, 523, 524, 525, 528, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 590, 594, 595, 608, 609, 610, 611, 615, 618, 619, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 801, 814, 829, 830, 834, 835, 839, 841, 842, 845, 846, 847, 849, 850, 852, 854, 855, 858, 860, 863, 865, 870, 871, 879], "45": [0, 5, 10, 11, 15, 18, 19, 20, 48, 59, 61, 63, 72, 73, 86, 95, 96, 98, 100, 105, 119, 241, 245, 257, 300, 301, 360, 361, 374, 389, 392, 404, 414, 424, 435, 541, 547, 633, 639, 651, 654, 656, 658, 666, 701, 730, 762, 763, 781, 798], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 37, 40, 41, 42, 43, 47, 48, 59, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 113, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 142, 143, 144, 145, 151, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 170, 171, 172, 176, 180, 182, 190, 192, 197, 214, 223, 228, 231, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 347, 350, 352, 353, 355, 357, 359, 361, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 400, 402, 404, 411, 412, 413, 414, 416, 417, 419, 420, 421, 424, 425, 429, 430, 431, 434, 435, 436, 437, 439, 442, 445, 446, 448, 449, 451, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 488, 491, 492, 495, 496, 497, 500, 501, 502, 507, 508, 509, 510, 511, 512, 514, 517, 518, 523, 524, 525, 528, 530, 531, 533, 538, 540, 541, 542, 543, 544, 545, 547, 550, 556, 557, 558, 559, 562, 563, 564, 565, 567, 570, 571, 573, 576, 578, 579, 580, 594, 595, 599, 610, 611, 612, 613, 615, 619, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 706, 707, 708, 710, 711, 712, 715, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 741, 743, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 799, 800, 801, 814, 820, 829, 830, 835, 841, 842, 843, 845, 847, 849, 850, 852, 854, 855, 857, 860, 863, 865], "143": [0, 10, 11, 18, 19, 20, 78, 95, 119, 307, 651, 656, 694, 852], "8": [0, 4, 5, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 38, 40, 42, 43, 48, 59, 61, 63, 66, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 93, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 118, 119, 126, 141, 152, 153, 157, 160, 166, 175, 177, 178, 179, 182, 190, 215, 232, 240, 242, 243, 247, 248, 251, 252, 253, 255, 261, 264, 268, 269, 275, 276, 277, 281, 282, 285, 286, 288, 289, 290, 295, 296, 299, 300, 301, 304, 305, 308, 309, 310, 314, 320, 322, 323, 324, 326, 327, 329, 330, 347, 351, 363, 366, 368, 369, 370, 373, 380, 384, 386, 389, 392, 393, 394, 395, 404, 411, 412, 413, 414, 419, 420, 424, 425, 429, 430, 434, 435, 439, 442, 445, 453, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 485, 487, 491, 496, 497, 507, 508, 511, 512, 513, 514, 517, 518, 528, 530, 542, 545, 546, 550, 556, 557, 563, 564, 567, 570, 574, 578, 579, 580, 582, 583, 586, 589, 594, 595, 599, 609, 610, 611, 612, 613, 633, 636, 638, 640, 641, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 669, 673, 674, 676, 677, 678, 679, 682, 688, 689, 690, 692, 693, 694, 696, 697, 698, 701, 703, 704, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 721, 725, 732, 733, 735, 741, 748, 752, 760, 761, 762, 763, 765, 770, 771, 773, 775, 776, 778, 780, 781, 783, 785, 787, 788, 798, 801, 814, 842, 849, 852, 865], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 38, 40, 42, 43, 48, 59, 61, 62, 63, 65, 66, 67, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 128, 129, 130, 131, 142, 143, 144, 154, 157, 158, 176, 182, 185, 215, 237, 240, 243, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 263, 264, 267, 268, 269, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 287, 288, 289, 290, 292, 293, 294, 296, 297, 300, 301, 302, 304, 307, 308, 310, 311, 313, 314, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 335, 336, 347, 351, 355, 357, 358, 366, 367, 368, 370, 372, 373, 380, 384, 386, 389, 390, 392, 393, 394, 395, 400, 404, 411, 412, 413, 414, 419, 420, 424, 425, 429, 434, 435, 436, 437, 439, 442, 445, 458, 470, 471, 472, 473, 475, 476, 479, 480, 481, 485, 487, 491, 496, 497, 500, 501, 507, 508, 510, 511, 513, 514, 517, 518, 528, 530, 531, 538, 541, 542, 544, 545, 550, 556, 558, 559, 563, 564, 567, 578, 579, 580, 587, 594, 595, 610, 613, 633, 634, 636, 637, 638, 639, 640, 641, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 674, 676, 677, 678, 679, 685, 687, 688, 689, 690, 692, 693, 694, 696, 698, 701, 703, 704, 706, 707, 708, 710, 711, 712, 715, 716, 717, 721, 724, 725, 730, 732, 733, 735, 740, 741, 748, 752, 759, 760, 761, 762, 763, 765, 770, 771, 773, 775, 776, 778, 779, 780, 781, 783, 785, 787, 788, 798, 842, 843, 847, 849, 852, 858, 861, 865], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 38, 40, 42, 43, 48, 59, 61, 63, 66, 69, 70, 72, 73, 74, 75, 77, 78, 80, 82, 84, 85, 86, 89, 93, 95, 96, 97, 98, 100, 101, 103, 105, 107, 108, 109, 118, 119, 126, 142, 143, 144, 157, 175, 176, 177, 178, 179, 182, 185, 238, 240, 242, 243, 246, 247, 248, 251, 252, 257, 258, 259, 264, 271, 277, 278, 279, 281, 285, 286, 288, 289, 290, 293, 295, 296, 300, 301, 304, 305, 306, 311, 317, 320, 321, 322, 359, 362, 366, 372, 373, 380, 384, 389, 390, 392, 394, 395, 402, 404, 411, 412, 413, 414, 419, 420, 424, 425, 429, 430, 434, 435, 439, 453, 470, 472, 474, 475, 479, 480, 481, 487, 491, 496, 507, 508, 509, 510, 512, 514, 517, 528, 530, 533, 542, 559, 563, 564, 565, 567, 570, 578, 579, 582, 583, 586, 594, 595, 609, 610, 612, 633, 634, 635, 639, 640, 645, 648, 649, 651, 653, 654, 655, 656, 658, 660, 662, 663, 664, 665, 666, 669, 670, 671, 677, 678, 679, 687, 688, 690, 692, 693, 694, 696, 697, 698, 701, 703, 704, 706, 707, 708, 710, 711, 712, 721, 725, 729, 730, 732, 733, 735, 740, 741, 746, 748, 751, 752, 760, 761, 762, 763, 765, 770, 771, 773, 775, 776, 778, 780, 781, 783, 785, 787, 788, 798, 818, 849, 850, 852, 860, 865], "756": [0, 10, 11, 18, 19, 20], "21": [0, 4, 5, 10, 11, 18, 19, 26, 27, 29, 48, 59, 61, 63, 66, 72, 73, 74, 82, 92, 95, 96, 100, 101, 105, 109, 118, 155, 185, 240, 243, 245, 251, 275, 290, 321, 373, 392, 393, 394, 395, 404, 411, 414, 424, 429, 435, 437, 439, 443, 469, 484, 541, 595, 648, 649, 651, 653, 656, 660, 666, 690, 701, 705, 746, 761, 762, 779, 780, 781, 854, 860], "116": [0, 10, 11, 18, 19, 20], "23": [0, 5, 27, 28, 29, 40, 42, 43, 48, 59, 61, 63, 72, 73, 78, 82, 92, 95, 96, 97, 100, 105, 153, 252, 255, 272, 273, 274, 297, 299, 300, 301, 303, 310, 355, 356, 389, 392, 395, 404, 411, 412, 414, 424, 429, 430, 431, 435, 439, 484, 541, 547, 648, 651, 655, 656, 660, 663, 674, 676, 690, 694, 697, 705, 707, 708, 741, 748, 752, 761, 762, 763, 770, 865, 870], "29": [0, 5, 8, 9, 29, 40, 48, 59, 61, 63, 66, 78, 95, 97, 98, 100, 105, 245, 404, 435, 541, 563, 564, 635, 639, 651, 653, 654, 656, 694, 761, 762, 763], "823": 0, "46": [0, 8, 9, 15, 26, 59, 61, 63, 73, 82, 96, 100, 105, 155, 280, 301, 331, 386, 392, 412, 430, 431, 648, 651, 660, 741, 761, 762], "14": [0, 4, 5, 8, 9, 12, 13, 22, 23, 24, 25, 26, 27, 45, 46, 48, 59, 61, 62, 63, 70, 72, 73, 77, 78, 82, 86, 93, 95, 96, 97, 100, 101, 103, 105, 169, 182, 185, 238, 243, 245, 252, 256, 282, 286, 290, 296, 303, 311, 362, 392, 393, 395, 404, 411, 412, 413, 414, 424, 429, 431, 434, 435, 436, 439, 443, 449, 450, 485, 487, 491, 496, 517, 541, 610, 633, 649, 651, 653, 654, 655, 656, 658, 660, 664, 666, 669, 670, 672, 674, 676, 678, 690, 692, 694, 701, 708, 710, 712, 735, 752, 761, 762, 763, 771, 780, 781, 849, 852, 865], "731": [0, 67, 132], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 38, 40, 41, 42, 43, 45, 46, 47, 48, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 118, 119, 126, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 166, 169, 170, 171, 172, 176, 180, 182, 190, 192, 197, 213, 214, 215, 218, 221, 223, 225, 228, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 345, 347, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 402, 404, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 424, 425, 426, 429, 430, 431, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 458, 460, 463, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 522, 523, 525, 528, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 590, 592, 594, 595, 599, 608, 609, 610, 611, 612, 613, 615, 619, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 800, 801, 810, 813, 814, 824, 829, 830, 834, 835, 839, 842, 843, 845, 847, 848, 849, 850, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 870, 871, 872, 879], "121": 0, "56": [0, 24, 25, 29, 45, 59, 61, 72, 73, 77, 82, 95, 96, 100, 155, 290, 304, 307, 310, 392, 414, 424, 633, 648, 651, 654, 655, 656, 660, 666, 670, 672, 674, 676, 679, 701, 740, 762, 781, 852], "124": [0, 48, 655, 679], "196": [0, 100, 655, 679], "166": [0, 89, 126, 645], "99": [0, 29, 48, 59, 72, 73, 75, 93, 95, 105, 152, 239, 254, 377, 389, 610, 637, 648, 651, 653, 654, 660, 666, 744, 752, 762, 781], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 17, 24, 25, 26, 28, 36, 40, 42, 43, 48, 59, 61, 62, 63, 66, 72, 73, 74, 77, 78, 82, 86, 95, 96, 97, 100, 101, 103, 105, 109, 119, 240, 244, 247, 252, 262, 299, 300, 306, 370, 389, 392, 393, 395, 411, 412, 424, 429, 430, 434, 435, 439, 448, 484, 485, 487, 491, 496, 498, 517, 541, 542, 557, 563, 564, 570, 579, 595, 651, 653, 655, 656, 657, 658, 660, 662, 663, 664, 666, 669, 670, 678, 679, 690, 693, 694, 695, 696, 697, 701, 705, 706, 707, 708, 710, 712, 715, 725, 730, 731, 733, 735, 746, 748, 758, 761, 762, 763, 770, 771, 779, 780, 781, 788, 849, 850, 852, 860], "71": [0, 59, 72, 95, 100, 256, 296, 435, 651], "To": [0, 1, 8, 9, 16, 24, 25, 26, 28, 29, 30, 32, 36, 40, 41, 42, 43, 45, 46, 47, 48, 59, 62, 63, 64, 114, 264, 394, 473, 604, 651, 653, 813, 841, 842, 845, 846, 847, 848, 850, 852, 854, 855, 856, 858, 859, 862, 863, 864, 865, 866, 879], "ensur": [0, 1, 24, 25, 28, 30, 32, 42, 43, 48, 73, 74, 96, 97, 392, 393, 429, 430, 431, 464, 580, 653, 793, 820, 841, 842, 843, 846, 850, 851, 852, 854, 856, 857, 859, 861, 862, 863, 864, 865, 866, 882, 884], "begin": [0, 10, 11, 38, 73, 96, 301, 394, 395, 469, 485, 501, 503, 504, 505, 506, 651, 660, 740, 751, 798, 842, 845, 863], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 72, 73, 74, 86, 95, 96, 97, 164, 193, 211, 216, 241, 301, 324, 345, 386, 404, 540, 547, 556, 580, 610, 613, 617, 648, 649, 650, 651, 653, 656, 666, 704, 781, 793, 795, 806, 820, 824, 829, 830, 835, 840, 841, 842, 843, 845, 846, 847, 850, 851, 854, 855, 857, 861, 863, 865, 866, 868, 870, 871, 873, 874, 876, 879], "handl": [0, 4, 5, 12, 13, 59, 61, 67, 71, 72, 73, 89, 90, 94, 95, 96, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 210, 211, 212, 213, 214, 218, 223, 224, 232, 236, 242, 254, 279, 281, 295, 301, 302, 307, 308, 312, 317, 318, 320, 384, 395, 484, 511, 645, 650, 651, 656, 666, 710, 785, 787, 810, 818, 837, 844, 849, 850, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 884], "its": [0, 1, 8, 9, 26, 27, 28, 36, 38, 47, 48, 50, 53, 60, 61, 63, 68, 70, 73, 80, 90, 93, 96, 97, 103, 116, 128, 131, 134, 139, 170, 175, 176, 177, 178, 179, 230, 257, 290, 309, 319, 384, 392, 395, 404, 432, 440, 514, 516, 543, 567, 616, 645, 647, 649, 650, 651, 653, 656, 658, 660, 696, 724, 728, 729, 733, 746, 795, 830, 841, 842, 846, 849, 850, 851, 853, 854, 855, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 874, 876, 877, 879, 882, 884], "backend": [0, 4, 5, 8, 9, 10, 11, 16, 18, 19, 20, 21, 26, 28, 37, 38, 39, 41, 42, 43, 48, 50, 51, 53, 68, 69, 73, 74, 78, 90, 96, 97, 101, 118, 146, 183, 184, 187, 209, 216, 217, 219, 222, 233, 352, 353, 389, 393, 445, 447, 547, 556, 568, 569, 577, 580, 581, 591, 598, 613, 616, 648, 649, 650, 653, 656, 704, 706, 793, 795, 796, 798, 799, 800, 803, 805, 806, 811, 815, 816, 818, 823, 824, 839, 840, 842, 843, 844, 845, 846, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 867, 868, 871, 874, 879, 882], "jax": [0, 3, 8, 9, 16, 24, 25, 34, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 53, 59, 61, 65, 67, 72, 73, 74, 84, 89, 95, 96, 97, 126, 127, 128, 129, 130, 131, 132, 133, 134, 226, 308, 312, 317, 318, 320, 366, 384, 389, 404, 550, 580, 613, 632, 645, 650, 651, 653, 664, 771, 772, 773, 774, 806, 810, 820, 824, 835, 839, 840, 841, 842, 843, 845, 847, 850, 851, 854, 855, 857, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877, 879, 883], "capabl": [0, 8, 9, 34, 42, 48, 865, 868], "optim": [0, 8, 9, 10, 11, 22, 23, 26, 27, 28, 29, 36, 40, 41, 43, 45, 46, 47, 48, 61, 63, 64, 66, 73, 75, 96, 98, 329, 386, 394, 473, 474, 554, 641, 653, 654, 659, 737, 738, 739, 813, 830, 850, 861, 868, 876, 877, 882, 883, 884], "frontend": [0, 29, 597, 653, 795, 796, 799, 803, 806, 840, 843, 844, 850, 854, 855, 860, 864, 865, 868, 871, 874, 882], "xgb_frontend": 0, "access": [0, 1, 26, 42, 47, 48, 90, 841, 842, 843, 850, 856, 861, 862, 882], "compat": [0, 8, 9, 16, 17, 18, 19, 26, 27, 37, 40, 41, 43, 45, 46, 49, 53, 59, 66, 72, 73, 78, 80, 83, 86, 87, 95, 96, 101, 103, 106, 109, 110, 118, 119, 171, 240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 268, 269, 276, 277, 282, 284, 286, 287, 290, 293, 295, 299, 306, 311, 352, 353, 389, 649, 651, 656, 658, 663, 666, 667, 687, 699, 702, 705, 708, 712, 713, 728, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 834, 842, 847, 857, 862, 863, 866, 870, 872], "manner": [0, 38, 48, 50, 60, 68, 91, 660, 752, 842, 850, 851, 853, 858, 862, 866, 872], "sklearn": [0, 29], "model_select": [0, 29], "timeit": [0, 22, 23, 27, 28, 29, 38, 47, 48, 64, 66], "oper": [0, 8, 9, 26, 36, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 53, 60, 63, 69, 70, 72, 73, 74, 77, 78, 86, 90, 92, 93, 95, 96, 97, 100, 101, 109, 119, 134, 154, 155, 197, 227, 235, 240, 242, 251, 254, 257, 264, 279, 281, 290, 291, 295, 299, 302, 307, 319, 327, 347, 348, 349, 381, 384, 386, 391, 392, 394, 395, 406, 407, 408, 409, 411, 412, 413, 419, 420, 421, 425, 429, 430, 431, 432, 434, 435, 437, 439, 440, 469, 507, 509, 556, 563, 564, 565, 613, 645, 648, 649, 650, 651, 653, 655, 656, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 697, 708, 710, 783, 785, 787, 798, 801, 814, 830, 834, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 858, 861, 862, 865, 868, 870, 874, 879, 882, 883, 884], "xgb": 0, "functool": [0, 29, 61, 854, 862], "higher": [0, 29, 73, 96, 393, 395, 404, 450, 462, 468, 479, 480, 481, 550, 813, 850, 861, 870, 871, 872, 882, 883], "order": [0, 4, 5, 26, 39, 40, 41, 45, 46, 48, 51, 53, 61, 64, 66, 69, 73, 74, 77, 78, 80, 84, 85, 90, 96, 100, 101, 103, 107, 108, 113, 118, 119, 143, 144, 156, 164, 245, 264, 307, 345, 366, 386, 389, 392, 393, 395, 398, 402, 438, 443, 446, 447, 448, 449, 450, 454, 460, 462, 465, 468, 491, 492, 493, 498, 499, 512, 519, 520, 521, 524, 533, 648, 651, 655, 656, 658, 659, 663, 664, 665, 669, 670, 671, 672, 673, 674, 677, 691, 692, 697, 706, 707, 711, 713, 725, 728, 737, 738, 769, 771, 772, 773, 774, 775, 777, 778, 795, 817, 819, 830, 841, 842, 843, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 872, 882, 883, 884], "callabl": [0, 24, 25, 65, 73, 74, 88, 96, 97, 100, 111, 138, 139, 141, 183, 184, 216, 217, 230, 380, 382, 383, 390, 391, 392, 395, 435, 438, 440, 478, 501, 553, 557, 562, 564, 568, 569, 590, 619, 632, 636, 638, 644, 647, 649, 650, 653, 654, 659, 660, 737, 738, 739, 746, 747, 748, 750, 751, 752, 753, 793, 796, 806, 818, 831, 834, 849, 854, 860, 862, 870, 878, 879], "object": [0, 5, 15, 16, 29, 36, 43, 47, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 122, 123, 146, 150, 151, 161, 173, 182, 185, 193, 196, 231, 289, 527, 575, 591, 635, 648, 649, 650, 653, 654, 660, 662, 743, 744, 745, 747, 748, 749, 755, 756, 757, 758, 765, 793, 795, 796, 803, 804, 805, 811, 812, 814, 815, 816, 820, 824, 829, 846, 847, 849, 858, 859, 862, 863, 865, 868, 871, 879, 880, 882], "tqdm_notebook": [0, 29], "tqdm": [0, 5, 8, 9, 10, 11, 29, 40, 42, 43, 48, 61, 63], "progress": [0, 656, 711, 842, 843, 871, 877], "bar": [0, 842, 855], "jupyt": [0, 1, 5, 48], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 24, 25, 29, 47, 48, 61, 64, 879], "step": [0, 1, 2, 8, 9, 10, 11, 16, 17, 26, 31, 32, 33, 44, 47, 59, 61, 62, 63, 73, 75, 92, 96, 98, 142, 154, 392, 395, 438, 440, 495, 633, 634, 637, 639, 640, 641, 648, 654, 659, 737, 738, 739, 818, 834, 841, 842, 843, 846, 847, 849, 850, 851, 852, 855, 860, 862, 865, 870, 882], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 37, 40, 41, 42, 43, 45, 47, 48, 49, 52, 53, 54, 59, 60, 61, 62, 63, 64, 66, 69, 73, 95, 96, 97, 143, 144, 146, 157, 193, 270, 274, 324, 392, 393, 420, 425, 441, 610, 648, 649, 651, 653, 660, 746, 795, 824, 829, 830, 841, 846, 850, 851, 854, 857, 861, 862, 863, 865, 866, 868, 870, 874], "pd": [0, 29, 63], "set_backend": [0, 4, 5, 6, 7, 12, 13, 24, 25, 29, 36, 37, 38, 39, 40, 41, 47, 48, 50, 51, 52, 53, 54, 60, 62, 63, 64, 72, 74, 88, 95, 97, 184, 193, 211, 212, 216, 226, 228, 233, 241, 556, 580, 649, 650, 653, 656, 659, 704, 738, 739, 824, 845, 847, 850, 851, 858, 859, 860, 870, 879], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 26, 27, 28, 29, 39, 42, 47, 48, 61, 62, 64, 90, 660, 753, 842, 845, 848, 856, 863, 879, 883], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 37, 39, 42, 43, 47, 48, 61, 63, 68, 74, 75, 90, 97, 98, 113, 395, 507, 580, 594, 595, 598, 599, 622, 633, 634, 637, 639, 640, 641, 653, 654, 655, 659, 660, 678, 681, 737, 738, 739, 747, 748, 752, 757, 758, 806, 811, 817, 818, 824, 830, 841, 842, 843, 844, 845, 846, 849, 850, 852, 857, 859, 860, 862, 863, 865, 868, 870, 872], "jax_enable_x64": [0, 6, 7, 12, 13, 16, 22, 23, 27, 28, 29, 39, 42, 47, 48], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 39, 42, 43, 45, 47, 48, 52, 53, 54, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 173, 180, 182, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 197, 209, 213, 214, 216, 217, 221, 224, 225, 227, 231, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 386, 389, 390, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 487, 488, 489, 491, 492, 493, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 594, 595, 596, 599, 602, 603, 605, 606, 608, 609, 610, 611, 613, 615, 617, 618, 620, 625, 626, 628, 629, 631, 634, 635, 637, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 803, 814, 815, 816, 817, 818, 821, 824, 826, 827, 829, 830, 834, 839, 842, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 863, 865, 867, 868, 870, 871, 879], "from": [0, 2, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 82, 83, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 103, 105, 106, 109, 110, 111, 113, 114, 116, 119, 142, 144, 148, 150, 151, 152, 153, 156, 157, 160, 164, 166, 172, 190, 196, 197, 213, 218, 223, 229, 230, 256, 264, 265, 292, 296, 297, 304, 308, 329, 330, 336, 339, 345, 347, 348, 349, 356, 359, 363, 364, 366, 367, 379, 383, 386, 389, 391, 392, 393, 394, 395, 399, 404, 416, 417, 418, 432, 437, 438, 457, 464, 469, 470, 474, 484, 487, 496, 501, 508, 510, 511, 513, 514, 516, 517, 526, 527, 528, 529, 530, 541, 542, 562, 570, 571, 573, 593, 604, 615, 632, 634, 635, 639, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 662, 663, 664, 666, 667, 669, 677, 678, 687, 690, 706, 710, 711, 712, 722, 725, 728, 731, 737, 738, 739, 741, 752, 753, 754, 760, 761, 762, 763, 767, 770, 771, 773, 779, 780, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 806, 811, 813, 814, 815, 816, 818, 820, 824, 830, 834, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 874, 877, 878, 879, 880, 881, 882, 883, 884], "classification_report": [0, 29], "train_test_split": [0, 29], "usr": [0, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 48, 61, 62, 63, 66, 842], "local": [0, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 48, 52, 53, 54, 61, 62, 63, 66, 398, 524, 575, 653, 836, 837, 842, 845, 848, 855, 858, 863, 865], "lib": [0, 5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 26, 27, 29, 40, 42, 43, 48, 61, 62, 63, 66], "python3": [0, 5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 24, 25, 26, 40, 42, 43, 47, 48, 61, 63, 66, 842, 843], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 59, 61, 63, 65, 66, 69, 72, 73, 74, 75, 77, 78, 82, 84, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 142, 153, 154, 155, 239, 247, 248, 251, 252, 255, 262, 267, 269, 275, 277, 279, 290, 296, 303, 304, 309, 318, 351, 352, 353, 356, 360, 361, 363, 365, 366, 368, 369, 370, 372, 373, 377, 380, 389, 392, 395, 404, 411, 412, 413, 414, 424, 429, 430, 434, 435, 436, 437, 439, 469, 481, 484, 487, 491, 496, 507, 508, 517, 538, 541, 542, 545, 547, 550, 563, 564, 565, 567, 570, 571, 573, 578, 579, 587, 595, 599, 604, 610, 612, 624, 627, 639, 648, 651, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 669, 670, 672, 678, 688, 690, 694, 695, 696, 697, 698, 701, 706, 707, 708, 710, 712, 725, 730, 731, 732, 733, 735, 746, 748, 751, 759, 760, 761, 762, 763, 769, 771, 777, 779, 780, 781, 782, 784, 785, 787, 788, 798, 800, 818, 820, 839, 842, 845, 849, 850, 852, 855, 860, 863, 865, 870], "dist": [0, 10, 11, 12, 13, 17, 18, 19, 20, 21, 26, 48, 61, 62, 63, 66], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 40, 42, 43, 48, 61, 62, 63, 66, 828, 839, 842, 862, 872, 873, 882], "except": [0, 10, 11, 18, 19, 20, 21, 26, 28, 37, 40, 42, 43, 48, 62, 63, 66, 73, 74, 80, 82, 87, 90, 96, 97, 101, 105, 110, 171, 352, 353, 358, 377, 389, 395, 399, 404, 485, 510, 514, 527, 546, 547, 562, 580, 597, 613, 619, 649, 653, 656, 658, 662, 663, 667, 702, 722, 724, 732, 761, 762, 763, 769, 789, 790, 793, 796, 800, 843, 844, 845, 846, 850, 851, 853, 855, 857, 861, 862, 866, 867, 868, 872], "py": [0, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 28, 37, 40, 41, 42, 43, 48, 61, 63, 66, 109, 393, 464, 781, 824, 829, 841, 842, 843, 845, 847, 850, 851, 853, 854, 855, 856, 857, 858, 862, 863, 865, 866, 870, 871], "383": [0, 10, 11, 18, 19, 20, 21, 37], "userwarn": [0, 10, 11, 12, 13, 16, 18, 19, 20, 21, 24, 25, 28, 37, 42, 43, 66], "current": [0, 5, 10, 11, 16, 18, 19, 20, 21, 26, 28, 36, 37, 42, 43, 47, 48, 61, 62, 68, 73, 74, 90, 96, 119, 138, 183, 184, 187, 204, 205, 206, 207, 208, 209, 215, 216, 217, 218, 223, 225, 393, 395, 445, 446, 501, 510, 568, 569, 572, 575, 577, 581, 592, 593, 613, 647, 649, 650, 653, 656, 660, 691, 740, 750, 751, 795, 799, 815, 816, 824, 825, 830, 833, 834, 835, 838, 841, 842, 843, 845, 847, 849, 850, 851, 854, 855, 856, 858, 861, 862, 863, 864, 865, 868, 872, 879, 882], "39": [0, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 40, 41, 42, 43, 45, 46, 48, 59, 61, 62, 63, 64, 66, 67, 72, 73, 78, 82, 89, 95, 96, 98, 101, 105, 128, 243, 278, 280, 282, 312, 313, 316, 384, 392, 404, 412, 414, 431, 434, 541, 633, 645, 651, 654, 656, 666, 694, 701, 762, 781], "doe": [0, 5, 8, 9, 10, 11, 18, 19, 20, 21, 28, 29, 36, 37, 42, 43, 47, 60, 62, 72, 73, 74, 80, 90, 95, 96, 103, 113, 164, 291, 293, 301, 345, 386, 393, 394, 404, 405, 446, 473, 474, 546, 547, 551, 580, 648, 651, 653, 656, 658, 691, 730, 793, 820, 830, 835, 839, 841, 843, 844, 847, 850, 852, 853, 855, 856, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 874, 879, 882, 883], "support": [0, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 62, 71, 73, 74, 78, 94, 96, 97, 101, 164, 183, 187, 209, 216, 231, 240, 257, 264, 285, 286, 290, 300, 319, 345, 366, 384, 386, 389, 393, 395, 428, 446, 455, 510, 556, 568, 577, 580, 581, 598, 613, 648, 649, 650, 651, 653, 655, 656, 679, 691, 692, 693, 697, 706, 713, 793, 799, 806, 818, 824, 825, 829, 834, 838, 839, 841, 842, 843, 845, 846, 848, 851, 852, 853, 855, 857, 858, 860, 861, 863, 865, 866, 868, 870, 871, 873, 874, 882, 884], "inplac": [0, 10, 11, 12, 13, 18, 19, 20, 21, 24, 25, 26, 28, 29, 37, 42, 43, 68, 74, 90, 97, 113, 116, 554, 556, 577, 580, 581, 598, 599, 653, 660, 747, 748, 752, 757, 758, 805, 806, 811, 818, 844, 846, 852, 855, 857, 859, 862, 868], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 28, 36, 37, 42, 43, 47, 48, 68, 69, 70, 71, 74, 91, 94, 97, 118, 122, 157, 167, 168, 174, 175, 176, 177, 178, 179, 193, 196, 211, 212, 213, 214, 224, 232, 236, 580, 582, 586, 593, 598, 616, 648, 649, 650, 653, 795, 806, 811, 820, 824, 839, 841, 850, 851, 854, 855, 858, 859, 861, 862, 863, 865, 870, 871, 874, 879], "would": [0, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 26, 28, 29, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 53, 55, 63, 69, 71, 73, 92, 94, 96, 103, 129, 133, 144, 231, 392, 395, 420, 425, 479, 480, 487, 489, 491, 492, 493, 500, 505, 517, 645, 650, 724, 725, 726, 728, 730, 731, 733, 735, 800, 810, 814, 837, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 853, 855, 857, 859, 861, 862, 863, 865, 866, 868, 869, 870, 877, 879, 882], "quietli": [0, 10, 11, 18, 19, 20, 21, 28, 37, 42, 43], "new": [0, 1, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 37, 42, 43, 45, 47, 48, 49, 63, 65, 68, 73, 74, 75, 80, 81, 90, 92, 96, 97, 98, 101, 103, 104, 147, 150, 152, 153, 158, 159, 160, 165, 166, 203, 226, 246, 292, 294, 298, 351, 356, 368, 373, 389, 392, 395, 404, 428, 477, 485, 486, 500, 507, 514, 547, 563, 564, 565, 567, 570, 571, 573, 594, 595, 598, 600, 607, 610, 611, 617, 634, 637, 639, 640, 641, 648, 649, 650, 651, 653, 654, 655, 658, 660, 661, 682, 694, 701, 724, 728, 732, 745, 757, 758, 759, 811, 814, 817, 818, 824, 830, 837, 841, 842, 843, 844, 846, 847, 849, 850, 852, 853, 855, 856, 859, 861, 862, 863, 864, 865, 866, 868, 874, 876, 878, 879, 880], "when": [0, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 53, 54, 62, 64, 68, 69, 70, 72, 73, 78, 79, 82, 83, 86, 90, 92, 93, 95, 96, 101, 102, 105, 106, 109, 119, 158, 169, 240, 257, 262, 264, 280, 290, 308, 309, 317, 352, 353, 384, 389, 392, 393, 394, 398, 399, 404, 415, 428, 440, 447, 451, 462, 468, 469, 474, 519, 521, 527, 547, 550, 580, 596, 604, 611, 648, 649, 651, 653, 655, 656, 657, 658, 660, 662, 663, 666, 668, 680, 682, 699, 704, 715, 716, 717, 728, 751, 752, 761, 762, 763, 766, 767, 769, 770, 782, 784, 786, 788, 798, 801, 813, 814, 815, 816, 817, 824, 834, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 871, 872, 873, 879, 882], "lead": [0, 10, 11, 12, 13, 18, 19, 20, 21, 28, 37, 42, 43, 78, 90, 101, 119, 264, 393, 457, 598, 651, 653, 656, 703, 706, 800, 850, 852, 864, 866, 872, 876], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 28, 37, 42, 43, 69, 73, 80, 92, 96, 103, 144, 156, 212, 224, 230, 232, 236, 395, 404, 479, 480, 487, 489, 491, 492, 493, 500, 517, 547, 593, 598, 622, 648, 650, 653, 655, 658, 680, 681, 724, 725, 726, 728, 730, 731, 733, 735, 830, 834, 850, 851, 861, 862, 868, 870, 872, 879, 882], "overhead": [0, 10, 11, 12, 13, 18, 19, 20, 21, 28, 37, 38, 42, 43, 47, 48, 50, 872, 879], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 37, 38, 42, 43, 45, 47, 48, 50, 52, 54, 59, 60, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 80, 82, 84, 85, 86, 90, 92, 93, 95, 96, 97, 98, 100, 101, 103, 105, 107, 109, 113, 114, 115, 116, 117, 118, 132, 142, 145, 148, 153, 155, 156, 158, 160, 162, 163, 164, 166, 169, 170, 171, 182, 185, 230, 237, 238, 239, 240, 242, 244, 248, 250, 253, 257, 263, 264, 270, 290, 292, 294, 297, 299, 300, 301, 310, 318, 330, 344, 345, 346, 347, 348, 349, 352, 353, 355, 363, 379, 384, 386, 389, 392, 393, 394, 395, 398, 400, 402, 404, 411, 412, 413, 429, 430, 431, 432, 434, 435, 436, 437, 439, 446, 451, 452, 462, 463, 464, 465, 466, 468, 469, 471, 474, 484, 486, 501, 502, 510, 511, 514, 519, 521, 531, 533, 538, 539, 540, 541, 542, 543, 544, 550, 587, 643, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 662, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 685, 686, 687, 688, 690, 691, 692, 693, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 710, 712, 722, 725, 726, 728, 729, 731, 732, 737, 738, 753, 763, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 795, 798, 799, 800, 806, 814, 829, 842, 843, 846, 847, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 879], "appli": [0, 3, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 28, 34, 37, 40, 42, 43, 47, 48, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 389, 390, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 428, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 645, 649, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 706, 710, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 746, 749, 752, 753, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 800, 801, 810, 814, 817, 841, 842, 843, 846, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 865, 866, 868, 872, 879, 883], "view": [0, 5, 10, 11, 12, 13, 18, 19, 20, 21, 28, 37, 42, 43, 48, 73, 80, 96, 118, 150, 161, 395, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 514, 517, 573, 648, 653, 658, 724, 725, 726, 728, 730, 731, 733, 735, 842, 843, 854, 882], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 47, 48, 53, 62, 65, 66, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 114, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 169, 170, 171, 172, 197, 213, 229, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 345, 346, 348, 351, 352, 353, 354, 355, 357, 358, 359, 363, 367, 368, 373, 374, 376, 378, 379, 380, 386, 389, 390, 392, 393, 394, 395, 398, 399, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 421, 424, 426, 428, 429, 430, 431, 436, 437, 438, 440, 445, 447, 449, 451, 452, 459, 461, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 487, 489, 490, 491, 492, 493, 496, 500, 502, 507, 508, 509, 510, 511, 512, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 587, 594, 595, 599, 609, 610, 611, 613, 615, 617, 618, 631, 632, 635, 637, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 678, 679, 682, 685, 686, 687, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 715, 716, 717, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 752, 753, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 813, 814, 816, 817, 824, 830, 834, 836, 837, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 872, 873, 879], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 489, 547, 570, 571, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 682, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 882], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 60, 61, 63, 73, 88, 96, 111, 257, 290, 395, 489, 651, 816, 835, 837, 838, 841, 842, 843, 848, 851, 854, 856, 858, 859, 860, 861, 865, 868, 873, 877], "control": [0, 10, 11, 18, 19, 20, 21, 26, 28, 37, 42, 43, 48, 55, 73, 96, 164, 313, 345, 384, 386, 392, 395, 416, 417, 418, 484, 511, 598, 648, 653, 656, 689, 849, 850, 851, 860, 861, 862, 863, 868, 872, 874, 879, 882], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 59, 61, 63, 65, 835, 837, 839, 840, 841, 842, 845, 847, 848, 853, 855, 856, 860, 862, 864, 866, 868, 872, 873, 879, 880, 882], "manag": [0, 10, 11, 18, 19, 20, 21, 27, 28, 36, 37, 40, 42, 43, 47, 598, 622, 653, 837, 847, 850, 851, 861, 864, 872], "consid": [0, 8, 9, 10, 11, 18, 19, 20, 21, 28, 29, 37, 42, 43, 52, 53, 73, 78, 84, 96, 101, 134, 164, 285, 286, 345, 351, 356, 368, 386, 389, 393, 404, 447, 451, 462, 540, 645, 648, 651, 656, 664, 689, 699, 771, 772, 773, 774, 800, 813, 846, 850, 858, 860, 866, 868, 879, 883], "do": [0, 2, 4, 5, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 48, 59, 61, 63, 73, 74, 90, 96, 97, 257, 290, 299, 392, 394, 395, 404, 438, 474, 486, 547, 550, 580, 651, 653, 660, 740, 747, 750, 751, 752, 757, 800, 830, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 868, 870, 872, 874, 883], "set_inplace_mod": [0, 10, 11, 18, 19, 20, 21, 28, 37, 42, 43, 622, 653], "strict": [0, 10, 11, 18, 19, 20, 21, 28, 37, 42, 43, 598, 622, 653], "should": [0, 1, 6, 7, 10, 11, 16, 18, 19, 20, 21, 26, 27, 28, 29, 37, 40, 41, 42, 43, 45, 46, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 129, 133, 141, 156, 158, 162, 163, 171, 196, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 319, 330, 346, 352, 353, 365, 369, 370, 371, 372, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 416, 417, 418, 420, 425, 436, 451, 462, 468, 475, 500, 501, 502, 526, 527, 540, 541, 542, 557, 575, 580, 632, 634, 637, 639, 640, 641, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 710, 712, 713, 728, 744, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 779, 780, 781, 782, 783, 784, 785, 787, 788, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 882], "rais": [0, 5, 10, 11, 18, 19, 20, 21, 28, 37, 42, 43, 62, 63, 69, 73, 74, 82, 84, 87, 90, 92, 96, 97, 103, 105, 107, 110, 144, 171, 260, 295, 352, 353, 363, 389, 392, 394, 395, 399, 404, 426, 437, 474, 479, 480, 487, 489, 491, 492, 493, 500, 510, 517, 527, 546, 547, 556, 580, 598, 600, 611, 613, 619, 623, 649, 651, 653, 656, 658, 662, 663, 664, 666, 667, 696, 698, 712, 724, 725, 726, 728, 730, 731, 732, 733, 735, 761, 762, 763, 769, 774, 782, 784, 789, 790, 793, 800, 818, 836, 843, 845, 847, 850, 851, 854, 861, 862, 866, 867, 873], "error": [0, 5, 10, 11, 18, 19, 20, 21, 26, 28, 29, 37, 40, 41, 42, 43, 45, 46, 53, 64, 66, 72, 73, 77, 90, 95, 96, 100, 126, 259, 307, 352, 353, 360, 361, 389, 393, 394, 395, 404, 405, 462, 468, 470, 472, 510, 547, 551, 598, 645, 651, 653, 655, 656, 666, 685, 704, 707, 782, 784, 800, 818, 833, 837, 840, 841, 842, 843, 845, 846, 847, 850, 851, 852, 856, 857, 862, 865, 866, 867, 872, 882], "whenev": [0, 10, 11, 18, 19, 20, 21, 28, 37, 42, 43, 814, 843, 847, 850, 854, 861, 864, 865, 867], "attempt": [0, 8, 9, 10, 11, 18, 19, 20, 21, 26, 27, 28, 37, 40, 41, 42, 43, 45, 46, 61, 63, 66, 842, 867, 872], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 37, 40, 41, 42, 43, 45, 46, 61, 62, 63, 66, 833, 842, 843, 867, 879], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 18, 19, 24, 25, 26, 30, 36, 38, 39, 40, 42, 45, 46, 47, 48, 50, 51, 52, 61, 64, 65, 66, 69, 72, 73, 78, 80, 82, 83, 84, 86, 92, 95, 96, 97, 101, 103, 105, 107, 109, 113, 114, 118, 119, 138, 139, 154, 155, 164, 195, 203, 213, 240, 245, 247, 249, 250, 251, 252, 258, 264, 265, 266, 267, 268, 269, 275, 276, 277, 282, 283, 284, 286, 287, 290, 293, 295, 306, 307, 319, 329, 330, 345, 347, 348, 349, 351, 364, 366, 367, 368, 374, 378, 379, 384, 386, 389, 392, 393, 394, 395, 402, 404, 415, 445, 446, 447, 449, 453, 475, 485, 487, 491, 498, 501, 504, 505, 508, 516, 527, 529, 533, 541, 542, 543, 550, 555, 647, 648, 649, 650, 651, 653, 655, 656, 658, 659, 660, 663, 664, 665, 666, 682, 687, 690, 691, 692, 694, 696, 701, 703, 704, 706, 708, 710, 712, 728, 729, 732, 733, 737, 738, 739, 740, 741, 750, 751, 753, 765, 766, 767, 771, 772, 773, 776, 777, 779, 780, 795, 813, 814, 815, 816, 818, 824, 838, 840, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 856, 857, 858, 859, 861, 862, 865, 868, 870, 871, 873, 879, 882, 883], "datafram": [0, 882], "allow": [0, 8, 9, 26, 29, 43, 47, 48, 59, 73, 86, 96, 109, 154, 295, 393, 404, 465, 543, 547, 590, 648, 651, 653, 665, 666, 777, 784, 798, 799, 800, 801, 815, 816, 830, 834, 835, 841, 843, 846, 847, 850, 854, 856, 858, 859, 860, 861, 862, 863, 865, 868, 870, 872, 874, 876, 879, 882, 884], "u": [0, 4, 5, 16, 22, 23, 61, 63, 65, 66, 73, 78, 92, 96, 101, 113, 114, 155, 393, 457, 464, 466, 656, 660, 686, 692, 693, 706, 748, 842, 843, 844, 849, 856, 859, 861, 862, 863, 864, 865, 866, 868, 872], "leverag": [0, 16, 17, 42, 47, 48, 842, 861, 876, 877, 882, 884], "explor": [0, 8, 9, 10, 11, 16, 17, 26, 29, 30, 32, 36, 40, 42, 47, 48, 53, 54, 55, 841, 842, 843, 850, 855, 868, 882], "expect": [0, 4, 5, 12, 13, 22, 23, 27, 28, 38, 42, 47, 48, 50, 63, 64, 66, 73, 78, 79, 96, 102, 196, 264, 308, 392, 394, 415, 437, 474, 554, 649, 651, 653, 655, 657, 680, 701, 715, 813, 814, 842, 843, 845, 850, 851, 854, 856, 859, 861, 863, 865, 868, 872, 879], "contain": [0, 18, 19, 36, 47, 48, 62, 67, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 180, 182, 183, 184, 185, 188, 189, 190, 192, 194, 197, 214, 216, 217, 218, 223, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 386, 389, 391, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 599, 602, 604, 609, 610, 611, 612, 613, 615, 617, 618, 625, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 747, 748, 749, 752, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 805, 806, 814, 815, 816, 818, 819, 824, 829, 830, 834, 836, 838, 839, 841, 842, 844, 845, 846, 847, 848, 850, 852, 853, 855, 857, 858, 859, 860, 861, 863, 865, 867, 868, 870, 872, 873, 874, 879, 882, 883], "variou": [0, 8, 9, 16, 29, 39, 51, 53, 59, 841, 842, 843, 845, 850, 853, 854, 857, 859, 860, 862, 863, 864, 865, 873, 882, 884], "among": [0, 8, 9, 90, 849, 865, 868, 876, 882], "pattern": [0, 73, 74, 96, 97, 393, 457, 563, 564, 565, 653, 850, 853, 864], "signal": [0, 73, 96, 336, 386, 392, 406, 407, 408, 409, 414, 415, 424, 440, 814, 882, 884], "credit_card_data": 0, "read_csv": [0, 29, 63], "creditcard": 0, "csv": [0, 29, 63], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 61, 62, 64, 70, 71, 78, 90, 94, 101, 118, 180, 181, 182, 185, 213, 214, 215, 218, 224, 229, 232, 236, 395, 507, 554, 572, 593, 612, 649, 650, 653, 656, 660, 713, 742, 798, 813, 814, 829, 835, 836, 837, 840, 841, 842, 844, 845, 850, 851, 855, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 874, 882], "sens": [0, 845, 850, 852, 862, 864], "re": [0, 26, 29, 34, 37, 38, 39, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 64, 66, 73, 74, 83, 96, 106, 116, 230, 336, 386, 393, 395, 467, 503, 504, 563, 650, 653, 656, 658, 663, 708, 729, 768, 770, 837, 838, 841, 842, 843, 844, 845, 848, 850, 855, 860, 861, 862, 863, 864, 866, 868, 870, 872, 876, 880, 882], "work": [0, 1, 8, 9, 26, 41, 43, 47, 48, 59, 60, 62, 66, 68, 73, 96, 113, 404, 550, 656, 660, 707, 747, 748, 752, 757, 758, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 863, 865, 866, 869, 870, 871, 873, 877, 879, 882, 884], "help": [0, 1, 34, 63, 65, 70, 553, 598, 653, 666, 787, 813, 835, 837, 838, 841, 842, 846, 847, 848, 849, 850, 852, 856, 858, 859, 861, 862, 865, 866, 874, 877, 882], "few": [0, 8, 9, 10, 11, 16, 45, 46, 840, 841, 843, 849, 850, 851, 857, 858, 860, 861, 863, 865, 868, 871, 876, 882], "entri": [0, 73, 80, 90, 96, 103, 107, 114, 154, 393, 395, 399, 463, 490, 492, 493, 526, 648, 658, 660, 730, 753, 771, 842, 865, 882], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 66, 69, 70, 73, 74, 78, 80, 82, 84, 92, 93, 96, 97, 101, 103, 105, 107, 113, 114, 128, 131, 143, 144, 155, 157, 172, 211, 228, 229, 230, 319, 336, 384, 386, 392, 393, 394, 395, 398, 399, 402, 404, 415, 428, 452, 459, 461, 466, 474, 486, 502, 514, 519, 527, 528, 533, 540, 587, 598, 632, 635, 645, 648, 649, 650, 653, 654, 655, 656, 657, 658, 662, 682, 690, 696, 706, 710, 716, 728, 732, 761, 762, 763, 771, 795, 798, 799, 800, 801, 806, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 882, 883, 884], "give": [0, 12, 13, 37, 49, 59, 73, 77, 96, 100, 196, 382, 391, 392, 435, 439, 649, 655, 658, 668, 669, 670, 671, 673, 675, 677, 728, 813, 842, 843, 844, 847, 850, 852, 853, 855, 856, 857, 865, 882], "insight": 0, "structur": [0, 29, 48, 90, 93, 119, 182, 185, 560, 653, 657, 660, 718, 744, 753, 841, 843, 846, 849, 858, 863, 864, 865, 866, 882, 884], "type": [0, 6, 7, 22, 23, 26, 30, 32, 36, 40, 42, 47, 48, 53, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 795, 798, 799, 800, 801, 805, 806, 810, 813, 814, 815, 816, 821, 824, 827, 829, 830, 831, 834, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 854, 857, 859, 861, 863, 865, 866, 868, 870, 879, 880, 882, 883], "present": [0, 27, 40, 62, 73, 86, 90, 96, 109, 355, 389, 398, 519, 520, 521, 666, 784, 841, 842, 843, 849, 850, 851, 857, 861, 876], "initi": [0, 6, 7, 8, 9, 18, 19, 47, 64, 73, 77, 86, 90, 96, 100, 109, 119, 393, 404, 451, 462, 468, 548, 549, 655, 666, 680, 681, 784, 811, 814, 815, 816, 818, 819, 834, 835, 843, 847, 850, 851, 855, 863, 865, 870, 879, 882], "qualiti": [0, 843], "below": [0, 2, 24, 25, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 52, 53, 54, 59, 62, 63, 64, 69, 73, 78, 96, 101, 109, 162, 163, 164, 264, 274, 297, 345, 346, 355, 386, 389, 395, 510, 648, 651, 656, 690, 710, 788, 837, 839, 841, 842, 844, 845, 849, 850, 851, 852, 854, 855, 858, 861, 862, 863, 865, 866, 867, 868, 870, 871, 879], "head": [0, 8, 9, 10, 11, 26, 48, 64, 65, 655, 682, 814, 835, 840, 842, 862], "method": [0, 26, 29, 36, 47, 48, 63, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 169, 170, 171, 172, 182, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 389, 392, 393, 394, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 560, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 648, 649, 651, 653, 654, 656, 657, 660, 663, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 707, 710, 711, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 751, 752, 753, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 795, 806, 812, 813, 814, 815, 816, 841, 843, 845, 846, 850, 851, 852, 853, 857, 865, 866, 870, 871, 872, 879, 883], "five": 0, "row": [0, 61, 73, 96, 114, 149, 164, 345, 386, 393, 395, 402, 404, 452, 464, 493, 499, 518, 533, 539, 540, 648, 656, 662, 663, 697, 705, 706, 711, 760, 769, 813], "v1": 0, "v2": 0, "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 882], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 29, 79, 102, 232, 650, 657, 715, 716, 717, 830, 842, 851, 863], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 78, 656, 694], "62": [0, 29, 59, 61, 67, 89, 95, 96, 105, 129, 275, 303, 651, 661, 662, 759, 761, 763], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 59, 66, 72, 98, 105, 238, 280, 392, 414, 424, 637, 651, 654, 656, 697, 698, 762, 865], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 296, 651], "66": [0, 5, 40, 42, 43, 48, 59, 61, 63, 86, 96, 97, 98, 392, 424, 563, 564, 637, 653, 654, 656, 666, 701, 781], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 37, 92, 93, 96, 153, 185, 473, 566, 648, 653, 830, 865], "50": [0, 17, 26, 27, 28, 29, 47, 59, 63, 73, 86, 95, 96, 97, 256, 296, 374, 389, 392, 393, 395, 421, 445, 453, 507, 565, 571, 578, 579, 595, 610, 651, 653, 656, 660, 663, 666, 695, 701, 712, 741, 743, 769, 781, 798, 801, 860, 879], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 29, 40, 42, 43, 48, 59, 61, 62, 66, 67, 72, 73, 95, 96, 97, 100, 105, 129, 134, 155, 251, 282, 290, 392, 395, 404, 413, 414, 484, 541, 558, 645, 648, 651, 653, 762, 763], "column": [0, 29, 63, 73, 78, 96, 101, 113, 114, 149, 164, 345, 386, 393, 395, 402, 404, 446, 452, 464, 485, 490, 492, 493, 497, 499, 533, 539, 540, 648, 656, 691, 692, 697, 703, 705, 706, 711, 798, 813], "It": [0, 1, 4, 5, 10, 11, 27, 28, 29, 37, 40, 42, 43, 47, 48, 49, 50, 59, 60, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 169, 171, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 346, 352, 353, 354, 355, 360, 361, 365, 367, 369, 370, 371, 372, 376, 384, 386, 389, 392, 393, 394, 395, 398, 399, 404, 405, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 431, 434, 436, 441, 443, 444, 452, 453, 458, 459, 460, 461, 469, 470, 471, 472, 473, 475, 476, 486, 489, 494, 503, 504, 505, 506, 508, 510, 514, 515, 519, 522, 523, 525, 526, 527, 529, 530, 540, 541, 542, 543, 551, 558, 559, 563, 564, 565, 570, 571, 580, 594, 595, 596, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 705, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 739, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 774, 775, 778, 779, 780, 783, 785, 786, 788, 789, 790, 813, 814, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 859, 861, 862, 863, 864, 865, 866, 867, 868, 871, 882, 883], "just": [0, 8, 9, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 59, 61, 63, 73, 78, 86, 101, 113, 116, 164, 345, 386, 393, 461, 648, 656, 666, 699, 781, 806, 814, 836, 839, 842, 843, 845, 847, 850, 851, 852, 853, 855, 858, 859, 861, 862, 863, 865, 871, 872, 876, 882, 883], "verifi": [0, 8, 9, 18, 19, 20, 29, 42, 342, 343, 386, 841, 850, 851, 862, 865, 866], "consist": [0, 8, 9, 10, 11, 24, 25, 26, 28, 29, 42, 43, 47, 48, 86, 90, 257, 264, 290, 392, 393, 436, 446, 651, 656, 666, 691, 692, 781, 815, 816, 845, 846, 850, 856, 861, 871, 883, 884], "complet": [0, 17, 40, 45, 46, 48, 78, 90, 101, 656, 703, 799, 836, 841, 842, 843, 845, 846, 849, 852, 854, 858, 862, 863, 865, 868], "By": [0, 37, 59, 66, 73, 79, 80, 86, 87, 96, 102, 103, 109, 110, 304, 350, 352, 353, 366, 373, 386, 389, 392, 394, 395, 402, 404, 415, 473, 474, 510, 514, 533, 540, 543, 598, 651, 653, 656, 657, 658, 666, 667, 687, 712, 715, 727, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 842, 847, 850, 852, 854, 858, 860, 861, 862, 870, 877, 879, 884], "tail": 0, "last": [0, 5, 15, 43, 47, 50, 69, 73, 77, 78, 79, 80, 83, 85, 86, 87, 90, 92, 96, 100, 101, 102, 103, 108, 109, 110, 114, 118, 154, 155, 158, 213, 330, 358, 386, 389, 392, 393, 394, 395, 402, 404, 421, 426, 436, 437, 438, 449, 473, 491, 501, 504, 510, 514, 533, 541, 542, 648, 650, 655, 656, 657, 658, 663, 665, 666, 667, 681, 682, 687, 690, 701, 710, 712, 716, 717, 722, 725, 728, 729, 730, 732, 766, 767, 775, 777, 778, 779, 780, 789, 790, 814, 824, 843, 845, 847, 848, 850, 852, 861, 863, 865, 868, 870, 872, 882], "well": [0, 26, 29, 47, 48, 61, 62, 63, 97, 394, 473, 576, 653, 656, 705, 800, 838, 841, 843, 848, 850, 854, 861, 862, 863, 865, 877, 882, 883, 884], "readi": [0, 30, 32, 37, 38, 39, 49, 50, 51, 52, 53, 54, 61, 63, 841, 842], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 29, 59, 63, 97, 611, 656, 666, 701, 781], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 26, 29, 48, 59, 61, 72, 73, 78, 86, 95, 96, 97, 100, 101, 105, 118, 252, 260, 275, 277, 290, 300, 301, 304, 366, 369, 389, 392, 404, 411, 413, 414, 424, 429, 430, 431, 435, 439, 541, 563, 564, 651, 653, 656, 660, 666, 669, 690, 697, 701, 741, 752, 761, 762, 763, 779, 781, 795, 854], "79": [0, 59, 61, 73, 74, 96, 97, 100, 105, 118, 257, 392, 414, 424, 435, 558, 559, 651, 653, 763], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 29, 59, 72, 73, 74, 78, 95, 96, 97, 100, 105, 118, 255, 260, 300, 301, 303, 310, 321, 325, 384, 404, 435, 541, 563, 564, 610, 636, 638, 651, 653, 654, 656, 694, 763], "88": [0, 5, 29, 59, 98, 105, 128, 404, 541, 637, 645, 654, 656, 662, 666, 701, 763, 781], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 61, 854], "understand": [0, 34, 35, 36, 40, 59, 65, 839, 840, 841, 842, 843, 844, 845, 848, 852, 853, 857, 863, 864, 869], "composit": [0, 36, 47, 183, 184, 216, 217, 309, 393, 453, 568, 569, 649, 650, 651, 653, 799, 801, 841, 844, 846, 847, 849, 850, 851, 859, 861, 862, 863, 865, 868, 870, 871, 872, 874, 879, 883], "crucial": [0, 851, 860, 877], "proce": [0, 29, 841, 842], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 24, 25, 26, 30, 32, 36, 37, 38, 45, 46, 49, 50, 53, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 172, 173, 188, 192, 196, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 345, 346, 352, 353, 355, 358, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 437, 438, 447, 452, 469, 490, 501, 510, 514, 519, 520, 521, 540, 543, 546, 547, 548, 552, 562, 563, 564, 565, 566, 570, 574, 576, 578, 582, 584, 585, 603, 609, 611, 618, 619, 626, 632, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 743, 746, 747, 749, 750, 757, 759, 763, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 883, 884], "info": [0, 5, 26, 61, 833, 834, 835, 848, 853, 856], "concis": 0, "summari": [0, 90, 186, 560, 649, 653, 842, 843, 865], "includ": [0, 1, 8, 9, 16, 26, 29, 38, 50, 55, 69, 72, 73, 74, 78, 83, 86, 87, 90, 92, 95, 96, 97, 101, 106, 109, 110, 142, 143, 144, 154, 155, 157, 164, 237, 261, 265, 266, 267, 270, 272, 275, 283, 291, 304, 309, 331, 334, 335, 336, 339, 345, 348, 350, 352, 353, 357, 358, 359, 362, 363, 364, 365, 367, 369, 370, 372, 373, 374, 375, 378, 379, 386, 389, 392, 395, 404, 411, 412, 413, 443, 446, 448, 492, 493, 495, 498, 500, 503, 506, 528, 530, 531, 539, 543, 545, 546, 548, 549, 550, 576, 631, 648, 651, 653, 655, 656, 660, 662, 663, 666, 667, 680, 691, 711, 713, 740, 763, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 801, 813, 814, 817, 820, 832, 834, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 868, 870, 879, 882, 884], "number": [0, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 86, 87, 90, 92, 93, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107, 109, 110, 113, 114, 116, 118, 119, 122, 142, 145, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 170, 175, 176, 177, 178, 179, 181, 182, 185, 188, 189, 190, 192, 194, 197, 221, 222, 223, 237, 238, 239, 240, 241, 243, 245, 246, 253, 255, 257, 258, 260, 262, 263, 264, 270, 271, 272, 274, 278, 280, 288, 289, 290, 291, 292, 293, 295, 297, 299, 300, 301, 303, 304, 308, 310, 336, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 368, 373, 377, 386, 389, 392, 393, 394, 395, 398, 404, 426, 437, 440, 443, 446, 450, 451, 452, 462, 466, 468, 469, 479, 480, 481, 501, 502, 503, 504, 505, 506, 508, 510, 512, 514, 516, 519, 520, 521, 538, 540, 541, 542, 543, 549, 567, 574, 592, 609, 610, 611, 618, 631, 632, 646, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 662, 663, 664, 666, 667, 668, 675, 676, 678, 680, 682, 687, 691, 692, 693, 699, 704, 706, 710, 711, 712, 715, 716, 721, 723, 724, 726, 727, 729, 730, 732, 734, 736, 737, 738, 739, 760, 764, 769, 771, 772, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 806, 813, 814, 817, 830, 834, 842, 843, 849, 850, 851, 852, 859, 860, 861, 865, 866, 867, 868, 870, 875, 879], "presenc": [0, 793, 849, 861], "null": [0, 842, 855], "each": [0, 22, 23, 26, 27, 28, 29, 38, 39, 40, 47, 48, 50, 51, 52, 54, 61, 67, 69, 70, 72, 73, 74, 75, 77, 78, 80, 83, 84, 86, 90, 93, 95, 96, 97, 98, 100, 101, 103, 106, 107, 109, 113, 114, 116, 118, 119, 127, 128, 130, 131, 132, 134, 138, 145, 156, 170, 182, 185, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 314, 315, 320, 322, 323, 324, 326, 327, 328, 333, 344, 347, 348, 349, 355, 363, 367, 371, 376, 379, 384, 386, 389, 392, 393, 395, 398, 399, 402, 404, 411, 412, 413, 416, 417, 418, 421, 429, 430, 431, 432, 435, 437, 438, 439, 446, 447, 452, 461, 462, 466, 468, 479, 480, 481, 485, 486, 487, 492, 493, 495, 496, 498, 500, 501, 502, 505, 507, 516, 517, 524, 526, 533, 538, 539, 540, 541, 542, 543, 552, 555, 563, 570, 571, 587, 612, 632, 634, 635, 637, 639, 640, 641, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 686, 687, 688, 691, 692, 693, 696, 698, 699, 700, 702, 704, 705, 706, 711, 716, 723, 727, 729, 730, 732, 734, 736, 746, 753, 760, 769, 771, 772, 774, 780, 781, 788, 795, 798, 800, 806, 814, 817, 818, 819, 830, 834, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 876, 879, 883, 884], "invalu": [0, 16, 17], "plan": [0, 873], "right": [0, 62, 73, 78, 90, 96, 101, 119, 136, 137, 249, 251, 304, 367, 389, 392, 393, 395, 427, 457, 463, 464, 466, 492, 563, 647, 651, 653, 656, 665, 706, 711, 777, 798, 837, 841, 842, 843, 844, 845, 852, 855, 868, 879], "format": [0, 1, 42, 43, 47, 48, 59, 61, 62, 63, 71, 74, 77, 86, 89, 90, 91, 94, 100, 116, 134, 180, 214, 392, 393, 403, 434, 467, 536, 563, 645, 649, 650, 653, 655, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 781, 791, 792, 793, 810, 820, 842, 843, 844, 850, 851, 852, 853, 854, 862, 864, 882, 883, 884], "lt": [0, 4, 5, 8, 9, 10, 11, 16, 24, 25, 26, 30, 32, 36, 40, 41, 42, 43, 48, 59, 61, 63, 119], "core": [0, 5, 8, 9, 26, 40, 41, 43, 45, 46, 61, 62, 63, 65, 66, 73, 96, 113, 116, 221, 393, 451, 462, 467, 468, 650, 842, 851, 855, 865, 882, 883, 884], "frame": [0, 63, 73, 96, 336, 386, 392, 440, 827, 882], "gt": [0, 4, 5, 8, 9, 10, 11, 15, 16, 24, 25, 26, 30, 32, 36, 40, 41, 42, 43, 48, 59, 61, 63, 66, 119, 863, 870], "rangeindex": 0, "284807": 0, "total": [0, 5, 61, 63, 73, 86, 90, 96, 109, 119, 151, 232, 347, 348, 349, 357, 386, 389, 394, 469, 648, 650, 663, 666, 769, 786, 788, 830, 837, 842, 843, 850, 851, 852, 865, 868, 872], "non": [0, 10, 11, 38, 50, 70, 72, 73, 78, 82, 83, 86, 87, 93, 95, 96, 101, 105, 106, 109, 110, 151, 169, 187, 196, 265, 285, 286, 291, 352, 353, 357, 364, 377, 389, 392, 393, 395, 404, 436, 447, 451, 457, 480, 481, 543, 546, 648, 649, 651, 656, 660, 662, 663, 666, 667, 687, 688, 697, 699, 706, 708, 712, 713, 753, 762, 766, 767, 768, 769, 782, 783, 784, 785, 786, 788, 789, 790, 798, 813, 815, 816, 818, 846, 849, 852, 870, 879, 882], "count": [0, 5, 65, 73, 80, 84, 87, 92, 96, 103, 107, 110, 151, 223, 357, 389, 395, 404, 510, 514, 516, 538, 543, 648, 650, 656, 658, 664, 667, 687, 712, 722, 725, 771, 772, 789, 790, 848, 849, 852], "dtype": [0, 4, 5, 12, 13, 16, 24, 25, 26, 29, 32, 38, 40, 41, 42, 43, 48, 59, 62, 69, 70, 73, 74, 77, 78, 82, 83, 86, 90, 92, 93, 95, 96, 97, 100, 101, 105, 106, 109, 118, 121, 122, 123, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 225, 252, 256, 288, 289, 291, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 344, 350, 355, 357, 373, 386, 389, 392, 393, 394, 395, 399, 404, 414, 424, 436, 437, 440, 463, 469, 474, 485, 510, 526, 527, 528, 529, 530, 540, 541, 542, 543, 546, 549, 550, 567, 568, 569, 571, 580, 589, 617, 648, 649, 650, 651, 653, 655, 656, 659, 662, 663, 665, 666, 667, 671, 678, 697, 713, 738, 739, 761, 762, 763, 766, 767, 768, 777, 778, 779, 780, 783, 785, 787, 789, 790, 793, 795, 798, 800, 801, 813, 814, 815, 816, 817, 819, 839, 845, 847, 850, 851, 852, 854, 855, 858, 859, 861, 862, 863, 865, 866, 870], "float64": [0, 16, 40, 70, 73, 82, 86, 92, 93, 95, 96, 97, 105, 109, 142, 151, 152, 169, 172, 176, 177, 182, 183, 186, 187, 192, 193, 197, 199, 200, 206, 209, 291, 363, 389, 394, 404, 469, 474, 540, 589, 648, 649, 653, 656, 662, 692, 693, 697, 713, 762, 763, 780, 795, 798, 799, 850, 863, 865], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 29, 36, 38, 40, 42, 43, 48, 59, 61, 62, 63, 70, 72, 73, 74, 77, 78, 82, 86, 93, 95, 96, 97, 100, 101, 103, 104, 105, 109, 118, 119, 185, 240, 242, 247, 251, 252, 255, 257, 258, 259, 277, 290, 293, 300, 303, 310, 311, 334, 335, 366, 369, 370, 386, 389, 392, 395, 404, 411, 412, 413, 414, 416, 420, 421, 429, 430, 434, 435, 436, 437, 439, 484, 485, 487, 491, 496, 514, 517, 530, 541, 547, 548, 549, 559, 563, 564, 595, 601, 610, 624, 651, 653, 655, 656, 658, 660, 661, 662, 663, 664, 666, 669, 673, 678, 679, 690, 692, 694, 697, 701, 705, 707, 708, 710, 712, 725, 729, 731, 733, 735, 752, 759, 761, 762, 763, 770, 771, 779, 780, 781, 785, 787, 798, 842, 847, 849, 850, 852, 860], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 36, 40, 42, 43, 48, 59, 61, 63, 67, 72, 73, 77, 78, 82, 86, 95, 96, 97, 98, 100, 103, 105, 109, 118, 134, 185, 215, 240, 255, 264, 275, 295, 304, 366, 373, 380, 389, 392, 395, 413, 414, 424, 435, 439, 484, 485, 487, 491, 496, 517, 530, 541, 542, 558, 563, 564, 579, 601, 610, 633, 645, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 663, 664, 666, 669, 670, 678, 679, 690, 694, 701, 705, 707, 710, 735, 739, 752, 761, 762, 763, 770, 771, 779, 780, 781, 849, 850, 852, 862], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 18, 19, 24, 25, 26, 27, 28, 29, 45, 48, 59, 61, 62, 63, 66, 72, 73, 74, 78, 82, 86, 92, 93, 95, 96, 97, 100, 101, 103, 105, 109, 119, 153, 182, 240, 247, 251, 257, 259, 268, 275, 276, 281, 282, 290, 299, 300, 301, 366, 380, 389, 390, 392, 393, 395, 404, 411, 412, 429, 431, 434, 435, 439, 445, 487, 491, 496, 517, 541, 559, 563, 564, 567, 578, 579, 604, 610, 627, 648, 649, 651, 653, 655, 656, 658, 660, 662, 663, 664, 666, 669, 679, 690, 693, 694, 695, 701, 707, 708, 729, 735, 740, 761, 762, 769, 771, 780, 781, 795, 842, 852, 860], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 18, 19, 20, 26, 28, 29, 40, 42, 43, 48, 59, 61, 63, 66, 67, 73, 78, 89, 95, 96, 97, 98, 100, 101, 105, 119, 128, 129, 155, 240, 257, 282, 290, 321, 329, 380, 386, 392, 395, 411, 412, 420, 421, 424, 425, 429, 430, 435, 439, 491, 564, 579, 633, 635, 645, 648, 651, 653, 654, 655, 656, 660, 662, 669, 678, 679, 690, 694, 748, 761, 762, 763, 765, 849], "v17": 0, "18": [0, 4, 5, 20, 26, 27, 28, 29, 40, 42, 43, 45, 46, 48, 59, 61, 63, 72, 73, 82, 95, 96, 97, 100, 101, 105, 109, 129, 252, 257, 299, 303, 312, 313, 366, 384, 389, 392, 395, 414, 420, 424, 425, 429, 435, 439, 491, 609, 645, 651, 656, 662, 666, 673, 690, 696, 701, 708, 761, 762, 763, 780, 781, 785, 849, 850, 852], "v18": 0, "19": [0, 4, 5, 26, 27, 28, 40, 41, 42, 43, 48, 59, 61, 62, 63, 66, 72, 73, 82, 95, 96, 100, 101, 105, 243, 252, 280, 290, 307, 392, 393, 395, 404, 413, 414, 425, 429, 435, 439, 445, 450, 491, 541, 651, 656, 660, 662, 665, 690, 697, 710, 751, 761, 762, 763, 778, 852], "v19": 0, "20": [0, 4, 18, 19, 20, 21, 26, 27, 29, 32, 48, 59, 61, 62, 63, 66, 72, 73, 74, 77, 82, 86, 95, 96, 97, 100, 101, 105, 109, 252, 256, 260, 296, 300, 304, 321, 366, 368, 370, 389, 392, 395, 411, 413, 429, 435, 439, 484, 507, 563, 570, 571, 573, 595, 599, 610, 651, 653, 656, 662, 663, 666, 669, 670, 681, 690, 695, 697, 701, 708, 761, 769, 770, 779, 780, 781, 785, 787, 868], "v20": 0, "22": [0, 5, 29, 40, 42, 43, 48, 59, 61, 63, 66, 67, 72, 73, 74, 82, 86, 89, 96, 97, 100, 105, 129, 134, 252, 260, 321, 325, 384, 392, 393, 394, 395, 400, 404, 411, 412, 414, 429, 430, 431, 435, 439, 445, 469, 484, 531, 541, 564, 595, 631, 645, 651, 655, 656, 660, 663, 666, 678, 679, 690, 695, 701, 705, 748, 758, 761, 762, 763, 770, 780, 781, 842, 849, 854], "26": [0, 5, 15, 26, 40, 42, 43, 46, 48, 59, 61, 63, 66, 72, 73, 81, 82, 96, 97, 98, 105, 252, 257, 303, 392, 393, 414, 450, 460, 578, 633, 651, 653, 654, 655, 656, 660, 661, 666, 677, 690, 701, 708, 741, 759, 761, 762, 781], "27": [0, 15, 26, 27, 29, 59, 61, 66, 72, 73, 78, 82, 95, 96, 97, 100, 101, 105, 109, 251, 252, 255, 295, 303, 304, 363, 389, 392, 414, 424, 579, 609, 651, 653, 656, 660, 666, 696, 701, 711, 741, 748, 762, 781, 785, 798], "28": [0, 26, 29, 43, 45, 46, 47, 48, 59, 61, 63, 66, 72, 73, 77, 81, 95, 96, 97, 100, 101, 105, 109, 256, 259, 280, 296, 392, 393, 414, 424, 445, 547, 578, 633, 651, 653, 654, 655, 656, 657, 661, 666, 670, 672, 674, 676, 677, 679, 701, 718, 759, 761, 762, 763, 781, 785], "30": [0, 26, 29, 40, 41, 42, 43, 48, 59, 61, 72, 73, 74, 96, 97, 105, 109, 119, 290, 321, 366, 374, 389, 392, 395, 414, 424, 435, 484, 507, 531, 563, 565, 570, 571, 578, 579, 595, 604, 610, 651, 653, 656, 660, 666, 695, 701, 749, 761, 762, 780, 781, 785, 800, 813, 830], "int64": [0, 12, 13, 16, 73, 82, 83, 85, 86, 93, 105, 106, 108, 109, 159, 172, 178, 181, 183, 185, 189, 190, 194, 201, 333, 386, 402, 404, 533, 541, 542, 648, 649, 660, 663, 665, 666, 746, 761, 766, 767, 768, 777, 779, 780, 785, 787, 798, 799, 850, 862, 865, 870], "proceed": [0, 61], "within": [0, 10, 11, 29, 30, 32, 36, 47, 68, 73, 96, 142, 351, 368, 389, 392, 398, 429, 430, 431, 436, 439, 479, 480, 481, 524, 648, 662, 763, 830, 841, 843, 846, 850, 862, 863, 864, 865, 877, 883, 884], "significantli": [0, 18, 19, 22, 23, 27, 28, 47, 73, 78, 96, 101, 393, 466, 656, 706], "impact": [0, 865], "isnul": 0, "sum": [0, 8, 9, 10, 11, 61, 63, 72, 73, 74, 77, 78, 79, 86, 90, 95, 96, 97, 100, 101, 102, 109, 113, 118, 119, 230, 240, 282, 306, 349, 373, 386, 389, 393, 394, 395, 398, 404, 435, 445, 469, 470, 471, 472, 473, 474, 475, 476, 507, 524, 546, 547, 564, 594, 595, 650, 651, 653, 655, 656, 657, 666, 678, 685, 697, 706, 710, 713, 715, 716, 717, 780, 781, 813, 815, 829, 835, 849, 850, 858, 860, 861, 862, 870, 871, 879], "quickli": [0, 8, 9, 842, 843, 882], "appropri": [0, 8, 9, 22, 23, 26, 36, 40, 41, 43, 45, 46, 47, 74, 83, 88, 106, 111, 240, 257, 264, 290, 351, 368, 389, 651, 663, 766, 841, 842, 843, 854, 859, 865], "either": [0, 26, 27, 29, 40, 41, 45, 46, 52, 53, 54, 55, 59, 65, 72, 73, 74, 77, 86, 90, 95, 96, 97, 100, 101, 128, 131, 134, 139, 150, 151, 161, 237, 238, 239, 240, 245, 255, 257, 258, 260, 262, 264, 271, 272, 278, 279, 280, 281, 282, 290, 299, 301, 302, 304, 307, 308, 354, 376, 389, 392, 398, 404, 414, 424, 434, 435, 439, 524, 541, 542, 562, 582, 590, 591, 599, 619, 645, 647, 648, 651, 653, 655, 656, 659, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 696, 701, 704, 708, 737, 738, 739, 779, 780, 785, 787, 800, 814, 815, 816, 820, 824, 838, 841, 842, 843, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 861, 862, 863, 864, 865, 868, 870, 872, 882], "imput": [0, 73, 96, 393, 451, 462, 468], "remov": [0, 8, 9, 18, 19, 26, 29, 38, 43, 47, 48, 50, 78, 90, 101, 656, 658, 659, 660, 690, 696, 710, 731, 737, 738, 754, 830, 833, 835, 841, 847, 848, 850, 853, 858, 864, 865, 868, 879, 882], "maintain": [0, 85, 108, 665, 775, 778, 842, 843, 845, 856, 861, 863, 864, 865], "integr": [0, 4, 5, 6, 7, 8, 9, 16, 17, 30, 32, 39, 48, 51, 70, 72, 73, 93, 95, 96, 169, 309, 372, 389, 404, 543, 649, 651, 840, 842, 859, 877, 882], "check": [0, 4, 5, 6, 7, 22, 23, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 64, 66, 68, 70, 74, 78, 90, 93, 97, 101, 134, 173, 174, 183, 184, 187, 189, 190, 191, 194, 209, 216, 217, 224, 236, 556, 566, 568, 569, 576, 582, 583, 584, 585, 586, 602, 613, 625, 631, 642, 645, 649, 650, 653, 654, 656, 660, 692, 693, 699, 740, 750, 751, 752, 793, 795, 800, 829, 830, 835, 838, 840, 841, 842, 843, 845, 849, 851, 852, 854, 859, 861, 862, 863, 864, 865, 866, 867, 870, 873, 879], "A": [0, 8, 9, 47, 62, 69, 70, 73, 74, 80, 82, 86, 87, 90, 93, 95, 96, 97, 100, 101, 103, 105, 107, 110, 113, 114, 119, 138, 139, 141, 145, 149, 157, 164, 170, 211, 230, 292, 294, 298, 330, 341, 345, 347, 348, 349, 351, 365, 368, 372, 373, 386, 389, 392, 393, 394, 395, 398, 399, 404, 407, 421, 435, 438, 440, 447, 455, 460, 463, 471, 475, 486, 489, 502, 508, 512, 513, 519, 520, 521, 522, 526, 527, 528, 529, 530, 538, 547, 550, 555, 557, 566, 575, 578, 579, 610, 611, 612, 615, 642, 644, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 662, 666, 667, 678, 682, 690, 692, 695, 700, 701, 705, 706, 718, 721, 724, 726, 730, 732, 740, 743, 745, 747, 748, 749, 750, 751, 755, 756, 757, 758, 760, 761, 762, 763, 765, 771, 781, 789, 790, 793, 795, 796, 798, 799, 800, 801, 806, 813, 830, 834, 840, 841, 842, 844, 849, 850, 851, 854, 857, 858, 862, 863, 865, 870, 872, 873, 874, 875, 879, 882, 883], "critic": [0, 8, 9, 26, 40, 41, 43, 45, 46, 47, 48, 657, 719, 834, 882], "grasp": [0, 862], "imbal": 0, "common": [0, 26, 36, 39, 47, 51, 72, 73, 90, 95, 196, 267, 275, 356, 363, 389, 649, 651, 837, 839, 841, 842, 848, 850, 851, 852, 858, 859, 862, 866, 868, 872, 882], "scenario": [0, 42, 48, 850, 860], "call": [0, 4, 5, 8, 9, 15, 16, 17, 22, 23, 26, 27, 30, 32, 36, 38, 39, 40, 41, 42, 45, 46, 47, 48, 50, 51, 52, 53, 54, 61, 65, 73, 88, 93, 96, 111, 113, 119, 138, 189, 190, 230, 393, 404, 460, 547, 598, 604, 619, 635, 636, 638, 647, 650, 653, 654, 656, 660, 704, 740, 746, 750, 751, 795, 806, 814, 815, 816, 818, 820, 824, 830, 834, 841, 842, 843, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 877, 879, 882, 883], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 22, 23, 26, 27, 28, 29, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 54, 59, 60, 66, 67, 70, 72, 73, 78, 83, 84, 86, 87, 89, 95, 96, 101, 106, 109, 110, 113, 114, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 150, 154, 161, 164, 171, 190, 197, 240, 245, 247, 249, 250, 251, 252, 257, 258, 262, 264, 268, 269, 276, 277, 280, 282, 284, 286, 287, 290, 293, 295, 299, 306, 308, 311, 312, 317, 318, 320, 345, 352, 353, 384, 386, 389, 393, 394, 395, 443, 471, 510, 645, 648, 649, 651, 656, 663, 664, 666, 667, 687, 699, 702, 705, 712, 713, 767, 771, 772, 773, 774, 782, 783, 784, 785, 786, 787, 788, 789, 790, 810, 835, 839, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 862, 863, 865, 868, 870, 871, 872], "instanc": [0, 8, 9, 26, 29, 36, 42, 47, 48, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 182, 185, 188, 189, 190, 192, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 386, 389, 392, 393, 394, 395, 398, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 429, 430, 431, 435, 436, 438, 439, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 605, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 648, 649, 651, 653, 654, 655, 656, 657, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 806, 811, 820, 834, 841, 842, 843, 845, 846, 847, 850, 852, 853, 854, 855, 857, 858, 859, 860, 861, 865, 874, 876, 879, 883], "typic": [0, 8, 9, 26, 73, 96, 351, 368, 389, 404, 540, 665, 777, 814, 845, 858, 884], "repres": [0, 69, 72, 73, 77, 78, 95, 96, 100, 101, 116, 141, 145, 156, 158, 181, 239, 240, 243, 246, 255, 257, 264, 290, 303, 307, 308, 333, 347, 348, 349, 366, 383, 386, 389, 391, 392, 393, 394, 395, 398, 399, 402, 435, 439, 453, 467, 469, 474, 501, 513, 519, 520, 521, 526, 532, 539, 575, 647, 648, 649, 651, 653, 655, 656, 678, 679, 680, 694, 701, 704, 705, 800, 813, 817, 830, 842, 846, 850, 868, 883], "ones": [0, 8, 9, 26, 36, 40, 43, 47, 59, 65, 69, 73, 75, 77, 82, 90, 92, 96, 100, 105, 149, 153, 158, 160, 166, 216, 217, 253, 330, 386, 404, 549, 633, 648, 650, 651, 654, 655, 657, 673, 674, 718, 761, 762, 763, 799, 841, 846, 852, 857, 858, 864, 865, 882], "how": [0, 4, 5, 6, 7, 8, 9, 12, 13, 16, 17, 22, 23, 26, 27, 28, 30, 32, 34, 35, 36, 37, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 62, 65, 66, 67, 72, 73, 89, 95, 96, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 257, 290, 308, 312, 317, 318, 320, 384, 394, 395, 469, 484, 510, 511, 645, 651, 810, 813, 814, 815, 816, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 876, 877, 881, 882], "approach": [0, 52, 839, 841, 842, 843, 846, 849, 850, 851, 855, 858, 862, 865, 866, 868, 872, 884], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 18, 19, 22, 23, 26, 47, 48, 59, 61, 62, 63, 73, 78, 84, 88, 96, 101, 107, 111, 264, 392, 393, 395, 440, 446, 455, 512, 516, 553, 554, 651, 653, 656, 664, 691, 692, 703, 704, 706, 707, 711, 771, 772, 773, 795, 799, 806, 816, 824, 825, 827, 828, 834, 841, 842, 843, 847, 848, 849, 852, 853, 854, 857, 862, 863, 865, 866, 867, 868, 870, 876, 882], "highli": [0, 62, 841, 882], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 17, 18, 19, 24, 25, 26, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 73, 81, 82, 96, 104, 105, 113, 114, 376, 389, 392, 398, 404, 414, 415, 420, 421, 424, 425, 426, 436, 437, 519, 520, 521, 522, 523, 524, 525, 540, 543, 658, 661, 662, 722, 732, 759, 760, 762, 813, 814, 817, 820, 835, 841, 861, 862, 868, 879], "unifi": [0, 36, 39, 47, 50, 51, 55, 62, 90, 230, 650, 844, 845, 846, 850, 854, 859, 860, 862, 868, 870, 872, 882], "write": [0, 16, 17, 26, 47, 48, 59, 63, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 169, 171, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 346, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 369, 370, 371, 372, 375, 376, 377, 384, 386, 389, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 434, 436, 437, 440, 441, 443, 444, 452, 453, 455, 458, 459, 460, 461, 467, 470, 471, 472, 473, 475, 476, 485, 486, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 559, 563, 564, 565, 570, 571, 580, 594, 595, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 759, 760, 761, 762, 763, 765, 767, 768, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 796, 835, 840, 841, 843, 844, 845, 847, 848, 850, 852, 853, 854, 858, 861, 863, 866, 870, 882], "code": [0, 1, 6, 7, 8, 9, 16, 17, 22, 23, 24, 25, 26, 27, 28, 34, 35, 42, 43, 47, 49, 50, 51, 52, 53, 54, 61, 62, 71, 72, 94, 95, 231, 277, 404, 547, 556, 564, 565, 580, 594, 598, 613, 650, 653, 655, 656, 658, 677, 698, 699, 700, 732, 834, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 863, 865, 868, 870, 871, 872, 874, 876, 878, 879, 881, 882, 883, 884], "agnost": [0, 36, 37, 47, 49, 53, 59, 846, 850, 857, 870, 872], "underli": [0, 36, 47, 48, 59, 73, 80, 96, 103, 116, 247, 250, 252, 287, 394, 395, 474, 491, 651, 656, 658, 704, 728, 849, 861, 868, 879, 882], "deep": [0, 8, 9, 26, 36, 43, 47, 59, 90, 563, 653, 835, 837, 838, 840, 841, 843, 845, 848, 849, 850, 856, 860, 863, 869, 882, 884], "develop": [0, 8, 9, 10, 11, 26, 30, 44, 47, 48, 837, 838, 839, 840, 841, 842, 843, 845, 848, 855, 864, 866, 872, 874, 876, 877, 879, 882, 883, 884], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 64, 65, 68, 69, 72, 73, 74, 77, 78, 80, 82, 83, 84, 90, 92, 95, 96, 97, 100, 101, 103, 105, 106, 107, 113, 114, 118, 119, 142, 153, 155, 158, 164, 218, 223, 225, 230, 254, 256, 257, 260, 264, 285, 286, 290, 295, 296, 300, 302, 307, 308, 309, 345, 347, 348, 349, 351, 354, 356, 357, 358, 362, 363, 368, 373, 376, 380, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 408, 409, 415, 416, 417, 418, 421, 426, 428, 436, 437, 446, 447, 451, 461, 462, 464, 468, 469, 470, 474, 475, 479, 480, 481, 491, 492, 493, 495, 501, 505, 509, 510, 519, 521, 526, 527, 528, 529, 530, 540, 545, 546, 547, 548, 549, 550, 552, 555, 556, 557, 566, 572, 577, 581, 592, 593, 602, 613, 625, 635, 648, 650, 651, 653, 654, 655, 656, 658, 660, 662, 663, 664, 678, 679, 680, 682, 685, 687, 691, 692, 693, 696, 697, 699, 702, 703, 706, 707, 711, 712, 713, 721, 722, 725, 729, 731, 741, 746, 751, 752, 753, 761, 762, 763, 766, 767, 768, 769, 771, 773, 793, 795, 798, 799, 800, 801, 806, 813, 816, 819, 821, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 882, 883], "tensorflow": [0, 3, 14, 15, 18, 19, 20, 21, 27, 28, 30, 34, 35, 36, 37, 38, 40, 41, 42, 43, 47, 49, 52, 53, 54, 59, 65, 72, 73, 74, 95, 96, 164, 211, 226, 241, 345, 386, 393, 447, 613, 648, 650, 653, 793, 806, 820, 824, 835, 839, 840, 841, 842, 843, 845, 850, 851, 855, 857, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 880, 883], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 17, 18, 19, 22, 23, 24, 25, 31, 32, 34, 35, 38, 40, 43, 47, 48, 59, 66, 300, 352, 353, 389, 651, 818, 820, 835, 840, 841, 846, 850, 851, 854, 857, 858, 861, 862, 863, 868, 870, 871, 872, 873, 874, 876, 877, 879, 883], "flexibl": [0, 849, 850, 857, 860, 866, 868, 877, 882, 884], "particularli": [0, 843, 872, 879], "research": [0, 8, 9, 47, 48, 61, 876, 877, 882], "where": [0, 1, 22, 23, 26, 40, 42, 48, 50, 51, 55, 63, 69, 72, 73, 74, 78, 80, 82, 83, 86, 87, 90, 92, 95, 96, 97, 101, 103, 105, 106, 109, 110, 113, 114, 145, 152, 153, 156, 158, 164, 245, 255, 257, 260, 262, 264, 265, 274, 279, 280, 281, 288, 289, 290, 295, 297, 301, 303, 307, 317, 319, 345, 347, 348, 349, 364, 368, 375, 384, 386, 389, 392, 393, 394, 395, 398, 399, 404, 406, 407, 408, 409, 415, 420, 421, 425, 440, 446, 447, 451, 452, 454, 455, 462, 468, 469, 470, 479, 480, 481, 495, 501, 502, 519, 520, 521, 524, 526, 527, 529, 530, 540, 548, 549, 550, 580, 594, 632, 648, 651, 653, 655, 656, 657, 658, 660, 662, 663, 666, 667, 680, 682, 687, 691, 692, 697, 699, 701, 702, 703, 706, 707, 710, 712, 716, 721, 723, 724, 726, 732, 736, 744, 751, 760, 761, 762, 763, 768, 769, 784, 786, 788, 789, 790, 798, 813, 817, 830, 834, 839, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 873, 879], "abil": [0, 842, 868, 872, 877, 882], "switch": [0, 47, 59, 806, 847, 854, 858, 859, 876], "differ": [0, 4, 5, 6, 7, 8, 9, 18, 19, 22, 23, 26, 27, 28, 29, 30, 34, 35, 39, 40, 41, 45, 46, 47, 48, 51, 52, 53, 54, 72, 73, 74, 78, 86, 90, 96, 97, 109, 118, 119, 128, 131, 182, 240, 257, 264, 265, 290, 306, 351, 358, 363, 364, 368, 389, 392, 393, 395, 404, 426, 437, 462, 468, 485, 492, 493, 508, 541, 542, 550, 570, 571, 645, 649, 651, 653, 655, 656, 658, 666, 678, 679, 694, 704, 722, 732, 779, 780, 785, 787, 788, 793, 798, 806, 815, 816, 835, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 877, 879, 882, 884], "without": [0, 1, 4, 5, 26, 29, 40, 41, 45, 46, 48, 50, 59, 63, 66, 84, 90, 116, 604, 619, 653, 658, 660, 664, 728, 741, 771, 772, 773, 774, 798, 801, 829, 842, 843, 846, 847, 849, 850, 851, 852, 854, 857, 858, 862, 865, 866, 868, 872, 877, 879, 882, 883], "chang": [0, 4, 5, 6, 7, 29, 36, 48, 61, 62, 63, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 389, 392, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 645, 651, 658, 660, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 706, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 752, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 795, 835, 841, 842, 843, 845, 847, 848, 849, 850, 852, 853, 855, 856, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873, 879], "codebas": [0, 8, 9, 26, 47, 228, 229, 650, 837, 844, 850, 856, 861, 862, 864, 865, 866, 876, 877, 884], "signific": [0, 29, 73, 394, 474, 867, 872, 876, 882], "advantag": [0, 8, 9, 26, 43, 46, 47, 48, 835, 842, 843, 850, 861, 862, 873, 882], "effect": [0, 8, 9, 53, 69, 73, 75, 86, 96, 98, 109, 156, 394, 428, 473, 633, 641, 648, 654, 655, 666, 682, 786, 788, 798, 801, 841, 846, 849, 853, 857, 861, 863, 868], "analyz": [0, 841, 874], "done": [0, 5, 61, 63, 66, 656, 693, 840, 841, 842, 843, 845, 848, 851, 852, 855, 856, 861, 862, 865, 879, 882], "two": [0, 26, 27, 39, 48, 51, 53, 59, 69, 73, 78, 84, 96, 97, 101, 118, 119, 139, 142, 149, 156, 162, 163, 164, 195, 203, 251, 265, 266, 300, 345, 346, 351, 364, 365, 367, 368, 370, 372, 379, 386, 389, 392, 393, 394, 395, 404, 421, 444, 445, 446, 455, 460, 469, 471, 475, 480, 501, 508, 512, 540, 550, 555, 647, 648, 649, 651, 653, 655, 656, 657, 658, 664, 680, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 712, 718, 733, 771, 772, 773, 774, 798, 800, 806, 814, 836, 841, 842, 845, 846, 850, 851, 852, 853, 858, 862, 863, 865, 868, 870], "distinct": [0, 73, 84, 96, 347, 348, 349, 386, 664, 771, 772, 773, 774, 842, 849, 853, 860, 861, 862, 882], "one": [0, 4, 5, 8, 9, 15, 22, 23, 26, 27, 28, 30, 32, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 63, 64, 65, 69, 73, 74, 77, 78, 80, 83, 84, 86, 90, 92, 95, 96, 97, 98, 100, 101, 103, 104, 106, 107, 108, 109, 113, 142, 146, 156, 158, 159, 160, 170, 172, 230, 251, 257, 264, 265, 282, 288, 289, 290, 309, 319, 329, 332, 333, 351, 357, 360, 361, 364, 365, 368, 369, 370, 372, 373, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 404, 414, 416, 420, 421, 424, 425, 428, 436, 441, 443, 452, 461, 475, 479, 480, 481, 485, 491, 492, 493, 498, 500, 506, 509, 519, 520, 521, 526, 531, 541, 542, 545, 546, 547, 548, 549, 550, 552, 590, 594, 595, 597, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 663, 664, 666, 669, 670, 671, 672, 673, 674, 677, 694, 696, 697, 701, 703, 712, 713, 716, 724, 725, 726, 729, 731, 735, 759, 766, 769, 771, 772, 773, 774, 779, 781, 798, 800, 817, 821, 824, 830, 833, 835, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 870, 872, 874, 880, 882, 883], "anoth": [0, 4, 5, 15, 36, 39, 40, 42, 43, 47, 48, 50, 51, 63, 64, 150, 170, 172, 648, 649, 835, 841, 842, 843, 847, 849, 850, 851, 854, 856, 858, 861, 862, 865, 870, 871, 874, 879, 880, 882], "characterist": [0, 848], "clear": [0, 29, 212, 650, 841, 843, 847, 850, 851, 852, 862, 868, 870, 876, 882], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 32, 36, 37, 39, 40, 43, 46, 47, 48, 49, 59, 60, 61, 62, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 171, 172, 174, 180, 181, 182, 183, 184, 187, 189, 190, 192, 197, 209, 210, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 231, 232, 233, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 326, 327, 328, 330, 337, 338, 345, 347, 351, 352, 353, 355, 370, 371, 376, 380, 384, 386, 389, 392, 393, 394, 395, 398, 404, 411, 412, 413, 414, 416, 417, 419, 421, 424, 426, 429, 430, 431, 434, 436, 437, 442, 445, 447, 449, 450, 460, 467, 470, 471, 472, 473, 474, 475, 476, 482, 484, 486, 497, 501, 502, 507, 508, 510, 511, 512, 514, 518, 522, 523, 525, 540, 541, 542, 543, 550, 552, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 590, 591, 593, 594, 595, 599, 600, 601, 604, 607, 608, 609, 610, 611, 613, 615, 617, 618, 619, 623, 624, 627, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 715, 716, 717, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 824, 829, 830, 834, 842, 843, 849, 850, 852, 863, 865, 867, 870, 871, 879], "shape": [0, 4, 5, 6, 7, 12, 13, 16, 17, 18, 19, 21, 26, 29, 30, 32, 38, 39, 40, 41, 45, 46, 47, 48, 53, 59, 61, 62, 63, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 117, 118, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 225, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 338, 340, 341, 342, 343, 344, 345, 346, 352, 353, 354, 355, 356, 358, 360, 361, 363, 365, 367, 369, 370, 371, 372, 376, 377, 379, 384, 386, 389, 392, 393, 394, 395, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 431, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 451, 452, 453, 454, 455, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 481, 482, 484, 486, 489, 494, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 558, 559, 563, 564, 565, 567, 570, 571, 574, 580, 587, 594, 595, 605, 614, 616, 628, 632, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 775, 776, 778, 779, 780, 781, 783, 785, 786, 788, 789, 790, 795, 798, 800, 813, 814, 817, 829, 834, 843, 849, 850, 851, 852, 853, 854, 855, 857, 861, 862, 863, 865, 866, 867, 870, 879], "gain": [0, 29, 813, 843, 845, 869, 876, 882], "descript": [0, 1, 2, 56, 57, 58, 63, 66, 69, 72, 73, 78, 95, 96, 101, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 346, 352, 353, 355, 358, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 501, 510, 514, 540, 543, 570, 574, 576, 578, 609, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 841, 843, 853, 860, 861], "describ": [0, 10, 11, 73, 86, 96, 114, 240, 257, 258, 290, 293, 295, 394, 399, 402, 474, 530, 533, 651, 655, 666, 682, 781, 785, 787, 838, 841, 842, 843, 848, 861, 862, 865, 870, 882], "obtain": [0, 47, 48, 66, 73, 96, 336, 386, 392, 432, 655, 682, 800, 862, 879], "mean": [0, 4, 5, 8, 9, 10, 11, 17, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 62, 63, 73, 74, 77, 79, 80, 82, 86, 88, 90, 92, 96, 97, 100, 102, 103, 105, 109, 111, 113, 151, 230, 347, 357, 386, 389, 392, 393, 394, 395, 398, 399, 404, 421, 426, 444, 457, 469, 470, 471, 472, 473, 474, 475, 476, 486, 491, 501, 519, 521, 527, 546, 547, 564, 635, 636, 638, 644, 648, 650, 653, 654, 655, 656, 657, 658, 659, 660, 662, 666, 670, 672, 673, 674, 676, 677, 678, 689, 715, 716, 717, 728, 737, 738, 739, 746, 761, 762, 798, 800, 801, 813, 814, 817, 835, 842, 843, 844, 845, 847, 849, 850, 851, 852, 858, 860, 861, 862, 865, 866, 868, 870, 871, 872, 874, 876, 882], "deviat": [0, 81, 82, 86, 104, 105, 109, 661, 662, 666, 759, 762, 786, 800, 813, 817, 845], "minimum": [0, 61, 72, 73, 74, 80, 83, 86, 95, 96, 97, 103, 106, 109, 237, 265, 292, 316, 348, 352, 353, 363, 384, 386, 389, 395, 404, 501, 538, 542, 548, 600, 601, 610, 611, 623, 624, 651, 653, 658, 663, 666, 721, 767, 782, 784, 798, 800, 801, 806, 850, 867], "maximum": [0, 72, 73, 74, 75, 80, 83, 86, 90, 95, 96, 97, 98, 103, 106, 109, 119, 230, 316, 352, 353, 364, 377, 384, 389, 392, 393, 395, 404, 408, 409, 419, 462, 465, 468, 501, 502, 541, 543, 548, 558, 559, 567, 575, 639, 650, 651, 653, 654, 656, 658, 663, 666, 697, 721, 766, 767, 782, 784, 798, 800, 801, 806, 830, 843, 850, 852, 861], "quartil": 0, "overview": [0, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 848, 863, 865], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 24, 25, 26, 53, 74, 114, 196, 562, 649, 653, 839, 841, 842, 843, 850, 852, 855, 856, 859, 862, 865, 866, 868, 870, 874], "indic": [0, 4, 5, 24, 25, 69, 73, 74, 77, 78, 80, 81, 83, 84, 85, 90, 92, 93, 96, 97, 100, 101, 103, 104, 106, 107, 108, 113, 116, 143, 144, 158, 162, 164, 185, 189, 190, 301, 345, 346, 347, 366, 386, 389, 392, 393, 394, 395, 400, 402, 411, 412, 413, 415, 419, 420, 421, 425, 426, 429, 430, 431, 432, 436, 437, 447, 468, 471, 479, 480, 481, 484, 487, 489, 491, 492, 493, 496, 500, 507, 508, 510, 511, 512, 514, 516, 517, 531, 532, 533, 555, 570, 571, 573, 594, 595, 599, 632, 635, 636, 642, 648, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 669, 671, 672, 673, 674, 677, 682, 699, 713, 716, 717, 724, 725, 726, 728, 729, 730, 731, 733, 735, 740, 743, 745, 747, 748, 749, 751, 755, 756, 757, 758, 759, 760, 766, 767, 768, 769, 771, 773, 775, 777, 778, 795, 796, 798, 800, 814, 821, 829, 830, 832, 842, 857, 860, 862, 870, 871, 879], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 22, 23, 24, 25, 26, 27, 28, 29, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 62, 77, 82, 86, 100, 105, 109, 399, 527, 655, 662, 666, 670, 672, 673, 674, 676, 677, 761, 762, 852], "250": [0, 17], "105092": 0, "min": [0, 59, 63, 70, 73, 74, 78, 86, 93, 96, 97, 101, 109, 162, 164, 182, 185, 289, 345, 348, 353, 386, 389, 393, 395, 447, 507, 548, 564, 594, 595, 610, 648, 649, 651, 653, 656, 666, 697, 703, 706, 707, 713], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 16, 26, 48, 59, 72, 73, 95, 96, 97, 100, 105, 135, 145, 154, 243, 245, 257, 259, 270, 332, 365, 366, 386, 389, 435, 550, 565, 578, 610, 645, 648, 651, 653, 656, 660, 662, 669, 695, 701, 748, 763], "050000": 0, "max": [0, 59, 61, 70, 73, 74, 78, 86, 93, 96, 97, 101, 109, 182, 185, 288, 352, 389, 392, 393, 394, 395, 411, 412, 413, 429, 430, 431, 432, 434, 436, 447, 469, 507, 509, 510, 558, 559, 564, 580, 594, 595, 649, 651, 653, 656, 666, 697, 699, 702, 798, 814, 818, 862], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 865], "receiv": [0, 5, 8, 9, 61, 65, 113, 554, 590, 653, 659, 737, 738, 739, 814, 834, 842, 843, 850, 851, 865, 868], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 73, 84, 257, 264, 290, 299, 405, 551, 598, 622, 651, 653, 664, 771, 772, 773, 774, 841, 848, 849, 850, 861, 862, 863, 865, 868, 870], "associ": [0, 16, 24, 25, 73, 78, 96, 101, 240, 290, 395, 404, 478, 543, 651, 656, 699, 702, 714, 795, 843, 850, 858, 859, 862, 863, 865], "122": [0, 27, 28, 38, 70, 185, 255, 651], "211321": 0, "256": [0, 4, 5, 12, 13, 16, 24, 25, 26, 72, 97, 300, 301, 611, 655, 670, 672, 798], "683288": 0, "250000": 0, "105": [0, 26, 78, 100, 655, 656, 678, 679, 694, 701], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 61, 63, 73, 75, 79, 96, 98, 102, 392, 394, 398, 404, 406, 407, 411, 412, 413, 471, 472, 473, 474, 475, 476, 524, 540, 633, 634, 639, 654, 655, 657, 659, 682, 715, 716, 717, 737, 738, 813, 814], "across": [0, 1, 24, 25, 28, 29, 42, 43, 59, 73, 83, 90, 96, 97, 106, 118, 228, 229, 257, 264, 290, 308, 394, 398, 469, 521, 524, 555, 576, 612, 650, 651, 653, 655, 660, 663, 678, 682, 746, 766, 767, 814, 841, 845, 850, 852, 854, 857, 858, 860, 865, 868, 877, 882, 884], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 60, 61, 63, 64, 66, 68, 69, 73, 74, 77, 78, 80, 82, 87, 88, 90, 91, 92, 95, 96, 97, 100, 101, 103, 105, 110, 111, 113, 114, 142, 151, 158, 162, 163, 164, 218, 225, 257, 261, 289, 290, 345, 346, 358, 377, 386, 389, 392, 393, 394, 395, 404, 426, 435, 437, 438, 439, 447, 452, 462, 463, 465, 468, 469, 490, 501, 502, 510, 516, 546, 552, 555, 572, 592, 593, 610, 617, 618, 632, 635, 648, 650, 651, 653, 654, 655, 656, 658, 659, 660, 662, 663, 667, 678, 681, 682, 687, 699, 704, 705, 708, 713, 725, 729, 731, 737, 738, 739, 740, 741, 742, 751, 752, 753, 754, 760, 763, 768, 793, 795, 798, 799, 800, 801, 813, 814, 820, 821, 824, 830, 832, 834, 835, 837, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 879, 880, 882, 883, 884], "group": [0, 8, 9, 26, 73, 96, 395, 398, 516, 520, 655, 660, 668, 675, 676, 742, 834, 845, 849, 850, 858, 862, 863], "calcul": [0, 4, 5, 29, 61, 72, 73, 74, 79, 86, 90, 95, 96, 97, 101, 102, 109, 119, 237, 238, 239, 240, 241, 242, 243, 244, 245, 254, 255, 257, 260, 261, 262, 278, 279, 280, 281, 282, 283, 288, 289, 290, 295, 302, 303, 304, 306, 307, 308, 314, 324, 352, 353, 366, 376, 389, 392, 393, 394, 395, 398, 404, 411, 412, 413, 447, 469, 474, 501, 519, 521, 547, 587, 651, 653, 656, 657, 666, 693, 701, 704, 715, 716, 717, 718, 782, 783, 784, 785, 786, 787, 788, 798, 800, 813, 814, 817, 841, 853, 870, 879], "pictur": [0, 63, 841, 870, 876], "vital": 0, "select": [0, 36, 47, 48, 52, 65, 73, 86, 96, 109, 393, 395, 404, 447, 460, 510, 511, 514, 541, 542, 666, 779, 780, 841, 842, 843, 855, 861, 865, 870, 871, 872, 877, 882], "guid": [0, 16, 17, 26, 30, 40, 41, 43, 45, 46, 835, 837, 841, 842, 843, 848, 856, 862, 864], "recogn": [0, 63], "both": [0, 8, 9, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 40, 42, 45, 47, 48, 52, 53, 60, 62, 69, 72, 73, 74, 77, 78, 92, 95, 96, 97, 100, 101, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 172, 188, 192, 195, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 346, 352, 353, 355, 356, 358, 363, 368, 386, 389, 392, 393, 395, 399, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 495, 501, 510, 513, 514, 526, 540, 543, 570, 574, 576, 578, 587, 609, 618, 643, 644, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 814, 820, 839, 841, 843, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 861, 862, 865, 868, 870, 872, 879, 882, 884], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 63], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 26, 27, 30, 32, 34, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 61, 66, 71, 73, 74, 80, 94, 96, 97, 103, 113, 114, 224, 231, 232, 236, 240, 257, 258, 264, 272, 273, 290, 293, 299, 301, 392, 395, 398, 416, 417, 418, 438, 479, 480, 481, 487, 489, 491, 492, 493, 494, 496, 500, 507, 508, 517, 519, 521, 553, 573, 580, 598, 650, 651, 653, 656, 658, 662, 704, 724, 725, 726, 728, 730, 731, 733, 735, 763, 841, 842, 843, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 872, 879, 881, 882, 883, 884], "outnumb": 0, "address": [0, 47, 48, 73, 74, 96, 395, 510, 617, 653, 841, 843, 845, 846, 857, 864, 876, 881, 882, 884], "fair": 0, "dure": [0, 22, 23, 26, 28, 38, 40, 47, 50, 52, 53, 71, 75, 86, 90, 94, 98, 109, 231, 392, 416, 417, 418, 598, 619, 633, 634, 639, 650, 653, 654, 655, 656, 659, 666, 678, 696, 737, 738, 739, 786, 788, 806, 817, 818, 834, 842, 849, 850, 851, 854, 858, 859, 861, 862, 863, 864, 865, 868, 872, 879, 882, 883], "similar": [0, 1, 8, 9, 26, 36, 47, 48, 73, 299, 394, 469, 651, 655, 657, 682, 718, 814, 820, 839, 841, 842, 849, 850, 851, 854, 855, 856, 858, 859, 860, 862, 863, 865, 866], "here": [0, 2, 4, 5, 8, 9, 10, 11, 18, 19, 26, 29, 31, 33, 36, 41, 44, 45, 46, 47, 48, 59, 61, 62, 63, 64, 66, 96, 300, 476, 651, 835, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 852, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 870, 871, 872, 879, 882, 883], "take": [0, 4, 5, 8, 9, 16, 24, 25, 26, 36, 41, 43, 45, 46, 47, 48, 53, 59, 61, 64, 73, 78, 80, 86, 96, 103, 113, 138, 139, 141, 158, 297, 304, 319, 384, 392, 393, 395, 412, 420, 425, 430, 440, 449, 463, 484, 491, 511, 541, 542, 647, 648, 651, 655, 656, 658, 659, 682, 696, 700, 728, 739, 779, 798, 806, 813, 814, 829, 834, 835, 837, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 865, 868, 870, 871, 872, 873, 879], "random": [0, 8, 9, 17, 18, 19, 22, 23, 26, 28, 30, 32, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 61, 63, 64, 73, 77, 90, 96, 100, 340, 341, 342, 343, 344, 386, 393, 394, 451, 462, 468, 474, 526, 527, 528, 529, 530, 655, 678, 760, 761, 762, 763, 764, 765, 798, 800, 813, 820, 829, 830, 835, 841, 851, 863, 865, 866, 882], "match": [0, 1, 70, 73, 90, 93, 96, 169, 264, 299, 356, 358, 389, 392, 394, 395, 437, 469, 484, 502, 507, 511, 590, 649, 651, 653, 656, 657, 692, 693, 697, 713, 715, 793, 795, 839, 841, 846, 848, 849, 852, 855, 863, 883], "prevent": [0, 73, 75, 86, 96, 98, 109, 394, 474, 575, 633, 634, 639, 653, 654, 655, 666, 678, 783, 787, 813, 818, 841, 843, 850, 854, 861, 862, 866], "being": [0, 8, 9, 10, 11, 18, 19, 26, 47, 48, 59, 73, 90, 96, 111, 118, 122, 142, 393, 395, 457, 485, 501, 604, 648, 653, 655, 656, 680, 693, 795, 801, 813, 842, 843, 845, 846, 847, 849, 850, 851, 852, 855, 857, 859, 861, 862, 863, 865, 866, 868, 870, 872, 875, 877, 882, 883, 884], "bias": [0, 655, 680], "toward": [0, 38, 73, 80, 96, 103, 264, 311, 362, 374, 389, 395, 404, 508, 543, 651, 658, 729, 839, 841, 842, 855, 871, 882], "legit_sampl": 0, "n": [0, 29, 59, 62, 63, 64, 66, 69, 72, 73, 77, 78, 80, 82, 83, 86, 87, 95, 96, 100, 101, 103, 105, 106, 109, 110, 113, 118, 156, 162, 163, 164, 237, 307, 309, 345, 346, 358, 386, 389, 392, 393, 394, 395, 398, 399, 402, 404, 406, 407, 408, 409, 414, 415, 420, 421, 424, 425, 426, 434, 435, 436, 437, 439, 447, 448, 455, 459, 461, 463, 468, 469, 481, 487, 490, 494, 496, 508, 517, 519, 520, 521, 524, 526, 527, 528, 529, 530, 533, 540, 550, 648, 651, 655, 656, 657, 658, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 675, 677, 682, 687, 690, 694, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 710, 711, 712, 713, 716, 723, 724, 726, 732, 736, 748, 761, 762, 763, 769, 783, 785, 786, 787, 788, 789, 790, 814, 817, 829, 844, 848, 865], "after": [0, 4, 5, 6, 7, 12, 13, 18, 19, 22, 23, 24, 25, 26, 27, 28, 47, 48, 62, 73, 74, 75, 77, 81, 90, 96, 97, 98, 100, 104, 203, 304, 321, 325, 374, 384, 389, 392, 393, 395, 415, 416, 417, 418, 435, 439, 460, 490, 501, 580, 634, 637, 639, 640, 641, 649, 651, 653, 654, 655, 660, 661, 668, 669, 670, 671, 673, 675, 677, 678, 751, 759, 818, 824, 841, 842, 843, 845, 847, 848, 850, 852, 854, 857, 860, 863, 865, 871, 879, 882], "combin": [0, 29, 53, 73, 90, 96, 119, 145, 392, 404, 426, 437, 540, 568, 569, 648, 653, 656, 687, 696, 843, 846, 849, 850, 852, 854, 858, 865, 870, 877, 882], "them": [0, 3, 4, 5, 22, 23, 26, 27, 28, 30, 32, 34, 40, 41, 45, 46, 47, 48, 53, 393, 463, 557, 593, 653, 798, 814, 820, 838, 841, 843, 845, 846, 847, 848, 849, 850, 854, 856, 859, 861, 862, 863, 865, 867, 870, 872, 874, 875, 876, 878, 879, 882], "achiev": [0, 22, 23, 27, 28, 29, 47, 48, 850, 858, 859, 865, 868, 870, 874], "concaten": [0, 59, 73, 74, 80, 96, 101, 395, 486, 563, 567, 653, 655, 658, 682, 701, 722, 798, 863, 868, 871], "along": [0, 62, 67, 69, 72, 73, 74, 78, 79, 80, 82, 83, 85, 86, 87, 89, 90, 92, 95, 96, 97, 101, 102, 103, 105, 106, 108, 109, 110, 113, 114, 116, 129, 133, 138, 154, 155, 230, 304, 307, 309, 347, 348, 349, 352, 353, 357, 358, 373, 380, 386, 389, 390, 392, 393, 394, 395, 398, 404, 414, 420, 421, 424, 425, 426, 436, 437, 462, 473, 486, 487, 488, 490, 492, 493, 501, 507, 510, 512, 514, 522, 523, 524, 525, 541, 542, 543, 545, 546, 547, 548, 549, 550, 563, 570, 647, 648, 650, 651, 653, 656, 657, 658, 659, 662, 663, 665, 666, 667, 687, 701, 710, 712, 713, 715, 716, 717, 722, 725, 726, 727, 729, 730, 732, 734, 735, 737, 738, 739, 765, 766, 767, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 814, 841, 844, 852, 861, 864, 866, 868, 870, 882], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 17, 26, 29, 62, 63, 64, 67, 69, 72, 73, 74, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 113, 129, 133, 154, 155, 158, 230, 304, 309, 352, 353, 357, 358, 366, 373, 389, 392, 394, 395, 398, 402, 404, 414, 415, 421, 424, 426, 436, 437, 473, 478, 486, 487, 488, 491, 492, 493, 496, 501, 507, 508, 510, 511, 512, 514, 516, 517, 522, 523, 525, 533, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 563, 570, 632, 645, 648, 650, 651, 653, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 677, 687, 690, 697, 710, 712, 713, 715, 716, 717, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 765, 766, 767, 771, 773, 775, 776, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 800, 810, 814, 815, 821, 849, 850, 852, 854, 857, 858, 861, 862, 865, 868, 870], "result": [0, 1, 4, 5, 12, 13, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 32, 40, 41, 42, 43, 45, 46, 47, 59, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 169, 171, 196, 197, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 339, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 450, 452, 453, 457, 458, 459, 460, 461, 463, 467, 470, 471, 472, 473, 475, 476, 478, 485, 486, 489, 491, 492, 493, 494, 495, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 558, 559, 563, 564, 565, 570, 571, 575, 580, 587, 594, 595, 633, 634, 635, 637, 639, 640, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 743, 746, 747, 749, 753, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 800, 806, 821, 830, 834, 839, 841, 843, 845, 846, 848, 849, 850, 852, 853, 855, 857, 858, 860, 861, 862, 863, 865, 866, 870, 871, 872, 879, 883], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 16, 18, 19, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 63, 814, 815, 816, 835, 842, 845, 846, 847, 848, 849, 850, 851, 855, 857, 859, 862, 863, 865, 866, 868, 870, 872, 879, 882], "equal": [0, 6, 7, 26, 27, 48, 69, 70, 72, 73, 74, 78, 79, 80, 82, 84, 85, 86, 90, 93, 95, 96, 97, 101, 102, 103, 105, 108, 114, 118, 119, 149, 151, 152, 153, 159, 160, 169, 249, 251, 255, 260, 262, 271, 272, 293, 295, 300, 303, 304, 308, 347, 348, 349, 351, 368, 386, 389, 392, 393, 395, 398, 404, 415, 436, 463, 487, 496, 510, 514, 517, 522, 523, 525, 543, 552, 555, 632, 648, 649, 651, 653, 656, 657, 658, 662, 663, 664, 665, 666, 690, 698, 699, 702, 704, 710, 715, 721, 723, 728, 730, 736, 763, 769, 771, 772, 773, 774, 775, 778, 783, 785, 786, 787, 788, 806, 813, 814, 848, 849, 850, 852, 854, 863, 865], "unbias": [0, 73, 86, 96, 109, 404, 540, 666, 788], "concat": [0, 12, 13, 59, 64, 74, 80, 90, 103, 230, 567, 650, 653, 658, 736, 863, 868, 870, 879], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 59, 67, 73, 75, 82, 89, 95, 98, 105, 129, 255, 303, 377, 389, 637, 645, 654, 656, 660, 663, 666, 701, 741, 752, 761, 763, 770, 781], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 296, 651], "03": [0, 8, 9, 29, 62, 69, 72, 74, 75, 95, 96, 98, 105, 155, 255, 280, 360, 361, 610, 611, 634, 639, 648, 651, 653, 654, 656, 695, 762], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 798], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 28, 42, 43], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 29, 59, 72, 73, 86, 93, 95, 96, 105, 185, 239, 255, 303, 339, 386, 424, 649, 651, 656, 660, 666, 708, 748, 762, 781], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 16, 29, 59, 72, 82, 93, 95, 96, 105, 119, 185, 252, 649, 656, 666, 708, 762, 763, 787], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 72, 100, 245, 655, 678, 679], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 15, 22, 23, 26, 28, 29, 38, 39, 43, 47, 48, 59, 61, 62, 67, 82, 89, 98, 105, 134, 251, 392, 414, 424, 633, 637, 645, 651, 654, 656, 661, 662, 666, 697, 701, 759, 760, 761, 762, 763, 764, 781, 870], "53": [0, 20, 29, 41, 59, 78, 82, 95, 100, 176, 232, 262, 435, 636, 638, 649, 650, 654, 656, 661, 694, 759, 763], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 18, 19, 22, 23, 27, 28, 30, 32, 40, 42, 45, 47, 48, 53, 59, 60, 69, 73, 74, 96, 97, 113, 141, 154, 155, 339, 386, 392, 437, 567, 647, 648, 653, 655, 680, 681, 682, 830, 841, 843, 845, 846, 848, 850, 852, 853, 858, 860, 861, 862, 864, 868, 879], "predictor": 0, "label": [0, 8, 9, 10, 11, 26, 29, 61, 62, 63, 73, 79, 96, 102, 394, 469, 470, 472, 473, 474, 475, 476, 657, 715, 716, 717, 841, 845, 862, 873, 882], "whether": [0, 34, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 114, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 141, 143, 144, 151, 153, 158, 160, 166, 169, 170, 172, 175, 176, 177, 178, 179, 180, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 197, 209, 213, 214, 216, 217, 219, 221, 224, 225, 227, 230, 231, 233, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 346, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 386, 389, 392, 393, 394, 395, 404, 411, 412, 413, 415, 416, 417, 418, 434, 436, 438, 440, 455, 457, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 486, 487, 489, 491, 492, 493, 496, 500, 508, 510, 511, 512, 514, 517, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 594, 595, 596, 597, 599, 602, 603, 605, 606, 608, 609, 610, 611, 613, 615, 617, 618, 625, 626, 629, 631, 634, 635, 637, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 666, 667, 669, 670, 671, 672, 678, 679, 680, 681, 682, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 705, 710, 715, 716, 717, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 793, 795, 798, 810, 811, 814, 815, 816, 817, 818, 829, 835, 837, 841, 842, 846, 849, 850, 852, 857, 861, 862, 865, 867, 868, 876, 879, 880], "x": [0, 4, 5, 12, 13, 16, 18, 19, 20, 21, 26, 29, 30, 32, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 189, 190, 192, 197, 213, 214, 216, 218, 223, 224, 225, 229, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 345, 346, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 443, 444, 446, 448, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 482, 483, 485, 486, 488, 489, 491, 494, 497, 498, 499, 500, 501, 503, 504, 505, 506, 509, 510, 512, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 599, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 631, 632, 634, 635, 636, 638, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 713, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 743, 746, 747, 748, 749, 750, 751, 752, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 814, 817, 820, 821, 824, 827, 829, 834, 835, 839, 841, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 879], "y": [0, 16, 29, 47, 59, 60, 62, 63, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 146, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 166, 169, 170, 171, 180, 182, 185, 197, 210, 214, 218, 223, 224, 225, 229, 231, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 351, 352, 353, 359, 367, 368, 369, 370, 371, 376, 378, 380, 384, 386, 389, 392, 393, 394, 395, 398, 404, 412, 414, 416, 417, 421, 424, 426, 430, 436, 443, 447, 453, 460, 467, 469, 470, 472, 473, 474, 475, 476, 486, 488, 497, 501, 502, 510, 511, 512, 514, 518, 522, 523, 525, 533, 539, 540, 541, 542, 543, 546, 548, 549, 550, 552, 555, 558, 559, 562, 563, 565, 566, 567, 570, 571, 572, 576, 578, 579, 580, 582, 583, 586, 587, 592, 599, 600, 601, 604, 607, 608, 610, 611, 613, 615, 617, 618, 619, 623, 624, 627, 630, 631, 632, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 670, 672, 674, 676, 677, 678, 679, 686, 687, 688, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 743, 746, 747, 749, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 834, 847, 849, 851, 852, 860, 862, 863, 865, 866, 868, 871, 879], "upcom": 0, "phase": [0, 865, 872, 882], "drop": [0, 29, 63, 73, 96, 348, 386, 394, 395, 473, 511, 813, 814, 842, 872], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 308, 651], "length": [0, 8, 9, 24, 25, 61, 62, 69, 73, 79, 80, 90, 96, 102, 103, 113, 114, 119, 142, 151, 156, 331, 334, 335, 350, 358, 386, 389, 392, 393, 395, 399, 402, 414, 415, 420, 421, 424, 425, 426, 436, 437, 438, 440, 452, 461, 501, 502, 511, 528, 533, 632, 648, 653, 655, 656, 657, 658, 664, 682, 706, 707, 715, 728, 771, 798, 814, 865], "valid": [0, 12, 13, 26, 27, 48, 61, 63, 73, 77, 87, 96, 100, 110, 113, 114, 174, 392, 393, 411, 412, 413, 429, 430, 431, 432, 434, 435, 439, 460, 468, 583, 649, 653, 655, 658, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 724, 732, 789, 790, 798, 799, 814, 829, 842, 847, 850, 852, 856, 860, 863, 865, 879, 883], "gener": [0, 1, 10, 11, 12, 13, 26, 34, 38, 43, 47, 48, 50, 53, 61, 63, 65, 66, 69, 72, 73, 77, 82, 88, 92, 95, 96, 100, 105, 111, 114, 142, 154, 155, 164, 172, 257, 260, 270, 271, 286, 290, 299, 329, 332, 336, 337, 338, 340, 341, 342, 343, 344, 345, 352, 353, 386, 389, 392, 393, 395, 399, 404, 436, 442, 464, 510, 528, 540, 648, 649, 651, 655, 656, 657, 658, 662, 666, 678, 704, 705, 708, 711, 720, 736, 760, 761, 763, 764, 786, 798, 801, 806, 818, 829, 836, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 854, 857, 858, 861, 862, 863, 866, 869, 870, 871, 872, 874, 877, 882, 883, 884], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 59, 61, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 182, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 346, 352, 353, 354, 355, 360, 361, 365, 367, 369, 370, 371, 372, 376, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 431, 434, 436, 437, 441, 443, 444, 446, 447, 452, 453, 458, 459, 460, 461, 466, 470, 471, 472, 473, 474, 475, 476, 480, 481, 486, 487, 489, 494, 502, 503, 504, 505, 506, 508, 510, 512, 514, 515, 522, 523, 525, 526, 527, 529, 530, 531, 533, 540, 541, 542, 543, 547, 551, 558, 559, 563, 564, 565, 570, 571, 580, 594, 595, 598, 633, 634, 637, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 879, 882, 884], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 17, 26, 27, 29, 32, 43, 47, 48, 61, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 594, 595, 598, 599, 600, 601, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 806, 811, 813, 814, 815, 816, 817, 818, 819, 820, 824, 825, 829, 830, 832, 834, 841, 846, 853, 854, 857, 862, 863, 865, 866, 870, 879, 880, 883], "test_siz": [0, 29, 61], "specifi": [0, 26, 42, 43, 47, 48, 52, 53, 54, 65, 67, 69, 70, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 86, 87, 89, 90, 93, 95, 96, 97, 100, 101, 102, 103, 105, 106, 109, 110, 113, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 147, 152, 154, 159, 162, 163, 165, 169, 171, 218, 223, 225, 229, 230, 231, 299, 308, 312, 317, 318, 320, 346, 351, 368, 373, 384, 386, 389, 392, 393, 394, 395, 399, 404, 411, 412, 413, 415, 421, 426, 436, 437, 438, 439, 447, 459, 461, 466, 469, 473, 474, 475, 477, 491, 494, 504, 505, 507, 508, 510, 514, 527, 538, 540, 541, 542, 545, 546, 550, 553, 570, 571, 573, 575, 576, 589, 591, 599, 632, 645, 648, 649, 650, 651, 653, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 680, 682, 685, 687, 689, 690, 692, 693, 697, 705, 708, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 729, 731, 732, 735, 736, 744, 745, 747, 748, 755, 756, 757, 758, 761, 762, 763, 765, 766, 767, 769, 772, 773, 774, 775, 779, 780, 781, 783, 785, 787, 789, 790, 798, 801, 810, 814, 815, 816, 830, 834, 842, 844, 848, 850, 851, 857, 858, 859, 861, 862, 863, 865, 870, 879], "reserv": [0, 841], "x_train": [0, 29], "x_test": [0, 29], "y_train": [0, 29, 63], "y_test": [0, 29], "random_st": [0, 29, 393, 451], "With": [0, 4, 5, 8, 9, 38, 50, 59, 67, 69, 70, 72, 73, 74, 75, 77, 78, 80, 83, 86, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 166, 169, 170, 171, 172, 174, 180, 181, 182, 185, 192, 197, 198, 199, 200, 201, 211, 214, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 352, 353, 355, 357, 360, 361, 365, 368, 369, 370, 372, 373, 376, 384, 386, 389, 392, 393, 394, 395, 404, 414, 416, 417, 424, 436, 443, 444, 445, 447, 448, 449, 460, 463, 475, 491, 492, 493, 495, 498, 500, 501, 502, 508, 510, 512, 514, 516, 531, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 556, 557, 558, 559, 562, 563, 564, 565, 566, 570, 571, 574, 576, 578, 579, 580, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 685, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 710, 711, 712, 715, 717, 718, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 842, 850, 852, 862, 865, 868, 879, 882], "next": [0, 1, 8, 9, 10, 11, 12, 13, 26, 37, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 61, 63, 73, 96, 182, 365, 369, 374, 378, 389, 649, 813, 818, 841, 842, 843, 847, 850, 852, 853, 855, 856, 859, 882], "convers": [0, 72, 73, 96, 256, 296, 596, 606, 653, 815, 816, 835, 841, 871, 874, 876, 877, 884], "becaus": [0, 16, 17, 26, 27, 40, 41, 45, 46, 50, 52, 62, 73, 392, 415, 793, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 868, 870, 872, 882], "own": [0, 8, 9, 10, 11, 20, 26, 30, 32, 36, 47, 48, 53, 835, 842, 845, 850, 853, 854, 861, 862, 866, 870, 872, 874, 876, 882, 884], "confirm": [0, 4, 5, 62, 841], "been": [0, 8, 9, 10, 11, 26, 27, 28, 30, 32, 40, 41, 42, 45, 46, 47, 48, 73, 74, 82, 96, 97, 105, 213, 300, 395, 509, 563, 564, 565, 650, 651, 653, 662, 760, 829, 830, 841, 843, 845, 847, 849, 850, 851, 853, 854, 857, 858, 861, 865, 870, 871, 872, 879, 882], "correctli": [0, 1, 42, 47, 48, 61, 73, 78, 83, 96, 101, 106, 357, 389, 404, 546, 547, 548, 549, 550, 656, 663, 697, 766, 841, 842, 843, 846, 849, 850, 852, 854, 856, 857, 863, 865, 868, 879], "size": [0, 5, 12, 13, 16, 29, 30, 32, 37, 40, 48, 49, 50, 52, 53, 54, 61, 63, 66, 73, 74, 77, 78, 80, 82, 83, 90, 96, 97, 100, 101, 103, 105, 106, 113, 114, 118, 119, 151, 154, 228, 229, 230, 329, 332, 336, 347, 348, 349, 350, 357, 373, 380, 386, 389, 390, 392, 393, 394, 395, 398, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 428, 429, 430, 432, 433, 439, 440, 447, 450, 462, 468, 469, 471, 485, 487, 499, 510, 512, 514, 520, 521, 524, 528, 533, 545, 546, 547, 548, 549, 550, 589, 594, 648, 650, 653, 655, 656, 657, 658, 662, 663, 667, 680, 682, 685, 687, 690, 694, 697, 701, 703, 706, 712, 716, 724, 729, 730, 731, 760, 766, 769, 789, 790, 798, 800, 801, 814, 830, 861, 863, 865, 868, 879], "correct": [0, 22, 23, 30, 32, 41, 48, 53, 59, 61, 63, 86, 109, 203, 393, 464, 649, 658, 666, 721, 786, 788, 795, 798, 839, 841, 843, 844, 849, 850, 851, 854, 855, 857, 858, 861, 863, 865], "787": 0, "197": [0, 72, 245, 651], "success": [0, 26, 656, 666, 710, 785, 787, 842], "prepare_data": [0, 29], "list": [0, 1, 6, 7, 12, 13, 22, 23, 24, 25, 29, 63, 68, 69, 70, 72, 73, 74, 77, 80, 81, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 151, 153, 156, 157, 158, 160, 166, 170, 172, 185, 189, 190, 197, 213, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 366, 367, 368, 374, 375, 376, 378, 379, 380, 389, 392, 393, 395, 402, 411, 412, 413, 415, 416, 417, 418, 429, 430, 431, 432, 436, 438, 442, 447, 451, 454, 461, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 487, 496, 502, 508, 510, 511, 512, 514, 517, 519, 521, 522, 523, 525, 527, 532, 540, 541, 542, 543, 552, 554, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 572, 574, 576, 578, 579, 580, 582, 583, 586, 590, 594, 595, 609, 610, 611, 613, 615, 616, 617, 618, 619, 631, 632, 637, 643, 648, 649, 650, 651, 653, 655, 656, 658, 660, 661, 664, 665, 669, 670, 671, 672, 673, 674, 677, 678, 679, 682, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 708, 710, 715, 716, 717, 721, 722, 725, 728, 729, 730, 731, 732, 735, 736, 740, 741, 742, 743, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 785, 786, 788, 789, 790, 793, 795, 798, 799, 800, 801, 806, 811, 814, 821, 829, 830, 834, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 870, 872, 879, 882, 883], "tupl": [0, 29, 65, 68, 69, 70, 72, 73, 74, 77, 78, 80, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 116, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 143, 144, 151, 153, 157, 158, 160, 164, 166, 170, 171, 172, 183, 184, 185, 189, 190, 196, 197, 203, 213, 216, 217, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 333, 338, 342, 345, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 365, 366, 367, 368, 372, 373, 374, 375, 376, 378, 379, 380, 381, 386, 389, 391, 392, 393, 395, 398, 399, 400, 402, 404, 411, 412, 413, 415, 416, 417, 418, 420, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 446, 447, 451, 455, 457, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 496, 501, 502, 508, 510, 511, 512, 514, 516, 519, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 540, 541, 542, 543, 545, 546, 547, 548, 549, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 599, 609, 610, 611, 612, 613, 615, 616, 617, 618, 631, 632, 633, 634, 635, 637, 639, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 686, 687, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 706, 708, 709, 710, 713, 715, 716, 717, 721, 722, 723, 725, 726, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 748, 749, 751, 752, 755, 756, 757, 758, 760, 761, 762, 763, 765, 768, 769, 771, 772, 773, 774, 775, 776, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 799, 800, 813, 814, 816, 829, 830, 846, 850, 857, 858, 861, 863, 865, 870, 872, 879], "thei": [0, 1, 26, 27, 29, 48, 54, 59, 64, 73, 78, 82, 84, 90, 101, 105, 107, 195, 309, 363, 389, 649, 651, 655, 656, 659, 662, 664, 680, 711, 737, 738, 760, 771, 793, 819, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 861, 862, 865, 866, 868, 870, 871, 872, 877, 879, 882], "dimension": [0, 69, 72, 73, 78, 80, 83, 86, 87, 90, 92, 95, 96, 101, 103, 109, 110, 118, 142, 149, 151, 156, 164, 309, 345, 352, 353, 386, 389, 392, 393, 395, 404, 420, 421, 425, 426, 436, 437, 444, 479, 480, 481, 485, 490, 491, 538, 550, 648, 651, 656, 658, 663, 666, 667, 687, 688, 694, 696, 699, 701, 702, 712, 713, 730, 766, 767, 769, 782, 783, 784, 785, 786, 787, 788, 789, 790, 858, 860, 865, 868, 870, 882], "reshap": [0, 4, 5, 47, 63, 64, 73, 77, 78, 80, 90, 96, 100, 101, 103, 377, 389, 392, 393, 395, 411, 412, 413, 416, 429, 430, 431, 434, 443, 460, 485, 491, 632, 653, 655, 656, 658, 671, 673, 677, 697, 713, 861, 862, 865, 868, 870], "float32": [0, 4, 5, 12, 13, 16, 17, 24, 25, 26, 29, 30, 32, 37, 38, 41, 48, 59, 61, 62, 63, 69, 70, 73, 74, 77, 92, 93, 96, 97, 100, 109, 155, 158, 160, 166, 167, 168, 172, 176, 177, 180, 181, 182, 183, 186, 189, 190, 192, 197, 200, 206, 256, 270, 297, 350, 363, 386, 389, 392, 393, 394, 404, 414, 424, 437, 463, 469, 474, 543, 580, 617, 648, 649, 651, 653, 655, 656, 659, 671, 673, 674, 677, 704, 706, 707, 713, 738, 739, 795, 798, 799, 850, 852, 863, 865, 866], "def": [0, 4, 5, 12, 13, 16, 17, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 65, 72, 95, 138, 241, 557, 647, 653, 659, 660, 738, 739, 746, 820, 829, 835, 839, 841, 842, 845, 846, 849, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 879], "isinst": [0, 12, 13, 29, 43, 47, 854, 862, 865, 866, 870], "rang": [0, 4, 5, 8, 9, 10, 11, 17, 18, 19, 20, 26, 27, 29, 47, 59, 60, 61, 63, 69, 73, 86, 92, 96, 142, 154, 155, 304, 316, 324, 336, 384, 386, 393, 395, 404, 447, 459, 494, 503, 505, 510, 515, 541, 542, 543, 563, 632, 648, 651, 653, 664, 666, 771, 779, 780, 785, 787, 798, 800, 801, 813, 835, 841, 850, 854, 858, 865, 870, 882], "len": [0, 8, 9, 10, 11, 12, 13, 16, 17, 26, 29, 61, 63, 69, 73, 78, 96, 101, 156, 333, 342, 343, 386, 392, 393, 404, 426, 437, 449, 452, 462, 468, 550, 648, 656, 692, 711, 849, 854, 861, 862, 865, 870, 879], "expand_dim": [0, 8, 9, 29, 42, 47, 48, 63, 65, 80, 103, 655, 658, 677, 862, 870], "astyp": [0, 16, 29, 30, 32, 37, 61, 62, 63, 70, 77, 93, 100, 649, 655, 671, 673, 674, 677, 850, 861, 862, 868], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 26, 29, 62, 63, 65, 66, 73, 74, 82, 95, 96, 105, 175, 176, 177, 178, 179, 191, 297, 301, 392, 393, 399, 438, 451, 462, 466, 468, 527, 562, 566, 649, 651, 653, 655, 660, 662, 681, 750, 753, 761, 762, 763, 793, 829, 830, 841, 842, 843, 845, 847, 850, 851, 854, 858, 861, 862, 863, 865, 866, 868, 870, 872, 883], "return": [0, 4, 5, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 118, 119, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 805, 806, 811, 813, 814, 816, 818, 824, 825, 829, 830, 831, 832, 833, 834, 835, 842, 843, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 879, 880, 883], "defin": [0, 16, 37, 43, 46, 47, 48, 49, 69, 73, 74, 78, 92, 96, 97, 101, 116, 132, 158, 162, 163, 164, 240, 257, 264, 290, 291, 299, 301, 304, 317, 321, 325, 331, 334, 335, 336, 345, 346, 347, 348, 349, 352, 353, 355, 384, 386, 389, 392, 393, 395, 404, 428, 445, 501, 508, 543, 578, 579, 599, 645, 648, 651, 653, 655, 656, 666, 680, 687, 692, 693, 705, 782, 783, 784, 786, 841, 842, 846, 847, 850, 853, 857, 860, 862, 863, 865, 866, 872, 874, 882, 883, 884], "proper": [0, 841, 862], "adjust": [0, 61, 86, 109, 393, 464, 666, 786, 788, 824, 834], "comput": [0, 8, 9, 17, 26, 38, 40, 41, 42, 43, 45, 46, 47, 48, 54, 55, 60, 61, 63, 67, 72, 73, 74, 75, 77, 78, 79, 84, 86, 89, 90, 95, 96, 97, 98, 100, 101, 102, 109, 113, 114, 116, 129, 133, 230, 240, 247, 250, 252, 257, 258, 259, 264, 265, 266, 268, 269, 275, 276, 277, 284, 285, 286, 287, 289, 290, 293, 298, 299, 317, 321, 325, 331, 334, 335, 347, 348, 349, 352, 353, 355, 359, 361, 364, 366, 367, 371, 373, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 402, 404, 411, 412, 413, 414, 415, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 440, 441, 443, 445, 446, 447, 448, 450, 451, 453, 455, 458, 460, 462, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 495, 498, 512, 519, 521, 532, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 558, 559, 603, 626, 633, 635, 636, 638, 642, 643, 644, 650, 651, 653, 654, 655, 656, 657, 658, 660, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 686, 687, 691, 692, 693, 696, 697, 699, 701, 703, 705, 706, 708, 710, 712, 713, 715, 716, 717, 719, 720, 724, 746, 771, 772, 773, 774, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 800, 814, 817, 830, 835, 842, 849, 850, 858, 860, 862, 865, 867, 868, 870, 871, 872, 874, 876, 877, 879, 881, 882, 883], "most": [0, 5, 8, 9, 15, 29, 36, 47, 90, 92, 113, 116, 158, 393, 446, 603, 626, 648, 653, 656, 691, 692, 833, 835, 840, 841, 842, 846, 849, 850, 851, 855, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 871, 872, 882, 883], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 16, 24, 25, 26, 27, 40, 41, 43, 45, 46, 47, 48, 63, 74, 97, 213, 219, 221, 222, 233, 564, 650, 653, 656, 707, 799, 834, 842, 843, 849, 850, 851, 853, 854, 862, 865, 868, 871, 872, 873, 877, 879], "cpu": [0, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 26, 27, 28, 40, 41, 42, 43, 45, 46, 47, 61, 62, 63, 65, 66, 69, 71, 73, 82, 92, 94, 96, 105, 142, 149, 152, 154, 155, 158, 159, 160, 166, 210, 211, 213, 214, 215, 216, 221, 224, 226, 228, 231, 232, 234, 236, 393, 399, 455, 526, 527, 529, 530, 648, 650, 662, 760, 761, 762, 763, 795, 813, 814, 815, 816, 817, 818, 819, 834, 839, 842, 843, 848, 850, 851, 855, 862, 865, 872, 882], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 45, 46, 61, 63, 65, 66, 213, 215, 216, 219, 222, 224, 226, 228, 229, 232, 234, 236, 650, 834, 842, 843, 851, 873, 882], "tpu": [0, 61, 211, 217, 226, 228, 233, 650, 834, 851, 882], "explicitli": [0, 16, 656, 692, 693, 708, 795, 814, 815, 816, 839, 845, 846, 847, 849, 850, 853, 854, 855, 858, 859, 860, 861, 863, 865, 870, 882], "hardwar": [0, 4, 5, 61, 118, 122, 842, 868, 873, 882, 883, 884], "mai": [0, 1, 8, 9, 26, 27, 40, 41, 45, 46, 71, 72, 73, 78, 84, 85, 94, 95, 101, 108, 118, 119, 142, 150, 161, 231, 257, 258, 264, 269, 277, 285, 286, 290, 291, 293, 308, 352, 353, 389, 421, 562, 598, 648, 650, 651, 653, 656, 664, 665, 666, 704, 713, 771, 772, 773, 774, 775, 778, 782, 783, 784, 786, 798, 830, 840, 841, 842, 843, 845, 849, 850, 854, 855, 858, 859, 860, 862, 863, 865, 868, 884], "vari": [0, 73, 84, 113, 114, 308, 395, 421, 502, 563, 651, 653, 656, 664, 703, 772, 773, 774, 830, 849, 852, 862, 865], "known": [0, 73, 96, 301, 393, 465, 467, 651, 813, 845, 850, 862, 865, 877], "advanc": [0, 34, 59, 842, 877, 884], "set_soft_device_mod": [0, 4, 5, 29, 32, 235, 650, 851], "section": [0, 1, 2, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 67, 73, 84, 96, 128, 392, 395, 426, 437, 487, 496, 517, 664, 771, 772, 773, 774, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 881], "binari": [0, 8, 9, 26, 27, 29, 40, 41, 43, 45, 46, 73, 74, 77, 79, 96, 100, 102, 247, 250, 252, 287, 307, 392, 394, 438, 473, 476, 651, 655, 657, 678, 682, 715], "logist": [0, 29], "gblinear": [0, 29], "booster": [0, 29], "linear": [0, 4, 5, 24, 25, 26, 32, 44, 46, 47, 48, 59, 60, 61, 63, 66, 73, 74, 77, 89, 96, 97, 100, 126, 128, 130, 131, 134, 312, 316, 320, 322, 323, 324, 328, 370, 384, 389, 392, 395, 404, 428, 463, 501, 550, 567, 590, 645, 653, 655, 660, 682, 705, 747, 798, 800, 801, 813, 814, 820, 849, 853, 858, 859, 861, 862, 865, 868, 871, 882, 884], "estim": [0, 73, 96, 366, 389, 404, 540, 834], "rate": [0, 73, 75, 96, 98, 392, 399, 434, 530, 634, 637, 639, 640, 641, 654, 655, 659, 680, 737, 738, 739, 818], "fine": [0, 30, 32, 47, 842, 843, 850, 852, 862], "tune": [0, 30, 32, 47], "regular": [0, 62, 96, 393, 404, 455, 460, 544, 842, 862, 882], "term": [0, 8, 9, 26, 73, 96, 329, 336, 339, 386, 394, 473, 474, 655, 680, 681, 814, 830, 843, 849, 870, 874, 882], "reg_lambda": [0, 29], "reg_alpha": [0, 29], "overfit": [0, 655, 678], "compil": [0, 8, 9, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 43, 45, 46, 47, 48, 51, 64, 66, 308, 651, 806, 842, 862, 866, 871, 872, 874, 876, 882, 883, 884], "param": [0, 22, 23, 28, 29, 47, 61, 62, 63, 65, 90, 96, 97, 119, 553, 570, 571, 653, 820, 821], "n_estim": [0, 29], "100": [0, 5, 8, 9, 10, 11, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 48, 59, 61, 63, 69, 72, 73, 92, 95, 96, 97, 100, 117, 155, 164, 251, 291, 304, 345, 368, 377, 386, 389, 392, 393, 395, 416, 417, 462, 468, 507, 571, 579, 595, 648, 651, 653, 656, 660, 695, 746, 850, 865, 872, 879], "learning_r": [0, 10, 11, 17, 26, 29], "base_margin": [0, 29], "none": [0, 4, 5, 8, 9, 12, 13, 16, 22, 23, 26, 28, 29, 47, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 185, 187, 188, 189, 190, 192, 194, 197, 209, 212, 213, 225, 226, 227, 228, 229, 230, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 591, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 609, 610, 611, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 643, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 744, 745, 746, 747, 751, 752, 753, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 801, 806, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 828, 830, 834, 839, 842, 845, 846, 847, 849, 850, 851, 852, 854, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 871, 879], "xgb_cl": [0, 29], "better": [0, 22, 23, 29, 50, 59, 65, 66, 841, 844, 862, 863, 866, 868, 869], "ivy_cl": [0, 29], "effici": [0, 12, 13, 22, 23, 24, 25, 27, 28, 34, 35, 37, 38, 47, 48, 49, 50, 73, 78, 96, 101, 393, 394, 457, 473, 603, 626, 653, 656, 699, 835, 842, 843, 849, 858, 859, 861, 865, 867, 871, 872, 876, 877, 882, 884], "fit": [0, 29, 80, 103, 658, 727, 841, 862, 870, 882], "magic": 0, "durat": 0, "70": [0, 29, 59, 61, 73, 96, 97, 392, 414, 424, 571, 595, 656, 666, 701, 781], "m": [0, 5, 22, 23, 24, 25, 26, 27, 28, 29, 38, 47, 48, 60, 62, 64, 66, 69, 73, 78, 82, 95, 96, 101, 105, 118, 156, 162, 163, 164, 284, 345, 346, 386, 392, 393, 394, 395, 399, 415, 446, 451, 452, 454, 455, 470, 481, 492, 493, 508, 526, 527, 528, 529, 530, 648, 656, 660, 662, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 748, 761, 762, 763, 842, 843, 844, 871], "per": [0, 22, 23, 27, 28, 29, 38, 48, 61, 63, 73, 77, 96, 100, 336, 386, 392, 393, 395, 411, 412, 413, 429, 430, 431, 432, 461, 509, 655, 669, 671, 672, 673, 674, 677, 682, 814, 843, 859, 862], "loop": [0, 8, 9, 10, 11, 22, 23, 26, 27, 28, 29, 38, 48, 55, 88, 96, 111, 138, 141, 392, 438, 647, 659, 737, 738, 739, 847, 879], "dev": [0, 4, 5, 22, 23, 24, 25, 27, 28, 29, 38, 48, 61, 63, 66, 71, 90, 94, 218, 225, 650, 836, 842, 851, 855, 858, 873], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 61, 63, 64, 65, 73, 75, 96, 98, 398, 519, 521, 633, 634, 639, 654, 655, 659, 680, 737, 738, 739, 795, 796, 814, 815, 816, 817, 829, 835, 836, 838, 841, 842, 846, 847, 851, 852, 854, 856, 857, 859, 862, 863, 870, 871, 872, 873, 879, 882, 883], "59": [0, 10, 11, 26, 59, 72, 252, 404, 541], "04": [0, 8, 9, 61, 62, 69, 75, 89, 93, 96, 98, 128, 129, 155, 182, 262, 600, 633, 634, 639, 645, 648, 649, 651, 653, 654, 798, 842, 865], "slowest": [0, 50, 73, 80, 96, 103, 395, 491, 658, 728], "took": [0, 22, 23, 95, 297], "87": [0, 29, 59, 98, 100, 251, 280, 404, 435, 541, 633, 651, 654, 798, 855], "longer": [0, 29, 842, 850, 861, 865, 877, 882], "than": [0, 10, 11, 18, 19, 20, 26, 29, 45, 47, 48, 50, 53, 72, 73, 74, 77, 78, 80, 82, 83, 84, 86, 90, 95, 96, 97, 100, 101, 103, 105, 106, 107, 109, 118, 119, 142, 151, 182, 230, 238, 239, 242, 243, 245, 246, 249, 251, 253, 257, 263, 264, 278, 279, 280, 281, 288, 290, 295, 299, 301, 303, 304, 308, 309, 310, 319, 329, 351, 354, 368, 375, 386, 389, 392, 393, 394, 395, 404, 414, 415, 420, 421, 424, 425, 426, 436, 437, 441, 443, 462, 468, 469, 492, 493, 541, 542, 543, 582, 583, 586, 603, 626, 648, 649, 650, 651, 653, 655, 656, 658, 662, 663, 664, 666, 680, 685, 687, 696, 697, 698, 699, 702, 713, 721, 725, 731, 763, 769, 772, 773, 774, 779, 780, 785, 786, 787, 788, 814, 830, 839, 841, 843, 845, 849, 850, 852, 854, 855, 861, 862, 863, 865, 866, 867, 868, 870, 872, 873, 882, 884], "fastest": [0, 50, 73, 80, 96, 103, 393, 395, 460, 491, 658, 728], "could": [0, 8, 9, 26, 27, 28, 40, 41, 45, 46, 47, 53, 84, 664, 771, 772, 773, 774, 841, 842, 843, 845, 850, 852, 859, 861, 862, 863, 865, 870, 882], "intermedi": [0, 60, 882, 883, 884], "cach": [0, 5, 10, 11, 15, 16, 24, 25, 27, 28, 42, 43, 48, 61, 63, 66, 212, 557, 650, 653, 803, 824, 856, 858, 861, 865], "400": [0, 17, 29, 97, 100, 392, 416, 417, 571, 595, 653, 656, 695], "\u00b5": [0, 22, 23, 27, 28, 29, 38, 48], "487": [0, 296, 651, 655, 679], "make": [0, 1, 4, 5, 12, 13, 22, 23, 24, 25, 26, 27, 28, 29, 37, 40, 41, 45, 46, 47, 48, 49, 61, 65, 73, 96, 392, 436, 824, 835, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 876, 882, 883], "out": [0, 4, 5, 8, 9, 12, 13, 17, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 59, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 171, 180, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 434, 436, 437, 440, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 467, 470, 471, 472, 473, 475, 476, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 558, 559, 563, 564, 565, 567, 570, 571, 580, 590, 594, 595, 633, 634, 637, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 862, 863, 864, 865, 866, 868, 870, 871, 873, 876, 877, 879, 882], "respect": [0, 69, 72, 73, 75, 78, 95, 96, 98, 101, 113, 156, 237, 240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 268, 269, 276, 277, 282, 284, 286, 287, 290, 293, 299, 303, 306, 307, 317, 366, 381, 384, 389, 391, 393, 395, 398, 449, 466, 478, 519, 521, 575, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 648, 651, 653, 654, 655, 656, 659, 668, 675, 676, 682, 687, 703, 706, 737, 738, 739, 795, 798, 813, 830, 840, 841, 842, 843, 846, 847, 849, 850, 851, 852, 857, 858, 860, 861, 862, 865, 866, 867], "kei": [0, 8, 9, 10, 11, 15, 22, 23, 26, 38, 39, 47, 48, 63, 65, 68, 73, 77, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 185, 189, 190, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 402, 416, 417, 418, 436, 469, 470, 471, 472, 473, 474, 475, 476, 485, 486, 508, 510, 512, 514, 519, 521, 522, 523, 525, 527, 533, 540, 541, 542, 543, 552, 553, 555, 556, 558, 559, 560, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 653, 655, 659, 660, 669, 670, 671, 672, 678, 679, 682, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 737, 738, 743, 749, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 798, 799, 805, 811, 814, 818, 820, 848, 849, 858, 861, 862, 863, 865, 882], "precis": [0, 29, 73, 78, 96, 101, 182, 270, 290, 297, 304, 363, 389, 393, 404, 447, 540, 603, 626, 649, 651, 653, 656, 692, 693, 697, 704, 706, 707, 713, 806, 862, 867, 868], "recal": [0, 29], "f1": [0, 29, 850], "score": [0, 29, 77, 100, 394, 476, 655, 683, 685], "ivy_pr": [0, 29], "xgb_pred": [0, 29], "nxgbclassifi": [0, 29], "86": [0, 29, 59, 82, 96, 105, 392, 404, 424, 541, 633, 654, 762, 763], "93": [0, 26, 29, 59, 73, 95, 97, 105, 215, 304, 377, 389, 563, 564, 650, 653, 762, 763], "84": [0, 26, 59, 77, 86, 95, 105, 185, 215, 280, 649, 650, 656, 661, 666, 679, 701, 759, 762, 763, 781], "91": [0, 59, 73, 100, 105, 377, 389, 435, 655, 656, 662, 666, 679, 701, 762, 781], "accuraci": [0, 8, 9, 29, 61, 63, 66, 392, 436, 850], "92": [0, 26, 29, 59, 63, 73, 74, 105, 377, 389, 631, 641, 654, 656, 688, 762, 763], "macro": [0, 29], "avg": [0, 29, 48, 392, 411, 413, 434], "weight": [0, 4, 5, 8, 9, 26, 27, 29, 30, 32, 47, 48, 61, 62, 73, 75, 77, 79, 96, 98, 100, 102, 113, 114, 332, 336, 370, 386, 389, 392, 393, 404, 419, 452, 538, 540, 543, 633, 634, 637, 639, 640, 641, 654, 655, 657, 659, 679, 680, 681, 682, 685, 715, 716, 739, 800, 813, 814, 816, 818, 820, 834, 849, 858, 865, 870, 884], "90": [0, 29, 59, 61, 63, 72, 73, 95, 96, 256, 296, 300, 377, 389, 395, 404, 508, 541, 651, 656, 666, 701, 781, 830], "summar": [0, 47, 48, 113, 865], "perfect": 0, "fals": [0, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 28, 32, 36, 37, 47, 48, 50, 61, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 213, 214, 219, 221, 224, 225, 227, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 373, 374, 375, 376, 377, 378, 379, 380, 386, 389, 390, 392, 393, 394, 395, 398, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 434, 435, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 532, 533, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 590, 594, 595, 596, 599, 602, 603, 605, 606, 608, 609, 610, 611, 613, 615, 617, 618, 620, 625, 626, 628, 629, 631, 634, 635, 637, 641, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 750, 751, 752, 753, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 796, 798, 799, 800, 801, 806, 810, 811, 814, 815, 816, 818, 820, 821, 824, 827, 829, 830, 831, 834, 839, 842, 845, 847, 850, 851, 852, 854, 855, 861, 862, 863, 865, 867, 868, 870, 879, 880], "posit": [0, 63, 65, 68, 72, 73, 74, 78, 79, 80, 95, 96, 97, 101, 102, 103, 113, 149, 151, 164, 182, 237, 238, 239, 243, 246, 257, 264, 271, 272, 278, 280, 290, 291, 298, 299, 303, 304, 308, 330, 345, 351, 356, 368, 386, 389, 393, 395, 444, 464, 475, 500, 510, 557, 567, 632, 646, 648, 649, 651, 653, 656, 657, 658, 662, 663, 667, 686, 689, 710, 715, 724, 729, 764, 769, 789, 790, 795, 798, 806, 811, 815, 816, 830, 841, 843, 845, 849, 862, 865, 866, 879], "excel": [0, 8, 9], "high": [0, 8, 9, 36, 47, 48, 66, 73, 77, 82, 96, 100, 105, 392, 435, 439, 603, 653, 655, 662, 668, 669, 670, 671, 673, 675, 677, 761, 763, 800, 841, 854, 860, 862, 874, 877, 882, 884], "show": [0, 4, 5, 6, 7, 8, 9, 10, 11, 17, 24, 25, 40, 47, 48, 49, 50, 52, 59, 61, 63, 64, 597, 606, 629, 653, 841, 842, 843, 848, 852, 856, 861, 862, 865, 867, 872, 879, 882], "trade": [0, 879], "off": [0, 17, 26, 40, 41, 45, 46, 50, 77, 78, 100, 101, 416, 417, 418, 655, 656, 678, 690, 710, 813, 814, 842, 855, 879], "wa": [0, 18, 19, 26, 47, 48, 53, 62, 73, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 116, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 375, 376, 378, 379, 380, 386, 389, 393, 416, 417, 418, 436, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 508, 510, 511, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 619, 631, 637, 643, 651, 653, 660, 666, 667, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 824, 838, 843, 845, 847, 848, 852, 858, 860, 862, 870, 877, 879, 882], "overal": [0, 655, 678, 830, 849, 850, 851, 853, 879, 882], "slightli": [0, 26, 29, 40, 41, 45, 46, 329, 386, 849, 862, 865, 870, 871], "lower": [0, 29, 63, 69, 72, 73, 78, 82, 95, 96, 101, 105, 149, 162, 288, 324, 330, 336, 345, 346, 384, 386, 404, 543, 544, 550, 648, 651, 656, 662, 686, 692, 693, 699, 763, 800, 813, 843, 850, 852, 862, 865, 870, 871, 872, 874, 882, 883], "good": [0, 36, 47, 48, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 866, 868, 870], "due": [0, 16, 17, 26, 38, 40, 41, 45, 46, 47, 48, 50, 64, 66, 290, 300, 395, 510, 651, 842, 845, 854, 861, 862, 879, 882], "97": [0, 24, 25, 29, 59, 73, 75, 95, 98, 105, 243, 377, 389, 637, 651, 654, 762], "suggest": [0, 1, 8, 9, 16, 17, 26, 841, 842, 843, 848, 850, 856, 860, 862, 865, 866, 867], "slight": [0, 47, 48, 850, 865], "edg": [0, 65, 73, 80, 96, 103, 336, 386, 392, 395, 404, 428, 501, 543, 658, 721, 723, 736, 801, 845, 865, 876, 882], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 22, 23, 26, 47, 48, 51, 52, 53, 54, 393, 453, 843, 849, 850, 854, 858, 865, 869, 872, 874], "design": [0, 1, 8, 9, 29, 36, 47, 96, 264, 329, 334, 335, 386, 651, 844, 848, 850, 861, 862, 863, 864, 868, 882], "heatmap": 0, "seaborn": [0, 63], "aesthet": 0, "appeal": 0, "eas": [0, 860, 877, 882], "plot_classification_report": 0, "argument": [0, 8, 9, 18, 19, 40, 42, 43, 47, 48, 50, 52, 53, 54, 59, 61, 63, 65, 68, 69, 72, 73, 74, 78, 90, 91, 95, 96, 97, 113, 114, 119, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 197, 226, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 345, 346, 352, 353, 355, 358, 360, 361, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 429, 430, 431, 436, 438, 440, 447, 501, 510, 514, 540, 543, 547, 553, 554, 556, 557, 562, 564, 565, 570, 574, 576, 578, 580, 590, 594, 595, 609, 613, 618, 619, 632, 643, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 680, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 739, 746, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 806, 811, 814, 815, 816, 824, 829, 832, 841, 844, 845, 846, 847, 848, 849, 852, 853, 856, 858, 863, 865, 866, 868, 870, 871, 874, 879, 882], "plot": [0, 8, 9, 10, 11, 17, 26, 29, 62, 882], "color": [0, 15, 16, 40, 45, 62, 90, 119, 835], "represent": [0, 65, 73, 74, 90, 96, 97, 119, 167, 168, 182, 185, 210, 211, 237, 240, 247, 250, 252, 257, 264, 287, 290, 292, 307, 333, 365, 369, 374, 378, 386, 389, 553, 615, 646, 649, 650, 651, 653, 798, 800, 801, 814, 850, 883, 884], "easi": [0, 1, 47, 48, 61, 842, 843, 846, 847, 849, 858, 860, 863, 865, 868, 882], "assess": [0, 38, 50, 841, 868], "side": [0, 85, 108, 367, 389, 393, 463, 665, 777, 798, 814, 829, 830, 842, 843, 848], "pyplot": [0, 8, 9, 10, 11, 16, 17, 26, 29, 61, 62, 63, 66], "plt": [0, 8, 9, 10, 11, 16, 17, 26, 29, 61, 62, 63, 66], "sn": 0, "model_nam": [0, 8, 9, 63], "ax": [0, 16, 17, 26, 62, 67, 73, 78, 80, 83, 86, 87, 89, 96, 101, 103, 106, 109, 110, 118, 122, 129, 133, 230, 352, 353, 357, 358, 373, 380, 389, 390, 392, 393, 395, 398, 404, 421, 426, 437, 463, 500, 501, 508, 522, 545, 546, 547, 548, 549, 550, 563, 632, 650, 653, 656, 658, 663, 666, 667, 687, 697, 705, 708, 709, 713, 723, 725, 726, 729, 731, 733, 736, 766, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 800, 814, 850, 852, 865, 866, 870], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 53, 59, 61, 62, 63, 73, 77, 88, 96, 100, 111, 113, 114, 118, 366, 381, 389, 391, 393, 447, 580, 598, 613, 635, 653, 654, 655, 660, 679, 681, 748, 793, 814, 838, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 855, 856, 858, 859, 860, 861, 865, 866, 868, 870, 872, 873, 879, 882], "annot": [0, 857], "fmt": 0, "2f": [0, 6, 7, 22, 23, 26], "cmap": 0, "blue": 0, "set_titl": [0, 17, 26, 62, 63], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 47, 60, 61, 63, 73, 80, 96, 103, 319, 336, 384, 386, 395, 491, 513, 658, 660, 728, 743, 747, 748, 749, 752, 757, 758, 837, 843, 844, 849, 854, 866, 870, 871], "figur": [0, 26, 62, 867], "fig": [0, 16, 17, 26, 62, 63], "ax1": [0, 63], "ax2": [0, 63], "subplot": [0, 16, 17, 26, 62, 63], "figsiz": [0, 17, 62, 63], "tight_layout": [0, 63], "observ": [0, 29, 73, 96, 404, 539, 540, 843, 850, 854, 871, 879], "exhibit": [0, 50], "strong": [0, 800, 872, 882], "commend": 0, "impli": [0, 84, 664, 771, 772, 773, 774, 865], "neg": [0, 67, 72, 73, 78, 80, 82, 87, 89, 95, 96, 101, 103, 105, 110, 113, 128, 131, 134, 142, 149, 151, 164, 257, 264, 271, 272, 290, 291, 299, 304, 312, 330, 345, 348, 384, 386, 393, 394, 395, 399, 444, 451, 457, 474, 510, 514, 530, 645, 648, 651, 656, 658, 662, 667, 687, 689, 706, 710, 712, 713, 722, 724, 725, 729, 762, 789, 790, 798, 800, 810, 849, 861], "depend": [0, 5, 16, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 52, 69, 70, 73, 74, 78, 84, 85, 93, 96, 101, 108, 109, 139, 146, 169, 237, 238, 239, 242, 243, 244, 245, 254, 255, 257, 260, 262, 278, 279, 280, 281, 290, 292, 295, 302, 303, 307, 308, 376, 389, 392, 393, 438, 446, 464, 613, 647, 648, 649, 651, 653, 655, 656, 663, 665, 680, 691, 692, 703, 704, 705, 706, 770, 775, 778, 788, 838, 839, 841, 842, 843, 848, 850, 851, 853, 855, 859, 861, 862, 863, 864, 865, 868, 870, 871, 872, 873, 879, 882, 883], "applic": [0, 8, 9, 16, 32, 34, 61, 63, 66, 73, 77, 96, 100, 116, 393, 468, 655, 656, 660, 666, 682, 685, 710, 746, 747, 748, 752, 753, 785, 787, 842, 850, 851, 859, 877, 882], "conclus": 0, "appear": [0, 395, 492, 493, 632, 653, 842, 843, 845, 862, 868, 879], "outperform": [0, 29], "especi": [0, 10, 11, 842, 847, 856, 882], "increas": [0, 22, 23, 27, 28, 29, 38, 47, 50, 73, 78, 80, 96, 101, 103, 116, 395, 404, 501, 543, 656, 658, 711, 723, 736, 800, 850, 854, 862, 866, 868, 879, 882], "context": [0, 342, 386, 591, 653, 841, 842, 843, 847, 850, 851, 852], "specif": [0, 8, 9, 10, 11, 26, 36, 37, 42, 43, 46, 47, 48, 49, 51, 53, 61, 71, 73, 74, 94, 96, 97, 197, 228, 231, 264, 285, 286, 295, 339, 352, 353, 386, 389, 395, 399, 510, 530, 563, 564, 565, 591, 649, 650, 651, 653, 656, 658, 659, 662, 665, 666, 692, 693, 708, 732, 737, 738, 739, 760, 777, 782, 783, 784, 786, 793, 795, 815, 816, 824, 825, 832, 834, 835, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 879, 883, 884], "problem": [0, 10, 11, 26, 836, 841, 843, 845, 846, 851, 862, 876], "domain": [0, 238, 239, 242, 243, 244, 245, 254, 255, 260, 262, 278, 279, 281, 302, 303, 304, 307, 308, 376, 389, 651, 853, 882], "repo": [1, 30, 61, 840, 843, 845, 848, 850, 855, 863, 865], "hold": [1, 73, 74, 78, 86, 96, 101, 109, 113, 114, 351, 368, 373, 389, 404, 487, 517, 541, 542, 547, 594, 595, 653, 656, 666, 697, 780, 796, 883], "exampl": [1, 8, 9, 10, 11, 18, 19, 22, 23, 26, 27, 28, 36, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 345, 347, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 411, 412, 413, 414, 416, 417, 419, 420, 421, 424, 425, 426, 429, 430, 431, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 458, 460, 463, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 522, 523, 525, 528, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 746, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 806, 824, 829, 830, 834, 835, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 866, 870, 871, 872, 877, 883], "tab": [1, 841, 842, 855], "ivi": [1, 2, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 842, 844, 845, 847, 849, 850, 851, 853, 855, 856, 857, 858, 859, 861, 868, 869, 872, 874, 876, 877, 878, 881], "web": 1, "relev": [1, 69, 92, 155, 648, 818, 841, 842, 843, 846, 849, 850, 852, 855, 859, 860, 863, 864, 865, 873], "link": [1, 27, 36, 47, 62, 841, 842, 843, 848, 850, 856, 862], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 24, 25, 26, 27, 28, 40, 41, 42, 45, 46, 47, 48, 61, 62, 63, 64, 74, 82, 105, 142, 648, 662, 761, 763, 835, 837, 838, 842, 843, 848, 850, 853, 855, 862, 863, 868, 879, 882, 884], "avil": 1, "discuss": [1, 841, 843, 848, 850, 851, 861, 862, 864, 865, 868, 872, 883], "comprehens": [1, 34, 843, 845, 864, 884], "possibl": [1, 4, 5, 48, 53, 69, 73, 92, 96, 103, 113, 144, 264, 307, 329, 352, 353, 386, 389, 392, 394, 395, 415, 470, 479, 480, 481, 487, 489, 491, 492, 493, 500, 517, 590, 651, 653, 655, 666, 678, 724, 725, 726, 728, 730, 731, 733, 735, 782, 784, 798, 814, 827, 830, 833, 837, 839, 841, 842, 843, 845, 848, 849, 850, 852, 853, 855, 856, 858, 860, 861, 862, 863, 865, 868, 870, 872, 882], "us": [1, 2, 3, 4, 5, 6, 7, 10, 11, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 82, 83, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 106, 109, 111, 113, 114, 116, 119, 126, 155, 158, 169, 181, 183, 184, 195, 196, 216, 217, 219, 224, 228, 229, 230, 231, 233, 236, 242, 250, 278, 279, 281, 282, 284, 285, 286, 288, 289, 291, 300, 304, 309, 329, 331, 332, 334, 335, 336, 344, 366, 369, 370, 373, 386, 389, 392, 393, 394, 395, 398, 399, 400, 402, 404, 411, 412, 413, 415, 416, 417, 418, 419, 421, 426, 428, 429, 430, 431, 434, 436, 437, 438, 440, 445, 447, 451, 457, 459, 461, 462, 464, 465, 466, 468, 469, 474, 491, 495, 499, 501, 502, 510, 514, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 547, 550, 568, 569, 578, 579, 590, 591, 598, 600, 601, 603, 610, 611, 623, 624, 626, 633, 634, 639, 640, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 679, 680, 682, 685, 690, 692, 699, 703, 707, 710, 713, 715, 727, 728, 729, 733, 737, 738, 739, 740, 742, 743, 749, 750, 751, 753, 760, 761, 762, 763, 765, 766, 767, 768, 771, 773, 781, 783, 796, 798, 799, 800, 801, 806, 810, 811, 813, 814, 815, 816, 817, 818, 824, 829, 830, 834, 837, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 877, 880, 882, 883, 884], "attract": 1, "visual": [1, 8, 9, 10, 11, 29, 48, 65, 834, 842, 855, 862, 865, 882], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 15, 24, 25, 29, 34, 35, 38, 40, 42, 43, 48, 54, 55, 60, 65, 66, 84, 664, 771, 772, 773, 774, 806, 835, 849, 858, 862, 864, 868, 872, 874, 876, 878, 879, 881, 882], "nice": [1, 865, 882], "etc": [1, 27, 38, 48, 50, 55, 62, 69, 73, 82, 84, 88, 92, 96, 105, 111, 146, 154, 155, 158, 392, 399, 421, 426, 437, 526, 527, 529, 530, 648, 662, 664, 760, 761, 762, 763, 771, 772, 773, 774, 798, 801, 813, 814, 815, 816, 817, 818, 819, 841, 842, 843, 845, 846, 847, 848, 849, 850, 852, 854, 857, 862, 863, 865, 866, 871, 872, 873, 874, 879, 882], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 26, 27, 40, 41, 45, 46, 48, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 876, 877, 879], "free": [1, 8, 9, 10, 11, 12, 13, 17, 26, 27, 40, 41, 45, 46, 48, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 876, 877, 879, 883], "emoji": [1, 841], "don": [1, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 61, 63, 88, 111, 841, 842, 843, 850, 851, 856, 860, 865, 868, 872, 879], "keep": [1, 2, 30, 32, 36, 42, 43, 47, 73, 80, 90, 96, 103, 113, 116, 377, 393, 468, 658, 735, 840, 841, 842, 843, 845, 848, 849, 854, 861, 862, 865, 866, 868, 871, 873], "thing": [1, 10, 11, 43, 59, 61, 829, 840, 841, 842, 843, 847, 862, 865, 868, 882], "super": [1, 4, 5, 12, 13, 17, 30, 32, 46, 47, 48, 61, 73, 96, 393, 447, 820, 854, 871], "seriou": 1, "given": [1, 4, 5, 10, 11, 15, 36, 45, 47, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 142, 147, 154, 155, 175, 176, 177, 178, 179, 191, 196, 215, 224, 228, 229, 230, 232, 236, 309, 339, 348, 351, 357, 358, 366, 367, 368, 370, 373, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 411, 412, 413, 414, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 437, 447, 452, 467, 471, 472, 473, 475, 476, 477, 478, 488, 489, 490, 497, 499, 512, 518, 522, 523, 524, 525, 526, 527, 528, 529, 530, 540, 541, 542, 543, 549, 571, 575, 594, 595, 605, 633, 634, 637, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 714, 715, 716, 717, 721, 724, 725, 726, 727, 729, 730, 734, 735, 747, 748, 757, 758, 761, 762, 763, 765, 777, 778, 779, 780, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 871, 877, 880], "intern": [1, 29, 90, 121, 122, 123, 660, 740, 750, 751, 813, 814, 815, 816, 817, 819, 846, 849, 851, 853, 861, 863, 865, 867], "releas": [1, 8, 9, 48, 62, 841, 842, 850, 866, 868, 882], "tracer": [1, 4, 5, 12, 13, 16, 24, 25, 28, 34, 35, 37, 38, 41, 42, 43, 48, 64, 66, 862, 870, 873, 874, 881], "around": [1, 30, 32, 73, 90, 96, 119, 395, 501, 510, 841, 843, 845, 846, 848, 851, 857, 858, 862, 865, 866, 872, 874, 879, 882], "corner": [1, 73, 96, 392, 428, 842, 843, 855, 862], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 26, 41, 48, 49, 53, 64, 66, 90, 113, 842, 843, 845, 850, 855, 858, 861, 862, 866, 871, 875, 879], "start": [1, 2, 8, 9, 10, 11, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 62, 63, 69, 73, 90, 92, 96, 100, 142, 151, 154, 155, 370, 380, 389, 390, 392, 395, 404, 435, 491, 494, 503, 505, 515, 549, 648, 800, 829, 834, 835, 837, 841, 842, 843, 844, 850, 852, 853, 855, 856, 857, 862, 865, 868, 870, 872, 879, 882], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 53, 59, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 389, 392, 395, 402, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 655, 660, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 706, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 751, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 830, 836, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 877, 879, 882, 883], "worri": [1, 47, 48, 841, 842, 856, 877], "about": [1, 34, 35, 36, 39, 41, 43, 45, 46, 47, 48, 51, 62, 63, 70, 93, 182, 185, 649, 834, 838, 840, 841, 842, 843, 844, 845, 848, 850, 851, 856, 857, 861, 863, 864, 865, 866, 867, 868, 869, 872, 877, 883], "transpil": [1, 3, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 35, 37, 50, 805, 806, 836, 841, 842, 854, 855, 862, 869, 873, 874, 875, 876, 878, 879, 882, 884], "style": [1, 29, 61, 63, 395, 501, 663, 769, 843, 856, 882], "stori": 1, "anyon": [1, 837, 843, 872], "ha": [1, 4, 5, 8, 9, 12, 13, 20, 24, 25, 26, 27, 28, 29, 30, 32, 36, 38, 40, 41, 42, 45, 46, 47, 48, 50, 53, 55, 59, 66, 69, 73, 78, 80, 84, 86, 90, 93, 96, 97, 101, 103, 107, 109, 113, 156, 213, 237, 257, 260, 262, 264, 274, 290, 292, 297, 300, 302, 303, 307, 347, 348, 349, 386, 393, 394, 395, 404, 428, 463, 473, 484, 509, 511, 516, 539, 541, 542, 544, 576, 648, 650, 651, 655, 656, 657, 658, 663, 664, 666, 681, 682, 696, 697, 705, 706, 708, 710, 713, 716, 724, 731, 769, 772, 773, 774, 779, 780, 783, 785, 786, 787, 788, 795, 798, 801, 824, 835, 841, 843, 845, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877, 879, 882, 884], "question": [1, 8, 9, 10, 11, 26, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877], "ping": 1, "me": [1, 843], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 26, 62, 837, 841, 842, 843, 872, 877, 882, 884], "ux": 1, "team": [1, 837, 841, 842, 843, 862, 873], "discord": [1, 8, 9, 10, 11, 16, 17, 26, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 873, 876, 877], "channel": [1, 43, 63, 73, 74, 77, 96, 97, 100, 392, 398, 416, 417, 418, 428, 519, 520, 521, 524, 563, 567, 653, 655, 657, 669, 670, 671, 672, 673, 674, 677, 718, 814, 817, 843, 848, 855, 864], "templat": [1, 835, 848, 853, 865], "locat": [1, 63, 158, 404, 541, 648, 660, 662, 665, 744, 760, 777, 830, 841, 843, 847, 848, 851, 862, 863, 865, 866, 873], "asset": [1, 874], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 17, 26, 40, 41, 45, 46, 53, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 873], "copi": [1, 63, 66, 69, 70, 71, 72, 73, 74, 80, 90, 92, 93, 94, 95, 96, 97, 103, 113, 117, 143, 144, 146, 150, 161, 169, 231, 291, 395, 477, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 517, 573, 599, 610, 617, 618, 648, 649, 650, 651, 653, 658, 660, 665, 724, 725, 726, 728, 730, 731, 733, 735, 741, 776, 778, 806, 830, 842, 843, 845, 847, 850, 853, 862, 863, 870, 872, 879], "firstli": [1, 37, 49, 50, 54, 59, 846, 850, 852, 853, 854, 858, 859, 861, 868], "file": [1, 5, 8, 9, 10, 11, 15, 16, 17, 26, 27, 40, 41, 45, 46, 48, 61, 62, 63, 74, 90, 607, 630, 653, 816, 834, 836, 838, 841, 842, 843, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 858, 862, 863, 864, 865, 866, 870, 873, 882, 883, 884], "topic": [1, 34, 37, 38, 39, 49, 50, 51, 52, 53, 54, 859, 882], "Then": [1, 66, 655, 682, 838, 841, 842, 843, 847, 848, 855, 856, 859, 861, 865, 866, 872], "place": [1, 10, 11, 24, 25, 28, 42, 43, 61, 68, 69, 72, 73, 74, 78, 80, 90, 92, 94, 95, 96, 97, 101, 103, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 329, 330, 333, 345, 346, 351, 352, 353, 355, 358, 359, 360, 361, 365, 367, 368, 369, 370, 372, 373, 374, 378, 379, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 491, 501, 507, 510, 514, 527, 540, 543, 547, 556, 564, 565, 570, 574, 576, 578, 579, 580, 594, 598, 609, 613, 618, 622, 643, 648, 649, 650, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 818, 839, 840, 843, 844, 845, 848, 849, 851, 852, 853, 855, 857, 858, 862, 863, 865, 866, 868, 874], "folder": [1, 5, 24, 25, 28, 42, 43, 48, 63, 842, 843, 845, 848, 855, 858, 862, 865, 866, 867], "edit": [1, 841, 842, 843, 856, 871], "titl": [1, 26, 29, 31, 33, 44, 62, 65, 835, 841, 843, 848], "accordingli": [1, 73, 78, 83, 84, 86, 87, 96, 101, 106, 109, 110, 156, 257, 262, 264, 280, 290, 304, 352, 353, 389, 648, 651, 656, 663, 664, 666, 667, 713, 767, 771, 772, 773, 774, 782, 783, 784, 785, 786, 787, 788, 789, 790, 862, 870, 873], "render": [1, 848, 853], "webpag": [1, 34], "content": [1, 2, 16, 17, 26, 31, 33, 44, 47, 62, 63, 73, 90, 96, 404, 547, 841, 843, 848, 851, 861, 864, 870], "behind": [1, 36, 47, 844, 857, 865, 869], "exist": [1, 16, 36, 47, 48, 61, 62, 63, 66, 69, 73, 74, 90, 92, 96, 97, 103, 144, 395, 479, 480, 486, 487, 489, 491, 492, 493, 500, 517, 562, 598, 653, 658, 722, 724, 725, 726, 728, 730, 731, 733, 735, 818, 821, 834, 841, 842, 845, 847, 851, 852, 853, 858, 859, 861, 862, 865, 868, 870, 871, 872, 874, 882], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 62, 77, 100, 655, 680, 681, 814, 870], "h2": [1, 2, 31, 33, 44], "tag": [1, 2, 31, 33, 44, 842, 843], "h3": [1, 2, 31, 33, 44], "subsect": [1, 2, 31, 33, 44, 841, 842, 843, 845], "explan": [1, 2, 31, 33, 44, 841, 842, 843, 849, 853, 857, 862, 866], "go": [1, 6, 7, 8, 9, 10, 11, 26, 30, 32, 36, 43, 45, 46, 48, 53, 68, 73, 96, 100, 392, 435, 439, 660, 751, 752, 837, 839, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 866, 869, 872, 882, 883], "default": [1, 4, 5, 8, 9, 12, 13, 26, 40, 47, 48, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 189, 190, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 213, 214, 216, 217, 221, 224, 225, 226, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 587, 590, 591, 594, 595, 598, 599, 604, 608, 609, 610, 611, 613, 615, 617, 618, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 799, 800, 801, 806, 810, 811, 813, 814, 815, 816, 817, 818, 819, 829, 830, 834, 841, 842, 843, 847, 848, 850, 851, 852, 853, 854, 857, 858, 862, 865, 868, 870, 874, 879, 882], "text": [1, 6, 7, 8, 9, 24, 25, 29, 61, 73, 74, 393, 394, 461, 469, 841, 843, 848, 852, 853], "paragraph": [1, 2, 31, 33, 44, 848], "p": [1, 2, 31, 33, 44, 59, 73, 74, 78, 96, 97, 101, 114, 156, 261, 393, 398, 443, 456, 525, 558, 559, 648, 651, 653, 656, 660, 697, 713, 748, 814, 842, 843, 844], "path": [1, 24, 25, 26, 28, 29, 42, 43, 62, 63, 795, 806, 823, 842, 848, 861, 862, 863, 873, 882], "correspond": [1, 4, 5, 22, 23, 27, 28, 32, 47, 48, 62, 70, 72, 73, 74, 77, 80, 83, 84, 86, 90, 93, 95, 96, 100, 103, 109, 113, 116, 119, 145, 170, 182, 185, 245, 295, 309, 348, 362, 363, 386, 389, 392, 393, 395, 398, 404, 415, 421, 432, 437, 443, 446, 447, 448, 467, 492, 493, 514, 519, 520, 521, 524, 541, 542, 610, 632, 648, 649, 651, 653, 655, 656, 658, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 687, 691, 692, 697, 704, 705, 728, 729, 760, 766, 767, 771, 772, 773, 774, 779, 780, 785, 786, 787, 788, 795, 798, 800, 829, 834, 841, 843, 846, 847, 849, 850, 852, 853, 854, 857, 858, 860, 862, 865, 868, 870, 879, 882], "toctre": [1, 848], "index": [1, 61, 62, 63, 66, 69, 73, 74, 80, 83, 84, 85, 90, 92, 96, 97, 103, 106, 107, 108, 149, 156, 330, 337, 338, 347, 348, 349, 386, 392, 393, 395, 400, 402, 404, 415, 421, 452, 454, 461, 484, 491, 494, 503, 505, 507, 510, 511, 514, 515, 531, 532, 541, 550, 553, 571, 573, 594, 595, 599, 646, 648, 653, 657, 658, 660, 663, 664, 665, 718, 728, 732, 742, 743, 744, 747, 748, 749, 755, 757, 766, 767, 769, 771, 772, 773, 775, 777, 799, 814, 830, 832, 849, 854, 858, 859, 860, 861, 863, 865, 882], "rst": [1, 858], "left": [1, 50, 61, 62, 73, 78, 83, 85, 96, 101, 106, 108, 136, 137, 249, 264, 357, 373, 380, 389, 390, 392, 393, 395, 404, 427, 446, 451, 457, 464, 466, 492, 503, 545, 546, 547, 548, 549, 550, 563, 647, 651, 653, 656, 663, 665, 691, 692, 697, 706, 711, 766, 777, 798, 842, 843, 845, 848, 850, 852, 855], "add": [1, 17, 38, 48, 50, 63, 65, 72, 73, 81, 88, 90, 95, 96, 104, 111, 118, 119, 380, 390, 392, 394, 435, 474, 590, 619, 651, 653, 655, 656, 661, 666, 682, 710, 759, 787, 795, 806, 814, 817, 834, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 861, 862, 865, 866, 868, 870, 872, 873, 882], "grid": [1, 26, 63, 69, 156, 333, 386, 648, 852, 865], "item": [1, 6, 7, 8, 9, 10, 11, 47, 59, 61, 63, 68, 74, 88, 90, 92, 95, 96, 97, 151, 176, 213, 267, 283, 291, 358, 362, 375, 560, 570, 571, 575, 610, 611, 648, 649, 650, 653, 660, 667, 745, 746, 747, 748, 752, 757, 758, 792, 841, 849, 850, 870, 879], "card": [1, 73, 96, 377, 389], "refer": [1, 12, 13, 16, 17, 73, 80, 86, 87, 96, 98, 103, 109, 110, 149, 164, 262, 280, 330, 345, 375, 386, 389, 392, 393, 395, 421, 426, 437, 444, 468, 491, 633, 634, 648, 651, 654, 656, 658, 666, 667, 687, 689, 712, 728, 786, 788, 789, 790, 814, 835, 840, 841, 842, 843, 845, 846, 848, 850, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 874, 882], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 20, 22, 23, 26, 28, 29, 30, 32, 36, 40, 43, 46, 47, 48, 50, 52, 53, 54, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 116, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 185, 188, 189, 190, 192, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 386, 389, 392, 393, 395, 402, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 648, 649, 651, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 750, 751, 752, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 813, 814, 824, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 879, 881, 882, 883, 884], "look": [1, 8, 9, 10, 11, 12, 13, 26, 36, 41, 47, 48, 61, 63, 66, 839, 841, 842, 843, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 862, 863, 865, 866, 867, 868, 870, 871, 873, 879, 882], "document": [1, 5, 8, 9, 10, 11, 15, 16, 17, 26, 36, 47, 80, 264, 352, 353, 389, 632, 651, 653, 732, 835, 837, 838, 840, 843, 848, 850, 852, 861, 862, 863, 865, 871], "sphinx": [1, 838, 848], "websit": [1, 65, 842, 845], "alreadi": [2, 5, 8, 9, 16, 26, 27, 28, 37, 40, 41, 42, 43, 45, 46, 47, 48, 53, 61, 63, 66, 73, 78, 90, 96, 101, 253, 263, 290, 300, 310, 395, 404, 480, 481, 501, 538, 547, 651, 656, 694, 701, 829, 830, 835, 841, 842, 843, 847, 849, 850, 851, 857, 861, 862, 868, 872, 873, 882], "instal": [2, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 27, 28, 29, 30, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 61, 63, 64, 65, 66, 838, 842, 843, 847, 848, 855, 856], "skip": [2, 6, 7, 26, 40, 41, 45, 46, 48, 63, 73, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 393, 395, 416, 417, 418, 436, 452, 454, 461, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 503, 506, 508, 510, 511, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 660, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 799, 829, 848, 858, 865], "colab": [2, 6, 7, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 48, 61, 63, 65, 66], "manual": [2, 8, 9, 10, 11, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 48, 657, 660, 715, 716, 740, 750, 751, 841, 842, 843, 850, 856, 865, 871], "mind": [2, 30, 32, 36, 42, 47, 51, 841, 842, 846, 849, 865, 873], "click": [2, 4, 5, 63, 841, 842, 843, 853, 855, 856], "runtim": [2, 4, 5, 6, 7, 12, 13, 22, 23, 24, 25, 26, 27, 28, 38, 47, 48, 50, 61, 62, 844, 858, 865, 868, 882], "restart": [2, 4, 5, 6, 7, 12, 13, 24, 25, 26, 61, 62, 842, 855], "git": [2, 4, 5, 6, 7, 12, 13, 24, 25, 26, 27, 40, 41, 45, 46, 47, 61, 62, 63, 64, 835, 838, 840, 842, 843, 845, 848, 855, 856, 865, 873], "clone": [2, 4, 5, 12, 13, 17, 24, 25, 47, 61, 63, 64, 835, 838, 843, 855, 873], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 24, 25, 26, 27, 28, 32, 40, 41, 42, 43, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 72, 73, 95, 96, 98, 164, 172, 260, 270, 271, 286, 345, 352, 353, 386, 389, 392, 395, 404, 436, 510, 540, 633, 634, 648, 649, 651, 654, 656, 658, 666, 704, 705, 736, 786, 835, 836, 838, 842, 843, 845, 848, 850, 853, 855, 873], "github": [2, 4, 5, 6, 7, 12, 13, 16, 17, 22, 23, 24, 25, 26, 27, 28, 40, 41, 45, 46, 47, 48, 61, 62, 63, 64, 65, 835, 838, 840, 843, 845, 848, 850, 852, 853, 855, 856, 864, 865, 873], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 24, 25, 26, 27, 28, 32, 40, 41, 45, 46, 47, 48, 61, 62, 63, 64, 65, 835, 838, 842, 843, 845, 848, 850, 855, 873], "llc": [2, 4, 5, 12, 13, 24, 25, 26, 27, 40, 41, 45, 46, 47, 61, 62, 63, 64, 835, 836, 873], "model": [2, 3, 4, 5, 18, 19, 29, 34, 35, 36, 64, 66, 257, 290, 394, 470, 651, 811, 815, 816, 820, 834, 835, 871, 874, 876, 877, 879, 882, 883, 884], "depth": [2, 4, 5, 8, 9, 12, 13, 16, 17, 24, 25, 62, 69, 73, 77, 92, 96, 100, 158, 392, 395, 428, 488, 563, 575, 648, 653, 655, 673, 674, 843, 870, 873], "repositori": [2, 4, 5, 12, 13, 24, 25, 41, 838, 841, 842, 843, 845, 848, 855, 864], "cd": [2, 4, 5, 12, 13, 24, 25, 47, 64, 835, 838, 842, 843, 855, 873], "acceler": [3, 34, 850, 862, 877], "convert": [3, 12, 13, 15, 17, 18, 19, 22, 23, 27, 28, 29, 30, 32, 34, 37, 39, 42, 43, 45, 46, 47, 48, 49, 51, 53, 61, 64, 66, 68, 69, 72, 90, 91, 92, 95, 113, 143, 144, 157, 167, 168, 210, 211, 212, 213, 224, 232, 236, 256, 296, 395, 400, 479, 480, 481, 531, 596, 614, 616, 617, 618, 620, 648, 649, 650, 651, 653, 656, 660, 714, 741, 752, 753, 795, 824, 829, 841, 846, 847, 859, 860, 862, 865, 867, 870, 871, 874, 875, 877, 878, 880, 884], "faster": [3, 4, 5, 16, 18, 19, 22, 23, 27, 28, 29, 34, 40, 47, 48, 64, 66, 73, 78, 96, 101, 393, 466, 656, 706, 838, 840, 848, 874], "infer": [3, 8, 9, 10, 11, 18, 19, 22, 23, 26, 27, 28, 29, 34, 38, 50, 52, 53, 62, 64, 66, 69, 73, 74, 77, 80, 92, 96, 97, 100, 103, 142, 144, 148, 152, 153, 157, 160, 166, 175, 176, 177, 178, 179, 329, 330, 392, 395, 399, 428, 514, 528, 574, 608, 609, 648, 649, 653, 655, 658, 678, 728, 824, 825, 844, 847, 850, 851, 865, 870, 884], "finetun": [3, 34, 61], "project": [3, 24, 25, 28, 34, 39, 41, 42, 43, 47, 48, 51, 114, 655, 682, 814, 838, 841, 842, 843, 846, 847, 848, 865, 872, 877, 882], "resnet": [3, 8, 9, 27, 28, 34, 47, 879], "imag": [3, 4, 5, 8, 9, 10, 11, 22, 23, 27, 28, 30, 34, 42, 47, 48, 61, 62, 63, 64, 65, 66, 73, 77, 95, 96, 100, 118, 145, 237, 238, 239, 240, 243, 246, 255, 258, 260, 262, 271, 272, 273, 278, 280, 293, 300, 301, 303, 304, 308, 392, 411, 412, 428, 429, 430, 432, 563, 648, 651, 653, 655, 657, 668, 669, 670, 671, 672, 675, 676, 677, 718, 814, 842, 855, 868, 873, 879, 882], "keypoint": [3, 34], "augment": [3, 17, 26, 34, 61], "kornia": [3, 14, 15, 34, 35, 40, 42, 45, 47, 48, 61, 65, 835], "denois": [3, 34], "written": [4, 5, 6, 7, 8, 9, 26, 36, 38, 40, 41, 45, 46, 47, 48, 61, 74, 395, 490, 842, 845, 846, 853, 856, 857, 861, 862, 866, 870, 871, 872, 880, 882], "classif": [4, 5, 24, 25, 29, 48, 61, 882], "three": [4, 5, 6, 7, 34, 52, 53, 63, 73, 156, 329, 386, 395, 481, 648, 842, 843, 849, 850, 852, 862, 865, 868, 871, 883], "major": [4, 5, 6, 7, 663, 769, 850, 851, 863, 865, 872, 882], "ml": [4, 5, 6, 7, 8, 9, 16, 26, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 66, 835, 837, 840, 862, 871, 875, 877, 881, 882, 884], "framework": [4, 5, 6, 7, 10, 11, 15, 18, 19, 30, 32, 36, 37, 38, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 61, 63, 65, 68, 74, 187, 209, 219, 222, 233, 561, 577, 581, 613, 616, 649, 650, 653, 660, 742, 793, 795, 799, 806, 811, 818, 824, 825, 839, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884], "sinc": [4, 5, 12, 13, 16, 24, 25, 26, 40, 42, 43, 47, 61, 63, 73, 96, 114, 389, 838, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 861, 862, 872, 882], "automat": [4, 5, 12, 13, 18, 19, 24, 25, 26, 43, 47, 53, 836, 841, 842, 843, 844, 847, 848, 850, 856, 858, 861, 865, 868, 874, 876, 882], "sure": [4, 5, 12, 13, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 45, 46, 47, 61, 841, 842, 843, 845, 854, 855, 862, 863, 865, 868], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 16, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 43, 45, 46, 62, 73, 78, 90, 101, 119, 392, 394, 415, 473, 598, 642, 653, 654, 656, 699, 816, 820, 834, 835, 842, 843, 846, 849, 850, 858, 859, 860, 861, 862, 865, 866, 870, 871, 872, 874, 877, 879, 882, 883, 884], "dm": [4, 5, 6, 7, 12, 13, 22, 23, 28, 47, 59, 61], "haiku": [4, 5, 6, 7, 12, 13, 22, 23, 27, 28, 43, 47, 59, 61, 65, 811, 882], "exit": [4, 12, 24, 26, 47, 48, 851], "download": [4, 5, 8, 9, 10, 11, 16, 17, 24, 25, 26, 30, 32, 40, 41, 45, 46, 47, 48, 62, 63, 66, 838, 842, 848, 865, 879], "imagenet": [4, 5, 8, 9, 26, 32, 48, 62, 64], "class": [4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 24, 25, 26, 29, 30, 32, 36, 40, 46, 47, 48, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 151, 160, 166, 182, 185, 198, 200, 201, 260, 297, 355, 377, 389, 403, 404, 412, 413, 446, 546, 547, 554, 563, 567, 580, 590, 613, 648, 649, 650, 651, 653, 655, 656, 657, 660, 661, 676, 681, 685, 691, 701, 705, 706, 708, 715, 716, 717, 734, 741, 752, 759, 774, 781, 785, 786, 795, 796, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 829, 834, 841, 847, 848, 849, 850, 851, 852, 853, 857, 859, 860, 863, 864, 865, 868, 870, 871, 874, 878, 879, 880, 882, 883], "wget": [4, 5, 8, 9, 12, 13, 24, 25, 61, 62, 65, 842], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 24, 25, 27, 28, 42, 47, 48, 61, 64, 65, 90, 853, 883], "githubusercont": [4, 5, 8, 9, 12, 13, 24, 25, 61, 65], "hub": [4, 5, 8, 9, 12, 13, 24, 25, 48, 61, 64, 66], "master": [4, 5, 12, 13, 24, 25, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 61, 63, 64, 65, 882], "imagenet_class": [4, 5, 24, 25], "categori": [4, 5, 8, 9, 24, 25, 841, 845, 846, 849, 850, 854, 862, 866], "strip": [4, 5, 24, 25, 38, 50], "readlin": [4, 5, 24, 25, 62], "cat": [4, 5, 10, 11, 24, 25, 62, 863, 868, 870, 871, 879], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 16, 22, 23, 24, 25, 27, 28, 42, 47, 48, 63, 64], "filenam": [4, 5, 12, 13, 16, 17, 24, 25, 26, 47, 48, 61, 63, 66, 74, 816, 823], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 62, 64, 65, 66, 73, 84, 88, 92, 96, 111, 211, 212, 216, 228, 324, 404, 540, 575, 591, 650, 653, 657, 659, 664, 718, 738, 739, 774, 806, 820, 824, 825, 835, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 856, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 873, 879, 881, 882], "devic": [4, 5, 8, 9, 10, 11, 12, 18, 19, 22, 23, 24, 25, 26, 27, 28, 40, 41, 45, 46, 48, 62, 63, 66, 69, 73, 82, 90, 92, 96, 105, 118, 121, 122, 123, 142, 143, 144, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 329, 330, 345, 346, 386, 399, 489, 526, 527, 529, 530, 554, 568, 569, 648, 653, 662, 760, 761, 762, 763, 793, 795, 796, 811, 813, 814, 815, 816, 817, 818, 819, 821, 834, 843, 844, 847, 850, 854, 858, 859, 863, 865, 866, 868, 870, 872, 874, 882], "torchvis": [4, 5, 8, 9, 17, 22, 23, 24, 25, 26, 48, 61], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 16, 22, 23, 24, 25, 26, 27, 28, 42, 47, 48, 61, 62, 64, 73, 77, 96, 100, 392, 393, 414, 415, 420, 421, 424, 425, 426, 436, 437, 440, 457, 655, 679, 798, 801, 814, 859, 865, 874, 879, 882, 883], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 27, 28, 42, 47, 48, 62, 63, 64], "time": [4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 22, 23, 26, 27, 28, 40, 43, 47, 48, 53, 61, 63, 64, 65, 73, 75, 78, 84, 96, 98, 107, 113, 114, 151, 358, 389, 392, 393, 395, 404, 421, 426, 438, 440, 461, 468, 501, 508, 540, 634, 639, 648, 654, 655, 656, 658, 659, 663, 664, 678, 681, 696, 734, 737, 738, 739, 766, 767, 771, 772, 814, 815, 816, 834, 841, 842, 843, 845, 847, 849, 850, 852, 855, 857, 858, 859, 861, 862, 865, 866, 870, 871, 872, 873, 876, 879, 882, 883], "filterwarn": [4, 5, 6, 7, 26], "ignor": [4, 5, 6, 7, 26, 60, 68, 69, 73, 90, 96, 156, 392, 393, 395, 404, 416, 417, 418, 447, 455, 463, 504, 505, 509, 548, 648, 655, 660, 682, 751, 752, 818, 842, 848, 852, 865], "compos": [4, 5, 8, 9, 10, 11, 22, 23, 24, 25, 26, 47, 48, 61, 73, 96, 392, 406, 407, 408, 409, 842, 849, 862, 865, 879, 882], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 61, 62, 73, 96, 392, 428, 868], "centercrop": [4, 5, 16, 24, 25, 26], "224": [4, 5, 8, 9, 10, 11, 24, 25, 26, 30, 32, 47, 61, 62, 64], "totensor": [4, 5, 8, 9, 10, 11, 22, 23, 24, 25, 26, 61], "485": [4, 5, 24, 25, 26, 27, 40, 41, 45, 46, 61], "456": [4, 5, 24, 25, 26, 61, 865], "406": [4, 5, 24, 25, 26, 61, 73, 96, 414, 558, 653], "229": [4, 5, 24, 25, 26, 61, 296, 651], "225": [4, 5, 24, 25, 26, 61, 63, 251, 651], "torch_img": [4, 5, 12, 13, 24, 25], "unsqueez": [4, 5, 12, 13, 22, 23, 24, 25, 48], "img": [4, 5, 12, 13, 16, 17, 24, 25, 42, 47, 48, 61, 62, 63, 65], "ipython": [4, 5, 12, 13, 24, 25, 40, 42, 43, 47, 48, 66], "displai": [4, 5, 12, 13, 24, 25, 26, 42, 47, 48, 61, 62, 63, 65, 66, 842, 848, 854, 865], "end": [4, 5, 12, 13, 26, 61, 62, 73, 96, 142, 245, 301, 370, 389, 392, 394, 395, 440, 469, 491, 501, 504, 505, 648, 651, 830, 842, 843, 847, 855, 861, 866, 868, 884], "set_default_devic": [4, 6, 8, 9, 12, 13, 22, 24, 26, 27, 234, 650, 851], "ivy_model": [4, 5, 6, 7, 12, 13, 24, 25, 64], "ivy_alexnet": [4, 5], "quick": [4, 5, 34, 48, 843, 844, 863], "trace_graph": [4, 5, 6, 7, 12, 13, 24, 25, 38, 39, 40, 41, 47, 48, 50, 51, 52, 53, 54, 55, 64, 816, 835, 871, 872, 878], "moment": [4, 5, 73, 75, 96, 98, 393, 450, 633, 634, 639, 654, 818, 834, 841, 847, 872, 879], "cost": [4, 5, 75, 98, 633, 634, 637, 639, 640, 641, 654, 659, 737, 738, 739, 830, 850, 868], "arg": [4, 5, 8, 9, 12, 13, 17, 18, 19, 20, 22, 23, 24, 25, 30, 32, 40, 41, 43, 47, 48, 52, 53, 54, 65, 68, 90, 112, 122, 138, 220, 230, 619, 647, 648, 650, 653, 793, 795, 810, 811, 814, 815, 816, 821, 824, 829, 834, 835, 846, 850, 851, 854, 860, 861, 862, 868, 870, 879], "asarrai": [4, 5, 6, 7, 12, 13, 16, 22, 23, 24, 25, 62, 69, 73, 74, 85, 92, 96, 97, 108, 143, 402, 532, 533, 563, 574, 578, 579, 609, 610, 611, 648, 653, 655, 664, 665, 669, 772, 776, 854, 859, 862, 863], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 40, 41, 45, 46, 47, 48, 62, 63, 66, 69, 73, 82, 92, 96, 105, 154, 155, 158, 210, 211, 212, 228, 399, 526, 527, 529, 530, 648, 650, 656, 662, 707, 760, 761, 762, 763, 813, 814, 815, 816, 817, 818, 819, 834, 870, 871, 872, 874], "output": [4, 5, 6, 7, 10, 11, 12, 13, 18, 19, 20, 24, 25, 26, 36, 38, 42, 43, 45, 47, 48, 60, 61, 62, 64, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 169, 171, 196, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 339, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 389, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 434, 436, 437, 438, 440, 441, 443, 444, 445, 447, 449, 452, 453, 455, 458, 459, 460, 461, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 484, 485, 486, 489, 491, 492, 493, 494, 495, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 557, 558, 559, 563, 564, 565, 567, 571, 580, 587, 594, 595, 596, 620, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 753, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 798, 813, 814, 829, 830, 838, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 874, 879, 883], "softmax": [4, 5, 8, 9, 10, 11, 24, 25, 30, 43, 47, 48, 63, 67, 77, 88, 89, 100, 394, 471, 645, 655, 682, 685, 810], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 28, 29, 30, 32, 36, 43, 45, 47, 48, 54, 60, 61, 63, 65, 66, 72, 73, 88, 90, 95, 96, 111, 119, 138, 139, 141, 174, 196, 211, 230, 245, 291, 392, 394, 395, 398, 399, 404, 438, 471, 491, 519, 521, 526, 546, 547, 580, 647, 649, 650, 651, 653, 659, 737, 738, 793, 795, 799, 806, 811, 815, 816, 818, 819, 824, 829, 834, 839, 841, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 879], "argsort": [4, 5, 24, 25, 85, 108, 665, 777, 862], "descend": [4, 5, 24, 25, 85, 108, 656, 665, 706, 707, 775, 778], "top": [4, 5, 24, 25, 43, 45, 47, 48, 61, 62, 73, 80, 96, 336, 386, 394, 395, 469, 512, 563, 653, 722, 842, 843, 850, 855, 862, 864, 865, 868, 882], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25, 26, 48, 61, 62, 63, 64, 73, 79, 96, 102, 384, 399, 526, 529, 657, 715, 716, 717, 810, 879], "gather": [4, 5, 24, 25, 61, 73, 74, 96, 97, 347, 348, 349, 386, 571, 573, 653], "to_list": [4, 5, 24, 25, 74, 97, 653], "arrai": [4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 24, 25, 26, 28, 29, 36, 37, 38, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 185, 186, 188, 189, 190, 192, 194, 195, 196, 197, 203, 213, 214, 218, 223, 225, 227, 230, 231, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 598, 599, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 628, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 749, 752, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 800, 806, 813, 814, 815, 816, 819, 824, 829, 830, 832, 839, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 874, 882, 884], "282": [4, 5, 24, 25], "281": [4, 5, 24, 25, 61, 63], "285": [4, 5, 24, 25, 96], "64773697": [4, 5], "29496649": [4, 5], "04526037": [4, 5], "tiger": [4, 5, 24, 25], "tabbi": [4, 5, 10, 11, 24, 25], "egyptian": [4, 5, 24, 25], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 24, 25, 26], "dropout": [4, 5, 77, 100, 392, 416, 417, 418, 655, 680, 682, 685, 814], "torch_output": [4, 5, 12, 13, 15, 18, 19, 24, 25, 27], "dim": [4, 5, 24, 25, 48, 63, 73, 90, 92, 96, 158, 330, 386, 392, 395, 410, 420, 421, 422, 425, 433, 491, 514, 648, 655, 668, 675, 676, 681, 800, 814, 850, 862, 863, 868], "torch_class": [4, 5, 24, 25], "torch_logit": [4, 5, 24, 25], "tensor": [4, 5, 6, 7, 8, 9, 17, 18, 19, 22, 23, 24, 25, 26, 28, 30, 32, 36, 37, 40, 41, 43, 45, 47, 48, 49, 53, 59, 61, 69, 72, 73, 74, 77, 78, 79, 80, 82, 86, 90, 92, 95, 96, 97, 100, 101, 102, 103, 105, 109, 112, 146, 154, 155, 158, 164, 180, 196, 288, 289, 319, 336, 340, 341, 342, 343, 344, 345, 354, 377, 384, 386, 389, 392, 393, 394, 395, 404, 405, 411, 412, 415, 419, 428, 429, 430, 431, 438, 440, 442, 449, 450, 451, 452, 455, 457, 459, 461, 462, 465, 467, 468, 469, 471, 474, 475, 491, 494, 499, 502, 503, 504, 505, 506, 509, 514, 515, 546, 551, 594, 595, 648, 649, 651, 653, 655, 656, 657, 658, 662, 666, 678, 681, 682, 697, 708, 715, 728, 730, 760, 783, 814, 824, 830, 834, 835, 846, 847, 850, 851, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 879, 883], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 24, 25, 43, 59, 636, 644, 654], "takebackward0": [4, 5, 24, 25], "great": [4, 5, 10, 11, 12, 13, 843, 865], "simpl": [4, 5, 10, 11, 30, 37, 40, 42, 43, 44, 46, 47, 48, 49, 50, 52, 53, 59, 61, 63, 66, 73, 96, 404, 540, 800, 814, 830, 841, 842, 843, 846, 848, 849, 850, 851, 852, 853, 858, 861, 862, 865, 866, 868, 870, 874, 876, 879, 882, 883], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 22, 23, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 59, 61, 62, 64, 66, 74, 86, 97, 237, 238, 239, 240, 243, 246, 255, 258, 260, 262, 271, 272, 273, 278, 280, 293, 301, 303, 304, 308, 570, 571, 651, 653, 656, 666, 710, 783, 785, 786, 787, 788, 841, 846, 848, 849, 850, 851, 852, 853, 854, 855, 862, 863, 865, 866, 867, 868, 870, 871, 879], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 22, 23, 26, 27, 28, 36, 37, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 837, 839, 841, 842, 843, 848, 852, 855, 856, 860, 861, 879], "try": [4, 5, 8, 9, 10, 11, 26, 37, 48, 49, 59, 62, 66, 90, 619, 653, 813, 824, 841, 842, 843, 845, 846, 849, 850, 854, 856, 861, 863, 870, 872], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 26, 27, 28, 30, 32, 37, 40, 41, 43, 45, 46, 47, 48, 49, 50, 52, 54, 59, 64, 65, 811, 820, 835, 846, 850, 851, 857, 861, 862, 865, 866, 868, 870, 871, 872, 874, 879, 882], "onc": [4, 5, 8, 9, 12, 13, 26, 47, 48, 59, 61, 78, 82, 101, 105, 230, 393, 446, 650, 656, 662, 691, 692, 693, 706, 760, 841, 842, 843, 849, 850, 851, 852, 855, 856, 861, 862, 865, 868, 870, 872, 879], "set": [4, 5, 10, 11, 16, 18, 19, 30, 32, 38, 40, 41, 45, 46, 47, 48, 50, 53, 61, 62, 63, 64, 65, 68, 73, 74, 77, 78, 83, 85, 86, 90, 96, 97, 100, 101, 106, 108, 109, 131, 134, 141, 162, 164, 198, 199, 200, 201, 202, 213, 226, 227, 228, 229, 230, 245, 345, 357, 373, 375, 380, 386, 389, 390, 392, 393, 394, 395, 404, 415, 436, 440, 444, 448, 451, 469, 474, 475, 491, 501, 505, 512, 540, 545, 546, 547, 548, 549, 550, 552, 556, 563, 575, 580, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 613, 621, 645, 647, 648, 649, 650, 651, 653, 655, 656, 660, 662, 663, 665, 666, 678, 685, 687, 697, 699, 702, 705, 706, 740, 747, 750, 751, 752, 757, 758, 764, 766, 767, 771, 773, 774, 775, 778, 786, 788, 795, 798, 799, 800, 801, 806, 813, 814, 816, 818, 824, 830, 833, 834, 837, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 856, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 873, 878, 879, 882, 883], "post": [4, 5, 8, 9, 12, 13, 26, 61, 81, 104, 661, 759, 842, 855, 860], "process": [4, 5, 8, 9, 12, 13, 16, 40, 47, 48, 52, 61, 224, 236, 650, 837, 842, 843, 848, 849, 855, 856, 858, 860, 862, 863, 864, 865, 868, 870, 871, 879, 882, 884], "st": [4, 5, 6, 7, 22, 23, 798, 845, 863, 865], "perf_count": [4, 5, 18, 19, 20, 22, 23], "raw_logit": [4, 5], "latenc": [4, 5, 22, 23], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 17, 20, 21, 32, 43, 46, 47, 48, 61, 65, 156, 648, 820, 858, 863, 868, 870, 871, 883], "direct": [4, 5, 48, 73, 96, 358, 365, 369, 374, 378, 389, 392, 395, 426, 437, 492, 493, 508, 665, 778, 841, 846, 848, 862, 868, 870, 881, 882, 883], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 16, 59, 61, 70, 73, 74, 82, 83, 86, 93, 96, 97, 105, 106, 149, 154, 158, 160, 166, 169, 172, 174, 176, 178, 180, 183, 185, 186, 190, 193, 197, 201, 205, 207, 225, 252, 288, 289, 400, 404, 531, 541, 542, 543, 571, 580, 617, 648, 649, 650, 651, 653, 662, 663, 666, 761, 762, 763, 767, 779, 780, 785, 787, 798, 799, 850, 862, 865, 870], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 26, 27, 28, 29, 30, 32, 38, 42, 43, 47, 48, 50, 53, 59, 60, 84, 88, 111, 656, 664, 704, 771, 772, 773, 774, 839, 841, 842, 843, 846, 848, 849, 850, 851, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 868, 872, 879, 882], "ident": [4, 5, 8, 9, 18, 19, 29, 43, 45, 62, 64, 78, 90, 149, 218, 573, 599, 648, 650, 653, 656, 660, 694, 698, 753, 814, 820, 849, 858, 859, 862, 863, 866, 868, 872, 874], "had": [4, 5, 849, 861, 866, 870, 871, 882, 883], "postprocess": [4, 5], "routin": [4, 5, 861, 862, 868, 872, 882], "feed": [4, 5, 230, 650, 879, 882, 883], "carefulli": [4, 5, 295, 651, 813, 862], "rewrit": [4, 5], "easili": [4, 5, 26, 42, 47, 48, 59, 842, 846, 855, 862, 865, 868, 871, 872, 877, 882], "quickest": [4, 5], "particular": [4, 5, 47, 48, 285, 651, 799, 842, 843, 845, 847, 850, 852, 859, 861, 862, 865, 866, 882], "again": [4, 5, 12, 13, 39, 50, 51, 52, 53, 656, 704, 843, 846, 847, 848, 849, 852, 854, 856, 861, 862, 865, 866, 868, 870, 872], "speed": [4, 5, 22, 23, 27, 28, 29, 38, 47, 48, 61, 66, 74, 97, 587, 653, 865], "repeat": [4, 5, 6, 7, 39, 51, 73, 74, 80, 96, 97, 103, 392, 395, 404, 421, 426, 490, 540, 565, 653, 657, 658, 659, 715, 734, 738, 739, 829, 843, 846, 847, 852, 853, 861, 865], "previou": [4, 5, 16, 29, 39, 40, 42, 48, 50, 51, 52, 54, 75, 96, 98, 204, 205, 206, 207, 208, 381, 391, 392, 438, 620, 622, 623, 624, 625, 627, 628, 630, 634, 639, 649, 653, 654, 813, 833, 842, 843, 845, 847, 851, 857, 862, 865, 868, 872], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 22, 23, 24, 25, 28, 34, 35, 39, 42, 47, 50, 52, 53, 65, 74, 78, 90, 97, 101, 582, 583, 586, 597, 606, 621, 629, 653, 656, 795, 806, 816, 818, 834, 835, 845, 849, 850, 862, 867, 868, 871, 872, 878, 879, 883], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 53, 62, 69, 73, 92, 96, 158, 404, 540, 648, 846, 848], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 27, 607, 630, 653, 830, 850, 867], "fix": [4, 5, 12, 13, 63, 73, 96, 113, 114, 389, 392, 393, 438, 468, 655, 682, 835, 839, 842, 843, 845, 850, 856, 865, 866], "until": [4, 5, 12, 13, 16, 17, 40, 48, 830, 843, 861, 870, 872, 879], "o": [4, 5, 12, 13, 26, 60, 61, 62, 63, 65, 590, 653, 655, 682, 842, 844, 871, 873], "environ": [4, 5, 12, 13, 16, 26, 27, 28, 40, 41, 42, 43, 45, 46, 62, 65, 836, 837, 843, 873, 876, 882, 884], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 26, 29, 40, 41, 43, 45, 46, 838, 840, 842, 848, 884], "jit": [4, 5, 22, 23, 27, 28, 47, 50, 871, 872, 879, 882], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 22, 23], "warm": [4, 5], "_": [4, 5, 18, 19, 20, 22, 23, 27, 28, 29, 47, 60, 61, 72, 73, 90, 95, 96, 98, 114, 172, 260, 262, 270, 271, 286, 352, 353, 389, 392, 395, 404, 436, 465, 468, 510, 540, 563, 633, 634, 649, 651, 653, 654, 656, 658, 660, 666, 704, 705, 707, 736, 747, 786, 843, 845, 850, 853, 861, 863, 865], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 73, 89, 90, 126, 392, 394, 433, 473, 474, 664, 771, 773, 800, 810, 842, 843, 845, 852, 871], "note": [4, 5, 8, 9, 12, 13, 16, 26, 29, 47, 48, 53, 62, 63, 64, 73, 74, 78, 80, 84, 96, 101, 103, 113, 151, 164, 196, 264, 299, 300, 307, 345, 346, 366, 386, 389, 392, 393, 395, 415, 446, 451, 461, 462, 468, 491, 510, 649, 651, 655, 656, 658, 664, 666, 682, 691, 692, 703, 704, 706, 728, 732, 772, 774, 783, 814, 830, 834, 839, 841, 842, 843, 846, 850, 852, 853, 856, 861, 862, 863, 865, 866, 868], "were": [4, 5, 12, 13, 16, 26, 27, 40, 41, 45, 46, 64, 90, 93, 185, 189, 190, 264, 651, 655, 682, 841, 842, 843, 850, 854, 856, 860, 861, 863, 865, 866, 868, 870, 879, 882, 883], "function": [4, 5, 8, 9, 10, 11, 15, 16, 18, 19, 20, 26, 27, 29, 30, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 182, 183, 184, 185, 188, 189, 190, 192, 196, 197, 214, 216, 217, 226, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 590, 593, 594, 595, 598, 599, 602, 604, 606, 609, 610, 611, 612, 613, 615, 617, 618, 619, 625, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 746, 747, 748, 750, 751, 752, 753, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 796, 798, 799, 800, 801, 806, 810, 813, 816, 820, 824, 825, 832, 834, 839, 842, 843, 844, 845, 846, 847, 848, 852, 853, 855, 861, 864, 871, 874, 877, 878, 879, 880, 881, 882, 883, 884], "dog": [4, 5, 48], "006431100999861883": [4, 5], "258": [4, 5, 655, 670, 672], "104": [4, 5, 86, 656, 666, 701, 781], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 24, 25, 26, 29, 48, 61, 62, 63, 64, 73, 79, 96, 102, 394, 470, 473, 476, 657, 715, 716, 717, 850], "down": [4, 5, 38, 50, 64, 73, 96, 392, 395, 428, 493, 842, 865, 874, 882], "itself": [4, 5, 10, 11, 26, 40, 52, 72, 113, 291, 553, 619, 651, 653, 660, 752, 830, 839, 842, 843, 845, 848, 849, 850, 851, 854, 855, 856, 861, 862, 872, 879, 882, 883], "version": [4, 5, 8, 9, 16, 17, 18, 19, 29, 42, 43, 50, 61, 62, 63, 66, 67, 73, 96, 113, 126, 308, 357, 359, 389, 404, 545, 550, 632, 651, 653, 656, 692, 693, 795, 820, 824, 825, 842, 843, 848, 850, 853, 861, 863, 870, 877], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5, 26], "0587": [4, 5], "promis": [4, 5, 10, 11], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27, 32, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 53, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 800, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 841, 842, 843, 845, 846, 848, 849, 862, 864, 876, 878, 880, 882, 883, 884], "modul": [4, 5, 8, 9, 12, 13, 16, 17, 22, 23, 28, 30, 32, 36, 40, 41, 42, 43, 46, 47, 48, 49, 53, 59, 60, 61, 63, 64, 65, 88, 90, 111, 119, 385, 387, 388, 396, 397, 401, 591, 653, 667, 791, 795, 810, 811, 812, 814, 815, 817, 819, 820, 823, 824, 834, 838, 842, 846, 847, 848, 854, 858, 861, 862, 864, 865, 870, 871, 872, 878, 879, 880, 882, 883], "__init__": [4, 5, 12, 13, 17, 30, 32, 41, 46, 47, 48, 59, 60, 61, 63, 90, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 796, 803, 804, 805, 810, 813, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 829, 831, 834, 841, 846, 847, 850, 854, 862, 866, 871], "self": [4, 5, 8, 9, 10, 11, 12, 13, 17, 30, 32, 46, 47, 48, 59, 60, 61, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 180, 182, 185, 188, 189, 190, 192, 194, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 655, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 818, 820, 829, 843, 846, 849, 854, 862, 863, 871], "num_class": [4, 5, 26, 30, 32, 47, 48, 61, 63, 65, 870], "1000": [4, 5, 8, 9, 18, 19, 20, 22, 23, 24, 25, 26, 30, 47, 48, 61, 62, 63, 64, 66, 69, 92, 155, 648], "v": [4, 5, 6, 7, 12, 13, 34, 35, 47, 50, 53, 54, 59, 62, 63, 73, 77, 85, 92, 96, 100, 108, 155, 255, 260, 262, 303, 393, 395, 447, 457, 464, 465, 490, 651, 655, 659, 665, 682, 685, 738, 739, 777, 795, 814, 815, 816, 817, 818, 819, 838, 842, 843, 844, 848, 855, 870, 881], "_build": [4, 5, 12, 13, 815, 816], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 26, 27, 28, 29, 47, 48, 61, 65, 68, 73, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 119, 122, 220, 395, 501, 590, 619, 648, 650, 653, 793, 795, 810, 811, 814, 815, 816, 824, 834, 846, 850, 851, 854, 858, 861, 862, 868, 870, 879], "featur": [4, 5, 10, 11, 17, 27, 28, 29, 30, 32, 34, 36, 46, 47, 48, 61, 65, 73, 96, 392, 406, 408, 409, 416, 417, 418, 813, 814, 834, 835, 841, 842, 843, 846, 847, 850, 857, 866, 868, 876, 877, 882, 883, 884], "sequenti": [4, 5, 12, 13, 18, 19, 24, 25, 26, 43, 47, 63, 848, 849], "conv2d": [4, 5, 12, 13, 24, 25, 26, 43, 46, 47, 48, 63, 66, 77, 100, 655, 672, 814, 827], "64": [4, 5, 12, 13, 24, 25, 26, 59, 61, 62, 63, 66, 72, 73, 77, 95, 96, 97, 100, 101, 105, 109, 119, 181, 251, 261, 295, 304, 305, 363, 389, 392, 414, 424, 563, 564, 611, 639, 649, 651, 653, 654, 655, 656, 660, 666, 670, 672, 674, 676, 677, 698, 701, 711, 748, 752, 762, 781, 785, 842, 850], "data_format": [4, 5, 63, 73, 77, 96, 100, 392, 398, 407, 411, 412, 413, 416, 417, 418, 429, 430, 431, 432, 434, 519, 520, 521, 524, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 798, 814, 817], "nchw": [4, 5, 63, 73, 77, 96, 100, 392, 398, 407, 412, 417, 430, 434, 524, 655, 668, 671, 672, 675, 676, 677, 814], "relu": [4, 5, 12, 13, 24, 25, 26, 43, 46, 47, 48, 59, 66, 67, 73, 88, 89, 96, 128, 319, 320, 328, 384, 645, 810, 863], "maxpool2d": [4, 5, 12, 13, 24, 25, 26, 61, 814], "192": [4, 5, 63, 798, 829], "384": [4, 5, 98, 633, 654, 660, 740], "avgpool": [4, 5, 24, 25, 26], "adaptiveavgpool2d": [4, 5, 24, 25, 26, 814], "classifi": [4, 5, 10, 11, 26, 29, 30, 32, 47, 48, 61, 63, 64, 841, 879], "prob": [4, 5, 8, 9, 10, 11, 63, 73, 77, 96, 100, 105, 392, 399, 416, 417, 418, 526, 655, 662, 678, 760, 814], "4096": [4, 5], "_forward": [4, 5, 12, 13, 22, 23, 27, 28, 47, 59, 60, 63, 853, 871], "invalid": [5, 73, 87, 96, 110, 395, 510, 656, 658, 667, 712, 724, 789, 790, 798, 842, 850], "distribut": [5, 66, 73, 79, 82, 96, 102, 105, 392, 393, 394, 399, 416, 417, 418, 451, 462, 468, 471, 473, 474, 476, 526, 527, 528, 529, 530, 657, 662, 715, 716, 717, 760, 761, 762, 763, 765, 813, 814, 841, 842, 851, 872, 882], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 15, 40, 42, 43, 65, 842, 847, 850, 861, 865, 868], "homebrew": [5, 15], "site": [5, 15, 40, 42, 43, 883], "resolv": [5, 8, 9, 24, 25, 61, 63, 73, 86, 264, 404, 541, 542, 651, 658, 666, 724, 779, 780, 785, 787, 843, 848, 850, 856, 870], "account": [5, 53, 63, 65, 73, 80, 96, 103, 304, 395, 491, 651, 658, 728, 813, 829, 842, 853, 862, 866, 879], "behaviour": [5, 27, 28, 40, 42, 43, 128, 131, 291, 645, 651, 840, 843, 844, 845, 846, 849, 850, 851, 853, 854, 857, 858, 859, 861, 862, 865, 866], "conflict": [5, 27, 28, 40, 42, 43, 53, 842, 843, 862], "maco": 5, "incompat": [5, 171, 649], "remot": [5, 842, 845, 855, 856], "enumer": [5, 8, 9, 10, 11, 12, 13, 26, 61, 63, 803], "compress": 5, "156": [5, 16, 295, 651, 798], "delta": [5, 73, 75, 96, 98, 394, 470, 633, 654], "37": [5, 26, 29, 40, 42, 43, 48, 59, 67, 72, 73, 89, 95, 96, 100, 118, 129, 243, 251, 300, 303, 307, 400, 435, 531, 651, 655, 656, 660, 662, 679, 698, 748, 762], "reus": [5, 16, 61, 69, 92, 96, 103, 144, 479, 480, 487, 489, 491, 492, 493, 500, 517, 724, 725, 726, 728, 730, 731, 733, 735, 854, 865], "pack": [5, 655, 680], "83": [5, 24, 25, 29, 59, 78, 100, 105, 304, 392, 404, 414, 424, 435, 541, 651, 655, 656, 679, 694, 762], "mib": 5, "user": [5, 8, 9, 10, 11, 15, 26, 27, 28, 34, 40, 42, 43, 47, 62, 63, 65, 291, 308, 395, 501, 598, 651, 653, 814, 815, 816, 829, 835, 842, 843, 844, 846, 847, 849, 850, 851, 854, 859, 860, 861, 862, 865, 867, 868, 869, 870, 872, 873, 882], "samuelarmstrong": [5, 15], "examples_and_demos_cpu": 5, "metadata": [5, 61, 63, 66, 861], "setup": [5, 26, 40, 41, 45, 46, 61, 63, 66, 842, 843, 848, 855], "satisfi": [5, 26, 40, 42, 43, 48, 61, 63, 66, 73, 392, 393, 415, 447, 850, 852], "scipi": [5, 841], "einop": [5, 40, 42, 43, 48, 61, 63, 66, 74, 97, 563, 564, 565, 653, 850], "psutil": [5, 40, 42, 43, 48, 61, 63, 66], "termcolor": [5, 40, 42, 43, 61, 63, 66], "colorama": [5, 40, 42, 43, 61, 63], "nvidia": [5, 22, 23, 26, 27, 28, 40, 42, 43, 61, 63, 66], "535": [5, 40, 42, 43, 67, 89, 134, 645, 854], "133": [5, 8, 9, 24, 25, 61, 77, 679], "diskcach": [5, 40, 42, 43, 61], "googl": [5, 6, 7, 40, 42, 43, 61, 62, 63, 65], "auth": [5, 40, 42, 43], "urllib3": [5, 40, 42, 43, 48, 61], "request": [5, 8, 9, 10, 11, 16, 17, 22, 23, 24, 25, 26, 27, 28, 40, 42, 43, 47, 48, 61, 64, 73, 221, 399, 530, 650, 834, 837, 841, 852, 856, 866, 868], "pyvi": [5, 40, 42, 43, 47, 48], "dill": [5, 40, 42, 43, 48, 61], "astunpars": [5, 40, 42, 43], "cloudpickl": [5, 40, 42, 43], "gast": [5, 40, 42, 43, 48], "wheel": [5, 40, 42, 43, 61, 63, 66], "43": [5, 6, 7, 26, 29, 48, 59, 61, 63, 73, 96, 105, 119, 251, 392, 393, 404, 413, 445, 541, 651, 662, 663, 762, 763, 770], "six": [5, 40, 42, 43, 61, 66, 842, 868], "cffi": [5, 48], "cachetool": [5, 40, 42, 43], "pyasn1": [5, 40, 42, 43], "rsa": [5, 40, 42, 43], "jinja2": [5, 26, 40, 42, 43, 48], "jsonpickl": [5, 40, 42, 43, 48], "networkx": [5, 26, 40, 42, 43, 48, 66], "charset": [5, 40, 42, 43, 48, 61], "idna": [5, 40, 42, 43, 48, 61], "certifi": [5, 40, 42, 43, 48, 61], "2017": [5, 40, 42, 43, 48, 61, 655, 682], "2024": [5, 8, 9, 26, 27, 40, 41, 45, 46, 48], "pycpars": [5, 48], "decor": [5, 34, 35, 40, 42, 43, 48, 53, 65, 557, 653, 798, 800, 806, 839, 845, 846, 849, 850, 851, 855, 858, 861, 862, 863, 868], "jedi": [5, 40, 42, 43, 48], "inlin": [5, 40, 42, 43, 48, 848], "prompt": [5, 40, 42, 43, 48, 841, 843], "toolkit": [5, 40, 42, 43, 48, 882, 883], "41": [5, 29, 40, 41, 42, 43, 59, 61, 66, 72, 73, 78, 95, 96, 97, 100, 101, 129, 244, 252, 259, 290, 304, 392, 393, 400, 404, 412, 430, 435, 457, 531, 541, 558, 645, 651, 653, 656, 666, 686, 694, 787], "pygment": [5, 40, 42, 43, 48], "stack": [5, 29, 38, 40, 42, 43, 50, 59, 63, 73, 78, 80, 90, 96, 101, 103, 118, 162, 163, 346, 386, 393, 395, 446, 485, 486, 488, 497, 502, 518, 597, 606, 629, 648, 653, 656, 658, 660, 688, 690, 691, 692, 693, 695, 696, 698, 699, 700, 702, 703, 704, 706, 707, 710, 740, 750, 751, 814, 840, 845, 861, 870, 881], "traitlet": [5, 40, 42, 43, 48], "exceptiongroup": [5, 40, 42, 43], "pexpect": [5, 40, 42, 43, 48], "markupsaf": [5, 26, 40, 42, 43, 48], "parso": [5, 40, 42, 43, 48], "ptyprocess": [5, 40, 42, 43, 48], "wcwidth": [5, 40, 42, 43, 48], "execut": [5, 8, 9, 22, 23, 27, 28, 36, 37, 38, 40, 42, 43, 47, 50, 52, 55, 62, 64, 66, 139, 141, 619, 647, 650, 653, 842, 843, 848, 849, 850, 851, 852, 854, 858, 859, 861, 865, 868, 871, 874, 879, 882, 883], "asttoken": [5, 40, 42, 43], "pure": [5, 40, 42, 43, 53, 63, 853, 857, 862, 868, 870, 872, 882], "eval": [5, 6, 7, 8, 9, 12, 13, 24, 25, 26, 32, 40, 42, 43, 48, 655, 680, 816, 820], "collect": [5, 26, 51, 61, 63, 65, 66, 68, 90, 91, 645, 650, 653, 654, 655, 657, 660, 661, 662, 753, 810, 814, 815, 816, 817, 818, 842, 854, 855, 859, 860, 863, 865, 882], "creat": [5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26, 27, 28, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 49, 50, 52, 53, 54, 61, 62, 63, 65, 66, 69, 72, 73, 82, 90, 92, 95, 96, 101, 105, 114, 142, 143, 144, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 164, 165, 166, 291, 329, 330, 340, 342, 344, 345, 386, 392, 393, 395, 399, 411, 412, 413, 434, 451, 462, 468, 477, 485, 501, 507, 526, 527, 528, 529, 530, 598, 615, 632, 644, 648, 651, 653, 654, 662, 701, 760, 761, 762, 763, 765, 795, 806, 811, 813, 814, 815, 816, 817, 818, 819, 836, 837, 842, 843, 846, 847, 848, 850, 851, 854, 858, 859, 861, 862, 863, 865, 868, 871, 873, 874, 879, 882, 883], "py3": [5, 26, 61, 63, 66], "whl": [5, 26, 61, 62, 63, 66], "76449": 5, "sha256": [5, 61, 63, 66], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 61, 63, 66, 70, 73, 74, 78, 80, 90, 93, 96, 97, 101, 103, 171, 392, 393, 437, 445, 449, 463, 467, 567, 653, 656, 658, 710, 730, 795, 796, 814, 815, 816, 838, 843, 846, 847, 849, 853, 859, 861, 862, 863, 871, 874, 879], "directori": [5, 8, 9, 26, 48, 61, 62, 63, 66, 607, 630, 650, 653, 834, 836, 838, 841, 842, 843, 848, 855, 862, 865, 871, 873], "privat": [5, 818, 862, 865], "var": [5, 15, 60, 86, 109, 111, 138, 139, 140, 141, 647, 659, 666, 737, 738, 821, 842, 852, 871], "3x": [5, 22, 23], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 61, 63], "abb7vdwj": 5, "01": [5, 10, 11, 24, 25, 26, 40, 41, 43, 45, 46, 63, 69, 73, 74, 75, 78, 96, 97, 98, 101, 105, 155, 282, 300, 301, 329, 335, 360, 361, 368, 386, 392, 414, 424, 425, 567, 610, 611, 633, 634, 639, 648, 651, 653, 654, 656, 659, 662, 693, 703, 738, 739, 762, 763, 798, 847], "2d": [5, 47, 63, 73, 96, 113, 330, 386, 392, 393, 395, 404, 407, 408, 416, 417, 459, 466, 480, 490, 540, 814, 834, 862, 868], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 26, 61, 63, 66, 816, 842, 846], "built": [5, 26, 40, 41, 45, 46, 47, 48, 53, 61, 63, 66, 142, 648, 814, 815, 816, 842, 843, 848, 849, 865, 873, 879, 882], "zsh": 5, "found": [5, 10, 11, 48, 61, 63, 64, 66, 78, 80, 84, 90, 96, 101, 103, 107, 119, 218, 404, 486, 541, 650, 660, 690, 696, 732, 751, 771, 830, 841, 842, 843, 846, 847, 848, 849, 850, 851, 853, 856, 859, 861, 862], "filenotfounderror": 5, "traceback": [5, 15, 865], "recent": [5, 15, 63, 833, 842, 843, 865], "line": [5, 8, 9, 15, 16, 17, 22, 23, 27, 28, 29, 39, 42, 47, 48, 50, 51, 62, 63, 307, 651, 834, 842, 845, 846, 851, 852, 854, 862, 865, 868], "get_ipython": 5, "system": [5, 26, 27, 28, 40, 41, 42, 43, 45, 46, 63, 393, 463, 656, 705, 798, 842, 843, 847, 850, 872, 882], "34": [5, 15, 24, 25, 29, 40, 46, 48, 59, 61, 95, 96, 97, 105, 185, 255, 282, 303, 392, 404, 435, 547, 563, 564, 649, 651, 653, 655, 656, 662, 679, 698, 762, 763, 851], "interactiveshel": 5, "324": [5, 845], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 69, 73, 80, 92, 96, 103, 107, 144, 392, 394, 426, 437, 474, 479, 480, 487, 489, 491, 492, 493, 500, 517, 658, 724, 725, 726, 728, 730, 731, 733, 735, 774, 800, 831, 854], "319": 5, "won": [5, 48, 842, 843, 849, 850, 873, 879], "fd": [5, 77, 100, 655, 668, 673, 674, 675, 676], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 22, 23, 26, 27, 28, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 64, 66, 69, 72, 73, 80, 92, 95, 96, 100, 103, 108, 155, 173, 196, 241, 261, 267, 270, 283, 301, 358, 363, 375, 389, 392, 393, 394, 395, 402, 404, 435, 437, 446, 471, 480, 481, 490, 491, 532, 533, 550, 648, 649, 651, 656, 658, 662, 665, 691, 728, 763, 776, 830, 835, 836, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 876, 879, 882, 884], "crash": 5, "know": [5, 40, 52, 53, 54, 84, 664, 771, 772, 773, 774, 838, 841, 843, 851, 859, 863, 865, 868, 883], "what": [5, 8, 9, 22, 23, 27, 28, 34, 39, 47, 48, 51, 52, 55, 60, 61, 392, 426, 437, 800, 830, 841, 843, 844, 849, 852, 853, 856, 857, 859, 860, 861, 862, 863, 865, 869, 872, 877, 883], "321": 5, "builtin": [5, 24, 25, 842], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 47, 48, 61, 73, 79, 96, 102, 394, 471, 472, 473, 475, 476, 657, 715, 716, 717, 843, 850, 882], "kernel": [5, 26, 40, 41, 45, 46, 73, 77, 96, 100, 392, 411, 412, 413, 429, 430, 431, 432, 655, 681, 870, 872, 882], "while": [5, 8, 9, 10, 11, 26, 29, 40, 47, 48, 55, 73, 77, 90, 96, 100, 113, 114, 119, 141, 158, 196, 264, 265, 285, 286, 364, 389, 392, 393, 395, 437, 438, 460, 504, 505, 539, 647, 648, 649, 651, 655, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 771, 783, 786, 796, 839, 841, 842, 843, 846, 847, 848, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 870, 872, 873, 879, 882, 884], "review": [5, 73, 96, 393, 468, 838, 841, 843, 848, 852, 862, 866], "identifi": [5, 73, 96, 347, 348, 349, 386, 841, 845, 850, 865, 868], "caus": [5, 29, 394, 471, 842, 843, 845, 847, 849, 850, 852, 861, 863, 865, 872], "failur": [5, 843, 863, 865], "href": 5, "aka": 5, "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 16, 17, 26, 30, 33, 36, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 59, 61, 62, 63, 67, 72, 73, 78, 80, 84, 89, 95, 96, 101, 103, 107, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 170, 262, 264, 280, 295, 308, 312, 317, 318, 320, 380, 384, 390, 393, 394, 395, 441, 443, 455, 457, 460, 473, 479, 480, 481, 486, 508, 598, 645, 648, 649, 651, 653, 656, 658, 664, 690, 696, 699, 702, 704, 706, 713, 725, 732, 771, 772, 773, 774, 800, 810, 830, 835, 836, 838, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 877, 882, 883, 884], "viewoutput": 5, "log": [5, 8, 9, 26, 40, 41, 45, 46, 69, 72, 73, 78, 92, 95, 96, 101, 134, 155, 280, 282, 295, 317, 318, 371, 378, 384, 389, 394, 399, 471, 473, 474, 526, 645, 648, 651, 704, 798, 800, 801, 810, 843, 849, 852, 858, 861, 862, 863, 865, 867, 868], "further": [5, 8, 9, 10, 11, 26, 36, 90, 119, 800, 843, 845, 846, 852, 854, 857, 858, 861, 862, 864, 865, 871], "detail": [5, 8, 9, 10, 11, 26, 50, 63, 67, 72, 73, 78, 80, 84, 89, 95, 96, 97, 101, 103, 107, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 161, 308, 312, 317, 318, 320, 384, 393, 443, 486, 566, 645, 648, 651, 664, 690, 696, 702, 706, 732, 771, 772, 773, 774, 810, 841, 843, 845, 847, 848, 849, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 871], "bidirect": [6, 7, 655, 680], "encod": [6, 7, 30, 32, 47, 61, 63, 74, 79, 97, 102, 567, 653, 657, 715, 716], "mlm": [6, 7], "choos": [6, 7, 61, 63, 71, 83, 84, 94, 231, 257, 264, 285, 286, 290, 352, 353, 389, 395, 650, 651, 663, 664, 666, 770, 771, 772, 773, 774, 782, 783, 784, 786, 798, 841, 842, 843, 859, 865, 879], "librari": [6, 7, 8, 9, 10, 11, 22, 23, 26, 27, 28, 40, 41, 43, 45, 46, 59, 61, 71, 84, 94, 231, 262, 264, 280, 285, 286, 308, 352, 353, 389, 650, 651, 656, 664, 666, 692, 693, 771, 772, 773, 774, 782, 783, 784, 786, 834, 841, 842, 845, 850, 877, 879, 882, 884], "pretrain": [6, 7, 22, 23, 26, 30, 31, 32, 47, 48, 66], "save": [6, 7, 8, 9, 16, 17, 24, 25, 26, 61, 73, 90, 96, 404, 547, 607, 630, 650, 653, 667, 816, 834, 842, 856, 865, 871, 877, 884], "some": [6, 7, 12, 13, 18, 19, 20, 26, 27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 52, 53, 59, 63, 64, 90, 98, 262, 264, 280, 392, 416, 417, 418, 633, 634, 637, 639, 640, 641, 650, 651, 654, 660, 751, 814, 835, 839, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 872, 873, 874, 879, 882, 883, 884], "mohame54": [6, 7], "automodel": [6, 7, 27, 28, 47], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 22, 23, 27, 28, 42, 47, 61, 62, 63, 64, 65, 66, 90, 393, 464, 667, 816, 865, 884], "token": [6, 7, 63], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 27, 28, 47, 64, 879], "base": [6, 7, 10, 11, 29, 61, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 121, 123, 155, 164, 196, 260, 261, 278, 279, 280, 281, 295, 336, 345, 347, 354, 357, 363, 370, 386, 389, 392, 393, 394, 402, 435, 439, 464, 469, 532, 600, 611, 623, 648, 649, 651, 653, 656, 658, 664, 666, 697, 724, 771, 772, 773, 774, 781, 796, 799, 800, 803, 804, 805, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 823, 824, 827, 830, 831, 834, 842, 843, 845, 849, 850, 854, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 882], "uncas": [6, 7], "evalu": [6, 7, 72, 73, 90, 95, 96, 260, 262, 278, 279, 280, 281, 285, 292, 294, 301, 305, 339, 371, 382, 383, 386, 391, 393, 394, 395, 460, 469, 474, 498, 644, 651, 654, 660, 667, 750, 751, 789, 790, 815, 816, 843, 849, 850, 858, 859, 882], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 22, 23, 26, 28, 30, 32, 42, 47, 48, 62, 69, 72, 73, 82, 86, 92, 95, 96, 105, 109, 154, 155, 309, 336, 386, 392, 394, 395, 399, 416, 417, 418, 428, 438, 440, 469, 474, 505, 526, 527, 528, 529, 530, 648, 651, 662, 666, 760, 761, 762, 763, 786, 788, 814, 863, 865], "test": [6, 7, 10, 11, 37, 38, 40, 48, 49, 50, 52, 53, 54, 62, 63, 72, 74, 87, 95, 97, 110, 141, 188, 192, 271, 272, 273, 274, 297, 392, 416, 417, 418, 587, 647, 649, 651, 653, 667, 789, 790, 793, 796, 799, 830, 838, 839, 840, 844, 848, 850, 852, 854, 856, 859, 862, 864, 866, 872, 873, 879, 882], "did": [6, 7, 61, 841, 848], "realli": [6, 7, 59, 842, 849, 855, 872, 875, 879], "input": [6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 26, 27, 28, 30, 32, 40, 42, 43, 45, 47, 48, 52, 53, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 185, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 211, 213, 214, 227, 230, 231, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 458, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 594, 595, 596, 602, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 625, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 749, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 799, 806, 810, 813, 814, 815, 816, 817, 827, 829, 830, 834, 845, 846, 847, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 879, 883], "pad": [6, 7, 17, 24, 25, 26, 61, 63, 73, 77, 80, 96, 100, 103, 114, 116, 392, 395, 411, 412, 413, 414, 415, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 502, 567, 653, 655, 658, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 723, 736, 800, 814], "longest": [6, 7, 395, 502], "return_tensor": [6, 7, 10, 11, 27, 28, 47, 64, 879], "pt": [6, 7, 10, 11, 27, 28, 47, 879], "max_length": [6, 7, 90], "512": [6, 7, 12, 13, 24, 25, 26, 61, 63, 101, 655, 670, 711], "input_id": [6, 7], "101": [6, 7, 29, 62, 655, 656, 660, 679, 695, 746], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 29, 73, 96, 105, 414, 761], "token_type_id": [6, 7], "attention_mask": [6, 7, 77, 100, 655, 682], "pooler": [6, 7], "compar": [6, 7, 18, 19, 20, 22, 23, 27, 28, 47, 60, 64, 66, 73, 74, 84, 85, 86, 90, 96, 97, 108, 109, 351, 368, 389, 404, 548, 552, 555, 653, 655, 664, 665, 666, 680, 771, 772, 773, 774, 775, 778, 784, 795, 847, 852, 854, 863, 865, 868, 881, 882], "no_grad": [6, 7, 27, 61, 879], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 16, 17, 22, 23, 60, 63, 69, 73, 74, 77, 78, 82, 92, 95, 96, 100, 101, 105, 113, 114, 138, 149, 162, 163, 164, 284, 330, 345, 346, 386, 393, 395, 399, 402, 404, 444, 459, 463, 465, 467, 508, 512, 526, 527, 528, 529, 530, 533, 543, 555, 647, 648, 653, 655, 656, 660, 662, 663, 682, 685, 689, 696, 697, 703, 705, 706, 707, 710, 748, 761, 762, 763, 769, 844, 845, 862, 863, 870, 871, 879, 882], "ivy_output": [6, 7, 64], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 15, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 45, 47, 48, 64, 66, 73, 96, 389], "detach": [6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 32, 47, 48, 860], "rtol": [6, 7, 10, 11, 30, 32, 73, 78, 96, 101, 351, 368, 389, 656, 699, 702, 793, 795, 839, 855, 863], "005": [6, 7, 24, 25, 73, 96, 351, 368, 389, 470], "atol": [6, 7, 10, 11, 15, 18, 19, 20, 22, 23, 26, 27, 28, 45, 47, 48, 73, 78, 96, 101, 351, 368, 389, 656, 699, 793, 795, 839, 855, 863], "768": [6, 7], "fn": [6, 7, 64, 66, 73, 90, 93, 96, 122, 183, 184, 216, 217, 220, 395, 478, 553, 568, 569, 619, 649, 650, 653, 660, 746, 747, 748, 750, 751, 752, 793, 795, 821, 824, 827, 831, 832, 834, 851, 854, 861, 862, 871, 879], "finish": [6, 7, 10, 11, 34, 47, 59, 62, 837, 841, 842, 844], "sec": [6, 7], "procedur": [6, 7, 848, 852, 863], "60": [6, 7, 26, 59, 63, 72, 86, 95, 97, 105, 109, 241, 275, 395, 507, 571, 579, 595, 610, 632, 651, 653, 656, 660, 666, 701, 743, 761, 779, 781, 785, 830], "big": [6, 7, 813, 837, 872, 882], "jnp": [6, 7, 16, 37, 42, 47, 48, 49, 50, 53, 59, 61, 65, 820, 850, 851, 854, 857, 861, 866, 870], "ref": [6, 7, 12, 13, 22, 23, 27, 28, 97, 101, 276, 290, 293, 299, 306, 651, 658, 732, 842, 861], "fast": [6, 7, 40, 52, 73, 392, 415, 882], "valu": [6, 7, 17, 29, 59, 60, 62, 63, 69, 70, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 109, 116, 118, 121, 134, 138, 139, 141, 142, 149, 152, 153, 154, 155, 158, 164, 169, 186, 190, 196, 229, 230, 237, 238, 239, 240, 242, 244, 245, 246, 253, 257, 258, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 319, 324, 327, 328, 330, 337, 339, 345, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 368, 369, 371, 374, 376, 377, 378, 379, 380, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 403, 404, 415, 428, 435, 436, 438, 440, 444, 447, 451, 457, 462, 464, 466, 468, 469, 470, 472, 473, 474, 475, 484, 490, 495, 501, 502, 507, 509, 510, 511, 512, 514, 516, 519, 521, 526, 527, 529, 530, 536, 538, 541, 542, 543, 546, 547, 548, 549, 550, 556, 558, 559, 560, 562, 567, 570, 571, 573, 578, 579, 580, 587, 594, 595, 599, 600, 601, 604, 613, 618, 623, 624, 627, 630, 631, 632, 633, 634, 635, 639, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 685, 689, 692, 693, 697, 698, 699, 702, 703, 704, 705, 706, 707, 710, 713, 721, 722, 723, 727, 728, 736, 737, 738, 742, 744, 745, 746, 747, 748, 753, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 793, 795, 798, 799, 800, 801, 803, 805, 810, 813, 814, 815, 816, 817, 818, 827, 834, 839, 842, 843, 845, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 861, 862, 865, 867, 868, 870, 879, 882, 883], "emerg": [8, 9, 876, 882], "popular": [8, 9, 10, 11, 845, 882], "Its": [8, 9, 73, 394, 469, 882], "python": [8, 9, 10, 11, 24, 25, 30, 36, 48, 50, 55, 59, 61, 62, 63, 65, 66, 73, 82, 96, 105, 142, 224, 236, 264, 299, 392, 399, 438, 526, 527, 528, 529, 530, 632, 648, 650, 651, 653, 662, 760, 761, 762, 763, 765, 820, 824, 829, 830, 834, 840, 842, 843, 845, 848, 849, 854, 855, 862, 864, 865, 871, 872, 874, 879, 882, 883], "superior": [8, 9], "eager": [8, 9, 34, 35, 41, 43, 50, 53, 54, 65, 834, 849, 882], "mode": [8, 9, 10, 11, 12, 13, 53, 65, 73, 78, 90, 96, 101, 112, 113, 114, 115, 116, 117, 227, 230, 235, 240, 257, 290, 344, 382, 383, 386, 391, 392, 393, 395, 423, 428, 436, 437, 449, 451, 459, 461, 462, 468, 484, 494, 499, 501, 503, 505, 507, 510, 511, 515, 596, 597, 598, 602, 603, 605, 606, 620, 621, 625, 626, 628, 629, 650, 651, 653, 655, 656, 680, 703, 806, 814, 815, 816, 833, 834, 842, 843, 844, 849, 851, 852, 855, 868, 872, 882], "made": [8, 9, 22, 23, 27, 28, 47, 48, 73, 80, 96, 393, 395, 453, 479, 480, 481, 732, 841, 843, 845, 846, 849, 854, 856, 858, 860, 861, 862, 866, 868, 870, 882], "favorit": [8, 9, 876], "increasingli": [8, 9, 852, 879], "span": [8, 9, 843], "industri": [8, 9, 876, 882], "still": [8, 9, 26, 29, 39, 41, 42, 47, 48, 50, 51, 54, 78, 90, 101, 656, 706, 798, 841, 842, 843, 846, 847, 850, 853, 854, 856, 858, 861, 862, 865, 868, 872, 879, 882], "practition": [8, 9, 10, 11, 26, 882], "larg": [8, 9, 26, 62, 72, 73, 95, 96, 240, 257, 264, 290, 291, 395, 404, 510, 540, 651, 656, 704, 838, 842, 843, 848, 855, 876, 879, 882], "unabl": [8, 9, 15, 26, 27, 28, 40, 41, 45, 46, 843, 868], "rich": [8, 9, 26, 877], "ecosystem": [8, 9, 26, 876, 882], "state": [8, 9, 26, 33, 44, 45, 61, 77, 96, 100, 116, 204, 205, 206, 207, 208, 290, 392, 438, 620, 622, 625, 627, 628, 649, 651, 653, 655, 680, 681, 796, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 839, 842, 848, 850, 851, 853, 854, 855, 856, 857, 862, 865, 870, 877], "art": [8, 9, 26, 45, 877], "sota": [8, 9, 10, 11, 26], "inaccur": [8, 9, 26], "dynam": [8, 9, 18, 19, 26, 48, 54, 658, 728, 816, 824, 844, 850, 851, 861, 862, 867, 871, 876, 879, 882], "connect": [8, 9, 24, 25, 26, 61, 814, 838, 842, 848, 864], "layer": [8, 9, 10, 11, 18, 19, 20, 26, 30, 32, 36, 42, 43, 47, 48, 59, 64, 73, 81, 96, 104, 661, 680, 681, 682, 759, 811, 813, 815, 816, 817, 818, 819, 820, 853, 862, 866, 868, 870, 882], "togeth": [8, 9, 26, 38, 73, 90, 96, 351, 368, 389, 393, 447, 819, 846, 849, 850, 861, 862, 865, 866, 868, 870, 872, 882, 883], "For": [8, 9, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 40, 47, 48, 50, 53, 55, 69, 73, 78, 84, 96, 101, 142, 156, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 271, 272, 273, 278, 279, 280, 281, 282, 285, 290, 292, 293, 295, 299, 300, 301, 302, 303, 304, 307, 308, 310, 347, 348, 349, 352, 353, 355, 376, 386, 389, 393, 395, 459, 461, 481, 501, 505, 648, 651, 656, 658, 664, 666, 704, 706, 710, 721, 732, 771, 772, 773, 774, 782, 784, 785, 787, 799, 811, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 877, 879, 883], "seamless": [8, 9, 26, 871, 877, 884], "wai": [8, 9, 26, 29, 34, 35, 36, 39, 41, 47, 48, 51, 53, 59, 113, 116, 835, 836, 838, 840, 841, 842, 845, 846, 847, 848, 850, 851, 861, 862, 863, 865, 868, 872, 873], "introduc": [8, 9, 26, 47, 48, 264, 651, 658, 664, 729, 771, 841, 849, 850, 859, 863, 865, 868], "pipelin": [8, 9, 10, 11, 26, 838, 844, 845, 846, 863, 866, 872, 874, 882, 883], "blog": [8, 9, 10, 11, 26, 843], "through": [8, 9, 10, 11, 26, 45, 46, 48, 53, 61, 73, 96, 116, 245, 404, 546, 547, 651, 660, 743, 749, 816, 820, 829, 837, 839, 840, 841, 843, 844, 847, 848, 849, 851, 852, 854, 855, 856, 858, 859, 861, 862, 863, 865, 867, 868, 870, 879, 882, 883], "train": [8, 9, 10, 11, 30, 32, 43, 47, 48, 64, 73, 75, 77, 96, 98, 100, 116, 392, 393, 398, 416, 417, 418, 465, 519, 521, 633, 634, 639, 654, 655, 678, 680, 682, 685, 813, 814, 815, 816, 817, 849, 851, 858, 872, 884], "illustr": [8, 9, 26, 38, 50, 847, 870], "workflow": [8, 9, 26, 39, 51, 62, 841, 843, 847, 850, 860, 862, 874, 884], "pre": [8, 9, 47, 48, 839, 841, 864, 865, 870, 872, 873, 882], "convnext": [8, 9, 22, 23, 26], "belong": [8, 9, 90, 841, 845], "convolut": [8, 9, 26, 43, 48, 73, 77, 96, 100, 392, 413, 431, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 800, 814, 834, 882], "neural": [8, 9, 655, 810, 814, 882, 884], "network": [8, 9, 36, 43, 47, 59, 61, 66, 655, 679, 810, 813, 814, 849, 858, 871, 882, 884], "cnn": [8, 9, 47, 48, 882], "architectur": [8, 9, 26, 64, 842, 882, 884], "inspir": [8, 9, 846], "vision": [8, 9, 10, 11, 45, 47, 48, 66], "perform": [8, 9, 12, 13, 15, 20, 26, 29, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 59, 61, 69, 73, 77, 78, 86, 87, 92, 96, 97, 100, 101, 109, 110, 129, 133, 154, 155, 227, 235, 257, 290, 311, 358, 380, 389, 390, 392, 393, 395, 402, 404, 415, 416, 417, 418, 420, 421, 425, 426, 434, 436, 462, 478, 533, 541, 542, 563, 564, 565, 578, 579, 580, 596, 606, 645, 648, 650, 651, 653, 655, 656, 659, 660, 666, 667, 678, 681, 697, 706, 708, 713, 737, 738, 739, 747, 748, 779, 780, 783, 789, 790, 793, 810, 814, 830, 834, 845, 846, 847, 849, 850, 851, 852, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 872, 876, 877, 879, 880, 882, 883], "strength": [8, 9, 876, 877], "wise": [8, 9, 47, 67, 72, 73, 78, 89, 95, 96, 101, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 145, 237, 238, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 275, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 298, 299, 306, 311, 312, 313, 314, 315, 316, 318, 320, 322, 323, 324, 326, 327, 328, 351, 354, 359, 362, 363, 364, 367, 368, 369, 370, 374, 375, 378, 379, 384, 389, 392, 393, 395, 416, 417, 418, 445, 452, 488, 495, 497, 498, 518, 645, 648, 651, 658, 687, 721, 818, 868], "supervis": [8, 9, 10, 11, 73, 394, 469], "convent": [8, 9, 304, 651, 656, 666, 696, 781, 843, 847, 857, 866], "demonstr": [8, 9, 10, 11, 16, 17, 26, 29, 42, 47, 48, 62, 850, 852, 854], "improv": [8, 9, 22, 23, 27, 28, 29, 47, 50, 843, 850, 857, 858, 868, 870, 874, 879, 882], "scalabl": [8, 9, 870], "sometim": [8, 9, 841, 842, 843, 845, 850, 858, 862, 865, 868], "rival": [8, 9], "even": [8, 9, 22, 23, 26, 42, 47, 48, 73, 96, 113, 257, 290, 295, 300, 395, 404, 501, 540, 651, 842, 843, 845, 847, 850, 851, 853, 857, 858, 861, 862, 863, 868, 872], "downsampl": [8, 9, 24, 25, 26, 73, 96, 428], "detial": [8, 9], "outsid": [8, 9, 26, 658, 721, 732, 850, 851, 858], "scope": [8, 9, 26, 847, 883], "demo": [8, 9, 10, 11, 12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 29, 40, 48, 55, 59, 63, 835], "interest": [8, 9, 10, 11, 26, 43, 47, 59, 257, 290, 651, 841, 843], "reader": [8, 9, 10, 11, 26], "paper": [8, 9, 26, 655, 682], "mostli": [8, 9, 26, 851, 861, 865], "kera": [8, 9, 17, 18, 19, 20, 26, 30, 32, 43, 47, 48, 64, 65, 811, 820], "wrapper": [8, 9, 38, 73, 96, 315, 806, 846, 848, 849, 850, 854, 858, 861, 862, 865, 874, 882], "prepar": [8, 9, 26, 48, 61, 63, 66], "data": [8, 9, 10, 11, 16, 17, 32, 40, 42, 43, 48, 53, 61, 63, 66, 67, 69, 72, 73, 74, 77, 78, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 95, 96, 97, 100, 101, 103, 105, 106, 107, 108, 109, 110, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 174, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 203, 209, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 317, 318, 319, 320, 329, 330, 331, 332, 333, 334, 335, 346, 347, 348, 349, 350, 352, 353, 354, 371, 376, 384, 386, 389, 392, 393, 395, 399, 403, 404, 407, 416, 417, 418, 434, 436, 438, 444, 446, 466, 484, 507, 510, 511, 513, 514, 526, 527, 528, 529, 530, 536, 540, 541, 542, 546, 549, 550, 567, 580, 582, 583, 586, 613, 645, 648, 650, 651, 653, 655, 656, 658, 660, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 722, 725, 726, 728, 729, 731, 732, 736, 744, 761, 762, 763, 765, 766, 767, 769, 770, 775, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 796, 798, 799, 800, 801, 806, 810, 813, 814, 815, 816, 821, 830, 834, 842, 844, 845, 846, 847, 848, 849, 851, 853, 857, 858, 859, 861, 863, 866, 868, 870, 874, 882, 883], "experiment": [8, 20, 26, 834, 839, 843, 850, 862, 866, 870, 882], "set_memory_growth": [8, 26], "list_physical_devic": [8, 9, 26], "manual_se": [8, 9, 10, 11, 26, 43], "set_se": [8, 9, 26], "51": [8, 9, 26, 29, 45, 59, 63, 72, 73, 95, 96, 97, 105, 252, 290, 303, 393, 414, 468, 651, 763, 798], "38": [8, 9, 26, 27, 28, 29, 40, 41, 45, 46, 48, 59, 61, 63, 66, 70, 73, 95, 96, 105, 182, 307, 374, 389, 392, 404, 412, 431, 434, 435, 541, 649, 651, 656, 698, 798, 852], "926817": [8, 9], "e": [8, 9, 16, 26, 27, 28, 38, 40, 41, 45, 46, 47, 48, 64, 65, 69, 73, 78, 82, 84, 85, 86, 88, 95, 96, 101, 105, 108, 109, 111, 113, 114, 118, 146, 155, 156, 159, 160, 164, 168, 197, 210, 237, 238, 239, 243, 245, 246, 249, 251, 253, 257, 258, 260, 263, 264, 270, 271, 278, 279, 280, 281, 288, 289, 290, 291, 293, 297, 299, 300, 303, 304, 308, 318, 345, 352, 353, 386, 389, 392, 393, 394, 395, 399, 404, 405, 411, 412, 415, 429, 430, 431, 432, 436, 449, 452, 460, 474, 510, 514, 526, 527, 528, 529, 530, 541, 542, 551, 646, 648, 649, 650, 651, 655, 656, 658, 660, 662, 664, 665, 666, 682, 687, 692, 693, 696, 697, 699, 702, 705, 706, 707, 710, 713, 724, 732, 743, 747, 748, 749, 752, 757, 758, 761, 762, 763, 771, 772, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 814, 829, 830, 834, 835, 837, 839, 841, 842, 843, 844, 845, 847, 849, 850, 854, 855, 860, 862, 865, 870, 872, 873, 874, 879], "extern": [8, 9, 26, 27, 40, 41, 45, 46, 849, 857, 862, 865, 866], "local_xla": [8, 9, 26, 27, 40, 41, 45, 46], "xla": [8, 9, 26, 27, 28, 40, 41, 45, 46, 862, 872, 874, 882], "stream_executor": [8, 9, 26, 27, 28, 40, 41, 45, 46], "cuda_dnn": [8, 9, 26, 27, 28, 40, 41, 45, 46], "cc": [8, 9, 26, 27, 28, 40, 41, 43, 45, 46, 62, 855], "9261": [8, 9], "regist": [8, 9, 26, 27, 28, 40, 41, 45, 46, 816, 843, 879], "cudnn": [8, 9, 26, 27, 28, 40, 41, 45, 46], "factori": [8, 9, 26, 27, 28, 40, 41, 45, 46, 73, 394, 473, 474, 830], "plugin": [8, 9, 26, 27, 28, 40, 41, 45, 46, 842], "926873": [8, 9], "cuda_fft": [8, 9, 26, 27, 28, 40, 41, 45, 46], "607": [8, 9], "cufft": [8, 9, 26, 27, 28, 40, 41, 45, 46], "928224": [8, 9], "cuda_bla": [8, 9, 26, 27, 28, 40, 41, 45, 46], "1515": [8, 9], "cubla": [8, 9, 26, 27, 28, 40, 41, 45, 46], "936743": [8, 9], "cpu_feature_guard": [8, 9, 26, 40, 41, 43, 45, 46], "182": [8, 9, 43, 96], "instruct": [8, 9, 26, 40, 41, 43, 45, 46, 90, 119, 841, 842, 845, 854, 856, 863, 865, 873, 883], "avx2": [8, 9, 26, 40, 41, 43, 45, 46], "fma": [8, 9, 26, 40, 41, 43, 45, 46], "rebuild": [8, 9, 26, 40, 41, 43, 45, 46, 90, 119], "flag": [8, 9, 26, 40, 41, 43, 45, 46, 90, 213, 394, 404, 471, 540, 650, 655, 682, 795, 806, 817, 820, 843, 850, 851, 861, 862, 863, 865, 879], "40": [8, 9, 15, 16, 18, 19, 26, 29, 48, 59, 61, 63, 73, 74, 95, 96, 97, 105, 109, 119, 251, 255, 275, 304, 366, 389, 392, 395, 412, 414, 424, 430, 507, 563, 565, 570, 571, 595, 610, 632, 635, 651, 653, 654, 656, 660, 666, 695, 701, 749, 762, 781, 785], "071672": [8, 9], "w": [8, 9, 12, 13, 26, 27, 28, 40, 41, 45, 46, 62, 63, 73, 74, 75, 77, 90, 95, 96, 97, 98, 100, 113, 284, 366, 381, 389, 391, 392, 393, 398, 411, 412, 413, 415, 429, 430, 431, 432, 448, 468, 524, 539, 563, 565, 610, 633, 634, 635, 637, 639, 640, 641, 653, 654, 655, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 746, 844, 860, 871], "tf2tensorrt": [8, 9, 26, 27, 28, 40, 41, 45, 46], "py_util": [8, 9, 26, 27, 28, 40, 41, 45, 46], "trt": [8, 9, 26, 27, 28, 40, 41, 45, 46], "find": [8, 9, 15, 26, 27, 28, 34, 39, 40, 41, 45, 46, 62, 63, 66, 78, 84, 90, 101, 656, 660, 664, 699, 742, 771, 772, 773, 774, 829, 830, 835, 836, 837, 838, 840, 841, 842, 843, 845, 848, 855, 860, 865, 868, 870, 873, 874, 879], "tensorrt": [8, 9, 26, 27, 28, 40, 41, 45, 46], "map": [8, 9, 73, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 185, 189, 190, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 389, 392, 416, 417, 418, 436, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 508, 510, 511, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 632, 637, 643, 653, 660, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 747, 748, 752, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 830, 846, 849, 850, 857, 858, 862, 865, 866, 872, 874, 883], "dataset": [8, 9, 10, 11, 26, 29, 47, 48, 90, 879], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 17, 26, 40, 41, 45, 46, 61, 63, 73, 80, 90, 92, 96, 103, 151, 395, 491, 648, 658, 728, 841, 842, 848, 855, 865, 867, 868, 882], "185": [8, 9, 16, 24, 25, 61, 89], "199": [8, 9, 24, 25, 61, 243, 651], "108": [8, 9, 24, 25, 29, 40, 42, 43, 61, 655, 666, 679, 781], "109": [8, 9, 24, 25, 61, 78, 656, 694], "111": [8, 9, 24, 25, 61, 660, 758], "443": [8, 9, 24, 25, 61, 302, 651], "sent": [8, 9, 24, 25, 61], "await": [8, 9, 24, 25, 61], "respons": [8, 9, 24, 25, 26, 61, 398, 524, 843, 850], "200": [8, 9, 16, 17, 24, 25, 26, 29, 61, 97, 100, 251, 392, 416, 417, 571, 595, 651, 653, 829], "ok": [8, 9, 24, 25, 61, 842], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 24, 25, 61], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 26, 29], "url": [8, 9, 10, 11, 16, 17, 22, 23, 26, 27, 28, 42, 47, 48, 61, 64], "cocodataset": [8, 9, 10, 11, 22, 23, 27, 28, 42, 47, 48, 64], "org": [8, 9, 10, 11, 22, 23, 24, 25, 26, 27, 28, 40, 41, 42, 45, 46, 47, 48, 61, 63, 64, 66, 72, 73, 95, 96, 98, 164, 172, 260, 270, 271, 286, 345, 352, 353, 386, 389, 392, 395, 404, 436, 510, 540, 633, 634, 648, 649, 651, 654, 656, 658, 666, 704, 705, 736, 786, 853], "val2017": [8, 9, 10, 11, 22, 23, 27, 28, 47, 64], "000000039769": [8, 9, 10, 11, 22, 23, 27, 28, 47, 64], "stream": [8, 9, 10, 11, 22, 23, 27, 28, 42, 47, 48, 61, 64, 71, 94, 231, 650], "initialis": [8, 9, 26, 845, 862, 865], "api": [8, 9, 10, 11, 15, 16, 17, 26, 33, 38, 43, 44, 50, 63, 65, 72, 73, 78, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 159, 160, 161, 162, 163, 165, 166, 172, 182, 185, 195, 197, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 352, 353, 355, 389, 392, 395, 404, 436, 510, 514, 540, 648, 649, 651, 656, 658, 663, 664, 665, 666, 667, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 722, 724, 725, 726, 728, 729, 731, 732, 736, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 835, 839, 842, 843, 844, 846, 848, 850, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 865, 868, 871, 872, 874, 876, 882], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 26, 38, 50, 69, 70, 73, 90, 93, 96, 156, 170, 197, 339, 394, 471, 479, 480, 481, 635, 648, 649, 654, 857, 858, 860, 861, 862, 865, 872, 879, 883], "regardless": [8, 9, 26, 47, 48, 59, 90, 837, 850, 854], "host": [8, 9, 26, 834, 838, 872], "convnext_xlarg": [8, 9], "include_top": [8, 9, 32], "include_preprocess": [8, 9], "input_tensor": [8, 9, 48, 73, 96, 393, 394, 465, 469, 474, 862], "input_shap": [8, 9, 22, 23, 32, 43, 47], "pool": [8, 9, 73, 96, 100, 392, 406, 407, 408, 409, 411, 412, 413, 429, 430, 431, 432, 435, 814, 842], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 26, 40, 41, 45, 46, 62], "gpu_devic": [8, 9, 26, 40, 41, 45, 46], "1929": [8, 9], "job": [8, 9, 41, 47, 48, 848], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 22, 23], "pcie": [8, 9], "16gb": [8, 9], "pci": [8, 9, 26, 40, 41, 45, 46], "bu": [8, 9, 26, 40, 41, 45, 46, 101], "id": [8, 9, 29, 62, 73, 96, 213, 347, 348, 349, 386, 575, 650, 653, 840, 842, 846, 848, 849, 856, 860, 865, 873], "0001": [8, 9, 17, 72, 73, 96, 300, 301, 393, 462, 468, 798, 801, 818], "over": [8, 9, 10, 11, 18, 19, 26, 36, 43, 48, 50, 61, 73, 78, 86, 87, 88, 93, 96, 100, 101, 109, 110, 111, 113, 138, 337, 338, 352, 353, 366, 373, 386, 389, 392, 393, 394, 395, 402, 404, 406, 407, 408, 409, 412, 421, 426, 430, 434, 435, 436, 437, 438, 439, 461, 469, 478, 491, 507, 510, 511, 514, 533, 543, 549, 598, 632, 647, 653, 656, 661, 662, 666, 667, 687, 697, 708, 710, 712, 713, 759, 763, 782, 783, 784, 785, 786, 787, 788, 789, 790, 814, 817, 824, 829, 835, 842, 843, 847, 852, 853, 860, 861, 863, 866, 870, 872, 876, 882], "wonder": [8, 9], "why": [8, 9, 36, 843, 861, 875], "One": [8, 9, 10, 11, 26, 40, 63, 73, 74, 80, 82, 96, 97, 103, 105, 116, 395, 479, 480, 481, 484, 501, 511, 514, 564, 653, 658, 662, 728, 761, 846, 849, 850, 852, 858, 863, 865], "reason": [8, 9, 26, 299, 308, 651, 841, 843, 845, 846, 849, 850, 852, 858, 861, 862, 865, 866, 868], "highlight": [8, 9, 843, 852, 862, 864], "directli": [8, 9, 30, 32, 36, 39, 43, 47, 48, 51, 392, 393, 428, 452, 660, 752, 841, 842, 843, 845, 846, 849, 850, 851, 853, 856, 858, 859, 861, 862, 863, 866, 867, 870, 871, 872, 879], "much": [8, 9, 16, 22, 23, 27, 28, 29, 36, 37, 38, 43, 47, 48, 49, 50, 61, 116, 351, 368, 389, 813, 841, 842, 843, 846, 849, 850, 858, 861, 862, 863, 866, 867, 868, 870, 882], "There": [8, 9, 26, 36, 43, 48, 53, 113, 385, 387, 388, 396, 397, 401, 800, 836, 841, 842, 843, 845, 846, 848, 849, 850, 851, 852, 854, 856, 858, 860, 862, 863, 867, 870, 872, 873, 879, 883], "deeper": [8, 9, 36, 48, 68, 660, 751, 752, 843, 844, 865, 869], "offer": [8, 9, 862, 877, 882, 884], "limit": [8, 9, 90, 119, 182, 185, 558, 559, 575, 649, 653, 658, 721, 798, 800, 801, 813, 821, 830, 842, 843, 848, 852, 854, 862, 865, 868, 882, 883, 884], "soon": [8, 9, 841, 843, 850, 872, 879], "comparison": [8, 9, 20, 24, 25, 26, 27, 48, 73, 96, 258, 293, 354, 389, 394, 473, 474, 651, 656, 707, 793, 854], "separ": [8, 9, 48, 62, 73, 74, 96, 398, 520, 567, 653, 655, 682, 795, 806, 842, 843, 846, 849, 852, 863, 864, 865, 870, 883], "stai": [8, 9], "origin": [8, 9, 10, 11, 18, 19, 20, 22, 23, 26, 27, 28, 29, 43, 45, 47, 48, 49, 50, 51, 53, 60, 61, 62, 66, 73, 78, 80, 86, 90, 96, 101, 103, 109, 113, 116, 118, 119, 245, 270, 297, 336, 386, 392, 393, 395, 404, 436, 462, 494, 500, 503, 506, 541, 542, 546, 547, 548, 549, 550, 651, 656, 658, 666, 697, 728, 729, 780, 795, 800, 824, 825, 838, 841, 842, 843, 847, 848, 850, 855, 859, 861, 862, 863, 870, 871, 879, 882, 883, 884], "convert_to_tensor": [8, 9, 14, 15, 26, 45, 48, 835, 871], "tmp": [8, 9, 61, 63, 607, 630, 653], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 30, 36, 48, 59, 810, 824, 834, 866, 870, 871, 872], "deprec": [8, 9, 17, 66], "futur": [8, 9, 18, 19, 36, 41, 43, 47, 61, 656, 692, 693, 842, 843, 850, 865, 866, 868, 872], "instead": [8, 9, 17, 27, 28, 30, 32, 36, 40, 42, 43, 47, 48, 54, 61, 66, 72, 73, 78, 95, 96, 101, 114, 211, 299, 333, 386, 392, 404, 429, 430, 431, 540, 543, 650, 651, 656, 699, 798, 841, 842, 843, 845, 848, 850, 852, 853, 854, 857, 858, 859, 861, 862, 863, 865, 868, 870, 872, 879, 882], "logits_np": [8, 9, 10, 11, 26, 27, 48], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 61, 64, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 116, 118, 122, 129, 133, 134, 143, 144, 149, 151, 152, 153, 154, 155, 158, 162, 163, 164, 171, 178, 181, 182, 185, 192, 207, 221, 222, 223, 230, 231, 240, 247, 248, 249, 250, 251, 252, 264, 267, 291, 295, 300, 306, 309, 317, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 357, 358, 362, 366, 373, 375, 377, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 443, 447, 449, 450, 451, 452, 454, 459, 461, 462, 465, 466, 468, 473, 477, 478, 482, 486, 487, 490, 491, 494, 496, 499, 500, 501, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 515, 516, 517, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 533, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 553, 563, 564, 565, 567, 570, 571, 574, 575, 589, 592, 594, 609, 610, 611, 612, 616, 632, 633, 634, 635, 636, 639, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 687, 689, 690, 697, 698, 703, 708, 710, 711, 712, 713, 715, 716, 717, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 743, 746, 747, 749, 751, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 773, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 799, 800, 801, 810, 813, 814, 829, 830, 834, 849, 850, 851, 852, 854, 857, 858, 861, 863, 865, 866, 868, 870, 879], "argmax": [8, 9, 10, 11, 12, 13, 26, 62, 63, 64, 83, 106, 395, 507, 663, 862, 879], "57": [8, 9, 24, 25, 29, 38, 59, 61, 72, 73, 95, 96, 215, 238, 239, 242, 243, 245, 255, 256, 296, 312, 313, 384, 650, 651], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 18, 19, 26, 40, 41, 45, 46, 61, 62, 63, 66, 73, 307, 479, 480, 481, 651, 843, 845, 847, 850, 862, 871], "spawn": [8, 9, 591, 653], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 20, 59, 281, 558, 651, 653], "578886": [8, 9], "servic": [8, 9], "168": [8, 9, 63, 558, 653, 660, 740], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 664, 771, 773, 834, 846, 850, 861, 872], "578915": [8, 9], "176": [8, 9, 558, 653], "streamexecutor": [8, 9], "messag": [8, 9, 26, 40, 41, 45, 46, 821, 831, 842, 843, 852, 854, 856, 862, 871], "absl": [8, 9, 26, 40, 41, 45, 46, 61], "initializelog": [8, 9, 26, 40, 41, 45, 46], "stderr": [8, 9, 26, 40, 41, 45, 46], "i0000": [8, 9, 26, 40, 41, 45, 46], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 73, 74, 77, 96, 97, 100, 392, 398, 412, 413, 430, 431, 524, 563, 565, 653, 655, 660, 668, 671, 672, 673, 674, 675, 676, 677, 743, 747, 749, 752, 757, 844, 848, 849], "186": [8, 9], "cluster": [8, 9, 73, 96, 393, 447, 872, 882], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9, 40], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 26, 40, 41, 47, 48, 52, 53, 54, 61, 879], "explain": [8, 9, 10, 11, 26, 53, 73, 96, 392, 426, 437, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 868, 870, 871, 881], "doc": [8, 9, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 62, 63, 96, 164, 345, 352, 353, 386, 389, 542, 648, 835, 837, 840, 841, 844, 852, 853, 856, 857, 865, 870, 879], "involv": [8, 9, 26, 30, 33, 43, 70, 93, 197, 240, 257, 264, 290, 295, 649, 651, 830, 837, 844, 850, 852, 863, 868, 882], "dummi": [8, 9, 40, 52, 53, 54, 60, 843], "transpiled_model": [8, 9, 10, 11, 26], "backend_compil": [8, 9, 47, 48], "root": [8, 9, 10, 11, 18, 19, 24, 25, 26, 27, 28, 40, 41, 42, 43, 45, 46, 48, 61, 62, 63, 66, 72, 95, 304, 651, 838, 841, 842, 843, 848, 855, 862], "placement": [8, 9, 28, 841], "case": [8, 9, 26, 27, 30, 32, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 61, 68, 69, 73, 74, 80, 86, 90, 92, 96, 97, 103, 113, 114, 119, 144, 156, 183, 184, 211, 216, 217, 224, 232, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 265, 271, 272, 273, 278, 279, 280, 281, 282, 285, 290, 293, 295, 299, 300, 301, 302, 303, 304, 307, 308, 310, 352, 353, 364, 366, 376, 389, 392, 394, 395, 398, 399, 405, 416, 417, 418, 438, 469, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 507, 508, 514, 517, 519, 521, 528, 551, 568, 569, 573, 580, 594, 595, 596, 648, 649, 650, 651, 653, 656, 658, 660, 666, 704, 710, 724, 725, 726, 728, 730, 731, 733, 735, 743, 749, 782, 783, 784, 785, 786, 787, 788, 798, 799, 818, 830, 835, 839, 841, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 872, 879], "ad": [8, 9, 24, 25, 28, 29, 42, 43, 73, 80, 96, 103, 111, 257, 290, 351, 368, 389, 398, 519, 520, 521, 610, 611, 651, 653, 655, 656, 658, 682, 692, 693, 724, 814, 819, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 866, 868, 872, 879, 882, 884], "logits_transpil": [8, 9, 26, 27, 48], "logits_transpiled_np": [8, 9, 26, 27, 48], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 47, 48, 800, 849, 853, 856, 859, 868, 870], "produc": [8, 9, 10, 11, 17, 18, 19, 26, 48, 60, 73, 74, 77, 96, 100, 319, 329, 332, 384, 386, 392, 440, 655, 685, 798, 830, 841, 850, 855, 856, 861, 863, 865, 866, 879, 883], "granular": [8, 9, 10, 11, 26, 48], "level": [8, 9, 10, 11, 26, 36, 47, 48, 50, 73, 96, 97, 393, 465, 555, 830, 834, 837, 841, 842, 843, 849, 850, 854, 858, 860, 861, 862, 864, 867, 868, 870, 871, 872, 874, 882, 883], "close": [8, 9, 10, 11, 26, 63, 78, 262, 280, 300, 329, 386, 651, 656, 658, 706, 724, 839, 841, 842, 843, 850, 853, 855, 862, 868, 882], "inde": [8, 9, 10, 11, 26, 857, 868, 872], "benefit": [8, 9, 10, 11, 26, 842, 846, 849, 861, 868, 872, 877], "trainabl": [8, 9, 10, 11, 26, 30, 32, 36, 42, 43, 47, 48, 65, 811, 815, 816, 819, 853], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 26], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 26, 61, 63, 66, 73, 77, 82, 96, 100, 105, 392, 394, 395, 411, 412, 413, 429, 430, 431, 432, 476, 502, 655, 657, 662, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 682, 718, 760], "shuffl": [8, 9, 10, 11, 26, 63, 73, 82, 90, 96, 105, 528, 662], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 26], "sgd": [8, 9, 10, 11, 17, 26, 61, 818, 882], "lr": [8, 9, 61, 75, 98, 554, 634, 637, 639, 640, 641, 653, 654, 818], "1e": [8, 9, 10, 11, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 45, 47, 48, 59, 63, 70, 73, 75, 78, 79, 81, 93, 96, 98, 101, 102, 104, 117, 182, 351, 368, 389, 394, 398, 474, 519, 520, 521, 600, 601, 610, 623, 624, 633, 634, 639, 641, 649, 653, 654, 656, 657, 661, 706, 715, 716, 717, 759, 793, 795, 815, 817, 818, 839, 849, 855, 858, 861, 863], "loss_fn": [8, 9, 26, 47, 59, 61, 63], "crossentropyloss": [8, 9, 61, 815], "epoch": [8, 9, 10, 11, 26, 47, 61, 63], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 24, 25, 61, 80, 103, 118, 402, 532, 658, 726, 733], "loss": [8, 9, 10, 11, 17, 26, 47, 61, 63, 73, 96, 113, 469, 470, 471, 472, 473, 474, 475, 476, 603, 626, 653, 715, 716, 717, 718, 719, 720, 850, 858, 862, 866, 867, 882], "backward": [8, 9, 10, 11, 61, 73, 87, 96, 110, 299, 392, 415, 420, 421, 425, 426, 436, 437, 651, 656, 667, 687, 712, 789, 790, 814, 834, 866, 872], "append": [8, 9, 10, 11, 29, 62, 63, 73, 78, 90, 96, 249, 358, 389, 651, 656, 658, 690, 696, 724, 830, 865, 870], "avg_loss": [8, 9, 10, 11, 61], "02": [8, 9, 24, 25, 28, 38, 40, 41, 61, 69, 74, 75, 81, 82, 95, 98, 105, 155, 242, 243, 282, 392, 414, 424, 425, 610, 611, 633, 634, 639, 648, 651, 653, 654, 661, 662, 759, 762, 763, 863], "94": [8, 9, 29, 59, 72, 73, 75, 82, 95, 96, 98, 105, 224, 300, 301, 377, 389, 424, 637, 650, 654, 763], "ve": [8, 9, 10, 11, 12, 13, 18, 19, 26, 29, 34, 43, 47, 82, 105, 662, 760, 841, 842, 843, 855, 865, 868, 874], "And": [8, 9, 10, 11, 22, 23, 26, 27, 28, 29, 30, 32, 37, 40, 47, 48, 49, 62, 93, 382, 383, 391, 845, 848, 856, 858, 865, 876, 879], "plug": [8, 9, 26], "seen": [8, 9, 26, 30, 32, 37, 43, 47, 48, 393, 399, 452, 528, 575, 653, 824, 850, 852, 854, 862, 865, 870], "tutori": [8, 9, 10, 11, 26, 36, 42, 43, 835, 843, 873], "d": [8, 9, 10, 11, 26, 41, 62, 73, 74, 77, 78, 80, 92, 96, 97, 100, 101, 103, 116, 132, 155, 164, 197, 240, 257, 258, 290, 293, 345, 386, 392, 393, 395, 398, 399, 402, 411, 412, 413, 420, 425, 429, 430, 431, 432, 434, 438, 444, 460, 481, 487, 489, 492, 496, 511, 513, 517, 524, 526, 532, 555, 566, 645, 648, 649, 651, 655, 656, 658, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 689, 690, 694, 697, 701, 710, 711, 730, 743, 747, 748, 749, 752, 757, 758, 799, 830, 835, 837, 842, 844, 847, 848, 849, 855, 860, 865, 868], "sign": [8, 9, 10, 11, 26, 72, 73, 78, 84, 86, 95, 96, 101, 113, 142, 237, 238, 239, 240, 243, 245, 246, 251, 255, 257, 260, 262, 264, 290, 292, 299, 303, 304, 308, 356, 389, 393, 395, 404, 464, 509, 510, 541, 542, 648, 651, 656, 664, 666, 704, 771, 772, 773, 774, 779, 780, 785, 787, 836, 842, 850, 870, 871], "ask": [8, 9, 10, 11, 26, 841, 842, 852, 872], "server": [8, 9, 10, 11, 26, 61, 842, 843, 848, 855, 873, 882], "forward": [8, 9, 10, 11, 12, 13, 17, 24, 25, 26, 32, 46, 47, 48, 61, 63, 73, 96, 382, 391, 392, 415, 420, 421, 425, 426, 436, 437, 811, 813, 814, 816, 818, 820, 834, 842, 847, 853, 860, 865, 866, 868, 871, 872, 879, 882, 883], "come": [10, 11, 16, 36, 61, 841, 842, 843, 846, 862, 867, 868, 874, 882], "onto": [10, 11, 660, 746, 752, 875, 876, 882], "scene": [10, 11, 844, 869, 875, 876, 882], "almost": [10, 11, 61, 840, 849, 863], "alwai": [10, 11, 69, 70, 73, 74, 80, 92, 93, 96, 103, 126, 144, 169, 240, 290, 363, 389, 393, 395, 464, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 517, 573, 580, 645, 649, 651, 653, 658, 724, 725, 726, 728, 730, 731, 733, 735, 800, 841, 842, 843, 846, 847, 849, 850, 853, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 871, 872, 879], "huggingfac": [10, 11, 61, 879], "implement": [10, 11, 29, 36, 37, 38, 47, 49, 53, 61, 64, 70, 71, 73, 84, 85, 93, 94, 96, 101, 108, 113, 169, 183, 184, 197, 216, 217, 231, 237, 238, 239, 242, 243, 244, 245, 254, 255, 257, 260, 262, 264, 278, 279, 280, 281, 290, 292, 295, 299, 302, 303, 307, 308, 352, 353, 376, 389, 393, 404, 445, 446, 546, 547, 568, 569, 649, 650, 651, 653, 655, 656, 664, 665, 666, 682, 691, 692, 693, 701, 710, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 799, 801, 824, 839, 841, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 857, 858, 859, 861, 863, 865, 866, 868, 870, 872, 874, 882, 884], "conveni": [10, 11, 39, 51, 841, 850, 851, 857, 863, 874], "who": [10, 11, 844, 854, 869, 872, 882], "must": [10, 11, 53, 61, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 342, 343, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 360, 361, 363, 365, 367, 369, 370, 371, 372, 376, 379, 384, 386, 389, 392, 393, 394, 395, 398, 399, 402, 404, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 434, 436, 437, 439, 441, 443, 444, 446, 452, 453, 458, 459, 460, 461, 466, 470, 471, 472, 473, 475, 476, 479, 480, 481, 486, 487, 489, 491, 492, 493, 494, 496, 500, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 517, 522, 523, 525, 526, 527, 529, 530, 533, 540, 541, 542, 543, 550, 558, 559, 563, 564, 565, 570, 571, 573, 580, 594, 595, 632, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 813, 814, 818, 820, 821, 840, 841, 842, 843, 845, 846, 850, 851, 852, 853, 854, 857, 858, 859, 861, 862, 865, 866, 867, 868, 870, 883], "reimplement": [10, 11], "choic": [10, 11, 26, 29, 65, 73, 86, 96, 109, 393, 395, 464, 484, 666, 786, 788, 835, 842, 861, 862, 880, 882], "veri": [10, 11, 26, 30, 38, 47, 48, 50, 72, 95, 291, 351, 368, 389, 651, 656, 704, 800, 840, 841, 842, 843, 848, 849, 850, 851, 852, 854, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 872, 881, 882, 883], "thousand": [10, 11, 872], "china": [10, 11], "howev": [10, 11, 16, 29, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 78, 101, 264, 307, 308, 395, 398, 510, 519, 521, 598, 651, 653, 656, 704, 706, 824, 841, 842, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 876, 879, 882], "suffer": [10, 11], "abov": [10, 11, 26, 36, 40, 41, 45, 46, 47, 48, 53, 54, 69, 72, 73, 78, 82, 89, 95, 96, 101, 105, 114, 134, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 328, 330, 345, 346, 352, 353, 355, 358, 384, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 426, 429, 430, 431, 436, 437, 438, 446, 447, 501, 510, 514, 540, 543, 570, 574, 576, 578, 580, 609, 618, 643, 645, 648, 649, 651, 653, 654, 655, 656, 658, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 761, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 839, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 868, 870, 871, 882], "dinov2": [10, 11], "second": [10, 11, 18, 19, 72, 73, 75, 78, 80, 84, 95, 96, 97, 98, 101, 103, 107, 114, 118, 119, 139, 164, 195, 203, 240, 245, 247, 249, 250, 251, 252, 258, 264, 265, 266, 267, 268, 269, 275, 276, 277, 282, 283, 284, 286, 287, 290, 293, 295, 306, 336, 345, 351, 364, 366, 367, 368, 374, 378, 379, 386, 389, 393, 394, 395, 402, 404, 445, 446, 447, 449, 453, 475, 508, 516, 527, 529, 533, 540, 543, 555, 604, 627, 633, 634, 639, 647, 648, 649, 651, 653, 654, 656, 658, 659, 660, 664, 687, 690, 691, 692, 694, 696, 701, 703, 704, 706, 708, 710, 712, 732, 733, 738, 741, 771, 772, 773, 818, 842, 845, 848, 850, 852, 856, 861, 862, 865, 867], "iter": [10, 11, 17, 26, 61, 63, 68, 73, 74, 80, 88, 90, 96, 97, 103, 111, 116, 119, 138, 230, 337, 338, 386, 392, 393, 395, 438, 451, 462, 468, 485, 501, 502, 552, 590, 647, 650, 653, 658, 660, 723, 727, 734, 736, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 755, 756, 758, 820, 829, 830, 834, 845, 847, 849, 870, 879], "dino": [10, 11], "meta": [10, 11, 61, 737, 738, 739, 846, 866, 882], "vit": [10, 11], "purpos": [10, 11, 38, 47, 48, 50, 61, 63, 164, 262, 280, 345, 386, 648, 651, 656, 704, 843, 844, 846, 849, 851, 852, 854, 857, 858, 859, 862, 864, 865, 868, 874, 883, 884], "abund": [10, 11], "literatur": [10, 11], "mainli": [10, 11, 841, 844, 860, 862, 865, 874, 882], "focus": [10, 11, 850, 866, 882, 884], "rather": [10, 11, 26, 45, 53, 74, 90, 97, 142, 230, 582, 583, 586, 648, 650, 653, 655, 680, 839, 843, 845, 849, 850, 853, 855, 862, 863, 865, 866, 872, 882, 884], "65": [10, 11, 29, 59, 61, 63, 66, 95, 98, 105, 251, 290, 578, 633, 651, 653, 654, 656, 666, 701, 762, 763, 781], "749": [10, 11], "env": [10, 11, 15, 40, 42, 43], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 40, 42, 43, 226, 352, 353, 389, 650, 811, 824, 841, 842, 850, 855], "autoimageprocessor": [10, 11, 879], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 37, 40, 63, 64, 73, 77, 82, 84, 90, 96, 100, 105, 340, 341, 342, 343, 344, 386, 393, 399, 451, 462, 468, 526, 527, 528, 529, 530, 655, 662, 664, 678, 760, 761, 762, 763, 765, 771, 806, 811, 813, 830, 859, 863, 865], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11], "facebook": [10, 11, 64], "imagenet1k": [10, 11], "id2label": [10, 11, 64, 879], "predicted_class_idx": [10, 11, 64], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 112, 113, 114, 115, 116, 117], "stop_gradi": [10, 11, 75, 98, 230, 554, 634, 637, 639, 640, 641, 650, 653, 654, 659, 737, 738, 739, 818], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 72, 95, 300, 651, 867], "io": [10, 11, 16, 17, 27, 28, 40, 42, 43, 62, 65, 842], "to_rgb": [10, 11], "cv2": [10, 11, 61, 63, 65], "tar": [10, 11, 61, 62, 63, 66], "gz": [10, 11, 61, 62, 63, 66], "bj": [10, 11, 240, 257, 290, 355, 389, 651], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 63, 79, 102, 657, 849, 858, 861], "33": [10, 11, 26, 27, 29, 48, 59, 61, 62, 72, 82, 86, 95, 96, 97, 98, 100, 243, 244, 251, 300, 392, 393, 395, 404, 412, 434, 435, 465, 484, 541, 559, 610, 637, 651, 653, 654, 655, 656, 660, 666, 678, 679, 701, 758, 761, 781, 788, 798, 801], "bring": [10, 11, 47, 48, 845, 864, 865, 870, 874, 876], "hope": [10, 11, 59, 872], "milesi": [12, 13], "blob": [12, 13, 61, 63], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 22, 23, 61, 73, 77, 81, 96, 98, 100, 104, 128, 228, 229, 321, 322, 325, 336, 366, 384, 386, 389, 392, 393, 398, 410, 416, 417, 418, 426, 428, 433, 437, 453, 519, 520, 521, 640, 645, 650, 654, 655, 661, 678, 682, 685, 759, 798, 800, 801, 813, 814, 818, 830, 876, 877, 882], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 15, 21, 29, 62, 64, 66, 90, 556, 653, 806, 839, 844, 845, 855, 858, 861, 862, 863, 865, 866], "too": [12, 13, 73, 96, 240, 257, 264, 290, 395, 510, 651, 813, 841, 842, 843, 845, 850, 854, 866, 872], "small": [12, 13, 26, 29, 63, 72, 73, 78, 81, 95, 96, 101, 104, 257, 264, 290, 291, 351, 368, 389, 393, 394, 398, 457, 474, 519, 520, 521, 651, 656, 661, 699, 702, 704, 759, 813, 817, 842, 852, 858, 863, 868, 870, 872, 879, 883], "pixel": [12, 13, 61, 73, 96, 392, 428], "resampl": [12, 13], "nearest": [12, 13, 73, 96, 240, 257, 290, 300, 362, 389, 392, 404, 428, 550, 651, 868], "bicub": [12, 13, 73, 96, 392, 428, 868], "zero": [12, 13, 61, 69, 70, 72, 73, 74, 75, 77, 78, 80, 83, 84, 86, 87, 92, 93, 95, 96, 98, 100, 101, 105, 106, 109, 110, 114, 128, 130, 131, 132, 134, 146, 147, 149, 151, 156, 158, 159, 160, 162, 163, 166, 169, 170, 238, 239, 240, 242, 243, 244, 245, 246, 249, 251, 252, 254, 255, 256, 257, 259, 262, 263, 264, 271, 272, 273, 274, 280, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 304, 305, 307, 308, 310, 311, 313, 315, 316, 320, 322, 328, 330, 339, 346, 352, 353, 356, 357, 358, 362, 370, 373, 375, 376, 377, 378, 384, 386, 389, 392, 393, 395, 402, 404, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 435, 436, 437, 438, 439, 440, 445, 447, 455, 460, 463, 485, 495, 500, 501, 513, 514, 532, 541, 542, 559, 563, 570, 590, 595, 633, 634, 639, 640, 641, 643, 645, 648, 649, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 682, 685, 686, 688, 692, 693, 695, 696, 697, 698, 699, 700, 702, 704, 710, 712, 713, 718, 723, 724, 725, 726, 728, 729, 736, 759, 761, 762, 763, 766, 767, 768, 769, 771, 772, 773, 774, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 813, 814, 818, 834, 846, 849, 850, 851, 852, 857, 859, 860, 863, 870, 871], "ndim": [12, 13, 73, 78, 83, 96, 101, 106, 118, 122, 393, 395, 461, 462, 468, 479, 480, 481, 494, 503, 505, 515, 632, 653, 656, 663, 703, 706, 769, 849, 858, 865], "newaxi": [12, 13, 646], "transpos": [12, 13, 26, 42, 47, 48, 65, 73, 77, 78, 90, 96, 100, 101, 118, 393, 441, 459, 461, 463, 539, 655, 656, 668, 670, 672, 674, 675, 676, 680, 696, 700, 702, 708, 800, 814, 820, 827, 855, 861, 870], "255": [12, 13, 42, 47, 48, 61, 62, 63, 65, 77, 96, 100, 251, 651, 677], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 18, 19], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 69, 73, 74, 92, 96, 114, 143, 144, 157, 392, 393, 395, 404, 437, 462, 507, 546, 547, 617, 648, 653, 824, 829, 841, 846, 850, 851, 854, 857, 861, 862, 863, 866, 868, 870, 874], "uint8": [12, 13, 42, 47, 48, 63, 172, 179, 183, 194, 197, 202, 208, 649, 798, 799, 850, 865], "elif": [12, 13, 22, 23, 854, 861, 862, 863], "bool": [12, 13, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 143, 144, 146, 151, 152, 153, 154, 155, 156, 158, 160, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 205, 209, 213, 214, 216, 217, 219, 221, 224, 225, 230, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 344, 346, 351, 352, 353, 354, 355, 357, 359, 367, 368, 373, 374, 376, 378, 379, 380, 386, 389, 390, 392, 393, 394, 395, 398, 404, 411, 412, 413, 415, 416, 417, 418, 428, 429, 430, 431, 434, 436, 438, 440, 447, 451, 454, 455, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 486, 487, 489, 490, 491, 492, 493, 496, 500, 502, 505, 508, 510, 511, 512, 514, 517, 519, 521, 522, 523, 524, 525, 527, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 594, 595, 599, 608, 609, 610, 611, 613, 615, 617, 618, 631, 634, 635, 637, 639, 640, 641, 642, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 679, 680, 681, 682, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 710, 711, 713, 715, 716, 717, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 746, 747, 748, 750, 751, 752, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 798, 799, 800, 810, 814, 817, 818, 829, 830, 834, 850, 852, 854, 861, 862, 865, 866, 868, 870, 879, 880], "fromarrai": [12, 13, 42, 47, 48, 63], "interpol": [12, 13, 61, 73, 96, 370, 389, 392, 404, 550, 655, 682, 868, 882], "bilinear": [12, 13, 73, 96, 392, 428, 868], "torch_mask": [12, 13], "squeez": [12, 13, 61, 80, 103, 658, 882], "torch_result": [12, 13], "to_numpi": [12, 13, 29, 47, 59, 62, 63, 66, 74, 97, 653, 855, 863], "img_tf": [12, 13], "math": [12, 13, 64, 114, 307, 651, 850, 861, 862, 863, 870], "lot": [12, 13, 850, 859, 865, 872], "far": [12, 13, 26, 47, 48, 660, 740, 751, 830, 851, 852], "space": [12, 13, 69, 72, 73, 74, 92, 95, 96, 97, 142, 154, 155, 309, 366, 389, 394, 471, 563, 567, 648, 651, 653, 868], "del": [12, 13], "empty_cach": 12, "permute_dim": [12, 13, 80, 103, 658, 855], "func_wrapp": [12, 13, 67, 72, 73, 89, 95, 96, 126, 127, 128, 129, 130, 131, 132, 133, 134, 308, 312, 317, 318, 320, 384, 645, 651, 810, 851, 862, 867], "242": [12, 13, 96], "mani": [12, 13, 16, 47, 51, 80, 90, 103, 164, 345, 386, 648, 658, 730, 841, 842, 843, 846, 847, 849, 850, 851, 852, 853, 857, 858, 859, 861, 862, 863, 865, 868, 870, 872, 876, 881, 882], "factor": [12, 13, 29, 73, 75, 77, 78, 96, 98, 100, 101, 112, 113, 114, 115, 116, 228, 229, 230, 392, 393, 398, 426, 437, 451, 452, 462, 465, 467, 468, 524, 633, 634, 639, 640, 650, 654, 655, 656, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 686, 798, 800, 801, 813, 814, 818, 854], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 24, 25, 26, 47, 61, 70, 72, 77, 93, 95, 100, 119, 185, 261, 392, 414, 424, 563, 573, 649, 651, 653, 655, 656, 670, 672, 677, 701], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 24, 25, 61, 62], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 36, 47, 48, 66, 70, 72, 73, 74, 78, 83, 93, 95, 96, 97, 101, 106, 108, 118, 119, 123, 170, 180, 196, 203, 223, 240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 265, 266, 267, 268, 269, 275, 276, 277, 282, 283, 284, 286, 287, 288, 289, 290, 293, 295, 299, 306, 311, 330, 351, 356, 363, 364, 365, 367, 369, 374, 378, 386, 389, 393, 395, 404, 463, 495, 540, 552, 555, 649, 650, 651, 653, 656, 663, 665, 687, 694, 696, 701, 705, 708, 709, 712, 770, 777, 795, 821, 835, 845, 850, 852, 854, 857, 861, 862], "x2": [12, 13, 36, 47, 48, 70, 72, 73, 74, 78, 83, 93, 95, 96, 97, 101, 106, 118, 119, 123, 170, 196, 203, 223, 240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 265, 266, 267, 268, 269, 275, 276, 277, 282, 283, 284, 286, 287, 288, 289, 290, 293, 295, 299, 306, 311, 351, 356, 363, 364, 365, 367, 369, 374, 378, 389, 393, 395, 404, 449, 463, 495, 540, 552, 555, 649, 650, 651, 653, 656, 663, 687, 694, 696, 701, 705, 708, 709, 712, 770, 795, 821, 835, 845, 850, 852, 854, 857, 861, 862], "x3": [12, 13, 70, 74, 170, 552, 649, 653], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13, 48], "out_channel": [12, 13, 48], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 814], "batchnorm2d": [12, 13, 24, 25, 26, 817], "downscal": [12, 13, 74, 97, 558, 559, 580, 653], "maxpool": [12, 13, 24, 25, 26], "doubl": [12, 13], "conv": [12, 13, 655, 814, 868], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 73, 96, 392, 428, 868], "align_corn": [12, 13, 73, 96, 392, 428, 868], "conv2dtranspos": [12, 13, 814], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 73, 80, 96, 103, 395, 501, 658, 723, 736], "constant_pad": [12, 13, 80, 103, 658], "transpiledquaternion": 14, "geometri": 14, "quaternion": 14, "target": [14, 15, 16, 17, 21, 26, 27, 29, 30, 32, 38, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 63, 73, 96, 212, 394, 469, 470, 471, 472, 473, 474, 475, 476, 650, 793, 814, 816, 820, 823, 835, 839, 842, 844, 847, 855, 856, 863, 864, 869, 871, 880, 882, 884], "transpiledso3": 14, "liegroup": 14, "so3": 14, "quaternion_data": 14, "transpiled_quaternion": 14, "transpiled_so3": 14, "tf_rgb_to_grayscal": [15, 45], "rgb_to_grayscal": [15, 45, 835], "databas": [15, 865], "examples_and_demo": 15, "sqlite": 15, "tabl": [15, 240, 257, 290, 603, 626, 651, 653, 798, 799, 814, 862, 867, 876, 882], "autotun": 15, "ivyexcept": [15, 580, 613, 653, 831, 851, 854, 859, 861, 862, 866], "source_to_sourc": 15, "profil": [15, 650, 880], "translat": [15, 820], "_compil": [15, 842], "_source_to_sourc": 15, "47": [15, 26, 29, 59, 63, 72, 73, 78, 82, 95, 96, 97, 98, 100, 105, 246, 304, 392, 404, 412, 430, 431, 541, 563, 564, 637, 651, 653, 654, 655, 656, 662, 679, 694, 762, 763], "48": [15, 26, 29, 48, 59, 63, 72, 73, 95, 96, 97, 98, 105, 128, 239, 262, 304, 392, 412, 413, 414, 424, 430, 431, 434, 578, 633, 637, 645, 651, 653, 654, 656, 660, 666, 701, 741, 762, 781], "49": [15, 26, 59, 63, 73, 82, 96, 100, 101, 304, 392, 393, 404, 414, 424, 435, 460, 541, 651, 666, 711, 762, 781], "vll": 15, "pyx": 15, "ivy_kei": [15, 836], "pem": [15, 836], "torch_input": [15, 18, 19, 27], "rand": [15, 18, 19, 20, 21, 40, 43, 45, 47, 63, 829, 830, 879], "tf_input": [15, 18, 19], "tf_output": [15, 18, 19], "adapt": [16, 17, 73, 96, 98, 392, 406, 407, 408, 409, 640, 654, 814, 818], "offici": [16, 17, 842, 850, 870], "augmentationsequenti": 16, "courtesi": [16, 17], "serv": [16, 17, 842, 843, 846, 849, 857, 858, 862, 863, 865, 868, 874, 877], "showcas": [16, 17, 34, 835], "captur": [16, 17, 29, 860, 865, 870, 883], "flax": [16, 27, 811, 820, 882], "rm": [16, 17, 62, 64, 838, 843], "rf": [16, 17, 64, 843], "ivy_transpiled_output": [16, 17, 26, 27, 48, 871], "download_imag": [16, 17], "str": [16, 17, 63, 65, 68, 69, 73, 74, 77, 78, 79, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 151, 153, 156, 158, 160, 166, 167, 170, 172, 174, 175, 176, 177, 181, 182, 185, 186, 187, 188, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 209, 210, 230, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 392, 393, 394, 395, 398, 404, 407, 411, 412, 413, 415, 416, 417, 418, 420, 421, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 439, 440, 443, 447, 462, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 484, 485, 486, 491, 508, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 525, 527, 529, 540, 541, 542, 543, 550, 552, 553, 555, 556, 558, 559, 561, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 591, 594, 595, 597, 598, 607, 609, 610, 611, 613, 615, 617, 618, 631, 635, 643, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 707, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 746, 747, 752, 757, 760, 761, 762, 763, 765, 768, 771, 772, 773, 775, 779, 780, 781, 783, 785, 786, 788, 789, 790, 795, 796, 798, 799, 804, 806, 814, 816, 817, 829, 830, 834, 850, 851, 854, 858, 861, 862, 866, 870, 879, 880], "split": [16, 17, 61, 62, 63, 67, 72, 73, 80, 89, 90, 95, 96, 103, 126, 127, 128, 129, 130, 131, 132, 133, 134, 228, 229, 230, 308, 312, 317, 318, 320, 365, 372, 384, 395, 487, 496, 517, 563, 590, 645, 650, 651, 653, 655, 658, 668, 675, 676, 733, 795, 810, 814, 837, 843, 870, 872], "bytesio": [16, 17], "wb": [16, 17, 26], "outfil": [16, 17], "getbuff": [16, 17], "main": [16, 17, 34, 48, 69, 73, 78, 96, 101, 149, 162, 163, 164, 330, 345, 346, 386, 393, 395, 444, 490, 648, 656, 689, 690, 710, 841, 842, 843, 845, 848, 849, 855, 859, 861, 882, 883], "arturito": 16, "lazili": [16, 17, 40, 41, 42, 47, 48, 52, 54, 65, 879], "everyth": [16, 17, 42, 62, 829, 841, 842, 843, 844, 852, 861, 862, 863, 865, 872], "happen": [16, 17, 40, 41, 47, 48, 309, 651, 835, 842, 843, 851, 861, 865, 879], "actual": [16, 17, 40, 48, 52, 839, 843, 844, 855, 858, 859, 861, 862, 863, 865, 868, 869, 883], "transpiled_kornia": 16, "load_imag": [16, 17], "trigger": [16, 17, 40, 50, 816, 841, 856], "1st": 16, "minut": [16, 45, 842], "subsequ": [16, 40, 61, 824, 842, 846, 850, 852, 857, 858, 861, 865, 883], "imageloadtyp": [16, 17], "rgb32": [16, 17], "1xcxhxw": 16, "fp32": 16, "144": [16, 61], "coord": [16, 96, 366], "125": [16, 61, 73, 78, 101, 251, 363, 389, 394, 470, 651, 656, 711], "bxnx2": 16, "add_patch": 16, "circl": 16, "imshow": [16, 26, 61, 62], "tensor_to_imag": [16, 17], "axesimag": 16, "0x7f461dd09270": 16, "computation": [16, 800, 842], "intens": [16, 842], "snack": 16, "break": [16, 598, 653, 847, 850, 857, 866, 872], "grab": 16, "refresh": [16, 842, 855], "back": [16, 17, 27, 40, 61, 73, 80, 96, 103, 395, 491, 513, 596, 620, 653, 655, 658, 682, 728, 813, 818, 830, 842, 846, 850, 851, 854, 859, 860, 867, 872, 873], "freshli": 16, "sequenc": [16, 69, 73, 77, 78, 80, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 149, 151, 153, 155, 158, 160, 166, 170, 172, 185, 189, 190, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 333, 340, 341, 342, 343, 344, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 382, 383, 386, 389, 390, 391, 392, 393, 395, 399, 404, 405, 407, 408, 409, 416, 417, 418, 420, 421, 425, 426, 428, 435, 436, 437, 438, 439, 442, 450, 451, 452, 454, 460, 461, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 485, 486, 487, 488, 494, 496, 497, 499, 500, 502, 503, 506, 508, 510, 511, 512, 514, 517, 518, 519, 521, 522, 523, 525, 527, 528, 540, 541, 542, 543, 550, 551, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 590, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 632, 635, 636, 637, 643, 648, 651, 653, 654, 655, 656, 658, 660, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 682, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 713, 715, 716, 717, 721, 722, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 740, 747, 757, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 814, 817, 819, 843, 850, 851, 852, 854, 865, 866, 868, 870], "resize_op": 16, "antialia": [16, 73, 96, 392, 428, 868], "data_kei": 16, "transform_matrix": 16, "img_res": 16, "coords_res": 16, "jax_output": [16, 27], "creation": [16, 63, 73, 90, 96, 119, 848, 850, 851, 857, 859, 862, 863, 865, 866, 870, 879, 882], "truncat": [16, 73, 96, 392, 393, 414, 420, 424, 425, 426, 437, 466, 597, 653, 814, 854], "configur": [16, 26, 27, 40, 41, 45, 46, 90, 229, 650, 660, 753, 842, 843, 848, 850, 855, 856], "option": [16, 26, 53, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 185, 187, 197, 209, 213, 225, 228, 229, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 436, 437, 438, 440, 441, 443, 444, 445, 447, 449, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 561, 563, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 578, 579, 580, 582, 583, 586, 591, 594, 595, 599, 609, 610, 611, 613, 615, 617, 618, 619, 631, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 747, 751, 752, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 799, 806, 810, 811, 813, 814, 816, 818, 819, 829, 834, 841, 842, 843, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 868, 870, 872, 873, 876, 879, 880, 882], "shell": [16, 842, 843, 845], "variabl": [16, 17, 26, 40, 41, 45, 46, 48, 60, 62, 63, 65, 73, 74, 75, 81, 90, 96, 97, 98, 104, 138, 139, 141, 339, 386, 392, 393, 395, 399, 404, 438, 464, 502, 528, 539, 540, 556, 580, 581, 582, 583, 586, 613, 634, 635, 637, 639, 640, 641, 647, 653, 654, 656, 659, 661, 705, 737, 738, 739, 759, 795, 806, 811, 813, 814, 815, 816, 817, 818, 819, 820, 836, 843, 847, 850, 853, 857, 860, 861, 865, 866, 870, 873, 879, 883], "gotcha": 16, "ret": [16, 30, 32, 47, 48, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 404, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 448, 453, 455, 458, 460, 463, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 594, 595, 599, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 799, 800, 801, 811, 816, 818, 824, 830, 832, 835, 850, 851, 853, 854, 860, 861, 862, 863, 866, 870, 871], "obj": [16, 65, 143, 144, 575, 648, 653, 827, 879], "data_typ": [16, 70, 73, 93, 96, 199, 387, 649, 848, 850, 865, 866], "0x7f45cc3263b0": 16, "center": [16, 61, 813], "smaller": [16, 63, 73, 80, 86, 96, 103, 319, 351, 368, 384, 389, 392, 394, 404, 421, 426, 437, 469, 540, 541, 542, 563, 653, 658, 666, 721, 729, 779, 780, 785, 787, 843, 854, 870], "g": [16, 62, 64, 65, 73, 82, 84, 86, 88, 96, 105, 111, 113, 168, 197, 210, 257, 270, 290, 297, 300, 352, 353, 389, 392, 393, 395, 399, 404, 429, 431, 468, 510, 526, 527, 528, 529, 530, 541, 542, 649, 650, 651, 656, 660, 662, 664, 666, 692, 693, 697, 704, 706, 707, 713, 743, 747, 749, 752, 757, 761, 762, 763, 771, 772, 773, 774, 779, 780, 782, 784, 785, 787, 813, 834, 841, 842, 844, 845, 847, 848, 849, 860, 862, 865, 870, 872, 874], "artifact": [16, 865], "crop_op": 16, "0x7f45cc083580": 16, "feedback": [16, 17, 835, 841], "join": [16, 17, 26, 62, 63, 80, 90, 96, 103, 485, 486, 658, 722, 732, 873], "share": [16, 17, 62, 90, 203, 649, 798, 799, 835, 847, 849, 852, 858, 860, 862, 863, 865, 868, 870, 877], "thought": [16, 17, 47, 48, 842, 843, 857], "differenti": [17, 47, 48, 312, 382, 383, 384, 391, 876, 882], "total_vari": 17, "lightglu": 17, "futurewarn": 17, "amp": 17, "custom_fwd": 17, "device_typ": [17, 18, 19], "cast_input": 17, "tf_kornia": [17, 835], "doraemon": 17, "png": [17, 63, 65, 66], "writefil": [17, 48], "make_grid": [17, 26], "nrow": [17, 63], "out_np": 17, "transpiled_imshow": 17, "lazi": [17, 34, 35, 38, 41, 48, 50, 53, 54, 65], "occur": [17, 40, 47, 48, 52, 65, 70, 72, 84, 93, 95, 107, 172, 291, 307, 649, 651, 663, 664, 766, 767, 771, 772, 773, 774, 835, 845, 851, 854, 867], "onli": [17, 30, 32, 47, 48, 53, 59, 61, 63, 65, 68, 69, 72, 73, 78, 80, 82, 90, 92, 95, 96, 101, 103, 105, 113, 116, 118, 134, 155, 195, 196, 225, 285, 286, 291, 297, 329, 359, 366, 386, 389, 392, 393, 395, 399, 404, 415, 428, 438, 447, 452, 466, 468, 479, 480, 481, 491, 526, 527, 543, 557, 645, 648, 649, 650, 651, 653, 655, 656, 658, 660, 662, 663, 665, 666, 682, 696, 703, 706, 707, 725, 728, 740, 741, 747, 748, 750, 751, 752, 757, 758, 761, 762, 763, 766, 767, 777, 783, 786, 796, 798, 799, 801, 814, 818, 829, 834, 837, 838, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 879, 882, 883, 884], "nois": [17, 30, 32, 47, 879], "cxhxw": 17, "stddev": [17, 813], "clamp": [17, 59, 73, 96, 317, 384, 870], "noisy_image_tf": 17, "clip_by_valu": [17, 59, 870], "noisy_imag": 17, "l2_term": 17, "mseloss": 17, "reduct": [17, 73, 74, 79, 87, 90, 96, 97, 100, 102, 110, 380, 390, 392, 394, 395, 435, 469, 470, 471, 472, 473, 474, 475, 476, 507, 564, 594, 595, 653, 657, 667, 715, 716, 717, 789, 790, 815, 850, 858, 861, 865], "regularization_term": 17, "totalvari": 17, "clean_imag": 17, "requires_grad": [17, 847], "get_clean_imag": 17, "transpiledtvdenois": 17, "tv_denois": 17, "momentum": [17, 24, 25, 26, 61, 73, 96, 398, 519, 521, 817], "num_it": 17, "500": [17, 29, 73, 96, 97, 100, 392, 393, 416, 417, 468, 571, 653], "gradienttap": [17, 26], "tape": [17, 26], "reduce_sum": 17, "everi": [17, 26, 42, 47, 48, 53, 61, 69, 73, 74, 96, 97, 152, 153, 318, 352, 353, 366, 384, 389, 392, 395, 429, 430, 431, 438, 516, 552, 648, 653, 841, 843, 845, 847, 848, 850, 852, 856, 857, 858, 859, 861, 862, 863, 865, 870, 879, 882], "3f": 17, "gradient": [17, 26, 47, 48, 61, 63, 73, 96, 113, 230, 381, 389, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 650, 659, 737, 738, 739, 795, 806, 818, 844, 866, 872, 882], "trainable_vari": 17, "apply_gradi": [17, 26], "zip": [17, 26, 63, 870], "075": 17, "718": [17, 93, 95, 169, 286, 649], "352": [17, 66, 100, 655, 679, 854], "150": 17, "057": [17, 96], "822": 17, "637": [17, 73, 96, 376, 389], "300": [17, 29, 95, 97, 100, 300, 392, 416, 417, 571, 595, 651, 653, 656, 695, 865], "493": 17, "350": 17, "381": [17, 662, 763], "294": 17, "450": [17, 96, 453], "227": 17, "img_clean": 17, "ravel": [17, 113, 868], "noisi": 17, "clean": [17, 826, 843, 866, 871], "algorithm": [17, 73, 77, 89, 96, 100, 126, 392, 393, 411, 412, 413, 428, 429, 430, 431, 432, 462, 464, 468, 656, 669, 671, 672, 673, 674, 677, 704, 810, 814, 830, 850, 862, 868, 872, 882], "via": [18, 19, 45, 46, 50, 53, 264, 393, 395, 462, 465, 468, 510, 651, 660, 750, 751, 843, 845, 849, 850, 851, 861, 866, 868, 870, 871, 882], "alongsid": [18, 19, 36, 37, 49, 655, 682], "basic": [18, 19, 30, 32, 36, 39, 41, 43, 47, 48, 51, 54, 395, 509, 837, 841, 852, 865], "singl": [18, 19, 50, 59, 64, 72, 82, 90, 95, 105, 114, 309, 368, 389, 393, 399, 460, 527, 618, 631, 635, 651, 653, 654, 655, 662, 664, 682, 761, 762, 763, 771, 798, 814, 834, 841, 842, 843, 845, 852, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 876, 877], "lstm": [18, 19, 20, 21, 655, 681, 814, 870, 882], "sample_input": [18, 19], "uniform": [18, 19, 37, 38, 39, 40, 41, 45, 47, 48, 49, 50, 52, 53, 54, 61, 73, 82, 96, 105, 404, 543, 662, 760, 761, 763, 813, 864], "tf_lstm": [18, 19, 20, 21], "torch_lstm": [18, 19, 20, 21], "physicaldevic": [18, 19], "physical_devic": [18, 19], "alloc": [18, 19, 69, 70, 73, 93, 162, 163, 169, 346, 386, 648, 649, 834, 841, 843, 872], "physic": [18, 19, 221, 650], "modifi": [18, 19, 63, 73, 90, 96, 113, 395, 404, 498, 501, 507, 547, 798, 830, 841, 842, 843, 845, 847, 848, 850, 851, 853, 855, 856, 858, 861, 863, 865, 866, 870], "164": [18, 19, 26], "state_upd": [18, 19, 43], "properti": [18, 19, 43, 90, 113, 114, 115, 116, 117, 118, 122, 816, 818, 845, 849, 858, 863, 865], "_transpil": [18, 19, 43], "those": [18, 19, 60, 61, 78, 80, 90, 96, 101, 103, 142, 196, 257, 290, 511, 632, 648, 649, 651, 653, 656, 658, 660, 663, 703, 706, 721, 742, 769, 841, 842, 843, 846, 849, 850, 859, 861, 862, 863, 865, 868], "constant": [18, 19, 20, 21, 30, 32, 37, 40, 49, 52, 54, 59, 73, 80, 81, 96, 103, 104, 113, 114, 339, 386, 392, 394, 395, 438, 473, 474, 501, 658, 660, 661, 723, 746, 759, 813, 817, 858, 863, 866, 872, 879], "toler": [18, 19, 20, 73, 78, 96, 101, 351, 368, 389, 393, 447, 462, 468, 656, 699, 702, 793, 795, 845, 863, 882], "benchmark": [18, 19, 20], "n_run": [18, 19, 20], "tf_time": [18, 19], "round": [18, 19, 26, 45, 46, 72, 73, 95, 96, 113, 115, 116, 117, 240, 253, 257, 263, 264, 290, 304, 310, 311, 362, 389, 651, 839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876], "torch_tim": [18, 19], "cpu_speedup": [18, 19], "gpu_speedup": 18, "ntranspil": [18, 19], "5017": [18, 19], "1101": [18, 19], "7519": [18, 19], "901": [18, 19], "607x": [18, 19], "944x": [18, 19], "32": [20, 21, 27, 29, 43, 47, 48, 59, 61, 62, 63, 72, 73, 82, 95, 96, 100, 101, 105, 118, 119, 128, 181, 239, 251, 252, 261, 275, 281, 297, 300, 301, 355, 389, 392, 393, 395, 404, 412, 413, 414, 424, 434, 435, 445, 449, 484, 541, 563, 579, 645, 649, 651, 653, 655, 656, 662, 663, 666, 670, 672, 673, 677, 679, 696, 701, 712, 761, 762, 763, 770, 781, 798, 801, 850, 860], "original_output": [20, 21], "transpiled_output": [20, 21], "original_torch_tim": 20, "autograph": 20, "do_not_convert": 20, "compiled_tf_lstm": 20, "transpiled_tf_tim": 20, "original_tf_lstm": 20, "time_major": [20, 96, 392, 438, 655, 681], "return_sequ": [20, 814], "original_tf_tim": 20, "slower": [20, 38, 40, 862], "480074623755541x": 20, "362692848996253x": 20, "openmim": [22, 23], "mim": [22, 23], "0rc8": [22, 23], "get_model": [22, 23], "list_model": [22, 23], "mmengin": [22, 23], "configdict": [22, 23], "saniti": [22, 23, 27, 28, 29, 47, 862], "checkpoint": [22, 23, 24, 25, 26, 48, 64, 872], "against": [22, 23, 70, 73, 74, 78, 83, 93, 95, 96, 97, 101, 106, 170, 289, 308, 351, 354, 357, 368, 389, 404, 546, 547, 548, 549, 550, 587, 649, 651, 653, 656, 663, 696, 697, 699, 702, 766, 865, 871, 872, 882], "zoo": [22, 23], "checkpoint_nam": [22, 23, 27, 28, 47], "tiny_32xb128": [22, 23], "noema_in1k": [22, 23], "openmmlab": [22, 23], "get_scal": [22, 23], "cfg": [22, 23, 856], "_config": [22, 23], "train_pipelin": [22, 23], "tensor_imag": [22, 23], "transpiled_graph": [22, 23, 28, 47], "issu": [22, 23, 26, 27, 28, 40, 41, 45, 46, 394, 471, 813, 836, 837, 838, 839, 840, 842, 845, 847, 848, 850, 851, 852, 854, 855, 862, 865, 866, 868, 872, 879], "107960": [22, 23, 27, 28], "export": [22, 23, 27, 28, 62, 836, 884], "lc_all": [22, 23, 27, 28], "en_u": [22, 23, 27, 28], "utf": [22, 23, 27, 28], "ld_library_path": [22, 23, 27, 28], "lib64": [22, 23, 27, 28], "library_path": [22, 23, 27, 28], "stub": [22, 23, 27, 28, 848], "ldconfig": [22, 23, 27, 28], "_f": [22, 23, 28, 47], "comp_model": [22, 23, 27, 28, 47], "equival": [22, 23, 27, 28, 45, 47, 78, 101, 113, 114, 142, 251, 264, 285, 286, 299, 300, 395, 485, 510, 516, 648, 651, 656, 699, 702, 705, 713, 824, 861, 862, 868, 870], "np_imag": [22, 23, 42, 47, 48], "jax_imag": [22, 23], "hk": [22, 23, 28, 47, 61, 65], "rng_kei": [22, 23, 28, 47], "prngkei": [22, 23, 28, 38, 39, 47, 48, 61], "jax_mlp_forward": [22, 23], "init": [22, 23, 28, 47, 61, 63, 73, 96, 393, 451, 462, 468, 845], "rng": [22, 23, 28, 47, 61], "06": [22, 23, 29, 48, 63, 70, 82, 95, 98, 117, 126, 182, 239, 255, 392, 414, 424, 639, 645, 649, 654, 763, 793, 795, 865], "block_until_readi": [22, 23], "08": [22, 23, 26, 48, 73, 86, 96, 105, 243, 351, 368, 389, 392, 394, 414, 424, 474, 651, 762, 763, 788, 793, 798, 856], "train2017": [22, 23, 27, 28, 42, 47, 48], "000000283921": [22, 23, 27, 28, 47], "out_torch": [22, 23, 27, 28, 47], "et": [22, 23, 655, 656, 682, 706], "out_jax": [22, 23, 27, 28, 47], "66m": [22, 23], "53m": [22, 23], "That": [22, 23, 27, 28, 30, 32, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 61, 299, 394, 473, 651, 829, 842, 843, 846, 865, 883], "pretti": [22, 23, 27, 28, 38, 47, 48, 61, 839, 855], "solid": [22, 23, 27, 28, 47], "2023": [24, 25, 26, 28, 40, 42, 43, 48, 61], "52": [24, 25, 29, 59, 72, 95, 97, 98, 105, 245, 255, 257, 404, 541, 563, 564, 579, 633, 651, 653, 654, 655, 656, 666, 679, 701, 763, 781, 829], "110": [24, 25, 61], "10472": [24, 25], "10k": [24, 25], "tx": [24, 25], "23k": [24, 25], "unifyai": [24, 25, 65, 838, 842, 843, 848, 855], "634575": [24, 25], "620k": [24, 25], "jpeg": [24, 25, 62, 63], "619": [24, 25], "70k": [24, 25], "113": [24, 25], "resnet34_weight": [24, 25], "torch_resnet_34": [24, 25], "conv1": [24, 25, 26, 46, 48], "kernel_s": [24, 25, 26, 43, 46, 47, 48, 63, 73, 96, 392, 411, 412, 413, 432, 439, 814, 821], "stride": [24, 25, 26, 73, 77, 96, 97, 100, 118, 392, 395, 411, 412, 413, 429, 430, 431, 432, 434, 435, 439, 477, 653, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 814, 861, 866, 882], "bia": [24, 25, 26, 73, 77, 96, 100, 104, 398, 404, 524, 540, 590, 653, 655, 661, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 759, 814, 820, 858, 865, 870], "bn1": [24, 25, 26, 48], "ep": [24, 25, 26, 73, 78, 81, 96, 101, 104, 182, 317, 384, 393, 394, 398, 447, 474, 519, 520, 521, 649, 656, 661, 699, 702, 759, 810, 817], "05": [24, 25, 26, 29, 48, 63, 69, 72, 73, 75, 81, 95, 96, 98, 104, 155, 282, 335, 351, 360, 361, 368, 386, 389, 398, 519, 520, 521, 578, 600, 623, 633, 634, 639, 648, 651, 653, 654, 656, 661, 697, 759, 793, 798, 813, 817, 863, 865], "affin": [24, 25, 26, 817], "track_running_stat": [24, 25, 26, 817], "dilat": [24, 25, 26, 65, 73, 77, 96, 100, 392, 395, 429, 430, 431, 434, 435, 439, 501, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 814], "ceil_mod": [24, 25, 26, 73, 96, 392, 411, 412, 413, 429, 430, 431, 434, 814], "layer1": [24, 25, 26], "basicblock": [24, 25, 26], "conv2": [24, 25, 26, 48], "bn2": [24, 25, 26, 48], "layer2": [24, 25, 26], "layer3": [24, 25, 26], "layer4": [24, 25, 26], "output_s": [24, 25, 26, 73, 96, 392, 406, 407, 408, 409, 655, 684, 814], "fc": [24, 25, 26, 32, 46, 48, 61], "in_featur": [24, 25, 26, 77, 100, 655, 679, 820, 865], "out_featur": [24, 25, 26, 77, 100, 655, 679, 820, 865], "resnet_34": [24, 25], "ivy_resnet_34": [24, 25], "333f7ec4": [24, 25], "pth": [24, 25, 48], "3m": [24, 25], "4mb": [24, 25], "preserv": [24, 25, 28, 42, 43, 73, 74, 75, 90, 96, 97, 98, 119, 392, 393, 395, 404, 428, 462, 479, 480, 481, 492, 493, 513, 547, 580, 643, 653, 654, 658, 725, 798, 864, 865, 880, 884], "multipl": [24, 25, 28, 36, 42, 43, 47, 48, 72, 73, 78, 81, 86, 87, 90, 95, 96, 97, 98, 101, 103, 104, 109, 110, 151, 251, 275, 282, 288, 289, 290, 292, 352, 353, 389, 392, 393, 395, 398, 402, 414, 421, 424, 426, 460, 487, 496, 514, 517, 524, 533, 552, 559, 590, 633, 634, 637, 639, 640, 641, 643, 648, 651, 653, 654, 655, 656, 658, 661, 663, 666, 667, 670, 671, 672, 673, 686, 695, 696, 697, 710, 721, 724, 729, 730, 759, 766, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 814, 830, 834, 841, 843, 846, 847, 849, 852, 854, 856, 858, 861, 862, 863, 865, 868, 870, 872, 879, 882, 884], "rel": [24, 25, 28, 42, 43, 73, 75, 78, 80, 85, 92, 96, 98, 101, 103, 108, 118, 153, 351, 368, 389, 394, 404, 473, 474, 540, 634, 637, 639, 640, 641, 654, 656, 658, 665, 690, 699, 702, 710, 725, 729, 775, 778, 793, 795, 843, 863, 868, 882], "home": [24, 25, 28, 42, 43], "workspac": [24, 25, 28, 37, 40, 42, 43, 842, 855], "95": [24, 25, 29, 59, 73, 75, 78, 82, 89, 98, 100, 105, 126, 377, 389, 435, 633, 637, 641, 645, 654, 656, 662, 694, 762, 763], "track": [24, 25, 36, 47, 48, 60, 61, 834, 842, 843, 845, 860, 861, 879, 882], "properli": [24, 25, 26, 40, 41, 45, 46, 48, 842, 844, 854, 856, 862, 865], "_trace_graph": [24, 25], "shown": [24, 25, 43, 47, 88, 90, 111, 274, 297, 355, 389, 651, 841, 842, 843, 845, 848, 850, 852, 854, 856, 857, 862, 863, 865, 866, 867, 870, 871, 872], "8507": [24, 25], "1351": [24, 25], "0069": [24, 25], "85072625": [24, 25], "13506091": [24, 25], "00688289": [24, 25], "resnet50_weight": [24, 25], "torch_resnet_50": [24, 25], "imagenet1k_v2": [24, 25], "11ad3fa6": [24, 25], "8m": [24, 25], "8mb": [24, 25], "bottleneck": [24, 25], "conv3": [24, 25], "bn3": [24, 25], "2048": [24, 25, 611, 653], "resnet_50": [24, 25], "ivy_resnet_50": [24, 25], "3429": [24, 25], "0408": [24, 25], "0121": [24, 25], "34288204": [24, 25], "04077014": [24, 25], "01212029": [24, 25], "deploy": [26, 842, 876, 877, 884], "ow": 26, "residu": 26, "extrem": 26, "though": [26, 40, 42, 48, 840, 841, 843, 850, 851, 853, 858, 861, 862, 868, 872], "idea": [26, 841, 864, 866, 877, 884], "revolutionari": 26, "reach": [26, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876, 877, 882], "152": 26, "vanish": [26, 813], "explod": [26, 813, 875, 876], "astor": [26, 48], "cu121": [26, 48], "pillow": [26, 48, 66], "filelock": [26, 42, 48, 61], "extens": [26, 42, 48, 61, 72, 78, 95, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 159, 160, 161, 162, 163, 165, 166, 172, 182, 185, 197, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 352, 353, 355, 389, 392, 395, 404, 436, 510, 514, 540, 648, 649, 651, 656, 658, 663, 664, 665, 666, 667, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 722, 724, 725, 726, 728, 729, 731, 732, 736, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 840, 842, 843, 853, 855, 856, 865, 882], "sympi": [26, 42, 48], "fsspec": [26, 42, 48, 61], "nvrtc": 26, "cu12": 26, "cupti": 26, "54": [26, 27, 46, 59, 70, 72, 77, 95, 96, 100, 105, 185, 254, 255, 260, 275, 304, 310, 331, 386, 392, 404, 414, 424, 541, 651, 655, 656, 666, 679, 698, 701, 761, 762, 763, 781, 852], "curand": 26, "106": [26, 63], "cusolv": [26, 656, 707], "107": 26, "cuspars": 26, "nccl": 26, "nvtx": 26, "triton": 26, "nvjitlink": 26, "mpmath": [26, 42, 48], "py2": [26, 61, 63], "filter": [26, 61, 63, 65, 73, 77, 96, 100, 334, 335, 386, 392, 413, 431, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 800, 814, 847], "get_logg": 26, "setlevel": 26, "195130": 26, "port": [26, 40, 41, 45, 46, 795], "153": [26, 40, 41, 45, 46], "onednn": [26, 40, 41, 45, 46], "custom": [26, 40, 41, 45, 46, 48, 61, 73, 96, 316, 328, 381, 384, 391, 798, 820, 829, 838, 844, 854, 859, 863, 865, 868, 882], "numer": [26, 40, 41, 45, 46, 60, 69, 70, 72, 73, 74, 78, 82, 83, 86, 93, 95, 96, 97, 101, 105, 106, 108, 118, 119, 156, 169, 237, 240, 253, 257, 262, 263, 264, 271, 272, 273, 276, 285, 286, 290, 292, 293, 294, 295, 299, 300, 301, 305, 306, 310, 311, 392, 394, 399, 404, 436, 471, 527, 540, 600, 601, 610, 611, 623, 624, 648, 649, 651, 653, 656, 662, 663, 666, 687, 694, 696, 701, 704, 706, 708, 710, 712, 761, 762, 763, 765, 766, 767, 769, 770, 775, 782, 785, 787, 798, 799, 800, 801, 813, 839, 850, 855, 860, 862, 863, 865, 866, 867, 868, 870, 882], "float": [26, 40, 41, 45, 46, 67, 69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 84, 86, 89, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 105, 109, 113, 116, 118, 128, 134, 142, 143, 144, 147, 149, 151, 152, 153, 154, 155, 159, 160, 165, 169, 173, 177, 182, 186, 190, 196, 197, 200, 206, 215, 224, 228, 229, 232, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 268, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 351, 352, 353, 354, 362, 363, 368, 370, 371, 374, 375, 376, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 404, 407, 416, 417, 418, 435, 436, 443, 446, 447, 449, 462, 466, 468, 469, 470, 474, 475, 490, 509, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 540, 541, 542, 543, 548, 549, 550, 557, 558, 559, 567, 576, 600, 601, 604, 610, 611, 631, 633, 634, 637, 639, 640, 641, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 678, 680, 682, 685, 686, 688, 691, 692, 693, 695, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 710, 713, 715, 716, 717, 737, 738, 739, 746, 759, 762, 763, 769, 771, 772, 773, 774, 779, 780, 782, 783, 784, 785, 786, 787, 788, 795, 798, 799, 801, 810, 813, 814, 817, 818, 834, 839, 845, 849, 850, 853, 854, 855, 857, 858, 860, 861, 863, 865, 866, 868, 870], "point": [26, 34, 40, 41, 43, 45, 46, 70, 72, 73, 78, 82, 84, 86, 93, 95, 96, 101, 105, 109, 142, 143, 144, 147, 149, 152, 159, 160, 165, 169, 182, 186, 190, 197, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 270, 271, 272, 273, 278, 279, 280, 281, 282, 290, 292, 293, 295, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 329, 330, 332, 352, 353, 370, 371, 374, 376, 386, 389, 392, 393, 394, 399, 404, 407, 416, 417, 418, 436, 446, 466, 470, 526, 527, 528, 529, 530, 540, 541, 542, 550, 646, 648, 649, 651, 656, 662, 663, 664, 665, 666, 686, 688, 691, 692, 693, 695, 697, 698, 699, 702, 703, 704, 705, 706, 707, 708, 710, 713, 762, 763, 769, 771, 772, 773, 774, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 824, 825, 834, 839, 841, 842, 843, 845, 846, 848, 850, 852, 853, 855, 857, 861, 862, 865, 866, 868, 870, 879], "turn": [26, 38, 40, 41, 45, 46, 50, 77, 100, 113, 114, 416, 417, 418, 655, 678, 814, 842, 848, 849, 851, 852, 862, 865], "tf_enable_onednn_opt": [26, 40, 41, 45, 46], "374700": 26, "441741": 26, "8454": [26, 27, 40, 41, 45, 46], "461396": 26, "1452": [26, 27, 40, 41, 45, 46], "592512": 26, "210": [26, 40, 41, 45, 46, 851], "avx_vnni": [26, 40, 41, 45, 46], "820737": 26, "1729515043": 26, "033296": 26, "4399": 26, "cuda_executor": [26, 40, 41, 45, 46], "1001": [26, 40, 41, 45, 46], "numa": [26, 40, 41, 45, 46], "node": [26, 40, 41, 45, 46, 90, 97, 119, 556, 566, 613, 660, 750, 751, 813, 823, 827, 848, 849, 862, 879, 883], "sy": [26, 40, 41, 45, 46, 62], "0000": [26, 40, 41, 45, 46, 73, 96, 331, 332, 335, 361, 378, 386, 389, 393, 395, 458, 495], "numa_nod": [26, 40, 41, 45, 46], "058149": 26, "2343": [26, 40, 41, 45, 46], "dlopen": [26, 40, 41, 45, 46], "miss": [26, 27, 40, 41, 45, 46, 73, 96, 393, 395, 451, 462, 468, 509, 818, 841, 842, 846, 849, 852, 862, 865, 868], "mention": [26, 30, 32, 40, 41, 45, 46, 47, 48, 53, 841, 842, 843, 846, 852, 857, 858, 861, 862, 865, 868, 882], "www": [26, 40, 41, 45, 46, 63, 352, 353, 389], "seem": [26, 27, 29, 40, 41, 45, 46, 841, 842, 868, 870, 872, 882], "newer": [26, 27, 40, 41, 45, 46, 842, 865], "latter": [26, 27, 40, 41, 45, 46, 264, 651, 842, 845, 847, 850, 853, 862], "cleanup_and_fetch_binari": [26, 27, 40, 41, 45, 46, 826, 842], "fetch": [26, 27, 40, 41, 45, 46, 62, 575, 653, 842, 843, 845], "former": [26, 27, 40, 41, 45, 46, 264, 651, 842, 850, 853, 862], "cp38": [26, 27, 40, 41, 45, 46, 62, 66, 842], "manylinux_2_17_x86_64": [26, 27, 40, 41, 45, 46, 61, 63, 842], "win_amd64": [26, 27, 40, 41, 45, 46], "cp39": [26, 27, 40, 41, 45, 46, 61, 63], "cp310": [26, 27, 40, 41, 45, 46, 842], "macosx_12_0_arm64": [26, 27, 40, 41, 45, 46], "cp311": [26, 27, 40, 41, 45, 46], "cp312": [26, 27, 40, 41, 45, 46], "solv": [26, 78, 101, 393, 457, 656, 798, 842, 845, 855, 862, 884], "todai": 26, "ant": 26, "bee": 26, "120": [26, 63, 86, 109, 119, 656, 701, 779], "usual": [26, 30, 32, 64, 257, 290, 651, 829, 842, 845, 850, 862, 865, 868], "upon": [26, 47, 48, 65, 834, 843, 852, 861, 865, 868, 872, 882], "scratch": [26, 865], "transfer": [26, 48], "subset": [26, 63, 800, 846, 853, 857, 860, 862, 865, 870, 882], "extract": [26, 38, 47, 48, 55, 62, 73, 96, 114, 395, 484, 511, 862, 864, 866, 871, 881, 882, 883], "zipfil": 26, "hymenoptera_data": 26, "replac": [26, 31, 33, 44, 62, 72, 73, 74, 80, 82, 90, 95, 96, 97, 103, 105, 149, 291, 327, 330, 384, 386, 395, 507, 510, 514, 594, 595, 599, 648, 651, 653, 658, 662, 721, 760, 798, 843, 848, 849, 850, 851, 859, 862, 865, 870, 872], "send": 26, "statu": [26, 841, 856], "status_cod": 26, "basenam": 26, "zip_save_path": 26, "getcwd": 26, "zip_ref": 26, "extractal": 26, "delet": [26, 62, 843], "fail": [26, 62, 793, 839, 842, 843, 845, 850, 852, 856, 859, 861, 862, 863], "data_transform": 26, "randomresizedcrop": 26, "randomhorizontalflip": 26, "val": [26, 74, 90, 95, 97, 270, 395, 490, 578, 579, 580, 599, 600, 601, 651, 653, 827, 850, 861], "data_dir": 26, "image_dataset": 26, "imagefold": 26, "dataset_s": [26, 63], "class_nam": [26, 63, 795], "inp": [26, 100, 655, 677], "clip": [26, 59, 72, 73, 80, 95, 96, 97, 103, 288, 289, 395, 484, 510, 511, 558, 559, 651, 653, 658, 849, 858, 860, 861, 870], "paus": 26, "001": [26, 61, 72, 73, 81, 93, 96, 98, 182, 280, 297, 355, 368, 389, 634, 649, 651, 654, 661, 759, 798], "bit": [26, 73, 86, 181, 182, 185, 248, 249, 251, 404, 541, 542, 649, 651, 666, 779, 780, 785, 787, 840, 841, 842, 849, 850, 852, 858, 870], "batch": [26, 48, 61, 62, 63, 73, 74, 78, 90, 96, 97, 101, 228, 229, 392, 393, 394, 398, 406, 408, 409, 415, 428, 438, 455, 469, 471, 519, 520, 521, 524, 567, 570, 571, 632, 650, 653, 655, 656, 657, 659, 661, 679, 680, 681, 682, 713, 716, 737, 738, 739, 759, 798, 814, 817, 849, 858, 863], "resnet18": [26, 65, 66], "quickstart": [26, 34], "readili": [26, 48], "output_dir": [26, 48], "sync": [26, 27, 48, 820, 842, 845, 855], "sync_model": [26, 27, 48, 820], "tensorflowresnet": 26, "tensorflow_output": 26, "tensorflow_basicblock": 26, "tensorflowbasicblock": 26, "instanti": [26, 27, 47, 48, 806, 820, 853], "tensorflow_model": [26, 48], "03397159": 26, "25558692": 26, "24101321": 26, "30248338": 26, "4400444": 26, "19245608": 26, "04251331": 26, "18369699": 26, "19522265": 26, "30382818": 26, "3872773": 26, "18959698": 26, "01237407": 26, "1483828": 26, "22826895": 26, "19425122": 26, "33760768": 26, "10684194": 26, "0467218": 26, "19289383": 26, "22670889": 26, "277786": 26, "39353883": 26, "17944181": 26, "attribut": [26, 48, 66, 90, 182, 183, 184, 185, 216, 217, 225, 568, 569, 649, 650, 653, 796, 847, 848, 849, 853, 854, 858, 859, 861, 862, 868], "kerasconv2d": [26, 48], "kerasbatchnorm2d": [26, 48], "tensorflow_relu": [26, 48], "tensorflow_maxpool2d": [26, 48], "tensorflow_sequenti": [26, 48], "tensorflow_adaptiveavgpool2d": 26, "kerasdens": [26, 48], "buffer": [26, 27, 48, 69, 92, 96, 103, 144, 151, 479, 480, 487, 489, 491, 492, 493, 500, 517, 648, 724, 725, 726, 728, 730, 731, 733, 735, 815, 816, 820, 861, 872], "train_model": 26, "warmup_epoch": 26, "train_dataset": 26, "val_dataset": 26, "metric": 26, "train_acc_metr": 26, "sparsecategoricalaccuraci": 26, "val_acc_metr": 26, "jit_compil": 26, "train_step": [26, 61], "x_batch_train": 26, "y_batch_train": 26, "loss_valu": 26, "grad": [26, 47, 59, 63, 633, 654, 818, 860], "trainable_weight": 26, "update_st": 26, "train_loop": [26, 63], "nstart": 26, "start_tim": 26, "4f": 26, "train_acc": 26, "acc": 26, "reset": [26, 204, 205, 206, 207, 208, 234, 235, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 649, 650, 653, 851], "reset_st": 26, "x_batch_val": 26, "y_batch_val": 26, "val_logit": 26, "val_acc": 26, "taken": [26, 53, 73, 78, 96, 101, 358, 389, 392, 437, 656, 690, 710, 841, 862, 866, 883], "sparsecategoricalcrossentropi": 26, "from_logit": [26, 79, 102, 657, 715, 815], "3121": 26, "2399": 26, "4778": 26, "6033": 26, "244": [26, 72, 262], "3730": 26, "1634": 26, "0761": 26, "0626": 26, "3433": 26, "6616": 26, "7910": 26, "3529": 26, "2815": 26, "3439": 26, "3905": 26, "1333": 26, "8525": 26, "2745": 26, "0913": 26, "0851": [26, 43], "1482": 26, "6250": 26, "8197": 26, "3464": 26, "3456": 26, "8281": 26, "6437": 26, "4446": 26, "8402": 26, "3725": 26, "0307": 26, "0915": 26, "4379": 26, "0393": 26, "1792": 26, "0138": 26, "8425": 26, "1388": 26, "4314": 26, "74": [26, 59, 61, 72, 105, 252, 282, 651, 656, 698], "0170": 26, "2789": 26, "2099": 26, "1670": 26, "8320": 26, "4706": 26, "2829": 26, "2262": 26, "3582": 26, "4215": 26, "8566": 26, "4967": 26, "2506": 26, "0339": 26, "5903": 26, "1273": 26, "8689": 26, "4771": 26, "0745": 26, "0148": 26, "0130": 26, "1275": 26, "8975": 26, "5098": 26, "82": [26, 29, 59, 61, 66, 67, 72, 98, 105, 129, 243, 404, 541, 633, 654, 762, 763, 839, 855], "1808": 26, "3167": 26, "3353": 26, "0544": 26, "8607": 26, "5229": 26, "6601": 26, "2705": 26, "4662": 26, "0162": 26, "8443": 26, "2667": 26, "5686": 26, "3593": 26, "0349": 26, "8115": 26, "4902": 26, "0202": 26, "1907": 26, "0127": 26, "0399": 26, "5033": 26, "5231": 26, "3243": 26, "6539": 26, "7478": 26, "8811": 26, "4575": 26, "0512": 26, "3078": 26, "0097": 26, "5082": 26, "78": [26, 59, 75, 301, 639, 651, 654, 656, 662, 666, 701, 762, 781], "0344": 26, "6654": 26, "1881": 26, "8934": 26, "5163": 26, "0837": 26, "1806": [26, 798], "8223": 26, "4363": 26, "5425": 26, "1178": 26, "1384": 26, "1935": 26, "0257": 26, "6078": 26, "visualize_model": 26, "num_imag": 26, "was_train": 26, "learning_phas": 26, "images_so_far": 26, "pred": [26, 47, 62, 63, 73, 79, 96, 102, 394, 470, 473, 657, 715, 716, 717, 718, 849, 858, 861], "j": [26, 69, 72, 73, 74, 78, 86, 92, 95, 96, 101, 113, 141, 145, 158, 238, 239, 240, 241, 243, 246, 255, 257, 260, 262, 270, 278, 280, 284, 290, 301, 303, 304, 307, 308, 355, 389, 392, 393, 404, 420, 421, 425, 436, 437, 441, 446, 448, 459, 465, 550, 555, 647, 648, 651, 653, 656, 666, 691, 710, 781, 830, 843, 844, 848, 879], "continu": [26, 43, 47, 63, 141, 304, 312, 384, 647, 651, 840, 841, 842, 845, 855, 861, 864, 865, 872, 876, 882], "juic": 26, "quota": [26, 842], "yet": [27, 28, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 48, 63, 385, 387, 388, 396, 397, 401, 841, 842, 855, 879], "broken": [27, 28, 40, 42, 43, 882], "permiss": [27, 28, 40, 42, 43, 842], "recommend": [27, 28, 40, 42, 43, 48, 285, 286, 299, 394, 471, 651, 666, 783, 786, 838, 842, 847, 848, 856, 859, 860, 873, 879], "virtual": [27, 28, 40, 42, 43, 843, 862], "pypa": [27, 28, 40, 42, 43], "venv": [27, 28, 40, 42, 43], "autofeatureextractor": [27, 28, 47], "jaxlib": [27, 36, 39, 40, 42, 48, 62, 824, 842, 846, 850, 851, 857, 866, 870], "fall": [27, 29, 40, 61, 818, 841, 850], "extractor": [27, 28, 30, 32, 47, 63], "hug": [27, 28, 47, 879], "face": [27, 28, 47, 837, 842, 845, 855, 856, 860, 868, 870, 879, 882], "arch_nam": [27, 28, 47], "microsoft": [27, 28, 47, 879, 882], "feature_extractor": [27, 28, 47], "781022": 27, "799336": 27, "805088": 27, "897178": 27, "modeling_resnet": 27, "resnetmodel": 27, "jaxresnetmodel": 27, "jax_resnetconfig": 27, "jaxresnetconfig": 27, "jax_config": 27, "from_dict": 27, "to_dict": 27, "jax_model": 27, "last_hidden_st": [27, 28, 47], "jax_input": 27, "sbin": 27, "real": [27, 34, 42, 72, 73, 86, 95, 96, 109, 118, 128, 131, 134, 145, 159, 160, 237, 238, 239, 240, 242, 243, 244, 245, 246, 255, 257, 258, 260, 262, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 287, 290, 292, 293, 295, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 352, 353, 359, 360, 361, 371, 389, 392, 393, 415, 436, 437, 446, 447, 645, 648, 651, 656, 663, 666, 691, 692, 693, 697, 704, 706, 707, 710, 713, 769, 782, 784, 785, 786, 787, 849], "wsl": 27, "libcuda": 27, "symbol": [27, 61, 829, 841, 842, 882, 883], "ld": 27, "deni": 27, "warmup": 27, "nnx": [27, 820], "inputs_jax": [27, 28, 47], "comp_model_jax": 27, "63": [27, 28, 29, 59, 63, 72, 89, 95, 100, 101, 134, 296, 303, 304, 392, 404, 414, 424, 435, 541, 651, 656, 660, 666, 686, 701, 741, 752, 781], "134": [27, 28, 77, 656, 679, 698], "2x": [27, 28, 47], "980130": 28, "9342": 28, "980177": 28, "609": 28, "980207": 28, "1518": 28, "351203": 28, "jax_forward": [28, 47], "jit_appli": 28, "ipytest": 29, "load_breast_canc": 29, "autoconfig": 29, "sole": [29, 59, 857, 866, 882, 883, 884], "test_jax_gpu": 29, "xla_bridg": [29, 40, 61], "get_backend": [29, 858], "test_torch_gpu": 29, "test_xgboost_gpu": 29, "capsi": 29, "load_diabet": 29, "xgb_model": 29, "xgbregressor": 29, "tree_method": 29, "consol": [29, 593, 653, 843, 856, 865], "gpu_hist": 29, "readouterr": 29, "err": 29, "tabular": 29, "pulsar": 29, "standard": [29, 72, 78, 81, 82, 86, 95, 104, 105, 109, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 159, 160, 161, 162, 163, 165, 166, 172, 182, 185, 197, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 352, 353, 355, 389, 392, 393, 395, 404, 436, 466, 510, 514, 540, 632, 648, 649, 651, 653, 656, 658, 661, 662, 663, 664, 665, 666, 667, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 722, 724, 725, 726, 728, 729, 731, 732, 736, 759, 762, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 800, 813, 817, 829, 830, 844, 845, 846, 849, 850, 853, 857, 861, 864, 865, 866, 872, 876, 884], "extra": [29, 48, 90, 119, 138, 632, 647, 653, 846, 850, 852, 859, 861, 862, 863, 868, 871, 879], "dimens": [29, 48, 69, 73, 74, 77, 78, 79, 80, 82, 83, 84, 86, 87, 90, 92, 96, 97, 100, 101, 102, 103, 105, 106, 107, 109, 110, 116, 118, 119, 122, 129, 133, 158, 162, 163, 333, 344, 346, 347, 348, 349, 352, 353, 357, 358, 366, 373, 380, 386, 389, 390, 392, 393, 394, 395, 398, 399, 402, 404, 406, 408, 409, 411, 412, 413, 415, 420, 421, 425, 429, 430, 431, 432, 435, 436, 438, 439, 441, 443, 446, 455, 464, 469, 473, 479, 480, 481, 485, 491, 503, 504, 505, 506, 508, 510, 514, 519, 520, 521, 524, 528, 530, 533, 543, 545, 546, 547, 548, 549, 550, 563, 564, 565, 567, 574, 608, 612, 632, 645, 648, 653, 655, 656, 657, 658, 659, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 686, 687, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 712, 713, 716, 717, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 737, 738, 739, 765, 766, 767, 769, 771, 772, 773, 774, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 800, 810, 814, 817, 852, 854, 860, 862, 863, 865, 868, 870], "load_data": 29, "standardscal": 29, "df": [29, 63], "delimit": 29, "sc": 29, "fit_transform": 29, "117564": 29, "navig": [29, 839, 842, 843, 844, 855], "rerun": [29, 61], "436": 29, "t4": 29, "tier": 29, "reduc": [29, 73, 74, 78, 83, 86, 87, 90, 96, 97, 101, 106, 109, 110, 230, 352, 353, 373, 389, 390, 404, 545, 546, 547, 548, 549, 550, 564, 650, 653, 656, 663, 666, 667, 703, 766, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 829, 830, 854, 862, 868, 870, 879], "although": [29, 656, 704, 838, 846, 848, 849, 862, 868, 882], "experi": [29, 34, 63, 842, 854, 865, 872], "substanti": [29, 843, 846, 850, 865, 882], "stuff": 29, "201": [29, 95, 96, 242, 414, 651], "20x": 29, "ivyclassifi": 29, "106597": 29, "10967": 29, "96": [29, 59, 73, 75, 95, 96, 97, 105, 254, 275, 307, 377, 389, 392, 414, 563, 564, 637, 651, 653, 654, 656, 666, 701, 763, 781], "73": [29, 59, 72, 101, 304, 404, 541, 656, 662, 686, 762, 865], "852": [29, 655, 679], "449": 29, "68": [29, 59, 63, 66, 72, 105, 129, 152, 245, 392, 414, 424, 645, 648, 651, 656, 661, 712, 759, 762, 763], "nevertheless": 29, "short": [29, 59, 73, 96, 440, 655, 680, 681, 841, 843, 850, 870], "blaze": 29, "36": [29, 48, 59, 63, 72, 73, 77, 86, 96, 97, 101, 245, 300, 301, 366, 389, 392, 393, 404, 414, 424, 450, 541, 563, 564, 611, 651, 653, 656, 660, 666, 679, 698, 701, 711, 751, 781], "35": [29, 48, 59, 67, 77, 78, 89, 95, 96, 100, 101, 105, 129, 245, 304, 392, 414, 424, 651, 655, 656, 663, 666, 679, 687, 694, 762, 770, 781], "surpass": 29, "remark": [29, 872], "artifici": 29, "simpli": [29, 36, 47, 48, 50, 59, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 651, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 706, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 835, 841, 842, 843, 846, 847, 848, 850, 851, 852, 853, 855, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 874, 883], "x_doubl": 29, "vstack": [29, 73, 96, 395, 497], "y_doubl": 29, "235128": 29, "315": [29, 296, 651], "879": 29, "380": 29, "examin": 29, "600": [29, 63, 97, 100, 392, 416, 417, 571], "conduct": [29, 877], "num_boosting_round": 29, "ivy_elapsed_tim": 29, "xgb_elapsed_tim": 29, "ivy_tim": 29, "partial": [29, 73, 90, 96, 183, 184, 216, 217, 366, 389, 392, 393, 395, 404, 440, 455, 462, 503, 504, 505, 506, 547, 568, 569, 638, 649, 650, 653, 654, 799, 801, 815, 816, 843, 848, 868], "xgb_time": 29, "fivethirtyeight": 29, "legend": [29, 63, 841], "loc": 29, "best": [29, 61, 590, 653, 830, 834, 837, 839, 840, 841, 842, 843, 844, 850, 854, 855, 864, 865, 866, 873, 877], "xlabel": 29, "ylabel": 29, "obviou": [29, 882], "trend": 29, "gap": 29, "train_siz": [29, 61], "widen": 29, "impress": 29, "outcom": [29, 73, 96, 354, 366, 389, 830], "tend": 29, "95933": 29, "9874": 29, "105807": 29, "wrap": [29, 36, 38, 40, 47, 48, 50, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 606, 609, 610, 611, 612, 613, 615, 617, 618, 629, 631, 633, 634, 637, 639, 640, 641, 643, 653, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 706, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 795, 835, 844, 845, 846, 847, 849, 850, 851, 853, 854, 857, 858, 861, 862, 865, 870, 871, 872, 874, 879, 882, 883], "balanc": 29, "breast": 29, "cancer": 29, "return_x_i": 29, "171": [29, 78, 656, 694, 798], "perfectli": [29, 800], "align": [29, 73, 90, 96, 392, 393, 428, 444, 655, 684, 830, 842, 862, 864, 870, 874], "timm": [30, 47, 48], "focu": [30, 43, 841, 860, 884], "mlp": 30, "mixer": 30, "retriev": [30, 32, 36, 553, 575, 600, 653, 843, 862], "mlp_encod": [30, 47], "create_model": [30, 47, 48], "mixer_b16_224": [30, 47], "randn": [30, 32, 47, 395, 514], "tf_mlp_encod": [30, 47], "output_torch": [30, 32], "output_tf": [30, 32], "output_dens": [30, 47], "dens": [30, 43, 47, 48, 333, 386, 814], "unit": [30, 47, 73, 89, 96, 113, 114, 126, 128, 129, 130, 131, 132, 133, 134, 312, 313, 316, 320, 322, 323, 326, 327, 328, 384, 522, 523, 645, 842, 845, 850, 862, 863, 865, 872, 883], "fulli": [30, 32, 34, 35, 38, 43, 47, 48, 61, 73, 96, 404, 547, 814, 835, 846, 850, 857, 860, 868, 870, 872, 882, 884], "ground": [30, 32, 394, 470, 793, 795, 806, 839, 855, 862, 865], "eagertensor": [30, 36, 48, 59, 824, 863], "deepmind": 31, "perceiverio": 31, "backbon": [31, 61, 871], "TO": [31, 33, 44], "efficientnet": 32, "eff_encod": 32, "efficientnet_v2": 32, "efficientnetv2b0": 32, "storag": [32, 61, 62], "googleapi": [32, 61, 62], "efficientnetv2": 32, "b0_notop": 32, "h5": [32, 90], "24274472": 32, "0u": 32, "torch_eff_encod": 32, "modes_to_trac": 32, "1280": [32, 563, 653], "welcom": [34, 62, 835, 837, 842, 843, 864], "varieti": [34, 845, 850, 851, 865, 867], "organ": [34, 846, 849, 858, 862, 864, 866, 874, 876, 877], "exactli": [34, 38, 45, 50, 59, 60, 64, 307, 651, 841, 849, 850, 851, 852, 854, 865, 868], "rush": 34, "jump": [34, 863], "straight": [34, 862, 865], "introduct": [34, 36, 43, 47, 48, 882], "world": [34, 42, 843], "beginn": [34, 837, 882], "got": [34, 59, 854], "cover": [34, 47, 73, 96, 392, 429, 430, 431, 841, 845, 846, 848, 850, 852, 853, 858, 859, 865, 868], "familiar": [36, 841, 842], "concept": 36, "roundup": [36, 877], "indep": [36, 47], "proof": [36, 47], "delv": [36, 48], "theori": [36, 838, 848], "esenti": [36, 47], "abstract": [36, 47, 48, 813, 818, 849, 850, 861, 862, 865, 868, 882], "quirk": [36, 47], "perk": [36, 47, 846, 849], "under": [36, 47, 48, 73, 394, 473, 474, 829, 841, 842, 844, 845, 851, 852, 853, 856, 862, 863, 865, 868, 869, 871, 879, 882], "hood": [36, 47, 48, 844, 851, 852, 856, 862, 865, 868, 869, 871, 879], "appropi": 36, "string": [36, 47, 48, 63, 73, 74, 77, 90, 96, 100, 167, 168, 180, 187, 209, 210, 211, 212, 213, 215, 224, 231, 232, 236, 392, 393, 395, 435, 439, 447, 501, 513, 542, 561, 649, 650, 653, 655, 656, 668, 669, 670, 671, 673, 675, 677, 693, 793, 795, 799, 829, 830, 847, 848, 850, 851, 854, 862, 870], "simplest": [36, 842, 852, 865, 868], "interact": [36, 47, 62, 65, 841, 882], "submodul": [36, 47, 61, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 843, 845, 848, 851, 855, 858, 859, 865, 870, 874], "likewis": [36, 41, 47, 54, 843, 849, 850, 853, 857, 858, 862, 868, 879], "nativearrai": [36, 47, 48, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 86, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 143, 144, 145, 146, 148, 153, 154, 155, 156, 157, 158, 160, 162, 163, 166, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 185, 188, 189, 190, 192, 194, 196, 197, 203, 213, 214, 230, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 339, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 541, 542, 543, 544, 552, 555, 556, 558, 559, 563, 564, 565, 567, 570, 571, 572, 573, 574, 576, 578, 579, 580, 583, 586, 587, 589, 594, 595, 596, 599, 608, 609, 610, 611, 612, 613, 615, 617, 618, 620, 631, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 747, 748, 749, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 819, 846, 849, 852, 854, 857, 858, 859, 861, 862, 866, 867, 870, 874], "alia": [36, 47, 352, 353, 389, 646, 841, 862], "lastli": [36, 47, 846], "subclass": [36, 47, 48, 820, 859, 862, 868], "dict": [36, 47, 48, 61, 65, 68, 74, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 141, 151, 153, 158, 160, 166, 170, 172, 183, 184, 185, 189, 190, 197, 213, 216, 217, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 342, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 386, 395, 415, 416, 417, 418, 436, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 501, 508, 510, 511, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 553, 555, 556, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 590, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 643, 647, 649, 650, 653, 660, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 740, 741, 743, 746, 747, 748, 749, 751, 752, 753, 757, 758, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 795, 796, 811, 814, 816, 824, 830, 846, 849, 874, 879], "recurs": [36, 47, 48, 61, 63, 68, 90, 91, 183, 184, 216, 217, 393, 465, 568, 569, 575, 649, 650, 653, 660, 740, 741, 744, 750, 751, 752, 793, 842, 845, 848, 849, 855, 858, 861], "fashion": [36, 800, 865], "native_arrai": [36, 47, 48, 69, 70, 72, 92, 94, 95, 96, 97, 101, 108, 126, 129, 153, 156, 158, 160, 166, 169, 170, 171, 172, 180, 185, 192, 214, 223, 231, 247, 251, 256, 257, 258, 260, 264, 268, 276, 277, 285, 290, 293, 296, 299, 304, 352, 353, 380, 389, 394, 395, 475, 501, 502, 508, 512, 552, 555, 582, 583, 586, 617, 645, 648, 649, 650, 651, 653, 655, 656, 657, 658, 662, 663, 666, 667, 669, 670, 677, 685, 688, 692, 693, 698, 699, 703, 707, 708, 710, 713, 715, 717, 721, 728, 760, 769, 778, 784, 787, 789, 795, 805, 824, 839, 855, 863, 865], "data_class": [36, 48, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 412, 413, 563, 567, 706, 734], "low": [36, 47, 50, 66, 73, 77, 82, 96, 100, 105, 392, 435, 439, 655, 662, 668, 669, 670, 671, 673, 675, 677, 761, 763, 800, 849, 854, 861, 862, 868, 871, 882, 883], "c": [36, 47, 53, 62, 63, 69, 73, 74, 75, 77, 80, 86, 92, 93, 95, 96, 97, 98, 100, 101, 103, 107, 109, 113, 114, 132, 143, 144, 155, 158, 182, 185, 240, 251, 257, 258, 278, 279, 281, 290, 293, 301, 308, 392, 393, 395, 398, 404, 406, 407, 408, 409, 420, 425, 441, 443, 445, 446, 448, 460, 479, 480, 481, 491, 510, 514, 519, 520, 521, 524, 542, 555, 563, 564, 565, 566, 574, 578, 579, 609, 618, 633, 634, 637, 639, 640, 641, 645, 648, 649, 651, 653, 654, 655, 656, 657, 658, 660, 663, 664, 666, 669, 670, 671, 672, 673, 674, 676, 691, 693, 695, 716, 728, 732, 740, 743, 747, 748, 749, 751, 752, 757, 758, 769, 774, 780, 781, 786, 788, 817, 829, 830, 837, 842, 844, 847, 848, 849, 852, 858, 860, 870, 871, 872, 874, 881, 882], "fundament": [36, 47, 862, 868, 870, 882], "signatur": [36, 47, 395, 404, 501, 540, 850, 851, 852, 853, 857, 861, 865, 866, 868], "matmul": [36, 47, 48, 64, 78, 101, 393, 463, 632, 653, 656, 706, 820, 847, 865, 866, 870, 871], "to_n": [36, 47, 48, 59, 68, 91, 870], "xla_extens": [36, 40, 42, 48, 824, 846, 850, 851, 857, 866, 870], "arrayimpl": [36, 40, 42, 48, 824], "disabl": [36, 47, 73, 96, 395, 510, 816, 834, 848], "array_mod": [36, 47, 596, 620, 653, 867], "set_array_mod": [36, 47, 620, 653, 867], "ultim": [36, 47, 876, 879], "sigmoid": [36, 47, 59, 67, 73, 89, 96, 318, 384, 399, 526, 645, 810, 870], "z": [36, 47, 60, 61, 69, 72, 73, 74, 78, 79, 82, 84, 86, 92, 95, 96, 97, 101, 102, 103, 105, 109, 118, 119, 154, 155, 157, 158, 218, 240, 241, 245, 247, 250, 252, 257, 268, 269, 272, 273, 274, 276, 277, 282, 284, 286, 287, 288, 289, 297, 306, 317, 318, 352, 353, 355, 384, 389, 394, 404, 470, 472, 473, 474, 475, 476, 482, 486, 497, 539, 540, 543, 550, 555, 567, 570, 571, 578, 579, 595, 608, 610, 611, 619, 632, 648, 650, 651, 653, 656, 657, 658, 660, 662, 663, 664, 666, 687, 696, 701, 702, 706, 713, 715, 716, 717, 721, 743, 747, 749, 757, 761, 762, 763, 766, 771, 781, 782, 784, 785, 786, 813, 847, 849, 851, 852, 870, 871, 879], "divid": [36, 38, 40, 41, 47, 48, 64, 72, 73, 74, 80, 90, 95, 96, 103, 118, 119, 264, 398, 471, 519, 520, 521, 524, 610, 651, 653, 658, 730, 846, 849, 852, 856, 865], "exp": [36, 47, 72, 73, 95, 96, 132, 134, 262, 282, 295, 318, 384, 392, 394, 420, 425, 474, 645, 651, 656, 704, 860, 862], "entir": [36, 40, 47, 48, 50, 63, 73, 86, 87, 90, 96, 97, 109, 110, 230, 260, 262, 302, 303, 352, 353, 389, 392, 395, 404, 416, 417, 418, 501, 543, 576, 650, 651, 666, 667, 782, 783, 784, 785, 786, 787, 788, 789, 790, 814, 830, 841, 842, 843, 845, 846, 849, 850, 852, 854, 861, 862, 863, 865, 868, 870, 872, 876, 882, 884], "congratul": [36, 42], "independ": [36, 73, 82, 96, 105, 240, 257, 290, 300, 398, 399, 524, 526, 651, 656, 662, 687, 705, 760, 845, 850, 852, 859, 870], "div": [37, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54], "sub": [37, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 73, 78, 80, 90, 91, 95, 96, 97, 101, 103, 119, 289, 393, 395, 404, 447, 487, 496, 517, 546, 547, 575, 653, 656, 658, 659, 690, 710, 730, 737, 738, 739, 841, 843, 844, 849, 854, 862, 863, 865, 876], "with_numpi": 37, "reproduc": [37, 64, 77, 100, 655, 678, 798, 799, 800, 801, 806, 839, 845, 855, 877], "x_": [37, 49, 114, 301, 651], "66391283": 37, "12516928": 37, "38367081": 37, "03102401": 37, "76419425": 37, "52797794": 37, "90346956": 37, "61316347": 37, "27585283": 37, "66309303": 37, "ivy_repo": [37, 41], "sever": [37, 38, 49, 50, 52, 53, 54, 73, 96, 113, 392, 393, 406, 407, 408, 409, 461, 798, 842, 843, 866], "pro": [37, 38, 39, 49, 50, 51, 52, 53, 54, 876], "unus": [38, 852, 861], "part": [38, 69, 72, 73, 95, 96, 101, 118, 128, 131, 134, 145, 162, 163, 164, 270, 274, 297, 345, 346, 372, 386, 389, 392, 393, 395, 404, 436, 447, 501, 550, 645, 648, 651, 656, 692, 693, 795, 841, 842, 843, 845, 848, 850, 856, 858, 861, 862, 865, 866, 868, 879, 881, 882], "subtract": [38, 40, 41, 47, 48, 72, 95, 118, 119, 151, 395, 501, 648, 651, 846, 849, 852], "58569533": 38, "69083852": 38, "20325196": 38, "5490098": 38, "37264228": 38, "20946217": 38, "60102183": 38, "96937162": 38, "53789282": 38, "62870705": 38, "constitu": [38, 50, 90], "5856953": 38, "6908385": 38, "203252": 38, "3726423": 38, "2094622": 38, "6010218": 38, "9693716": 38, "5378928": 38, "138": [38, 67, 126, 645], "000": [38, 95, 291, 798, 839, 855], "On": [38, 47, 48, 842, 850, 851, 856, 862, 865, 868], "hand": [38, 72, 393, 463, 798, 845, 850, 851, 856, 858, 865, 872], "fun": [38, 117, 383, 391, 632, 653, 660, 751], "fact": [38, 53, 113, 843, 845, 862, 865, 871], "unnecessari": [38, 47, 862], "contribut": [38, 62, 73, 96, 404, 543, 840, 842, 843, 848, 855, 856, 862, 863, 871, 873, 879], "stitch": 38, "plai": [38, 47, 48, 394, 473, 842, 846, 851, 855, 862, 865, 871, 882], "learnt": [39, 51], "ivy_norm": 39, "jax_norm": [39, 47, 48], "wider": [39, 51, 603, 626, 653, 850, 867], "avoid": [39, 51, 53, 73, 80, 96, 257, 262, 264, 280, 290, 394, 395, 398, 471, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 517, 519, 520, 521, 557, 573, 575, 598, 603, 626, 651, 653, 658, 724, 725, 726, 728, 730, 731, 733, 735, 800, 801, 842, 843, 847, 848, 849, 850, 854, 859, 862, 865, 866, 867, 868, 882], "act": [39, 51, 73, 96, 315, 380, 390, 843, 852, 867, 872], "shorthand": [39, 51, 53, 865], "pair": [39, 51, 61, 73, 77, 96, 100, 245, 264, 337, 379, 386, 389, 392, 426, 435, 437, 439, 651, 655, 656, 668, 669, 670, 671, 673, 675, 677, 685, 687, 830], "93968587": [39, 48], "26075466": [39, 48], "22723222": [39, 48], "06276492": [39, 48], "47426987": [39, 48], "72835908": [39, 48], "71737559": [39, 48], "50411096": [39, 48], "65419174": [39, 48], "15576624": [39, 48], "implic": [39, 51, 52, 55, 849], "fw": [40, 42, 43, 77, 100, 404, 540, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 795, 820, 842, 865], "mxnet": [40, 42, 43, 226, 650, 824, 841, 842], "miniconda": [40, 42, 43], "multienv": [40, 42, 43], "doesn": [40, 53, 580, 598, 653, 793, 814, 841, 842, 847, 849, 850, 851, 852, 855, 856, 858, 860, 865, 868, 870, 872, 879], "requiri": 40, "isn": [40, 613, 653, 843, 859, 861, 865, 872], "slowli": [40, 52], "assum": [40, 52, 53, 54, 69, 72, 73, 74, 77, 78, 79, 95, 96, 97, 100, 101, 102, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 330, 346, 352, 353, 355, 358, 376, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 461, 463, 501, 510, 514, 540, 543, 570, 574, 576, 578, 587, 609, 618, 643, 648, 649, 651, 653, 654, 655, 656, 657, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 814, 829, 842, 845, 847, 850, 853, 863, 865, 868, 872], "834162": 40, "965072": 40, "015897": 40, "028543": 40, "107819": 40, "669139": 40, "1729285894": 40, "477775": 40, "848849": 40, "711139": 40, "norm_trac": 40, "quicker": [40, 61], "36293708": 40, "53895184": 40, "07048605": 40, "38424253": 40, "04139636": 40, "16331669": 40, "96587166": 40, "49617496": 40, "88587438": 40, "25938418": 40, "redefin": 40, "norm_tran": [40, 52], "34431235": 40, "51129461": 40, "06686894": 40, "36452447": 40, "98795534": 40, "15493582": 40, "91630631": 40, "41939619": 40, "78909753": 40, "19475674": 40, "henc": [40, 64, 84, 240, 355, 389, 651, 658, 664, 724, 771, 772, 773, 774, 824, 842, 849, 850, 861, 865], "jax_kornia": [40, 42, 47, 48], "invoc": [40, 65], "slow": [40, 52, 838, 842, 848], "bgr_to_grayscal": 40, "2x1x4x5": 40, "_src": [40, 61], "841075": 41, "891816": 41, "926198": 41, "936573": 41, "984346": 41, "118217": 41, "1729287053": 41, "334256": 41, "885678": 41, "337020": 41, "mnt": 41, "273668": 41, "4903533": 41, "17624412": 41, "4014657": 41, "2566849": 41, "55778235": 41, "41806665": 41, "49729362": 41, "84018195": 41, "3782647": 41, "wherea": [41, 54, 96, 392, 438, 843, 846, 849, 850, 851, 852, 857, 858, 865, 884], "equip": [41, 868], "practic": [41, 42, 843, 847, 862, 864], "often": [42, 73, 394, 469, 840, 845, 854, 857, 858, 862, 865, 876, 883], "fortun": [42, 43, 845], "000000000034": [42, 47, 48], "raw_img": [42, 47, 48], "sharp": [42, 47, 48], "prefer": [42, 47, 264, 651, 842, 849, 854, 855, 859, 873, 876, 877, 882], "whole": [43, 73, 96, 395, 398, 509, 522, 523, 525, 843, 848, 856], "full": [43, 73, 78, 96, 100, 101, 113, 114, 116, 182, 269, 277, 340, 341, 342, 343, 344, 386, 393, 394, 395, 466, 467, 473, 474, 503, 506, 597, 606, 621, 629, 648, 649, 651, 653, 655, 656, 670, 672, 673, 674, 676, 699, 703, 705, 706, 799, 806, 835, 842, 843, 848, 850, 853, 854, 857, 858, 862, 865, 868, 870, 872, 882, 884], "complex": [43, 47, 48, 61, 67, 72, 73, 78, 86, 89, 93, 95, 96, 101, 109, 126, 127, 128, 129, 130, 131, 132, 133, 134, 159, 160, 175, 189, 198, 204, 237, 238, 239, 240, 241, 242, 243, 246, 254, 255, 257, 258, 260, 262, 270, 271, 272, 273, 274, 278, 279, 280, 281, 290, 292, 293, 295, 297, 300, 301, 302, 303, 304, 307, 308, 312, 317, 318, 320, 355, 360, 361, 384, 389, 392, 393, 404, 415, 426, 436, 437, 441, 446, 447, 448, 459, 461, 548, 549, 610, 611, 645, 648, 649, 651, 653, 656, 663, 666, 691, 692, 693, 697, 704, 706, 708, 710, 713, 769, 784, 785, 787, 799, 810, 830, 841, 848, 850, 852, 859, 862, 865, 866, 868, 870, 872, 874, 877, 882], "neccessari": 43, "set_random_se": [43, 64], "301436": 43, "_c": 43, "0x7f252c392390": 43, "flatten": [43, 46, 47, 48, 61, 63, 66, 73, 74, 78, 80, 83, 84, 96, 97, 101, 103, 106, 107, 357, 373, 389, 393, 395, 404, 444, 490, 500, 505, 510, 511, 514, 516, 538, 545, 546, 547, 548, 549, 550, 563, 567, 653, 656, 658, 663, 664, 694, 701, 713, 722, 727, 729, 766, 767, 771, 772, 773, 774, 793, 795, 861, 868], "keyword": [43, 47, 48, 63, 65, 68, 69, 73, 90, 96, 119, 156, 291, 392, 395, 404, 440, 501, 540, 554, 557, 590, 619, 648, 651, 653, 656, 660, 666, 707, 746, 787, 793, 795, 799, 815, 816, 829, 841, 846, 849, 850, 851, 859, 861, 862, 863, 865, 866, 868, 879], "input_arrai": [43, 47, 48, 861], "torch_model": [43, 47, 65], "159": [43, 89, 126, 645, 655, 679], "thank": 43, "fledg": [43, 842], "output_arrai": [43, 47, 48, 73, 471], "0893": 43, "1504": 43, "1372": 43, "0991": 43, "0867": 43, "0911": 43, "0804": 43, "0926": 43, "0881": 43, "softmaxbackward0": 43, "furthermor": 43, "relat": [43, 264, 651, 838, 840, 841, 842, 843, 848, 854, 862, 865, 866, 867, 868], "regress": [44, 882], "boiler": 45, "plate": 45, "248738": 45, "406321": 45, "472277": 45, "492596": 45, "630290": 45, "705472": 45, "mathemat": [45, 78, 101, 240, 245, 257, 262, 264, 280, 290, 646, 651, 656, 697, 713, 850, 862, 868, 882], "1729245116": 45, "107734": 45, "357721": 45, "112350": 45, "tensorshap": [45, 46], "torch_x": [45, 835], "tf_x": [45, 835], "torch_out": 45, "tf_out": 45, "example_model": 46, "simplemodel": 46, "tfsimplemodel": 46, "304303": 46, "315374": 46, "329079": 46, "332741": 46, "346229": 46, "007774": 46, "minu": [46, 73, 394, 473, 474], "1729245274": 46, "391513": 46, "365152": 46, "393241": 46, "tf_model": 46, "compiled_model": 46, "checkout": [47, 62, 843, 845, 865], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 47, "theoret": 47, "aspect": [47, 48, 837, 860, 882, 884], "easiest": [47, 835, 836, 838, 842, 873], "defer": [47, 841, 846, 850, 851, 858, 861, 862, 865], "similarli": [47, 60, 156, 164, 240, 345, 352, 353, 386, 389, 648, 651, 847, 850, 862, 868, 877], "essenc": [47, 883], "becom": [47, 73, 96, 113, 363, 389, 395, 481, 658, 721, 824, 843, 849, 850, 852, 854, 861, 872, 879], "slide": [47, 73, 77, 96, 100, 392, 411, 412, 413, 429, 430, 431, 432, 435, 439, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 814], "regressor": 47, "input_dim": [47, 62], "output_dim": [47, 62], "linear0": [47, 59], "linear1": [47, 59], "adam": [47, 59, 63, 75, 98, 554, 633, 634, 639, 653, 654, 818, 882], "n_training_exampl": 47, "2000": [47, 96, 331, 386], "random_norm": [47, 77, 78, 82, 100, 101, 105, 563, 653, 655, 656, 662, 670, 672, 673, 674, 676, 677, 681, 706], "linspac": [47, 69, 92, 142, 648, 857, 868, 870], "execute_with_gradi": [47, 59, 63, 654, 872], "lambda": [47, 64, 66, 96, 139, 141, 314, 324, 562, 575, 635, 636, 638, 644, 647, 653, 654, 656, 660, 692, 747, 748, 752, 841, 858, 859, 860, 863, 868, 871], "5f": 47, "nonetheless": 47, "gc": [47, 48, 575, 653], "decompos": [47, 48, 73, 96, 113, 116, 340, 341, 342, 343, 344, 365, 372, 386, 389, 393, 457, 462, 465, 468, 862], "said": [47, 48, 800, 866, 879], "otherwis": [47, 48, 65, 68, 69, 70, 72, 73, 74, 77, 78, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 113, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 142, 144, 146, 151, 153, 154, 155, 158, 160, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 188, 192, 196, 197, 213, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 326, 327, 328, 330, 340, 341, 342, 343, 344, 351, 352, 353, 354, 355, 357, 358, 359, 367, 368, 374, 376, 378, 379, 380, 384, 386, 389, 392, 393, 395, 398, 411, 412, 413, 416, 417, 418, 436, 449, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 487, 489, 491, 492, 493, 500, 508, 510, 511, 512, 514, 517, 519, 521, 522, 523, 525, 527, 539, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 587, 594, 595, 609, 610, 611, 613, 615, 617, 618, 619, 631, 635, 637, 643, 647, 648, 649, 650, 651, 653, 654, 655, 656, 659, 660, 663, 664, 665, 666, 667, 669, 670, 671, 672, 678, 679, 680, 682, 685, 686, 687, 688, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 706, 710, 712, 713, 715, 716, 717, 721, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 753, 760, 761, 762, 763, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 798, 799, 814, 816, 817, 824, 843, 846, 849, 850, 851, 852, 858, 859, 861, 865, 870, 879], "x0": [47, 48, 66, 97, 555, 653, 852], "normalize_trac": [47, 48], "html": [47, 48, 62, 72, 73, 95, 96, 164, 172, 260, 270, 271, 286, 345, 352, 353, 386, 389, 392, 395, 404, 436, 510, 540, 648, 649, 651, 656, 658, 666, 704, 705, 736, 786, 853], "fname": [47, 48, 64, 66, 816], "anticip": [47, 48], "addition": [47, 48, 849, 861, 862], "normalize_native_comp": [47, 48], "return_backend_compiled_fn": 47, "immedi": [47, 48, 834, 841, 842, 871], "eager_graph": [47, 48, 879], "lazy_graph": [47, 48, 879], "matter": [47, 48, 53, 852], "haven": [47, 48, 53, 882], "jax_out": [47, 48], "ideal": [47, 48, 850, 862, 868], "worth": [47, 48], "chosen": [47, 48, 66, 116, 142, 245, 648, 651, 663, 770, 841, 862], "role": [47, 48, 843, 851, 862, 871, 883], "dl": [47, 48], "effortlessli": [47, 48], "previous": [47, 48, 621, 653, 824, 841, 842, 847, 858, 860, 865, 870], "default_devic": [47, 48, 223, 226, 227, 228, 234, 235, 650, 851, 854, 855], "as_n": [47, 48, 70, 71, 90, 93, 94, 175, 176, 177, 178, 179, 180, 186, 213, 214, 649, 650, 850], "certainli": [47, 48], "extend": [47, 48, 73, 96, 395, 404, 501, 543, 847, 848, 850, 853, 854, 857, 862, 866, 872, 882], "infrastructur": [47, 48], "least": [47, 72, 73, 78, 95, 96, 257, 275, 290, 392, 395, 404, 420, 425, 479, 480, 481, 490, 492, 540, 651, 656, 663, 696, 769, 843, 846, 850, 851, 852, 858, 861, 865], "coco": 47, "ruff": 48, "pyyaml": [48, 61], "huggingface_hub": [48, 61], "safetensor": 48, "setuptool": 48, "pickleshar": 48, "backcal": 48, "therefor": [48, 53, 69, 72, 73, 78, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 196, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 345, 346, 352, 353, 355, 358, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 494, 501, 503, 505, 510, 514, 515, 540, 543, 547, 556, 564, 565, 570, 574, 576, 578, 580, 594, 609, 613, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 841, 843, 845, 846, 849, 850, 851, 852, 853, 854, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 882], "browser": [48, 842, 848], "07": [48, 61, 63, 75, 79, 95, 98, 102, 105, 245, 278, 281, 282, 301, 392, 424, 623, 633, 634, 636, 637, 638, 639, 651, 653, 654, 657, 716, 717, 762, 815, 818], "10000": [48, 61, 63, 69, 92, 155, 648], "cuda_hom": 48, "280": 48, "piec": [48, 843, 846, 858, 859, 871, 879, 881], "contrari": 48, "unless": [48, 69, 73, 78, 92, 96, 158, 290, 351, 368, 373, 389, 648, 651, 656, 699, 847, 851, 861, 872], "wide": [48, 835, 843, 865, 882], "pytorch_classifier_exampl": 48, "fc1": 48, "definit": [48, 66, 72, 78, 95, 101, 309, 651, 656, 686, 835, 839, 843, 846, 850, 855, 858], "enough": [48, 846, 850, 851, 865], "throw": [48, 846, 850, 851, 854, 855, 882], "script": [48, 50, 842, 843, 845, 852, 871, 872, 882], "tensorflowclassifi": 48, "issubclass": [48, 846], "09153255": 48, "09393365": 48, "11840326": 48, "09457473": 48, "08881382": 48, "09985055": 48, "09611838": 48, "09817807": 48, "11475282": 48, "10384216": 48, "xception": 48, "rwightman": 48, "v0": [48, 66], "caden": 48, "43020ad28": 48, "xceptiondef": 48, "_wrapped_call_impl": 48, "pyxcept": 48, "arxiv": [48, 835], "pdf": 48, "1610": 48, "02357": 48, "obj_typ": 48, "restor": [48, 80, 103, 658, 729, 856], "tfxception": 48, "urllib": [48, 61, 66], "resolve_data_config": 48, "transforms_factori": 48, "create_transform": 48, "urlretriev": 48, "rgb": 48, "in_chan": 48, "tf_xception": 48, "22755184e": 48, "42075314e": 48, "58988969e": 48, "32432230e": 48, "88090951e": 48, "22377948e": 48, "71238241e": 48, "70060809e": 48, "80165896e": 48, "98187299e": 48, "20095065e": 48, "86572241e": 48, "70310518e": 48, "68799192e": 48, "89316324e": 48, "88813228e": 48, "06084435e": 48, "46851527e": 48, "17494736e": 48, "61849242e": 48, "58902385e": 48, "57819993e": 48, "38571502e": 48, "15760622e": 48, "91142242e": 48, "53267385e": 48, "93926462e": 48, "18675596e": 48, "93177431e": 48, "37095831e": 48, "51016848e": 48, "05479027e": 48, "94458080e": 48, "87603619e": 48, "79350638e": 48, "54593316e": 48, "88015326e": 48, "59873034e": 48, "36158332e": 48, "21644568e": 48, "93870455e": 48, "21645969e": 48, "14673598e": 48, "37357126e": 48, "37528268e": 48, "26696942e": 48, "23905430e": 48, "04126376e": 48, "54791698e": 48, "59835794e": 48, "91804424e": 48, "60497181e": 48, "20841165e": 48, "67165364e": 48, "68019651e": 48, "71271892e": 48, "50980234e": 48, "32131972e": 48, "63567085e": 48, "57394526e": 48, "51456729e": 48, "63449362e": 48, "22993687e": 48, "12290845e": 48, "13572221e": 48, "36402554e": 48, "13314815e": 48, "66737445e": 48, "52627524e": 48, "72147019e": 48, "50344619e": 48, "28341570e": 48, "53219808e": 48, "33885312e": 48, "53693033e": 48, "32307570e": 48, "55302653e": 48, "57026438e": 48, "81973972e": 48, "06548350e": 48, "78598382e": 48, "81922278e": 48, "35874759e": 48, "74125261e": 48, "02923077e": 48, "91143351e": 48, "96296348e": 48, "15814822e": 48, "42873602e": 48, "35935916e": 48, "99913721e": 48, "79284234e": 48, "53422217e": 48, "84874906e": 48, "52299753e": 48, "51678432e": 48, "54159590e": 48, "74623219e": 48, "32612908e": 48, "13830933e": 48, "92034526e": 48, "75000566e": 48, "26360839e": 48, "34744123e": 48, "34203028e": 48, "21813350e": 48, "15908311e": 48, "98864312e": 48, "90137814e": 48, "57152380e": 48, "61716250e": 48, "54216788e": 48, "47630919e": 48, "93827400e": 48, "57818535e": 48, "11837471e": 48, "37387649e": 48, "90458250e": 48, "72506440e": 48, "77929541e": 48, "82434157e": 48, "79839444e": 48, "03084159e": 48, "94080928e": 48, "09073512e": 48, "41123047e": 48, "24911530e": 48, "16682126e": 48, "66683585e": 48, "43009753e": 48, "54898979e": 48, "05939658e": 48, "74779609e": 48, "12688701e": 48, "09694349e": 48, "51766944e": 48, "33516187e": 48, "47232056e": 48, "40506727e": 48, "09562422e": 48, "55263001e": 48, "10166584e": 48, "37294437e": 48, "91032832e": 48, "03445977e": 48, "46699601e": 48, "57804332e": 48, "75474769e": 48, "93382727e": 48, "22832163e": 48, "25076575e": 48, "61282348e": 48, "43624075e": 48, "27350113e": 48, "35436039e": 48, "22630432e": 48, "01011118e": 48, "96343057e": 48, "02826990e": 48, "53871235e": 48, "34399447e": 48, "82099102e": 48, "10900167e": 48, "75082003e": 48, "01748263e": 48, "28950214e": 48, "19945887e": 48, "91386083e": 48, "08386084e": 48, "17717319e": 48, "17370055e": 48, "84746774e": 48, "10975577e": 48, "00104180e": 48, "15352006e": 48, "49072025e": 48, "96136425e": 48, "99861128e": 48, "40815928e": 48, "52727316e": 48, "38027495e": 48, "93997083e": 48, "29815748e": 48, "31498990e": 48, "12699645e": 48, "76616379e": 48, "22730079e": 48, "43066000e": 48, "45149238e": 48, "57908123e": 48, "55639425e": 48, "93153919e": 48, "51880549e": 48, "00535844e": 48, "07120040e": 48, "07472508e": 48, "63099555e": 48, "15298242e": 48, "55860887e": 48, "94924450e": 48, "28574914e": 48, "42403842e": 48, "72589753e": 48, "32658824e": 48, "90384605e": 48, "92683955e": 48, "68030232e": 48, "69448663e": 48, "59524619e": 48, "83562406e": 48, "60131336e": 48, "98724429e": 48, "97438749e": 48, "36044684e": 48, "82457479e": 48, "71746864e": 48, "22133598e": 48, "74615433e": 48, "62040088e": 48, "83646511e": 48, "65986912e": 48, "12989965e": 48, "04373417e": 48, "15382295e": 48, "03787652e": 48, "10593459e": 48, "13024175e": 48, "69296436e": 48, "40054467e": 48, "33090650e": 48, "61446333e": 48, "08949202e": 48, "34922038e": 48, "18116402e": 48, "08761521e": 48, "89168331e": 48, "58938341e": 48, "32085313e": 48, "05373108e": 48, "23972766e": 48, "02532021e": 48, "46939053e": 48, "91925743e": 48, "73254848e": 48, "47550704e": 48, "24316497e": 48, "34658637e": 48, "82124511e": 48, "85571184e": 48, "00508059e": 48, "95308603e": 48, "00424274e": 48, "45815669e": 48, "60275444e": 48, "47059814e": 48, "26789450e": 48, "57446138e": 48, "12737289e": 48, "62237245e": 48, "55993283e": 48, "33644296e": 48, "11637346e": 48, "55543561e": 48, "43533962e": 48, "26246877e": 48, "95961797e": 48, "00767294e": 48, "95060854e": 48, "21505300e": 48, "38517951e": 48, "75168020e": 48, "37665277e": 48, "06711811e": 48, "28618514e": 48, "59395983e": 48, "07422238e": 48, "31458580e": 48, "61658316e": 48, "26833565e": 48, "73583571e": 48, "31228732e": 48, "65626043e": 48, "14131323e": 48, "94054987e": 48, "19249215e": 48, "57593932e": 48, "27399175e": 48, "34549212e": 48, "21386030e": 48, "05462127e": 48, "51284757e": 48, "64046969e": 48, "76020037e": 48, "10357994e": 48, "45754083e": 48, "17401930e": 48, "30594581e": 48, "12471216e": 48, "53927847e": 48, "63996953e": 48, "85903043e": 48, "02039904e": 48, "09364182e": 48, "50962567e": 48, "23075141e": 48, "61894694e": 48, "79144299e": 48, "00270471e": 48, "35188266e": 48, "20668462e": 48, "42485403e": 48, "81163214e": 48, "24096322e": 48, "09": [48, 61, 67, 72, 98, 105, 134, 295, 305, 633, 645, 651, 654, 762], "18520763e": 48, "18016487e": 48, "27426847e": 48, "51053764e": 48, "86545640e": 48, "99766928e": 48, "11417694e": 48, "56677447e": 48, "34811087e": 48, "65598112e": 48, "71319217e": 48, "28222767e": 48, "68872845e": 48, "58561351e": 48, "54446683e": 48, "18823857e": 48, "01271744e": 48, "36860976e": 48, "45616752e": 48, "86409779e": 48, "44363394e": 48, "24600551e": 48, "07936303e": 48, "82459234e": 48, "52528100e": 48, "38740395e": 48, "16464123e": 48, "01379213e": 48, "45417220e": 48, "01049647e": 48, "66015956e": 48, "19362248e": 48, "53052913e": 48, "34728232e": 48, "53701284e": 48, "66321105e": 48, "95836264e": 48, "88193933e": 48, "60828567e": 48, "67236059e": 48, "70924577e": 48, "37782217e": 48, "20368303e": 48, "94555230e": 48, "87741844e": 48, "40981385e": 48, "71998067e": 48, "09386692e": 48, "20536531e": 48, "15996158e": 48, "90961356e": 48, "19636012e": 48, "76879541e": 48, "32745872e": 48, "08209742e": 48, "67243397e": 48, "13239546e": 48, "10806702e": 48, "88194155e": 48, "86600300e": 48, "34608233e": 48, "66968855e": 48, "54374503e": 48, "80329371e": 48, "86162870e": 48, "11532260e": 48, "92196294e": 48, "83596585e": 48, "02445392e": 48, "55229090e": 48, "56348758e": 48, "12185221e": 48, "79511801e": 48, "79039227e": 48, "06342156e": 48, "38183786e": 48, "95395751e": 48, "79626202e": 48, "56104616e": 48, "60983711e": 48, "05438742e": 48, "02661089e": 48, "24539439e": 48, "20520262e": 48, "84398450e": 48, "71727461e": 48, "54013979e": 48, "72145426e": 48, "00191874e": 48, "99717633e": 48, "11105987e": 48, "53216716e": 48, "34626554e": 48, "15166074e": 48, "71814270e": 48, "16115729e": 48, "42350164e": 48, "14056597e": 48, "11728129e": 48, "70197376e": 48, "66522987e": 48, "52746621e": 48, "54357518e": 48, "62526555e": 48, "45378646e": 48, "48393662e": 48, "22729029e": 48, "13963031e": 48, "50117357e": 48, "98993677e": 48, "27967425e": 48, "33490682e": 48, "20714740e": 48, "68399583e": 48, "56350907e": 48, "35021191e": 48, "76405244e": 48, "90234185e": 48, "68508812e": 48, "07787957e": 48, "68137794e": 48, "74410660e": 48, "63071307e": 48, "61655459e": 48, "49780406e": 48, "53713570e": 48, "12800935e": 48, "66192180e": 48, "52429166e": 48, "54186125e": 48, "08098097e": 48, "81814022e": 48, "74608426e": 48, "49021123e": 48, "90337984e": 48, "22380713e": 48, "27423015e": 48, "38995119e": 48, "60769604e": 48, "70186104e": 48, "06874120e": 48, "28660865e": 48, "88610840e": 48, "86280977e": 48, "50197954e": 48, "98043949e": 48, "05315576e": 48, "70730218e": 48, "87945295e": 48, "81196411e": 48, "54862410e": 48, "51150197e": 48, "52620661e": 48, "24813807e": 48, "34867034e": 48, "98602299e": 48, "35124080e": 48, "60918898e": 48, "87436932e": 48, "01221269e": 48, "51563233e": 48, "44271382e": 48, "73660137e": 48, "41783816e": 48, "81113340e": 48, "64054363e": 48, "17579200e": 48, "57553508e": 48, "76061758e": 48, "83363690e": 48, "88804295e": 48, "06369252e": 48, "44777977e": 48, "00392017e": 48, "00065766e": 48, "51475303e": 48, "04135533e": 48, "22752117e": 48, "39611127e": 48, "60349664e": 48, "22757681e": 48, "02211231e": 48, "29150281e": 48, "77160677e": 48, "14349996e": 48, "19999656e": 48, "99362891e": 48, "10922037e": 48, "75656694e": 48, "23747053e": 48, "74989364e": 48, "06114291e": 48, "13839625e": 48, "47978153e": 48, "97691388e": 48, "50509723e": 48, "50089836e": 48, "59422179e": 48, "83421250e": 48, "44397847e": 48, "73295102e": 48, "83894666e": 48, "67853923e": 48, "16278361e": 48, "93973774e": 48, "50001069e": 48, "43586657e": 48, "76850367e": 48, "11699626e": 48, "94323114e": 48, "59375042e": 48, "44865116e": 48, "95141615e": 48, "64693312e": 48, "93263940e": 48, "14713703e": 48, "21419305e": 48, "74162358e": 48, "80275365e": 48, "67939392e": 48, "78432639e": 48, "99335391e": 48, "23343520e": 48, "53212350e": 48, "75822710e": 48, "28808497e": 48, "49983586e": 48, "09693496e": 48, "64502412e": 48, "03452091e": 48, "15590938e": 48, "99156015e": 48, "45448677e": 48, "83934751e": 48, "57038137e": 48, "30203605e": 48, "58197090e": 48, "01127724e": 48, "21309887e": 48, "87308977e": 48, "83698958e": 48, "22962387e": 48, "52619019e": 48, "15791362e": 48, "71721144e": 48, "52258906e": 48, "84381894e": 48, "27816644e": 48, "23784648e": 48, "11566247e": 48, "52136215e": 48, "17983359e": 48, "23658969e": 48, "04366211e": 48, "83865723e": 48, "08855476e": 48, "32753557e": 48, "38567045e": 48, "96325374e": 48, "79313301e": 48, "63895088e": 48, "46973013e": 48, "05248977e": 48, "56123822e": 48, "37462427e": 48, "45668398e": 48, "55675407e": 48, "84593698e": 48, "15385844e": 48, "50923506e": 48, "95744688e": 48, "20059030e": 48, "28455367e": 48, "77559154e": 48, "22633563e": 48, "47160164e": 48, "85046156e": 48, "82554390e": 48, "47383389e": 48, "45602564e": 48, "03237709e": 48, "94009396e": 48, "30089460e": 48, "27015207e": 48, "53384292e": 48, "53224958e": 48, "57701688e": 48, "69746932e": 48, "45397905e": 48, "74341855e": 48, "59235382e": 48, "92862699e": 48, "32244568e": 48, "03637103e": 48, "96883171e": 48, "45973671e": 48, "72374218e": 48, "84639565e": 48, "53806468e": 48, "03779598e": 48, "75133313e": 48, "79815309e": 48, "67217833e": 48, "90329842e": 48, "34734000e": 48, "10531685e": 48, "16833575e": 48, "12717706e": 48, "66121047e": 48, "74466911e": 48, "38011762e": 48, "85001081e": 48, "14025123e": 48, "46551076e": 48, "23097629e": 48, "41202117e": 48, "29842701e": 48, "45129268e": 48, "30870241e": 48, "90452816e": 48, "23315776e": 48, "92166244e": 48, "91104838e": 48, "13277487e": 48, "88805822e": 48, "66210477e": 48, "47277376e": 48, "79434519e": 48, "23339361e": 48, "25924118e": 48, "34886884e": 48, "50423120e": 48, "05089545e": 48, "77289473e": 48, "64046976e": 48, "17408402e": 48, "16246774e": 48, "34570472e": 48, "23709037e": 48, "22118751e": 48, "20319689e": 48, "30971712e": 48, "75916560e": 48, "28474303e": 48, "16408614e": 48, "52938332e": 48, "40186250e": 48, "29181387e": 48, "22995766e": 48, "88861224e": 48, "63656509e": 48, "21945395e": 48, "21989160e": 48, "32836540e": 48, "93577817e": 48, "96363850e": 48, "08754703e": 48, "87759394e": 48, "32703690e": 48, "56165025e": 48, "46960622e": 48, "58008321e": 48, "78605691e": 48, "59295529e": 48, "56734168e": 48, "23566337e": 48, "22920698e": 48, "05710234e": 48, "55385418e": 48, "20482611e": 48, "76697664e": 48, "46745042e": 48, "37552867e": 48, "63882209e": 48, "19655397e": 48, "12200014e": 48, "28613293e": 48, "02123595e": 48, "34623440e": 48, "17628606e": 48, "93750122e": 48, "39903850e": 48, "94607874e": 48, "38046307e": 48, "66226590e": 48, "86233431e": 48, "64857936e": 48, "16341898e": 48, "89269995e": 48, "80192648e": 48, "63296045e": 48, "28613637e": 48, "64209632e": 48, "15201217e": 48, "09400239e": 48, "50538710e": 48, "64114190e": 48, "67967810e": 48, "01767642e": 48, "95409245e": 48, "24998996e": 48, "48243360e": 48, "09958610e": 48, "06784714e": 48, "05578474e": 48, "05715981e": 48, "20393153e": 48, "15880918e": 48, "10275643e": 48, "72496067e": 48, "78039851e": 48, "54230274e": 48, "30130497e": 48, "51022461e": 48, "00608608e": 48, "56790726e": 48, "44263720e": 48, "06179895e": 48, "24884882e": 48, "66942118e": 48, "92023867e": 48, "25668305e": 48, "02829972e": 48, "12646405e": 48, "05880712e": 48, "23990742e": 48, "53588332e": 48, "28921776e": 48, "21008431e": 48, "16034600e": 48, "08191116e": 48, "11137724e": 48, "55538754e": 48, "28979295e": 48, "61187667e": 48, "27747075e": 48, "86051556e": 48, "53766734e": 48, "04401442e": 48, "77249744e": 48, "39102319e": 48, "33367456e": 48, "02238843e": 48, "03743740e": 48, "40855258e": 48, "45827709e": 48, "05441886e": 48, "80679053e": 48, "24094695e": 48, "21796234e": 48, "21327376e": 48, "05756044e": 48, "13485486e": 48, "73169410e": 48, "87601599e": 48, "46580343e": 48, "68897859e": 48, "45819004e": 48, "91112137e": 48, "17631132e": 48, "44717394e": 48, "76226765e": 48, "38533316e": 48, "08080601e": 48, "21553996e": 48, "61345979e": 48, "05925535e": 48, "29884585e": 48, "17747568e": 48, "11998444e": 48, "47944944e": 48, "59454873e": 48, "05422523e": 48, "81214964e": 48, "56880978e": 48, "90695049e": 48, "40444445e": 48, "58560179e": 48, "87692674e": 48, "53881356e": 48, "28254027e": 48, "03370255e": 48, "94515870e": 48, "19948554e": 48, "54786867e": 48, "29567179e": 48, "29006564e": 48, "47084267e": 48, "15217845e": 48, "96383790e": 48, "67412325e": 48, "80343032e": 48, "78341210e": 48, "68180325e": 48, "92454481e": 48, "62830651e": 48, "67147950e": 48, "99988390e": 48, "32594751e": 48, "85554046e": 48, "29718023e": 48, "25930992e": 48, "77187753e": 48, "45235263e": 48, "39781075e": 48, "38739551e": 48, "95226057e": 48, "06614017e": 48, "71706213e": 48, "81099365e": 48, "69653717e": 48, "33330559e": 48, "41970814e": 48, "09279596e": 48, "43604300e": 48, "96594577e": 48, "85497608e": 48, "99353953e": 48, "63938418e": 48, "53512234e": 48, "84415258e": 48, "12896357e": 48, "05220249e": 48, "21635958e": 48, "03788295e": 48, "82996220e": 48, "99380598e": 48, "32609965e": 48, "64795638e": 48, "62492283e": 48, "61779935e": 48, "00205029e": 48, "10060893e": 48, "71350882e": 48, "60464037e": 48, "19210116e": 48, "50489926e": 48, "67011630e": 48, "64338250e": 48, "02145896e": 48, "02252683e": 48, "35600585e": 48, "63040895e": 48, "48878870e": 48, "40858673e": 48, "56573343e": 48, "28327905e": 48, "78810403e": 48, "00735846e": 48, "91232848e": 48, "25235474e": 48, "77394172e": 48, "77516743e": 48, "62570595e": 48, "83893535e": 48, "25159017e": 48, "88429312e": 48, "14833848e": 48, "06115219e": 48, "82702479e": 48, "51946051e": 48, "81360574e": 48, "48343929e": 48, "70917810e": 48, "92917114e": 48, "52072779e": 48, "07423782e": 48, "47564560e": 48, "44231724e": 48, "54915178e": 48, "29754873e": 48, "05323449e": 48, "63192599e": 48, "28259340e": 48, "04990811e": 48, "13425847e": 48, "21450607e": 48, "25256110e": 48, "49345644e": 48, "49804500e": 48, "93775736e": 48, "65188783e": 48, "11517724e": 48, "20013283e": 48, "75788772e": 48, "45174737e": 48, "59291558e": 48, "03563452e": 48, "62506876e": 48, "12565899e": 48, "93989489e": 48, "57481409e": 48, "10292546e": 48, "42784336e": 48, "56243959e": 48, "57462522e": 48, "86927095e": 48, "74873728e": 48, "06456445e": 48, "42188001e": 48, "19294452e": 48, "18714995e": 48, "09277462e": 48, "73069815e": 48, "54704867e": 48, "35359607e": 48, "10625833e": 48, "71246256e": 48, "63676827e": 48, "81476400e": 48, "52687384e": 48, "33862738e": 48, "92213975e": 48, "45649504e": 48, "37068037e": 48, "10829767e": 48, "18823309e": 48, "12252196e": 48, "24370373e": 48, "36065056e": 48, "92032223e": 48, "26032727e": 48, "59225126e": 48, "21148675e": 48, "33171679e": 48, "01533798e": 48, "18374246e": 48, "38013172e": 48, "63947651e": 48, "11903262e": 48, "37917277e": 48, "38593997e": 48, "97551271e": 48, "14356478e": 48, "25195508e": 48, "40807996e": 48, "82117728e": 48, "25985819e": 48, "83092343e": 48, "19717093e": 48, "00307862e": 48, "47603405e": 48, "25457043e": 48, "36048595e": 48, "08793334e": 48, "50178819e": 48, "29040927e": 48, "67083454e": 48, "65851861e": 48, "26422671e": 48, "42250382e": 48, "40924712e": 48, "49811113e": 48, "97447677e": 48, "11639999e": 48, "92428633e": 48, "49038415e": 48, "31870976e": 48, "21867080e": 48, "77388930e": 48, "78794541e": 48, "29277259e": 48, "90754210e": 48, "13431956e": 48, "85764722e": 48, "80949423e": 48, "00477877e": 48, "61748391e": 48, "03840807e": 48, "12695813e": 48, "75898310e": 48, "36092692e": 48, "56920432e": 48, "16171110e": 48, "20042544e": 48, "03064701e": 48, "96528958e": 48, "58367509e": 48, "12917064e": 48, "37680163e": 48, "01163891e": 48, "82695655e": 48, "67298440e": 48, "22081635e": 48, "16628487e": 48, "34730562e": 48, "41967568e": 48, "tensorflow_block": 48, "skipbn": 48, "rep": [48, 658, 734], "tensorflow_separableconv2d": 48, "kerasdepthwiseconv2d": 48, "pointwis": 48, "tensorflow_selectadaptivepool2d": 48, "pool_typ": [48, 392, 434], "tensorflow_flatten": 48, "xception_model": 48, "customxceptionmodel": 48, "act1": 48, "act2": 48, "block1": 48, "block2": 48, "block3": 48, "global_pool": 48, "globalaveragepooling2d": 48, "custom_xception_model": 48, "299": 48, "plenti": 48, "resourc": [48, 837, 841, 842], "visit": [48, 841, 842, 843], "page": [48, 835, 841, 842, 843, 848, 855, 873], "newli": [49, 50, 62, 64, 70, 93, 169, 557, 649, 653, 843, 861, 865], "randon": [49, 50, 52, 53, 54], "mean_": 49, "std_": 49, "detect": [49, 53, 72, 90, 95, 272, 651, 660, 740, 751, 836, 841, 842, 847, 849, 856, 865], "inspect": [49, 53, 553, 653], "__": [49, 50, 51, 52, 53, 54, 90, 852], "pick": [50, 813], "unif": [50, 52, 837], "comp": 50, "low_level": 50, "chain": [50, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 113, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 185, 189, 190, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 416, 417, 418, 436, 469, 470, 471, 472, 473, 474, 475, 476, 485, 486, 508, 510, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 659, 660, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 737, 738, 742, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 819, 846, 849, 860, 862, 870, 882], "un": [50, 187, 649, 850, 870], "partial_comp": 50, "time_funct": 50, "express": [50, 72, 73, 95, 96, 114, 238, 242, 244, 245, 254, 256, 296, 302, 307, 376, 389, 651, 821, 830, 853, 862, 870, 871, 882, 883], "maxim": [50, 858, 861, 871], "conclud": [51, 866], "altern": [52, 62, 73, 96, 101, 113, 114, 351, 359, 360, 361, 365, 367, 368, 369, 370, 372, 373, 374, 378, 379, 389, 841, 842, 848, 861], "norm": [52, 53, 73, 74, 78, 96, 97, 101, 112, 113, 392, 393, 414, 415, 419, 420, 421, 424, 425, 426, 436, 437, 443, 447, 522, 523, 525, 558, 559, 580, 653, 656, 697, 713, 759, 814, 818, 866], "norm_comp": [52, 53], "global": [52, 53, 63, 74, 90, 97, 119, 175, 176, 177, 178, 179, 228, 229, 230, 600, 601, 604, 610, 611, 623, 624, 627, 649, 650, 653, 806, 817, 824, 842, 846, 847, 850, 851, 854, 858, 862, 870, 882], "b": [53, 67, 72, 73, 74, 77, 78, 86, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 143, 144, 146, 151, 152, 153, 155, 158, 160, 166, 169, 170, 171, 172, 180, 190, 192, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 347, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 379, 380, 384, 386, 389, 392, 393, 394, 395, 399, 402, 404, 411, 412, 413, 414, 416, 417, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 442, 445, 447, 449, 453, 456, 460, 463, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 482, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 500, 501, 508, 510, 511, 512, 513, 514, 517, 518, 523, 525, 527, 528, 530, 531, 533, 540, 541, 542, 543, 545, 547, 550, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 587, 594, 595, 609, 610, 611, 613, 617, 618, 631, 633, 634, 635, 637, 639, 640, 641, 643, 645, 648, 649, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 681, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 743, 746, 747, 748, 749, 751, 752, 757, 758, 759, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 829, 830, 834, 835, 837, 839, 843, 844, 845, 847, 849, 852, 855, 858, 860, 863, 869, 870, 871, 875, 879, 881], "prioriti": [53, 90, 824, 841, 843, 851, 861], "normalize_via_oper": 53, "determin": [53, 72, 73, 78, 80, 84, 87, 90, 95, 96, 97, 101, 108, 110, 113, 116, 118, 119, 149, 172, 174, 181, 187, 188, 189, 190, 192, 193, 194, 209, 219, 221, 222, 233, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 257, 260, 262, 264, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 287, 290, 295, 299, 302, 303, 304, 305, 306, 307, 308, 311, 321, 325, 371, 376, 384, 389, 392, 393, 394, 395, 404, 428, 436, 447, 469, 470, 502, 510, 514, 540, 552, 555, 576, 577, 581, 582, 583, 584, 585, 586, 613, 631, 648, 649, 650, 651, 653, 656, 658, 659, 664, 667, 686, 687, 688, 690, 694, 695, 696, 698, 699, 701, 702, 704, 705, 710, 712, 713, 722, 737, 738, 739, 771, 772, 773, 774, 775, 789, 790, 800, 806, 813, 817, 849, 850, 851, 853, 858, 862, 865, 867, 868], "think": [53, 841, 843, 852, 868, 883], "uniqu": [53, 63, 73, 74, 84, 96, 97, 107, 392, 393, 395, 440, 463, 500, 501, 516, 587, 653, 659, 660, 664, 737, 738, 739, 742, 746, 771, 772, 773, 774, 800, 845, 849, 858, 862, 863, 864, 868, 872, 876], "rule": [53, 70, 72, 73, 78, 93, 95, 96, 101, 169, 172, 195, 196, 197, 246, 257, 290, 292, 299, 301, 309, 311, 392, 395, 404, 436, 489, 540, 649, 651, 656, 658, 686, 687, 694, 698, 701, 705, 722, 800, 829, 845, 846, 849, 850, 852, 856, 857, 858, 860, 865, 868, 883], "broadcast": [53, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 346, 352, 353, 354, 355, 356, 357, 360, 361, 363, 365, 367, 369, 370, 371, 372, 376, 384, 386, 389, 392, 393, 394, 395, 398, 399, 404, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 425, 426, 428, 429, 430, 431, 434, 436, 441, 443, 444, 452, 453, 458, 459, 461, 470, 471, 472, 473, 475, 476, 482, 486, 489, 494, 502, 503, 504, 505, 506, 508, 510, 512, 514, 515, 519, 522, 523, 525, 526, 527, 529, 530, 540, 541, 542, 543, 546, 547, 548, 549, 550, 558, 559, 563, 564, 565, 570, 571, 580, 594, 595, 633, 634, 637, 639, 640, 641, 643, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 707, 708, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 770, 774, 775, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 800, 829, 849, 850, 852, 853, 854, 865, 866, 870], "elementwis": [53, 73, 81, 96, 104, 317, 319, 379, 384, 656, 661, 711, 759, 858, 866, 870], "consum": [53, 795, 849, 857, 863, 865], "thrown": [53, 580, 653, 842, 846, 851, 854, 856, 872], "consider": [53, 841, 852, 857, 868], "standalon": [54, 841, 846, 865, 874, 881, 883], "static": [54, 73, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 122, 123, 146, 336, 392, 413, 426, 431, 440, 462, 468, 508, 520, 613, 648, 655, 682, 701, 811, 816, 862, 867, 872, 876, 882, 883, 884], "flow": [55, 849, 872, 879, 882, 883], "statement": [55, 60, 861, 865, 868, 879], "opposit": 55, "exclud": [55, 86, 96, 109, 142, 164, 345, 386, 541, 542, 648, 662, 763, 779, 798, 801, 824, 852, 871, 879], "todo": [56, 57, 58, 63, 66, 96, 542, 841, 850, 862], "aim": [59, 839, 843, 845, 855, 859, 862, 865, 869, 882, 884], "interfac": [59, 92, 151, 648, 820, 872, 874, 876, 882], "set_framework": [59, 66], "underneath": 59, "sai": [59, 841, 842, 855, 859], "a_min": 59, "a_max": 59, "tensforflow": 59, "clip_value_min": 59, "clip_value_max": 59, "devicearrai": [59, 846, 862, 870], "accept": [59, 68, 69, 72, 73, 78, 91, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 345, 346, 352, 353, 355, 358, 359, 381, 386, 389, 391, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 501, 510, 514, 540, 543, 547, 556, 564, 565, 570, 574, 576, 578, 580, 594, 609, 613, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 841, 842, 843, 846, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 874], "jax_concat": 59, "tf_concat": 59, "np_concat": 59, "torch_concat": 59, "85": [59, 67, 73, 82, 89, 95, 96, 98, 100, 105, 119, 128, 242, 251, 252, 296, 312, 313, 316, 384, 404, 541, 610, 637, 645, 651, 653, 654, 655, 662, 679, 761, 762, 763], "mymodel": 59, "x_in": 59, "reduce_mean": 59, "49040043354034424": 59, "48975786566734314": 59, "4892795979976654": 59, "48886892199516296": 59, "4884953498840332": 59, "4881443977355957": 59, "4878086447715759": 59, "48748287558555603": 59, "48716384172439575": 59, "48684927821159363": 59, "48653748631477356": 59, "48622724413871765": 59, "4859171509742737": 59, "48560672998428345": 59, "48529526591300964": 59, "4849821627140045": 59, "48466697335243225": 59, "4843493402004242": 59, "4840289056301117": 59, "4837053418159485": 59, "4833785891532898": 59, "4830484390258789": 59, "48271444439888": 59, "48237672448158264": 59, "48203518986701965": 59, "48168954253196716": 59, "4813397228717804": 59, "4809857904911041": 59, "48062753677368164": 59, "48026490211486816": 59, "479898065328598": 59, "47952669858932495": 59, "4791509211063385": 59, "4787706732749939": 59, "47838595509529114": 59, "4779967665672302": 59, "47760307788848877": 59, "4772048890590668": 59, "47680220007896423": 59, "47639501094818115": 59, "47598329186439514": 59, "4755673110485077": 59, "4751465618610382": 59, "4747215211391449": 59, "4742920398712158": 59, "47385817766189575": 59, "47341999411582947": 59, "47297725081443787": 59, "4725303053855896": 59, "47207894921302795": 59, "47162333130836487": 59, "47116345167160034": 59, "470699280500412": 59, "47023090720176697": 59, "4697583019733429": 59, "55": [59, 67, 96, 105, 134, 251, 310, 404, 541, 578, 651, 653, 656, 662, 666, 695, 701, 762, 763, 781, 845], "46928152441978455": 59, "46880054473876953": 59, "4683155119419098": 59, "4678264260292053": 59, "46733325719833374": 59, "46683603525161743": 59, "61": [59, 61, 72, 73, 78, 95, 96, 98, 102, 105, 243, 278, 280, 305, 414, 633, 651, 654, 655, 656, 677, 694, 763, 855], "4663347601890564": 59, "4658295214176178": 59, "465320348739624": 59, "4648073613643646": 59, "46429020166397095": 59, "4637692868709564": 59, "46324464678764343": 59, "4627160429954529": 59, "4621836841106415": 59, "4616474211215973": 59, "46110764145851135": 59, "72": [59, 73, 82, 96, 98, 262, 366, 389, 392, 414, 424, 637, 651, 654, 656, 666, 701, 762, 781], "460563987493515": 59, "4600166976451874": 59, "45946577191352844": 59, "45891112089157104": 59, "45835286378860474": 59, "4577910006046295": 59, "45722562074661255": 59, "45665669441223145": 59, "80": [59, 73, 96, 366, 389, 393, 404, 460, 541, 656, 660, 666, 701, 751, 781], "4560841917991638": 59, "81": [59, 63, 72, 78, 93, 95, 101, 105, 185, 255, 280, 281, 305, 404, 541, 649, 651, 656, 660, 662, 666, 694, 698, 711, 748, 763, 781, 865], "4555082619190216": 59, "45492875576019287": 59, "45434585213661194": 59, "45375964045524597": 59, "4531698524951935": 59, "4525766670703888": 59, "45198020339012146": 59, "4513803720474243": 59, "4507772624492645": 59, "4501707851886749": 59, "4495610296726227": 59, "4489481747150421": 59, "44833192229270935": 59, "4477125108242035": 59, "44708991050720215": 59, "44646409153938293": 59, "44583529233932495": 59, "4452032148838043": 59, "44456806778907776": 59, "4439": 59, "selectbackward0": 59, "ivy_compil": 60, "ic": 60, "anyth": [60, 73, 96, 404, 546, 547, 843, 854, 865, 866, 882, 883], "affect": [60, 66, 73, 394, 474, 862], "original_fn": 60, "100000": 60, "co": [60, 61, 72, 74, 95, 255, 260, 262, 303, 567, 651, 653, 840, 850, 871], "sin": [60, 72, 74, 95, 255, 260, 262, 303, 567, 651, 653, 846, 871], "tan": [60, 72, 95, 554, 651, 653, 853, 857, 858, 861, 862, 871], "comp_fn": 60, "compile_graph": [60, 66], "expected_result": 60, "compiled_result": 60, "irrelev": [60, 850, 852], "opeat": 60, "_layer": [60, 871], "net": [60, 65, 66, 871], "compiled_net": 60, "latest": [61, 63, 72, 73, 95, 96, 172, 260, 270, 271, 286, 352, 353, 389, 392, 395, 404, 436, 438, 510, 540, 649, 651, 656, 658, 666, 704, 705, 736, 786, 814, 835, 841, 842, 843, 845, 847, 853, 855, 866, 872, 873], "pypi": [61, 63, 66, 841, 842, 866, 872], "pkg": [61, 63, 66], "public": [61, 63, 66, 560, 653, 860], "revis": [61, 63, 843], "req": [61, 63], "tabqrujw": 61, "quiet": [61, 63], "commit": [61, 63, 839, 841, 845, 852, 864, 865], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 61, "manylinux_2_12_x86_64": [61, 63], "manylinux2010_x86_64": [61, 63], "manylinux2014_x86_64": [61, 62, 63], "495": [61, 63], "nvidia_ml_pi": [61, 63], "pypars": [61, 63, 66], "ivy_cor": [61, 63, 66, 842], "1338326": 61, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 61, "njrc_e6b": 61, "2e": [61, 63], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [61, 63], "4845": [61, 63], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 61, "b6": [61, 63], "0d": [61, 63], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [61, 63], "uninstal": [61, 63, 66], "vnd": [61, 63, 66], "json": [61, 63, 66, 90, 842, 855], "psst": 61, "pickl": [61, 62, 90, 816, 849], "imageio": 61, "tf_cpp_min_log_level": 61, "mkdir": [61, 62, 63, 842], "perceiv": [61, 62], "touch": [61, 836], "io_processor": 61, "position_encod": 61, "jmp": 61, "tabul": 61, "29359": 61, "29k": 61, "67k": 61, "002": 61, "30179": 61, "47k": 61, "8107": 61, "9k": 61, "92k": 61, "itertool": 61, "preprocessor": 61, "vector": [61, 69, 73, 74, 77, 78, 96, 97, 100, 101, 113, 114, 116, 156, 382, 383, 391, 392, 393, 395, 398, 399, 404, 415, 446, 451, 459, 461, 466, 501, 504, 506, 524, 528, 540, 559, 563, 580, 632, 648, 653, 655, 656, 679, 682, 687, 691, 692, 694, 696, 701, 706, 707, 711, 712, 713, 714, 798, 814, 882], "perceiverbackbon": 61, "input_preprocessor": 61, "_input_preprocessor": 61, "_encod": 61, "__call__": [61, 795, 814, 815, 816], "is_train": 61, "po": [61, 830], "input_mask": 61, "network_input_is_1d": 61, "_input_is_1d": 61, "queri": [61, 62, 77, 90, 100, 215, 229, 573, 599, 650, 653, 655, 682, 685, 814, 849, 850, 855, 882], "decod": 61, "cross": [61, 63, 78, 79, 101, 102, 114, 656, 657, 715, 716, 717, 850], "attend": [61, 655, 682], "encoder_queri": 61, "latent": [61, 659, 738, 739], "imagepreprocessor": 61, "deal": [61, 816, 839, 851, 858, 860, 862, 865, 872], "image_s": 61, "fourier_pos_config": 61, "position_encoding_typ": 61, "fourier": [61, 73, 96, 392, 415, 420, 421, 425, 426, 436, 437, 440, 567, 653], "fourier_position_encoding_kwarg": 61, "concat_po": 61, "max_resolut": 61, "num_band": [61, 74, 97, 567, 653], "sine_onli": 61, "prep_typ": 61, "spatial_downsampl": 61, "cross_attend_widening_factor": 61, "cross_attention_shape_for_attn": 61, "kv": 61, "dropout_prob": 61, "num_block": 61, "num_cross_attend_head": 61, "num_self_attend_head": 61, "num_self_attends_per_block": 61, "num_z_channel": 61, "self_attend_widening_factor": 61, "use_query_residu": 61, "z_index_dim": 61, "z_pos_enc_init_scal": 61, "perceiver_backbon": 61, "perceiverencod": 61, "At": [61, 841, 842, 843, 845, 855, 865, 866, 882], "publish": [61, 872], "thankfulli": [61, 865], "perceiver_io": [61, 62], "imagenet_fourier_position_encod": 61, "pystat": 61, "imagenet_checkpoint": 61, "rb": 61, "ckpt": 61, "173": [61, 78, 656, 694], "194": 61, "177": [61, 63], "193776248": 61, "185m": 61, "octet": 61, "184": 61, "80m": 61, "144mb": 61, "mean_rgb": 61, "stddev_rgb": 61, "im": 61, "denorm": 61, "resize_and_center_crop": 61, "crop": [61, 73, 96, 392, 421, 426, 437], "image_height": [61, 63], "image_width": 61, "padded_center_crop_s": 61, "offset_height": 61, "offset_width": 61, "crop_window": 61, "inter_cub": 61, "ye": 61, "dummy_input": 61, "transpili": 61, "torch_perceiver_backbon": 61, "params_v": 61, "perceiverioclassifi": 61, "max_pool": 61, "Of": [61, 846, 861, 862], "cours": [61, 842, 843, 845, 846, 852, 861, 862, 868, 872], "468": 61, "multiprocess": [61, 90, 119, 653, 872], "py39": 61, "132": [61, 96], "pyarrow": 61, "xxhash": 61, "212": [61, 73, 77, 96, 376, 389, 679], "2021": [61, 73, 96, 379, 389, 835], "aiohttp": 61, "async": 61, "timeout": [61, 90, 119, 604, 627, 653, 867], "0a3": 61, "async_timeout": 61, "frozenlist": 61, "manylinux_2_5_x86_64": [61, 66], "manylinux1_x86_64": [61, 66], "158": 61, "attr": [61, 850], "aiosign": 61, "multidict": 61, "114": [61, 392, 414, 424], "yarl": 61, "264": [61, 660, 740], "2022": [61, 62], "pytz": 61, "2020": [61, 845, 882], "dateutil": [61, 66], "wikiart": 61, "paint": [61, 870, 876], "load_dataset": [61, 879], "n_sampl": [61, 73, 96, 393, 395, 442, 450, 505], "huggan": 61, "wiki_art": 61, "gib": 61, "unknown": [61, 798], "huggan___parquet": 61, "36ee951979f9b56c": 61, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 61, "parquet": 61, "curl": [61, 842], "2fwikiart": 61, "xferd": 61, "dload": 61, "upload": [61, 865], "spent": 61, "25936": 61, "278k": 61, "abstract_expression": 61, "action_paint": 61, "analytical_cub": 61, "art_nouveau": 61, "baroqu": 61, "color_field_paint": 61, "contemporary_r": 61, "cubism": 61, "early_renaiss": 61, "expression": 61, "fauvism": 61, "high_renaiss": 61, "impression": 61, "mannerism_late_renaiss": 61, "minim": [61, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 386, 392, 394, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 706, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 830, 853, 861, 863, 868, 870, 879], "naive_art_primitiv": 61, "new_real": 61, "northern_renaiss": 61, "pointil": 61, "pop_art": 61, "post_impression": 61, "realism": 61, "rococo": 61, "romantic": 61, "synthetic_cub": 61, "ukiyo_": 61, "hugginfac": 61, "customdataset": 61, "__len__": [61, 849], "__getitem__": [61, 90, 849], "idx": [61, 62, 63, 553, 653, 851], "random_split": 61, "224x224": 61, "val_siz": 61, "dataset_train": 61, "dataset_v": 61, "dataset_test": 61, "dataloader_train": 61, "dataloader_v": 61, "dataloader_test": 61, "train_featur": 61, "train_label": 61, "running_loss": [61, 63], "last_loss": 61, "training_load": 61, "intra": 61, "report": [61, 841, 865], "zero_grad": 61, "999": [61, 75, 95, 98, 308, 633, 634, 639, 641, 651, 654, 818], "epoch_numb": 61, "best_vloss": 61, "1_000_000": 61, "running_vloss": 61, "vdata": 61, "vinput": 61, "vlabel": 61, "voutput": 61, "vloss": 61, "avg_vloss": 61, "model_path": 61, "model_": 61, "state_dict": [61, 815, 816], "highest": [61, 73, 82, 96, 105, 336, 339, 386, 662, 761, 850], "energi": 61, "mayb": [61, 62, 68, 842, 870], "deploi": [61, 874, 882, 884], "percieverio": 62, "ai": 62, "invit": [62, 841, 862, 868], "g4ar9q7dtn": 62, "step1": 62, "printf": 62, "8packag": 62, "googledr": 62, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 62, "file_id": 62, "drive": [62, 63], "uc": 62, "tee": [62, 842], "file_id_wget_cmd": 62, "perl": 62, "pe": 62, "uuid": 62, "anywai": [62, 846, 859, 862], "bin": [62, 73, 96, 404, 538, 543, 842, 843, 845, 849], "bash": [62, 842, 843, 845], "step2": 62, "interpret": [62, 69, 73, 92, 96, 143, 144, 151, 157, 394, 404, 471, 540, 648, 883], "sudo": [62, 842], "apt": [62, 842], "yf": 62, "step3": 62, "xvzf": 62, "step4": 62, "symlink": 62, "unzip": [62, 63], "fr": 62, "l": [62, 73, 78, 95, 101, 284, 393, 394, 446, 469, 655, 656, 682, 686, 691, 692, 693, 696, 710, 843, 844], "ln": 62, "sf": 62, "la": 62, "step5": 62, "step6": 62, "ipkykernel": 62, "step7": 62, "engbjapanpython3": 62, "ipykernel": 62, "reconnect": 62, "oct": 62, "gcc": 62, "lf": 62, "upgrad": 62, "cuda11": 62, "cudnn805": 62, "helper": [62, 793, 795, 796, 802, 804, 805, 839, 848, 850, 854, 855, 864, 874], "feedforward": 62, "prenorm": 62, "perceiveriospec": 62, "ogbanugot": 62, "xmartlab": 62, "caffeflow": 62, "fetch_class": 62, "class_label": 62, "ground_truth": 62, "127": [62, 70, 73, 78, 93, 96, 185, 376, 389, 649, 656, 694], "path_to_imag": 62, "get_imag": 62, "spine": 62, "set_vis": 62, "bottom": [62, 563, 653, 841, 842, 855], "tick_param": 62, "set_xticklabel": 62, "set_yticklabel": 62, "show_result": 62, "listdir": [62, 63], "endswith": 62, "this_dir": 62, "dirnam": 62, "add_subplot": 62, "xtick": 62, "ytick": 62, "green": [62, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 841, 842, 843], "red": 62, "perceiver_io_img_classif": 62, "normalize_imag": 62, "batch_shap": [62, 77, 82, 92, 100, 105, 149, 158, 648, 655, 656, 662, 681, 685, 714, 760, 814, 868, 870], "img_dim": 62, "queries_dim": 62, "learn_queri": 62, "load_weight": 62, "num_input_ax": 62, "network_depth": 62, "num_lat_att_per_lay": 62, "query_shap": 62, "num_fourier_freq_band": 62, "weight_fpath": 62, "pretrained_weight": 62, "isfil": 62, "noinspect": 62, "pybroadexcept": 62, "from_disk_as_pickl": 62, "action": [62, 834, 840, 852, 856, 865], "placehold": [62, 660, 747, 752, 757, 814, 843, 846, 857, 874], "pyunboundlocalvari": 62, "max_fourier_freq": 62, "random_uniform": [62, 66, 82, 105, 662, 851, 854, 865, 871], "817437": 62, "gpu_bfc_alloc": 62, "orig_valu": 62, "tf_force_gpu_allow_growth": 62, "autograd": [62, 872], "declar": [62, 843, 864], "_3r2_73j": 63, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 63, "1297564": 63, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 63, "le3bu3_v": 63, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 63, "third": [63, 113, 114, 395, 488, 516, 656, 664, 706, 771, 848, 850, 861, 882, 884], "parti": [63, 848, 850, 882, 884], "mount": [63, 838, 843], "mydriv": 63, "chdir": 63, "kaggl": 63, "medium": 63, "articl": [63, 835, 856], "insert": [63, 73, 83, 96, 106, 395, 476, 486, 658, 660, 663, 665, 724, 744, 745, 766, 777, 856], "your_kaggle_usernam": 63, "competit": 63, "digit": 63, "readabl": [63, 846, 849, 854, 856, 857, 865, 866], "chmod": [63, 842], "forc": [63, 848, 851], "archiv": [63, 842], "inflat": [63, 850], "sample_submiss": 63, "later": [63, 90, 557, 653, 841, 856, 861, 865, 866, 882], "my": 63, "label_df": 63, "mod_train": 63, "data_valu": 63, "test_data_valu": 63, "correct_label": 63, "train_path": 63, "makedir": 63, "valid_path": 63, "28x28": 63, "pic": 63, "int8": [63, 70, 82, 92, 93, 105, 151, 178, 183, 185, 186, 190, 648, 649, 761, 798, 799, 850, 865], "new_img": [63, 65], "builder": [63, 838], "batchwis": 63, "goe": [63, 395, 484, 844, 856, 861, 868], "seed_valu": [63, 90, 662, 764], "randomize_dataset": 63, "create_dataset": 63, "num_examples_per_class": 63, "img_arrai": 63, "dir": 63, "img_path": 63, "imread": [63, 65], "imread_grayscal": 63, "generate_batch": 63, "ivyerror": [63, 831, 854], "yield": [63, 83, 337, 338, 386, 395, 501, 663, 770], "x_batch_inst": 63, "form": [63, 65, 68, 69, 73, 78, 90, 92, 101, 112, 113, 114, 143, 144, 145, 157, 162, 163, 329, 332, 346, 355, 386, 389, 393, 395, 446, 457, 488, 497, 501, 518, 553, 614, 616, 648, 653, 655, 656, 660, 686, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 710, 741, 752, 798, 813, 837, 841, 842, 858, 865, 868, 882, 883], "intialis": 63, "num_epoch": 63, "inherit": [63, 820, 846, 849, 854, 872, 874], "inform": [63, 65, 70, 73, 75, 93, 98, 182, 185, 336, 386, 553, 643, 649, 653, 654, 659, 739, 834, 840, 841, 842, 843, 845, 849, 854, 858, 859, 861, 863, 865], "insid": [63, 78, 101, 119, 395, 512, 656, 699, 796, 842, 843, 846, 849, 850, 851, 855, 858, 859, 865, 866, 879], "ivynet": 63, "h_w": 63, "input_channel": [63, 814, 870], "output_channel": [63, 814], "gelu": [63, 64, 67, 89, 645, 810], "image_widht": 63, "start_dim": [63, 73, 96, 395, 491], "end_dim": [63, 73, 96, 395, 491], "gpu_is_avail": [63, 650], "__name__": [63, 64, 66, 619, 653, 854], "heavi": [63, 800, 842, 862, 863, 868, 883], "lift": [63, 863, 883], "num_correct": 63, "y_pred": 63, "epoch_loss": 63, "field": [63, 78, 84, 101, 107, 393, 395, 446, 516, 656, 664, 691, 692, 703, 704, 706, 771, 772, 773], "training_accuraci": 63, "train_loss": 63, "train_correct": 63, "leav": [63, 68, 73, 91, 93, 95, 96, 97, 100, 101, 103, 109, 119, 182, 185, 257, 314, 317, 318, 324, 395, 485, 486, 491, 504, 505, 506, 522, 523, 525, 541, 542, 547, 567, 615, 658, 660, 674, 685, 690, 706, 723, 727, 732, 734, 735, 740, 741, 750, 751, 752, 753, 779, 780, 829, 841, 849, 850, 852, 853, 857, 858, 861, 862, 865], "xbatch": 63, "ybatch": 63, "to_devic": [63, 71, 94, 213, 650, 816], "entropi": [63, 79, 102, 657, 715, 716, 717], "hot": [63, 69, 92, 158, 648, 657, 716], "ybatch_encod": 63, "one_hot": [63, 69, 92, 648, 870], "loss_prob": 63, "ret_grad_idx": [63, 635, 654, 795, 860], "xs_grad_idx": [63, 635, 654, 795, 860], "batch_loss": 63, "set_descript": 63, "set_postfix": 63, "accuracy_percentag": 63, "naverag": 63, "6f": 63, "_train_summari": 63, "writer": 63, "writerow": 63, "157it": 63, "06it": 63, "475401": 63, "11it": 63, "081436": 63, "13it": 63, "0187": 63, "029279": 63, "0324": 63, "008382": 63, "07it": 63, "00456": 63, "003816": 63, "82it": 63, "00277": 63, "002179": 63, "05it": 63, "00175": 63, "001569": 63, "00147": 63, "09it": 63, "00128": 63, "001005": 63, "10it": 63, "00112": 63, "000837": 63, "129": [63, 655, 674, 676], "12it": 63, "000989": 63, "000709": 63, "145": 63, "000873": 63, "000606": 63, "08it": 63, "000774": 63, "000524": 63, "000688": 63, "000455": 63, "000613": 63, "000398": 63, "000547": 63, "000350": 63, "205": 63, "000488": 63, "000308": 63, "218": 63, "000437": 63, "000273": 63, "000391": 63, "000243": 63, "238": [63, 264, 651], "98it": 63, "000351": 63, "000216": 63, "260": 63, "plot_summari": 63, "whitegrid": 63, "ncol": 63, "fontweight": 63, "bold": 63, "set_xlabel": 63, "set_ylabel": 63, "savefig": 63, "summary_plot": 63, "save_weight": [63, 816], "model_param": 63, "ivynet_weight": 63, "hdf5": [63, 90, 816], "deitimageprocessor": 64, "tfdeitforimageclassif": 64, "tfdeitforimageclassificationwithteach": 64, "distillation_classifi": 64, "cls_classifi": 64, "randomli": [64, 392, 416, 417, 418, 655, 678, 798, 799, 800, 801, 806, 814], "image_processor": [64, 879], "distil": [64, 883], "patch16": 64, "outputs_from_original_model": 64, "bertforsequenceclassif": 64, "bertforpretrain": 64, "NOT": [64, 285, 651, 820, 829, 841], "probabl": [64, 73, 77, 79, 82, 96, 100, 102, 105, 392, 394, 399, 404, 416, 417, 418, 471, 526, 540, 543, 547, 655, 657, 662, 678, 682, 685, 715, 760, 800, 813, 814, 865, 873], "ptarmigan": 64, "branch": [64, 245, 257, 260, 262, 290, 302, 303, 304, 307, 651, 842, 843, 845, 856, 879, 882], "moduleconvert": [64, 811, 816], "mc": 64, "from_keras_modul": [64, 811], "compiled_func": 64, "return_graph": [64, 66], "compiled_output": 64, "diverg": [64, 73, 96, 264, 394, 471, 651], "_all_funct": [64, 66], "convert_to_tensor_v2_with_dispatch": 64, "transpose_v2": 64, "convolution_v2": 64, "bias_add": 64, "binary_op_wrapp": 64, "cast": [64, 70, 72, 73, 78, 86, 93, 95, 101, 109, 169, 172, 197, 291, 404, 541, 542, 649, 651, 656, 666, 697, 713, 779, 780, 783, 785, 787, 799, 858, 863, 870], "moments_v2": 64, "batch_norm": [64, 66, 73, 96, 398], "tensordot": [64, 78, 101, 656, 830, 850], "softmax_v2": 64, "_slice_help": 64, "save_to_disk": [64, 66, 816], "12265048989200113": 64, "11038777417100028": 64, "1167045795539998": 64, "ivy_api_kei": 65, "combo": 65, "permit": [65, 846, 857, 862, 865, 868], "usabl": [65, 857, 866], "neither": [65, 240, 257, 264, 290, 651, 656, 708, 862, 868], "nor": [65, 240, 257, 264, 290, 651, 862], "specifc": 65, "externally_link": 65, "logo": 65, "patch": [65, 308, 651, 850, 882], "cv2_imshow": 65, "envrion": 65, "canni": 65, "original_img": 65, "fn_arg": 65, "dilate_edg": 65, "morphologi": 65, "hk_model": 65, "keras_model": 65, "odsc": 65, "talk": 65, "228": 66, "nvidia_ml_py3": 66, "19190": 66, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 66, "b9": 66, "b1": [66, 656, 705], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 66, "cycler": 66, "fonttool": 66, "965": 66, "kiwisolv": 66, "show_graph": [66, 816], "to_ivy_modul": [66, 811], "image_dim": 66, "urlerror": 66, "dev_str": 66, "comp_network": 66, "time_chronolog": 66, "ret0_nc": 66, "ret1_nc": 66, "ret0_c": 66, "ret1_c": 66, "pytorch_vision_v0": 66, "distributed_c10d": 66, "262": 66, "reduce_op": 66, "reduceop": 66, "004645566477999864": 66, "0044566806820000695": 66, "max_pool2d": [66, 73, 96, 392, 412], "__iadd__": 66, "adaptive_avg_pool2d": [66, 73, 96, 392], "_arraywithactiv": [67, 118], "abc": [67, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 122, 566, 653, 660, 758, 813, 818, 829, 830], "_abc_impl": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 122, 123], "_abc": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 122, 123], "_abc_data": [67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 122, 123], "approxim": [67, 72, 73, 78, 89, 95, 96, 101, 113, 116, 126, 238, 239, 242, 243, 244, 245, 254, 255, 260, 262, 264, 278, 279, 280, 281, 295, 302, 303, 307, 308, 309, 366, 376, 389, 394, 473, 474, 645, 651, 656, 699, 702, 810, 853, 862], "complex_mod": [67, 72, 73, 89, 95, 96, 126, 127, 128, 129, 130, 131, 132, 133, 134, 308, 312, 317, 318, 320, 384, 645, 651, 810, 859], "variant": [67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 155, 156, 157, 158, 160, 162, 163, 166, 170, 171, 172, 182, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 633, 634, 637, 639, 640, 641, 643, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 702, 703, 704, 706, 710, 711, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 846, 852, 853, 868], "docstr": [67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 170, 171, 172, 182, 185, 189, 190, 197, 214, 231, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 339, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 389, 392, 395, 404, 411, 412, 413, 414, 416, 417, 418, 420, 424, 425, 426, 429, 430, 431, 435, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 584, 586, 587, 589, 594, 595, 609, 610, 611, 612, 613, 615, 617, 618, 631, 632, 633, 634, 637, 639, 640, 641, 643, 648, 649, 651, 653, 656, 658, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 840, 841, 844, 848, 856, 857, 858, 859, 862, 864, 866], "liter": [67, 72, 73, 78, 89, 95, 96, 101, 126, 127, 128, 129, 130, 131, 132, 133, 134, 308, 312, 317, 318, 320, 384, 392, 393, 395, 398, 414, 424, 428, 436, 451, 457, 462, 465, 468, 501, 524, 645, 651, 656, 665, 697, 713, 777, 810, 868], "magnitud": [67, 72, 73, 89, 95, 96, 126, 127, 128, 129, 130, 131, 132, 133, 134, 237, 240, 257, 264, 290, 308, 312, 317, 318, 320, 384, 645, 651, 656, 706, 707, 810, 850], "handle_complex_input": [67, 72, 73, 89, 95, 96, 126, 127, 128, 129, 130, 131, 132, 133, 134, 308, 312, 317, 318, 320, 384, 645, 651, 810, 859], "element": [67, 69, 72, 73, 74, 77, 78, 80, 82, 83, 84, 86, 89, 90, 92, 93, 95, 96, 97, 100, 101, 103, 105, 106, 107, 109, 114, 118, 119, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 145, 146, 152, 153, 162, 163, 164, 180, 182, 185, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 322, 323, 324, 326, 327, 328, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 359, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 386, 389, 392, 393, 394, 395, 404, 405, 416, 417, 418, 421, 426, 429, 430, 431, 435, 437, 438, 439, 445, 446, 447, 469, 479, 480, 481, 491, 492, 493, 495, 498, 509, 510, 512, 514, 516, 538, 539, 541, 542, 543, 544, 545, 546, 548, 549, 551, 555, 558, 559, 570, 571, 587, 589, 609, 610, 611, 613, 617, 618, 645, 648, 651, 653, 655, 656, 658, 660, 662, 663, 664, 665, 666, 667, 678, 687, 689, 691, 692, 696, 701, 703, 704, 706, 710, 721, 724, 725, 726, 727, 728, 729, 730, 731, 740, 743, 749, 760, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 798, 800, 814, 830, 853, 863, 865, 868, 870], "165": [67, 126, 645, 655, 679], "hardswish": [67, 73, 89, 96, 315, 384, 645, 810], "leaky_relu": [67, 89, 96, 312, 645, 799], "alpha": [67, 72, 73, 89, 95, 96, 123, 128, 240, 306, 312, 313, 321, 325, 331, 384, 386, 393, 398, 399, 447, 524, 527, 528, 529, 645, 651, 810, 857, 862, 863], "slope": [67, 73, 89, 96, 128, 312, 313, 319, 321, 325, 384, 645, 810], "leaki": [67, 89, 128, 645, 810], "log_softmax": [67, 89, 645, 810], "0719": [67, 89, 129], "221": [67, 129], "mish": [67, 89, 645, 810], "30340147": [67, 130, 645], "86509842": [67, 89, 130, 645], "269": [67, 132], "881": [67, 72, 95, 132, 243, 256, 296, 651], "422": [67, 133, 645], "155": [67, 100, 133, 645, 655, 679], "softplu": [67, 89, 645, 810, 868], "beta": [67, 73, 81, 89, 96, 104, 134, 321, 325, 331, 334, 335, 384, 386, 393, 394, 398, 399, 447, 475, 524, 528, 529, 645, 661, 759, 810, 868], "threshold": [67, 72, 73, 89, 95, 96, 134, 288, 289, 328, 354, 384, 389, 394, 395, 470, 475, 509, 645, 651, 810, 868], "union": [67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 384, 386, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 572, 573, 574, 576, 578, 579, 580, 582, 583, 586, 587, 589, 590, 594, 595, 599, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 747, 748, 749, 751, 752, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 798, 813, 818, 819, 846, 849, 850, 851, 852, 854, 857, 858, 861, 866, 868, 870, 879, 880], "3461": [67, 89, 134, 645], "6491": [67, 89, 134, 645], "hopefulli": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876, 877], "_array_to_new_backend": 68, "_data_to_new_backend": 68, "native_x": 68, "native_x_backend": 68, "_to_ivi": 68, "_to_n": 68, "to_ignor": [68, 88, 111, 660, 751, 752], "_to_new_backend": 68, "args_to_ivi": 68, "include_deriv": [68, 91, 660, 741, 752, 795], "nest": [68, 90, 91, 119, 122, 260, 585, 615, 632, 635, 651, 653, 654, 659, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 818, 846, 848, 849, 858, 860, 866, 872, 874, 882], "unchang": [68, 72, 392, 395, 437, 491, 655, 678], "deriv": [68, 69, 73, 75, 91, 92, 96, 98, 148, 153, 160, 166, 330, 334, 359, 386, 389, 633, 634, 637, 638, 639, 640, 641, 648, 654, 659, 660, 739, 741, 752, 816, 818, 819, 850, 851], "word": [68, 142, 395, 494, 648, 662, 763, 811, 814, 849, 861, 862, 874], "args_to_n": [68, 861], "cont_inplac": 68, "decid": [68, 90, 660, 751, 752, 841, 842, 850, 868], "args_to_new_backend": 68, "shallow": [68, 660, 747, 748, 752, 757, 758], "nativevari": 68, "mutabl": [68, 660, 741, 747, 748, 752, 757, 758, 847], "to_ivi": [68, 91, 660, 753, 861], "leaf": [68, 90, 97, 109, 119, 566, 660, 750, 751, 753, 780, 849, 858], "travers": [68, 91, 660, 744, 752, 849, 850, 854, 871], "lowest": [68, 73, 82, 91, 96, 105, 404, 543, 660, 662, 752, 761, 830, 858, 872, 874, 883], "search": [68, 73, 91, 96, 766, 767, 806, 840, 842, 849, 852, 855, 865, 866], "to_new_backend": 68, "_arraywithcr": [69, 118], "boolean": [69, 70, 72, 73, 74, 80, 83, 86, 90, 92, 93, 95, 96, 97, 103, 106, 109, 118, 119, 139, 141, 143, 144, 146, 152, 169, 185, 187, 189, 190, 193, 209, 219, 227, 233, 247, 248, 249, 250, 251, 252, 284, 285, 286, 287, 352, 353, 368, 389, 393, 395, 451, 462, 468, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 510, 517, 552, 555, 566, 573, 576, 577, 581, 582, 583, 584, 585, 586, 587, 596, 599, 602, 603, 605, 606, 631, 642, 647, 648, 649, 650, 651, 653, 654, 655, 658, 659, 660, 663, 666, 682, 724, 725, 726, 728, 730, 731, 733, 735, 737, 738, 750, 768, 769, 770, 782, 784, 798, 799, 800, 801, 806, 817, 849, 850, 858, 862, 865, 868], "never": [69, 73, 80, 92, 96, 103, 144, 395, 479, 480, 481, 487, 489, 491, 492, 493, 496, 500, 508, 517, 573, 653, 658, 724, 725, 726, 728, 730, 731, 733, 735, 843, 850, 861, 862, 865], "nativedtyp": [69, 70, 73, 77, 78, 82, 83, 86, 92, 96, 101, 105, 106, 109, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 165, 166, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 191, 193, 195, 199, 209, 329, 330, 331, 332, 333, 334, 335, 350, 357, 373, 386, 389, 399, 404, 526, 527, 528, 529, 530, 540, 541, 542, 543, 546, 549, 648, 649, 655, 656, 662, 663, 665, 666, 678, 697, 713, 761, 762, 763, 766, 767, 777, 779, 780, 783, 785, 787, 813, 850, 851, 857, 866, 870], "datatyp": [69, 73, 90, 92, 96, 144, 153, 157, 174, 195, 199, 392, 440, 648, 649, 793, 866, 879], "nativedevic": [69, 71, 73, 82, 92, 94, 96, 105, 142, 143, 144, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 164, 165, 166, 211, 212, 213, 214, 215, 218, 223, 224, 225, 226, 228, 229, 230, 231, 232, 236, 329, 330, 345, 386, 399, 526, 527, 529, 530, 648, 650, 662, 760, 761, 762, 763, 813, 818, 819, 850, 851, 854, 857, 866], "39999998": [69, 143, 144, 648, 664, 772], "5999999": [69, 73, 96, 100, 143, 144, 314, 384, 393, 442, 648, 655, 678, 685], "0999999": [69, 86, 143, 144, 314, 324, 327, 370, 384, 389, 648, 783], "10000038": [69, 143, 144, 648], "90786433e": [69, 143, 144, 648], "310": [69, 143, 144, 648], "copy_arrai": [69, 92, 648], "to_ivy_arrai": [69, 92, 146, 648], "empty_lik": [69, 73, 92, 96, 281, 393, 445, 648, 651], "uniniti": [69, 147, 148, 648, 856], "from_dlpack": [69, 92, 648], "full_lik": [69, 92, 648, 866], "fill_valu": [69, 73, 83, 92, 96, 106, 152, 153, 269, 277, 395, 399, 510, 530, 648, 651, 663, 769, 850, 863, 866], "scalar": [69, 72, 73, 74, 78, 89, 92, 95, 96, 97, 101, 113, 128, 153, 158, 240, 261, 306, 312, 355, 356, 358, 363, 366, 368, 370, 375, 389, 392, 393, 394, 395, 440, 447, 469, 479, 480, 481, 490, 495, 618, 631, 648, 651, 653, 656, 713, 850, 860, 862, 882], "fill": [69, 72, 73, 82, 83, 90, 92, 95, 96, 105, 106, 147, 152, 153, 155, 158, 159, 160, 165, 166, 291, 330, 386, 393, 395, 399, 451, 457, 462, 468, 490, 510, 511, 527, 529, 530, 648, 651, 662, 663, 761, 769, 813, 841, 863], "000123": [69, 153, 648], "stop": [69, 73, 75, 92, 96, 98, 142, 154, 155, 230, 393, 462, 468, 596, 634, 637, 639, 640, 641, 643, 648, 650, 653, 654, 659, 660, 737, 738, 739, 751, 818, 834, 857, 860, 868, 870, 872, 882], "num": [69, 92, 154, 155, 648, 798, 843, 857, 870], "endpoint": [69, 92, 154, 155, 648, 813, 857], "logspac": [69, 92, 648, 870], "on_valu": [69, 92, 155, 158, 648], "off_valu": [69, 92, 155, 158, 648], "evenli": [69, 72, 73, 77, 80, 90, 92, 95, 96, 100, 103, 142, 154, 155, 309, 392, 435, 439, 648, 651, 655, 658, 668, 669, 670, 671, 673, 675, 677, 730], "hint": [69, 72, 73, 78, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 346, 352, 353, 355, 358, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 501, 510, 514, 540, 543, 570, 574, 576, 578, 609, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 841, 846, 853, 855, 857, 858, 861, 862, 866], "simplic": [69, 72, 73, 78, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 346, 352, 353, 355, 358, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 501, 510, 514, 540, 543, 570, 574, 576, 578, 609, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 853, 868], "nestabl": [69, 72, 73, 78, 95, 96, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 172, 188, 192, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 330, 345, 346, 352, 353, 355, 358, 386, 389, 392, 393, 395, 404, 411, 412, 413, 414, 416, 417, 418, 424, 429, 430, 431, 436, 438, 447, 501, 510, 514, 540, 543, 547, 556, 564, 565, 570, 574, 576, 578, 580, 594, 609, 613, 618, 643, 648, 649, 651, 653, 654, 655, 656, 658, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 677, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 759, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 841, 844, 852, 853, 861, 865, 874], "464": [69, 72, 105, 155, 244, 245, 651], "15888336": [69, 155], "2154": [69, 155], "43469003": [69, 155], "meshgrid": [69, 92, 648], "spars": [69, 73, 79, 92, 96, 102, 156, 333, 386, 393, 451, 462, 468, 648, 657, 717], "xy": [69, 92, 156, 648], "coordin": [69, 72, 83, 95, 96, 106, 156, 164, 245, 307, 337, 338, 345, 366, 386, 400, 531, 648, 651, 663, 769], "conserv": [69, 156, 648], "cartesian": [69, 156, 648], "matrix": [69, 73, 74, 77, 78, 96, 97, 100, 101, 113, 114, 116, 118, 156, 162, 163, 164, 345, 346, 386, 393, 395, 404, 443, 446, 447, 450, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 499, 540, 552, 558, 648, 653, 655, 656, 679, 686, 688, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 710, 711, 714, 798, 800, 813, 814, 830, 834, 841, 850, 862, 882], "ij": [69, 86, 156, 648, 666, 781, 830], "rank": [69, 73, 78, 80, 87, 96, 101, 103, 110, 113, 114, 115, 116, 117, 122, 156, 340, 341, 342, 343, 344, 386, 393, 395, 404, 451, 452, 462, 465, 468, 501, 510, 514, 550, 648, 656, 658, 663, 667, 687, 689, 697, 699, 703, 705, 710, 712, 713, 723, 724, 732, 735, 736, 769, 789, 790], "ni": [69, 156, 648], "xi": [69, 156, 648], "scatter": [69, 74, 92, 97, 158, 594, 595, 648, 653, 848, 861, 868], "ones_lik": [69, 92, 648, 847, 870], "tril": [69, 92, 648], "whose": [69, 72, 73, 74, 78, 80, 84, 86, 92, 95, 96, 97, 101, 103, 107, 109, 114, 116, 118, 153, 162, 163, 239, 243, 246, 254, 255, 256, 295, 296, 302, 303, 307, 308, 309, 346, 360, 361, 365, 369, 370, 372, 376, 386, 393, 395, 446, 467, 500, 510, 516, 557, 613, 648, 651, 653, 656, 658, 664, 666, 686, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 713, 725, 729, 771, 772, 773, 780, 781, 800, 853, 865], "innermost": [69, 73, 78, 101, 162, 163, 346, 386, 393, 446, 648, 656, 686, 688, 690, 691, 692, 693, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 710], "mxn": [69, 73, 78, 101, 162, 163, 346, 386, 648, 656, 690, 697, 699, 700, 702, 703, 707, 710], "matric": [69, 73, 78, 96, 101, 113, 114, 118, 156, 162, 163, 346, 386, 393, 395, 446, 451, 452, 454, 460, 461, 466, 490, 648, 655, 656, 679, 686, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 710, 711, 800, 839, 855, 882], "diagon": [69, 73, 78, 96, 101, 114, 149, 162, 163, 164, 330, 345, 346, 386, 393, 395, 444, 447, 457, 463, 490, 648, 656, 689, 710], "triangular": [69, 73, 78, 101, 162, 163, 164, 345, 346, 386, 393, 463, 648, 656, 686, 692, 693, 699, 703], "triu": [69, 92, 648], "upper": [69, 73, 78, 82, 96, 101, 105, 149, 163, 164, 330, 346, 386, 393, 404, 463, 543, 648, 656, 662, 686, 692, 693, 703, 763, 850, 861, 865], "zeros_lik": [69, 73, 92, 169, 286, 395, 510, 633, 634, 637, 639, 640, 641, 648, 649, 651, 654, 656, 658, 703, 721, 862, 868], "_arraywithdatatyp": [70, 118], "irrespect": [70, 78, 93, 101, 169, 649, 656, 706, 849, 861], "promot": [70, 72, 73, 78, 93, 95, 96, 101, 108, 118, 119, 169, 172, 195, 196, 197, 203, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 257, 260, 262, 264, 278, 279, 280, 281, 282, 287, 290, 295, 299, 302, 303, 304, 305, 306, 307, 308, 311, 363, 371, 376, 389, 392, 404, 436, 540, 603, 626, 649, 651, 653, 656, 658, 666, 686, 687, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 712, 713, 722, 732, 775, 783, 786, 798, 799, 845, 853, 854, 858, 867, 877], "nan": [70, 72, 73, 74, 84, 86, 93, 95, 96, 97, 169, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 271, 272, 273, 278, 279, 280, 281, 282, 285, 290, 291, 293, 295, 296, 299, 300, 301, 302, 303, 304, 307, 308, 310, 317, 351, 352, 353, 364, 368, 373, 376, 384, 389, 395, 404, 510, 538, 539, 546, 547, 548, 549, 576, 631, 646, 649, 651, 653, 664, 666, 667, 771, 772, 773, 774, 782, 783, 784, 786, 787, 788, 789, 790, 798, 801, 845, 850, 853, 860, 866, 867], "infin": [70, 72, 74, 78, 93, 95, 101, 169, 237, 238, 239, 240, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 271, 272, 278, 279, 280, 281, 282, 285, 290, 291, 293, 295, 299, 300, 302, 303, 304, 307, 308, 310, 352, 353, 376, 389, 576, 646, 649, 651, 653, 656, 666, 667, 704, 713, 782, 784, 789, 790, 845, 853], "desir": [70, 71, 73, 83, 86, 90, 93, 94, 96, 106, 109, 113, 169, 171, 172, 231, 336, 377, 386, 389, 395, 404, 499, 546, 549, 550, 649, 650, 656, 663, 666, 708, 768, 783, 813, 814, 843, 847, 850, 851, 862, 871, 879, 882], "broadcast_arrai": [70, 93, 649], "mix": [70, 72, 93, 95, 96, 97, 102, 105, 118, 119, 170, 183, 184, 197, 216, 217, 247, 250, 251, 252, 257, 258, 264, 268, 276, 277, 287, 290, 293, 299, 394, 404, 475, 547, 566, 568, 569, 570, 571, 580, 615, 618, 649, 650, 651, 653, 655, 656, 657, 658, 661, 666, 669, 671, 674, 676, 677, 679, 685, 686, 708, 715, 717, 721, 759, 781, 783, 786, 799, 801, 841, 844, 850, 851, 852, 861, 868, 871, 874, 882], "broadcast_to": [70, 93, 649, 850], "can_cast": [70, 93, 649, 850, 858, 862], "accord": [70, 73, 74, 80, 86, 93, 103, 109, 172, 182, 240, 251, 257, 264, 290, 301, 336, 386, 392, 395, 437, 501, 570, 573, 594, 595, 649, 651, 653, 656, 658, 666, 712, 723, 736, 786, 788, 793, 800, 821, 829, 841, 842, 845, 850, 856, 858, 862, 865], "finfo": [70, 93, 649, 865], "resolut": [70, 93, 182, 649, 843], "4028235e": [70, 182, 649], "iinfo": [70, 93, 649], "integ": [70, 72, 73, 77, 78, 80, 82, 86, 87, 90, 95, 96, 97, 100, 101, 103, 105, 109, 110, 118, 119, 142, 152, 185, 186, 192, 196, 197, 201, 237, 247, 248, 249, 250, 251, 252, 253, 263, 264, 275, 287, 292, 295, 299, 300, 310, 311, 347, 348, 349, 352, 353, 357, 362, 363, 386, 389, 392, 395, 399, 402, 404, 420, 425, 435, 438, 439, 440, 487, 496, 501, 510, 514, 517, 526, 527, 528, 529, 530, 532, 533, 538, 540, 541, 542, 547, 550, 573, 589, 599, 632, 648, 649, 651, 653, 655, 656, 658, 662, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 687, 689, 698, 712, 713, 730, 760, 761, 762, 763, 764, 765, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 799, 800, 801, 806, 814, 830, 843, 849, 850, 860, 863, 865, 870], "119": [70, 185], "1220": [70, 185], "int16": [70, 73, 82, 86, 93, 105, 172, 176, 178, 183, 185, 192, 207, 404, 541, 542, 649, 666, 761, 779, 780, 785, 787, 798, 799, 850, 862, 865, 870], "32768": [70, 93, 185, 611, 653], "32767": [70, 93, 185], "is_bool_dtyp": [70, 93, 649], "is_float_dtyp": [70, 93, 649, 866], "is_int_dtyp": [70, 93, 649, 863, 866], "is_uint_dtyp": [70, 93, 649, 863, 866], "result_typ": [70, 93, 649, 850], "arrays_and_dtyp": [70, 93, 197, 649], "_arraywithdevic": [71, 118], "move": [71, 73, 94, 96, 164, 227, 231, 235, 345, 386, 395, 500, 648, 650, 816, 843, 851, 866], "addit": [71, 73, 74, 81, 94, 96, 97, 104, 139, 141, 231, 240, 300, 394, 398, 404, 469, 524, 539, 544, 563, 564, 565, 632, 647, 650, 651, 653, 655, 659, 661, 682, 739, 759, 814, 830, 836, 841, 842, 843, 847, 850, 852, 853, 856, 858, 860, 861, 862, 865, 866, 868, 871, 879, 882, 883], "__dlpack__": [71, 94, 150, 231, 648, 650], "caveat": [71, 94, 231, 394, 473, 650], "portabl": [71, 94, 231, 650, 835], "_arraywithelementwis": [72, 118], "ab": [72, 78, 88, 95, 111, 118, 119, 295, 351, 368, 389, 395, 509, 651, 656, 660, 697, 707, 713, 748, 751, 795, 829, 830, 835, 839, 846, 850, 855, 859, 862, 865], "absolut": [72, 73, 78, 88, 90, 95, 96, 101, 118, 237, 301, 351, 368, 371, 377, 389, 393, 394, 447, 464, 470, 472, 651, 656, 697, 698, 699, 704, 793, 795, 798, 800, 801, 837, 842], "aco": [72, 95, 651], "invers": [72, 73, 78, 95, 96, 101, 238, 239, 242, 243, 244, 245, 246, 361, 389, 392, 402, 415, 424, 426, 436, 532, 651, 656, 695, 698, 702, 821, 850], "cosin": [72, 95, 238, 239, 254, 255, 329, 332, 386, 392, 414, 424, 651, 814], "acosh": [72, 95, 183, 184, 649, 651, 839, 855], "area": [72, 73, 95, 96, 100, 239, 243, 246, 392, 395, 428, 435, 439, 502, 651, 861, 868], "hyperbol": [72, 95, 239, 243, 246, 255, 303, 307, 308, 321, 325, 384, 651], "sector": [72, 95, 239, 243, 246, 651], "multipli": [72, 73, 77, 86, 95, 96, 100, 113, 240, 306, 369, 392, 393, 428, 459, 460, 541, 542, 651, 655, 666, 678, 779, 785, 843, 846, 847, 849, 852], "angl": [72, 95, 245, 255, 303, 308, 367, 389, 651], "deg": [72, 95, 241, 651], "radian": [72, 73, 95, 96, 238, 241, 242, 244, 245, 254, 256, 296, 302, 307, 376, 389, 651, 853], "degre": [72, 73, 86, 95, 96, 109, 241, 256, 296, 339, 386, 395, 508, 651, 666, 786, 788, 884], "1j": [72, 95, 96, 241, 242, 254, 255, 260, 262, 274, 297, 302, 303, 307, 355, 610, 651, 653], "2j": [72, 73, 95, 96, 241, 270, 355, 392, 420, 425, 611, 651, 653], "3j": [72, 73, 95, 96, 241, 274, 297, 355, 389, 651], "35619449": [72, 241, 651], "78539816": [72, 241, 651], "135": [72, 241, 558, 651, 653], "asin": [72, 95, 651], "sine": [72, 95, 242, 243, 302, 303, 651], "927": [72, 95, 242], "asinh": [72, 95, 242, 651], "atan": [72, 95, 651], "tangent": [72, 95, 244, 245, 246, 307, 308, 321, 325, 382, 384, 391, 651, 853], "785": [72, 95, 244, 245, 651], "atan2": [72, 95, 651], "quotient": [72, 95, 245, 257, 264, 651], "588": [72, 245, 651], "inf": [72, 73, 74, 78, 95, 96, 97, 101, 245, 262, 271, 272, 273, 274, 278, 279, 281, 291, 317, 361, 371, 384, 389, 393, 404, 443, 543, 576, 631, 646, 651, 653, 655, 656, 683, 697, 713, 798, 801, 839, 850, 855, 860], "719": [72, 245, 651], "atanh": [72, 95, 651], "549": [72, 95, 100, 246, 651, 655, 679], "bitwise_and": [72, 95, 651], "bitwise_invert": [72, 95, 651], "bitiwse_invert": [72, 248], "bitwise_left_shift": [72, 95, 651], "bitwise_or": [72, 95, 651], "bitwise_right_shift": [72, 95, 118, 651], "bitwise_xor": [72, 95, 118, 651], "ceil": [72, 73, 95, 96, 113, 116, 142, 392, 411, 412, 413, 429, 430, 431, 434, 648, 651, 814, 861], "416": [72, 254, 651], "540": [72, 254], "990": [72, 254], "cosh": [72, 95, 254, 651], "deg2rad": [72, 95, 651], "180": [72, 95, 256, 296, 651], "270": [72, 95, 256, 296, 651], "360": [72, 95, 256, 296, 651], "dividend": [72, 95, 257, 264, 299, 311, 651], "divisor": [72, 73, 75, 86, 95, 96, 98, 109, 257, 264, 267, 268, 299, 311, 392, 395, 411, 412, 413, 487, 496, 517, 633, 634, 639, 651, 654, 666, 786, 788, 814, 818], "375": [72, 258, 293], "erf": [72, 95, 360, 389, 651], "exponenti": [72, 73, 95, 96, 259, 260, 262, 282, 295, 312, 322, 384, 393, 458, 651], "gauss": [72, 95, 259, 651], "328": [72, 259, 307, 651], "677": [72, 259], "842": [72, 259, 307, 651], "71828198": [72, 95, 260], "38905573": [72, 95, 260], "08553696": [72, 95, 260, 651], "exp2": [72, 95, 651], "expm1": [72, 95, 651, 850], "918": [72, 262], "147": [72, 262, 651], "floor": [72, 73, 95, 96, 113, 116, 251, 264, 392, 411, 412, 413, 415, 429, 430, 431, 434, 651, 814, 861], "floor_divid": [72, 95, 651, 806, 850], "fmin": [72, 95, 651, 850], "gcd": [72, 95, 651, 850], "greater": [72, 73, 77, 80, 82, 95, 96, 100, 105, 118, 119, 151, 238, 239, 242, 243, 245, 246, 249, 251, 257, 263, 264, 278, 280, 295, 299, 301, 303, 304, 308, 309, 310, 354, 389, 392, 415, 420, 425, 436, 648, 651, 655, 656, 658, 662, 685, 687, 698, 731, 763, 800, 814, 843, 863, 876], "greater_equ": [72, 95, 118, 119, 282, 651], "isfinit": [72, 95, 651, 862], "out_i": [72, 95, 271, 272, 273, 274, 297, 651], "self_i": [72, 95, 271, 272, 273, 274, 297], "finit": [72, 95, 237, 238, 239, 240, 243, 245, 246, 255, 257, 258, 260, 262, 264, 271, 272, 278, 280, 290, 291, 293, 295, 299, 303, 304, 308, 651], "isinf": [72, 95, 651], "detect_posit": [72, 95, 272, 651], "detect_neg": [72, 95, 272, 651], "isnan": [72, 95, 651], "isreal": [72, 95, 651], "5j": [72, 95, 96, 274, 297, 355, 389, 651], "6j": [72, 73, 95, 270, 274, 355, 651], "lcm": [72, 95, 651, 850], "less": [72, 73, 78, 82, 86, 95, 96, 101, 105, 118, 119, 238, 239, 242, 245, 246, 253, 257, 264, 278, 279, 280, 281, 295, 299, 301, 304, 375, 389, 392, 393, 404, 414, 415, 424, 436, 462, 468, 540, 543, 651, 656, 662, 666, 697, 698, 699, 702, 713, 763, 786, 788, 814, 842, 843, 849, 850, 852, 854, 857, 862, 865, 868, 869, 870, 882], "less_equ": [72, 95, 118, 119, 651, 854], "log10": [72, 73, 95, 336, 386, 651], "logarithm": [72, 95, 260, 278, 279, 280, 281, 282, 359, 371, 389, 651, 656, 704], "602": [72, 279, 651], "699": [72, 279, 651], "log1p": [72, 95, 651, 860], "693": [72, 95, 133, 243, 280, 645, 651], "0953": [72, 95, 278, 280, 651], "log2": [72, 95, 283, 651], "logaddexp": [72, 95, 651], "logaddexp2": [72, 95, 651, 839, 855], "169925": [72, 95, 283, 651], "logical_and": [72, 95, 651, 862, 868], "logical_not": [72, 95, 651, 850], "logical_or": [72, 95, 651], "conform": [72, 78, 95, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 159, 160, 161, 162, 163, 165, 166, 172, 182, 185, 197, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 277, 279, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 352, 353, 355, 389, 392, 395, 404, 436, 510, 514, 540, 648, 649, 651, 656, 658, 663, 664, 665, 666, 667, 686, 687, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 722, 724, 725, 726, 728, 729, 731, 732, 736, 766, 767, 769, 770, 771, 772, 773, 774, 775, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 853, 856], "api_specif": [72, 73, 95, 96, 172, 260, 270, 271, 286, 352, 353, 389, 392, 395, 436, 510, 649, 651, 658, 666, 736, 786, 853], "array_api": [72, 95, 172, 260, 270, 271, 286, 392, 395, 436, 510, 649, 651, 656, 658, 666, 704, 705, 736, 786, 853], "logical_xor": [72, 95, 651], "use_wher": [72, 95, 288, 289, 651], "formula": [72, 73, 95, 257, 279, 281, 288, 289, 290, 336, 370, 386, 389, 398, 519, 521, 651, 834], "exce": [72, 73, 96, 289, 395, 512, 651], "product": [72, 73, 77, 78, 86, 95, 96, 100, 101, 109, 113, 114, 116, 290, 382, 383, 391, 393, 395, 404, 442, 445, 449, 452, 453, 454, 459, 460, 461, 514, 541, 542, 549, 651, 655, 656, 666, 682, 685, 687, 694, 696, 701, 708, 712, 779, 780, 781, 785, 786, 830, 841, 870, 876, 877, 882], "nan_to_num": [72, 95, 651], "posinf": [72, 95, 291, 651], "neginf": [72, 95, 291, 651], "5e": [72, 75, 95, 96, 291, 374, 639, 651, 654], "not_equ": [72, 95, 118, 119, 651], "pow": [72, 95, 118, 119, 651, 845], "expon": [72, 73, 74, 96, 97, 295, 363, 365, 369, 389, 398, 524, 611, 651, 653, 656, 698], "rad2deg": [72, 95, 651], "286": [72, 96, 296], "458": [72, 296], "573": [72, 296, 651], "reciproc": [72, 95, 651], "333": [72, 95, 257, 298, 651], "remaind": [72, 73, 80, 90, 95, 96, 103, 266, 651, 658, 730, 845, 861], "modulu": [72, 95, 299, 651, 861], "x2_i": [72, 95, 240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 268, 269, 276, 277, 282, 284, 286, 287, 290, 293, 295, 299, 306, 651, 845], "678": [72, 300, 301], "np_variant": [72, 95, 301, 651], "841": [72, 89, 95, 126, 302, 645, 651], "909": [72, 95, 97, 302, 651], "141": [72, 95, 169, 302, 649, 651], "sinh": [72, 95, 302, 651], "232": [72, 95, 303, 651], "sqrt": [72, 73, 95, 96, 392, 415, 420, 421, 425, 426, 436, 651, 813, 814], "squar": [72, 73, 78, 95, 96, 101, 304, 393, 394, 398, 404, 446, 458, 470, 524, 540, 635, 636, 638, 644, 651, 654, 656, 660, 686, 688, 689, 691, 692, 693, 695, 698, 704, 705, 706, 711, 746], "tanh": [72, 73, 95, 96, 307, 321, 325, 384, 651, 810, 870], "762": [72, 95, 308, 651], "964": [72, 95, 308, 651], "trapz": [72, 95, 651], "dx": [72, 95, 309, 651], "apart": [72, 95, 309, 651], "trapezoid": [72, 95, 309, 651], "trunc": [72, 95, 651], "025": [72, 310, 394, 475, 651, 659, 739], "trunc_divid": [72, 95, 651], "_arraywithactivationsexperiment": [73, 118], "celu": [73, 96, 384], "formul": [73, 89, 96, 114, 126, 312, 314, 384, 810], "elu": [73, 96, 316, 384, 810], "scaler": [73, 96, 313, 384, 798, 801, 865], "hardshrink": [73, 96, 384], "lambd": [73, 96, 314, 324, 384], "hardsilu": [73, 96, 384], "66666667": [73, 135, 315, 404, 540, 645], "hardtanh": [73, 96, 384], "max_val": [73, 96, 316, 384], "min_val": [73, 96, 316, 384], "region": [73, 96, 316, 324, 384, 842], "19722438": [73, 96, 317, 384], "38629448": [73, 96, 317, 384], "38629436": [73, 96, 317, 384], "logsigmoid": [73, 96, 384, 810], "31326175": [73, 89, 318, 384], "126928": [73, 96, 318], "01814993": [73, 318], "00004578": [73, 318], "57888985": [73, 318], "31326169": [73, 96, 318, 384], "69314718": [73, 78, 89, 96, 101, 318, 371, 384, 389, 656, 704], "01104775": [73, 318], "prelu": [73, 96, 384, 810], "unidirect": [73, 319, 384, 655, 680], "relu6": [73, 96, 384, 810], "rectifi": [73, 89, 96, 128, 130, 131, 320, 323, 328, 384, 645], "scaled_tanh": [73, 96, 325, 384], "7159": [73, 96, 321, 325, 384], "amplitud": [73, 96, 321, 325, 384], "65537548": [73, 96, 321], "49570239": [73, 96, 321], "77637792": [73, 321], "selu": [73, 96, 384, 810], "11133075": [73, 322, 384], "05070102": [73, 96, 322, 384], "10140204": [73, 322, 384], "15210295": [73, 322, 384], "20280409": [73, 322, 384], "25350523": [73, 322, 384], "30420589": [73, 322, 384], "35490704": [73, 322, 384], "silu": [73, 96, 384, 810], "26894143": [73, 323], "73105854": [73, 96, 323], "softshrink": [73, 96, 384], "bound": [73, 96, 324, 336, 384, 386, 395, 484, 510, 511, 798, 850, 854, 862, 865, 870], "tanhshrink": [73, 96, 384], "23840582": [73, 96, 326, 384], "condit": [73, 83, 96, 106, 139, 327, 342, 343, 386, 393, 443, 647, 660, 663, 750, 751, 770, 800, 845, 850, 852, 854, 858, 859, 861, 865, 879], "met": [73, 96, 327, 854], "hreshold": [73, 327], "thresholded_relu": [73, 96, 384], "_arraywithconversionsexperiment": [73, 118], "_arraywithcreationexperiment": [73, 118], "blackman_window": [73, 96, 386], "period": [73, 96, 303, 307, 329, 331, 332, 334, 335, 386, 392, 427, 651, 843], "window": [73, 77, 96, 100, 329, 331, 332, 334, 335, 350, 386, 392, 398, 411, 412, 413, 415, 429, 430, 431, 432, 434, 435, 439, 440, 524, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 814, 838, 843, 848, 855], "symmetr": [73, 78, 96, 101, 113, 114, 329, 331, 332, 334, 335, 386, 393, 395, 446, 501, 656, 686, 691, 692, 693, 714, 849], "38777878e": [73, 96, 329, 386], "40000000e": [73, 329, 386], "00000000e": [73, 78, 96, 97, 329, 360, 361, 386, 392, 414, 420, 424, 425, 656, 703, 839, 855], "30000000e": [73, 96, 329, 386], "eye_lik": [73, 96, 386], "elsewher": [73, 96, 149, 330, 386, 648, 663, 770, 842], "mel_weight_matrix": [73, 96, 386], "num_mel_bin": [73, 96, 336, 386], "dft_length": [73, 96, 336, 386, 392, 415], "sample_r": [73, 96, 336, 386], "lower_edge_hertz": [73, 96, 336, 386], "upper_edge_hertz": [73, 96, 336, 386], "3000": [73, 96, 336, 386], "melweightmatrix": [73, 96, 336, 386], "linearli": [73, 74, 97, 336, 386, 567, 653, 656, 705], "frequenc": [73, 74, 96, 97, 336, 386, 404, 540, 567, 653, 843], "spectra": [73, 336, 386], "dft": [73, 96, 336, 386, 392], "stft": [73, 96, 336, 386, 392], "mel": [73, 96, 336, 386], "hertz": [73, 336, 386], "2595": [73, 336, 386], "700": [73, 97, 336, 386, 571], "band": [73, 74, 96, 97, 336, 386, 567, 653], "spectrum": [73, 96, 336, 386], "n_fft": [73, 96, 336, 386, 392, 415], "8000": [73, 96, 331, 336, 386], "75694758": [73, 336, 386], "trilu": [73, 96, 386], "retain": [73, 164, 345, 346, 386, 635, 648, 654, 860, 864, 874], "unsorted_segment_mean": [73, 96, 386], "segment_id": [73, 96, 347, 348, 349, 386, 821], "num_seg": [73, 96, 347, 348, 349, 386, 821], "segment": [73, 96, 347, 348, 349, 386, 848, 852], "th": [73, 96, 114, 347, 348, 349, 358, 386, 389, 393, 394, 404, 444, 451, 469, 550], "unsorted_segment_min": [73, 96, 386], "unsorted_segment_sum": [73, 96, 386], "polyv": [73, 96, 386], "coeff": [73, 96, 339, 386], "polynomi": [73, 96, 339, 386], "coeffici": [73, 96, 331, 339, 386, 393, 463, 656, 705, 818], "indetermin": [73, 96, 339, 386], "simplifi": [73, 96, 339, 386, 829, 830, 854, 862, 870, 879, 882, 884], "substitut": [73, 96, 339, 386], "_arraywithdata_typeexperiment": [73, 118], "_arraywithdeviceexperiment": [73, 118], "_arraywithelementwiseexperiment": [73, 118], "equal_nan": [73, 96, 351, 368, 389], "1e10": [73, 351, 368, 389], "00001e10": [73, 351, 368, 389], "00001e": [73, 351, 389], "amax": [73, 96, 389], "keepdim": [73, 78, 80, 83, 86, 87, 90, 96, 101, 103, 106, 109, 110, 352, 353, 357, 373, 380, 389, 390, 395, 404, 507, 545, 546, 547, 548, 549, 550, 656, 658, 663, 666, 667, 697, 713, 735, 766, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 854, 862, 870], "singleton": [73, 78, 83, 86, 87, 96, 101, 106, 109, 110, 352, 353, 389, 656, 658, 663, 666, 667, 713, 724, 731, 767, 782, 783, 784, 785, 786, 787, 788, 789, 790, 870], "amin": [73, 96, 389], "binar": [73, 96, 389], "conj": [73, 96, 255, 260, 262, 303, 304, 308, 389, 651], "conjug": [73, 78, 96, 101, 355, 389, 392, 393, 399, 415, 441, 447, 459, 461, 463, 528, 656, 696, 700, 708], "copysign": [73, 96, 389], "unsign": [73, 86, 96, 356, 389, 395, 404, 510, 541, 542, 666, 779, 780, 785, 787, 799, 850, 870], "count_nonzero": [73, 96, 389], "diff": [73, 90, 96, 389, 852, 861], "prepend": [73, 96, 358, 389, 656, 658, 696, 724, 842], "differenc": [73, 96, 358, 389], "prior": [73, 96, 358, 389, 399, 528, 656, 708, 854, 866], "expand": [73, 74, 80, 96, 97, 358, 389, 395, 514, 567, 653, 658, 724, 849, 864], "discret": [73, 96, 358, 389, 392, 414, 415, 420, 421, 424, 425, 426, 436, 437, 657, 716, 814], "digamma": [73, 96, 389], "7549271": [73, 359, 389], "92278427": [73, 96, 359, 389], "9988394": [73, 359, 389], "erfc": [73, 96, 389], "complementari": [73, 96, 350, 360, 386, 389], "84270084e": [73, 360, 361], "80259693e": [73, 360, 361], "erfinv": [73, 96, 389], "float_pow": [73, 96, 389], "fmax": [73, 96, 389], "fmod": [73, 96, 651], "divis": [73, 74, 75, 96, 97, 98, 251, 257, 264, 266, 299, 301, 311, 395, 487, 601, 610, 624, 633, 634, 639, 651, 653, 654, 655, 668, 675, 676, 818, 858, 867, 876], "frexp": [73, 96, 389], "edge_ord": [73, 96, 366, 389], "boundari": [73, 82, 96, 105, 116, 342, 343, 366, 386, 389, 392, 428, 662, 763, 882], "33333333": [73, 96, 298, 366, 389, 469, 651], "hypot": [73, 96, 389], "hypotenus": [73, 367, 389], "4031": [73, 367, 389], "8102": [73, 367, 389], "isclos": [73, 96, 389, 845], "ldexp": [73, 96, 389], "lerp": [73, 96, 389], "lgamma": [73, 96, 389], "45373654": [73, 371, 389], "6477685": [73, 371, 389], "modf": [73, 96, 389], "fraction": [73, 96, 372, 389, 404, 550, 655, 678], "nansum": [73, 96, 389], "accumul": [73, 96, 373, 389, 395, 507], "nextaft": [73, 96, 389], "0e": [73, 75, 96, 98, 374, 389, 639, 654], "4013e": [73, 96, 374, 389], "4028e": [73, 96, 374, 389], "signbit": [73, 96, 389], "0909": [73, 96, 376, 389], "sparsify_tensor": [73, 96, 389], "sparsifi": [73, 96, 377, 389], "arang": [73, 78, 86, 96, 101, 154, 377, 389, 392, 393, 411, 412, 413, 420, 425, 429, 430, 431, 434, 443, 460, 493, 590, 632, 648, 653, 656, 659, 666, 697, 713, 738, 739, 781, 850, 861], "xlogi": [73, 96, 389], "0986": [73, 96, 378, 389], "3863": [73, 96, 378, 389], "zeta": [73, 96, 389], "0369": [73, 96, 379, 389], "_arraywithgeneralexperiment": [73, 118], "init_valu": [73, 96, 100, 380, 390, 392, 435], "_arraywithgradientsexperiment": [73, 118], "_arraywithimageexperiment": [73, 118], "_arraywithlayersexperiment": [73, 118], "adaptive_avg_pool1d": [73, 96, 392], "1d": [73, 96, 113, 114, 392, 393, 395, 404, 406, 414, 416, 418, 424, 459, 479, 484, 507, 511, 540, 798, 814], "plane": [73, 96, 257, 260, 262, 290, 302, 303, 304, 307, 392, 395, 406, 407, 408, 409, 508, 651], "l_in": [73, 96, 392, 406], "spatial": [73, 77, 96, 100, 392, 398, 406, 407, 408, 409, 428, 435, 439, 519, 520, 521, 524, 655, 668, 669, 670, 671, 673, 675, 677, 817], "Will": [73, 96, 392, 406, 407, 408, 409, 824, 872], "l_out": [73, 96, 392, 406], "nhwc": [73, 77, 96, 100, 392, 398, 407, 412, 417, 430, 434, 524, 655, 668, 671, 672, 675, 676, 677, 814], "3d": [73, 78, 96, 392, 407, 409, 416, 417, 481, 656, 694, 814, 868], "4d": [73, 96, 392, 393, 398, 407, 417, 418, 467, 524, 657, 718], "s_0": [73, 96, 392, 407, 408], "s_1": [73, 96, 392, 407, 408], "adaptive_max_pool2d": [73, 96, 392], "h_in": [73, 96, 392, 408, 409], "w_in": [73, 96, 392, 408, 409], "adaptive_max_pool3d": [73, 96, 392], "avg_pool1d": [73, 96, 392], "nwc": [73, 77, 96, 100, 392, 411, 416, 429, 432, 655, 668, 669, 670, 675, 676, 814], "count_include_pad": [73, 96, 392, 411, 412, 413, 814], "d_in": [73, 77, 96, 100, 392, 409, 411, 412, 413, 415, 420, 421, 425, 429, 430, 431, 432, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677], "ncw": [73, 77, 96, 100, 392, 411, 416, 417, 429, 432, 655, 668, 669, 670, 675, 676, 814], "avg_pool2d": [73, 96, 392], "divisor_overrid": [73, 96, 392, 411, 412, 413, 814], "avg_pool3d": [73, 96, 392], "ndhwc": [73, 77, 96, 100, 392, 413, 418, 431, 655, 668, 673, 674, 675, 676, 814], "volum": [73, 77, 96, 100, 392, 413, 415, 420, 421, 425, 431, 655, 673, 674], "ncdhw": [73, 77, 96, 100, 392, 413, 418, 431, 655, 668, 673, 674, 675, 676, 814], "dct": [73, 96, 392, 814], "larger": [73, 80, 86, 96, 103, 109, 182, 392, 414, 421, 424, 426, 437, 649, 658, 666, 721, 729, 786, 788, 814, 865, 868], "ortho": [73, 96, 392, 414, 415, 420, 421, 424, 425, 426, 436, 437, 814], "onesid": [73, 96, 392, 415], "fft": [73, 96, 392, 415, 421, 436, 437, 440, 814, 841, 882], "symmetri": [73, 392, 415], "rfft": [73, 96, 392, 415, 437], "invok": [73, 392, 415, 856, 879], "batch_idx": [73, 392, 415], "signal_dim1": [73, 392, 415], "signal_dim2": [73, 392, 415], "signal_dimn": [73, 392, 415], "signal_dim": [73, 392, 415], "embed": [73, 96, 392, 394, 469, 655, 682, 800, 814, 882], "max_norm": [73, 74, 96, 97, 392, 419, 558, 559, 653, 814], "ifft": [73, 96, 392, 420, 426, 814], "pi": [73, 96, 303, 307, 392, 394, 420, 425, 474, 646, 651], "44509285e": [73, 96, 392, 420], "14423775e": [73, 96, 392, 420], "17j": [73, 96, 392, 420, 425], "11483250e": [73, 96, 392, 420], "16j": [73, 96, 392, 420, 425], "33486982e": [73, 96, 392, 420], "22464680e": [73, 96, 392, 420], "95799250e": [73, 96, 392, 420], "66951701e": [73, 96, 392, 420], "fft2": [73, 392], "20477401j": [73, 392, 421], "0614962j": [73, 392, 421], "idct": [73, 96, 392, 814], "49862671": [73, 96, 392, 414, 424], "37691498": [73, 96, 392, 414, 424], "00390816": [73, 96, 392, 414, 424], "58938599": [73, 96, 392, 414, 424], "92713165": [73, 96, 392, 414, 424], "078475": [73, 96, 392, 414, 424], "19664812": [73, 96, 392, 414, 424], "95411837": [73, 96, 392, 414, 424], "30636606e": [73, 96, 392, 425], "43029718e": [73, 96, 392, 425], "18j": [73, 96, 392, 420, 425], "53080850e": [73, 96, 392, 425], "58689626e": [73, 96, 392, 425], "24474906e": [73, 96, 392, 425], "91858728e": [73, 96, 392, 425], "01435406e": [73, 96, 392, 425], "ifftn": [73, 96, 392], "24730653": [73, 96, 392, 426], "90832391j": [73, 96, 392, 426], "49495562": [73, 96, 392, 426], "9039565j": [73, 96, 392, 426], "98193269": [73, 96, 392, 426], "49560517j": [73, 96, 392, 426], "93280757": [73, 96, 392, 426], "48075343j": [73, 96, 392, 426], "28526384": [73, 96, 392, 426], "3351205j": [73, 96, 392, 426], "2343787": [73, 96, 392, 426], "83528011j": [73, 96, 392, 426], "18791352": [73, 96, 392, 426], "30690572j": [73, 96, 392, 426], "82115787": [73, 96, 392, 426], "96195183j": [73, 96, 392, 426], "44719226": [73, 96, 392, 426], "72654048j": [73, 96, 392, 426], "51476765": [73, 392, 426], "66160417j": [73, 392, 426], "04319742": [73, 392, 426], "05411636j": [73, 392, 426], "015561": [73, 392, 426], "04216015j": [73, 392, 426], "06310689": [73, 392, 426], "05347854j": [73, 392, 426], "13392983": [73, 392, 426], "16052352j": [73, 392, 426], "08371392": [73, 392, 426], "17252843j": [73, 392, 426], "0031429": [73, 392, 426], "05421245j": [73, 392, 426], "10446617": [73, 392, 426], "17747098j": [73, 392, 426], "05344324": [73, 392, 426], "07972424j": [73, 392, 426], "8344667": [73, 96, 392, 426], "98222595j": [73, 96, 392, 426], "48472244": [73, 96, 392, 426], "30233797j": [73, 96, 392, 426], "recompute_scale_factor": [73, 96, 392, 428, 868], "height": [73, 74, 77, 96, 97, 100, 392, 428, 563, 653, 655, 657, 671, 672, 673, 674, 677, 718], "width": [73, 74, 77, 96, 97, 100, 392, 393, 395, 398, 404, 428, 447, 501, 524, 543, 563, 653, 655, 657, 669, 670, 671, 672, 673, 674, 677, 682, 718], "trilinear": [73, 96, 392, 428, 868], "nearest_exact": [73, 96, 392, 428, 868], "tf_area": [73, 96, 392, 428, 868], "mitchellcub": [73, 96, 392, 428, 868], "lanczos3": [73, 96, 392, 428, 868], "lanczos5": [73, 96, 392, 428, 868], "gaussian": [73, 96, 126, 392, 428, 645, 868], "overwrit": [73, 90, 96, 230, 392, 428, 650, 843, 861, 862, 870], "thu": [73, 96, 251, 264, 299, 307, 308, 392, 393, 428, 446, 651, 656, 691, 692, 841, 854, 859, 862, 866, 884], "antialias": [73, 96, 428], "max_pool1d": [73, 96, 392], "dilaton": [73, 96, 429, 430, 431], "max_pool3d": [73, 96, 392], "max_unpool1d": [73, 96, 392], "unpool": [73, 96, 392, 432], "reduce_window": [73, 100, 392], "window_dimens": [73, 100, 392, 435], "window_strid": [73, 100, 392, 435], "base_dil": [73, 100, 392, 435], "window_dil": [73, 100, 392, 435], "trim": [73, 90, 96, 392, 395, 436, 513], "orthonorm": [73, 78, 96, 101, 392, 436, 656, 703, 706], "8660254j": [73, 96, 392, 436], "rfftn": [73, 96, 392], "sliding_window": [73, 96, 392], "window_s": [73, 96, 392, 439], "frame_length": [73, 96, 392, 440], "frame_step": [73, 96, 392, 440], "fft_length": [73, 96, 392, 440], "window_fn": [73, 96, 392, 440], "pad_end": [73, 96, 392, 440], "smallest": [73, 90, 96, 182, 185, 253, 392, 395, 440, 512, 649, 651, 656, 697, 798, 800, 801], "enclos": [73, 96, 392, 440, 883], "window_length": [73, 96, 329, 331, 334, 335, 350, 386, 392, 440], "li": [73, 96, 392, 393, 404, 440, 447, 550], "past": [73, 96, 392, 440, 843, 845, 863, 865, 882], "fft_unique_bin": [73, 96, 392, 440], "complex64": [73, 93, 96, 175, 189, 198, 204, 270, 297, 392, 436, 440, 649, 651, 656, 704, 706, 707, 799, 850, 855], "complex128": [73, 96, 97, 175, 176, 189, 198, 204, 392, 440, 589, 649, 653, 656, 692, 693, 697, 713, 798, 799, 839, 850, 855], "compon": [73, 96, 145, 159, 160, 238, 239, 240, 243, 246, 255, 257, 258, 260, 262, 290, 292, 293, 300, 303, 304, 307, 308, 340, 344, 355, 386, 389, 392, 393, 398, 440, 451, 462, 524, 648, 651, 663, 769, 864, 870, 877, 883], "linear_algebra": [73, 78, 96, 101, 393, 656, 866], "_arraywithlinearalgebraexperiment": [73, 118], "adjoint": [73, 78, 96, 101, 393, 463, 656, 695, 705, 706, 798], "batched_out": [73, 96, 393], "j1": [73, 96, 393, 442], "jn": [73, 96, 393, 442], "k1": [73, 96, 393, 442], "km": [73, 96, 393, 442], "outer": [73, 78, 96, 101, 113, 393, 442, 656, 659, 737, 738, 739, 830, 841], "30000001": [73, 96, 393, 442, 563, 653, 664, 772], "40000001": [73, 77, 89, 96, 118, 119, 128, 131, 313, 384, 393, 442, 645, 655, 664, 685, 772], "60000002": [73, 96, 109, 119, 393, 398, 442, 523, 525, 559, 653, 783], "80000001": [73, 96, 393, 398, 442, 523, 525], "60000001": [73, 96, 393, 442], "90000004": [73, 96, 393, 442, 666, 783], "20000002": [73, 96, 393, 442, 559, 653], "20000005": [73, 75, 96, 313, 321, 324, 325, 384, 393, 442, 633], "00000012": [73, 96, 393, 442], "49999994": [73, 96, 393, 442], "00000006": [73, 96, 393, 442], "60000014": [73, 96, 393, 442], "19999993": [73, 96, 393, 442], "80000007": [73, 96, 393, 442, 559, 653], "20000017": [73, 96, 393, 442], "89999992": [73, 96, 393, 442], "60000008": [73, 96, 393, 442], "80000019": [73, 96, 370, 389, 393, 442], "4000001": [73, 96, 100, 393, 442, 655, 678, 685], "cond": [73, 96, 139, 393, 647], "933034373659268": [73, 443], "diagflat": [73, 96, 393, 453, 458], "offset": [73, 78, 81, 92, 96, 101, 104, 151, 393, 398, 444, 519, 520, 521, 648, 656, 661, 690, 710, 759, 805], "padding_valu": [73, 96, 393, 395, 444, 502], "right_left": [73, 96, 393, 444], "num_row": [73, 96, 393, 444], "num_col": [73, 96, 393, 444], "dot": [73, 77, 96, 100, 113, 393, 394, 460, 469, 655, 656, 682, 685, 712, 830, 842], "eig": [73, 78, 96, 393, 656, 692, 693], "37228132": [73, 96, 393, 446, 448, 691], "82456484": [73, 446, 691], "41597356": [73, 446, 691], "56576746": [73, 446, 691], "90937671": [73, 446, 691], "eigh_tridiagon": [73, 96, 393], "eigvals_onli": [73, 96, 393, 447], "select_rang": [73, 96, 393, 447], "tol": [73, 96, 117, 393, 447, 462, 468], "eigenvalu": [73, 78, 96, 101, 113, 114, 393, 446, 447, 448, 656, 691, 692, 693, 699], "eigenvector": [73, 96, 393, 446, 447, 656, 691, 692], "interv": [73, 82, 87, 96, 105, 110, 142, 154, 155, 162, 393, 404, 447, 543, 648, 656, 658, 662, 667, 687, 712, 721, 724, 732, 761, 763, 789, 790], "converg": [73, 96, 393, 447], "_2": [73, 96, 393, 447], "eig_val": [73, 96, 393, 447], "decreas": [73, 96, 393, 447, 800], "eig_vector": [73, 96, 393, 447], "38196": [73, 447], "61803": [73, 447], "eigval": [73, 96, 393], "general_inner_product": [73, 101, 393], "n_mode": [73, 101, 393, 449], "tradit": [73, 101, 393, 449], "inner": [73, 78, 92, 101, 122, 158, 393, 446, 449, 648, 656, 659, 691, 692, 696, 737, 738, 739, 830, 841, 861], "higher_order_mo": [73, 96, 393], "n_featur": [73, 96, 393, 450], "d1": [73, 96, 393, 450], "dn": [73, 96, 393, 450], "initialize_tuck": [73, 96, 393], "svd": [73, 78, 96, 101, 116, 393, 451, 457, 462, 464, 465, 466, 468, 656, 707], "truncated_svd": [73, 96, 393, 451, 462, 465, 468], "non_neg": [73, 96, 344, 386, 393, 451], "mask": [73, 77, 96, 100, 113, 392, 393, 395, 438, 451, 452, 462, 468, 509, 573, 653, 655, 678, 682, 685, 868], "svd_mask_repeat": [73, 96, 393, 451, 462, 468], "tuckertensor": [73, 96, 117, 344, 386, 393, 451, 462, 468], "scheme": [73, 96, 393, 451, 462, 845, 882], "tucker": [73, 96, 344, 386, 393, 451, 462], "decomposit": [73, 78, 96, 101, 113, 114, 116, 340, 341, 342, 343, 344, 386, 393, 451, 455, 462, 465, 467, 468, 656, 686, 692, 703, 706, 841], "everywher": [73, 96, 393, 451, 462, 468], "kron": [73, 96, 393, 458], "make_svd_non_neg": [73, 96, 393, 466], "nntype": [73, 96, 393, 457], "nndsvd": [73, 96, 393, 457], "singular": [73, 78, 96, 101, 393, 451, 457, 464, 466, 656, 697, 699, 702, 706, 707, 798, 800, 850], "nndsvda": [73, 96, 393, 457], "boutsidi": [73, 96, 393, 457], "gallopoulo": [73, 96, 393, 457], "recognit": [73, 96, 393, 457], "1350": [73, 96, 393, 457], "1362": [73, 96, 393, 457], "2008": [73, 96, 393, 457, 882], "matrix_exp": [73, 96, 393], "7183": [73, 96, 393, 458], "3891": [73, 96, 393, 458], "mode_dot": [73, 96, 112, 113, 117, 393], "matrix_or_vector": [73, 96, 113, 117, 393, 459], "i_1": [73, 96, 113, 114, 393, 459], "i_k": [73, 96, 113, 393, 459], "i_n": [73, 96, 113, 393, 459], "i_": [73, 96, 113, 393, 404, 459, 543], "multi_dot": [73, 96, 393], "148": [73, 95, 96, 260, 393, 460], "multi_mode_dot": [73, 96, 393], "mat_or_vec_list": [73, 96, 393, 461], "times_0": [73, 393, 461], "vec": [73, 393, 461], "times_1": [73, 393, 461], "cdot": [73, 290, 393, 461, 651], "times_n": [73, 393, 461], "partial_tuck": [73, 96, 393], "n_iter_max": [73, 96, 393, 462, 468], "verbos": [73, 96, 393, 462, 465, 468, 834, 865], "return_error": [73, 96, 393, 462, 468], "variat": [73, 96, 393, 462, 468, 852, 862, 865], "reconstruct": [73, 78, 84, 96, 107, 116, 393, 395, 462, 468, 516, 656, 664, 706, 771, 773, 863], "return_erro": [73, 393, 462, 468], "svd_flip": [73, 96, 393], "u_based_decis": [73, 96, 393, 464], "basi": [73, 96, 393, 464, 843, 845], "flip": [73, 80, 96, 103, 113, 248, 393, 395, 464, 492, 493, 651, 658, 861, 870], "decis": [73, 96, 393, 464, 845, 850, 868, 870, 882], "u_adjust": [73, 96, 393, 464], "v_adjust": [73, 96, 393, 464], "tensor_train": [73, 96, 393], "tt": [73, 96, 343, 386, 393, 465, 467], "kth": [73, 393, 465], "tttensor": [73, 116, 343, 386, 393, 465], "compute_uv": [73, 78, 96, 101, 393, 466, 656, 706], "n_eigenvec": [73, 96, 393, 466], "returnedv": [73, 466], "vh": [73, 78, 96, 101, 393, 466, 656, 706], "eigen": [73, 96, 393, 466], "namedtupl": [73, 78, 84, 96, 101, 107, 393, 395, 446, 466, 516, 656, 664, 691, 692, 703, 704, 706, 771, 772, 773], "tt_matrix_to_tensor": [73, 96, 393], "rank_k": [73, 96, 393, 467], "left_dim_k": [73, 96, 393, 467], "right_dim_k": [73, 96, 393, 467], "rank_": [73, 96, 393, 467], "49671414": [73, 96, 393, 467, 662, 762], "1382643": [73, 96, 393, 467, 662, 762], "64768857": [73, 96, 393, 467, 662, 762], "5230298": [73, 96, 393, 467, 662, 762], "23415337": [73, 96, 393, 467, 662, 762], "23413695": [73, 96, 393, 467, 662, 762], "57921278": [73, 96, 393, 467], "76743472": [73, 96, 393, 467], "1163073": [73, 96, 393, 467], "11629914": [73, 96, 393, 467], "03237505": [73, 96, 393, 467], "03237278": [73, 96, 393, 467], "78441733": [73, 96, 393, 467], "38119566": [73, 96, 393, 467], "21834874": [73, 96, 393, 467], "10610882": [73, 96, 393, 467], "15165846": [73, 96, 393, 467], "15164782": [73, 96, 393, 467], "35662258": [73, 96, 393, 467], "35659757": [73, 96, 393, 467], "02283812": [73, 96, 393, 467], "49705869": [73, 96, 393, 467], "40518808": [73, 96, 393, 467], "16882598": [73, 96, 393, 467], "fixed_factor": [73, 96, 393, 468], "tl": [73, 96, 393, 468], "kolda": [73, 96, 393, 468], "bader": [73, 96, 393, 468], "siam": [73, 96, 393, 465, 468], "vol": [73, 96, 393, 468], "pp": [73, 96, 393, 468], "455": [73, 96, 393, 468], "2009": [73, 96, 393, 468], "_arraywithlossesexperiment": [73, 118], "hinge_embedding_loss": [73, 96, 394], "margin": [73, 96, 394, 469, 476, 862], "measur": [73, 394, 469, 655, 657, 682, 718, 814], "semi": [73, 394, 469], "l_n": [73, 394, 469], "x_n": [73, 394, 469], "y_n": [73, 394, 469], "ell": [73, 394, 469], "operatornam": [73, 301, 303, 394, 469, 651, 656, 692], "l_1": [73, 394, 469], "hyperparamet": [73, 96, 394, 469], "aggreg": [73, 96, 394, 469, 664, 771], "unreduc": [73, 96, 394, 469], "hing": [73, 96, 394, 469, 476], "target_tensor": [73, 394, 469, 474], "huber_loss": [73, 96, 394], "transit": [73, 96, 394, 470, 882], "huber": [73, 96, 394, 470], "kl_div": [73, 96, 394], "log_target": [73, 96, 394, 471], "contai": [73, 471], "batchmean": [73, 394, 471], "kullback": [73, 96, 394, 471], "leibler": [73, 96, 394, 471], "0916": [73, 471], "l1_loss": [73, 96, 394, 473], "l1": [73, 78, 96, 101, 394, 398, 470, 472, 473, 475, 522, 656, 713, 849], "targetict": [73, 96, 394, 472, 473, 475, 476], "20000000000000004": [73, 472], "log_poisson_loss": [73, 96, 394], "compute_full_loss": [73, 96, 394, 473, 815], "favor": [73, 96, 394, 473], "likelihood": [73, 96, 394, 473, 474], "28402555": [73, 394, 473], "03402555": [73, 394, 473], "1573164": [73, 394, 473], "poisson_nll_loss": [73, 96, 394], "log_input": [73, 96, 394, 474], "poisson": [73, 96, 394, 399, 473, 474], "assumpt": [73, 394, 473, 474], "omiss": [73, 394, 474], "stirl": [73, 96, 394, 473, 474], "1977562": [73, 474], "smooth_l1_loss": [73, 96, 394], "smooth": [73, 79, 96, 102, 394, 470, 475, 657, 715, 716, 717, 860], "8125": [73, 475], "soft_margin_loss": [73, 96, 394], "soft": [73, 96, 324, 394, 395, 476, 509, 851], "35667497": [73, 476], "22314353": [73, 476], "60943791": [73, 476], "_arraywithmanipulationexperiment": [73, 118], "as_strid": [73, 96, 395], "nativeshap": [73, 77, 80, 82, 96, 103, 105, 143, 144, 147, 152, 159, 165, 395, 399, 477, 489, 494, 503, 506, 526, 527, 528, 529, 530, 595, 608, 614, 616, 648, 653, 655, 658, 662, 668, 670, 672, 674, 676, 728, 761, 762, 763, 857, 859], "byte": [73, 74, 92, 96, 97, 118, 151, 395, 477, 589, 648, 653], "associative_scan": [73, 96, 395], "revers": [73, 74, 78, 86, 96, 101, 109, 118, 119, 383, 391, 392, 393, 395, 404, 438, 454, 478, 492, 493, 541, 542, 562, 653, 656, 658, 666, 711, 725, 779, 780, 841, 849, 850, 852, 853, 861, 862, 868, 870, 872], "scan": [73, 96, 395, 478, 872], "atleast_1d": [73, 96, 395], "ari": [73, 96, 395, 479, 480, 481, 487, 496, 517], "a1": [73, 97, 395, 479, 480, 481, 485, 555], "a2": [73, 97, 395, 479, 480, 481, 485, 555], "atleast_2d": [73, 96, 395], "atleast_3d": [73, 96, 395], "column_stack": [73, 96, 395], "concat_from_sequ": [73, 96, 395], "input_sequ": [73, 96, 395, 486], "new_axi": [73, 96, 395, 486, 870], "dsplit": [73, 96, 395], "indices_or_sect": [73, 96, 395, 487, 496, 517], "3rd": [73, 96, 395, 487], "dstack": [73, 96, 395], "fill_diagon": [73, 96, 395], "fill_diag": [73, 490], "fortran": [73, 80, 96, 103, 395, 491, 658, 728, 882], "layout": [73, 80, 96, 103, 395, 491, 658, 728, 847, 861, 862, 868], "fliplr": [73, 96, 395, 861], "diag": [73, 78, 96, 101, 114, 395, 492, 493, 656, 692, 871], "flipud": [73, 96, 395, 861], "fold": [73, 96, 395, 503, 504], "unfold": [73, 96, 113, 114, 116, 393, 395, 451, 494, 503, 505], "folded_tensor": [73, 395, 494], "heavisid": [73, 96, 395], "5000": [73, 395, 495, 656, 695, 830], "hsplit": [73, 96, 395], "horizont": [73, 96, 395, 485, 496, 563, 653], "hstack": [73, 96, 395, 485], "i0": [73, 96, 395, 404, 543], "bessel": [73, 86, 96, 109, 334, 386, 395, 498, 666, 786, 788], "kind": [73, 86, 96, 182, 185, 186, 404, 498, 541, 542, 547, 649, 666, 779, 780, 785, 787, 798, 799, 840, 862, 865, 868, 870, 872], "26606588": [73, 96, 395, 498], "2795853": [73, 96, 395, 498], "88079259": [73, 96, 395, 498], "row_mod": [73, 96, 395, 499], "column_mod": [73, 96, 395, 499], "ascend": [73, 85, 96, 108, 395, 402, 499, 533, 665, 775, 777], "prod": [73, 74, 86, 97, 109, 393, 395, 452, 454, 499, 549, 564, 653, 666, 798, 830, 850, 852, 870], "moveaxi": [73, 96, 395], "destin": [73, 96, 395, 500], "unstack": [73, 80, 90, 103, 500, 658, 849, 870], "reorder": [73, 80, 96, 103, 395, 500, 563, 653, 658, 725, 864], "stat_length": [73, 96, 395, 501], "constant_valu": [73, 96, 395, 501], "end_valu": [73, 96, 395, 501], "reflect_typ": [73, 96, 395, 501], "partial_fold": [73, 96, 395], "skip_begin": [73, 96, 395, 503, 504, 505, 506], "untouch": [73, 96, 395, 503, 504, 505, 506], "partial_tensor_to_vec": [73, 96, 395], "skip_end": [73, 96, 395, 504, 505], "vectoris": [73, 96, 113, 395, 504, 506], "partial_unfold": [73, 96, 395], "ravel_tensor": [73, 96, 395, 505], "n_1": [73, 96, 395, 505], "n_2": [73, 96, 395, 505], "n_i": [73, 96, 393, 395, 452, 505], "partial_vec_to_tensor": [73, 96, 395], "put_along_axi": [73, 96, 395], "rot90": [73, 96, 395, 861], "rotat": [73, 96, 395, 508], "soft_threshold": [73, 96, 395], "behav": [73, 96, 352, 353, 389, 393, 395, 446, 510, 656, 691, 845, 854, 859, 861, 862, 863, 883], "slice": [73, 86, 90, 96, 97, 109, 114, 164, 345, 386, 395, 484, 507, 510, 511, 570, 571, 573, 599, 648, 653, 660, 666, 749, 784, 865, 882], "inexact": [73, 96, 363, 389, 395, 510], "largest": [73, 90, 96, 182, 185, 393, 395, 464, 510, 512, 649, 656, 697, 706], "take_along_axi": [73, 96, 395], "arr": [73, 74, 93, 96, 190, 395, 484, 507, 511, 595, 649, 850, 851], "top_k": [73, 96, 395], "sort": [73, 84, 90, 96, 107, 119, 216, 309, 393, 395, 404, 446, 512, 533, 547, 650, 651, 656, 664, 691, 692, 706, 707, 771, 775, 776, 777, 800, 840, 864, 866], "trim_zero": [73, 96, 395], "fb": [73, 96, 395, 513], "front": [73, 96, 395, 513, 862, 870, 882], "unflatten": [73, 96, 395], "unfolded_tensor": [73, 395, 515], "unique_consecut": [73, 96, 395], "vsplit": [73, 96, 395], "vertic": [73, 96, 395, 517, 518, 563, 653, 843], "_arraywithnormsexperiment": [73, 118], "varianc": [73, 86, 96, 109, 398, 519, 521, 666, 788, 813, 817], "nsc": [73, 96, 398, 519, 520, 521, 817], "braodcast": [73, 96, 398, 519], "running_mean": [73, 96, 398, 519, 521, 817], "running_var": [73, 96, 398, 519, 521, 817], "nc": [73, 96, 398, 519, 520, 521, 817], "group_norm": [73, 96, 398], "num_group": [73, 96, 398, 520], "instance_norm": [73, 96, 398], "l1_normal": [73, 96, 398], "33333334": [73, 96, 315, 384, 398, 522, 525, 559, 635, 653, 654, 655, 656, 677, 713], "33333337": [73, 154, 398, 522, 635, 648, 654], "28571439": [73, 398, 522], "l2_normal": [73, 96, 398, 525], "l2": [73, 78, 101, 112, 113, 398, 523, 525, 656, 713, 814, 849], "44721359": [73, 96, 398, 523, 525], "89442718": [73, 96, 398, 523, 525, 559, 653], "lp_normal": [73, 96, 398], "lp": [73, 398, 525], "_arraywithrandomexperiment": [73, 118], "bernoulli": [73, 96, 392, 399, 416, 417, 418], "event": [73, 96, 399, 526, 865], "parameter": [73, 82, 96, 105, 399, 526, 527, 529, 530, 662, 760, 762, 763], "odd": [73, 96, 295, 395, 399, 501, 526, 651, 830, 840, 845], "drawn": [73, 82, 96, 105, 399, 526, 527, 528, 529, 530, 662, 760, 761, 762, 763, 798, 799, 800, 813, 865], "dirichlet": [73, 96, 399], "10598304": [73, 399, 528], "21537054": [73, 399, 528], "67864642": [73, 399, 528], "48006698": [73, 399, 528], "07472073": [73, 399, 528], "44521229": [73, 399, 528], "55479872": [73, 399, 528], "05426367": [73, 399, 528], "39093761": [73, 399, 528], "19531053": [73, 399, 528], "51675832": [73, 399, 528], "28793114": [73, 399, 528], "12315625": [73, 399, 528], "29823365": [73, 399, 528], "5786101": [73, 399, 528], "15564976": [73, 399, 528], "50542368": [73, 399, 528], "33892656": [73, 399, 528], "1325352": [73, 399, 528], "44439589": [73, 399, 528], "42306891": [73, 399, 528], "gamma": [73, 81, 96, 104, 359, 371, 389, 399, 404, 544, 661, 759], "lam": [73, 96, 399, 530], "_arraywithsearchingexperiment": [73, 118], "unravel_index": [73, 96, 400], "unravel": [73, 96, 400, 531], "_arraywithsetexperiment": [73, 118], "_arraywithsortingexperiment": [73, 118], "lexsort": [73, 96, 402], "indirectli": [73, 96, 402, 533], "statist": [73, 96, 111, 395, 501, 817, 834, 841, 850, 865, 866, 882], "_arraywithstatisticalexperiment": [73, 118], "bincount": [73, 96, 404], "minlength": [73, 96, 404, 538], "corrcoef": [73, 96, 404], "rowvar": [73, 96, 404, 539, 540], "relationship": [73, 96, 539, 813, 864], "cov": [73, 96, 404], "ddof": [73, 96, 404, 540], "fweight": [73, 96, 404, 540], "aweight": [73, 96, 404, 540], "overridden": [73, 96, 404, 540, 818, 846], "assign": [73, 96, 113, 404, 540, 841, 843, 847, 850, 861, 864], "covari": [73, 96, 404, 540], "cummax": [73, 96, 404], "exclus": [73, 74, 86, 90, 96, 97, 109, 142, 393, 404, 462, 541, 542, 582, 583, 586, 648, 653, 662, 666, 761, 779, 780, 849, 850, 858, 870], "cumul": [73, 86, 96, 109, 404, 541, 542, 666, 779, 780], "uint64": [73, 86, 179, 184, 186, 187, 197, 199, 202, 404, 541, 542, 649, 666, 779, 780, 785, 787, 798, 799, 850, 865, 870], "uint16": [73, 86, 174, 179, 184, 185, 194, 404, 541, 542, 649, 666, 779, 780, 785, 787, 798, 799, 850, 862, 865, 870], "uint32": [73, 86, 179, 184, 185, 186, 208, 404, 541, 542, 649, 666, 779, 780, 785, 787, 798, 799, 850, 865, 870], "cummin": [73, 96, 404], "histogram": [73, 96, 404], "extend_lower_interv": [73, 96, 404, 543], "extend_upper_interv": [73, 96, 404, 543], "densiti": [73, 96, 404, 543], "monoton": [73, 96, 404, 543], "rightmost": [73, 96, 404, 543], "c1": [73, 96, 404, 543, 849], "ff": [73, 96, 404, 543], "c_": [73, 96, 114, 404, 543], "igamma": [73, 96, 404], "incomplet": [73, 96, 404, 544, 843], "3614": [73, 96, 404, 544], "2085": [73, 96, 404, 544], "median": [73, 96, 395, 404, 501, 547], "nanmean": [73, 96, 404], "6666666666666665": [73, 96, 404, 546], "nanmedian": [73, 96, 404], "overwrite_input": [73, 96, 404, 547], "treat": [73, 90, 96, 119, 295, 373, 389, 395, 398, 404, 511, 524, 547, 549, 651, 795, 860, 865], "undefin": [73, 96, 395, 404, 405, 501, 547, 551, 850, 854, 860], "nanmin": [73, 96, 404], "nanprod": [73, 96, 404], "Not": [73, 96, 373, 389, 393, 404, 448, 549, 646, 847, 854, 863, 872], "quantil": [73, 96, 404], "inclus": [73, 96, 142, 404, 550, 648, 662, 761, 837, 847, 861, 868], "midpoint": [73, 96, 404, 550], "surround": [73, 96, 404, 550, 868], "whichev": [73, 96, 404, 550], "_arraywithutilityexperiment": [73, 118], "optional_get_el": [73, 96, 405], "empti": [73, 74, 86, 90, 97, 109, 142, 395, 405, 501, 551, 558, 595, 648, 653, 656, 660, 666, 667, 710, 713, 754, 784, 785, 787, 789, 790, 841, 842, 846, 848, 850, 851, 861], "_arraywithgener": [74, 118], "all_equ": [74, 97, 653], "equality_matrix": [74, 97, 552, 653], "array_equ": [74, 97, 653], "assert_supports_inplac": [74, 97, 653], "ivybackendexcept": [74, 97, 556, 580, 653, 831, 846, 851, 854, 855], "clip_matrix_norm": [74, 97, 653], "894": [74, 97, 558, 559, 653, 661, 759], "clip_vector_norm": [74, 97, 653], "default_v": [74, 562, 653], "catch_except": [74, 562, 653], "rev": [74, 562, 653], "with_cal": [74, 562, 653], "catch": [74, 562, 653, 859, 865], "einops_rearrang": [74, 97, 653], "axes_length": [74, 97, 563, 564, 565, 653], "arrang": [74, 563, 653], "rearrang": [74, 97, 563, 565, 653, 864], "einops_reduc": [74, 97, 653, 850], "einops_repeat": [74, 97, 653], "fourier_encod": [74, 97, 653], "max_freq": [74, 97, 567, 653], "oppos": [74, 97, 567, 653, 850], "geometr": [74, 97, 567, 653, 656, 711], "0000000e": [74, 97, 567, 653], "2246468e": [74, 97, 567, 653], "4492936e": [74, 567, 653], "6739404e": [74, 97, 567, 653], "batch_dim": [74, 97, 570, 571, 653, 821], "gather_nd": [74, 97, 653], "get_num_dim": [74, 97, 653], "as_arrai": [74, 97, 574, 608, 653, 821], "has_nan": [74, 97, 653], "include_inf": [74, 97, 576, 631, 653], "inplace_decr": [74, 97, 653], "decrement": [74, 97, 578, 653], "inplace_incr": [74, 97, 653], "increment": [74, 97, 579, 653, 843, 882], "inplace_upd": [74, 97, 598, 653, 811, 861], "ensure_in_backend": [74, 97, 580, 653, 827, 861], "keep_input_dtyp": [74, 97, 580, 653, 827, 861], "is_arrai": [74, 97, 653, 861, 862], "is_ivy_arrai": [74, 97, 653, 861], "is_ivy_contain": [74, 653], "is_native_arrai": [74, 97, 193, 583, 649, 653], "isin": [74, 97, 653], "test_el": [74, 97, 587, 653], "assume_uniqu": [74, 97, 587, 653], "invert": [74, 97, 248, 587, 651, 653, 656, 698], "scatter_flat": [74, 97, 653], "occupi": [74, 182, 185, 594, 595, 649, 653], "scatter_nd": [74, 97, 653, 868], "stable_divid": [74, 97, 653, 858], "denomin": [74, 81, 97, 104, 601, 610, 624, 653, 661, 759, 817, 858, 867, 872], "min_denomin": [74, 97, 601, 610, 624, 653, 867], "_min_denomin": [74, 610, 653], "stable_pow": [74, 97, 653], "min_bas": [74, 97, 600, 611, 623, 653, 817, 867], "stabl": [74, 85, 97, 108, 164, 345, 352, 353, 386, 389, 402, 533, 600, 601, 610, 611, 623, 624, 648, 653, 665, 775, 778, 800, 842, 847, 850, 862, 867, 870, 872], "00004": [74, 97, 611, 653], "00008": [74, 97, 611, 653], "00004000e": [74, 611], "56002560e": [74, 611], "60001200e": [74, 611], "09602048e": [74, 611], "supports_inplace_upd": [74, 97, 653], "to_fil": 74, "fid": 74, "sep": 74, "format_": 74, "recov": [74, 854, 862], "to_scalar": [74, 97, 653], "value_is_nan": [74, 97, 653], "_arraywithgradi": [75, 118], "adam_step": [75, 98, 654], "mw": [75, 98, 633, 634, 654], "vw": [75, 98, 633, 634, 654], "beta1": [75, 98, 554, 633, 634, 639, 653, 654, 818], "beta2": [75, 98, 554, 633, 634, 639, 653, 654, 818], "epsilon": [75, 78, 79, 98, 101, 102, 554, 633, 634, 639, 653, 654, 656, 657, 699, 702, 715, 716, 717, 810, 815, 817, 818, 849, 858, 861], "dc": [75, 98, 633, 634, 637, 639, 640, 641, 654], "dw": [75, 98, 633, 634, 637, 639, 640, 641, 654], "forget": [75, 98, 633, 634, 639, 654, 818, 850], "dcdw": [75, 98, 633, 634, 637, 639, 640, 654], "adam_step_delta": [75, 98, 633, 654], "2020105": [75, 633, 654], "22187898": [75, 633, 654], "24144873": [75, 633, 654], "10000002": [75, 109, 313, 384, 633, 783], "00300002": [75, 633], "00800002": [75, 633], "adam_upd": [75, 98, 654], "mw_tm1": [75, 98, 634, 639, 654], "vw_tm1": [75, 98, 634, 639, 654], "ws_new": [75, 98, 634, 639, 640, 641, 654], "updated_weight": [75, 98, 634, 654], "92558753": [75, 634], "92558873": [75, 634, 654], "92558718": [75, 634, 654], "00000063e": [75, 98, 634, 654], "00000016e": [75, 98, 634, 654], "00000086e": [75, 98, 634, 654], "gradient_descent_upd": [75, 98, 654, 659, 737, 738, 739], "descent": [75, 98, 637, 654, 818, 882], "new_weight": [75, 98, 637, 639, 640, 654], "lamb_upd": [75, 98, 654], "max_trust_ratio": [75, 98, 639, 654, 818], "decay_lambda": [75, 98, 639, 640, 654, 818], "trust": [75, 98, 639, 654, 818], "ratio": [75, 98, 639, 654, 818], "decai": [75, 98, 639, 640, 654, 818], "lamb": [75, 98, 639, 654, 818], "784": [75, 639, 654], "lars_upd": [75, 98, 654], "lar": [75, 98, 640, 654, 818], "34077978": [75, 640, 654], "78025991": [75, 640, 654], "56051969": [75, 640, 654], "78026009": [75, 640, 654], "56051981": [75, 640, 654], "12103939": [75, 640, 654], "optimizer_upd": [75, 98, 654], "effective_grad": [75, 98, 641, 654], "3e": [75, 98, 641, 654], "preserve_typ": [75, 98, 643, 654], "_arraywithimag": [76, 118], "_arraywithlay": [77, 118], "conv1d": [77, 100, 655, 814, 827], "filter_format": [77, 100, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676], "channel_last": [77, 100, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676, 798], "x_dilat": [77, 100, 655, 668, 669, 671, 672, 673, 675], "d_out": [77, 100, 392, 409, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676], "channel_first": [77, 100, 655, 668, 669, 670, 671, 672, 673, 674, 675, 676], "wio": [77, 655, 668, 669, 670, 675], "conv1d_transpos": [77, 100, 655], "output_shap": [77, 100, 655, 668, 670, 672, 674, 676, 814], "iow": [77, 100, 655, 670], "woi": [77, 100, 655, 670], "fh": [77, 100, 655, 660, 668, 671, 672, 673, 674, 675, 676, 677, 752], "hwio": [77, 655, 668, 669, 671, 675], "conv2d_transpos": [77, 100, 655], "iohw": [77, 100, 655, 672], "hwoi": [77, 100, 655, 672], "conv3d": [77, 100, 655, 674, 814, 827], "conv3d_transpos": [77, 100, 655, 676], "iodhw": [77, 100, 655, 674, 676], "dhwoi": [77, 100, 655, 674, 676], "depthwise_conv2d": [77, 100, 655], "randint": [77, 82, 84, 100, 105, 662, 664, 677, 681, 771, 850, 879], "noise_shap": [77, 100, 655, 678], "42857146": [77, 655, 678], "85714293": [77, 655, 678], "28571415": [77, 100, 655, 678], "71428585": [77, 100, 655, 678], "14285755": [77, 100, 655, 678], "5714283": [77, 655, 678], "4285717": [77, 100, 655, 678], "8571434": [77, 100, 655, 678], "2857151": [77, 655, 678], "dropout1d": [77, 100, 392, 417], "dropout2d": [77, 100, 392], "dropout3d": [77, 100, 392], "outer_batch_shap": [77, 100, 655, 679], "inner_batch_shap": [77, 100, 655, 679], "lstm_updat": [77, 100, 655, 870], "init_h": [77, 100, 655, 681, 870], "init_c": [77, 100, 655, 681, 870], "recurrent_kernel": [77, 100, 655, 681, 870], "recurrent_bia": [77, 100, 655, 681, 870], "hidden": [77, 100, 655, 680, 681, 814, 848, 854, 870], "recurr": [77, 96, 100, 392, 438, 655, 681, 870, 882], "timestep": [77, 96, 100, 392, 438, 655, 680, 681, 682, 814, 870], "h_i": [77, 100, 681], "c_i": [77, 100, 681], "rc": [77, 100, 681], "multi_head_attent": [77, 100, 655, 861], "num_head": [77, 100, 655, 682, 814], "in_proj_weight": [77, 100, 655, 682], "q_proj_weight": [77, 100, 655, 682], "k_proj_weight": [77, 100, 655, 682], "v_proj_weight": [77, 100, 655, 682], "out_proj_weight": [77, 100, 655, 682], "in_proj_bia": [77, 100, 655, 682], "out_proj_bia": [77, 100, 655, 682], "is_caus": [77, 100, 655, 682, 685], "key_padding_mask": [77, 100, 655, 682], "bias_k": [77, 100, 655, 682], "bias_v": [77, 100, 655, 682], "static_k": [77, 100, 655, 682], "static_v": [77, 100, 655, 682], "add_zero_attn": [77, 100, 655, 682], "return_attention_weight": [77, 100, 655, 682], "average_attention_weight": [77, 100, 655, 682], "scaled_dot_product_attent": [77, 100, 655], "dropout_p": [77, 100, 655, 685], "num_queri": [77, 100, 655, 685], "feat_dim": [77, 100, 655, 685], "num_kei": [77, 100, 655, 685], "causal": [77, 100, 655, 682, 685], "attent": [77, 100, 655, 682, 685, 814, 843, 846], "29999995": [77, 313, 314, 324, 384, 392, 436, 655, 664, 685, 772], "19994521": [77, 655, 685], "09994531": [77, 655, 685], "30000019": [77, 395, 485, 655, 685], "_arraywithlinearalgebra": [78, 118], "choleski": [78, 101, 656, 861], "625": [78, 96, 365, 656, 686], "vif": [78, 101, 687], "det": [78, 101, 656, 704], "axis1": [78, 80, 101, 103, 656, 658, 690, 710, 733], "axis2": [78, 101, 656, 690, 710], "eigh": [78, 101, 393, 446, 656, 691], "uplo": [78, 101, 656, 692, 693], "eigvalsh": [78, 101, 656], "array_lik": [78, 101, 392, 394, 395, 437, 470, 471, 475, 476, 507, 656, 694, 701, 830], "203": [78, 95, 246, 656, 661, 694, 759], "233": [78, 656, 694], "inv": [78, 101, 656], "transpose_a": [78, 101, 656, 696], "transpose_b": [78, 101, 656, 696], "adjoint_a": [78, 101, 656, 696], "adjoint_b": [78, 101, 656, 696], "matrix_norm": [78, 101, 656], "ord": [78, 101, 656, 697, 713], "fro": [78, 101, 394, 470, 656, 697], "nuc": [78, 101, 656, 697], "performingth": [78, 697], "matrix_pow": [78, 101, 656], "matrix_rank": [78, 101, 656], "hermitian": [78, 101, 393, 446, 447, 656, 691, 692, 693, 699, 706], "largest_singular_valu": [78, 101, 656, 699, 702], "defici": [78, 656, 699], "matrix_transpos": [78, 101, 656], "pinv": [78, 101, 656], "pseudo": [78, 101, 656, 702, 860], "99999988": [78, 101, 656, 702], "qr": [78, 101, 656, 863], "12309149": [78, 656, 703], "90453403": [78, 656, 703], "40824829": [78, 656, 703], "49236596": [78, 656, 703], "30151134": [78, 656, 703], "81649658": [78, 656, 703], "86164044": [78, 656, 703], "12403841e": [78, 656, 703], "60113630e": [78, 656, 703], "10782342e": [78, 656, 703], "04534034e": [78, 656, 703], "80906807e": [78, 656, 703], "88178420e": [78, 101, 656, 693, 703], "slogdet": [78, 101, 656], "logabsdet": [78, 101, 656, 704], "natur": [78, 101, 260, 278, 279, 280, 281, 300, 371, 389, 651, 656, 704, 846, 852, 854, 863], "098611": [78, 656, 704], "full_matric": [78, 101, 656, 706], "svf": [78, 706], "reconstructed_x": [78, 656, 706], "svdval": [78, 101, 656], "tensorsolv": [78, 101, 656], "vander": [78, 101, 656], "vandermond": [78, 101, 656, 711], "vecdot": [78, 101, 656], "vector_norm": [78, 101, 656], "manhattan": [78, 101, 656, 713], "euclidean": [78, 101, 113, 114, 656, 713], "7416575": [78, 101, 656, 713], "vector_to_skew_symmetric_matrix": [78, 101, 656], "_arraywithloss": [79, 118], "binary_cross_entropi": [79, 102, 657], "pos_weight": [79, 102, 657, 715], "crossentropi": [79, 102, 657, 715], "26765382": [79, 657, 715], "3862944": [79, 657, 716], "sparse_cross_entropi": [79, 102, 657], "9309097": [79, 717], "_arraywithmanipul": [80, 118], "x_min": [80, 103, 658, 721, 870], "x_max": [80, 103, 658, 721, 870], "before_1": [80, 103, 395, 501, 658, 723, 736], "after_1": [80, 103, 395, 501, 658, 723, 736], "before_n": [80, 103, 395, 501, 658, 723, 736], "after_n": [80, 103, 395, 501, 658, 723, 736], "repetit": [80, 103, 658, 727, 734, 868], "flat": [80, 90, 103, 400, 531, 594, 653, 658, 727], "allowzero": [80, 103, 658, 728], "remain": [80, 83, 96, 103, 106, 240, 257, 258, 264, 272, 273, 290, 293, 299, 301, 392, 416, 417, 418, 437, 651, 658, 660, 663, 728, 746, 769, 830, 842, 843, 852, 854, 858, 866, 868, 872], "roll": [80, 103, 658, 857], "shift": [80, 92, 103, 119, 153, 164, 249, 251, 345, 386, 648, 651, 658, 729, 842, 843, 851, 852, 857, 864], "num_or_size_split": [80, 90, 103, 658, 730, 870], "with_remaind": [80, 90, 103, 658, 730], "squeezabl": [80, 658, 731], "swapax": [80, 103, 658], "axis0": [80, 103, 658, 733], "swap_ax": [80, 733], "swap": [80, 103, 658, 733, 824], "tile": [80, 97, 103, 565, 658], "unpack": [80, 103, 658, 735, 863, 865], "zero_pad": [80, 103, 658], "_arraywithnorm": [81, 118], "layer_norm": [81, 104, 661], "normalized_idx": [81, 104, 661, 759], "new_std": [81, 104, 661, 759, 817], "learnabl": [81, 104, 655, 659, 661, 680, 739, 759, 814, 817], "0976": [81, 661, 759], "3452": [81, 661, 759], "2740": [81, 661, 759], "1047": [81, 661, 759], "5886": [81, 661, 759], "2732": [81, 661, 759], "7696": [81, 661, 759, 798], "7024": [81, 661, 759], "2518": [81, 661, 759], "826": [81, 661, 759], "178": [81, 661, 759], "981": [81, 661, 759], "831": [81, 661, 759], "421": [81, 661, 759], "_arraywithrandom": [82, 118], "multinomi": [82, 105, 399, 528, 662], "population_s": [82, 105, 662, 760], "num_sampl": [82, 105, 662, 760], "unnorm": [82, 105, 662, 760, 865], "popul": [82, 86, 90, 105, 109, 662, 666, 760, 786, 788, 850, 851, 861, 865, 870], "draw": [82, 105, 399, 526, 528, 530, 662, 760, 762, 763, 798, 799, 800, 801, 806, 813, 841, 845, 863, 865], "half": [82, 105, 142, 304, 648, 651, 662, 761, 763, 839, 855, 868], "235": [82, 762], "float16": [82, 93, 105, 151, 174, 176, 177, 182, 184, 363, 389, 648, 649, 656, 713, 762, 763, 798, 799, 839, 850, 855, 862, 865], "807": [82, 762], "_arraywithsearch": [83, 118], "select_last_index": [83, 106, 663, 766, 767], "occurr": [83, 395, 404, 516, 538, 663, 664, 766, 767, 771], "argmin": [83, 106, 663], "output_dtyp": [83, 106, 663, 767], "argwher": [83, 106, 663], "nonzero": [83, 106, 114, 238, 239, 240, 243, 246, 255, 257, 260, 262, 264, 290, 303, 308, 651, 663], "as_tupl": [83, 106, 663, 769], "fewer": [83, 106, 663, 769], "_arraywithset": [84, 118], "unique_al": [84, 107, 664], "by_valu": [84, 107, 664, 771], "inverse_indic": [84, 107, 395, 516, 664, 771, 773], "unique_count": [84, 107, 664], "unique_invers": [84, 107, 664], "unique_valu": [84, 107, 664], "admonit": [84, 774], "dask": [84, 664, 771, 772, 773, 774], "difficult": [84, 664, 771, 772, 773, 774, 843, 845, 850, 865, 872], "omit": [84, 300, 651, 664, 771, 772, 773, 774, 857, 861, 862], "x_i": [84, 86, 95, 114, 237, 238, 239, 242, 243, 244, 246, 248, 253, 254, 255, 260, 262, 263, 270, 271, 272, 273, 274, 278, 279, 280, 281, 285, 292, 297, 300, 301, 302, 303, 304, 305, 307, 308, 310, 352, 353, 355, 376, 389, 651, 664, 666, 771, 772, 773, 774, 782, 783, 784, 786, 787, 788, 813, 853], "x_j": [84, 664, 771, 772, 773, 774], "typeerror": [84, 107, 664, 774], "_arraywithsort": [85, 118], "stabil": [85, 108, 610, 611, 653, 665, 775, 778, 850, 860, 866, 868], "msort": [85, 108, 665], "searchsort": [85, 108, 665, 799], "sorter": [85, 108, 665, 777], "ret_dtyp": [85, 108, 665, 777], "_arraywithstatist": [86, 118], "cumprod": [86, 109, 666, 862, 870], "cumsum": [86, 109, 666, 850], "einsum": [86, 109, 666], "equat": [86, 96, 109, 331, 386, 393, 463, 656, 666, 705, 781, 798, 829, 882], "operand": [86, 96, 100, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 271, 272, 273, 278, 279, 280, 281, 282, 290, 293, 295, 299, 300, 301, 302, 303, 304, 307, 308, 310, 352, 353, 376, 380, 389, 390, 392, 435, 651, 656, 666, 704, 710, 781, 782, 784, 785, 787, 829, 830, 846, 849, 853, 862], "contract": [86, 656, 666, 708, 781, 830], "seq": [86, 666, 781, 798], "ii": [86, 109, 666, 781, 843], "jk": [86, 666, 781, 830], "ik": [86, 666, 781, 830], "126": [86, 126, 296, 645, 651, 656, 666, 698, 781], "510": [86, 666, 781], "special": [86, 101, 113, 114, 118, 119, 237, 238, 239, 240, 242, 243, 244, 245, 246, 253, 254, 255, 257, 258, 260, 262, 263, 264, 271, 272, 273, 278, 279, 280, 281, 282, 285, 290, 293, 295, 299, 300, 301, 302, 303, 304, 307, 308, 310, 352, 353, 376, 389, 651, 656, 666, 704, 710, 782, 783, 784, 785, 786, 787, 788, 798, 799, 800, 801, 806, 813, 841, 845, 846, 848, 852, 853, 854, 857, 861, 863, 864, 865, 866, 868, 882, 883], "arithmet": [86, 109, 251, 257, 290, 651, 666, 783, 862], "propag": [86, 251, 352, 353, 389, 651, 666, 782, 783, 784, 786, 787, 788, 860], "overflow": [86, 109, 240, 257, 264, 651, 656, 666, 704, 783, 787, 840, 850], "04999995": [86, 783], "freedom": [86, 109, 666, 786, 788, 847], "constitut": [86, 109, 666, 786, 788, 858, 870, 883], "commonli": [86, 109, 666, 786, 788, 854, 858, 860], "81649661": [86, 666, 786], "6666665": [86, 788], "667": [86, 97, 257, 559, 610, 651, 653, 788], "_arraywithutil": [87, 118], "logic": [87, 110, 221, 257, 258, 284, 285, 286, 290, 293, 650, 651, 667, 789, 790, 841, 846, 850, 851, 854, 858, 859, 860, 861, 862, 864, 865, 868, 880], "AND": [87, 110, 247, 258, 284, 651, 667, 789], "OR": [87, 110, 250, 286, 293, 651, 667, 790, 842, 843, 860], "_wrap_funct": [88, 111, 848, 858, 859], "function_nam": [88, 111, 841, 866], "new_funct": [88, 111, 848], "add_ivy_array_instance_method": 88, "cl": [88, 111], "moduletyp": [88, 111, 879], "toi": [88, 111], "arrayexampl": 88, "hasattr": [88, 111], "_containerwithactiv": [89, 119], "dict_in": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "queue": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 604, 627, 653, 867], "queue_load_s": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "container_combine_method": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "list_join": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "queue_timeout": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119, 604, 627, 653, 867], "print_limit": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "key_length_limit": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "print_ind": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "print_line_spac": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "ivyh": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "default_key_color": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "keyword_color_dict": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "rebuild_child_contain": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "types_to_iteratively_nest": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "alphabetical_kei": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "dynamic_backend": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 118, 119, 815, 816, 847, 867], "build_cal": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 119], "containerbas": [89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 849], "_static_gelu": 89, "key_chain": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 180, 182, 185, 188, 189, 190, 192, 194, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 334, 335, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 377, 378, 379, 380, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 488, 497, 499, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 521, 522, 523, 525, 527, 532, 533, 540, 541, 542, 543, 550, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "to_appli": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 180, 182, 185, 188, 189, 190, 192, 194, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 334, 335, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 377, 378, 379, 380, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 435, 436, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 488, 497, 499, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 521, 522, 523, 525, 527, 532, 533, 540, 541, 542, 543, 550, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 660, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "prune_unappli": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 180, 182, 185, 188, 189, 190, 192, 194, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 334, 335, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 377, 378, 379, 380, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 435, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 488, 497, 499, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 521, 522, 523, 525, 527, 532, 533, 540, 541, 542, 543, 550, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 660, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 753, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "map_sequ": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 144, 146, 148, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 166, 169, 170, 171, 172, 180, 182, 185, 188, 189, 190, 192, 194, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 331, 334, 335, 345, 346, 350, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 377, 378, 379, 380, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 428, 429, 430, 431, 435, 436, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 488, 497, 499, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 518, 519, 520, 521, 522, 523, 525, 527, 532, 533, 540, 541, 542, 543, 550, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 669, 670, 671, 672, 673, 674, 677, 678, 679, 681, 682, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "prune": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 126, 127, 128, 129, 130, 131, 132, 133, 134, 151, 153, 158, 160, 166, 170, 172, 185, 189, 190, 197, 231, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 320, 321, 322, 323, 324, 326, 327, 328, 330, 351, 352, 353, 354, 355, 357, 359, 367, 368, 374, 376, 378, 379, 380, 416, 417, 418, 436, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 485, 486, 508, 510, 511, 512, 514, 519, 521, 522, 523, 525, 527, 540, 541, 542, 543, 552, 555, 556, 558, 559, 563, 564, 565, 566, 567, 570, 571, 574, 576, 578, 579, 580, 582, 583, 586, 594, 595, 609, 610, 611, 613, 615, 617, 618, 631, 637, 643, 660, 669, 670, 671, 672, 678, 679, 685, 686, 687, 692, 693, 694, 695, 696, 697, 699, 701, 703, 704, 710, 715, 716, 717, 721, 725, 728, 729, 730, 731, 732, 735, 736, 753, 754, 755, 756, 760, 761, 762, 763, 765, 768, 771, 772, 773, 774, 775, 779, 780, 783, 785, 786, 788, 789, 790, 796, 799], "static_gelu": 89, "046": 89, "_static_hardswish": 89, "_static_leaky_relu": 89, "static_leaky_relu": 89, "38999999": [89, 96, 128, 312, 313, 384], "_static_log_softmax": 89, "static_log_softmax": 89, "371": [89, 129], "_static_mish": 89, "static_mish": 89, "30883577": [89, 130, 645], "28903052": [89, 130, 645], "10714479": [89, 130, 645], "_static_relu": 89, "static_relu": 89, "_static_sigmoid": 89, "static_sigmoid": 89, "2689414": [89, 132, 133, 645], "7310586": [89, 132, 133, 645], "88079703": [89, 132, 645], "62245935": [89, 132], "4750208": [89, 132], "_static_softmax": 89, "static_softmax": 89, "72844321": [89, 133], "19852395": [89, 133], "07303288": [89, 133], "_static_softplu": 89, "revert": [89, 134, 645], "static_softplu": 89, "53499615": 89, "42036411": 89, "948": [89, 134, 660, 740], "dictionari": [90, 107, 119, 229, 619, 635, 650, 653, 654, 774, 793, 795, 830, 846, 850, 858, 862, 863, 872], "asynchron": [90, 119, 882], "wait": [90, 119, 604, 653, 841, 843, 862], "arriv": [90, 119, 604, 653, 868], "cont_list_join": [90, 119], "whitespac": [90, 119], "indent": [90, 119], "newlin": [90, 119, 853], "termin": [90, 119, 842, 843, 849, 855, 856], "constructor": [90, 119, 554, 653, 795, 811, 819, 850, 851, 853], "kept": [90, 119, 659, 737, 738, 843, 861, 866], "encount": [90, 119, 814, 839, 841, 850, 854, 855, 865], "alphabet": [90, 119], "__setitem__": [90, 395, 510, 846, 849], "_cont_at_key_chains_input_as_dict": 90, "current_chain": 90, "ignore_key_error": 90, "_cont_at_key_chains_input_as_seq": 90, "_cont_call_static_method_with_flexible_arg": 90, "static_method": 90, "kw": 90, "self_idx": 90, "_cont_concat_unifi": 90, "_cont_get_dev": 90, "_cont_get_dtyp": 90, "_cont_get_shap": 90, "_cont_ivi": 90, "_cont_mean_unifi": 90, "_1": 90, "_cont_prune_key_chains_input_as_dict": 90, "return_cont": 90, "_cont_prune_key_chains_input_as_seq": 90, "_cont_slice_kei": 90, "key_slic": 90, "_cont_sum_unifi": 90, "_get_queue_item": 90, "cont_all_fals": 90, "assert_is_bool": 90, "cont_all_key_chain": 90, "include_empti": 90, "cont_all_tru": [90, 849], "cont_as_bool": 90, "cont_assert_contains_sub_contain": 90, "sub_cont": 90, "screen": [90, 841, 842], "cont_assert_contains_sub_structur": 90, "check_shap": [90, 821], "cont_assert_ident": 90, "check_typ": 90, "same_arrai": 90, "arrays_equ": 90, "cont_assert_identical_structur": 90, "assert_and_assign": 90, "congruent": 90, "cont_at_key_chain": 90, "ignore_non": 90, "cont_at_kei": 90, "substr": 90, "cont_combin": 90, "duplic": [90, 395, 507, 575, 653, 660, 742, 847, 853, 859, 860, 863], "container_rightmost": 90, "cont_common_key_chain": 90, "cont_config": 90, "cont_contains_sub_contain": 90, "cont_contains_sub_structur": 90, "cont_copi": 90, "cont_create_if_abs": 90, "noth": [90, 868], "cont_cutoff_at_depth": 90, "depth_cutoff": 90, "cont_cutoff_at_height": 90, "height_cutoff": 90, "cont_deep_copi": [90, 879], "cont_dev": 90, "cont_dev_str": 90, "cont_diff": 90, "diff_kei": 90, "detect_key_diff": 90, "detect_value_diff": 90, "detect_shape_diff": 90, "container0": 90, "cont_dtyp": 90, "cont_duplicate_array_keychain": 90, "cont_find_sub_contain": 90, "sub_cont_to_find": 90, "cont_find_sub_structur": 90, "sub_struc_to_find": 90, "cont_flatten_key_chain": 90, "above_height": 90, "below_depth": 90, "cont_format_key_chain": 90, "format_fn": 90, "cont_from_disk_as_hdf5": 90, "h5_obj_or_filepath": 90, "slice_obj": 90, "disk": [90, 816, 884], "h5py": 90, "filepath": [90, 667, 791, 792, 843, 845], "cont_from_disk_as_json": 90, "json_filepath": 90, "cont_from_disk_as_pickl": 90, "pickle_filepath": 90, "cont_from_flat_list": 90, "flat_list": 90, "hierarchi": [90, 834, 841, 864], "cont_handle_inplac": 90, "prime": [90, 850], "overwritten": [90, 846, 847], "cont_has_kei": 90, "query_kei": 90, "somewher": 90, "cont_has_key_chain": 90, "cont_ident": 90, "cont_identical_array_shap": 90, "cont_identical_config": 90, "cont_identical_structur": 90, "cont_if_exist": 90, "cont_inplace_upd": 90, "cont_ivi": 90, "cont_key_chains_contain": 90, "sub_str": 90, "cont_list_stack": 90, "cont_load": 90, "cont_map": [90, 849], "func": [90, 113, 230, 381, 382, 383, 391, 557, 632, 635, 636, 638, 644, 650, 653, 654, 660, 753, 795, 841, 845, 846, 852, 854, 860], "cont_map_sub_cont": 90, "include_self": 90, "possibli": [90, 615, 653, 798, 865, 872], "cont_max_depth": 90, "cont_multi_map": 90, "map_nest": 90, "assert_ident": 90, "leftmost": [90, 660, 753], "cont_multi_map_in_funct": 90, "cont_num_arrai": 90, "cont_overwrite_at_key_chain": 90, "target_dict": 90, "return_dict": 90, "cont_prune_empti": 90, "keep_non": 90, "cont_prune_key_chain": 90, "key1": 90, "key2": 90, "key3": 90, "cont_prune_key_from_key_chain": 90, "certain": [90, 142, 154, 155, 394, 471, 648, 841, 842, 843, 845, 850, 858, 864, 865, 868, 872, 879], "cont_prune_kei": 90, "cont_prune_keys_from_key_chain": 90, "cont_reduc": 90, "cont_remove_key_length_limit": 90, "cont_remove_print_limit": 90, "cont_reshape_lik": 90, "leading_shap": 90, "cont_restructur": 90, "keep_orig": 90, "old": [90, 842, 847, 861], "cont_restructure_key_chain": 90, "keychain_map": 90, "cont_sav": 90, "cont_set_at_key_chain": 90, "cont_set_at_kei": 90, "cont_shap": [90, 655, 673], "cont_show": 90, "cont_show_sub_contain": 90, "sub_cont_or_keychain": 90, "cont_size_ordered_arrai": 90, "keychain": [90, 96, 315, 354, 479, 480, 481, 511], "cont_slice_kei": 90, "all_depth": 90, "cont_slice_via_kei": 90, "slice_kei": 90, "cont_sort_by_kei": 90, "cont_structural_diff": 90, "cont_to_dict": 90, "cont_to_disk_as_hdf5": 90, "starting_index": 90, "max_batch_s": 90, "cont_to_disk_as_json": 90, "cont_to_disk_as_pickl": 90, "cont_to_flat_list": 90, "cont_to_iter": [90, 849], "leaf_keys_onli": 90, "cont_to_iterator_kei": 90, "cont_to_iterator_valu": 90, "cont_to_json": 90, "cont_to_nested_list": 90, "cont_to_raw": 90, "cont_trim_kei": 90, "cont_try_kc": 90, "cont_unifi": 90, "concatten": [90, 230, 650], "cont_unstack_cont": 90, "dim_siz": 90, "cont_update_config": 90, "cont_with_default_key_color": 90, "cont_with_entries_as_list": 90, "cont_with_ivy_backend": 90, "ivy_backend": [90, 863], "cont_with_key_length_limit": 90, "cont_with_print_ind": 90, "cont_with_print_limit": 90, "cont_with_print_line_spac": 90, "h5_file_s": 90, "shuffle_h5_fil": 90, "split_cont": 90, "_is_json": 90, "_repr": 90, "_containerwithconvers": [91, 119], "_static_to_ivi": 91, "_static_to_n": 91, "_containerwithcr": [92, 119], "_static_arang": 92, "_static_asarrai": 92, "_static_copy_arrai": 92, "_static_empti": 92, "_static_empty_lik": 92, "_static_ey": 92, "n_row": [92, 96, 149, 164, 345, 386, 393, 454, 648], "n_col": [92, 96, 149, 164, 345, 386, 648], "_static_from_dlpack": 92, "_static_ful": 92, "_static_full_lik": 92, "static_full_lik": 92, "2324": [92, 153, 648], "234": [92, 95, 153, 176, 259, 310, 648, 649, 651, 655, 679, 798], "_static_linspac": 92, "_static_logspac": 92, "static_logspac": 92, "15443469": [92, 155], "64158883": [92, 155], "_static_meshgrid": 92, "_static_native_arrai": 92, "_static_one_hot": 92, "static_one_hot": 92, "_static_on": 92, "_static_ones_lik": 92, "_static_tril": 92, "_static_triu": 92, "_static_zero": 92, "_static_zeros_lik": 92, "frombuff": [92, 648], "expos": [92, 151, 560, 648, 653, 820, 870], "x00": [92, 151, 648], "xf0": [92, 151, 648], "x01": [92, 151, 648], "x02": [92, 151, 648], "x03": [92, 151, 648], "x04": [92, 151, 648], "x05": [92, 151], "5443469": [92, 155, 648], "static_frombuff": 92, "static_triu_indic": 92, "triu_indic": [92, 648], "_containerwithdatatyp": [93, 119], "_static_astyp": 93, "618": [93, 95, 169, 286, 649], "static_astyp": 93, "_static_broadcast_arrai": 93, "static_broadcast_arrai": 93, "_static_broadcast_to": 93, "static_broadcast_to": 93, "_static_can_cast": 93, "from_": [93, 172, 649], "static_can_cast": 93, "_static_default_complex_dtyp": 93, "complex_dtyp": [93, 175, 198, 649], "_static_default_float_dtyp": 93, "float_dtyp": [93, 177, 200, 649], "_static_dtyp": 93, "_static_finfo": 93, "inquir": [93, 182, 185], "static_finfo": 93, "55040e": [93, 182, 649], "7976931348623157e": [93, 182, 649], "308": [93, 182, 649, 798, 865], "_static_function_supported_dtyp": 93, "_static_function_unsupported_dtyp": 93, "_static_iinfo": 93, "1800": [93, 185, 649], "1084": 93, "40000": 93, "static_iinfo": 93, "2147483648": [93, 96, 185, 395, 510, 649], "2147483647": [93, 185, 649], "_static_is_bool_dtyp": 93, "dtype_in": [93, 167, 168, 181, 187, 188, 189, 190, 191, 192, 193, 194, 209, 649], "_static_is_complex_dtyp": 93, "is_complex_dtyp": [93, 649, 866], "roughli": [93, 842, 845], "static_is_complex_dtyp": 93, "_static_is_float_dtyp": 93, "static_is_float_dtyp": 93, "_static_is_int_dtyp": 93, "_static_is_uint_dtyp": 93, "_static_result_typ": 93, "static_result_typ": 93, "broadcats": [93, 170], "_containerwithdevic": [94, 119], "_static_dev": 94, "static_dev": 94, "_static_to_devic": 94, "static_to_devic": 94, "contaion": [94, 214], "_containerwithelementwis": [95, 119], "_static_ab": 95, "static_ab": 95, "_static_aco": 95, "static_aco": 95, "_static_acosh": 95, "static_acosh": 95, "_static_add": 95, "static_add": [95, 123], "_static_asin": 95, "static_asin": 95, "524": [95, 242, 651], "412": [95, 100, 242, 651, 660, 740], "_static_asinh": 95, "static_asinh": 95, "_static_atan": 95, "static_atan": 95, "_static_atan2": 95, "static_atan2": 95, "915": [95, 245, 651], "983": [95, 245, 651], "978": [95, 245, 651], "696": [95, 105, 245, 651, 762], "993": [95, 245, 651], "_static_atanh": 95, "static_atanh": 95, "_static_bitwise_and": 95, "static_bitwise_and": 95, "_static_bitwise_invert": 95, "static_bitwise_invert": 95, "_static_bitwise_left_shift": 95, "_static_bitwise_or": 95, "static_bitwise_or": 95, "_static_bitwise_right_shift": 95, "static_bitwise_right_shift": 95, "_static_bitwise_xor": 95, "static_bitwise_xor": 95, "_static_ceil": 95, "static_ceil": 95, "_static_co": 95, "static_co": 95, "_static_cosh": 95, "static_cosh": 95, "_static_deg2rad": 95, "static_deg2rad": 95, "0262": [95, 256, 296, 651], "873": [95, 256, 296, 651], "_static_divid": 95, "static_divid": 95, "_static_equ": 95, "static_equ": 95, "_static_erf": 95, "static_erf": 95, "27632612": [95, 259], "934008": [95, 259, 651], "99999928": [95, 259], "91903949": [95, 259], "_static_exp": 95, "static_exp": 95, "59814835": [95, 260, 651], "4131622": [95, 260], "_static_expm1": 95, "thefunct": [95, 259], "areal": 95, "static_expm1": 95, "71828175": [95, 260, 651], "38905621": [95, 260, 651], "59815216": 95, "_static_floor": 95, "static_floor": 95, "_static_floor_divid": 95, "static_floor_divid": 95, "_static_great": 95, "static_great": 95, "_static_greater_equ": 95, "static_greater_equ": 95, "_static_isfinit": 95, "999999999999": [95, 271, 651], "static_isfinit": 95, "_static_isinf": 95, "static_isinf": 95, "_static_isnan": 95, "static_isnan": 95, "_static_isr": 95, "0j": [95, 96, 159, 160, 238, 239, 240, 243, 246, 255, 260, 262, 274, 278, 280, 297, 301, 303, 304, 308, 355, 389, 648, 651, 656, 704], "23j": [95, 96], "9j": [95, 96], "static_isr": 95, "_static_lcm": 95, "1080": [95, 275], "1550": [95, 275], "130": [95, 275], "_static_less": 95, "static_less": 95, "_static_less_equ": 95, "static_less_equ": 95, "_static_log": 95, "static_log": 95, "_static_log10": 95, "static_log10": 95, "898": [95, 279, 651], "0414": [95, 279, 651], "_static_log1p": 95, "static_log1p": 95, "_static_log2": 95, "static_log2": 95, "_static_logaddexp": 95, "static_logaddexp": 95, "_static_logical_and": 95, "static_logical_and": 95, "_static_logical_not": 95, "static_logical_not": 95, "_static_logical_or": 95, "static_logical_or": 95, "_static_logical_xor": 95, "static_logical_xor": 95, "_static_maximum": 95, "static_maximum": 95, "_static_minimum": 95, "static_minimum": 95, "_static_multipli": 95, "static_multipli": 95, "_static_neg": 95, "static_neg": 95, "_static_not_equ": 95, "static_not_equ": 95, "_static_posit": 95, "static_posit": 95, "_static_pow": 95, "static_pow": 95, "_static_rad2deg": 95, "static_rad2deg": 95, "5160": 95, "10300": [95, 296, 651], "15500": 95, "20600": 95, "2860": [95, 296], "_static_reciproc": 95, "recirpoc": [95, 298], "static_reciproc": 95, "_static_remaind": 95, "static_remaind": 95, "_static_round": 95, "thevfunct": 95, "527": [95, 300, 651], "static_round": 95, "301": [95, 300, 651], "_static_sign": 95, "static_sign": 95, "_static_sin": 95, "static_sin": 95, "757": [95, 302, 651], "959": [95, 262, 302, 651], "279": [95, 302, 392, 414, 424, 558, 651, 653], "_static_sinh": 95, "static_sinh": 95, "835": [95, 303], "347": [95, 303], "721": [95, 303], "_static_sqrt": 95, "static_sqrt": 95, "_static_squar": 95, "static_squar": 95, "_static_subtract": 95, "static_subtract": 95, "_static_tan": 95, "static_tan": 95, "_static_tanh": 95, "static_tanh": 95, "995": [95, 308, 651], "9999": 95, "_static_trapz": 95, "static_trapz": 95, "_static_trunc": 95, "static_trunc": 95, "_static_trunc_divid": 95, "75j": [95, 145, 241, 270, 648], "01317055": [95, 241], "05634501": [95, 241], "115": [95, 241, 296, 651], "3461759": [95, 241], "524111": [95, 241], "644": [95, 242, 651], "305": [95, 100, 242, 651], "351": [95, 256, 296], "00613": [95, 256], "0154": [95, 256], "403": [95, 260], "428772": [95, 260], "649": [95, 262], "220": [95, 262], "865": [95, 262], "metho": [95, 269, 281], "imaginari": [95, 118, 128, 131, 134, 145, 159, 160, 238, 239, 240, 255, 257, 258, 260, 262, 270, 290, 292, 293, 300, 303, 304, 308, 355, 389, 392, 393, 436, 447, 645, 648, 651, 663, 769, 852], "4j": [95, 270, 392, 436, 611, 651, 653], "7j": [95, 96, 274, 297, 355, 389, 651], "956": [95, 280], "08746284": [95, 283], "32192809": [95, 283], "nuner": [95, 290], "413": [95, 296], "335": [95, 96, 297, 355], "345j": [95, 96, 297, 355], "static_angl": 95, "static_exp2": 95, "static_fmin": 95, "static_gcd": 95, "static_imag": 95, "static_logaddexp2": 95, "static_nan_to_num": 95, "static_r": 95, "_containerwithactivationexperiment": [96, 119], "_static_celu": 96, "formlat": 96, "static_celu": 96, "_static_elu": 96, "static_elu": 96, "_static_hardshrink": 96, "hard": [96, 314, 843, 882], "shrinkag": [96, 314, 324, 395, 509], "_static_hardsilu": 96, "20833333": [96, 315, 384], "29166666": [96, 315, 384], "66666669": [96, 119, 315, 384, 398, 525, 635, 654], "66666663": [96, 154, 315, 384, 648], "_static_hardtanh": 96, "3899": 96, "_static_scaled_tanh": 96, "931": 96, "71587813": 96, "88367474": 96, "00376701": [96, 321], "2285642": 96, "99999881": 96, "49999905": 96, "_static_silu": 96, "static_silu": 96, "27777028": [96, 323], "23947507": [96, 323], "0900332": [96, 323], "_static_softshrink": 96, "_static_tanhshrink": 96, "36634541": [96, 326], "02005103": [96, 326], "00262468": [96, 326], "_static_threshold": 96, "389999": [96, 316], "19722462": [96, 317], "84729779": [96, 317], "31326163": [96, 318], "46328258": [96, 318], "51301527": [96, 318], "79813886": [96, 318], "simplywrap": [96, 321], "54939651": [96, 321], "09999998": [96, 321, 633, 654], "09999999": [96, 321], "08336546": [96, 321], "0379949": [96, 321], "22856998": [96, 322], "42028043": [96, 322], "31868932": [96, 322], "static_logit": 96, "static_logsigmoid": 96, "34115386": 96, "64439666": 96, "24115384": 96, "55435526": 96, "07888974": 96, "00741899": 96, "26328245": 96, "00012302": 96, "static_prelu": 96, "static_relu6": 96, "static_selu": 96, "static_thresholded_relu": 96, "_containerwithconversionexperiment": [96, 119], "_containerwithcreationexperiment": [96, 119], "_static_trilu": 96, "blackman": [96, 329, 386], "00770143e": [96, 329], "49229857e": [96, 329], "hamming_window": [96, 386], "ham": [96, 331, 386], "4180": [96, 331], "8180": [96, 331], "hann_window": [96, 386], "hann": [96, 332, 386], "7500": [96, 332], "3455": [96, 332], "9045": [96, 332], "kaiser_bessel_derived_window": [96, 386], "suitabl": [96, 334, 335, 386, 665, 777, 800, 842, 843, 849, 866, 882], "spectral": [96, 334, 335, 386], "analysi": [96, 334, 335, 386, 882, 883], "kaiser": [96, 329, 334, 335, 386], "70710677": [96, 334, 523, 525], "18493208": [96, 334, 386], "9827513": [96, 334, 386], "kaiser_window": [96, 386], "static_kaiser_window": [96, 335], "2049": [96, 335], "8712": [96, 335], "0367": [96, 335, 386], "7753": [96, 335], "static_blackman_window": 96, "static_eye_lik": 96, "static_hamming_window": 96, "static_hann_window": 96, "static_hann": 96, "static_kaiser_bessel_derived_window": 96, "static_mel_weight_matrix": 96, "static_polyv": 96, "static_tril_indic": 96, "static_unsorted_segment_mean": 96, "static_unsorted_segment_min": 96, "static_unsorted_segment_sum": 96, "static_vorbis_window": 96, "vorbis_window": [96, 386], "vorbi": [96, 350, 386], "38268343": [96, 350, 656, 692], "92387953": [96, 350], "14943586": [96, 350, 386], "51644717": [96, 350], "85631905": [96, 350], "98877142": [96, 350], "tril_indic": [96, 386], "_containerwithdata_typeexperiment": [96, 119], "_containerwithdeviceexperiment": [96, 119], "_containerwithelementwiseexperiment": [96, 119], "0003": [96, 351, 656, 695, 798, 801], "0006": [96, 351, 379], "2345j": [96, 355], "5772": [96, 359], "9635": [96, 359], "4228": [96, 359], "9228": [96, 359], "57299206e": [96, 360, 361], "67773480e": [96, 360, 361], "20904985e": [96, 360, 361], "84270084": [96, 360, 361, 389], "99532223": [96, 360, 361], "99997795": [96, 360, 361], "mantissa": [96, 365, 389, 850], "frist": [96, 366, 389], "6055": [96, 367], "160": [96, 369], "10240": [96, 369], "60000038": [96, 370, 389, 656, 712], "0707": [96, 376, 389], "0579": [96, 376, 389], "static_allclos": 96, "static_amax": 96, "static_amin": 96, "static_binar": 96, "static_conj": 96, "static_copysign": 96, "static_count_nonzero": 96, "static_diff": 96, "static_digamma": 96, "57721537": 96, "96351004": 96, "static_erfc": 96, "15729921": 96, "00467773": [96, 360, 389], "static_erfinv": 96, "static_fix": 96, "static_float_pow": 96, "static_fmax": 96, "static_fmod": 96, "static_frexp": 96, "static_gradi": 96, "static_hypot": 96, "static_isclos": 96, "static_ldexp": 96, "static_lerp": 96, "90000057": [96, 370, 389], "70000076": [96, 370, 389], "55000019": [96, 370, 389], "05000019": [96, 370, 389], "static_modf": 96, "static_nansum": 96, "static_nextaft": 96, "static_signbit": 96, "static_sinc": 96, "636": 96, "090": 96, "070": 96, "static_sparsify_tensor": 96, "static_xlogi": 96, "static_zeta": 96, "0244": [96, 379], "_containerwithgeneralexperiment": [96, 119], "_static_reduc": 96, "static_reduc": 96, "_containerwithgradientsexperiment": [96, 119], "_containerwithimageexperiment": [96, 119], "_containerwithlayersexperiment": [96, 119], "_static_fft": 96, "static_fft": 96, "_static_sliding_window": 96, "673": [96, 414], "0507": [96, 414], "79711437": [96, 392, 414, 424], "94867325": [96, 392, 414, 424], "74089146": [96, 392, 414, 424], "25980937": [96, 392, 414, 424], "64958102": [96, 392, 414, 424], "2442648": [96, 392, 414, 424], "247306": [96, 426], "908323j": [96, 426], "494955": [96, 426], "90395j": [96, 426], "static_adaptive_avg_pool1d": 96, "static_adaptive_avg_pool2d": 96, "static_adaptive_max_pool2d": 96, "static_adaptive_max_pool3d": 96, "static_avg_pool1d": 96, "static_avg_pool2d": 96, "static_avg_pool3d": 96, "static_dct": 96, "253": [96, 303, 651], "515": [96, 662, 762], "467": 96, "static_dft": 96, "static_embed": 96, "static_idct": 96, "93732834": [96, 392, 414], "75048852": [96, 392, 414], "29723358": [96, 392, 424], "6950531": 96, "93914509": 96, "88008738": 96, "18951225": 96, "06697273": [96, 392, 424], "57439804": 96, "68861485": [96, 392, 424], "41308832": [96, 392, 424], "0700836": 96, "2449036": 96, "6711426": 96, "514": 96, "501709": 96, "4924011": 96, "static_ifft": 96, "static_ifftn": 96, "static_interpol": 96, "static_max_pool1d": 96, "static_max_pool2d": 96, "max_pool2dd": 96, "static_max_pool3d": 96, "static_max_unpool1d": 96, "static_rfft": 96, "static_rfftn": 96, "static_rnn": 96, "step_funct": [96, 392, 438], "initial_st": [96, 392, 438, 655, 680], "go_backward": [96, 392, 438], "unrol": [96, 392, 438, 655, 681, 870], "input_length": [96, 392, 438], "zero_output_for_mask": [96, 392, 438], "return_all_output": [96, 392, 438], "rnn": [96, 392, 882], "tempor": [96, 392, 438], "state_s": [96, 392, 438], "while_loop": [96, 392, 438, 647], "otput": [96, 392, 438], "funciton": [96, 392, 438], "static_stft": 96, "_containerwithlinearalgebraexperiment": [96, 119], "933034": [96, 393, 443], "eigenvealu": [96, 446, 691], "xx": [96, 446, 448, 691], "37228107": [96, 446, 691], "3722816": [96, 446, 691], "8245648": [96, 446, 691], "41597357": [96, 446, 691], "56576747": [96, 446, 691], "9093767": [96, 446, 691], "56155": [96, 447], "82842": [96, 447], "static_adjoint": 96, "static_batched_out": 96, "static_cond": 96, "static_diagflat": 96, "static_dot": 96, "static_eig": 96, "static_eigh_tridiagon": 96, "static_eigv": 96, "static_higher_order_mo": 96, "static_initialize_tuck": 96, "static_kron": 96, "kroneck": [96, 393, 452, 453], "static_make_svd_non_neg": 96, "static_matrix_exp": 96, "static_mode_dot": 96, "static_multi_dot": 96, "static_multi_mode_dot": 96, "static_partial_tuck": 96, "static_svd_flip": 96, "static_tensor_train": 96, "static_truncated_svd": 96, "static_tt_matrix_to_tensor": 96, "tt_matrix": [96, 393, 467], "output_tensor": [96, 116, 393, 467], "static_tuck": 96, "_containerwithlossesexperiment": [96, 119], "_static_hinge_embedding_loss": 96, "_static_huber_loss": 96, "static_huber_loss": 96, "0575": [96, 470], "_static_kl_div": 96, "_static_l1_loss": 96, "static_l1_loss": 96, "_static_log_poisson_loss": 96, "static_log_poisson_loss": 96, "_static_poisson_nll_loss": 96, "06446016": 96, "55611551": 96, "30244565": [96, 474], "_static_smooth_l1_loss": 96, "static_smooth_l1_loss": 96, "_static_soft_margin_loss": 96, "3890561": [96, 473], "413159": [96, 473], "06429195": [96, 474], "43333333": [96, 475], "10666666": [96, 475], "_containerwithmanipulationexperiment": [96, 119], "_static_fill_diagon": 96, "_static_put_along_axi": 96, "_static_tak": 96, "69999981": [96, 324, 384, 395, 485, 510], "_static_trim_zero": 96, "_static_unflatten": 96, "_static_unique_consecut": 96, "ary1": [96, 395, 479, 480, 481], "ary2": [96, 395, 479, 480, 481], "broadcast_shap": [96, 122, 395, 798, 800], "static_concat_from_sequ": [96, 486], "30192195": [96, 498], "static_as_strid": 96, "static_atleast_1d": 96, "static_atleast_2d": 96, "static_atleast_3d": 96, "static_broadcast_shap": 96, "static_column_stack": 96, "static_dsplit": 96, "static_dstack": 96, "static_expand": 96, "static_flatten": 96, "static_fliplr": 96, "static_flipud": 96, "static_fold": 96, "static_heavisid": 96, "static_hsplit": 96, "static_hstack": 96, "static_i0": 96, "static_matric": 96, "static_moveaxi": 96, "static_pad": 96, "static_partial_fold": 96, "static_partial_tensor_to_vec": 96, "static_partial_unfold": 96, "static_partial_vec_to_tensor": 96, "static_rot90": 96, "static_soft_threshold": 96, "static_take_along_axi": 96, "static_top_k": 96, "static_unfold": 96, "static_vsplit": 96, "static_vstack": 96, "_containerwithnormsexperiment": [96, 119], "16903085": [96, 523, 525], "50709254": [96, 523, 525], "84515423": [96, 523, 525], "44183609": [96, 523, 525], "56807494": [96, 523, 525], "69431382": [96, 523, 525], "static_batch_norm": 96, "static_group_norm": 96, "static_instance_norm": 96, "static_l1_norm": 96, "static_l2_norm": 96, "static_lp_norm": 96, "12500000": 96, "37500000": 96, "62500000": 96, "27500000": 96, "35000000": 96, "42500000": 96, "0000000": 96, "5000000": 96, "2500000": 96, "_containerwithrandomexperiment": [96, 119], "43643127": [96, 528], "32325703": [96, 528], "24031169": [96, 528], "34251311": [96, 528], "31692529": [96, 528], "3405616": [96, 528], "5319725": [96, 528], "22458365": [96, 528], "24344385": [96, 528], "26588406": [96, 528], "61075421": [96, 528], "12336174": [96, 528], "51142915": [96, 528], "25041268": [96, 528], "23815817": [96, 528], "64042903": [96, 528], "25763214": [96, 528], "10193883": [96, 528], "31624692": [96, 528], "46567987": [96, 528], "21807321": [96, 528], "37677699": [96, 528], "39914594": [96, 528], "22407707": [96, 528], "static_bernoulli": 96, "static_beta": 96, "static_dirichlet": 96, "static_gamma": 96, "static_poisson": 96, "_containerwithsearchingexperiment": [96, 119], "static_unravel_index": 96, "_containerwithsetexperiment": [96, 119], "_containerwithsortingexperiment": [96, 119], "invert_permut": [96, 402], "static_invert_permut": 96, "static_lexsort": [96, 108], "_containerwithstatisticalexperiment": [96, 119], "_static_cummax": 96, "static_cummax": 96, "_static_cummin": 96, "static_cummin": 96, "_static_nanmin": 96, "static_nanmin": 96, "func_nam": [96, 543, 841, 852, 853, 858, 862], "static_bincount": 96, "static_corrcoef": 96, "static_cov": [96, 404, 540], "static_histogram": 96, "static_igamma": 96, "static_lgamma": 96, "static_median": 96, "static_nanmean": 96, "static_nanmedian": 96, "static_nanprod": 96, "static_quantil": 96, "_containerwithutilityexperiment": [96, 119], "static_optional_get_el": 96, "_containerwithgener": [97, 119], "_static_all_equ": 97, "static_all_equ": 97, "_static_array_equ": 97, "a0": [97, 395, 485], "static_array_equ": 97, "_static_assert_supports_inplac": 97, "_static_clip_matrix_norm": 97, "static_clip_matrix_norm": 97, "849": [97, 558, 653], "_static_clip_vector_norm": 97, "static_clip_vector_norm": 97, "_static_einops_rearrang": 97, "static_einops_rearrang": 97, "_static_einops_reduc": 97, "static_einops_reduc": 97, "29333329": [97, 564, 653], "53000069": [97, 564, 653], "39666676": [97, 564, 653], "20666695": [97, 564, 653], "_static_einops_repeat": 97, "static_einops_repeat": 97, "_static_exist": 97, "_static_fourier_encod": 97, "static_fourier_encod": 97, "classivi": [97, 664, 772], "89858720e": 97, "79717439e": 97, "_static_gath": 97, "static_gath": 97, "_static_gather_nd": 97, "static_gather_nd": 97, "_static_get_num_dim": 97, "static_get_num_dim": 97, "_static_has_nan": 97, "leafwis": 97, "static_has_nan": 97, "_static_inplace_decr": 97, "_static_inplace_incr": 97, "_static_inplace_upd": 97, "_static_is_arrai": 97, "static_is_arrai": 97, "_static_is_ivy_arrai": 97, "static_is_ivy_arrai": 97, "_static_is_native_arrai": 97, "static_is_native_arrai": 97, "_static_scatter_flat": 97, "_static_scatter_nd": 97, "static_scatter_nd": 97, "_static_s": 97, "static_s": 97, "_static_stable_divid": 97, "22222222": 97, "11111111": 97, "857": [97, 610, 653], "444": 97, "_static_stable_pow": 97, "00012": [97, 611, 653], "00016": [97, 98, 611, 639, 653, 654], "00001": [97, 611, 653, 798], "00032": [97, 611], "00256": [97, 611], "1679638": [97, 611], "395": [97, 611], "16777383": [97, 611], "_static_supports_inplace_upd": 97, "_static_to_list": 97, "static_to_list": 97, "_static_to_numpi": 97, "static_to_numpi": 97, "_static_to_scalar": 97, "static_to_scalar": 97, "_static_value_is_nan": 97, "452": 97, "static_value_is_nan": 97, "833": [97, 559], "items": [97, 118, 653], "static_isin": 97, "static_items": 97, "static_strid": 97, "425": [97, 631], "_containerwithgradi": [98, 119], "_static_stop_gradi": 98, "static_stop_gradi": 98, "976": [98, 308, 633, 651, 654], "49e": [98, 633, 654], "74e": [98, 633, 654], "95e": [98, 633, 654], "024": [98, 633, 654], "096": [98, 633, 654], "216": [98, 101, 633, 654, 711], "626": [98, 633, 654], "en": [98, 633, 634, 654], "wikipedia": [98, 633, 634, 654], "wiki": [98, 633, 634, 654], "stochastic_gradient_desc": [98, 633, 634, 654], "01099": [98, 634], "01003": [98, 634, 654], "01015": [98, 634, 654], "99936122": [98, 634, 654], "99936116": [98, 634, 654], "99936128": [98, 634, 654], "99936104": [98, 634, 654], "w_new": [98, 637, 654], "708": [98, 639, 654], "445": [98, 639, 654], "6e": [98, 639, 654], "00036": [98, 639, 654], "00049": [98, 639, 654], "layerwis": [98, 640, 654], "01132035": [98, 640, 654], "22264051": [98, 640, 654], "2056601": [98, 640, 654], "1324538": [98, 640, 654], "56490755": [98, 640, 654], "96622658": [98, 640, 654], "90848625": [98, 640, 654], "93616199": [98, 640, 654], "77232409": [98, 640, 654], "_containerwithimag": [99, 119], "_containerwithlay": [100, 119], "_static_conv1d": 100, "static_conv1d": 100, "_static_conv1d_transpos": 100, "static_conv1d_transpos": 100, "112": [100, 656, 666, 670, 701, 781], "_static_conv2d": 100, "ey": [100, 648, 655, 671, 677, 868, 870], "static_conv2d": 100, "_static_conv2d_transpos": 100, "static_conv2d_transpos": 100, "_static_conv3d": 100, "fdfh": [100, 673], "static_conv3d": 100, "_static_conv3d_transpos": 100, "static_conv3d_transpos": 100, "_static_depthwise_conv2d": 100, "static_depthwise_conv2d": 100, "_static_dropout": 100, "static_dropout": 100, "_static_dropout1d": 100, "static_dropout1d": 100, "_static_dropout2d": 100, "_static_dropout3d": 100, "_static_linear": 100, "278": [100, 655, 678, 679], "static_linear": 100, "195": 100, "_static_lstm_upd": 100, "_static_multi_head_attent": 100, "_static_reduce_window": 100, "_static_scaled_dot_product_attent": 100, "static_scaled_dot_product_attent": 100, "39999962": [100, 655, 678, 679], "19999695": [100, 679], "11600018": [100, 679], "88399887": [100, 679], "306": [100, 655, 679], "19999981": [100, 314, 327, 384, 392, 436, 655, 678, 685], "59249449": [100, 655, 685], "68226194": [100, 655, 685], "19603825": [100, 655, 685], "9960382": [100, 655, 685], "26894283": [100, 655, 685], "40236187": [100, 655, 685], "39999437": [100, 655, 685], "59999037": [100, 655, 685], "35046196": [100, 655, 685], "54282808": [100, 655, 685], "39989519": [100, 655, 685], "5998764": [100, 655, 685], "_containerwithlinearalgebra": [101, 119], "_static_choleski": 101, "static_choleski": 101, "577": [101, 656, 686], "707": [101, 656, 686], "static_rol": [101, 103], "_static_cross": 101, "static_cross": 101, "_static_det": 101, "_static_diag": 101, "_static_diagon": 101, "static_diagon": 101, "_static_eigh": 101, "_static_eigvalsh": 101, "static_eigvalsh": 101, "51572949": [101, 656, 693], "17091519": [101, 656, 693], "3448143": [101, 656, 693], "35898387e": [101, 656, 693], "46410179e": [101, 656, 693], "_static_inn": 101, "static_inn": 101, "_static_inv": 101, "static_inv": 101, "_static_matmul": 101, "matul": 101, "static_matmul": 101, "_static_matrix_norm": 101, "deimens": 101, "static_matrix_norm": 101, "_static_matrix_pow": 101, "_static_matrix_rank": 101, "static_matrix_rank": 101, "_static_matrix_transpos": 101, "static_matrix_transpos": 101, "_static_out": 101, "n1": [101, 156, 648], "n2": [101, 156, 648], "static_out": [101, 701], "_static_pinv": 101, "static_pinv": 101, "0426": 101, "0964": 101, "0605": 101, "1368": 101, "_static_qr": 101, "static_qr": 101, "31622777": [101, 656, 703], "9486833": [101, 656, 703], "4472136": [101, 656, 703], "89442719": [101, 656, 703], "16227766": [101, 656, 703], "42718872": [101, 656, 703], "63245553": [101, 656, 703], "47213595": [101, 656, 703], "81377674": [101, 656, 703], "_static_slogdet": 101, "static_slogdet": 101, "6931472": 101, "0986123": 101, "_static_solv": 101, "_static_svd": 101, "static_svd": 101, "au": 101, "aS": 101, "avh": 101, "bvh": 101, "_static_svdv": 101, "_static_tensordot": 101, "_static_tensorsolv": 101, "_static_trac": 101, "static_trac": 101, "_static_vand": 101, "static_vand": 101, "343": [101, 300, 651, 711], "729": [101, 711], "_static_vecdot": 101, "_static_vector_norm": 101, "static_vector_norm": 101, "77359247": [101, 713], "_static_vector_to_skew_symmetric_matrix": 101, "09861231": [101, 656, 704], "static_general_inner_product": 101, "3475602": [101, 706], "93765765": [101, 706], "58776021": [101, 706], "10416126": [101, 706], "80644298": [101, 706], "87024701": [101, 706], "48127627": [101, 706], "79101127": [101, 706], "98288572": [101, 706], "68917423": [101, 706], "_containerwithloss": [102, 119], "_static_binary_cross_entropi": 102, "static_binary_cross_entropi": 102, "511": 102, "223": 102, "357": 102, "_static_cross_entropi": 102, "static_cross_entropi": 102, "20397282": 102, "83258148": 102, "60943794": [102, 656, 704], "_static_sparse_cross_entropi": 102, "static_sparse_cross_entropi": 102, "36354783": [102, 657, 715], "14733934": [102, 657, 715], "880099": [102, 716], "3408049": [102, 716], "0134323": [102, 717], "9408049": [102, 717], "_containerwithmanipul": [103, 119], "_static_clip": 103, "static_clip": 103, "_static_concat": 103, "_static_constant_pad": 103, "static_constant_pad": 103, "_static_expand_dim": 103, "static_expand_dim": 103, "container_axi": [103, 658, 724], "_static_flip": 103, "static_flip": 103, "_static_permute_dim": 103, "static_permute_dim": 103, "_static_repeat": 103, "static_repeat": 103, "_static_reshap": 103, "static_reshap": 103, "_static_rol": 103, "positivclip": 103, "_static_split": 103, "static_split": 103, "_static_squeez": 103, "static_squeez": 103, "_static_stack": 103, "leavv": 103, "static_stack": 103, "_static_swapax": 103, "_static_til": 103, "static_til": 103, "_static_unstack": 103, "static_unstack": 103, "_static_zero_pad": 103, "repreat": [103, 727], "_containerwithnorm": [104, 119], "34198591": [104, 661, 759], "04274819": [104, 661, 759], "29923761": [104, 661, 759], "24053511": [104, 661, 759], "62221265": [104, 759], "20277636": [104, 759], "41943574": [104, 759], "83710337": [104, 759], "_containerwithrandom": [105, 119], "_static_multinomi": 105, "_static_randint": 105, "static_randint": 105, "_static_random_norm": 105, "static_random_norm": 105, "651": 105, "_static_random_uniform": 105, "static_random_uniform": 105, "481": 105, "0999": 105, "_static_shuffl": 105, "static_shuffl": 105, "431": [105, 762], "274": [105, 762], "_containerwithsearch": [106, 119], "_static_argmax": 106, "static_argmax": 106, "_static_argmin": 106, "static_argmin": 106, "_static_argwher": 106, "static_argwher": 106, "_static_nonzero": 106, "_static_wher": 106, "static_wher": 106, "_containerwithset": [107, 119], "_static_unique_al": 107, "static_unique_al": 107, "_static_unique_count": 107, "static_unique_count": 107, "_static_unique_invers": 107, "static_unique_invers": 107, "_static_unique_valu": 107, "_containerwithsort": [108, 119], "_static_argsort": 108, "static_argsort": 108, "_static_searchsort": 108, "_static_sort": 108, "static_sort": 108, "static_msort": 108, "_containerwithstatist": [109, 119], "_static_cumprod": 109, "static_cumprod": 109, "_static_cumsum": 109, "static_cumsum": 109, "_static_min": 109, "_static_prod": 109, "static_prod": 109, "11000001": [109, 785], "23100001": [109, 785], "30800003": [109, 666, 785], "_static_sum": 109, "_static_var": 109, "static_var": 109, "12666667": [109, 666, 788], "11555555": [109, 666, 788], "rtype": [109, 781, 829], "respectv": [109, 786], "81649649": [109, 786], "94280904": [109, 786], "509902": [109, 666, 786], "2472192": [109, 786], "44948983": [109, 786], "41421354": [109, 786], "6666667": [109, 788], "_containerwithutil": [110, 119], "_static_al": 110, "static_al": 110, "_static_ani": 110, "static_ani": 110, "add_ivy_container_instance_method": 111, "containerexampl": 111, "factorized_tensor": [112, 113, 114, 115, 116, 117, 120], "factorizedtensor": [112, 113, 114, 115, 116, 117], "matrix_or_tensor": 112, "to_unfold": [112, 113, 114, 115, 116, 117], "to_vec": [112, 113, 114, 115, 116, 117], "cp_tensor": [113, 114], "cptensor": [113, 114, 340, 386], "cp_copi": 113, "cp_flip_sign": 113, "s_i": [113, 114], "normalisation_weight": [113, 114], "normalised_factor": [113, 114], "cp_lstsq_grad": 113, "return_loss": 113, "nabla": 113, "mathcal": 113, "mathbf": 113, "factor_matric": 113, "cp_gradient": 113, "quantiti": 113, "cp_mode_dot": 113, "keep_dim": [113, 117], "cp_multi_mode_dot": 113, "cp_n_param": 113, "tensor_shap": [113, 115, 116, 117], "n_param": [113, 114, 115, 116, 117], "cp_norm": 113, "cp_to_tensor": 113, "khatria": 113, "rao": [113, 393, 452], "khatri": [113, 393, 452], "cp_normal": 113, "normalis": [113, 114], "u_1": [113, 114], "u_n": [113, 114], "v_1": [113, 114], "v_n": [113, 114], "v_k": [113, 114], "u_k": [113, 114], "absorb": [113, 114], "refold": [113, 395, 494, 506], "cp_to_unfold": 113, "ie": 113, "s_u_i": 113, "exploit": 113, "khatri_rao": [113, 393], "cp_to_vec": 113, "unfolding_dot_khatri_rao": 113, "mttkrp": 113, "validate_cp_rank": 113, "percent": [113, 116], "validate_cp_tensor": 113, "parafac2_tensor": 114, "parafac2tensor": [114, 341, 386], "apply_parafac2_project": 114, "evolv": [114, 882], "b_i": 114, "ijk": [114, 830], "sum_r": 114, "a_": 114, "ir": [114, 883], "jr": 114, "kr": 114, "coupl": [114, 842, 846, 882], "factoris": 114, "i1": [114, 404, 543], "classmethod": [114, 121, 122, 803], "from_cptensor": 114, "parafac2_tensor_ok": 114, "parafac2_normalis": 114, "normalised_project": 114, "parafac2_to_slic": 114, "slice_idx": 114, "frontal": 114, "a_i": 114, "j_i": 114, "b_": 114, "reformul": 114, "p_i": 114, "orthogon": [114, 340, 344, 386, 393, 446, 462, 468, 656, 691, 692], "sum_": 114, "ijr": 114, "constraint": [114, 830, 850, 860], "projection_matric": 114, "parafac2_to_tensor": 114, "construct": [114, 658, 734, 814, 817, 818, 819, 864, 870, 871, 882], "uneven": 114, "parafac2_to_unfold": 114, "parafac2_to_vec": 114, "validate_parafac2_tensor": 114, "cp": [114, 340, 386, 843], "tr_tensor": 115, "trtensor": [115, 342, 386], "tr_n_param": 115, "tr_to_tensor": 115, "tr_to_unfold": 115, "tr_to_vec": 115, "validate_tr_rank": 115, "validate_tr_tensor": 115, "tt_tensor": 116, "_tt_n_param": 116, "mp": [116, 343, 386], "index_upd": 116, "pad_tt_rank": 116, "factor_list": 116, "n_pad": 116, "pad_boundari": 116, "ring": 116, "bond": 116, "padded_factor_list": 116, "tt_to_tensor": 116, "assembl": [116, 393, 467], "tt_to_unfold": 116, "reassembl": 116, "tt_to_vec": 116, "validate_tt_rank": 116, "constant_rank": 116, "allow_overparametr": 116, "proport": [116, 813], "realiz": [116, 882], "validate_tt_tensor": 116, "tucker_tensor": 117, "tucker_copi": 117, "tucker_mode_dot": 117, "tucker_n_param": 117, "tucker_norm": 117, "tucker_to_tensor": 117, "skip_factor": 117, "transpose_factor": 117, "tucker_to_unfold": 117, "tucker_to_vec": 117, "validate_tucker_rank": 117, "fixed_mod": 117, "validate_tucker_tensor": 117, "_bisection_root_find": 117, "max_it": 117, "__abs__": [118, 119], "__add__": [118, 119, 846, 849, 852, 853, 857, 862, 863], "__eq__": [118, 119], "__ge__": [118, 119], "__gt__": [118, 119, 868], "__le__": [118, 119], "__lt__": [118, 119], "__ne__": [118, 119], "__pow__": [118, 119], "69678056": 118, "59876156": 118, "82660675": 118, "__radd__": [118, 119, 852, 853, 862], "__rrshift__": [118, 119], "__rshift__": [118, 119], "__rsub__": [118, 119], "__sub__": [118, 119, 846, 849, 852, 857], "__truediv__": [118, 119, 846, 849, 852], "__xor__": [118, 119], "referenc": [118, 854, 861], "resid": [118, 122, 658, 724, 862, 870], "mt": 118, "eq": 119, "ge": 119, "le": 119, "ne": 119, "75979435": 119, "52153397": 119, "13532257": 119, "rshift": 119, "truediv": 119, "nested_arrai": [121, 122, 123, 848], "nestedarrai": 121, "nested_rank": [121, 122, 123], "inner_shap": [121, 122, 123], "nestedarraybas": [121, 122, 123], "from_row_length": 121, "row_length": 121, "from_row_split": 121, "row_split": 121, "ragged_map": 122, "ragged_multi_map": 122, "ragged_arrai": 122, "ragged_multi_map_in_funct": 122, "replace_ivy_arrai": 122, "unbind": 122, "nestedarrayelementwis": 123, "strictli": [128, 131, 134, 264, 645, 651, 857, 861], "24000001": [128, 645], "703": [129, 645], "683": [129, 645], "408": [129, 645], "313": [129, 645], "437": [129, 645], "40337825": [130, 645], "56114835": [130, 645], "20788449": [130, 645], "0768": [133, 645], "231": [133, 645], "\u03b2": [134, 645], "body_fn": [138, 139, 141, 647], "bodi": [138, 141, 647, 845, 865], "lst": [138, 647], "orelse_fn": [139, 647], "body1": [140, 647], "body2": [140, 647], "test_fn": [141, 647, 796, 835], "repeatedli": [141, 647, 660, 749, 865], "ml_framework": [142, 648], "distanc": [142, 648], "adjac": [142, 648], "nestedsequ": [143, 144, 648], "typevar": [143, 144, 648], "supportsbufferprotocol": [143, 144, 648], "static_copy_arrai": [146, 648], "intdtyp": [149, 160, 166, 178, 189, 194, 201, 207, 648, 649], "pycapsul": [150, 161, 648], "interchang": [150, 161, 648, 658, 733], "plu": [151, 648], "x00b": [151, 648], "x00d": [151, 648], "x00e": [151, 648], "41588834": [155, 648], "7827941": [155, 648], "6227766": [155, 648], "23413252": [155, 648], "n3": [156, 648], "xv": [156, 648], "yv": [156, 648], "x_nativ": [157, 648, 861], "y_nativ": [157, 648], "z_nativ": [157, 648], "d_type": [159, 648], "col": [164, 345, 386, 648], "primari": [164, 183, 184, 216, 217, 345, 386, 402, 533, 568, 569, 648, 649, 650, 653, 799, 801, 841, 844, 847, 850, 859, 861, 862, 864, 865, 868, 872, 874], "upward": [164, 345, 386, 648], "downward": [164, 345, 386, 648], "2xn": [164, 345, 386, 648], "subarrai": [164, 345, 386, 648], "closest": [174, 253, 263, 264, 300, 310, 649, 651, 865, 868], "xtype": [174, 649], "ytype": [174, 649], "native_uint16": [174, 649], "complexdtyp": [175, 189, 198, 649], "set_default_complex_dtyp": [175, 204, 649], "4294": [175, 177, 649], "967346": [175, 177, 649], "set_default_dtyp": [176, 205, 649, 850, 858], "floatdtyp": [177, 200, 649], "set_default_float_dtyp": [177, 186, 198, 206, 649, 850], "int_dtyp": [178, 201, 649], "set_default_int_dtyp": [178, 186, 207, 649, 850], "4294967346": [178, 179, 649], "uint_dtyp": [179, 202, 649], "uint": [179, 194, 202, 208, 649, 850, 863], "uintdtyp": [179, 194, 202, 208, 649], "set_default_uint_dtyp": [179, 186, 208, 649], "native_bool": [181, 649], "ieee": [182, 240, 257, 262, 280, 290, 299, 304, 307, 646, 649, 651], "754": [182, 240, 257, 262, 280, 290, 299, 304, 307, 646, 649, 651], "smallest_norm": [182, 649], "bfloat16": [183, 649, 798, 799, 850, 862, 865, 866], "unsupport": [184, 217, 569, 649, 650, 653, 793, 796, 839, 842, 855, 862], "encapsul": [185, 649], "314": [185, 297, 355, 389, 649, 651], "9223372036854775808": [185, 649], "9223372036854775807": [185, 649], "65535": [185, 649], "4294967295": [185, 649], "native_uint8": [187, 649], "hashabl": [191, 649], "type1": [195, 649], "type2": [195, 649], "array_api_promot": [195, 196, 649, 798, 799], "unexpect": [196, 264, 649, 651, 850], "default_complex_dtyp": [198, 649], "default_dtype_stack": [199, 205, 649], "unset_default_dtyp": [199, 649], "native_uint64": [199, 649], "default_float_dtyp": [200, 649, 850], "default_int_dtyp": [201, 207, 649, 850], "default_uint_dtyp": [202, 208, 649], "ret1": [203, 649], "ret2": [203, 649], "default_complex_dtype_stack": [204, 649], "default_float_dtype_stack": [206, 649], "native_float16": [209, 649], "unmodifi": [211, 650, 847, 850], "aliv": [218, 223, 225, 572, 592, 593, 650, 653, 851], "139740789224448": [218, 650], "process_specif": [224, 236, 650], "percentag": [224, 650], "ram": [224, 232, 236, 650], "alon": [224, 236, 650, 856, 865], "036902561555": [224, 650], "7024003467681645": [224, 650], "as_native_dev": [224, 650], "7095597456708771": [224, 650], "attr_onli": [225, 650], "soft_device_mod": [227, 235, 650], "chunk": [228, 229, 230, 650], "split_factor": [228, 650, 854], "max_chunk_s": [230, 650], "chunk_siz": [230, 650], "input_ax": [230, 650], "output_ax": [230, 650], "fed": [230, 650], "fist": [230, 650], "gb": [232, 236, 650, 842, 855], "66700032": [232, 650], "589934592": [232, 650], "219563008": [236, 650], "902400346": [236, 650], "525205504": [236, 650], "na": [237, 651, 865], "noqa": [237, 304, 651, 814, 824, 863], "princip": [238, 242, 244, 376, 389, 651], "codomain": [238, 239, 242, 243, 244, 245, 254, 255, 260, 262, 278, 279, 281, 302, 303, 304, 307, 308, 376, 389, 651, 853], "\u03c0": [238, 242, 244, 245, 646, 651], "3\u03c0": [238, 245, 651], "unspecifi": [238, 239, 243, 246, 255, 260, 262, 264, 299, 303, 304, 308, 393, 446, 651, 656, 658, 691, 692, 732, 861], "\u03c0j": [239, 243, 246, 278, 280, 651], "3\u03c0j": [239, 278, 280, 651], "x1_i": [240, 245, 247, 249, 250, 251, 252, 257, 258, 264, 268, 269, 276, 277, 282, 284, 286, 287, 290, 293, 295, 299, 306, 651, 845], "2019": [240, 257, 262, 280, 290, 651, 882], "commut": [240, 651], "dj": [240, 257, 290, 651], "z1": [240, 651], "z2": [240, 651], "yj": [241, 651], "nanj": [243, 651], "809": [243, 651], "569": [243, 651], "733": [243, 651], "notat": [245, 651, 666, 781], "denot": [245, 651, 816], "quadrant": [245, 651], "rai": [245, 651], "bitwis": [247, 250, 252, 287, 651], "170": [251, 651], "243": [251, 651], "xor": [252, 287, 651], "654": [254, 651], "ci": [255, 260, 262, 303, 651, 845, 850, 856, 863, 865, 872], "368": [255, 651], "670": [255, 651], "202": [255, 651, 845], "548": [255, 651], "1490": [255, 651], "57079633": [256, 651], "14159265": [256, 651], "71238898": [256, 651], "28318531": [256, 651], "02617994": [256, 651], "87266463": [256, 651], "01919862": [256, 651], "03839725": [256, 651], "05759586": [256, 651], "07679449": [256, 651], "09599311": [256, 651], "11519173": [256, 651], "35081118": [256, 651], "88139129": [256, 651], "underflow": [257, 264, 651, 656, 704, 850], "textbook": [257, 290, 651], "frac": [257, 279, 281, 301, 303, 307, 392, 398, 420, 421, 425, 426, 519, 521, 651], "ac": [257, 290, 651, 829, 830], "bd": [257, 290, 651], "bc": [257, 290, 651, 829, 830], "versu": [257, 290, 651], "riemann": [257, 290, 651], "sphere": [257, 290, 651], "c99": [257, 290, 651], "infinit": [257, 290, 304, 651], "unlik": [257, 290, 651, 845, 852], "698": [257, 651], "truth": [258, 268, 269, 276, 277, 293, 394, 470, 651, 793, 795, 806, 839, 855, 862, 865], "32862675": [259, 651], "67780113": [259, 651], "11246294": [259, 651], "42839241": [259, 651], "52050018": [259, 651], "16799599": [259, 651], "30787992": [259, 651], "43796915": [259, 651], "98667163": [259, 651], "79690808": [259, 651], "88020504": [259, 651], "91031402": [259, 651], "95228523": [259, 651], "96610528": [259, 651], "cut": [260, 262, 302, 303, 304, 307, 651, 876], "08553692": [260, 651], "567": [260, 651], "00344786": [260, 651], "76297021": [260, 651], "197948": [260, 651], "53253174": [260, 651], "fdlibm": [262, 280, 651], "compliant": [262, 280, 285, 286, 352, 353, 389, 651, 666, 782, 783, 784, 786], "potenti": [262, 280, 651, 841, 842, 850, 862, 869], "632": [262, 651], "20e": [262, 651], "72e": [262, 651, 798], "greatest": [263, 264, 267, 651], "pep": [264, 651, 857], "disambigu": [264, 651, 860], "overload": [264, 651, 865], "led": [264, 651, 845], "subtl": [264, 651, 850], "bug": [264, 651, 835, 841, 843, 848, 855, 856, 862, 865, 873], "ambigu": [264, 651], "semant": [264, 299, 395, 510, 651, 850, 870, 883], "ill": [264, 651, 800], "surpris": [264, 651, 872], "arrau": [270, 651], "log_": [279, 281, 651], "742": [280, 651], "negat": [292, 355, 389, 651], "52095687": [295, 651], "92457771": [295, 651], "49372482": [295, 651], "22738838": [295, 651], "5877228": [295, 651], "189": [296, 651, 660, 740], "252": [296, 651], "1150": [296, 651], "2890": [296, 651], "344": [296, 651], "355j": [297, 355, 389, 651], "55j": [297, 355, 389, 651], "primarili": [299, 651, 841, 849, 882, 884], "counterpart": [300, 651, 849, 859], "deliber": [300, 651, 868], "imprecis": [300, 651], "5654": [300, 651], "034": [300, 651], "433": [300, 636, 638, 651, 654], "signum": [301, 651], "textrm": [301, 651], "932": [302, 651], "746": [302, 651], "657": [302, 651], "indistinguish": [304, 651], "infti": [304, 651], "32455532": [304, 651], "89897949": [304, 651], "169": [304, 651], "analyt": [307, 651, 882], "pole": [307, 651], "546": [307, 651, 655, 679], "916": [307, 651], "996": [307, 651], "histor": [308, 651], "stem": [308, 651, 861], "older": [308, 651], "advis": [308, 651, 862], "462": [308, 651], "604": [308, 651], "997": [308, 651], "0375": [310, 651], "032": [310, 651], "57258511": [313, 384], "69999999": [313, 384, 644, 654], "90928203": [313, 384], "98772264": [313, 384], "99591321": [313, 384], "99863964": [313, 384], "69880581": [313, 384], "18126924": [313, 384], "79999995": [314, 324, 327, 384], "70000005": [314, 327, 384], "1241": [315, 384], "4897": [315, 384], "4090": [315, 384], "31008321": [315, 384], "1147176": [315, 384], "40899992": [315, 384], "20141329": [318, 384], "40318608": [318, 384], "48683619": [318, 384], "46328247": [318, 384], "59813893": [318, 384], "43748799": [318, 384], "parametr": [319, 384, 845, 865, 882], "71589994": [321, 325, 384], "14324772": [321, 325, 384], "70648694": [321, 325, 384], "54488957": [321, 325, 384], "10740992": [321, 325, 384], "19514863": [321, 325, 384], "6705687": [322, 384], "52016652": [322, 384], "40560818": [322, 384], "45630932": [322, 384], "2689": [323, 384], "7310": [323, 384], "7615": [323, 384], "2784": [323, 384], "7168": [323, 384], "8708": [323, 384], "4374": [323, 384], "1379": [323, 384], "0089": [323, 384], "59999991": [324, 384], "03597236": [326, 384], "43827677": [326, 384], "80100036": [326, 384], "12954807": [326, 384], "76459098": [326, 384], "20044947": [326, 384], "60000372": [326, 384], "taper": [329, 332, 386], "summat": [329, 386, 666, 781, 829, 830], "leakag": [329, 386], "wors": [329, 386], "y1": [330, 386], "0800": [331, 386], "3979": [331, 386], "9121": [331, 386], "5400": [331, 386], "han": [332, 386], "ith": [333, 386], "00726415": [334, 386], "9999736": [334, 386], "2773e": [335, 386], "0172e": [335, 386], "9294e": [335, 386], "4149": [335, 386], "9138": [335, 386], "5529": [335, 386], "multidimension": [337, 338, 386, 882], "normalise_factor": [340, 341, 386], "parafac2": [341, 386], "tr": [342, 386], "38268346": [350, 386], "38268352": [350, 386], "8563191": [350, 386], "14943568": [350, 386], "paddlepaddl": [352, 353, 389, 842], "cn": [352, 353, 389], "zh": [352, 353, 389], "amax_cn": [352, 389], "sentinel": [352, 353, 389, 666, 782, 784], "amin_cn": [353, 389], "4769": [361, 389], "position": [363, 389], "triangl": [367, 389], "999999e": [368, 389], "65999985": [370, 389], "52000046": [370, 389], "1500001": [370, 389, 564, 653], "11259177": [371, 389], "3574118": [371, 389], "20097363": [371, 389], "suppli": [375, 389, 395, 501, 829, 846, 848, 865], "217234": [376, 389], "hurwitz": [379, 389], "custom_grad_func": [381, 391], "bind": [381, 391, 841, 860, 882, 884], "upstream": [381, 391, 842, 843, 845, 855, 860], "primal": [382, 383, 391], "jacobian": [382, 383, 391, 638, 654, 872, 882], "cotang": [383, 391], "stanh": 384, "ndenumer": 386, "ndindex": 386, "random_cp": 386, "random_parafac2": 386, "random_tr": 386, "random_tt": 386, "random_tuck": 386, "bind_custom_gradient_funct": [391, 860], "jvp": 391, "vjp": 391, "h_out": [392, 409, 655, 680], "w_out": [392, 409], "area_interpol": 392, "01823380e": [392, 414, 424], "15385818e": [392, 414, 424], "36371466e": [392, 414, 424], "38763905e": [392, 414, 424], "60722279e": [392, 414, 424], "80319249e": [392, 414, 424], "05617893e": [392, 414, 424], "21500000e": [392, 414, 424], "24000015e": [392, 414, 424], "90734863e": [392, 414, 424], "10000420e": [392, 414, 424], "15899994e": [392, 414, 424], "24000053e": [392, 414, 424], "81469727e": [392, 414, 424], "09999847e": [392, 414, 424], "4135742": [392, 414, 424], "6779785": [392, 414, 424], "3770599": [392, 414, 424], "8719864": [392, 414, 424], "72109985": [392, 414, 424], "52869415": [392, 414, 424], "79182434": [392, 414, 424], "72489166": [392, 414, 424], "container_n": [392, 414, 424], "container_typ": [392, 414, 424, 653], "container_norm": [392, 414, 424], "1580677": [392, 414], "89422607": [392, 414], "86190414": [392, 414], "00041008": [392, 414], "75149155": [392, 414], "97056389": [392, 414], "87819386": [392, 414], "89381361": [392, 414], "50000000e": [392, 414, 424, 798], "22044605e": [392, 414, 424], "ed": [392, 416, 417, 418], "rest": [392, 395, 416, 417, 418, 487, 842, 848, 865, 871], "5d": [392, 418, 814], "emb": [392, 419], "51285338": [392, 419], "87183261": [392, 419], "2308116": [392, 419], "02733949e": [392, 420], "00j": [392, 420], "49660576e": [392, 420], "68178638e": [392, 420], "01j": [392, 420, 425], "98912367e": [392, 420], "21802426e": [392, 420, 425], "04549134e": [392, 420, 425], "82842712e": [392, 420, 425], "86902654e": [392, 420, 425], "25501143e": [392, 420, 425], "32978028e": [392, 420, 425], "52068201e": [392, 420, 425], "71158374e": [392, 420, 425], "generate_einsum_equ": 392, "get_interpolate_kernel": 392, "27279224e": [392, 424], "44232273e": [392, 424], "70464332e": [392, 424], "73454881e": [392, 424], "00902849e": [392, 424], "10039906e": [392, 424], "07022366e": [392, 424], "69506073": [392, 424], "93914604": [392, 424], "88008881": [392, 424], "18951607": [392, 424], "57439613": [392, 424], "15318303e": [392, 425], "15148591e": [392, 425], "19j": [392, 425], "25000000e": [392, 425], "35378602e": [392, 425], "02j": [392, 425], "65404249e": [392, 425], "17611649e": [392, 425], "24320230e": [392, 425], "79344813e": [392, 425], "22374531e": [392, 425], "45929364e": [392, 425], "14208718e": [392, 425], "07177031e": [392, 425], "indexerror": [392, 426, 437, 658, 724, 831, 854], "interp": [392, 868], "xp": [392, 427, 845], "fp": [392, 427], "nd": [392, 428], "tf_bicub": [392, 428, 868], "nearest_interpol": 392, "window_shap": [392, 434], "irfft": [392, 436], "silent": [392, 436], "discard": [392, 436], "1400001": [392, 436], "3999999": [392, 436], "3999996": [392, 436], "99038106j": [392, 437], "33012702": [392, 437], "23205081j": [392, 437], "33012702j": [392, 437], "superdiagon": [393, 444, 656, 689], "subdiagon": [393, 444, 656, 689], "eigendecomposit": [393, 446, 656, 691, 692], "qlq\u1d40": [393, 446, 656, 691, 692], "tridiagon": [393, 447], "38196602": [393, 447], "61803389": [393, 447], "35048741": [393, 447], "56710052": [393, 447], "06693714": [393, 447], "74234426": [393, 447], "56155282": [393, 447], "56155276": [393, 447], "82842714": [393, 447], "82842731": [393, 447, 656, 692], "necessarili": [393, 448, 846, 849], "generalis": [393, 449], "skip_matrix": [393, 452, 454], "khatri_rao_product": [393, 452], "kronecker_product": [393, 454], "n_column": [393, 454], "lu_factor": 393, "pivot": [393, 455], "lu": [393, 455, 456], "lu_solv": 393, "nnmf": [393, 457], "hoi": [393, 462, 468], "solve_triangular": 393, "unit_diagon": [393, 463], "solut": [393, 463, 656, 705, 798, 839, 841, 842, 843, 849, 850, 855, 863, 865, 868, 884], "determinist": [393, 464, 865], "borrow": [393, 464, 844], "extmath": [393, 464], "ivan": [393, 465], "oseledet": [393, 465], "scientif": [393, 465, 882], "2295": [393, 465], "2317": [393, 465], "2011": [393, 465], "convention": [394, 471], "explicit": [394, 395, 471, 510, 842, 849, 850, 860, 861, 862, 870, 872, 882], "555969": [394, 471], "223876": [394, 471], "111938": [394, 471], "42649534": [394, 471], "68651628": [394, 471], "51119184": [394, 471], "59967244": [394, 471], "mae": [394, 472], "666": [394, 472, 655, 656, 679, 697], "91097307": [394, 474], "3467": [394, 475], "0133": [394, 475], "0250": [394, 475], "0056": [394, 475], "0025": [394, 475], "0675": [394, 475], "6987": [394, 476], "1606": [394, 476], "3711": [394, 476], "4032": [394, 476], "6931": [394, 476], "whilst": [395, 479, 480, 481, 874, 882], "ary3": [395, 481], "check_scalar": 395, "force_integ": [395, 483], "force_posit": [395, 483], "mod": [395, 484, 845], "tall": [395, 490], "horizot": [395, 497], "shortcut": [395, 501, 842], "linear_ramp": [395, 501], "reflect": [395, 501, 843, 846, 861, 865], "ramp": [395, 501], "mirror": [395, 501, 841, 882], "padding_func": [395, 501], "iaxis_pad_width": [395, 501], "iaxi": [395, 501], "unalt": [395, 501], "pad_sequ": 395, "batch_first": [395, 502, 655, 680, 682], "seq_len": [395, 502, 655, 680], "feature_s": [395, 502], "max_len": [395, 502], "shorter": [395, 502], "seq1": [395, 502], "seq2": [395, 502], "put": [395, 507, 841, 865, 872], "mul": [395, 507, 835, 861], "conceptu": [395, 510, 883], "concern": [395, 510, 843, 844, 849, 850, 852, 861, 868, 869], "regard": [395, 510, 840, 849, 862, 863, 868], "mutat": [395, 510], "elimin": [395, 516, 842], "consecut": [395, 516], "batch_mean": [398, 519, 521], "batch_var": [398, 519, 521], "running_vari": [398, 519, 521], "local_response_norm": 398, "neighbour": [398, 524], "42857143": [398, 525], "5714286": [398, 525], "multivari": [399, 528], "bayesian": [399, 528], "supposedli": [402, 532], "indirect": [402, 533], "secondari": [402, 533], "is_ivy_sparse_arrai": 403, "is_native_sparse_arrai": 403, "native_sparse_arrai": 403, "coo_indic": [403, 536], "crow_indic": [403, 536], "col_indic": [403, 536], "ccol_indic": [403, 536], "row_indic": [403, 536], "dense_shap": [403, 536], "native_sparse_array_to_indices_values_and_shap": 403, "nativesparsearrai": 403, "sparsearrai": 403, "sparse_arrai": 403, "linalg": [404, 540, 656, 704, 705, 841, 861, 863], "aw": [404, 540], "48447205": [404, 540], "c0": [404, 543], "ck": [404, 543], "c2": [404, 543], "nearest_jax": [404, 550], "trace_on_next_step": [554, 653, 818], "recalcul": [557, 653], "my_sum": [557, 653], "val1": [557, 653], "val2": [557, 653], "cached_sum": [557, 653], "line_eq": [557, 653], "slp": [557, 653], "itc": [557, 653], "cached_line_eq": [557, 653], "0353": [558, 653], "424": [558, 653], "339": [558, 653], "271": [558, 653], "391": [558, 653], "78885436": [559, 653], "41666666": [559, 653], "58333331": [559, 653], "06666667": [559, 653], "13333334": [559, 653], "40000004": [559, 653], "26666668": [559, 653], "13137734": [559, 653], "26275468": [559, 653], "39413199": [559, 653], "52550936": [559, 653], "6568867": [559, 653], "78826398": [559, 653], "84852815": [559, 653], "1313709": [559, 653], "41421366": [559, 653], "27279221": [559, 653], "69705628": [559, 653], "12132034": [559, 653], "default_str": [562, 653], "46999979": [563, 653], "66000009": [563, 653], "93000001": [563, 653], "29000092": [563, 653], "33999991": [563, 653], "6400001": [563, 653], "96000004": [563, 653], "36000013": [563, 653], "51999998": [563, 653], "67000008": [563, 653], "suppos": [563, 653, 850, 865], "960": [563, 653], "3600": [563, 653], "h1": [563, 653], "w1": [563, 653], "40499985": [564, 653], "61000061": [564, 653], "max_depth": [575, 653], "seen_set": [575, 653], "local_set": [575, 653], "referr": [575, 653], "redund": [575, 653, 835, 850, 854, 862, 879], "example_funct": [575, 653], "repr": [575, 653], "allow_dupl": [590, 653], "fork": [591, 653, 837, 845, 855], "forkserv": [591, 653], "mp_default": [591, 653], "defaultcontext": [591, 653], "0x7f4e3193e520": [591, 653], "mp_fork": [591, 653], "forkcontext": [591, 653], "0x7f4e3193e580": [591, 653], "mp_spawn": [591, 653], "spawncontext": [591, 653], "0x7f4e3193e5e0": [591, 653], "mp_forkserv": [591, 653], "forkservercontext": [591, 653], "0x7f4e3193e640": [591, 653], "garbag": [593, 653], "collector": [593, 653], "get_all_arrays_in_memori": [593, 653], "exception_trace_mod": [597, 621, 653, 867], "lenient": [598, 622, 653], "inplace_mod": [598, 622, 653], "infus": [599, 653], "unset": [600, 607, 653, 656, 704, 824, 847, 870], "unset_min_bas": [600, 653], "nestable_mod": [602, 625, 653, 867], "precise_mod": [603, 626, 653, 867], "shape_array_mod": [605, 628, 653, 867], "show_func_wrapper_trace_mod": [606, 629, 653, 867], "tmp_dr": [607, 653], "tmp_dir": [607, 630, 653, 867], "my_tmp": [607, 653], "unset_tmp_dir": [607, 653], "49999999999975": [610, 653], "5015015015010504": [610, 653], "000444502911705e": [610, 653], "9999999999995j": [610, 653], "00000262": [611, 653], "15605032": [611, 653], "01208451j": [611, 653], "00048": [611, 653], "1296": [611, 653], "00864": [611, 653], "100000023841858": [615, 653], "200000047683716": [615, 653], "299999952316284": [615, 653], "400000095367432": [615, 653], "599999904632568": [615, 653], "hemant": [619, 653], "unset_shape_array_mod": [620, 653], "set_exception_trace_mod": [621, 653, 854], "set_min_bas": [623, 653], "set_min_denomin": [624, 653], "set_nestable_mod": [625, 653], "set_precise_mod": [626, 653], "set_queue_timeout": [627, 653], "set_shape_array_mod": [628, 653], "set_show_func_wrapper_trace_mod": [629, 653, 854], "set_tmp_dir": [630, 653], "my_dir": [630, 653], "451": [631, 653], "in_ax": [632, 653], "out_ax": [632, 653], "thereof": [632, 653], "summaris": [632, 653], "99999998": [633, 654], "19999998": [633, 654], "00000001": [633, 654], "00300001": [633, 654], "00800001": [633, 654], "0125": [633, 654], "17294501": [633, 654], "15770318": [633, 654], "20863818": [633, 654], "90000075": [634, 654], "90000164": [634, 654], "9000032": [634, 654], "50000012e": [634, 654], "92558754": [634, 654], "92558694": [634, 654], "92558682": [634, 654], "92558861": [634, 654], "60000025e": [634, 654], "01024": [634, 654], "retain_grad": [635, 654], "func_ret": [635, 654, 860], "666666": [635, 654], "333332": [635, 654], "66666675": [635, 644, 654], "argnum": [636, 654], "933": [636, 638, 654], "jac_fn": [638, 654], "639": [639, 654], "361": [639, 654], "52565837": [640, 654], "8418861": [640, 654], "68377209": [640, 654], "value_grad": [644, 654], "42333412": [644, 654], "5333333": [644, 654], "93333334": [644, 654], "43333334": [644, 654], "0666666": [644, 654], "softsign": 645, "718281828459045": 646, "euler": 646, "141592653589793": 646, "cmp_i": 647, "cmp_isnot": 647, "for_loop": 647, "if_els": 647, "try_except": 647, "control_flow_op": 647, "to_dlpack": 648, "as_ivy_dtyp": [649, 862], "as_native_dtyp": 649, "check_float": 649, "closest_valid_dtyp": 649, "default_dtyp": [649, 850, 858], "dtype_bit": 649, "function_supported_dtyp": [649, 850, 865], "function_unsupported_dtyp": [649, 850], "infer_default_dtyp": 649, "invalid_dtyp": [649, 850], "is_hashable_dtyp": 649, "is_native_dtyp": 649, "promote_typ": [649, 850], "promote_types_of_input": [649, 850, 861], "type_promote_arrai": [649, 850], "unset_default_complex_dtyp": 649, "unset_default_float_dtyp": 649, "unset_default_int_dtyp": 649, "unset_default_uint_dtyp": 649, "valid_dtyp": 649, "defaultcomplexdtyp": 649, "defaultdtyp": 649, "defaultfloatdtyp": 649, "defaultintdtyp": 649, "defaultuintdtyp": 649, "as_ivy_dev": 650, "clear_cached_mem_on_dev": 650, "dev_util": [650, 851], "function_supported_devic": 650, "function_unsupported_devic": 650, "get_all_ivy_arrays_on_dev": [650, 851], "handle_soft_device_vari": [650, 851], "num_cpu_cor": [650, 851], "num_gpu": [650, 851, 865], "num_ivy_arrays_on_dev": 650, "percent_used_mem_on_dev": 650, "print_all_ivy_arrays_on_dev": 650, "set_split_factor": [650, 854], "split_func_cal": 650, "total_mem_on_dev": [650, 851], "tpu_is_avail": 650, "unset_default_devic": [650, 851], "unset_soft_device_mod": [650, 851], "used_mem_on_dev": 650, "defaultdevic": [650, 851], "save_dir": 650, "arg_info": 653, "arg_nam": 653, "cache_fn": [653, 858], "current_backend_str": [653, 865, 870], "function_supported_devices_and_dtyp": 653, "function_unsupported_devices_and_dtyp": 653, "get_item": [653, 861], "get_referrers_recurs": 653, "inplace_arrays_support": 653, "inplace_variables_support": 653, "is_ivy_nested_arrai": 653, "isscalar": 653, "match_kwarg": 653, "num_arrays_in_memori": 653, "print_all_arrays_in_memori": 653, "set_item": [653, 865], "to_ivy_shap": 653, "to_native_shap": 653, "try_else_non": 653, "unset_array_mod": [653, 867], "unset_exception_trace_mod": 653, "unset_inplace_mod": 653, "unset_min_denomin": 653, "unset_nestable_mod": 653, "unset_precise_mod": 653, "unset_queue_timeout": 653, "unset_show_func_wrapper_trace_mod": 653, "vmap": [653, 872, 882], "arraymod": 653, "precisemod": [653, 850], "jac": 654, "requires_gradi": 654, "value_and_grad": [654, 860], "feature_group_count": [655, 668, 675, 676], "oiw": [655, 668, 669, 675], "oihw": [655, 668, 671, 675], "oidhw": [655, 668, 673, 675], "dhwio": [655, 668, 669, 673, 675], "conv_general_dil": [655, 862], "conv_general_transpos": 655, "depthwis": [655, 677, 800, 814], "1428566": [655, 678], "49000001": [655, 678], "55599999": [655, 678], "21000004": [655, 678], "incom": [655, 679], "4269": [655, 679], "911": [655, 679, 854], "157": [655, 679], "753": [655, 679], "545": [655, 662, 679, 763], "547": [655, 679, 851], "963": [655, 679], "98495483": [655, 679], "0293808": [655, 679], "0159359": [655, 679], "74752808": [655, 679], "20942307": [655, 679], "3205719": [655, 679], "all_weight": [655, 680], "num_lay": [655, 680, 814], "weights_transpos": [655, 680], "has_ih_bia": [655, 680], "has_hh_bia": [655, 680], "multi": [655, 656, 680, 682, 687, 800, 814, 852, 872, 882], "long": [655, 680, 681, 842, 843, 850, 852, 854, 855, 862, 870, 882], "input_s": [655, 680], "h_0": [655, 680], "c_0": [655, 680], "num_direct": [655, 680], "hidden_s": [655, 680], "four": [655, 680, 846, 850, 852, 857, 858, 865, 868], "w_ih": [655, 680], "w_hh": [655, 680], "b_ih": [655, 680], "b_hh": [655, 680], "c_out": [655, 680], "vaswani": [655, 682], "al": [655, 682], "num_attention_head": [655, 682], "key_dim": [655, 682, 814], "value_dim": [655, 682, 814], "attention_weight": [655, 682], "unbatch": [655, 682], "nm": 655, "box": [655, 683, 684, 842], "iou_threshold": [655, 683], "max_output_s": [655, 683], "score_threshold": [655, 683], "roi_align": 655, "spatial_scal": [655, 684], "sampling_ratio": [655, 684], "23333359": [655, 685], "03946018": [655, 685], "0280633": [655, 685], "29981947": [655, 685], "29981089": [655, 685], "06345534": [655, 685], "9634552": [655, 685], "19336844": [655, 685], "09336829": [655, 685], "axisa": [656, 687], "axisb": [656, 687], "axisc": [656, 687], "293": [656, 688], "46997": [656, 688], "17157288": [656, 692], "9238795": [656, 692], "78930789": [656, 692], "59803128": [656, 692], "19127655": [656, 692], "31213903": [656, 692], "63418275": [656, 692], "84632206": [656, 692], "70548367": [656, 692], "70223427": [656, 692], "09570674": [656, 692], "63116378": [656, 692], "56109613": [656, 692], "53554028": [656, 692], "32237405": [656, 692], "43822157": [656, 692], "83906901": [656, 692], "50766778": [656, 692], "71475857": [656, 692], "48103389": [656, 692], "3676433": [656, 692], "68466955": [656, 692], "62933773": [656, 692], "77917379": [656, 692], "14264561": [656, 692], "61036086": [656, 692], "45033181e": [656, 693], "02829754e": [656, 693], "54220343e": [656, 693], "12647155e": [656, 693], "38447177e": [656, 693], "56155300e": [656, 693], "26794919": [656, 693], "7320509": [656, 693], "0012": [656, 695], "00342": [656, 695], "000565": [656, 695], "0104": [656, 695], "000981": [656, 695], "00282": [656, 695], "000766": [656, 695], "0322": [656, 695], "00237": [656, 695], "000151": [656, 695], "00101": [656, 695], "00019": [656, 695], "0214": [656, 695], "00171": [656, 695], "0107": [656, 695], "0167": [656, 695], "0472": [656, 695], "0536": [656, 695], "0177": [656, 695], "000429": [656, 695], "00762": [656, 695], "frobeniu": [656, 697], "nuclear": [656, 697], "induc": [656, 697], "ranl": [656, 697], "47722558": [656, 697], "776": [656, 697], "6000004": [656, 697], "118": [656, 698], "moor": [656, 702], "penros": [656, 702], "31622776": [656, 703], "94868332": [656, 703], "1622777": [656, 703], "42718887": [656, 703], "deteremin": [656, 704], "logsabsdet": [656, 704], "subject": [656, 704], "unset_backend": [656, 704, 824, 847], "ordin": [656, 705], "b2": [656, 705], "usvh": [656, 706], "cetera": [656, 706], "driver": [656, 707], "gesvd": [656, 707], "gesvdj": [656, 707], "gesvda": [656, 707], "86217213": [656, 707], "31816804": [656, 707], "615": [656, 707], "ss": [656, 707], "25994301": [656, 707], "16403675": [656, 707], "61529762": [656, 707], "51231241": [656, 707], "39777088": [656, 707], "15413129": [656, 707], "1029852": [656, 707], "01383495": [656, 707], "86647356": [656, 707], "7786541": [656, 707], "55970621": [656, 707], "16857576": [656, 707], "86412698": [656, 707], "37566757": [656, 707], "88477993": [656, 707], "95925522": [656, 707], "6444726": [656, 707], "54687881": [656, 707], "16134834": [656, 707], "35037804": [656, 707], "31025076": [656, 707], "35769391": [656, 707], "transposit": [656, 708, 820], "0x": [656, 711], "Such": [656, 711, 858, 865], "alexandr": [656, 711], "theophil": [656, 711], "dot_product": [656, 712], "9000001": [656, 713], "64158917": [656, 713], "skew": [656, 714], "rescal": [657, 715, 716], "60309976": [657, 715], "6666193": [657, 715], "01348412": [657, 715], "05393649": [657, 715], "49992943": [657, 715], "83330965": [657, 715], "02136981": [657, 715], "32844672": [657, 715], "26561815": [657, 715], "22314337": [657, 715], "9732134": [657, 716, 717], "32223": [657, 717], "5589634": [657, 717], "ssim_loss": 657, "ssim": [657, 718], "99989986": [657, 718], "wasserstein_loss_discrimin": 657, "p_real": [657, 719], "p_fake": [657, 719], "wasserstein": [657, 719, 720], "discrimin": [657, 719], "wasserstein_loss_gener": 657, "pred_fak": [657, 720], "honor": [658, 728], "beyond": [658, 729, 853, 862], "famili": [658, 732], "intxx": [658, 732], "floatxx": [658, 732], "fomaml_step": 659, "inner_cost_fn": [659, 737, 738, 739], "outer_cost_fn": [659, 737, 738], "inner_grad_step": [659, 737, 738, 739], "inner_learning_r": [659, 737, 738, 739], "inner_optimization_step": [659, 737, 738, 739], "inner_batch_fn": [659, 737, 738], "outer_batch_fn": [659, 737, 738], "average_across_step": [659, 737, 738], "inner_v": [659, 737, 738], "keep_inner_v": [659, 737, 738], "outer_v": [659, 737, 738], "keep_outer_v": [659, 737, 738], "return_inner_v": [659, 737, 738, 739], "num_task": [659, 737, 738, 739], "maml": [659, 737, 738], "0x7f34f8bb57e0": [659, 737, 738, 739], "maml_step": 659, "vanilla": [659, 738, 882], "_variabl": [659, 738, 739], "sub_batch": [659, 738], "40069818": [659, 738], "13723135": [659, 738], "reptile_step": 659, "cost_fn": [659, 739], "reptil": [659, 739], "batch_in": [659, 739], "4485182": [659, 739], "139": [659, 739], "9569855": [659, 739], "9880483": [659, 739], "01766968": [659, 739], "02197957": [659, 739], "02197981": [659, 739], "all_nested_indic": 660, "include_nest": [660, 740], "_index": [660, 740, 751], "_base": [660, 740, 750, 751, 861], "themselv": [660, 740, 849, 850, 851, 853, 858, 862], "863": [660, 740, 851], "672": [660, 740], "482": [660, 740], "674": [660, 740], "341": [660, 740], "copy_nest": 660, "to_mut": [660, 741, 752], "deepli": [660, 741, 872, 882], "copied_nest": [660, 741], "1337": [660, 741, 752], "duplicate_array_index_chain": 660, "index_nest": [660, 858], "insert_into_nest_at_index": 660, "insert_into_nest_at_indic": 660, "special_squar": [660, 746], "6666666666666667": [660, 746], "special_pow": [660, 746], "linear_model": [660, 746], "map_nest_at_index": 660, "_result": [660, 747, 757], "hh": [660, 747, 752], "map_nest_at_indic": 660, "ub": [660, 748], "tb": [660, 748], "multi_index_nest": 660, "nested_ani": 660, "check_nest": [660, 750, 751], "nested_argwher": 660, "stop_after_n_found": [660, 751], "nested_indic": [660, 751], "nested_map": [660, 851, 858], "_tuple_check_fn": [660, 752], "_list_check_fn": [660, 752], "_dict_check_fn": [660, 752], "wherebi": [660, 752, 841], "ah": [660, 752], "bh": [660, 752], "ch": [660, 752], "dh": [660, 752, 845], "eh": [660, 752], "gh": [660, 752, 842, 855], "ih": [660, 752], "1338": [660, 752], "nested_multi_map": 660, "index_chain": [660, 753], "nest0": [660, 753], "ivy_arrai": [660, 753, 846, 862], "unappli": [660, 753], "prune_empti": 660, "prune_nest_at_index": 660, "prune_nest_at_indic": 660, "set_nest_at_index": 660, "set_nest_at_indic": 660, "xyz": [660, 758], "pqr": [660, 758], "mini": [661, 759, 814, 817], "uniformli": [662, 761, 763], "22346112": [662, 762], "0922": [662, 762], "9213753": [662, 762], "12818667": [662, 762], "799": [662, 762], "469": [662, 762], "287": [662, 762], "0366": [662, 762], "26431865": [662, 763], "475": [662, 763], "878": [662, 763], "861": [662, 763], "929": [662, 763], "789": [662, 763], "519": [662, 763], "0435": [662, 763], "4608004": [662, 763], "8458502": [662, 763], "67270088": [662, 763], "31128597": [662, 763], "394": [662, 765], "zeroel": [663, 769], "fourth": [664, 771], "1141": [664, 771], "8101": [664, 771], "9298": [664, 771], "8460": [664, 771], "2119": [664, 771], "3519": [664, 771], "6252": [664, 771], "4033": [664, 771], "7443": [664, 771], "2577": [664, 771], "3707": [664, 771], "0545": [664, 771], "3238": [664, 771], "5944": [664, 771], "0775": [664, 771], "4327": [664, 771], "62519997": [664, 771], "40329999": [664, 771], "59439999": [664, 771], "74430001": [664, 771], "81010002": [664, 771], "84600002": [664, 771], "92979997": [664, 771], "einstein": [666, 781, 829], "117": [666, 781], "intend": [666, 787, 796, 813, 845, 857, 860, 882], "07472222": [666, 788], "00666667": [666, 788], "08966666": [666, 788], "simplicit": [667, 789, 790], "ivy_test": [793, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 841, 842, 843, 845, 848, 855, 863], "test_ivi": [793, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 841, 842, 843, 848, 855, 863, 865], "assert_all_clos": [793, 863], "ret_np": [793, 795, 863], "ret_from_gt_np": [793, 863], "ground_truth_backend": [793, 795, 796, 805, 806, 839, 855, 863], "test_dtyp": [793, 795], "mark": [793, 841, 843, 845, 865, 870], "assert_same_typ": 793, "ret_from_target": 793, "ret_from_gt": 793, "backend_to_test": [793, 795, 839, 855, 863], "gt_backend": 793, "with_backend": [793, 824], "assert_same_type_and_shap": 793, "this_key_chain": 793, "check_unsupported_devic": 793, "input_devic": 793, "all_as_kwargs_np": [793, 795], "check_unsupported_device_and_dtyp": 793, "input_dtyp": [793, 795, 805, 839, 855, 863, 865], "check_unsupported_dtyp": 793, "test_unsupported_funct": 793, "value_test": 793, "ret_np_flat": 793, "ret_np_from_gt_flat": 793, "specific_tolerance_dict": 793, "ret_from_np_gt_flat": 793, "available_framework": 794, "function_test": 795, "args_to_contain": 795, "array_arg": [795, 858], "args_to_frontend": 795, "frontend_array_fn": 795, "arrays_to_frontend": 795, "as_list": 795, "convtru": 795, "nativeclass": 795, "counter": 795, "create_args_kwarg": 795, "args_np": 795, "arg_np_val": 795, "args_idx": 795, "kwargs_np": 795, "kwarg_np_val": 795, "kwargs_idx": 795, "test_flag": [795, 839, 855, 863, 865], "on_devic": [795, 805, 839, 855, 863], "flatten_and_to_np": 795, "flatten_frontend": 795, "flatten_frontend_fw_to_np": 795, "frontend_ret": [795, 863], "isscalar_func": 795, "is_native_array_func": 795, "to_numpy_func": 795, "flatten_frontend_to_np": 795, "get_frontend_ret": 795, "frontend_fn": 795, "frontend_array_funct": 795, "precision_mod": [795, 805, 806, 855], "test_trac": [795, 805, 806, 839, 845, 855], "test_trace_each": [795, 805, 806], "get_ret_and_flattened_np_arrai": 795, "gradient_incompatible_funct": 795, "gradient_test": [795, 865], "rtol_": [795, 839, 855], "atol_": [795, 839, 855, 863], "tolerance_dict": 795, "gradient_unsupported_dtyp": 795, "kwargs_to_args_n_kwarg": 795, "num_positional_arg": [795, 805, 806, 839, 855, 863, 865], "test_frontend_funct": [795, 863], "fn_tree": [795, 796, 806, 839, 855, 862, 863, 865], "gt_fn_tree": [795, 806], "test_valu": [795, 863, 865], "frontend_function_flag": [795, 805], "functiontestflag": [795, 805, 839, 855], "with_out": [795, 805, 839, 855, 863, 865], "instance_method": [795, 805, 839, 855, 865], "as_vari": [795, 805, 839, 855, 863, 865], "namespac": [795, 841, 850, 859, 862, 863, 866, 870], "arg_": 795, "test_frontend_method": [795, 863], "init_input_dtyp": [795, 863], "method_input_dtyp": [795, 863], "init_flag": [795, 863, 865], "method_flag": [795, 805, 863, 865], "init_all_as_kwargs_np": [795, 863], "method_all_as_kwargs_np": [795, 863], "frontend_method_data": [795, 863], "init_as_variable_flag": [795, 806], "dictat": [795, 846, 852, 857, 861], "init_num_positional_arg": [795, 806], "init_native_array_flag": 795, "with_v": 795, "ret_gt": 795, "test_funct": [795, 839, 842, 843, 855, 863, 865], "fn_name": [795, 796, 806, 839, 847, 855, 863, 865], "return_flat_np_arrai": 795, "as_variable_flag": [795, 806, 865], "native_array_flag": [795, 806, 865], "container_flag": [795, 805, 806, 865], "test_function_backend_comput": 795, "test_function_ground_truth_comput": 795, "arg_np_arrai": 795, "arrays_args_indic": 795, "arrays_kwargs_indic": 795, "kwarg_np_arrai": 795, "test_gradient_backend_comput": 795, "test_gradient_ground_truth_comput": 795, "test_method": 795, "method_nam": [795, 804, 806, 863], "init_with_v": 795, "method_with_v": 795, "test_gradi": [795, 805, 806, 839, 855, 865], "method_as_variable_flag": [795, 806], "method_num_positional_arg": [795, 806], "method_native_array_flag": 795, "method_container_flag": [795, 806], "test_method_backend_comput": 795, "test_method_ground_truth_comput": 795, "org_con_data": 795, "args_np_method": 795, "met_arg_np_v": 795, "met_args_idx": 795, "kwargs_np_method": 795, "met_kwarg_np_v": 795, "met_kwargs_idx": 795, "v_np": 795, "traced_if_requir": 795, "wrap_frontend_function_arg": 795, "holder": 796, "current_frontend_config": 796, "0x7f341fc682a0": 796, "interruptedtest": 796, "test_interrupt": 796, "baseexcept": 796, "tri": [796, 850], "testdata": 796, "supported_device_dtyp": 796, "is_method": 796, "setup_api_test": 796, "test_data": 796, "setup_frontend_test": 796, "teardown_api_test": 796, "teardown_frontend_test": 796, "hypothesis_help": [797, 798, 799, 800, 801], "array_help": 798, "array_and_broadcastable_shap": 798, "searchstrategi": [798, 799, 800, 801, 805, 806, 865], "array_bool": [798, 865], "min_valu": [798, 799, 800, 801, 839, 855, 863, 865], "max_valu": [798, 799, 800, 801, 863, 865], "ex": [798, 799, 800, 801, 806], "strategi": [798, 799, 800, 801, 805, 806, 841, 863], "array_helpers_dtype_info_help": 798, "kind_dtyp": [798, 800], "array_indices_axi": 798, "array_dtyp": [798, 799, 865], "indices_dtyp": 798, "get_dtyp": [798, 799, 839, 855, 863, 865], "abs_smallest_v": [798, 800, 801], "large_abs_safety_factor": [798, 800, 801, 839, 855, 863, 865], "small_abs_safety_factor": [798, 800, 801, 839, 855, 863], "safety_factor_scal": [798, 800, 801, 863, 865], "disable_random_axi": 798, "axis_zero": 798, "allow_inf": [798, 801, 863, 865], "min_num_dim": [798, 800, 863, 865], "max_num_dim": [798, 800, 863, 865], "min_dim_s": [798, 800, 863, 865], "max_dim_s": [798, 800, 863], "first_dimension_onli": 798, "indices_same_dim": 798, "valid_bound": 798, "safeti": [798, 800, 801, 882], "0002": [798, 801], "hypothesi": [798, 800, 806, 841, 843, 845, 859], "65536": 798, "44758124e": [798, 865], "array_indices_put_along_axi": 798, "values_dtyp": 798, "array_valu": [798, 865], "allow_nan": [798, 801, 865], "allow_subnorm": [798, 801, 865], "exclude_min": [798, 801, 865], "exclude_max": [798, 801], "subnorm": [798, 801], "get_shap": [798, 800, 863, 865], "36912": 798, "6955": 798, "59576": 798, "arrays_and_ax": 798, "available_dtyp": [798, 799, 839, 855, 863, 865], "allow_non": [798, 800, 863, 865], "return_dtyp": 798, "force_int_axi": 798, "26e": 798, "10e": 798, "24322108": 798, "26446279e": 798, "96046448e": 798, "008": 798, "17549435e": 798, "038": 798, "06541027e": 798, "13725760e": 798, "07143888": 798, "arrays_for_pool": 798, "min_dim": 798, "max_dim": 798, "min_sid": 798, "max_sid": 798, "explicit_or_str_pad": 798, "only_explicit_pad": 798, "return_dil": 798, "mixed_fn_compo": [798, 799, 800, 801, 865], "return_data_format": 798, "cond_data_gen_help": 798, "create_concatenable_arrays_dtyp": 798, "min_num_arrai": 798, "max_num_arrai": 798, "concat_dim": 798, "common_shap": [798, 865], "stackabl": 798, "given_common_shap": 798, "create_nested_input": 798, "leaf_valu": 798, "dtype_and_valu": [798, 839, 855, 863, 865], "num_arrai": [798, 799, 863, 865], "shared_dtyp": [798, 799, 863], "ret_shap": 798, "array_api_dtyp": [798, 799], "shape_kei": 798, "37915": 798, "6322": 798, "26765": 798, "12413": 798, "26986": 798, "34665": 798, "000e": 798, "711e": 798, "100e": 798, "955e": [798, 865], "40817": 798, "56193": 798, "29200": 798, "5851": 798, "9746": 798, "9604645e": 798, "103": 798, "41795": 798, "1170789994": 798, "44251": 798, "44209": 798, "433075925": 798, "24791": 798, "24691": 798, "24892": 798, "16711": 798, "972": 798, "15357": 798, "72057594037927936": 798, "dtype_array_queri": 798, "allow_mask": 798, "allow_neg_step": 798, "dtype_array_query_v": 798, "dtype_values_axi": [798, 865], "min_axi": 798, "max_axi": 798, "valid_axi": 798, "allow_neg_ax": 798, "min_axes_s": 798, "max_axes_s": 798, "force_tuple_axi": 798, "29788": 798, "62222885e": 798, "68281172e": 798, "257j": 798, "40129846e": 798, "90000000e": 798, "63426649e": 798, "91931887e": 798, "29488e": 798, "14361019e": 798, "12445": 798, "einsum_help": 798, "get_first_solve_batch_matrix": 798, "choose_adjoint": 798, "get_second_solve_batch_matrix": 798, "get_first_solve_matrix": 798, "allow_simplifi": 798, "choose_sid": 798, "xa": 798, "get_second_solve_matrix": 798, "list_of_s": 798, "sampled_from": [798, 863, 865], "min_siz": [798, 800, 806, 865], "max_siz": [798, 800, 806, 865], "size_bound": [798, 865], "999999999999999": 798, "9394938006792373": 798, "mutually_broadcastable_shap": 798, "num_shap": 798, "base_shap": 798, "dtype_help": 799, "univers": [799, 862], "cast_filt": 799, "cast_filter_help": 799, "current_backend": [799, 824, 841, 847, 854, 858, 863, 866, 870], "get_castable_dtyp": 799, "castabl": 799, "prune_funct": 799, "intersect": [799, 865], "signed_integ": 799, "real_and_complex": 799, "float_and_complex": 799, "general_help": 800, "broadcasterror": 800, "apply_safety_factor": 800, "dims_and_offset": 800, "ensure_dim_uniqu": 800, "embedding_help": 800, "general_helpers_dtype_info_help": 800, "get_axi": [800, 865], "allow_neg": 800, "sort_valu": 800, "force_tupl": 800, "force_int": 800, "assertionerror": [800, 839, 845, 854, 855, 863, 865], "get_bound": [800, 865], "get_mean_std": 800, "matrix_is_st": 800, "cond_limit": 800, "instabl": [800, 839, 850, 855], "prone": [800, 850], "thumb": 800, "gradual": 800, "collinear": 800, "reshape_shap": [800, 865], "sizes_": 800, "two_broadcastable_shap": 800, "x_and_filt": 800, "number_help": 801, "arbitrarili": 801, "safety_factor": 801, "backend_proc": 802, "input_queu": 802, "output_queu": 802, "frontend_proc": 802, "pipeline_help": 803, "backendhandl": 803, "update_backend": [803, 863], "backendhandlermod": 803, "enum": [803, 827], "setbackend": 803, "withbackend": 803, "withbackendcontext": 803, "get_frontend_config": 803, "frontendmethoddata": 804, "ivy_init_modul": 804, "framework_init_modul": 804, "init_nam": 804, "test_parameter_flag": 805, "dynamicflag": [805, 806], "frontendfunctiontestflag": [805, 855], "with_copi": 805, "generate_frontend_arrai": [805, 806, 855], "testflag": 805, "apply_flag": 805, "args_to_iter": 805, "frontendinittestflag": 805, "frontendmethodtestflag": 805, "test_cython_wrapp": [805, 806], "initmethodtestflag": 805, "methodtestflag": 805, "build_flag": 805, "frontend_init_flag": 805, "frontend_method_flag": 805, "function_flag": 805, "init_method_flag": 805, "testing_help": 806, "handle_exampl": [806, 865], "test_exampl": [806, 865], "test_frontend_exampl": [806, 865], "test_method_exampl": [806, 865], "test_frontend_method_exampl": [806, 865], "given_kwarg": 806, "handle_frontend_method": [806, 863, 865], "class_tre": [806, 863], "init_tre": [806, 863], "init_native_arrai": 806, "_as_varaible_strategi": 806, "method_native_arrai": 806, "test_inplac": [806, 865], "_given_kwarg": 806, "test_compil": 806, "handle_frontend_test": [806, 863, 865], "alias": [806, 841, 862, 863], "number_positional_arg": [806, 863], "test_with_out": [806, 863, 865], "test_with_copi": 806, "handle_method": [806, 827, 865], "method_tre": [806, 863, 865], "_gradient_strategi": 806, "handle_test": [806, 839, 855, 865], "test_instance_method": [806, 865], "num_positional_args_help": 806, "num_positional_args_method": 806, "geglu": 810, "leakyrelu": 810, "logsoftmax": 810, "from_flax_modul": 811, "native_modul": 811, "params_fx": 811, "rng_seed": 811, "constructor_arg": 811, "constructor_kwarg": 811, "instance_arg": 811, "instance_kwarg": 811, "from_haiku_modul": 811, "params_hk": 811, "from_paddle_modul": 811, "from_torch_modul": 811, "to_keras_modul": 811, "native_module_class": 811, "modulehelp": [812, 816], "create_vari": 813, "var_shap": 813, "fan_out": 813, "fan_in": 813, "rectangular": 813, "firstlayersiren": 813, "siren": 813, "glorotuniform": [813, 814], "glorot": 813, "xavier": 813, "neuron": 813, "w_1x_1": 813, "w_2x_2": 813, "w_nx_n": 813, "w_i": 813, "kaimingnorm": 813, "fan_mod": 813, "kaim": 813, "he": 813, "negative_slop": 813, "fan": 813, "propog": 813, "fan_sum": 813, "Ones": 813, "randomnorm": 813, "w0": 813, "wlim": 813, "predefin": 813, "fan_avg": 813, "adaptiveavgpool1d": 814, "avgpool1d": 814, "implicit": [814, 849, 853, 862, 865, 870, 882], "avgpool2d": 814, "avgpool3d": 814, "e501": 814, "filter_s": 814, "weight_initi": 814, "bias_initi": 814, "0x7f34f8852aa0": 814, "0x7f34f8852b00": 814, "conv1dtranspos": 814, "0x7f34f8852bf0": 814, "0x7f34f8852c50": 814, "filter_shap": 814, "0x7f34f8852cb0": 814, "0x7f34f8852d10": 814, "0x7f34f88532e0": 814, "0x7f34f8853340": 814, "0x7f34f8853460": 814, "0x7f34f88534c0": 814, "conv3dtranspos": 814, "0x7f34f8853520": 814, "0x7f34f8853580": 814, "depthwiseconv2d": 814, "num_channel": 814, "0x7f34f88533a0": 814, "0x7f34f8853400": 814, "bernoul": 814, "num_embed": 814, "embedding_dim": 814, "padding_idx": 814, "lookup": 814, "num_embeddingss": 814, "renorm": 814, "extra_repr": 814, "insensit": 814, "return_st": 814, "0x7f34f88535e0": 814, "get_initial_st": 814, "0x7f34f88528f0": 814, "0x7f34f8852a10": 814, "maxpool1d": 814, "maxpool3d": 814, "multiheadattent": 814, "embed_dim": 814, "head_dim": 814, "dropout_r": 814, "use_proj_bia": 814, "attention_ax": 814, "build_mod": [814, 815, 816], "on_init": [814, 816], "parallel": [814, 848, 882], "binarycrossentropyloss": 815, "store_var": [815, 816], "with_partial_v": [815, 816], "logpoissonloss": 815, "modulemeta": 816, "temporarili": [816, 839, 845, 855], "from_cal": 816, "module_dict": 816, "register_buff": 816, "register_paramet": 816, "weights_path": 816, "randomness_factor": 816, "with_edge_label": 816, "with_arg_label": 816, "with_output_label": 816, "output_connected_onli": 816, "highlight_subgraph": 816, "trace_kwarg": 816, "_unified_ivy_graph": 816, "_call": 816, "num_featur": 817, "trail": 817, "layernorm": 817, "normalized_shap": 817, "elementwise_affin": 817, "set_stat": 818, "adamw": 818, "weight_decai": 818, "init_on_first_step": 818, "fallback_to_non_trac": 818, "ignore_miss": 818, "_step": 818, "stochast": [818, 882], "sub_modul": 819, "original_model": 820, "translated_model": 820, "synchron": 820, "sync_models_torch_and_jax": 820, "model_pt": 820, "model_jax": 820, "flaxmodel": 820, "named_paramet": 820, "named_buff": 820, "model_flax": 820, "customflaxlinear": 820, "nativeflaxmodel": 820, "pytorchmodel": 820, "sync_models_torch_and_tf": 820, "model_tf": 820, "kerasmodel": 820, "keraslay": 820, "customkeraslinear": 820, "nativekerasmodel": 820, "transpose_weights_pt_to_tf_jax": 820, "params_np": 820, "transpose_weight": 820, "transpose_weights_tf_jax_to_pt": 820, "check_al": 821, "check_all_or_any_fn": 821, "check_ani": 821, "check_dev_correct_format": 821, "check_dimens": 821, "check_elem_in_list": [821, 858, 861, 862], "elem": 821, "check_equ": [821, 862], "check_exist": 821, "check_fals": 821, "check_gather_input_valid": 821, "check_gather_nd_input_valid": 821, "check_great": 821, "allow_equ": [821, 854], "check_inplace_sizes_valid": [821, 861], "check_isinst": 821, "allowed_typ": 821, "check_kernel_padding_s": 821, "padding_s": 821, "check_less": [821, 854], "check_one_way_broadcast": 821, "check_same_dtyp": 821, "check_shapes_broadcast": 821, "check_tru": 821, "check_unsorted_segment_valid_param": 821, "ast_help": 823, "importtransform": 823, "nodetransform": 823, "impersonate_import": 823, "tree": [823, 850], "local_ivy_id": 823, "visit_import": 823, "visit_importfrom": 823, "ivyload": 823, "loader": 823, "exec_modul": 823, "ivypathfind": 823, "metapathfind": 823, "find_spec": 823, "fullnam": 823, "contextmanag": 824, "choose_random_backend": 824, "global_backend": 824, "dynamic_backend_convert": 824, "backend_stack": [824, 870], "prevent_access_loc": 824, "previous_backend": [824, 847], "Or": [824, 838, 842, 861, 877], "set_backend_to_specific_vers": 824, "set_jax_backend": 824, "set_mxnet_backend": 824, "mx": 824, "set_numpy_backend": 824, "set_paddle_backend": 824, "set_tensorflow_backend": 824, "set_torch_backend": 824, "sub_backend_handl": 825, "clear_sub_backend": 825, "find_available_sub_backend": 825, "sub_backends_loc": 825, "fn_name_from_version_specific_fn_nam": 825, "fn_name_from_version_specific_fn_name_sub_backend": 825, "sub_backend_vers": 825, "backend_vers": [825, 839, 850, 855], "set_sub_backend": 825, "sub_backend_str": 825, "set_sub_backend_to_specific_vers": 825, "sub_backend": 825, "unset_sub_backend": 825, "decorator_util": 827, "callvisitor": 827, "nodevisitor": 827, "visit_cal": 827, "transposetyp": 827, "no_transpos": 827, "apply_transpos": 827, "pt_to_tf": 827, "dummy_inplace_upd": 827, "get_next_func": 827, "handle_get_item": 827, "handle_set_item": 827, "handle_transpose_in_input_and_output": 827, "handle_transpose_in_input_and_output_for_funct": 827, "handle_transpose_in_pad": 827, "retrieve_object": 827, "store_config_info": 827, "dynamic_import": 828, "import_modul": [828, 870], "einsum_pars": 829, "convert_interleaved_input": 829, "interleav": 829, "convert_subscript": 829, "old_sub": 829, "symbol_map": 829, "subscript": [829, 830], "oe": 829, "ellipsi": [829, 830], "find_output_shap": 829, "find_output_str": 829, "canon": 829, "gen_unused_symbol": 829, "abd": [829, 830], "get_symbol": 829, "letter": 829, "resort": 829, "unicod": 829, "charact": [829, 862], "chr": 829, "surrog": 829, "\u0155": 829, "20000": 829, "\u4eac": 829, "has_valid_einsum_chars_onli": 829, "einsum_str": 829, "abaz": 829, "\u00f6ver": 829, "is_valid_einsum_char": 829, "\u01f5": 829, "legalise_einsum_expr": 829, "reproduct": [829, 830], "pars": [829, 830, 848, 852], "intak": 829, "contract_path": 829, "parse_einsum_input": [829, 830], "einsum_eqn": 829, "legalis": 829, "legalise_einsum_eqn": 829, "za": [829, 830], "xza": [829, 830], "xz": [829, 830], "possibly_convert_to_numpi": 829, "myshap": 829, "__main__": 829, "0x10f850710": 829, "einsum_path_help": 830, "can_dot": 830, "idx_remov": 830, "bla": 830, "benefici": 830, "movement": 830, "costli": 830, "gemm": 830, "ijj": 830, "ddot": 830, "ikj": 830, "compute_size_by_dict": 830, "idx_dict": 830, "abbc": 830, "find_contract": 830, "input_set": 830, "output_set": 830, "lh": 830, "rh": 830, "new_result": 830, "idx_contract": 830, "iset": 830, "oset": 830, "bdc": 830, "flop_count": 830, "num_term": 830, "size_dictionari": 830, "flop": [830, 834], "greedy_path": 830, "memory_limit": 830, "exhaust": [830, 861, 865], "indices_remov": 830, "priorit": [830, 841, 864, 868], "hadamard": 830, "cubic": 830, "greedi": 830, "idx_siz": 830, "optimal_path": 830, "siev": 830, "input_str": 830, "output_str": 830, "parse_possible_contract": 830, "path_cost": 830, "naive_cost": 830, "propos": [830, 843, 862, 868, 882], "intermediari": [830, 847], "unoptim": 830, "new_input_set": 830, "update_other_result": 830, "provision": 830, "_parse_possible_contract": 830, "mod_result": 830, "inplaceupdateexcept": 831, "include_backend": [831, 854], "ivyattributeerror": [831, 854], "attributeerror": [831, 854], "ivybroadcastshapeerror": [831, 854], "ivydeviceerror": 831, "ivydtypepromotionerror": [831, 854], "ivyindexerror": [831, 854], "ivyinvalidbackendexcept": 831, "ivynotimplementedexcept": [831, 854], "notimplementederror": 831, "ivyvalueerror": [831, 854], "handle_except": [831, 857, 859], "add_array_spec": 832, "fn_array_spec": 832, "set_logging_mod": 833, "debug": [833, 842, 843, 849, 860, 865, 868, 882], "unset_logging_mod": 833, "print_stat": 834, "viz": 834, "snakeviz": 834, "bonu": 834, "cprofil": 834, "tensorflow_profile_start": 834, "logdir": 834, "host_tracer_level": 834, "python_tracer_level": 834, "device_tracer_level": 834, "delay_m": 834, "toggl": [834, 843], "timestamp": 834, "awai": [834, 882], "millisecond": 834, "guess": 834, "tensorflow_profile_stop": 834, "torch_profiler_init": 834, "schedul": [834, 882], "on_trace_readi": 834, "record_shap": 834, "profile_memori": 834, "with_stack": 834, "with_flop": 834, "with_modul": 834, "experimental_config": 834, "profileract": 834, "record_and_sav": 834, "dealloc": 834, "record": [834, 842, 883], "callstack": 834, "aten": 834, "torchscript": [834, 871, 874], "_experimentalconfig": 834, "kineto": 834, "torch_profiler_start": 834, "torch_profiler_stop": 834, "torch_fn": 835, "tf_fn": 835, "jax_fn": 835, "believ": [835, 843], "everyon": [835, 837, 841, 842, 843, 872], "appreci": 835, "lenton2021ivi": 835, "inter": 835, "author": [835, 841, 843], "lenton": 835, "daniel": 835, "pardo": 835, "fabio": 835, "falck": 835, "fabian": 835, "jame": 835, "stephen": 835, "clark": 835, "ronald": 835, "journal": 835, "preprint": 835, "2102": 835, "02886": 835, "year": [835, 845, 872, 882], "person": [836, 842, 843], "signin": 836, "grant": 836, "my_kei": 836, "contact": 836, "engag": [837, 843], "skill": 837, "veteran": 837, "pull": [837, 841, 842, 845, 852, 856, 866, 868, 872, 873], "journei": 837, "effort": [837, 841, 872, 876, 882], "board": [837, 848], "contributor": [837, 839, 841, 842, 843, 855, 862, 869, 882], "stage": [837, 843, 844, 845, 848, 865, 882], "excit": [837, 844], "Be": [838, 848], "awar": [838, 848, 854, 856], "linux": [838, 842, 843, 848], "regularli": [838, 848], "internet": [838, 848], "codespac": [838, 848, 855], "make_doc": 838, "sh": [838, 842, 843, 845], "pwd": 838, "ssh": 838, "make_docs_without_dock": [838, 848], "assist": [839, 855], "runtimeerror": [839, 855], "logaddexp2_cpu": [839, 855], "falsifi": [839, 845, 855, 865], "test_logaddexp2": [839, 855], "backend_fw": [839, 855, 863], "dtype_and_x": [839, 855, 863, 865], "reproduce_failur": [839, 845, 855, 859, 865], "axicy2bkaamobaar2waaaacvaai": [839, 855], "decoartor": [839, 855], "someth": [839, 843, 847, 855, 856, 866, 872], "with_unsupported_dtyp": [839, 850, 855, 862], "25830078125": [839, 855], "258544921875": [839, 855], "test_acosh": [839, 855], "axicy2baabyqwqgiaabdaai": [839, 855], "quit": [839, 843, 846, 852, 853, 855, 858, 859, 865, 868, 882], "41421356": [839, 855], "41421356e": [839, 855], "34078079e": [839, 855], "154": [839, 855], "test_ab": [839, 842, 855, 865], "000j": [839, 855], "154j": [839, 855], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [839, 855], "thread": [839, 841, 842, 843, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 882], "pycharm": [839, 863, 865], "docker": [839, 840, 855], "climb": 840, "steep": 840, "curv": 840, "realpython": 840, "pyn": 840, "exchang": [840, 884], "pilot": 840, "stuck": [840, 841], "spell": 840, "sound": 840, "peopl": [840, 842, 843, 844, 882], "frequent": [841, 843, 847, 882], "outlin": [841, 842, 843, 844, 849, 850, 853, 858, 861, 862, 865], "broad": 841, "individu": [841, 843, 845, 847, 850, 858, 862, 882], "clearli": [841, 843, 852, 863, 865], "straightforward": 841, "lie": 841, "urgent": 841, "encourag": [841, 856, 872], "tackl": [841, 862], "challeng": [841, 847, 876, 884], "categoris": [841, 845, 862], "comfort": [841, 842, 854], "valuabl": [841, 843], "linkag": 841, "pr": [841, 843, 845, 856, 862, 863, 865], "confid": 841, "submit": [841, 856], "merg": [841, 843, 845, 862, 882], "mindspor": 841, "simpler": [841, 843, 856, 879, 883], "member": [841, 843, 862, 873], "comment": [841, 842, 843, 845, 850, 856, 862, 864, 868], "composition": 841, "feasibl": [841, 865, 879], "pend": 841, "helpfulli": [841, 868], "problemat": [841, 842], "unimpl": 841, "issue_link": 841, "alias_nam": 841, "notic": [841, 846, 855, 856, 865, 868, 879], "push": [841, 843, 845, 863, 865], "liner": 841, "meanwhil": 841, "reselect": 841, "faithfulli": 841, "creation_routin": [841, 863], "indexing_routin": 841, "ma": 841, "manipulation_routin": 841, "mathematical_funct": [841, 862], "sorting_searching_count": 841, "ufunc": [841, 862], "matrix_and_vector_product": 841, "matrix_eigenvalu": 841, "norms_and_other_numb": 841, "solving_equations_and_inverting_matric": 841, "gleam": 841, "uncom": 841, "test_numpy_inn": 841, "test_frontend": [841, 855, 863], "unsur": [841, 865], "refrain": 841, "checkbox": [841, 842], "yourself": [841, 843, 856, 865, 868], "aforement": 841, "parent": 841, "arraywithelementwis": [841, 846], "containerwithmanipul": 841, "thorough": [841, 853, 857, 865], "add_reformatting_checklist_": 841, "category_nam": [841, 850, 851, 853, 857, 858], "autom": [841, 856, 865, 874], "bot": [841, 856], "markdown": [841, 848], "patient": [841, 842], "elabor": 841, "struggl": 841, "assigne": 841, "status": 841, "central": [841, 856, 868], "relevant_submodul": 841, "roadmap": 841, "deem": [841, 862], "subtask": 841, "clearer": [841, 854, 863], "backend_nam": [841, 847, 850, 851, 853, 857, 858, 859], "rare": [841, 851, 872], "button": [841, 842, 843, 855], "centr": 841, "predetermin": 841, "superset": [841, 844, 858, 861, 872], "happi": [842, 855, 872], "your_usernam": [842, 855], "your_fold": [842, 855], "enter": [842, 843, 846, 850, 851, 855, 857, 859], "nutshel": [842, 857], "hook": [842, 856, 864], "lint": [842, 844], "succe": [842, 879], "whatev": [842, 849, 872], "elig": 842, "student": 842, "licens": 842, "remind": 842, "expir": 842, "profession": 842, "trial": 842, "jetbrain": 842, "month": [842, 877], "bui": 842, "paid": 842, "rapid": [842, 882], "pace": 842, "strongli": [842, 862], "perhap": 842, "conda": 842, "ivy_dev": [842, 843], "icon": [842, 843, 855], "panel": 842, "vscode": [842, 855], "palett": 842, "ctrl": [842, 843], "mac": [842, 843], "intel": 842, "m1": 842, "optional_apple_silicon_1": 842, "optional_apple_silicon_2": 842, "array_api_test": [842, 843, 845, 855], "test_array_api": [842, 843, 845, 855, 865], "suit": [842, 844, 845, 855, 864, 865, 882], "cmd": 842, "bat": [842, 843], "virtualenv": 842, "tick": [842, 843], "nz2": 842, "openssl": 842, "libssl1": 842, "1_1": 842, "1f": 842, "1ubuntu2": 842, "20_amd64": 842, "deb": 842, "dpkg": 842, "mitig": 842, "desktop": [842, 855], "powershel": 842, "admin": 842, "menu": [842, 855], "ivyllc": [842, 873], "introspect": 842, "dialog": 842, "persist": 842, "earlier": [842, 843, 850, 866], "virtualis": 842, "bio": 842, "dropdown": 842, "dockerfil": 842, "ca": 842, "certif": 842, "gnupg": 842, "lsb": 842, "keyr": 842, "fssl": 842, "gpg": 842, "dearmor": 842, "echo": 842, "arch": 842, "lsb_releas": 842, "ce": 842, "cli": 842, "containerd": 842, "systemctl": 842, "softwar": [842, 843], "press": [842, 843], "4a": 842, "socket": 842, "rwx": 842, "sock": 842, "pid": 842, "editor": 842, "pytest": [842, 843, 845, 855, 859, 865], "keyboard": 842, "screenshot": 842, "pop": [842, 855], "test_elementwis": 842, "setup_test": 842, "run_ivy_core_test": 842, "run_ivy_nn_test": 842, "run_ivy_stateful_test": 842, "run_test": 842, "test_depend": 842, "test_ivy_cor": 842, "test_ivy_nn": 842, "test_ivy_st": 842, "unix": 842, "test_": [842, 863], "test_cor": [842, 843, 863], "wish": [842, 862], "ivy_nn": 842, "ivy_st": 842, "header": [842, 843, 864], "arrow": 842, "test_stat": 842, "test_submodule_nam": 842, "test_function_nam": 842, "debugg": 842, "studio": [842, 855, 865], "afterward": 842, "background": [842, 848, 855, 882], "overlap": [842, 855, 866, 868, 883], "test_file_path": [842, 855], "test_fn_nam": [842, 855], "engin": [842, 877, 882], "devcontain": 842, "comma": 842, "postcreatecommand": 842, "post_create_command": 842, "poststartcommand": 842, "safe": [842, 862], "containerworkspacefold": 842, "reopen": 842, "test_fle_path": 842, "slash": 842, "isol": [842, 843, 883], "container": 842, "headach": 842, "arm": [842, 843], "vm": 842, "azur": 842, "cloud": 842, "favourit": 842, "theme": [842, 848], "ipad": 842, "requisit": 842, "pane": [842, 843], "dockerfilegpu": 842, "ivv": 842, "multiv": 842, "multivers": [842, 866], "dockerfilemultivers": 842, "dockerhub": 842, "upto": [842, 843], "launch": 842, "kindli": [842, 864], "guidelin": 842, "colour": 842, "chanc": 842, "troubleshoot": 842, "ever": 842, "flask": [842, 855], "toolbar": [842, 843, 855], "_array_modul": [842, 845, 855], "pytestarg": [842, 855], "unittesten": [842, 855], "pytesten": [842, 855], "autotestdiscoveronsaveen": [842, 855], "conftest": 842, "aren": [842, 850], "available_config": 842, "x86": 842, "meantim": 842, "suffici": [842, 852, 862, 865], "bear": [842, 846, 849, 850, 862], "tendenc": 843, "land": 843, "unrel": 843, "fly": [843, 882], "internship": 843, "suspect": 843, "iii": 843, "issue_numb": 843, "12345": 843, "rememb": 843, "respond": 843, "dai": [843, 856], "freed": 843, "situat": [843, 870], "obvious": 843, "hypothet": 843, "frustrat": 843, "delai": [843, 879], "busi": 843, "inact": 843, "unfairli": 843, "investig": 843, "name_of_your_branch": 843, "date": [843, 845], "complic": [843, 863, 870], "merge_with_upstream": 843, "video": [843, 873], "abort": 843, "tediou": [843, 852, 868], "stash": [843, 856], "reinstat": 843, "uncommit": 843, "unstag": [843, 856], "untrack": 843, "atlassian": 843, "wrote": 843, "blame": 843, "eg": 843, "week": 843, "grep": 843, "commit_id": 843, "handi": 843, "histori": 843, "approv": 843, "someon": [843, 872], "hash": 843, "cancel": 843, "speedup": 843, "unavail": 843, "tickbox": 843, "intent": [843, 861], "discourag": 843, "adopt": [843, 846, 857, 868, 882], "philosophi": 843, "infrequ": 843, "earli": [843, 882], "wast": 843, "spot": [843, 852, 858], "mistak": 843, "mountain": 843, "advoc": 843, "session": [843, 882], "beauti": 843, "care": [843, 851, 862, 868], "undo": 843, "stress": 843, "nifti": 843, "reassur": 843, "local_path_to_ivi": 843, "subfold": [843, 863, 865, 866], "dep": 843, "fresh": 843, "arsen": 843, "exec": 843, "ivy_contain": 843, "test_imag": 843, "test_random_crop": 843, "test_creation_funct": 843, "test_arang": 843, "cursor": 843, "alt": 843, "breakpoint": 843, "gutter": 843, "caret": 843, "f8": 843, "f9": 843, "Into": 843, "f7": 843, "smart": 843, "fragment": [843, 876, 877, 881], "wherein": [843, 858, 865], "weed": [844, 869], "tour": 844, "formatt": [844, 856], "conjunct": 845, "establish": 845, "unconnect": 845, "strang": 845, "thoroughli": 845, "adher": [845, 850, 853, 857, 868, 870], "test_linalg": [845, 863], "test_set_funct": 845, "test_signatur": 845, "excess": [845, 847, 852], "array_modul": 845, "vv": 845, "test_manipulation_funct": 845, "test_concat": [845, 865], "nb": 845, "liber": 845, "______________________": 845, "test_remaind": 845, "_______________________": 845, "test_operators_and_elementwise_funct": 845, "1264": 845, "1277": 845, "binary_param_assert_against_refimpl": 845, "ctx": 845, "620": 845, "binary_assert_against_refimpl": 845, "scalar_o": 845, "17304064": 845, "binaryparamcontext": 845, "axic42baaowcnp": 845, "rumwmabaear0": 845, "make_binary_param": 845, "numeric_dtyp": 845, "left_strat": 845, "left_sym": 845, "right_strat": 845, "right_sym": 845, "right_is_scalar": 845, "binary_param_assert_dtyp": 845, "binary_param_assert_shap": 845, "recreat": 845, "unexpectedli": 845, "discrep": [845, 863], "test_asarray_arrai": 845, "test_floor_divid": 845, "health": 845, "test_iop": 845, "__imod__": 845, "isequ": 845, "test_matrix_norm": 845, "alter": 845, "tweak": 845, "array_api_methods_to_test": 845, "test_special_cas": 845, "__ipow__": 845, "is_integ": 845, "easier": [845, 846, 847, 850, 863, 866, 874, 877, 882], "revisit": [845, 857], "_data": [846, 861, 862], "organiz": [846, 849, 862], "underpin": [846, 849, 870, 871], "programmat": [846, 849, 883], "backup": [846, 848, 849], "accident": [846, 849, 862], "absent": [846, 849], "auto": [846, 848, 849, 856], "__mul__": [846, 849, 852, 857, 868], "imposs": 846, "inputs_to_native_arrai": [846, 858, 859], "outputs_to_ivy_arrai": [846, 850, 851, 857, 858, 859], "secondli": [846, 850], "__ivy_array_function__": 846, "__torch_function__": 846, "myarrai": 846, "handled_funct": 846, "notimpl": 846, "ivy_funct": 846, "my_ab": 846, "my_arrai": 846, "implicit_backend": [847, 870], "__dict__": [847, 861, 870], "ivy_original_dict": [847, 870], "fallback": 847, "live": [847, 848, 850], "dlpack": 847, "set_dynamic_backend": 847, "unset_dynamic_backend": 847, "dynamic_backend_a": 847, "set_": 847, "unset_": 847, "backend_handl": 847, "memory_format": 847, "preserve_format": 847, "weren": 847, "vast": [847, 850, 882], "minor": [847, 868, 872], "fn_name_v_1p12_and_abov": 847, "fn_name_v_1p01_to_1p1": 847, "heavili": [848, 859, 872], "conf": 848, "cleanup": 848, "readm": 848, "maxdepth": 848, "caption": 848, "related_work": 848, "deep_div": 848, "faq": 848, "glossari": 848, "autosummari": 848, "top_functional_toc": 848, "restructuredtext": 848, "discov": [848, 850], "ivy_toctree_caption_map": 848, "unfortun": [848, 856], "linker": 848, "foo": 848, "discussion_channel_map": 848, "1000043690254946374": 848, "1000043749088436315": 848, "forum": 848, "seri": [848, 850, 865, 882], "customiz": 848, "discussion_paragraph": 848, "discord_link": 848, "channel_link": 848, "gg": 848, "uyrmypxmqq": 848, "799879767196958751": 848, "channel_id": 848, "autoskippablemethod": 848, "skippable_method_attribut": 848, "__qualname__": 848, "autodoc": 848, "__doc__": 848, "autoivydata": 848, "mutual": [849, 858], "containerwithelementwis": 849, "__repr__": 849, "__getattr__": [849, 879], "__setattr__": [849, 879], "__contains__": 849, "__getstate__": 849, "__setstate__": 849, "unpickl": 849, "num_dim": [849, 870], "restrict": [849, 862, 871, 879], "enforc": 849, "lefthand": 849, "righthand": 849, "handle_nest": [849, 857, 858, 859, 870], "absenc": [849, 857, 882], "implicitli": [849, 860, 865, 870], "log_pr": [849, 858, 861], "intuit": [849, 865, 876], "chronolog": 849, "concurr": [849, 858, 882], "despit": [849, 850, 851, 863, 871, 882], "__list__": 849, "whatsoev": [849, 858, 874], "children": 849, "shallowest": 849, "deepest": 849, "all_dtyp": 850, "all_numeric_dtyp": 850, "all_int_dtyp": 850, "all_float_dtyp": 850, "replic": [850, 860, 861, 862], "thirdli": 850, "native_float32": 850, "importantli": [850, 870], "arguabl": [850, 851, 862], "jaxarrai": [850, 851, 854, 857, 861, 866, 870], "_handle_0_dim_output": 850, "subtli": [850, 861], "promote_types_frontend_nam": 850, "promote_types_of_frontend_name_input": 850, "frontend_nam": 850, "upcast": 850, "nearli": [850, 857, 859, 882], "downcast": 850, "footprint": 850, "concret": 850, "aris": [850, 856, 872], "utterli": 850, "meant": [850, 852, 861], "twice": 850, "disadvantag": 850, "relax": 850, "f64": 850, "unwant": 850, "primaci": 850, "resembl": 850, "compound": 850, "infer_dtyp": [850, 851, 857, 859], "settabl": [850, 851], "handle_out_argu": [850, 851, 857, 858, 859, 861, 870], "infer_devic": [850, 851, 857, 859], "deleg": 850, "shape_to_tupl": 850, "with_supported_dtyp": 850, "unment": 850, "_cast_for_unary_op": [850, 858, 861], "target_typ": 850, "syntax": [850, 876, 882], "unsupported_dtyp": 850, "supported_dtypes_and_devic": 850, "with_unsupported_device_and_dtyp": 850, "globals_getter_func": 850, "f2": 850, "lack": [850, 861, 876, 882], "mandat": [850, 861, 865, 866], "confus": [850, 854, 861, 868, 874], "inconsist": [850, 854, 860], "is_nan": 850, "supported_dtyp": 850, "anytim": 850, "84530": 850, "unwarr": 850, "risk": 850, "needlessli": 850, "bloat": 850, "undergo": [850, 872], "unsupported_devic": 850, "supported_devic": 850, "downsid": 850, "coverag": [850, 865], "undesir": 850, "accomplish": 850, "upcast_data_typ": 850, "downcast_data_typ": 850, "crosscast_data_typ": 850, "cast_data_typ": 850, "downcast_data_dtyp": 850, "vice": 850, "versa": 850, "till": 850, "crosscast": 850, "exmp1": 850, "watch": [850, 862], "handle_numpy_arrays_in_specific_backend": [850, 857], "cate": 850, "understood": 850, "consumpt": 850, "dual": 851, "categor": [851, 858, 862], "_handle_except": [851, 854], "1013": 851, "_handle_nest": [851, 854], "905": 851, "_handle_out_argu": [851, 854], "441": 851, "_inputs_to_native_arrai": [851, 854], "new_arg": [851, 854], "new_kwarg": [851, 854], "_outputs_to_ivy_arrai": [851, 854], "358": 851, "_handle_array_funct": [851, 854], "_handle_device_shift": 851, "handle_device_shift": [851, 859], "device_shifting_dev": 851, "__enter__": 851, "__exit__": 851, "soft_devic": 851, "eight": 852, "op_nam": 852, "__r": 852, "unsurprisingli": 852, "recap": 852, "combinatori": 852, "okai": [852, 868, 870], "spec": [852, 853], "my_func": [852, 866], "some_flag": 852, "another_flag": 852, "jointli": 852, "5574077": 852, "1850398": 852, "5463025": 852, "8422884": 852, "91601413": 852, "9647598": 852, "3738229": 852, "1597457": 852, "0963247": 852, "9955841": 852, "3278579": 852, "asid": 852, "14254655": 852, "1578213": 852, "380515": 852, "trivial": [852, 861], "failing_fn_nam": 852, "onlin": [852, 853], "minutest": 852, "fault": [852, 882], "contrast": [853, 857, 862, 884], "preview": 853, "incorrectli": [853, 879], "needless": [853, 863], "renam": [853, 862], "judgment": 853, "operator_nam": 853, "succinct": 853, "docst": 853, "native_error": 854, "_combine_messag": 854, "truli": 854, "wrong": [854, 856, 859, 862, 868], "198": 854, "392": 854, "_handle_array_like_without_promot": 854, "805": 854, "432": 854, "349": 854, "other_test": 854, "523": 854, "_handle_numpy_out": 854, "396": 854, "_outputs_to_numpy_arrai": 854, "_inputs_to_ivy_arrays_np": 854, "ivy_arg": 854, "ivy_kwarg": 854, "453": 854, "_from_zero_dim_arrays_to_scalar": 854, "truth_value_test": 854, "visibl": 854, "unwieldi": 854, "squash": 854, "hide": [854, 879], "cleaner": 854, "caught": [854, 856], "rethrow": 854, "_print_traceback_histori": 854, "error_stack": 854, "axiserror": 854, "polici": [854, 859, 865, 867], "moreov": 854, "lesser": 854, "submoodul": 855, "test_jax_transpos": 855, "manipulaiton": 855, "test_jax": [855, 863], "test_numpi": [855, 863], "test_manipul": [855, 863, 865], "preconditionnotmet": 855, "densetensor": 855, "holder_": 855, "phi": 855, "dense_tensor_impl": 855, "array_and_ax": 855, "aaegbaegaqaaaaaaaaaaaaab": 855, "black": 856, "flake8": 856, "linter": 856, "autoflak": 856, "docformatt": 856, "pydocstyl": 856, "yaml": 856, "patch1687898304": 856, "8072": 856, "3516aed563": 856, "reformat": 856, "akshai": 856, "jain": 856, "gui": 856, "cryptic": 856, "garden": 856, "utc": 856, "didn": 856, "human": 856, "intervent": 856, "typo": 856, "ui": 856, "handle_array_like_without_promot": [857, 859], "to_native_arrays_and_back": [857, 859, 870], "handle_array_funct": [857, 859], "inputs_to_native_shap": [857, 859], "rational": [857, 861, 868], "__div__": [857, 868], "484": 857, "brittl": 857, "freeli": 857, "technic": [857, 861, 872, 882], "original_typ": 857, "cumbersom": 857, "hinder": [857, 876], "venn": 858, "diagram": 858, "light": [858, 866, 872, 874, 883], "_reduce_loss": [858, 861], "maximis": 858, "encompass": 858, "partial_mixed_handl": [858, 859, 868], "handle_partial_mixed_funct": [858, 859, 868], "fn_decor": 858, "mixed_backend_wrapp": [858, 861], "to_add": 858, "to_skip": 858, "inputs_to_ivy_arrai": [858, 859], "modif": [858, 882], "briefli": [858, 865], "get_all_arrays_on_dev": 858, "outputs_to_ivy_shap": 859, "outputs_to_native_arrai": 859, "handle_view_index": [859, 861], "handle_view": [859, 861], "handle_rag": 859, "handle_backend_invalid": 859, "handle_nan": 859, "to_native_shapes_and_back": 859, "suffic": [859, 865], "modern": 860, "inter_func": 860, "custom_grad_fn": 860, "args1": 860, "program": [861, 882], "speak": 861, "val_n": 861, "base_idx": 861, "_manipulation_stack": 861, "base_flat": 861, "_view_ref": 861, "_update_view": 861, "contigu": 861, "c_contigu": 861, "ascontiguousarrai": 861, "copyto": 861, "_is_vari": 861, "tensor_scatter_nd_upd": 861, "is_vari": 861, "_update_torch_view": 861, "predominantli": [861, 866], "support_native_out": [861, 870], "_scalar_output_to_0d_arrai": 861, "_wrap_fn": 861, "dim0": 861, "dim1": 861, "res_floor": 861, "extent": [861, 862], "to_out_fn": 861, "add_wrapp": 861, "paradigm": [861, 872, 876, 882], "expans": [861, 876], "brief": [861, 865, 871], "weak": 861, "_torch_bas": 861, "_torch_view_ref": 861, "_torch_manipul": 861, "weakli": 861, "adequ": 861, "tf_frontend": 862, "lax": [862, 863, 868, 870, 872], "torch_frontend": [862, 863], "numpy_frontend": 862, "jax_frontend": 862, "to_ivy_arrays_and_back": [862, 863], "fidel": 862, "algebra": [862, 882, 884], "dynamic": 862, "mimic": 862, "arithmetic_oper": 862, "handle_numpy_out": 862, "handle_numpy_dtyp": 862, "handle_numpy_cast": 862, "from_zero_dim_arrays_to_scalar": 862, "_add": 862, "same_kind": 862, "subok": [862, 863, 868], "promote_types_of_numpy_input": 862, "underscor": 862, "unhandl": 862, "trigonometric_funct": 862, "_tan": 862, "check_tensorflow_cast": 862, "raw_op": [862, 863], "map_raw_ops_alia": 862, "output_typ": 862, "kwargs_to_upd": 862, "pointwise_op": 862, "sensibl": 862, "ahead": [862, 866, 882], "reduce_logsumexp": 862, "logsumexp": 862, "trick": 862, "max_input_tensor": 862, "meet": 862, "preferred_element_typ": 862, "languag": [862, 871, 874, 883], "finer": 862, "logicaland": 862, "np_frontend": 862, "_ivy_arrai": 862, "radd": 862, "_init_data": 862, "_process_str_data": 862, "_dtype": [862, 863], "_shape": 862, "govern": 862, "promote_types_of_": 862, "_input": 862, "promote_types_of_torch_input": [862, 863], "handle_numpy_casting_speci": 862, "new_fn": 862, "equiv": 862, "unsaf": 862, "array_type_test": 862, "_isfinit": 862, "organis": 862, "knowledg": [863, 877], "np_frontend_help": 863, "open_task": 863, "test_lax": 863, "test_oper": 863, "test_jax_tan": 863, "test_mathematical_funct": 863, "test_trigonometric_funct": 863, "dtypes_values_cast": 863, "dtypes_values_casting_dtyp": 863, "arr_func": 863, "get_num_positional_args_ufunc": 863, "test_numpy_tan": 863, "handle_where_and_array_bool": 863, "test_tensorflow": 863, "test_math": 863, "test_tensorflow_tan": 863, "test_torch": 863, "test_pointwise_op": 863, "test_torch_tan": 863, "_fill_valu": 863, "test_glob": 863, "test_jax_ful": 863, "test_from_shape_or_valu": 863, "_input_fill_and_dtyp": 863, "dtype_and_input": 863, "dtype_to_cast": 863, "input_fill_dtyp": 863, "test_numpy_ful": 863, "test_raw_op": 863, "test_tensorflow_fil": 863, "test_creation_op": 863, "with_arrai": 863, "test_torch_ful": 863, "add_nois": 863, "all_clos": 863, "_get_dtype_and_matrix": 863, "test_torch_qr": 863, "frontend_q": 863, "frontend_r": 863, "walkthrough": 863, "comparison_op": 863, "test_comparison_op": 863, "test_torch_great": 863, "all_alias": 863, "test_ndarrai": 863, "test_numpy_instance_add__": 863, "test_tensor": 863, "test_tensorflow_instance_add": 863, "1e04": 863, "allow_infin": 863, "test_torch_instance_add": 863, "_arrays_idx_n_dtyp": 863, "surprisingli": 863, "closest_relevant_group": 863, "strive": [863, 865, 868], "incorpor": [863, 882], "craft": [864, 865], "cater": [864, 876], "tailor": 864, "clariti": [864, 865, 868, 882], "weav": 864, "thrill": 864, "brim": 864, "stand": [864, 865], "testament": 864, "landscap": [864, 877], "forese": 864, "refin": 864, "inquiri": 864, "cycl": 865, "fixtur": 865, "hit": [865, 879], "eleg": [865, 882], "intellig": 865, "unexplor": 865, "bespok": 865, "_array_or_typ": 865, "rigor": 865, "test_default_int_dtyp": 865, "print_hypothesis_exampl": 865, "custom_strategi": 865, "randomis": 865, "simplist": 865, "intricaci": 865, "glanc": 865, "one_of": 865, "datum": 865, "pipe": 865, "array_or_scal": 865, "len_of_arrai": 865, "test_add": 865, "test_gpu_is_avail": 865, "pretest": 865, "snippet": 865, "frontend_test": 865, "frontend_method": 865, "seamlessli": 865, "criterion": 865, "valid_ax": 865, "hoc": 865, "11228": 865, "268": 865, "wherev": 865, "9622": 865, "28136": 865, "6375": 865, "12720": 865, "21354": 865, "900e": 865, "57384": 865, "25687": 865, "248": 865, "test_devic": 865, "array_shap": 865, "test_lay": 865, "some_sequ": 865, "arrays_valu": 865, "36418": 865, "213": 865, "21716926": 865, "none_or_list_of_float": 865, "get_prob": 865, "103515625e": 865, "099609375": 865, "probabilist": 865, "number_positional_argu": 865, "unreproduc": 865, "x_and_linear": 865, "is_torch_backend": 865, "x_shape": [865, 870], "weight_shap": 865, "bias_shap": 865, "ivy_np": 865, "valid_float_dtyp": 865, "test_demo": 865, "failing_test": 865, "file_nam": [865, 866], "shrink": 865, "prescrib": 865, "test_gelu": 865, "test_fil": 865, "notabl": [865, 882], "max_exampl": 865, "deadlin": 865, "weird": 865, "systemat": 865, "safeguard": 865, "inabl": 865, "test_result_typ": 865, "9090909090909091": 865, "judgement": 866, "some_namespac": 866, "some_backend": 866, "another_backend": 866, "refactor": 866, "ongo": 866, "check_fill_value_and_dtype_are_compat": 866, "_to_devic": 866, "shouldn": [866, 879], "pin": 866, "unpinn": 866, "culmin": 866, "unsett": 867, "array_significant_figur": 867, "array_decimal_valu": 867, "warning_level": 867, "nan_polici": 867, "stablest": 867, "constantli": 868, "answer": [868, 872], "contradict": 868, "entail": 868, "sacrif": 868, "jacfwd": 868, "jacrev": 868, "banner": 868, "expens": 868, "incredibli": [868, 872, 876], "price": 868, "pai": 868, "intrus": 868, "x_beta": 868, "simplif": 868, "allevi": 868, "ineffici": [868, 872, 882], "fuse": 868, "hybrid": 868, "workaround": 868, "slip": 868, "radar": 868, "stumbl": 868, "syntact": 870, "power_seq": 870, "sparse_funct": 870, "_determine_backend_from_arg": 870, "importlib": 870, "_backend_dict": 870, "x_flat": 870, "wi": 870, "wi_x": 870, "wii_x": 870, "wif_x": 870, "wig_x": 870, "wio_x": 870, "wh": 870, "ht": 870, "ct": 870, "hts_list": 870, "wii_xt": 870, "wif_xt": 870, "wig_xt": 870, "wio_xt": 870, "htm1": 870, "ctm1": 870, "wh_htm1": 870, "whi_htm1": 870, "whf_htm1": 870, "whg_htm1": 870, "who_htm1": 870, "ft": 870, "ot": 870, "reliabl": 870, "sacrific": 870, "_linear": 871, "tfnetwork": 871, "pure_ivi": 871, "pure_torch": 871, "unclean": 871, "wx": 871, "temp": 871, "ivy_func": 871, "emphas": 871, "example_input": 871, "static_argnum": [871, 879], "static_argnam": [871, 879], "matur": [872, 882], "doubt": 872, "grate": 872, "probe": 872, "lock": 872, "gold": 872, "dex": 872, "autodiff": 872, "shine": 872, "merci": 872, "compet": [872, 882], "parallelis": 872, "spmd": 872, "mixtur": 872, "expert": 872, "sophist": 872, "depart": 872, "hundr": 872, "broadli": 872, "supplementari": 872, "reusabl": [872, 882], "fanci": [872, 882], "fusion": 872, "lose": 872, "pmap": 872, "eventu": 872, "supplement": 872, "backdoor": 872, "callback": 872, "mechan": 872, "door": 872, "appl": 873, "silicon": 873, "ivy_root": 873, "asap": 873, "nail": 874, "tricki": 874, "scientist": 874, "handler": 874, "correl": 874, "explos": 875, "huge": [875, 882], "con": 876, "renown": 876, "traction": [876, 882], "invest": 876, "worsen": 876, "mlx": 876, "exemplifi": 876, "diversif": 876, "painless": 876, "interoper": [877, 882, 884], "divers": [877, 884], "downstream": 877, "consequ": 877, "colleagu": 877, "collabor": 877, "facilit": 877, "constrain": 877, "prototyp": [877, 882], "orient": 877, "legaci": 877, "painstak": 877, "migrat": 877, "publicli": 879, "logger": 879, "arg_stateful_idx": 879, "kwarg_stateful_idx": 879, "include_gener": 879, "array_cach": 879, "return_backend_traced_fn": 879, "lazygraph": 879, "sum_j": 879, "traced_fn": 879, "impos": 879, "comp_func": 879, "bake": 879, "cont": 879, "new_attribut": 879, "wip": 879, "resnet50": 879, "breed": 879, "resnetforimageclassif": 879, "traced_graph": 879, "predicted_label": 879, "methodtyp": 880, "functiontyp": 880, "onnx": 881, "acycl": [881, 883], "promin": 882, "abbrevi": 882, "laboratori": 882, "proprietari": 882, "mathwork": 882, "commerci": 882, "1984": 882, "toolbox": 882, "mupad": 882, "simulink": 882, "graphic": 882, "simul": 882, "million": 882, "worldwid": 882, "scienc": 882, "econom": 882, "2001": 882, "od": 882, "solver": 882, "cython": 882, "friendli": 882, "2002": 882, "lua": 882, "luajit": 882, "idiap": 882, "epfl": 882, "2005": 882, "numarrai": 882, "cpython": 882, "partli": 882, "2007": 882, "forest": 882, "boost": 882, "dbscan": 882, "inbuilt": 882, "esqu": 882, "aesara": 882, "2012": 882, "polymorph": 882, "dispatch": 882, "mpi": 882, "openmp": 882, "glue": 882, "jaot": 882, "nasa": 882, "cern": 882, "climat": 882, "allianc": 882, "influenti": 882, "2014": 882, "scala": 882, "ship": 882, "forgiv": 882, "2015": 882, "cupi": 882, "decemb": 882, "announc": 882, "mainten": 882, "meaning": 882, "hierarch": 882, "2016": 882, "imper": 882, "amazon": 882, "cognit": 882, "grade": 882, "dnn": 882, "backpropag": 882, "succumb": 882, "came": 882, "monitor": 882, "hobbyist": 882, "tremend": 882, "gear": 882, "batteri": 882, "principl": 882, "zygot": 882, "jl": 882, "workload": 882, "daggerflux": 882, "grow": 882, "frontier": 882, "hessian": 882, "2018": 882, "lightweight": 882, "shortcom": 882, "barrier": 882, "inexperienc": 882, "underdevelop": 882, "fanat": 882, "ounc": 882, "infanc": 882, "somewhat": 882, "nich": 882, "mobil": 882, "lite": 882, "enterpris": 882, "reinvent": 882, "inertia": 882, "creator": 882, "paszk": 882, "spend": 882, "hi": 882, "primit": 882, "bulk": 882, "haskel": 882, "inevit": 883, "sit": 883, "dataflow": 883, "trace_modul": 883, "scriptfunct": 883, "scriptmodul": 883, "fake": 883, "proxi": 883, "graphmodul": 883, "holist": 884, "ultmat": 884, "broader": 884}, "objects": {"ivy.Array": [[237, 0, 1, "", "abs"], [238, 0, 1, "", "acos"], [239, 0, 1, "", "acosh"], [633, 0, 1, "", "adam_step"], [634, 0, 1, "", "adam_update"], [406, 0, 1, "", "adaptive_avg_pool1d"], [407, 0, 1, "", "adaptive_avg_pool2d"], [408, 0, 1, "", "adaptive_max_pool2d"], [409, 0, 1, "", "adaptive_max_pool3d"], [240, 0, 1, "", "add"], [441, 0, 1, "", "adjoint"], [789, 0, 1, "", "all"], [552, 0, 1, "", "all_equal"], [351, 0, 1, "", "allclose"], [352, 0, 1, "", "amax"], [353, 0, 1, "", "amin"], [241, 0, 1, "", "angle"], [790, 0, 1, "", "any"], [766, 0, 1, "", "argmax"], [767, 0, 1, "", "argmin"], [775, 0, 1, "", "argsort"], [768, 0, 1, "", "argwhere"], [555, 0, 1, "", "array_equal"], [477, 0, 1, "", "as_strided"], [144, 0, 1, "", "asarray"], [242, 0, 1, "", "asin"], [243, 0, 1, "", "asinh"], [556, 0, 1, "", "assert_supports_inplace"], [478, 0, 1, "", "associative_scan"], [169, 0, 1, "", "astype"], [244, 0, 1, "", "atan"], [245, 0, 1, "", "atan2"], [246, 0, 1, "", "atanh"], [479, 0, 1, "", "atleast_1d"], [480, 0, 1, "", "atleast_2d"], [481, 0, 1, "", "atleast_3d"], [411, 0, 1, "", "avg_pool1d"], [412, 0, 1, "", "avg_pool2d"], [413, 0, 1, "", "avg_pool3d"], [519, 0, 1, "", "batch_norm"], [442, 0, 1, "", "batched_outer"], [526, 0, 1, "", "bernoulli"], [527, 0, 1, "", "beta"], [354, 0, 1, "", "binarizer"], [715, 0, 1, "", "binary_cross_entropy"], [538, 0, 1, "", "bincount"], [247, 0, 1, "", "bitwise_and"], [248, 0, 1, "", "bitwise_invert"], [249, 0, 1, "", "bitwise_left_shift"], [250, 0, 1, "", "bitwise_or"], [251, 0, 1, "", "bitwise_right_shift"], [252, 0, 1, "", "bitwise_xor"], [329, 0, 1, "", "blackman_window"], [170, 0, 1, "", "broadcast_arrays"], [171, 0, 1, "", "broadcast_to"], [172, 0, 1, "", "can_cast"], [253, 0, 1, "", "ceil"], [312, 0, 1, "", "celu"], [686, 0, 1, "", "cholesky"], [721, 0, 1, "", "clip"], [558, 0, 1, "", "clip_matrix_norm"], [559, 0, 1, "", "clip_vector_norm"], [485, 0, 1, "", "column_stack"], [722, 0, 1, "", "concat"], [486, 0, 1, "", "concat_from_sequence"], [443, 0, 1, "", "cond"], [355, 0, 1, "", "conj"], [723, 0, 1, "", "constant_pad"], [669, 0, 1, "", "conv1d"], [670, 0, 1, "", "conv1d_transpose"], [671, 0, 1, "", "conv2d"], [672, 0, 1, "", "conv2d_transpose"], [673, 0, 1, "", "conv3d"], [674, 0, 1, "", "conv3d_transpose"], [146, 0, 1, "", "copy_array"], [356, 0, 1, "", "copysign"], [539, 0, 1, "", "corrcoef"], [254, 0, 1, "", "cos"], [255, 0, 1, "", "cosh"], [357, 0, 1, "", "count_nonzero"], [540, 0, 1, "", "cov"], [687, 0, 1, "", "cross"], [716, 0, 1, "", "cross_entropy"], [541, 0, 1, "", "cummax"], [542, 0, 1, "", "cummin"], [779, 0, 1, "", "cumprod"], [780, 0, 1, "", "cumsum"], [414, 0, 1, "", "dct"], [562, 0, 1, "", "default"], [256, 0, 1, "", "deg2rad"], [677, 0, 1, "", "depthwise_conv2d"], [688, 0, 1, "", "det"], [214, 0, 1, "", "dev"], [415, 0, 1, "", "dft"], [689, 0, 1, "", "diag"], [444, 0, 1, "", "diagflat"], [690, 0, 1, "", "diagonal"], [358, 0, 1, "", "diff"], [359, 0, 1, "", "digamma"], [528, 0, 1, "", "dirichlet"], [257, 0, 1, "", "divide"], [445, 0, 1, "", "dot"], [678, 0, 1, "", "dropout"], [416, 0, 1, "", "dropout1d"], [417, 0, 1, "", "dropout2d"], [418, 0, 1, "", "dropout3d"], [487, 0, 1, "", "dsplit"], [488, 0, 1, "", "dstack"], [180, 0, 1, "", "dtype"], [446, 0, 1, "", "eig"], [692, 0, 1, "", "eigh"], [447, 0, 1, "", "eigh_tridiagonal"], [448, 0, 1, "", "eigvals"], [693, 0, 1, "", "eigvalsh"], [563, 0, 1, "", "einops_rearrange"], [564, 0, 1, "", "einops_reduce"], [565, 0, 1, "", "einops_repeat"], [781, 0, 1, "", "einsum"], [313, 0, 1, "", "elu"], [419, 0, 1, "", "embedding"], [148, 0, 1, "", "empty_like"], [258, 0, 1, "", "equal"], [259, 0, 1, "", "erf"], [360, 0, 1, "", "erfc"], [361, 0, 1, "", "erfinv"], [566, 0, 1, "", "exists"], [260, 0, 1, "", "exp"], [261, 0, 1, "", "exp2"], [489, 0, 1, "", "expand"], [724, 0, 1, "", "expand_dims"], [262, 0, 1, "", "expm1"], [330, 0, 1, "", "eye_like"], [420, 0, 1, "", "fft"], [421, 0, 1, "", "fft2"], [490, 0, 1, "", "fill_diagonal"], [182, 0, 1, "", "finfo"], [362, 0, 1, "", "fix"], [491, 0, 1, "", "flatten"], [725, 0, 1, "", "flip"], [492, 0, 1, "", "fliplr"], [493, 0, 1, "", "flipud"], [363, 0, 1, "", "float_power"], [263, 0, 1, "", "floor"], [264, 0, 1, "", "floor_divide"], [364, 0, 1, "", "fmax"], [265, 0, 1, "", "fmin"], [266, 0, 1, "", "fmod"], [494, 0, 1, "", "fold"], [567, 0, 1, "", "fourier_encode"], [365, 0, 1, "", "frexp"], [150, 0, 1, "", "from_dlpack"], [153, 0, 1, "", "full_like"], [529, 0, 1, "", "gamma"], [570, 0, 1, "", "gather"], [571, 0, 1, "", "gather_nd"], [267, 0, 1, "", "gcd"], [126, 0, 1, "", "gelu"], [449, 0, 1, "", "general_inner_product"], [574, 0, 1, "", "get_num_dims"], [366, 0, 1, "", "gradient"], [637, 0, 1, "", "gradient_descent_update"], [268, 0, 1, "", "greater"], [269, 0, 1, "", "greater_equal"], [520, 0, 1, "", "group_norm"], [314, 0, 1, "", "hardshrink"], [315, 0, 1, "", "hardsilu"], [127, 0, 1, "", "hardswish"], [316, 0, 1, "", "hardtanh"], [576, 0, 1, "", "has_nans"], [495, 0, 1, "", "heaviside"], [450, 0, 1, "", "higher_order_moment"], [469, 0, 1, "", "hinge_embedding_loss"], [543, 0, 1, "", "histogram"], [496, 0, 1, "", "hsplit"], [497, 0, 1, "", "hstack"], [470, 0, 1, "", "huber_loss"], [367, 0, 1, "", "hypot"], [498, 0, 1, "", "i0"], [424, 0, 1, "", "idct"], [425, 0, 1, "", "ifft"], [426, 0, 1, "", "ifftn"], [544, 0, 1, "", "igamma"], [185, 0, 1, "", "iinfo"], [270, 0, 1, "", "imag"], [451, 0, 1, "", "initialize_tucker"], [694, 0, 1, "", "inner"], [578, 0, 1, "", "inplace_decrement"], [579, 0, 1, "", "inplace_increment"], [580, 0, 1, "", "inplace_update"], [521, 0, 1, "", "instance_norm"], [428, 0, 1, "", "interpolate"], [695, 0, 1, "", "inv"], [582, 0, 1, "", "is_array"], [188, 0, 1, "", "is_bool_dtype"], [190, 0, 1, "", "is_float_dtype"], [192, 0, 1, "", "is_int_dtype"], [583, 0, 1, "", "is_ivy_array"], [584, 0, 1, "", "is_ivy_container"], [586, 0, 1, "", "is_native_array"], [194, 0, 1, "", "is_uint_dtype"], [368, 0, 1, "", "isclose"], [271, 0, 1, "", "isfinite"], [587, 0, 1, "", "isin"], [272, 0, 1, "", "isinf"], [273, 0, 1, "", "isnan"], [274, 0, 1, "", "isreal"], [589, 0, 1, "", "itemsize"], [471, 0, 1, "", "kl_div"], [453, 0, 1, "", "kron"], [472, 0, 1, "", "l1_loss"], [522, 0, 1, "", "l1_normalize"], [523, 0, 1, "", "l2_normalize"], [639, 0, 1, "", "lamb_update"], [640, 0, 1, "", "lars_update"], [759, 0, 1, "", "layer_norm"], [275, 0, 1, "", "lcm"], [369, 0, 1, "", "ldexp"], [128, 0, 1, "", "leaky_relu"], [370, 0, 1, "", "lerp"], [276, 0, 1, "", "less"], [277, 0, 1, "", "less_equal"], [533, 0, 1, "", "lexsort"], [371, 0, 1, "", "lgamma"], [679, 0, 1, "", "linear"], [154, 0, 1, "", "linspace"], [278, 0, 1, "", "log"], [279, 0, 1, "", "log10"], [280, 0, 1, "", "log1p"], [281, 0, 1, "", "log2"], [473, 0, 1, "", "log_poisson_loss"], [129, 0, 1, "", "log_softmax"], [282, 0, 1, "", "logaddexp"], [283, 0, 1, "", "logaddexp2"], [284, 0, 1, "", "logical_and"], [285, 0, 1, "", "logical_not"], [286, 0, 1, "", "logical_or"], [287, 0, 1, "", "logical_xor"], [317, 0, 1, "", "logit"], [318, 0, 1, "", "logsigmoid"], [155, 0, 1, "", "logspace"], [525, 0, 1, "", "lp_normalize"], [681, 0, 1, "", "lstm_update"], [457, 0, 1, "", "make_svd_non_negative"], [696, 0, 1, "", "matmul"], [499, 0, 1, "", "matricize"], [458, 0, 1, "", "matrix_exp"], [697, 0, 1, "", "matrix_norm"], [698, 0, 1, "", "matrix_power"], [699, 0, 1, "", "matrix_rank"], [700, 0, 1, "", "matrix_transpose"], [782, 0, 1, "", "max"], [429, 0, 1, "", "max_pool1d"], [430, 0, 1, "", "max_pool2d"], [431, 0, 1, "", "max_pool3d"], [432, 0, 1, "", "max_unpool1d"], [288, 0, 1, "", "maximum"], [783, 0, 1, "", "mean"], [545, 0, 1, "", "median"], [336, 0, 1, "", "mel_weight_matrix"], [156, 0, 1, "", "meshgrid"], [784, 0, 1, "", "min"], [289, 0, 1, "", "minimum"], [130, 0, 1, "", "mish"], [459, 0, 1, "", "mode_dot"], [372, 0, 1, "", "modf"], [500, 0, 1, "", "moveaxis"], [776, 0, 1, "", "msort"], [460, 0, 1, "", "multi_dot"], [682, 0, 1, "", "multi_head_attention"], [461, 0, 1, "", "multi_mode_dot"], [760, 0, 1, "", "multinomial"], [290, 0, 1, "", "multiply"], [291, 0, 1, "", "nan_to_num"], [546, 0, 1, "", "nanmean"], [547, 0, 1, "", "nanmedian"], [548, 0, 1, "", "nanmin"], [549, 0, 1, "", "nanprod"], [373, 0, 1, "", "nansum"], [157, 0, 1, "", "native_array"], [292, 0, 1, "", "negative"], [374, 0, 1, "", "nextafter"], [769, 0, 1, "", "nonzero"], [293, 0, 1, "", "not_equal"], [158, 0, 1, "", "one_hot"], [160, 0, 1, "", "ones_like"], [641, 0, 1, "", "optimizer_update"], [551, 0, 1, "", "optional_get_element"], [701, 0, 1, "", "outer"], [501, 0, 1, "", "pad"], [503, 0, 1, "", "partial_fold"], [504, 0, 1, "", "partial_tensor_to_vec"], [462, 0, 1, "", "partial_tucker"], [505, 0, 1, "", "partial_unfold"], [506, 0, 1, "", "partial_vec_to_tensor"], [726, 0, 1, "", "permute_dims"], [702, 0, 1, "", "pinv"], [530, 0, 1, "", "poisson"], [474, 0, 1, "", "poisson_nll_loss"], [294, 0, 1, "", "positive"], [295, 0, 1, "", "pow"], [319, 0, 1, "", "prelu"], [785, 0, 1, "", "prod"], [507, 0, 1, "", "put_along_axis"], [703, 0, 1, "", "qr"], [550, 0, 1, "", "quantile"], [296, 0, 1, "", "rad2deg"], [761, 0, 1, "", "randint"], [762, 0, 1, "", "random_normal"], [763, 0, 1, "", "random_uniform"], [297, 0, 1, "", "real"], [298, 0, 1, "", "reciprocal"], [380, 0, 1, "", "reduce"], [435, 0, 1, "", "reduce_window"], [131, 0, 1, "", "relu"], [320, 0, 1, "", "relu6"], [299, 0, 1, "", "remainder"], [727, 0, 1, "", "repeat"], [728, 0, 1, "", "reshape"], [197, 0, 1, "", "result_type"], [436, 0, 1, "", "rfft"], [437, 0, 1, "", "rfftn"], [729, 0, 1, "", "roll"], [508, 0, 1, "", "rot90"], [300, 0, 1, "", "round"], [685, 0, 1, "", "scaled_dot_product_attention"], [321, 0, 1, "", "scaled_tanh"], [594, 0, 1, "", "scatter_flat"], [595, 0, 1, "", "scatter_nd"], [777, 0, 1, "", "searchsorted"], [322, 0, 1, "", "selu"], [608, 0, 1, "", "shape"], [765, 0, 1, "", "shuffle"], [132, 0, 1, "", "sigmoid"], [301, 0, 1, "", "sign"], [375, 0, 1, "", "signbit"], [323, 0, 1, "", "silu"], [302, 0, 1, "", "sin"], [376, 0, 1, "", "sinc"], [303, 0, 1, "", "sinh"], [609, 0, 1, "", "size"], [439, 0, 1, "", "sliding_window"], [704, 0, 1, "", "slogdet"], [475, 0, 1, "", "smooth_l1_loss"], [476, 0, 1, "", "soft_margin_loss"], [509, 0, 1, "", "soft_thresholding"], [133, 0, 1, "", "softmax"], [134, 0, 1, "", "softplus"], [324, 0, 1, "", "softshrink"], [705, 0, 1, "", "solve"], [778, 0, 1, "", "sort"], [717, 0, 1, "", "sparse_cross_entropy"], [377, 0, 1, "", "sparsify_tensor"], [730, 0, 1, "", "split"], [304, 0, 1, "", "sqrt"], [305, 0, 1, "", "square"], [731, 0, 1, "", "squeeze"], [610, 0, 1, "", "stable_divide"], [611, 0, 1, "", "stable_pow"], [732, 0, 1, "", "stack"], [786, 0, 1, "", "std"], [440, 0, 1, "", "stft"], [643, 0, 1, "", "stop_gradient"], [612, 0, 1, "", "strides"], [306, 0, 1, "", "subtract"], [787, 0, 1, "", "sum"], [613, 0, 1, "", "supports_inplace_updates"], [706, 0, 1, "", "svd"], [464, 0, 1, "", "svd_flip"], [707, 0, 1, "", "svdvals"], [733, 0, 1, "", "swapaxes"], [510, 0, 1, "", "take"], [511, 0, 1, "", "take_along_axis"], [307, 0, 1, "", "tan"], [308, 0, 1, "", "tanh"], [326, 0, 1, "", "tanhshrink"], [465, 0, 1, "", "tensor_train"], [708, 0, 1, "", "tensordot"], [709, 0, 1, "", "tensorsolve"], [327, 0, 1, "", "threshold"], [328, 0, 1, "", "thresholded_relu"], [734, 0, 1, "", "tile"], [231, 0, 1, "", "to_device"], [615, 0, 1, "", "to_list"], [617, 0, 1, "", "to_numpy"], [618, 0, 1, "", "to_scalar"], [512, 0, 1, "", "top_k"], [710, 0, 1, "", "trace"], [309, 0, 1, "", "trapz"], [162, 0, 1, "", "tril"], [346, 0, 1, "", "trilu"], [513, 0, 1, "", "trim_zeros"], [163, 0, 1, "", "triu"], [310, 0, 1, "", "trunc"], [311, 0, 1, "", "trunc_divide"], [466, 0, 1, "", "truncated_svd"], [467, 0, 1, "", "tt_matrix_to_tensor"], [468, 0, 1, "", "tucker"], [514, 0, 1, "", "unflatten"], [515, 0, 1, "", "unfold"], [771, 0, 1, "", "unique_all"], [516, 0, 1, "", "unique_consecutive"], [772, 0, 1, "", "unique_counts"], [773, 0, 1, "", "unique_inverse"], [774, 0, 1, "", "unique_values"], [531, 0, 1, "", "unravel_index"], [347, 0, 1, "", "unsorted_segment_mean"], [348, 0, 1, "", "unsorted_segment_min"], [349, 0, 1, "", "unsorted_segment_sum"], [735, 0, 1, "", "unstack"], [631, 0, 1, "", "value_is_nan"], [711, 0, 1, "", "vander"], [788, 0, 1, "", "var"], [712, 0, 1, "", "vecdot"], [713, 0, 1, "", "vector_norm"], [714, 0, 1, "", "vector_to_skew_symmetric_matrix"], [517, 0, 1, "", "vsplit"], [518, 0, 1, "", "vstack"], [770, 0, 1, "", "where"], [378, 0, 1, "", "xlogy"], [736, 0, 1, "", "zero_pad"], [166, 0, 1, "", "zeros_like"], [379, 0, 1, "", "zeta"]], "ivy": [[653, 1, 1, "", "ArrayMode"], [649, 1, 1, "", "DefaultComplexDtype"], [650, 1, 1, "", "DefaultDevice"], [649, 1, 1, "", "DefaultDtype"], [649, 1, 1, "", "DefaultFloatDtype"], [649, 1, 1, "", "DefaultIntDtype"], [649, 1, 1, "", "DefaultUintDtype"], [403, 1, 1, "", "NativeSparseArray"], [648, 1, 1, "", "NestedSequence"], [653, 1, 1, "", "PreciseMode"], [650, 1, 1, "", "Profiler"], [403, 1, 1, "", "SparseArray"], [237, 2, 1, "", "abs"], [238, 2, 1, "", "acos"], [239, 2, 1, "", "acosh"], [654, 2, 1, "", "adam_step"], [654, 2, 1, "", "adam_update"], [406, 2, 1, "", "adaptive_avg_pool1d"], [407, 2, 1, "", "adaptive_avg_pool2d"], [408, 2, 1, "", "adaptive_max_pool2d"], [409, 2, 1, "", "adaptive_max_pool3d"], [240, 2, 1, "", "add"], [393, 2, 1, "", "adjoint"], [667, 2, 1, "", "all"], [653, 2, 1, "", "all_equal"], [660, 2, 1, "", "all_nested_indices"], [389, 2, 1, "", "allclose"], [389, 2, 1, "", "amax"], [389, 2, 1, "", "amin"], [241, 2, 1, "", "angle"], [667, 2, 1, "", "any"], [648, 2, 1, "", "arange"], [410, 2, 1, "", "area_interpolate"], [653, 2, 1, "", "arg_info"], [653, 2, 1, "", "arg_names"], [663, 2, 1, "", "argmax"], [663, 2, 1, "", "argmin"], [665, 2, 1, "", "argsort"], [663, 2, 1, "", "argwhere"], [648, 2, 1, "", "array"], [653, 2, 1, "", "array_equal"], [210, 2, 1, "", "as_ivy_dev"], [649, 2, 1, "", "as_ivy_dtype"], [211, 2, 1, "", "as_native_dev"], [649, 2, 1, "", "as_native_dtype"], [395, 2, 1, "", "as_strided"], [648, 2, 1, "", "asarray"], [242, 2, 1, "", "asin"], [243, 2, 1, "", "asinh"], [653, 2, 1, "", "assert_supports_inplace"], [395, 2, 1, "", "associative_scan"], [649, 2, 1, "", "astype"], [244, 2, 1, "", "atan"], [245, 2, 1, "", "atan2"], [246, 2, 1, "", "atanh"], [395, 2, 1, "", "atleast_1d"], [395, 2, 1, "", "atleast_2d"], [395, 2, 1, "", "atleast_3d"], [411, 2, 1, "", "avg_pool1d"], [412, 2, 1, "", "avg_pool2d"], [413, 2, 1, "", "avg_pool3d"], [398, 2, 1, "", "batch_norm"], [393, 2, 1, "", "batched_outer"], [399, 2, 1, "", "bernoulli"], [399, 2, 1, "", "beta"], [389, 2, 1, "", "binarizer"], [657, 2, 1, "", "binary_cross_entropy"], [404, 2, 1, "", "bincount"], [391, 2, 1, "", "bind_custom_gradient_function"], [247, 2, 1, "", "bitwise_and"], [248, 2, 1, "", "bitwise_invert"], [249, 2, 1, "", "bitwise_left_shift"], [250, 2, 1, "", "bitwise_or"], [251, 2, 1, "", "bitwise_right_shift"], [252, 2, 1, "", "bitwise_xor"], [386, 2, 1, "", "blackman_window"], [649, 2, 1, "", "broadcast_arrays"], [395, 2, 1, "", "broadcast_shapes"], [649, 2, 1, "", "broadcast_to"], [653, 2, 1, "", "cache_fn"], [649, 2, 1, "", "can_cast"], [253, 2, 1, "", "ceil"], [384, 2, 1, "", "celu"], [649, 2, 1, "", "check_float"], [395, 2, 1, "", "check_scalar"], [656, 2, 1, "", "cholesky"], [395, 2, 1, "", "choose"], [212, 2, 1, "", "clear_cached_mem_on_dev"], [658, 2, 1, "", "clip"], [653, 2, 1, "", "clip_matrix_norm"], [653, 2, 1, "", "clip_vector_norm"], [649, 2, 1, "", "closest_valid_dtype"], [647, 2, 1, "", "cmp_is"], [647, 2, 1, "", "cmp_isnot"], [395, 2, 1, "", "column_stack"], [648, 2, 1, "", "complex"], [658, 2, 1, "", "concat"], [395, 2, 1, "", "concat_from_sequence"], [393, 2, 1, "", "cond"], [389, 2, 1, "", "conj"], [658, 2, 1, "", "constant_pad"], [653, 2, 1, "", "container_types"], [655, 2, 1, "", "conv"], [655, 2, 1, "", "conv1d"], [655, 2, 1, "", "conv1d_transpose"], [655, 2, 1, "", "conv2d"], [655, 2, 1, "", "conv2d_transpose"], [655, 2, 1, "", "conv3d"], [655, 2, 1, "", "conv3d_transpose"], [655, 2, 1, "", "conv_general_dilated"], [655, 2, 1, "", "conv_general_transpose"], [648, 2, 1, "", "copy_array"], [660, 2, 1, "", "copy_nest"], [389, 2, 1, "", "copysign"], [404, 2, 1, "", "corrcoef"], [254, 2, 1, "", "cos"], [255, 2, 1, "", "cosh"], [389, 2, 1, "", "count_nonzero"], [404, 2, 1, "", "cov"], [656, 2, 1, "", "cross"], [657, 2, 1, "", "cross_entropy"], [404, 2, 1, "", "cummax"], [404, 2, 1, "", "cummin"], [666, 2, 1, "", "cumprod"], [666, 2, 1, "", "cumsum"], [653, 2, 1, "", "current_backend_str"], [414, 2, 1, "", "dct"], [653, 2, 1, "", "default"], [649, 2, 1, "", "default_complex_dtype"], [213, 2, 1, "", "default_device"], [649, 2, 1, "", "default_dtype"], [649, 2, 1, "", "default_float_dtype"], [649, 2, 1, "", "default_int_dtype"], [649, 2, 1, "", "default_uint_dtype"], [256, 2, 1, "", "deg2rad"], [655, 2, 1, "", "depthwise_conv2d"], [656, 2, 1, "", "det"], [214, 2, 1, "", "dev"], [215, 2, 1, "", "dev_util"], [415, 2, 1, "", "dft"], [656, 2, 1, "", "diag"], [393, 2, 1, "", "diagflat"], [656, 2, 1, "", "diagonal"], [389, 2, 1, "", "diff"], [389, 2, 1, "", "digamma"], [399, 2, 1, "", "dirichlet"], [257, 2, 1, "", "divide"], [393, 2, 1, "", "dot"], [655, 2, 1, "", "dropout"], [416, 2, 1, "", "dropout1d"], [417, 2, 1, "", "dropout2d"], [418, 2, 1, "", "dropout3d"], [395, 2, 1, "", "dsplit"], [395, 2, 1, "", "dstack"], [649, 2, 1, "", "dtype"], [649, 2, 1, "", "dtype_bits"], [660, 2, 1, "", "duplicate_array_index_chains"], [646, 6, 1, "", "e"], [393, 2, 1, "", "eig"], [656, 2, 1, "", "eigh"], [393, 2, 1, "", "eigh_tridiagonal"], [393, 2, 1, "", "eigvals"], [656, 2, 1, "", "eigvalsh"], [653, 2, 1, "", "einops_rearrange"], [653, 2, 1, "", "einops_reduce"], [653, 2, 1, "", "einops_repeat"], [666, 2, 1, "", "einsum"], [384, 2, 1, "", "elu"], [419, 2, 1, "", "embedding"], [648, 2, 1, "", "empty"], [648, 2, 1, "", "empty_like"], [258, 2, 1, "", "equal"], [259, 2, 1, "", "erf"], [389, 2, 1, "", "erfc"], [389, 2, 1, "", "erfinv"], [654, 2, 1, "", "execute_with_gradients"], [653, 2, 1, "", "exists"], [260, 2, 1, "", "exp"], [261, 2, 1, "", "exp2"], [395, 2, 1, "", "expand"], [658, 2, 1, "", "expand_dims"], [262, 2, 1, "", "expm1"], [648, 2, 1, "", "eye"], [386, 2, 1, "", "eye_like"], [420, 2, 1, "", "fft"], [421, 2, 1, "", "fft2"], [395, 2, 1, "", "fill_diagonal"], [649, 2, 1, "", "finfo"], [389, 2, 1, "", "fix"], [395, 2, 1, "", "flatten"], [658, 2, 1, "", "flip"], [395, 2, 1, "", "fliplr"], [395, 2, 1, "", "flipud"], [389, 2, 1, "", "float_power"], [263, 2, 1, "", "floor"], [264, 2, 1, "", "floor_divide"], [389, 2, 1, "", "fmax"], [265, 2, 1, "", "fmin"], [266, 2, 1, "", "fmod"], [395, 2, 1, "", "fold"], [659, 2, 1, "", "fomaml_step"], [647, 2, 1, "", "for_loop"], [653, 2, 1, "", "fourier_encode"], [389, 2, 1, "", "frexp"], [648, 2, 1, "", "from_dlpack"], [648, 2, 1, "", "frombuffer"], [648, 2, 1, "", "full"], [648, 2, 1, "", "full_like"], [216, 2, 1, "", "function_supported_devices"], [653, 2, 1, "", "function_supported_devices_and_dtypes"], [649, 2, 1, "", "function_supported_dtypes"], [217, 2, 1, "", "function_unsupported_devices"], [653, 2, 1, "", "function_unsupported_devices_and_dtypes"], [649, 2, 1, "", "function_unsupported_dtypes"], [399, 2, 1, "", "gamma"], [653, 2, 1, "", "gather"], [653, 2, 1, "", "gather_nd"], [267, 2, 1, "", "gcd"], [645, 2, 1, "", "gelu"], [393, 2, 1, "", "general_inner_product"], [422, 2, 1, "", "generate_einsum_equation"], [653, 2, 1, "", "get_all_arrays_in_memory"], [218, 2, 1, "", "get_all_ivy_arrays_on_dev"], [392, 2, 1, "", "get_interpolate_kernel"], [653, 2, 1, "", "get_item"], [653, 2, 1, "", "get_num_dims"], [653, 2, 1, "", "get_referrers_recursive"], [219, 2, 1, "", "gpu_is_available"], [654, 2, 1, "", "grad"], [389, 2, 1, "", "gradient"], [654, 2, 1, "", "gradient_descent_update"], [268, 2, 1, "", "greater"], [269, 2, 1, "", "greater_equal"], [398, 2, 1, "", "group_norm"], [386, 2, 1, "", "hamming_window"], [220, 2, 1, "", "handle_soft_device_variable"], [386, 2, 1, "", "hann_window"], [384, 2, 1, "", "hardshrink"], [384, 2, 1, "", "hardsilu"], [645, 2, 1, "", "hardswish"], [384, 2, 1, "", "hardtanh"], [653, 2, 1, "", "has_nans"], [395, 2, 1, "", "heaviside"], [393, 2, 1, "", "higher_order_moment"], [394, 2, 1, "", "hinge_embedding_loss"], [404, 2, 1, "", "histogram"], [395, 2, 1, "", "hsplit"], [395, 2, 1, "", "hstack"], [394, 2, 1, "", "huber_loss"], [389, 2, 1, "", "hypot"], [395, 2, 1, "", "i0"], [392, 2, 1, "", "idct"], [647, 2, 1, "", "if_else"], [392, 2, 1, "", "ifft"], [392, 2, 1, "", "ifftn"], [404, 2, 1, "", "igamma"], [649, 2, 1, "", "iinfo"], [270, 2, 1, "", "imag"], [660, 2, 1, "", "index_nest"], [386, 2, 1, "", "indices"], [646, 6, 1, "", "inf"], [649, 2, 1, "", "infer_default_dtype"], [393, 2, 1, "", "initialize_tucker"], [656, 2, 1, "", "inner"], [653, 2, 1, "", "inplace_arrays_supported"], [653, 2, 1, "", "inplace_decrement"], [653, 2, 1, "", "inplace_increment"], [653, 2, 1, "", "inplace_update"], [653, 2, 1, "", "inplace_variables_supported"], [660, 2, 1, "", "insert_into_nest_at_index"], [660, 2, 1, "", "insert_into_nest_at_indices"], [398, 2, 1, "", "instance_norm"], [392, 2, 1, "", "interp"], [392, 2, 1, "", "interpolate"], [656, 2, 1, "", "inv"], [649, 2, 1, "", "invalid_dtype"], [402, 2, 1, "", "invert_permutation"], [653, 2, 1, "", "is_array"], [188, 2, 1, "", "is_bool_dtype"], [189, 2, 1, "", "is_complex_dtype"], [190, 2, 1, "", "is_float_dtype"], [191, 2, 1, "", "is_hashable_dtype"], [192, 2, 1, "", "is_int_dtype"], [653, 2, 1, "", "is_ivy_array"], [653, 2, 1, "", "is_ivy_container"], [653, 2, 1, "", "is_ivy_nested_array"], [403, 2, 1, "", "is_ivy_sparse_array"], [653, 2, 1, "", "is_native_array"], [193, 2, 1, "", "is_native_dtype"], [403, 2, 1, "", "is_native_sparse_array"], [194, 2, 1, "", "is_uint_dtype"], [389, 2, 1, "", "isclose"], [271, 2, 1, "", "isfinite"], [653, 2, 1, "", "isin"], [272, 2, 1, "", "isinf"], [273, 2, 1, "", "isnan"], [274, 2, 1, "", "isreal"], [653, 2, 1, "", "isscalar"], [653, 2, 1, "", "itemsize"], [654, 2, 1, "", "jac"], [391, 2, 1, "", "jvp"], [386, 2, 1, "", "kaiser_bessel_derived_window"], [386, 2, 1, "", "kaiser_window"], [393, 2, 1, "", "khatri_rao"], [394, 2, 1, "", "kl_div"], [393, 2, 1, "", "kron"], [393, 2, 1, "", "kronecker"], [394, 2, 1, "", "l1_loss"], [398, 2, 1, "", "l1_normalize"], [398, 2, 1, "", "l2_normalize"], [654, 2, 1, "", "lamb_update"], [654, 2, 1, "", "lars_update"], [661, 2, 1, "", "layer_norm"], [275, 2, 1, "", "lcm"], [389, 2, 1, "", "ldexp"], [645, 2, 1, "", "leaky_relu"], [389, 2, 1, "", "lerp"], [276, 2, 1, "", "less"], [277, 2, 1, "", "less_equal"], [402, 2, 1, "", "lexsort"], [389, 2, 1, "", "lgamma"], [655, 2, 1, "", "linear"], [648, 2, 1, "", "linspace"], [667, 2, 1, "", "load"], [398, 2, 1, "", "local_response_norm"], [278, 2, 1, "", "log"], [279, 2, 1, "", "log10"], [280, 2, 1, "", "log1p"], [281, 2, 1, "", "log2"], [394, 2, 1, "", "log_poisson_loss"], [645, 2, 1, "", "log_softmax"], [282, 2, 1, "", "logaddexp"], [283, 2, 1, "", "logaddexp2"], [284, 2, 1, "", "logical_and"], [285, 2, 1, "", "logical_not"], [286, 2, 1, "", "logical_or"], [287, 2, 1, "", "logical_xor"], [384, 2, 1, "", "logit"], [384, 2, 1, "", "logsigmoid"], [648, 2, 1, "", "logspace"], [398, 2, 1, "", "lp_normalize"], [655, 2, 1, "", "lstm"], [655, 2, 1, "", "lstm_update"], [393, 2, 1, "", "lu_factor"], [393, 2, 1, "", "lu_solve"], [393, 2, 1, "", "make_svd_non_negative"], [659, 2, 1, "", "maml_step"], [660, 2, 1, "", "map"], [660, 2, 1, "", "map_nest_at_index"], [660, 2, 1, "", "map_nest_at_indices"], [653, 2, 1, "", "match_kwargs"], [656, 2, 1, "", "matmul"], [395, 2, 1, "", "matricize"], [393, 2, 1, "", "matrix_exp"], [656, 2, 1, "", "matrix_norm"], [656, 2, 1, "", "matrix_power"], [656, 2, 1, "", "matrix_rank"], [656, 2, 1, "", "matrix_transpose"], [666, 2, 1, "", "max"], [392, 2, 1, "", "max_pool1d"], [392, 2, 1, "", "max_pool2d"], [392, 2, 1, "", "max_pool3d"], [392, 2, 1, "", "max_unpool1d"], [288, 2, 1, "", "maximum"], [666, 2, 1, "", "mean"], [404, 2, 1, "", "median"], [386, 2, 1, "", "mel_weight_matrix"], [648, 2, 1, "", "meshgrid"], [666, 2, 1, "", "min"], [289, 2, 1, "", "minimum"], [645, 2, 1, "", "mish"], [393, 2, 1, "", "mode_dot"], [389, 2, 1, "", "modf"], [395, 2, 1, "", "moveaxis"], [665, 2, 1, "", "msort"], [393, 2, 1, "", "multi_dot"], [655, 2, 1, "", "multi_head_attention"], [660, 2, 1, "", "multi_index_nest"], [393, 2, 1, "", "multi_mode_dot"], [662, 2, 1, "", "multinomial"], [290, 2, 1, "", "multiply"], [653, 2, 1, "", "multiprocessing"], [646, 6, 1, "", "nan"], [291, 2, 1, "", "nan_to_num"], [404, 2, 1, "", "nanmean"], [404, 2, 1, "", "nanmedian"], [404, 2, 1, "", "nanmin"], [404, 2, 1, "", "nanprod"], [389, 2, 1, "", "nansum"], [648, 2, 1, "", "native_array"], [403, 2, 1, "", "native_sparse_array"], [403, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [386, 2, 1, "", "ndenumerate"], [386, 2, 1, "", "ndindex"], [392, 2, 1, "", "nearest_interpolate"], [292, 2, 1, "", "negative"], [660, 2, 1, "", "nested_any"], [660, 2, 1, "", "nested_argwhere"], [660, 2, 1, "", "nested_map"], [660, 2, 1, "", "nested_multi_map"], [646, 6, 1, "", "newaxis"], [389, 2, 1, "", "nextafter"], [655, 2, 1, "", "nms"], [663, 2, 1, "", "nonzero"], [293, 2, 1, "", "not_equal"], [653, 2, 1, "", "num_arrays_in_memory"], [221, 2, 1, "", "num_cpu_cores"], [222, 2, 1, "", "num_gpus"], [223, 2, 1, "", "num_ivy_arrays_on_dev"], [648, 2, 1, "", "one_hot"], [648, 2, 1, "", "ones"], [648, 2, 1, "", "ones_like"], [654, 2, 1, "", "optimizer_update"], [405, 2, 1, "", "optional_get_element"], [656, 2, 1, "", "outer"], [395, 2, 1, "", "pad"], [395, 2, 1, "", "pad_sequence"], [395, 2, 1, "", "partial_fold"], [395, 2, 1, "", "partial_tensor_to_vec"], [393, 2, 1, "", "partial_tucker"], [395, 2, 1, "", "partial_unfold"], [395, 2, 1, "", "partial_vec_to_tensor"], [224, 2, 1, "", "percent_used_mem_on_dev"], [658, 2, 1, "", "permute_dims"], [646, 6, 1, "", "pi"], [656, 2, 1, "", "pinv"], [399, 2, 1, "", "poisson"], [394, 2, 1, "", "poisson_nll_loss"], [386, 2, 1, "", "polyval"], [392, 2, 1, "", "pool"], [294, 2, 1, "", "positive"], [295, 2, 1, "", "pow"], [384, 2, 1, "", "prelu"], [653, 2, 1, "", "print_all_arrays_in_memory"], [225, 2, 1, "", "print_all_ivy_arrays_on_dev"], [666, 2, 1, "", "prod"], [195, 2, 1, "", "promote_types"], [196, 2, 1, "", "promote_types_of_inputs"], [660, 2, 1, "", "prune_empty"], [660, 2, 1, "", "prune_nest_at_index"], [660, 2, 1, "", "prune_nest_at_indices"], [395, 2, 1, "", "put_along_axis"], [656, 2, 1, "", "qr"], [404, 2, 1, "", "quantile"], [296, 2, 1, "", "rad2deg"], [662, 2, 1, "", "randint"], [386, 2, 1, "", "random_cp"], [662, 2, 1, "", "random_normal"], [386, 2, 1, "", "random_parafac2"], [386, 2, 1, "", "random_tr"], [386, 2, 1, "", "random_tt"], [386, 2, 1, "", "random_tucker"], [662, 2, 1, "", "random_uniform"], [297, 2, 1, "", "real"], [298, 2, 1, "", "reciprocal"], [390, 2, 1, "", "reduce"], [392, 2, 1, "", "reduce_window"], [645, 2, 1, "", "relu"], [384, 2, 1, "", "relu6"], [299, 2, 1, "", "remainder"], [658, 2, 1, "", "repeat"], [659, 2, 1, "", "reptile_step"], [654, 2, 1, "", "requires_gradient"], [658, 2, 1, "", "reshape"], [197, 2, 1, "", "result_type"], [392, 2, 1, "", "rfft"], [392, 2, 1, "", "rfftn"], [392, 2, 1, "", "rnn"], [655, 2, 1, "", "roi_align"], [658, 2, 1, "", "roll"], [395, 2, 1, "", "rot90"], [300, 2, 1, "", "round"], [667, 2, 1, "", "save"], [655, 2, 1, "", "scaled_dot_product_attention"], [384, 2, 1, "", "scaled_tanh"], [653, 2, 1, "", "scatter_flat"], [653, 2, 1, "", "scatter_nd"], [665, 2, 1, "", "searchsorted"], [662, 2, 1, "", "seed"], [384, 2, 1, "", "selu"], [653, 2, 1, "", "set_array_mode"], [198, 2, 1, "", "set_default_complex_dtype"], [226, 2, 1, "", "set_default_device"], [199, 2, 1, "", "set_default_dtype"], [200, 2, 1, "", "set_default_float_dtype"], [201, 2, 1, "", "set_default_int_dtype"], [202, 2, 1, "", "set_default_uint_dtype"], [653, 2, 1, "", "set_exception_trace_mode"], [653, 2, 1, "", "set_inplace_mode"], [653, 2, 1, "", "set_item"], [653, 2, 1, "", "set_min_base"], [653, 2, 1, "", "set_min_denominator"], [660, 2, 1, "", "set_nest_at_index"], [660, 2, 1, "", "set_nest_at_indices"], [653, 2, 1, "", "set_nestable_mode"], [653, 2, 1, "", "set_precise_mode"], [653, 2, 1, "", "set_queue_timeout"], [653, 2, 1, "", "set_shape_array_mode"], [653, 2, 1, "", "set_show_func_wrapper_trace_mode"], [227, 2, 1, "", "set_soft_device_mode"], [228, 2, 1, "", "set_split_factor"], [653, 2, 1, "", "set_tmp_dir"], [653, 2, 1, "", "shape"], [662, 2, 1, "", "shuffle"], [645, 2, 1, "", "sigmoid"], [301, 2, 1, "", "sign"], [389, 2, 1, "", "signbit"], [384, 2, 1, "", "silu"], [302, 2, 1, "", "sin"], [389, 2, 1, "", "sinc"], [303, 2, 1, "", "sinh"], [653, 2, 1, "", "size"], [392, 2, 1, "", "sliding_window"], [656, 2, 1, "", "slogdet"], [394, 2, 1, "", "smooth_l1_loss"], [394, 2, 1, "", "soft_margin_loss"], [395, 2, 1, "", "soft_thresholding"], [645, 2, 1, "", "softmax"], [645, 2, 1, "", "softplus"], [384, 2, 1, "", "softshrink"], [645, 2, 1, "", "softsign"], [656, 2, 1, "", "solve"], [393, 2, 1, "", "solve_triangular"], [665, 2, 1, "", "sort"], [657, 2, 1, "", "sparse_cross_entropy"], [389, 2, 1, "", "sparsify_tensor"], [658, 2, 1, "", "split"], [229, 2, 1, "", "split_factor"], [230, 2, 1, "", "split_func_call"], [304, 2, 1, "", "sqrt"], [305, 2, 1, "", "square"], [658, 2, 1, "", "squeeze"], [657, 2, 1, "", "ssim_loss"], [653, 2, 1, "", "stable_divide"], [653, 2, 1, "", "stable_pow"], [658, 2, 1, "", "stack"], [384, 2, 1, "", "stanh"], [666, 2, 1, "", "std"], [392, 2, 1, "", "stft"], [654, 2, 1, "", "stop_gradient"], [653, 2, 1, "", "strides"], [306, 2, 1, "", "subtract"], [666, 2, 1, "", "sum"], [653, 2, 1, "", "supports_inplace_updates"], [656, 2, 1, "", "svd"], [393, 2, 1, "", "svd_flip"], [656, 2, 1, "", "svdvals"], [658, 2, 1, "", "swapaxes"], [395, 2, 1, "", "take"], [395, 2, 1, "", "take_along_axis"], [307, 2, 1, "", "tan"], [308, 2, 1, "", "tanh"], [384, 2, 1, "", "tanhshrink"], [393, 2, 1, "", "tensor_train"], [656, 2, 1, "", "tensordot"], [656, 2, 1, "", "tensorsolve"], [384, 2, 1, "", "threshold"], [384, 2, 1, "", "thresholded_relu"], [658, 2, 1, "", "tile"], [231, 2, 1, "", "to_device"], [648, 2, 1, "", "to_dlpack"], [653, 2, 1, "", "to_ivy_shape"], [653, 2, 1, "", "to_list"], [653, 2, 1, "", "to_native_shape"], [653, 2, 1, "", "to_numpy"], [653, 2, 1, "", "to_scalar"], [395, 2, 1, "", "top_k"], [232, 2, 1, "", "total_mem_on_dev"], [233, 2, 1, "", "tpu_is_available"], [656, 2, 1, "", "trace"], [879, 2, 1, "", "trace_graph"], [880, 2, 1, "", "transpile"], [309, 2, 1, "", "trapz"], [648, 2, 1, "", "tril"], [386, 2, 1, "", "tril_indices"], [386, 2, 1, "", "trilu"], [395, 2, 1, "", "trim_zeros"], [648, 2, 1, "", "triu"], [648, 2, 1, "", "triu_indices"], [310, 2, 1, "", "trunc"], [311, 2, 1, "", "trunc_divide"], [393, 2, 1, "", "truncated_svd"], [653, 2, 1, "", "try_else_none"], [647, 2, 1, "", "try_except"], [393, 2, 1, "", "tt_matrix_to_tensor"], [393, 2, 1, "", "tucker"], [203, 2, 1, "", "type_promote_arrays"], [395, 2, 1, "", "unflatten"], [395, 2, 1, "", "unfold"], [664, 2, 1, "", "unique_all"], [395, 2, 1, "", "unique_consecutive"], [664, 2, 1, "", "unique_counts"], [664, 2, 1, "", "unique_inverse"], [664, 2, 1, "", "unique_values"], [400, 2, 1, "", "unravel_index"], [653, 2, 1, "", "unset_array_mode"], [204, 2, 1, "", "unset_default_complex_dtype"], [234, 2, 1, "", "unset_default_device"], [205, 2, 1, "", "unset_default_dtype"], [206, 2, 1, "", "unset_default_float_dtype"], [207, 2, 1, "", "unset_default_int_dtype"], [208, 2, 1, "", "unset_default_uint_dtype"], [653, 2, 1, "", "unset_exception_trace_mode"], [653, 2, 1, "", "unset_inplace_mode"], [653, 2, 1, "", "unset_min_base"], [653, 2, 1, "", "unset_min_denominator"], [653, 2, 1, "", "unset_nestable_mode"], [653, 2, 1, "", "unset_precise_mode"], [653, 2, 1, "", "unset_queue_timeout"], [653, 2, 1, "", "unset_shape_array_mode"], [653, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [235, 2, 1, "", "unset_soft_device_mode"], [653, 2, 1, "", "unset_tmp_dir"], [386, 2, 1, "", "unsorted_segment_mean"], [386, 2, 1, "", "unsorted_segment_min"], [386, 2, 1, "", "unsorted_segment_sum"], [658, 2, 1, "", "unstack"], [236, 2, 1, "", "used_mem_on_dev"], [209, 2, 1, "", "valid_dtype"], [654, 2, 1, "", "value_and_grad"], [653, 2, 1, "", "value_is_nan"], [656, 2, 1, "", "vander"], [666, 2, 1, "", "var"], [656, 2, 1, "", "vecdot"], [656, 2, 1, "", "vector_norm"], [656, 2, 1, "", "vector_to_skew_symmetric_matrix"], [391, 2, 1, "", "vjp"], [653, 2, 1, "", "vmap"], [386, 2, 1, "", "vorbis_window"], [395, 2, 1, "", "vsplit"], [395, 2, 1, "", "vstack"], [657, 2, 1, "", "wasserstein_loss_discriminator"], [657, 2, 1, "", "wasserstein_loss_generator"], [663, 2, 1, "", "where"], [647, 2, 1, "", "while_loop"], [389, 2, 1, "", "xlogy"], [658, 2, 1, "", "zero_pad"], [648, 2, 1, "", "zeros"], [648, 2, 1, "", "zeros_like"], [389, 2, 1, "", "zeta"]], "ivy.Container": [[237, 0, 1, "", "abs"], [238, 0, 1, "", "acos"], [239, 0, 1, "", "acosh"], [633, 0, 1, "", "adam_step"], [634, 0, 1, "", "adam_update"], [406, 0, 1, "", "adaptive_avg_pool1d"], [407, 0, 1, "", "adaptive_avg_pool2d"], [408, 0, 1, "", "adaptive_max_pool2d"], [409, 0, 1, "", "adaptive_max_pool3d"], [240, 0, 1, "", "add"], [441, 0, 1, "", "adjoint"], [789, 0, 1, "", "all"], [552, 0, 1, "", "all_equal"], [351, 0, 1, "", "allclose"], [352, 0, 1, "", "amax"], [353, 0, 1, "", "amin"], [241, 0, 1, "", "angle"], [790, 0, 1, "", "any"], [766, 0, 1, "", "argmax"], [767, 0, 1, "", "argmin"], [775, 0, 1, "", "argsort"], [768, 0, 1, "", "argwhere"], [555, 0, 1, "", "array_equal"], [477, 0, 1, "", "as_strided"], [144, 0, 1, "", "asarray"], [242, 0, 1, "", "asin"], [243, 0, 1, "", "asinh"], [556, 0, 1, "", "assert_supports_inplace"], [478, 0, 1, "", "associative_scan"], [169, 0, 1, "", "astype"], [244, 0, 1, "", "atan"], [245, 0, 1, "", "atan2"], [246, 0, 1, "", "atanh"], [479, 0, 1, "", "atleast_1d"], [480, 0, 1, "", "atleast_2d"], [481, 0, 1, "", "atleast_3d"], [411, 0, 1, "", "avg_pool1d"], [412, 0, 1, "", "avg_pool2d"], [413, 0, 1, "", "avg_pool3d"], [519, 0, 1, "", "batch_norm"], [442, 0, 1, "", "batched_outer"], [526, 0, 1, "", "bernoulli"], [527, 0, 1, "", "beta"], [354, 0, 1, "", "binarizer"], [715, 0, 1, "", "binary_cross_entropy"], [538, 0, 1, "", "bincount"], [247, 0, 1, "", "bitwise_and"], [248, 0, 1, "", "bitwise_invert"], [249, 0, 1, "", "bitwise_left_shift"], [250, 0, 1, "", "bitwise_or"], [251, 0, 1, "", "bitwise_right_shift"], [252, 0, 1, "", "bitwise_xor"], [329, 0, 1, "", "blackman_window"], [170, 0, 1, "", "broadcast_arrays"], [482, 0, 1, "", "broadcast_shapes"], [171, 0, 1, "", "broadcast_to"], [172, 0, 1, "", "can_cast"], [253, 0, 1, "", "ceil"], [312, 0, 1, "", "celu"], [686, 0, 1, "", "cholesky"], [721, 0, 1, "", "clip"], [558, 0, 1, "", "clip_matrix_norm"], [559, 0, 1, "", "clip_vector_norm"], [485, 0, 1, "", "column_stack"], [722, 0, 1, "", "concat"], [486, 0, 1, "", "concat_from_sequence"], [443, 0, 1, "", "cond"], [355, 0, 1, "", "conj"], [723, 0, 1, "", "constant_pad"], [669, 0, 1, "", "conv1d"], [670, 0, 1, "", "conv1d_transpose"], [671, 0, 1, "", "conv2d"], [672, 0, 1, "", "conv2d_transpose"], [673, 0, 1, "", "conv3d"], [674, 0, 1, "", "conv3d_transpose"], [146, 0, 1, "", "copy_array"], [356, 0, 1, "", "copysign"], [539, 0, 1, "", "corrcoef"], [254, 0, 1, "", "cos"], [255, 0, 1, "", "cosh"], [357, 0, 1, "", "count_nonzero"], [540, 0, 1, "", "cov"], [687, 0, 1, "", "cross"], [716, 0, 1, "", "cross_entropy"], [541, 0, 1, "", "cummax"], [542, 0, 1, "", "cummin"], [779, 0, 1, "", "cumprod"], [780, 0, 1, "", "cumsum"], [414, 0, 1, "", "dct"], [256, 0, 1, "", "deg2rad"], [677, 0, 1, "", "depthwise_conv2d"], [688, 0, 1, "", "det"], [214, 0, 1, "", "dev"], [415, 0, 1, "", "dft"], [689, 0, 1, "", "diag"], [444, 0, 1, "", "diagflat"], [690, 0, 1, "", "diagonal"], [358, 0, 1, "", "diff"], [359, 0, 1, "", "digamma"], [528, 0, 1, "", "dirichlet"], [257, 0, 1, "", "divide"], [445, 0, 1, "", "dot"], [678, 0, 1, "", "dropout"], [416, 0, 1, "", "dropout1d"], [417, 0, 1, "", "dropout2d"], [418, 0, 1, "", "dropout3d"], [487, 0, 1, "", "dsplit"], [488, 0, 1, "", "dstack"], [180, 0, 1, "", "dtype"], [446, 0, 1, "", "eig"], [692, 0, 1, "", "eigh"], [447, 0, 1, "", "eigh_tridiagonal"], [448, 0, 1, "", "eigvals"], [693, 0, 1, "", "eigvalsh"], [563, 0, 1, "", "einops_rearrange"], [564, 0, 1, "", "einops_reduce"], [565, 0, 1, "", "einops_repeat"], [781, 0, 1, "", "einsum"], [313, 0, 1, "", "elu"], [419, 0, 1, "", "embedding"], [148, 0, 1, "", "empty_like"], [258, 0, 1, "", "equal"], [259, 0, 1, "", "erf"], [360, 0, 1, "", "erfc"], [361, 0, 1, "", "erfinv"], [566, 0, 1, "", "exists"], [260, 0, 1, "", "exp"], [261, 0, 1, "", "exp2"], [489, 0, 1, "", "expand"], [724, 0, 1, "", "expand_dims"], [262, 0, 1, "", "expm1"], [330, 0, 1, "", "eye_like"], [420, 0, 1, "", "fft"], [490, 0, 1, "", "fill_diagonal"], [182, 0, 1, "", "finfo"], [362, 0, 1, "", "fix"], [491, 0, 1, "", "flatten"], [725, 0, 1, "", "flip"], [492, 0, 1, "", "fliplr"], [493, 0, 1, "", "flipud"], [363, 0, 1, "", "float_power"], [263, 0, 1, "", "floor"], [264, 0, 1, "", "floor_divide"], [364, 0, 1, "", "fmax"], [265, 0, 1, "", "fmin"], [266, 0, 1, "", "fmod"], [494, 0, 1, "", "fold"], [567, 0, 1, "", "fourier_encode"], [365, 0, 1, "", "frexp"], [150, 0, 1, "", "from_dlpack"], [151, 0, 1, "", "frombuffer"], [153, 0, 1, "", "full_like"], [529, 0, 1, "", "gamma"], [570, 0, 1, "", "gather"], [571, 0, 1, "", "gather_nd"], [267, 0, 1, "", "gcd"], [126, 0, 1, "", "gelu"], [449, 0, 1, "", "general_inner_product"], [574, 0, 1, "", "get_num_dims"], [366, 0, 1, "", "gradient"], [637, 0, 1, "", "gradient_descent_update"], [268, 0, 1, "", "greater"], [269, 0, 1, "", "greater_equal"], [520, 0, 1, "", "group_norm"], [331, 0, 1, "", "hamming_window"], [332, 0, 1, "", "hann_window"], [314, 0, 1, "", "hardshrink"], [315, 0, 1, "", "hardsilu"], [127, 0, 1, "", "hardswish"], [316, 0, 1, "", "hardtanh"], [576, 0, 1, "", "has_nans"], [495, 0, 1, "", "heaviside"], [450, 0, 1, "", "higher_order_moment"], [469, 0, 1, "", "hinge_embedding_loss"], [543, 0, 1, "", "histogram"], [496, 0, 1, "", "hsplit"], [497, 0, 1, "", "hstack"], [470, 0, 1, "", "huber_loss"], [367, 0, 1, "", "hypot"], [498, 0, 1, "", "i0"], [424, 0, 1, "", "idct"], [425, 0, 1, "", "ifft"], [426, 0, 1, "", "ifftn"], [544, 0, 1, "", "igamma"], [185, 0, 1, "", "iinfo"], [270, 0, 1, "", "imag"], [451, 0, 1, "", "initialize_tucker"], [694, 0, 1, "", "inner"], [578, 0, 1, "", "inplace_decrement"], [579, 0, 1, "", "inplace_increment"], [580, 0, 1, "", "inplace_update"], [521, 0, 1, "", "instance_norm"], [428, 0, 1, "", "interpolate"], [695, 0, 1, "", "inv"], [532, 0, 1, "", "invert_permutation"], [582, 0, 1, "", "is_array"], [188, 0, 1, "", "is_bool_dtype"], [189, 0, 1, "", "is_complex_dtype"], [190, 0, 1, "", "is_float_dtype"], [192, 0, 1, "", "is_int_dtype"], [583, 0, 1, "", "is_ivy_array"], [586, 0, 1, "", "is_native_array"], [194, 0, 1, "", "is_uint_dtype"], [368, 0, 1, "", "isclose"], [271, 0, 1, "", "isfinite"], [587, 0, 1, "", "isin"], [272, 0, 1, "", "isinf"], [273, 0, 1, "", "isnan"], [274, 0, 1, "", "isreal"], [589, 0, 1, "", "itemsize"], [334, 0, 1, "", "kaiser_bessel_derived_window"], [335, 0, 1, "", "kaiser_window"], [471, 0, 1, "", "kl_div"], [453, 0, 1, "", "kron"], [472, 0, 1, "", "l1_loss"], [522, 0, 1, "", "l1_normalize"], [523, 0, 1, "", "l2_normalize"], [639, 0, 1, "", "lamb_update"], [640, 0, 1, "", "lars_update"], [759, 0, 1, "", "layer_norm"], [275, 0, 1, "", "lcm"], [369, 0, 1, "", "ldexp"], [128, 0, 1, "", "leaky_relu"], [370, 0, 1, "", "lerp"], [276, 0, 1, "", "less"], [277, 0, 1, "", "less_equal"], [533, 0, 1, "", "lexsort"], [371, 0, 1, "", "lgamma"], [679, 0, 1, "", "linear"], [154, 0, 1, "", "linspace"], [278, 0, 1, "", "log"], [279, 0, 1, "", "log10"], [280, 0, 1, "", "log1p"], [281, 0, 1, "", "log2"], [473, 0, 1, "", "log_poisson_loss"], [129, 0, 1, "", "log_softmax"], [282, 0, 1, "", "logaddexp"], [283, 0, 1, "", "logaddexp2"], [284, 0, 1, "", "logical_and"], [285, 0, 1, "", "logical_not"], [286, 0, 1, "", "logical_or"], [287, 0, 1, "", "logical_xor"], [317, 0, 1, "", "logit"], [318, 0, 1, "", "logsigmoid"], [155, 0, 1, "", "logspace"], [525, 0, 1, "", "lp_normalize"], [681, 0, 1, "", "lstm_update"], [457, 0, 1, "", "make_svd_non_negative"], [696, 0, 1, "", "matmul"], [499, 0, 1, "", "matricize"], [458, 0, 1, "", "matrix_exp"], [697, 0, 1, "", "matrix_norm"], [698, 0, 1, "", "matrix_power"], [699, 0, 1, "", "matrix_rank"], [700, 0, 1, "", "matrix_transpose"], [782, 0, 1, "", "max"], [429, 0, 1, "", "max_pool1d"], [430, 0, 1, "", "max_pool2d"], [431, 0, 1, "", "max_pool3d"], [432, 0, 1, "", "max_unpool1d"], [288, 0, 1, "", "maximum"], [783, 0, 1, "", "mean"], [545, 0, 1, "", "median"], [336, 0, 1, "", "mel_weight_matrix"], [156, 0, 1, "", "meshgrid"], [784, 0, 1, "", "min"], [289, 0, 1, "", "minimum"], [130, 0, 1, "", "mish"], [459, 0, 1, "", "mode_dot"], [372, 0, 1, "", "modf"], [500, 0, 1, "", "moveaxis"], [776, 0, 1, "", "msort"], [460, 0, 1, "", "multi_dot"], [682, 0, 1, "", "multi_head_attention"], [461, 0, 1, "", "multi_mode_dot"], [760, 0, 1, "", "multinomial"], [290, 0, 1, "", "multiply"], [291, 0, 1, "", "nan_to_num"], [546, 0, 1, "", "nanmean"], [547, 0, 1, "", "nanmedian"], [548, 0, 1, "", "nanmin"], [549, 0, 1, "", "nanprod"], [373, 0, 1, "", "nansum"], [157, 0, 1, "", "native_array"], [292, 0, 1, "", "negative"], [374, 0, 1, "", "nextafter"], [769, 0, 1, "", "nonzero"], [293, 0, 1, "", "not_equal"], [158, 0, 1, "", "one_hot"], [160, 0, 1, "", "ones_like"], [641, 0, 1, "", "optimizer_update"], [551, 0, 1, "", "optional_get_element"], [701, 0, 1, "", "outer"], [501, 0, 1, "", "pad"], [503, 0, 1, "", "partial_fold"], [504, 0, 1, "", "partial_tensor_to_vec"], [462, 0, 1, "", "partial_tucker"], [505, 0, 1, "", "partial_unfold"], [506, 0, 1, "", "partial_vec_to_tensor"], [726, 0, 1, "", "permute_dims"], [702, 0, 1, "", "pinv"], [530, 0, 1, "", "poisson"], [474, 0, 1, "", "poisson_nll_loss"], [339, 0, 1, "", "polyval"], [294, 0, 1, "", "positive"], [295, 0, 1, "", "pow"], [319, 0, 1, "", "prelu"], [785, 0, 1, "", "prod"], [507, 0, 1, "", "put_along_axis"], [703, 0, 1, "", "qr"], [550, 0, 1, "", "quantile"], [296, 0, 1, "", "rad2deg"], [761, 0, 1, "", "randint"], [762, 0, 1, "", "random_normal"], [763, 0, 1, "", "random_uniform"], [297, 0, 1, "", "real"], [298, 0, 1, "", "reciprocal"], [380, 0, 1, "", "reduce"], [435, 0, 1, "", "reduce_window"], [131, 0, 1, "", "relu"], [320, 0, 1, "", "relu6"], [299, 0, 1, "", "remainder"], [727, 0, 1, "", "repeat"], [728, 0, 1, "", "reshape"], [197, 0, 1, "", "result_type"], [436, 0, 1, "", "rfft"], [437, 0, 1, "", "rfftn"], [729, 0, 1, "", "roll"], [508, 0, 1, "", "rot90"], [300, 0, 1, "", "round"], [685, 0, 1, "", "scaled_dot_product_attention"], [321, 0, 1, "", "scaled_tanh"], [594, 0, 1, "", "scatter_flat"], [595, 0, 1, "", "scatter_nd"], [777, 0, 1, "", "searchsorted"], [322, 0, 1, "", "selu"], [765, 0, 1, "", "shuffle"], [132, 0, 1, "", "sigmoid"], [301, 0, 1, "", "sign"], [375, 0, 1, "", "signbit"], [323, 0, 1, "", "silu"], [302, 0, 1, "", "sin"], [376, 0, 1, "", "sinc"], [303, 0, 1, "", "sinh"], [609, 0, 1, "", "size"], [439, 0, 1, "", "sliding_window"], [704, 0, 1, "", "slogdet"], [475, 0, 1, "", "smooth_l1_loss"], [476, 0, 1, "", "soft_margin_loss"], [509, 0, 1, "", "soft_thresholding"], [133, 0, 1, "", "softmax"], [134, 0, 1, "", "softplus"], [324, 0, 1, "", "softshrink"], [705, 0, 1, "", "solve"], [778, 0, 1, "", "sort"], [717, 0, 1, "", "sparse_cross_entropy"], [377, 0, 1, "", "sparsify_tensor"], [730, 0, 1, "", "split"], [304, 0, 1, "", "sqrt"], [305, 0, 1, "", "square"], [731, 0, 1, "", "squeeze"], [610, 0, 1, "", "stable_divide"], [611, 0, 1, "", "stable_pow"], [732, 0, 1, "", "stack"], [786, 0, 1, "", "std"], [440, 0, 1, "", "stft"], [643, 0, 1, "", "stop_gradient"], [612, 0, 1, "", "strides"], [306, 0, 1, "", "subtract"], [787, 0, 1, "", "sum"], [613, 0, 1, "", "supports_inplace_updates"], [706, 0, 1, "", "svd"], [464, 0, 1, "", "svd_flip"], [707, 0, 1, "", "svdvals"], [733, 0, 1, "", "swapaxes"], [510, 0, 1, "", "take"], [511, 0, 1, "", "take_along_axis"], [307, 0, 1, "", "tan"], [308, 0, 1, "", "tanh"], [326, 0, 1, "", "tanhshrink"], [465, 0, 1, "", "tensor_train"], [708, 0, 1, "", "tensordot"], [709, 0, 1, "", "tensorsolve"], [327, 0, 1, "", "threshold"], [328, 0, 1, "", "thresholded_relu"], [734, 0, 1, "", "tile"], [231, 0, 1, "", "to_device"], [615, 0, 1, "", "to_list"], [617, 0, 1, "", "to_numpy"], [618, 0, 1, "", "to_scalar"], [512, 0, 1, "", "top_k"], [710, 0, 1, "", "trace"], [309, 0, 1, "", "trapz"], [162, 0, 1, "", "tril"], [345, 0, 1, "", "tril_indices"], [346, 0, 1, "", "trilu"], [513, 0, 1, "", "trim_zeros"], [163, 0, 1, "", "triu"], [164, 0, 1, "", "triu_indices"], [310, 0, 1, "", "trunc"], [311, 0, 1, "", "trunc_divide"], [466, 0, 1, "", "truncated_svd"], [467, 0, 1, "", "tt_matrix_to_tensor"], [468, 0, 1, "", "tucker"], [514, 0, 1, "", "unflatten"], [515, 0, 1, "", "unfold"], [771, 0, 1, "", "unique_all"], [516, 0, 1, "", "unique_consecutive"], [772, 0, 1, "", "unique_counts"], [773, 0, 1, "", "unique_inverse"], [774, 0, 1, "", "unique_values"], [531, 0, 1, "", "unravel_index"], [347, 0, 1, "", "unsorted_segment_mean"], [348, 0, 1, "", "unsorted_segment_min"], [349, 0, 1, "", "unsorted_segment_sum"], [735, 0, 1, "", "unstack"], [631, 0, 1, "", "value_is_nan"], [711, 0, 1, "", "vander"], [788, 0, 1, "", "var"], [712, 0, 1, "", "vecdot"], [713, 0, 1, "", "vector_norm"], [714, 0, 1, "", "vector_to_skew_symmetric_matrix"], [350, 0, 1, "", "vorbis_window"], [517, 0, 1, "", "vsplit"], [518, 0, 1, "", "vstack"], [770, 0, 1, "", "where"], [378, 0, 1, "", "xlogy"], [736, 0, 1, "", "zero_pad"], [166, 0, 1, "", "zeros_like"], [379, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[67, 3, 0, "-", "activations"], [118, 3, 0, "-", "array"], [68, 3, 0, "-", "conversions"], [69, 3, 0, "-", "creation"], [70, 3, 0, "-", "data_type"], [71, 3, 0, "-", "device"], [72, 3, 0, "-", "elementwise"], [73, 3, 0, "-", "experimental"], [74, 3, 0, "-", "general"], [75, 3, 0, "-", "gradients"], [76, 3, 0, "-", "image"], [77, 3, 0, "-", "layers"], [78, 3, 0, "-", "linear_algebra"], [79, 3, 0, "-", "losses"], [80, 3, 0, "-", "manipulation"], [81, 3, 0, "-", "norms"], [82, 3, 0, "-", "random"], [83, 3, 0, "-", "searching"], [84, 3, 0, "-", "set"], [85, 3, 0, "-", "sorting"], [86, 3, 0, "-", "statistical"], [87, 3, 0, "-", "utility"], [88, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[67, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "gelu"], [67, 0, 1, "", "hardswish"], [67, 0, 1, "", "leaky_relu"], [67, 0, 1, "", "log_softmax"], [67, 0, 1, "", "mish"], [67, 0, 1, "", "relu"], [67, 0, 1, "", "sigmoid"], [67, 0, 1, "", "softmax"], [67, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[118, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[118, 5, 1, "", "T"], [118, 0, 1, "", "__abs__"], [118, 0, 1, "", "__add__"], [118, 0, 1, "", "__eq__"], [118, 0, 1, "", "__ge__"], [118, 0, 1, "", "__gt__"], [118, 0, 1, "", "__init__"], [118, 0, 1, "", "__le__"], [118, 0, 1, "", "__lt__"], [118, 0, 1, "", "__ne__"], [118, 0, 1, "", "__pow__"], [118, 0, 1, "", "__radd__"], [118, 0, 1, "", "__rrshift__"], [118, 0, 1, "", "__rshift__"], [118, 0, 1, "", "__rsub__"], [118, 0, 1, "", "__sub__"], [118, 0, 1, "", "__truediv__"], [118, 0, 1, "", "__xor__"], [118, 5, 1, "", "backend"], [118, 5, 1, "", "base"], [118, 5, 1, "", "data"], [118, 5, 1, "", "device"], [118, 5, 1, "", "dtype"], [118, 5, 1, "", "dynamic_backend"], [118, 5, 1, "", "imag"], [118, 5, 1, "", "itemsize"], [118, 5, 1, "", "mT"], [118, 5, 1, "", "ndim"], [118, 5, 1, "", "real"], [118, 5, 1, "", "shape"], [118, 5, 1, "", "size"], [118, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[68, 2, 1, "", "_array_to_new_backend"], [68, 2, 1, "", "_data_to_new_backend"], [68, 2, 1, "", "_to_ivy"], [68, 2, 1, "", "_to_native"], [68, 2, 1, "", "_to_new_backend"], [68, 2, 1, "", "args_to_ivy"], [68, 2, 1, "", "args_to_native"], [68, 2, 1, "", "args_to_new_backend"], [68, 2, 1, "", "to_ivy"], [68, 2, 1, "", "to_native"], [68, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[69, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "asarray"], [69, 0, 1, "", "copy_array"], [69, 0, 1, "", "empty_like"], [69, 0, 1, "", "from_dlpack"], [69, 0, 1, "", "full_like"], [69, 0, 1, "", "linspace"], [69, 0, 1, "", "logspace"], [69, 0, 1, "", "meshgrid"], [69, 0, 1, "", "native_array"], [69, 0, 1, "", "one_hot"], [69, 0, 1, "", "ones_like"], [69, 0, 1, "", "tril"], [69, 0, 1, "", "triu"], [69, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[70, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "astype"], [70, 0, 1, "", "broadcast_arrays"], [70, 0, 1, "", "broadcast_to"], [70, 0, 1, "", "can_cast"], [70, 0, 1, "", "dtype"], [70, 0, 1, "", "finfo"], [70, 0, 1, "", "iinfo"], [70, 0, 1, "", "is_bool_dtype"], [70, 0, 1, "", "is_float_dtype"], [70, 0, 1, "", "is_int_dtype"], [70, 0, 1, "", "is_uint_dtype"], [70, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[71, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "dev"], [71, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[72, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "abs"], [72, 0, 1, "", "acos"], [72, 0, 1, "", "acosh"], [72, 0, 1, "", "add"], [72, 0, 1, "", "angle"], [72, 0, 1, "", "asin"], [72, 0, 1, "", "asinh"], [72, 0, 1, "", "atan"], [72, 0, 1, "", "atan2"], [72, 0, 1, "", "atanh"], [72, 0, 1, "", "bitwise_and"], [72, 0, 1, "", "bitwise_invert"], [72, 0, 1, "", "bitwise_left_shift"], [72, 0, 1, "", "bitwise_or"], [72, 0, 1, "", "bitwise_right_shift"], [72, 0, 1, "", "bitwise_xor"], [72, 0, 1, "", "ceil"], [72, 0, 1, "", "cos"], [72, 0, 1, "", "cosh"], [72, 0, 1, "", "deg2rad"], [72, 0, 1, "", "divide"], [72, 0, 1, "", "equal"], [72, 0, 1, "", "erf"], [72, 0, 1, "", "exp"], [72, 0, 1, "", "exp2"], [72, 0, 1, "", "expm1"], [72, 0, 1, "", "floor"], [72, 0, 1, "", "floor_divide"], [72, 0, 1, "", "fmin"], [72, 0, 1, "", "gcd"], [72, 0, 1, "", "greater"], [72, 0, 1, "", "greater_equal"], [72, 0, 1, "", "isfinite"], [72, 0, 1, "", "isinf"], [72, 0, 1, "", "isnan"], [72, 0, 1, "", "isreal"], [72, 0, 1, "", "lcm"], [72, 0, 1, "", "less"], [72, 0, 1, "", "less_equal"], [72, 0, 1, "", "log"], [72, 0, 1, "", "log10"], [72, 0, 1, "", "log1p"], [72, 0, 1, "", "log2"], [72, 0, 1, "", "logaddexp"], [72, 0, 1, "", "logaddexp2"], [72, 0, 1, "", "logical_and"], [72, 0, 1, "", "logical_not"], [72, 0, 1, "", "logical_or"], [72, 0, 1, "", "logical_xor"], [72, 0, 1, "", "maximum"], [72, 0, 1, "", "minimum"], [72, 0, 1, "", "multiply"], [72, 0, 1, "", "nan_to_num"], [72, 0, 1, "", "negative"], [72, 0, 1, "", "not_equal"], [72, 0, 1, "", "positive"], [72, 0, 1, "", "pow"], [72, 0, 1, "", "rad2deg"], [72, 0, 1, "", "real"], [72, 0, 1, "", "reciprocal"], [72, 0, 1, "", "remainder"], [72, 0, 1, "", "round"], [72, 0, 1, "", "sign"], [72, 0, 1, "", "sin"], [72, 0, 1, "", "sinh"], [72, 0, 1, "", "sqrt"], [72, 0, 1, "", "square"], [72, 0, 1, "", "subtract"], [72, 0, 1, "", "tan"], [72, 0, 1, "", "tanh"], [72, 0, 1, "", "trapz"], [72, 0, 1, "", "trunc"], [72, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[73, 3, 0, "-", "activations"], [73, 3, 0, "-", "conversions"], [73, 3, 0, "-", "creation"], [73, 3, 0, "-", "data_type"], [73, 3, 0, "-", "device"], [73, 3, 0, "-", "elementwise"], [73, 3, 0, "-", "general"], [73, 3, 0, "-", "gradients"], [73, 3, 0, "-", "image"], [73, 3, 0, "-", "layers"], [73, 3, 0, "-", "linear_algebra"], [73, 3, 0, "-", "losses"], [73, 3, 0, "-", "manipulation"], [73, 3, 0, "-", "norms"], [73, 3, 0, "-", "random"], [73, 3, 0, "-", "searching"], [73, 3, 0, "-", "set"], [73, 3, 0, "-", "sorting"], [73, 3, 0, "-", "statistical"], [73, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[73, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "celu"], [73, 0, 1, "", "elu"], [73, 0, 1, "", "hardshrink"], [73, 0, 1, "", "hardsilu"], [73, 0, 1, "", "hardtanh"], [73, 0, 1, "", "logit"], [73, 0, 1, "", "logsigmoid"], [73, 0, 1, "", "prelu"], [73, 0, 1, "", "relu6"], [73, 0, 1, "", "scaled_tanh"], [73, 0, 1, "", "selu"], [73, 0, 1, "", "silu"], [73, 0, 1, "", "softshrink"], [73, 0, 1, "", "tanhshrink"], [73, 0, 1, "", "threshold"], [73, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[73, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[73, 1, 1, "", "_ArrayWithCreationExperimental"], [73, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "blackman_window"], [73, 0, 1, "", "eye_like"], [73, 0, 1, "", "mel_weight_matrix"], [73, 0, 1, "", "trilu"], [73, 0, 1, "", "unsorted_segment_mean"], [73, 0, 1, "", "unsorted_segment_min"], [73, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[73, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[73, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[73, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "allclose"], [73, 0, 1, "", "amax"], [73, 0, 1, "", "amin"], [73, 0, 1, "", "binarizer"], [73, 0, 1, "", "conj"], [73, 0, 1, "", "copysign"], [73, 0, 1, "", "count_nonzero"], [73, 0, 1, "", "diff"], [73, 0, 1, "", "digamma"], [73, 0, 1, "", "erfc"], [73, 0, 1, "", "erfinv"], [73, 0, 1, "", "fix"], [73, 0, 1, "", "float_power"], [73, 0, 1, "", "fmax"], [73, 0, 1, "", "fmod"], [73, 0, 1, "", "frexp"], [73, 0, 1, "", "gradient"], [73, 0, 1, "", "hypot"], [73, 0, 1, "", "isclose"], [73, 0, 1, "", "ldexp"], [73, 0, 1, "", "lerp"], [73, 0, 1, "", "lgamma"], [73, 0, 1, "", "modf"], [73, 0, 1, "", "nansum"], [73, 0, 1, "", "nextafter"], [73, 0, 1, "", "signbit"], [73, 0, 1, "", "sinc"], [73, 0, 1, "", "sparsify_tensor"], [73, 0, 1, "", "xlogy"], [73, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[73, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[73, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[73, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[73, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "adaptive_avg_pool1d"], [73, 0, 1, "", "adaptive_avg_pool2d"], [73, 0, 1, "", "adaptive_max_pool2d"], [73, 0, 1, "", "adaptive_max_pool3d"], [73, 0, 1, "", "avg_pool1d"], [73, 0, 1, "", "avg_pool2d"], [73, 0, 1, "", "avg_pool3d"], [73, 0, 1, "", "dct"], [73, 0, 1, "", "dft"], [73, 0, 1, "", "embedding"], [73, 0, 1, "", "fft"], [73, 0, 1, "", "fft2"], [73, 0, 1, "", "idct"], [73, 0, 1, "", "ifft"], [73, 0, 1, "", "ifftn"], [73, 0, 1, "", "interpolate"], [73, 0, 1, "", "max_pool1d"], [73, 0, 1, "", "max_pool2d"], [73, 0, 1, "", "max_pool3d"], [73, 0, 1, "", "max_unpool1d"], [73, 0, 1, "", "reduce_window"], [73, 0, 1, "", "rfft"], [73, 0, 1, "", "rfftn"], [73, 0, 1, "", "sliding_window"], [73, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[73, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "adjoint"], [73, 0, 1, "", "batched_outer"], [73, 0, 1, "", "cond"], [73, 0, 1, "", "diagflat"], [73, 0, 1, "", "dot"], [73, 0, 1, "", "eig"], [73, 0, 1, "", "eigh_tridiagonal"], [73, 0, 1, "", "eigvals"], [73, 0, 1, "", "general_inner_product"], [73, 0, 1, "", "higher_order_moment"], [73, 0, 1, "", "initialize_tucker"], [73, 0, 1, "", "kron"], [73, 0, 1, "", "make_svd_non_negative"], [73, 0, 1, "", "matrix_exp"], [73, 0, 1, "", "mode_dot"], [73, 0, 1, "", "multi_dot"], [73, 0, 1, "", "multi_mode_dot"], [73, 0, 1, "", "partial_tucker"], [73, 0, 1, "", "svd_flip"], [73, 0, 1, "", "tensor_train"], [73, 0, 1, "", "truncated_svd"], [73, 0, 1, "", "tt_matrix_to_tensor"], [73, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[73, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "hinge_embedding_loss"], [73, 0, 1, "", "huber_loss"], [73, 0, 1, "", "kl_div"], [73, 0, 1, "", "l1_loss"], [73, 0, 1, "", "log_poisson_loss"], [73, 0, 1, "", "poisson_nll_loss"], [73, 0, 1, "", "smooth_l1_loss"], [73, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[73, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "as_strided"], [73, 0, 1, "", "associative_scan"], [73, 0, 1, "", "atleast_1d"], [73, 0, 1, "", "atleast_2d"], [73, 0, 1, "", "atleast_3d"], [73, 0, 1, "", "column_stack"], [73, 0, 1, "", "concat_from_sequence"], [73, 0, 1, "", "dsplit"], [73, 0, 1, "", "dstack"], [73, 0, 1, "", "expand"], [73, 0, 1, "", "fill_diagonal"], [73, 0, 1, "", "flatten"], [73, 0, 1, "", "fliplr"], [73, 0, 1, "", "flipud"], [73, 0, 1, "", "fold"], [73, 0, 1, "", "heaviside"], [73, 0, 1, "", "hsplit"], [73, 0, 1, "", "hstack"], [73, 0, 1, "", "i0"], [73, 0, 1, "", "matricize"], [73, 0, 1, "", "moveaxis"], [73, 0, 1, "", "pad"], [73, 0, 1, "", "partial_fold"], [73, 0, 1, "", "partial_tensor_to_vec"], [73, 0, 1, "", "partial_unfold"], [73, 0, 1, "", "partial_vec_to_tensor"], [73, 0, 1, "", "put_along_axis"], [73, 0, 1, "", "rot90"], [73, 0, 1, "", "soft_thresholding"], [73, 0, 1, "", "take"], [73, 0, 1, "", "take_along_axis"], [73, 0, 1, "", "top_k"], [73, 0, 1, "", "trim_zeros"], [73, 0, 1, "", "unflatten"], [73, 0, 1, "", "unfold"], [73, 0, 1, "", "unique_consecutive"], [73, 0, 1, "", "vsplit"], [73, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[73, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "batch_norm"], [73, 0, 1, "", "group_norm"], [73, 0, 1, "", "instance_norm"], [73, 0, 1, "", "l1_normalize"], [73, 0, 1, "", "l2_normalize"], [73, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[73, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "bernoulli"], [73, 0, 1, "", "beta"], [73, 0, 1, "", "dirichlet"], [73, 0, 1, "", "gamma"], [73, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[73, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[73, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[73, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[73, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[73, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "bincount"], [73, 0, 1, "", "corrcoef"], [73, 0, 1, "", "cov"], [73, 0, 1, "", "cummax"], [73, 0, 1, "", "cummin"], [73, 0, 1, "", "histogram"], [73, 0, 1, "", "igamma"], [73, 0, 1, "", "median"], [73, 0, 1, "", "nanmean"], [73, 0, 1, "", "nanmedian"], [73, 0, 1, "", "nanmin"], [73, 0, 1, "", "nanprod"], [73, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[73, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[74, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "all_equal"], [74, 0, 1, "", "array_equal"], [74, 0, 1, "", "assert_supports_inplace"], [74, 0, 1, "", "clip_matrix_norm"], [74, 0, 1, "", "clip_vector_norm"], [74, 0, 1, "", "default"], [74, 0, 1, "", "einops_rearrange"], [74, 0, 1, "", "einops_reduce"], [74, 0, 1, "", "einops_repeat"], [74, 0, 1, "", "exists"], [74, 0, 1, "", "fourier_encode"], [74, 0, 1, "", "gather"], [74, 0, 1, "", "gather_nd"], [74, 0, 1, "", "get_num_dims"], [74, 0, 1, "", "has_nans"], [74, 0, 1, "", "inplace_decrement"], [74, 0, 1, "", "inplace_increment"], [74, 0, 1, "", "inplace_update"], [74, 0, 1, "", "is_array"], [74, 0, 1, "", "is_ivy_array"], [74, 0, 1, "", "is_ivy_container"], [74, 0, 1, "", "is_native_array"], [74, 0, 1, "", "isin"], [74, 0, 1, "", "scatter_flat"], [74, 0, 1, "", "scatter_nd"], [74, 0, 1, "", "stable_divide"], [74, 0, 1, "", "stable_pow"], [74, 0, 1, "", "supports_inplace_updates"], [74, 0, 1, "", "to_file"], [74, 0, 1, "", "to_list"], [74, 0, 1, "", "to_numpy"], [74, 0, 1, "", "to_scalar"], [74, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[75, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "adam_step"], [75, 0, 1, "", "adam_update"], [75, 0, 1, "", "gradient_descent_update"], [75, 0, 1, "", "lamb_update"], [75, 0, 1, "", "lars_update"], [75, 0, 1, "", "optimizer_update"], [75, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[76, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[76, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[77, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "conv1d"], [77, 0, 1, "", "conv1d_transpose"], [77, 0, 1, "", "conv2d"], [77, 0, 1, "", "conv2d_transpose"], [77, 0, 1, "", "conv3d"], [77, 0, 1, "", "conv3d_transpose"], [77, 0, 1, "", "depthwise_conv2d"], [77, 0, 1, "", "dropout"], [77, 0, 1, "", "dropout1d"], [77, 0, 1, "", "dropout2d"], [77, 0, 1, "", "dropout3d"], [77, 0, 1, "", "linear"], [77, 0, 1, "", "lstm_update"], [77, 0, 1, "", "multi_head_attention"], [77, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[78, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "cholesky"], [78, 0, 1, "", "cross"], [78, 0, 1, "", "det"], [78, 0, 1, "", "diag"], [78, 0, 1, "", "diagonal"], [78, 0, 1, "", "eig"], [78, 0, 1, "", "eigh"], [78, 0, 1, "", "eigvalsh"], [78, 0, 1, "", "inner"], [78, 0, 1, "", "inv"], [78, 0, 1, "", "matmul"], [78, 0, 1, "", "matrix_norm"], [78, 0, 1, "", "matrix_power"], [78, 0, 1, "", "matrix_rank"], [78, 0, 1, "", "matrix_transpose"], [78, 0, 1, "", "outer"], [78, 0, 1, "", "pinv"], [78, 0, 1, "", "qr"], [78, 0, 1, "", "slogdet"], [78, 0, 1, "", "solve"], [78, 0, 1, "", "svd"], [78, 0, 1, "", "svdvals"], [78, 0, 1, "", "tensordot"], [78, 0, 1, "", "tensorsolve"], [78, 0, 1, "", "trace"], [78, 0, 1, "", "vander"], [78, 0, 1, "", "vecdot"], [78, 0, 1, "", "vector_norm"], [78, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[79, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "binary_cross_entropy"], [79, 0, 1, "", "cross_entropy"], [79, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[80, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "clip"], [80, 0, 1, "", "concat"], [80, 0, 1, "", "constant_pad"], [80, 0, 1, "", "expand_dims"], [80, 0, 1, "", "flip"], [80, 0, 1, "", "permute_dims"], [80, 0, 1, "", "repeat"], [80, 0, 1, "", "reshape"], [80, 0, 1, "", "roll"], [80, 0, 1, "", "split"], [80, 0, 1, "", "squeeze"], [80, 0, 1, "", "stack"], [80, 0, 1, "", "swapaxes"], [80, 0, 1, "", "tile"], [80, 0, 1, "", "unstack"], [80, 0, 1, "", "view"], [80, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[81, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[82, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "multinomial"], [82, 0, 1, "", "randint"], [82, 0, 1, "", "random_normal"], [82, 0, 1, "", "random_uniform"], [82, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[83, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "argmax"], [83, 0, 1, "", "argmin"], [83, 0, 1, "", "argwhere"], [83, 0, 1, "", "nonzero"], [83, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[84, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "unique_all"], [84, 0, 1, "", "unique_counts"], [84, 0, 1, "", "unique_inverse"], [84, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[85, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "argsort"], [85, 0, 1, "", "msort"], [85, 0, 1, "", "searchsorted"], [85, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[86, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "cumprod"], [86, 0, 1, "", "cumsum"], [86, 0, 1, "", "einsum"], [86, 0, 1, "", "max"], [86, 0, 1, "", "mean"], [86, 0, 1, "", "min"], [86, 0, 1, "", "prod"], [86, 0, 1, "", "std"], [86, 0, 1, "", "sum"], [86, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[87, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "all"], [87, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[88, 2, 1, "", "_wrap_function"], [88, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[89, 3, 0, "-", "activations"], [90, 3, 0, "-", "base"], [119, 3, 0, "-", "container"], [91, 3, 0, "-", "conversions"], [92, 3, 0, "-", "creation"], [93, 3, 0, "-", "data_type"], [94, 3, 0, "-", "device"], [95, 3, 0, "-", "elementwise"], [96, 3, 0, "-", "experimental"], [97, 3, 0, "-", "general"], [98, 3, 0, "-", "gradients"], [99, 3, 0, "-", "image"], [100, 3, 0, "-", "layers"], [101, 3, 0, "-", "linear_algebra"], [102, 3, 0, "-", "losses"], [103, 3, 0, "-", "manipulation"], [104, 3, 0, "-", "norms"], [105, 3, 0, "-", "random"], [106, 3, 0, "-", "searching"], [107, 3, 0, "-", "set"], [108, 3, 0, "-", "sorting"], [109, 3, 0, "-", "statistical"], [110, 3, 0, "-", "utility"], [111, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[89, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_gelu"], [89, 0, 1, "", "_static_hardswish"], [89, 0, 1, "", "_static_leaky_relu"], [89, 0, 1, "", "_static_log_softmax"], [89, 0, 1, "", "_static_mish"], [89, 0, 1, "", "_static_relu"], [89, 0, 1, "", "_static_sigmoid"], [89, 0, 1, "", "_static_softmax"], [89, 0, 1, "", "_static_softplus"], [89, 0, 1, "", "gelu"], [89, 0, 1, "", "hardswish"], [89, 0, 1, "", "leaky_relu"], [89, 0, 1, "", "log_softmax"], [89, 0, 1, "", "mish"], [89, 0, 1, "", "relu"], [89, 0, 1, "", "sigmoid"], [89, 0, 1, "", "softmax"], [89, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[90, 1, 1, "", "ContainerBase"], [90, 2, 1, "", "_is_jsonable"], [90, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[90, 0, 1, "", "__getitem__"], [90, 0, 1, "", "__init__"], [90, 0, 1, "", "__setitem__"], [90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [90, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [90, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [90, 0, 1, "", "_cont_concat_unify"], [90, 0, 1, "", "_cont_get_dev"], [90, 0, 1, "", "_cont_get_dtype"], [90, 0, 1, "", "_cont_get_shape"], [90, 0, 1, "", "_cont_get_shapes"], [90, 5, 1, "", "_cont_ivy"], [90, 0, 1, "", "_cont_mean_unify"], [90, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [90, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [90, 0, 1, "", "_cont_slice_keys"], [90, 0, 1, "", "_cont_sum_unify"], [90, 0, 1, "", "_get_queue_item"], [90, 0, 1, "", "cont_all_false"], [90, 0, 1, "", "cont_all_key_chains"], [90, 0, 1, "", "cont_all_true"], [90, 0, 1, "", "cont_as_bools"], [90, 0, 1, "", "cont_assert_contains_sub_container"], [90, 0, 1, "", "cont_assert_contains_sub_structure"], [90, 0, 1, "", "cont_assert_identical"], [90, 0, 1, "", "cont_assert_identical_structure"], [90, 0, 1, "", "cont_at_key_chain"], [90, 0, 1, "", "cont_at_key_chains"], [90, 0, 1, "", "cont_at_keys"], [90, 0, 1, "", "cont_combine"], [90, 0, 1, "", "cont_common_key_chains"], [90, 5, 1, "", "cont_config"], [90, 0, 1, "", "cont_contains_sub_container"], [90, 0, 1, "", "cont_contains_sub_structure"], [90, 0, 1, "", "cont_copy"], [90, 0, 1, "", "cont_create_if_absent"], [90, 0, 1, "", "cont_cutoff_at_depth"], [90, 0, 1, "", "cont_cutoff_at_height"], [90, 0, 1, "", "cont_deep_copy"], [90, 5, 1, "", "cont_dev"], [90, 5, 1, "", "cont_dev_str"], [90, 0, 1, "", "cont_diff"], [90, 5, 1, "", "cont_dtype"], [90, 0, 1, "", "cont_duplicate_array_keychains"], [90, 0, 1, "", "cont_find_sub_container"], [90, 0, 1, "", "cont_find_sub_structure"], [90, 0, 1, "", "cont_flatten_key_chain"], [90, 0, 1, "", "cont_flatten_key_chains"], [90, 0, 1, "", "cont_format_key_chains"], [90, 0, 1, "", "cont_from_disk_as_hdf5"], [90, 0, 1, "", "cont_from_disk_as_json"], [90, 0, 1, "", "cont_from_disk_as_pickled"], [90, 0, 1, "", "cont_from_flat_list"], [90, 0, 1, "", "cont_handle_inplace"], [90, 0, 1, "", "cont_has_key"], [90, 0, 1, "", "cont_has_key_chain"], [90, 0, 1, "", "cont_identical"], [90, 0, 1, "", "cont_identical_array_shapes"], [90, 0, 1, "", "cont_identical_configs"], [90, 0, 1, "", "cont_identical_structure"], [90, 0, 1, "", "cont_if_exists"], [90, 0, 1, "", "cont_inplace_update"], [90, 5, 1, "", "cont_ivy"], [90, 0, 1, "", "cont_key_chains_containing"], [90, 0, 1, "", "cont_list_join"], [90, 0, 1, "", "cont_list_stack"], [90, 0, 1, "", "cont_load"], [90, 0, 1, "", "cont_map"], [90, 0, 1, "", "cont_map_sub_conts"], [90, 5, 1, "", "cont_max_depth"], [90, 0, 1, "", "cont_multi_map"], [90, 0, 1, "", "cont_multi_map_in_function"], [90, 0, 1, "", "cont_num_arrays"], [90, 0, 1, "", "cont_overwrite_at_key_chain"], [90, 0, 1, "", "cont_overwrite_at_key_chains"], [90, 0, 1, "", "cont_prune_empty"], [90, 0, 1, "", "cont_prune_key_chain"], [90, 0, 1, "", "cont_prune_key_chains"], [90, 0, 1, "", "cont_prune_key_from_key_chains"], [90, 0, 1, "", "cont_prune_keys"], [90, 0, 1, "", "cont_prune_keys_from_key_chains"], [90, 0, 1, "", "cont_reduce"], [90, 0, 1, "", "cont_remove_key_length_limit"], [90, 0, 1, "", "cont_remove_print_limit"], [90, 0, 1, "", "cont_reshape_like"], [90, 0, 1, "", "cont_restructure"], [90, 0, 1, "", "cont_restructure_key_chains"], [90, 0, 1, "", "cont_save"], [90, 0, 1, "", "cont_set_at_key_chain"], [90, 0, 1, "", "cont_set_at_key_chains"], [90, 0, 1, "", "cont_set_at_keys"], [90, 5, 1, "", "cont_shape"], [90, 5, 1, "", "cont_shapes"], [90, 0, 1, "", "cont_show"], [90, 0, 1, "", "cont_show_sub_container"], [90, 0, 1, "", "cont_size_ordered_arrays"], [90, 0, 1, "", "cont_slice_keys"], [90, 0, 1, "", "cont_slice_via_key"], [90, 0, 1, "", "cont_sort_by_key"], [90, 0, 1, "", "cont_structural_diff"], [90, 0, 1, "", "cont_to_dict"], [90, 0, 1, "", "cont_to_disk_as_hdf5"], [90, 0, 1, "", "cont_to_disk_as_json"], [90, 0, 1, "", "cont_to_disk_as_pickled"], [90, 0, 1, "", "cont_to_flat_list"], [90, 0, 1, "", "cont_to_iterator"], [90, 0, 1, "", "cont_to_iterator_keys"], [90, 0, 1, "", "cont_to_iterator_values"], [90, 0, 1, "", "cont_to_jsonable"], [90, 0, 1, "", "cont_to_nested_list"], [90, 0, 1, "", "cont_to_raw"], [90, 0, 1, "", "cont_trim_key"], [90, 0, 1, "", "cont_try_kc"], [90, 0, 1, "", "cont_unify"], [90, 0, 1, "", "cont_unstack_conts"], [90, 0, 1, "", "cont_update_config"], [90, 0, 1, "", "cont_with_default_key_color"], [90, 0, 1, "", "cont_with_entries_as_lists"], [90, 0, 1, "", "cont_with_ivy_backend"], [90, 0, 1, "", "cont_with_key_length_limit"], [90, 0, 1, "", "cont_with_print_indent"], [90, 0, 1, "", "cont_with_print_limit"], [90, 0, 1, "", "cont_with_print_line_spacing"], [90, 5, 1, "", "dynamic_backend"], [90, 0, 1, "", "h5_file_size"], [90, 0, 1, "", "shuffle_h5_file"], [90, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[119, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[119, 0, 1, "", "__abs__"], [119, 0, 1, "", "__add__"], [119, 0, 1, "", "__eq__"], [119, 0, 1, "", "__ge__"], [119, 0, 1, "", "__gt__"], [119, 0, 1, "", "__init__"], [119, 0, 1, "", "__le__"], [119, 0, 1, "", "__lt__"], [119, 0, 1, "", "__ne__"], [119, 0, 1, "", "__pow__"], [119, 0, 1, "", "__radd__"], [119, 0, 1, "", "__rrshift__"], [119, 0, 1, "", "__rshift__"], [119, 0, 1, "", "__rsub__"], [119, 0, 1, "", "__sub__"], [119, 0, 1, "", "__truediv__"], [119, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[91, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_to_ivy"], [91, 0, 1, "", "_static_to_native"], [91, 0, 1, "", "to_ivy"], [91, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[92, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_arange"], [92, 0, 1, "", "_static_asarray"], [92, 0, 1, "", "_static_copy_array"], [92, 0, 1, "", "_static_empty"], [92, 0, 1, "", "_static_empty_like"], [92, 0, 1, "", "_static_eye"], [92, 0, 1, "", "_static_from_dlpack"], [92, 0, 1, "", "_static_full"], [92, 0, 1, "", "_static_full_like"], [92, 0, 1, "", "_static_linspace"], [92, 0, 1, "", "_static_logspace"], [92, 0, 1, "", "_static_meshgrid"], [92, 0, 1, "", "_static_native_array"], [92, 0, 1, "", "_static_one_hot"], [92, 0, 1, "", "_static_ones"], [92, 0, 1, "", "_static_ones_like"], [92, 0, 1, "", "_static_tril"], [92, 0, 1, "", "_static_triu"], [92, 0, 1, "", "_static_zeros"], [92, 0, 1, "", "_static_zeros_like"], [92, 0, 1, "", "asarray"], [92, 0, 1, "", "copy_array"], [92, 0, 1, "", "empty_like"], [92, 0, 1, "", "from_dlpack"], [92, 0, 1, "", "frombuffer"], [92, 0, 1, "", "full_like"], [92, 0, 1, "", "linspace"], [92, 0, 1, "", "logspace"], [92, 0, 1, "", "meshgrid"], [92, 0, 1, "", "native_array"], [92, 0, 1, "", "one_hot"], [92, 0, 1, "", "ones_like"], [92, 0, 1, "", "static_frombuffer"], [92, 0, 1, "", "static_triu_indices"], [92, 0, 1, "", "tril"], [92, 0, 1, "", "triu"], [92, 0, 1, "", "triu_indices"], [92, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[93, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_astype"], [93, 0, 1, "", "_static_broadcast_arrays"], [93, 0, 1, "", "_static_broadcast_to"], [93, 0, 1, "", "_static_can_cast"], [93, 0, 1, "", "_static_default_complex_dtype"], [93, 0, 1, "", "_static_default_float_dtype"], [93, 0, 1, "", "_static_dtype"], [93, 0, 1, "", "_static_finfo"], [93, 0, 1, "", "_static_function_supported_dtypes"], [93, 0, 1, "", "_static_function_unsupported_dtypes"], [93, 0, 1, "", "_static_iinfo"], [93, 0, 1, "", "_static_is_bool_dtype"], [93, 0, 1, "", "_static_is_complex_dtype"], [93, 0, 1, "", "_static_is_float_dtype"], [93, 0, 1, "", "_static_is_int_dtype"], [93, 0, 1, "", "_static_is_uint_dtype"], [93, 0, 1, "", "_static_result_type"], [93, 0, 1, "", "astype"], [93, 0, 1, "", "broadcast_arrays"], [93, 0, 1, "", "broadcast_to"], [93, 0, 1, "", "can_cast"], [93, 0, 1, "", "dtype"], [93, 0, 1, "", "finfo"], [93, 0, 1, "", "iinfo"], [93, 0, 1, "", "is_bool_dtype"], [93, 0, 1, "", "is_complex_dtype"], [93, 0, 1, "", "is_float_dtype"], [93, 0, 1, "", "is_int_dtype"], [93, 0, 1, "", "is_uint_dtype"], [93, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[94, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_dev"], [94, 0, 1, "", "_static_to_device"], [94, 0, 1, "", "dev"], [94, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[95, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_abs"], [95, 0, 1, "", "_static_acos"], [95, 0, 1, "", "_static_acosh"], [95, 0, 1, "", "_static_add"], [95, 0, 1, "", "_static_asin"], [95, 0, 1, "", "_static_asinh"], [95, 0, 1, "", "_static_atan"], [95, 0, 1, "", "_static_atan2"], [95, 0, 1, "", "_static_atanh"], [95, 0, 1, "", "_static_bitwise_and"], [95, 0, 1, "", "_static_bitwise_invert"], [95, 0, 1, "", "_static_bitwise_left_shift"], [95, 0, 1, "", "_static_bitwise_or"], [95, 0, 1, "", "_static_bitwise_right_shift"], [95, 0, 1, "", "_static_bitwise_xor"], [95, 0, 1, "", "_static_ceil"], [95, 0, 1, "", "_static_cos"], [95, 0, 1, "", "_static_cosh"], [95, 0, 1, "", "_static_deg2rad"], [95, 0, 1, "", "_static_divide"], [95, 0, 1, "", "_static_equal"], [95, 0, 1, "", "_static_erf"], [95, 0, 1, "", "_static_exp"], [95, 0, 1, "", "_static_expm1"], [95, 0, 1, "", "_static_floor"], [95, 0, 1, "", "_static_floor_divide"], [95, 0, 1, "", "_static_greater"], [95, 0, 1, "", "_static_greater_equal"], [95, 0, 1, "", "_static_isfinite"], [95, 0, 1, "", "_static_isinf"], [95, 0, 1, "", "_static_isnan"], [95, 0, 1, "", "_static_isreal"], [95, 0, 1, "", "_static_lcm"], [95, 0, 1, "", "_static_less"], [95, 0, 1, "", "_static_less_equal"], [95, 0, 1, "", "_static_log"], [95, 0, 1, "", "_static_log10"], [95, 0, 1, "", "_static_log1p"], [95, 0, 1, "", "_static_log2"], [95, 0, 1, "", "_static_logaddexp"], [95, 0, 1, "", "_static_logical_and"], [95, 0, 1, "", "_static_logical_not"], [95, 0, 1, "", "_static_logical_or"], [95, 0, 1, "", "_static_logical_xor"], [95, 0, 1, "", "_static_maximum"], [95, 0, 1, "", "_static_minimum"], [95, 0, 1, "", "_static_multiply"], [95, 0, 1, "", "_static_negative"], [95, 0, 1, "", "_static_not_equal"], [95, 0, 1, "", "_static_positive"], [95, 0, 1, "", "_static_pow"], [95, 0, 1, "", "_static_rad2deg"], [95, 0, 1, "", "_static_reciprocal"], [95, 0, 1, "", "_static_remainder"], [95, 0, 1, "", "_static_round"], [95, 0, 1, "", "_static_sign"], [95, 0, 1, "", "_static_sin"], [95, 0, 1, "", "_static_sinh"], [95, 0, 1, "", "_static_sqrt"], [95, 0, 1, "", "_static_square"], [95, 0, 1, "", "_static_subtract"], [95, 0, 1, "", "_static_tan"], [95, 0, 1, "", "_static_tanh"], [95, 0, 1, "", "_static_trapz"], [95, 0, 1, "", "_static_trunc"], [95, 0, 1, "", "_static_trunc_divide"], [95, 0, 1, "", "abs"], [95, 0, 1, "", "acos"], [95, 0, 1, "", "acosh"], [95, 0, 1, "", "add"], [95, 0, 1, "", "angle"], [95, 0, 1, "", "asin"], [95, 0, 1, "", "asinh"], [95, 0, 1, "", "atan"], [95, 0, 1, "", "atan2"], [95, 0, 1, "", "atanh"], [95, 0, 1, "", "bitwise_and"], [95, 0, 1, "", "bitwise_invert"], [95, 0, 1, "", "bitwise_left_shift"], [95, 0, 1, "", "bitwise_or"], [95, 0, 1, "", "bitwise_right_shift"], [95, 0, 1, "", "bitwise_xor"], [95, 0, 1, "", "ceil"], [95, 0, 1, "", "cos"], [95, 0, 1, "", "cosh"], [95, 0, 1, "", "deg2rad"], [95, 0, 1, "", "divide"], [95, 0, 1, "", "equal"], [95, 0, 1, "", "erf"], [95, 0, 1, "", "exp"], [95, 0, 1, "", "exp2"], [95, 0, 1, "", "expm1"], [95, 0, 1, "", "floor"], [95, 0, 1, "", "floor_divide"], [95, 0, 1, "", "fmin"], [95, 0, 1, "", "gcd"], [95, 0, 1, "", "greater"], [95, 0, 1, "", "greater_equal"], [95, 0, 1, "", "imag"], [95, 0, 1, "", "isfinite"], [95, 0, 1, "", "isinf"], [95, 0, 1, "", "isnan"], [95, 0, 1, "", "isreal"], [95, 0, 1, "", "lcm"], [95, 0, 1, "", "less"], [95, 0, 1, "", "less_equal"], [95, 0, 1, "", "log"], [95, 0, 1, "", "log10"], [95, 0, 1, "", "log1p"], [95, 0, 1, "", "log2"], [95, 0, 1, "", "logaddexp"], [95, 0, 1, "", "logaddexp2"], [95, 0, 1, "", "logical_and"], [95, 0, 1, "", "logical_not"], [95, 0, 1, "", "logical_or"], [95, 0, 1, "", "logical_xor"], [95, 0, 1, "", "maximum"], [95, 0, 1, "", "minimum"], [95, 0, 1, "", "multiply"], [95, 0, 1, "", "nan_to_num"], [95, 0, 1, "", "negative"], [95, 0, 1, "", "not_equal"], [95, 0, 1, "", "positive"], [95, 0, 1, "", "pow"], [95, 0, 1, "", "rad2deg"], [95, 0, 1, "", "real"], [95, 0, 1, "", "reciprocal"], [95, 0, 1, "", "remainder"], [95, 0, 1, "", "round"], [95, 0, 1, "", "sign"], [95, 0, 1, "", "sin"], [95, 0, 1, "", "sinh"], [95, 0, 1, "", "sqrt"], [95, 0, 1, "", "square"], [95, 0, 1, "", "static_angle"], [95, 0, 1, "", "static_exp2"], [95, 0, 1, "", "static_fmin"], [95, 0, 1, "", "static_gcd"], [95, 0, 1, "", "static_imag"], [95, 0, 1, "", "static_logaddexp2"], [95, 0, 1, "", "static_nan_to_num"], [95, 0, 1, "", "static_real"], [95, 0, 1, "", "subtract"], [95, 0, 1, "", "tan"], [95, 0, 1, "", "tanh"], [95, 0, 1, "", "trapz"], [95, 0, 1, "", "trunc"], [95, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[96, 3, 0, "-", "activations"], [96, 3, 0, "-", "conversions"], [96, 3, 0, "-", "creation"], [96, 3, 0, "-", "data_type"], [96, 3, 0, "-", "device"], [96, 3, 0, "-", "elementwise"], [96, 3, 0, "-", "general"], [96, 3, 0, "-", "gradients"], [96, 3, 0, "-", "image"], [96, 3, 0, "-", "layers"], [96, 3, 0, "-", "linear_algebra"], [96, 3, 0, "-", "losses"], [96, 3, 0, "-", "manipulation"], [96, 3, 0, "-", "norms"], [96, 3, 0, "-", "random"], [96, 3, 0, "-", "searching"], [96, 3, 0, "-", "set"], [96, 3, 0, "-", "sorting"], [96, 3, 0, "-", "statistical"], [96, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[96, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_celu"], [96, 0, 1, "", "_static_elu"], [96, 0, 1, "", "_static_hardshrink"], [96, 0, 1, "", "_static_hardsilu"], [96, 0, 1, "", "_static_hardtanh"], [96, 0, 1, "", "_static_scaled_tanh"], [96, 0, 1, "", "_static_silu"], [96, 0, 1, "", "_static_softshrink"], [96, 0, 1, "", "_static_tanhshrink"], [96, 0, 1, "", "_static_threshold"], [96, 0, 1, "", "celu"], [96, 0, 1, "", "elu"], [96, 0, 1, "", "hardshrink"], [96, 0, 1, "", "hardsilu"], [96, 0, 1, "", "hardtanh"], [96, 0, 1, "", "logit"], [96, 0, 1, "", "logsigmoid"], [96, 0, 1, "", "prelu"], [96, 0, 1, "", "relu6"], [96, 0, 1, "", "scaled_tanh"], [96, 0, 1, "", "selu"], [96, 0, 1, "", "silu"], [96, 0, 1, "", "softshrink"], [96, 0, 1, "", "static_logit"], [96, 0, 1, "", "static_logsigmoid"], [96, 0, 1, "", "static_prelu"], [96, 0, 1, "", "static_relu6"], [96, 0, 1, "", "static_selu"], [96, 0, 1, "", "static_thresholded_relu"], [96, 0, 1, "", "tanhshrink"], [96, 0, 1, "", "threshold"], [96, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[96, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[96, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_trilu"], [96, 0, 1, "", "blackman_window"], [96, 0, 1, "", "eye_like"], [96, 0, 1, "", "hamming_window"], [96, 0, 1, "", "hann_window"], [96, 0, 1, "", "kaiser_bessel_derived_window"], [96, 0, 1, "", "kaiser_window"], [96, 0, 1, "", "mel_weight_matrix"], [96, 0, 1, "", "polyval"], [96, 0, 1, "", "static_blackman_window"], [96, 0, 1, "", "static_eye_like"], [96, 0, 1, "", "static_hamming_window"], [96, 0, 1, "", "static_hann_window"], [96, 0, 1, "", "static_kaiser_bessel_derived_window"], [96, 0, 1, "", "static_kaiser_window"], [96, 0, 1, "", "static_mel_weight_matrix"], [96, 0, 1, "", "static_polyval"], [96, 0, 1, "", "static_tril_indices"], [96, 0, 1, "", "static_unsorted_segment_mean"], [96, 0, 1, "", "static_unsorted_segment_min"], [96, 0, 1, "", "static_unsorted_segment_sum"], [96, 0, 1, "", "static_vorbis_window"], [96, 0, 1, "", "tril_indices"], [96, 0, 1, "", "trilu"], [96, 0, 1, "", "unsorted_segment_mean"], [96, 0, 1, "", "unsorted_segment_min"], [96, 0, 1, "", "unsorted_segment_sum"], [96, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[96, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[96, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[96, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "allclose"], [96, 0, 1, "", "amax"], [96, 0, 1, "", "amin"], [96, 0, 1, "", "binarizer"], [96, 0, 1, "", "conj"], [96, 0, 1, "", "copysign"], [96, 0, 1, "", "count_nonzero"], [96, 0, 1, "", "diff"], [96, 0, 1, "", "digamma"], [96, 0, 1, "", "erfc"], [96, 0, 1, "", "erfinv"], [96, 0, 1, "", "fix"], [96, 0, 1, "", "float_power"], [96, 0, 1, "", "fmax"], [96, 0, 1, "", "fmod"], [96, 0, 1, "", "frexp"], [96, 0, 1, "", "gradient"], [96, 0, 1, "", "hypot"], [96, 0, 1, "", "isclose"], [96, 0, 1, "", "ldexp"], [96, 0, 1, "", "lerp"], [96, 0, 1, "", "modf"], [96, 0, 1, "", "nansum"], [96, 0, 1, "", "nextafter"], [96, 0, 1, "", "signbit"], [96, 0, 1, "", "sinc"], [96, 0, 1, "", "sparsify_tensor"], [96, 0, 1, "", "static_allclose"], [96, 0, 1, "", "static_amax"], [96, 0, 1, "", "static_amin"], [96, 0, 1, "", "static_binarizer"], [96, 0, 1, "", "static_conj"], [96, 0, 1, "", "static_copysign"], [96, 0, 1, "", "static_count_nonzero"], [96, 0, 1, "", "static_diff"], [96, 0, 1, "", "static_digamma"], [96, 0, 1, "", "static_erfc"], [96, 0, 1, "", "static_erfinv"], [96, 0, 1, "", "static_fix"], [96, 0, 1, "", "static_float_power"], [96, 0, 1, "", "static_fmax"], [96, 0, 1, "", "static_fmod"], [96, 0, 1, "", "static_frexp"], [96, 0, 1, "", "static_gradient"], [96, 0, 1, "", "static_hypot"], [96, 0, 1, "", "static_isclose"], [96, 0, 1, "", "static_ldexp"], [96, 0, 1, "", "static_lerp"], [96, 0, 1, "", "static_modf"], [96, 0, 1, "", "static_nansum"], [96, 0, 1, "", "static_nextafter"], [96, 0, 1, "", "static_signbit"], [96, 0, 1, "", "static_sinc"], [96, 0, 1, "", "static_sparsify_tensor"], [96, 0, 1, "", "static_xlogy"], [96, 0, 1, "", "static_zeta"], [96, 0, 1, "", "xlogy"], [96, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[96, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_reduce"], [96, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[96, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[96, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[96, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_fft"], [96, 0, 1, "", "_static_sliding_window"], [96, 0, 1, "", "adaptive_avg_pool1d"], [96, 0, 1, "", "adaptive_avg_pool2d"], [96, 0, 1, "", "adaptive_max_pool2d"], [96, 0, 1, "", "adaptive_max_pool3d"], [96, 0, 1, "", "avg_pool1d"], [96, 0, 1, "", "avg_pool2d"], [96, 0, 1, "", "avg_pool3d"], [96, 0, 1, "", "dct"], [96, 0, 1, "", "dft"], [96, 0, 1, "", "embedding"], [96, 0, 1, "", "fft"], [96, 0, 1, "", "idct"], [96, 0, 1, "", "ifft"], [96, 0, 1, "", "ifftn"], [96, 0, 1, "", "interpolate"], [96, 0, 1, "", "max_pool1d"], [96, 0, 1, "", "max_pool2d"], [96, 0, 1, "", "max_pool3d"], [96, 0, 1, "", "max_unpool1d"], [96, 0, 1, "", "rfft"], [96, 0, 1, "", "rfftn"], [96, 0, 1, "", "sliding_window"], [96, 0, 1, "", "static_adaptive_avg_pool1d"], [96, 0, 1, "", "static_adaptive_avg_pool2d"], [96, 0, 1, "", "static_adaptive_max_pool2d"], [96, 0, 1, "", "static_adaptive_max_pool3d"], [96, 0, 1, "", "static_avg_pool1d"], [96, 0, 1, "", "static_avg_pool2d"], [96, 0, 1, "", "static_avg_pool3d"], [96, 0, 1, "", "static_dct"], [96, 0, 1, "", "static_dft"], [96, 0, 1, "", "static_embedding"], [96, 0, 1, "", "static_idct"], [96, 0, 1, "", "static_ifft"], [96, 0, 1, "", "static_ifftn"], [96, 0, 1, "", "static_interpolate"], [96, 0, 1, "", "static_max_pool1d"], [96, 0, 1, "", "static_max_pool2d"], [96, 0, 1, "", "static_max_pool3d"], [96, 0, 1, "", "static_max_unpool1d"], [96, 0, 1, "", "static_rfft"], [96, 0, 1, "", "static_rfftn"], [96, 0, 1, "", "static_rnn"], [96, 0, 1, "", "static_stft"], [96, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[96, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "adjoint"], [96, 0, 1, "", "batched_outer"], [96, 0, 1, "", "cond"], [96, 0, 1, "", "diagflat"], [96, 0, 1, "", "dot"], [96, 0, 1, "", "eig"], [96, 0, 1, "", "eigh_tridiagonal"], [96, 0, 1, "", "eigvals"], [96, 0, 1, "", "higher_order_moment"], [96, 0, 1, "", "initialize_tucker"], [96, 0, 1, "", "kron"], [96, 0, 1, "", "make_svd_non_negative"], [96, 0, 1, "", "matrix_exp"], [96, 0, 1, "", "mode_dot"], [96, 0, 1, "", "multi_dot"], [96, 0, 1, "", "multi_mode_dot"], [96, 0, 1, "", "partial_tucker"], [96, 0, 1, "", "static_adjoint"], [96, 0, 1, "", "static_batched_outer"], [96, 0, 1, "", "static_cond"], [96, 0, 1, "", "static_diagflat"], [96, 0, 1, "", "static_dot"], [96, 0, 1, "", "static_eig"], [96, 0, 1, "", "static_eigh_tridiagonal"], [96, 0, 1, "", "static_eigvals"], [96, 0, 1, "", "static_higher_order_moment"], [96, 0, 1, "", "static_initialize_tucker"], [96, 0, 1, "", "static_kron"], [96, 0, 1, "", "static_make_svd_non_negative"], [96, 0, 1, "", "static_matrix_exp"], [96, 0, 1, "", "static_mode_dot"], [96, 0, 1, "", "static_multi_dot"], [96, 0, 1, "", "static_multi_mode_dot"], [96, 0, 1, "", "static_partial_tucker"], [96, 0, 1, "", "static_svd_flip"], [96, 0, 1, "", "static_tensor_train"], [96, 0, 1, "", "static_truncated_svd"], [96, 0, 1, "", "static_tt_matrix_to_tensor"], [96, 0, 1, "", "static_tucker"], [96, 0, 1, "", "svd_flip"], [96, 0, 1, "", "tensor_train"], [96, 0, 1, "", "truncated_svd"], [96, 0, 1, "", "tt_matrix_to_tensor"], [96, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[96, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_hinge_embedding_loss"], [96, 0, 1, "", "_static_huber_loss"], [96, 0, 1, "", "_static_kl_div"], [96, 0, 1, "", "_static_l1_loss"], [96, 0, 1, "", "_static_log_poisson_loss"], [96, 0, 1, "", "_static_poisson_nll_loss"], [96, 0, 1, "", "_static_smooth_l1_loss"], [96, 0, 1, "", "_static_soft_margin_loss"], [96, 0, 1, "", "hinge_embedding_loss"], [96, 0, 1, "", "huber_loss"], [96, 0, 1, "", "kl_div"], [96, 0, 1, "", "l1_loss"], [96, 0, 1, "", "log_poisson_loss"], [96, 0, 1, "", "poisson_nll_loss"], [96, 0, 1, "", "smooth_l1_loss"], [96, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[96, 1, 1, "", "_ContainerWithManipulationExperimental"], [96, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_fill_diagonal"], [96, 0, 1, "", "_static_put_along_axis"], [96, 0, 1, "", "_static_take"], [96, 0, 1, "", "_static_trim_zeros"], [96, 0, 1, "", "_static_unflatten"], [96, 0, 1, "", "_static_unique_consecutive"], [96, 0, 1, "", "as_strided"], [96, 0, 1, "", "associative_scan"], [96, 0, 1, "", "atleast_1d"], [96, 0, 1, "", "atleast_2d"], [96, 0, 1, "", "atleast_3d"], [96, 0, 1, "", "broadcast_shapes"], [96, 0, 1, "", "column_stack"], [96, 0, 1, "", "concat_from_sequence"], [96, 0, 1, "", "dsplit"], [96, 0, 1, "", "dstack"], [96, 0, 1, "", "expand"], [96, 0, 1, "", "fill_diagonal"], [96, 0, 1, "", "flatten"], [96, 0, 1, "", "fliplr"], [96, 0, 1, "", "flipud"], [96, 0, 1, "", "fold"], [96, 0, 1, "", "heaviside"], [96, 0, 1, "", "hsplit"], [96, 0, 1, "", "hstack"], [96, 0, 1, "", "i0"], [96, 0, 1, "", "matricize"], [96, 0, 1, "", "moveaxis"], [96, 0, 1, "", "pad"], [96, 0, 1, "", "partial_fold"], [96, 0, 1, "", "partial_tensor_to_vec"], [96, 0, 1, "", "partial_unfold"], [96, 0, 1, "", "partial_vec_to_tensor"], [96, 0, 1, "", "put_along_axis"], [96, 0, 1, "", "rot90"], [96, 0, 1, "", "soft_thresholding"], [96, 0, 1, "", "static_as_strided"], [96, 0, 1, "", "static_atleast_1d"], [96, 0, 1, "", "static_atleast_2d"], [96, 0, 1, "", "static_atleast_3d"], [96, 0, 1, "", "static_broadcast_shapes"], [96, 0, 1, "", "static_column_stack"], [96, 0, 1, "", "static_concat_from_sequence"], [96, 0, 1, "", "static_dsplit"], [96, 0, 1, "", "static_dstack"], [96, 0, 1, "", "static_expand"], [96, 0, 1, "", "static_flatten"], [96, 0, 1, "", "static_fliplr"], [96, 0, 1, "", "static_flipud"], [96, 0, 1, "", "static_fold"], [96, 0, 1, "", "static_heaviside"], [96, 0, 1, "", "static_hsplit"], [96, 0, 1, "", "static_hstack"], [96, 0, 1, "", "static_i0"], [96, 0, 1, "", "static_matricize"], [96, 0, 1, "", "static_moveaxis"], [96, 0, 1, "", "static_pad"], [96, 0, 1, "", "static_partial_fold"], [96, 0, 1, "", "static_partial_tensor_to_vec"], [96, 0, 1, "", "static_partial_unfold"], [96, 0, 1, "", "static_partial_vec_to_tensor"], [96, 0, 1, "", "static_rot90"], [96, 0, 1, "", "static_soft_thresholding"], [96, 0, 1, "", "static_take_along_axis"], [96, 0, 1, "", "static_top_k"], [96, 0, 1, "", "static_unfold"], [96, 0, 1, "", "static_vsplit"], [96, 0, 1, "", "static_vstack"], [96, 0, 1, "", "take"], [96, 0, 1, "", "take_along_axis"], [96, 0, 1, "", "top_k"], [96, 0, 1, "", "trim_zeros"], [96, 0, 1, "", "unflatten"], [96, 0, 1, "", "unfold"], [96, 0, 1, "", "unique_consecutive"], [96, 0, 1, "", "vsplit"], [96, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[96, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "batch_norm"], [96, 0, 1, "", "group_norm"], [96, 0, 1, "", "instance_norm"], [96, 0, 1, "", "l1_normalize"], [96, 0, 1, "", "l2_normalize"], [96, 0, 1, "", "lp_normalize"], [96, 0, 1, "", "static_batch_norm"], [96, 0, 1, "", "static_group_norm"], [96, 0, 1, "", "static_instance_norm"], [96, 0, 1, "", "static_l1_normalize"], [96, 0, 1, "", "static_l2_normalize"], [96, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[96, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "bernoulli"], [96, 0, 1, "", "beta"], [96, 0, 1, "", "dirichlet"], [96, 0, 1, "", "gamma"], [96, 0, 1, "", "poisson"], [96, 0, 1, "", "static_bernoulli"], [96, 0, 1, "", "static_beta"], [96, 0, 1, "", "static_dirichlet"], [96, 0, 1, "", "static_gamma"], [96, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[96, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "static_unravel_index"], [96, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[96, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[96, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[96, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "invert_permutation"], [96, 0, 1, "", "lexsort"], [96, 0, 1, "", "static_invert_permutation"], [96, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[96, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_cummax"], [96, 0, 1, "", "_static_cummin"], [96, 0, 1, "", "_static_nanmin"], [96, 0, 1, "", "bincount"], [96, 0, 1, "", "corrcoef"], [96, 0, 1, "", "cov"], [96, 0, 1, "", "cummax"], [96, 0, 1, "", "cummin"], [96, 0, 1, "", "histogram"], [96, 0, 1, "", "igamma"], [96, 0, 1, "", "lgamma"], [96, 0, 1, "", "median"], [96, 0, 1, "", "nanmean"], [96, 0, 1, "", "nanmedian"], [96, 0, 1, "", "nanmin"], [96, 0, 1, "", "nanprod"], [96, 0, 1, "", "quantile"], [96, 0, 1, "", "static_bincount"], [96, 0, 1, "", "static_corrcoef"], [96, 0, 1, "", "static_cov"], [96, 0, 1, "", "static_histogram"], [96, 0, 1, "", "static_igamma"], [96, 0, 1, "", "static_lgamma"], [96, 0, 1, "", "static_median"], [96, 0, 1, "", "static_nanmean"], [96, 0, 1, "", "static_nanmedian"], [96, 0, 1, "", "static_nanprod"], [96, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[96, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "optional_get_element"], [96, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[97, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "_static_all_equal"], [97, 0, 1, "", "_static_array_equal"], [97, 0, 1, "", "_static_assert_supports_inplace"], [97, 0, 1, "", "_static_clip_matrix_norm"], [97, 0, 1, "", "_static_clip_vector_norm"], [97, 0, 1, "", "_static_einops_rearrange"], [97, 0, 1, "", "_static_einops_reduce"], [97, 0, 1, "", "_static_einops_repeat"], [97, 0, 1, "", "_static_exists"], [97, 0, 1, "", "_static_fourier_encode"], [97, 0, 1, "", "_static_gather"], [97, 0, 1, "", "_static_gather_nd"], [97, 0, 1, "", "_static_get_num_dims"], [97, 0, 1, "", "_static_has_nans"], [97, 0, 1, "", "_static_inplace_decrement"], [97, 0, 1, "", "_static_inplace_increment"], [97, 0, 1, "", "_static_inplace_update"], [97, 0, 1, "", "_static_is_array"], [97, 0, 1, "", "_static_is_ivy_array"], [97, 0, 1, "", "_static_is_native_array"], [97, 0, 1, "", "_static_scatter_flat"], [97, 0, 1, "", "_static_scatter_nd"], [97, 0, 1, "", "_static_size"], [97, 0, 1, "", "_static_stable_divide"], [97, 0, 1, "", "_static_stable_pow"], [97, 0, 1, "", "_static_supports_inplace_updates"], [97, 0, 1, "", "_static_to_list"], [97, 0, 1, "", "_static_to_numpy"], [97, 0, 1, "", "_static_to_scalar"], [97, 0, 1, "", "_static_value_is_nan"], [97, 0, 1, "", "all_equal"], [97, 0, 1, "", "array_equal"], [97, 0, 1, "", "assert_supports_inplace"], [97, 0, 1, "", "clip_matrix_norm"], [97, 0, 1, "", "clip_vector_norm"], [97, 0, 1, "", "einops_rearrange"], [97, 0, 1, "", "einops_reduce"], [97, 0, 1, "", "einops_repeat"], [97, 0, 1, "", "exists"], [97, 0, 1, "", "fourier_encode"], [97, 0, 1, "", "gather"], [97, 0, 1, "", "gather_nd"], [97, 0, 1, "", "get_num_dims"], [97, 0, 1, "", "has_nans"], [97, 0, 1, "", "inplace_decrement"], [97, 0, 1, "", "inplace_increment"], [97, 0, 1, "", "inplace_update"], [97, 0, 1, "", "is_array"], [97, 0, 1, "", "is_ivy_array"], [97, 0, 1, "", "is_native_array"], [97, 0, 1, "", "isin"], [97, 0, 1, "", "itemsize"], [97, 0, 1, "", "scatter_flat"], [97, 0, 1, "", "scatter_nd"], [97, 0, 1, "", "size"], [97, 0, 1, "", "stable_divide"], [97, 0, 1, "", "stable_pow"], [97, 0, 1, "", "static_isin"], [97, 0, 1, "", "static_itemsize"], [97, 0, 1, "", "static_strides"], [97, 0, 1, "", "strides"], [97, 0, 1, "", "supports_inplace_updates"], [97, 0, 1, "", "to_list"], [97, 0, 1, "", "to_numpy"], [97, 0, 1, "", "to_scalar"], [97, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[98, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_stop_gradient"], [98, 0, 1, "", "adam_step"], [98, 0, 1, "", "adam_update"], [98, 0, 1, "", "gradient_descent_update"], [98, 0, 1, "", "lamb_update"], [98, 0, 1, "", "lars_update"], [98, 0, 1, "", "optimizer_update"], [98, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[99, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[99, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[100, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_static_conv1d"], [100, 0, 1, "", "_static_conv1d_transpose"], [100, 0, 1, "", "_static_conv2d"], [100, 0, 1, "", "_static_conv2d_transpose"], [100, 0, 1, "", "_static_conv3d"], [100, 0, 1, "", "_static_conv3d_transpose"], [100, 0, 1, "", "_static_depthwise_conv2d"], [100, 0, 1, "", "_static_dropout"], [100, 0, 1, "", "_static_dropout1d"], [100, 0, 1, "", "_static_dropout2d"], [100, 0, 1, "", "_static_dropout3d"], [100, 0, 1, "", "_static_linear"], [100, 0, 1, "", "_static_lstm_update"], [100, 0, 1, "", "_static_multi_head_attention"], [100, 0, 1, "", "_static_reduce_window"], [100, 0, 1, "", "_static_scaled_dot_product_attention"], [100, 0, 1, "", "conv1d"], [100, 0, 1, "", "conv1d_transpose"], [100, 0, 1, "", "conv2d"], [100, 0, 1, "", "conv2d_transpose"], [100, 0, 1, "", "conv3d"], [100, 0, 1, "", "conv3d_transpose"], [100, 0, 1, "", "depthwise_conv2d"], [100, 0, 1, "", "dropout"], [100, 0, 1, "", "dropout1d"], [100, 0, 1, "", "dropout2d"], [100, 0, 1, "", "dropout3d"], [100, 0, 1, "", "linear"], [100, 0, 1, "", "lstm_update"], [100, 0, 1, "", "multi_head_attention"], [100, 0, 1, "", "reduce_window"], [100, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[101, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "_static_cholesky"], [101, 0, 1, "", "_static_cross"], [101, 0, 1, "", "_static_det"], [101, 0, 1, "", "_static_diag"], [101, 0, 1, "", "_static_diagonal"], [101, 0, 1, "", "_static_eigh"], [101, 0, 1, "", "_static_eigvalsh"], [101, 0, 1, "", "_static_inner"], [101, 0, 1, "", "_static_inv"], [101, 0, 1, "", "_static_matmul"], [101, 0, 1, "", "_static_matrix_norm"], [101, 0, 1, "", "_static_matrix_power"], [101, 0, 1, "", "_static_matrix_rank"], [101, 0, 1, "", "_static_matrix_transpose"], [101, 0, 1, "", "_static_outer"], [101, 0, 1, "", "_static_pinv"], [101, 0, 1, "", "_static_qr"], [101, 0, 1, "", "_static_slogdet"], [101, 0, 1, "", "_static_solve"], [101, 0, 1, "", "_static_svd"], [101, 0, 1, "", "_static_svdvals"], [101, 0, 1, "", "_static_tensordot"], [101, 0, 1, "", "_static_tensorsolve"], [101, 0, 1, "", "_static_trace"], [101, 0, 1, "", "_static_vander"], [101, 0, 1, "", "_static_vecdot"], [101, 0, 1, "", "_static_vector_norm"], [101, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [101, 0, 1, "", "cholesky"], [101, 0, 1, "", "cross"], [101, 0, 1, "", "det"], [101, 0, 1, "", "diag"], [101, 0, 1, "", "diagonal"], [101, 0, 1, "", "eigh"], [101, 0, 1, "", "eigvalsh"], [101, 0, 1, "", "general_inner_product"], [101, 0, 1, "", "inner"], [101, 0, 1, "", "inv"], [101, 0, 1, "", "matmul"], [101, 0, 1, "", "matrix_norm"], [101, 0, 1, "", "matrix_power"], [101, 0, 1, "", "matrix_rank"], [101, 0, 1, "", "matrix_transpose"], [101, 0, 1, "", "outer"], [101, 0, 1, "", "pinv"], [101, 0, 1, "", "qr"], [101, 0, 1, "", "slogdet"], [101, 0, 1, "", "solve"], [101, 0, 1, "", "static_general_inner_product"], [101, 0, 1, "", "svd"], [101, 0, 1, "", "svdvals"], [101, 0, 1, "", "tensordot"], [101, 0, 1, "", "tensorsolve"], [101, 0, 1, "", "trace"], [101, 0, 1, "", "vander"], [101, 0, 1, "", "vecdot"], [101, 0, 1, "", "vector_norm"], [101, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[102, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "_static_binary_cross_entropy"], [102, 0, 1, "", "_static_cross_entropy"], [102, 0, 1, "", "_static_sparse_cross_entropy"], [102, 0, 1, "", "binary_cross_entropy"], [102, 0, 1, "", "cross_entropy"], [102, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[103, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_clip"], [103, 0, 1, "", "_static_concat"], [103, 0, 1, "", "_static_constant_pad"], [103, 0, 1, "", "_static_expand_dims"], [103, 0, 1, "", "_static_flip"], [103, 0, 1, "", "_static_permute_dims"], [103, 0, 1, "", "_static_repeat"], [103, 0, 1, "", "_static_reshape"], [103, 0, 1, "", "_static_roll"], [103, 0, 1, "", "_static_split"], [103, 0, 1, "", "_static_squeeze"], [103, 0, 1, "", "_static_stack"], [103, 0, 1, "", "_static_swapaxes"], [103, 0, 1, "", "_static_tile"], [103, 0, 1, "", "_static_unstack"], [103, 0, 1, "", "_static_zero_pad"], [103, 0, 1, "", "clip"], [103, 0, 1, "", "concat"], [103, 0, 1, "", "constant_pad"], [103, 0, 1, "", "expand_dims"], [103, 0, 1, "", "flip"], [103, 0, 1, "", "permute_dims"], [103, 0, 1, "", "repeat"], [103, 0, 1, "", "reshape"], [103, 0, 1, "", "roll"], [103, 0, 1, "", "split"], [103, 0, 1, "", "squeeze"], [103, 0, 1, "", "stack"], [103, 0, 1, "", "swapaxes"], [103, 0, 1, "", "tile"], [103, 0, 1, "", "unstack"], [103, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[104, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[105, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_multinomial"], [105, 0, 1, "", "_static_randint"], [105, 0, 1, "", "_static_random_normal"], [105, 0, 1, "", "_static_random_uniform"], [105, 0, 1, "", "_static_shuffle"], [105, 0, 1, "", "multinomial"], [105, 0, 1, "", "randint"], [105, 0, 1, "", "random_normal"], [105, 0, 1, "", "random_uniform"], [105, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[106, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "_static_argmax"], [106, 0, 1, "", "_static_argmin"], [106, 0, 1, "", "_static_argwhere"], [106, 0, 1, "", "_static_nonzero"], [106, 0, 1, "", "_static_where"], [106, 0, 1, "", "argmax"], [106, 0, 1, "", "argmin"], [106, 0, 1, "", "argwhere"], [106, 0, 1, "", "nonzero"], [106, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[107, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "_static_unique_all"], [107, 0, 1, "", "_static_unique_counts"], [107, 0, 1, "", "_static_unique_inverse"], [107, 0, 1, "", "_static_unique_values"], [107, 0, 1, "", "unique_all"], [107, 0, 1, "", "unique_counts"], [107, 0, 1, "", "unique_inverse"], [107, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[108, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[108, 4, 1, "", "_abc_impl"], [108, 0, 1, "", "_static_argsort"], [108, 0, 1, "", "_static_searchsorted"], [108, 0, 1, "", "_static_sort"], [108, 0, 1, "", "argsort"], [108, 0, 1, "", "msort"], [108, 0, 1, "", "searchsorted"], [108, 0, 1, "", "sort"], [108, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[109, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[109, 4, 1, "", "_abc_impl"], [109, 0, 1, "", "_static_cumprod"], [109, 0, 1, "", "_static_cumsum"], [109, 0, 1, "", "_static_min"], [109, 0, 1, "", "_static_prod"], [109, 0, 1, "", "_static_sum"], [109, 0, 1, "", "_static_var"], [109, 0, 1, "", "cumprod"], [109, 0, 1, "", "cumsum"], [109, 0, 1, "", "einsum"], [109, 0, 1, "", "max"], [109, 0, 1, "", "mean"], [109, 0, 1, "", "min"], [109, 0, 1, "", "prod"], [109, 0, 1, "", "std"], [109, 0, 1, "", "sum"], [109, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[110, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[110, 4, 1, "", "_abc_impl"], [110, 0, 1, "", "_static_all"], [110, 0, 1, "", "_static_any"], [110, 0, 1, "", "all"], [110, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[111, 2, 1, "", "_wrap_function"], [111, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[112, 3, 0, "-", "base"], [113, 3, 0, "-", "cp_tensor"], [114, 3, 0, "-", "parafac2_tensor"], [115, 3, 0, "-", "tr_tensor"], [116, 3, 0, "-", "tt_tensor"], [117, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[112, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 0, 1, "", "mode_dot"], [112, 0, 1, "", "norm"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolded"], [112, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[113, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[113, 0, 1, "", "__init__"], [113, 4, 1, "", "_abc_impl"], [113, 0, 1, "", "cp_copy"], [113, 0, 1, "", "cp_flip_sign"], [113, 0, 1, "", "cp_lstsq_grad"], [113, 0, 1, "", "cp_mode_dot"], [113, 0, 1, "", "cp_n_param"], [113, 0, 1, "", "cp_norm"], [113, 0, 1, "", "cp_normalize"], [113, 0, 1, "", "cp_to_tensor"], [113, 0, 1, "", "cp_to_unfolded"], [113, 0, 1, "", "cp_to_vec"], [113, 0, 1, "", "mode_dot"], [113, 5, 1, "", "n_param"], [113, 0, 1, "", "norm"], [113, 0, 1, "", "normalize"], [113, 0, 1, "", "to_tensor"], [113, 0, 1, "", "to_unfolded"], [113, 0, 1, "", "to_vec"], [113, 0, 1, "", "unfolding_dot_khatri_rao"], [113, 0, 1, "", "validate_cp_rank"], [113, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[114, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[114, 0, 1, "", "__init__"], [114, 4, 1, "", "_abc_impl"], [114, 0, 1, "", "apply_parafac2_projections"], [114, 0, 1, "", "from_CPTensor"], [114, 5, 1, "", "n_param"], [114, 0, 1, "", "parafac2_normalise"], [114, 0, 1, "", "parafac2_to_slice"], [114, 0, 1, "", "parafac2_to_slices"], [114, 0, 1, "", "parafac2_to_tensor"], [114, 0, 1, "", "parafac2_to_unfolded"], [114, 0, 1, "", "parafac2_to_vec"], [114, 0, 1, "", "to_tensor"], [114, 0, 1, "", "to_unfolded"], [114, 0, 1, "", "to_vec"], [114, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[115, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[115, 0, 1, "", "__init__"], [115, 4, 1, "", "_abc_impl"], [115, 5, 1, "", "n_param"], [115, 0, 1, "", "to_tensor"], [115, 0, 1, "", "to_unfolded"], [115, 0, 1, "", "to_vec"], [115, 0, 1, "", "tr_n_param"], [115, 0, 1, "", "tr_to_tensor"], [115, 0, 1, "", "tr_to_unfolded"], [115, 0, 1, "", "tr_to_vec"], [115, 0, 1, "", "validate_tr_rank"], [115, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[116, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[116, 0, 1, "", "__init__"], [116, 4, 1, "", "_abc_impl"], [116, 0, 1, "", "_tt_n_param"], [116, 0, 1, "", "index_update"], [116, 5, 1, "", "n_param"], [116, 0, 1, "", "pad_tt_rank"], [116, 0, 1, "", "to_tensor"], [116, 0, 1, "", "to_unfolding"], [116, 0, 1, "", "to_vec"], [116, 0, 1, "", "tt_to_tensor"], [116, 0, 1, "", "tt_to_unfolded"], [116, 0, 1, "", "tt_to_vec"], [116, 0, 1, "", "validate_tt_rank"], [116, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[117, 1, 1, "", "TuckerTensor"], [117, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[117, 0, 1, "", "__init__"], [117, 4, 1, "", "_abc_impl"], [117, 0, 1, "", "mode_dot"], [117, 5, 1, "", "n_param"], [117, 0, 1, "", "to_tensor"], [117, 0, 1, "", "to_unfolded"], [117, 0, 1, "", "to_vec"], [117, 0, 1, "", "tucker_copy"], [117, 0, 1, "", "tucker_mode_dot"], [117, 0, 1, "", "tucker_n_param"], [117, 0, 1, "", "tucker_normalize"], [117, 0, 1, "", "tucker_to_tensor"], [117, 0, 1, "", "tucker_to_unfolded"], [117, 0, 1, "", "tucker_to_vec"], [117, 0, 1, "", "validate_tucker_rank"], [117, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[122, 3, 0, "-", "base"], [123, 3, 0, "-", "elementwise"], [121, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[122, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[122, 0, 1, "", "__init__"], [122, 4, 1, "", "_abc_impl"], [122, 0, 1, "", "broadcast_shapes"], [122, 5, 1, "", "data"], [122, 5, 1, "", "device"], [122, 5, 1, "", "dtype"], [122, 5, 1, "", "inner_shape"], [122, 5, 1, "", "ndim"], [122, 0, 1, "", "nested_array"], [122, 5, 1, "", "nested_rank"], [122, 0, 1, "", "ragged_map"], [122, 0, 1, "", "ragged_multi_map"], [122, 0, 1, "", "ragged_multi_map_in_function"], [122, 0, 1, "", "replace_ivy_arrays"], [122, 5, 1, "", "shape"], [122, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[123, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[123, 4, 1, "", "_abc_impl"], [123, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[121, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[121, 0, 1, "", "__init__"], [121, 0, 1, "", "from_row_lengths"], [121, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[645, 3, 0, "-", "activations"], [646, 3, 0, "-", "constants"], [647, 3, 0, "-", "control_flow_ops"], [648, 3, 0, "-", "creation"], [649, 3, 0, "-", "data_type"], [650, 3, 0, "-", "device"], [651, 3, 0, "-", "elementwise"], [652, 3, 0, "-", "experimental"], [653, 3, 0, "-", "general"], [654, 3, 0, "-", "gradients"], [655, 3, 0, "-", "layers"], [656, 3, 0, "-", "linear_algebra"], [657, 3, 0, "-", "losses"], [658, 3, 0, "-", "manipulation"], [659, 3, 0, "-", "meta"], [660, 3, 0, "-", "nest"], [661, 3, 0, "-", "norms"], [662, 3, 0, "-", "random"], [663, 3, 0, "-", "searching"], [664, 3, 0, "-", "set"], [665, 3, 0, "-", "sorting"], [666, 3, 0, "-", "statistical"], [667, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[384, 3, 0, "-", "activations"], [385, 3, 0, "-", "constants"], [386, 3, 0, "-", "creation"], [387, 3, 0, "-", "data_type"], [388, 3, 0, "-", "device"], [389, 3, 0, "-", "elementwise"], [390, 3, 0, "-", "general"], [391, 3, 0, "-", "gradients"], [392, 3, 0, "-", "layers"], [393, 3, 0, "-", "linear_algebra"], [394, 3, 0, "-", "losses"], [395, 3, 0, "-", "manipulation"], [396, 3, 0, "-", "meta"], [397, 3, 0, "-", "nest"], [398, 3, 0, "-", "norms"], [399, 3, 0, "-", "random"], [400, 3, 0, "-", "searching"], [401, 3, 0, "-", "set"], [402, 3, 0, "-", "sorting"], [403, 3, 0, "-", "sparse_array"], [404, 3, 0, "-", "statistical"], [405, 3, 0, "-", "utility"]], "ivy.stateful": [[810, 3, 0, "-", "activations"], [811, 3, 0, "-", "converters"], [812, 3, 0, "-", "helpers"], [813, 3, 0, "-", "initializers"], [814, 3, 0, "-", "layers"], [815, 3, 0, "-", "losses"], [816, 3, 0, "-", "module"], [817, 3, 0, "-", "norms"], [818, 3, 0, "-", "optimizers"], [819, 3, 0, "-", "sequential"], [820, 3, 0, "-", "utilities"]], "ivy.stateful.activations": [[810, 1, 1, "", "ELU"], [810, 1, 1, "", "GEGLU"], [810, 1, 1, "", "GELU"], [810, 1, 1, "", "Hardswish"], [810, 1, 1, "", "LeakyReLU"], [810, 1, 1, "", "LogSigmoid"], [810, 1, 1, "", "LogSoftmax"], [810, 1, 1, "", "Logit"], [810, 1, 1, "", "Mish"], [810, 1, 1, "", "PReLU"], [810, 1, 1, "", "ReLU"], [810, 1, 1, "", "ReLU6"], [810, 1, 1, "", "SeLU"], [810, 1, 1, "", "SiLU"], [810, 1, 1, "", "Sigmoid"], [810, 1, 1, "", "Softmax"], [810, 1, 1, "", "Softplus"], [810, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[810, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[810, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[811, 1, 1, "", "ModuleConverters"], [811, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[811, 0, 1, "", "from_flax_module"], [811, 0, 1, "", "from_haiku_module"], [811, 0, 1, "", "from_keras_module"], [811, 0, 1, "", "from_paddle_module"], [811, 0, 1, "", "from_torch_module"], [811, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[812, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[813, 1, 1, "", "Constant"], [813, 1, 1, "", "FirstLayerSiren"], [813, 1, 1, "", "GlorotUniform"], [813, 1, 1, "", "Initializer"], [813, 1, 1, "", "KaimingNormal"], [813, 1, 1, "", "Ones"], [813, 1, 1, "", "RandomNormal"], [813, 1, 1, "", "Siren"], [813, 1, 1, "", "Uniform"], [813, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[813, 0, 1, "", "__init__"], [813, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[813, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[813, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[813, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[813, 0, 1, "", "__init__"], [813, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[813, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[813, 0, 1, "", "__init__"], [813, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[813, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[813, 0, 1, "", "__init__"], [813, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[813, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[814, 1, 1, "", "AdaptiveAvgPool1d"], [814, 1, 1, "", "AdaptiveAvgPool2d"], [814, 1, 1, "", "AvgPool1D"], [814, 1, 1, "", "AvgPool2D"], [814, 1, 1, "", "AvgPool3D"], [814, 1, 1, "", "Conv1D"], [814, 1, 1, "", "Conv1DTranspose"], [814, 1, 1, "", "Conv2D"], [814, 1, 1, "", "Conv2DTranspose"], [814, 1, 1, "", "Conv3D"], [814, 1, 1, "", "Conv3DTranspose"], [814, 1, 1, "", "Dct"], [814, 1, 1, "", "DepthwiseConv2D"], [814, 1, 1, "", "Dropout"], [814, 1, 1, "", "Embedding"], [814, 1, 1, "", "FFT"], [814, 1, 1, "", "IDct"], [814, 1, 1, "", "IFFT"], [814, 1, 1, "", "Identity"], [814, 1, 1, "", "LSTM"], [814, 1, 1, "", "Linear"], [814, 1, 1, "", "MaxPool1D"], [814, 1, 1, "", "MaxPool2D"], [814, 1, 1, "", "MaxPool3D"], [814, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[814, 0, 1, "", "__init__"], [814, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[814, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[814, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[815, 1, 1, "", "BinaryCrossEntropyLoss"], [815, 1, 1, "", "CrossEntropyLoss"], [815, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[815, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[815, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[815, 0, 1, "", "__init__"]], "ivy.stateful.module": [[816, 1, 1, "", "Module"], [816, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[816, 0, 1, "", "__call__"], [816, 0, 1, "", "__init__"], [816, 5, 1, "", "buffers"], [816, 0, 1, "", "build"], [816, 5, 1, "", "build_mode"], [816, 5, 1, "", "built"], [816, 5, 1, "", "device"], [816, 5, 1, "", "dtype"], [816, 0, 1, "", "eval"], [816, 0, 1, "", "load"], [816, 5, 1, "", "module_dict"], [816, 0, 1, "", "register_buffer"], [816, 0, 1, "", "register_parameter"], [816, 0, 1, "", "save"], [816, 0, 1, "", "save_weights"], [816, 0, 1, "", "show_graph"], [816, 5, 1, "", "state_dict"], [816, 0, 1, "", "to_device"], [816, 0, 1, "", "trace_graph"], [816, 0, 1, "", "train"], [816, 5, 1, "", "training"], [816, 5, 1, "", "v"]], "ivy.stateful.norms": [[817, 1, 1, "", "BatchNorm2D"], [817, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[817, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[817, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[818, 1, 1, "", "Adam"], [818, 1, 1, "", "AdamW"], [818, 1, 1, "", "LAMB"], [818, 1, 1, "", "LARS"], [818, 1, 1, "", "Optimizer"], [818, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "set_state"], [818, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[818, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "set_state"], [818, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "set_state"], [818, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "set_state"], [818, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[818, 0, 1, "", "__init__"], [818, 0, 1, "", "set_state"], [818, 5, 1, "", "state"]], "ivy.stateful.sequential": [[819, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[819, 0, 1, "", "__init__"]], "ivy.stateful.utilities": [[820, 2, 1, "", "sync_models"], [820, 2, 1, "", "sync_models_torch_and_jax"], [820, 2, 1, "", "sync_models_torch_and_tf"], [820, 2, 1, "", "transpose_weights_pt_to_tf_jax"], [820, 2, 1, "", "transpose_weights_tf_jax_to_pt"]], "ivy.utils": [[821, 3, 0, "-", "assertions"], [822, 3, 0, "-", "backend"], [826, 3, 0, "-", "binaries"], [827, 3, 0, "-", "decorator_utils"], [828, 3, 0, "-", "dynamic_import"], [829, 3, 0, "-", "einsum_parser"], [830, 3, 0, "-", "einsum_path_helpers"], [831, 3, 0, "-", "exceptions"], [832, 3, 0, "-", "inspection"], [833, 3, 0, "-", "logging"], [834, 3, 0, "-", "profiler"]], "ivy.utils.assertions": [[821, 2, 1, "", "check_all"], [821, 2, 1, "", "check_all_or_any_fn"], [821, 2, 1, "", "check_any"], [821, 2, 1, "", "check_dev_correct_formatting"], [821, 2, 1, "", "check_dimensions"], [821, 2, 1, "", "check_elem_in_list"], [821, 2, 1, "", "check_equal"], [821, 2, 1, "", "check_exists"], [821, 2, 1, "", "check_false"], [821, 2, 1, "", "check_gather_input_valid"], [821, 2, 1, "", "check_gather_nd_input_valid"], [821, 2, 1, "", "check_greater"], [821, 2, 1, "", "check_inplace_sizes_valid"], [821, 2, 1, "", "check_isinstance"], [821, 2, 1, "", "check_kernel_padding_size"], [821, 2, 1, "", "check_less"], [821, 2, 1, "", "check_one_way_broadcastable"], [821, 2, 1, "", "check_same_dtype"], [821, 2, 1, "", "check_shape"], [821, 2, 1, "", "check_shapes_broadcastable"], [821, 2, 1, "", "check_true"], [821, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[823, 3, 0, "-", "ast_helpers"], [824, 3, 0, "-", "handler"], [825, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[823, 1, 1, "", "ImportTransformer"], [823, 1, 1, "", "IvyLoader"], [823, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[823, 0, 1, "", "__init__"], [823, 0, 1, "", "impersonate_import"], [823, 0, 1, "", "visit_Import"], [823, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[823, 0, 1, "", "__init__"], [823, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[823, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[824, 1, 1, "", "ContextManager"], [824, 2, 1, "", "choose_random_backend"], [824, 2, 1, "", "current_backend"], [824, 2, 1, "", "dynamic_backend_converter"], [824, 2, 1, "", "prevent_access_locally"], [824, 2, 1, "", "previous_backend"], [824, 2, 1, "", "set_backend"], [824, 2, 1, "", "set_backend_to_specific_version"], [824, 2, 1, "", "set_jax_backend"], [824, 2, 1, "", "set_mxnet_backend"], [824, 2, 1, "", "set_numpy_backend"], [824, 2, 1, "", "set_paddle_backend"], [824, 2, 1, "", "set_tensorflow_backend"], [824, 2, 1, "", "set_torch_backend"], [824, 2, 1, "", "unset_backend"], [824, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[824, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[825, 2, 1, "", "clear_sub_backends"], [825, 2, 1, "", "find_available_sub_backends"], [825, 2, 1, "", "fn_name_from_version_specific_fn_name"], [825, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [825, 2, 1, "", "set_sub_backend"], [825, 2, 1, "", "set_sub_backend_to_specific_version"], [825, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[826, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[827, 1, 1, "", "CallVisitor"], [827, 1, 1, "", "TransposeType"], [827, 2, 1, "", "apply_transpose"], [827, 2, 1, "", "dummy_inplace_update"], [827, 2, 1, "", "get_next_func"], [827, 2, 1, "", "handle_get_item"], [827, 2, 1, "", "handle_methods"], [827, 2, 1, "", "handle_set_item"], [827, 2, 1, "", "handle_transpose_in_input_and_output"], [827, 2, 1, "", "handle_transpose_in_input_and_output_for_functions"], [827, 2, 1, "", "handle_transpose_in_pad"], [827, 2, 1, "", "retrieve_object"], [827, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[827, 0, 1, "", "__init__"], [827, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[827, 4, 1, "", "CONV1D"], [827, 4, 1, "", "CONV2D"], [827, 4, 1, "", "CONV3D"], [827, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[828, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[829, 2, 1, "", "convert_interleaved_input"], [829, 2, 1, "", "convert_subscripts"], [829, 2, 1, "", "find_output_shape"], [829, 2, 1, "", "find_output_str"], [829, 2, 1, "", "gen_unused_symbols"], [829, 2, 1, "", "get_symbol"], [829, 2, 1, "", "has_valid_einsum_chars_only"], [829, 2, 1, "", "is_valid_einsum_char"], [829, 2, 1, "", "legalise_einsum_expr"], [829, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[830, 2, 1, "", "can_dot"], [830, 2, 1, "", "compute_size_by_dict"], [830, 2, 1, "", "find_contraction"], [830, 2, 1, "", "flop_count"], [830, 2, 1, "", "greedy_path"], [830, 2, 1, "", "optimal_path"], [830, 2, 1, "", "parse_einsum_input"], [830, 2, 1, "", "parse_possible_contraction"], [830, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[831, 7, 1, "", "InplaceUpdateException"], [831, 7, 1, "", "IvyAttributeError"], [831, 7, 1, "", "IvyBackendException"], [831, 7, 1, "", "IvyBroadcastShapeError"], [831, 7, 1, "", "IvyDeviceError"], [831, 7, 1, "", "IvyDtypePromotionError"], [831, 7, 1, "", "IvyError"], [831, 7, 1, "", "IvyException"], [831, 7, 1, "", "IvyIndexError"], [831, 7, 1, "", "IvyInvalidBackendException"], [831, 7, 1, "", "IvyNotImplementedException"], [831, 7, 1, "", "IvyValueError"], [831, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[831, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[831, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[832, 2, 1, "", "add_array_specs"], [832, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[833, 2, 1, "", "set_logging_mode"], [833, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[834, 1, 1, "", "Profiler"], [834, 2, 1, "", "tensorflow_profile_start"], [834, 2, 1, "", "tensorflow_profile_stop"], [834, 2, 1, "", "torch_profiler_init"], [834, 2, 1, "", "torch_profiler_start"], [834, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[834, 0, 1, "", "__init__"], [834, 4, 1, "", "print_stats"], [834, 4, 1, "", "viz"]], "ivy_tests.test_ivy.helpers": [[793, 3, 0, "-", "assertions"], [794, 3, 0, "-", "available_frameworks"], [795, 3, 0, "-", "function_testing"], [796, 3, 0, "-", "globals"], [797, 3, 0, "-", "hypothesis_helpers"], [802, 3, 0, "-", "multiprocessing"], [803, 3, 0, "-", "pipeline_helper"], [804, 3, 0, "-", "structs"], [805, 3, 0, "-", "test_parameter_flags"], [806, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[793, 2, 1, "", "assert_all_close"], [793, 2, 1, "", "assert_same_type"], [793, 2, 1, "", "assert_same_type_and_shape"], [793, 2, 1, "", "check_unsupported_device"], [793, 2, 1, "", "check_unsupported_device_and_dtype"], [793, 2, 1, "", "check_unsupported_dtype"], [793, 2, 1, "", "test_unsupported_function"], [793, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[795, 2, 1, "", "args_to_container"], [795, 2, 1, "", "args_to_frontend"], [795, 2, 1, "", "arrays_to_frontend"], [795, 2, 1, "", "as_lists"], [795, 2, 1, "", "convtrue"], [795, 2, 1, "", "create_args_kwargs"], [795, 2, 1, "", "flatten"], [795, 2, 1, "", "flatten_and_to_np"], [795, 2, 1, "", "flatten_frontend"], [795, 2, 1, "", "flatten_frontend_fw_to_np"], [795, 2, 1, "", "flatten_frontend_to_np"], [795, 2, 1, "", "get_frontend_ret"], [795, 2, 1, "", "get_ret_and_flattened_np_array"], [795, 2, 1, "", "gradient_incompatible_function"], [795, 2, 1, "", "gradient_test"], [795, 2, 1, "", "gradient_unsupported_dtypes"], [795, 2, 1, "", "kwargs_to_args_n_kwargs"], [795, 2, 1, "", "test_frontend_function"], [795, 2, 1, "", "test_frontend_method"], [795, 2, 1, "", "test_function"], [795, 2, 1, "", "test_function_backend_computation"], [795, 2, 1, "", "test_function_ground_truth_computation"], [795, 2, 1, "", "test_gradient_backend_computation"], [795, 2, 1, "", "test_gradient_ground_truth_computation"], [795, 2, 1, "", "test_method"], [795, 2, 1, "", "test_method_backend_computation"], [795, 2, 1, "", "test_method_ground_truth_computation"], [795, 2, 1, "", "traced_if_required"], [795, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[796, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [796, 7, 1, "", "InterruptedTest"], [796, 1, 1, "", "TestData"], [796, 2, 1, "", "setup_api_test"], [796, 2, 1, "", "setup_frontend_test"], [796, 2, 1, "", "teardown_api_test"], [796, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[796, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[796, 0, 1, "", "__init__"], [796, 4, 1, "", "fn_name"], [796, 4, 1, "", "fn_tree"], [796, 4, 1, "", "is_method"], [796, 4, 1, "", "supported_device_dtypes"], [796, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[798, 3, 0, "-", "array_helpers"], [799, 3, 0, "-", "dtype_helpers"], [800, 3, 0, "-", "general_helpers"], [801, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[798, 2, 1, "", "array_and_broadcastable_shape"], [798, 2, 1, "", "array_bools"], [798, 2, 1, "", "array_helpers_dtype_info_helper"], [798, 2, 1, "", "array_indices_axis"], [798, 2, 1, "", "array_indices_put_along_axis"], [798, 2, 1, "", "array_values"], [798, 2, 1, "", "arrays_and_axes"], [798, 2, 1, "", "arrays_for_pooling"], [798, 2, 1, "", "broadcast_shapes"], [798, 2, 1, "", "cond_data_gen_helper"], [798, 2, 1, "", "create_concatenable_arrays_dtypes"], [798, 2, 1, "", "create_nested_input"], [798, 2, 1, "", "dtype_and_values"], [798, 2, 1, "", "dtype_array_query"], [798, 2, 1, "", "dtype_array_query_val"], [798, 2, 1, "", "dtype_values_axis"], [798, 2, 1, "", "einsum_helper"], [798, 2, 1, "", "get_first_solve_batch_matrix"], [798, 2, 1, "", "get_first_solve_matrix"], [798, 2, 1, "", "get_second_solve_batch_matrix"], [798, 2, 1, "", "get_second_solve_matrix"], [798, 2, 1, "", "list_of_size"], [798, 2, 1, "", "lists"], [798, 2, 1, "", "mutually_broadcastable_shapes"], [798, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[799, 2, 1, "", "array_dtypes"], [799, 2, 1, "", "cast_filter"], [799, 2, 1, "", "cast_filter_helper"], [799, 2, 1, "", "get_castable_dtype"], [799, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[800, 7, 1, "", "BroadcastError"], [800, 2, 1, "", "apply_safety_factor"], [800, 2, 1, "", "broadcast_shapes"], [800, 2, 1, "", "dims_and_offset"], [800, 2, 1, "", "embedding_helper"], [800, 2, 1, "", "general_helpers_dtype_info_helper"], [800, 2, 1, "", "get_axis"], [800, 2, 1, "", "get_bounds"], [800, 2, 1, "", "get_mean_std"], [800, 2, 1, "", "get_shape"], [800, 2, 1, "", "matrix_is_stable"], [800, 2, 1, "", "reshape_shapes"], [800, 2, 1, "", "sizes_"], [800, 2, 1, "", "subsets"], [800, 2, 1, "", "two_broadcastable_shapes"], [800, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[801, 2, 1, "", "floats"], [801, 2, 1, "", "ints"], [801, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[802, 2, 1, "", "backend_proc"], [802, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[803, 1, 1, "", "BackendHandler"], [803, 1, 1, "", "BackendHandlerMode"], [803, 1, 1, "", "WithBackendContext"], [803, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[803, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[803, 4, 1, "", "SetBackend"], [803, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[803, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[804, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[804, 0, 1, "", "__init__"], [804, 4, 1, "", "framework_init_module"], [804, 4, 1, "", "init_name"], [804, 4, 1, "", "ivy_init_module"], [804, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[805, 1, 1, "", "DynamicFlag"], [805, 1, 1, "", "FrontendFunctionTestFlags"], [805, 1, 1, "", "FrontendInitTestFlags"], [805, 1, 1, "", "FrontendMethodTestFlags"], [805, 1, 1, "", "FunctionTestFlags"], [805, 1, 1, "", "InitMethodTestFlags"], [805, 1, 1, "", "MethodTestFlags"], [805, 1, 1, "", "TestFlags"], [805, 2, 1, "", "build_flag"], [805, 2, 1, "", "frontend_function_flags"], [805, 2, 1, "", "frontend_init_flags"], [805, 2, 1, "", "frontend_method_flags"], [805, 2, 1, "", "function_flags"], [805, 2, 1, "", "init_method_flags"], [805, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[805, 0, 1, "", "__init__"], [805, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[805, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[806, 2, 1, "", "handle_example"], [806, 2, 1, "", "handle_frontend_method"], [806, 2, 1, "", "handle_frontend_test"], [806, 2, 1, "", "handle_method"], [806, 2, 1, "", "handle_test"], [806, 2, 1, "", "num_positional_args"], [806, 2, 1, "", "num_positional_args_helper"], [806, 2, 1, "", "num_positional_args_method"], [806, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": [0, 16, 17], "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 16, 17, 24, 25, 33, 41, 44, 63, 65, 835, 836, 838, 841, 842, 845, 860, 863, 873, 879], "ivi": [0, 4, 5, 6, 7, 12, 13, 16, 17, 24, 25, 33, 36, 44, 47, 48, 59, 60, 62, 63, 65, 835, 841, 843, 846, 848, 852, 854, 860, 862, 863, 864, 865, 866, 867, 870, 871, 873, 879, 880, 884], "framework": [0, 8, 9, 26, 47, 53, 59, 794, 807, 835, 860, 863, 882], "librari": [0, 42, 47, 48, 63, 65, 835], "instal": [0, 4, 5, 6, 7, 16, 17, 24, 25, 26, 36, 59, 60, 62, 835, 873], "import": [0, 6, 7, 12, 13, 24, 25, 29, 36, 59, 60, 63, 828], "configur": [0, 854, 863], "environ": [0, 842], "load": [0, 12, 13, 17, 24, 25, 26, 29, 791], "dataset": [0, 61, 63], "preview": 0, "inspect": [0, 832], "end": [0, 63], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 863], "transact": 0, "class": [0, 124, 807, 835, 846, 854, 862], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 24, 25, 26, 29, 36, 47, 59, 70, 93, 124, 387, 649, 664, 771, 772, 773, 774, 850, 862, 865, 872], "analysi": 0, "statist": [0, 86, 109, 404, 666], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 26, 29, 48, 884], "metric": [0, 29, 63], "under": 0, "sampl": [0, 60], "balanc": [0, 868], "creat": [0, 1, 59, 60, 841], "split": [0, 730], "featur": [0, 865], "target": [0, 59], "train": [0, 26, 29, 59, 61, 63], "test": [0, 29, 61, 795, 805, 806, 809, 841, 842, 843, 845, 855, 863, 865], "set": [0, 8, 9, 24, 25, 26, 55, 59, 60, 84, 107, 401, 664, 836, 842, 847, 855, 867], "convert": [0, 8, 9, 10, 11, 26, 811, 835], "arrai": [0, 118, 121, 143, 403, 798, 845, 846, 857, 879], "displai": [0, 64], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 24, 25], "function": [0, 12, 13, 17, 36, 45, 47, 48, 59, 60, 61, 63, 65, 125, 795, 835, 841, 849, 850, 851, 854, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 870, 872], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 71, 94, 388, 650, 851, 857, 862], "mode": [0, 55, 850, 854, 867], "xgboost": [0, 29], "classifi": [0, 24, 25], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 43, 44, 46, 47, 48, 59, 60, 61, 62, 63, 65, 872], "time": [0, 29], "base": [0, 90, 112, 122], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 860, 862], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 868], "classif": [0, 6, 7], "report": 0, "evalu": [0, 29], "ivyclassifi": 0, "xgbclassifi": [0, 29], "visual": [0, 17, 26, 64], "comparison": [0, 29], "demo": [1, 3, 4, 5, 6, 7, 34, 47, 61, 62], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 24, 25, 29, 34, 55, 820, 852, 857, 860, 863, 865, 868, 879], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 24, 25, 859], "torch": [4, 5, 6, 7, 12, 13, 24, 25, 55, 62, 882, 883], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 17, 26, 29, 32, 45, 46, 48, 55, 62, 63, 64, 882], "jax": [4, 5, 6, 7, 12, 13, 22, 23, 27, 28, 29, 55, 62, 882], "appendix": [4, 5, 12, 13], "code": [4, 5, 36, 37, 38, 39, 48, 59, 835, 856, 864, 866], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 816, 835, 850, 851], "sequenc": [6, 7, 857], "your": [8, 9, 12, 13, 24, 25, 26, 836, 843, 865], "pytorch": [8, 9, 10, 11, 26, 27, 28, 29, 30, 45, 46, 61, 882], "project": [8, 9, 26], "incompat": [8, 9, 26], "transpil": [8, 9, 10, 11, 16, 17, 26, 30, 31, 32, 39, 40, 41, 42, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 61, 65, 835, 870, 871, 877, 880], "about": [8, 9, 10, 11, 26, 59], "up": [8, 9, 26, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 61, 836, 842, 855, 864], "sourc": [8, 9, 26, 870, 871, 873], "from": [8, 9, 10, 11, 26, 45, 46, 55, 62, 873], "result": [8, 9, 10, 11, 17, 26, 48, 60], "fine": [8, 9, 10, 11, 26], "tune": [8, 9, 10, 11, 26], "conclus": [8, 9, 10, 11, 16, 17, 26], "how": [10, 11, 41, 841, 848, 855, 864, 865], "To": [10, 11, 65, 843], "paddlepaddl": [10, 11], "imag": [12, 13, 16, 17, 24, 25, 26, 76, 99, 270, 838, 848], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 846, 848, 860, 864, 872], "preprocess": [12, 13], "visualis": [12, 13, 24, 25], "initi": [12, 13, 24, 25, 26, 48, 813], "nativ": [12, 13, 24, 25, 846, 868], "pretrain": [12, 13, 24, 25], "weight": [12, 13, 24, 25], "mask": [12, 13], "backend": [12, 13, 29, 36, 47, 59, 60, 62, 63, 822, 825, 841, 847, 850, 860, 866, 870, 872], "keypoint": 16, "augment": 16, "kornia": [16, 17, 56], "": [16, 17, 61, 63, 841, 848, 864], "introduct": [16, 17, 62, 65, 862, 863], "origin": [16, 17], "tutori": [16, 17, 34, 63], "setup": [16, 17, 62, 856], "draw": 16, "point": 16, "show": 16, "resiz": 16, "crop": 16, "what": [16, 17, 868], "next": [16, 17], "denois": 17, "defin": [17, 59, 60, 61, 63], "imshow": 17, "an": [17, 841, 860], "total": 17, "variat": 17, "network": [17, 33, 60, 63], "tvdenois": 17, "run": [17, 62, 843, 845, 848, 855, 865], "optim": [17, 59, 818], "loop": [17, 59, 63], "acceler": [22, 23, 27, 28, 29], "mmpretrain": [22, 23], "resnet": [24, 25, 26, 66], "label": [24, 25], "resnet34": [24, 25], "resnet50": [24, 25], "few": 26, "pre": [26, 842, 856], "build": [26, 30, 31, 32, 48, 63, 838, 848, 870], "xgb_frontend": 29, "xgb": 29, "more": [29, 842, 868], "exhaust": 29, "v": [29, 40, 52, 55, 856, 872, 879], "number": [29, 801, 857], "boost": 29, "round": [29, 30, 32, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 61, 300, 864], "fraction": 29, "top": [30, 31, 32], "haiku": 31, "develop": 33, "convolut": 33, "And": 34, "learn": [34, 35, 835, 882], "basic": [34, 35, 59, 60, 843, 862], "write": [36, 44, 862, 865], "content": [36, 61], "handler": [36, 47, 824, 825, 870], "structur": [36, 47, 848, 860, 872], "api": [36, 47, 48, 836, 841, 845, 849, 860, 866, 870, 879, 880], "state": [36, 47, 879], "unifi": [37, 49, 52, 53, 54, 59], "trace": [38, 40, 41, 48, 710, 854], "lazi": [40, 52, 879], "eager": [40, 52, 879], "decor": [41, 54, 827, 854, 859, 865], "ani": [42, 43, 47, 48, 790], "odsc": 47, "graph": [47, 64, 871, 883], "tracer": [47, 871, 879, 883], "quickstart": 48, "get": [48, 843, 873], "familiar": 48, "0": [49, 50, 51, 52, 56, 57], "1": [50, 52, 53, 54, 55, 58, 65, 882], "compil": [50, 52, 53, 54, 60, 879], "2": [51, 54, 56, 65, 882], "select": 53, "As": 54, "3": [55, 57, 58, 65], "dynam": [55, 63, 828, 847, 872], "static": 55, "todo": [55, 843], "explain": 55, "via": 55, "why": [55, 865, 877], "i": [55, 835, 848, 868], "true": 55, "default": [55, 562], "when": 55, "numpi": [55, 62, 862, 882], "fals": 55, "perceiv": 57, "stabl": 58, "diffus": 58, "oper": [59, 857, 867, 872], "ml": [59, 876], "chang": 59, "one": 59, "line": [59, 843], "No": [59, 842], "need": [59, 865], "worri": 59, "type": [59, 70, 93, 387, 649, 850, 858, 862, 872], "differ": 59, "them": 59, "all": [59, 789], "standalon": [59, 858], "input": [59, 60, 857], "loss": [59, 79, 102, 394, 657, 815], "check": [60, 856, 872], "simpl": 60, "neural": 60, "deepmind": [61, 62], "perceiverio": [61, 62], "tabl": [61, 848, 850], "construct": 61, "some": 61, "helper": [61, 797, 798, 799, 800, 801, 803, 806, 812, 823, 830, 863, 865, 866], "pipelin": [61, 63, 803, 848, 865], "download": 61, "dataload": 61, "gpu": [62, 872], "python3": 62, "8": 62, "kernel": 62, "clone": [62, 842], "repo": [62, 842], "ivy_model": 62, "let": 63, "we": [63, 865], "ar": 63, "mnist": 63, "thi": 63, "temporari": 63, "loader": 63, "util": [63, 87, 110, 405, 667, 808, 820, 827], "plot": 63, "save": [63, 792], "huggingfac": 64, "deit": 64, "can": 64, "html": 64, "file": 64, "browser": [64, 843], "interfac": 65, "telemetri": 65, "18": 66, "activ": [67, 89, 384, 645, 810], "convers": [68, 91, 859], "creation": [69, 92, 386, 648], "elementwis": [72, 95, 123, 389, 651], "experiment": [73, 96, 652, 841], "gener": [74, 97, 390, 653, 800, 860, 865, 868, 879], "gradient": [75, 98, 366, 391, 654, 860], "layer": [77, 100, 392, 655, 814], "linear": [78, 101, 393, 656, 679], "algebra": [78, 101, 393, 656], "manipul": [80, 103, 395, 658], "norm": [81, 104, 398, 661, 817], "random": [82, 105, 399, 662], "search": [83, 106, 400, 663], "sort": [85, 108, 402, 665, 778], "wrap": [88, 111, 859], "cp": 113, "tensor": [113, 114, 115, 116, 117, 120], "parafac2": 114, "tr": 115, "tt": 116, "tucker": [117, 468], "contain": [119, 843, 849], "factor": 120, "nest": [121, 397, 660], "gelu": 126, "hardswish": 127, "leaky_relu": 128, "log_softmax": 129, "mish": 130, "relu": 131, "sigmoid": 132, "softmax": 133, "softplu": 134, "softsign": 135, "cmp_i": 136, "cmp_isnot": 137, "for_loop": 138, "if_els": 139, "try_except": 140, "while_loop": 141, "arang": 142, "asarrai": 144, "complex": 145, "copy_arrai": 146, "empti": 147, "empty_lik": 148, "ey": 149, "from_dlpack": 150, "note": [150, 161, 648], "frombuff": 151, "full": [152, 863], "full_lik": 153, "linspac": 154, "logspac": 155, "meshgrid": 156, "native_arrai": 157, "one_hot": 158, "ones": 159, "ones_lik": 160, "to_dlpack": 161, "tril": 162, "triu": 163, "triu_indic": 164, "zero": 165, "zeros_lik": 166, "as_ivy_dtyp": 167, "as_native_dtyp": 168, "astyp": 169, "broadcast_arrai": 170, "broadcast_to": 171, "can_cast": 172, "check_float": 173, "closest_valid_dtyp": 174, "default_complex_dtyp": 175, "default_dtyp": 176, "default_float_dtyp": 177, "default_int_dtyp": 178, "default_uint_dtyp": 179, "dtype": [180, 799, 857], "dtype_bit": 181, "finfo": 182, "function_supported_dtyp": 183, "function_unsupported_dtyp": 184, "iinfo": 185, "infer_default_dtyp": 186, "invalid_dtyp": 187, "is_bool_dtyp": 188, "is_complex_dtyp": 189, "is_float_dtyp": 190, "is_hashable_dtyp": 191, "is_int_dtyp": 192, "is_native_dtyp": 193, "is_uint_dtyp": 194, "promote_typ": 195, "promote_types_of_input": 196, "result_typ": 197, "set_default_complex_dtyp": 198, "set_default_dtyp": 199, "set_default_float_dtyp": 200, "set_default_int_dtyp": 201, "set_default_uint_dtyp": 202, "type_promote_arrai": 203, "unset_default_complex_dtyp": 204, "unset_default_dtyp": 205, "unset_default_float_dtyp": 206, "unset_default_int_dtyp": 207, "unset_default_uint_dtyp": 208, "valid_dtyp": 209, "as_ivy_dev": 210, "as_native_dev": 211, "clear_cached_mem_on_dev": 212, "default_devic": 213, "dev": 214, "dev_util": 215, "function_supported_devic": 216, "function_unsupported_devic": 217, "get_all_ivy_arrays_on_dev": 218, "gpu_is_avail": 219, "handle_soft_device_vari": 220, "num_cpu_cor": 221, "num_gpu": 222, "num_ivy_arrays_on_dev": 223, "percent_used_mem_on_dev": 224, "print_all_ivy_arrays_on_dev": 225, "set_default_devic": 226, "set_soft_device_mod": 227, "paramet": [227, 596, 597, 602, 603, 605, 606, 650, 653, 805, 810, 867], "set_split_factor": 228, "split_factor": 229, "split_func_cal": 230, "to_devic": 231, "total_mem_on_dev": 232, "tpu_is_avail": 233, "unset_default_devic": 234, "unset_soft_device_mod": 235, "used_mem_on_dev": 236, "ab": 237, "aco": 238, "acosh": 239, "add": [240, 852, 863], "angl": 241, "asin": 242, "asinh": 243, "atan": 244, "atan2": 245, "atanh": 246, "bitwise_and": 247, "bitwise_invert": 248, "bitwise_left_shift": 249, "bitwise_or": 250, "bitwise_right_shift": 251, "bitwise_xor": 252, "ceil": 253, "co": 254, "cosh": 255, "deg2rad": 256, "divid": 257, "equal": 258, "erf": 259, "exp": 260, "exp2": 261, "expm1": 262, "floor": 263, "floor_divid": 264, "fmin": 265, "fmod": 266, "gcd": 267, "greater": 268, "greater_equ": 269, "isfinit": 271, "isinf": 272, "isnan": 273, "isreal": 274, "lcm": 275, "less": 276, "less_equ": 277, "log": [278, 833, 842], "log10": 279, "log1p": 280, "log2": 281, "logaddexp": 282, "logaddexp2": 283, "logical_and": 284, "logical_not": 285, "logical_or": 286, "logical_xor": 287, "maximum": 288, "minimum": 289, "multipli": 290, "nan_to_num": 291, "neg": 292, "not_equ": 293, "posit": [294, 857], "pow": 295, "rad2deg": 296, "real": 297, "reciproc": 298, "remaind": 299, "sign": 301, "sin": 302, "sinh": 303, "sqrt": 304, "squar": 305, "subtract": 306, "tan": [307, 852, 863], "tanh": 308, "trapz": 309, "trunc": 310, "trunc_divid": 311, "celu": 312, "elu": 313, "hardshrink": 314, "hardsilu": 315, "hardtanh": 316, "logit": 317, "logsigmoid": 318, "prelu": 319, "relu6": 320, "scaled_tanh": 321, "selu": 322, "silu": 323, "softshrink": 324, "stanh": 325, "tanhshrink": 326, "threshold": 327, "thresholded_relu": 328, "blackman_window": 329, "eye_lik": 330, "hamming_window": 331, "hann_window": 332, "indic": 333, "kaiser_bessel_derived_window": 334, "kaiser_window": 335, "mel_weight_matrix": 336, "ndenumer": 337, "ndindex": 338, "polyv": 339, "random_cp": 340, "random_parafac2": 341, "random_tr": 342, "random_tt": 343, "random_tuck": 344, "tril_indic": 345, "trilu": 346, "unsorted_segment_mean": 347, "unsorted_segment_min": 348, "unsorted_segment_sum": 349, "vorbis_window": 350, "allclos": 351, "amax": 352, "amin": 353, "binar": 354, "conj": 355, "copysign": 356, "count_nonzero": 357, "diff": 358, "digamma": 359, "erfc": 360, "erfinv": 361, "fix": [362, 841, 855], "float_pow": 363, "fmax": 364, "frexp": 365, "hypot": 367, "isclos": 368, "ldexp": 369, "lerp": 370, "lgamma": 371, "modf": 372, "nansum": 373, "nextaft": 374, "signbit": 375, "sinc": 376, "sparsify_tensor": 377, "xlogi": 378, "zeta": 379, "reduc": 380, "bind_custom_gradient_funct": 381, "jvp": 382, "vjp": 383, "constant": [385, 646], "meta": [396, 659], "spars": 403, "adaptive_avg_pool1d": 406, "adaptive_avg_pool2d": 407, "adaptive_max_pool2d": 408, "adaptive_max_pool3d": 409, "area_interpol": 410, "avg_pool1d": 411, "avg_pool2d": 412, "avg_pool3d": 413, "dct": 414, "dft": 415, "dropout1d": 416, "dropout2d": 417, "dropout3d": 418, "embed": 419, "fft": 420, "fft2": 421, "generate_einsum_equ": 422, "get_interpolate_kernel": 423, "idct": 424, "ifft": 425, "ifftn": 426, "interp": 427, "interpol": 428, "max_pool1d": 429, "max_pool2d": 430, "max_pool3d": 431, "max_unpool1d": 432, "nearest_interpol": 433, "pool": 434, "reduce_window": 435, "rfft": 436, "rfftn": 437, "rnn": 438, "sliding_window": 439, "stft": 440, "adjoint": 441, "batched_out": 442, "cond": 443, "diagflat": 444, "dot": 445, "eig": [446, 691], "eigh_tridiagon": 447, "eigval": 448, "general_inner_product": 449, "higher_order_mo": 450, "initialize_tuck": 451, "khatri_rao": 452, "kron": 453, "kroneck": 454, "lu_factor": 455, "lu_solv": 456, "make_svd_non_neg": 457, "matrix_exp": 458, "mode_dot": 459, "multi_dot": 460, "multi_mode_dot": 461, "partial_tuck": 462, "solve_triangular": 463, "svd_flip": 464, "tensor_train": 465, "truncated_svd": 466, "tt_matrix_to_tensor": 467, "hinge_embedding_loss": 469, "huber_loss": 470, "kl_div": 471, "l1_loss": 472, "log_poisson_loss": 473, "poisson_nll_loss": 474, "smooth_l1_loss": 475, "soft_margin_loss": 476, "as_strid": 477, "associative_scan": 478, "atleast_1d": 479, "atleast_2d": 480, "atleast_3d": 481, "broadcast_shap": 482, "check_scalar": 483, "choos": 484, "column_stack": 485, "concat_from_sequ": 486, "dsplit": 487, "dstack": 488, "expand": 489, "fill_diagon": 490, "flatten": 491, "fliplr": 492, "flipud": 493, "fold": 494, "heavisid": 495, "hsplit": 496, "hstack": 497, "i0": 498, "matric": 499, "moveaxi": 500, "pad": 501, "pad_sequ": 502, "partial_fold": 503, "partial_tensor_to_vec": 504, "partial_unfold": 505, "partial_vec_to_tensor": 506, "put_along_axi": 507, "rot90": 508, "soft_threshold": 509, "take": 510, "take_along_axi": 511, "top_k": 512, "trim_zero": 513, "unflatten": 514, "unfold": 515, "unique_consecut": 516, "vsplit": 517, "vstack": 518, "batch_norm": 519, "group_norm": 520, "instance_norm": 521, "l1_normal": 522, "l2_normal": 523, "local_response_norm": 524, "lp_normal": 525, "bernoulli": 526, "beta": 527, "dirichlet": 528, "gamma": 529, "poisson": 530, "unravel_index": 531, "invert_permut": 532, "lexsort": 533, "is_ivy_sparse_arrai": 534, "is_native_sparse_arrai": 535, "native_sparse_arrai": 536, "native_sparse_array_to_indices_values_and_shap": 537, "bincount": 538, "corrcoef": 539, "cov": 540, "cummax": 541, "cummin": 542, "histogram": 543, "igamma": 544, "median": 545, "nanmean": 546, "nanmedian": 547, "nanmin": 548, "nanprod": 549, "quantil": 550, "optional_get_el": 551, "all_equ": 552, "arg_info": 553, "arg_nam": 554, "array_equ": 555, "assert_supports_inplac": 556, "cache_fn": 557, "clip_matrix_norm": 558, "clip_vector_norm": 559, "container_typ": 560, "current_backend_str": 561, "einops_rearrang": 563, "einops_reduc": 564, "einops_repeat": 565, "exist": [566, 838, 864], "fourier_encod": 567, "function_supported_devices_and_dtyp": 568, "function_unsupported_devices_and_dtyp": 569, "gather": 570, "gather_nd": 571, "get_all_arrays_in_memori": 572, "get_item": 573, "get_num_dim": 574, "get_referrers_recurs": 575, "has_nan": 576, "inplace_arrays_support": 577, "inplace_decr": 578, "inplace_incr": 579, "inplace_upd": 580, "inplace_variables_support": 581, "is_arrai": 582, "is_ivy_arrai": 583, "is_ivy_contain": 584, "is_ivy_nested_arrai": 585, "is_native_arrai": 586, "isin": 587, "isscalar": 588, "items": 589, "match_kwarg": 590, "multiprocess": [591, 802], "num_arrays_in_memori": 592, "print_all_arrays_in_memori": 593, "scatter_flat": 594, "scatter_nd": 595, "set_array_mod": 596, "set_exception_trace_mod": 597, "set_inplace_mod": 598, "set_item": 599, "set_min_bas": 600, "set_min_denomin": 601, "set_nestable_mod": 602, "set_precise_mod": 603, "set_queue_timeout": 604, "set_shape_array_mod": 605, "set_show_func_wrapper_trace_mod": 606, "set_tmp_dir": 607, "shape": [608, 664, 771, 772, 773, 774, 859, 872], "size": [609, 872], "stable_divid": 610, "stable_pow": 611, "stride": 612, "supports_inplace_upd": 613, "to_ivy_shap": 614, "to_list": 615, "to_native_shap": 616, "to_numpi": 617, "to_scalar": 618, "try_else_non": 619, "unset_array_mod": 620, "unset_exception_trace_mod": 621, "unset_inplace_mod": 622, "unset_min_bas": 623, "unset_min_denomin": 624, "unset_nestable_mod": 625, "unset_precise_mod": 626, "unset_queue_timeout": 627, "unset_shape_array_mod": 628, "unset_show_func_wrapper_trace_mod": 629, "unset_tmp_dir": 630, "value_is_nan": 631, "vmap": 632, "adam_step": 633, "adam_upd": 634, "execute_with_gradi": [635, 860], "grad": 636, "gradient_descent_upd": 637, "jac": 638, "lamb_upd": 639, "lars_upd": 640, "optimizer_upd": 641, "requires_gradi": 642, "stop_gradi": 643, "value_and_grad": 644, "control": 647, "flow": 647, "op": 647, "depend": [664, 771, 772, 773, 774], "output": [664, 771, 772, 773, 774], "conv": 668, "conv1d": 669, "conv1d_transpos": 670, "conv2d": 671, "conv2d_transpos": 672, "conv3d": 673, "conv3d_transpos": 674, "conv_general_dil": 675, "conv_general_transpos": 676, "depthwise_conv2d": 677, "dropout": 678, "lstm": 680, "lstm_updat": 681, "multi_head_attent": 682, "nm": 683, "roi_align": 684, "scaled_dot_product_attent": 685, "choleski": 686, "cross": 687, "det": 688, "diag": 689, "diagon": 690, "eigh": 692, "eigvalsh": 693, "inner": 694, "inv": 695, "matmul": 696, "matrix_norm": 697, "matrix_pow": 698, "matrix_rank": 699, "matrix_transpos": 700, "outer": 701, "pinv": 702, "qr": 703, "slogdet": 704, "solv": 705, "svd": 706, "svdval": 707, "tensordot": 708, "tensorsolv": 709, "vander": 711, "vecdot": 712, "vector_norm": 713, "vector_to_skew_symmetric_matrix": 714, "binary_cross_entropi": 715, "cross_entropi": 716, "sparse_cross_entropi": 717, "ssim_loss": 718, "wasserstein_loss_discrimin": 719, "wasserstein_loss_gener": 720, "clip": 721, "concat": 722, "constant_pad": 723, "expand_dim": 724, "flip": 725, "permute_dim": 726, "repeat": 727, "reshap": 728, "roll": [729, 852], "squeez": 731, "stack": [732, 854], "swapax": 733, "tile": 734, "unstack": 735, "zero_pad": 736, "fomaml_step": 737, "maml_step": 738, "reptile_step": 739, "all_nested_indic": 740, "copy_nest": 741, "duplicate_array_index_chain": 742, "index_nest": 743, "insert_into_nest_at_index": 744, "insert_into_nest_at_indic": 745, "map": 746, "map_nest_at_index": 747, "map_nest_at_indic": 748, "multi_index_nest": 749, "nested_ani": 750, "nested_argwher": 751, "nested_map": 752, "nested_multi_map": 753, "prune_empti": 754, "prune_nest_at_index": 755, "prune_nest_at_indic": 756, "set_nest_at_index": 757, "set_nest_at_indic": 758, "layer_norm": 759, "multinomi": 760, "randint": 761, "random_norm": 762, "random_uniform": 763, "seed": 764, "shuffl": 765, "argmax": 766, "argmin": 767, "argwher": 768, "nonzero": 769, "where": [770, 841, 855], "unique_al": 771, "unique_count": 772, "unique_invers": 773, "unique_valu": 774, "argsort": 775, "msort": 776, "searchsort": 777, "cumprod": 779, "cumsum": 780, "einsum": [781, 829, 830], "max": 782, "mean": 783, "min": 784, "prod": 785, "std": 786, "sum": 787, "var": 788, "assert": [793, 821, 854], "avail": 794, "global": [796, 867], "hypothesi": [797, 842, 863, 865], "struct": 804, "flag": 805, "sequenti": 819, "arg": 820, "return": 820, "ast": 823, "sub": 825, "binari": [826, 842], "parser": 829, "path": 830, "except": [831, 854, 859], "profil": 834, "machin": 835, "between": 835, "support": [835, 847, 850, 859, 862, 872], "eagerli": 835, "provid": 835, "lazili": 835, "contribut": [835, 837, 841, 864], "citat": 835, "kei": 836, "doc": [838, 848], "docker": [838, 842, 843, 848, 873], "conveni": [838, 848, 858], "script": [838, 848], "hub": 838, "local": [838, 843, 856], "without": [838, 863], "error": [839, 854, 855], "handl": [839, 846, 851, 854, 859, 872], "help": [840, 843, 855], "resourc": 840, "open": 841, "task": 841, "fail": [841, 855, 865], "frontend": [841, 847, 862, 863, 870], "place": 841, "checklist": 841, "format": [841, 856], "extend": [841, 865, 868], "issu": [841, 843, 856, 873], "github": [841, 842], "templat": 841, "fork": [842, 843], "commit": [842, 843, 856], "pycharm": [842, 843, 856], "virtual": 842, "miniconda": 842, "venv": 842, "interpret": 842, "window": 842, "maco": 842, "ubuntu": 842, "detail": 842, "free": 842, "wsl": 842, "codespac": 842, "The": [842, 843, 848, 860, 862], "list": 843, "manag": 843, "who": 843, "ask": [843, 855], "With": 843, "command": 843, "pull": 843, "request": 843, "small": 843, "often": 843, "interact": 843, "most": 843, "out": [843, 857, 859, 861], "id": [843, 845], "deep": 844, "dive": 844, "termin": 845, "regener": 845, "failur": 845, "skip": 845, "integr": [846, 856, 864, 865], "version": [847, 866, 872], "builder": 848, "being": 848, "option": 848, "index": 848, "rst": 848, "partial_conf": 848, "py": 848, "prebuild": 848, "sh": 848, "extens": 848, "custom_autosummari": 848, "hide": 848, "discussion_link": 848, "skippable_funct": 848, "ivy_data": 848, "instanc": [849, 862, 863], "method": [849, 862, 863], "special": [849, 850, 862], "nestabl": [849, 857, 858, 859], "promot": [850, 862], "precis": 850, "non": [850, 868], "argument": [850, 851, 857, 859, 861, 862], "other": [850, 851], "unsupport": 850, "attribut": [850, 867], "case": 850, "bug": 850, "cast": [850, 862], "superset": [850, 868], "docstr": [852, 853], "func_wrapp": 854, "prune": 854, "handle_except": 854, "consist": [854, 865], "prerequir": 855, "common": [855, 856], "lint": [856, 864], "continu": 856, "keyword": 857, "integ": 857, "primari": 858, "composit": 858, "mix": [858, 859, 865], "partial": [858, 859, 865], "order": 859, "wrapper": 859, "view": [859, 861], "miscellan": 859, "overview": [860, 864], "usag": [860, 864, 868], "signatur": 860, "design": [860, 866, 869], "our": 860, "polici": [860, 862], "specif": 860, "consider": 860, "inplac": 861, "updat": 861, "copi": 861, "short": 862, "unus": 862, "rule": 862, "duplic": [862, 868], "alia": 863, "formatt": 864, "functionorderingformatt": 864, "work": [864, 881], "own": 865, "strategi": 865, "ad": 865, "explicit": 865, "do": 865, "effect": 865, "bonu": 865, "self": 865, "test_array_funct": 865, "re": 865, "navig": 866, "categor": 866, "submodul": 866, "unpin": 866, "properti": 867, "getter": 867, "setter": 867, "set_": 867, "unset_": 867, "behaviour": 868, "A": 868, "effici": 868, "maxim": 868, "block": 870, "faq": 872, "maintain": 872, "auto": 872, "differenti": 872, "replica": 872, "parallel": 872, "altern": 872, "start": 873, "pip": 873, "folder": 873, "question": 873, "glossari": 874, "motiv": 875, "explos": 876, "One": 878, "liner": 878, "trace_graph": 879, "cach": 879, "sharp": 879, "bit": 879, "relat": 881, "matlab": 882, "scipi": 882, "scikit": 882, "theano": 882, "panda": 882, "julia": 882, "apach": 882, "spark": 882, "mllib": 882, "caff": 882, "chainer": 882, "mxnet": 882, "cntk": 882, "flux": 882, "dex": 882, "languag": 882, "tf": 883, "jaxpr": 883, "jit": 883, "fx": 883, "onnx": 884}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"as_ivy_dtype": [[167, "as-ivy-dtype"]], "ones_like": [[160, "ones-like"]], "broadcast_to": [[171, "broadcast-to"]], "default_dtype": [[176, "default-dtype"]], "ones": [[159, "ones"]], "empty": [[147, "empty"]], "zeros": [[165, "zeros"]], "to_dlpack": [[161, "to-dlpack"]], "Note": [[161, null], [150, null], [648, null], [648, null]], "as_native_dtype": [[168, "as-native-dtype"]], "copy_array": [[146, "copy-array"]], "full_like": [[153, "full-like"]], "one_hot": [[158, "one-hot"]], "finfo": [[182, "finfo"]], "while_loop": [[141, "while-loop"]], "default_complex_dtype": [[175, "default-complex-dtype"]], "array": [[143, "array"]], "linspace": [[154, "linspace"]], "triu_indices": [[164, "triu-indices"]], "dtype_bits": [[181, "dtype-bits"]], "frombuffer": [[151, "frombuffer"]], "astype": [[169, "astype"]], "can_cast": [[172, "can-cast"]], "function_unsupported_dtypes": [[184, "function-unsupported-dtypes"]], "native_array": [[157, "native-array"]], "closest_valid_dtype": [[174, "closest-valid-dtype"]], "default_int_dtype": [[178, "default-int-dtype"]], "dtype": [[180, "dtype"]], "iinfo": [[185, "iinfo"]], "invalid_dtype": [[187, "invalid-dtype"]], "logspace": [[155, "logspace"]], "broadcast_arrays": [[170, "broadcast-arrays"]], "arange": [[142, "arange"]], "eye": [[149, "eye"]], "complex": [[145, "complex"]], "full": [[152, "full"]], "meshgrid": [[156, "meshgrid"]], "zeros_like": [[166, "zeros-like"]], "triu": [[163, "triu"]], "from_dlpack": [[150, "from-dlpack"]], "default_float_dtype": [[177, "default-float-dtype"]], "tril": [[162, "tril"]], "function_supported_dtypes": [[183, "function-supported-dtypes"]], "infer_default_dtype": [[186, "infer-default-dtype"]], "check_float": [[173, "check-float"]], "default_uint_dtype": [[179, "default-uint-dtype"]], "empty_like": [[148, "empty-like"]], "asarray": [[144, "asarray"]], "Containers": [[849, "containers"]], "Container Instance Methods": [[849, "container-instance-methods"]], "API Instance Methods": [[849, "api-instance-methods"]], "API Special Methods": [[849, "api-special-methods"]], "Nestable Functions": [[849, "nestable-functions"], [857, "nestable-functions"], [858, "nestable-functions"]], "Data Types": [[850, "data-types"]], "Data Type Module": [[850, "data-type-module"]], "Data Type Promotion": [[850, "data-type-promotion"]], "Precise Mode": [[850, "precise-mode"]], "Precise Promotion Table": [[850, "precise-promotion-table"]], "Non-Precise Promotion Table": [[850, "non-precise-promotion-table"]], "Arguments in other Functions": [[850, "arguments-in-other-functions"], [851, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[850, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[850, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[850, "special-case"]], "Backend Data Type Bugs": [[850, "backend-data-type-bugs"]], "Data Type Casting Modes": [[850, "data-type-casting-modes"]], "Superset Data Type Support": [[850, "superset-data-type-support"]], "Function Arguments": [[857, "function-arguments"]], "Examples": [[857, "examples"], [879, "examples"]], "Positional and Keyword Arguments": [[857, "positional-and-keyword-arguments"]], "Input Arrays": [[857, "input-arrays"]], "out Argument": [[857, "out-argument"]], "dtype and device arguments": [[857, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[857, "numbers-in-operator-functions"]], "Integer Sequences": [[857, "integer-sequences"]], "Docstrings": [[853, "docstrings"]], "Gradients": [[860, "gradients"], [98, "module-ivy.data_classes.container.gradients"], [75, "module-ivy.data_classes.array.gradients"], [654, "gradients"], [391, "gradients"]], "Overview": [[860, "overview"], [864, "overview"]], "Example Usage of the Gradient API": [[860, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[860, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[860, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[860, "custom-gradient-functions"]], "Design of the Gradient API": [[860, "design-of-the-gradient-api"]], "Our policy on gradients": [[860, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[860, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[860, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[860, "framework-specific-considerations"]], "ML Explosion": [[876, "ml-explosion"]], "Formatting": [[856, "formatting"]], "Lint Checks": [[856, "lint-checks"], [856, "id2"]], "Setup Formatting Locally": [[856, "setup-formatting-locally"]], "Pre-commit": [[856, "pre-commit"]], "VS Code": [[856, "vs-code"]], "PyCharm": [[856, "pycharm"], [842, "pycharm"]], "Common Issues with Pre-Commit": [[856, "common-issues-with-pre-commit"]], "Continuous Integration": [[856, "continuous-integration"]], "Lint Formatting": [[856, "lint-formatting"]], "Glossary": [[874, "glossary"]], "Fix Failing Tests:": [[855, "fix-failing-tests"]], "Prerequirement:": [[855, "prerequirement"]], "Setting Up": [[855, "setting-up"], [842, "setting-up"]], "How to run tests": [[855, "how-to-run-tests"]], "Common Errors": [[855, "common-errors"]], "Where to ask for Help": [[855, "where-to-ask-for-help"]], "Navigating the Code": [[866, "navigating-the-code"]], "Categorization": [[866, "categorization"]], "Submodule Design": [[866, "submodule-design"]], "Ivy API": [[866, "ivy-api"]], "Backend API": [[866, "backend-api"]], "Submodule Helper Functions": [[866, "submodule-helper-functions"]], "Version Unpinning": [[866, "version-unpinning"]], "Related Work": [[881, "related-work"]], "Building the Docs Pipeline": [[848, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[848, "how-the-doc-builder-is-being-run"]], "The convenience script": [[848, "the-convenience-script"]], "Options": [[848, "options"]], "The Docker image": [[848, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[848, "how-ivy-s-docs-is-structured"]], "index.rst": [[848, "index-rst"]], "partial_conf.py": [[848, "partial-conf-py"]], "prebuild.sh": [[848, "prebuild-sh"]], "Custom Extensions": [[848, "custom-extensions"]], "custom_autosummary": [[848, "custom-autosummary"]], ":hide-table:": [[848, "hide-table"]], "discussion_linker": [[848, "discussion-linker"]], "skippable_function": [[848, "skippable-function"]], "ivy_data": [[848, "ivy-data"]], "Devices": [[851, "devices"]], "Device Module": [[851, "device-module"]], "Device handling": [[851, "device-handling"]], "Docstring Examples": [[852, "docstring-examples"]], "ivy.tan": [[852, "ivy-tan"]], "ivy.roll": [[852, "ivy-roll"]], "ivy.add": [[852, "ivy-add"]], "Operating Modes": [[867, "operating-modes"]], "Global Parameter Properties": [[867, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[867, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[867, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Ivy Tests": [[865, "ivy-tests"]], "Testing Pipeline": [[865, "testing-pipeline"]], "Hypothesis": [[865, "id2"]], "Data Generation": [[865, "id3"]], "Writing your own strategy": [[865, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[865, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[865, "ivy-test-decorators"]], "Writing Ivy Tests": [[865, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[865, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[865, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[865, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[865, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[865, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[865, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[865, "self-consistent-and-explicit-testing"]], "test_array_function": [[865, "id5"]], "Running Ivy Tests": [[865, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[865, "re-running-failed-ivy-tests"]], "Ivy Frontends": [[862, "ivy-frontends"]], "Introduction": [[862, "introduction"], [863, "introduction"], [62, "Introduction"], [16, "Introduction"], [17, "Introduction"]], "The Frontend Basics": [[862, "the-frontend-basics"]], "Writing Frontend Functions": [[862, "writing-frontend-functions"]], "Short Frontend Implementations": [[862, "short-frontend-implementations"]], "Unused Arguments": [[862, "unused-arguments"]], "Supported Data Types and Devices": [[862, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[862, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[862, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[862, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[862, "frontends-duplicate-policy"]], "Design": [[869, "design"]], "Ivy as a Transpiler": [[871, "ivy-as-a-transpiler"], [48, "Ivy-as-a-Transpiler"], [47, "Ivy-as-a-Transpiler"]], "Source-to-Source Transpiler \u2705": [[871, "source-to-source-transpiler"], [870, "source-to-source-transpiler"]], "Graph Tracer \u2705": [[871, "graph-tracer"]], "ivy.transpile()": [[880, "ivy-transpile"]], "Transpiler API": [[880, "transpiler-api"]], "Function Wrapping": [[859, "function-wrapping"]], "Decorator order": [[859, "decorator-order"]], "Conversion Wrappers": [[859, "conversion-wrappers"]], "Inference Wrappers": [[859, "inference-wrappers"]], "Out Argument Support": [[859, "out-argument-support"]], "Nestable Support": [[859, "nestable-support"]], "Partial Mixed Function Support": [[859, "partial-mixed-function-support"]], "Shape Conversion": [[859, "shape-conversion"]], "View Handling": [[859, "view-handling"]], "Exception Handling": [[859, "exception-handling"], [854, "exception-handling"]], "Miscellaneous Wrappers": [[859, "miscellaneous-wrappers"]], "One liners": [[878, "one-liners"]], "Ivy Exception Class": [[854, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[854, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[854, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[854, "handle-exceptions-decorator"]], "Consistency in Errors": [[854, "consistency-in-errors"]], "Assertion Function": [[854, "assertion-function"]], "Backend Setting": [[847, "backend-setting"]], "Dynamic Backend Setting": [[847, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[847, "backend-and-frontend-version-support"]], "Graph Tracers": [[883, "graph-tracers"]], "tf.Graph": [[883, "tf-graph"]], "Jaxpr": [[883, "jaxpr"]], "torch.jit": [[883, "torch-jit"]], "torch.fx": [[883, "torch-fx"]], "Function Types": [[858, "function-types"]], "Primary Functions": [[858, "primary-functions"]], "Compositional Functions": [[858, "compositional-functions"]], "Mixed Functions": [[858, "mixed-functions"]], "Partial Mixed Functions": [[858, "partial-mixed-functions"]], "Standalone Functions": [[858, "standalone-functions"]], "Convenience Functions": [[858, "convenience-functions"]], "Comparing Ivy with ONNX": [[884, "comparing-ivy-with-onnx"]], "ONNX onnx": [[884, "onnx-onnx"]], "ivy": [[884, "ivy"]], "Motivation": [[875, "motivation"]], "Frameworks": [[882, "frameworks"]], "MATLAB matlab": [[882, "matlab-matlab"]], "SciPy scipy": [[882, "scipy-scipy"]], "Torch torch": [[882, "torch-torch"]], "NumPy numpy": [[882, "numpy-numpy"]], "SciKit Learn scikit-learn": [[882, "scikit-learn-scikit-learn"]], "Theano theano": [[882, "theano-theano"]], "Pandas pandas": [[882, "pandas-pandas"]], "Julia julia": [[882, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[882, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[882, "caffe-caffe"]], "Chainer chainer": [[882, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[882, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[882, "mxnet-mxnet"]], "CNTK cntk": [[882, "cntk-cntk"]], "PyTorch pytorch": [[882, "pytorch-pytorch"]], "Flux flux": [[882, "flux-flux"]], "JAX jax": [[882, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[882, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[882, "dex-language-dex-language"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[864, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[864, "existing-formatters"]], "FunctionOrderingFormatter": [[864, "functionorderingformatter"]], "How the Formatter Works:": [[864, "how-the-formatter-works"]], "Integration and Usage": [[864, "integration-and-usage"]], "Contribution": [[864, "contribution"]], "Round Up": [[864, "round-up"], [48, "Round-Up"], [50, "Round-Up"], [51, "Round-Up"], [54, "Round-Up"], [52, "Round-Up"], [61, "Round-Up"], [49, "Round-Up"], [53, "Round-Up"], [36, "Round-Up"], [32, "Round-Up"], [40, "Round-Up"], [41, "Round-Up"], [42, "Round-Up"], [30, "Round-Up"], [38, "Round-Up"], [39, "Round-Up"], [37, "Round-Up"]], "Arrays": [[846, "arrays"]], "Native Array": [[846, "native-array"]], "Ivy Array": [[846, "ivy-array"]], "Array Handling": [[846, "array-handling"]], "Integrating custom classes with Ivy": [[846, "integrating-custom-classes-with-ivy"]], "FAQ": [[872, "faq"]], "Maintaining Backend Versions": [[872, "maintaining-backend-versions"]], "Dynamic Sizes": [[872, "dynamic-sizes"]], "Type and Shape Checking": [[872, "type-and-shape-checking"]], "GPU handling": [[872, "gpu-handling"]], "Auto-Differentiation": [[872, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[872, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[872, "support-for-functions"]], "Alternative Data Structures": [[872, "alternative-data-structures"]], "Custom Operations": [[872, "custom-operations"]], "ivy.trace_graph()": [[879, "ivy-trace-graph"]], "Tracer API": [[879, "tracer-api"]], "Using the tracer": [[879, "using-the-tracer"]], "Eager vs lazy Compilation": [[879, "eager-vs-lazy-compilation"]], "Array caching": [[879, "array-caching"]], "Generators": [[879, "generators"]], "Stateful": [[879, "stateful"]], "Sharp bits": [[879, "sharp-bits"]], "Get Started": [[873, "get-started"]], "Installing using pip": [[873, "installing-using-pip"]], "Installing from source": [[873, "installing-from-source"]], "Docker": [[873, "docker"]], "Ivy Folder": [[873, "ivy-folder"]], "Issues and Questions": [[873, "issues-and-questions"]], "Why Transpile?": [[877, "why-transpile"]], "Ivy Frontend Tests": [[863, "ivy-frontend-tests"]], "Frontend Test Examples": [[863, "frontend-test-examples"]], "ivy.tan()": [[863, "ivy-tan"]], "ivy.full()": [[863, "ivy-full"]], "Testing Without Using Tests Values": [[863, "testing-without-using-tests-values"]], "Alias functions": [[863, "alias-functions"]], "Frontend Instance Method Tests": [[863, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[863, "frontend-instance-method-test-examples"]], "ivy.add()": [[863, "ivy-add"]], "Hypothesis Helpers": [[863, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[863, "frontend-framework-testing-configuration"]], "Superset Behaviour": [[868, "superset-behaviour"]], "Extending the Standard": [[868, "extending-the-standard"]], "What is the Superset?": [[868, "what-is-the-superset"]], "A Non-Duplicate Superset": [[868, "a-non-duplicate-superset"]], "What is not the Superset?": [[868, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[868, "balancing-generalization-with-efficiency"]], "More Examples": [[868, "more-examples"]], "Maximizing Usage of Native Functionality": [[868, "maximizing-usage-of-native-functionality"]], "Inplace Updates": [[861, "inplace-updates"]], "out argument": [[861, "out-argument"]], "copy argument": [[861, "copy-argument"]], "Views": [[861, "views"]], "Building Blocks": [[870, "building-blocks"]], "Backend Functional APIs \u2705": [[870, "backend-functional-apis"]], "Ivy Functional API \u2705": [[870, "ivy-functional-api"]], "Frontend Functional APIs \u2705": [[870, "frontend-functional-apis"]], "Backend Handler \u2705": [[870, "backend-handler"]], "Activations": [[810, "module-ivy.stateful.activations"], [89, "module-ivy.data_classes.container.activations"], [67, "module-ivy.data_classes.array.activations"], [645, "activations"], [384, "activations"]], "Parameter": [[810, "parameter"], [810, "id1"], [603, "parameter"], [606, "parameter"], [596, "parameter"], [597, "parameter"], [602, "parameter"], [605, "parameter"], [650, "parameter"], [653, "parameter"], [653, "id1"], [653, "id2"], [653, "id3"], [653, "id4"], [653, "id5"], [227, "parameter"]], "Profiler": [[834, "module-ivy.utils.profiler"]], "General helpers": [[800, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "Testing": [[809, "testing"], [61, "Testing"]], "Setting up your API key": [[836, "setting-up-your-api-key"]], "Using your API key": [[836, "using-your-api-key"]], "Optimizers": [[818, "module-ivy.stateful.optimizers"]], "Contributing": [[837, "contributing"], [835, "contributing"]], "The Basics": [[843, "the-basics"]], "Getting Help": [[843, "getting-help"]], "ToDo List Issues": [[843, "todo-list-issues"]], "Managing Your Fork": [[843, "managing-your-fork"]], "Who To Ask": [[843, "who-to-ask"]], "With Command Line:": [[843, "with-command-line"]], "With Browser:": [[843, "with-browser"]], "Pull Requests": [[843, "pull-requests"]], "Small Commits Often": [[843, "small-commits-often"]], "Interactive Ivy Docker Container": [[843, "interactive-ivy-docker-container"]], "Running Tests Locally": [[843, "running-tests-locally"]], "With Docker": [[843, "with-docker"]], "Getting the most out of IDE": [[843, "getting-the-most-out-of-ide"]], "with PyCharm": [[843, "with-pycharm"]], "Framework classes": [[807, "framework-classes"]], "Module": [[816, "module-ivy.stateful.module"]], "Ast helpers": [[823, "module-ivy.utils.backend.ast_helpers"]], "Norms": [[817, "module-ivy.stateful.norms"], [661, "norms"], [104, "module-ivy.data_classes.container.norms"], [81, "module-ivy.data_classes.array.norms"], [398, "norms"]], "Array API Tests": [[845, "array-api-tests"]], "Running the Tests": [[845, "running-the-tests"]], "Using Terminal": [[845, "using-terminal"]], "Using the IDE": [[845, "using-the-ide"]], "Regenerating Test Failures": [[845, "regenerating-test-failures"]], "Test Skipping": [[845, "test-skipping"]], "Deep Dive": [[844, "deep-dive"]], "Sub backend handler": [[825, "module-ivy.utils.backend.sub_backend_handler"]], "Test parameter flags": [[805, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Utils": [[808, "utils"]], "Building the Docs": [[838, "building-the-docs"]], "Building the Docs using Docker": [[838, "building-the-docs-using-docker"]], "Using convenience script": [[838, "using-convenience-script"]], "Using existing image on Docker Hub": [[838, "using-existing-image-on-docker-hub"]], "Building the image locally": [[838, "building-the-image-locally"]], "Building the Docs without Docker": [[838, "building-the-docs-without-docker"]], "Dtype helpers": [[799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "Converters": [[811, "module-ivy.stateful.converters"]], "Utilities": [[820, "module-ivy.stateful.utilities"]], "Args:": [[820, "args"], [820, "id1"], [820, "id10"]], "Returns:": [[820, "returns"], [820, "id11"]], "Example:": [[820, "example"], [820, "id12"]], "Handler": [[824, "module-ivy.utils.backend.handler"]], "Inspection": [[832, "module-ivy.utils.inspection"]], "Helpful Resources": [[840, "helpful-resources"]], "Losses": [[815, "module-ivy.stateful.losses"], [102, "module-ivy.data_classes.container.losses"], [79, "module-ivy.data_classes.array.losses"], [657, "losses"], [394, "losses"]], "Dynamic import": [[828, "module-ivy.utils.dynamic_import"]], "Error Handling": [[839, "error-handling"]], "Helpers": [[812, "module-ivy.stateful.helpers"]], "Open Tasks": [[841, "open-tasks"]], "Fixing Failing Tests": [[841, "fixing-failing-tests"]], "How to Contribute": [[841, "how-to-contribute"]], "Frontend APIs": [[841, "frontend-apis"]], "Where to place a frontend function": [[841, "where-to-place-a-frontend-function"]], "Frontend checklist": [[841, "frontend-checklist"]], "Function Formatting": [[841, "function-formatting"]], "Formatting checklist": [[841, "formatting-checklist"]], "Ivy Experimental API": [[841, "ivy-experimental-api"]], "Extending the Ivy API": [[841, "extending-the-ivy-api"]], "Where to place a backend function": [[841, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[841, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Layers": [[814, "module-ivy.stateful.layers"], [100, "module-ivy.data_classes.container.layers"], [77, "module-ivy.data_classes.array.layers"], [655, "layers"], [392, "layers"]], "Testing helpers": [[806, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Forking and cloning the repo": [[842, "forking-and-cloning-the-repo"]], "Pre-Commit": [[842, "pre-commit"]], "Virtual environments - No Docker": [[842, "virtual-environments-no-docker"]], "Using miniconda": [[842, "using-miniconda"]], "Using venv": [[842, "using-venv"]], "Docker Interpreter with PyCharm": [[842, "docker-interpreter-with-pycharm"]], "Windows": [[842, "windows"], [842, "id6"]], "MacOS": [[842, "macos"]], "Ubuntu": [[842, "ubuntu"], [842, "id8"]], "Setting Up Testing in PyCharm": [[842, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[842, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[842, "setting-up-for-free"]], "WSL": [[842, "wsl"]], "GitHub Codespaces": [[842, "github-codespaces"]], "The Binaries": [[842, "the-binaries"]], "Decorator utils": [[827, "module-ivy.utils.decorator_utils"]], "Logging": [[833, "module-ivy.utils.logging"]], "Einsum path helpers": [[830, "module-ivy.utils.einsum_path_helpers"]], "Assertions": [[821, "module-ivy.utils.assertions"], [793, "module-ivy_tests.test_ivy.helpers.assertions"]], "Multiprocessing": [[802, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "Initializers": [[813, "module-ivy.stateful.initializers"]], "Backend": [[822, "backend"]], "Sequential": [[819, "module-ivy.stateful.sequential"]], "Structs": [[804, "module-ivy_tests.test_ivy.helpers.structs"]], "Convert Machine Learning Code Between Frameworks": [[835, "convert-machine-learning-code-between-frameworks"]], "Installation": [[835, "installation"], [24, "Installation"], [25, "Installation"], [4, "Installation"], [26, "Installation"], [5, "Installation"]], "Supported Frameworks": [[835, "supported-frameworks"]], "Using ivy": [[835, "using-ivy"]], "ivy.transpile will eagerly transpile if a class or function is provided": [[835, "ivy-transpile-will-eagerly-transpile-if-a-class-or-function-is-provided"]], "ivy.transpile will lazily transpile if a module (library) is provided": [[835, "ivy-transpile-will-lazily-transpile-if-a-module-library-is-provided"]], "Citation": [[835, "citation"]], "Number helpers": [[801, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Exceptions": [[831, "module-ivy.utils.exceptions"]], "Einsum parser": [[829, "module-ivy.utils.einsum_parser"]], "Pipeline helper": [[803, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Binaries": [[826, "module-ivy.utils.binaries"]], "cumprod": [[779, "cumprod"]], "min": [[784, "min"]], "where": [[770, "where"]], "max": [[782, "max"]], "mean": [[783, "mean"]], "set_nest_at_indices": [[758, "set-nest-at-indices"]], "argmax": [[766, "argmax"]], "multinomial": [[760, "multinomial"]], "seed": [[764, "seed"]], "unique_counts": [[772, "unique-counts"]], "Data-dependent output shape": [[772, null], [773, null], [771, null], [774, null], [664, null], [664, null], [664, null], [664, null]], "prod": [[785, "prod"]], "unique_inverse": [[773, "unique-inverse"]], "unique_all": [[771, "unique-all"]], "nonzero": [[769, "nonzero"]], "save": [[792, "save"]], "Function testing": [[795, "module-ivy_tests.test_ivy.helpers.function_testing"]], "einsum": [[781, "einsum"]], "randint": [[761, "randint"]], "prune_nest_at_indices": [[756, "prune-nest-at-indices"]], "set_nest_at_index": [[757, "set-nest-at-index"]], "argmin": [[767, "argmin"]], "msort": [[776, "msort"]], "searchsorted": [[777, "searchsorted"]], "sum": [[787, "sum"]], "prune_empty": [[754, "prune-empty"]], "shuffle": [[765, "shuffle"]], "var": [[788, "var"]], "Available frameworks": [[794, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Globals": [[796, "module-ivy_tests.test_ivy.helpers.globals"]], "prune_nest_at_index": [[755, "prune-nest-at-index"]], "unique_values": [[774, "unique-values"]], "random_normal": [[762, "random-normal"]], "all": [[789, "all"]], "cumsum": [[780, "cumsum"]], "sort": [[778, "sort"]], "argwhere": [[768, "argwhere"]], "any": [[790, "any"]], "nested_map": [[752, "nested-map"]], "nested_multi_map": [[753, "nested-multi-map"]], "argsort": [[775, "argsort"]], "random_uniform": [[763, "random-uniform"]], "Array helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "layer_norm": [[759, "layer-norm"]], "std": [[786, "std"]], "Hypothesis helpers": [[797, "hypothesis-helpers"]], "load": [[791, "load"]], "reshape": [[728, "reshape"]], "flip": [[725, "flip"]], "nested_argwhere": [[751, "nested-argwhere"]], "map_nest_at_indices": [[748, "map-nest-at-indices"]], "zero_pad": [[736, "zero-pad"]], "index_nest": [[743, "index-nest"]], "nested_any": [[750, "nested-any"]], "roll": [[729, "roll"]], "vector_to_skew_symmetric_matrix": [[714, "vector-to-skew-symmetric-matrix"]], "map_nest_at_index": [[747, "map-nest-at-index"]], "tensordot": [[708, "tensordot"]], "multi_index_nest": [[749, "multi-index-nest"]], "fomaml_step": [[737, "fomaml-step"]], "trace": [[710, "trace"]], "constant_pad": [[723, "constant-pad"]], "svd": [[706, "svd"]], "tensorsolve": [[709, "tensorsolve"]], "squeeze": [[731, "squeeze"]], "all_nested_indices": [[740, "all-nested-indices"]], "vecdot": [[712, "vecdot"]], "concat": [[722, "concat"]], "swapaxes": [[733, "swapaxes"]], "tile": [[734, "tile"]], "split": [[730, "split"]], "copy_nest": [[741, "copy-nest"]], "ssim_loss": [[718, "ssim-loss"]], "expand_dims": [[724, "expand-dims"]], "duplicate_array_index_chains": [[742, "duplicate-array-index-chains"]], "wasserstein_loss_discriminator": [[719, "wasserstein-loss-discriminator"]], "sparse_cross_entropy": [[717, "sparse-cross-entropy"]], "svdvals": [[707, "svdvals"]], "cross_entropy": [[716, "cross-entropy"]], "reptile_step": [[739, "reptile-step"]], "insert_into_nest_at_index": [[744, "insert-into-nest-at-index"]], "vander": [[711, "vander"]], "insert_into_nest_at_indices": [[745, "insert-into-nest-at-indices"]], "binary_cross_entropy": [[715, "binary-cross-entropy"]], "vector_norm": [[713, "vector-norm"]], "permute_dims": [[726, "permute-dims"]], "solve": [[705, "solve"]], "unstack": [[735, "unstack"]], "clip": [[721, "clip"]], "repeat": [[727, "repeat"]], "wasserstein_loss_generator": [[720, "wasserstein-loss-generator"]], "maml_step": [[738, "maml-step"]], "map": [[746, "map"]], "stack": [[732, "stack"]], "Searching": [[663, "searching"], [106, "module-ivy.data_classes.container.searching"], [83, "module-ivy.data_classes.array.searching"], [400, "searching"]], "Sorting": [[665, "sorting"], [108, "module-ivy.data_classes.container.sorting"], [85, "module-ivy.data_classes.array.sorting"], [402, "sorting"]], "inner": [[694, "inner"]], "cross": [[687, "cross"]], "conv1d": [[669, "conv1d"]], "Utility": [[667, "utility"], [110, "module-ivy.data_classes.container.utility"], [87, "module-ivy.data_classes.array.utility"], [405, "utility"]], "conv3d_transpose": [[674, "conv3d-transpose"]], "pinv": [[702, "pinv"]], "lstm_update": [[681, "lstm-update"]], "Manipulation": [[658, "manipulation"], [103, "module-ivy.data_classes.container.manipulation"], [80, "module-ivy.data_classes.array.manipulation"], [395, "manipulation"]], "diag": [[689, "diag"]], "eigh": [[692, "eigh"]], "nms": [[683, "nms"]], "Random": [[662, "random"], [105, "module-ivy.data_classes.container.random"], [82, "module-ivy.data_classes.array.random"], [399, "random"]], "matrix_power": [[698, "matrix-power"]], "det": [[688, "det"]], "matrix_norm": [[697, "matrix-norm"]], "conv": [[668, "conv"]], "qr": [[703, "qr"]], "outer": [[701, "outer"]], "Nest": [[660, "nest"], [397, "module-ivy.functional.ivy.experimental.nest"]], "conv2d": [[671, "conv2d"]], "conv1d_transpose": [[670, "conv1d-transpose"]], "cholesky": [[686, "cholesky"]], "eig": [[691, "eig"], [446, "eig"]], "conv_general_transpose": [[676, "conv-general-transpose"]], "diagonal": [[690, "diagonal"]], "Meta": [[659, "meta"], [396, "module-ivy.functional.ivy.experimental.meta"]], "conv_general_dilated": [[675, "conv-general-dilated"]], "multi_head_attention": [[682, "multi-head-attention"]], "Statistical": [[666, "statistical"], [109, "module-ivy.data_classes.container.statistical"], [86, "module-ivy.data_classes.array.statistical"], [404, "statistical"]], "matrix_rank": [[699, "matrix-rank"]], "dropout": [[678, "dropout"]], "lstm": [[680, "lstm"]], "matrix_transpose": [[700, "matrix-transpose"]], "Set": [[664, "set"], [107, "module-ivy.data_classes.container.set"], [84, "module-ivy.data_classes.array.set"], [401, "module-ivy.functional.ivy.experimental.set"]], "linear": [[679, "linear"]], "depthwise_conv2d": [[677, "depthwise-conv2d"]], "inv": [[695, "inv"]], "conv2d_transpose": [[672, "conv2d-transpose"]], "matmul": [[696, "matmul"]], "slogdet": [[704, "slogdet"]], "roi_align": [[684, "roi-align"]], "eigvalsh": [[693, "eigvalsh"]], "conv3d": [[673, "conv3d"]], "scaled_dot_product_attention": [[685, "scaled-dot-product-attention"]], "for_loop": [[138, "for-loop"]], "Base": [[112, "module-ivy.data_classes.factorized_tensor.base"], [122, "module-ivy.data_classes.nested_array.base"], [90, "module-ivy.data_classes.container.base"]], "sigmoid": [[132, "sigmoid"]], "Tucker tensor": [[117, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "gelu": [[126, "gelu"]], "softplus": [[134, "softplus"]], "log_softmax": [[129, "log-softmax"]], "softmax": [[133, "softmax"]], "Elementwise": [[95, "module-ivy.data_classes.container.elementwise"], [123, "module-ivy.data_classes.nested_array.elementwise"], [72, "module-ivy.data_classes.array.elementwise"], [651, "elementwise"], [389, "elementwise"]], "softsign": [[135, "softsign"]], "Nested array": [[121, "nested-array"]], "Parafac2 tensor": [[114, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "relu": [[131, "relu"]], "Image": [[99, "module-ivy.data_classes.container.image"], [76, "module-ivy.data_classes.array.image"]], "Tr tensor": [[115, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Functions": [[125, "functions"]], "try_except": [[140, "try-except"]], "Experimental": [[96, "module-ivy.data_classes.container.experimental"], [73, "module-ivy.data_classes.array.experimental"], [652, "experimental"]], "Factorized tensor": [[120, "factorized-tensor"]], "Device": [[94, "module-ivy.data_classes.container.device"], [71, "module-ivy.data_classes.array.device"], [650, "device"], [388, "module-ivy.functional.ivy.experimental.device"]], "Tt tensor": [[116, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "hardswish": [[127, "hardswish"]], "mish": [[130, "mish"]], "Container": [[119, "container"]], "leaky_relu": [[128, "leaky-relu"]], "if_else": [[139, "if-else"]], "cmp_isnot": [[137, "cmp-isnot"]], "Array": [[118, "array"]], "General": [[97, "module-ivy.data_classes.container.general"], [74, "module-ivy.data_classes.array.general"], [653, "general"], [390, "general"]], "Data classes": [[124, "data-classes"]], "Linear algebra": [[101, "module-ivy.data_classes.container.linear_algebra"], [78, "module-ivy.data_classes.array.linear_algebra"], [656, "linear-algebra"], [393, "linear-algebra"]], "cmp_is": [[136, "cmp-is"]], "Wrapping": [[111, "module-ivy.data_classes.container.wrapping"], [88, "module-ivy.data_classes.array.wrapping"]], "Cp tensor": [[113, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Quickstart": [[48, "Quickstart"]], "Get familiar with Ivy": [[48, "Get-familiar-with-Ivy"]], "Functional API": [[48, "Functional-API"]], "Tracing code": [[48, "Tracing-code"]], "Any function": [[48, "Any-function"], [47, "Any-function"]], "Any library": [[48, "Any-library"], [47, "Any-library"]], "Any model": [[48, "Any-model"], [47, "Any-model"]], "Initializing and building the TensorFlow model": [[48, "Initializing-and-building-the-TensorFlow-model"], [26, "Initializing-and-building-the-TensorFlow-model"]], "Comparing the results": [[48, "Comparing-the-results"], [9, "Comparing-the-results"], [8, "Comparing-the-results"], [26, "Comparing-the-results"], [11, "Comparing-the-results"], [10, "Comparing-the-results"]], "Ivy as a Transpiler Introduction": [[65, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[65, "To-use-the-transpiler:"]], "Transpiler Interface": [[65, "Transpiler-Interface"]], "Telemetry": [[65, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[65, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[65, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[65, "3.-Transpile-Models-\ud83c\udf10"]], "0.1: Compile": [[50, "0.1:-Compile"]], "0.2: Transpile": [[51, "0.2:-Transpile"]], "Conversions": [[91, "module-ivy.data_classes.container.conversions"], [68, "module-ivy.data_classes.array.conversions"]], "Resnet 18": [[66, "Resnet-18"]], "Deepmind PerceiverIO on GPU": [[62, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[62, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[62, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[62, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[62, "Run-the-demo..."]], "\u2026with torch backend": [[62, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[62, "....with-tensorflow-backend"]], "\u2026with jax backend": [[62, "...with-jax-backend"]], "\u2026with numpy backend": [[62, "...with-numpy-backend"]], "Creation": [[92, "module-ivy.data_classes.container.creation"], [69, "module-ivy.data_classes.array.creation"], [648, "creation"], [386, "creation"]], "1.2: As a Decorator": [[54, "1.2:-As-a-Decorator"]], "Unify": [[54, "Unify"], [52, "Unify"], [53, "Unify"]], "Compile": [[54, "Compile"], [52, "Compile"], [53, "Compile"]], "Transpile": [[54, "Transpile"], [52, "Transpile"], [53, "Transpile"], [40, "Transpile"]], "Data type": [[93, "module-ivy.data_classes.container.data_type"], [70, "module-ivy.data_classes.array.data_type"], [649, "data-type"], [387, "module-ivy.functional.ivy.experimental.data_type"]], "1.0: Lazy vs Eager": [[52, "1.0:-Lazy-vs-Eager"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[61, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[61, "Table-of-Contents"]], "Defining the model": [[61, "Defining-the-model"]], "Model construction": [[61, "Model-construction"]], "Some helper functions": [[61, "Some-helper-functions"]], "Transpiling the model": [[61, "Transpiling-the-model"]], "PyTorch pipeline": [[61, "PyTorch-pipeline"]], "Dataset download": [[61, "Dataset-download"]], "DataLoader": [[61, "DataLoader"]], "Training": [[61, "Training"]], "1.3: Dynamic vs Static": [[55, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[55, "Dynamic"]], "Static": [[55, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[55, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "HuggingFace Tensorflow DeiT": [[64, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[64, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "2.0: Kornia": [[56, "2.0:-Kornia"]], "0.0: Unify": [[49, "0.0:-Unify"]], "3.1: Stable Diffusion": [[58, "3.1:-Stable-Diffusion"]], "Basic Operations with Ivy": [[59, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[59, "Installs-\ud83d\udcbe"], [60, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[59, "Imports-\ud83d\udec3"], [60, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[59, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[59, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[59, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[59, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[59, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[59, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[59, "Set-Backend-Framework"]], "Define Model": [[59, "Define-Model"], [60, "Define-Model"]], "Create Model": [[59, "Create-Model"]], "Create Optimizer": [[59, "Create-Optimizer"]], "Input and Target": [[59, "Input-and-Target"]], "Loss Function": [[59, "Loss-Function"]], "Training Loop": [[59, "Training-Loop"]], "ODSC Ivy Demo": [[47, "ODSC-Ivy-Demo"]], "Ivy as a Framework": [[47, "Ivy-as-a-Framework"]], "Ivy Backend Handler": [[47, "Ivy-Backend-Handler"], [36, "Ivy-Backend-Handler"]], "Data Structures": [[47, "Data-Structures"], [36, "Data-Structures"]], "Ivy Functional API": [[47, "Ivy-Functional-API"], [36, "Ivy-Functional-API"]], "Ivy Stateful API": [[47, "Ivy-Stateful-API"], [36, "Ivy-Stateful-API"]], "Graph Tracer": [[47, "Graph-Tracer"]], "1.1: Framework Selection": [[53, "1.1:-Framework-Selection"]], "3.0: Perceiver": [[57, "3.0:-Perceiver"]], "Compilation of a Basic Function": [[60, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[60, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[60, "Function-compilation-\ud83d\udee0"]], "Set backend": [[60, "Set-backend"]], "Sample input": [[60, "Sample-input"]], "Define function to compile": [[60, "Define-function-to-compile"]], "Compile the function": [[60, "Compile-the-function"]], "Check results": [[60, "Check-results"], [60, "id1"]], "Compiling simple neural network \ud83e\udde0": [[60, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[60, "Create-model"]], "Define input": [[60, "Define-input"]], "Compile network": [[60, "Compile-network"]], "End-to-End Training Pipeline in Ivy": [[63, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[63, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[63, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[63, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[63, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[63, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[63, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[63, "Plotting-the-training-metrics"]], "Save the trained Model": [[63, "Save-the-trained-Model"]], "set_min_denominator": [[601, "set-min-denominator"]], "set_min_base": [[600, "set-min-base"]], "scatter_nd": [[595, "scatter-nd"]], "size": [[609, "size"]], "set_precise_mode": [[603, "set-precise-mode"]], "is_ivy_array": [[583, "is-ivy-array"]], "set_show_func_wrapper_trace_mode": [[606, "set-show-func-wrapper-trace-mode"]], "set_array_mode": [[596, "set-array-mode"]], "gather": [[570, "gather"]], "isin": [[587, "isin"]], "has_nans": [[576, "has-nans"]], "set_tmp_dir": [[607, "set-tmp-dir"]], "isscalar": [[588, "isscalar"]], "inplace_update": [[580, "inplace-update"]], "is_native_array": [[586, "is-native-array"]], "inplace_arrays_supported": [[577, "inplace-arrays-supported"]], "inplace_decrement": [[578, "inplace-decrement"]], "print_all_arrays_in_memory": [[593, "print-all-arrays-in-memory"]], "is_ivy_nested_array": [[585, "is-ivy-nested-array"]], "einops_reduce": [[564, "einops-reduce"]], "match_kwargs": [[590, "match-kwargs"]], "stable_divide": [[610, "stable-divide"]], "get_referrers_recursive": [[575, "get-referrers-recursive"]], "is_array": [[582, "is-array"]], "inplace_variables_supported": [[581, "inplace-variables-supported"]], "set_item": [[599, "set-item"]], "set_exception_trace_mode": [[597, "set-exception-trace-mode"]], "scatter_flat": [[594, "scatter-flat"]], "set_nestable_mode": [[602, "set-nestable-mode"]], "set_inplace_mode": [[598, "set-inplace-mode"]], "get_item": [[573, "get-item"]], "set_queue_timeout": [[604, "set-queue-timeout"]], "exists": [[566, "exists"]], "is_ivy_container": [[584, "is-ivy-container"]], "set_shape_array_mode": [[605, "set-shape-array-mode"]], "gather_nd": [[571, "gather-nd"]], "einops_repeat": [[565, "einops-repeat"]], "itemsize": [[589, "itemsize"]], "num_arrays_in_memory": [[592, "num-arrays-in-memory"]], "fourier_encode": [[567, "fourier-encode"]], "get_all_arrays_in_memory": [[572, "get-all-arrays-in-memory"]], "shape": [[608, "shape"]], "inplace_increment": [[579, "inplace-increment"]], "function_supported_devices_and_dtypes": [[568, "function-supported-devices-and-dtypes"]], "get_num_dims": [[574, "get-num-dims"]], "function_unsupported_devices_and_dtypes": [[569, "function-unsupported-devices-and-dtypes"]], "multiprocessing": [[591, "multiprocessing"]], "Image Segmentation with Ivy UNet": [[12, "Image-Segmentation-with-Ivy-UNet"], [13, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[12, "Imports"], [13, "Imports"], [24, "Imports"], [25, "Imports"], [29, "Imports"]], "Data Preparation": [[12, "Data-Preparation"], [13, "Data-Preparation"], [24, "Data-Preparation"], [25, "Data-Preparation"], [4, "Data-Preparation"], [7, "Data-Preparation"], [6, "Data-Preparation"], [5, "Data-Preparation"]], "Custom Preprocessing": [[12, "Custom-Preprocessing"], [13, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[12, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [13, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [24, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [25, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[12, "Visualise-image"], [13, "Visualise-image"], [24, "Visualise-image"], [25, "Visualise-image"]], "Model Inference": [[12, "Model-Inference"], [13, "Model-Inference"]], "Initializing Native Torch UNet": [[12, "Initializing-Native-Torch-UNet"], [13, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[12, "Custom-masking-function"], [13, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[12, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [13, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[12, "TensorFlow-backend"], [13, "TensorFlow-backend"]], "JAX": [[12, "JAX"], [13, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[12, "Appendix:-the-Ivy-native-implementation-of-UNet"], [13, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Write Ivy code": [[36, "Write-Ivy-code"]], "Contents": [[36, "Contents"]], "Installing Ivy": [[36, "Installing-Ivy"]], "Importing Ivy": [[36, "Importing-Ivy"], [0, "Importing-Ivy"]], "Transpiling a Tensorflow model to build on top": [[32, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Lazy vs Eager": [[40, "Lazy-vs-Eager"]], "Trace": [[40, "Trace"], [41, "Trace"]], "How to use decorators": [[41, "How-to-use-decorators"]], "Transpile \ud83d\udea7": [[41, "Transpile-\ud83d\udea7"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Using Ivy ResNet": [[24, "Using-Ivy-ResNet"], [25, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[24, "Prepare-the-set-of-labels"], [25, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[24, "Model-Inference-ResNet34"], [25, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[24, "Initializing-Native-Torch-ResNet34"], [25, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[24, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [25, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[24, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [24, "id1"], [25, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [25, "id1"]], "Model Inference ResNet50": [[24, "Model-Inference-ResNet50"], [25, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[24, "Initializing-Native-Torch-ResNet50"], [25, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[24, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [25, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Transpile any library": [[42, "Transpile-any-library"]], "Transpiling a PyTorch model to build on top": [[30, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Trace code": [[38, "Trace-code"]], "Write a model using Ivy": [[44, "Write-a-model-using-Ivy"]], "Transpiling Functions from PyTorch to TensorFlow": [[45, "Transpiling-Functions-from-PyTorch-to-TensorFlow"]], "Accelerating PyTorch models with JAX": [[27, "Accelerating-PyTorch-models-with-JAX"], [28, "Accelerating-PyTorch-models-with-JAX"]], "Ivy AlexNet demo": [[4, "Ivy-AlexNet-demo"], [5, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[4, "Ivy-AlexNet-inference-in-Torch"], [5, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[4, "TensorFlow-inference"], [5, "TensorFlow-inference"]], "JAX inference": [[4, "JAX-inference"], [5, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[4, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [5, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Using TensorFlow Models in your PyTorch Projects": [[9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[9, "Framework-Incompatibility"], [8, "Framework-Incompatibility"], [26, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[9, "Transpiling-a-TensorFlow-model-to-PyTorch"], [8, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[9, "About-the-transpiled-model"], [8, "About-the-transpiled-model"], [26, "About-the-transpiled-model"]], "Setting-up the source model": [[9, "Setting-up-the-source-model"], [8, "Setting-up-the-source-model"], [26, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [8, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Fine-tuning the transpiled model": [[9, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"], [26, "Fine-tuning-the-transpiled-model"], [11, "Fine-tuning-the-transpiled-model"], [10, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[9, "Conclusion"], [8, "Conclusion"], [16, "Conclusion"], [26, "Conclusion"], [11, "Conclusion"], [17, "Conclusion"], [10, "Conclusion"]], "Developing a convolutional network using Ivy": [[33, "Developing-a-convolutional-network-using-Ivy"]], "Image and Keypoints Augmentations using Kornia and Ivy\u2019s Transpiler": [[16, "Image-and-Keypoints-Augmentations-using-Kornia-and-Ivy's-Transpiler"]], "Original Tutorial Credits": [[16, "Original-Tutorial-Credits"], [17, "Original-Tutorial-Credits"]], "Installation and Setup": [[16, "Installation-and-Setup"], [17, "Installation-and-Setup"]], "Draw points and show image": [[16, "Draw-points-and-show-image"]], "Resize points and show": [[16, "Resize-points-and-show"]], "Crop image and points": [[16, "Crop-image-and-points"]], "What\u2019s Next?": [[16, "What's-Next?"], [17, "What's-Next?"]], "Transpiling Models from PyTorch to TensorFlow": [[46, "Transpiling-Models-from-PyTorch-to-TensorFlow"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "Training PyTorch ResNet in your TensorFlow Projects": [[26, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Transpiling a PyTorch model to TensorFlow": [[26, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "Load the Data": [[26, "Load-the-Data"]], "Visualize a few images": [[26, "Visualize-a-few-images"]], "Load the pre-trained model": [[26, "Load-the-pre-trained-model"]], "Converting the model from PyTorch to TensorFlow": [[26, "Converting-the-model-from-PyTorch-to-TensorFlow"]], "How To Convert Models from PyTorch to PaddlePaddle": [[11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[11, "About-the-Model"], [10, "About-the-Model"]], "Transpiling the Model": [[11, "Transpiling-the-Model"], [10, "Transpiling-the-Model"]], "Examples and Demos": [[3, "examples-and-demos"], [34, "examples-and-demos"]], "Accelerating MMPreTrain models with JAX": [[23, "Accelerating-MMPreTrain-models-with-JAX"], [22, "Accelerating-MMPreTrain-models-with-JAX"]], "Transpiling a haiku model to build on top": [[31, "Transpiling-a-haiku-model-to-build-on-top"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Transpile code": [[39, "Transpile-code"]], "Denoise image using Kornia and Ivy\u2019s Transpiler": [[17, "Denoise-image-using-Kornia-and-Ivy's-Transpiler"]], "Defining imshow function": [[17, "Defining-imshow-function"]], "Transpiling imshow Function to TensorFlow": [[17, "Transpiling-imshow-Function-to-TensorFlow"]], "loading an visualizing the image.": [[17, "loading-an-visualizing-the-image."]], "Defining Total Variation Denoising Network": [[17, "Defining-Total-Variation-Denoising-Network"]], "Transpiling TVDenoise Network to TensorFlow": [[17, "Transpiling-TVDenoise-Network-to-TensorFlow"]], "Running Optimization Loop": [[17, "Running-Optimization-Loop"]], "Visualizing Results": [[17, "Visualizing-Results"]], "Transpile any model": [[43, "Transpile-any-model"]], "Round up": [[43, "Round-up"]], "# Ivy Bert Demo": [[7, "#-Ivy-Bert-Demo"], [6, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[7, "Install-the-dependecies"], [6, "Install-the-dependecies"]], "Import the modules": [[7, "Import-the-modules"], [6, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[7, "Ivy-inference-with-Sequence-Classification"], [6, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[7, "Ivy-model-inference-with-tensorflow"], [6, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[7, "Ivy-model-inference-with-Jax"], [6, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[7, "Ivy-model-inference-with-torch"], [6, "Ivy-model-inference-with-torch"]], "Unify code": [[37, "Unify-code"]], "Accelerating XGBoost with JAX": [[29, "Accelerating-XGBoost-with-JAX"]], "Tests": [[29, "Tests"]], "Loading the Data": [[29, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[29, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[29, "JAX-backend"]], "Tensorflow backend": [[29, "Tensorflow-backend"]], "PyTorch backend": [[29, "PyTorch-backend"]], "More exhaustive example": [[29, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[29, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[29, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[29, "Comparison-of-Metrics"]], "Tutorials And Examples": [[34, "tutorials-and-examples"]], "Learn the Basics": [[34, "learn-the-basics"], [35, "learn-the-basics"]], "assert_supports_inplace": [[556, "assert-supports-inplace"]], "all_equal": [[552, "all-equal"]], "l2_normalize": [[523, "l2-normalize"]], "optional_get_element": [[551, "optional-get-element"]], "einops_rearrange": [[563, "einops-rearrange"]], "bernoulli": [[526, "bernoulli"]], "corrcoef": [[539, "corrcoef"]], "nanmin": [[548, "nanmin"]], "native_sparse_array": [[536, "native-sparse-array"]], "current_backend_str": [[561, "current-backend-str"]], "quantile": [[550, "quantile"]], "is_ivy_sparse_array": [[534, "is-ivy-sparse-array"]], "group_norm": [[520, "group-norm"]], "gamma": [[529, "gamma"]], "batch_norm": [[519, "batch-norm"]], "clip_matrix_norm": [[558, "clip-matrix-norm"]], "cummin": [[542, "cummin"]], "l1_normalize": [[522, "l1-normalize"]], "lp_normalize": [[525, "lp-normalize"]], "cummax": [[541, "cummax"]], "cov": [[540, "cov"]], "arg_info": [[553, "arg-info"]], "nanmean": [[546, "nanmean"]], "invert_permutation": [[532, "invert-permutation"]], "bincount": [[538, "bincount"]], "unravel_index": [[531, "unravel-index"]], "clip_vector_norm": [[559, "clip-vector-norm"]], "nanmedian": [[547, "nanmedian"]], "native_sparse_array_to_indices_values_and_shape": [[537, "native-sparse-array-to-indices-values-and-shape"]], "nanprod": [[549, "nanprod"]], "instance_norm": [[521, "instance-norm"]], "lexsort": [[533, "lexsort"]], "igamma": [[544, "igamma"]], "dirichlet": [[528, "dirichlet"]], "poisson": [[530, "poisson"]], "vsplit": [[517, "vsplit"]], "local_response_norm": [[524, "local-response-norm"]], "arg_names": [[554, "arg-names"]], "is_native_sparse_array": [[535, "is-native-sparse-array"]], "median": [[545, "median"]], "array_equal": [[555, "array-equal"]], "container_types": [[560, "container-types"]], "vstack": [[518, "vstack"]], "histogram": [[543, "histogram"]], "default": [[562, "default"]], "beta": [[527, "beta"]], "cache_fn": [[557, "cache-fn"]], "soft_margin_loss": [[476, "soft-margin-loss"]], "expand": [[489, "expand"]], "fliplr": [[492, "fliplr"]], "concat_from_sequence": [[486, "concat-from-sequence"]], "as_strided": [[477, "as-strided"]], "atleast_2d": [[480, "atleast-2d"]], "take_along_axis": [[511, "take-along-axis"]], "unfold": [[515, "unfold"]], "unique_consecutive": [[516, "unique-consecutive"]], "column_stack": [[485, "column-stack"]], "unflatten": [[514, "unflatten"]], "matricize": [[499, "matricize"]], "flatten": [[491, "flatten"]], "moveaxis": [[500, "moveaxis"]], "atleast_1d": [[479, "atleast-1d"]], "trim_zeros": [[513, "trim-zeros"]], "partial_fold": [[503, "partial-fold"]], "log_poisson_loss": [[473, "log-poisson-loss"]], "huber_loss": [[470, "huber-loss"]], "hstack": [[497, "hstack"]], "check_scalar": [[483, "check-scalar"]], "rot90": [[508, "rot90"]], "fold": [[494, "fold"]], "pad": [[501, "pad"]], "fill_diagonal": [[490, "fill-diagonal"]], "dsplit": [[487, "dsplit"]], "l1_loss": [[472, "l1-loss"]], "kl_div": [[471, "kl-div"]], "flipud": [[493, "flipud"]], "top_k": [[512, "top-k"]], "pad_sequence": [[502, "pad-sequence"]], "partial_vec_to_tensor": [[506, "partial-vec-to-tensor"]], "associative_scan": [[478, "associative-scan"]], "i0": [[498, "i0"]], "put_along_axis": [[507, "put-along-axis"]], "poisson_nll_loss": [[474, "poisson-nll-loss"]], "smooth_l1_loss": [[475, "smooth-l1-loss"]], "soft_thresholding": [[509, "soft-thresholding"]], "take": [[510, "take"]], "atleast_3d": [[481, "atleast-3d"]], "heaviside": [[495, "heaviside"]], "partial_tensor_to_vec": [[504, "partial-tensor-to-vec"]], "partial_unfold": [[505, "partial-unfold"]], "dstack": [[488, "dstack"]], "hsplit": [[496, "hsplit"]], "choose": [[484, "choose"]], "broadcast_shapes": [[482, "broadcast-shapes"]], "pool": [[434, "pool"]], "rfft": [[436, "rfft"]], "tt_matrix_to_tensor": [[467, "tt-matrix-to-tensor"]], "stft": [[440, "stft"]], "initialize_tucker": [[451, "initialize-tucker"]], "ifftn": [[426, "ifftn"]], "ifft": [[425, "ifft"]], "rnn": [[438, "rnn"]], "interp": [[427, "interp"]], "higher_order_moment": [[450, "higher-order-moment"]], "svd_flip": [[464, "svd-flip"]], "tensor_train": [[465, "tensor-train"]], "tucker": [[468, "tucker"]], "mode_dot": [[459, "mode-dot"]], "solve_triangular": [[463, "solve-triangular"]], "sliding_window": [[439, "sliding-window"]], "matrix_exp": [[458, "matrix-exp"]], "diagflat": [[444, "diagflat"]], "max_pool3d": [[431, "max-pool3d"]], "multi_dot": [[460, "multi-dot"]], "get_interpolate_kernel": [[423, "get-interpolate-kernel"]], "batched_outer": [[442, "batched-outer"]], "dot": [[445, "dot"]], "rfftn": [[437, "rfftn"]], "adjoint": [[441, "adjoint"]], "reduce_window": [[435, "reduce-window"]], "multi_mode_dot": [[461, "multi-mode-dot"]], "khatri_rao": [[452, "khatri-rao"]], "kron": [[453, "kron"]], "kronecker": [[454, "kronecker"]], "truncated_svd": [[466, "truncated-svd"]], "eigvals": [[448, "eigvals"]], "lu_factor": [[455, "lu-factor"]], "idct": [[424, "idct"]], "nearest_interpolate": [[433, "nearest-interpolate"]], "cond": [[443, "cond"]], "max_pool2d": [[430, "max-pool2d"]], "eigh_tridiagonal": [[447, "eigh-tridiagonal"]], "interpolate": [[428, "interpolate"]], "general_inner_product": [[449, "general-inner-product"]], "max_pool1d": [[429, "max-pool1d"]], "lu_solve": [[456, "lu-solve"]], "partial_tucker": [[462, "partial-tucker"]], "hinge_embedding_loss": [[469, "hinge-embedding-loss"]], "max_unpool1d": [[432, "max-unpool1d"]], "make_svd_non_negative": [[457, "make-svd-non-negative"]], "to_list": [[615, "to-list"]], "jac": [[638, "jac"]], "to_ivy_shape": [[614, "to-ivy-shape"]], "optimizer_update": [[641, "optimizer-update"]], "gradient_descent_update": [[637, "gradient-descent-update"]], "adam_update": [[634, "adam-update"]], "supports_inplace_updates": [[613, "supports-inplace-updates"]], "unset_show_func_wrapper_trace_mode": [[629, "unset-show-func-wrapper-trace-mode"]], "value_and_grad": [[644, "value-and-grad"]], "unset_shape_array_mode": [[628, "unset-shape-array-mode"]], "to_scalar": [[618, "to-scalar"]], "unset_queue_timeout": [[627, "unset-queue-timeout"]], "to_native_shape": [[616, "to-native-shape"]], "Constants": [[646, "module-ivy.functional.ivy.constants"], [385, "module-ivy.functional.ivy.experimental.constants"]], "vmap": [[632, "vmap"]], "to_numpy": [[617, "to-numpy"]], "unset_min_denominator": [[624, "unset-min-denominator"]], "unset_min_base": [[623, "unset-min-base"]], "unset_tmp_dir": [[630, "unset-tmp-dir"]], "stop_gradient": [[643, "stop-gradient"]], "unset_inplace_mode": [[622, "unset-inplace-mode"]], "lamb_update": [[639, "lamb-update"]], "strides": [[612, "strides"]], "unset_nestable_mode": [[625, "unset-nestable-mode"]], "execute_with_gradients": [[635, "execute-with-gradients"]], "requires_gradient": [[642, "requires-gradient"]], "Control flow ops": [[647, "control-flow-ops"]], "unset_precise_mode": [[626, "unset-precise-mode"]], "unset_array_mode": [[620, "unset-array-mode"]], "unset_exception_trace_mode": [[621, "unset-exception-trace-mode"]], "value_is_nan": [[631, "value-is-nan"]], "try_else_none": [[619, "try-else-none"]], "grad": [[636, "grad"]], "lars_update": [[640, "lars-update"]], "adam_step": [[633, "adam-step"]], "stable_pow": [[611, "stable-pow"]], "polyval": [[339, "polyval"]], "modf": [[372, "modf"]], "nansum": [[373, "nansum"]], "random_cp": [[340, "random-cp"]], "binarizer": [[354, "binarizer"]], "isclose": [[368, "isclose"]], "random_tt": [[343, "random-tt"]], "blackman_window": [[329, "blackman-window"]], "erfc": [[360, "erfc"]], "unsorted_segment_min": [[348, "unsorted-segment-min"]], "tril_indices": [[345, "tril-indices"]], "hamming_window": [[331, "hamming-window"]], "conj": [[355, "conj"]], "lgamma": [[371, "lgamma"]], "count_nonzero": [[357, "count-nonzero"]], "random_parafac2": [[341, "random-parafac2"]], "diff": [[358, "diff"]], "trilu": [[346, "trilu"]], "kaiser_bessel_derived_window": [[334, "kaiser-bessel-derived-window"]], "ndenumerate": [[337, "ndenumerate"]], "nextafter": [[374, "nextafter"]], "amin": [[353, "amin"]], "gradient": [[366, "gradient"]], "ldexp": [[369, "ldexp"]], "digamma": [[359, "digamma"]], "lerp": [[370, "lerp"]], "signbit": [[375, "signbit"]], "ndindex": [[338, "ndindex"]], "allclose": [[351, "allclose"]], "random_tucker": [[344, "random-tucker"]], "indices": [[333, "indices"]], "unsorted_segment_mean": [[347, "unsorted-segment-mean"]], "unsorted_segment_sum": [[349, "unsorted-segment-sum"]], "copysign": [[356, "copysign"]], "hann_window": [[332, "hann-window"]], "erfinv": [[361, "erfinv"]], "eye_like": [[330, "eye-like"]], "float_power": [[363, "float-power"]], "vorbis_window": [[350, "vorbis-window"]], "mel_weight_matrix": [[336, "mel-weight-matrix"]], "random_tr": [[342, "random-tr"]], "amax": [[352, "amax"]], "kaiser_window": [[335, "kaiser-window"]], "fix": [[362, "fix"]], "fmax": [[364, "fmax"]], "hypot": [[367, "hypot"]], "frexp": [[365, "frexp"]], "tanhshrink": [[326, "tanhshrink"]], "reciprocal": [[298, "reciprocal"]], "sin": [[302, "sin"]], "subtract": [[306, "subtract"]], "elu": [[313, "elu"]], "sqrt": [[304, "sqrt"]], "selu": [[322, "selu"]], "scaled_tanh": [[321, "scaled-tanh"]], "threshold": [[327, "threshold"]], "round": [[300, "round"]], "logsigmoid": [[318, "logsigmoid"]], "real": [[297, "real"]], "celu": [[312, "celu"]], "sinh": [[303, "sinh"]], "remainder": [[299, "remainder"]], "logical_xor": [[287, "logical-xor"]], "hardsilu": [[315, "hardsilu"]], "minimum": [[289, "minimum"]], "rad2deg": [[296, "rad2deg"]], "logical_not": [[285, "logical-not"]], "trunc": [[310, "trunc"]], "nan_to_num": [[291, "nan-to-num"]], "silu": [[323, "silu"]], "thresholded_relu": [[328, "thresholded-relu"]], "tanh": [[308, "tanh"]], "square": [[305, "square"]], "tan": [[307, "tan"]], "logit": [[317, "logit"]], "logical_and": [[284, "logical-and"]], "pow": [[295, "pow"]], "trapz": [[309, "trapz"]], "positive": [[294, "positive"]], "sign": [[301, "sign"]], "hardtanh": [[316, "hardtanh"]], "prelu": [[319, "prelu"]], "stanh": [[325, "stanh"]], "logaddexp": [[282, "logaddexp"]], "relu6": [[320, "relu6"]], "multiply": [[290, "multiply"]], "softshrink": [[324, "softshrink"]], "negative": [[292, "negative"]], "trunc_divide": [[311, "trunc-divide"]], "logaddexp2": [[283, "logaddexp2"]], "logical_or": [[286, "logical-or"]], "maximum": [[288, "maximum"]], "not_equal": [[293, "not-equal"]], "hardshrink": [[314, "hardshrink"]], "handle_soft_device_variable": [[220, "handle-soft-device-variable"]], "set_split_factor": [[228, "set-split-factor"]], "set_default_dtype": [[199, "set-default-dtype"]], "valid_dtype": [[209, "valid-dtype"]], "set_default_int_dtype": [[201, "set-default-int-dtype"]], "unset_default_dtype": [[205, "unset-default-dtype"]], "function_unsupported_devices": [[217, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[218, "get-all-ivy-arrays-on-dev"]], "to_device": [[231, "to-device"]], "as_native_dev": [[211, "as-native-dev"]], "clear_cached_mem_on_dev": [[212, "clear-cached-mem-on-dev"]], "is_complex_dtype": [[189, "is-complex-dtype"]], "num_gpus": [[222, "num-gpus"]], "set_default_uint_dtype": [[202, "set-default-uint-dtype"]], "is_int_dtype": [[192, "is-int-dtype"]], "tpu_is_available": [[233, "tpu-is-available"]], "function_supported_devices": [[216, "function-supported-devices"]], "num_ivy_arrays_on_dev": [[223, "num-ivy-arrays-on-dev"]], "dev": [[214, "dev"]], "unset_default_int_dtype": [[207, "unset-default-int-dtype"]], "split_func_call": [[230, "split-func-call"]], "unset_default_device": [[234, "unset-default-device"]], "is_native_dtype": [[193, "is-native-dtype"]], "result_type": [[197, "result-type"]], "unset_default_complex_dtype": [[204, "unset-default-complex-dtype"]], "is_float_dtype": [[190, "is-float-dtype"]], "default_device": [[213, "default-device"]], "split_factor": [[229, "split-factor"]], "set_soft_device_mode": [[227, "set-soft-device-mode"]], "type_promote_arrays": [[203, "type-promote-arrays"]], "is_bool_dtype": [[188, "is-bool-dtype"]], "unset_default_uint_dtype": [[208, "unset-default-uint-dtype"]], "promote_types": [[195, "promote-types"]], "percent_used_mem_on_dev": [[224, "percent-used-mem-on-dev"]], "set_default_device": [[226, "set-default-device"]], "total_mem_on_dev": [[232, "total-mem-on-dev"]], "gpu_is_available": [[219, "gpu-is-available"]], "dev_util": [[215, "dev-util"]], "num_cpu_cores": [[221, "num-cpu-cores"]], "unset_default_float_dtype": [[206, "unset-default-float-dtype"]], "is_uint_dtype": [[194, "is-uint-dtype"]], "print_all_ivy_arrays_on_dev": [[225, "print-all-ivy-arrays-on-dev"]], "as_ivy_dev": [[210, "as-ivy-dev"]], "is_hashable_dtype": [[191, "is-hashable-dtype"]], "set_default_float_dtype": [[200, "set-default-float-dtype"]], "promote_types_of_inputs": [[196, "promote-types-of-inputs"]], "set_default_complex_dtype": [[198, "set-default-complex-dtype"]], "erf": [[259, "erf"]], "imag": [[270, "imag"]], "less_equal": [[277, "less-equal"]], "gcd": [[267, "gcd"]], "ceil": [[253, "ceil"]], "greater_equal": [[269, "greater-equal"]], "atanh": [[246, "atanh"]], "acosh": [[239, "acosh"]], "bitwise_or": [[250, "bitwise-or"]], "exp": [[260, "exp"]], "exp2": [[261, "exp2"]], "atan": [[244, "atan"]], "bitwise_invert": [[248, "bitwise-invert"]], "divide": [[257, "divide"]], "isinf": [[272, "isinf"]], "lcm": [[275, "lcm"]], "greater": [[268, "greater"]], "deg2rad": [[256, "deg2rad"]], "fmod": [[266, "fmod"]], "atan2": [[245, "atan2"]], "angle": [[241, "angle"]], "equal": [[258, "equal"]], "isreal": [[274, "isreal"]], "expm1": [[262, "expm1"]], "floor_divide": [[264, "floor-divide"]], "less": [[276, "less"]], "bitwise_and": [[247, "bitwise-and"]], "floor": [[263, "floor"]], "log1p": [[280, "log1p"]], "cos": [[254, "cos"]], "bitwise_right_shift": [[251, "bitwise-right-shift"]], "asinh": [[243, "asinh"]], "acos": [[238, "acos"]], "used_mem_on_dev": [[236, "used-mem-on-dev"]], "log10": [[279, "log10"]], "log": [[278, "log"]], "isnan": [[273, "isnan"]], "bitwise_xor": [[252, "bitwise-xor"]], "add": [[240, "add"]], "unset_soft_device_mode": [[235, "unset-soft-device-mode"]], "abs": [[237, "abs"]], "asin": [[242, "asin"]], "cosh": [[255, "cosh"]], "isfinite": [[271, "isfinite"]], "fmin": [[265, "fmin"]], "bitwise_left_shift": [[249, "bitwise-left-shift"]], "log2": [[281, "log2"]], "dft": [[415, "dft"]], "avg_pool2d": [[412, "avg-pool2d"]], "area_interpolate": [[410, "area-interpolate"]], "reduce": [[380, "reduce"]], "sinc": [[376, "sinc"]], "fft2": [[421, "fft2"]], "adaptive_max_pool3d": [[409, "adaptive-max-pool3d"]], "generate_einsum_equation": [[422, "generate-einsum-equation"]], "xlogy": [[378, "xlogy"]], "adaptive_max_pool2d": [[408, "adaptive-max-pool2d"]], "vjp": [[383, "vjp"]], "avg_pool3d": [[413, "avg-pool3d"]], "sparsify_tensor": [[377, "sparsify-tensor"]], "adaptive_avg_pool2d": [[407, "adaptive-avg-pool2d"]], "dropout2d": [[417, "dropout2d"]], "adaptive_avg_pool1d": [[406, "adaptive-avg-pool1d"]], "Sparse array": [[403, "sparse-array"]], "dropout1d": [[416, "dropout1d"]], "jvp": [[382, "jvp"]], "bind_custom_gradient_function": [[381, "bind-custom-gradient-function"]], "fft": [[420, "fft"]], "dct": [[414, "dct"]], "dropout3d": [[418, "dropout3d"]], "avg_pool1d": [[411, "avg-pool1d"]], "zeta": [[379, "zeta"]], "embedding": [[419, "embedding"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[67, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[67, "module-ivy.data_classes.array.activations"], [68, "module-ivy.data_classes.array.conversions"], [69, "module-ivy.data_classes.array.creation"], [70, "module-ivy.data_classes.array.data_type"], [71, "module-ivy.data_classes.array.device"], [72, "module-ivy.data_classes.array.elementwise"], [73, "module-ivy.data_classes.array.experimental"], [73, "module-ivy.data_classes.array.experimental.activations"], [73, "module-ivy.data_classes.array.experimental.conversions"], [73, "module-ivy.data_classes.array.experimental.creation"], [73, "module-ivy.data_classes.array.experimental.data_type"], [73, "module-ivy.data_classes.array.experimental.device"], [73, "module-ivy.data_classes.array.experimental.elementwise"], [73, "module-ivy.data_classes.array.experimental.general"], [73, "module-ivy.data_classes.array.experimental.gradients"], [73, "module-ivy.data_classes.array.experimental.image"], [73, "module-ivy.data_classes.array.experimental.layers"], [73, "module-ivy.data_classes.array.experimental.linear_algebra"], [73, "module-ivy.data_classes.array.experimental.losses"], [73, "module-ivy.data_classes.array.experimental.manipulation"], [73, "module-ivy.data_classes.array.experimental.norms"], [73, "module-ivy.data_classes.array.experimental.random"], [73, "module-ivy.data_classes.array.experimental.searching"], [73, "module-ivy.data_classes.array.experimental.set"], [73, "module-ivy.data_classes.array.experimental.sorting"], [73, "module-ivy.data_classes.array.experimental.statistical"], [73, "module-ivy.data_classes.array.experimental.utility"], [74, "module-ivy.data_classes.array.general"], [75, "module-ivy.data_classes.array.gradients"], [76, "module-ivy.data_classes.array.image"], [77, "module-ivy.data_classes.array.layers"], [78, "module-ivy.data_classes.array.linear_algebra"], [79, "module-ivy.data_classes.array.losses"], [80, "module-ivy.data_classes.array.manipulation"], [81, "module-ivy.data_classes.array.norms"], [82, "module-ivy.data_classes.array.random"], [83, "module-ivy.data_classes.array.searching"], [84, "module-ivy.data_classes.array.set"], [85, "module-ivy.data_classes.array.sorting"], [86, "module-ivy.data_classes.array.statistical"], [87, "module-ivy.data_classes.array.utility"], [88, "module-ivy.data_classes.array.wrapping"], [89, "module-ivy.data_classes.container.activations"], [90, "module-ivy.data_classes.container.base"], [91, "module-ivy.data_classes.container.conversions"], [92, "module-ivy.data_classes.container.creation"], [93, "module-ivy.data_classes.container.data_type"], [94, "module-ivy.data_classes.container.device"], [95, "module-ivy.data_classes.container.elementwise"], [96, "module-ivy.data_classes.container.experimental"], [96, "module-ivy.data_classes.container.experimental.activations"], [96, "module-ivy.data_classes.container.experimental.conversions"], [96, "module-ivy.data_classes.container.experimental.creation"], [96, "module-ivy.data_classes.container.experimental.data_type"], [96, "module-ivy.data_classes.container.experimental.device"], [96, "module-ivy.data_classes.container.experimental.elementwise"], [96, "module-ivy.data_classes.container.experimental.general"], [96, "module-ivy.data_classes.container.experimental.gradients"], [96, "module-ivy.data_classes.container.experimental.image"], [96, "module-ivy.data_classes.container.experimental.layers"], [96, "module-ivy.data_classes.container.experimental.linear_algebra"], [96, "module-ivy.data_classes.container.experimental.losses"], [96, "module-ivy.data_classes.container.experimental.manipulation"], [96, "module-ivy.data_classes.container.experimental.norms"], [96, "module-ivy.data_classes.container.experimental.random"], [96, "module-ivy.data_classes.container.experimental.searching"], [96, "module-ivy.data_classes.container.experimental.set"], [96, "module-ivy.data_classes.container.experimental.sorting"], [96, "module-ivy.data_classes.container.experimental.statistical"], [96, "module-ivy.data_classes.container.experimental.utility"], [97, "module-ivy.data_classes.container.general"], [98, "module-ivy.data_classes.container.gradients"], [99, "module-ivy.data_classes.container.image"], [100, "module-ivy.data_classes.container.layers"], [101, "module-ivy.data_classes.container.linear_algebra"], [102, "module-ivy.data_classes.container.losses"], [103, "module-ivy.data_classes.container.manipulation"], [104, "module-ivy.data_classes.container.norms"], [105, "module-ivy.data_classes.container.random"], [106, "module-ivy.data_classes.container.searching"], [107, "module-ivy.data_classes.container.set"], [108, "module-ivy.data_classes.container.sorting"], [109, "module-ivy.data_classes.container.statistical"], [110, "module-ivy.data_classes.container.utility"], [111, "module-ivy.data_classes.container.wrapping"], [112, "module-ivy.data_classes.factorized_tensor.base"], [113, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [114, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [115, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [116, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [117, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [118, "module-ivy.data_classes.array.array"], [119, "module-ivy.data_classes.container.container"], [121, "module-ivy.data_classes.nested_array.nested_array"], [122, "module-ivy.data_classes.nested_array.base"], [123, "module-ivy.data_classes.nested_array.elementwise"], [384, "module-ivy.functional.ivy.experimental.activations"], [385, "module-ivy.functional.ivy.experimental.constants"], [386, "module-ivy.functional.ivy.experimental.creation"], [387, "module-ivy.functional.ivy.experimental.data_type"], [388, "module-ivy.functional.ivy.experimental.device"], [389, "module-ivy.functional.ivy.experimental.elementwise"], [390, "module-ivy.functional.ivy.experimental.general"], [391, "module-ivy.functional.ivy.experimental.gradients"], [392, "module-ivy.functional.ivy.experimental.layers"], [393, "module-ivy.functional.ivy.experimental.linear_algebra"], [394, "module-ivy.functional.ivy.experimental.losses"], [395, "module-ivy.functional.ivy.experimental.manipulation"], [396, "module-ivy.functional.ivy.experimental.meta"], [397, "module-ivy.functional.ivy.experimental.nest"], [398, "module-ivy.functional.ivy.experimental.norms"], [399, "module-ivy.functional.ivy.experimental.random"], [400, "module-ivy.functional.ivy.experimental.searching"], [401, "module-ivy.functional.ivy.experimental.set"], [402, "module-ivy.functional.ivy.experimental.sorting"], [403, "module-ivy.functional.ivy.experimental.sparse_array"], [404, "module-ivy.functional.ivy.experimental.statistical"], [405, "module-ivy.functional.ivy.experimental.utility"], [645, "module-ivy.functional.ivy.activations"], [646, "module-ivy.functional.ivy.constants"], [647, "module-ivy.functional.ivy.control_flow_ops"], [648, "module-ivy.functional.ivy.creation"], [649, "module-ivy.functional.ivy.data_type"], [650, "module-ivy.functional.ivy.device"], [651, "module-ivy.functional.ivy.elementwise"], [652, "module-ivy.functional.ivy.experimental"], [653, "module-ivy.functional.ivy.general"], [654, "module-ivy.functional.ivy.gradients"], [655, "module-ivy.functional.ivy.layers"], [656, "module-ivy.functional.ivy.linear_algebra"], [657, "module-ivy.functional.ivy.losses"], [658, "module-ivy.functional.ivy.manipulation"], [659, "module-ivy.functional.ivy.meta"], [660, "module-ivy.functional.ivy.nest"], [661, "module-ivy.functional.ivy.norms"], [662, "module-ivy.functional.ivy.random"], [663, "module-ivy.functional.ivy.searching"], [664, "module-ivy.functional.ivy.set"], [665, "module-ivy.functional.ivy.sorting"], [666, "module-ivy.functional.ivy.statistical"], [667, "module-ivy.functional.ivy.utility"], [793, "module-ivy_tests.test_ivy.helpers.assertions"], [794, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [795, "module-ivy_tests.test_ivy.helpers.function_testing"], [796, "module-ivy_tests.test_ivy.helpers.globals"], [797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [800, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [801, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [802, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [803, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [804, "module-ivy_tests.test_ivy.helpers.structs"], [805, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [806, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [810, "module-ivy.stateful.activations"], [811, "module-ivy.stateful.converters"], [812, "module-ivy.stateful.helpers"], [813, "module-ivy.stateful.initializers"], [814, "module-ivy.stateful.layers"], [815, "module-ivy.stateful.losses"], [816, "module-ivy.stateful.module"], [817, "module-ivy.stateful.norms"], [818, "module-ivy.stateful.optimizers"], [819, "module-ivy.stateful.sequential"], [820, "module-ivy.stateful.utilities"], [821, "module-ivy.utils.assertions"], [822, "module-ivy.utils.backend"], [823, "module-ivy.utils.backend.ast_helpers"], [824, "module-ivy.utils.backend.handler"], [825, "module-ivy.utils.backend.sub_backend_handler"], [826, "module-ivy.utils.binaries"], [827, "module-ivy.utils.decorator_utils"], [828, "module-ivy.utils.dynamic_import"], [829, "module-ivy.utils.einsum_parser"], [830, "module-ivy.utils.einsum_path_helpers"], [831, "module-ivy.utils.exceptions"], [832, "module-ivy.utils.inspection"], [833, "module-ivy.utils.logging"], [834, "module-ivy.utils.profiler"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[67, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_data_to_new_backend() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions._data_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[68, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[68, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[69, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[69, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[70, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[70, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[71, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[71, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[71, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[71, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[71, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[72, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[72, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[73, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[73, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[73, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[73, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[73, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[73, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[73, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[73, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[73, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[73, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[73, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[73, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[73, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[73, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[73, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[73, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[73, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[73, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[73, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[73, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[73, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[73, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[73, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[73, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[73, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[73, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[73, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[73, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[73, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[73, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[73, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[73, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[73, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[73, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[73, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[73, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[73, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[73, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[73, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[73, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[73, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[73, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[73, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[73, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[73, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[73, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[73, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[73, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[73, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[73, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[73, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[73, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[73, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[73, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[73, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[73, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[74, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[74, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[75, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[75, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[76, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[76, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[76, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[77, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[77, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[78, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[78, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[79, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[79, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[79, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[79, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[79, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[79, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[80, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[80, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[81, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[81, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[81, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[81, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[82, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[82, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[82, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[82, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[82, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[82, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[82, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[82, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[83, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[83, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[84, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[84, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[84, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[84, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[84, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[84, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[84, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[85, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[85, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[86, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[86, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[87, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[87, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[87, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[87, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[87, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[88, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[88, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[88, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[89, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[89, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[90, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[90, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[90, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[90, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[90, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[90, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[90, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[90, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[91, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[91, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[92, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[92, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[93, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[93, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[94, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[94, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[94, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[94, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[94, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[94, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[94, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[95, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[95, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[96, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[96, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[96, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[96, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[96, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[96, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[96, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[96, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[96, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[96, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[96, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[96, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[96, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[96, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[96, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[96, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[96, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[96, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[96, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[96, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[96, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[96, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[96, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[96, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[96, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[96, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[96, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[96, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[96, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[96, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[96, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[96, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[96, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[96, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[96, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[96, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[96, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[96, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[96, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[96, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[96, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[96, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[96, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[96, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[96, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[96, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[96, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[96, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[96, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[96, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[96, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[96, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[96, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[96, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[96, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[96, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[96, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[97, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[97, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[98, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[98, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[99, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[99, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[99, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[100, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[100, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[101, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[101, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[102, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[102, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[103, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[103, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[104, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[104, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[104, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[104, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[105, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[105, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[105, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[106, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[106, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[107, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[107, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[107, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[107, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[107, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[107, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[107, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[107, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[107, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[107, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[107, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[108, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[108, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[109, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[109, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[110, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[110, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[111, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[111, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[111, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[112, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[112, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[113, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[113, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[114, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[114, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[115, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[115, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[116, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[116, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[117, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[117, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[118, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[118, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[118, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[118, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[119, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[119, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[119, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[121, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[121, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[121, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[121, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[121, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[122, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[122, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[123, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[123, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[123, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[123, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[126, "ivy.gelu"], [645, "ivy.gelu"]], "gelu() (ivy.array method)": [[126, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[126, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[127, "ivy.hardswish"], [645, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[127, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[127, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[128, "ivy.leaky_relu"], [645, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[128, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[128, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[129, "ivy.log_softmax"], [645, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[129, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[129, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[130, "ivy.mish"], [645, "ivy.mish"]], "mish() (ivy.array method)": [[130, "ivy.Array.mish"]], "mish() (ivy.container method)": [[130, "ivy.Container.mish"]], "relu() (in module ivy)": [[131, "ivy.relu"], [645, "ivy.relu"]], "relu() (ivy.array method)": [[131, "ivy.Array.relu"]], "relu() (ivy.container method)": [[131, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[132, "ivy.sigmoid"], [645, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[132, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[132, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[133, "ivy.softmax"], [645, "ivy.softmax"]], "softmax() (ivy.array method)": [[133, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[133, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[134, "ivy.softplus"], [645, "ivy.softplus"]], "softplus() (ivy.array method)": [[134, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[134, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[135, "ivy.softsign"], [645, "ivy.softsign"]], "cmp_is() (in module ivy)": [[136, "ivy.cmp_is"], [647, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[137, "ivy.cmp_isnot"], [647, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[138, "ivy.for_loop"], [647, "ivy.for_loop"]], "if_else() (in module ivy)": [[139, "ivy.if_else"], [647, "ivy.if_else"]], "try_except() (in module ivy)": [[140, "ivy.try_except"], [647, "ivy.try_except"]], "while_loop() (in module ivy)": [[141, "ivy.while_loop"], [647, "ivy.while_loop"]], "arange() (in module ivy)": [[142, "ivy.arange"], [648, "ivy.arange"]], "array() (in module ivy)": [[143, "ivy.array"], [648, "ivy.array"]], "asarray() (in module ivy)": [[144, "ivy.asarray"], [648, "ivy.asarray"]], "asarray() (ivy.array method)": [[144, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[144, "ivy.Container.asarray"]], "complex() (in module ivy)": [[145, "ivy.complex"], [648, "ivy.complex"]], "copy_array() (in module ivy)": [[146, "ivy.copy_array"], [648, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[146, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[146, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[147, "ivy.empty"], [648, "ivy.empty"]], "empty_like() (in module ivy)": [[148, "ivy.empty_like"], [648, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[148, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[148, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[149, "ivy.eye"], [648, "ivy.eye"]], "from_dlpack() (in module ivy)": [[150, "ivy.from_dlpack"], [648, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[150, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[150, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[151, "ivy.frombuffer"], [648, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[151, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[152, "ivy.full"], [648, "ivy.full"]], "full_like() (in module ivy)": [[153, "ivy.full_like"], [648, "ivy.full_like"]], "full_like() (ivy.array method)": [[153, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[153, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[154, "ivy.linspace"], [648, "ivy.linspace"]], "linspace() (ivy.array method)": [[154, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[154, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[155, "ivy.logspace"], [648, "ivy.logspace"]], "logspace() (ivy.array method)": [[155, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[155, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[156, "ivy.meshgrid"], [648, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[156, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[156, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[157, "ivy.native_array"], [648, "ivy.native_array"]], "native_array() (ivy.array method)": [[157, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[157, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[158, "ivy.one_hot"], [648, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[158, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[158, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[159, "ivy.ones"], [648, "ivy.ones"]], "ones_like() (in module ivy)": [[160, "ivy.ones_like"], [648, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[160, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[160, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[161, "ivy.to_dlpack"], [648, "ivy.to_dlpack"]], "tril() (in module ivy)": [[162, "ivy.tril"], [648, "ivy.tril"]], "tril() (ivy.array method)": [[162, "ivy.Array.tril"]], "tril() (ivy.container method)": [[162, "ivy.Container.tril"]], "triu() (in module ivy)": [[163, "ivy.triu"], [648, "ivy.triu"]], "triu() (ivy.array method)": [[163, "ivy.Array.triu"]], "triu() (ivy.container method)": [[163, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[164, "ivy.triu_indices"], [648, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[164, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[165, "ivy.zeros"], [648, "ivy.zeros"]], "zeros_like() (in module ivy)": [[166, "ivy.zeros_like"], [648, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[166, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[166, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[167, "ivy.as_ivy_dtype"], [649, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[168, "ivy.as_native_dtype"], [649, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[169, "ivy.astype"], [649, "ivy.astype"]], "astype() (ivy.array method)": [[169, "ivy.Array.astype"]], "astype() (ivy.container method)": [[169, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[170, "ivy.broadcast_arrays"], [649, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[170, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[170, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[171, "ivy.broadcast_to"], [649, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[171, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[171, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[172, "ivy.can_cast"], [649, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[172, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[172, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[173, "ivy.check_float"], [649, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[174, "ivy.closest_valid_dtype"], [649, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[175, "ivy.default_complex_dtype"], [649, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[176, "ivy.default_dtype"], [649, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[177, "ivy.default_float_dtype"], [649, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[178, "ivy.default_int_dtype"], [649, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[179, "ivy.default_uint_dtype"], [649, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[180, "ivy.dtype"], [649, "ivy.dtype"]], "dtype() (ivy.array method)": [[180, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[180, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[181, "ivy.dtype_bits"], [649, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[182, "ivy.finfo"], [649, "ivy.finfo"]], "finfo() (ivy.array method)": [[182, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[182, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[183, "ivy.function_supported_dtypes"], [649, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[184, "ivy.function_unsupported_dtypes"], [649, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[185, "ivy.iinfo"], [649, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[185, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[185, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[186, "ivy.infer_default_dtype"], [649, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[187, "ivy.invalid_dtype"], [649, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[188, "ivy.is_bool_dtype"], [649, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[188, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[188, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[189, "ivy.is_complex_dtype"], [649, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[189, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[190, "ivy.is_float_dtype"], [649, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[190, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[190, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[191, "ivy.is_hashable_dtype"], [649, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[192, "ivy.is_int_dtype"], [649, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[192, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[192, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[193, "ivy.is_native_dtype"], [649, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[194, "ivy.is_uint_dtype"], [649, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[194, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[194, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[195, "ivy.promote_types"], [649, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[196, "ivy.promote_types_of_inputs"], [649, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[197, "ivy.result_type"], [649, "ivy.result_type"]], "result_type() (ivy.array method)": [[197, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[197, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[198, "ivy.set_default_complex_dtype"], [649, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[199, "ivy.set_default_dtype"], [649, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[200, "ivy.set_default_float_dtype"], [649, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[201, "ivy.set_default_int_dtype"], [649, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[202, "ivy.set_default_uint_dtype"], [649, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[203, "ivy.type_promote_arrays"], [649, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[204, "ivy.unset_default_complex_dtype"], [649, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[205, "ivy.unset_default_dtype"], [649, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[206, "ivy.unset_default_float_dtype"], [649, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[207, "ivy.unset_default_int_dtype"], [649, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[208, "ivy.unset_default_uint_dtype"], [649, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[209, "ivy.valid_dtype"], [649, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[210, "ivy.as_ivy_dev"], [650, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[211, "ivy.as_native_dev"], [650, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[212, "ivy.clear_cached_mem_on_dev"], [650, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[213, "ivy.default_device"], [650, "ivy.default_device"]], "dev() (in module ivy)": [[214, "ivy.dev"], [650, "ivy.dev"]], "dev() (ivy.array method)": [[214, "ivy.Array.dev"]], "dev() (ivy.container method)": [[214, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[215, "ivy.dev_util"], [650, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[216, "ivy.function_supported_devices"], [650, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[217, "ivy.function_unsupported_devices"], [650, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[218, "ivy.get_all_ivy_arrays_on_dev"], [650, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[219, "ivy.gpu_is_available"], [650, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[220, "ivy.handle_soft_device_variable"], [650, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[221, "ivy.num_cpu_cores"], [650, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[222, "ivy.num_gpus"], [650, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[223, "ivy.num_ivy_arrays_on_dev"], [650, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[224, "ivy.percent_used_mem_on_dev"], [650, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[225, "ivy.print_all_ivy_arrays_on_dev"], [650, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[226, "ivy.set_default_device"], [650, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[227, "ivy.set_soft_device_mode"], [650, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[228, "ivy.set_split_factor"], [650, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[229, "ivy.split_factor"], [650, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[230, "ivy.split_func_call"], [650, "ivy.split_func_call"]], "to_device() (in module ivy)": [[231, "ivy.to_device"], [650, "ivy.to_device"]], "to_device() (ivy.array method)": [[231, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[231, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[232, "ivy.total_mem_on_dev"], [650, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[233, "ivy.tpu_is_available"], [650, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[234, "ivy.unset_default_device"], [650, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[235, "ivy.unset_soft_device_mode"], [650, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[236, "ivy.used_mem_on_dev"], [650, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[237, "ivy.abs"], [651, "ivy.abs"]], "abs() (ivy.array method)": [[237, "ivy.Array.abs"]], "abs() (ivy.container method)": [[237, "ivy.Container.abs"]], "acos() (in module ivy)": [[238, "ivy.acos"], [651, "ivy.acos"]], "acos() (ivy.array method)": [[238, "ivy.Array.acos"]], "acos() (ivy.container method)": [[238, "ivy.Container.acos"]], "acosh() (in module ivy)": [[239, "ivy.acosh"], [651, "ivy.acosh"]], "acosh() (ivy.array method)": [[239, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[239, "ivy.Container.acosh"]], "add() (in module ivy)": [[240, "ivy.add"], [651, "ivy.add"]], "add() (ivy.array method)": [[240, "ivy.Array.add"]], "add() (ivy.container method)": [[240, "ivy.Container.add"]], "angle() (in module ivy)": [[241, "ivy.angle"], [651, "ivy.angle"]], "angle() (ivy.array method)": [[241, "ivy.Array.angle"]], "angle() (ivy.container method)": [[241, "ivy.Container.angle"]], "asin() (in module ivy)": [[242, "ivy.asin"], [651, "ivy.asin"]], "asin() (ivy.array method)": [[242, "ivy.Array.asin"]], "asin() (ivy.container method)": [[242, "ivy.Container.asin"]], "asinh() (in module ivy)": [[243, "ivy.asinh"], [651, "ivy.asinh"]], "asinh() (ivy.array method)": [[243, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[243, "ivy.Container.asinh"]], "atan() (in module ivy)": [[244, "ivy.atan"], [651, "ivy.atan"]], "atan() (ivy.array method)": [[244, "ivy.Array.atan"]], "atan() (ivy.container method)": [[244, "ivy.Container.atan"]], "atan2() (in module ivy)": [[245, "ivy.atan2"], [651, "ivy.atan2"]], "atan2() (ivy.array method)": [[245, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[245, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[246, "ivy.atanh"], [651, "ivy.atanh"]], "atanh() (ivy.array method)": [[246, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[246, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[247, "ivy.bitwise_and"], [651, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[247, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[247, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[248, "ivy.bitwise_invert"], [651, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[248, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[248, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[249, "ivy.bitwise_left_shift"], [651, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[249, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[249, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[250, "ivy.bitwise_or"], [651, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[250, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[250, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[251, "ivy.bitwise_right_shift"], [651, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[251, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[251, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[252, "ivy.bitwise_xor"], [651, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[252, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[252, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[253, "ivy.ceil"], [651, "ivy.ceil"]], "ceil() (ivy.array method)": [[253, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[253, "ivy.Container.ceil"]], "cos() (in module ivy)": [[254, "ivy.cos"], [651, "ivy.cos"]], "cos() (ivy.array method)": [[254, "ivy.Array.cos"]], "cos() (ivy.container method)": [[254, "ivy.Container.cos"]], "cosh() (in module ivy)": [[255, "ivy.cosh"], [651, "ivy.cosh"]], "cosh() (ivy.array method)": [[255, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[255, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[256, "ivy.deg2rad"], [651, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[256, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[256, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[257, "ivy.divide"], [651, "ivy.divide"]], "divide() (ivy.array method)": [[257, "ivy.Array.divide"]], "divide() (ivy.container method)": [[257, "ivy.Container.divide"]], "equal() (in module ivy)": [[258, "ivy.equal"], [651, "ivy.equal"]], "equal() (ivy.array method)": [[258, "ivy.Array.equal"]], "equal() (ivy.container method)": [[258, "ivy.Container.equal"]], "erf() (in module ivy)": [[259, "ivy.erf"], [651, "ivy.erf"]], "erf() (ivy.array method)": [[259, "ivy.Array.erf"]], "erf() (ivy.container method)": [[259, "ivy.Container.erf"]], "exp() (in module ivy)": [[260, "ivy.exp"], [651, "ivy.exp"]], "exp() (ivy.array method)": [[260, "ivy.Array.exp"]], "exp() (ivy.container method)": [[260, "ivy.Container.exp"]], "exp2() (in module ivy)": [[261, "ivy.exp2"], [651, "ivy.exp2"]], "exp2() (ivy.array method)": [[261, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[261, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[262, "ivy.expm1"], [651, "ivy.expm1"]], "expm1() (ivy.array method)": [[262, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[262, "ivy.Container.expm1"]], "floor() (in module ivy)": [[263, "ivy.floor"], [651, "ivy.floor"]], "floor() (ivy.array method)": [[263, "ivy.Array.floor"]], "floor() (ivy.container method)": [[263, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[264, "ivy.floor_divide"], [651, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[264, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[264, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[265, "ivy.fmin"], [651, "ivy.fmin"]], "fmin() (ivy.array method)": [[265, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[265, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[266, "ivy.fmod"], [651, "ivy.fmod"]], "fmod() (ivy.array method)": [[266, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[266, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[267, "ivy.gcd"], [651, "ivy.gcd"]], "gcd() (ivy.array method)": [[267, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[267, "ivy.Container.gcd"]], "greater() (in module ivy)": [[268, "ivy.greater"], [651, "ivy.greater"]], "greater() (ivy.array method)": [[268, "ivy.Array.greater"]], "greater() (ivy.container method)": [[268, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[269, "ivy.greater_equal"], [651, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[269, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[269, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[270, "ivy.imag"], [651, "ivy.imag"]], "imag() (ivy.array method)": [[270, "ivy.Array.imag"]], "imag() (ivy.container method)": [[270, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[271, "ivy.isfinite"], [651, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[271, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[271, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[272, "ivy.isinf"], [651, "ivy.isinf"]], "isinf() (ivy.array method)": [[272, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[272, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[273, "ivy.isnan"], [651, "ivy.isnan"]], "isnan() (ivy.array method)": [[273, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[273, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[274, "ivy.isreal"], [651, "ivy.isreal"]], "isreal() (ivy.array method)": [[274, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[274, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[275, "ivy.lcm"], [651, "ivy.lcm"]], "lcm() (ivy.array method)": [[275, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[275, "ivy.Container.lcm"]], "less() (in module ivy)": [[276, "ivy.less"], [651, "ivy.less"]], "less() (ivy.array method)": [[276, "ivy.Array.less"]], "less() (ivy.container method)": [[276, "ivy.Container.less"]], "less_equal() (in module ivy)": [[277, "ivy.less_equal"], [651, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[277, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[277, "ivy.Container.less_equal"]], "log() (in module ivy)": [[278, "ivy.log"], [651, "ivy.log"]], "log() (ivy.array method)": [[278, "ivy.Array.log"]], "log() (ivy.container method)": [[278, "ivy.Container.log"]], "log10() (in module ivy)": [[279, "ivy.log10"], [651, "ivy.log10"]], "log10() (ivy.array method)": [[279, "ivy.Array.log10"]], "log10() (ivy.container method)": [[279, "ivy.Container.log10"]], "log1p() (in module ivy)": [[280, "ivy.log1p"], [651, "ivy.log1p"]], "log1p() (ivy.array method)": [[280, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[280, "ivy.Container.log1p"]], "log2() (in module ivy)": [[281, "ivy.log2"], [651, "ivy.log2"]], "log2() (ivy.array method)": [[281, "ivy.Array.log2"]], "log2() (ivy.container method)": [[281, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[282, "ivy.logaddexp"], [651, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[282, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[282, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[283, "ivy.logaddexp2"], [651, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[283, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[283, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[284, "ivy.logical_and"], [651, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[284, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[284, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[285, "ivy.logical_not"], [651, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[285, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[285, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[286, "ivy.logical_or"], [651, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[286, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[286, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[287, "ivy.logical_xor"], [651, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[287, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[287, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[288, "ivy.maximum"], [651, "ivy.maximum"]], "maximum() (ivy.array method)": [[288, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[288, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[289, "ivy.minimum"], [651, "ivy.minimum"]], "minimum() (ivy.array method)": [[289, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[289, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[290, "ivy.multiply"], [651, "ivy.multiply"]], "multiply() (ivy.array method)": [[290, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[290, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[291, "ivy.nan_to_num"], [651, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[291, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[291, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[292, "ivy.negative"], [651, "ivy.negative"]], "negative() (ivy.array method)": [[292, "ivy.Array.negative"]], "negative() (ivy.container method)": [[292, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[293, "ivy.not_equal"], [651, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[293, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[293, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[294, "ivy.positive"], [651, "ivy.positive"]], "positive() (ivy.array method)": [[294, "ivy.Array.positive"]], "positive() (ivy.container method)": [[294, "ivy.Container.positive"]], "pow() (in module ivy)": [[295, "ivy.pow"], [651, "ivy.pow"]], "pow() (ivy.array method)": [[295, "ivy.Array.pow"]], "pow() (ivy.container method)": [[295, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[296, "ivy.rad2deg"], [651, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[296, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[296, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[297, "ivy.real"], [651, "ivy.real"]], "real() (ivy.array method)": [[297, "ivy.Array.real"]], "real() (ivy.container method)": [[297, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[298, "ivy.reciprocal"], [651, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[298, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[298, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[299, "ivy.remainder"], [651, "ivy.remainder"]], "remainder() (ivy.array method)": [[299, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[299, "ivy.Container.remainder"]], "round() (in module ivy)": [[300, "ivy.round"], [651, "ivy.round"]], "round() (ivy.array method)": [[300, "ivy.Array.round"]], "round() (ivy.container method)": [[300, "ivy.Container.round"]], "sign() (in module ivy)": [[301, "ivy.sign"], [651, "ivy.sign"]], "sign() (ivy.array method)": [[301, "ivy.Array.sign"]], "sign() (ivy.container method)": [[301, "ivy.Container.sign"]], "sin() (in module ivy)": [[302, "ivy.sin"], [651, "ivy.sin"]], "sin() (ivy.array method)": [[302, "ivy.Array.sin"]], "sin() (ivy.container method)": [[302, "ivy.Container.sin"]], "sinh() (in module ivy)": [[303, "ivy.sinh"], [651, "ivy.sinh"]], "sinh() (ivy.array method)": [[303, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[303, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[304, "ivy.sqrt"], [651, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[304, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[304, "ivy.Container.sqrt"]], "square() (in module ivy)": [[305, "ivy.square"], [651, "ivy.square"]], "square() (ivy.array method)": [[305, "ivy.Array.square"]], "square() (ivy.container method)": [[305, "ivy.Container.square"]], "subtract() (in module ivy)": [[306, "ivy.subtract"], [651, "ivy.subtract"]], "subtract() (ivy.array method)": [[306, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[306, "ivy.Container.subtract"]], "tan() (in module ivy)": [[307, "ivy.tan"], [651, "ivy.tan"]], "tan() (ivy.array method)": [[307, "ivy.Array.tan"]], "tan() (ivy.container method)": [[307, "ivy.Container.tan"]], "tanh() (in module ivy)": [[308, "ivy.tanh"], [651, "ivy.tanh"]], "tanh() (ivy.array method)": [[308, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[308, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[309, "ivy.trapz"], [651, "ivy.trapz"]], "trapz() (ivy.array method)": [[309, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[309, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[310, "ivy.trunc"], [651, "ivy.trunc"]], "trunc() (ivy.array method)": [[310, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[310, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[311, "ivy.trunc_divide"], [651, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[311, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[311, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[312, "ivy.celu"], [384, "ivy.celu"]], "celu() (ivy.array method)": [[312, "ivy.Array.celu"]], "celu() (ivy.container method)": [[312, "ivy.Container.celu"]], "elu() (in module ivy)": [[313, "ivy.elu"], [384, "ivy.elu"]], "elu() (ivy.array method)": [[313, "ivy.Array.elu"]], "elu() (ivy.container method)": [[313, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[314, "ivy.hardshrink"], [384, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[314, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[314, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[315, "ivy.hardsilu"], [384, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[315, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[315, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[316, "ivy.hardtanh"], [384, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[316, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[316, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[317, "ivy.logit"], [384, "ivy.logit"]], "logit() (ivy.array method)": [[317, "ivy.Array.logit"]], "logit() (ivy.container method)": [[317, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[318, "ivy.logsigmoid"], [384, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[318, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[318, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[319, "ivy.prelu"], [384, "ivy.prelu"]], "prelu() (ivy.array method)": [[319, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[319, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[320, "ivy.relu6"], [384, "ivy.relu6"]], "relu6() (ivy.array method)": [[320, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[320, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[321, "ivy.scaled_tanh"], [384, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[321, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[321, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[322, "ivy.selu"], [384, "ivy.selu"]], "selu() (ivy.array method)": [[322, "ivy.Array.selu"]], "selu() (ivy.container method)": [[322, "ivy.Container.selu"]], "silu() (in module ivy)": [[323, "ivy.silu"], [384, "ivy.silu"]], "silu() (ivy.array method)": [[323, "ivy.Array.silu"]], "silu() (ivy.container method)": [[323, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[324, "ivy.softshrink"], [384, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[324, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[324, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[325, "ivy.stanh"], [384, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[326, "ivy.tanhshrink"], [384, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[326, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[326, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[327, "ivy.threshold"], [384, "ivy.threshold"]], "threshold() (ivy.array method)": [[327, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[327, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[328, "ivy.thresholded_relu"], [384, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[328, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[328, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[329, "ivy.blackman_window"], [386, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[329, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[329, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[330, "ivy.eye_like"], [386, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[330, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[330, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[331, "ivy.hamming_window"], [386, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[331, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[332, "ivy.hann_window"], [386, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[332, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[333, "ivy.indices"], [386, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[334, "ivy.kaiser_bessel_derived_window"], [386, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[334, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[335, "ivy.kaiser_window"], [386, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[335, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[336, "ivy.mel_weight_matrix"], [386, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[336, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[336, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[337, "ivy.ndenumerate"], [386, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[338, "ivy.ndindex"], [386, "ivy.ndindex"]], "polyval() (in module ivy)": [[339, "ivy.polyval"], [386, "ivy.polyval"]], "polyval() (ivy.container method)": [[339, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[340, "ivy.random_cp"], [386, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[341, "ivy.random_parafac2"], [386, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[342, "ivy.random_tr"], [386, "ivy.random_tr"]], "random_tt() (in module ivy)": [[343, "ivy.random_tt"], [386, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[344, "ivy.random_tucker"], [386, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[345, "ivy.tril_indices"], [386, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[345, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[346, "ivy.trilu"], [386, "ivy.trilu"]], "trilu() (ivy.array method)": [[346, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[346, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[347, "ivy.unsorted_segment_mean"], [386, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[347, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[347, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[348, "ivy.unsorted_segment_min"], [386, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[348, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[348, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[349, "ivy.unsorted_segment_sum"], [386, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[349, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[349, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[350, "ivy.vorbis_window"], [386, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[350, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[351, "ivy.allclose"], [389, "ivy.allclose"]], "allclose() (ivy.array method)": [[351, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[351, "ivy.Container.allclose"]], "amax() (in module ivy)": [[352, "ivy.amax"], [389, "ivy.amax"]], "amax() (ivy.array method)": [[352, "ivy.Array.amax"]], "amax() (ivy.container method)": [[352, "ivy.Container.amax"]], "amin() (in module ivy)": [[353, "ivy.amin"], [389, "ivy.amin"]], "amin() (ivy.array method)": [[353, "ivy.Array.amin"]], "amin() (ivy.container method)": [[353, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[354, "ivy.binarizer"], [389, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[354, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[354, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[355, "ivy.conj"], [389, "ivy.conj"]], "conj() (ivy.array method)": [[355, "ivy.Array.conj"]], "conj() (ivy.container method)": [[355, "ivy.Container.conj"]], "copysign() (in module ivy)": [[356, "ivy.copysign"], [389, "ivy.copysign"]], "copysign() (ivy.array method)": [[356, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[356, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[357, "ivy.count_nonzero"], [389, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[357, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[357, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[358, "ivy.diff"], [389, "ivy.diff"]], "diff() (ivy.array method)": [[358, "ivy.Array.diff"]], "diff() (ivy.container method)": [[358, "ivy.Container.diff"]], "digamma() (in module ivy)": [[359, "ivy.digamma"], [389, "ivy.digamma"]], "digamma() (ivy.array method)": [[359, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[359, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[360, "ivy.erfc"], [389, "ivy.erfc"]], "erfc() (ivy.array method)": [[360, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[360, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[361, "ivy.erfinv"], [389, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[361, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[361, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[362, "ivy.fix"], [389, "ivy.fix"]], "fix() (ivy.array method)": [[362, "ivy.Array.fix"]], "fix() (ivy.container method)": [[362, "ivy.Container.fix"]], "float_power() (in module ivy)": [[363, "ivy.float_power"], [389, "ivy.float_power"]], "float_power() (ivy.array method)": [[363, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[363, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[364, "ivy.fmax"], [389, "ivy.fmax"]], "fmax() (ivy.array method)": [[364, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[364, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[365, "ivy.frexp"], [389, "ivy.frexp"]], "frexp() (ivy.array method)": [[365, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[365, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[366, "ivy.gradient"], [389, "ivy.gradient"]], "gradient() (ivy.array method)": [[366, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[366, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[367, "ivy.hypot"], [389, "ivy.hypot"]], "hypot() (ivy.array method)": [[367, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[367, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[368, "ivy.isclose"], [389, "ivy.isclose"]], "isclose() (ivy.array method)": [[368, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[368, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[369, "ivy.ldexp"], [389, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[369, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[369, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[370, "ivy.lerp"], [389, "ivy.lerp"]], "lerp() (ivy.array method)": [[370, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[370, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[371, "ivy.lgamma"], [389, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[371, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[371, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[372, "ivy.modf"], [389, "ivy.modf"]], "modf() (ivy.array method)": [[372, "ivy.Array.modf"]], "modf() (ivy.container method)": [[372, "ivy.Container.modf"]], "nansum() (in module ivy)": [[373, "ivy.nansum"], [389, "ivy.nansum"]], "nansum() (ivy.array method)": [[373, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[373, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[374, "ivy.nextafter"], [389, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[374, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[374, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[375, "ivy.signbit"], [389, "ivy.signbit"]], "signbit() (ivy.array method)": [[375, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[375, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[376, "ivy.sinc"], [389, "ivy.sinc"]], "sinc() (ivy.array method)": [[376, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[376, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[377, "ivy.sparsify_tensor"], [389, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[377, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[377, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[378, "ivy.xlogy"], [389, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[378, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[378, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[379, "ivy.zeta"], [389, "ivy.zeta"]], "zeta() (ivy.array method)": [[379, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[379, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[380, "ivy.reduce"], [390, "ivy.reduce"]], "reduce() (ivy.array method)": [[380, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[380, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[381, "ivy.bind_custom_gradient_function"], [391, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[382, "ivy.jvp"], [391, "ivy.jvp"]], "vjp() (in module ivy)": [[383, "ivy.vjp"], [391, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[384, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[385, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[386, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[387, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[388, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[389, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[390, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[391, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[392, "ivy.adaptive_avg_pool1d"], [406, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[392, "ivy.adaptive_avg_pool2d"], [407, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[392, "ivy.adaptive_max_pool2d"], [408, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[392, "ivy.adaptive_max_pool3d"], [409, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[392, "ivy.area_interpolate"], [410, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[392, "ivy.avg_pool1d"], [411, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[392, "ivy.avg_pool2d"], [412, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[392, "ivy.avg_pool3d"], [413, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[392, "ivy.dct"], [414, "ivy.dct"]], "dft() (in module ivy)": [[392, "ivy.dft"], [415, "ivy.dft"]], "dropout1d() (in module ivy)": [[392, "ivy.dropout1d"], [416, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[392, "ivy.dropout2d"], [417, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[392, "ivy.dropout3d"], [418, "ivy.dropout3d"]], "embedding() (in module ivy)": [[392, "ivy.embedding"], [419, "ivy.embedding"]], "fft() (in module ivy)": [[392, "ivy.fft"], [420, "ivy.fft"]], "fft2() (in module ivy)": [[392, "ivy.fft2"], [421, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[392, "ivy.generate_einsum_equation"], [422, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[392, "ivy.get_interpolate_kernel"], [423, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[392, "ivy.idct"], [424, "ivy.idct"]], "ifft() (in module ivy)": [[392, "ivy.ifft"], [425, "ivy.ifft"]], "ifftn() (in module ivy)": [[392, "ivy.ifftn"], [426, "ivy.ifftn"]], "interp() (in module ivy)": [[392, "ivy.interp"], [427, "ivy.interp"]], "interpolate() (in module ivy)": [[392, "ivy.interpolate"], [428, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[392, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[392, "ivy.max_pool1d"], [429, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[392, "ivy.max_pool2d"], [430, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[392, "ivy.max_pool3d"], [431, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[392, "ivy.max_unpool1d"], [432, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[392, "ivy.nearest_interpolate"], [433, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[392, "ivy.pool"], [434, "ivy.pool"]], "reduce_window() (in module ivy)": [[392, "ivy.reduce_window"], [435, "ivy.reduce_window"]], "rfft() (in module ivy)": [[392, "ivy.rfft"], [436, "ivy.rfft"]], "rfftn() (in module ivy)": [[392, "ivy.rfftn"], [437, "ivy.rfftn"]], "rnn() (in module ivy)": [[392, "ivy.rnn"], [438, "ivy.rnn"]], "sliding_window() (in module ivy)": [[392, "ivy.sliding_window"], [439, "ivy.sliding_window"]], "stft() (in module ivy)": [[392, "ivy.stft"], [440, "ivy.stft"]], "adjoint() (in module ivy)": [[393, "ivy.adjoint"], [441, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[393, "ivy.batched_outer"], [442, "ivy.batched_outer"]], "cond() (in module ivy)": [[393, "ivy.cond"], [443, "ivy.cond"]], "diagflat() (in module ivy)": [[393, "ivy.diagflat"], [444, "ivy.diagflat"]], "dot() (in module ivy)": [[393, "ivy.dot"], [445, "ivy.dot"]], "eig() (in module ivy)": [[393, "ivy.eig"], [446, "ivy.eig"], [656, "ivy.eig"], [691, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[393, "ivy.eigh_tridiagonal"], [447, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[393, "ivy.eigvals"], [448, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[393, "ivy.general_inner_product"], [449, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[393, "ivy.higher_order_moment"], [450, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[393, "ivy.initialize_tucker"], [451, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[393, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[393, "ivy.khatri_rao"], [452, "ivy.khatri_rao"]], "kron() (in module ivy)": [[393, "ivy.kron"], [453, "ivy.kron"]], "kronecker() (in module ivy)": [[393, "ivy.kronecker"], [454, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[393, "ivy.lu_factor"], [455, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[393, "ivy.lu_solve"], [456, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[393, "ivy.make_svd_non_negative"], [457, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[393, "ivy.matrix_exp"], [458, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[393, "ivy.mode_dot"], [459, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[393, "ivy.multi_dot"], [460, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[393, "ivy.multi_mode_dot"], [461, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[393, "ivy.partial_tucker"], [462, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[393, "ivy.solve_triangular"], [463, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[393, "ivy.svd_flip"], [464, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[393, "ivy.tensor_train"], [465, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[393, "ivy.truncated_svd"], [466, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[393, "ivy.tt_matrix_to_tensor"], [467, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[393, "ivy.tucker"], [468, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[394, "ivy.hinge_embedding_loss"], [469, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[394, "ivy.huber_loss"], [470, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[394, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[394, "ivy.kl_div"], [471, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[394, "ivy.l1_loss"], [472, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[394, "ivy.log_poisson_loss"], [473, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[394, "ivy.poisson_nll_loss"], [474, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[394, "ivy.smooth_l1_loss"], [475, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[394, "ivy.soft_margin_loss"], [476, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[395, "ivy.as_strided"], [477, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[395, "ivy.associative_scan"], [478, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[395, "ivy.atleast_1d"], [479, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[395, "ivy.atleast_2d"], [480, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[395, "ivy.atleast_3d"], [481, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[395, "ivy.broadcast_shapes"], [482, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[395, "ivy.check_scalar"], [483, "ivy.check_scalar"]], "choose() (in module ivy)": [[395, "ivy.choose"], [484, "ivy.choose"]], "column_stack() (in module ivy)": [[395, "ivy.column_stack"], [485, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[395, "ivy.concat_from_sequence"], [486, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[395, "ivy.dsplit"], [487, "ivy.dsplit"]], "dstack() (in module ivy)": [[395, "ivy.dstack"], [488, "ivy.dstack"]], "expand() (in module ivy)": [[395, "ivy.expand"], [489, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[395, "ivy.fill_diagonal"], [490, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[395, "ivy.flatten"], [491, "ivy.flatten"]], "fliplr() (in module ivy)": [[395, "ivy.fliplr"], [492, "ivy.fliplr"]], "flipud() (in module ivy)": [[395, "ivy.flipud"], [493, "ivy.flipud"]], "fold() (in module ivy)": [[395, "ivy.fold"], [494, "ivy.fold"]], "heaviside() (in module ivy)": [[395, "ivy.heaviside"], [495, "ivy.heaviside"]], "hsplit() (in module ivy)": [[395, "ivy.hsplit"], [496, "ivy.hsplit"]], "hstack() (in module ivy)": [[395, "ivy.hstack"], [497, "ivy.hstack"]], "i0() (in module ivy)": [[395, "ivy.i0"], [498, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[395, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[395, "ivy.matricize"], [499, "ivy.matricize"]], "moveaxis() (in module ivy)": [[395, "ivy.moveaxis"], [500, "ivy.moveaxis"]], "pad() (in module ivy)": [[395, "ivy.pad"], [501, "ivy.pad"]], "pad_sequence() (in module ivy)": [[395, "ivy.pad_sequence"], [502, "ivy.pad_sequence"]], "partial_fold() (in module ivy)": [[395, "ivy.partial_fold"], [503, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[395, "ivy.partial_tensor_to_vec"], [504, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[395, "ivy.partial_unfold"], [505, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[395, "ivy.partial_vec_to_tensor"], [506, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[395, "ivy.put_along_axis"], [507, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[395, "ivy.rot90"], [508, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[395, "ivy.soft_thresholding"], [509, "ivy.soft_thresholding"]], "take() (in module ivy)": [[395, "ivy.take"], [510, "ivy.take"]], "take_along_axis() (in module ivy)": [[395, "ivy.take_along_axis"], [511, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[395, "ivy.top_k"], [512, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[395, "ivy.trim_zeros"], [513, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[395, "ivy.unflatten"], [514, "ivy.unflatten"]], "unfold() (in module ivy)": [[395, "ivy.unfold"], [515, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[395, "ivy.unique_consecutive"], [516, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[395, "ivy.vsplit"], [517, "ivy.vsplit"]], "vstack() (in module ivy)": [[395, "ivy.vstack"], [518, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[396, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[397, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[398, "ivy.batch_norm"], [519, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[398, "ivy.group_norm"], [520, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[398, "ivy.instance_norm"], [521, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[398, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[398, "ivy.l1_normalize"], [522, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[398, "ivy.l2_normalize"], [523, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[398, "ivy.local_response_norm"], [524, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[398, "ivy.lp_normalize"], [525, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[399, "ivy.bernoulli"], [526, "ivy.bernoulli"]], "beta() (in module ivy)": [[399, "ivy.beta"], [527, "ivy.beta"]], "dirichlet() (in module ivy)": [[399, "ivy.dirichlet"], [528, "ivy.dirichlet"]], "gamma() (in module ivy)": [[399, "ivy.gamma"], [529, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[399, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[399, "ivy.poisson"], [530, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[400, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[400, "ivy.unravel_index"], [531, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[401, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[402, "ivy.invert_permutation"], [532, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[402, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[402, "ivy.lexsort"], [533, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[403, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[403, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[403, "ivy.is_ivy_sparse_array"], [534, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[403, "ivy.is_native_sparse_array"], [535, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[403, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[403, "ivy.native_sparse_array"], [536, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[403, "ivy.native_sparse_array_to_indices_values_and_shape"], [537, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[404, "ivy.bincount"], [538, "ivy.bincount"]], "corrcoef() (in module ivy)": [[404, "ivy.corrcoef"], [539, "ivy.corrcoef"]], "cov() (in module ivy)": [[404, "ivy.cov"], [540, "ivy.cov"]], "cummax() (in module ivy)": [[404, "ivy.cummax"], [541, "ivy.cummax"]], "cummin() (in module ivy)": [[404, "ivy.cummin"], [542, "ivy.cummin"]], "histogram() (in module ivy)": [[404, "ivy.histogram"], [543, "ivy.histogram"]], "igamma() (in module ivy)": [[404, "ivy.igamma"], [544, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[404, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[404, "ivy.median"], [545, "ivy.median"]], "nanmean() (in module ivy)": [[404, "ivy.nanmean"], [546, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[404, "ivy.nanmedian"], [547, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[404, "ivy.nanmin"], [548, "ivy.nanmin"]], "nanprod() (in module ivy)": [[404, "ivy.nanprod"], [549, "ivy.nanprod"]], "quantile() (in module ivy)": [[404, "ivy.quantile"], [550, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[405, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[405, "ivy.optional_get_element"], [551, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[406, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[406, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[407, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[407, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[408, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[408, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[409, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[409, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[411, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[411, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[412, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[412, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[413, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[413, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[414, "ivy.Array.dct"]], "dct() (ivy.container method)": [[414, "ivy.Container.dct"]], "dft() (ivy.array method)": [[415, "ivy.Array.dft"]], "dft() (ivy.container method)": [[415, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[416, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[416, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[417, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[417, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[418, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[418, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[419, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[419, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[420, "ivy.Array.fft"]], "fft() (ivy.container method)": [[420, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[421, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[424, "ivy.Array.idct"]], "idct() (ivy.container method)": [[424, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[425, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[425, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[426, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[426, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[428, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[428, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[429, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[429, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[430, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[430, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[431, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[431, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[432, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[432, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[435, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[435, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[436, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[436, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[437, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[437, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[439, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[439, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[440, "ivy.Array.stft"]], "stft() (ivy.container method)": [[440, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[441, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[441, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[442, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[442, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[443, "ivy.Array.cond"]], "cond() (ivy.container method)": [[443, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[444, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[444, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[445, "ivy.Array.dot"]], "dot() (ivy.container method)": [[445, "ivy.Container.dot"]], "eig() (ivy.array method)": [[446, "ivy.Array.eig"], [691, "ivy.Array.eig"]], "eig() (ivy.container method)": [[446, "ivy.Container.eig"], [691, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[447, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[447, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[448, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[448, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[449, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[449, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[450, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[450, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[451, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[451, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[453, "ivy.Array.kron"]], "kron() (ivy.container method)": [[453, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[457, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[457, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[458, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[458, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[459, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[459, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[460, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[460, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[461, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[461, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[462, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[462, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[464, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[464, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[465, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[465, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[466, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[466, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[467, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[467, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[468, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[468, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[469, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[469, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[470, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[470, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[471, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[471, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[472, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[472, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[473, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[473, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[474, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[474, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[475, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[475, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[476, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[476, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[477, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[477, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[478, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[478, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[479, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[479, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[480, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[480, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[481, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[481, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[482, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[485, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[485, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[486, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[486, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[487, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[487, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[488, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[488, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[489, "ivy.Array.expand"]], "expand() (ivy.container method)": [[489, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[490, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[490, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[491, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[491, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[492, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[492, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[493, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[493, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[494, "ivy.Array.fold"]], "fold() (ivy.container method)": [[494, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[495, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[495, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[496, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[496, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[497, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[497, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[498, "ivy.Array.i0"]], "i0() (ivy.container method)": [[498, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[499, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[499, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[500, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[500, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[501, "ivy.Array.pad"]], "pad() (ivy.container method)": [[501, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[503, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[503, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[504, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[504, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[505, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[505, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[506, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[506, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[507, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[507, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[508, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[508, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[509, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[509, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[510, "ivy.Array.take"]], "take() (ivy.container method)": [[510, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[511, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[511, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[512, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[512, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[513, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[513, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[514, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[514, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[515, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[515, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[516, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[516, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[517, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[517, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[518, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[518, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[519, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[519, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[520, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[520, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[521, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[521, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[522, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[522, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[523, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[523, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[525, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[525, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[526, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[526, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[527, "ivy.Array.beta"]], "beta() (ivy.container method)": [[527, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[528, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[528, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[529, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[529, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[530, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[530, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[531, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[531, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[532, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[533, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[533, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[538, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[538, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[539, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[539, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[540, "ivy.Array.cov"]], "cov() (ivy.container method)": [[540, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[541, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[541, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[542, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[542, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[543, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[543, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[544, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[544, "ivy.Container.igamma"]], "median() (ivy.array method)": [[545, "ivy.Array.median"]], "median() (ivy.container method)": [[545, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[546, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[546, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[547, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[547, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[548, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[548, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[549, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[549, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[550, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[550, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[551, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[551, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[552, "ivy.all_equal"], [653, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[552, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[552, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[553, "ivy.arg_info"], [653, "ivy.arg_info"]], "arg_names() (in module ivy)": [[554, "ivy.arg_names"], [653, "ivy.arg_names"]], "array_equal() (in module ivy)": [[555, "ivy.array_equal"], [653, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[555, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[555, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[556, "ivy.assert_supports_inplace"], [653, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[556, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[556, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[557, "ivy.cache_fn"], [653, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[558, "ivy.clip_matrix_norm"], [653, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[558, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[558, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[559, "ivy.clip_vector_norm"], [653, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[559, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[559, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[560, "ivy.container_types"], [653, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[561, "ivy.current_backend_str"], [653, "ivy.current_backend_str"]], "default() (in module ivy)": [[562, "ivy.default"], [653, "ivy.default"]], "default() (ivy.array method)": [[562, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[563, "ivy.einops_rearrange"], [653, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[563, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[563, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[564, "ivy.einops_reduce"], [653, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[564, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[564, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[565, "ivy.einops_repeat"], [653, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[565, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[565, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[566, "ivy.exists"], [653, "ivy.exists"]], "exists() (ivy.array method)": [[566, "ivy.Array.exists"]], "exists() (ivy.container method)": [[566, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[567, "ivy.fourier_encode"], [653, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[567, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[567, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[568, "ivy.function_supported_devices_and_dtypes"], [653, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[569, "ivy.function_unsupported_devices_and_dtypes"], [653, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[570, "ivy.gather"], [653, "ivy.gather"]], "gather() (ivy.array method)": [[570, "ivy.Array.gather"]], "gather() (ivy.container method)": [[570, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[571, "ivy.gather_nd"], [653, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[571, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[571, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[572, "ivy.get_all_arrays_in_memory"], [653, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[573, "ivy.get_item"], [653, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[574, "ivy.get_num_dims"], [653, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[574, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[574, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[575, "ivy.get_referrers_recursive"], [653, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[576, "ivy.has_nans"], [653, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[576, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[576, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[577, "ivy.inplace_arrays_supported"], [653, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[578, "ivy.inplace_decrement"], [653, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[578, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[578, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[579, "ivy.inplace_increment"], [653, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[579, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[579, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[580, "ivy.inplace_update"], [653, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[580, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[580, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[581, "ivy.inplace_variables_supported"], [653, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[582, "ivy.is_array"], [653, "ivy.is_array"]], "is_array() (ivy.array method)": [[582, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[582, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[583, "ivy.is_ivy_array"], [653, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[583, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[583, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[584, "ivy.is_ivy_container"], [653, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[584, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[585, "ivy.is_ivy_nested_array"], [653, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[586, "ivy.is_native_array"], [653, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[586, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[586, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[587, "ivy.isin"], [653, "ivy.isin"]], "isin() (ivy.array method)": [[587, "ivy.Array.isin"]], "isin() (ivy.container method)": [[587, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[588, "ivy.isscalar"], [653, "ivy.isscalar"]], "itemsize() (in module ivy)": [[589, "ivy.itemsize"], [653, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[589, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[589, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[590, "ivy.match_kwargs"], [653, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[591, "ivy.multiprocessing"], [653, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[592, "ivy.num_arrays_in_memory"], [653, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[593, "ivy.print_all_arrays_in_memory"], [653, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[594, "ivy.scatter_flat"], [653, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[594, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[594, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[595, "ivy.scatter_nd"], [653, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[595, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[595, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[596, "ivy.set_array_mode"], [653, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[597, "ivy.set_exception_trace_mode"], [653, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[598, "ivy.set_inplace_mode"], [653, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[599, "ivy.set_item"], [653, "ivy.set_item"]], "set_min_base() (in module ivy)": [[600, "ivy.set_min_base"], [653, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[601, "ivy.set_min_denominator"], [653, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[602, "ivy.set_nestable_mode"], [653, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[603, "ivy.set_precise_mode"], [653, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[604, "ivy.set_queue_timeout"], [653, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[605, "ivy.set_shape_array_mode"], [653, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[606, "ivy.set_show_func_wrapper_trace_mode"], [653, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[607, "ivy.set_tmp_dir"], [653, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[608, "ivy.shape"], [653, "ivy.shape"]], "shape() (ivy.array method)": [[608, "ivy.Array.shape"]], "size() (in module ivy)": [[609, "ivy.size"], [653, "ivy.size"]], "size() (ivy.array method)": [[609, "ivy.Array.size"]], "size() (ivy.container method)": [[609, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[610, "ivy.stable_divide"], [653, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[610, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[610, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[611, "ivy.stable_pow"], [653, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[611, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[611, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[612, "ivy.strides"], [653, "ivy.strides"]], "strides() (ivy.array method)": [[612, "ivy.Array.strides"]], "strides() (ivy.container method)": [[612, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[613, "ivy.supports_inplace_updates"], [653, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[613, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[613, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[614, "ivy.to_ivy_shape"], [653, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[615, "ivy.to_list"], [653, "ivy.to_list"]], "to_list() (ivy.array method)": [[615, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[615, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[616, "ivy.to_native_shape"], [653, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[617, "ivy.to_numpy"], [653, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[617, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[617, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[618, "ivy.to_scalar"], [653, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[618, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[618, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[619, "ivy.try_else_none"], [653, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[620, "ivy.unset_array_mode"], [653, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[621, "ivy.unset_exception_trace_mode"], [653, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[622, "ivy.unset_inplace_mode"], [653, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[623, "ivy.unset_min_base"], [653, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[624, "ivy.unset_min_denominator"], [653, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[625, "ivy.unset_nestable_mode"], [653, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[626, "ivy.unset_precise_mode"], [653, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[627, "ivy.unset_queue_timeout"], [653, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[628, "ivy.unset_shape_array_mode"], [653, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[629, "ivy.unset_show_func_wrapper_trace_mode"], [653, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[630, "ivy.unset_tmp_dir"], [653, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[631, "ivy.value_is_nan"], [653, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[631, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[631, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[632, "ivy.vmap"], [653, "ivy.vmap"]], "adam_step() (in module ivy)": [[633, "ivy.adam_step"], [654, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[633, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[633, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[634, "ivy.adam_update"], [654, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[634, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[634, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[635, "ivy.execute_with_gradients"], [654, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[636, "ivy.grad"], [654, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[637, "ivy.gradient_descent_update"], [654, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[637, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[637, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[638, "ivy.jac"], [654, "ivy.jac"]], "lamb_update() (in module ivy)": [[639, "ivy.lamb_update"], [654, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[639, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[639, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[640, "ivy.lars_update"], [654, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[640, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[640, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[641, "ivy.optimizer_update"], [654, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[641, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[641, "ivy.Container.optimizer_update"]], "requires_gradient() (in module ivy)": [[642, "ivy.requires_gradient"], [654, "ivy.requires_gradient"]], "stop_gradient() (in module ivy)": [[643, "ivy.stop_gradient"], [654, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[643, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[643, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[644, "ivy.value_and_grad"], [654, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[645, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[646, "ivy.e"]], "inf (in module ivy)": [[646, "ivy.inf"]], "ivy.functional.ivy.constants": [[646, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[646, "ivy.nan"]], "newaxis (in module ivy)": [[646, "ivy.newaxis"]], "pi (in module ivy)": [[646, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[647, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[648, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[648, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[649, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[649, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[649, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[649, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[649, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[649, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[650, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[650, "ivy.Profiler"]], "ivy.functional.ivy.device": [[650, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[651, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[652, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[653, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[653, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[653, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[654, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[655, "ivy.conv"], [668, "ivy.conv"]], "conv1d() (in module ivy)": [[655, "ivy.conv1d"], [669, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[655, "ivy.conv1d_transpose"], [670, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[655, "ivy.conv2d"], [671, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[655, "ivy.conv2d_transpose"], [672, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[655, "ivy.conv3d"], [673, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[655, "ivy.conv3d_transpose"], [674, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[655, "ivy.conv_general_dilated"], [675, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[655, "ivy.conv_general_transpose"], [676, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[655, "ivy.depthwise_conv2d"], [677, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[655, "ivy.dropout"], [678, "ivy.dropout"]], "ivy.functional.ivy.layers": [[655, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[655, "ivy.linear"], [679, "ivy.linear"]], "lstm() (in module ivy)": [[655, "ivy.lstm"], [680, "ivy.lstm"]], "lstm_update() (in module ivy)": [[655, "ivy.lstm_update"], [681, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[655, "ivy.multi_head_attention"], [682, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[655, "ivy.nms"], [683, "ivy.nms"]], "roi_align() (in module ivy)": [[655, "ivy.roi_align"], [684, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[655, "ivy.scaled_dot_product_attention"], [685, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[656, "ivy.cholesky"], [686, "ivy.cholesky"]], "cross() (in module ivy)": [[656, "ivy.cross"], [687, "ivy.cross"]], "det() (in module ivy)": [[656, "ivy.det"], [688, "ivy.det"]], "diag() (in module ivy)": [[656, "ivy.diag"], [689, "ivy.diag"]], "diagonal() (in module ivy)": [[656, "ivy.diagonal"], [690, "ivy.diagonal"]], "eigh() (in module ivy)": [[656, "ivy.eigh"], [692, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[656, "ivy.eigvalsh"], [693, "ivy.eigvalsh"]], "inner() (in module ivy)": [[656, "ivy.inner"], [694, "ivy.inner"]], "inv() (in module ivy)": [[656, "ivy.inv"], [695, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[656, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[656, "ivy.matmul"], [696, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[656, "ivy.matrix_norm"], [697, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[656, "ivy.matrix_power"], [698, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[656, "ivy.matrix_rank"], [699, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[656, "ivy.matrix_transpose"], [700, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[656, "ivy.outer"], [701, "ivy.outer"]], "pinv() (in module ivy)": [[656, "ivy.pinv"], [702, "ivy.pinv"]], "qr() (in module ivy)": [[656, "ivy.qr"], [703, "ivy.qr"]], "slogdet() (in module ivy)": [[656, "ivy.slogdet"], [704, "ivy.slogdet"]], "solve() (in module ivy)": [[656, "ivy.solve"], [705, "ivy.solve"]], "svd() (in module ivy)": [[656, "ivy.svd"], [706, "ivy.svd"]], "svdvals() (in module ivy)": [[656, "ivy.svdvals"], [707, "ivy.svdvals"]], "tensordot() (in module ivy)": [[656, "ivy.tensordot"], [708, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[656, "ivy.tensorsolve"], [709, "ivy.tensorsolve"]], "trace() (in module ivy)": [[656, "ivy.trace"], [710, "ivy.trace"]], "vander() (in module ivy)": [[656, "ivy.vander"], [711, "ivy.vander"]], "vecdot() (in module ivy)": [[656, "ivy.vecdot"], [712, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[656, "ivy.vector_norm"], [713, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[656, "ivy.vector_to_skew_symmetric_matrix"], [714, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[657, "ivy.binary_cross_entropy"], [715, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[657, "ivy.cross_entropy"], [716, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[657, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[657, "ivy.sparse_cross_entropy"], [717, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[657, "ivy.ssim_loss"], [718, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[657, "ivy.wasserstein_loss_discriminator"], [719, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[657, "ivy.wasserstein_loss_generator"], [720, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[658, "ivy.clip"], [721, "ivy.clip"]], "concat() (in module ivy)": [[658, "ivy.concat"], [722, "ivy.concat"]], "constant_pad() (in module ivy)": [[658, "ivy.constant_pad"], [723, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[658, "ivy.expand_dims"], [724, "ivy.expand_dims"]], "flip() (in module ivy)": [[658, "ivy.flip"], [725, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[658, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[658, "ivy.permute_dims"], [726, "ivy.permute_dims"]], "repeat() (in module ivy)": [[658, "ivy.repeat"], [727, "ivy.repeat"]], "reshape() (in module ivy)": [[658, "ivy.reshape"], [728, "ivy.reshape"]], "roll() (in module ivy)": [[658, "ivy.roll"], [729, "ivy.roll"]], "split() (in module ivy)": [[658, "ivy.split"], [730, "ivy.split"]], "squeeze() (in module ivy)": [[658, "ivy.squeeze"], [731, "ivy.squeeze"]], "stack() (in module ivy)": [[658, "ivy.stack"], [732, "ivy.stack"]], "swapaxes() (in module ivy)": [[658, "ivy.swapaxes"], [733, "ivy.swapaxes"]], "tile() (in module ivy)": [[658, "ivy.tile"], [734, "ivy.tile"]], "unstack() (in module ivy)": [[658, "ivy.unstack"], [735, "ivy.unstack"]], "zero_pad() (in module ivy)": [[658, "ivy.zero_pad"], [736, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[659, "ivy.fomaml_step"], [737, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[659, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[659, "ivy.maml_step"], [738, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[659, "ivy.reptile_step"], [739, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[660, "ivy.all_nested_indices"], [740, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[660, "ivy.copy_nest"], [741, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[660, "ivy.duplicate_array_index_chains"], [742, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[660, "ivy.index_nest"], [743, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[660, "ivy.insert_into_nest_at_index"], [744, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[660, "ivy.insert_into_nest_at_indices"], [745, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[660, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[660, "ivy.map"], [746, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[660, "ivy.map_nest_at_index"], [747, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[660, "ivy.map_nest_at_indices"], [748, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[660, "ivy.multi_index_nest"], [749, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[660, "ivy.nested_any"], [750, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[660, "ivy.nested_argwhere"], [751, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[660, "ivy.nested_map"], [752, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[660, "ivy.nested_multi_map"], [753, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[660, "ivy.prune_empty"], [754, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[660, "ivy.prune_nest_at_index"], [755, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[660, "ivy.prune_nest_at_indices"], [756, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[660, "ivy.set_nest_at_index"], [757, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[660, "ivy.set_nest_at_indices"], [758, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[661, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[661, "ivy.layer_norm"], [759, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[662, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[662, "ivy.multinomial"], [760, "ivy.multinomial"]], "randint() (in module ivy)": [[662, "ivy.randint"], [761, "ivy.randint"]], "random_normal() (in module ivy)": [[662, "ivy.random_normal"], [762, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[662, "ivy.random_uniform"], [763, "ivy.random_uniform"]], "seed() (in module ivy)": [[662, "ivy.seed"], [764, "ivy.seed"]], "shuffle() (in module ivy)": [[662, "ivy.shuffle"], [765, "ivy.shuffle"]], "argmax() (in module ivy)": [[663, "ivy.argmax"], [766, "ivy.argmax"]], "argmin() (in module ivy)": [[663, "ivy.argmin"], [767, "ivy.argmin"]], "argwhere() (in module ivy)": [[663, "ivy.argwhere"], [768, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[663, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[663, "ivy.nonzero"], [769, "ivy.nonzero"]], "where() (in module ivy)": [[663, "ivy.where"], [770, "ivy.where"]], "ivy.functional.ivy.set": [[664, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[664, "ivy.unique_all"], [771, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[664, "ivy.unique_counts"], [772, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[664, "ivy.unique_inverse"], [773, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[664, "ivy.unique_values"], [774, "ivy.unique_values"]], "argsort() (in module ivy)": [[665, "ivy.argsort"], [775, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[665, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[665, "ivy.msort"], [776, "ivy.msort"]], "searchsorted() (in module ivy)": [[665, "ivy.searchsorted"], [777, "ivy.searchsorted"]], "sort() (in module ivy)": [[665, "ivy.sort"], [778, "ivy.sort"]], "cumprod() (in module ivy)": [[666, "ivy.cumprod"], [779, "ivy.cumprod"]], "cumsum() (in module ivy)": [[666, "ivy.cumsum"], [780, "ivy.cumsum"]], "einsum() (in module ivy)": [[666, "ivy.einsum"], [781, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[666, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[666, "ivy.max"], [782, "ivy.max"]], "mean() (in module ivy)": [[666, "ivy.mean"], [783, "ivy.mean"]], "min() (in module ivy)": [[666, "ivy.min"], [784, "ivy.min"]], "prod() (in module ivy)": [[666, "ivy.prod"], [785, "ivy.prod"]], "std() (in module ivy)": [[666, "ivy.std"], [786, "ivy.std"]], "sum() (in module ivy)": [[666, "ivy.sum"], [787, "ivy.sum"]], "var() (in module ivy)": [[666, "ivy.var"], [788, "ivy.var"]], "all() (in module ivy)": [[667, "ivy.all"], [789, "ivy.all"]], "any() (in module ivy)": [[667, "ivy.any"], [790, "ivy.any"]], "ivy.functional.ivy.utility": [[667, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[667, "ivy.load"], [791, "ivy.load"]], "save() (in module ivy)": [[667, "ivy.save"], [792, "ivy.save"]], "conv1d() (ivy.array method)": [[669, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[669, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[670, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[670, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[671, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[671, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[672, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[672, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[673, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[673, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[674, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[674, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[677, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[677, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[678, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[678, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[679, "ivy.Array.linear"]], "linear() (ivy.container method)": [[679, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[681, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[681, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[682, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[682, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[685, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[685, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[686, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[686, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[687, "ivy.Array.cross"]], "cross() (ivy.container method)": [[687, "ivy.Container.cross"]], "det() (ivy.array method)": [[688, "ivy.Array.det"]], "det() (ivy.container method)": [[688, "ivy.Container.det"]], "diag() (ivy.array method)": [[689, "ivy.Array.diag"]], "diag() (ivy.container method)": [[689, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[690, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[690, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[692, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[692, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[693, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[693, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[694, "ivy.Array.inner"]], "inner() (ivy.container method)": [[694, "ivy.Container.inner"]], "inv() (ivy.array method)": [[695, "ivy.Array.inv"]], "inv() (ivy.container method)": [[695, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[696, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[696, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[697, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[697, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[698, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[698, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[699, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[699, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[700, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[700, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[701, "ivy.Array.outer"]], "outer() (ivy.container method)": [[701, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[702, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[702, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[703, "ivy.Array.qr"]], "qr() (ivy.container method)": [[703, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[704, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[704, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[705, "ivy.Array.solve"]], "solve() (ivy.container method)": [[705, "ivy.Container.solve"]], "svd() (ivy.array method)": [[706, "ivy.Array.svd"]], "svd() (ivy.container method)": [[706, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[707, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[707, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[708, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[708, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[709, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[709, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[710, "ivy.Array.trace"]], "trace() (ivy.container method)": [[710, "ivy.Container.trace"]], "vander() (ivy.array method)": [[711, "ivy.Array.vander"]], "vander() (ivy.container method)": [[711, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[712, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[712, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[713, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[713, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[714, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[714, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[715, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[715, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[716, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[716, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[717, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[717, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[721, "ivy.Array.clip"]], "clip() (ivy.container method)": [[721, "ivy.Container.clip"]], "concat() (ivy.array method)": [[722, "ivy.Array.concat"]], "concat() (ivy.container method)": [[722, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[723, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[723, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[724, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[724, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[725, "ivy.Array.flip"]], "flip() (ivy.container method)": [[725, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[726, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[726, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[727, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[727, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[728, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[728, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[729, "ivy.Array.roll"]], "roll() (ivy.container method)": [[729, "ivy.Container.roll"]], "split() (ivy.array method)": [[730, "ivy.Array.split"]], "split() (ivy.container method)": [[730, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[731, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[731, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[732, "ivy.Array.stack"]], "stack() (ivy.container method)": [[732, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[733, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[733, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[734, "ivy.Array.tile"]], "tile() (ivy.container method)": [[734, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[735, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[735, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[736, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[736, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[759, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[759, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[760, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[760, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[761, "ivy.Array.randint"]], "randint() (ivy.container method)": [[761, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[762, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[762, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[763, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[763, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[765, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[765, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[766, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[766, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[767, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[767, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[768, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[768, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[769, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[769, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[770, "ivy.Array.where"]], "where() (ivy.container method)": [[770, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[771, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[771, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[772, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[772, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[773, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[773, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[774, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[774, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[775, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[775, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[776, "ivy.Array.msort"]], "msort() (ivy.container method)": [[776, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[777, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[777, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[778, "ivy.Array.sort"]], "sort() (ivy.container method)": [[778, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[779, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[779, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[780, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[780, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[781, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[781, "ivy.Container.einsum"]], "max() (ivy.array method)": [[782, "ivy.Array.max"]], "max() (ivy.container method)": [[782, "ivy.Container.max"]], "mean() (ivy.array method)": [[783, "ivy.Array.mean"]], "mean() (ivy.container method)": [[783, "ivy.Container.mean"]], "min() (ivy.array method)": [[784, "ivy.Array.min"]], "min() (ivy.container method)": [[784, "ivy.Container.min"]], "prod() (ivy.array method)": [[785, "ivy.Array.prod"]], "prod() (ivy.container method)": [[785, "ivy.Container.prod"]], "std() (ivy.array method)": [[786, "ivy.Array.std"]], "std() (ivy.container method)": [[786, "ivy.Container.std"]], "sum() (ivy.array method)": [[787, "ivy.Array.sum"]], "sum() (ivy.container method)": [[787, "ivy.Container.sum"]], "var() (ivy.array method)": [[788, "ivy.Array.var"]], "var() (ivy.container method)": [[788, "ivy.Container.var"]], "all() (ivy.array method)": [[789, "ivy.Array.all"]], "all() (ivy.container method)": [[789, "ivy.Container.all"]], "any() (ivy.array method)": [[790, "ivy.Array.any"]], "any() (ivy.container method)": [[790, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[793, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[793, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[794, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[795, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[795, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[796, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[796, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[796, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[796, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[796, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[800, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[800, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[801, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[801, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[801, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[801, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[802, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[802, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[802, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[803, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[803, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[804, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[804, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[805, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[805, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[806, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[806, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[810, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[810, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[810, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[810, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[810, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[810, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[810, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[810, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[810, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[810, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[810, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[810, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[810, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[810, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[810, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[810, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[810, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[810, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[810, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[810, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[811, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[811, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[811, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[811, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[811, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[811, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[811, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[811, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[811, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[812, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[812, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[813, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[813, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[813, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[813, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[813, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[813, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[813, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[813, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[813, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[813, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[813, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[813, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[813, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[813, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[813, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[813, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[814, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[814, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[814, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[814, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[814, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[814, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[814, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[814, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[814, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[814, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[814, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[814, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[814, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[814, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[814, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[814, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[814, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[814, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[814, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[814, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[814, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[814, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[814, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[814, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[814, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[814, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[814, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[814, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[814, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[815, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[815, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[815, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[815, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[815, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[815, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[815, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[816, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[816, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[816, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[816, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[816, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[816, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[817, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[817, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[817, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[817, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[817, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[818, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[818, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[818, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[818, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[818, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[818, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[818, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[818, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[818, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[818, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[818, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[818, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[818, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[818, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[818, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[818, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[818, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[818, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[819, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[819, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[819, "module-ivy.stateful.sequential"]], "ivy.stateful.utilities": [[820, "module-ivy.stateful.utilities"]], "sync_models() (in module ivy.stateful.utilities)": [[820, "ivy.stateful.utilities.sync_models"]], "sync_models_torch_and_jax() (in module ivy.stateful.utilities)": [[820, "ivy.stateful.utilities.sync_models_torch_and_jax"]], "sync_models_torch_and_tf() (in module ivy.stateful.utilities)": [[820, "ivy.stateful.utilities.sync_models_torch_and_tf"]], "transpose_weights_pt_to_tf_jax() (in module ivy.stateful.utilities)": [[820, "ivy.stateful.utilities.transpose_weights_pt_to_tf_jax"]], "transpose_weights_tf_jax_to_pt() (in module ivy.stateful.utilities)": [[820, "ivy.stateful.utilities.transpose_weights_tf_jax_to_pt"]], "check_all() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[821, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[821, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[822, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[823, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[823, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[823, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[823, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[823, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[823, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[823, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[823, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[823, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[823, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[823, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[824, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[824, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[824, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[825, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[825, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[826, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[826, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[827, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[827, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[827, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[827, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[827, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.apply_transpose"]], "dummy_inplace_update() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.dummy_inplace_update"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "handle_transpose_in_input_and_output_for_functions() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output_for_functions"]], "handle_transpose_in_pad() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.handle_transpose_in_pad"]], "ivy.utils.decorator_utils": [[827, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[827, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[827, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[828, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[828, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[829, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[829, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[830, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[830, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[831, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[831, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[831, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[831, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[831, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[831, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[831, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[831, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[831, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[831, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[831, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[831, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[831, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[831, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[831, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[831, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[831, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[831, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[831, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[831, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[831, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[831, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[831, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[831, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[831, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[831, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[832, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[832, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[832, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[833, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[833, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[833, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[834, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[834, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[834, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[834, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[834, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[834, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[834, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[834, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[834, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[834, "ivy.utils.profiler.Profiler.viz"]], "automatic code conversions": [[874, "term-Automatic-Code-Conversions"]], "backend handler": [[874, "term-Backend-Handler"]], "compositional functions": [[874, "term-Compositional-Functions"]], "convenience functions": [[874, "term-Convenience-Functions"]], "framework": [[874, "term-Framework"]], "framework handler": [[874, "term-Framework-Handler"]], "graph compiler": [[874, "term-Graph-Compiler"]], "ivy array": [[874, "term-Ivy-Array"]], "ivy backends": [[874, "term-Ivy-Backends"]], "ivy compiler": [[874, "term-Ivy-Compiler"]], "ivy container": [[874, "term-Ivy-Container"]], "ivy frontends": [[874, "term-Ivy-Frontends"]], "ivy functional api": [[874, "term-Ivy-Functional-API"]], "ivy tracer": [[874, "term-Ivy-Tracer"]], "ivy transpiler": [[874, "term-Ivy-Transpiler"]], "mixed functions": [[874, "term-Mixed-Functions"]], "native array": [[874, "term-Native-Array"]], "nestable functions": [[874, "term-Nestable-Functions"]], "pipeline": [[874, "term-Pipeline"]], "primary functions": [[874, "term-Primary-Functions"]], "standalone functions": [[874, "term-Standalone-Functions"]], "submodule helper functions": [[874, "term-Submodule-Helper-Functions"]], "built-in function": [[879, "ivy.trace_graph"], [880, "ivy.transpile"]], "ivy.trace_graph()": [[879, "ivy.trace_graph"]], "ivy.transpile()": [[880, "ivy.transpile"]]}})