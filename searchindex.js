Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 166, 169, 172, 173, 174, 176, 180, 181, 195, 198, 208, 214, 215, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 581, 587, 592, 593, 594, 595, 596, 598, 600, 601, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 721, 723, 725, 726, 731, 732, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 775, 777, 778, 780, 789, 790, 792, 793, 795, 796, 797, 798, 808, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "notebook": [0, 4, 5, 8, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 38, 47, 795, 814], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 193, 195, 197, 198, 200, 201, 203, 205, 208, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 386, 388, 389, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 405, 408, 410, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 573, 574, 577, 578, 579, 581, 587, 591, 592, 593, 594, 596, 598, 600, 601, 602, 614, 615, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 775, 777, 778, 779, 780, 785, 789, 790, 792, 793, 794, 795, 796, 797, 799, 802, 803, 807, 808, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "dedic": [0, 790, 823, 838, 849, 853, 855], "task": [0, 1, 6, 49, 641, 716, 717, 718, 814, 815, 817, 821, 822, 823, 843, 844, 872, 878, 879], "util": [0, 6, 7, 8, 9, 10, 13, 14, 24, 27, 28, 29, 30, 46, 49, 58, 81, 199, 377, 448, 632, 799, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 821, 828, 832, 835, 836, 839, 842, 846, 847, 851, 866, 870, 878, 879], "power": [0, 23, 32, 33, 57, 58, 59, 63, 80, 81, 82, 86, 103, 104, 235, 244, 245, 279, 334, 347, 370, 373, 376, 424, 583, 594, 606, 633, 635, 638, 642, 680, 693, 725, 792, 848, 853, 854, 855, 872, 874, 878], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 49, 50, 51, 58, 63, 64, 65, 73, 81, 86, 87, 96, 98, 99, 119, 365, 375, 379, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 495, 500, 546, 556, 596, 618, 619, 621, 626, 627, 635, 636, 638, 639, 640, 681, 697, 703, 704, 705, 707, 709, 710, 712, 714, 789, 795, 802, 808, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 872, 873, 877, 878, 880], "emploi": [0, 15, 878], "build": [0, 9, 16, 20, 21, 23, 30, 32, 33, 36, 37, 38, 39, 44, 46, 51, 69, 75, 104, 646, 750, 751, 752, 753, 793, 794, 795, 814, 815, 821, 824, 830, 831, 839, 841, 850, 852, 855, 856, 857, 859, 862, 866, 870, 872, 874, 877, 878, 879], "The": [0, 1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 103, 104, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 134, 135, 137, 139, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 173, 174, 175, 178, 179, 181, 182, 184, 185, 186, 187, 193, 194, 195, 196, 197, 199, 200, 201, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 349, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 427, 428, 429, 430, 431, 433, 435, 447, 448, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 475, 476, 477, 481, 484, 485, 490, 491, 493, 494, 495, 496, 497, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 572, 574, 577, 578, 581, 583, 584, 587, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 779, 780, 785, 789, 790, 792, 793, 795, 796, 797, 802, 807, 808, 814, 815, 816, 818, 820, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 844, 846, 847, 849, 850, 851, 854, 855, 856, 858, 859, 860, 861, 863, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "goal": [0, 21, 46, 248, 633, 820, 823, 862, 872, 878], "accur": [0, 6, 13, 246, 264, 633, 638, 686, 840], "distinguish": 0, "between": [0, 6, 15, 21, 22, 27, 37, 38, 39, 44, 57, 58, 59, 62, 63, 64, 65, 69, 75, 80, 81, 85, 86, 87, 88, 104, 127, 166, 229, 242, 277, 293, 335, 352, 354, 373, 376, 377, 378, 379, 388, 400, 401, 402, 413, 414, 415, 423, 429, 433, 454, 455, 456, 457, 458, 459, 460, 485, 533, 630, 631, 633, 637, 639, 640, 642, 644, 646, 660, 683, 697, 698, 699, 703, 711, 725, 740, 751, 752, 753, 778, 785, 797, 826, 827, 831, 833, 838, 839, 840, 842, 843, 844, 845, 846, 849, 850, 852, 853, 854, 856, 861, 865, 866, 868, 869, 871, 872, 873, 878], "activ": [0, 6, 13, 17, 30, 32, 33, 58, 59, 62, 73, 81, 85, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 296, 297, 298, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 596, 637, 664, 667, 792, 793, 812, 814, 821, 822, 831, 837, 847, 848, 855, 866, 872, 875], "therebi": [0, 6, 13, 846], "enhanc": [0, 29, 32, 33, 814, 845, 866], "secur": 0, "usag": [0, 7, 214, 632, 814, 831, 839, 842, 846, 851, 857, 862, 875], "befor": [0, 4, 5, 6, 8, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 39, 46, 58, 62, 63, 65, 69, 71, 75, 81, 85, 86, 94, 211, 214, 219, 376, 379, 388, 404, 409, 419, 423, 469, 476, 477, 478, 485, 524, 525, 632, 637, 638, 640, 641, 642, 646, 648, 650, 651, 652, 653, 655, 657, 659, 663, 664, 667, 678, 679, 695, 701, 716, 717, 731, 750, 751, 752, 753, 758, 759, 762, 764, 766, 774, 793, 802, 807, 820, 821, 822, 825, 826, 828, 831, 832, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 851, 854, 857, 865, 866, 872], "dive": [0, 15, 21, 23, 32, 44, 814, 815, 816, 819, 820, 822, 825, 829, 831, 837, 844, 850, 853, 854, 857, 878], "need": [0, 1, 4, 7, 11, 14, 21, 23, 29, 30, 32, 33, 46, 47, 48, 58, 59, 65, 81, 82, 88, 376, 377, 388, 399, 404, 405, 409, 430, 530, 541, 542, 563, 635, 637, 638, 640, 642, 664, 673, 700, 703, 730, 778, 816, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 853, 854, 857, 858, 863, 865, 866, 868, 872, 873, 874, 878], "up": [0, 4, 7, 8, 11, 14, 15, 32, 58, 59, 81, 82, 376, 379, 399, 412, 469, 477, 558, 570, 635, 637, 660, 662, 814, 815, 818, 820, 822, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 873, 878, 879], "our": [0, 4, 6, 7, 11, 13, 14, 15, 17, 19, 21, 24, 25, 27, 28, 29, 32, 33, 34, 35, 37, 38, 39, 44, 46, 47, 50, 73, 96, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 779, 789, 790, 792, 793, 795, 796, 797, 798, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 835, 836, 837, 840, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 861, 862, 865, 877, 878, 880], "necessari": [0, 6, 7, 13, 38, 54, 58, 77, 81, 88, 129, 241, 274, 378, 379, 453, 463, 464, 465, 471, 473, 474, 475, 476, 477, 484, 500, 586, 609, 633, 635, 703, 704, 705, 707, 709, 710, 712, 714, 814, 820, 821, 826, 827, 829, 831, 833, 842, 843, 846, 848, 849, 865, 866], "follow": [0, 1, 6, 7, 13, 15, 26, 27, 28, 30, 32, 33, 36, 37, 38, 44, 47, 48, 58, 59, 60, 62, 63, 69, 75, 81, 82, 83, 85, 86, 135, 166, 169, 214, 224, 241, 248, 274, 276, 283, 284, 320, 370, 376, 378, 379, 382, 399, 412, 420, 458, 473, 485, 502, 504, 561, 562, 563, 593, 594, 617, 620, 622, 623, 624, 630, 631, 632, 633, 635, 636, 637, 638, 642, 646, 664, 667, 679, 685, 695, 725, 731, 750, 751, 752, 753, 793, 797, 816, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 865, 869, 872, 875], "command": [0, 46, 48, 816, 821, 825, 828, 830, 836, 837, 858], "which": [0, 1, 4, 6, 7, 9, 10, 14, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 101, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 156, 158, 164, 166, 169, 171, 174, 181, 193, 198, 202, 207, 209, 212, 213, 214, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 323, 326, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 353, 354, 356, 357, 358, 360, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 386, 388, 399, 400, 401, 402, 404, 405, 409, 410, 419, 420, 421, 423, 428, 431, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 490, 491, 492, 493, 494, 495, 497, 502, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 569, 570, 575, 576, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 660, 661, 662, 664, 667, 668, 669, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 692, 694, 695, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 724, 725, 726, 727, 732, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 789, 790, 792, 793, 794, 795, 796, 797, 798, 802, 803, 810, 812, 814, 816, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879], "an": [0, 1, 3, 4, 6, 7, 9, 10, 13, 14, 15, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 38, 44, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 166, 169, 172, 176, 180, 181, 211, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 317, 318, 319, 321, 322, 329, 330, 331, 332, 333, 334, 336, 337, 339, 342, 346, 351, 355, 360, 368, 370, 373, 376, 377, 378, 379, 382, 383, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 408, 410, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 431, 432, 457, 458, 462, 463, 464, 465, 469, 470, 471, 473, 480, 484, 485, 491, 493, 497, 499, 500, 502, 503, 504, 507, 509, 510, 512, 515, 516, 521, 522, 523, 524, 525, 526, 527, 530, 531, 534, 539, 541, 542, 550, 553, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 572, 578, 581, 582, 591, 592, 596, 600, 601, 602, 615, 618, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 662, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 725, 738, 740, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 779, 780, 782, 785, 789, 790, 792, 793, 795, 796, 797, 798, 808, 812, 814, 816, 817, 818, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 878, 879], "machin": [0, 6, 7, 12, 13, 14, 27, 28, 29, 30, 35, 36, 44, 50, 58, 63, 81, 86, 166, 169, 377, 431, 631, 638, 681, 684, 814, 821, 825, 839, 859, 862, 870, 872, 874, 875, 876, 877, 878], "learn": [0, 6, 7, 13, 15, 17, 19, 23, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 37, 44, 46, 58, 60, 83, 377, 378, 448, 453, 546, 617, 620, 622, 623, 624, 635, 636, 641, 716, 717, 718, 797, 814, 815, 819, 820, 821, 824, 825, 831, 836, 837, 839, 841, 850, 859, 861, 862, 870, 874, 875, 876, 877, 878, 879], "other": [0, 4, 6, 7, 9, 11, 13, 14, 17, 19, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 55, 57, 58, 59, 65, 71, 75, 78, 80, 81, 82, 88, 94, 98, 103, 104, 127, 142, 154, 180, 241, 246, 248, 264, 273, 274, 338, 342, 373, 379, 469, 470, 478, 535, 536, 630, 631, 633, 635, 644, 648, 701, 711, 742, 765, 767, 774, 779, 814, 818, 820, 821, 822, 823, 825, 826, 829, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 857, 858, 859, 862, 865, 866, 868, 870, 871, 872, 878, 879], "essenti": [0, 817, 820, 827, 829, 832, 833, 839, 842, 843, 844, 861, 862, 878], "panda": [0, 15, 46, 48, 862, 869], "matplotlib": [0, 6, 7, 13, 15, 27, 28, 29, 30, 46, 47, 48, 51], "scikit": [0, 15, 377, 448, 862], "torch": [0, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 49, 50, 51, 54, 59, 63, 73, 82, 86, 130, 168, 195, 196, 200, 210, 212, 217, 284, 336, 337, 373, 379, 497, 539, 563, 596, 630, 631, 632, 633, 635, 638, 641, 688, 717, 718, 774, 785, 790, 802, 812, 814, 818, 821, 822, 825, 826, 827, 828, 830, 831, 832, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 853, 854, 856, 857, 859, 865, 866, 867, 878], "cryptographi": [0, 15], "These": [0, 15, 39, 58, 81, 377, 379, 388, 430, 484, 523, 637, 638, 664, 673, 674, 814, 817, 819, 820, 821, 822, 825, 829, 831, 833, 834, 838, 839, 842, 843, 846, 851, 852, 854, 855, 856, 857, 859, 861, 862, 863, 866, 872, 876, 878, 879], "tool": [0, 13, 15, 23, 32, 33, 814, 821, 822, 833, 837, 852, 856, 857, 860, 863, 866, 870, 871, 872, 873, 875, 878, 879], "provid": [0, 6, 9, 13, 21, 23, 27, 30, 32, 33, 37, 38, 44, 50, 54, 58, 59, 63, 65, 68, 71, 72, 75, 77, 81, 82, 86, 88, 91, 94, 95, 123, 140, 142, 159, 160, 161, 162, 163, 171, 181, 193, 197, 210, 293, 376, 377, 379, 382, 388, 412, 420, 424, 429, 433, 446, 447, 451, 452, 469, 471, 480, 500, 502, 504, 533, 545, 577, 578, 629, 630, 631, 632, 633, 635, 637, 638, 640, 642, 645, 648, 649, 664, 680, 683, 694, 703, 704, 711, 723, 745, 765, 767, 768, 769, 778, 793, 797, 802, 803, 820, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 843, 844, 846, 847, 849, 853, 855, 857, 861, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 879], "robust": 0, "foundat": [0, 23, 862, 875], "manipul": [0, 58, 81, 842, 843, 847, 849, 851, 856, 861, 872], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29, 30, 32, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 111, 112, 113, 114, 115, 116, 118, 119, 127, 128, 129, 130, 133, 135, 137, 138, 139, 140, 141, 142, 144, 148, 150, 154, 155, 156, 164, 166, 169, 174, 176, 181, 198, 199, 207, 212, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 321, 322, 329, 331, 336, 337, 339, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 360, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 413, 414, 415, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 441, 447, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 468, 469, 470, 471, 472, 475, 476, 477, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 505, 506, 507, 508, 511, 513, 514, 516, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 556, 559, 561, 562, 563, 570, 577, 578, 593, 594, 595, 596, 598, 602, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 780, 792, 793, 797, 807, 808, 814, 818, 820, 821, 827, 828, 829, 830, 831, 833, 836, 841, 844, 846, 849, 851, 853, 854, 855, 856, 863, 865, 872, 878, 879], "pip": [0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 814, 818, 821, 828, 837], "q": [0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 46, 47, 48, 58, 62, 63, 81, 85, 86, 363, 373, 377, 388, 430, 533, 637, 638, 642, 664, 667, 673, 674, 685, 727, 821, 822, 824, 844, 857], "r": [0, 4, 12, 13, 46, 47, 58, 63, 75, 81, 86, 98, 99, 350, 365, 373, 375, 618, 636, 638, 640, 685, 714, 821, 822, 824, 841, 844, 880], "requir": [0, 6, 7, 13, 27, 28, 29, 30, 37, 46, 47, 48, 51, 57, 58, 75, 80, 81, 275, 288, 292, 377, 379, 430, 431, 485, 633, 638, 640, 673, 674, 675, 711, 777, 785, 790, 808, 816, 820, 821, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 840, 843, 844, 845, 846, 847, 849, 851, 853, 857, 866, 872, 878], "txt": [0, 4, 6, 12, 47, 59, 821, 825, 828], "16": [0, 4, 7, 8, 9, 10, 13, 15, 27, 28, 29, 30, 44, 46, 48, 57, 58, 59, 62, 63, 67, 71, 78, 80, 81, 82, 85, 86, 88, 90, 103, 104, 169, 235, 264, 284, 291, 347, 350, 354, 373, 376, 379, 388, 395, 396, 398, 404, 408, 409, 413, 414, 419, 423, 458, 475, 524, 530, 547, 550, 572, 593, 594, 626, 631, 633, 635, 636, 637, 638, 640, 642, 644, 645, 648, 659, 661, 668, 672, 675, 676, 683, 685, 689, 714, 727, 740, 741, 742, 749, 759, 760, 777, 780, 822, 831, 833, 854], "mb": [0, 6, 7, 9, 10, 12, 46, 48, 51, 830], "25": [0, 13, 15, 44, 46, 47, 48, 57, 58, 59, 63, 64, 67, 71, 74, 80, 81, 82, 85, 86, 89, 90, 94, 103, 104, 119, 138, 224, 225, 235, 241, 243, 254, 259, 274, 279, 282, 284, 287, 288, 289, 294, 316, 370, 378, 388, 419, 454, 457, 524, 533, 561, 562, 578, 593, 630, 633, 635, 638, 639, 642, 643, 648, 651, 668, 672, 677, 693, 698, 720, 727, 731, 738, 740, 741, 742, 759, 760, 762, 767, 823, 829, 841], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 103, 104, 111, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 153, 154, 155, 156, 160, 164, 165, 166, 169, 174, 176, 181, 197, 198, 202, 206, 207, 209, 210, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 443, 446, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 575, 577, 578, 582, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 780, 782, 785, 789, 792, 793, 794, 795, 796, 797, 798, 802, 807, 808, 812, 814, 817, 818, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 841, 842, 843, 844, 846, 849, 850, 851, 853, 854, 855, 856, 857, 862, 863, 865, 866, 867, 880], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 47, 49, 50, 51, 54, 58, 59, 60, 63, 71, 81, 83, 86, 94, 123, 140, 146, 147, 167, 168, 197, 200, 201, 213, 248, 283, 330, 335, 336, 337, 339, 350, 352, 358, 362, 364, 370, 373, 374, 376, 377, 378, 379, 382, 383, 388, 391, 392, 399, 405, 410, 421, 429, 433, 441, 450, 455, 457, 458, 474, 476, 477, 485, 502, 503, 504, 513, 523, 533, 551, 552, 558, 572, 595, 596, 617, 619, 620, 621, 622, 624, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 642, 648, 652, 654, 656, 658, 664, 671, 679, 681, 688, 689, 695, 731, 765, 767, 778, 792, 793, 794, 795, 796, 797, 798, 802, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 862, 863, 864, 865, 866, 867, 868, 871, 872, 873, 875, 876, 877, 878], "eta": [0, 7, 9, 10, 46, 48, 51], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 130, 133, 135, 136, 137, 138, 139, 142, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 164, 166, 169, 170, 174, 176, 181, 194, 197, 199, 202, 207, 208, 209, 210, 212, 213, 214, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 386, 388, 395, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 419, 420, 421, 423, 426, 427, 428, 430, 431, 432, 435, 436, 438, 441, 442, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 468, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 540, 541, 542, 545, 546, 547, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 573, 575, 577, 578, 582, 587, 591, 592, 593, 594, 596, 598, 600, 601, 610, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 780, 782, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 802, 807, 808, 812, 814, 818, 821, 822, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 841, 842, 843, 844, 846, 847, 851, 853, 854, 855, 856, 857, 865, 866], "00": [0, 6, 7, 9, 10, 12, 13, 15, 46, 48, 51, 58, 59, 63, 81, 82, 86, 246, 313, 344, 345, 370, 376, 398, 404, 408, 409, 550, 594, 633, 635, 638, 675, 685, 777, 837, 846], "44": [0, 6, 7, 9, 10, 44, 48, 57, 58, 67, 80, 81, 90, 227, 274, 284, 288, 289, 340, 373, 376, 397, 398, 633, 637, 638, 642, 645, 648, 660, 683, 727, 740, 741, 749, 760], "6": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 25, 27, 28, 29, 30, 32, 33, 44, 46, 47, 48, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 68, 70, 71, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 99, 103, 104, 111, 113, 118, 123, 128, 129, 136, 137, 140, 141, 144, 150, 154, 155, 156, 164, 166, 174, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 295, 297, 298, 300, 302, 304, 306, 307, 308, 310, 311, 312, 313, 314, 320, 331, 336, 337, 339, 341, 350, 351, 353, 354, 355, 357, 364, 368, 370, 373, 374, 376, 377, 378, 379, 384, 386, 388, 398, 400, 403, 404, 408, 409, 413, 419, 420, 421, 423, 426, 429, 432, 433, 437, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 469, 471, 475, 476, 480, 481, 484, 485, 490, 491, 493, 494, 497, 500, 501, 511, 513, 514, 516, 521, 523, 524, 525, 526, 528, 530, 532, 533, 539, 541, 542, 545, 546, 547, 553, 554, 561, 562, 563, 578, 592, 593, 594, 595, 596, 598, 602, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 667, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 730, 731, 737, 738, 739, 740, 741, 742, 744, 745, 746, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 777, 792, 818, 821, 825, 827, 829, 830, 831, 833, 836, 841, 846, 849, 851, 853, 854, 855], "kb": [0, 6, 7, 9, 10, 12, 13, 46, 48, 51], "3": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 26, 27, 28, 29, 30, 32, 33, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 68, 69, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 128, 129, 133, 135, 137, 138, 140, 141, 142, 143, 144, 148, 149, 150, 153, 154, 155, 156, 160, 164, 166, 174, 176, 181, 195, 197, 198, 209, 212, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 331, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 393, 395, 396, 397, 398, 400, 403, 404, 405, 408, 409, 413, 414, 415, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 444, 447, 449, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 505, 506, 507, 508, 511, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 577, 578, 591, 592, 593, 594, 598, 601, 602, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 780, 793, 807, 808, 812, 814, 818, 820, 821, 825, 826, 827, 829, 830, 831, 833, 835, 836, 839, 841, 844, 846, 851, 853, 854, 855, 856, 865, 866, 879], "45": [0, 7, 9, 10, 44, 46, 48, 57, 58, 71, 80, 81, 83, 85, 90, 104, 225, 229, 241, 284, 285, 344, 345, 358, 373, 376, 388, 398, 408, 419, 524, 530, 616, 622, 633, 636, 638, 640, 648, 683, 709, 741, 742, 760, 777], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 25, 27, 28, 29, 30, 32, 33, 44, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 98, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 135, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 154, 155, 156, 160, 164, 166, 174, 176, 181, 198, 207, 212, 215, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 331, 334, 336, 337, 339, 341, 343, 345, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 384, 386, 388, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 413, 414, 415, 418, 419, 420, 421, 423, 426, 429, 430, 432, 433, 435, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 475, 476, 479, 480, 481, 484, 485, 490, 491, 492, 493, 494, 495, 497, 500, 501, 506, 507, 508, 511, 513, 514, 516, 521, 523, 524, 525, 526, 527, 528, 530, 533, 539, 540, 541, 542, 545, 546, 547, 548, 550, 553, 554, 556, 559, 561, 562, 563, 577, 578, 582, 593, 594, 595, 596, 598, 602, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 663, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 720, 722, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 780, 793, 807, 808, 814, 817, 820, 821, 822, 825, 827, 829, 830, 831, 833, 835, 836, 838, 841, 844, 846, 853, 854, 855, 866, 880], "143": [0, 7, 9, 10, 63, 80, 104, 291, 633, 638, 676, 833], "8": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 25, 27, 28, 29, 30, 44, 46, 48, 51, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 78, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 103, 104, 111, 126, 136, 137, 141, 144, 150, 159, 161, 162, 163, 166, 174, 199, 216, 224, 226, 227, 231, 232, 235, 236, 237, 239, 245, 248, 252, 253, 259, 260, 261, 265, 266, 269, 270, 272, 273, 274, 279, 280, 283, 284, 285, 288, 289, 292, 293, 294, 298, 304, 306, 307, 308, 310, 311, 313, 314, 331, 335, 347, 350, 352, 353, 354, 357, 364, 368, 370, 373, 376, 377, 378, 379, 388, 395, 396, 397, 398, 403, 404, 408, 409, 413, 414, 418, 419, 423, 426, 429, 437, 454, 455, 456, 458, 459, 460, 461, 463, 464, 465, 469, 471, 475, 480, 481, 490, 491, 494, 495, 496, 497, 500, 501, 511, 513, 525, 528, 529, 533, 539, 540, 546, 547, 550, 553, 557, 561, 562, 563, 565, 566, 569, 572, 577, 578, 582, 592, 593, 594, 595, 596, 616, 619, 621, 623, 624, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 651, 655, 656, 658, 659, 660, 661, 664, 670, 671, 672, 674, 675, 676, 678, 679, 680, 683, 685, 686, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 704, 711, 712, 714, 720, 727, 731, 739, 740, 741, 742, 744, 749, 750, 752, 754, 755, 757, 759, 760, 762, 764, 766, 767, 777, 780, 793, 821, 829, 830, 833, 846, 850, 854], "7": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 25, 27, 28, 29, 30, 44, 46, 47, 48, 50, 51, 52, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 104, 113, 114, 115, 116, 127, 128, 129, 138, 141, 142, 160, 166, 169, 199, 221, 224, 227, 231, 232, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 247, 248, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 271, 272, 273, 274, 276, 277, 278, 280, 281, 284, 285, 286, 288, 291, 292, 294, 295, 297, 298, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 331, 335, 339, 341, 342, 350, 351, 352, 354, 356, 357, 364, 368, 370, 373, 374, 376, 377, 378, 379, 384, 388, 395, 396, 397, 398, 403, 404, 408, 409, 413, 418, 419, 420, 421, 423, 426, 429, 442, 454, 455, 456, 457, 459, 460, 463, 464, 465, 469, 471, 475, 480, 481, 484, 485, 490, 491, 493, 494, 496, 497, 500, 501, 511, 513, 514, 521, 524, 525, 527, 528, 533, 539, 541, 542, 546, 547, 550, 561, 562, 563, 570, 577, 578, 593, 596, 616, 617, 619, 620, 621, 622, 623, 624, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 654, 656, 658, 659, 660, 661, 667, 669, 670, 671, 672, 674, 675, 676, 678, 680, 683, 685, 686, 688, 689, 690, 692, 693, 694, 697, 698, 699, 700, 703, 704, 709, 711, 712, 714, 719, 720, 727, 731, 738, 739, 740, 741, 742, 744, 749, 750, 752, 754, 755, 757, 758, 759, 760, 762, 764, 766, 767, 777, 821, 822, 827, 829, 830, 833, 839, 842, 846], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 27, 28, 29, 30, 44, 46, 48, 51, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 69, 70, 71, 74, 78, 80, 81, 82, 83, 85, 86, 88, 90, 92, 93, 94, 103, 104, 111, 127, 128, 129, 141, 159, 160, 161, 162, 163, 166, 169, 222, 224, 226, 227, 230, 231, 232, 235, 236, 241, 242, 243, 248, 255, 261, 262, 263, 265, 269, 270, 272, 273, 274, 277, 279, 280, 284, 285, 288, 289, 290, 295, 301, 304, 305, 306, 343, 346, 350, 356, 357, 364, 368, 373, 374, 376, 378, 379, 386, 388, 395, 396, 397, 398, 403, 404, 408, 409, 413, 414, 418, 419, 423, 437, 454, 456, 458, 459, 463, 464, 465, 471, 475, 480, 490, 491, 492, 493, 495, 497, 500, 511, 513, 516, 525, 542, 546, 547, 548, 550, 553, 561, 562, 565, 566, 569, 577, 578, 592, 593, 595, 616, 617, 618, 622, 623, 627, 630, 631, 633, 635, 636, 637, 638, 640, 642, 644, 645, 646, 647, 648, 651, 652, 653, 659, 660, 661, 669, 670, 672, 674, 675, 676, 678, 679, 680, 683, 685, 686, 688, 689, 690, 692, 693, 694, 700, 704, 708, 709, 711, 712, 714, 719, 720, 725, 727, 730, 731, 739, 740, 741, 742, 744, 749, 750, 752, 754, 755, 757, 759, 760, 762, 764, 766, 767, 777, 797, 829, 831, 833, 841, 846, 854, 855, 868], "756": [0, 7, 9, 10], "21": [0, 4, 7, 9, 13, 15, 44, 46, 48, 51, 57, 58, 59, 67, 77, 80, 81, 85, 86, 90, 94, 103, 139, 169, 224, 227, 229, 235, 259, 274, 305, 357, 376, 377, 378, 379, 388, 395, 398, 408, 413, 419, 421, 423, 427, 453, 468, 524, 578, 630, 631, 633, 635, 638, 642, 648, 672, 683, 687, 725, 740, 741, 758, 759, 760, 835, 841], "116": [0, 7, 9, 10], "23": [0, 13, 14, 15, 27, 28, 29, 30, 44, 46, 48, 57, 58, 63, 67, 77, 80, 81, 82, 85, 90, 137, 236, 239, 256, 257, 258, 281, 283, 284, 285, 287, 294, 339, 340, 373, 376, 379, 388, 395, 396, 398, 408, 413, 414, 415, 419, 423, 468, 524, 530, 630, 633, 637, 638, 642, 645, 656, 658, 672, 676, 679, 687, 689, 690, 720, 727, 731, 740, 741, 742, 749, 814, 830, 846, 851], "29": [0, 6, 13, 15, 44, 46, 48, 51, 63, 80, 82, 83, 85, 90, 229, 388, 419, 524, 546, 547, 618, 622, 633, 635, 636, 638, 676, 740, 741, 742], "823": 0, "46": [0, 6, 13, 44, 46, 48, 58, 67, 81, 85, 90, 139, 264, 285, 315, 370, 376, 396, 414, 415, 630, 633, 642, 720, 740, 741], "14": [0, 4, 6, 8, 11, 12, 13, 28, 44, 46, 47, 48, 55, 57, 58, 62, 63, 67, 71, 78, 80, 81, 82, 85, 86, 88, 90, 153, 166, 169, 222, 227, 229, 236, 240, 266, 270, 274, 280, 287, 295, 346, 376, 377, 379, 388, 395, 396, 397, 398, 408, 413, 415, 418, 419, 420, 423, 427, 433, 434, 469, 471, 475, 480, 500, 524, 593, 616, 631, 633, 635, 636, 637, 638, 640, 642, 646, 648, 651, 652, 654, 656, 658, 660, 672, 674, 676, 683, 690, 692, 694, 714, 731, 740, 741, 742, 750, 759, 760, 829, 833, 846], "731": [0, 52, 117], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 23, 25, 26, 27, 28, 29, 30, 32, 33, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 103, 104, 111, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 150, 153, 154, 155, 156, 160, 164, 166, 174, 176, 181, 197, 198, 199, 202, 205, 207, 209, 212, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 320, 321, 322, 329, 331, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 386, 388, 392, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 408, 409, 410, 413, 414, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 442, 444, 447, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 505, 506, 508, 511, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 575, 577, 578, 582, 591, 592, 593, 594, 595, 596, 598, 602, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 779, 780, 789, 792, 793, 802, 807, 808, 812, 814, 818, 821, 822, 825, 827, 828, 829, 830, 831, 833, 835, 836, 838, 839, 841, 842, 843, 844, 846, 850, 851, 853, 854, 855, 856, 857, 865, 866, 867, 878, 879], "121": 0, "56": [0, 12, 15, 44, 46, 57, 58, 62, 67, 80, 81, 85, 139, 274, 288, 291, 294, 376, 398, 408, 616, 630, 633, 636, 637, 638, 642, 648, 652, 654, 656, 658, 661, 683, 719, 741, 760, 833], "124": [0, 637, 661], "196": [0, 85, 637, 661], "166": [0, 74, 111, 627], "99": [0, 13, 15, 44, 57, 58, 60, 78, 80, 90, 136, 223, 238, 361, 373, 593, 620, 630, 633, 635, 636, 642, 648, 723, 731, 741, 760], "11": [0, 4, 6, 7, 8, 12, 13, 14, 23, 25, 27, 28, 29, 30, 44, 46, 47, 48, 51, 57, 58, 59, 62, 63, 67, 71, 80, 81, 82, 85, 86, 88, 90, 94, 104, 224, 228, 231, 236, 246, 283, 284, 290, 354, 373, 376, 377, 379, 395, 396, 408, 413, 414, 418, 419, 423, 432, 468, 469, 471, 475, 480, 482, 500, 524, 525, 540, 546, 547, 553, 562, 578, 633, 635, 637, 638, 639, 640, 642, 644, 645, 646, 648, 651, 652, 660, 661, 672, 675, 676, 677, 678, 679, 683, 687, 688, 689, 690, 692, 694, 697, 704, 709, 710, 712, 714, 725, 727, 737, 740, 741, 742, 749, 750, 758, 759, 760, 767, 829, 830, 831, 833, 841], "71": [0, 44, 57, 80, 85, 240, 280, 419, 633], "To": [0, 1, 6, 12, 13, 14, 15, 17, 19, 23, 27, 28, 29, 30, 32, 33, 44, 47, 48, 49, 99, 248, 378, 457, 587, 633, 635, 792, 820, 821, 825, 826, 827, 828, 831, 833, 835, 836, 837, 839, 840, 843, 844, 845, 846, 847, 854, 855, 856, 858, 865, 866], "ensur": [0, 1, 12, 14, 17, 19, 27, 28, 29, 30, 58, 59, 81, 82, 376, 377, 413, 414, 415, 448, 563, 635, 772, 814, 817, 820, 821, 822, 826, 831, 832, 833, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 858, 872], "begin": [0, 7, 28, 58, 81, 285, 378, 379, 453, 469, 485, 486, 487, 488, 489, 633, 642, 719, 730, 777, 821, 825, 830, 844], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 19, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 48, 49, 50, 51, 57, 58, 59, 71, 80, 81, 82, 148, 177, 195, 200, 225, 285, 308, 329, 370, 388, 523, 530, 539, 563, 593, 596, 600, 630, 631, 632, 633, 635, 638, 648, 686, 760, 772, 774, 785, 802, 807, 808, 814, 819, 820, 821, 822, 825, 826, 827, 830, 831, 832, 835, 836, 838, 842, 844, 846, 847, 849, 851, 853, 856, 858, 859, 861, 862, 865, 866, 867, 869, 874, 879], "handl": [0, 4, 8, 44, 46, 52, 56, 57, 58, 74, 75, 79, 80, 81, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 194, 195, 196, 197, 198, 202, 207, 208, 216, 220, 226, 238, 263, 265, 279, 285, 286, 291, 292, 296, 301, 302, 304, 368, 379, 468, 494, 627, 632, 633, 638, 648, 692, 764, 766, 789, 797, 815, 817, 824, 829, 830, 831, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 855, 869, 879], "its": [0, 1, 6, 13, 14, 23, 25, 32, 33, 35, 38, 45, 46, 48, 53, 55, 58, 65, 75, 78, 81, 82, 88, 101, 113, 116, 119, 124, 154, 159, 160, 161, 162, 163, 214, 241, 274, 293, 303, 368, 376, 379, 388, 416, 424, 497, 499, 526, 550, 599, 627, 629, 631, 632, 633, 635, 638, 640, 642, 678, 703, 707, 708, 712, 725, 774, 808, 820, 821, 826, 829, 830, 831, 832, 834, 835, 836, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 856, 857, 859, 865, 871, 872, 878], "backend": [0, 4, 6, 7, 9, 10, 13, 14, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 38, 53, 54, 58, 59, 63, 75, 81, 82, 86, 103, 130, 167, 168, 171, 193, 200, 201, 203, 206, 217, 336, 337, 373, 377, 429, 431, 530, 539, 551, 552, 560, 563, 564, 574, 581, 596, 599, 630, 631, 632, 635, 638, 686, 688, 772, 774, 775, 777, 778, 779, 782, 784, 785, 790, 794, 795, 797, 801, 802, 814, 818, 819, 821, 822, 824, 825, 826, 830, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 846, 848, 849, 850, 852, 853, 856, 859, 861, 865, 866, 867, 872, 875, 878, 879], "jax": [0, 3, 6, 12, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 44, 46, 50, 52, 57, 58, 59, 69, 74, 80, 81, 82, 111, 112, 113, 114, 115, 116, 117, 118, 119, 210, 292, 296, 301, 302, 304, 350, 368, 373, 388, 533, 563, 596, 615, 627, 632, 633, 635, 646, 750, 751, 752, 753, 785, 789, 802, 814, 818, 819, 820, 821, 822, 825, 827, 831, 832, 835, 836, 838, 841, 842, 843, 844, 846, 847, 849, 851, 853, 856, 857, 862, 863, 865, 866, 867, 873, 875, 878, 879], "capabl": [0, 6, 21, 29, 33, 846, 849], "optim": [0, 6, 7, 11, 13, 14, 15, 23, 27, 28, 30, 32, 33, 46, 48, 49, 51, 58, 60, 81, 83, 313, 370, 378, 457, 458, 537, 624, 635, 636, 641, 716, 717, 718, 792, 808, 814, 831, 842, 849, 852, 854, 856, 863, 866, 870, 871, 872, 873, 874, 875, 876, 879], "frontend": [0, 15, 580, 635, 774, 775, 778, 782, 785, 814, 819, 822, 824, 830, 831, 835, 836, 841, 845, 846, 849, 850, 852, 859, 866, 872], "xgb_frontend": 0, "access": [0, 1, 29, 32, 33, 75, 814, 820, 821, 822, 830, 831, 837, 842, 843, 858, 866, 872, 874, 876], "compat": [0, 6, 9, 24, 30, 34, 38, 44, 51, 57, 58, 63, 65, 68, 71, 72, 80, 81, 86, 88, 91, 94, 95, 103, 104, 155, 224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 252, 253, 260, 261, 266, 268, 270, 271, 274, 277, 279, 283, 290, 295, 336, 337, 373, 631, 633, 638, 640, 645, 648, 649, 669, 681, 684, 687, 690, 694, 695, 707, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 812, 821, 827, 838, 843, 844, 847, 851, 857, 862], "manner": [0, 25, 33, 35, 45, 53, 76, 642, 731, 821, 831, 832, 834, 839, 843, 847, 854, 857, 861, 868, 870, 878, 879], "sklearn": [0, 15], "model_select": [0, 15], "timeit": [0, 11, 14, 15, 25, 32, 33, 49, 51], "oper": [0, 6, 23, 24, 27, 28, 29, 30, 32, 33, 34, 38, 45, 48, 54, 55, 57, 58, 59, 62, 63, 71, 75, 77, 78, 80, 81, 82, 85, 86, 94, 104, 119, 138, 139, 181, 211, 219, 224, 226, 235, 238, 241, 248, 263, 265, 274, 275, 279, 283, 286, 291, 303, 311, 331, 332, 333, 365, 368, 370, 375, 376, 378, 379, 390, 391, 392, 393, 395, 396, 397, 403, 404, 405, 409, 413, 414, 415, 416, 418, 419, 421, 423, 424, 453, 490, 492, 539, 546, 547, 548, 596, 627, 630, 631, 632, 633, 635, 637, 638, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 664, 679, 690, 692, 762, 764, 766, 777, 780, 793, 808, 812, 820, 821, 824, 825, 826, 829, 831, 832, 833, 834, 835, 839, 842, 843, 846, 849, 851, 854, 855, 859, 861, 865, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879], "xgb": 0, "functool": [0, 15, 46, 835, 843, 853], "higher": [0, 15, 58, 81, 377, 379, 388, 434, 446, 452, 463, 464, 465, 533, 792, 831, 842, 850, 851, 856, 857, 869, 872, 873, 876, 878, 879], "order": [0, 4, 26, 36, 38, 46, 49, 51, 54, 58, 59, 62, 63, 65, 69, 70, 75, 81, 85, 86, 88, 92, 93, 98, 103, 104, 128, 129, 140, 148, 229, 248, 291, 329, 350, 370, 373, 376, 377, 379, 382, 386, 422, 427, 430, 431, 432, 433, 434, 438, 444, 446, 449, 452, 475, 476, 477, 482, 483, 495, 502, 503, 504, 507, 516, 630, 633, 637, 638, 640, 641, 645, 646, 647, 651, 652, 653, 654, 655, 656, 659, 673, 674, 679, 688, 689, 693, 695, 704, 707, 716, 717, 748, 750, 751, 752, 753, 754, 756, 757, 774, 796, 798, 808, 820, 821, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 854, 856, 857, 861, 868, 871, 872, 873, 875, 878], "callabl": [0, 12, 50, 58, 59, 73, 81, 82, 85, 96, 123, 124, 126, 167, 168, 200, 201, 214, 364, 366, 367, 374, 375, 376, 379, 419, 422, 424, 462, 485, 536, 540, 545, 547, 551, 552, 573, 602, 615, 619, 621, 626, 629, 631, 632, 635, 636, 641, 642, 716, 717, 718, 725, 726, 727, 729, 730, 731, 732, 772, 775, 785, 797, 809, 812, 829, 835, 841, 843, 851, 864, 865, 866, 867], "object": [0, 15, 23, 28, 30, 32, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 107, 108, 130, 134, 135, 145, 157, 166, 169, 177, 180, 215, 273, 510, 558, 574, 618, 630, 631, 632, 635, 636, 642, 644, 722, 723, 724, 726, 727, 728, 734, 735, 736, 737, 744, 772, 774, 775, 782, 783, 784, 790, 791, 793, 794, 795, 802, 807, 826, 827, 829, 830, 839, 840, 843, 844, 846, 849, 853, 856, 864, 865, 866, 867, 872, 878], "tqdm_notebook": [0, 15], "tqdm": [0, 6, 7, 15, 27, 28, 29, 30, 46, 48], "progress": [0, 638, 693, 817, 821, 822, 856], "bar": [0, 821, 836], "jupyt": [0, 1, 862, 874], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 12, 15, 32, 33, 46, 49, 865], "step": [0, 1, 2, 6, 7, 13, 18, 19, 20, 31, 32, 33, 44, 46, 47, 48, 58, 60, 77, 81, 83, 127, 138, 376, 379, 422, 424, 479, 616, 617, 620, 622, 623, 624, 630, 636, 641, 716, 717, 718, 797, 812, 814, 820, 821, 822, 823, 826, 827, 829, 830, 831, 832, 833, 836, 841, 843, 846, 851, 854, 855, 856, 863, 872], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 17, 19, 24, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 44, 45, 46, 47, 48, 49, 51, 54, 58, 80, 81, 82, 128, 129, 130, 141, 177, 254, 258, 308, 376, 377, 404, 409, 425, 593, 630, 631, 633, 635, 642, 725, 774, 802, 807, 808, 814, 820, 826, 831, 832, 835, 838, 842, 843, 844, 846, 847, 849, 851, 853, 854, 856, 859, 867], "pd": [0, 15, 48], "set_backend": [0, 4, 5, 8, 12, 15, 23, 24, 25, 26, 27, 28, 32, 33, 35, 36, 37, 38, 39, 45, 47, 48, 49, 57, 59, 73, 80, 82, 168, 177, 195, 196, 200, 210, 212, 217, 225, 539, 563, 631, 632, 635, 638, 641, 686, 717, 718, 802, 814, 825, 827, 831, 832, 839, 840, 841, 851, 853, 856, 865, 866, 867], "config": [0, 5, 6, 7, 8, 11, 13, 14, 15, 26, 29, 32, 33, 46, 47, 49, 75, 642, 732, 814, 821, 825, 828, 830, 837, 844, 854, 865, 873], "updat": [0, 1, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 24, 26, 27, 28, 29, 30, 32, 33, 46, 48, 53, 59, 60, 75, 82, 83, 98, 379, 490, 563, 577, 578, 581, 582, 605, 616, 617, 620, 622, 623, 624, 635, 636, 637, 641, 642, 660, 663, 716, 717, 718, 726, 727, 731, 736, 737, 785, 790, 796, 797, 802, 808, 814, 820, 821, 822, 824, 825, 826, 829, 830, 831, 833, 838, 840, 841, 843, 844, 846, 849, 851, 853, 854, 856, 857], "jax_enable_x64": [0, 5, 8, 11, 14, 15, 26, 29, 32, 33, 814], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 26, 27, 29, 30, 32, 33, 37, 38, 39, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 164, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 181, 193, 197, 198, 200, 201, 205, 208, 209, 211, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 370, 373, 374, 376, 377, 378, 379, 382, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 419, 420, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 471, 472, 473, 475, 476, 477, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 515, 516, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 577, 578, 579, 582, 585, 586, 588, 589, 591, 592, 593, 594, 596, 598, 600, 601, 603, 608, 609, 611, 612, 614, 617, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 732, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 779, 780, 782, 793, 794, 795, 796, 797, 799, 802, 804, 805, 807, 808, 812, 814, 818, 821, 827, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 846, 848, 849, 851, 854, 855, 856, 865, 866], "from": [0, 2, 4, 5, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 68, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 90, 91, 94, 95, 96, 98, 99, 101, 104, 127, 129, 132, 134, 135, 136, 137, 140, 141, 144, 148, 150, 156, 174, 180, 181, 197, 202, 207, 213, 214, 240, 248, 249, 276, 280, 281, 288, 292, 313, 314, 320, 323, 329, 331, 332, 333, 340, 343, 347, 348, 350, 351, 363, 367, 370, 373, 375, 376, 377, 378, 379, 383, 388, 400, 401, 402, 416, 421, 422, 441, 448, 453, 454, 458, 468, 471, 480, 485, 491, 493, 494, 496, 497, 499, 500, 509, 510, 511, 512, 513, 524, 525, 545, 553, 554, 556, 576, 587, 598, 615, 617, 618, 622, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 644, 645, 646, 648, 649, 651, 659, 660, 669, 672, 688, 692, 693, 694, 701, 704, 707, 710, 716, 717, 718, 720, 731, 732, 733, 739, 740, 741, 742, 746, 749, 750, 752, 758, 759, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 779, 780, 785, 790, 792, 793, 794, 795, 797, 802, 808, 812, 814, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879], "classification_report": [0, 15], "train_test_split": [0, 15], "usr": [0, 7, 8, 9, 10, 11, 13, 14, 46, 47, 48, 51, 821], "local": [0, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 37, 38, 39, 46, 47, 48, 51, 382, 507, 558, 635, 815, 821, 825, 828, 836, 839, 844, 846], "lib": [0, 7, 8, 9, 10, 13, 15, 27, 28, 29, 30, 46, 47, 48, 51], "python3": [0, 7, 8, 9, 10, 12, 13, 27, 28, 29, 30, 32, 46, 48, 51, 821, 822], "10": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 44, 46, 48, 50, 51, 54, 57, 58, 59, 60, 62, 63, 67, 69, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104, 127, 137, 138, 139, 223, 231, 232, 235, 236, 239, 246, 251, 253, 259, 261, 263, 274, 280, 287, 288, 293, 302, 335, 336, 337, 340, 344, 345, 347, 349, 350, 352, 353, 354, 356, 357, 361, 364, 373, 376, 379, 388, 395, 396, 397, 398, 408, 413, 414, 418, 419, 420, 421, 423, 453, 465, 468, 471, 475, 480, 490, 491, 500, 521, 524, 525, 528, 530, 533, 546, 547, 548, 550, 553, 554, 556, 561, 562, 570, 578, 582, 587, 593, 595, 607, 610, 622, 630, 633, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 648, 651, 652, 654, 660, 670, 672, 676, 677, 678, 679, 680, 683, 688, 689, 690, 692, 694, 704, 709, 710, 711, 712, 714, 725, 727, 730, 738, 739, 740, 741, 742, 748, 750, 756, 758, 759, 760, 761, 763, 764, 766, 767, 777, 779, 797, 814, 818, 821, 825, 829, 830, 831, 833, 836, 841, 844, 846, 851, 853, 854, 862, 867, 877], "dist": [0, 7, 8, 9, 10, 13, 46, 47, 48, 51], "packag": [0, 2, 4, 7, 8, 9, 10, 12, 13, 14, 17, 27, 28, 29, 30, 33, 46, 47, 48, 51, 806, 818, 821, 830, 843, 857, 858, 872, 874], "except": [0, 7, 9, 10, 13, 14, 24, 27, 28, 29, 30, 47, 48, 51, 58, 59, 65, 67, 72, 75, 81, 82, 86, 90, 95, 155, 336, 337, 342, 361, 373, 379, 383, 388, 469, 493, 497, 510, 529, 530, 545, 563, 580, 596, 602, 631, 635, 638, 640, 644, 645, 649, 684, 701, 703, 711, 740, 741, 742, 748, 768, 769, 772, 775, 779, 822, 823, 824, 825, 826, 830, 831, 832, 834, 836, 838, 842, 843, 847, 848, 849, 853, 857], "py": [0, 6, 7, 8, 9, 10, 12, 14, 24, 27, 28, 29, 30, 46, 48, 51, 94, 377, 448, 760, 802, 807, 814, 820, 821, 822, 825, 827, 830, 831, 832, 834, 835, 836, 837, 838, 839, 843, 844, 846, 847, 851, 853, 855, 856], "383": [0, 7, 9, 10, 24], "userwarn": [0, 7, 8, 9, 10, 12, 14, 24, 27, 28, 29, 30, 51], "current": [0, 7, 9, 10, 13, 14, 23, 24, 27, 28, 29, 30, 32, 33, 46, 47, 53, 58, 59, 75, 81, 104, 123, 167, 168, 171, 188, 189, 190, 191, 192, 193, 199, 200, 201, 202, 207, 209, 377, 379, 429, 430, 485, 493, 551, 552, 555, 558, 560, 564, 575, 576, 596, 629, 631, 632, 635, 638, 642, 673, 719, 729, 730, 774, 778, 794, 795, 802, 803, 808, 811, 812, 814, 816, 820, 821, 822, 825, 827, 829, 830, 831, 832, 835, 836, 837, 839, 842, 843, 844, 845, 846, 849, 851, 856, 857, 863, 865, 872, 878, 879], "39": [0, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 27, 28, 29, 30, 44, 46, 47, 48, 49, 51, 52, 57, 58, 63, 67, 74, 80, 81, 83, 86, 90, 113, 227, 262, 264, 266, 296, 297, 300, 368, 376, 388, 396, 398, 415, 418, 524, 616, 627, 633, 636, 638, 648, 676, 683, 741, 760], "doe": [0, 6, 7, 9, 10, 13, 14, 15, 23, 24, 27, 28, 29, 30, 32, 45, 47, 57, 58, 59, 65, 75, 80, 81, 88, 98, 148, 275, 277, 285, 329, 370, 377, 378, 388, 389, 430, 457, 458, 529, 530, 534, 563, 630, 633, 635, 638, 640, 673, 709, 772, 808, 818, 820, 822, 824, 827, 830, 831, 833, 834, 836, 837, 838, 839, 842, 843, 844, 846, 849, 851, 853, 854, 857, 859, 862, 865, 868, 872, 873, 879], "support": [0, 5, 6, 7, 9, 10, 13, 14, 15, 23, 24, 27, 28, 29, 30, 32, 35, 47, 56, 58, 59, 63, 79, 81, 82, 86, 148, 167, 171, 193, 200, 215, 224, 241, 248, 269, 270, 274, 284, 303, 329, 350, 368, 370, 373, 377, 379, 412, 430, 439, 493, 539, 551, 560, 563, 564, 581, 596, 630, 631, 632, 633, 635, 637, 638, 661, 673, 674, 675, 679, 688, 695, 772, 778, 785, 797, 802, 803, 807, 812, 814, 816, 818, 820, 821, 822, 825, 826, 828, 832, 833, 834, 836, 838, 839, 841, 842, 844, 846, 847, 849, 850, 851, 853, 854, 856, 858, 859, 861, 862, 863, 866, 869, 871, 872, 875, 877, 878, 879], "inplac": [0, 7, 8, 9, 10, 12, 13, 14, 15, 24, 27, 28, 29, 30, 53, 59, 75, 82, 98, 101, 537, 539, 560, 563, 564, 581, 582, 635, 642, 726, 727, 731, 736, 737, 784, 785, 790, 797, 824, 826, 833, 836, 838, 840, 843, 849, 853, 855], "nativ": [0, 4, 5, 6, 7, 9, 10, 13, 14, 23, 24, 27, 28, 29, 30, 32, 33, 53, 54, 55, 56, 59, 76, 79, 82, 103, 107, 141, 151, 152, 158, 159, 160, 161, 162, 163, 177, 180, 195, 196, 197, 198, 208, 216, 220, 563, 565, 569, 576, 581, 599, 630, 631, 632, 635, 774, 785, 790, 802, 818, 820, 831, 832, 835, 836, 839, 840, 842, 843, 844, 846, 851, 853, 854, 859, 865, 866, 867, 870, 879], "would": [0, 6, 7, 8, 9, 10, 13, 14, 15, 24, 26, 27, 28, 29, 30, 32, 33, 36, 38, 40, 48, 54, 56, 58, 77, 79, 81, 88, 114, 118, 129, 215, 376, 379, 404, 409, 463, 464, 471, 473, 475, 476, 477, 484, 488, 500, 627, 632, 703, 704, 705, 707, 709, 710, 712, 714, 779, 789, 793, 814, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 834, 836, 838, 840, 842, 843, 844, 846, 847, 849, 850, 851, 853, 855, 856, 857, 858, 862, 865, 872, 878], "quietli": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30], "new": [0, 1, 7, 9, 10, 11, 14, 16, 17, 19, 21, 24, 27, 28, 29, 30, 32, 33, 34, 48, 50, 53, 58, 59, 60, 65, 66, 75, 77, 81, 82, 83, 86, 88, 89, 131, 134, 136, 137, 142, 143, 144, 149, 150, 187, 210, 230, 276, 278, 282, 335, 340, 352, 357, 373, 376, 379, 388, 412, 461, 469, 470, 484, 490, 497, 530, 546, 547, 548, 550, 553, 554, 556, 577, 578, 581, 583, 590, 593, 594, 600, 617, 620, 622, 623, 624, 630, 631, 632, 633, 635, 636, 637, 640, 642, 643, 664, 676, 683, 703, 707, 711, 724, 736, 737, 738, 790, 793, 796, 797, 802, 808, 815, 817, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 833, 834, 836, 837, 840, 842, 843, 844, 845, 846, 847, 849, 850, 853, 856, 858, 859, 861, 862, 863, 865, 870, 874, 878, 879], "when": [0, 6, 7, 8, 9, 10, 12, 13, 14, 15, 23, 24, 25, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 47, 49, 53, 54, 55, 57, 58, 63, 64, 67, 68, 71, 75, 77, 78, 80, 81, 86, 87, 90, 91, 94, 104, 142, 153, 224, 241, 246, 248, 264, 274, 292, 293, 301, 336, 337, 368, 373, 376, 377, 378, 382, 383, 388, 399, 412, 424, 431, 435, 446, 452, 453, 458, 502, 504, 510, 530, 533, 563, 579, 587, 594, 630, 631, 633, 635, 637, 638, 639, 640, 642, 644, 645, 648, 650, 662, 664, 681, 686, 697, 698, 699, 707, 730, 731, 740, 741, 742, 745, 746, 748, 749, 761, 763, 765, 767, 777, 780, 792, 793, 794, 795, 796, 802, 812, 814, 815, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 856, 857, 858, 861, 862, 865, 866, 870, 872, 875, 876, 877, 878], "lead": [0, 7, 8, 9, 10, 14, 24, 27, 28, 29, 30, 63, 75, 86, 104, 248, 377, 441, 581, 633, 635, 638, 685, 688, 779, 830, 831, 833, 845, 847, 857, 862, 863], "memori": [0, 4, 6, 7, 8, 9, 10, 14, 24, 27, 28, 29, 30, 54, 58, 65, 77, 81, 88, 129, 140, 196, 208, 214, 216, 220, 379, 388, 463, 464, 471, 473, 475, 476, 477, 484, 500, 530, 576, 581, 605, 630, 632, 635, 637, 640, 662, 663, 703, 704, 705, 707, 709, 710, 712, 714, 808, 812, 830, 831, 832, 842, 843, 849, 851, 857, 865, 872, 874, 875, 876], "overhead": [0, 7, 8, 9, 10, 14, 24, 25, 27, 28, 29, 30, 32, 33, 35, 857, 865, 875], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 24, 25, 27, 28, 29, 30, 32, 35, 37, 39, 44, 45, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 65, 67, 69, 70, 71, 75, 77, 78, 80, 81, 82, 83, 85, 86, 88, 90, 92, 94, 98, 99, 100, 101, 102, 103, 117, 127, 132, 137, 139, 140, 142, 144, 146, 147, 148, 150, 153, 154, 155, 166, 169, 214, 221, 222, 223, 224, 226, 228, 232, 234, 237, 241, 247, 248, 254, 274, 276, 278, 281, 283, 284, 285, 294, 302, 314, 328, 329, 330, 331, 332, 333, 336, 337, 339, 347, 363, 368, 370, 373, 376, 377, 378, 379, 382, 384, 386, 388, 395, 396, 397, 413, 414, 415, 416, 418, 419, 420, 421, 423, 430, 435, 436, 446, 447, 448, 449, 450, 452, 453, 455, 458, 468, 470, 485, 493, 494, 497, 502, 504, 514, 516, 521, 522, 523, 524, 525, 526, 527, 533, 570, 625, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 701, 704, 705, 707, 708, 710, 711, 716, 717, 732, 742, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 774, 777, 778, 779, 785, 793, 807, 814, 821, 822, 826, 827, 829, 830, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 857, 861, 863, 865, 867, 869, 871, 878, 879], "appli": [0, 7, 9, 10, 11, 14, 24, 27, 28, 29, 30, 32, 33, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 373, 374, 376, 377, 378, 379, 382, 388, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 412, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 627, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 688, 692, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 725, 728, 731, 732, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 779, 780, 789, 793, 796, 814, 820, 821, 822, 826, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 843, 846, 847, 849, 853, 854, 855, 856, 857, 865, 866, 873], "view": [0, 7, 8, 9, 10, 14, 24, 27, 28, 29, 30, 58, 65, 81, 103, 134, 145, 379, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 497, 500, 556, 630, 635, 640, 703, 704, 705, 707, 709, 710, 712, 714, 821, 822, 835, 872], "If": [0, 1, 2, 4, 5, 6, 7, 9, 10, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 47, 50, 51, 53, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 99, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 181, 197, 213, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 329, 330, 332, 335, 336, 337, 338, 339, 341, 342, 343, 347, 351, 352, 357, 358, 360, 362, 363, 364, 370, 373, 374, 376, 377, 378, 379, 382, 383, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 405, 408, 410, 412, 413, 414, 415, 420, 421, 422, 424, 429, 431, 433, 435, 436, 443, 445, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 480, 484, 490, 491, 492, 493, 494, 495, 497, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 569, 570, 577, 578, 582, 592, 593, 594, 596, 598, 600, 601, 614, 615, 618, 620, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 660, 661, 664, 667, 668, 669, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 731, 732, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 792, 793, 795, 796, 802, 808, 812, 814, 815, 816, 817, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 856, 857, 858, 861, 865, 866, 867], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 81, 82, 98, 103, 104, 379, 388, 473, 530, 553, 554, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 664, 789, 790, 792, 793, 795, 796, 797, 798, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 872, 880], "want": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 45, 46, 48, 58, 73, 81, 96, 241, 274, 379, 473, 633, 795, 814, 815, 816, 820, 821, 822, 828, 830, 832, 835, 837, 839, 840, 841, 842, 846, 849, 854, 855, 856, 857, 858, 862, 866], "control": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30, 40, 58, 81, 148, 297, 329, 368, 370, 376, 379, 400, 401, 402, 468, 494, 581, 630, 635, 638, 671, 829, 831, 832, 841, 842, 843, 844, 849, 853, 854, 859, 865, 872, 878], "your": [0, 1, 3, 4, 5, 7, 9, 10, 11, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 44, 46, 48, 50, 814, 815, 817, 818, 819, 820, 821, 823, 825, 827, 828, 830, 834, 836, 837, 841, 843, 845, 847, 849, 854, 855, 857, 858, 862, 863, 865, 866, 872, 880], "manag": [0, 7, 9, 10, 14, 23, 24, 27, 28, 29, 30, 32, 581, 605, 635, 815, 823, 827, 831, 832, 842, 845, 857, 863, 874, 876], "consid": [0, 6, 7, 9, 10, 13, 14, 15, 24, 27, 28, 29, 30, 37, 38, 58, 63, 69, 81, 86, 119, 148, 269, 270, 329, 335, 340, 352, 370, 373, 377, 388, 431, 435, 446, 523, 627, 630, 633, 638, 646, 671, 681, 750, 751, 752, 753, 779, 792, 826, 830, 831, 839, 841, 847, 849, 852, 853, 854, 861, 862, 865, 869, 873, 877, 879], "do": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 44, 46, 48, 58, 59, 75, 81, 82, 241, 274, 283, 376, 378, 379, 388, 422, 458, 470, 530, 533, 563, 633, 635, 642, 719, 726, 729, 730, 731, 736, 779, 808, 814, 818, 820, 821, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 849, 851, 853, 854, 855, 856, 857, 859, 863, 873, 878, 879], "set_inplace_mod": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30, 605, 635], "strict": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30, 581, 605, 635], "should": [0, 1, 5, 7, 9, 10, 13, 14, 15, 24, 27, 28, 29, 30, 49, 52, 54, 57, 58, 59, 60, 62, 63, 65, 67, 68, 69, 71, 74, 75, 77, 80, 81, 82, 83, 85, 86, 88, 90, 91, 93, 94, 96, 98, 101, 103, 104, 114, 118, 126, 140, 142, 146, 147, 155, 180, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 303, 314, 330, 336, 337, 349, 353, 354, 355, 356, 360, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 383, 388, 391, 400, 401, 402, 404, 409, 420, 435, 446, 452, 459, 484, 485, 509, 510, 523, 524, 525, 540, 558, 563, 615, 617, 620, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 657, 658, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 692, 694, 695, 707, 723, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 766, 767, 774, 775, 777, 779, 789, 790, 792, 793, 795, 796, 797, 798, 807, 808, 816, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 860, 862, 866, 868, 869, 872, 874, 879], "rais": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30, 47, 48, 54, 58, 59, 67, 69, 72, 75, 77, 81, 82, 88, 90, 92, 95, 129, 155, 244, 279, 336, 337, 347, 373, 376, 378, 379, 383, 388, 410, 421, 458, 463, 464, 471, 473, 475, 476, 477, 484, 493, 500, 510, 529, 530, 539, 563, 581, 583, 594, 596, 602, 606, 631, 633, 635, 638, 640, 644, 645, 646, 648, 649, 678, 680, 694, 703, 704, 705, 707, 709, 710, 711, 712, 714, 740, 741, 742, 748, 753, 761, 763, 768, 769, 772, 779, 797, 822, 825, 827, 831, 832, 835, 842, 843, 847, 848, 851, 853, 858, 862], "error": [0, 7, 9, 10, 13, 14, 15, 24, 27, 28, 29, 30, 38, 49, 51, 57, 58, 62, 75, 80, 81, 85, 111, 243, 291, 336, 337, 344, 345, 373, 377, 378, 379, 388, 389, 446, 452, 454, 456, 493, 530, 534, 581, 627, 633, 635, 637, 638, 648, 667, 686, 689, 761, 763, 779, 797, 811, 815, 819, 820, 821, 822, 825, 826, 827, 830, 831, 832, 833, 837, 838, 843, 846, 847, 848, 853, 857, 863, 872], "whenev": [0, 7, 9, 10, 14, 24, 27, 28, 29, 30, 793, 822, 827, 830, 831, 835, 842, 845, 846, 848, 854], "attempt": [0, 6, 7, 9, 10, 14, 24, 27, 28, 29, 30, 46, 48, 51, 821, 848, 857], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 24, 27, 28, 29, 30, 46, 47, 48, 51, 811, 821, 822, 848, 865, 866, 867], "first": [0, 4, 5, 7, 8, 9, 12, 13, 17, 23, 25, 26, 27, 29, 32, 33, 35, 36, 37, 46, 49, 50, 51, 54, 57, 58, 63, 65, 67, 68, 69, 71, 77, 80, 81, 82, 86, 88, 90, 92, 94, 98, 99, 103, 104, 123, 124, 138, 139, 148, 179, 187, 197, 224, 229, 231, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 259, 260, 261, 266, 267, 268, 270, 271, 274, 277, 279, 290, 291, 303, 313, 314, 329, 331, 332, 333, 335, 348, 350, 351, 352, 358, 362, 363, 368, 370, 373, 376, 377, 378, 379, 386, 388, 399, 429, 430, 431, 433, 437, 459, 469, 471, 475, 482, 485, 487, 488, 491, 499, 510, 512, 516, 524, 525, 526, 533, 538, 629, 630, 631, 632, 633, 635, 637, 638, 640, 641, 642, 645, 646, 647, 648, 664, 669, 672, 673, 674, 676, 678, 683, 685, 686, 688, 690, 692, 694, 707, 708, 711, 712, 716, 717, 718, 719, 720, 729, 730, 732, 744, 745, 746, 750, 751, 752, 755, 756, 758, 759, 774, 792, 793, 794, 795, 797, 802, 814, 816, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 833, 837, 838, 839, 840, 842, 843, 846, 849, 851, 853, 854, 856, 858, 861, 862, 865, 866, 870, 872, 873, 877], "datafram": [0, 872], "allow": [0, 6, 13, 15, 30, 32, 33, 44, 58, 71, 81, 94, 138, 279, 377, 388, 449, 526, 530, 573, 630, 633, 635, 647, 648, 756, 763, 777, 778, 779, 780, 794, 795, 808, 812, 814, 820, 822, 823, 826, 827, 830, 831, 835, 837, 839, 840, 841, 842, 843, 844, 846, 849, 851, 853, 857, 859, 862, 865, 866, 867, 870, 872, 876, 877], "u": [0, 4, 11, 46, 48, 50, 51, 58, 63, 77, 81, 86, 98, 99, 139, 377, 441, 448, 450, 638, 642, 668, 674, 675, 688, 727, 814, 815, 821, 822, 824, 829, 830, 837, 840, 842, 843, 844, 845, 846, 847, 849, 855, 857, 862], "leverag": [0, 29, 32, 33, 814, 821, 842, 866, 870, 872], "explor": [0, 6, 7, 13, 15, 17, 19, 23, 27, 28, 29, 32, 33, 38, 39, 40, 820, 821, 822, 831, 836, 849, 852, 856, 872, 875], "expect": [0, 4, 8, 11, 14, 25, 29, 32, 33, 35, 48, 49, 51, 58, 63, 64, 81, 87, 180, 248, 292, 376, 378, 399, 421, 458, 537, 631, 633, 635, 637, 639, 662, 683, 697, 792, 793, 814, 821, 822, 825, 831, 832, 835, 837, 840, 842, 844, 846, 849, 857, 858, 863, 865, 866, 867], "contain": [0, 9, 23, 32, 33, 47, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 65, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 164, 166, 167, 168, 169, 172, 173, 174, 176, 178, 181, 198, 200, 201, 202, 207, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 373, 375, 376, 377, 378, 379, 382, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 582, 585, 587, 592, 593, 594, 595, 596, 598, 600, 601, 608, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 726, 727, 728, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 784, 785, 793, 794, 795, 797, 798, 802, 807, 808, 812, 814, 816, 818, 820, 821, 824, 825, 826, 827, 828, 830, 831, 833, 834, 836, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 855, 857, 858, 859, 861, 865, 872, 873, 878], "variou": [0, 6, 15, 26, 36, 38, 44, 814, 817, 820, 821, 822, 825, 830, 831, 834, 835, 838, 840, 841, 843, 844, 845, 846, 858, 868, 870, 871, 872, 875, 878], "among": [0, 6, 75, 829, 830, 846, 849, 863, 872], "pattern": [0, 58, 59, 81, 82, 377, 441, 546, 547, 548, 635, 831, 834, 845, 863], "signal": [0, 58, 81, 320, 370, 376, 390, 391, 392, 393, 398, 399, 408, 424, 793, 871, 872], "credit_card_data": 0, "read_csv": [0, 15, 48], "creditcard": 0, "csv": [0, 15, 48], "get": [0, 1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 46, 47, 49, 55, 56, 63, 75, 79, 86, 103, 164, 165, 166, 169, 197, 198, 199, 202, 208, 213, 216, 220, 379, 490, 537, 555, 576, 595, 631, 632, 635, 638, 642, 695, 721, 777, 792, 793, 807, 815, 817, 819, 820, 821, 823, 824, 825, 830, 831, 832, 836, 839, 840, 841, 842, 843, 844, 845, 846, 851, 852, 853, 854, 855, 859, 863, 866, 867, 872, 878], "sens": [0, 825, 831, 833, 843, 845, 853], "re": [0, 13, 15, 21, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 49, 51, 58, 59, 68, 81, 91, 101, 214, 320, 370, 377, 379, 451, 486, 487, 546, 632, 635, 638, 640, 645, 690, 708, 747, 749, 815, 816, 820, 821, 822, 823, 824, 825, 828, 831, 836, 841, 842, 843, 844, 845, 847, 849, 853, 856, 857, 860, 861, 862, 872], "work": [0, 1, 6, 13, 30, 32, 33, 44, 45, 47, 51, 53, 58, 81, 98, 388, 533, 638, 642, 689, 726, 727, 731, 736, 737, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 842, 843, 844, 846, 847, 850, 851, 853, 855, 856, 858, 863, 865, 866, 867, 870, 872, 874, 876, 879], "help": [0, 1, 21, 48, 50, 55, 536, 581, 635, 648, 766, 792, 814, 815, 816, 820, 821, 823, 826, 827, 828, 829, 830, 831, 833, 837, 839, 840, 842, 843, 846, 847, 853, 854, 855, 858, 859, 868, 872, 874, 878], "few": [0, 6, 7, 814, 819, 820, 822, 829, 831, 832, 838, 839, 841, 842, 844, 846, 849, 851, 852, 853, 854, 855, 863, 872, 874], "entri": [0, 58, 65, 75, 81, 88, 92, 99, 138, 377, 379, 383, 447, 474, 476, 477, 509, 630, 640, 642, 709, 732, 750, 821, 830, 846, 872], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 51, 54, 55, 58, 59, 63, 65, 67, 69, 77, 78, 81, 82, 86, 88, 90, 92, 98, 99, 113, 116, 128, 129, 139, 141, 156, 195, 212, 213, 214, 303, 320, 368, 370, 376, 377, 378, 379, 382, 383, 386, 388, 399, 412, 436, 443, 445, 450, 458, 470, 497, 502, 510, 511, 516, 523, 570, 581, 615, 618, 627, 630, 631, 632, 635, 636, 637, 638, 640, 644, 664, 672, 678, 688, 692, 707, 711, 740, 741, 742, 750, 774, 777, 778, 779, 780, 785, 808, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 875, 876, 878, 879], "give": [0, 8, 24, 34, 44, 58, 62, 81, 85, 180, 366, 375, 376, 419, 423, 631, 637, 640, 650, 651, 652, 653, 655, 657, 659, 707, 792, 814, 821, 822, 824, 827, 830, 831, 833, 834, 836, 837, 838, 846, 863, 872, 876], "insight": 0, "structur": [0, 15, 33, 75, 78, 104, 166, 169, 543, 635, 642, 723, 732, 820, 822, 823, 826, 829, 839, 844, 845, 846, 847, 854, 855, 871, 872], "type": [0, 5, 11, 13, 17, 19, 23, 29, 32, 33, 38, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 774, 777, 778, 779, 780, 784, 785, 789, 792, 793, 794, 795, 799, 802, 805, 807, 808, 809, 812, 820, 821, 822, 824, 825, 826, 829, 832, 833, 834, 835, 838, 840, 842, 844, 846, 847, 849, 851, 853, 854, 865, 866, 867, 872, 873, 876], "present": [0, 47, 58, 71, 75, 81, 94, 339, 373, 382, 502, 503, 504, 648, 763, 820, 821, 822, 829, 831, 832, 838, 842, 851, 861, 869, 870, 879], "initi": [0, 5, 6, 9, 32, 33, 49, 58, 62, 71, 75, 81, 85, 94, 104, 377, 388, 435, 446, 452, 531, 532, 637, 648, 662, 663, 763, 790, 793, 794, 795, 797, 798, 812, 814, 817, 822, 823, 827, 831, 832, 836, 844, 846, 851, 862, 865, 866, 867, 872, 878, 879], "qualiti": [0, 817, 822], "below": [0, 2, 12, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 37, 38, 39, 44, 47, 48, 49, 54, 58, 63, 81, 86, 94, 146, 147, 148, 248, 258, 281, 329, 330, 339, 370, 373, 379, 493, 630, 633, 638, 672, 692, 767, 815, 818, 820, 821, 824, 825, 829, 830, 831, 832, 833, 835, 836, 839, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 865, 866, 867, 868, 870, 875, 877], "head": [0, 6, 7, 13, 49, 50, 637, 664, 793, 814, 819, 821, 830, 843, 869], "method": [0, 15, 23, 32, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 153, 154, 155, 156, 166, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 376, 377, 378, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 630, 631, 633, 635, 636, 638, 639, 642, 645, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 688, 689, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 730, 731, 732, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 774, 785, 791, 792, 793, 794, 795, 820, 822, 825, 826, 830, 831, 832, 833, 834, 838, 846, 847, 851, 852, 855, 856, 857, 865, 866, 867, 873, 879], "five": [0, 854], "row": [0, 46, 58, 81, 99, 133, 148, 329, 370, 377, 379, 386, 388, 436, 448, 477, 483, 501, 516, 522, 523, 630, 638, 644, 645, 679, 687, 688, 693, 739, 748, 792], "v1": [0, 855], "v2": [0, 855], "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 872], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 15, 64, 87, 216, 632, 639, 697, 698, 699, 808, 821, 830, 832, 844], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 63, 638, 676], "62": [0, 13, 15, 44, 46, 52, 74, 80, 81, 90, 114, 259, 287, 633, 643, 644, 738, 740, 742], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 13, 25, 44, 51, 57, 83, 90, 222, 264, 376, 398, 408, 620, 633, 636, 638, 679, 680, 741, 846, 854], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 280, 633], "66": [0, 13, 27, 28, 29, 30, 44, 46, 48, 71, 81, 82, 83, 376, 408, 546, 547, 620, 635, 636, 638, 648, 683, 760], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 24, 77, 78, 81, 137, 169, 457, 549, 630, 635, 808, 846], "50": [0, 14, 15, 32, 33, 44, 48, 58, 71, 80, 81, 82, 240, 280, 358, 373, 376, 377, 379, 405, 429, 437, 490, 548, 554, 561, 562, 578, 593, 633, 635, 638, 642, 645, 648, 677, 683, 694, 720, 722, 748, 760, 777, 780, 841, 853, 865, 866], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 15, 27, 28, 29, 30, 44, 46, 47, 51, 52, 57, 58, 80, 81, 82, 85, 90, 114, 119, 139, 235, 266, 274, 376, 379, 388, 397, 398, 468, 524, 541, 627, 630, 633, 635, 741, 742, 854], "column": [0, 15, 48, 58, 63, 81, 86, 98, 99, 133, 148, 329, 370, 377, 379, 386, 388, 430, 436, 448, 469, 474, 476, 477, 481, 483, 516, 522, 523, 630, 638, 673, 674, 679, 685, 687, 688, 693, 777, 792], "It": [0, 1, 4, 7, 14, 15, 24, 27, 28, 29, 30, 32, 33, 34, 35, 44, 45, 46, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 330, 336, 337, 338, 339, 344, 345, 349, 351, 353, 354, 355, 356, 360, 368, 370, 373, 376, 377, 378, 379, 382, 383, 388, 389, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 418, 420, 425, 427, 428, 436, 437, 442, 443, 444, 445, 453, 454, 455, 456, 457, 459, 460, 470, 473, 478, 486, 487, 488, 489, 491, 493, 497, 498, 502, 505, 506, 508, 509, 510, 512, 513, 523, 524, 525, 526, 534, 541, 542, 546, 547, 548, 553, 554, 563, 577, 578, 579, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 687, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 718, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 753, 754, 757, 758, 759, 762, 764, 765, 767, 768, 769, 792, 793, 814, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 864, 867, 870, 872, 873, 875, 876, 877, 878, 879], "just": [0, 6, 11, 13, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 46, 48, 58, 63, 71, 86, 98, 101, 148, 329, 370, 377, 445, 630, 638, 648, 681, 760, 785, 793, 814, 818, 821, 822, 823, 825, 827, 830, 831, 832, 833, 834, 836, 839, 840, 842, 843, 844, 846, 851, 853, 854, 857, 862, 863, 866, 872, 873, 878], "verifi": [0, 6, 9, 10, 15, 29, 326, 327, 370, 820, 831, 832, 843, 846, 847], "consist": [0, 6, 7, 12, 13, 14, 15, 27, 28, 29, 30, 32, 33, 71, 75, 241, 248, 274, 376, 377, 420, 430, 633, 638, 648, 673, 674, 760, 794, 795, 817, 825, 826, 830, 831, 837, 842, 851, 861, 873], "complet": [0, 63, 75, 86, 638, 685, 778, 820, 821, 822, 823, 825, 826, 829, 830, 833, 835, 839, 843, 844, 846, 849, 853, 854, 862, 870], "By": [0, 24, 44, 51, 58, 64, 65, 71, 72, 81, 87, 88, 94, 95, 288, 334, 336, 337, 350, 357, 370, 373, 376, 378, 379, 386, 388, 399, 457, 458, 493, 497, 516, 523, 526, 581, 633, 635, 638, 639, 640, 648, 649, 669, 694, 697, 706, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 821, 827, 831, 833, 835, 839, 841, 842, 843, 851, 855, 856, 865], "tail": [0, 869], "last": [0, 25, 30, 32, 35, 54, 58, 62, 63, 64, 65, 68, 70, 71, 72, 75, 77, 81, 85, 86, 87, 88, 93, 94, 95, 99, 103, 138, 139, 142, 197, 314, 342, 370, 373, 376, 377, 378, 379, 386, 388, 405, 410, 420, 421, 422, 433, 457, 475, 485, 487, 493, 497, 516, 524, 525, 630, 632, 637, 638, 639, 640, 645, 647, 648, 649, 663, 664, 669, 672, 683, 692, 694, 698, 699, 701, 704, 707, 708, 709, 711, 745, 746, 754, 756, 757, 758, 759, 768, 769, 793, 802, 822, 825, 827, 828, 831, 833, 842, 844, 846, 849, 851, 857, 863, 866, 872], "well": [0, 13, 15, 32, 33, 46, 47, 48, 82, 378, 457, 559, 635, 638, 687, 779, 816, 820, 822, 828, 830, 831, 835, 842, 843, 844, 846, 855, 856, 866, 871, 872, 873, 877], "readi": [0, 17, 19, 24, 25, 26, 34, 35, 36, 37, 38, 39, 46, 48, 820, 821], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 7, 15, 44, 48, 82, 594, 638, 648, 683, 760], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 6, 13, 15, 25, 44, 46, 57, 58, 63, 71, 80, 81, 82, 85, 86, 90, 103, 236, 244, 259, 261, 274, 284, 285, 288, 350, 353, 373, 376, 388, 395, 397, 398, 408, 413, 414, 415, 419, 423, 524, 546, 547, 633, 635, 638, 642, 648, 651, 672, 679, 683, 720, 731, 740, 741, 742, 758, 760, 774, 835, 854], "79": [0, 44, 46, 58, 59, 81, 82, 85, 90, 103, 241, 376, 398, 408, 419, 541, 542, 633, 635, 742], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 15, 44, 57, 58, 59, 63, 80, 81, 82, 85, 90, 103, 239, 244, 284, 285, 287, 294, 305, 309, 368, 388, 419, 524, 546, 547, 593, 619, 621, 633, 635, 636, 638, 676, 742], "88": [0, 15, 44, 83, 90, 113, 388, 524, 620, 627, 636, 638, 644, 648, 683, 742, 760], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 46, 835], "understand": [0, 21, 22, 23, 27, 44, 50, 818, 819, 820, 821, 822, 824, 825, 828, 833, 834, 838, 844, 845, 850, 863, 868, 878], "composit": [0, 23, 32, 167, 168, 200, 201, 293, 377, 437, 551, 552, 631, 632, 633, 635, 778, 780, 820, 824, 826, 827, 829, 831, 832, 840, 842, 843, 844, 846, 849, 851, 855, 856, 857, 859, 865, 873], "crucial": [0, 832, 841], "proce": [0, 15, 820, 821], "ani": [0, 1, 6, 7, 8, 12, 13, 17, 19, 21, 22, 23, 24, 25, 34, 35, 38, 44, 45, 46, 47, 48, 50, 51, 53, 54, 56, 57, 58, 59, 63, 72, 73, 77, 79, 80, 81, 82, 95, 96, 98, 103, 104, 123, 124, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 156, 157, 172, 176, 180, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 329, 330, 336, 337, 339, 342, 370, 373, 376, 377, 378, 379, 382, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 421, 422, 431, 436, 453, 474, 485, 493, 497, 502, 503, 504, 523, 526, 529, 530, 531, 535, 545, 546, 547, 548, 549, 553, 557, 559, 561, 565, 567, 568, 586, 592, 594, 601, 602, 609, 615, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 725, 726, 728, 729, 736, 738, 742, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 772, 774, 775, 779, 789, 790, 792, 793, 795, 796, 797, 798, 802, 807, 808, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 873, 875, 878, 879], "info": [0, 13, 46, 811, 812, 814, 828, 834, 837], "concis": 0, "summari": [0, 75, 170, 543, 631, 635, 821, 822, 846], "includ": [0, 1, 6, 13, 15, 21, 25, 35, 40, 54, 57, 58, 59, 63, 68, 71, 72, 75, 77, 80, 81, 82, 86, 91, 94, 95, 127, 128, 129, 138, 139, 141, 148, 221, 245, 249, 250, 251, 254, 256, 259, 267, 275, 288, 293, 315, 318, 319, 320, 323, 329, 332, 334, 336, 337, 341, 342, 343, 346, 347, 348, 349, 351, 353, 354, 356, 357, 358, 359, 362, 363, 370, 373, 376, 379, 388, 395, 396, 397, 427, 430, 432, 476, 477, 479, 482, 484, 486, 489, 511, 513, 514, 522, 526, 528, 529, 531, 532, 533, 559, 614, 630, 633, 635, 637, 638, 642, 644, 645, 648, 649, 662, 673, 693, 695, 719, 742, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 780, 792, 793, 796, 810, 812, 814, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 862, 865, 866, 869, 870, 872, 874, 877, 878, 879], "number": [0, 46, 48, 49, 50, 51, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 80, 81, 82, 85, 86, 87, 88, 90, 91, 92, 94, 95, 98, 99, 101, 103, 104, 107, 127, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 148, 154, 159, 160, 161, 162, 163, 165, 166, 169, 172, 173, 174, 176, 178, 181, 205, 206, 207, 221, 222, 223, 224, 225, 227, 229, 230, 237, 239, 241, 242, 244, 246, 247, 248, 254, 255, 256, 258, 262, 264, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285, 287, 288, 292, 294, 320, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 352, 357, 361, 370, 373, 376, 377, 378, 379, 382, 388, 410, 421, 424, 427, 430, 434, 435, 436, 446, 450, 452, 453, 463, 464, 465, 485, 486, 487, 488, 489, 491, 493, 495, 497, 499, 502, 503, 504, 521, 523, 524, 525, 526, 532, 550, 557, 575, 592, 593, 594, 601, 614, 615, 628, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 644, 645, 646, 648, 649, 650, 657, 658, 660, 662, 664, 669, 673, 674, 675, 681, 686, 688, 692, 693, 694, 697, 700, 702, 703, 705, 706, 708, 709, 711, 713, 715, 716, 717, 718, 739, 743, 748, 750, 751, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 785, 792, 793, 796, 808, 812, 814, 821, 822, 829, 830, 831, 832, 833, 840, 841, 842, 846, 847, 848, 849, 851, 854, 860, 861, 865], "presenc": [0, 772, 829, 842], "null": [0, 821, 836], "each": [0, 11, 13, 14, 15, 25, 26, 27, 32, 33, 35, 36, 37, 39, 46, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 68, 69, 71, 75, 78, 80, 81, 82, 83, 85, 86, 88, 91, 92, 94, 98, 99, 101, 103, 104, 112, 113, 115, 116, 117, 119, 123, 140, 154, 166, 169, 214, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 298, 299, 304, 306, 307, 308, 310, 311, 312, 317, 328, 331, 332, 333, 339, 347, 351, 355, 360, 363, 368, 370, 373, 376, 377, 379, 382, 383, 386, 388, 395, 396, 397, 400, 401, 402, 405, 413, 414, 415, 416, 419, 421, 422, 423, 430, 431, 436, 445, 446, 450, 452, 463, 464, 465, 469, 470, 471, 476, 477, 479, 480, 482, 484, 485, 488, 490, 499, 500, 507, 509, 516, 521, 522, 523, 524, 525, 526, 535, 538, 546, 553, 554, 570, 595, 615, 617, 618, 620, 622, 623, 624, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 642, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 668, 669, 670, 673, 674, 675, 678, 680, 681, 682, 684, 686, 687, 688, 693, 702, 706, 708, 709, 711, 713, 715, 725, 732, 739, 748, 750, 751, 753, 759, 760, 767, 774, 777, 779, 785, 793, 796, 797, 798, 808, 812, 817, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 856, 857, 861, 862, 863, 865, 866, 868, 869, 873, 875, 878], "invalu": 0, "plan": [0, 858], "right": [0, 47, 58, 63, 75, 81, 86, 104, 121, 122, 233, 235, 288, 351, 373, 376, 377, 379, 411, 441, 447, 448, 450, 476, 546, 629, 633, 635, 638, 647, 688, 693, 756, 777, 815, 820, 821, 822, 824, 825, 833, 836, 849, 854, 865], "format": [0, 1, 29, 30, 32, 33, 44, 46, 47, 48, 56, 59, 62, 71, 74, 75, 76, 79, 85, 101, 119, 164, 198, 376, 377, 387, 418, 451, 519, 546, 627, 631, 632, 635, 637, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 662, 760, 770, 771, 772, 789, 814, 821, 822, 824, 830, 831, 832, 833, 834, 835, 843, 845, 854, 866, 868, 870, 872, 873], "lt": [0, 4, 6, 7, 12, 13, 17, 19, 23, 27, 28, 29, 30, 44, 46, 48, 104], "core": [0, 6, 27, 28, 30, 46, 47, 48, 50, 51, 58, 81, 98, 101, 205, 377, 435, 446, 451, 452, 632, 821, 832, 836, 846, 856, 861, 870, 871, 872, 873, 877, 879], "frame": [0, 48, 58, 81, 320, 370, 376, 424, 805, 862, 872], "gt": [0, 4, 6, 7, 12, 13, 17, 19, 23, 27, 28, 29, 30, 44, 46, 48, 51, 104, 844, 851], "rangeindex": 0, "284807": 0, "total": [0, 46, 48, 58, 71, 75, 81, 94, 104, 135, 216, 331, 332, 333, 341, 370, 373, 378, 453, 630, 632, 645, 648, 748, 765, 767, 808, 815, 821, 822, 831, 832, 833, 846, 849, 854, 855, 857, 863], "non": [0, 7, 25, 35, 55, 57, 58, 63, 67, 68, 71, 72, 78, 80, 81, 86, 90, 91, 94, 95, 135, 153, 171, 180, 249, 269, 270, 275, 336, 337, 341, 348, 361, 373, 376, 377, 379, 388, 420, 431, 435, 441, 464, 465, 526, 529, 630, 631, 633, 638, 642, 644, 645, 648, 649, 669, 670, 679, 681, 688, 690, 694, 695, 732, 741, 745, 746, 747, 748, 761, 762, 763, 764, 765, 767, 768, 769, 777, 792, 794, 795, 797, 826, 829, 833, 851, 865, 866, 867, 872], "count": [0, 50, 58, 65, 69, 72, 77, 81, 88, 92, 95, 135, 207, 341, 373, 379, 388, 493, 497, 499, 521, 526, 630, 632, 638, 640, 646, 649, 669, 694, 701, 704, 750, 751, 768, 769, 828, 829, 833, 854], "dtype": [0, 4, 8, 12, 15, 19, 25, 27, 28, 29, 30, 44, 47, 54, 55, 58, 59, 62, 63, 67, 68, 71, 75, 77, 78, 80, 81, 82, 85, 86, 90, 91, 94, 103, 106, 107, 108, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 209, 236, 240, 272, 273, 275, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 334, 339, 341, 357, 370, 373, 376, 377, 378, 379, 383, 388, 398, 408, 420, 421, 424, 447, 453, 458, 469, 493, 509, 510, 511, 512, 513, 523, 524, 525, 526, 529, 532, 533, 550, 551, 552, 554, 563, 572, 600, 630, 631, 632, 633, 635, 637, 638, 641, 644, 645, 647, 648, 649, 653, 660, 679, 695, 717, 718, 740, 741, 742, 745, 746, 747, 756, 757, 758, 759, 762, 764, 766, 768, 769, 772, 774, 777, 779, 780, 792, 793, 794, 795, 796, 798, 814, 818, 825, 827, 831, 832, 833, 835, 836, 839, 840, 842, 843, 844, 846, 847, 851, 853, 866], "float64": [0, 27, 28, 55, 58, 67, 71, 77, 78, 80, 81, 82, 90, 94, 127, 135, 136, 153, 156, 160, 161, 166, 167, 170, 171, 176, 177, 181, 183, 184, 190, 193, 275, 347, 373, 378, 388, 453, 458, 523, 572, 630, 631, 635, 638, 644, 674, 675, 679, 695, 741, 742, 759, 774, 777, 778, 831, 844, 846], "v10": 0, "v11": 0, "12": [0, 4, 6, 7, 8, 11, 12, 13, 15, 23, 25, 27, 28, 29, 30, 44, 46, 47, 48, 55, 57, 58, 59, 62, 63, 67, 71, 78, 80, 81, 82, 85, 86, 88, 89, 90, 94, 103, 104, 169, 224, 226, 231, 235, 236, 239, 241, 242, 243, 261, 274, 277, 284, 287, 294, 295, 318, 319, 350, 353, 354, 370, 373, 376, 379, 388, 395, 396, 397, 398, 400, 404, 405, 413, 414, 418, 419, 420, 421, 423, 468, 469, 471, 475, 480, 497, 500, 513, 524, 530, 531, 532, 542, 546, 547, 578, 584, 593, 607, 633, 635, 637, 638, 640, 642, 643, 644, 645, 646, 648, 651, 655, 660, 661, 672, 674, 676, 679, 683, 687, 689, 690, 692, 694, 704, 708, 710, 712, 714, 731, 738, 740, 741, 742, 749, 750, 758, 759, 760, 764, 766, 777, 821, 827, 829, 831, 833, 841], "v12": 0, "13": [0, 4, 6, 7, 8, 11, 12, 13, 23, 27, 28, 29, 30, 44, 46, 48, 52, 57, 58, 62, 63, 67, 71, 80, 81, 82, 83, 85, 88, 90, 94, 103, 119, 169, 199, 224, 239, 248, 259, 279, 288, 350, 357, 364, 373, 376, 379, 397, 398, 408, 419, 423, 468, 469, 471, 475, 480, 500, 513, 524, 525, 541, 546, 547, 562, 584, 593, 616, 627, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 645, 646, 648, 651, 652, 660, 661, 672, 676, 683, 687, 689, 692, 714, 718, 731, 740, 741, 742, 749, 750, 758, 759, 760, 829, 831, 833, 843], "v13": 0, "v14": 0, "15": [0, 4, 6, 7, 8, 9, 12, 13, 14, 15, 28, 44, 46, 47, 48, 51, 57, 58, 59, 63, 67, 71, 77, 78, 80, 81, 82, 85, 86, 88, 90, 94, 104, 137, 166, 224, 231, 235, 241, 243, 252, 259, 260, 265, 266, 274, 283, 284, 285, 350, 364, 373, 374, 376, 377, 379, 388, 395, 396, 413, 415, 418, 419, 423, 429, 471, 475, 480, 500, 524, 542, 546, 547, 550, 561, 562, 587, 593, 610, 630, 631, 633, 635, 637, 638, 640, 642, 644, 645, 646, 648, 651, 661, 672, 675, 676, 677, 683, 689, 690, 708, 714, 719, 740, 741, 748, 750, 759, 760, 774, 817, 821, 830, 833, 841, 875], "v15": 0, "v16": 0, "17": [0, 6, 8, 9, 10, 13, 14, 15, 27, 28, 29, 30, 44, 46, 48, 51, 52, 58, 63, 74, 80, 81, 82, 83, 85, 86, 90, 104, 113, 114, 139, 224, 241, 266, 274, 305, 313, 364, 370, 376, 379, 395, 396, 404, 405, 408, 409, 413, 414, 419, 423, 475, 547, 562, 616, 618, 627, 630, 633, 635, 636, 637, 638, 642, 644, 651, 660, 661, 672, 676, 727, 740, 741, 742, 744, 829], "v17": 0, "18": [0, 4, 10, 13, 14, 15, 27, 28, 29, 30, 44, 46, 48, 57, 58, 67, 80, 81, 82, 85, 86, 90, 94, 114, 236, 241, 283, 287, 296, 297, 350, 368, 373, 376, 379, 398, 404, 408, 409, 413, 419, 423, 475, 592, 627, 633, 638, 644, 648, 655, 672, 678, 683, 690, 740, 741, 742, 759, 760, 764, 829, 831, 833], "v18": 0, "19": [0, 4, 13, 14, 27, 28, 29, 30, 44, 46, 47, 48, 51, 57, 58, 67, 80, 81, 85, 86, 90, 227, 236, 264, 274, 291, 376, 377, 379, 388, 397, 398, 409, 413, 419, 423, 429, 434, 475, 524, 633, 638, 642, 644, 647, 672, 679, 692, 730, 740, 741, 742, 757, 833], "v19": 0, "20": [0, 4, 9, 10, 13, 15, 19, 44, 46, 47, 48, 51, 57, 58, 59, 62, 67, 71, 80, 81, 82, 85, 86, 90, 94, 236, 240, 244, 280, 284, 288, 305, 350, 352, 354, 373, 376, 379, 395, 397, 413, 419, 423, 468, 490, 546, 553, 554, 556, 578, 582, 593, 633, 635, 638, 644, 645, 648, 651, 652, 663, 672, 677, 679, 683, 690, 740, 748, 749, 758, 759, 760, 764, 766, 814, 830, 849, 853], "v20": 0, "22": [0, 13, 15, 27, 28, 29, 30, 44, 46, 48, 51, 52, 57, 58, 59, 67, 71, 74, 81, 82, 85, 90, 114, 119, 236, 244, 305, 309, 368, 376, 377, 378, 379, 384, 388, 395, 396, 398, 413, 414, 415, 419, 423, 429, 453, 468, 514, 524, 547, 578, 614, 627, 633, 637, 638, 642, 645, 648, 660, 661, 672, 677, 683, 687, 727, 737, 740, 741, 742, 749, 759, 760, 821, 829, 835], "26": [0, 13, 27, 28, 29, 30, 44, 46, 48, 51, 57, 58, 66, 67, 81, 82, 83, 90, 236, 241, 287, 376, 377, 398, 434, 444, 561, 616, 633, 635, 636, 637, 638, 642, 643, 648, 659, 672, 683, 690, 720, 738, 740, 741, 760], "27": [0, 13, 15, 44, 46, 51, 57, 58, 63, 67, 80, 81, 82, 85, 86, 90, 94, 235, 236, 239, 279, 287, 288, 347, 373, 376, 398, 408, 562, 592, 633, 635, 638, 642, 648, 678, 683, 693, 720, 727, 741, 760, 764, 777, 880], "28": [0, 13, 15, 30, 32, 33, 44, 46, 48, 51, 57, 58, 62, 66, 80, 81, 82, 85, 86, 90, 94, 240, 243, 264, 280, 376, 377, 398, 408, 429, 530, 561, 616, 633, 635, 636, 637, 638, 643, 648, 652, 654, 656, 658, 659, 661, 683, 738, 740, 741, 742, 760, 764], "30": [0, 13, 15, 27, 28, 29, 30, 44, 46, 57, 58, 59, 81, 82, 90, 94, 104, 274, 305, 350, 358, 373, 376, 379, 398, 408, 419, 468, 490, 514, 546, 548, 553, 554, 561, 562, 578, 587, 593, 633, 635, 638, 642, 648, 677, 683, 728, 740, 741, 759, 760, 764, 779, 792, 808, 817, 830], "int64": [0, 8, 58, 67, 68, 70, 71, 78, 90, 91, 93, 94, 143, 156, 162, 165, 167, 169, 173, 174, 178, 185, 317, 370, 386, 388, 516, 524, 525, 630, 631, 645, 647, 648, 740, 745, 746, 747, 756, 758, 759, 764, 766, 777, 778, 831, 843, 846, 851], "proceed": [0, 46], "within": [0, 7, 15, 17, 19, 23, 32, 33, 53, 58, 81, 127, 335, 352, 373, 376, 382, 413, 414, 415, 420, 423, 463, 464, 465, 507, 630, 644, 742, 808, 817, 820, 822, 823, 826, 830, 831, 843, 844, 845, 846, 855, 857, 866, 868, 869, 873], "significantli": [0, 9, 11, 14, 32, 58, 63, 81, 86, 377, 450, 638, 688, 830, 861, 870], "impact": [0, 817, 830, 846, 855, 874], "isnul": 0, "sum": [0, 6, 7, 46, 48, 57, 58, 59, 62, 63, 64, 71, 75, 80, 81, 82, 85, 86, 87, 94, 98, 103, 104, 214, 224, 266, 290, 333, 357, 370, 373, 377, 378, 379, 382, 388, 419, 429, 453, 454, 455, 456, 457, 458, 459, 460, 490, 507, 529, 530, 547, 577, 578, 632, 633, 635, 637, 638, 639, 648, 660, 667, 679, 688, 692, 695, 697, 759, 760, 792, 794, 807, 814, 829, 831, 839, 841, 842, 843, 851, 865, 866, 867, 869], "quickli": [0, 6, 821, 822, 830, 854, 855, 861, 863, 872, 879], "appropri": [0, 6, 11, 23, 27, 28, 30, 32, 33, 59, 68, 73, 91, 96, 224, 241, 248, 274, 335, 352, 373, 633, 645, 745, 820, 821, 822, 835, 840, 846], "either": [0, 15, 27, 28, 37, 38, 39, 40, 44, 50, 57, 58, 59, 62, 71, 75, 80, 81, 82, 85, 86, 113, 116, 119, 124, 134, 135, 145, 221, 222, 223, 224, 229, 239, 241, 242, 244, 246, 248, 255, 256, 262, 263, 264, 265, 266, 274, 283, 285, 286, 288, 291, 292, 338, 360, 373, 376, 382, 388, 398, 408, 418, 419, 423, 507, 524, 525, 545, 565, 573, 574, 582, 602, 627, 629, 630, 633, 635, 637, 638, 641, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 678, 683, 686, 690, 716, 717, 718, 758, 759, 764, 766, 779, 793, 794, 795, 802, 816, 820, 821, 822, 827, 828, 829, 831, 832, 833, 834, 835, 837, 839, 842, 843, 844, 845, 846, 849, 851, 854, 857, 858, 866, 872], "imput": [0, 58, 81, 377, 435, 446, 452], "remov": [0, 6, 9, 13, 15, 21, 22, 25, 30, 32, 33, 35, 63, 75, 86, 638, 640, 641, 642, 672, 678, 692, 710, 716, 717, 733, 808, 811, 814, 820, 827, 828, 830, 831, 834, 839, 845, 846, 849, 856, 865, 866, 872], "maintain": [0, 70, 93, 647, 754, 757, 814, 821, 822, 825, 837, 842, 844, 845, 846, 861, 871], "integr": [0, 4, 5, 6, 17, 19, 26, 33, 36, 55, 57, 58, 78, 80, 81, 153, 293, 356, 373, 388, 526, 631, 633, 814, 819, 821, 823, 824, 840, 866, 870, 872, 874, 875, 876], "check": [0, 4, 5, 11, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 49, 51, 53, 55, 59, 63, 75, 78, 82, 86, 119, 157, 158, 167, 168, 171, 173, 174, 175, 178, 193, 200, 201, 208, 220, 539, 549, 551, 552, 559, 565, 566, 567, 568, 569, 585, 596, 608, 614, 627, 631, 632, 635, 638, 642, 674, 675, 681, 719, 729, 730, 731, 772, 779, 807, 808, 814, 815, 816, 819, 820, 821, 822, 823, 825, 829, 830, 832, 833, 835, 840, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 858, 865], "A": [0, 6, 32, 33, 47, 54, 55, 58, 59, 65, 67, 71, 72, 75, 78, 80, 81, 82, 85, 86, 88, 90, 92, 95, 98, 99, 104, 123, 124, 126, 133, 141, 148, 154, 195, 214, 276, 278, 282, 314, 325, 329, 331, 332, 333, 335, 349, 352, 356, 357, 370, 373, 376, 377, 378, 379, 382, 383, 388, 391, 405, 419, 422, 424, 431, 439, 444, 447, 455, 459, 470, 473, 491, 495, 496, 502, 503, 504, 505, 509, 510, 511, 512, 513, 521, 530, 533, 538, 540, 549, 558, 561, 562, 593, 594, 595, 598, 626, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 642, 644, 648, 649, 660, 664, 672, 674, 677, 682, 683, 687, 688, 700, 703, 705, 709, 711, 719, 722, 724, 726, 727, 728, 729, 730, 734, 735, 736, 737, 739, 740, 741, 742, 744, 750, 760, 768, 769, 772, 774, 775, 777, 778, 779, 780, 785, 792, 808, 812, 814, 819, 820, 821, 824, 829, 831, 832, 835, 838, 839, 843, 844, 846, 851, 854, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 872, 873], "critic": [0, 6, 27, 28, 30, 32, 33, 812, 872, 878], "grasp": [0, 843], "imbal": 0, "common": [0, 13, 23, 26, 32, 36, 57, 58, 75, 80, 180, 251, 259, 340, 347, 373, 631, 633, 815, 818, 820, 821, 828, 831, 832, 833, 839, 840, 843, 847, 849, 857, 861, 869, 872, 879], "scenario": [0, 29, 831, 841], "call": [0, 4, 6, 11, 17, 19, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 46, 50, 58, 73, 78, 81, 96, 98, 104, 123, 173, 174, 214, 377, 388, 444, 530, 581, 587, 602, 618, 619, 621, 629, 632, 635, 636, 638, 642, 686, 719, 725, 729, 730, 774, 785, 793, 794, 795, 797, 802, 808, 812, 814, 820, 821, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 853, 854, 855, 856, 857, 862, 865, 866, 867, 872, 873, 876], "value_count": 0, "see": [0, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 24, 25, 30, 32, 33, 34, 35, 39, 44, 45, 51, 52, 55, 57, 58, 63, 68, 69, 71, 72, 74, 80, 81, 86, 91, 94, 95, 98, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 134, 138, 145, 148, 155, 174, 181, 224, 229, 231, 233, 234, 235, 236, 241, 242, 246, 248, 252, 253, 260, 261, 264, 266, 268, 270, 271, 274, 277, 279, 283, 290, 292, 295, 296, 301, 302, 304, 329, 336, 337, 368, 370, 373, 377, 378, 379, 427, 455, 493, 627, 630, 631, 633, 638, 645, 646, 648, 649, 669, 681, 684, 687, 694, 695, 746, 750, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 768, 769, 789, 814, 815, 818, 820, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 843, 844, 846, 849, 851, 853, 854, 857, 861, 868, 880], "instanc": [0, 6, 15, 23, 29, 32, 33, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 166, 169, 172, 173, 174, 176, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 373, 376, 377, 378, 379, 382, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 413, 414, 415, 419, 420, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 588, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 630, 631, 633, 635, 636, 637, 638, 639, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 785, 790, 812, 820, 821, 822, 825, 826, 827, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 846, 854, 855, 856, 859, 865, 873], "typic": [0, 6, 13, 58, 81, 335, 352, 373, 388, 523, 647, 756, 793, 825, 839, 871, 879], "repres": [0, 54, 57, 58, 62, 63, 80, 81, 85, 86, 101, 126, 140, 142, 165, 223, 224, 227, 230, 239, 241, 248, 274, 287, 291, 292, 317, 331, 332, 333, 350, 367, 370, 373, 375, 376, 377, 378, 379, 382, 383, 386, 419, 423, 437, 451, 453, 458, 485, 496, 502, 503, 504, 509, 515, 522, 558, 629, 630, 631, 633, 635, 637, 638, 660, 661, 662, 676, 683, 686, 687, 779, 792, 796, 808, 821, 826, 831, 849, 853, 869, 870, 873], "ones": [0, 6, 13, 23, 30, 32, 44, 50, 54, 58, 60, 62, 67, 75, 77, 81, 85, 90, 133, 137, 142, 144, 150, 200, 201, 237, 314, 370, 388, 532, 616, 630, 632, 633, 636, 637, 655, 656, 740, 741, 742, 778, 820, 826, 830, 833, 838, 839, 845, 846, 853, 854, 872], "how": [0, 3, 4, 5, 6, 8, 11, 13, 14, 17, 19, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 44, 47, 50, 51, 52, 57, 58, 74, 80, 81, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 241, 274, 292, 296, 301, 302, 304, 368, 378, 379, 453, 468, 493, 494, 627, 633, 789, 792, 793, 794, 795, 815, 816, 818, 819, 821, 822, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 861, 863, 868, 872], "approach": [0, 37, 818, 820, 821, 822, 826, 829, 831, 832, 836, 839, 843, 846, 847, 849, 853, 854, 857, 869, 876, 878], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 6, 9, 11, 13, 32, 33, 44, 46, 47, 48, 58, 63, 69, 73, 81, 86, 92, 96, 248, 376, 377, 379, 424, 430, 439, 495, 499, 536, 537, 633, 635, 638, 646, 673, 674, 685, 686, 688, 689, 693, 750, 751, 752, 774, 778, 785, 795, 802, 803, 805, 806, 812, 820, 821, 822, 827, 828, 829, 830, 833, 834, 835, 838, 843, 844, 846, 847, 848, 849, 851, 854, 856, 872, 880], "highli": [0, 47, 820, 872], "imbalanc": 0, "normal": [0, 2, 4, 6, 7, 9, 12, 13, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 58, 66, 67, 81, 89, 90, 98, 99, 360, 373, 376, 382, 388, 398, 399, 404, 405, 408, 409, 410, 420, 421, 502, 503, 504, 505, 506, 507, 508, 523, 526, 640, 643, 644, 701, 711, 738, 739, 741, 792, 793, 796, 814, 820, 842, 843, 849, 854, 865, 867, 870], "unifi": [0, 21, 22, 23, 25, 26, 32, 35, 36, 40, 47, 75, 214, 632, 814, 823, 824, 825, 826, 830, 831, 835, 840, 841, 843, 849, 851, 857, 860, 862, 864, 866, 868, 869, 870, 872, 876, 879], "write": [0, 13, 21, 22, 32, 33, 44, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 330, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 359, 360, 361, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 418, 420, 421, 424, 425, 427, 428, 436, 437, 439, 442, 443, 444, 445, 451, 454, 455, 456, 457, 459, 460, 469, 470, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 542, 546, 547, 548, 553, 554, 563, 577, 578, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 738, 739, 740, 741, 742, 744, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 775, 814, 819, 820, 822, 824, 825, 827, 828, 830, 831, 833, 834, 835, 839, 842, 844, 847, 851, 853, 856, 863, 872, 879], "code": [0, 1, 5, 6, 11, 12, 13, 14, 21, 22, 29, 30, 32, 34, 35, 36, 37, 38, 39, 46, 47, 56, 57, 75, 79, 80, 104, 215, 261, 388, 530, 539, 547, 548, 563, 577, 581, 596, 632, 635, 637, 638, 640, 659, 680, 681, 682, 711, 812, 814, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 844, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879], "agnost": [0, 21, 22, 23, 24, 32, 33, 34, 38, 44, 814, 826, 831, 838, 851, 853, 856, 857, 878, 879], "underli": [0, 23, 32, 33, 44, 58, 65, 81, 88, 101, 231, 234, 236, 271, 378, 379, 458, 475, 633, 638, 640, 686, 707, 829, 842, 849, 865, 872], "deep": [0, 6, 13, 23, 30, 32, 44, 75, 546, 635, 814, 815, 816, 819, 820, 822, 825, 828, 829, 831, 837, 841, 844, 850, 853, 854, 861, 870, 872, 875, 876, 878, 879], "develop": [0, 6, 7, 13, 17, 31, 32, 33, 814, 815, 816, 817, 818, 819, 820, 821, 822, 825, 828, 830, 836, 845, 847, 857, 859, 861, 862, 863, 865, 866, 870, 871, 872, 873, 874, 877, 878, 879], "ar": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 49, 50, 53, 54, 57, 58, 59, 62, 63, 65, 67, 68, 69, 75, 77, 80, 81, 82, 85, 86, 88, 90, 91, 92, 98, 99, 103, 104, 127, 137, 139, 142, 148, 202, 207, 209, 214, 238, 240, 241, 244, 248, 269, 270, 274, 279, 280, 284, 286, 291, 292, 293, 329, 331, 332, 333, 335, 338, 340, 341, 342, 346, 347, 352, 357, 360, 364, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 388, 392, 393, 399, 400, 401, 402, 405, 410, 412, 420, 421, 430, 431, 435, 445, 446, 448, 452, 453, 454, 458, 459, 463, 464, 465, 475, 476, 477, 479, 485, 488, 492, 493, 502, 504, 509, 510, 511, 512, 513, 523, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 549, 555, 560, 564, 575, 576, 585, 596, 608, 618, 630, 632, 633, 635, 636, 637, 638, 640, 642, 644, 645, 646, 660, 661, 662, 664, 667, 669, 673, 674, 675, 678, 679, 681, 684, 685, 688, 689, 693, 694, 695, 700, 701, 704, 708, 710, 720, 725, 730, 731, 732, 740, 741, 742, 745, 746, 747, 748, 750, 752, 772, 774, 777, 778, 779, 780, 785, 792, 795, 798, 799, 807, 808, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880], "tensorflow": [0, 3, 9, 10, 14, 16, 17, 21, 23, 24, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 44, 50, 57, 58, 59, 80, 81, 148, 195, 210, 225, 329, 370, 377, 431, 596, 630, 632, 635, 772, 785, 802, 814, 818, 819, 820, 821, 822, 825, 830, 831, 832, 836, 838, 842, 843, 844, 846, 847, 849, 851, 856, 857, 859, 862, 863, 866, 867, 869, 870, 873, 875, 876, 878, 879], "pytorch": [0, 3, 4, 5, 8, 9, 11, 12, 16, 18, 19, 21, 22, 30, 32, 33, 44, 51, 284, 336, 337, 373, 633, 797, 814, 819, 820, 826, 831, 832, 835, 838, 839, 842, 843, 844, 849, 851, 856, 857, 859, 862, 863, 865, 866, 869, 873, 875, 876, 878, 879], "flexibl": [0, 829, 831, 838, 841, 847, 849, 872], "particularli": [0, 822, 854, 857, 865, 870], "research": [0, 6, 32, 33, 46, 814, 861, 866, 872, 879], "where": [0, 1, 11, 13, 25, 29, 35, 36, 40, 48, 54, 57, 58, 59, 63, 65, 67, 68, 71, 72, 75, 77, 80, 81, 82, 86, 88, 90, 91, 94, 95, 98, 99, 136, 137, 140, 142, 148, 229, 239, 241, 244, 246, 248, 249, 258, 263, 264, 265, 272, 273, 274, 279, 281, 285, 287, 291, 301, 303, 329, 331, 332, 333, 348, 352, 359, 368, 370, 373, 376, 377, 378, 379, 382, 383, 388, 390, 391, 392, 393, 399, 404, 405, 409, 424, 430, 431, 435, 436, 438, 439, 446, 452, 453, 454, 463, 464, 465, 479, 485, 502, 503, 504, 507, 509, 510, 512, 513, 523, 531, 532, 533, 563, 577, 615, 630, 633, 635, 637, 638, 640, 642, 644, 645, 648, 649, 662, 664, 669, 673, 674, 679, 681, 683, 684, 685, 688, 689, 692, 694, 700, 702, 703, 705, 711, 715, 723, 730, 739, 740, 741, 742, 747, 748, 763, 765, 767, 768, 769, 777, 792, 796, 808, 812, 814, 815, 818, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 834, 835, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 854, 855, 856, 857, 858, 861, 862, 863, 865, 870, 879], "abil": [0, 821, 849, 852, 857, 872], "switch": [0, 32, 44, 785, 827, 835, 839, 840, 879], "differ": [0, 4, 5, 6, 9, 11, 13, 14, 15, 17, 21, 22, 26, 27, 28, 32, 33, 36, 37, 38, 39, 57, 58, 59, 63, 71, 75, 81, 82, 94, 103, 104, 113, 116, 166, 224, 241, 248, 249, 274, 290, 335, 342, 347, 348, 352, 373, 376, 377, 379, 388, 410, 421, 446, 452, 469, 476, 477, 491, 524, 525, 533, 553, 554, 627, 631, 633, 635, 637, 638, 640, 648, 660, 661, 676, 686, 701, 711, 758, 759, 764, 766, 767, 772, 777, 785, 794, 795, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 867, 869, 870, 871, 872, 875, 878, 879], "without": [0, 1, 4, 15, 35, 44, 48, 51, 69, 75, 101, 587, 602, 635, 640, 642, 646, 707, 720, 750, 751, 752, 753, 777, 780, 807, 821, 822, 826, 827, 829, 830, 831, 832, 833, 835, 838, 839, 843, 846, 847, 849, 853, 854, 855, 857, 865, 869, 872, 873, 874, 878], "chang": [0, 4, 5, 15, 23, 33, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 376, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 627, 633, 640, 642, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 688, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 731, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 774, 814, 820, 821, 822, 823, 825, 827, 828, 829, 830, 831, 833, 834, 836, 837, 843, 844, 845, 846, 847, 848, 849, 851, 855, 857, 858, 863, 865, 875, 878], "codebas": [0, 6, 13, 32, 33, 212, 213, 632, 815, 817, 824, 831, 837, 842, 843, 845, 846, 847, 850, 863], "signific": [0, 15, 58, 378, 458, 848, 857, 861, 862, 872], "advantag": [0, 6, 13, 30, 32, 33, 814, 821, 822, 831, 842, 843, 858, 866, 872], "effect": [0, 6, 13, 38, 54, 58, 60, 71, 81, 83, 94, 140, 378, 412, 457, 616, 624, 630, 636, 637, 648, 664, 765, 767, 777, 780, 820, 826, 829, 830, 834, 838, 842, 844, 849, 857, 862], "analyz": [0, 820, 859], "done": [0, 46, 48, 51, 638, 675, 819, 820, 821, 822, 825, 828, 830, 832, 833, 836, 837, 842, 843, 846, 854, 865, 866, 872], "two": [0, 26, 36, 38, 44, 54, 58, 63, 69, 81, 82, 86, 103, 104, 124, 127, 133, 140, 146, 147, 148, 179, 187, 235, 249, 250, 284, 329, 330, 335, 348, 349, 351, 352, 354, 356, 363, 370, 373, 376, 377, 378, 379, 388, 405, 428, 429, 430, 439, 444, 453, 455, 459, 464, 485, 491, 495, 523, 533, 538, 629, 630, 631, 633, 635, 637, 638, 640, 646, 662, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 712, 750, 751, 752, 753, 777, 779, 785, 793, 820, 821, 825, 826, 831, 832, 833, 834, 839, 843, 844, 846, 849, 850, 854, 856, 863, 869, 877], "distinct": [0, 58, 69, 81, 331, 332, 333, 370, 646, 750, 751, 752, 753, 817, 821, 829, 834, 841, 842, 843, 850, 862, 872], "one": [0, 4, 6, 11, 13, 14, 17, 19, 21, 22, 25, 26, 29, 30, 32, 33, 35, 36, 48, 49, 50, 54, 58, 59, 62, 63, 65, 68, 69, 71, 75, 77, 80, 81, 82, 83, 85, 86, 88, 89, 91, 92, 93, 94, 98, 127, 130, 140, 142, 143, 144, 154, 156, 214, 235, 241, 248, 249, 266, 272, 273, 274, 293, 303, 313, 316, 317, 335, 341, 344, 345, 348, 349, 352, 353, 354, 356, 357, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 388, 398, 400, 404, 405, 408, 409, 412, 420, 425, 427, 436, 445, 459, 463, 464, 465, 469, 475, 476, 477, 482, 484, 489, 492, 502, 503, 504, 509, 514, 524, 525, 528, 529, 530, 531, 532, 533, 535, 573, 577, 578, 580, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 630, 631, 632, 633, 635, 636, 637, 638, 640, 643, 645, 646, 648, 651, 652, 653, 654, 655, 656, 659, 676, 678, 679, 683, 685, 694, 695, 703, 704, 705, 708, 710, 714, 738, 745, 748, 750, 751, 752, 753, 758, 760, 777, 779, 796, 799, 802, 808, 811, 814, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 853, 854, 856, 857, 858, 859, 862, 863, 866, 872, 873, 875, 878], "anoth": [0, 4, 23, 25, 26, 29, 30, 32, 33, 35, 36, 48, 49, 134, 154, 156, 630, 631, 814, 820, 821, 822, 827, 829, 831, 832, 835, 837, 839, 842, 843, 846, 851, 853, 856, 859, 862, 864, 865, 866, 872, 878], "characterist": [0, 828], "clear": [0, 15, 196, 632, 820, 822, 827, 831, 832, 833, 843, 849, 851, 853, 861, 862, 863, 872], "print": [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 19, 23, 24, 26, 30, 32, 33, 34, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 111, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 153, 154, 155, 156, 158, 164, 165, 166, 167, 168, 171, 173, 174, 176, 181, 193, 194, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 310, 311, 312, 314, 321, 322, 329, 331, 335, 336, 337, 339, 354, 355, 360, 364, 368, 370, 373, 376, 377, 378, 379, 382, 388, 395, 396, 397, 398, 400, 401, 403, 405, 408, 410, 413, 414, 415, 418, 420, 421, 426, 429, 431, 433, 434, 444, 451, 454, 455, 456, 457, 458, 459, 460, 466, 468, 470, 481, 485, 490, 491, 493, 494, 495, 497, 501, 505, 506, 508, 523, 524, 525, 526, 533, 535, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 573, 574, 576, 577, 578, 582, 583, 584, 587, 590, 591, 592, 593, 594, 596, 598, 600, 601, 602, 606, 607, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 802, 807, 808, 812, 821, 822, 829, 831, 833, 844, 846, 848, 851, 853, 854, 855, 865, 867], "shape": [0, 4, 5, 8, 9, 13, 15, 17, 19, 25, 26, 27, 28, 32, 33, 38, 44, 46, 47, 48, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 209, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 336, 337, 338, 339, 340, 342, 344, 345, 347, 349, 351, 353, 354, 355, 356, 360, 361, 363, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 418, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 435, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 468, 470, 473, 478, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 522, 523, 524, 525, 526, 541, 542, 546, 547, 548, 550, 553, 554, 557, 563, 570, 577, 578, 588, 597, 599, 611, 615, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 754, 755, 757, 758, 759, 760, 762, 764, 765, 767, 768, 769, 774, 777, 779, 792, 793, 796, 807, 812, 814, 822, 823, 829, 831, 832, 833, 834, 835, 836, 838, 842, 843, 844, 846, 847, 848, 851, 853, 854, 855, 856, 865, 866], "gain": [0, 15, 792, 822, 823, 825, 850, 855, 872], "descript": [0, 1, 2, 41, 42, 43, 48, 51, 54, 57, 58, 63, 80, 81, 86, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 330, 336, 337, 339, 342, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 485, 493, 497, 523, 526, 553, 557, 559, 561, 592, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 820, 822, 834, 841, 842], "describ": [0, 7, 58, 71, 81, 99, 224, 241, 242, 274, 277, 279, 378, 383, 386, 458, 513, 516, 633, 637, 648, 664, 760, 764, 766, 816, 817, 820, 821, 822, 828, 830, 842, 843, 846, 851, 856, 872], "obtain": [0, 32, 33, 51, 58, 81, 320, 370, 376, 416, 637, 664, 779, 843, 865], "mean": [0, 4, 6, 7, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 47, 48, 58, 59, 62, 64, 65, 67, 71, 73, 75, 77, 81, 82, 85, 87, 88, 90, 94, 96, 98, 135, 214, 331, 341, 370, 373, 376, 377, 378, 379, 382, 383, 388, 405, 410, 428, 441, 453, 454, 455, 456, 457, 458, 459, 460, 470, 475, 485, 502, 504, 510, 529, 530, 547, 618, 619, 621, 626, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 644, 648, 652, 654, 655, 656, 658, 659, 660, 671, 697, 698, 699, 707, 716, 717, 718, 725, 740, 741, 777, 779, 780, 792, 793, 796, 814, 821, 822, 824, 825, 827, 829, 831, 832, 833, 839, 841, 842, 843, 846, 847, 849, 851, 853, 854, 855, 856, 857, 859, 866, 867, 869, 872], "deviat": [0, 66, 67, 71, 89, 90, 94, 643, 644, 648, 738, 741, 765, 779, 792, 796, 825, 863], "minimum": [0, 46, 57, 58, 59, 65, 68, 71, 80, 81, 82, 88, 91, 94, 221, 249, 276, 300, 332, 336, 337, 347, 368, 370, 373, 379, 388, 485, 521, 525, 531, 583, 584, 593, 594, 606, 607, 633, 635, 640, 645, 648, 700, 746, 761, 763, 777, 779, 780, 785, 831, 848, 869, 875, 879], "maximum": [0, 57, 58, 59, 60, 65, 68, 71, 75, 80, 81, 82, 83, 88, 91, 94, 104, 214, 300, 336, 337, 348, 361, 368, 373, 376, 377, 379, 388, 392, 393, 403, 446, 449, 452, 485, 524, 526, 531, 541, 542, 550, 558, 622, 632, 633, 635, 636, 638, 640, 645, 648, 679, 700, 745, 746, 761, 763, 777, 779, 780, 785, 808, 822, 831, 833, 842, 854, 869, 879], "quartil": 0, "overview": [0, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 828, 830, 844, 846, 850], "instrument": 0, "unusu": 0, "might": [0, 6, 7, 12, 13, 38, 59, 99, 180, 545, 631, 635, 818, 820, 821, 822, 830, 831, 833, 836, 837, 840, 843, 846, 847, 849, 851, 853, 854, 859], "indic": [0, 4, 12, 54, 58, 59, 62, 63, 65, 66, 68, 69, 70, 75, 77, 78, 81, 82, 85, 86, 88, 89, 91, 92, 93, 98, 101, 128, 129, 142, 146, 148, 169, 173, 174, 285, 329, 330, 331, 350, 370, 373, 376, 377, 378, 379, 384, 386, 395, 396, 397, 399, 403, 404, 405, 409, 410, 413, 414, 415, 416, 420, 421, 431, 452, 455, 463, 464, 465, 468, 471, 473, 475, 476, 477, 480, 484, 490, 491, 493, 494, 495, 497, 499, 500, 514, 515, 516, 538, 553, 554, 556, 577, 578, 582, 615, 618, 619, 630, 633, 635, 636, 637, 638, 640, 642, 643, 644, 645, 646, 647, 651, 653, 654, 655, 656, 659, 664, 681, 695, 703, 704, 705, 707, 708, 709, 710, 712, 714, 719, 722, 724, 726, 727, 728, 730, 734, 735, 736, 737, 738, 739, 745, 746, 747, 748, 750, 752, 754, 756, 757, 774, 775, 777, 779, 793, 799, 807, 808, 810, 821, 830, 838, 841, 843, 856, 865], "000000": 0, "291022": 0, "std": [0, 4, 6, 7, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 47, 62, 67, 71, 85, 90, 94, 383, 510, 637, 644, 648, 652, 654, 655, 656, 658, 659, 740, 741, 833, 867, 869], "250": 0, "105092": 0, "min": [0, 44, 48, 55, 58, 59, 63, 71, 78, 81, 82, 86, 94, 146, 148, 166, 169, 273, 329, 332, 337, 370, 373, 377, 379, 431, 490, 531, 547, 577, 578, 593, 630, 631, 633, 635, 638, 648, 679, 685, 688, 689, 695, 869], "650000": 0, "75": [0, 4, 7, 8, 13, 44, 57, 58, 80, 81, 82, 85, 90, 120, 138, 227, 229, 241, 243, 254, 316, 349, 350, 370, 373, 419, 533, 548, 561, 593, 627, 630, 633, 635, 638, 642, 644, 651, 677, 683, 727, 742], "050000": 0, "max": [0, 44, 46, 55, 58, 59, 63, 71, 78, 81, 82, 86, 94, 166, 169, 272, 336, 373, 376, 377, 378, 379, 395, 396, 397, 413, 414, 415, 416, 418, 420, 431, 453, 490, 492, 493, 541, 542, 547, 563, 577, 578, 631, 633, 635, 638, 648, 679, 681, 684, 777, 793, 797, 830, 843, 869], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 846], "receiv": [0, 6, 46, 50, 98, 537, 573, 635, 641, 716, 717, 718, 793, 812, 817, 821, 822, 831, 832, 846, 849], "anomali": 0, "financi": 0, "behavior": [0, 4, 8, 58, 69, 241, 248, 274, 283, 389, 534, 581, 605, 633, 635, 646, 750, 751, 752, 753, 820, 828, 829, 830, 831, 842, 843, 844, 846, 849, 851, 857, 869], "associ": [0, 12, 58, 63, 81, 86, 224, 274, 379, 388, 462, 526, 633, 638, 681, 684, 696, 774, 822, 831, 839, 840, 843, 844, 846, 857], "122": [0, 14, 55, 169, 239, 633], "211321": 0, "256": [0, 4, 8, 12, 13, 57, 82, 284, 285, 594, 637, 652, 654, 777], "683288": 0, "250000": 0, "105": [0, 13, 63, 85, 637, 638, 660, 661, 676, 683], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 6, 7, 46, 48, 58, 60, 64, 81, 83, 87, 376, 378, 382, 388, 390, 391, 395, 396, 397, 455, 456, 457, 458, 459, 460, 507, 523, 616, 617, 622, 636, 637, 639, 641, 664, 697, 716, 717, 792, 793], "across": [0, 1, 12, 14, 15, 27, 28, 29, 30, 44, 58, 68, 75, 81, 82, 91, 103, 212, 213, 241, 248, 274, 292, 378, 382, 453, 504, 507, 538, 559, 595, 632, 633, 635, 637, 642, 645, 660, 664, 725, 745, 746, 793, 820, 825, 831, 833, 835, 838, 839, 841, 846, 849, 870, 872, 877], "all": [0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 45, 46, 48, 49, 51, 53, 54, 58, 59, 62, 63, 65, 67, 72, 73, 75, 76, 77, 80, 81, 82, 85, 86, 88, 90, 95, 96, 98, 99, 127, 135, 142, 146, 147, 148, 202, 209, 241, 245, 273, 274, 329, 330, 342, 361, 370, 373, 376, 377, 378, 379, 388, 410, 419, 421, 422, 423, 431, 436, 446, 447, 449, 452, 453, 474, 485, 493, 499, 529, 535, 538, 555, 575, 576, 593, 600, 601, 615, 618, 630, 632, 633, 635, 636, 637, 638, 640, 641, 642, 644, 645, 649, 660, 663, 664, 669, 681, 686, 687, 690, 695, 704, 708, 710, 716, 717, 718, 719, 720, 721, 730, 731, 732, 733, 739, 742, 747, 772, 774, 777, 778, 779, 780, 792, 793, 799, 802, 808, 810, 812, 814, 815, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 875, 878, 879, 880], "group": [0, 6, 13, 58, 81, 379, 382, 499, 503, 637, 642, 650, 657, 658, 721, 812, 823, 825, 829, 831, 839, 843, 844, 868, 871, 877], "calcul": [0, 4, 15, 46, 57, 58, 59, 64, 71, 75, 80, 81, 82, 86, 87, 94, 104, 221, 222, 223, 224, 225, 226, 227, 228, 229, 238, 239, 241, 244, 245, 246, 262, 263, 264, 265, 266, 267, 272, 273, 274, 279, 286, 287, 288, 290, 291, 292, 298, 308, 336, 337, 350, 360, 373, 376, 377, 378, 379, 382, 388, 395, 396, 397, 431, 453, 458, 485, 502, 504, 530, 570, 633, 635, 638, 639, 648, 675, 683, 686, 697, 698, 699, 761, 762, 763, 764, 765, 766, 767, 777, 779, 792, 793, 796, 820, 834, 851, 862, 865], "pictur": [0, 48, 814, 820, 851, 861], "vital": [0, 856, 861], "select": [0, 23, 32, 37, 50, 58, 71, 81, 94, 377, 379, 388, 431, 444, 493, 494, 497, 524, 525, 648, 758, 759, 820, 821, 822, 830, 836, 842, 846, 851, 853, 856, 857, 872, 875, 876], "guid": [0, 17, 30, 814, 815, 820, 821, 822, 828, 837, 843, 845, 878], "recogn": [0, 48, 817, 823], "both": [0, 6, 9, 11, 12, 14, 15, 17, 19, 27, 29, 32, 33, 37, 38, 45, 47, 54, 57, 58, 59, 62, 63, 77, 80, 81, 82, 85, 86, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 156, 172, 176, 179, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 330, 336, 337, 339, 340, 342, 347, 352, 370, 373, 376, 377, 379, 383, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 479, 485, 493, 496, 497, 509, 523, 526, 553, 557, 559, 561, 570, 592, 601, 625, 626, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 793, 814, 818, 820, 822, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 842, 843, 846, 849, 851, 853, 854, 855, 856, 857, 865, 866, 872, 875, 877, 878, 879], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 48], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 13, 17, 19, 21, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 46, 51, 56, 58, 59, 65, 79, 81, 82, 88, 98, 99, 208, 215, 216, 220, 224, 241, 242, 248, 256, 257, 274, 277, 283, 285, 376, 379, 382, 400, 401, 402, 422, 463, 464, 465, 471, 473, 475, 476, 477, 478, 480, 484, 490, 491, 500, 502, 504, 536, 556, 563, 581, 632, 633, 635, 638, 640, 644, 686, 703, 704, 705, 707, 709, 710, 712, 714, 742, 820, 821, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 848, 849, 853, 854, 855, 856, 857, 861, 863, 865, 866, 867, 868, 870, 872, 873, 875, 878], "outnumb": 0, "address": [0, 32, 33, 58, 59, 81, 379, 493, 600, 635, 820, 822, 825, 826, 838, 845, 851, 863, 868, 870, 872, 878], "fair": 0, "dure": [0, 11, 13, 14, 25, 27, 32, 35, 37, 38, 56, 60, 71, 75, 79, 83, 94, 215, 376, 400, 401, 402, 581, 602, 616, 617, 622, 632, 635, 636, 637, 638, 641, 648, 660, 678, 716, 717, 718, 765, 767, 785, 796, 797, 812, 821, 829, 831, 832, 835, 839, 840, 842, 843, 844, 845, 846, 849, 857, 865, 872, 873, 878], "similar": [0, 1, 6, 13, 23, 32, 33, 58, 283, 378, 453, 633, 637, 664, 793, 818, 820, 821, 829, 830, 831, 832, 835, 836, 837, 839, 840, 841, 843, 844, 846, 847, 854, 857, 861, 866, 868, 869, 870, 871, 878], "here": [0, 2, 4, 6, 7, 9, 13, 15, 18, 20, 23, 28, 31, 32, 33, 44, 46, 47, 48, 49, 51, 81, 284, 460, 633, 814, 818, 819, 820, 821, 822, 825, 827, 828, 829, 830, 831, 833, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 851, 852, 853, 854, 855, 856, 857, 865, 866, 867, 872, 873, 880], "take": [0, 4, 6, 12, 13, 23, 30, 32, 33, 38, 44, 46, 49, 58, 63, 65, 71, 81, 88, 98, 123, 124, 126, 142, 281, 288, 303, 368, 376, 377, 379, 396, 404, 409, 414, 424, 433, 447, 468, 475, 494, 524, 525, 629, 630, 633, 637, 638, 640, 641, 664, 678, 682, 707, 718, 758, 777, 785, 792, 793, 807, 812, 814, 815, 820, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 846, 849, 851, 853, 855, 856, 857, 858, 863, 865, 866, 869, 870, 878], "random": [0, 6, 9, 11, 13, 14, 17, 19, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 46, 48, 49, 58, 62, 75, 81, 85, 324, 325, 326, 327, 328, 370, 377, 378, 435, 446, 452, 458, 509, 510, 511, 512, 513, 637, 660, 739, 740, 741, 742, 743, 744, 777, 779, 792, 807, 808, 814, 820, 832, 844, 846, 847, 856, 866, 867, 872], "match": [0, 1, 55, 58, 75, 78, 81, 153, 248, 283, 340, 342, 373, 376, 378, 379, 421, 453, 468, 490, 494, 573, 631, 633, 635, 638, 674, 675, 679, 695, 772, 818, 820, 826, 828, 829, 833, 836, 844, 873, 878], "prevent": [0, 58, 60, 71, 81, 83, 94, 378, 458, 558, 616, 617, 622, 635, 636, 637, 648, 660, 762, 766, 792, 797, 820, 822, 830, 831, 835, 842, 843, 847], "being": [0, 6, 7, 9, 13, 32, 33, 44, 58, 75, 81, 96, 103, 107, 127, 377, 379, 441, 469, 485, 587, 630, 635, 637, 638, 662, 675, 774, 780, 792, 821, 822, 825, 826, 827, 829, 831, 832, 833, 836, 838, 840, 842, 843, 844, 846, 847, 849, 851, 854, 857, 862, 863, 868, 870, 871, 872, 873, 878, 879], "bias": [0, 637, 662], "toward": [0, 58, 65, 81, 88, 248, 295, 346, 358, 373, 379, 388, 491, 526, 633, 640, 708, 814, 818, 820, 821, 836, 851, 868, 872], "legit_sampl": 0, "n": [0, 15, 44, 47, 48, 49, 51, 54, 57, 58, 62, 63, 65, 67, 68, 71, 72, 80, 81, 85, 86, 88, 90, 91, 94, 95, 98, 103, 140, 146, 147, 148, 221, 291, 293, 329, 330, 342, 370, 373, 376, 377, 378, 379, 382, 383, 386, 388, 390, 391, 392, 393, 398, 399, 404, 405, 408, 409, 410, 418, 419, 420, 421, 423, 431, 432, 439, 443, 445, 447, 452, 453, 465, 471, 474, 478, 480, 491, 500, 502, 503, 504, 507, 509, 510, 511, 512, 513, 516, 523, 533, 630, 633, 637, 638, 640, 642, 644, 645, 648, 649, 650, 651, 652, 653, 655, 657, 659, 664, 669, 672, 676, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 692, 693, 694, 695, 702, 703, 705, 711, 715, 727, 740, 741, 742, 748, 762, 764, 765, 766, 767, 768, 769, 793, 796, 807, 824, 828, 830, 846, 858, 866], "after": [0, 4, 5, 8, 9, 11, 12, 13, 14, 32, 33, 47, 58, 59, 60, 62, 66, 75, 81, 82, 83, 85, 89, 187, 288, 305, 309, 358, 368, 373, 376, 377, 379, 399, 400, 401, 402, 419, 423, 444, 474, 485, 563, 617, 620, 622, 623, 624, 631, 633, 635, 636, 637, 642, 643, 650, 651, 652, 653, 655, 657, 659, 660, 730, 738, 797, 802, 814, 820, 821, 822, 825, 827, 828, 830, 831, 833, 835, 838, 841, 844, 846, 850, 858, 865, 866, 872], "combin": [0, 15, 38, 58, 75, 81, 104, 376, 388, 410, 421, 523, 551, 552, 635, 638, 669, 678, 822, 826, 829, 830, 831, 833, 835, 839, 846, 856, 872], "them": [0, 3, 4, 11, 14, 17, 19, 21, 32, 33, 38, 377, 447, 540, 576, 635, 777, 793, 816, 820, 822, 823, 825, 826, 827, 828, 829, 830, 831, 835, 837, 840, 842, 843, 844, 846, 848, 851, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 874, 878], "achiev": [0, 11, 14, 15, 32, 815, 817, 823, 830, 831, 839, 840, 846, 849, 854, 856, 859], "concaten": [0, 44, 58, 59, 65, 81, 86, 379, 470, 546, 550, 635, 637, 640, 664, 683, 701, 777, 844, 849, 851, 854], "along": [0, 47, 52, 54, 57, 58, 59, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 80, 81, 82, 86, 87, 88, 90, 91, 93, 94, 95, 98, 99, 101, 114, 118, 123, 138, 139, 214, 288, 291, 293, 331, 332, 333, 336, 337, 341, 342, 357, 364, 370, 373, 374, 376, 377, 378, 379, 382, 388, 398, 404, 405, 408, 409, 410, 420, 421, 446, 457, 470, 471, 472, 474, 476, 477, 485, 490, 493, 495, 497, 505, 506, 507, 508, 524, 525, 526, 528, 529, 530, 531, 532, 533, 546, 553, 629, 630, 632, 633, 635, 638, 639, 640, 641, 644, 645, 647, 648, 649, 669, 683, 692, 694, 695, 697, 698, 699, 701, 704, 705, 706, 708, 709, 711, 713, 714, 716, 717, 718, 744, 745, 746, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 793, 814, 820, 823, 824, 833, 842, 845, 847, 849, 851, 872], "axi": [0, 4, 6, 7, 8, 13, 15, 47, 48, 49, 52, 54, 57, 58, 59, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 77, 80, 81, 82, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 114, 118, 138, 139, 142, 214, 288, 293, 336, 337, 341, 342, 350, 357, 373, 376, 378, 379, 382, 386, 388, 398, 399, 405, 408, 410, 420, 421, 457, 462, 470, 471, 472, 475, 476, 477, 480, 485, 490, 491, 493, 494, 495, 497, 499, 500, 505, 506, 508, 516, 521, 524, 525, 526, 528, 529, 530, 531, 532, 533, 546, 553, 615, 627, 630, 632, 633, 635, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 659, 669, 672, 679, 692, 694, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 744, 745, 746, 750, 752, 754, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 779, 789, 793, 794, 799, 829, 831, 833, 835, 838, 839, 842, 843, 846, 849, 851, 853, 856], "result": [0, 1, 4, 8, 9, 11, 12, 14, 15, 17, 19, 27, 28, 29, 30, 32, 33, 44, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 180, 181, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 433, 434, 436, 437, 441, 442, 443, 444, 445, 447, 451, 454, 455, 456, 457, 459, 460, 462, 469, 470, 473, 475, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 541, 542, 546, 547, 548, 553, 554, 558, 563, 570, 577, 578, 616, 617, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 722, 725, 726, 728, 732, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 779, 785, 799, 808, 812, 818, 820, 822, 825, 826, 828, 829, 830, 831, 833, 834, 836, 838, 839, 841, 842, 843, 844, 846, 847, 851, 854, 857, 865, 866, 867, 873, 875], "new_dataset": 0, "now": [0, 1, 5, 6, 7, 9, 11, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 48, 793, 794, 795, 814, 821, 825, 826, 827, 828, 829, 830, 831, 832, 836, 838, 840, 843, 844, 846, 847, 849, 853, 854, 856, 857, 863, 865, 866, 867, 872], "equal": [0, 5, 54, 55, 57, 58, 59, 63, 64, 65, 67, 69, 70, 71, 75, 78, 80, 81, 82, 86, 87, 88, 90, 93, 99, 103, 104, 133, 135, 136, 137, 143, 144, 153, 233, 235, 239, 244, 246, 255, 256, 277, 279, 284, 287, 288, 292, 331, 332, 333, 335, 352, 370, 373, 376, 377, 379, 382, 388, 399, 420, 447, 471, 480, 493, 497, 500, 505, 506, 508, 526, 535, 538, 615, 630, 631, 633, 635, 638, 639, 640, 644, 645, 646, 647, 648, 672, 680, 681, 684, 686, 692, 697, 700, 702, 707, 709, 715, 742, 748, 750, 751, 752, 753, 754, 757, 762, 764, 765, 766, 767, 785, 792, 793, 828, 829, 831, 833, 835, 844, 846, 869], "unbias": [0, 58, 71, 81, 94, 388, 523, 648, 767], "concat": [0, 8, 44, 49, 59, 65, 75, 88, 214, 550, 632, 635, 640, 715, 844, 849, 851, 865], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 13, 44, 52, 58, 60, 67, 74, 80, 83, 90, 114, 239, 287, 361, 373, 620, 627, 636, 638, 642, 645, 648, 683, 720, 731, 740, 742, 749, 760, 880], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 280, 633], "03": [0, 6, 15, 28, 47, 54, 57, 59, 60, 80, 81, 83, 90, 139, 239, 264, 344, 345, 593, 594, 617, 622, 630, 633, 635, 636, 638, 677, 741], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 777], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 14, 27, 28, 29, 30], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 15, 25, 44, 57, 58, 71, 78, 80, 81, 90, 169, 223, 239, 287, 323, 370, 408, 631, 633, 638, 642, 648, 690, 727, 741, 760], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 5, 15, 44, 57, 67, 78, 80, 81, 90, 104, 169, 236, 631, 638, 648, 690, 741, 742, 766], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 57, 85, 229, 637, 660, 661], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 11, 14, 15, 25, 26, 30, 32, 33, 44, 46, 47, 52, 67, 74, 83, 90, 119, 235, 376, 398, 408, 616, 620, 627, 633, 636, 638, 643, 644, 648, 679, 683, 738, 739, 740, 741, 742, 743, 760, 814, 851, 856, 866], "53": [0, 10, 15, 27, 44, 63, 67, 80, 85, 160, 216, 246, 419, 619, 621, 631, 632, 636, 638, 643, 676, 738, 742], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 9, 11, 14, 17, 19, 21, 29, 32, 33, 38, 44, 45, 54, 58, 59, 81, 82, 98, 126, 138, 139, 323, 370, 376, 421, 550, 629, 630, 635, 637, 662, 663, 664, 808, 820, 822, 823, 825, 826, 828, 830, 831, 833, 834, 839, 841, 842, 843, 845, 849, 850, 854, 865, 866, 868, 878], "predictor": [0, 857], "label": [0, 6, 7, 13, 15, 46, 47, 48, 58, 64, 81, 87, 378, 453, 454, 456, 457, 458, 459, 460, 639, 697, 698, 699, 814, 820, 825, 843, 850, 851, 852, 856, 858, 872], "whether": [0, 21, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 99, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 128, 129, 135, 137, 142, 144, 150, 153, 154, 156, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 181, 193, 197, 198, 200, 201, 203, 205, 208, 209, 211, 214, 215, 217, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 330, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 370, 373, 376, 377, 378, 379, 388, 395, 396, 397, 399, 400, 401, 402, 418, 420, 422, 424, 439, 441, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 471, 473, 475, 476, 477, 480, 484, 491, 493, 494, 495, 497, 500, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 577, 578, 579, 580, 582, 585, 586, 588, 589, 591, 592, 593, 594, 596, 598, 600, 601, 608, 609, 612, 614, 617, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 648, 649, 651, 652, 653, 654, 660, 661, 662, 663, 664, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 687, 692, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 732, 736, 737, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 772, 774, 777, 789, 790, 793, 794, 795, 796, 797, 807, 814, 815, 820, 821, 826, 829, 831, 833, 838, 842, 843, 846, 848, 849, 865, 866], "x": [0, 4, 8, 9, 10, 13, 15, 17, 19, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 173, 174, 176, 181, 197, 198, 200, 202, 207, 208, 209, 213, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 329, 330, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 386, 387, 388, 389, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 427, 428, 430, 432, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 466, 467, 469, 470, 472, 473, 475, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 614, 615, 617, 618, 619, 621, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 722, 725, 726, 727, 728, 729, 730, 731, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 793, 796, 799, 802, 807, 812, 814, 818, 820, 824, 826, 827, 829, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 844, 846, 847, 849, 851, 853, 854, 855, 856, 865, 866, 867], "y": [0, 15, 32, 33, 44, 45, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 130, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 150, 153, 154, 155, 164, 166, 169, 181, 194, 198, 202, 207, 208, 209, 213, 215, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 335, 336, 337, 343, 351, 352, 353, 354, 355, 360, 362, 364, 368, 370, 373, 376, 377, 378, 379, 382, 388, 396, 398, 400, 401, 405, 408, 410, 414, 420, 427, 431, 437, 444, 451, 453, 454, 456, 457, 458, 459, 460, 470, 472, 481, 485, 493, 494, 495, 497, 501, 505, 506, 508, 516, 522, 523, 524, 525, 526, 529, 531, 532, 533, 535, 538, 541, 542, 545, 546, 548, 549, 550, 553, 554, 555, 559, 561, 562, 563, 565, 566, 569, 570, 575, 582, 583, 584, 587, 590, 591, 593, 594, 596, 598, 600, 601, 602, 606, 607, 610, 613, 614, 615, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 656, 658, 659, 660, 661, 668, 669, 670, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 722, 725, 726, 728, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 812, 814, 827, 829, 832, 833, 841, 843, 844, 846, 847, 849, 851, 853, 865], "upcom": [0, 852], "phase": [0, 846, 857, 872], "drop": [0, 15, 48, 58, 81, 332, 370, 378, 379, 457, 494, 792, 793, 821, 857], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 292, 633], "length": [0, 6, 12, 46, 47, 54, 58, 64, 65, 75, 81, 87, 88, 98, 99, 104, 127, 135, 140, 315, 318, 319, 334, 342, 370, 373, 376, 377, 379, 383, 386, 398, 399, 404, 405, 408, 409, 410, 420, 421, 422, 424, 436, 445, 485, 494, 511, 516, 615, 630, 635, 637, 638, 639, 640, 646, 664, 688, 689, 697, 707, 750, 777, 793, 846, 854], "valid": [0, 8, 13, 46, 48, 58, 62, 72, 81, 85, 95, 98, 99, 158, 376, 377, 395, 396, 397, 413, 414, 415, 416, 418, 419, 423, 444, 452, 566, 631, 635, 637, 640, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 703, 711, 768, 769, 777, 778, 793, 807, 821, 827, 831, 833, 837, 841, 844, 846, 865, 873], "gener": [0, 1, 7, 8, 13, 21, 25, 30, 32, 33, 35, 38, 46, 48, 50, 51, 54, 57, 58, 62, 67, 73, 77, 80, 81, 85, 90, 96, 99, 127, 138, 139, 148, 156, 241, 244, 254, 255, 270, 274, 283, 313, 316, 320, 321, 322, 324, 325, 326, 327, 328, 329, 336, 337, 370, 373, 376, 377, 379, 383, 388, 420, 426, 448, 493, 511, 523, 630, 631, 633, 637, 638, 640, 644, 648, 660, 686, 687, 690, 693, 715, 739, 740, 742, 743, 765, 777, 780, 785, 797, 807, 814, 820, 821, 822, 824, 825, 826, 828, 831, 832, 833, 834, 835, 838, 839, 842, 843, 844, 847, 850, 851, 853, 855, 856, 857, 859, 870, 871, 872, 873, 874, 875, 876, 877, 878], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 44, 46, 48, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 166, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 330, 336, 337, 338, 339, 344, 345, 349, 351, 353, 354, 355, 356, 360, 363, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 418, 420, 421, 425, 427, 428, 430, 431, 436, 437, 442, 443, 444, 445, 450, 454, 455, 456, 457, 458, 459, 460, 464, 465, 470, 471, 473, 478, 486, 487, 488, 489, 491, 493, 495, 497, 498, 505, 506, 508, 509, 510, 512, 513, 514, 516, 523, 524, 525, 526, 530, 534, 541, 542, 546, 547, 548, 553, 554, 563, 577, 578, 581, 616, 617, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 789, 790, 792, 793, 795, 796, 797, 798, 807, 808, 814, 816, 817, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 869, 870, 871, 872, 874, 878, 879, 880], "stratifi": 0, "paramet": [0, 6, 7, 15, 19, 30, 32, 33, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 577, 578, 581, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 779, 780, 785, 790, 792, 793, 794, 795, 796, 797, 798, 802, 803, 807, 808, 810, 812, 814, 820, 826, 834, 835, 838, 843, 844, 846, 847, 851, 853, 854, 865, 866, 867, 873], "test_siz": [0, 15, 46], "specifi": [0, 13, 29, 30, 32, 33, 37, 38, 39, 50, 52, 54, 55, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 71, 72, 74, 75, 78, 80, 81, 82, 85, 86, 87, 88, 90, 91, 94, 95, 98, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 131, 136, 138, 143, 146, 147, 149, 153, 155, 202, 207, 209, 213, 214, 215, 283, 292, 296, 301, 302, 304, 330, 335, 352, 357, 368, 370, 373, 376, 377, 378, 379, 383, 388, 395, 396, 397, 399, 405, 410, 420, 421, 422, 423, 431, 443, 445, 450, 453, 457, 458, 459, 461, 475, 478, 487, 488, 490, 491, 493, 497, 510, 521, 523, 524, 525, 528, 529, 533, 536, 553, 554, 556, 558, 559, 572, 574, 582, 615, 627, 630, 631, 632, 633, 635, 637, 638, 639, 640, 642, 644, 645, 646, 647, 648, 649, 662, 664, 667, 669, 671, 672, 674, 675, 679, 687, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 708, 710, 711, 714, 715, 723, 724, 726, 727, 734, 735, 736, 737, 740, 741, 742, 744, 745, 746, 748, 751, 752, 753, 754, 758, 759, 760, 762, 764, 766, 768, 769, 777, 780, 789, 793, 794, 795, 808, 812, 821, 824, 828, 831, 832, 838, 839, 840, 842, 843, 844, 846, 851, 854, 855, 865, 866, 867, 878], "reserv": [0, 820], "x_train": [0, 15], "x_test": [0, 15], "y_train": [0, 15, 48], "y_test": [0, 15], "random_st": [0, 15, 377, 435], "With": [0, 4, 6, 13, 25, 35, 44, 52, 54, 55, 57, 58, 59, 60, 62, 63, 65, 68, 71, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 153, 154, 155, 156, 158, 164, 165, 166, 169, 176, 181, 182, 183, 184, 185, 195, 198, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 336, 337, 339, 341, 344, 345, 349, 352, 353, 354, 356, 357, 360, 368, 370, 373, 376, 377, 378, 379, 388, 398, 400, 401, 408, 420, 427, 428, 429, 431, 432, 433, 444, 447, 459, 475, 476, 477, 479, 482, 484, 485, 491, 493, 495, 497, 499, 514, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 539, 540, 541, 542, 545, 546, 547, 548, 549, 553, 554, 557, 559, 561, 562, 563, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 697, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 821, 831, 833, 843, 846, 849, 851, 862, 863, 865, 872, 875], "next": [0, 1, 6, 7, 8, 13, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 46, 48, 58, 81, 166, 349, 353, 358, 362, 373, 631, 792, 797, 814, 820, 821, 822, 827, 831, 833, 834, 836, 837, 840, 852, 853, 854, 863, 872, 874], "convers": [0, 57, 58, 81, 240, 280, 579, 589, 635, 794, 795, 814, 820, 850, 852, 856, 857, 859, 863, 871, 878], "becaus": [0, 27, 35, 37, 47, 58, 376, 399, 772, 821, 822, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 849, 851, 855, 856, 857, 872, 875, 878], "own": [0, 6, 7, 10, 13, 17, 19, 23, 32, 33, 38, 814, 821, 825, 830, 831, 834, 835, 842, 843, 847, 851, 857, 859, 862, 863, 868, 871, 872, 877, 878], "confirm": [0, 4, 47, 817, 820], "been": [0, 6, 7, 13, 14, 17, 19, 27, 29, 32, 33, 58, 59, 67, 81, 82, 90, 197, 284, 379, 492, 546, 547, 548, 632, 633, 635, 644, 739, 807, 808, 820, 822, 825, 827, 829, 830, 831, 832, 834, 835, 838, 839, 842, 846, 851, 853, 857, 858, 865, 872, 879], "correctli": [0, 1, 29, 32, 33, 46, 58, 63, 68, 81, 86, 91, 341, 373, 388, 529, 530, 531, 532, 533, 638, 645, 679, 745, 820, 821, 822, 826, 829, 831, 833, 835, 837, 838, 844, 846, 849, 855, 857, 865, 866], "size": [0, 8, 15, 17, 19, 24, 27, 28, 34, 35, 37, 38, 39, 46, 48, 51, 58, 59, 62, 63, 65, 67, 68, 75, 81, 82, 85, 86, 88, 90, 91, 98, 99, 103, 104, 135, 138, 212, 213, 214, 313, 316, 320, 331, 332, 333, 334, 341, 357, 364, 370, 373, 374, 376, 377, 378, 379, 382, 383, 386, 388, 390, 391, 392, 393, 394, 395, 396, 412, 413, 414, 416, 417, 423, 424, 431, 434, 446, 452, 453, 455, 469, 471, 483, 493, 495, 497, 503, 504, 507, 511, 516, 528, 529, 530, 531, 532, 533, 572, 577, 630, 632, 635, 637, 638, 640, 644, 645, 649, 662, 664, 667, 669, 672, 676, 679, 683, 685, 688, 694, 703, 708, 709, 710, 739, 745, 748, 768, 769, 777, 779, 780, 793, 808, 842, 844, 846, 849, 854, 865, 867], "correct": [0, 11, 17, 19, 28, 38, 44, 46, 48, 71, 94, 187, 377, 448, 631, 640, 648, 700, 765, 767, 774, 777, 818, 820, 822, 824, 829, 830, 831, 832, 835, 836, 838, 839, 842, 844, 846, 866], "787": 0, "197": [0, 57, 229, 633], "success": [0, 13, 638, 648, 692, 764, 766, 817, 821, 830, 862], "prepare_data": [0, 15], "list": [0, 1, 5, 8, 11, 12, 15, 48, 53, 54, 55, 57, 58, 59, 62, 65, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 135, 137, 140, 141, 142, 144, 150, 154, 156, 169, 173, 174, 181, 197, 214, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 350, 351, 352, 358, 359, 360, 362, 363, 364, 373, 376, 377, 379, 386, 395, 396, 397, 399, 400, 401, 402, 413, 414, 415, 416, 420, 422, 426, 431, 435, 438, 445, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 469, 470, 471, 480, 491, 493, 494, 495, 497, 500, 502, 504, 505, 506, 508, 510, 515, 523, 524, 525, 526, 535, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 555, 557, 559, 561, 562, 563, 565, 566, 569, 573, 577, 578, 592, 593, 594, 596, 598, 599, 600, 601, 602, 614, 615, 620, 625, 630, 631, 632, 633, 635, 637, 638, 640, 642, 643, 646, 647, 651, 652, 653, 654, 655, 656, 659, 660, 661, 664, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 690, 692, 697, 698, 699, 700, 701, 704, 707, 708, 709, 710, 711, 714, 715, 719, 720, 721, 722, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 762, 764, 765, 767, 768, 769, 772, 774, 777, 778, 779, 780, 785, 790, 793, 799, 807, 808, 812, 814, 817, 819, 820, 821, 823, 825, 826, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 846, 847, 851, 854, 855, 856, 857, 865, 872, 873, 878, 880], "tupl": [0, 15, 50, 53, 54, 55, 57, 58, 59, 62, 63, 65, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 101, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 128, 129, 135, 137, 141, 142, 144, 148, 150, 154, 155, 156, 167, 168, 169, 173, 174, 180, 181, 187, 197, 200, 201, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 317, 322, 326, 329, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 349, 350, 351, 352, 356, 357, 358, 359, 360, 362, 363, 364, 365, 370, 373, 375, 376, 377, 379, 382, 383, 384, 386, 388, 395, 396, 397, 399, 400, 401, 402, 404, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 430, 431, 435, 439, 441, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 469, 470, 480, 485, 491, 493, 494, 495, 497, 499, 502, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 523, 524, 525, 526, 528, 529, 530, 531, 532, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 582, 592, 593, 594, 595, 596, 598, 599, 600, 601, 614, 615, 616, 617, 618, 620, 622, 625, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 681, 683, 684, 685, 686, 688, 690, 691, 692, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 726, 727, 728, 730, 731, 734, 735, 736, 737, 739, 740, 741, 742, 744, 747, 748, 750, 751, 752, 753, 754, 755, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 792, 793, 795, 807, 808, 826, 831, 838, 839, 842, 844, 846, 851, 854, 855, 857, 865, 866, 867], "thei": [0, 1, 15, 39, 44, 49, 58, 63, 67, 69, 75, 86, 90, 92, 179, 293, 347, 373, 631, 633, 637, 638, 641, 644, 646, 662, 693, 716, 717, 739, 750, 772, 798, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 837, 839, 840, 842, 843, 846, 847, 849, 851, 853, 854, 855, 856, 857, 865, 869, 872, 874, 875, 878, 879], "dimension": [0, 54, 57, 58, 63, 65, 68, 71, 72, 75, 77, 80, 81, 86, 88, 94, 95, 103, 127, 133, 135, 140, 148, 293, 329, 336, 337, 370, 373, 376, 377, 379, 388, 404, 405, 409, 410, 420, 421, 428, 463, 464, 465, 469, 474, 475, 521, 533, 630, 633, 638, 640, 645, 648, 649, 669, 670, 676, 678, 681, 683, 684, 694, 695, 709, 745, 746, 748, 761, 762, 763, 764, 765, 766, 767, 768, 769, 839, 841, 846, 849, 851, 869, 872, 879], "reshap": [0, 4, 32, 33, 48, 49, 58, 62, 63, 65, 75, 81, 85, 86, 88, 361, 373, 376, 377, 379, 395, 396, 397, 400, 413, 414, 415, 418, 427, 444, 469, 475, 615, 635, 637, 638, 640, 653, 655, 659, 679, 695, 842, 843, 846, 849, 851, 853, 856, 869], "float32": [0, 4, 8, 12, 15, 17, 19, 24, 25, 44, 46, 47, 48, 54, 55, 58, 59, 62, 77, 78, 81, 82, 85, 94, 139, 142, 144, 150, 151, 152, 156, 160, 161, 164, 165, 166, 167, 170, 173, 174, 176, 181, 184, 190, 240, 254, 281, 334, 347, 370, 373, 376, 377, 378, 388, 398, 408, 421, 447, 453, 458, 526, 563, 600, 630, 631, 633, 635, 637, 638, 641, 653, 655, 656, 659, 686, 688, 689, 695, 717, 718, 774, 777, 778, 814, 831, 833, 844, 846, 847, 866, 867], "def": [0, 4, 8, 11, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 57, 80, 123, 225, 540, 629, 635, 641, 642, 717, 718, 725, 807, 814, 818, 820, 821, 825, 826, 829, 831, 832, 833, 835, 836, 838, 839, 841, 842, 843, 844, 846, 847, 849, 851, 853, 854, 855, 856, 865, 866, 867], "isinst": [0, 8, 15, 30, 32, 33, 835, 843, 846, 847, 855, 856], "rang": [0, 4, 6, 7, 9, 10, 13, 15, 32, 33, 44, 45, 46, 48, 54, 58, 71, 77, 81, 127, 138, 139, 288, 300, 308, 320, 368, 370, 377, 379, 388, 431, 443, 478, 486, 488, 493, 498, 524, 525, 526, 546, 615, 630, 633, 635, 646, 648, 750, 758, 759, 764, 766, 777, 779, 780, 792, 814, 817, 820, 831, 835, 839, 846, 851, 854, 855, 856, 872, 878], "len": [0, 6, 7, 8, 13, 15, 46, 48, 54, 58, 63, 81, 86, 140, 317, 326, 327, 370, 376, 377, 388, 410, 421, 433, 436, 446, 452, 533, 630, 638, 674, 693, 829, 830, 835, 842, 843, 846, 853, 856, 865], "expand_dim": [0, 6, 15, 29, 32, 33, 48, 50, 65, 88, 637, 640, 659, 814, 843, 851, 854, 866], "astyp": [0, 15, 17, 19, 24, 46, 47, 48, 55, 62, 78, 85, 631, 637, 653, 655, 656, 659, 814, 831, 842, 843, 849, 867], "els": [0, 5, 6, 7, 8, 11, 13, 15, 47, 48, 50, 51, 58, 59, 67, 80, 81, 90, 159, 160, 161, 162, 163, 175, 281, 285, 376, 377, 383, 422, 435, 446, 450, 452, 510, 545, 549, 631, 633, 635, 637, 642, 644, 663, 729, 732, 740, 741, 742, 772, 807, 808, 820, 821, 822, 825, 827, 831, 832, 835, 839, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 857, 873], "return": [0, 4, 8, 9, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 779, 780, 784, 785, 790, 792, 793, 795, 797, 802, 803, 807, 808, 809, 810, 811, 812, 814, 821, 822, 826, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 865, 866, 867, 873], "defin": [0, 24, 30, 32, 33, 34, 54, 58, 59, 63, 77, 81, 82, 86, 101, 117, 142, 146, 147, 148, 224, 241, 248, 274, 275, 283, 285, 288, 301, 305, 309, 315, 318, 319, 320, 329, 330, 331, 332, 333, 336, 337, 339, 368, 370, 373, 376, 377, 379, 388, 412, 429, 485, 491, 526, 561, 562, 582, 627, 630, 633, 635, 637, 638, 648, 662, 669, 674, 675, 687, 761, 762, 763, 765, 820, 821, 826, 827, 830, 831, 834, 838, 841, 843, 844, 846, 847, 853, 855, 857, 859, 867, 869, 870, 871, 872, 873, 876, 878, 879], "proper": [0, 814, 820, 843, 866], "adjust": [0, 46, 71, 94, 377, 448, 648, 765, 767, 802, 812], "comput": [0, 6, 13, 29, 30, 32, 33, 39, 40, 45, 46, 48, 52, 57, 58, 59, 60, 62, 63, 64, 69, 71, 74, 75, 80, 81, 82, 83, 85, 86, 87, 94, 98, 99, 101, 114, 118, 214, 224, 231, 234, 236, 241, 242, 243, 248, 249, 250, 252, 253, 259, 260, 261, 268, 269, 270, 271, 273, 274, 277, 282, 283, 301, 305, 309, 315, 318, 319, 331, 332, 333, 336, 337, 339, 343, 345, 348, 350, 351, 355, 357, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 386, 388, 395, 396, 397, 398, 399, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 421, 424, 425, 427, 429, 430, 431, 432, 434, 435, 437, 439, 442, 444, 446, 449, 450, 452, 454, 455, 456, 457, 458, 459, 460, 479, 482, 495, 502, 504, 515, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 541, 542, 586, 609, 616, 618, 619, 621, 625, 626, 632, 633, 635, 636, 637, 638, 639, 640, 642, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 668, 669, 673, 674, 675, 678, 679, 681, 683, 685, 687, 688, 690, 692, 694, 695, 697, 698, 699, 703, 725, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 774, 779, 793, 796, 808, 814, 821, 829, 830, 831, 839, 841, 843, 846, 848, 849, 851, 854, 857, 859, 862, 863, 865, 866, 868, 870, 872, 873, 875, 876, 878], "most": [0, 6, 15, 23, 32, 33, 75, 77, 98, 101, 142, 377, 430, 586, 609, 630, 635, 638, 673, 674, 811, 814, 819, 820, 821, 826, 829, 830, 831, 832, 836, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 857, 862, 872, 873, 875, 876, 878, 879], "avail": [0, 2, 4, 6, 8, 12, 13, 27, 28, 30, 32, 33, 48, 59, 82, 197, 203, 205, 206, 217, 547, 632, 635, 638, 689, 778, 812, 814, 821, 822, 829, 830, 831, 832, 834, 835, 843, 846, 849, 857, 858, 861, 865, 866, 867, 877, 878], "cpu": [0, 6, 7, 8, 9, 10, 11, 13, 14, 27, 28, 29, 30, 32, 46, 47, 48, 50, 51, 54, 56, 58, 67, 77, 79, 81, 90, 127, 133, 136, 138, 139, 142, 143, 144, 150, 194, 195, 197, 198, 199, 200, 205, 208, 210, 212, 215, 216, 218, 220, 377, 383, 439, 509, 510, 512, 513, 630, 632, 644, 739, 740, 741, 742, 774, 792, 793, 794, 795, 796, 797, 798, 812, 814, 818, 821, 822, 828, 831, 832, 836, 843, 846, 857, 870, 872, 875, 877], "gpu": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 46, 48, 50, 51, 197, 199, 200, 203, 206, 208, 210, 212, 213, 216, 218, 220, 632, 812, 814, 821, 822, 830, 832, 853, 858, 870, 872, 875, 876, 877], "tpu": [0, 46, 195, 201, 210, 212, 217, 632, 812, 832, 872, 875], "explicitli": [0, 638, 674, 675, 690, 774, 793, 794, 795, 818, 825, 826, 827, 829, 831, 834, 835, 836, 839, 840, 841, 842, 844, 846, 851, 857, 866, 872], "hardwar": [0, 4, 46, 103, 107, 821, 849, 862, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878], "mai": [0, 1, 6, 56, 57, 58, 63, 69, 70, 79, 80, 86, 93, 103, 104, 127, 134, 145, 215, 241, 242, 248, 253, 261, 269, 270, 274, 275, 277, 292, 336, 337, 373, 405, 545, 581, 630, 632, 633, 635, 638, 646, 647, 648, 686, 695, 750, 751, 752, 753, 754, 757, 761, 762, 763, 765, 777, 808, 819, 820, 821, 822, 825, 829, 830, 831, 835, 836, 839, 840, 841, 843, 844, 846, 849, 852, 853, 855, 863, 879], "vari": [0, 58, 69, 98, 99, 292, 405, 546, 633, 635, 638, 646, 685, 751, 752, 753, 808, 829, 833, 843, 846, 853], "known": [0, 58, 81, 285, 377, 449, 451, 633, 792, 825, 830, 831, 843, 846], "advanc": [0, 21, 44, 821, 823, 871], "set_soft_device_mod": [0, 4, 15, 19, 219, 632, 832], "section": [0, 1, 2, 6, 7, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 52, 58, 69, 81, 113, 376, 379, 410, 421, 471, 480, 500, 646, 750, 751, 752, 753, 814, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 850, 854, 855, 867, 868, 875, 878], "binari": [0, 6, 15, 27, 28, 30, 58, 59, 62, 64, 81, 85, 87, 231, 234, 236, 271, 291, 376, 378, 422, 457, 460, 633, 637, 639, 660, 664, 697], "logist": [0, 15], "gblinear": [0, 15], "booster": [0, 15], "linear": [0, 4, 12, 13, 19, 31, 32, 33, 44, 45, 46, 48, 51, 58, 59, 62, 74, 81, 82, 85, 111, 113, 115, 116, 119, 296, 300, 304, 306, 307, 308, 312, 354, 368, 373, 376, 379, 388, 412, 447, 485, 533, 550, 573, 627, 635, 637, 642, 664, 687, 726, 777, 779, 780, 792, 793, 814, 829, 834, 839, 840, 842, 843, 846, 849, 851, 854, 855, 856, 866, 870, 871, 872, 875], "estim": [0, 58, 81, 350, 373, 388, 523, 812], "rate": [0, 58, 60, 81, 83, 376, 383, 418, 513, 617, 620, 622, 623, 624, 636, 637, 641, 662, 716, 717, 718, 797, 830], "fine": [0, 17, 19, 32, 33, 821, 822, 831, 833, 843, 853, 856, 878], "tune": [0, 17, 19, 32, 33, 877, 878], "regular": [0, 47, 81, 377, 388, 439, 444, 527, 821, 843, 872], "term": [0, 6, 13, 58, 81, 313, 320, 323, 370, 378, 457, 458, 637, 662, 663, 793, 808, 814, 822, 829, 851, 859, 861, 872], "reg_lambda": [0, 15], "reg_alpha": [0, 15], "overfit": [0, 637, 660], "compil": [0, 6, 9, 10, 11, 12, 14, 15, 27, 28, 30, 32, 33, 36, 49, 51, 292, 633, 785, 821, 843, 847, 851, 857, 859, 866, 868, 871, 872, 873, 876, 879], "param": [0, 11, 14, 15, 32, 46, 47, 48, 50, 75, 81, 82, 104, 536, 553, 554, 635, 799, 814, 856, 866], "n_estim": [0, 15], "100": [0, 6, 7, 9, 11, 12, 14, 15, 44, 46, 48, 54, 57, 58, 77, 80, 81, 82, 85, 102, 139, 148, 235, 275, 288, 329, 352, 361, 370, 373, 376, 377, 379, 400, 401, 446, 452, 490, 554, 562, 578, 630, 633, 635, 638, 642, 677, 725, 830, 831, 846, 854, 855, 856, 857, 862, 863, 865], "learning_r": [0, 7, 13, 15], "base_margin": [0, 15], "none": [0, 4, 6, 8, 11, 13, 14, 15, 32, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 102, 103, 104, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 169, 171, 172, 173, 174, 176, 178, 181, 193, 196, 197, 209, 210, 211, 212, 213, 214, 215, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 569, 574, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 723, 724, 725, 726, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 777, 778, 779, 780, 785, 789, 790, 792, 793, 794, 795, 796, 797, 798, 801, 802, 806, 808, 812, 814, 818, 821, 825, 826, 827, 829, 830, 831, 832, 833, 835, 836, 838, 839, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 865, 866, 867], "xgb_cl": [0, 15], "better": [0, 11, 15, 35, 44, 50, 51, 820, 824, 843, 844, 847, 849, 850, 853, 854, 855, 863, 875], "ivy_cl": [0, 15], "effici": [0, 8, 11, 12, 14, 21, 22, 24, 25, 32, 33, 34, 35, 58, 63, 81, 86, 377, 378, 441, 457, 586, 609, 635, 638, 681, 814, 821, 822, 829, 839, 840, 842, 846, 848, 851, 854, 857, 866, 872, 874, 875], "fit": [0, 15, 65, 88, 640, 706, 820, 843, 851, 868, 869, 872], "magic": [0, 830], "durat": 0, "70": [0, 15, 44, 46, 58, 81, 82, 376, 398, 408, 554, 578, 638, 648, 683, 760, 862], "m": [0, 11, 12, 13, 14, 15, 32, 45, 47, 49, 51, 54, 58, 63, 67, 80, 81, 86, 90, 103, 140, 146, 147, 148, 268, 329, 330, 370, 376, 377, 378, 379, 383, 399, 430, 435, 436, 438, 439, 454, 465, 476, 477, 491, 509, 510, 511, 512, 513, 630, 638, 642, 644, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 727, 740, 741, 742, 814, 821, 822, 824, 830, 851], "per": [0, 11, 14, 15, 25, 46, 48, 58, 62, 81, 85, 320, 370, 376, 377, 379, 395, 396, 397, 413, 414, 415, 416, 445, 492, 637, 651, 653, 654, 655, 656, 659, 664, 793, 822, 830, 840, 843, 854], "loop": [0, 6, 7, 11, 13, 14, 15, 25, 40, 73, 81, 96, 123, 126, 376, 422, 629, 641, 716, 717, 718, 827, 857, 865], "dev": [0, 4, 11, 12, 14, 15, 25, 46, 48, 51, 56, 75, 79, 202, 209, 632, 814, 821, 832, 836, 839, 853, 855], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 46, 48, 49, 50, 58, 60, 81, 83, 382, 502, 504, 616, 617, 622, 636, 637, 641, 662, 716, 717, 718, 774, 775, 793, 794, 795, 796, 807, 814, 816, 820, 821, 824, 826, 827, 830, 832, 833, 835, 837, 838, 840, 843, 844, 851, 852, 853, 854, 855, 856, 857, 858, 865, 866, 867, 870, 872, 873, 874, 875, 877, 878, 879], "59": [0, 7, 44, 57, 236, 388, 524], "04": [0, 6, 13, 46, 47, 54, 60, 74, 78, 81, 83, 113, 114, 139, 166, 246, 583, 616, 617, 622, 627, 630, 631, 633, 635, 636, 777, 821, 846], "slowest": [0, 35, 58, 65, 81, 88, 379, 475, 640, 707], "took": [0, 11, 80, 281], "87": [0, 15, 44, 83, 85, 235, 264, 388, 419, 524, 616, 633, 636, 777, 836], "longer": [0, 15, 821, 831, 842, 846, 872], "than": [0, 7, 9, 10, 15, 32, 33, 35, 38, 57, 58, 59, 62, 63, 65, 67, 68, 69, 71, 75, 80, 81, 82, 85, 86, 88, 90, 91, 92, 94, 103, 104, 127, 135, 166, 214, 222, 223, 226, 227, 229, 230, 233, 235, 237, 241, 247, 248, 262, 263, 264, 265, 272, 274, 279, 283, 285, 287, 288, 292, 293, 294, 303, 313, 335, 338, 352, 359, 370, 373, 376, 377, 378, 379, 388, 398, 399, 404, 405, 408, 409, 410, 420, 421, 425, 427, 446, 452, 453, 476, 477, 524, 525, 526, 565, 566, 569, 586, 609, 630, 631, 632, 633, 635, 637, 638, 640, 644, 645, 646, 648, 662, 667, 669, 678, 679, 680, 681, 684, 695, 700, 704, 710, 742, 748, 751, 752, 753, 758, 759, 764, 765, 766, 767, 793, 808, 818, 820, 822, 825, 829, 830, 831, 833, 835, 836, 842, 843, 844, 846, 847, 848, 849, 851, 854, 855, 856, 857, 858, 862, 869, 870, 871, 872, 878, 879], "fastest": [0, 35, 58, 65, 81, 88, 377, 379, 444, 475, 640, 707], "could": [0, 6, 14, 32, 33, 38, 69, 646, 750, 751, 752, 753, 820, 821, 822, 825, 830, 831, 833, 840, 842, 843, 844, 846, 851, 853, 854, 855, 862, 863, 872, 877, 878], "intermedi": [0, 45, 870, 871, 872, 873, 878], "cach": [0, 7, 12, 14, 27, 28, 29, 30, 46, 48, 51, 196, 540, 632, 635, 782, 802, 837, 839, 842, 846], "400": [0, 15, 82, 85, 376, 400, 401, 554, 578, 635, 638, 677], "\u00b5": [0, 11, 14, 15, 25], "487": [0, 280, 633, 637, 661], "make": [0, 1, 4, 8, 11, 12, 13, 14, 15, 24, 32, 33, 34, 46, 50, 58, 81, 376, 420, 802, 814, 817, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 853, 854, 856, 858, 862, 863, 866, 870, 872, 873, 874, 875, 878, 879], "out": [0, 4, 6, 8, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 44, 47, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 164, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 418, 420, 421, 424, 425, 426, 427, 428, 429, 430, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 447, 451, 454, 455, 456, 457, 459, 460, 466, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 541, 542, 546, 547, 548, 550, 553, 554, 563, 573, 577, 578, 616, 617, 620, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 785, 789, 790, 792, 793, 795, 796, 797, 798, 814, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 839, 841, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 865, 866, 872, 879], "respect": [0, 54, 57, 58, 60, 63, 80, 81, 83, 86, 98, 140, 221, 224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 252, 253, 260, 261, 266, 268, 270, 271, 274, 277, 283, 287, 290, 291, 301, 350, 365, 368, 373, 375, 377, 379, 382, 433, 450, 462, 502, 504, 558, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 630, 633, 635, 636, 637, 638, 641, 650, 657, 658, 664, 669, 685, 688, 716, 717, 718, 774, 777, 792, 808, 819, 820, 821, 822, 826, 827, 829, 830, 831, 832, 833, 838, 839, 841, 842, 843, 846, 847, 848, 868, 878], "kei": [0, 6, 7, 11, 13, 25, 26, 32, 33, 48, 50, 53, 58, 62, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 169, 173, 174, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 386, 400, 401, 402, 420, 453, 454, 455, 456, 457, 458, 459, 460, 469, 470, 491, 493, 495, 497, 502, 504, 505, 506, 508, 510, 516, 523, 524, 525, 526, 535, 536, 538, 539, 541, 542, 543, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 635, 637, 641, 642, 651, 652, 653, 654, 660, 661, 664, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 716, 717, 722, 728, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 777, 778, 784, 790, 793, 797, 814, 817, 828, 829, 830, 839, 842, 843, 844, 846, 854, 866, 872, 875, 879], "precis": [0, 15, 58, 63, 81, 86, 166, 254, 274, 281, 288, 347, 373, 377, 388, 431, 523, 586, 609, 631, 633, 635, 638, 674, 675, 679, 686, 688, 689, 695, 785, 830, 843, 848, 849, 876], "recal": [0, 15], "f1": [0, 15, 831], "score": [0, 15, 62, 85, 378, 460, 637, 665, 667, 814], "ivy_pr": [0, 15], "xgb_pred": [0, 15], "nxgbclassifi": [0, 15], "86": [0, 13, 15, 44, 67, 81, 90, 376, 388, 408, 524, 616, 636, 741, 742], "93": [0, 15, 44, 58, 80, 82, 90, 199, 288, 361, 373, 546, 547, 632, 635, 741, 742], "84": [0, 13, 44, 62, 71, 80, 90, 169, 199, 264, 631, 632, 638, 643, 648, 661, 683, 738, 741, 742, 760], "91": [0, 13, 44, 58, 85, 90, 361, 373, 419, 637, 638, 644, 648, 661, 683, 741, 760], "accuraci": [0, 6, 15, 46, 48, 51, 376, 420, 831], "92": [0, 15, 44, 48, 58, 59, 90, 361, 373, 614, 624, 636, 638, 670, 741, 742], "macro": [0, 15], "avg": [0, 15, 376, 395, 397, 418], "weight": [0, 4, 6, 13, 15, 17, 19, 32, 33, 46, 47, 58, 60, 62, 64, 81, 83, 85, 87, 98, 99, 316, 320, 354, 370, 373, 376, 377, 388, 403, 436, 521, 523, 526, 616, 617, 620, 622, 623, 624, 636, 637, 639, 641, 661, 662, 663, 664, 667, 697, 718, 779, 792, 793, 795, 797, 812, 814, 829, 839, 846, 851, 855, 856, 871], "90": [0, 15, 44, 46, 48, 57, 58, 80, 81, 240, 280, 284, 361, 373, 379, 388, 491, 524, 633, 638, 648, 683, 760, 808, 862], "summar": [0, 32, 33, 98, 846], "perfect": [0, 814], "fals": [0, 6, 7, 8, 11, 12, 13, 14, 19, 23, 24, 32, 35, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 197, 198, 203, 205, 208, 209, 211, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 370, 373, 374, 376, 377, 378, 379, 382, 388, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 515, 516, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 573, 577, 578, 579, 582, 585, 586, 588, 589, 591, 592, 593, 594, 596, 598, 600, 601, 603, 608, 609, 611, 612, 614, 617, 618, 620, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 729, 730, 731, 732, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 777, 778, 779, 780, 785, 789, 790, 793, 794, 795, 797, 799, 802, 807, 808, 809, 812, 814, 818, 821, 825, 827, 830, 831, 832, 833, 835, 836, 842, 843, 844, 846, 848, 849, 851, 854, 855, 856, 865, 866], "posit": [0, 48, 50, 53, 57, 58, 59, 63, 64, 65, 80, 81, 82, 86, 87, 88, 98, 133, 135, 148, 166, 221, 222, 223, 227, 230, 241, 248, 255, 256, 262, 264, 274, 275, 282, 283, 287, 288, 292, 314, 329, 335, 340, 352, 370, 373, 377, 379, 428, 448, 459, 484, 493, 540, 550, 615, 628, 630, 631, 633, 635, 638, 639, 640, 644, 645, 649, 668, 671, 692, 697, 703, 708, 743, 748, 768, 769, 774, 777, 785, 790, 794, 795, 808, 820, 822, 825, 829, 843, 846, 847, 854, 865, 874], "excel": [0, 6, 879], "high": [0, 6, 23, 32, 33, 51, 58, 62, 67, 81, 85, 90, 376, 419, 423, 586, 635, 637, 644, 650, 651, 652, 653, 655, 657, 659, 740, 742, 779, 817, 820, 835, 841, 843, 854, 859, 863, 868, 869, 870, 871, 872, 876, 878, 879], "show": [0, 3, 4, 5, 6, 7, 12, 21, 27, 32, 33, 34, 35, 37, 44, 46, 48, 49, 580, 589, 612, 635, 814, 820, 821, 822, 828, 830, 833, 837, 842, 843, 846, 848, 857, 865, 872], "trade": [0, 865], "off": [0, 13, 25, 35, 62, 63, 85, 86, 400, 401, 402, 637, 638, 660, 672, 692, 792, 793, 821, 836, 850, 863, 865, 878], "wa": [0, 9, 13, 32, 33, 38, 47, 58, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 359, 360, 362, 363, 364, 370, 373, 377, 400, 401, 402, 420, 451, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 491, 493, 494, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 602, 614, 620, 625, 633, 635, 642, 648, 649, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 802, 814, 816, 822, 825, 827, 828, 830, 833, 839, 841, 843, 851, 853, 862, 865, 866, 871, 872, 874], "overal": [0, 637, 660, 808, 829, 831, 832, 834, 856, 865, 868, 870, 871, 872], "slightli": [0, 15, 313, 370, 829, 843, 846, 851, 855], "lower": [0, 15, 48, 54, 57, 58, 63, 67, 80, 81, 86, 90, 133, 146, 272, 308, 314, 320, 329, 330, 368, 370, 388, 526, 527, 533, 630, 633, 638, 644, 668, 674, 675, 681, 742, 779, 792, 822, 831, 833, 843, 846, 851, 857, 859, 868, 869, 870, 872, 873, 878, 879], "good": [0, 23, 32, 33, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 846, 847, 849, 851, 852, 855], "due": [0, 25, 32, 33, 35, 49, 51, 274, 284, 379, 493, 633, 821, 825, 830, 835, 842, 843, 862, 865, 866, 872], "97": [0, 12, 15, 44, 58, 60, 80, 83, 90, 227, 361, 373, 620, 633, 636, 741], "suggest": [0, 1, 6, 13, 820, 821, 822, 828, 831, 837, 841, 843, 846, 847, 848, 858], "slight": [0, 32, 33, 831, 846, 855], "edg": [0, 50, 58, 65, 81, 88, 320, 370, 376, 379, 388, 412, 485, 526, 640, 700, 702, 715, 780, 825, 846, 866, 872, 874, 878], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 6, 11, 13, 32, 33, 36, 37, 38, 39, 377, 437, 814, 822, 829, 831, 835, 839, 846, 850, 852, 856, 857, 859, 866, 877, 879], "design": [0, 1, 6, 15, 23, 32, 81, 248, 313, 318, 319, 370, 633, 814, 817, 824, 828, 830, 831, 842, 843, 844, 845, 849, 851, 853, 857, 861, 862, 868, 870, 872, 875, 876, 877], "heatmap": 0, "seaborn": [0, 48], "aesthet": 0, "appeal": 0, "eas": [0, 841, 872], "plot_classification_report": 0, "argument": [0, 6, 9, 13, 27, 29, 30, 32, 33, 35, 37, 38, 39, 44, 46, 48, 50, 53, 54, 57, 58, 59, 63, 75, 76, 80, 81, 82, 98, 99, 104, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 181, 210, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 329, 330, 336, 337, 339, 342, 344, 345, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 413, 414, 415, 420, 422, 424, 431, 485, 493, 497, 523, 526, 530, 536, 537, 539, 540, 545, 547, 548, 553, 557, 559, 561, 563, 573, 577, 578, 592, 596, 601, 602, 615, 625, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 662, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 725, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 785, 790, 793, 794, 795, 802, 807, 810, 814, 820, 824, 825, 826, 827, 828, 829, 833, 834, 837, 839, 844, 846, 847, 849, 851, 853, 854, 859, 861, 865, 866, 867, 872], "plot": [0, 6, 7, 13, 15, 47, 872], "color": [0, 47, 75, 104, 813], "represent": [0, 50, 58, 59, 75, 81, 82, 104, 151, 152, 166, 169, 194, 195, 221, 224, 231, 234, 236, 241, 248, 271, 274, 276, 291, 317, 349, 353, 358, 362, 370, 373, 536, 598, 628, 631, 632, 633, 635, 777, 779, 780, 793, 831, 870, 871, 873, 877, 878], "easi": [0, 1, 32, 33, 46, 821, 822, 826, 827, 829, 839, 841, 844, 846, 849, 862, 870, 872, 878, 879], "assess": [0, 25, 35, 820, 849], "side": [0, 70, 93, 351, 373, 377, 447, 647, 756, 777, 793, 807, 808, 821, 822, 828], "pyplot": [0, 6, 7, 13, 15, 46, 47, 48, 51], "plt": [0, 6, 7, 13, 15, 46, 47, 48, 51], "sn": 0, "model_nam": [0, 6, 48], "ax": [0, 13, 47, 52, 58, 63, 65, 68, 71, 72, 74, 81, 86, 88, 91, 94, 95, 103, 107, 114, 118, 214, 336, 337, 341, 342, 357, 364, 373, 374, 376, 377, 379, 382, 388, 405, 410, 421, 447, 484, 485, 491, 505, 528, 529, 530, 531, 532, 533, 546, 615, 632, 635, 638, 640, 645, 648, 649, 669, 679, 687, 690, 691, 695, 702, 704, 705, 708, 710, 712, 715, 745, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 779, 793, 831, 833, 846, 847, 851, 853], "iloc": 0, "t": [0, 1, 5, 6, 7, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 44, 46, 47, 48, 58, 62, 73, 81, 85, 96, 98, 99, 103, 350, 365, 373, 375, 377, 431, 563, 581, 596, 618, 635, 636, 637, 642, 661, 663, 727, 772, 793, 814, 816, 817, 820, 821, 822, 824, 826, 827, 829, 830, 831, 832, 833, 836, 837, 839, 840, 841, 842, 846, 847, 849, 851, 853, 854, 855, 856, 857, 858, 862, 863, 865, 866, 867, 870, 872, 874], "annot": [0, 838], "fmt": 0, "2f": [0, 5, 11, 13], "cmap": 0, "blue": 0, "set_titl": [0, 13, 47, 48], "f": [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 32, 33, 45, 46, 48, 58, 65, 81, 88, 303, 320, 368, 370, 379, 475, 496, 640, 642, 707, 722, 726, 727, 728, 731, 736, 737, 815, 822, 824, 829, 830, 835, 847, 851, 853, 854, 863, 868], "figur": [0, 13, 47, 848], "fig": [0, 13, 47, 48], "ax1": [0, 48], "ax2": [0, 48], "subplot": [0, 13, 47, 48], "figsiz": [0, 47, 48], "tight_layout": [0, 48], "observ": [0, 15, 58, 81, 388, 522, 523, 822, 831, 835, 851, 865, 874], "exhibit": [0, 35, 878], "strong": [0, 779, 857, 862, 872], "commend": 0, "impli": [0, 69, 646, 750, 751, 752, 753, 846], "neg": [0, 52, 57, 58, 63, 65, 67, 72, 74, 80, 81, 86, 88, 90, 95, 98, 113, 116, 119, 127, 133, 135, 148, 241, 248, 255, 256, 274, 275, 283, 288, 296, 314, 329, 332, 368, 370, 377, 378, 379, 383, 428, 435, 441, 458, 493, 497, 513, 627, 630, 633, 638, 640, 644, 649, 669, 671, 688, 692, 694, 695, 701, 703, 704, 708, 741, 768, 769, 777, 779, 789, 829, 842], "depend": [0, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 37, 54, 55, 58, 59, 63, 69, 70, 78, 81, 86, 93, 94, 124, 130, 153, 221, 222, 223, 226, 227, 228, 229, 238, 239, 241, 244, 246, 262, 263, 264, 265, 274, 276, 279, 286, 287, 291, 292, 360, 373, 376, 377, 422, 430, 448, 596, 629, 630, 631, 633, 635, 637, 638, 645, 647, 662, 673, 674, 685, 686, 687, 688, 749, 754, 757, 767, 816, 818, 820, 821, 822, 828, 831, 832, 834, 836, 840, 842, 843, 844, 845, 846, 849, 851, 857, 858, 862, 865, 870, 872, 873], "applic": [0, 6, 19, 21, 46, 48, 51, 58, 62, 81, 85, 101, 377, 452, 637, 638, 642, 648, 664, 667, 692, 725, 726, 727, 731, 732, 764, 766, 814, 821, 830, 831, 832, 840, 855, 869, 870, 872, 874, 876, 878], "conclus": 0, "appear": [0, 379, 476, 477, 615, 635, 821, 822, 825, 843, 849, 865], "outperform": [0, 15], "especi": [0, 7, 821, 827, 837, 861, 872], "increas": [0, 11, 14, 15, 25, 32, 35, 58, 63, 65, 81, 86, 88, 101, 379, 388, 485, 526, 638, 640, 693, 702, 715, 779, 831, 835, 843, 847, 849, 861, 865, 872], "context": [0, 326, 370, 574, 635, 820, 821, 822, 827, 831, 832, 833], "specif": [0, 6, 7, 13, 23, 24, 29, 30, 32, 33, 34, 36, 38, 46, 56, 58, 59, 79, 81, 82, 181, 212, 215, 248, 269, 270, 279, 323, 336, 337, 370, 373, 379, 383, 493, 513, 546, 547, 548, 574, 631, 632, 633, 635, 638, 640, 641, 644, 647, 648, 674, 675, 690, 711, 716, 717, 718, 739, 756, 761, 762, 763, 765, 772, 774, 794, 795, 802, 803, 810, 812, 814, 817, 818, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 835, 837, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 855, 856, 857, 858, 859, 861, 865, 866, 867, 868, 870, 871, 873, 874, 875, 879], "problem": [0, 7, 13, 814, 817, 820, 822, 825, 826, 832, 843, 853, 862, 868, 874, 878], "domain": [0, 222, 223, 226, 227, 228, 229, 238, 239, 244, 246, 262, 263, 265, 286, 287, 288, 291, 292, 360, 373, 633, 834, 870, 872], "repo": [1, 17, 46, 819, 822, 825, 828, 830, 831, 836, 844, 846, 861], "hold": [1, 58, 59, 63, 71, 81, 86, 94, 98, 99, 335, 352, 357, 373, 388, 471, 500, 524, 525, 530, 577, 578, 635, 638, 648, 679, 759, 775, 823, 854, 873], "exampl": [1, 6, 7, 9, 11, 13, 14, 23, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 331, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 410, 413, 414, 415, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 437, 442, 444, 447, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 484, 485, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 505, 506, 508, 511, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 725, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 785, 802, 807, 808, 812, 814, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 842, 843, 847, 851, 853, 854, 855, 856, 857, 863, 869, 870, 873, 875, 878, 879], "tab": [1, 820, 821, 830, 836, 854], "ivi": [1, 2, 3, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 824, 825, 827, 829, 831, 832, 834, 836, 837, 838, 839, 840, 842, 849, 850, 857, 859, 862, 863, 864, 868, 879, 880], "web": 1, "relev": [1, 54, 77, 139, 630, 797, 820, 821, 822, 826, 829, 830, 831, 833, 836, 840, 841, 844, 845, 846, 854, 858, 862, 870, 877, 878], "link": [1, 23, 32, 33, 47, 814, 820, 821, 822, 828, 830, 831, 837, 843, 866, 868, 870], "open": [1, 4, 6, 7, 8, 11, 12, 13, 14, 29, 32, 33, 46, 47, 48, 49, 59, 67, 90, 127, 630, 644, 740, 742, 814, 815, 816, 817, 821, 822, 823, 828, 831, 834, 836, 843, 844, 849, 858, 861, 862, 863, 865, 866, 870, 871, 872, 874, 875], "avil": 1, "discuss": [1, 820, 822, 828, 831, 832, 842, 843, 845, 846, 849, 852, 853, 854, 857, 863, 868, 873], "comprehens": [1, 21, 814, 822, 825, 845], "possibl": [1, 4, 38, 54, 58, 77, 81, 88, 98, 129, 248, 291, 313, 336, 337, 370, 373, 376, 378, 379, 399, 454, 463, 464, 465, 471, 473, 475, 476, 477, 484, 500, 573, 633, 635, 637, 648, 660, 703, 704, 705, 707, 709, 710, 712, 714, 761, 763, 777, 793, 805, 808, 811, 815, 818, 820, 821, 822, 825, 828, 829, 831, 833, 834, 836, 837, 839, 841, 842, 843, 844, 846, 849, 851, 854, 857, 862, 870, 872, 878], "us": [1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 47, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 65, 67, 68, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 90, 91, 94, 96, 98, 99, 101, 104, 111, 139, 142, 153, 165, 167, 168, 179, 180, 200, 201, 203, 208, 212, 213, 214, 215, 217, 220, 226, 234, 262, 263, 265, 266, 268, 269, 270, 272, 273, 275, 284, 288, 293, 313, 315, 316, 318, 319, 320, 328, 350, 353, 354, 357, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 395, 396, 397, 399, 400, 401, 402, 403, 405, 410, 412, 413, 414, 415, 418, 420, 421, 422, 424, 429, 431, 435, 441, 443, 445, 446, 448, 449, 450, 452, 453, 458, 475, 479, 483, 485, 493, 497, 502, 504, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 530, 533, 551, 552, 561, 562, 573, 574, 581, 583, 584, 586, 593, 594, 606, 607, 609, 616, 617, 622, 623, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 646, 648, 661, 662, 664, 667, 672, 674, 681, 685, 689, 692, 695, 697, 706, 707, 708, 712, 716, 717, 718, 719, 721, 722, 728, 729, 730, 732, 739, 740, 741, 742, 744, 745, 746, 747, 750, 752, 760, 762, 775, 777, 778, 779, 780, 785, 789, 790, 792, 793, 794, 795, 796, 797, 802, 807, 808, 812, 815, 817, 819, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 863, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "attract": 1, "visual": [1, 6, 7, 15, 50, 812, 821, 836, 843, 846, 857, 872, 874, 877], "graph": [1, 4, 6, 7, 8, 12, 13, 15, 21, 22, 25, 27, 29, 30, 33, 39, 40, 45, 50, 51, 69, 646, 750, 751, 752, 753, 785, 814, 829, 839, 843, 845, 849, 851, 856, 857, 859, 863, 864, 865, 866, 867, 868, 872, 875], "nice": [1, 846, 863, 872], "etc": [1, 35, 40, 47, 54, 58, 67, 69, 73, 77, 81, 90, 96, 130, 138, 139, 142, 376, 383, 405, 410, 421, 509, 510, 512, 513, 630, 644, 646, 739, 740, 741, 742, 750, 751, 752, 753, 777, 780, 792, 793, 794, 795, 796, 797, 798, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 833, 835, 838, 843, 844, 846, 847, 851, 853, 854, 857, 859, 863, 865, 870, 872, 878], "tone": [1, 5], "feel": [1, 6, 7, 13, 47, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 816, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 850, 858, 865], "free": [1, 6, 7, 8, 13, 46, 47, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 816, 818, 819, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 850, 858, 865, 873, 875], "emoji": [1, 820], "don": [1, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 46, 48, 73, 96, 814, 820, 821, 822, 830, 831, 832, 837, 841, 846, 849, 855, 857, 858, 863, 865], "keep": [1, 2, 17, 19, 23, 29, 30, 32, 58, 65, 75, 81, 88, 98, 101, 361, 377, 452, 640, 714, 819, 820, 821, 822, 825, 828, 829, 830, 835, 842, 843, 846, 847, 849, 854, 856, 858, 866], "thing": [1, 7, 30, 44, 46, 807, 819, 820, 821, 822, 827, 843, 846, 849, 853, 854, 861, 862, 863, 872], "super": [1, 4, 8, 17, 19, 32, 33, 46, 58, 81, 377, 431, 814, 835, 851, 854, 855, 856, 866], "seriou": 1, "given": [1, 4, 7, 23, 32, 45, 58, 59, 64, 65, 67, 75, 81, 82, 83, 87, 88, 90, 98, 99, 101, 103, 104, 127, 131, 138, 139, 159, 160, 161, 162, 163, 175, 180, 199, 208, 212, 213, 214, 216, 220, 293, 323, 332, 335, 341, 342, 350, 351, 352, 354, 357, 370, 373, 376, 377, 378, 379, 382, 383, 388, 395, 396, 397, 398, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 421, 431, 436, 451, 455, 456, 457, 459, 460, 461, 462, 472, 473, 474, 481, 483, 495, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 523, 524, 525, 526, 532, 554, 558, 577, 578, 588, 616, 617, 620, 622, 623, 624, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 696, 697, 698, 699, 700, 703, 704, 705, 706, 708, 709, 713, 714, 726, 727, 736, 737, 740, 741, 742, 744, 756, 757, 758, 759, 772, 777, 778, 779, 780, 785, 789, 790, 792, 793, 795, 796, 797, 798, 799, 807, 808, 814, 817, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 852, 853, 855, 862, 863, 869, 874, 875, 878, 879], "intern": [1, 15, 75, 106, 107, 108, 642, 719, 729, 730, 792, 793, 794, 795, 796, 798, 823, 826, 829, 832, 834, 842, 844, 846, 848], "releas": [1, 6, 47, 820, 821, 831, 847, 849, 857, 863, 872, 878], "tracer": [1, 4, 8, 12, 14, 24, 27, 28, 29, 30, 33, 49, 51, 843, 850, 852, 857, 859, 866, 867, 868], "around": [1, 16, 17, 19, 21, 58, 75, 81, 104, 379, 485, 493, 820, 822, 825, 826, 828, 832, 838, 839, 843, 846, 847, 853, 857, 859, 865, 869, 870, 872, 879], "corner": [1, 58, 81, 376, 412, 821, 822, 836, 843], "anybodi": 1, "abl": [1, 4, 6, 7, 8, 13, 34, 38, 49, 51, 75, 98, 821, 822, 823, 825, 831, 836, 839, 842, 843, 847, 851, 856, 865, 875, 878], "start": [1, 2, 6, 7, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 47, 48, 54, 58, 75, 77, 81, 85, 127, 135, 138, 139, 354, 364, 373, 374, 376, 379, 388, 419, 475, 478, 486, 488, 498, 532, 630, 779, 807, 812, 815, 820, 821, 822, 823, 824, 830, 831, 833, 834, 836, 837, 838, 843, 846, 849, 850, 851, 853, 854, 855, 857, 865, 866, 872, 878], "shortli": 1, "so": [1, 2, 7, 8, 11, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 44, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 373, 376, 379, 386, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 637, 642, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 688, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 730, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 808, 814, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 865, 866, 867, 872, 873, 874, 876], "worri": [1, 32, 33, 820, 821, 837], "about": [1, 21, 22, 23, 26, 28, 30, 32, 33, 36, 47, 48, 55, 78, 166, 169, 631, 812, 814, 816, 819, 820, 821, 822, 823, 824, 825, 828, 830, 831, 832, 837, 838, 842, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 863, 867, 873, 874, 877], "transpil": [1, 9, 10, 11, 12, 14, 16, 21, 22, 24, 25, 35, 784, 785, 814, 820, 821, 835, 836, 843, 850, 851, 852, 859, 864, 865, 867, 872, 878, 879], "style": [1, 15, 46, 48, 379, 485, 645, 748, 822, 837, 872], "stori": 1, "anyon": [1, 815, 822, 830, 857, 862, 878], "ha": [1, 4, 6, 8, 10, 12, 13, 14, 15, 17, 19, 23, 25, 29, 32, 33, 35, 38, 40, 44, 51, 54, 58, 63, 65, 69, 71, 75, 78, 81, 82, 86, 88, 92, 94, 98, 140, 197, 221, 241, 244, 246, 248, 258, 274, 276, 281, 284, 286, 287, 291, 331, 332, 333, 370, 377, 378, 379, 388, 412, 447, 457, 468, 492, 494, 499, 522, 524, 525, 527, 559, 630, 632, 633, 637, 638, 640, 645, 646, 648, 663, 664, 678, 679, 687, 688, 690, 692, 695, 703, 710, 748, 751, 752, 753, 758, 759, 762, 764, 765, 766, 767, 774, 777, 780, 802, 820, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 855, 856, 857, 858, 861, 862, 863, 865, 867, 868, 871, 872, 874, 875, 878], "question": [1, 6, 7, 13, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863], "ping": 1, "me": [1, 822], "guillermo": 1, "commun": [1, 6, 7, 13, 47, 815, 820, 821, 822, 823, 857, 862, 871, 872, 874], "ux": 1, "team": [1, 814, 815, 817, 820, 821, 822, 823, 843, 858, 874], "discord": [1, 6, 7, 13, 47, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863], "channel": [1, 30, 48, 58, 59, 62, 81, 82, 85, 103, 104, 376, 382, 400, 401, 402, 412, 502, 503, 504, 507, 546, 550, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 789, 790, 792, 793, 795, 796, 797, 798, 822, 828, 836, 845], "templat": [1, 814, 828, 834, 846], "locat": [1, 48, 142, 388, 524, 630, 642, 644, 647, 723, 739, 756, 808, 820, 822, 827, 828, 832, 843, 844, 846, 847, 858, 870], "asset": [1, 859], "01_templat": 1, "ipynb": 1, "pleas": [1, 38, 47, 51, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 814, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863], "copi": [1, 48, 51, 54, 55, 56, 57, 58, 59, 65, 75, 77, 78, 79, 80, 81, 82, 88, 98, 102, 128, 129, 130, 134, 145, 153, 215, 275, 379, 461, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 500, 556, 582, 593, 600, 601, 630, 631, 632, 633, 635, 640, 642, 647, 703, 704, 705, 707, 709, 710, 712, 714, 720, 755, 757, 785, 808, 821, 822, 825, 827, 830, 831, 834, 843, 844, 851, 857, 865, 866, 867], "firstli": [1, 24, 25, 28, 34, 35, 39, 44, 826, 831, 833, 834, 835, 839, 840, 842, 849, 854, 868, 878], "file": [1, 6, 7, 13, 46, 47, 48, 59, 75, 590, 613, 635, 795, 812, 816, 820, 821, 822, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 839, 843, 844, 845, 846, 847, 851, 854, 858, 868, 871, 872, 873], "topic": [1, 21, 24, 25, 26, 34, 35, 36, 37, 38, 39, 840, 853, 872], "Then": [1, 51, 637, 664, 816, 820, 821, 822, 827, 828, 830, 836, 837, 840, 842, 846, 847, 857], "place": [1, 7, 12, 14, 27, 28, 29, 30, 46, 53, 54, 57, 58, 59, 63, 65, 75, 77, 79, 80, 81, 82, 86, 88, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 313, 314, 317, 329, 330, 335, 336, 337, 339, 342, 343, 344, 345, 349, 351, 352, 353, 354, 356, 357, 358, 362, 363, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 475, 485, 490, 493, 497, 510, 523, 526, 530, 539, 547, 548, 553, 557, 559, 561, 562, 563, 577, 581, 592, 596, 601, 605, 625, 630, 631, 632, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 797, 814, 818, 819, 822, 824, 825, 828, 829, 830, 832, 833, 834, 836, 838, 839, 843, 844, 846, 847, 849, 856, 859, 874], "folder": [1, 12, 14, 27, 28, 29, 30, 48, 821, 822, 825, 828, 830, 836, 839, 843, 846, 847, 848], "edit": [1, 820, 821, 822, 837], "titl": [1, 13, 15, 18, 20, 31, 47, 50, 814, 820, 822, 828], "accordingli": [1, 58, 63, 68, 69, 71, 72, 81, 86, 91, 94, 95, 140, 241, 246, 248, 264, 274, 288, 336, 337, 373, 630, 633, 638, 645, 646, 648, 649, 695, 746, 750, 751, 752, 753, 761, 762, 763, 764, 765, 766, 767, 768, 769, 843, 851, 858], "render": [1, 828, 834], "webpag": [1, 21], "content": [1, 2, 13, 18, 20, 31, 32, 47, 48, 58, 75, 81, 388, 530, 820, 822, 828, 832, 842, 845, 851, 854, 858], "behind": [1, 23, 32, 814, 824, 838, 846, 850, 852], "exist": [1, 23, 32, 33, 46, 47, 48, 51, 54, 58, 59, 75, 77, 81, 82, 88, 129, 379, 463, 464, 470, 471, 473, 475, 476, 477, 484, 500, 545, 581, 635, 640, 701, 703, 704, 705, 707, 709, 710, 712, 714, 797, 799, 812, 814, 820, 821, 825, 827, 832, 833, 834, 839, 840, 842, 843, 846, 849, 851, 857, 859, 861, 862, 870, 872, 875, 878], "cell": [1, 2, 4, 5, 8, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 47, 62, 85, 637, 662, 663, 793, 830, 851], "h2": [1, 2, 18, 20, 31], "tag": [1, 2, 18, 20, 31, 821, 822], "h3": [1, 2, 18, 20, 31], "subsect": [1, 2, 18, 20, 31, 820, 821, 822, 825, 830], "explan": [1, 2, 18, 20, 31, 820, 821, 822, 829, 834, 838, 843, 847, 853], "go": [1, 5, 6, 7, 13, 17, 19, 23, 30, 33, 38, 53, 58, 81, 85, 376, 419, 423, 642, 730, 731, 814, 815, 818, 820, 821, 822, 824, 827, 828, 831, 833, 836, 837, 843, 844, 846, 847, 850, 854, 857, 868, 872, 873, 877, 879], "default": [1, 4, 6, 8, 32, 33, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 101, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 173, 174, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 197, 198, 200, 201, 205, 208, 209, 210, 212, 213, 214, 215, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 391, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 569, 570, 573, 574, 577, 578, 581, 582, 587, 591, 592, 593, 594, 596, 598, 600, 601, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 778, 779, 780, 785, 789, 790, 792, 793, 794, 795, 796, 797, 798, 807, 808, 812, 820, 821, 822, 827, 828, 831, 832, 833, 834, 835, 838, 839, 843, 846, 849, 851, 855, 859, 865, 872], "text": [1, 5, 6, 12, 15, 46, 58, 59, 377, 378, 445, 453, 820, 822, 828, 833, 834], "paragraph": [1, 2, 18, 20, 31, 828], "p": [1, 2, 18, 20, 31, 44, 58, 59, 63, 81, 82, 86, 99, 140, 245, 377, 382, 427, 440, 508, 541, 542, 630, 633, 635, 638, 642, 679, 695, 727, 793, 814, 821, 822, 824], "path": [1, 12, 13, 14, 15, 27, 28, 29, 30, 47, 48, 774, 785, 801, 821, 828, 842, 843, 844, 858, 872], "correspond": [1, 4, 11, 14, 19, 32, 33, 47, 55, 57, 58, 59, 62, 65, 68, 69, 71, 75, 78, 80, 81, 85, 88, 94, 98, 101, 104, 154, 166, 169, 229, 279, 293, 332, 346, 347, 370, 373, 376, 377, 379, 382, 388, 399, 405, 416, 421, 427, 430, 431, 432, 451, 476, 477, 497, 502, 503, 504, 507, 524, 525, 593, 615, 631, 633, 635, 637, 638, 640, 644, 645, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 664, 669, 673, 674, 679, 686, 687, 707, 708, 739, 745, 746, 750, 751, 752, 753, 758, 759, 764, 765, 766, 767, 774, 777, 779, 807, 812, 814, 820, 822, 826, 827, 829, 830, 831, 833, 834, 835, 838, 839, 841, 843, 846, 849, 851, 865, 866, 867, 872], "toctre": [1, 828], "index": [1, 46, 47, 48, 51, 54, 58, 59, 65, 68, 69, 70, 75, 77, 81, 82, 88, 91, 92, 93, 133, 140, 314, 321, 322, 331, 332, 333, 370, 376, 377, 379, 384, 386, 388, 399, 405, 436, 438, 445, 468, 475, 478, 486, 488, 490, 493, 494, 497, 498, 514, 515, 524, 533, 536, 554, 556, 577, 578, 582, 628, 630, 635, 640, 642, 645, 646, 647, 707, 711, 721, 722, 723, 726, 727, 728, 734, 736, 745, 746, 748, 750, 751, 752, 754, 756, 778, 793, 808, 810, 829, 830, 835, 839, 840, 841, 842, 844, 846, 853, 872], "rst": [1, 839], "left": [1, 25, 35, 46, 47, 58, 63, 68, 70, 81, 86, 91, 93, 121, 122, 233, 248, 341, 357, 364, 373, 374, 376, 377, 379, 388, 411, 430, 435, 441, 448, 450, 476, 486, 528, 529, 530, 531, 532, 533, 546, 629, 633, 635, 638, 645, 647, 673, 674, 679, 688, 693, 745, 756, 777, 821, 822, 825, 828, 830, 831, 833, 836], "add": [1, 25, 35, 48, 50, 57, 58, 66, 73, 75, 80, 81, 89, 96, 103, 104, 364, 374, 376, 378, 419, 458, 573, 602, 633, 635, 637, 638, 643, 648, 664, 692, 738, 766, 774, 785, 793, 796, 812, 814, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 839, 840, 842, 843, 846, 847, 849, 851, 853, 857, 858, 868, 869, 870, 872], "grid": [1, 13, 48, 54, 140, 317, 370, 630, 833, 846], "item": [1, 5, 6, 7, 32, 33, 44, 46, 48, 53, 59, 73, 75, 77, 80, 81, 82, 135, 160, 197, 251, 267, 275, 342, 346, 359, 543, 553, 554, 558, 593, 594, 630, 631, 632, 635, 642, 649, 724, 725, 726, 727, 731, 736, 737, 771, 820, 829, 831, 851, 853, 854, 856, 865], "card": [1, 58, 81, 361, 373, 877], "refer": [1, 8, 58, 65, 71, 72, 81, 83, 88, 94, 95, 133, 148, 246, 264, 314, 329, 359, 370, 373, 376, 377, 379, 405, 410, 421, 428, 452, 475, 616, 617, 630, 633, 636, 638, 640, 648, 649, 669, 671, 694, 707, 765, 767, 768, 769, 793, 814, 819, 820, 821, 822, 825, 826, 828, 830, 831, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 858, 859, 872], "also": [1, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 23, 25, 27, 28, 30, 32, 33, 35, 37, 38, 39, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 169, 172, 173, 174, 176, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 373, 376, 377, 379, 386, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 630, 631, 633, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 729, 730, 731, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 792, 793, 802, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 854, 855, 856, 857, 858, 861, 862, 865, 866, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879], "look": [1, 6, 7, 8, 13, 23, 32, 33, 46, 48, 51, 814, 818, 820, 821, 822, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 839, 843, 844, 846, 847, 848, 849, 851, 853, 855, 856, 858, 861, 865, 868, 872], "document": [1, 6, 7, 13, 23, 32, 65, 248, 336, 337, 373, 615, 633, 635, 711, 815, 816, 819, 822, 828, 830, 831, 833, 842, 843, 844, 846, 854, 856], "sphinx": [1, 816, 828], "websit": [1, 50, 814, 821, 825, 862], "alreadi": [2, 6, 13, 14, 24, 27, 28, 29, 30, 32, 33, 38, 46, 48, 51, 58, 63, 75, 81, 86, 237, 247, 274, 284, 294, 379, 388, 464, 465, 485, 521, 530, 633, 638, 676, 683, 807, 808, 820, 821, 822, 827, 829, 831, 832, 838, 842, 843, 849, 857, 858, 872, 874, 879], "instal": [2, 7, 8, 9, 10, 11, 14, 15, 17, 19, 24, 25, 26, 27, 28, 29, 30, 32, 33, 46, 48, 49, 50, 51, 816, 821, 822, 827, 828, 836, 837], "skip": [2, 5, 13, 48, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 377, 379, 400, 401, 402, 420, 436, 438, 445, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 486, 489, 491, 493, 494, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 642, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 778, 807, 828, 839, 846], "colab": [2, 5, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 46, 48, 50, 51], "manual": [2, 6, 7, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 642, 719, 729, 730, 820, 821, 822, 831, 837, 846, 855, 858], "mind": [2, 17, 19, 23, 29, 32, 36, 820, 821, 826, 829, 846, 858, 866], "click": [2, 4, 48, 820, 821, 822, 830, 834, 836, 837, 852], "runtim": [2, 4, 5, 8, 11, 12, 13, 14, 25, 32, 35, 46, 47, 824, 839, 846, 849, 872], "restart": [2, 4, 5, 8, 12, 13, 46, 47, 821, 836], "git": [2, 4, 5, 8, 12, 32, 46, 47, 48, 49, 814, 816, 819, 821, 822, 825, 828, 830, 836, 837, 846, 858], "clone": [2, 4, 8, 12, 32, 46, 48, 49, 814, 816, 822, 836, 858], "http": [2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 19, 27, 28, 29, 30, 32, 33, 46, 47, 48, 49, 50, 51, 57, 58, 80, 81, 83, 148, 156, 244, 254, 255, 270, 329, 336, 337, 370, 373, 376, 379, 388, 420, 493, 523, 616, 617, 630, 631, 633, 636, 638, 640, 648, 686, 687, 715, 765, 814, 816, 821, 822, 825, 828, 830, 831, 834, 836, 858, 866], "github": [2, 4, 5, 8, 11, 12, 14, 32, 46, 47, 48, 49, 50, 814, 816, 817, 819, 822, 823, 825, 828, 830, 831, 833, 834, 836, 837, 845, 846, 858, 861, 880], "com": [2, 4, 5, 6, 7, 8, 11, 12, 14, 19, 32, 46, 47, 48, 49, 50, 814, 816, 821, 822, 825, 828, 830, 831, 836, 858], "unifyai": [2, 4, 8, 12, 32, 46, 47, 48, 49, 50, 814, 816, 821, 822, 828, 836, 858], "model": [2, 3, 4, 9, 15, 16, 21, 22, 23, 49, 51, 241, 274, 378, 454, 633, 790, 794, 795, 812, 854, 855, 859, 865, 866, 870, 871, 872, 873, 874, 875, 876, 878, 879], "depth": [2, 4, 6, 8, 12, 47, 54, 58, 62, 77, 81, 85, 142, 376, 379, 412, 472, 546, 558, 630, 635, 637, 655, 656, 822, 830, 854, 855, 856, 858], "repositori": [2, 4, 8, 12, 816, 820, 821, 822, 824, 825, 828, 836, 845, 863], "cd": [2, 4, 8, 12, 32, 49, 814, 816, 821, 822, 836, 858], "resnet": [3, 6, 14, 21, 32, 865, 866], "imag": [3, 4, 6, 7, 11, 14, 17, 21, 29, 32, 33, 46, 47, 48, 49, 50, 51, 58, 62, 80, 81, 85, 103, 221, 222, 223, 224, 227, 230, 239, 242, 244, 246, 255, 256, 257, 262, 264, 277, 284, 285, 287, 288, 292, 376, 395, 396, 412, 413, 414, 416, 546, 633, 635, 637, 650, 651, 652, 653, 654, 657, 658, 659, 793, 814, 821, 836, 849, 851, 852, 854, 856, 858, 865, 866, 872], "classif": [3, 4, 12, 15, 21, 46, 872], "acceler": [3, 21, 831, 843, 870, 874, 875, 876, 877], "convert": [3, 8, 9, 11, 14, 15, 17, 19, 21, 22, 24, 26, 29, 30, 32, 33, 34, 36, 38, 46, 49, 51, 53, 54, 57, 75, 76, 77, 80, 98, 128, 129, 141, 151, 152, 194, 195, 196, 197, 208, 216, 220, 240, 280, 379, 384, 463, 464, 465, 514, 579, 597, 599, 600, 601, 603, 630, 631, 632, 633, 635, 638, 642, 696, 720, 731, 732, 774, 802, 807, 820, 826, 827, 840, 841, 843, 846, 848, 851, 857, 859, 863, 866, 870, 871, 878], "faster": [3, 4, 9, 11, 14, 15, 21, 32, 33, 49, 51, 58, 63, 81, 86, 377, 450, 638, 688, 816, 819, 828, 859, 874, 877], "infer": [3, 6, 7, 9, 11, 13, 14, 15, 21, 25, 35, 37, 38, 47, 49, 51, 54, 58, 59, 62, 65, 77, 81, 82, 85, 88, 127, 129, 132, 136, 137, 141, 144, 150, 159, 160, 161, 162, 163, 313, 314, 376, 379, 383, 412, 497, 511, 557, 591, 592, 630, 631, 635, 637, 640, 660, 707, 802, 803, 824, 827, 831, 832, 846, 851, 856, 866, 870, 871, 874, 876], "mmpretrain": [3, 21], "segment": [3, 21, 58, 81, 331, 332, 333, 370, 828, 833], "unet": [3, 21], "alexnet": [3, 21], "written": [3, 4, 5, 6, 13, 21, 23, 32, 33, 46, 59, 379, 474, 821, 825, 826, 834, 837, 838, 842, 843, 847, 851, 853, 856, 857, 861, 866, 870, 872, 876, 878, 879], "xgboost": [3, 21], "paddlepaddl": [3, 21, 336, 337, 373, 821], "dinov2": [3, 7, 21], "project": [3, 12, 14, 21, 26, 27, 28, 29, 30, 32, 33, 36, 99, 637, 664, 793, 814, 816, 817, 820, 821, 822, 823, 826, 827, 828, 846, 855, 857, 861, 862, 863, 866, 868, 870, 872, 875, 879, 880], "convnext": [3, 6, 11, 13, 21], "finetun": [3, 21, 46], "video": [4, 8, 11, 12, 14, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 814, 815, 820, 821, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 858, 870], "tutori": [4, 6, 7, 8, 11, 12, 13, 14, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 814, 822, 843, 858], "three": [4, 5, 21, 27, 37, 38, 48, 58, 140, 313, 370, 379, 465, 630, 821, 822, 829, 830, 831, 833, 843, 846, 849, 850, 851, 873, 878], "major": [4, 5, 645, 748, 831, 832, 844, 846, 857, 862, 869, 872], "ml": [4, 5, 6, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 48, 51, 815, 819, 843, 850, 851, 852, 854, 855, 856, 860, 862, 863, 866, 868, 869, 870, 871, 872, 875, 877, 879], "framework": [4, 5, 7, 9, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 39, 46, 48, 50, 53, 59, 171, 193, 203, 206, 217, 544, 560, 564, 596, 599, 631, 632, 635, 642, 721, 772, 774, 778, 785, 790, 797, 802, 803, 817, 818, 820, 821, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 836, 838, 839, 840, 842, 843, 846, 847, 849, 850, 851, 853, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 876], "sinc": [4, 8, 12, 13, 29, 30, 32, 33, 46, 48, 58, 81, 99, 373, 816, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 835, 842, 843, 857, 862, 872, 878], "automat": [4, 8, 9, 12, 13, 30, 32, 33, 38, 820, 821, 822, 824, 827, 828, 830, 831, 837, 839, 842, 846, 849, 850, 852, 855, 856, 858, 859, 863, 872, 875, 879], "sure": [4, 8, 11, 12, 13, 14, 15, 32, 46, 817, 820, 821, 822, 825, 830, 835, 836, 843, 844, 846, 849, 858], "enabl": [4, 5, 6, 8, 11, 12, 13, 14, 15, 27, 28, 30, 47, 58, 63, 75, 86, 104, 376, 378, 399, 457, 581, 635, 638, 681, 795, 812, 814, 821, 822, 823, 826, 829, 831, 839, 840, 841, 842, 843, 846, 847, 850, 852, 854, 856, 857, 859, 862, 865, 870, 871, 872, 873, 874, 875, 878, 879], "dm": [4, 5, 8, 11, 14, 32, 33, 44, 46], "haiku": [4, 5, 8, 11, 14, 30, 32, 33, 44, 46, 50, 790, 814, 856, 863, 866, 872], "exit": [4, 8, 12, 13, 32, 33, 832], "download": [4, 6, 7, 12, 13, 17, 19, 32, 33, 47, 48, 51, 816, 821, 828, 846, 865, 866], "imagenet": [4, 6, 13, 19, 47, 49, 814], "class": [4, 6, 7, 8, 12, 13, 15, 17, 19, 23, 32, 33, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 135, 144, 150, 166, 169, 182, 184, 185, 244, 281, 339, 361, 373, 387, 388, 396, 397, 430, 529, 530, 537, 546, 550, 563, 573, 596, 630, 631, 632, 633, 635, 637, 638, 639, 642, 643, 658, 663, 667, 673, 683, 687, 688, 690, 697, 713, 720, 731, 738, 753, 760, 764, 765, 774, 775, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 805, 807, 812, 814, 820, 827, 828, 829, 831, 832, 833, 834, 838, 840, 841, 844, 845, 846, 849, 851, 852, 854, 855, 856, 859, 865, 866, 870, 872, 873, 879], "wget": [4, 6, 8, 12, 46, 47, 50, 821], "raw": [4, 6, 7, 8, 11, 12, 14, 29, 32, 33, 46, 49, 50, 75, 814, 834, 866, 873], "githubusercont": [4, 6, 8, 12, 46, 50], "hub": [4, 6, 8, 12, 46, 49, 51], "master": [4, 8, 12, 24, 25, 26, 34, 35, 36, 37, 38, 39, 46, 48, 49, 50, 817, 830, 872, 880], "imagenet_class": [4, 12], "categori": [4, 6, 12, 820, 825, 826, 829, 831, 835, 843, 847, 850], "strip": [4, 12, 25, 35, 862], "readlin": [4, 12, 47], "cat": [4, 7, 12, 47, 844, 849, 851, 856, 865, 866], "jpg": [4, 6, 7, 8, 11, 12, 14, 29, 32, 33, 48, 49, 814, 866], "filenam": [4, 8, 12, 13, 32, 33, 46, 48, 51, 59, 795, 801, 854], "import": [4, 6, 7, 9, 10, 11, 13, 14, 17, 19, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 49, 50, 51, 58, 69, 73, 77, 81, 96, 195, 196, 200, 212, 308, 388, 523, 558, 574, 632, 635, 641, 646, 717, 718, 753, 785, 802, 803, 814, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 831, 832, 833, 834, 837, 840, 841, 842, 843, 844, 845, 846, 847, 851, 853, 854, 856, 857, 858, 862, 865, 866, 867, 868, 870, 872, 875, 876, 878], "devic": [4, 6, 7, 8, 9, 11, 12, 13, 14, 47, 48, 51, 54, 58, 67, 75, 77, 81, 90, 103, 106, 107, 108, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 313, 314, 329, 330, 370, 383, 473, 509, 510, 512, 513, 537, 551, 552, 630, 635, 644, 739, 740, 741, 742, 772, 774, 775, 790, 792, 793, 794, 795, 796, 797, 798, 799, 812, 822, 824, 827, 831, 835, 839, 840, 844, 846, 847, 849, 851, 856, 857, 858, 859, 862, 871, 872, 874, 875, 876, 877], "torchvis": [4, 6, 11, 12, 13, 46, 863], "transform": [4, 5, 6, 7, 11, 12, 13, 14, 29, 32, 33, 46, 47, 49, 58, 62, 81, 85, 376, 377, 398, 399, 404, 405, 408, 409, 410, 420, 421, 424, 441, 637, 661, 777, 780, 793, 814, 840, 846, 856, 859, 865, 866, 870, 872, 873, 874], "pil": [4, 6, 7, 8, 11, 12, 14, 29, 32, 33, 47, 48, 49, 814, 866], "time": [4, 5, 6, 7, 9, 10, 11, 13, 14, 30, 32, 33, 38, 46, 48, 49, 50, 58, 60, 63, 69, 81, 83, 92, 98, 99, 135, 342, 373, 376, 377, 379, 388, 405, 410, 422, 424, 445, 452, 485, 491, 523, 617, 622, 630, 636, 637, 638, 640, 641, 645, 646, 660, 663, 678, 713, 716, 717, 718, 745, 746, 750, 751, 793, 794, 795, 812, 820, 821, 822, 825, 827, 829, 830, 831, 833, 836, 838, 839, 840, 842, 843, 846, 847, 851, 854, 856, 857, 858, 861, 862, 863, 865, 866, 870, 872, 873, 876, 877, 878], "filterwarn": [4, 5, 13], "ignor": [4, 5, 13, 45, 53, 54, 58, 75, 81, 140, 376, 377, 379, 388, 400, 401, 402, 431, 439, 447, 487, 488, 492, 531, 630, 637, 642, 664, 730, 731, 797, 821, 828, 830, 833, 846, 857, 878], "compos": [4, 6, 7, 11, 12, 13, 32, 33, 46, 58, 81, 376, 390, 391, 392, 393, 821, 829, 843, 846, 865, 867, 872, 879], "resiz": [4, 6, 7, 8, 11, 12, 13, 46, 47, 58, 81, 376, 412, 849], "centercrop": [4, 12, 13], "224": [4, 6, 7, 12, 13, 17, 19, 32, 33, 46, 47, 49, 814, 866], "totensor": [4, 6, 7, 11, 12, 13, 46], "485": [4, 12, 13, 46], "456": [4, 12, 13, 46, 846], "406": [4, 12, 13, 46, 58, 81, 398, 541, 635], "229": [4, 12, 13, 46, 280, 633], "225": [4, 12, 13, 46, 48, 235, 633], "torch_img": [4, 8, 12], "unsqueez": [4, 8, 11, 12], "img": [4, 8, 12, 29, 32, 33, 46, 47, 48, 50, 814, 854, 866], "ipython": [4, 8, 12, 27, 28, 29, 30, 32, 33, 51], "displai": [4, 8, 12, 13, 29, 32, 33, 46, 47, 48, 50, 51, 821, 828, 830, 835, 846, 854], "end": [4, 8, 13, 46, 47, 58, 81, 127, 229, 285, 354, 373, 376, 378, 379, 424, 453, 475, 485, 487, 488, 630, 633, 808, 821, 822, 827, 830, 836, 842, 847, 849, 850, 857, 870, 875], "set_default_devic": [4, 5, 6, 8, 11, 12, 13, 14, 218, 632, 832], "ivy_model": [4, 5, 8, 12, 49], "ivy_alexnet": 4, "quick": [4, 21, 33, 822, 824, 844, 855], "trace_graph": [4, 5, 8, 12, 25, 26, 27, 28, 32, 33, 35, 36, 37, 38, 39, 40, 49, 795, 814, 851, 856, 864], "moment": [4, 58, 60, 81, 83, 377, 434, 616, 617, 622, 636, 797, 812, 820, 827, 857, 865, 866], "cost": [4, 60, 83, 616, 617, 620, 622, 623, 624, 636, 641, 716, 717, 718, 808, 831, 849, 870], "arg": [4, 6, 8, 9, 10, 11, 12, 13, 17, 19, 27, 28, 30, 32, 33, 37, 38, 39, 50, 53, 75, 97, 107, 123, 204, 214, 602, 629, 630, 632, 635, 772, 774, 789, 790, 793, 794, 795, 799, 802, 807, 812, 814, 826, 831, 832, 835, 841, 842, 843, 849, 851, 855, 865, 866, 867], "asarrai": [4, 5, 8, 11, 12, 47, 54, 58, 59, 70, 77, 81, 82, 93, 128, 386, 515, 516, 546, 557, 561, 562, 592, 593, 594, 630, 635, 637, 646, 647, 651, 751, 755, 835, 840, 843, 844], "cuda": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 32, 47, 48, 51, 54, 58, 67, 77, 81, 90, 138, 139, 142, 194, 195, 196, 212, 383, 509, 510, 512, 513, 630, 632, 638, 644, 689, 739, 740, 741, 742, 792, 793, 794, 795, 796, 797, 798, 812, 851, 857, 859, 877], "output": [4, 5, 7, 8, 9, 10, 12, 13, 23, 29, 30, 32, 33, 45, 46, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 180, 214, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 373, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 418, 420, 421, 422, 424, 425, 427, 428, 429, 431, 433, 436, 437, 439, 442, 443, 444, 445, 447, 448, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 468, 469, 470, 473, 475, 476, 477, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 540, 541, 542, 546, 547, 548, 550, 554, 563, 570, 577, 578, 579, 603, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 732, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 777, 792, 793, 807, 808, 814, 816, 821, 822, 824, 825, 826, 828, 829, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 851, 853, 855, 856, 857, 859, 865, 866, 873], "softmax": [4, 6, 7, 12, 17, 30, 32, 33, 48, 52, 62, 73, 74, 85, 378, 455, 627, 637, 664, 667, 789, 814], "pass": [4, 6, 7, 8, 11, 12, 13, 14, 15, 17, 19, 23, 30, 32, 33, 39, 45, 46, 48, 50, 51, 57, 58, 73, 75, 80, 81, 96, 104, 123, 124, 126, 158, 180, 195, 214, 229, 275, 376, 378, 379, 382, 383, 388, 422, 455, 475, 502, 504, 509, 529, 530, 563, 629, 631, 632, 633, 635, 641, 716, 717, 772, 774, 778, 785, 790, 794, 795, 797, 798, 802, 807, 812, 814, 818, 820, 822, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 849, 857, 865, 866, 867, 870], "argsort": [4, 12, 70, 93, 647, 756, 843], "descend": [4, 12, 70, 93, 638, 647, 688, 689, 754, 757], "top": [4, 12, 16, 21, 30, 32, 33, 46, 47, 58, 65, 81, 320, 370, 378, 379, 453, 495, 546, 635, 701, 821, 822, 831, 836, 843, 845, 846, 849, 854, 855, 872, 876], "logit": [4, 5, 6, 7, 8, 12, 13, 46, 47, 48, 49, 58, 64, 81, 87, 368, 383, 509, 512, 639, 697, 699, 789, 865], "gather": [4, 12, 46, 58, 59, 81, 82, 331, 332, 333, 370, 554, 556, 635, 879], "to_list": [4, 12, 59, 82, 635], "arrai": [4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 104, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 187, 197, 198, 202, 207, 209, 211, 214, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 581, 582, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 779, 785, 792, 793, 794, 795, 798, 802, 807, 808, 810, 814, 818, 820, 821, 822, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 866, 867, 870, 871, 872, 874, 878, 879], "282": [4, 12], "281": [4, 12, 46, 48], "285": [4, 12, 81], "64773697": 4, "29496649": 4, "04526037": 4, "tiger": [4, 12], "tabbi": [4, 7, 12], "egyptian": [4, 12], "torch_alexnet": 4, "alexnet_weight": 4, "imagenet1k_v1": [4, 12, 13], "dropout": [4, 62, 85, 376, 400, 401, 402, 637, 662, 664, 667, 793, 854], "torch_output": [4, 8, 9, 12], "dim": [4, 12, 48, 58, 75, 77, 81, 142, 314, 370, 376, 379, 394, 404, 405, 406, 409, 417, 475, 497, 630, 637, 650, 657, 658, 663, 779, 793, 831, 843, 844, 849], "torch_class": [4, 12], "torch_logit": [4, 12], "tensor": [4, 5, 6, 9, 11, 12, 13, 14, 17, 19, 23, 24, 27, 28, 30, 32, 33, 34, 38, 44, 46, 54, 57, 58, 59, 62, 63, 64, 65, 67, 71, 75, 77, 80, 81, 82, 85, 86, 87, 88, 90, 94, 97, 130, 138, 139, 142, 148, 164, 180, 272, 273, 303, 320, 324, 325, 326, 327, 328, 329, 338, 361, 368, 370, 373, 376, 377, 378, 379, 388, 389, 395, 396, 399, 403, 412, 413, 414, 415, 422, 424, 426, 433, 434, 435, 436, 439, 441, 443, 445, 446, 449, 451, 452, 453, 455, 458, 459, 475, 478, 483, 486, 487, 488, 489, 492, 497, 498, 529, 534, 577, 578, 630, 631, 633, 635, 637, 638, 639, 640, 644, 648, 660, 663, 664, 679, 690, 697, 707, 709, 739, 762, 793, 802, 808, 812, 814, 826, 827, 831, 832, 836, 838, 839, 842, 843, 844, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 865, 866, 867, 869, 870, 873, 875, 876, 879], "6477": 4, "2950": 4, "0453": 4, "grad_fn": [4, 12, 30, 44, 619, 626, 636, 854], "takebackward0": [4, 12], "great": [4, 7, 8, 822, 846, 851, 853, 862, 863, 878], "simpl": [4, 7, 17, 21, 22, 24, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 44, 46, 48, 51, 58, 81, 388, 523, 779, 793, 808, 814, 820, 821, 822, 826, 828, 829, 831, 832, 833, 834, 839, 842, 843, 846, 847, 849, 853, 855, 856, 857, 859, 861, 865, 866, 871, 872, 873, 874], "let": [4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 17, 19, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 44, 46, 47, 49, 51, 59, 71, 82, 221, 222, 223, 224, 227, 230, 239, 242, 244, 246, 255, 256, 257, 262, 264, 277, 285, 287, 288, 292, 553, 554, 633, 635, 638, 648, 692, 762, 764, 765, 766, 767, 814, 820, 823, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 863, 865, 866, 879], "ll": [4, 6, 7, 8, 9, 11, 13, 14, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 47, 814, 815, 817, 818, 820, 821, 822, 823, 828, 833, 836, 837, 841, 842, 854, 858, 863, 865, 866], "try": [4, 6, 7, 13, 24, 34, 44, 47, 51, 75, 602, 635, 792, 802, 814, 820, 821, 822, 825, 826, 829, 830, 831, 835, 837, 842, 844, 851, 853, 857, 860, 862, 863, 867], "tf": [4, 6, 8, 9, 10, 13, 14, 17, 19, 24, 27, 28, 30, 32, 33, 34, 35, 37, 39, 44, 49, 50, 790, 814, 826, 831, 832, 838, 842, 843, 846, 847, 849, 851, 856, 857, 859, 865, 866, 867, 872], "onc": [4, 6, 8, 32, 33, 44, 46, 63, 67, 86, 90, 214, 377, 430, 632, 638, 644, 673, 674, 675, 688, 739, 814, 820, 821, 822, 829, 830, 831, 832, 833, 836, 837, 842, 843, 846, 849, 851, 854, 857, 858, 863, 865], "set": [4, 7, 9, 17, 19, 25, 32, 33, 35, 38, 46, 47, 48, 49, 50, 53, 58, 59, 62, 63, 68, 70, 71, 75, 81, 82, 85, 86, 91, 93, 94, 116, 119, 126, 146, 148, 182, 183, 184, 185, 186, 197, 210, 211, 212, 213, 214, 229, 329, 341, 357, 359, 364, 370, 373, 374, 376, 377, 378, 379, 388, 399, 420, 424, 428, 432, 435, 453, 458, 459, 475, 485, 488, 495, 523, 528, 529, 530, 531, 532, 533, 535, 539, 546, 558, 563, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 596, 604, 627, 629, 630, 631, 632, 633, 635, 637, 638, 642, 644, 645, 647, 648, 660, 667, 669, 679, 681, 684, 687, 688, 719, 726, 729, 730, 731, 736, 737, 743, 745, 746, 750, 752, 753, 754, 757, 765, 767, 774, 777, 778, 779, 780, 785, 792, 793, 795, 797, 802, 808, 811, 812, 814, 815, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 835, 837, 839, 840, 842, 843, 844, 846, 847, 849, 851, 853, 854, 861, 864, 865, 866, 870, 871, 872, 873, 874, 876, 879], "post": [4, 6, 8, 13, 46, 66, 89, 643, 738, 821, 836, 841, 856, 858], "process": [4, 6, 8, 27, 32, 33, 37, 46, 208, 220, 632, 815, 821, 822, 828, 829, 830, 836, 837, 839, 841, 843, 844, 845, 846, 849, 851, 856, 862, 863, 865, 870, 871, 872, 875, 876, 878, 879], "st": [4, 5, 11, 777, 825, 844, 846], "perf_count": [4, 9, 10, 11], "raw_logit": 4, "latenc": [4, 11], "nn": [4, 6, 7, 8, 10, 19, 30, 32, 33, 46, 50, 140, 630, 814, 839, 844, 849, 856, 866, 873], "direct": [4, 58, 81, 342, 349, 353, 358, 362, 373, 376, 379, 410, 421, 476, 477, 491, 647, 757, 820, 826, 828, 843, 849, 855, 856, 868, 872, 873, 876], "tolist": 4, "652289830999962": 4, "int32": [4, 44, 46, 55, 58, 59, 67, 68, 71, 78, 81, 82, 90, 91, 133, 138, 142, 144, 150, 153, 156, 158, 160, 162, 164, 167, 169, 170, 174, 177, 181, 185, 189, 191, 209, 236, 272, 273, 384, 388, 514, 524, 525, 526, 554, 563, 600, 630, 631, 632, 633, 635, 644, 645, 648, 740, 741, 742, 746, 758, 759, 764, 766, 777, 778, 831, 843, 846, 851], "6477362": 4, "29496726": 4, "04526032": 4, "As": [4, 6, 7, 8, 11, 13, 14, 15, 17, 19, 25, 29, 30, 32, 33, 35, 38, 44, 45, 69, 73, 96, 638, 646, 686, 750, 751, 752, 753, 818, 820, 821, 822, 823, 826, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 849, 853, 854, 855, 857, 861, 865, 866, 867, 872, 877], "ident": [4, 6, 9, 15, 30, 47, 49, 63, 75, 133, 202, 556, 582, 630, 632, 635, 638, 642, 676, 680, 732, 793, 814, 829, 839, 840, 843, 844, 847, 849, 853, 854, 857, 859, 861, 863], "had": [4, 829, 830, 842, 847, 851, 872, 873], "postprocess": 4, "routin": [4, 830, 842, 843, 849, 857, 872], "feed": [4, 214, 632, 865, 872, 873], "carefulli": [4, 279, 633, 792, 843, 870, 875], "rewrit": 4, "easili": [4, 29, 32, 33, 44, 821, 826, 830, 836, 843, 846, 849, 854, 855, 856, 857, 862, 872, 878, 879], "quickest": 4, "particular": [4, 32, 33, 269, 633, 778, 821, 822, 825, 827, 830, 831, 833, 840, 842, 843, 846, 847, 868, 872, 878], "again": [4, 8, 26, 27, 35, 36, 37, 38, 638, 686, 822, 826, 827, 828, 829, 833, 835, 837, 842, 843, 846, 847, 849, 854, 856, 857, 862, 863, 877, 878], "speed": [4, 11, 14, 15, 32, 33, 46, 51, 59, 82, 570, 635, 846, 861, 875], "repeat": [4, 5, 26, 36, 58, 59, 65, 81, 82, 88, 376, 379, 388, 405, 410, 474, 523, 548, 635, 640, 641, 713, 717, 718, 807, 822, 826, 827, 833, 834, 842, 846], "previou": [4, 15, 25, 26, 27, 29, 35, 36, 37, 39, 60, 81, 83, 188, 189, 190, 191, 192, 365, 375, 376, 422, 603, 605, 606, 607, 608, 610, 611, 613, 617, 622, 631, 635, 636, 792, 811, 821, 822, 825, 827, 830, 832, 838, 843, 846, 849, 856, 857, 875], "trace": [4, 5, 6, 8, 11, 12, 13, 14, 21, 22, 26, 29, 32, 35, 37, 38, 50, 59, 63, 75, 82, 86, 565, 566, 569, 580, 589, 604, 612, 635, 638, 774, 785, 795, 797, 812, 814, 825, 829, 831, 843, 848, 849, 851, 856, 857, 864, 865, 866, 873, 878], "026875037000081647": 4, "overrid": [4, 8, 38, 47, 54, 58, 77, 81, 142, 388, 523, 630, 826, 828], "prealloc": [4, 8], "temporari": [4, 8, 590, 613, 635, 808, 831, 848], "fix": [4, 8, 48, 58, 81, 98, 99, 373, 376, 377, 422, 452, 637, 664, 814, 818, 821, 822, 825, 831, 837, 846, 847], "until": [4, 8, 808, 822, 842, 851, 857, 862, 865, 879], "o": [4, 8, 13, 45, 46, 47, 48, 50, 573, 635, 637, 664, 814, 821, 824, 830, 851, 858], "environ": [4, 8, 14, 27, 28, 29, 30, 47, 50, 814, 815, 822, 858, 872, 874], "xla_python_client_alloc": [4, 8], "platform": [4, 6, 8, 13, 15, 27, 28, 30, 816, 819, 821, 828, 870, 874, 876], "jit": [4, 11, 14, 32, 35, 851, 857, 865, 872], "img_jax": [4, 8], "device_put": [4, 11], "warm": 4, "_": [4, 9, 10, 11, 14, 15, 32, 45, 46, 57, 58, 75, 80, 81, 83, 99, 156, 244, 246, 254, 255, 270, 336, 337, 373, 376, 379, 388, 420, 449, 452, 493, 523, 546, 616, 617, 631, 633, 635, 636, 638, 640, 642, 648, 686, 687, 689, 715, 726, 765, 822, 830, 831, 834, 842, 846, 854], "0022192720000475674": 4, "64773613": 4, "29496723": 4, "exact": [4, 58, 74, 75, 111, 376, 378, 412, 417, 457, 458, 646, 750, 752, 779, 789, 821, 822, 825, 833, 851], "note": [4, 6, 8, 13, 15, 28, 32, 33, 38, 47, 48, 49, 58, 59, 63, 65, 69, 81, 86, 88, 98, 135, 148, 180, 248, 283, 284, 291, 329, 330, 350, 370, 373, 376, 377, 379, 399, 430, 435, 445, 446, 452, 475, 493, 631, 633, 637, 638, 640, 646, 648, 664, 673, 674, 685, 686, 688, 707, 711, 751, 753, 762, 793, 808, 812, 818, 820, 821, 822, 826, 831, 833, 834, 837, 842, 843, 844, 846, 847, 849], "were": [4, 8, 49, 75, 78, 169, 173, 174, 248, 633, 637, 664, 820, 821, 822, 831, 835, 837, 841, 842, 844, 846, 847, 849, 851, 865, 872, 873, 878], "function": [4, 6, 7, 9, 10, 13, 15, 17, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 166, 167, 168, 169, 172, 173, 174, 176, 180, 181, 198, 200, 201, 210, 214, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 573, 576, 577, 578, 581, 582, 585, 587, 589, 592, 593, 594, 595, 596, 598, 600, 601, 602, 608, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 725, 726, 727, 729, 730, 731, 732, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 775, 777, 778, 779, 780, 785, 789, 792, 795, 802, 803, 810, 812, 814, 818, 821, 822, 824, 825, 826, 827, 828, 830, 833, 834, 836, 842, 845, 850, 852, 853, 854, 855, 859, 861, 865, 867, 869, 870, 871, 872, 873, 878, 879], "dog": 4, "006431100999861883": 4, "258": [4, 637, 652, 654], "104": [4, 71, 638, 648, 683, 760], "259": 4, "72447652": 4, "13937832": 4, "05874982": 4, "samoi": 4, "wallabi": 4, "pomeranian": 4, "incorrect": [4, 830], "predict": [4, 6, 7, 8, 12, 13, 15, 46, 47, 48, 49, 58, 64, 81, 87, 378, 454, 457, 460, 639, 697, 698, 699, 814, 831], "down": [4, 25, 35, 49, 58, 81, 376, 379, 412, 477, 814, 821, 846, 859, 872, 878], "itself": [4, 7, 27, 37, 57, 98, 275, 536, 602, 633, 635, 642, 731, 808, 818, 821, 822, 825, 828, 829, 830, 831, 832, 835, 836, 837, 842, 843, 855, 857, 861, 865, 871, 872, 873, 878], "version": [4, 6, 9, 15, 29, 30, 35, 46, 47, 48, 51, 52, 58, 81, 98, 111, 292, 341, 343, 373, 388, 528, 533, 615, 633, 635, 638, 674, 675, 774, 802, 803, 814, 821, 822, 828, 830, 831, 834, 842, 844, 851, 861, 862, 863, 866, 878, 879], "004749261999904775": 4, "7245": 4, "1394": 4, "0587": 4, "promis": [4, 7, 862], "sourc": [4, 7, 9, 10, 12, 19, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 777, 778, 779, 781, 782, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 821, 822, 825, 826, 828, 829, 830, 843, 845, 861, 862, 863, 864, 866, 867, 871, 872, 873, 874, 875], "modul": [4, 6, 8, 11, 14, 17, 19, 21, 22, 23, 27, 28, 29, 30, 32, 33, 34, 38, 44, 45, 46, 48, 49, 50, 73, 75, 96, 104, 369, 371, 372, 380, 381, 385, 574, 635, 649, 770, 774, 789, 790, 791, 793, 794, 796, 798, 801, 802, 812, 814, 816, 821, 826, 827, 828, 835, 839, 842, 843, 845, 846, 851, 852, 854, 856, 857, 863, 865, 867, 872, 873, 875], "__init__": [4, 8, 17, 19, 32, 33, 44, 45, 46, 48, 75, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 775, 782, 783, 784, 789, 792, 793, 794, 795, 796, 797, 798, 801, 802, 805, 807, 809, 812, 814, 820, 826, 827, 831, 835, 843, 847, 851, 853, 854, 855, 856, 866], "self": [4, 6, 7, 8, 17, 19, 32, 33, 44, 45, 46, 48, 50, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 164, 166, 169, 172, 173, 174, 176, 178, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 637, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 797, 807, 814, 822, 826, 829, 835, 843, 844, 851, 853, 854, 855, 856, 866], "num_class": [4, 17, 19, 32, 33, 46, 48, 50, 814, 856, 866], "1000": [4, 6, 9, 10, 11, 12, 13, 17, 32, 33, 46, 47, 48, 49, 51, 54, 77, 139, 630, 814, 854, 866], "v": [4, 5, 8, 21, 22, 25, 32, 33, 35, 38, 39, 44, 47, 48, 58, 62, 70, 77, 81, 85, 93, 139, 239, 244, 246, 287, 377, 379, 431, 441, 448, 449, 474, 633, 637, 641, 647, 664, 667, 717, 718, 756, 774, 793, 794, 795, 796, 797, 798, 816, 821, 822, 824, 828, 836, 851, 854, 855, 856, 880], "_build": [4, 8, 794, 795], "kwarg": [4, 5, 7, 8, 14, 15, 32, 46, 50, 53, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 104, 107, 204, 379, 485, 573, 602, 630, 632, 635, 772, 774, 789, 790, 793, 794, 795, 802, 812, 814, 826, 831, 832, 835, 839, 842, 843, 849, 851, 855, 865, 866, 867], "featur": [4, 7, 14, 15, 17, 19, 21, 23, 32, 33, 46, 50, 58, 81, 376, 390, 392, 393, 400, 401, 402, 792, 793, 812, 814, 820, 821, 822, 826, 827, 830, 831, 838, 847, 849, 854, 857, 866, 872, 873, 874, 878], "sequenti": [4, 8, 9, 12, 13, 30, 32, 33, 48, 828, 829, 855, 866], "conv2d": [4, 8, 12, 13, 30, 32, 33, 48, 51, 62, 85, 637, 654, 793, 805], "64": [4, 8, 12, 13, 44, 46, 47, 48, 51, 57, 58, 62, 80, 81, 82, 85, 86, 90, 94, 104, 165, 235, 245, 279, 288, 289, 347, 373, 376, 398, 408, 546, 547, 594, 622, 631, 633, 635, 636, 637, 638, 642, 648, 652, 654, 656, 658, 659, 680, 683, 693, 727, 731, 741, 760, 764, 821, 831, 854, 855, 869, 877], "data_format": [4, 48, 58, 62, 81, 85, 376, 382, 391, 395, 396, 397, 400, 401, 402, 413, 414, 415, 416, 418, 502, 503, 504, 507, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 777, 793, 796], "nchw": [4, 48, 58, 62, 81, 85, 376, 382, 391, 396, 401, 414, 418, 507, 637, 650, 653, 654, 657, 658, 659, 793], "relu": [4, 8, 12, 13, 30, 32, 33, 44, 51, 52, 58, 73, 74, 81, 113, 303, 304, 312, 368, 627, 789, 844, 854, 855], "maxpool2d": [4, 8, 12, 13, 46, 793, 814], "192": [4, 48, 777, 807], "384": [4, 83, 616, 636, 642, 719], "avgpool": [4, 12, 13], "adaptiveavgpool2d": [4, 12, 13, 793], "classifi": [4, 7, 13, 15, 17, 19, 32, 33, 46, 48, 49, 814, 820, 865, 866], "prob": [4, 6, 7, 48, 58, 62, 81, 85, 90, 376, 383, 400, 401, 402, 509, 637, 644, 660, 739, 793], "4096": 4, "_forward": [4, 8, 11, 14, 32, 33, 44, 45, 48, 834, 851, 854, 855], "bidirect": [5, 637, 662], "encod": [5, 17, 19, 32, 33, 46, 48, 59, 64, 82, 87, 550, 635, 639, 697, 814, 854, 862, 866], "mlm": 5, "googl": [5, 27, 28, 29, 30, 46, 47, 48, 50, 830, 862], "choos": [5, 46, 48, 56, 68, 69, 79, 215, 241, 248, 269, 270, 274, 336, 337, 373, 379, 632, 633, 645, 646, 648, 749, 750, 751, 752, 753, 761, 762, 763, 765, 777, 820, 821, 822, 840, 846, 852, 856, 865], "librari": [5, 6, 7, 11, 13, 14, 21, 22, 28, 30, 44, 46, 56, 69, 79, 215, 246, 248, 264, 269, 270, 292, 336, 337, 373, 632, 633, 638, 646, 648, 674, 675, 750, 751, 752, 753, 761, 762, 763, 765, 812, 814, 820, 821, 825, 831, 856, 857, 861, 862, 863, 865, 868, 869, 870, 872, 876, 879], "pretrain": [5, 11, 17, 18, 19, 32, 33, 51, 814, 866], "save": [5, 6, 12, 13, 46, 58, 75, 81, 388, 530, 590, 613, 632, 635, 649, 795, 812, 821, 830, 837, 846, 857, 863, 871], "some": [5, 8, 9, 10, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 37, 38, 44, 48, 49, 75, 83, 246, 248, 264, 376, 400, 401, 402, 616, 617, 620, 622, 623, 624, 632, 633, 636, 642, 730, 793, 814, 818, 820, 821, 822, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 853, 854, 855, 857, 858, 859, 862, 863, 865, 866, 868, 869, 871, 872, 873, 878, 879], "mohame54": 5, "automodel": [5, 14, 32], "autotoken": 5, "load": [5, 6, 7, 11, 14, 29, 32, 46, 47, 48, 49, 50, 51, 75, 377, 448, 649, 795, 846, 857, 871, 878], "token": [5, 48, 823], "bert_bas": 5, "from_pretrain": [5, 7, 14, 32, 49, 865, 866], "base": [5, 7, 15, 46, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 108, 139, 148, 180, 244, 245, 262, 263, 264, 265, 279, 320, 329, 331, 338, 341, 347, 354, 370, 373, 376, 377, 378, 386, 419, 423, 448, 453, 515, 583, 594, 606, 630, 631, 633, 635, 638, 640, 646, 648, 679, 703, 750, 751, 752, 753, 760, 775, 778, 779, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 805, 808, 809, 812, 814, 821, 822, 823, 825, 829, 830, 831, 835, 838, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 872, 877, 879, 880], "uncas": 5, "eval": [5, 6, 8, 12, 13, 19, 27, 28, 29, 30, 637, 662, 795], "evalu": [5, 57, 58, 75, 80, 81, 244, 246, 262, 263, 264, 265, 269, 276, 278, 285, 289, 323, 355, 366, 367, 370, 375, 377, 378, 379, 444, 453, 458, 482, 626, 633, 636, 642, 649, 729, 730, 768, 769, 794, 795, 822, 829, 831, 839, 840, 872], "bert_token": 5, "sampl": [5, 6, 7, 11, 13, 14, 17, 19, 29, 32, 33, 47, 54, 57, 58, 67, 71, 77, 80, 81, 90, 94, 138, 139, 293, 320, 370, 376, 378, 379, 383, 400, 401, 402, 412, 422, 424, 453, 458, 488, 509, 510, 511, 512, 513, 630, 633, 644, 648, 739, 740, 741, 742, 765, 767, 793, 844, 846], "test": [5, 7, 24, 25, 27, 28, 34, 35, 37, 38, 39, 47, 48, 57, 59, 72, 80, 82, 95, 126, 172, 176, 255, 256, 257, 258, 281, 376, 400, 401, 402, 570, 629, 631, 633, 635, 649, 768, 769, 772, 775, 778, 808, 814, 816, 818, 819, 824, 828, 831, 833, 835, 837, 840, 843, 845, 847, 857, 858, 863, 865, 866, 867, 872], "did": [5, 46, 820, 828, 856, 862, 878], "realli": [5, 44, 821, 829, 836, 857, 865, 877, 878], "like": [5, 6, 7, 11, 13, 14, 24, 25, 26, 32, 34, 35, 36, 37, 38, 39, 49, 51, 54, 57, 58, 65, 77, 80, 81, 85, 88, 93, 139, 157, 180, 225, 245, 251, 254, 267, 285, 342, 347, 359, 373, 376, 377, 378, 379, 386, 388, 419, 421, 430, 455, 464, 465, 474, 475, 515, 516, 533, 630, 631, 633, 638, 640, 644, 647, 673, 707, 742, 755, 808, 814, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 862, 865, 866, 872, 877], "input": [5, 6, 7, 8, 9, 10, 13, 14, 17, 19, 29, 30, 32, 37, 38, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 195, 197, 198, 211, 214, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 442, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 572, 577, 578, 579, 585, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 608, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 728, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 778, 785, 789, 792, 793, 794, 795, 796, 805, 807, 808, 812, 825, 826, 827, 829, 831, 832, 833, 834, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 865, 866, 873, 876], "pad": [5, 12, 13, 46, 48, 58, 62, 65, 81, 85, 88, 99, 101, 376, 379, 395, 396, 397, 398, 399, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 550, 635, 637, 640, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 702, 715, 779, 793], "longest": 5, "return_tensor": [5, 7, 14, 32, 49, 865, 866], "pt": [5, 7, 14, 32, 865], "max_length": [5, 75], "512": [5, 8, 12, 13, 46, 48, 86, 637, 652, 693, 814], "input_id": 5, "101": [5, 15, 47, 637, 638, 642, 661, 677, 725], "1045": 5, "2106": 5, "1005": 5, "1056": 5, "2428": 5, "2066": 5, "2115": 5, "4309": 5, "1012": 5, "102": [5, 15, 58, 81, 90, 398, 740], "token_type_id": 5, "attention_mask": [5, 62, 85, 637, 664], "pooler": 5, "compar": [5, 9, 10, 11, 14, 32, 45, 49, 51, 58, 59, 69, 70, 71, 75, 81, 82, 93, 94, 335, 352, 373, 388, 531, 535, 538, 635, 637, 646, 647, 648, 662, 750, 751, 752, 753, 754, 757, 763, 774, 814, 827, 833, 835, 844, 846, 849, 854, 868, 870, 872, 878, 879], "no_grad": [5, 46, 865], "bert_output": 5, "pooler_output": 5, "ivy_bert": 5, "bert_base_uncas": 5, "ivy_input": 5, "k": [5, 11, 45, 48, 54, 58, 59, 62, 63, 67, 77, 80, 81, 85, 86, 90, 98, 99, 123, 133, 146, 147, 148, 268, 314, 329, 330, 370, 377, 379, 383, 386, 388, 428, 443, 447, 449, 451, 491, 495, 509, 510, 511, 512, 513, 516, 526, 538, 629, 630, 635, 637, 638, 642, 644, 645, 664, 667, 671, 678, 679, 685, 687, 688, 689, 692, 727, 740, 741, 742, 748, 824, 825, 843, 844, 851, 865, 868, 872], "ivy_output": [5, 49], "logits_clos": 5, "allclos": [5, 6, 7, 9, 10, 11, 13, 14, 17, 19, 32, 49, 51, 58, 81, 373], "detach": [5, 6, 7, 9, 10, 11, 13, 14, 17, 19, 32, 841], "rtol": [5, 7, 17, 19, 58, 63, 81, 86, 335, 352, 373, 638, 681, 684, 772, 774, 818, 836, 844], "005": [5, 12, 58, 81, 335, 352, 373, 454], "atol": [5, 7, 9, 10, 11, 13, 14, 32, 58, 63, 81, 86, 335, 352, 373, 638, 681, 772, 774, 818, 836, 844], "768": 5, "fn": [5, 49, 51, 58, 75, 78, 81, 107, 167, 168, 200, 201, 204, 379, 462, 536, 551, 552, 602, 631, 632, 635, 642, 725, 726, 727, 729, 730, 731, 772, 774, 799, 802, 805, 809, 810, 812, 832, 835, 842, 843, 851, 865], "finish": [5, 7, 21, 32, 33, 44, 47, 815, 820, 821, 824], "sec": 5, "43": [5, 15, 44, 46, 48, 58, 81, 90, 104, 235, 376, 377, 388, 397, 429, 524, 633, 644, 645, 741, 742, 749], "procedur": [5, 828, 830, 833, 844], "60": [5, 13, 44, 48, 57, 71, 80, 82, 90, 94, 225, 259, 379, 490, 554, 562, 578, 593, 615, 633, 635, 638, 642, 648, 683, 722, 740, 758, 760, 764, 808, 830], "big": [5, 792, 815, 857, 872], "jnp": [5, 24, 29, 32, 33, 34, 35, 38, 44, 46, 50, 814, 831, 832, 835, 838, 842, 847, 851, 856, 866, 867], "ref": [5, 8, 11, 14, 82, 86, 260, 274, 277, 283, 290, 633, 640, 711, 821, 842], "fast": [5, 27, 37, 58, 376, 399, 872], "valu": [5, 15, 44, 45, 47, 48, 54, 55, 57, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 104, 106, 119, 123, 124, 126, 127, 133, 136, 137, 138, 139, 142, 148, 153, 170, 174, 180, 213, 214, 221, 222, 223, 224, 226, 228, 229, 230, 237, 241, 242, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 303, 308, 311, 312, 314, 321, 323, 329, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 352, 353, 355, 358, 360, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 387, 388, 399, 412, 419, 420, 422, 424, 428, 431, 435, 441, 446, 448, 450, 452, 453, 454, 456, 457, 458, 459, 468, 474, 479, 485, 490, 492, 493, 494, 495, 497, 499, 502, 504, 509, 510, 512, 513, 519, 521, 524, 525, 526, 529, 530, 531, 532, 533, 539, 541, 542, 543, 545, 550, 553, 554, 556, 561, 562, 563, 570, 577, 578, 582, 583, 584, 587, 596, 601, 606, 607, 610, 613, 614, 615, 616, 617, 618, 622, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 667, 671, 674, 675, 679, 680, 681, 684, 685, 686, 687, 688, 689, 692, 695, 700, 701, 702, 706, 707, 715, 716, 717, 721, 723, 724, 725, 726, 727, 732, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 772, 774, 777, 778, 779, 780, 782, 784, 789, 792, 793, 794, 795, 796, 797, 805, 812, 818, 821, 822, 825, 828, 829, 831, 832, 833, 834, 835, 836, 838, 839, 842, 843, 846, 848, 849, 851, 853, 857, 865, 872, 873], "emerg": [6, 872], "popular": [6, 7, 814, 825, 872], "Its": [6, 58, 378, 453, 872], "python": [6, 7, 12, 17, 23, 35, 40, 44, 46, 47, 48, 50, 51, 58, 67, 81, 90, 127, 208, 220, 248, 283, 376, 383, 422, 509, 510, 511, 512, 513, 615, 630, 632, 633, 635, 644, 739, 740, 741, 742, 744, 802, 807, 808, 812, 819, 821, 822, 825, 828, 829, 830, 835, 836, 843, 845, 846, 851, 853, 854, 857, 859, 860, 861, 862, 865, 869, 872, 873, 874, 878, 879], "superior": 6, "eager": [6, 13, 21, 22, 25, 28, 30, 35, 38, 39, 50, 812, 829, 857, 872], "execut": [6, 11, 14, 23, 24, 25, 27, 28, 29, 30, 32, 33, 35, 37, 40, 47, 49, 51, 124, 126, 602, 629, 632, 635, 821, 822, 828, 829, 830, 831, 832, 833, 835, 839, 840, 842, 846, 849, 851, 853, 856, 857, 859, 865, 868, 872, 873, 874, 875, 876, 878], "mode": [6, 7, 8, 38, 50, 58, 63, 75, 81, 86, 97, 98, 99, 100, 101, 102, 211, 214, 219, 224, 241, 274, 328, 366, 367, 370, 375, 376, 377, 379, 407, 412, 420, 421, 433, 435, 443, 445, 446, 452, 468, 478, 483, 485, 486, 488, 490, 493, 494, 498, 579, 580, 581, 585, 586, 588, 589, 603, 604, 608, 609, 611, 612, 632, 633, 635, 637, 638, 662, 685, 785, 793, 794, 795, 811, 812, 821, 822, 824, 829, 832, 833, 836, 849, 857, 872, 875], "made": [6, 11, 14, 32, 58, 65, 81, 377, 379, 437, 463, 464, 465, 711, 820, 822, 823, 825, 826, 829, 830, 835, 837, 839, 841, 842, 843, 847, 849, 851, 853, 862, 872], "favorit": 6, "increasingli": [6, 833, 865], "span": [6, 822, 870, 878], "industri": [6, 862, 872, 874], "still": [6, 13, 15, 26, 28, 29, 32, 33, 35, 36, 39, 63, 75, 86, 638, 688, 777, 820, 821, 822, 826, 827, 831, 834, 835, 837, 839, 842, 843, 846, 849, 855, 857, 862, 865, 866, 869, 872, 878], "practition": [6, 7, 13, 872, 876, 877, 878], "larg": [6, 13, 47, 57, 58, 80, 81, 224, 241, 248, 274, 275, 379, 388, 493, 523, 633, 638, 686, 816, 821, 822, 828, 830, 836, 854, 865, 872], "unabl": [6, 13, 14, 822, 849], "rich": [6, 13], "ecosystem": [6, 13, 872], "state": [6, 13, 20, 31, 46, 62, 81, 85, 101, 188, 189, 190, 191, 192, 274, 376, 422, 603, 605, 608, 610, 611, 631, 633, 635, 637, 662, 663, 775, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 818, 821, 828, 831, 832, 834, 835, 836, 837, 838, 843, 846, 850, 851, 852, 854, 862, 866, 878, 879], "art": [6, 13], "sota": [6, 7, 13], "inaccur": [6, 13], "dynam": [6, 9, 13, 39, 640, 707, 795, 802, 824, 830, 831, 832, 842, 843, 848, 851, 865, 872, 876], "connect": [6, 12, 13, 46, 793, 816, 821, 828, 845, 855, 856, 862, 870], "layer": [6, 7, 9, 10, 13, 17, 19, 23, 29, 30, 32, 33, 44, 49, 58, 66, 81, 89, 643, 662, 663, 664, 738, 790, 792, 794, 795, 796, 797, 798, 814, 834, 843, 847, 849, 851, 852, 855, 861, 866, 870, 872, 876, 879], "togeth": [6, 13, 58, 75, 81, 335, 352, 373, 377, 431, 798, 823, 826, 829, 831, 842, 843, 846, 847, 849, 855, 856, 857, 862, 870, 872, 873, 878], "For": [6, 11, 12, 13, 14, 15, 23, 25, 32, 33, 35, 38, 40, 54, 58, 63, 69, 81, 86, 127, 140, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 255, 256, 257, 262, 263, 264, 265, 266, 269, 274, 276, 277, 279, 283, 284, 285, 286, 287, 288, 291, 292, 294, 331, 332, 333, 336, 337, 339, 360, 370, 373, 377, 379, 443, 445, 465, 485, 488, 630, 633, 638, 640, 646, 648, 686, 688, 692, 700, 711, 750, 751, 752, 753, 761, 763, 764, 766, 778, 790, 814, 820, 821, 822, 824, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 869, 870, 873, 878, 879], "user": [6, 7, 13, 14, 21, 27, 28, 29, 30, 32, 47, 48, 50, 275, 292, 379, 485, 581, 633, 635, 793, 794, 795, 807, 814, 821, 822, 824, 826, 827, 829, 830, 831, 832, 835, 840, 841, 842, 843, 846, 848, 849, 850, 851, 857, 858, 861, 862, 870, 872, 878, 879], "seamless": [6, 13, 814], "wai": [6, 13, 15, 21, 22, 23, 26, 28, 32, 36, 38, 44, 98, 101, 814, 816, 819, 820, 821, 825, 826, 827, 828, 830, 831, 832, 842, 843, 844, 846, 849, 853, 854, 855, 856, 857, 858, 861, 862, 867, 874, 878, 879], "introduc": [6, 13, 32, 33, 248, 633, 640, 646, 708, 750, 820, 829, 830, 831, 840, 844, 846, 849, 854, 861], "pipelin": [6, 7, 13, 814, 816, 824, 825, 826, 844, 847, 856, 859, 861, 866, 872, 873, 878], "blog": [6, 7, 13, 822], "through": [6, 7, 13, 33, 38, 46, 58, 81, 101, 229, 388, 529, 530, 633, 642, 722, 728, 795, 807, 815, 818, 819, 820, 822, 823, 824, 827, 828, 829, 830, 832, 833, 835, 836, 837, 839, 840, 842, 843, 844, 846, 848, 849, 850, 851, 854, 855, 856, 865, 870, 872, 873, 874], "train": [6, 7, 17, 19, 30, 32, 33, 49, 58, 60, 62, 81, 83, 85, 101, 376, 377, 382, 400, 401, 402, 449, 502, 504, 616, 617, 622, 636, 637, 660, 662, 664, 667, 792, 793, 794, 795, 796, 814, 829, 832, 839, 854, 855, 856, 857, 863, 866, 870, 871, 876, 878, 879], "illustr": [6, 13, 25, 35, 827, 851], "workflow": [6, 13, 26, 36, 47, 820, 822, 823, 827, 831, 841, 843, 854, 859, 863, 871, 878, 879], "pre": [6, 32, 33, 818, 820, 845, 846, 856, 857, 858, 872], "belong": [6, 75, 820, 825, 855], "convolut": [6, 13, 30, 58, 62, 81, 85, 376, 397, 415, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 779, 793, 812, 866, 870, 872], "neural": [6, 637, 789, 793, 814, 866, 868, 870, 871, 872, 876, 878, 879], "network": [6, 23, 30, 32, 33, 44, 46, 51, 637, 661, 789, 792, 793, 814, 829, 839, 851, 855, 862, 866, 868, 870, 871, 872, 876, 878, 879], "cnn": [6, 32, 33, 872], "architectur": [6, 13, 49, 814, 821, 856, 857, 870, 871, 872, 875, 876, 877], "inspir": [6, 826], "vision": [6, 7, 32, 33, 51, 868, 878], "perform": [6, 8, 10, 15, 25, 27, 28, 29, 30, 32, 33, 35, 37, 44, 46, 54, 58, 62, 63, 71, 72, 77, 81, 82, 85, 86, 94, 95, 114, 118, 138, 139, 211, 219, 241, 274, 295, 342, 364, 373, 374, 376, 377, 379, 386, 388, 399, 400, 401, 402, 404, 405, 409, 410, 418, 420, 446, 462, 516, 524, 525, 546, 547, 548, 561, 562, 563, 579, 589, 627, 630, 632, 633, 635, 637, 638, 641, 642, 648, 649, 660, 663, 679, 688, 690, 695, 716, 717, 718, 726, 727, 758, 759, 762, 768, 769, 772, 789, 793, 808, 812, 825, 826, 827, 829, 831, 832, 833, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 854, 857, 863, 865, 866, 869, 872, 873, 874, 875, 876, 877, 879], "strength": 6, "wise": [6, 32, 52, 57, 58, 63, 74, 80, 81, 86, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 221, 222, 224, 225, 226, 228, 229, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 245, 248, 249, 250, 251, 252, 253, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 277, 279, 280, 282, 283, 290, 295, 296, 297, 298, 299, 300, 302, 304, 306, 307, 308, 310, 311, 312, 335, 338, 343, 346, 347, 348, 351, 352, 353, 354, 358, 359, 362, 363, 368, 373, 376, 377, 379, 400, 401, 402, 429, 436, 472, 479, 481, 482, 501, 627, 633, 640, 669, 700, 797, 849], "supervis": [6, 7, 58, 378, 453], "convent": [6, 288, 633, 638, 648, 678, 760, 822, 827, 838, 847, 861, 878], "demonstr": [6, 7, 13, 15, 29, 32, 33, 47, 814, 823, 831, 833, 835, 853], "improv": [6, 11, 14, 15, 32, 35, 817, 822, 831, 838, 839, 849, 851, 859, 863, 865, 870, 872, 874, 875], "scalabl": [6, 851, 861, 877, 878], "sometim": [6, 820, 821, 822, 825, 831, 839, 843, 846, 849], "rival": 6, "even": [6, 11, 13, 29, 32, 33, 58, 81, 98, 241, 274, 279, 284, 379, 388, 485, 523, 633, 814, 821, 822, 823, 825, 827, 830, 831, 832, 834, 838, 839, 842, 843, 844, 849, 853, 854, 855, 856, 857, 862, 863, 878], "downsampl": [6, 12, 13, 58, 81, 412], "detial": 6, "outsid": [6, 13, 640, 700, 711, 831, 832, 839, 853, 877], "scope": [6, 13, 827, 873, 877], "demo": [6, 7, 8, 11, 12, 13, 14, 15, 33, 40, 44, 48, 814], "interest": [6, 7, 13, 30, 32, 44, 241, 274, 633, 820, 822], "reader": [6, 7, 13], "paper": [6, 13, 637, 664, 814, 863], "mostli": [6, 13, 832, 842, 846], "kera": [6, 9, 10, 13, 16, 17, 19, 21, 22, 30, 32, 33, 49, 50, 790, 814, 863, 866, 878], "wrapper": [6, 21, 22, 25, 58, 81, 299, 785, 826, 828, 829, 831, 835, 839, 842, 843, 846, 853, 859, 868, 872], "prepar": [6, 13, 33, 46, 48, 51, 830], "data": [6, 7, 19, 27, 28, 29, 30, 33, 38, 46, 48, 51, 52, 54, 57, 58, 59, 62, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 77, 80, 81, 82, 85, 86, 88, 90, 91, 92, 93, 94, 95, 103, 104, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 158, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187, 193, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 301, 302, 303, 304, 313, 314, 315, 316, 317, 318, 319, 330, 331, 332, 333, 334, 336, 337, 338, 355, 360, 368, 370, 373, 376, 377, 379, 383, 387, 388, 391, 400, 401, 402, 418, 420, 422, 428, 430, 450, 468, 490, 493, 494, 496, 497, 509, 510, 511, 512, 513, 519, 523, 524, 525, 529, 532, 533, 550, 563, 565, 566, 569, 596, 627, 630, 632, 633, 635, 637, 638, 640, 642, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 701, 704, 705, 707, 708, 710, 711, 715, 723, 740, 741, 742, 744, 745, 746, 748, 749, 754, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 775, 777, 778, 779, 780, 785, 789, 792, 793, 794, 795, 799, 808, 812, 821, 824, 825, 826, 827, 828, 829, 832, 834, 838, 839, 840, 842, 844, 847, 849, 851, 853, 859, 860, 862, 872, 873, 874, 876, 877, 878], "request": [6, 7, 11, 12, 13, 14, 27, 28, 29, 30, 32, 33, 46, 49, 58, 205, 383, 513, 632, 812, 814, 815, 817, 820, 833, 837, 847, 849, 863, 866], "experiment": [6, 10, 13, 812, 818, 822, 831, 843, 847, 851, 872], "set_memory_growth": [6, 13], "list_physical_devic": [6, 13], "manual_se": [6, 7, 13, 30], "set_se": [6, 13], "2024": 6, "51": [6, 13, 15, 44, 48, 57, 58, 80, 81, 82, 90, 236, 274, 287, 377, 398, 452, 633, 742, 777], "38": [6, 14, 15, 28, 44, 46, 48, 51, 55, 58, 80, 81, 90, 166, 291, 358, 373, 376, 388, 396, 415, 418, 419, 524, 631, 633, 638, 680, 777, 833], "926817": 6, "e": [6, 14, 32, 49, 50, 54, 58, 63, 67, 69, 70, 71, 73, 80, 81, 86, 90, 93, 94, 96, 98, 99, 103, 130, 139, 140, 143, 144, 148, 152, 181, 194, 221, 222, 223, 227, 229, 230, 233, 235, 237, 241, 242, 244, 247, 248, 254, 255, 262, 263, 264, 265, 272, 273, 274, 275, 277, 281, 283, 284, 287, 288, 292, 302, 329, 336, 337, 370, 373, 376, 377, 378, 379, 383, 388, 389, 395, 396, 399, 413, 414, 415, 416, 420, 433, 436, 444, 458, 493, 497, 509, 510, 511, 512, 513, 524, 525, 534, 628, 630, 631, 632, 633, 637, 638, 640, 642, 644, 646, 647, 648, 664, 669, 674, 675, 678, 679, 681, 684, 687, 688, 689, 692, 695, 703, 711, 722, 726, 727, 728, 731, 736, 737, 740, 741, 742, 750, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 793, 807, 808, 812, 814, 815, 818, 820, 821, 822, 824, 825, 827, 829, 831, 835, 836, 841, 843, 846, 851, 854, 857, 858, 859, 862, 863, 865, 868, 880], "extern": [6, 829, 838, 843, 846, 847], "local_xla": 6, "xla": [6, 14, 843, 857, 859, 872], "stream_executor": [6, 14], "cuda_dnn": [6, 14], "cc": [6, 14, 27, 28, 30, 47, 836], "9261": 6, "regist": [6, 14, 795, 822, 858, 865], "cudnn": [6, 13, 14], "factori": [6, 14, 58, 378, 457, 458, 808], "plugin": [6, 14, 821], "926873": 6, "cuda_fft": [6, 14], "607": 6, "cufft": [6, 13, 14], "928224": 6, "cuda_bla": [6, 14], "1515": 6, "cubla": [6, 13, 14], "936743": 6, "cpu_feature_guard": [6, 27, 28, 30], "182": [6, 27, 28, 30, 81], "instruct": [6, 27, 28, 30, 75, 104, 814, 820, 821, 825, 835, 837, 844, 846, 858, 870, 873, 876, 878], "avx2": [6, 27, 28, 30], "fma": [6, 27, 28, 30], "rebuild": [6, 27, 28, 30, 75, 104], "flag": [6, 13, 27, 28, 30, 75, 197, 378, 388, 455, 523, 632, 637, 664, 774, 785, 796, 822, 831, 832, 842, 843, 844, 846, 865, 866], "40": [6, 9, 13, 15, 44, 46, 48, 58, 59, 80, 81, 82, 90, 94, 104, 235, 239, 259, 288, 350, 373, 376, 379, 396, 398, 408, 414, 490, 546, 548, 553, 554, 578, 593, 615, 618, 633, 635, 636, 638, 642, 648, 677, 683, 728, 741, 760, 764, 830], "071672": 6, "w": [6, 8, 14, 47, 48, 58, 59, 60, 62, 75, 80, 81, 82, 83, 85, 98, 268, 350, 365, 373, 375, 376, 377, 382, 395, 396, 397, 399, 413, 414, 415, 416, 432, 452, 507, 522, 546, 548, 593, 616, 617, 618, 620, 622, 623, 624, 635, 636, 637, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 725, 824, 841, 851, 854, 855, 866, 880], "tf2tensorrt": [6, 14], "py_util": [6, 14], "trt": [6, 14], "find": [6, 14, 21, 47, 48, 51, 63, 69, 75, 86, 638, 642, 646, 681, 721, 750, 751, 752, 753, 807, 808, 814, 815, 816, 817, 819, 820, 821, 822, 825, 828, 830, 836, 841, 846, 849, 851, 854, 858, 859, 861, 865], "tensorrt": [6, 14], "map": [6, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 169, 173, 174, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 373, 376, 400, 401, 402, 420, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 491, 493, 494, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 615, 620, 625, 635, 642, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 726, 727, 731, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 808, 826, 829, 831, 838, 839, 843, 846, 847, 854, 857, 859, 866, 873], "dataset": [6, 7, 13, 15, 32, 75, 854, 865, 866], "gist": 6, "yrevar": 6, "942d3a0ac09ec9e5eb3a": 6, "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": 6, "imagenet1000_clsidx_to_label": 6, "idx2label": 6, "read": [6, 46, 48, 58, 65, 75, 77, 81, 88, 135, 379, 475, 630, 640, 707, 820, 821, 828, 830, 836, 846, 848, 849, 872], "resolv": [6, 12, 46, 48, 58, 71, 248, 388, 524, 525, 633, 640, 648, 703, 758, 759, 764, 766, 822, 828, 831, 837, 851], "185": [6, 12, 46, 74], "199": [6, 12, 46, 227, 633], "108": [6, 12, 15, 27, 28, 29, 30, 46, 637, 648, 661, 760], "133": [6, 12, 46, 62, 661], "109": [6, 12, 46, 63, 638, 676], "111": [6, 12, 46, 642, 737], "443": [6, 12, 46, 286, 633], "sent": [6, 12, 46], "await": [6, 12, 46], "respons": [6, 12, 13, 46, 382, 507, 822, 830, 831], "200": [6, 12, 13, 15, 46, 82, 85, 235, 376, 400, 401, 554, 578, 633, 635, 807, 854], "ok": [6, 12, 46, 821], "30564": 6, "30k": 6, "plain": [6, 12, 46], "imagenet1000_clsidx": 6, "85k": 6, "003": 6, "is_avail": [6, 13, 15], "url": [6, 7, 11, 13, 14, 29, 32, 33, 46, 49, 814, 866], "cocodataset": [6, 7, 11, 14, 29, 32, 33, 49, 814, 866], "org": [6, 7, 11, 12, 13, 14, 29, 32, 33, 46, 48, 49, 51, 57, 58, 80, 81, 83, 148, 156, 244, 254, 255, 270, 329, 336, 337, 370, 373, 376, 379, 388, 420, 493, 523, 616, 617, 630, 631, 633, 636, 638, 640, 648, 686, 687, 715, 765, 814, 834, 866], "val2017": [6, 7, 11, 14, 32, 49], "000000039769": [6, 7, 11, 14, 32, 49], "stream": [6, 7, 11, 14, 29, 32, 33, 46, 49, 56, 79, 215, 632, 814, 866, 876], "initialis": [6, 13, 825, 843, 846], "api": [6, 7, 13, 20, 25, 30, 31, 35, 48, 50, 57, 58, 63, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 149, 150, 156, 166, 169, 179, 181, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 336, 337, 339, 373, 376, 379, 388, 420, 493, 497, 523, 630, 631, 633, 638, 640, 645, 646, 647, 648, 649, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 701, 703, 704, 705, 707, 708, 710, 711, 715, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 814, 818, 821, 822, 824, 826, 828, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 846, 849, 850, 852, 854, 857, 859, 860, 861, 868, 870, 872, 874, 877, 879], "convnextxlarg": 6, "while": [6, 7, 13, 15, 32, 33, 40, 58, 62, 75, 81, 85, 98, 99, 104, 126, 142, 180, 248, 249, 269, 270, 348, 373, 376, 377, 379, 421, 422, 444, 487, 488, 522, 629, 630, 631, 633, 637, 646, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 750, 762, 765, 775, 818, 820, 821, 822, 826, 827, 828, 830, 831, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 853, 855, 856, 857, 858, 861, 862, 865, 872, 878, 879], "arbitrari": [6, 13, 25, 35, 54, 55, 58, 75, 78, 81, 140, 154, 181, 323, 378, 455, 463, 464, 465, 618, 630, 631, 636, 838, 839, 841, 842, 843, 846, 855, 857, 865, 867, 873, 878], "regardless": [6, 13, 32, 33, 44, 75, 815, 831, 835, 853, 856, 863], "host": [6, 13, 812, 816, 830, 857, 862, 877], "convnext_xlarg": 6, "include_top": [6, 19, 814], "include_preprocess": 6, "input_tensor": [6, 58, 81, 377, 378, 449, 453, 458, 843], "input_shap": [6, 11, 19, 30, 32, 33, 814], "pool": [6, 58, 81, 85, 376, 390, 391, 392, 393, 395, 396, 397, 413, 414, 415, 416, 419, 793, 821], "classifier_activ": 6, "936026": 6, "common_runtim": [6, 47], "gpu_devic": 6, "1929": 6, "creat": [6, 7, 8, 9, 10, 14, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 46, 47, 48, 50, 51, 54, 57, 58, 67, 75, 77, 80, 81, 86, 90, 99, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 148, 149, 150, 275, 313, 314, 324, 326, 328, 329, 370, 376, 377, 379, 383, 395, 396, 397, 418, 435, 446, 452, 461, 469, 485, 490, 509, 510, 511, 512, 513, 581, 598, 615, 626, 630, 633, 635, 636, 644, 683, 739, 740, 741, 742, 744, 774, 785, 790, 792, 793, 794, 795, 796, 797, 798, 815, 817, 821, 822, 823, 826, 827, 828, 830, 831, 832, 835, 839, 840, 842, 843, 844, 846, 849, 851, 852, 855, 858, 859, 862, 865, 866, 867, 872, 873, 878], "job": [6, 32, 33, 814, 828, 830, 866], "localhost": 6, "replica": 6, "14791": 6, "tesla": 6, "v100": [6, 11], "pcie": [6, 862], "16gb": 6, "pci": 6, "bu": [6, 86, 862], "id": [6, 15, 47, 58, 81, 197, 331, 332, 333, 370, 558, 632, 635, 814, 819, 821, 826, 828, 829, 837, 841, 846, 858, 880], "0001": [6, 57, 58, 81, 284, 285, 377, 446, 452, 777, 780, 797], "over": [6, 7, 9, 13, 23, 30, 33, 35, 46, 58, 63, 71, 72, 73, 78, 81, 85, 86, 94, 95, 96, 98, 123, 321, 322, 336, 337, 350, 357, 370, 373, 376, 377, 378, 379, 386, 388, 390, 391, 392, 393, 396, 405, 410, 414, 418, 419, 420, 421, 422, 423, 445, 453, 462, 475, 490, 493, 494, 497, 516, 526, 532, 581, 615, 629, 635, 638, 643, 644, 648, 649, 669, 679, 690, 692, 694, 695, 738, 742, 761, 762, 763, 764, 765, 766, 767, 768, 769, 793, 796, 802, 807, 814, 821, 822, 827, 833, 834, 841, 842, 844, 847, 851, 853, 857, 861, 863, 870, 872], "wonder": [6, 853, 861, 863], "why": [6, 23, 814, 822, 842, 853, 860, 862], "One": [6, 7, 13, 48, 58, 59, 65, 67, 81, 82, 88, 90, 101, 379, 463, 464, 465, 468, 485, 494, 497, 547, 635, 640, 644, 707, 740, 826, 829, 831, 833, 839, 844, 846, 851, 853, 854], "reason": [6, 13, 283, 292, 633, 820, 822, 825, 826, 829, 830, 831, 833, 839, 842, 843, 846, 847, 849, 851, 853, 862, 878], "highlight": [6, 822, 830, 833, 843, 845], "directli": [6, 17, 19, 23, 26, 30, 32, 33, 36, 376, 377, 412, 436, 642, 731, 814, 820, 821, 822, 823, 825, 826, 829, 830, 831, 832, 834, 837, 839, 840, 842, 843, 844, 847, 848, 851, 853, 855, 856, 857, 858, 863, 865, 866, 867, 876, 877, 878], "much": [6, 11, 14, 15, 23, 24, 30, 32, 33, 34, 35, 46, 101, 335, 352, 373, 792, 820, 821, 822, 826, 829, 831, 839, 842, 843, 844, 847, 848, 849, 851, 853, 854, 862, 870, 872, 878, 879], "more": [6, 7, 13, 17, 20, 21, 23, 24, 25, 28, 30, 32, 33, 34, 35, 44, 46, 47, 48, 52, 57, 58, 63, 65, 69, 74, 80, 81, 86, 88, 92, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 154, 246, 248, 264, 279, 292, 296, 301, 302, 304, 364, 368, 374, 377, 378, 379, 425, 427, 439, 441, 444, 457, 463, 464, 465, 470, 491, 581, 627, 630, 631, 633, 635, 638, 640, 646, 672, 678, 681, 684, 686, 688, 695, 704, 711, 750, 751, 752, 753, 779, 789, 808, 814, 816, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 866, 867, 870, 871, 872, 873, 874, 875, 878, 879], "There": [6, 13, 23, 30, 33, 38, 98, 369, 371, 372, 380, 381, 385, 779, 820, 821, 822, 825, 826, 828, 829, 831, 832, 833, 835, 837, 839, 841, 843, 844, 848, 851, 854, 857, 861, 865, 873, 874, 878, 879], "deeper": [6, 21, 23, 33, 53, 642, 730, 731, 814, 822, 824, 846, 850, 861], "what": [6, 11, 14, 21, 26, 32, 33, 36, 37, 40, 45, 46, 376, 410, 421, 779, 808, 814, 820, 822, 824, 829, 830, 833, 834, 837, 838, 840, 841, 842, 843, 844, 846, 850, 851, 853, 854, 855, 856, 857, 862, 863, 868, 873, 874, 877], "offer": [6, 843, 855, 863, 872, 878, 879], "limit": [6, 75, 104, 166, 169, 541, 542, 558, 631, 635, 640, 700, 777, 779, 780, 792, 799, 808, 821, 822, 828, 830, 833, 835, 843, 846, 849, 854, 857, 871, 872, 873], "soon": [6, 820, 822, 830, 831, 857, 865], "detail": [6, 7, 13, 25, 35, 48, 52, 57, 58, 63, 65, 69, 74, 80, 81, 82, 86, 88, 92, 111, 112, 113, 114, 115, 116, 117, 118, 119, 134, 145, 292, 296, 301, 302, 304, 368, 377, 427, 470, 549, 627, 630, 633, 646, 672, 678, 684, 688, 711, 750, 751, 752, 753, 789, 814, 820, 822, 825, 827, 828, 829, 830, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 851, 853, 854, 855, 874, 878], "comparison": [6, 10, 12, 58, 81, 242, 277, 338, 373, 378, 457, 458, 633, 638, 689, 772, 835], "separ": [6, 47, 58, 59, 81, 382, 503, 550, 635, 637, 664, 774, 785, 821, 822, 826, 829, 830, 833, 844, 845, 846, 851, 853, 854, 873, 877], "stai": [6, 830], "origin": [6, 7, 9, 10, 11, 13, 14, 15, 30, 32, 33, 34, 35, 36, 38, 45, 46, 47, 51, 58, 63, 65, 71, 75, 81, 86, 88, 94, 98, 101, 103, 104, 229, 254, 281, 320, 370, 376, 377, 379, 388, 420, 446, 478, 484, 486, 489, 524, 525, 529, 530, 531, 532, 533, 633, 638, 640, 648, 679, 707, 708, 759, 774, 779, 802, 803, 814, 816, 820, 821, 822, 827, 828, 830, 831, 836, 840, 842, 843, 844, 851, 863, 865, 866, 872, 873], "convert_to_tensor": [6, 13], "tmp": [6, 46, 48, 590, 613, 635], "ipykernel_65585": 6, "3221769294": 6, "_eagertensorbas": 6, "op": [6, 17, 23, 44, 789, 802, 812, 847, 851, 857], "deprec": [6, 51], "futur": [6, 9, 23, 30, 32, 46, 638, 674, 675, 821, 822, 823, 830, 831, 846, 847, 849, 853, 857, 861, 863, 878], "instead": [6, 13, 14, 17, 19, 23, 27, 28, 29, 30, 32, 39, 46, 51, 57, 58, 63, 80, 81, 86, 99, 195, 283, 317, 370, 376, 388, 413, 414, 415, 523, 526, 632, 633, 638, 681, 777, 820, 821, 822, 825, 828, 830, 831, 833, 834, 835, 838, 839, 840, 842, 843, 844, 846, 849, 851, 853, 854, 857, 865, 866, 867, 870, 872, 878, 879], "logits_np": [6, 7, 13], "class_id": 6, "int": [6, 7, 8, 46, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 101, 103, 107, 114, 118, 119, 128, 129, 133, 135, 136, 137, 138, 139, 142, 146, 147, 148, 155, 162, 165, 166, 169, 176, 191, 205, 206, 207, 214, 215, 224, 231, 232, 233, 234, 235, 236, 248, 251, 275, 279, 284, 290, 293, 301, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 341, 342, 346, 350, 357, 359, 361, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 427, 431, 433, 434, 435, 436, 438, 443, 445, 446, 449, 450, 452, 457, 461, 462, 466, 470, 471, 474, 475, 478, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 546, 547, 548, 550, 553, 554, 557, 558, 572, 575, 577, 592, 593, 594, 595, 599, 615, 616, 617, 618, 619, 622, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 669, 671, 672, 679, 680, 685, 690, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 722, 725, 726, 728, 730, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 750, 752, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 780, 789, 792, 793, 807, 808, 812, 829, 831, 832, 833, 835, 838, 839, 842, 844, 846, 847, 849, 851, 856, 865], "argmax": [6, 7, 8, 13, 47, 48, 49, 68, 91, 379, 490, 645, 843, 865, 869], "57": [6, 12, 15, 44, 46, 57, 58, 80, 81, 199, 222, 223, 226, 227, 229, 239, 240, 280, 296, 297, 368, 632, 633], "342029": 6, "local_tsl": 6, "tsl": 6, "subprocess": 6, "304": 6, "cannot": [6, 9, 46, 47, 48, 51, 58, 291, 463, 464, 465, 633, 822, 825, 827, 831, 843, 851, 856, 878], "spawn": [6, 574, 635], "child": 6, "No": [6, 32, 33, 46, 58, 64, 81, 87, 378, 455, 456, 457, 459, 460, 639, 697, 822, 830, 831, 872], "directori": [6, 13, 46, 47, 48, 51, 590, 613, 632, 635, 812, 816, 820, 821, 822, 828, 830, 836, 843, 846, 858], "906376": 6, "454": 6, "8904": 6, "993553": 6, "58": [6, 7, 10, 44, 265, 541, 633, 635], "578886": 6, "servic": [6, 874], "168": [6, 48, 541, 635, 642, 719], "0x558ecdd86830": 6, "guarante": [6, 646, 750, 752, 812, 826, 831, 842, 857, 863], "578915": 6, "176": [6, 541, 635], "streamexecutor": 6, "log": [6, 13, 54, 57, 58, 63, 77, 80, 81, 86, 119, 139, 264, 266, 279, 301, 302, 355, 362, 368, 373, 378, 383, 455, 457, 458, 509, 627, 630, 633, 686, 777, 779, 780, 789, 822, 829, 830, 833, 839, 842, 843, 844, 846, 848, 849, 851, 854], "messag": [6, 13, 799, 809, 813, 821, 822, 830, 833, 835, 837, 843, 851, 853, 862], "absl": [6, 46], "initializelog": 6, "stderr": 6, "i0000": 6, "1710255118": 6, "868823": 6, "65585": 6, "device_compil": 6, "h": [6, 8, 58, 59, 62, 81, 82, 85, 376, 382, 396, 397, 414, 415, 507, 546, 548, 635, 637, 642, 650, 653, 654, 655, 656, 657, 658, 659, 722, 726, 728, 731, 736, 815, 824, 828, 829, 830, 866, 868], "186": 6, "cluster": [6, 58, 81, 377, 431, 857, 872], "line": [6, 11, 14, 15, 21, 22, 25, 26, 29, 32, 33, 35, 36, 47, 48, 291, 633, 812, 814, 821, 825, 826, 830, 832, 833, 835, 843, 846, 849, 852, 853, 854, 855, 863, 866, 875], "lifetim": 6, "grei": 6, "fox": 6, "grai": 6, "urocyon": 6, "cinereoargenteu": 6, "eagerli": [6, 13, 27, 28, 32, 33, 37, 38, 39, 46, 814, 865, 866, 867], "explain": [6, 7, 13, 38, 58, 81, 376, 410, 421, 814, 820, 821, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 846, 847, 849, 851, 852, 853, 854, 855, 856, 868, 875, 878], "doc": [6, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 47, 48, 81, 148, 329, 336, 337, 370, 373, 525, 630, 814, 815, 819, 820, 824, 833, 834, 837, 838, 846, 851, 854, 855, 865, 866, 867], "involv": [6, 13, 17, 20, 21, 28, 30, 55, 78, 181, 224, 241, 248, 274, 279, 631, 633, 808, 815, 823, 824, 830, 831, 833, 844, 849, 856, 862, 872, 878], "dummi": [6, 13, 27, 28, 37, 38, 39, 45, 822], "transpiled_model": [6, 7, 13], "backend_compil": [6, 32, 33], "root": [6, 7, 9, 12, 13, 14, 27, 28, 29, 30, 46, 47, 48, 51, 57, 80, 288, 633, 816, 820, 821, 822, 828, 836, 843, 854], "placement": [6, 13, 14, 820], "case": [6, 13, 17, 19, 25, 27, 32, 33, 35, 36, 37, 38, 46, 53, 54, 58, 59, 65, 71, 75, 77, 81, 82, 88, 98, 99, 104, 129, 140, 167, 168, 195, 200, 201, 208, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 249, 255, 256, 257, 262, 263, 264, 265, 266, 269, 274, 277, 279, 283, 284, 285, 286, 287, 288, 291, 292, 294, 336, 337, 348, 350, 360, 373, 376, 378, 379, 382, 383, 389, 400, 401, 402, 422, 453, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 490, 491, 497, 500, 502, 504, 511, 534, 551, 552, 556, 563, 577, 578, 579, 630, 631, 632, 633, 635, 638, 640, 642, 648, 686, 692, 703, 704, 705, 707, 709, 710, 712, 714, 722, 728, 761, 762, 763, 764, 765, 766, 767, 777, 778, 797, 808, 814, 818, 820, 821, 822, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 853, 855, 856, 857, 862, 865, 866, 867, 871, 875], "ad": [6, 12, 13, 14, 15, 27, 28, 29, 30, 58, 65, 81, 88, 96, 241, 274, 335, 352, 373, 382, 502, 503, 504, 593, 594, 633, 635, 637, 638, 640, 664, 674, 675, 703, 793, 798, 814, 818, 819, 820, 821, 822, 825, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 849, 851, 855, 857, 862, 865, 871, 872], "logits_transpil": [6, 13], "logits_transpiled_np": [6, 13], "class_id_transpil": 6, "But": [6, 7, 32, 33, 779, 829, 830, 834, 837, 840, 849, 856], "produc": [6, 7, 9, 13, 45, 58, 59, 62, 81, 85, 303, 313, 316, 368, 370, 376, 424, 637, 667, 777, 808, 820, 831, 836, 837, 842, 844, 846, 847, 865, 873, 875], "granular": [6, 7, 13], "level": [6, 7, 13, 23, 32, 33, 35, 58, 81, 82, 377, 449, 538, 808, 812, 814, 815, 820, 821, 822, 823, 829, 831, 835, 839, 841, 842, 843, 845, 848, 849, 850, 851, 854, 855, 856, 857, 859, 863, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880], "close": [6, 7, 13, 48, 63, 246, 264, 284, 313, 370, 633, 638, 640, 688, 703, 817, 818, 820, 821, 822, 823, 831, 834, 836, 843, 849, 872], "inde": [6, 7, 13, 838, 849, 857, 870], "benefit": [6, 7, 13, 33, 821, 826, 829, 842, 849, 853, 854, 857, 862, 863, 870, 874, 877], "trainabl": [6, 7, 13, 17, 19, 23, 29, 30, 32, 33, 50, 790, 794, 795, 798, 814, 834, 852, 854, 855, 866, 867], "further": [6, 7, 13, 23, 75, 104, 779, 814, 822, 825, 826, 830, 833, 835, 838, 839, 842, 843, 845, 846, 850, 851, 854, 855, 862, 863, 877, 878], "cifar": [6, 7], "dataload": [6, 7, 13, 854], "cifar10": [6, 7], "batch_siz": [6, 7, 13, 46, 48, 51, 58, 62, 67, 81, 85, 90, 376, 378, 395, 396, 397, 413, 414, 415, 416, 460, 637, 644, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 739, 854], "shuffl": [6, 7, 13, 48, 58, 67, 75, 81, 90, 511, 644], "drop_last": [6, 7], "num_work": [6, 7, 13], "opt": [6, 7, 27, 28, 29, 30, 50, 821, 827, 831, 842, 846, 849], "sgd": [6, 7, 13, 46, 797, 872], "lr": [6, 46, 60, 83, 537, 617, 620, 622, 623, 624, 635, 636, 797, 854, 855], "1e": [6, 7, 9, 10, 11, 12, 13, 14, 17, 19, 32, 44, 48, 55, 58, 60, 63, 64, 66, 78, 81, 83, 86, 87, 89, 102, 166, 335, 352, 373, 378, 382, 458, 502, 503, 504, 583, 584, 593, 606, 607, 616, 617, 622, 624, 631, 635, 636, 638, 639, 643, 688, 697, 698, 699, 738, 772, 774, 794, 796, 797, 818, 829, 836, 839, 842, 844, 855, 856], "loss_fn": [6, 13, 32, 33, 44, 46, 48, 854, 855, 856], "crossentropyloss": [6, 46, 794], "epoch": [6, 7, 13, 32, 33, 46, 48], "loss_epoch_arr": [6, 7], "loss_arr": [6, 7], "enumer": [6, 7, 8, 13, 46, 48, 782], "permut": [6, 8, 12, 46, 65, 88, 103, 386, 515, 640, 705, 712, 866], "loss": [6, 7, 13, 32, 33, 46, 48, 58, 81, 98, 453, 454, 455, 456, 457, 458, 459, 460, 586, 609, 635, 697, 698, 699, 814, 830, 831, 839, 843, 847, 848, 854, 855, 856, 872, 879], "backward": [6, 7, 46, 58, 72, 81, 95, 283, 376, 399, 404, 405, 409, 410, 420, 421, 633, 638, 649, 669, 694, 768, 769, 793, 812, 847, 857], "append": [6, 7, 15, 47, 48, 58, 63, 75, 81, 233, 342, 373, 633, 638, 640, 672, 678, 703, 808, 830, 846, 851, 854, 869], "avg_loss": [6, 7, 46], "02": [6, 12, 14, 46, 54, 59, 60, 66, 67, 80, 83, 90, 139, 226, 227, 266, 376, 398, 408, 409, 593, 594, 616, 617, 622, 630, 633, 635, 636, 643, 644, 738, 741, 742, 844], "94": [6, 13, 15, 44, 57, 58, 60, 67, 80, 81, 83, 90, 208, 284, 285, 361, 373, 408, 620, 632, 636, 742], "ve": [6, 7, 8, 9, 13, 15, 21, 30, 32, 67, 90, 644, 739, 820, 821, 822, 823, 836, 846, 849, 850, 853, 859], "And": [6, 7, 11, 13, 14, 15, 17, 19, 24, 27, 32, 33, 34, 47, 78, 366, 367, 375, 825, 828, 837, 839, 846, 865], "successfulli": [6, 7, 13, 46, 48, 51, 795, 817, 821, 826], "plug": [6, 13], "seen": [6, 13, 17, 19, 24, 30, 32, 377, 383, 436, 511, 558, 635, 802, 830, 831, 833, 835, 843, 846, 851, 853, 854, 861, 862, 878], "d": [6, 7, 13, 47, 58, 59, 62, 63, 65, 77, 81, 82, 85, 86, 88, 101, 117, 139, 148, 181, 224, 241, 242, 274, 277, 329, 370, 376, 377, 379, 382, 383, 386, 395, 396, 397, 404, 409, 413, 414, 415, 416, 418, 422, 428, 444, 465, 471, 473, 476, 480, 494, 496, 500, 507, 509, 515, 538, 549, 627, 630, 631, 633, 637, 638, 640, 642, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 671, 672, 676, 679, 683, 692, 693, 709, 722, 726, 727, 728, 731, 736, 737, 778, 808, 814, 815, 821, 824, 827, 828, 829, 836, 841, 846, 849, 854, 862, 863, 868], "sign": [6, 7, 13, 57, 58, 63, 69, 71, 80, 81, 86, 98, 127, 221, 222, 223, 224, 227, 229, 230, 235, 239, 241, 244, 246, 248, 274, 276, 283, 287, 288, 292, 340, 373, 377, 379, 388, 448, 492, 493, 524, 525, 630, 633, 638, 646, 648, 686, 750, 751, 752, 753, 758, 759, 764, 766, 821, 823, 831, 851, 856, 862], "ask": [6, 7, 13, 814, 820, 821, 833, 851, 853, 857, 858, 863], "server": [6, 7, 13, 46, 814, 821, 822, 828, 836, 858, 872], "forward": [6, 7, 8, 12, 13, 19, 32, 33, 46, 48, 58, 81, 366, 375, 376, 399, 404, 405, 409, 410, 420, 421, 790, 792, 793, 795, 797, 812, 814, 821, 827, 834, 841, 846, 847, 849, 856, 857, 865, 872, 873], "come": [7, 23, 46, 817, 820, 821, 822, 826, 830, 843, 848, 849, 855, 859, 872], "onto": [7, 642, 725, 731, 860, 861, 872], "scene": [7, 824, 850, 852, 860, 861, 872], "almost": [7, 46, 819, 829, 844, 852, 854, 861], "alwai": [7, 54, 55, 58, 59, 65, 77, 78, 81, 88, 111, 129, 153, 224, 274, 347, 373, 377, 379, 448, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 500, 556, 563, 627, 631, 633, 635, 640, 703, 704, 705, 707, 709, 710, 712, 714, 779, 820, 821, 822, 826, 827, 829, 831, 834, 837, 838, 839, 842, 843, 844, 845, 846, 847, 849, 851, 857, 865], "huggingfac": [7, 46, 865, 866], "implement": [7, 15, 23, 24, 32, 34, 38, 46, 49, 55, 56, 58, 69, 70, 78, 79, 81, 86, 93, 98, 153, 167, 168, 181, 200, 201, 215, 221, 222, 223, 226, 227, 228, 229, 238, 239, 241, 244, 246, 248, 262, 263, 264, 265, 274, 276, 279, 283, 286, 287, 291, 292, 336, 337, 360, 373, 377, 388, 429, 430, 529, 530, 551, 552, 631, 632, 633, 635, 637, 638, 646, 647, 648, 664, 673, 674, 675, 683, 692, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 778, 780, 802, 814, 818, 820, 824, 825, 826, 827, 829, 831, 832, 834, 835, 836, 838, 839, 840, 842, 844, 846, 847, 849, 851, 853, 854, 855, 856, 857, 859, 869, 870, 871, 872, 875, 878, 879], "conveni": [7, 26, 36, 820, 831, 832, 838, 844, 852, 854, 855, 859, 878], "who": [7, 21, 814, 817, 823, 824, 835, 850, 857, 872, 874, 880], "must": [7, 38, 46, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 214, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 326, 327, 330, 331, 332, 333, 336, 337, 338, 339, 340, 342, 344, 345, 347, 349, 351, 353, 354, 355, 356, 360, 363, 368, 370, 373, 376, 377, 378, 379, 382, 383, 386, 388, 390, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 418, 420, 421, 423, 425, 427, 428, 430, 436, 437, 442, 443, 444, 445, 450, 454, 455, 456, 457, 459, 460, 463, 464, 465, 470, 471, 473, 475, 476, 477, 478, 480, 484, 486, 487, 488, 489, 491, 493, 494, 495, 497, 498, 500, 505, 506, 508, 509, 510, 512, 513, 516, 523, 524, 525, 526, 533, 541, 542, 546, 547, 548, 553, 554, 556, 563, 577, 578, 615, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 792, 793, 797, 799, 819, 820, 821, 822, 825, 826, 830, 831, 832, 833, 834, 835, 838, 839, 840, 842, 843, 846, 847, 848, 849, 851, 855, 856, 861, 863, 866, 867, 873, 879], "reimplement": 7, "choic": [7, 13, 15, 33, 50, 58, 71, 81, 94, 377, 379, 448, 468, 648, 765, 767, 814, 821, 830, 842, 843, 854, 863, 866, 872, 879], "veri": [7, 13, 17, 25, 32, 33, 35, 57, 80, 275, 335, 352, 373, 633, 638, 686, 779, 819, 820, 821, 822, 828, 829, 831, 832, 833, 835, 836, 838, 839, 842, 843, 844, 846, 847, 849, 852, 854, 855, 856, 857, 861, 862, 868, 869, 870, 872, 873, 874, 877, 878, 879], "thousand": [7, 857], "china": 7, "howev": [7, 15, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 63, 86, 248, 291, 292, 379, 382, 493, 502, 504, 581, 633, 635, 638, 686, 688, 802, 820, 821, 825, 826, 827, 829, 831, 832, 833, 834, 835, 837, 838, 839, 842, 843, 844, 846, 849, 851, 853, 854, 855, 856, 857, 862, 865, 871, 872, 878], "suffer": 7, "abov": [7, 23, 28, 32, 33, 38, 39, 54, 57, 58, 63, 67, 74, 80, 81, 86, 90, 99, 119, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 312, 314, 329, 330, 336, 337, 339, 342, 368, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 410, 413, 414, 415, 420, 421, 422, 430, 431, 485, 493, 497, 523, 526, 553, 557, 559, 561, 563, 592, 601, 625, 627, 630, 631, 633, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 740, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 818, 820, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 844, 846, 849, 851, 853, 854, 855, 856, 872, 877], "second": [7, 9, 57, 58, 60, 63, 65, 69, 80, 81, 82, 83, 86, 88, 92, 99, 103, 104, 124, 148, 179, 187, 224, 229, 231, 233, 234, 235, 236, 242, 248, 249, 250, 251, 252, 253, 259, 260, 261, 266, 267, 268, 270, 271, 274, 277, 279, 290, 320, 329, 335, 348, 350, 351, 352, 358, 362, 363, 370, 373, 377, 378, 379, 386, 388, 429, 430, 431, 433, 437, 459, 491, 499, 510, 512, 516, 523, 526, 538, 587, 610, 616, 617, 622, 629, 630, 631, 633, 635, 636, 638, 640, 641, 642, 646, 669, 672, 673, 674, 676, 678, 683, 685, 686, 688, 690, 692, 694, 711, 712, 717, 720, 750, 751, 752, 797, 821, 825, 828, 831, 833, 837, 842, 843, 846, 848, 853, 863, 877], "iter": [7, 13, 46, 48, 53, 58, 59, 65, 73, 75, 81, 82, 88, 96, 101, 104, 123, 214, 321, 322, 370, 376, 377, 379, 422, 435, 446, 452, 469, 485, 535, 573, 629, 632, 635, 640, 642, 702, 706, 713, 715, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 735, 737, 807, 808, 812, 825, 827, 829, 851, 854, 863, 865], "dino": 7, "meta": [7, 46, 716, 717, 718, 826, 847, 872], "vit": 7, "purpos": [7, 25, 32, 33, 35, 46, 48, 148, 246, 264, 329, 370, 630, 633, 638, 686, 822, 824, 826, 829, 830, 832, 833, 835, 838, 839, 840, 843, 845, 846, 849, 850, 853, 859, 871, 873, 876, 877, 878], "abund": [7, 863], "literatur": 7, "mainli": [7, 820, 824, 841, 843, 846, 852, 854, 859, 872], "focus": [7, 814, 831, 847, 870, 871, 872, 878, 879], "rather": [7, 38, 59, 75, 82, 127, 214, 565, 566, 569, 630, 632, 635, 637, 662, 818, 822, 825, 829, 831, 834, 836, 843, 844, 846, 847, 856, 857, 862, 868, 871, 872], "65": [7, 13, 15, 44, 46, 48, 51, 80, 83, 90, 235, 274, 561, 616, 633, 635, 636, 638, 648, 683, 741, 742, 760, 830], "749": 7, "env": [7, 27, 28, 29, 30], "flags_fraction_of_gpu_memory_to_us": 7, "auto_growth": 7, "paddl": [7, 27, 28, 29, 30, 210, 336, 337, 373, 632, 790, 802, 820, 821, 831, 836], "autoimageprocessor": [7, 865, 866], "automodelforimageclassif": 7, "device_count": 7, "seed": [7, 24, 27, 28, 48, 49, 58, 62, 67, 69, 75, 81, 85, 90, 324, 325, 326, 327, 328, 370, 377, 383, 435, 446, 452, 509, 510, 511, 512, 513, 637, 644, 646, 660, 739, 740, 741, 742, 744, 750, 785, 790, 792, 808, 840, 844, 846], "libpaddl": 7, "0x7c8738e15470": 7, "processor": [7, 877], "facebook": [7, 49], "imagenet1k": 7, "id2label": [7, 49, 865], "predicted_class_idx": [7, 49], "paddle_input": 7, "pixel_valu": 7, "to_tensor": [7, 97, 98, 99, 100, 101, 102], "stop_gradi": [7, 60, 83, 214, 537, 617, 620, 622, 623, 624, 632, 635, 636, 641, 716, 717, 718, 797, 855], "logits_np_transpil": 7, "4th": 7, "decim": [7, 57, 80, 284, 633, 848], "io": [7, 14, 27, 28, 29, 30, 47, 50, 821, 830], "to_rgb": 7, "cv2": [7, 46, 48, 50, 854], "tar": [7, 46, 47, 48, 51], "gz": [7, 46, 47, 48, 51], "found": [7, 46, 48, 49, 51, 63, 65, 69, 75, 81, 86, 88, 92, 104, 202, 388, 470, 524, 632, 642, 672, 678, 711, 730, 750, 808, 817, 820, 821, 822, 826, 827, 828, 829, 831, 832, 834, 837, 840, 842, 843, 858, 874], "bj": [7, 224, 241, 274, 339, 373, 633], "bcebo": 7, "41626": 7, "2m": 7, "cross_entropi": [7, 48, 64, 87, 639, 699, 829, 839, 842], "01": [7, 12, 27, 28, 30, 48, 54, 58, 59, 60, 63, 81, 82, 83, 86, 90, 139, 266, 284, 285, 313, 319, 344, 345, 352, 370, 376, 398, 408, 409, 550, 593, 594, 616, 617, 622, 630, 633, 635, 636, 638, 641, 644, 675, 685, 717, 718, 741, 742, 777, 827, 856], "33": [7, 15, 44, 46, 47, 57, 67, 71, 80, 81, 82, 83, 85, 227, 228, 235, 284, 376, 377, 379, 388, 396, 418, 419, 449, 468, 524, 542, 593, 620, 633, 635, 636, 637, 638, 642, 648, 660, 661, 683, 737, 740, 760, 767, 777, 780], "bring": [7, 32, 33, 825, 845, 846, 851, 852, 859, 862], "hope": [7, 44, 857, 862, 878, 880], "milesi": 8, "blob": [8, 46, 48, 814], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 8, "data_load": 8, "l65": 8, "mask_valu": 8, "pil_img": 8, "scale": [8, 11, 46, 58, 62, 66, 81, 83, 85, 89, 113, 212, 213, 305, 306, 309, 320, 350, 368, 370, 373, 376, 377, 382, 394, 400, 401, 402, 410, 412, 417, 421, 437, 502, 503, 504, 623, 627, 632, 636, 637, 643, 660, 664, 667, 738, 777, 779, 780, 792, 793, 797, 808, 872, 874], "is_mask": 8, "neww": 8, "newh": 8, "assert": [8, 15, 47, 49, 51, 75, 539, 635, 785, 818, 824, 825, 836, 839, 842, 843, 844, 846, 847, 853, 854], "too": [8, 58, 81, 224, 241, 248, 274, 379, 493, 633, 792, 820, 821, 822, 825, 831, 835, 847, 857], "small": [8, 13, 15, 48, 57, 58, 63, 66, 80, 81, 86, 89, 241, 248, 274, 275, 335, 352, 373, 377, 378, 382, 441, 458, 502, 503, 504, 633, 638, 643, 681, 684, 686, 738, 792, 796, 814, 821, 830, 833, 839, 844, 849, 851, 855, 857, 865, 866, 873], "pixel": [8, 46, 58, 81, 376, 412], "resampl": 8, "nearest": [8, 58, 81, 224, 241, 274, 284, 346, 373, 376, 388, 412, 533, 633, 849], "bicub": [8, 58, 81, 376, 412, 849], "zero": [8, 46, 54, 55, 57, 58, 59, 60, 62, 63, 65, 68, 69, 71, 72, 77, 78, 80, 81, 83, 85, 86, 90, 91, 94, 95, 99, 113, 115, 116, 117, 119, 130, 131, 133, 135, 140, 142, 143, 144, 146, 147, 150, 153, 154, 222, 223, 224, 226, 227, 228, 229, 230, 233, 235, 236, 238, 239, 240, 241, 243, 246, 247, 248, 255, 256, 257, 258, 264, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 291, 292, 294, 295, 297, 299, 300, 304, 306, 312, 314, 323, 330, 336, 337, 340, 341, 342, 346, 354, 357, 359, 360, 361, 362, 368, 370, 373, 376, 377, 379, 386, 388, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 419, 420, 421, 422, 423, 424, 429, 431, 439, 444, 447, 469, 479, 484, 485, 496, 497, 515, 524, 525, 542, 546, 553, 573, 578, 616, 617, 622, 623, 624, 625, 627, 630, 631, 633, 635, 636, 637, 638, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 664, 667, 668, 670, 674, 675, 677, 678, 679, 680, 681, 682, 684, 686, 692, 694, 695, 702, 703, 704, 705, 707, 708, 715, 738, 740, 741, 742, 745, 746, 747, 748, 750, 751, 752, 753, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 792, 793, 797, 812, 826, 829, 831, 832, 833, 838, 840, 841, 844, 851, 854, 855, 863, 871], "ndim": [8, 58, 63, 68, 81, 86, 91, 103, 107, 377, 379, 445, 446, 452, 463, 464, 465, 478, 486, 488, 498, 615, 635, 638, 645, 685, 688, 748, 829, 839, 846], "newaxi": [8, 628], "transpos": [8, 13, 29, 32, 33, 50, 58, 62, 63, 75, 81, 85, 86, 103, 377, 425, 443, 445, 447, 522, 637, 638, 650, 652, 654, 656, 657, 658, 662, 678, 682, 684, 690, 779, 793, 805, 814, 836, 842, 853, 856, 866], "255": [8, 29, 32, 33, 46, 47, 48, 50, 62, 81, 85, 235, 633, 659, 814, 866], "car": 8, "full_img": 8, "from_numpi": [8, 9, 854], "img_numpi": 8, "torch_unet": 8, "unet_carvana": 8, "ivy_unet": 8, "n_channel": 8, "n_class": 8, "l62": 8, "mask_to_imag": 8, "ndarrai": [8, 54, 58, 59, 77, 81, 99, 128, 129, 141, 376, 377, 379, 388, 421, 446, 490, 529, 530, 600, 630, 635, 802, 807, 820, 826, 831, 832, 835, 838, 842, 843, 844, 847, 849, 851, 853, 856, 859], "uint8": [8, 29, 32, 33, 48, 156, 163, 167, 178, 181, 186, 192, 631, 777, 778, 831, 846], "elif": [8, 11, 830, 835, 842, 843, 844], "bool": [8, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 129, 130, 135, 136, 137, 138, 139, 140, 142, 144, 150, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 189, 193, 197, 198, 200, 201, 203, 205, 208, 209, 214, 215, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 324, 325, 326, 327, 328, 330, 335, 336, 337, 338, 339, 341, 343, 351, 352, 357, 358, 360, 362, 363, 364, 370, 373, 374, 376, 377, 378, 379, 382, 388, 395, 396, 397, 399, 400, 401, 402, 412, 413, 414, 415, 418, 420, 422, 424, 431, 435, 438, 439, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 469, 470, 471, 473, 474, 475, 476, 477, 480, 484, 488, 491, 493, 494, 495, 497, 500, 502, 504, 505, 506, 507, 508, 510, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 582, 591, 592, 593, 594, 596, 598, 600, 601, 614, 617, 618, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 660, 661, 662, 663, 664, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 682, 683, 685, 686, 687, 688, 692, 693, 695, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 729, 730, 731, 736, 737, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 775, 777, 778, 779, 789, 793, 796, 797, 807, 808, 812, 831, 833, 835, 842, 843, 846, 847, 849, 851, 856, 865, 866], "fromarrai": [8, 29, 32, 33, 48], "interpol": [8, 46, 58, 81, 354, 373, 376, 388, 533, 637, 664, 849, 872], "bilinear": [8, 58, 81, 376, 412, 849], "torch_mask": 8, "squeez": [8, 46, 65, 88, 640, 872], "torch_result": 8, "to_numpi": [8, 15, 32, 33, 44, 47, 48, 51, 59, 82, 635, 836, 844, 854, 869], "img_tf": 8, "math": [8, 49, 99, 291, 633, 831, 842, 843, 844, 856, 870], "lot": [8, 830, 831, 840, 846, 857, 862, 863, 871], "far": [8, 13, 32, 33, 642, 719, 730, 808, 832, 833, 852, 877, 878], "space": [8, 54, 57, 58, 59, 77, 80, 81, 82, 127, 138, 139, 293, 350, 373, 378, 455, 546, 550, 630, 633, 635, 849, 862], "del": [8, 830], "empty_cach": 8, "permute_dim": [8, 65, 88, 640, 836], "func_wrapp": [8, 52, 57, 58, 74, 80, 81, 111, 112, 113, 114, 115, 116, 117, 118, 119, 292, 296, 301, 302, 304, 368, 627, 633, 789, 832, 843, 848], "242": [8, 81], "mani": [8, 32, 33, 36, 65, 75, 88, 148, 329, 370, 630, 640, 709, 820, 821, 822, 826, 827, 829, 830, 831, 832, 833, 834, 838, 839, 840, 842, 843, 844, 846, 849, 851, 853, 854, 857, 861, 862, 863, 868, 872, 875, 878, 879], "factor": [8, 15, 58, 60, 62, 63, 81, 83, 85, 86, 97, 98, 99, 100, 101, 212, 213, 214, 376, 377, 382, 410, 421, 435, 436, 446, 449, 451, 452, 507, 616, 617, 622, 623, 632, 636, 637, 638, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 668, 777, 779, 780, 792, 793, 797, 835, 862], "inc": 8, "unetdoubleconv": 8, "down1": 8, "unetdown": 8, "128": [8, 12, 13, 32, 33, 46, 55, 57, 62, 78, 80, 85, 104, 169, 245, 376, 398, 408, 546, 556, 631, 633, 635, 637, 638, 652, 654, 659, 683], "down2": 8, "down3": 8, "down4": 8, "1024": [8, 12, 46, 47, 814], "up1": 8, "unetup": 8, "up2": 8, "up3": 8, "up4": 8, "outc": 8, "unetoutconv": 8, "x1": [8, 23, 32, 33, 51, 55, 57, 58, 59, 63, 68, 78, 80, 81, 82, 86, 91, 93, 103, 104, 108, 154, 164, 180, 187, 207, 224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 249, 250, 251, 252, 253, 259, 260, 261, 266, 267, 268, 270, 271, 272, 273, 274, 277, 279, 283, 290, 295, 314, 335, 340, 347, 348, 349, 351, 353, 358, 362, 370, 373, 377, 379, 388, 447, 479, 523, 535, 538, 631, 632, 633, 635, 638, 645, 647, 669, 676, 678, 683, 687, 690, 691, 694, 749, 756, 774, 799, 814, 825, 831, 833, 835, 838, 842, 843, 866, 867], "x2": [8, 23, 32, 33, 55, 57, 58, 59, 63, 68, 78, 80, 81, 82, 86, 91, 103, 104, 108, 154, 180, 187, 207, 224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 249, 250, 251, 252, 253, 259, 260, 261, 266, 267, 268, 270, 271, 272, 273, 274, 277, 279, 283, 290, 295, 335, 340, 347, 348, 349, 351, 353, 358, 362, 373, 377, 379, 388, 433, 447, 479, 523, 535, 538, 631, 632, 633, 635, 638, 645, 669, 676, 678, 683, 687, 690, 691, 694, 749, 774, 799, 825, 831, 833, 835, 838, 842, 843], "x3": [8, 55, 59, 154, 535, 631, 635], "x4": 8, "x5": 8, "in_channel": 8, "out_channel": 8, "mid_channel": 8, "double_conv": 8, "with_bia": [8, 793, 814, 855, 866], "batchnorm2d": [8, 12, 13, 796], "downscal": [8, 59, 82, 541, 542, 563, 635], "maxpool": [8, 12, 13], "doubl": 8, "conv": [8, 637, 793, 849], "maxpool_conv": 8, "upscal": 8, "scale_factor": [8, 58, 81, 376, 412, 849], "align_corn": [8, 58, 81, 376, 412, 849], "conv2dtranspos": [8, 793], "bhwc": 8, "diff_h": 8, "diff_w": 8, "pad_width": [8, 58, 65, 81, 88, 379, 485, 640, 702, 715], "constant_pad": [8, 65, 88, 640], "via": [9, 35, 38, 248, 377, 379, 446, 449, 452, 493, 633, 642, 729, 730, 822, 825, 829, 831, 832, 842, 847, 849, 851, 853, 854, 872], "alongsid": [9, 21, 22, 23, 24, 34, 637, 664, 862], "basic": [9, 17, 19, 23, 26, 30, 32, 33, 36, 39, 379, 492, 814, 815, 820, 833, 846], "singl": [9, 25, 35, 44, 49, 57, 67, 75, 80, 90, 99, 293, 352, 373, 377, 383, 444, 510, 601, 614, 618, 633, 635, 636, 637, 644, 646, 664, 740, 741, 742, 750, 777, 793, 812, 814, 820, 821, 822, 825, 830, 833, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 854, 855, 856, 857, 863], "lstm": [9, 10, 637, 663, 793, 851, 872], "sample_input": 9, "uniform": [9, 24, 25, 26, 27, 28, 32, 33, 34, 35, 37, 38, 39, 46, 58, 67, 81, 90, 388, 526, 644, 739, 740, 742, 792, 814, 845, 855, 866, 867, 879], "tf_lstm": [9, 10], "torch_lstm": [9, 10], "physicaldevic": 9, "physical_devic": 9, "device_typ": 9, "alloc": [9, 54, 55, 58, 78, 146, 147, 153, 330, 370, 630, 631, 812, 820, 822, 857], "physic": [9, 205, 632], "modifi": [9, 48, 58, 75, 81, 98, 379, 388, 482, 485, 490, 530, 777, 808, 820, 821, 822, 825, 827, 828, 831, 832, 834, 836, 837, 839, 842, 844, 846, 847, 851], "164": [9, 13], "state_upd": [9, 30], "properti": [9, 30, 75, 98, 99, 100, 101, 102, 103, 107, 795, 797, 825, 829, 839, 844, 846, 853, 854, 855, 878], "_transpil": [9, 30], "those": [9, 21, 45, 46, 63, 65, 75, 81, 86, 88, 127, 180, 241, 274, 494, 615, 630, 631, 633, 635, 638, 640, 642, 645, 685, 688, 700, 721, 748, 817, 820, 821, 822, 823, 826, 829, 830, 831, 840, 842, 843, 844, 846, 849, 861, 869], "torch_input": 9, "rand": [9, 10, 30, 32, 33, 48, 807, 808, 814, 865], "tf_input": [9, 866], "constant": [9, 10, 17, 19, 24, 27, 28, 34, 37, 39, 44, 58, 65, 66, 81, 88, 89, 98, 99, 323, 370, 376, 378, 379, 422, 457, 458, 485, 640, 642, 643, 702, 725, 738, 792, 796, 814, 839, 844, 847, 855, 856, 857, 865, 867], "tf_output": 9, "toler": [9, 10, 58, 63, 81, 86, 335, 352, 373, 377, 431, 446, 452, 638, 681, 684, 772, 774, 825, 844, 872], "benchmark": [9, 10, 874], "n_run": [9, 10], "tf_time": 9, "round": [9, 57, 58, 80, 81, 98, 100, 101, 102, 224, 237, 241, 247, 248, 274, 288, 294, 295, 346, 373, 633, 818, 820, 821, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 861, 862, 863, 869], "torch_tim": 9, "cpu_speedup": 9, "gpu_speedup": 9, "ntranspil": 9, "5017": 9, "1101": 9, "7519": 9, "901": 9, "607x": 9, "944x": 9, "32": [10, 15, 30, 32, 33, 44, 46, 47, 48, 57, 58, 67, 80, 81, 85, 86, 90, 103, 104, 113, 165, 223, 235, 236, 245, 259, 265, 281, 284, 285, 339, 373, 376, 377, 379, 388, 396, 397, 398, 408, 418, 419, 429, 433, 468, 524, 546, 562, 627, 631, 633, 635, 637, 638, 644, 645, 648, 652, 654, 655, 659, 661, 678, 683, 694, 740, 741, 742, 749, 760, 777, 780, 830, 831, 841, 854, 877], "original_output": 10, "transpiled_output": 10, "original_torch_tim": 10, "autograph": 10, "do_not_convert": 10, "compiled_tf_lstm": 10, "transpiled_tf_tim": 10, "original_tf_lstm": 10, "time_major": [10, 81, 376, 422, 637, 663], "return_sequ": [10, 793], "original_tf_tim": 10, "slower": [10, 25, 843], "480074623755541x": 10, "362692848996253x": 10, "openmim": 11, "mim": 11, "0rc8": 11, "get_model": 11, "list_model": 11, "mmengin": 11, "configdict": 11, "saniti": [11, 14, 15, 32, 843], "checkpoint": [11, 12, 49, 857], "against": [11, 55, 58, 59, 63, 68, 78, 80, 81, 82, 86, 91, 154, 273, 292, 335, 338, 341, 352, 373, 388, 529, 530, 531, 532, 533, 570, 631, 633, 635, 638, 645, 678, 679, 681, 684, 745, 846, 851, 857, 861, 872], "zoo": 11, "checkpoint_nam": [11, 14, 32], "tiny_32xb128": 11, "noema_in1k": 11, "openmmlab": 11, "get_scal": 11, "cfg": [11, 837], "_config": 11, "train_pipelin": 11, "tensor_imag": 11, "transpiled_graph": [11, 14, 32], "issu": [11, 14, 378, 455, 792, 815, 816, 817, 818, 819, 821, 823, 825, 827, 828, 830, 831, 832, 833, 835, 836, 843, 846, 847, 849, 851, 855, 857, 863, 865], "107960": [11, 14], "export": [11, 14, 47, 830, 871, 878], "lc_all": [11, 14], "en_u": [11, 14], "utf": [11, 14], "ld_library_path": [11, 14], "lib64": [11, 14], "nvidia": [11, 13, 14, 27, 28, 29, 30, 46, 48, 51, 876, 877], "library_path": [11, 14], "stub": [11, 14, 828], "ldconfig": [11, 14], "_f": [11, 14, 32], "comp_model": [11, 14, 32], "equival": [11, 14, 32, 63, 86, 98, 99, 127, 235, 248, 269, 270, 283, 284, 379, 469, 493, 499, 630, 633, 638, 681, 684, 687, 695, 802, 842, 843, 849, 854, 856, 858, 866], "np_imag": [11, 29, 32, 33], "jax_imag": 11, "hk": [11, 14, 32, 46, 50, 814, 856, 866], "rng_kei": [11, 14, 32, 814, 866], "prngkei": [11, 14, 25, 26, 32, 33, 46, 814, 856, 866], "jax_mlp_forward": 11, "init": [11, 14, 32, 46, 48, 58, 81, 377, 435, 446, 452, 814, 825, 856, 866], "rng": [11, 14, 32, 46, 814, 856, 866], "06": [11, 15, 27, 48, 55, 67, 80, 83, 102, 111, 166, 223, 239, 376, 398, 408, 622, 627, 631, 636, 742, 772, 774, 846, 854], "block_until_readi": 11, "08": [11, 58, 71, 81, 90, 227, 335, 352, 373, 376, 378, 398, 408, 458, 633, 741, 742, 767, 772, 777, 837], "3x": 11, "train2017": [11, 14, 29, 32, 33, 814, 866], "000000283921": [11, 14, 32], "out_torch": [11, 14, 32], "et": [11, 637, 638, 664, 688], "out_jax": [11, 14, 32], "66m": 11, "53m": 11, "That": [11, 14, 17, 19, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 46, 283, 378, 457, 633, 807, 821, 822, 826, 846, 853, 854, 855, 873], "pretti": [11, 14, 32, 33, 46, 818, 836, 854, 878], "solid": [11, 14, 32], "2023": [12, 13, 14, 27, 28, 29, 30, 46], "52": [12, 15, 44, 57, 80, 82, 83, 90, 229, 239, 241, 388, 524, 546, 547, 562, 616, 633, 635, 636, 637, 638, 648, 661, 683, 742, 760, 807], "110": [12, 46], "10472": 12, "10k": 12, "tx": 12, "23k": 12, "634575": 12, "620k": 12, "jpeg": [12, 47, 48], "619": 12, "70k": 12, "113": 12, "resnet34_weight": 12, "torch_resnet_34": 12, "conv1": [12, 13], "kernel_s": [12, 13, 30, 32, 33, 48, 58, 81, 376, 395, 396, 397, 416, 423, 793, 799], "stride": [12, 13, 58, 62, 81, 82, 85, 103, 376, 379, 395, 396, 397, 413, 414, 415, 416, 418, 419, 423, 461, 635, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 793, 842, 847, 872], "bia": [12, 13, 58, 62, 81, 85, 89, 382, 388, 507, 523, 573, 635, 637, 643, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 738, 793, 839, 846, 851, 855], "bn1": [12, 13], "ep": [12, 13, 58, 63, 66, 81, 86, 89, 166, 301, 368, 377, 378, 382, 431, 458, 502, 503, 504, 631, 638, 643, 681, 684, 738, 789, 796], "05": [12, 13, 15, 48, 54, 57, 58, 60, 66, 80, 81, 83, 89, 139, 266, 319, 335, 344, 345, 352, 370, 373, 382, 502, 503, 504, 561, 583, 606, 616, 617, 622, 630, 633, 635, 636, 638, 643, 679, 738, 772, 777, 792, 796, 844, 846], "momentum": [12, 13, 46, 58, 81, 382, 502, 504, 796, 862], "affin": [12, 13, 796], "track_running_stat": [12, 13, 796], "dilat": [12, 13, 50, 58, 62, 81, 85, 376, 379, 413, 414, 415, 418, 419, 423, 485, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 793], "ceil_mod": [12, 13, 58, 81, 376, 395, 396, 397, 413, 414, 415, 418, 793], "layer1": [12, 13], "basicblock": [12, 13], "conv2": [12, 13], "bn2": [12, 13], "layer2": [12, 13], "layer3": [12, 13], "layer4": [12, 13], "output_s": [12, 13, 58, 81, 376, 390, 391, 392, 393, 637, 666, 793, 814, 866], "fc": [12, 13, 19, 46, 814, 855, 866], "in_featur": [12, 13, 62, 85, 637, 661, 846], "out_featur": [12, 13, 62, 85, 637, 661, 846], "resnet_34": 12, "ivy_resnet_34": 12, "34": [12, 15, 44, 46, 80, 81, 82, 90, 169, 239, 266, 287, 376, 388, 419, 530, 546, 547, 631, 633, 635, 637, 638, 644, 661, 680, 741, 742, 832], "333f7ec4": 12, "pth": 12, "83": [12, 13, 15, 44, 63, 85, 90, 288, 376, 388, 398, 408, 419, 524, 633, 637, 638, 661, 676, 741], "3m": 12, "4mb": 12, "preserv": [12, 14, 27, 28, 29, 30, 58, 59, 60, 75, 81, 82, 83, 104, 376, 377, 379, 388, 412, 446, 463, 464, 465, 476, 477, 496, 530, 563, 625, 635, 636, 640, 704, 777, 845, 846, 856, 857, 866], "multipl": [12, 14, 23, 27, 28, 29, 30, 32, 57, 58, 63, 66, 71, 72, 75, 80, 81, 82, 83, 86, 88, 89, 94, 95, 135, 235, 259, 266, 272, 273, 274, 276, 336, 337, 373, 376, 377, 379, 382, 386, 398, 405, 408, 410, 444, 471, 480, 497, 500, 507, 516, 535, 542, 573, 616, 617, 620, 622, 623, 624, 625, 630, 633, 635, 636, 637, 638, 640, 643, 645, 648, 649, 652, 653, 654, 655, 668, 677, 678, 679, 692, 700, 703, 708, 709, 738, 745, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 793, 808, 812, 814, 820, 822, 826, 827, 829, 833, 835, 837, 839, 842, 843, 844, 846, 849, 851, 857, 863, 865, 870, 871, 872, 879], "rel": [12, 14, 27, 28, 29, 30, 58, 60, 63, 65, 70, 77, 81, 83, 86, 88, 93, 103, 137, 335, 352, 373, 378, 388, 457, 458, 523, 617, 620, 622, 623, 624, 636, 638, 640, 647, 672, 681, 684, 692, 704, 708, 754, 757, 772, 774, 822, 830, 844, 849, 872, 874], "home": [12, 14, 27, 28, 29, 30, 830], "workspac": [12, 14, 24, 27, 28, 29, 30, 821, 836], "95": [12, 13, 15, 44, 58, 60, 63, 67, 74, 83, 85, 90, 111, 361, 373, 419, 616, 620, 624, 627, 636, 638, 644, 676, 741, 742], "builtin": [12, 821, 853, 855], "track": [12, 23, 32, 33, 45, 46, 812, 821, 822, 825, 841, 842, 865, 872], "properli": [12, 821, 824, 835, 837, 843, 846], "_trace_graph": 12, "shown": [12, 30, 32, 73, 75, 96, 258, 281, 339, 373, 633, 820, 821, 822, 825, 828, 830, 831, 833, 835, 837, 838, 843, 844, 846, 847, 848, 851, 853, 857], "8507": 12, "1351": 12, "0069": 12, "85072625": 12, "13506091": 12, "00688289": 12, "resnet50_weight": 12, "torch_resnet_50": 12, "imagenet1k_v2": 12, "11ad3fa6": 12, "8m": 12, "8mb": 12, "bottleneck": [12, 861], "conv3": 12, "bn3": 12, "2048": [12, 594, 635], "resnet_50": 12, "ivy_resnet_50": 12, "3429": 12, "0408": 12, "0121": 12, "34288204": 12, "04077014": 12, "01212029": 12, "deploy": [13, 821, 866, 871, 874, 875, 878, 879], "ow": 13, "residu": 13, "extrem": 13, "though": [13, 29, 819, 820, 822, 831, 832, 834, 839, 842, 843, 849, 854, 857], "idea": [13, 814, 820, 845, 847, 852, 863, 871], "revolutionari": 13, "reach": [13, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 818, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 861, 862, 863, 871, 872], "152": 13, "vanish": [13, 792], "explod": [13, 792, 860, 861], "gradient": [13, 32, 33, 46, 48, 58, 81, 98, 214, 365, 373, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 632, 641, 716, 717, 718, 774, 785, 797, 824, 847, 854, 855, 857, 872], "astor": 13, "satisfi": [13, 27, 28, 29, 30, 46, 48, 51, 58, 376, 377, 399, 431, 831, 833], "cu121": 13, "pillow": [13, 51], "filelock": [13, 29, 46], "extens": [13, 29, 46, 57, 63, 80, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 149, 150, 156, 166, 169, 181, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 336, 337, 339, 373, 376, 379, 388, 420, 493, 497, 523, 630, 631, 633, 638, 640, 645, 646, 647, 648, 649, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 701, 703, 704, 705, 707, 708, 710, 711, 715, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 819, 821, 822, 834, 836, 837, 846, 869, 872, 879], "sympi": [13, 29, 862], "networkx": [13, 27, 28, 29, 30, 51], "jinja2": [13, 27, 28, 29, 30], "fsspec": [13, 29, 46], "nvrtc": 13, "cu12": 13, "cupti": 13, "54": [13, 44, 55, 57, 62, 80, 81, 85, 90, 169, 238, 239, 244, 259, 288, 294, 315, 370, 376, 388, 398, 408, 524, 633, 637, 638, 648, 661, 680, 683, 740, 741, 742, 760, 830, 833], "curand": 13, "106": [13, 48], "cusolv": [13, 638, 689], "107": 13, "cuspars": 13, "nccl": 13, "nvtx": 13, "triton": 13, "nvjitlink": 13, "markupsaf": [13, 27, 28, 29, 30], "mpmath": [13, 29], "collect": [13, 36, 46, 48, 50, 51, 53, 75, 76, 627, 632, 635, 636, 637, 639, 642, 643, 644, 732, 789, 793, 794, 795, 796, 797, 821, 830, 835, 836, 840, 841, 844, 846, 870, 872, 875], "py2": [13, 46, 48], "py3": [13, 46, 48, 51], "whl": [13, 46, 47, 48, 51], "filter": [13, 46, 48, 50, 58, 62, 81, 85, 318, 319, 370, 376, 397, 415, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 779, 793, 814, 827, 830], "get_logg": 13, "setlevel": 13, "solv": [13, 63, 86, 377, 441, 638, 777, 814, 821, 825, 836, 843, 852, 874], "todai": 13, "ant": 13, "bee": 13, "120": [13, 48, 71, 94, 104, 638, 683, 758], "usual": [13, 17, 19, 49, 241, 274, 633, 807, 821, 825, 831, 843, 846, 849], "upon": [13, 32, 33, 50, 812, 822, 823, 833, 842, 846, 849, 857, 871, 872], "scratch": [13, 846], "transfer": 13, "subset": [13, 48, 779, 826, 830, 834, 838, 841, 843, 846, 851, 872], "extract": [13, 32, 33, 40, 47, 58, 81, 99, 379, 468, 494, 843, 845, 847, 868, 872, 873, 878], "zipfil": 13, "zip": [13, 48, 851], "hymenoptera_data": 13, "replac": [13, 18, 20, 31, 47, 57, 58, 59, 65, 67, 75, 80, 81, 82, 88, 90, 133, 275, 311, 314, 368, 370, 379, 490, 493, 497, 577, 578, 582, 630, 633, 635, 640, 644, 700, 739, 777, 822, 828, 829, 831, 832, 840, 843, 846, 853, 856, 857, 862, 866, 879], "send": [13, 862, 877], "statu": [13, 820, 823, 830, 837, 863], "status_cod": 13, "basenam": 13, "zip_save_path": 13, "join": [13, 47, 48, 65, 75, 81, 88, 469, 470, 640, 701, 711, 814, 823], "getcwd": 13, "wb": 13, "zip_ref": 13, "extractal": 13, "option": [13, 38, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 169, 171, 181, 193, 197, 209, 212, 213, 214, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 421, 422, 424, 425, 427, 428, 429, 431, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 569, 574, 577, 578, 582, 592, 593, 594, 596, 598, 600, 601, 602, 614, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 725, 726, 730, 731, 736, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 778, 785, 789, 790, 792, 793, 795, 797, 798, 807, 812, 820, 821, 822, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 844, 846, 847, 849, 851, 856, 857, 865, 866, 867, 872, 878], "delet": [13, 47, 822, 830], "fail": [13, 47, 772, 814, 818, 821, 822, 825, 830, 831, 833, 837, 840, 842, 843, 844], "augment": [13, 46], "data_transform": 13, "randomresizedcrop": 13, "randomhorizontalflip": 13, "val": [13, 59, 75, 80, 82, 254, 379, 474, 561, 562, 563, 582, 583, 584, 633, 635, 831, 842, 853], "data_dir": 13, "image_dataset": 13, "imagefold": 13, "dataset_s": [13, 48], "class_nam": [13, 48, 774], "imshow": [13, 46, 47], "inp": [13, 85, 637, 659], "clip": [13, 44, 57, 58, 65, 80, 81, 82, 88, 272, 273, 379, 468, 493, 494, 541, 542, 633, 635, 640, 829, 839, 841, 842, 854, 856, 869], "paus": 13, "001": [13, 46, 57, 58, 66, 78, 81, 83, 166, 264, 281, 339, 352, 373, 617, 631, 633, 636, 643, 738, 777, 854, 855], "bit": [13, 58, 71, 165, 166, 169, 232, 233, 235, 388, 524, 525, 631, 633, 648, 758, 759, 764, 766, 819, 820, 821, 829, 830, 831, 833, 839, 851, 853, 878], "batch": [13, 46, 47, 48, 58, 59, 63, 75, 81, 82, 86, 212, 213, 376, 377, 378, 382, 390, 392, 393, 399, 412, 422, 439, 453, 455, 502, 503, 504, 507, 550, 553, 554, 615, 632, 635, 637, 638, 641, 643, 661, 662, 663, 664, 695, 716, 717, 718, 738, 777, 793, 796, 829, 839, 844, 854, 870], "make_grid": 13, "resnet18": [13, 50, 51], "train_model": 13, "train_dataset": 13, "val_dataset": 13, "metric": [13, 814, 857], "train_acc_metr": 13, "sparsecategoricalaccuraci": 13, "val_acc_metr": 13, "nstart": 13, "start_tim": 13, "x_batch_train": 13, "y_batch_train": 13, "gradienttap": 13, "tape": 13, "loss_valu": 13, "grad": [13, 32, 33, 44, 48, 616, 636, 797, 841, 854, 855, 856], "trainable_weight": 13, "apply_gradi": 13, "update_st": 13, "everi": [13, 29, 32, 33, 38, 46, 54, 58, 59, 81, 82, 136, 137, 302, 336, 337, 350, 368, 373, 376, 379, 413, 414, 415, 422, 499, 535, 630, 635, 820, 822, 825, 827, 828, 830, 831, 833, 837, 838, 839, 840, 842, 843, 844, 846, 851, 853, 855, 865, 866, 867, 872], "4f": 13, "float": [13, 52, 54, 55, 57, 58, 59, 60, 62, 63, 64, 66, 67, 69, 71, 74, 77, 78, 80, 81, 82, 83, 85, 86, 87, 89, 90, 94, 98, 101, 103, 113, 119, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 143, 144, 149, 153, 157, 161, 166, 170, 174, 180, 181, 184, 190, 199, 208, 212, 213, 216, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 252, 254, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 303, 305, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 335, 336, 337, 338, 346, 347, 352, 354, 355, 358, 359, 360, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 388, 391, 400, 401, 402, 419, 420, 427, 430, 431, 433, 446, 450, 452, 453, 454, 458, 459, 474, 492, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 523, 524, 525, 526, 531, 532, 533, 540, 541, 542, 550, 559, 583, 584, 587, 593, 594, 614, 616, 617, 620, 622, 623, 624, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 660, 662, 664, 667, 668, 670, 673, 674, 675, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 695, 697, 698, 699, 716, 717, 718, 725, 738, 741, 742, 748, 750, 751, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 774, 777, 778, 780, 789, 792, 793, 796, 797, 812, 818, 825, 829, 831, 834, 835, 836, 838, 839, 841, 842, 844, 846, 847, 849, 851, 853, 855], "train_acc": 13, "acc": 13, "reset": [13, 188, 189, 190, 191, 192, 218, 219, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 631, 632, 635, 832], "reset_st": 13, "x_batch_val": 13, "y_batch_val": 13, "val_logit": 13, "val_acc": 13, "taken": [13, 38, 58, 63, 81, 86, 342, 373, 376, 421, 638, 672, 692, 820, 830, 843, 847, 856, 873], "instanti": [13, 32, 33, 785, 834], "sparsecategoricalcrossentropi": 13, "from_logit": [13, 64, 87, 639, 697, 794], "3121": 13, "2126": 13, "4992": 13, "6072": 13, "244": [13, 57, 246, 814], "3852": 13, "1830": 13, "1015": 13, "1364": 13, "3915": 13, "7465": 13, "8033": 13, "3333": 13, "214": 13, "2763": 13, "3526": 13, "4220": 13, "1592": 13, "8525": 13, "3660": 13, "1085": 13, "1366": 13, "4634": 13, "8115": 13, "3987": 13, "36": [13, 15, 44, 48, 57, 58, 62, 71, 81, 82, 86, 229, 284, 285, 350, 373, 376, 377, 388, 398, 408, 434, 524, 546, 547, 594, 633, 635, 638, 642, 648, 661, 680, 683, 693, 730, 760], "3875": 13, "8096": 13, "5836": 13, "4432": 13, "8402": 13, "3529": 13, "218": [13, 48], "0323": 13, "0982": 13, "4332": 13, "0324": [13, 48], "8197": 13, "3464": 13, "228": [13, 51], "1794": 13, "9244": 13, "9429": 13, "7951": 13, "231": [13, 118, 627], "0132": 13, "4156": 13, "2132": 13, "1413": 13, "8279": 13, "4183": 13, "3028": 13, "1461": 13, "3779": 13, "4553": 13, "8607": 13, "4444": 13, "223": [13, 87], "2835": 13, "0436": 13, "7022": 13, "1335": 13, "8648": 13, "4052": 13, "215": 13, "37": [13, 15, 27, 28, 29, 30, 44, 52, 57, 58, 74, 80, 81, 85, 103, 114, 227, 235, 284, 287, 291, 384, 419, 514, 633, 637, 638, 642, 644, 661, 680, 727, 741, 830], "0863": 13, "0237": 13, "0181": 13, "1331": 13, "8975": 13, "4967": 13, "209": 13, "1050": 13, "2271": 13, "3540": 13, "0588": 13, "8689": 13, "4902": 13, "222": 13, "7880": 13, "4800": 13, "4741": 13, "0218": 13, "5033": 13, "220": [13, 80, 246], "61": [13, 44, 46, 57, 58, 63, 80, 81, 83, 87, 90, 227, 262, 264, 289, 398, 616, 633, 636, 637, 638, 659, 676, 742, 836], "2198": 13, "6509": 13, "3352": 13, "0270": 13, "4771": 13, "216": [13, 83, 86, 616, 636, 693], "0385": 13, "1798": 13, "0143": 13, "0309": 13, "5359": 13, "213": [13, 846], "7697": 13, "3405": 13, "6033": 13, "8392": 13, "8770": 13, "205": [13, 48], "0623": 13, "4221": 13, "0138": 13, "4607": 13, "5294": 13, "221": [13, 52, 114], "0349": 13, "6545": 13, "1935": 13, "1512": 13, "8852": 13, "5098": 13, "212": [13, 46, 58, 62, 81, 360, 373, 661], "0821": 13, "1985": 13, "7769": 13, "3897": 13, "204": 13, "1106": 13, "1354": 13, "1801": 13, "0276": 13, "8893": 13, "5621": 13, "1185": 13, "0447": 13, "2817": 13, "1006": 13, "5752": 13, "2220": 13, "0387": 13, "1639": 13, "0080": 13, "9221": 13, "5686": 13, "0287": 13, "0115": 13, "1679": 13, "7920": 13, "208": 13, "0071": 13, "0790": 13, "2657": 13, "0758": 13, "8934": 13, "210": [13, 832], "2406": 13, "9193": 13, "2372": 13, "9555": 13, "9139": 13, "5817": 13, "211": [13, 855], "1150": [13, 280, 633], "0810": 13, "2205": 13, "1616": 13, "9344": 13, "82": [13, 15, 44, 46, 51, 52, 57, 83, 90, 114, 227, 388, 524, 616, 636, 741, 742, 818, 836], "0200": 13, "0117": 13, "2090": 13, "1444": 13, "5948": 13, "63": [13, 14, 15, 44, 48, 57, 74, 80, 85, 86, 119, 280, 287, 288, 376, 388, 398, 408, 419, 524, 633, 638, 642, 648, 668, 683, 720, 731, 760], "0482": 13, "0338": 13, "5971": 13, "0368": 13, "6144": 13, "207": 13, "1593": 13, "4745": 13, "0733": 13, "0434": 13, "6078": 13, "68": [13, 15, 44, 48, 51, 57, 90, 114, 136, 229, 376, 398, 408, 627, 630, 633, 638, 643, 694, 738, 741, 742], "3923": 13, "1614": 13, "3711": [13, 378, 460], "2719": 13, "6275": 13, "visualize_model": 13, "num_imag": 13, "was_train": 13, "learning_phas": 13, "images_so_far": 13, "pred": [13, 32, 33, 47, 48, 58, 64, 81, 87, 378, 454, 457, 639, 697, 698, 699, 829, 839, 842], "j": [13, 54, 57, 58, 59, 63, 71, 77, 80, 81, 86, 98, 126, 142, 222, 223, 224, 225, 227, 230, 239, 241, 244, 246, 254, 262, 264, 268, 274, 285, 287, 288, 291, 292, 339, 373, 376, 377, 388, 404, 405, 409, 420, 421, 425, 430, 432, 443, 449, 533, 538, 629, 630, 633, 635, 638, 648, 673, 692, 760, 808, 822, 824, 828, 865, 868], "continu": [13, 30, 32, 33, 48, 126, 288, 296, 368, 629, 633, 814, 819, 820, 821, 824, 825, 836, 842, 845, 846, 857, 862, 863, 872], "yet": [14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 48, 369, 371, 372, 380, 381, 385, 820, 821, 836, 857, 858, 865, 866, 867], "broken": [14, 27, 28, 29, 30, 868, 872], "permiss": [14, 27, 28, 29, 30, 821, 830], "conflict": [14, 27, 28, 29, 30, 38, 821, 822, 830, 843, 854], "behaviour": [14, 27, 28, 29, 30, 113, 116, 275, 627, 633, 819, 822, 824, 825, 826, 829, 831, 832, 834, 835, 838, 839, 840, 842, 843, 846, 847, 853], "system": [14, 27, 28, 29, 30, 48, 377, 447, 638, 687, 777, 814, 821, 822, 823, 827, 830, 831, 857, 866, 870, 872, 875, 877, 879], "recommend": [14, 27, 28, 29, 30, 269, 270, 283, 378, 455, 633, 648, 762, 765, 816, 821, 827, 828, 837, 840, 841, 865], "virtual": [14, 27, 28, 29, 30, 822, 843, 862, 875, 876], "pypa": [14, 27, 28, 29, 30], "venv": [14, 27, 28, 29, 30], "autofeatureextractor": [14, 32], "extractor": [14, 17, 19, 32, 48], "hug": [14, 32, 865], "face": [14, 32, 815, 821, 825, 836, 837, 841, 849, 851, 865, 872, 878], "arch_nam": [14, 32], "microsoft": [14, 32, 862, 865, 866, 872, 877, 879], "feature_extractor": [14, 32], "980130": 14, "9342": 14, "980177": 14, "609": 14, "980207": 14, "1518": 14, "351203": 14, "inputs_jax": [14, 32], "last_hidden_st": [14, 32], "jax_forward": [14, 32], "jit_appli": 14, "134": [14, 62, 638, 661, 680], "2x": [14, 32], "ipytest": 15, "load_breast_canc": 15, "autoconfig": 15, "sole": [15, 44, 838, 847, 871, 872, 873], "test_jax_gpu": 15, "xla_bridg": [15, 46], "get_backend": [15, 839], "test_torch_gpu": 15, "test_xgboost_gpu": 15, "capsi": 15, "load_diabet": 15, "target": [15, 17, 19, 25, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 48, 58, 81, 196, 378, 453, 454, 455, 456, 457, 458, 459, 460, 632, 772, 793, 795, 801, 814, 818, 821, 824, 827, 836, 837, 844, 845, 850, 854, 855, 856, 866, 867, 868, 870, 871, 872, 875, 877, 878], "xgb_model": 15, "xgbregressor": 15, "tree_method": 15, "caus": [15, 378, 455, 821, 822, 825, 827, 829, 830, 831, 833, 842, 844, 846, 857], "consol": [15, 576, 635, 822, 837, 846, 853, 858], "gpu_hist": 15, "captur": [15, 841, 846, 856, 873], "readouterr": 15, "err": 15, "tabular": 15, "pulsar": 15, "standard": [15, 57, 63, 66, 67, 71, 80, 89, 90, 94, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 149, 150, 156, 166, 169, 181, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 336, 337, 339, 373, 376, 377, 379, 388, 420, 450, 493, 497, 523, 615, 630, 631, 633, 635, 638, 640, 643, 644, 645, 646, 647, 648, 649, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 701, 703, 704, 705, 707, 708, 710, 711, 715, 738, 741, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 779, 792, 796, 807, 808, 814, 817, 824, 825, 826, 829, 831, 834, 838, 842, 845, 846, 847, 857, 860, 866, 868, 870, 871, 874, 875, 877], "extra": [15, 33, 75, 104, 123, 615, 629, 635, 826, 831, 833, 840, 842, 843, 844, 849, 851, 865, 866, 869, 874], "dimens": [15, 54, 58, 59, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 81, 82, 85, 86, 87, 88, 90, 91, 92, 94, 95, 101, 103, 104, 107, 114, 118, 142, 146, 147, 317, 328, 330, 331, 332, 333, 336, 337, 341, 342, 350, 357, 364, 370, 373, 374, 376, 377, 378, 379, 382, 383, 386, 388, 390, 392, 393, 395, 396, 397, 399, 404, 405, 409, 413, 414, 415, 416, 419, 420, 422, 423, 425, 427, 430, 439, 448, 453, 457, 463, 464, 465, 469, 475, 486, 487, 488, 489, 491, 493, 497, 502, 503, 504, 507, 511, 513, 516, 526, 528, 529, 530, 531, 532, 533, 546, 547, 548, 550, 557, 591, 595, 615, 627, 630, 635, 637, 638, 639, 640, 641, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 694, 695, 698, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 716, 717, 718, 744, 745, 746, 748, 750, 751, 752, 753, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 779, 789, 793, 796, 833, 835, 841, 843, 844, 846, 849, 851, 854], "load_data": 15, "standardscal": 15, "df": [15, 48], "delimit": [15, 854], "sc": 15, "fit_transform": 15, "117564": 15, "navig": [15, 818, 821, 822, 824, 836], "rerun": [15, 46], "436": 15, "48": [15, 44, 48, 57, 58, 80, 81, 82, 83, 90, 113, 223, 246, 288, 376, 396, 397, 398, 408, 414, 415, 418, 561, 616, 620, 627, 633, 635, 636, 638, 642, 648, 683, 720, 741, 760], "t4": 15, "tier": [15, 823], "reduc": [15, 58, 59, 63, 68, 71, 72, 75, 81, 82, 86, 91, 94, 95, 214, 336, 337, 357, 373, 374, 388, 528, 529, 530, 531, 532, 533, 547, 632, 635, 638, 645, 648, 649, 685, 745, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 807, 808, 830, 835, 843, 849, 851, 853, 865, 870, 874, 875, 876], "although": [15, 638, 686, 816, 826, 828, 829, 843, 849, 870, 872], "experi": [15, 21, 48, 814, 821, 835, 846, 852, 854, 857], "substanti": [15, 817, 822, 826, 831, 846, 862, 872], "stuff": 15, "201": [15, 80, 81, 226, 398, 633], "20x": 15, "ivyclassifi": 15, "106597": 15, "10967": 15, "96": [15, 44, 58, 60, 80, 81, 82, 90, 238, 259, 291, 361, 373, 376, 398, 546, 547, 620, 633, 635, 636, 638, 648, 683, 742, 760], "73": [15, 44, 57, 86, 288, 388, 524, 638, 644, 668, 741, 846], "852": [15, 637, 661], "449": 15, "47": [15, 44, 48, 57, 58, 63, 67, 80, 81, 82, 83, 85, 90, 230, 288, 376, 388, 396, 414, 415, 524, 546, 547, 620, 633, 635, 636, 637, 638, 644, 661, 676, 741, 742], "nevertheless": 15, "fall": [15, 46, 797, 820, 831, 850], "short": [15, 44, 58, 81, 424, 637, 662, 663, 820, 822, 831, 851, 855], "blaze": 15, "35": [15, 44, 52, 62, 63, 74, 80, 81, 85, 86, 90, 114, 229, 288, 376, 398, 408, 633, 637, 638, 645, 648, 661, 669, 676, 741, 749, 760], "surpass": 15, "remark": [15, 857], "artifici": 15, "simpli": [15, 23, 32, 33, 35, 44, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 376, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 633, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 688, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 814, 820, 821, 822, 826, 827, 828, 830, 831, 832, 833, 834, 836, 838, 839, 842, 843, 844, 846, 849, 851, 855, 856, 857, 859, 873, 878], "stack": [15, 25, 27, 28, 29, 30, 35, 44, 48, 58, 63, 65, 75, 81, 86, 88, 103, 146, 147, 330, 370, 377, 379, 430, 469, 470, 472, 481, 501, 580, 589, 612, 630, 635, 638, 640, 642, 670, 672, 673, 674, 675, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 692, 719, 729, 730, 793, 814, 819, 825, 842, 851, 868, 870, 877, 878], "x_doubl": 15, "vstack": [15, 58, 81, 379, 481], "y_doubl": 15, "235128": 15, "41": [15, 27, 28, 29, 30, 44, 46, 51, 57, 58, 63, 80, 81, 82, 85, 86, 114, 228, 236, 243, 274, 288, 376, 377, 384, 388, 396, 414, 419, 441, 514, 524, 541, 627, 633, 635, 638, 648, 668, 676, 766], "315": [15, 280, 633], "879": 15, "380": 15, "seem": [15, 820, 821, 849, 855, 856, 857, 872], "examin": 15, "600": [15, 48, 82, 85, 376, 400, 401, 554, 830], "conduct": [15, 876], "num_boosting_round": 15, "300": [15, 80, 82, 85, 284, 376, 400, 401, 554, 578, 633, 635, 638, 677, 846], "500": [15, 58, 81, 82, 85, 376, 377, 400, 401, 452, 554, 635], "ivy_elapsed_tim": 15, "xgb_elapsed_tim": 15, "ivy_tim": 15, "partial": [15, 58, 75, 81, 167, 168, 200, 201, 350, 373, 376, 377, 379, 388, 424, 439, 446, 486, 487, 488, 489, 530, 551, 552, 621, 631, 632, 635, 636, 778, 780, 794, 795, 822, 828, 849], "xgb_time": 15, "fivethirtyeight": 15, "legend": [15, 48, 820], "loc": [15, 869], "best": [15, 46, 573, 635, 808, 812, 814, 815, 818, 819, 820, 821, 822, 824, 830, 831, 835, 836, 845, 846, 847, 858, 875, 876], "xlabel": 15, "ylabel": 15, "obviou": [15, 854, 872], "trend": 15, "gap": 15, "train_siz": [15, 46], "widen": 15, "impress": 15, "outcom": [15, 58, 81, 338, 350, 373, 808], "tend": 15, "95933": 15, "9874": 15, "105807": 15, "wrap": [15, 23, 25, 32, 33, 35, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 376, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 589, 592, 593, 594, 595, 596, 598, 600, 601, 612, 614, 616, 617, 620, 622, 623, 624, 625, 635, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 688, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 774, 814, 824, 825, 826, 827, 829, 830, 831, 832, 834, 835, 838, 839, 842, 843, 846, 851, 853, 856, 857, 859, 865, 866, 868, 872, 873, 878, 879], "balanc": 15, "breast": 15, "cancer": 15, "return_x_i": 15, "171": [15, 63, 638, 676, 777], "perfectli": [15, 779, 863], "align": [15, 58, 75, 81, 376, 377, 412, 428, 637, 666, 808, 817, 821, 830, 843, 845, 851, 853, 859, 878], "timm": [16, 17, 21, 32, 33, 814, 866], "focu": [17, 30, 820, 841, 870, 871, 874, 879], "mlp": 17, "mixer": 17, "onli": [17, 19, 32, 33, 38, 44, 46, 48, 50, 53, 54, 57, 58, 63, 65, 67, 75, 77, 80, 81, 86, 88, 90, 98, 101, 103, 119, 139, 179, 180, 209, 269, 270, 275, 281, 313, 343, 350, 370, 373, 376, 377, 379, 383, 388, 399, 412, 422, 431, 436, 450, 452, 463, 464, 465, 475, 509, 510, 526, 540, 627, 630, 631, 632, 633, 635, 637, 638, 640, 642, 644, 645, 647, 648, 664, 678, 685, 688, 689, 704, 707, 719, 720, 726, 727, 729, 730, 731, 736, 737, 740, 741, 742, 745, 746, 756, 762, 765, 775, 777, 778, 780, 793, 797, 807, 812, 814, 815, 816, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 838, 839, 841, 842, 843, 844, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 861, 865, 866, 871, 872, 873, 878, 879], "retriev": [17, 19, 23, 536, 558, 583, 635, 822, 843], "mlp_encod": [17, 32, 33, 814, 866], "create_model": [17, 32, 33, 814, 866], "mixer_b16_224": [17, 32, 33, 814, 866], "nois": [17, 19, 32, 33, 814, 865, 866], "randn": [17, 19, 32, 33, 379, 497, 814, 866], "tf_mlp_encod": [17, 32, 33], "output_torch": [17, 19], "output_tf": [17, 19], "output_dens": [17, 32, 33, 814], "dens": [17, 30, 32, 33, 317, 370, 793, 814], "unit": [17, 32, 33, 58, 74, 81, 98, 99, 111, 113, 114, 115, 116, 117, 118, 119, 296, 297, 300, 304, 306, 307, 310, 311, 312, 368, 505, 506, 627, 814, 821, 825, 831, 843, 844, 846, 857, 873, 876], "mention": [17, 19, 32, 33, 38, 820, 821, 822, 826, 833, 838, 839, 842, 843, 846, 849, 862, 867, 872], "fulli": [17, 19, 21, 22, 25, 30, 32, 33, 46, 58, 81, 388, 530, 793, 814, 826, 831, 838, 841, 849, 851, 852, 853, 854, 855, 856, 857, 863, 867, 870, 871, 872, 878, 879], "ground": [17, 19, 378, 454, 772, 774, 785, 818, 836, 843, 846, 861], "ret": [17, 19, 32, 33, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 432, 437, 439, 442, 444, 447, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 725, 726, 727, 728, 729, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 778, 779, 780, 790, 795, 797, 802, 808, 810, 814, 831, 832, 834, 835, 841, 842, 843, 844, 847, 851, 856, 866], "eagertensor": [17, 23, 44, 802, 844], "deepmind": [18, 863], "perceiverio": [18, 863], "backbon": [18, 46, 814, 851, 854], "TO": [18, 20, 31], "efficientnet": 19, "eff_encod": [19, 814], "efficientnet_v2": [19, 814], "efficientnetv2b0": [19, 814], "storag": [19, 46, 47, 854, 862], "googleapi": [19, 46, 47], "efficientnetv2": 19, "b0_notop": 19, "h5": [19, 75], "24274472": 19, "0u": 19, "torch_eff_encod": [19, 814], "modes_to_trac": 19, "1280": [19, 546, 635, 814], "welcom": [21, 47, 814, 815, 821, 822, 823, 845], "varieti": [21, 825, 830, 831, 832, 846, 848, 868, 870, 874, 875, 878, 879], "organ": [21, 826, 829, 839, 843, 845, 847, 859, 862], "main": [21, 33, 54, 58, 63, 81, 86, 133, 146, 147, 148, 314, 329, 330, 370, 377, 379, 428, 474, 630, 638, 671, 672, 692, 814, 817, 820, 821, 822, 823, 825, 828, 829, 836, 840, 842, 870, 872, 873, 878], "exactli": [21, 25, 35, 44, 45, 49, 291, 633, 820, 829, 830, 831, 832, 833, 835, 846, 849, 861, 863], "rush": [21, 863], "jump": [21, 844], "straight": [21, 814, 830, 843, 846, 853], "quickstart": [21, 814], "introduct": [21, 23, 30, 32, 33, 872], "point": [21, 30, 55, 57, 58, 63, 67, 69, 71, 78, 80, 81, 86, 90, 94, 127, 128, 129, 131, 133, 136, 143, 144, 149, 153, 166, 170, 174, 181, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 254, 255, 256, 257, 262, 263, 264, 265, 266, 274, 276, 277, 279, 281, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 313, 314, 316, 336, 337, 354, 355, 358, 360, 370, 373, 376, 377, 378, 383, 388, 391, 400, 401, 402, 420, 430, 450, 454, 509, 510, 511, 512, 513, 523, 524, 525, 533, 628, 630, 631, 633, 638, 644, 645, 646, 647, 648, 668, 670, 673, 674, 675, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 692, 695, 741, 742, 748, 750, 751, 752, 753, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 802, 803, 812, 818, 820, 821, 822, 825, 826, 828, 830, 831, 833, 834, 836, 838, 842, 843, 846, 847, 849, 851, 853, 854, 863, 865, 878], "showcas": [21, 814], "real": [21, 29, 57, 58, 71, 80, 81, 94, 103, 113, 116, 119, 143, 144, 221, 222, 223, 224, 226, 227, 228, 229, 230, 239, 241, 242, 244, 246, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 271, 274, 276, 277, 279, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 336, 337, 343, 344, 345, 355, 373, 376, 377, 399, 420, 421, 430, 431, 627, 630, 633, 638, 645, 648, 673, 674, 675, 679, 686, 688, 689, 692, 695, 748, 761, 763, 764, 765, 766, 829, 874], "world": [21, 29, 822, 874], "beginn": [21, 815, 872], "got": [21, 44, 835], "cover": [21, 32, 58, 81, 376, 413, 414, 415, 820, 825, 826, 828, 831, 833, 834, 839, 840, 846, 849, 850], "familiar": [21, 22, 23, 820, 821], "concept": [21, 22, 23], "turn": [21, 22, 25, 35, 62, 85, 98, 99, 400, 401, 402, 637, 660, 793, 821, 828, 829, 832, 833, 843, 846, 863], "unus": [21, 22, 25, 833, 842], "part": [21, 22, 25, 54, 57, 58, 80, 81, 86, 103, 113, 116, 119, 146, 147, 148, 254, 258, 281, 329, 330, 356, 370, 373, 376, 377, 379, 388, 420, 431, 485, 533, 627, 630, 633, 638, 674, 675, 774, 820, 821, 822, 823, 825, 828, 831, 837, 839, 842, 843, 846, 847, 849, 851, 852, 856, 857, 865, 866, 867, 870, 872, 877, 878, 879], "lazi": [21, 22, 25, 28, 35, 38, 39, 50], "decor": [21, 22, 27, 29, 30, 38, 50, 540, 635, 777, 779, 785, 818, 825, 826, 829, 831, 832, 836, 839, 842, 843, 844, 849], "kornia": [21, 22, 29, 32, 33, 46, 50, 814, 866], "roundup": 23, "indep": [23, 32], "proof": [23, 32], "delv": [23, 33, 814], "theori": [23, 816, 828], "esenti": [23, 32], "abstract": [23, 32, 33, 792, 797, 814, 829, 831, 842, 843, 846, 849, 855, 861, 870, 872, 874, 875, 879], "quirk": [23, 32], "perk": [23, 32, 814, 826, 829], "under": [23, 32, 33, 58, 378, 457, 458, 807, 814, 820, 821, 824, 825, 832, 833, 834, 837, 843, 844, 846, 849, 850, 851, 854, 856, 857, 865, 866, 872, 875, 879], "hood": [23, 32, 33, 814, 824, 832, 833, 837, 843, 846, 849, 850, 851, 854, 856, 865, 866, 879], "appropi": 23, "string": [23, 32, 33, 48, 58, 59, 62, 75, 81, 85, 151, 152, 164, 171, 193, 194, 195, 196, 197, 199, 208, 215, 216, 220, 376, 377, 379, 419, 423, 431, 485, 496, 525, 544, 631, 632, 635, 637, 638, 650, 651, 652, 653, 655, 657, 659, 675, 772, 774, 778, 807, 808, 827, 828, 830, 831, 832, 835, 843, 851, 854], "simplest": [23, 821, 833, 846, 849], "interact": [23, 32, 47, 50, 820, 871, 872, 877], "submodul": [23, 32, 46, 48, 103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 820, 821, 822, 825, 828, 830, 832, 836, 839, 840, 846, 850, 851, 855, 859], "likewis": [23, 28, 32, 39, 822, 829, 831, 834, 838, 839, 843, 849, 854, 865, 866, 878], "nativearrai": [23, 32, 33, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 71, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 137, 138, 139, 140, 141, 142, 144, 146, 147, 150, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 176, 178, 180, 181, 187, 197, 198, 214, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 323, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 524, 525, 526, 527, 535, 538, 539, 541, 542, 546, 547, 548, 550, 553, 554, 555, 556, 557, 559, 561, 562, 563, 566, 569, 570, 572, 577, 578, 579, 582, 591, 592, 593, 594, 595, 596, 598, 600, 601, 603, 614, 616, 617, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 726, 727, 728, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 798, 826, 829, 833, 835, 838, 839, 840, 842, 843, 847, 848, 851, 853, 859], "alia": [23, 32, 336, 337, 373, 628, 820, 843, 864, 867], "lastli": [23, 32, 826], "subclass": [23, 32, 33, 840, 843, 849, 866], "dict": [23, 32, 33, 46, 50, 53, 59, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 126, 135, 137, 142, 144, 150, 154, 156, 167, 168, 169, 173, 174, 181, 197, 200, 201, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 326, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 370, 379, 399, 400, 401, 402, 420, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 485, 491, 493, 494, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 536, 538, 539, 541, 542, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 573, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 625, 629, 631, 632, 635, 642, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 719, 720, 722, 725, 726, 727, 728, 730, 731, 732, 736, 737, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 774, 775, 790, 793, 795, 802, 808, 826, 829, 854, 855, 859, 865, 866, 867], "recurs": [23, 32, 33, 46, 48, 53, 75, 76, 167, 168, 200, 201, 377, 449, 551, 552, 558, 631, 632, 635, 642, 719, 720, 723, 729, 730, 731, 772, 821, 825, 828, 829, 836, 839, 842, 855, 857], "fashion": [23, 779, 846, 866], "native_arrai": [23, 32, 33, 54, 55, 57, 77, 79, 80, 81, 82, 86, 93, 111, 114, 137, 140, 142, 144, 150, 153, 154, 155, 156, 164, 169, 176, 198, 207, 215, 231, 235, 240, 241, 242, 244, 248, 252, 260, 261, 269, 274, 277, 280, 283, 288, 336, 337, 364, 373, 378, 379, 459, 485, 491, 495, 535, 538, 565, 566, 569, 600, 627, 630, 631, 632, 633, 635, 637, 638, 639, 640, 644, 645, 648, 649, 651, 652, 659, 667, 670, 674, 675, 680, 681, 685, 689, 690, 692, 695, 697, 699, 700, 707, 739, 748, 757, 763, 766, 768, 774, 784, 802, 818, 836, 844, 846], "data_class": [23, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 396, 397, 546, 550, 688, 713], "low": [23, 32, 35, 51, 58, 62, 67, 81, 85, 90, 376, 419, 423, 637, 644, 650, 651, 652, 653, 655, 657, 659, 740, 742, 779, 829, 835, 842, 843, 849, 851, 868, 870, 872, 873, 874, 876, 878], "c": [23, 32, 38, 47, 48, 54, 58, 59, 60, 62, 65, 71, 77, 78, 80, 81, 82, 83, 85, 86, 88, 92, 94, 98, 99, 117, 128, 129, 139, 142, 166, 169, 224, 235, 241, 242, 262, 263, 265, 274, 277, 285, 292, 376, 377, 379, 382, 388, 390, 391, 392, 393, 404, 409, 425, 427, 429, 430, 432, 444, 463, 464, 465, 475, 493, 497, 502, 503, 504, 507, 525, 538, 546, 547, 548, 549, 557, 561, 562, 592, 601, 616, 617, 620, 622, 623, 624, 627, 630, 631, 633, 635, 636, 637, 638, 640, 642, 645, 646, 648, 651, 652, 653, 654, 655, 656, 658, 673, 675, 677, 707, 711, 719, 722, 726, 727, 728, 730, 731, 736, 737, 748, 753, 759, 760, 765, 767, 796, 807, 808, 815, 821, 824, 827, 828, 829, 833, 839, 841, 850, 851, 852, 854, 857, 859, 860, 862, 863, 866, 868, 872, 876, 877, 879], "fundament": [23, 32, 830, 843, 849, 851, 861, 872], "signatur": [23, 32, 379, 388, 485, 523, 831, 832, 833, 834, 838, 842, 846, 847, 849, 862, 869, 878], "matmul": [23, 32, 33, 49, 63, 86, 377, 447, 615, 635, 638, 688, 827, 846, 847, 851], "to_n": [23, 32, 33, 44, 53, 76, 851], "jaxlib": [23, 29, 47, 802, 821, 826, 831, 832, 838, 847, 851, 853], "xla_extens": [23, 29, 802, 826, 831, 832, 838, 847, 851, 853], "arrayimpl": [23, 29, 802], "disabl": [23, 32, 58, 81, 379, 493, 795, 812, 828], "array_mod": [23, 32, 579, 603, 635, 848], "set_array_mod": [23, 32, 603, 635, 848], "ultim": [23, 32, 865], "sigmoid": [23, 32, 33, 44, 52, 58, 74, 81, 302, 368, 383, 509, 627, 789, 851, 854, 855], "z": [23, 32, 33, 45, 46, 54, 57, 58, 59, 63, 64, 67, 69, 71, 77, 80, 81, 82, 86, 87, 88, 90, 94, 103, 104, 138, 139, 141, 142, 202, 224, 225, 229, 231, 234, 236, 241, 252, 253, 256, 257, 258, 260, 261, 266, 268, 270, 271, 272, 273, 281, 290, 301, 302, 336, 337, 339, 368, 373, 378, 388, 454, 456, 457, 458, 459, 460, 466, 470, 481, 522, 523, 526, 533, 538, 550, 553, 554, 561, 562, 578, 591, 593, 594, 602, 615, 630, 632, 633, 635, 638, 639, 640, 642, 644, 645, 646, 648, 669, 678, 683, 684, 688, 695, 697, 698, 699, 700, 722, 726, 728, 736, 740, 741, 742, 745, 750, 760, 761, 763, 764, 765, 792, 814, 827, 829, 832, 833, 851, 853, 865], "divid": [23, 28, 32, 33, 49, 57, 58, 59, 65, 75, 80, 81, 88, 103, 104, 248, 382, 455, 502, 503, 504, 507, 593, 633, 635, 640, 709, 826, 829, 833, 837, 846], "exp": [23, 32, 33, 57, 58, 80, 81, 117, 119, 246, 266, 279, 302, 368, 376, 378, 404, 409, 458, 627, 633, 638, 686, 841, 843], "entir": [23, 32, 33, 35, 48, 58, 71, 72, 75, 81, 82, 94, 95, 214, 244, 246, 286, 287, 336, 337, 373, 376, 379, 388, 400, 401, 402, 485, 526, 559, 632, 633, 648, 649, 761, 762, 763, 764, 765, 766, 767, 768, 769, 793, 808, 814, 820, 821, 822, 825, 826, 829, 831, 833, 835, 842, 843, 844, 846, 849, 851, 854, 855, 856, 857, 862, 863, 866, 872, 878, 879], "congratul": [23, 29], "independ": [23, 33, 58, 67, 81, 90, 224, 241, 274, 284, 382, 383, 507, 509, 633, 638, 644, 669, 687, 739, 814, 825, 831, 833, 840, 851, 856, 866, 870], "div": [24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 867], "sub": [24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 58, 63, 65, 75, 76, 80, 81, 82, 86, 88, 104, 273, 377, 379, 388, 431, 471, 480, 500, 529, 530, 558, 635, 638, 640, 641, 672, 692, 709, 716, 717, 718, 820, 822, 824, 829, 835, 843, 844, 846, 853, 854, 855, 867, 868], "with_numpi": 24, "reproduc": [24, 49, 62, 85, 637, 660, 777, 778, 779, 780, 785, 818, 825, 836], "x_": [24, 34, 99, 285, 633, 867], "66391283": 24, "12516928": 24, "38367081": 24, "03102401": 24, "76419425": 24, "52797794": 24, "90346956": 24, "61316347": 24, "27585283": 24, "66309303": 24, "ivy_repo": 24, "sever": [24, 25, 34, 35, 37, 38, 39, 58, 81, 98, 376, 377, 390, 391, 392, 393, 445, 777, 821, 822, 847, 857, 870, 876], "pro": [24, 25, 26, 34, 35, 36, 37, 38, 39], "pick": [25, 35, 792], "trigger": [25, 35, 795, 820, 837], "unif": [25, 27, 28, 35, 37, 815, 853, 862, 868, 878], "55563945": 25, "65538704": 25, "14150524": 25, "46951997": 25, "30220294": 25, "14739668": 25, "57017946": 25, "91962677": 25, "51029003": 25, "59644395": 25, "constitu": [25, 35, 75, 856], "5556394": 25, "655387": 25, "1415051": 25, "4695197": 25, "3022028": 25, "1473966": 25, "5701794": 25, "91962665": 25, "51028997": 25, "5964439": 25, "985": 25, "000": [25, 80, 275, 777, 818, 830, 836], "On": [25, 32, 33, 821, 831, 832, 837, 843, 846, 849, 852, 856], "hand": [25, 57, 377, 447, 777, 825, 831, 832, 837, 839, 846, 857], "learnt": [26, 36], "ivy_norm": 26, "jax_norm": [26, 32, 33], "wider": [26, 36, 586, 609, 635, 831, 848, 878], "avoid": [26, 36, 38, 58, 65, 81, 241, 246, 248, 264, 274, 378, 379, 382, 455, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 500, 502, 503, 504, 540, 556, 558, 581, 586, 609, 633, 635, 640, 703, 704, 705, 707, 709, 710, 712, 714, 779, 780, 821, 822, 827, 828, 829, 830, 831, 835, 840, 843, 846, 847, 848, 849, 872], "act": [26, 36, 58, 81, 299, 364, 374, 822, 833, 848, 857, 879], "shorthand": [26, 36, 38, 846], "pair": [26, 36, 46, 58, 62, 81, 85, 229, 248, 321, 363, 370, 373, 376, 410, 419, 421, 423, 633, 637, 638, 650, 651, 652, 653, 655, 657, 659, 667, 669, 808], "93968587": 26, "26075466": 26, "22723222": 26, "06276492": 26, "47426987": 26, "72835908": 26, "71737559": 26, "50411096": 26, "65419174": 26, "15576624": 26, "implic": [26, 36, 37, 40, 829], "fw": [27, 28, 29, 30, 62, 85, 388, 523, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 774, 821, 846], "mxnet": [27, 28, 29, 30, 210, 632, 802, 820, 821, 862, 879], "einop": [27, 28, 29, 30, 46, 48, 51, 59, 82, 546, 547, 548, 635, 831, 862], "miniconda": [27, 28, 29, 30], "multienv": [27, 28, 29, 30], "site": [27, 28, 29, 30, 873], "psutil": [27, 28, 29, 30, 46, 48, 51], "termcolor": [27, 28, 29, 30, 46, 48, 51, 75, 104], "colorama": [27, 28, 29, 30, 46, 48], "535": [27, 28, 29, 30, 52, 74, 119, 627, 835], "diskcach": [27, 28, 29, 30, 46], "auth": [27, 28, 29, 30], "urllib3": [27, 28, 29, 30, 46], "pyvi": [27, 28, 29, 30, 32, 33], "dill": [27, 28, 29, 30, 46], "astunpars": [27, 28, 29, 30], "cloudpickl": [27, 28, 29, 30], "gast": [27, 28, 29, 30], "wheel": [27, 28, 29, 30, 46, 48, 51, 861], "six": [27, 28, 29, 30, 46, 51, 821, 849], "cachetool": [27, 28, 29, 30], "pyasn1": [27, 28, 29, 30], "rsa": [27, 28, 29, 30], "jsonpickl": [27, 28, 29, 30], "charset": [27, 28, 29, 30, 46], "idna": [27, 28, 29, 30, 46], "certifi": [27, 28, 29, 30, 46], "2017": [27, 28, 29, 30, 46, 637, 664], "jedi": [27, 28, 29, 30], "inlin": [27, 28, 29, 30, 828], "prompt": [27, 28, 29, 30, 820, 822], "toolkit": [27, 28, 29, 30, 872, 873, 879], "pygment": [27, 28, 29, 30], "traitlet": [27, 28, 29, 30], "exceptiongroup": [27, 28, 29, 30], "pexpect": [27, 28, 29, 30], "parso": [27, 28, 29, 30], "ptyprocess": [27, 28, 29, 30], "wcwidth": [27, 28, 29, 30], "asttoken": [27, 28, 29, 30], "pure": [27, 28, 29, 30, 38, 48, 834, 838, 843, 849, 853, 856, 857, 872, 878, 879], "lazili": [27, 28, 29, 32, 33, 37, 39, 50, 814, 865, 866, 867], "actual": [27, 37, 818, 822, 824, 830, 836, 839, 840, 842, 843, 844, 846, 849, 850, 855, 857, 873, 878], "occur": [27, 32, 33, 37, 50, 55, 57, 69, 78, 80, 92, 156, 275, 291, 631, 633, 645, 646, 745, 746, 750, 751, 752, 753, 825, 830, 832, 835, 848], "altern": [27, 37, 47, 58, 81, 86, 98, 99, 335, 343, 344, 345, 349, 351, 352, 353, 354, 356, 357, 358, 362, 363, 373, 820, 821, 828, 842, 854, 875], "assum": [27, 28, 37, 38, 39, 54, 57, 58, 59, 62, 63, 64, 80, 81, 82, 85, 86, 87, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 314, 330, 336, 337, 339, 342, 360, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 445, 447, 485, 493, 497, 523, 526, 553, 557, 559, 561, 570, 592, 601, 625, 630, 631, 633, 635, 636, 637, 638, 639, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 793, 807, 821, 825, 827, 830, 831, 834, 844, 846, 849, 853, 854, 857], "201733": 27, "slowli": [27, 37], "norm": [27, 37, 38, 58, 59, 63, 81, 82, 86, 97, 98, 376, 377, 398, 399, 403, 404, 405, 408, 409, 410, 420, 421, 427, 431, 505, 506, 508, 541, 542, 563, 635, 638, 679, 695, 738, 793, 797, 847], "slow": [27, 37, 816, 821, 828], "34431235": [27, 28], "51129461": [27, 28], "06686894": [27, 28], "36452447": [27, 28], "98795534": [27, 28], "15493582": [27, 28], "91630631": [27, 28], "41939619": [27, 28], "78909753": [27, 28], "19475674": [27, 28], "norm_trac": 27, "norm_tran": [27, 37], "know": [27, 28, 37, 38, 39, 69, 646, 750, 751, 752, 753, 814, 816, 820, 822, 832, 840, 844, 846, 849, 863, 867, 873], "07": [28, 46, 48, 60, 64, 80, 83, 87, 90, 229, 262, 265, 266, 285, 376, 408, 606, 616, 617, 619, 620, 621, 622, 633, 635, 636, 639, 698, 699, 741, 794, 797, 855], "981554": 28, "happen": [28, 32, 33, 293, 633, 814, 821, 822, 823, 832, 842, 846, 854, 863, 865, 866], "wherea": [28, 39, 81, 376, 422, 822, 826, 829, 831, 832, 833, 838, 839, 846, 856, 869], "subtract": [28, 32, 33, 57, 80, 103, 104, 135, 379, 485, 630, 633, 826, 829, 833], "often": [29, 58, 378, 453, 819, 825, 835, 838, 839, 843, 846, 857, 863, 873, 876, 879], "fortun": [29, 30, 825], "everyth": [29, 47, 807, 814, 820, 821, 822, 823, 824, 830, 833, 842, 843, 844, 846, 852, 857, 858, 863], "practic": [29, 822, 827, 830, 843, 845, 875], "jax_kornia": [29, 32, 33, 814, 866], "000000000034": [29, 32, 33, 814, 866], "raw_img": [29, 32, 33, 814, 866], "sharp": [29, 32, 33, 814], "prefer": [29, 32, 33, 248, 633, 821, 829, 835, 836, 840, 843, 858, 872], "whole": [30, 58, 81, 379, 382, 492, 505, 506, 508, 822, 828, 837], "full": [30, 58, 63, 81, 85, 86, 98, 99, 101, 166, 253, 261, 324, 325, 326, 327, 328, 370, 377, 378, 379, 450, 451, 457, 458, 486, 489, 580, 589, 604, 612, 630, 631, 633, 635, 637, 638, 652, 654, 655, 656, 658, 681, 685, 687, 688, 778, 785, 814, 821, 822, 828, 831, 834, 835, 838, 839, 843, 846, 849, 851, 857, 862, 863, 870, 872, 878], "complex": [30, 32, 33, 46, 52, 57, 58, 63, 71, 74, 78, 80, 81, 86, 94, 111, 112, 113, 114, 115, 116, 117, 118, 119, 143, 144, 159, 173, 182, 188, 221, 222, 223, 224, 225, 226, 227, 230, 238, 239, 241, 242, 244, 246, 254, 255, 256, 257, 258, 262, 263, 264, 265, 274, 276, 277, 279, 281, 284, 285, 286, 287, 288, 291, 292, 296, 301, 302, 304, 339, 344, 345, 368, 373, 376, 377, 388, 399, 410, 420, 421, 425, 430, 431, 432, 443, 445, 531, 532, 593, 594, 627, 630, 631, 633, 635, 638, 645, 648, 673, 674, 675, 679, 686, 688, 690, 692, 695, 748, 763, 764, 766, 778, 789, 808, 817, 820, 823, 828, 831, 833, 840, 843, 846, 847, 849, 854, 855, 856, 857, 859, 866, 868, 870, 872, 874, 878, 879], "neccessari": 30, "set_random_se": [30, 49], "301436": 30, "_c": 30, "0x7f252c392390": 30, "flatten": [30, 32, 33, 46, 48, 51, 58, 59, 63, 65, 68, 69, 81, 82, 86, 88, 91, 92, 341, 357, 373, 377, 379, 388, 428, 474, 484, 488, 493, 494, 497, 499, 521, 528, 529, 530, 531, 532, 533, 546, 550, 635, 638, 640, 645, 646, 676, 683, 695, 701, 706, 708, 745, 746, 750, 751, 752, 753, 772, 774, 814, 842, 849], "keyword": [30, 32, 33, 48, 50, 53, 54, 58, 75, 81, 104, 140, 275, 376, 379, 388, 424, 485, 523, 537, 540, 573, 602, 630, 633, 635, 638, 642, 648, 689, 725, 766, 772, 774, 778, 794, 795, 807, 820, 826, 829, 831, 832, 840, 842, 843, 844, 846, 847, 849, 854, 865, 866, 867], "input_arrai": [30, 32, 33, 842], "torch_model": [30, 32, 33, 50], "159": [30, 74, 111, 627, 637, 661], "thank": [30, 854, 862], "fledg": [30, 821, 851, 852], "output_arrai": [30, 32, 33, 58, 455], "0893": 30, "1504": 30, "1372": 30, "0991": 30, "0867": 30, "0851": 30, "0911": 30, "0804": 30, "0926": 30, "0881": 30, "softmaxbackward0": 30, "furthermor": 30, "relat": [30, 248, 633, 814, 816, 819, 820, 821, 822, 828, 835, 843, 846, 847, 848, 849, 866, 875], "regress": [31, 872, 879], "checkout": [32, 47, 822, 825, 846], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 32, "theoret": 32, "aspect": [32, 33, 815, 841, 854, 872], "easiest": [32, 814, 816, 821, 858], "defer": [32, 33, 820, 826, 831, 832, 839, 842, 843, 846, 878], "similarli": [32, 45, 140, 148, 224, 329, 336, 337, 370, 373, 630, 633, 827, 831, 843, 849, 853, 878], "essenc": [32, 873, 878], "becom": [32, 58, 81, 98, 347, 373, 379, 465, 640, 700, 802, 822, 823, 829, 831, 833, 835, 842, 857, 861, 863, 865], "slide": [32, 58, 62, 81, 85, 376, 395, 396, 397, 413, 414, 415, 416, 419, 423, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 793], "regressor": [32, 33], "input_dim": [32, 33, 47], "output_dim": [32, 33, 47], "linear0": [32, 33, 44, 854, 855], "linear1": [32, 33, 44, 854, 855], "adam": [32, 33, 44, 48, 60, 83, 537, 616, 617, 622, 635, 636, 797, 854, 855, 856, 872], "n_training_exampl": [32, 33], "2000": [32, 33, 81, 315, 370], "random_norm": [32, 33, 62, 63, 67, 85, 86, 90, 546, 635, 637, 638, 644, 652, 654, 655, 656, 658, 659, 663, 688], "linspac": [32, 33, 54, 77, 127, 630, 838, 849, 851, 879], "execute_with_gradi": [32, 33, 44, 48, 636, 854, 855, 856, 857], "lambda": [32, 33, 49, 51, 81, 124, 126, 298, 308, 545, 558, 618, 619, 621, 626, 629, 635, 636, 638, 642, 674, 726, 727, 731, 820, 839, 840, 841, 844, 849, 851, 854], "2d": [32, 33, 48, 58, 81, 98, 314, 370, 376, 377, 379, 388, 391, 392, 400, 401, 443, 450, 464, 474, 523, 793, 812, 843, 849], "5f": [32, 33], "nonetheless": [32, 33], "gc": [32, 33, 558, 635], "decompos": [32, 33, 58, 81, 98, 101, 324, 325, 326, 327, 328, 349, 356, 370, 373, 377, 441, 446, 449, 452, 843, 856], "said": [32, 33, 779, 847, 863, 865], "otherwis": [32, 33, 50, 53, 54, 55, 57, 58, 59, 62, 63, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 127, 129, 130, 135, 137, 138, 139, 142, 144, 150, 153, 154, 156, 157, 159, 160, 161, 162, 163, 172, 176, 180, 181, 197, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 310, 311, 312, 314, 324, 325, 326, 327, 328, 335, 336, 337, 338, 339, 341, 342, 343, 351, 352, 358, 360, 362, 363, 364, 368, 370, 373, 376, 377, 379, 382, 395, 396, 397, 400, 401, 402, 420, 433, 448, 450, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 471, 473, 475, 476, 477, 484, 491, 493, 494, 495, 497, 500, 502, 504, 505, 506, 508, 510, 522, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 570, 577, 578, 592, 593, 594, 596, 598, 600, 601, 602, 614, 618, 620, 625, 629, 630, 631, 632, 633, 635, 636, 637, 638, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 660, 661, 662, 664, 667, 668, 669, 670, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 688, 692, 694, 695, 697, 698, 699, 700, 703, 704, 705, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 732, 739, 740, 741, 742, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 777, 778, 793, 795, 796, 802, 814, 822, 826, 829, 831, 832, 833, 839, 840, 842, 846, 851, 858, 865, 866], "x0": [32, 33, 51, 82, 538, 635, 833], "normalize_trac": [32, 33], "html": [32, 33, 47, 57, 58, 80, 81, 148, 156, 244, 254, 255, 270, 329, 336, 337, 370, 373, 376, 379, 388, 420, 493, 523, 630, 631, 633, 638, 640, 648, 686, 687, 715, 765, 834, 862], "fname": [32, 33, 49, 51, 795, 854], "anticip": [32, 33], "addition": [32, 33, 829, 842, 843, 878], "normalize_native_comp": [32, 33], "return_backend_compiled_fn": 32, "immedi": [32, 33, 812, 814, 820, 821], "built": [32, 33, 38, 46, 48, 51, 127, 630, 793, 794, 795, 821, 822, 828, 829, 846, 852, 858, 865, 871, 872, 876], "eager_graph": [32, 33, 814, 865, 866], "lazy_graph": [32, 33, 814, 865, 866], "thought": [32, 33, 821, 822, 838, 862, 870], "matter": [32, 33, 38, 833, 861], "haven": [32, 33, 38, 858, 872], "jax_out": [32, 33], "ideal": [32, 33, 830, 831, 843, 849, 854], "worth": [32, 33], "differenti": [32, 33, 296, 366, 367, 368, 375, 872], "chosen": [32, 33, 51, 101, 127, 229, 630, 633, 645, 749, 820, 830, 843], "plai": [32, 33, 378, 457, 814, 817, 821, 823, 826, 832, 836, 843, 846, 856, 872, 875], "role": [32, 33, 814, 817, 822, 823, 832, 843, 852, 873, 875, 879], "dl": [32, 33], "effortlessli": [32, 33], "previous": [32, 33, 604, 635, 802, 820, 821, 827, 839, 841, 846, 851], "default_devic": [32, 33, 207, 210, 211, 212, 218, 219, 632, 832, 835, 836], "as_n": [32, 33, 55, 56, 75, 78, 79, 159, 160, 161, 162, 163, 164, 170, 197, 198, 631, 632, 831], "certainli": [32, 33, 862, 878], "unnecessari": [32, 33, 843], "extend": [32, 33, 58, 81, 379, 388, 485, 526, 827, 828, 831, 834, 835, 838, 843, 847, 857, 869, 872, 878], "infrastructur": [32, 33, 868, 874, 875], "least": [32, 57, 58, 63, 80, 81, 241, 259, 274, 376, 379, 388, 404, 409, 463, 464, 465, 474, 476, 523, 633, 638, 645, 678, 748, 822, 826, 830, 831, 832, 833, 839, 842, 846, 866], "coco": 32, "seamlessli": [33, 846], "therefor": [33, 38, 54, 57, 58, 63, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 180, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 329, 330, 336, 337, 339, 342, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 478, 485, 486, 488, 493, 497, 498, 523, 526, 530, 539, 547, 548, 553, 557, 559, 561, 563, 577, 592, 596, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 820, 822, 825, 826, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 842, 843, 844, 846, 847, 849, 851, 853, 855, 857, 861, 869, 872, 878], "wide": [33, 814, 822, 846, 870, 872], "plenti": 33, "resourc": [33, 815, 820, 821, 830], "visit": [33, 820, 821, 822, 830], "page": [33, 814, 820, 821, 822, 828, 830, 836, 852, 853, 856, 858, 867, 880], "newli": [34, 35, 47, 49, 55, 78, 153, 540, 631, 635, 822, 830, 842, 846], "randon": [34, 35, 37, 38, 39], "mean_": 34, "std_": 34, "detect": [34, 38, 57, 75, 80, 256, 633, 642, 719, 730, 820, 821, 827, 829, 830, 837, 846, 854, 855], "inspect": [34, 38, 536, 635], "__": [34, 35, 36, 37, 38, 39, 75, 833, 854], "script": [35, 814, 821, 822, 825, 830, 833, 851, 857, 872], "comp": 35, "low_level": 35, "chain": [35, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 169, 173, 174, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 400, 401, 402, 420, 453, 454, 455, 456, 457, 458, 459, 460, 469, 470, 491, 493, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 641, 642, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 716, 717, 721, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 798, 826, 829, 841, 843, 855, 856, 857, 872], "un": [35, 171, 631, 831, 851], "partial_comp": 35, "time_funct": 35, "express": [35, 57, 58, 80, 81, 99, 222, 226, 228, 229, 238, 240, 280, 286, 291, 360, 373, 633, 799, 808, 834, 843, 851, 856, 872, 873], "maxim": [35, 839, 842, 851, 869, 870, 874, 875, 876], "conclud": [36, 847], "norm_comp": [37, 38], "global": [37, 38, 48, 59, 75, 82, 104, 159, 160, 161, 162, 163, 212, 213, 214, 583, 584, 587, 593, 594, 606, 607, 610, 631, 632, 635, 785, 796, 802, 821, 826, 827, 830, 831, 832, 835, 839, 843, 851, 872], "b": [38, 52, 57, 58, 59, 62, 63, 71, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 102, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 130, 135, 136, 137, 139, 142, 144, 150, 153, 154, 155, 156, 164, 174, 176, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 331, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 368, 370, 373, 376, 377, 378, 379, 383, 386, 388, 395, 396, 397, 398, 400, 401, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 426, 429, 431, 433, 437, 440, 444, 447, 452, 453, 454, 456, 457, 458, 459, 463, 464, 465, 466, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 484, 485, 491, 493, 494, 495, 496, 497, 500, 501, 506, 508, 510, 511, 513, 514, 516, 523, 524, 525, 526, 528, 530, 533, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 570, 577, 578, 592, 593, 594, 596, 600, 601, 614, 616, 617, 618, 620, 622, 623, 624, 625, 627, 630, 631, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 722, 725, 726, 727, 728, 730, 731, 736, 737, 738, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 807, 808, 812, 814, 815, 818, 822, 824, 825, 827, 829, 830, 833, 836, 839, 841, 844, 850, 851, 852, 854, 855, 856, 860, 863, 865, 868], "prioriti": [38, 75, 802, 817, 820, 822, 823, 832, 842], "normalize_via_oper": 38, "determin": [38, 57, 58, 63, 65, 69, 72, 75, 80, 81, 82, 86, 93, 95, 98, 101, 103, 104, 133, 156, 158, 165, 171, 172, 173, 174, 176, 177, 178, 193, 203, 205, 206, 217, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 244, 246, 248, 254, 255, 256, 257, 258, 262, 263, 264, 265, 266, 271, 274, 279, 283, 286, 287, 288, 289, 290, 291, 292, 295, 305, 309, 355, 360, 368, 373, 376, 377, 378, 379, 388, 412, 420, 431, 453, 454, 493, 497, 523, 535, 538, 559, 560, 564, 565, 566, 567, 568, 569, 596, 614, 630, 631, 632, 633, 635, 638, 640, 641, 646, 649, 668, 669, 670, 672, 676, 677, 678, 680, 681, 683, 684, 686, 687, 692, 694, 695, 701, 716, 717, 718, 750, 751, 752, 753, 754, 768, 769, 779, 785, 792, 796, 829, 831, 832, 834, 839, 843, 846, 848, 849, 861], "think": [38, 820, 822, 830, 833, 849, 873], "uniqu": [38, 48, 58, 59, 69, 81, 82, 92, 376, 377, 379, 424, 447, 484, 485, 499, 570, 635, 641, 642, 646, 716, 717, 718, 721, 725, 750, 751, 752, 753, 779, 814, 825, 829, 839, 843, 844, 845, 849, 857, 861, 875], "rule": [38, 55, 57, 58, 63, 78, 80, 81, 86, 153, 156, 179, 180, 181, 230, 241, 274, 276, 283, 285, 293, 295, 376, 379, 388, 420, 473, 523, 631, 633, 638, 640, 668, 669, 676, 680, 683, 687, 701, 779, 807, 825, 826, 829, 830, 831, 833, 837, 838, 839, 841, 846, 849, 873], "broadcast": [38, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 330, 336, 337, 338, 339, 340, 341, 344, 345, 347, 349, 351, 353, 354, 355, 356, 360, 368, 370, 373, 376, 377, 378, 379, 382, 383, 388, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 415, 418, 420, 425, 427, 428, 436, 437, 442, 443, 445, 454, 455, 456, 457, 459, 460, 466, 470, 473, 478, 486, 487, 488, 489, 491, 493, 495, 497, 498, 502, 505, 506, 508, 509, 510, 512, 513, 523, 524, 525, 526, 529, 530, 531, 532, 533, 541, 542, 546, 547, 548, 553, 554, 563, 577, 578, 616, 617, 620, 622, 623, 624, 625, 627, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 749, 753, 754, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 779, 807, 829, 831, 833, 834, 835, 846, 847, 851], "elementwis": [38, 58, 66, 81, 89, 301, 303, 363, 368, 638, 643, 693, 738, 839, 847, 851], "account": [38, 48, 50, 58, 65, 81, 88, 288, 379, 475, 633, 640, 707, 792, 807, 821, 830, 834, 843, 847, 865], "fact": [38, 98, 822, 825, 830, 843, 846, 851, 854], "consum": [38, 774, 829, 830, 838, 844, 846], "thrown": [38, 563, 635, 821, 826, 832, 835, 837, 857], "doesn": [38, 563, 581, 635, 772, 793, 820, 821, 827, 829, 830, 831, 832, 833, 836, 837, 839, 841, 846, 849, 851, 857, 865, 870], "consider": [38, 820, 833, 838, 849, 861, 869, 870], "standalon": [39, 820, 826, 846, 859, 868, 873, 878, 879], "static": [39, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 107, 108, 130, 320, 376, 397, 410, 415, 424, 446, 452, 491, 503, 596, 630, 637, 664, 683, 790, 795, 843, 848, 857, 871, 872, 873], "flow": [40, 829, 865, 872, 873], "statement": [40, 45, 830, 842, 846, 849, 857, 865, 866], "opposit": 40, "exclud": [40, 71, 81, 94, 127, 148, 329, 370, 524, 525, 630, 644, 742, 758, 777, 780, 802, 833, 851, 865], "todo": [41, 42, 43, 48, 51, 81, 525, 820, 831, 843], "aim": [44, 818, 822, 825, 836, 840, 843, 846, 850, 870, 872, 875], "interfac": [44, 77, 135, 630, 853, 856, 857, 859, 862, 868, 869, 870, 871, 872, 876, 879], "set_framework": [44, 51], "underneath": [44, 830, 870], "sai": [44, 820, 821, 836, 840, 853, 863, 880], "a_min": 44, "a_max": 44, "tensforflow": 44, "clip_by_valu": [44, 856, 869], "clip_value_min": 44, "clip_value_max": 44, "clamp": [44, 58, 81, 301, 368, 856], "49": [44, 48, 58, 67, 81, 85, 86, 288, 376, 377, 388, 398, 408, 419, 444, 524, 633, 648, 693, 741, 760], "devicearrai": [44, 826, 843, 851, 853], "accept": [44, 53, 54, 57, 58, 63, 76, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 329, 330, 336, 337, 339, 342, 343, 365, 370, 373, 375, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 485, 493, 497, 523, 526, 530, 539, 547, 548, 553, 557, 559, 561, 563, 577, 592, 596, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 820, 821, 822, 826, 829, 831, 832, 833, 834, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 853, 859, 870], "jax_concat": 44, "tf_concat": 44, "np_concat": 44, "torch_concat": 44, "85": [44, 52, 58, 67, 74, 80, 81, 83, 85, 90, 104, 113, 226, 235, 236, 280, 296, 297, 300, 368, 388, 524, 593, 620, 627, 633, 635, 636, 637, 644, 661, 740, 741, 742], "mymodel": [44, 854], "x_in": [44, 854, 855, 856], "reduce_mean": [44, 814, 854, 855, 856], "49040043354034424": 44, "48975786566734314": 44, "4892795979976654": 44, "48886892199516296": 44, "4884953498840332": 44, "4881443977355957": 44, "4878086447715759": 44, "48748287558555603": 44, "48716384172439575": 44, "48684927821159363": 44, "48653748631477356": 44, "48622724413871765": 44, "4859171509742737": 44, "48560672998428345": 44, "48529526591300964": 44, "4849821627140045": 44, "48466697335243225": 44, "4843493402004242": 44, "4840289056301117": 44, "4837053418159485": 44, "4833785891532898": 44, "4830484390258789": 44, "48271444439888": 44, "48237672448158264": 44, "48203518986701965": 44, "48168954253196716": 44, "4813397228717804": 44, "4809857904911041": 44, "48062753677368164": 44, "48026490211486816": 44, "479898065328598": 44, "47952669858932495": 44, "4791509211063385": 44, "4787706732749939": 44, "47838595509529114": 44, "4779967665672302": 44, "47760307788848877": 44, "4772048890590668": 44, "47680220007896423": 44, "47639501094818115": 44, "47598329186439514": 44, "4755673110485077": 44, "4751465618610382": 44, "4747215211391449": 44, "4742920398712158": 44, "47385817766189575": 44, "47341999411582947": 44, "47297725081443787": 44, "4725303053855896": 44, "47207894921302795": 44, "47162333130836487": 44, "47116345167160034": 44, "470699280500412": 44, "47023090720176697": 44, "4697583019733429": 44, "55": [44, 52, 81, 90, 119, 235, 294, 388, 524, 561, 633, 635, 638, 644, 648, 677, 683, 741, 742, 760, 825], "46928152441978455": 44, "46880054473876953": 44, "4683155119419098": 44, "4678264260292053": 44, "46733325719833374": 44, "46683603525161743": 44, "4663347601890564": 44, "4658295214176178": 44, "465320348739624": 44, "4648073613643646": 44, "46429020166397095": 44, "4637692868709564": 44, "46324464678764343": 44, "4627160429954529": 44, "4621836841106415": 44, "4616474211215973": 44, "46110764145851135": 44, "72": [44, 58, 67, 81, 83, 246, 350, 373, 376, 398, 408, 620, 633, 636, 638, 648, 683, 741, 760], "460563987493515": 44, "4600166976451874": 44, "74": [44, 46, 57, 90, 236, 266, 633, 638, 680], "45946577191352844": 44, "45891112089157104": 44, "45835286378860474": 44, "4577910006046295": 44, "78": [44, 60, 285, 622, 633, 636, 638, 644, 648, 683, 741, 760], "45722562074661255": 44, "45665669441223145": 44, "80": [44, 58, 81, 350, 373, 377, 388, 444, 524, 638, 642, 648, 683, 730, 760, 862], "4560841917991638": 44, "81": [44, 48, 57, 63, 78, 80, 86, 90, 169, 239, 264, 265, 289, 388, 524, 631, 633, 638, 642, 644, 648, 676, 680, 693, 727, 742, 760, 846], "4555082619190216": 44, "45492875576019287": 44, "45434585213661194": 44, "45375964045524597": 44, "4531698524951935": 44, "4525766670703888": 44, "45198020339012146": 44, "4513803720474243": 44, "4507772624492645": 44, "4501707851886749": 44, "4495610296726227": 44, "4489481747150421": 44, "44833192229270935": 44, "4477125108242035": 44, "44708991050720215": 44, "44646409153938293": 44, "44583529233932495": 44, "4452032148838043": 44, "44456806778907776": 44, "4439": 44, "selectbackward0": 44, "ivy_compil": 45, "ic": 45, "numer": [45, 54, 55, 57, 58, 59, 63, 67, 68, 71, 78, 80, 81, 82, 86, 90, 91, 93, 103, 104, 140, 153, 221, 224, 237, 241, 246, 247, 248, 255, 256, 257, 260, 269, 270, 274, 276, 277, 278, 279, 283, 284, 285, 289, 290, 294, 295, 376, 378, 383, 388, 420, 455, 510, 523, 583, 584, 593, 594, 606, 607, 630, 631, 633, 635, 638, 644, 645, 648, 669, 676, 678, 683, 686, 688, 690, 692, 694, 740, 741, 742, 744, 745, 746, 748, 749, 754, 761, 764, 766, 777, 778, 779, 780, 792, 818, 831, 836, 841, 843, 844, 846, 847, 848, 849, 851, 855, 869, 872, 878], "anyth": [45, 58, 81, 388, 529, 530, 822, 835, 846, 847, 872, 873], "affect": [45, 51, 58, 378, 458, 830, 843], "variabl": [45, 47, 48, 50, 58, 59, 60, 66, 75, 81, 82, 83, 89, 123, 124, 126, 323, 370, 376, 377, 383, 388, 422, 448, 511, 522, 523, 539, 563, 564, 565, 566, 569, 596, 617, 618, 620, 622, 623, 624, 629, 635, 636, 638, 641, 643, 687, 716, 717, 718, 738, 774, 785, 790, 792, 793, 794, 795, 796, 797, 798, 822, 827, 831, 834, 838, 841, 842, 846, 847, 851, 854, 855, 856, 857, 858, 865, 873], "original_fn": 45, "100000": 45, "var": [45, 71, 94, 96, 123, 124, 125, 126, 629, 641, 648, 716, 717, 799, 821, 833, 851, 869], "co": [45, 46, 57, 59, 80, 239, 244, 246, 287, 550, 633, 635, 819, 831, 851, 862], "sin": [45, 57, 59, 80, 239, 244, 246, 287, 550, 633, 635, 826, 851], "tan": [45, 57, 80, 537, 633, 635, 834, 838, 839, 842, 843, 851], "comp_fn": 45, "compile_graph": [45, 51], "expected_result": 45, "compiled_result": 45, "irrelev": [45, 830, 831, 833], "opeat": 45, "_layer": [45, 851], "net": [45, 50, 51, 851, 856, 862, 863], "compiled_net": 45, "latest": [46, 48, 57, 58, 80, 81, 156, 244, 254, 255, 270, 336, 337, 373, 376, 379, 388, 420, 422, 493, 523, 631, 633, 638, 640, 648, 686, 687, 715, 765, 793, 814, 820, 821, 822, 825, 827, 830, 834, 836, 847, 857, 858, 866, 877], "pypi": [46, 48, 51, 820, 821, 847, 857], "pkg": [46, 48, 51], "public": [46, 48, 51, 543, 635, 830, 841, 853, 875], "revis": [46, 48, 822], "req": [46, 48], "tabqrujw": 46, "quiet": [46, 48], "commit": [46, 48, 817, 818, 820, 823, 825, 833, 845, 846], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 46, "metadata": [46, 48, 51, 842], "setup": [46, 48, 51, 821, 822, 828, 830, 836], "cp39": [46, 48], "manylinux_2_12_x86_64": [46, 48], "manylinux2010_x86_64": [46, 48], "manylinux_2_17_x86_64": [46, 48, 821], "manylinux2014_x86_64": [46, 47, 48], "495": [46, 48], "nvidia_ml_pi": [46, 48], "pypars": [46, 48, 51], "ivy_cor": [46, 48, 51, 821], "1338326": 46, "sha256": [46, 48, 51], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 46, "store": [46, 48, 51, 55, 58, 59, 63, 65, 75, 78, 81, 82, 86, 88, 155, 376, 377, 421, 429, 433, 447, 451, 550, 635, 638, 640, 692, 709, 774, 775, 793, 794, 795, 816, 822, 826, 827, 829, 834, 840, 842, 843, 844, 851, 853, 854, 855, 859, 865], "ephem": [46, 48], "njrc_e6b": 46, "2e": [46, 48], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [46, 48], "4845": [46, 48], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 46, "b6": [46, 48], "0d": [46, 48], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [46, 48], "uninstal": [46, 48, 51], "vnd": [46, 48, 51], "json": [46, 48, 51, 75, 821, 836, 854], "psst": 46, "pickl": [46, 47, 75, 795, 829, 854], "imageio": 46, "urllib": [46, 51], "_src": 46, "back": [46, 58, 65, 81, 88, 379, 475, 496, 579, 603, 635, 637, 640, 664, 707, 792, 797, 808, 821, 826, 831, 832, 835, 840, 841, 848, 850, 857, 858, 862, 870, 874], "tf_cpp_min_log_level": 46, "mkdir": [46, 47, 48, 821, 830], "perceiv": [46, 47], "touch": 46, "io_processor": 46, "position_encod": 46, "jmp": 46, "tabul": 46, "29359": 46, "29k": 46, "67k": 46, "002": 46, "30179": 46, "47k": 46, "8107": 46, "9k": 46, "92k": 46, "itertool": 46, "preprocessor": 46, "vector": [46, 54, 58, 59, 62, 63, 81, 82, 85, 86, 98, 99, 101, 140, 366, 367, 375, 376, 377, 379, 382, 383, 388, 399, 430, 435, 443, 445, 450, 485, 487, 489, 507, 511, 523, 542, 546, 563, 615, 630, 635, 637, 638, 661, 664, 669, 673, 674, 676, 678, 683, 688, 689, 693, 694, 695, 696, 777, 793, 872], "perceiverbackbon": 46, "input_preprocessor": 46, "_input_preprocessor": 46, "_encod": 46, "__call__": [46, 774, 793, 794, 795, 814, 866], "is_train": 46, "po": [46, 808], "input_mask": 46, "network_input_is_1d": 46, "_input_is_1d": 46, "queri": [46, 47, 62, 75, 85, 199, 213, 556, 582, 632, 635, 637, 664, 667, 793, 829, 831, 836, 853, 872], "decod": [46, 854], "cross": [46, 48, 63, 64, 86, 87, 99, 638, 639, 697, 698, 699, 830, 831], "attend": [46, 637, 664], "encoder_queri": 46, "latent": [46, 641, 717, 718], "imagepreprocessor": 46, "deal": [46, 795, 818, 832, 839, 841, 843, 846, 857], "image_s": 46, "fourier_pos_config": 46, "position_encoding_typ": 46, "fourier": [46, 58, 81, 376, 399, 404, 405, 409, 410, 420, 421, 424, 550, 635], "fourier_position_encoding_kwarg": 46, "concat_po": 46, "max_resolut": 46, "num_band": [46, 59, 82, 550, 635], "sine_onli": 46, "prep_typ": 46, "spatial_downsampl": 46, "cross_attend_widening_factor": 46, "cross_attention_shape_for_attn": 46, "kv": 46, "dropout_prob": 46, "num_block": 46, "num_cross_attend_head": 46, "num_self_attend_head": 46, "num_self_attends_per_block": 46, "num_z_channel": 46, "self_attend_widening_factor": 46, "use_query_residu": 46, "z_index_dim": 46, "z_pos_enc_init_scal": 46, "perceiver_backbon": [46, 814], "perceiverencod": 46, "At": [46, 820, 821, 822, 825, 836, 846, 847, 862, 872], "publish": [46, 814, 857, 863, 866], "thankfulli": [46, 846], "perceiver_io": [46, 47], "imagenet_fourier_position_encod": 46, "pystat": 46, "imagenet_checkpoint": 46, "rb": 46, "ckpt": 46, "09": [46, 52, 57, 83, 90, 119, 279, 289, 616, 627, 633, 636, 741], "173": [46, 63, 638, 676], "194": 46, "125": [46, 58, 63, 86, 235, 347, 373, 378, 454, 633, 638, 693], "177": [46, 48], "193776248": 46, "185m": 46, "octet": 46, "184": 46, "80m": 46, "144mb": 46, "144": 46, "mean_rgb": 46, "stddev_rgb": 46, "im": 46, "denorm": 46, "resize_and_center_crop": 46, "crop": [46, 58, 81, 376, 405, 410, 421], "center": [46, 792], "image_height": [46, 48], "image_width": 46, "padded_center_crop_s": 46, "offset_height": 46, "offset_width": 46, "crop_window": 46, "inter_cub": 46, "ye": [46, 857], "dummy_input": [46, 814], "transpili": 46, "torch_perceiver_backbon": 46, "quicker": 46, "params_v": [46, 814, 866], "perceiverioclassifi": [46, 814], "max_pool": [46, 814], "Of": [46, 826, 842, 843, 854, 877, 878], "cours": [46, 821, 822, 825, 826, 833, 842, 843, 849, 854, 857, 877, 878], "468": 46, "huggingface_hub": 46, "multiprocess": [46, 75, 104, 635, 854, 857], "py39": 46, "132": [46, 81], "pyarrow": 46, "xxhash": 46, "pyyaml": 46, "2021": [46, 58, 81, 363, 373, 814], "aiohttp": 46, "async": 46, "timeout": [46, 75, 104, 587, 610, 635, 848], "0a3": 46, "async_timeout": 46, "frozenlist": 46, "manylinux_2_5_x86_64": [46, 51], "manylinux1_x86_64": [46, 51], "158": 46, "attr": [46, 831], "aiosign": 46, "multidict": 46, "114": [46, 376, 398, 408], "yarl": 46, "264": [46, 642, 719], "2022": [46, 47], "pytz": 46, "2020": [46, 825, 872], "dateutil": [46, 51], "wikiart": 46, "paint": [46, 814, 851, 861], "load_dataset": [46, 865, 866], "n_sampl": [46, 58, 81, 377, 379, 426, 434, 488], "10000": [46, 48, 54, 77, 139, 630], "huggan": 46, "split": [46, 47, 48, 52, 57, 58, 65, 74, 75, 80, 81, 88, 111, 112, 113, 114, 115, 116, 117, 118, 119, 212, 213, 214, 292, 296, 301, 302, 304, 349, 356, 368, 379, 471, 480, 500, 546, 573, 627, 632, 633, 635, 637, 640, 650, 657, 658, 712, 774, 789, 793, 814, 815, 822, 830, 850, 851, 857, 879], "wiki_art": 46, "gib": 46, "unknown": [46, 777], "huggan___parquet": 46, "36ee951979f9b56c": 46, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 46, "parquet": 46, "subsequ": [46, 802, 821, 826, 830, 831, 833, 838, 839, 842, 846, 855, 873], "reus": [46, 54, 77, 81, 88, 129, 463, 464, 471, 473, 475, 476, 477, 484, 500, 703, 704, 705, 707, 709, 710, 712, 714, 835, 846, 877], "curl": [46, 821], "2fwikiart": 46, "xferd": 46, "dload": 46, "upload": [46, 846], "spent": [46, 863], "25936": 46, "278k": 46, "abstract_expression": 46, "action_paint": 46, "analytical_cub": 46, "art_nouveau": 46, "baroqu": 46, "color_field_paint": 46, "contemporary_r": 46, "cubism": 46, "early_renaiss": 46, "expression": 46, "fauvism": 46, "high_renaiss": 46, "impression": 46, "mannerism_late_renaiss": 46, "minim": [46, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 376, 378, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 688, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 808, 834, 842, 844, 849, 851, 865, 870, 878], "naive_art_primitiv": 46, "new_real": 46, "northern_renaiss": 46, "pointil": 46, "pop_art": 46, "post_impression": 46, "realism": 46, "rococo": 46, "romantic": 46, "symbol": [46, 807, 820, 821, 872, 873], "synthetic_cub": 46, "ukiyo_": 46, "custom": [46, 58, 81, 300, 312, 365, 368, 375, 777, 807, 816, 824, 830, 835, 840, 844, 846, 849, 855, 862, 872, 876, 877, 878], "hugginfac": 46, "customdataset": 46, "__len__": [46, 829], "__getitem__": [46, 75, 829], "idx": [46, 47, 48, 536, 635, 832, 853], "random_split": 46, "224x224": 46, "val_siz": 46, "dataset_train": 46, "dataset_v": 46, "dataset_test": 46, "dataloader_train": 46, "dataloader_v": 46, "dataloader_test": 46, "train_featur": 46, "train_label": 46, "train_step": 46, "running_loss": [46, 48], "last_loss": 46, "training_load": 46, "intra": 46, "report": [46, 817, 820, 846], "zero_grad": 46, "999": [46, 60, 80, 83, 292, 616, 617, 622, 624, 633, 636, 797, 855], "epoch_numb": 46, "best_vloss": 46, "1_000_000": 46, "running_vloss": 46, "vdata": 46, "vinput": 46, "vlabel": 46, "voutput": 46, "vloss": 46, "avg_vloss": 46, "model_path": 46, "model_": 46, "state_dict": [46, 794, 795], "highest": [46, 58, 67, 81, 90, 320, 323, 370, 644, 740, 831], "energi": 46, "mayb": [46, 47, 53, 814, 821, 830, 851, 853], "deploi": [46, 814, 830, 859, 866, 870, 871, 872, 874, 878], "percieverio": 47, "ai": [47, 830, 870, 874], "contribut": [47, 58, 81, 388, 526, 817, 819, 821, 822, 823, 828, 836, 837, 843, 844, 851, 858, 865, 876, 880], "invit": [47, 820, 823, 843, 849], "g4ar9q7dtn": 47, "step1": 47, "printf": 47, "8packag": 47, "share": [47, 75, 187, 631, 777, 778, 814, 827, 829, 833, 839, 841, 843, 844, 846, 849, 851, 862, 870, 871, 878], "googledr": 47, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 47, "file_id": 47, "drive": [47, 48], "uc": 47, "tee": [47, 821], "file_id_wget_cmd": 47, "perl": 47, "pe": 47, "g": [47, 49, 50, 58, 67, 69, 71, 73, 81, 90, 96, 98, 152, 181, 194, 241, 254, 274, 281, 284, 336, 337, 373, 376, 377, 379, 383, 388, 413, 415, 452, 493, 509, 510, 511, 512, 513, 524, 525, 631, 632, 633, 638, 642, 644, 646, 648, 674, 675, 679, 686, 688, 689, 695, 722, 726, 728, 731, 736, 740, 741, 742, 750, 751, 752, 753, 758, 759, 761, 763, 764, 766, 792, 812, 815, 820, 821, 824, 825, 827, 828, 829, 841, 843, 846, 851, 857, 859, 863, 868], "uuid": 47, "anywai": [47, 826, 840, 843], "bin": [47, 58, 81, 388, 521, 526, 821, 822, 825, 829], "bash": [47, 821, 822, 825], "step2": 47, "interpret": [47, 54, 58, 77, 81, 128, 129, 135, 141, 378, 388, 455, 523, 630, 830, 873], "sudo": [47, 821], "apt": [47, 821], "yf": 47, "step3": 47, "xvzf": 47, "rm": [47, 49, 816, 822], "step4": 47, "symlink": 47, "unzip": [47, 48], "fr": 47, "l": [47, 58, 63, 80, 86, 268, 377, 378, 430, 453, 637, 638, 664, 668, 673, 674, 675, 678, 692, 822, 824], "ln": 47, "sf": 47, "la": 47, "step5": 47, "step6": 47, "ipkykernel": 47, "step7": 47, "engbjapanpython3": 47, "ipykernel": 47, "reconnect": 47, "sy": [47, 880], "oct": 47, "gcc": [47, 870, 877], "lf": 47, "upgrad": 47, "cuda11": 47, "cudnn805": 47, "cp38": [47, 51, 821], "helper": [47, 772, 774, 775, 781, 783, 784, 818, 828, 831, 835, 836, 845, 854, 859], "feedforward": 47, "prenorm": 47, "perceiveriospec": 47, "fetch": [47, 558, 635, 821, 822, 825, 830], "ogbanugot": [47, 880], "xmartlab": 47, "caffeflow": 47, "fetch_class": 47, "class_label": 47, "ground_truth": 47, "127": [47, 55, 58, 63, 78, 81, 169, 360, 373, 631, 638, 676], "path_to_imag": 47, "get_imag": 47, "spine": 47, "set_vis": 47, "bottom": [47, 546, 635, 820, 821, 830, 836, 878], "tick_param": 47, "set_xticklabel": 47, "set_yticklabel": 47, "show_result": 47, "listdir": [47, 48], "endswith": 47, "this_dir": 47, "dirnam": 47, "add_subplot": 47, "xtick": 47, "ytick": 47, "green": [47, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104, 813, 820, 821, 822], "red": 47, "perceiver_io_img_classif": 47, "normalize_imag": 47, "batch_shap": [47, 62, 67, 77, 85, 90, 133, 142, 630, 637, 638, 644, 663, 667, 696, 739, 793, 849, 851, 853], "img_dim": 47, "queries_dim": 47, "learn_queri": 47, "load_weight": 47, "num_input_ax": 47, "network_depth": 47, "num_lat_att_per_lay": 47, "query_shap": 47, "num_fourier_freq_band": 47, "weight_fpath": 47, "pretrained_weight": 47, "isfil": 47, "noinspect": [47, 853], "pybroadexcept": 47, "from_disk_as_pickl": 47, "action": [47, 812, 819, 830, 833, 837, 846], "placehold": [47, 642, 726, 731, 736, 793, 822, 826, 838, 859], "pyunboundlocalvari": 47, "max_fourier_freq": 47, "random_uniform": [47, 51, 67, 90, 644, 832, 835, 846, 851, 855], "817437": 47, "gpu_bfc_alloc": 47, "orig_valu": 47, "tf_force_gpu_allow_growth": 47, "autograd": [47, 857], "declar": [47, 822, 845], "_3r2_73j": 48, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 48, "1297564": 48, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 48, "le3bu3_v": 48, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 48, "third": [48, 98, 99, 379, 472, 499, 638, 646, 688, 750, 828, 831, 842, 857, 871, 872, 878], "parti": [48, 828, 831, 857, 862, 871, 872, 878], "mount": [48, 816, 822], "mydriv": 48, "chdir": 48, "kaggl": 48, "medium": 48, "articl": [48, 814, 837], "insert": [48, 58, 68, 81, 91, 379, 460, 470, 640, 642, 645, 647, 703, 723, 724, 745, 756, 830, 837], "www": [48, 336, 337, 373], "your_kaggle_usernam": 48, "competit": 48, "digit": 48, "readabl": [48, 826, 829, 835, 837, 838, 846, 847, 853, 854], "chmod": [48, 821, 830], "recent": [48, 811, 821, 822, 846, 861, 862], "forc": [48, 828, 830, 832], "archiv": [48, 821], "inflat": [48, 831], "sample_submiss": 48, "later": [48, 75, 540, 635, 820, 837, 842, 846, 847, 872], "my": [48, 830], "label_df": 48, "mod_train": 48, "data_valu": 48, "test_data_valu": 48, "correct_label": 48, "train_path": 48, "str": [48, 50, 53, 54, 58, 59, 62, 63, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 124, 126, 135, 137, 140, 142, 144, 150, 151, 154, 156, 158, 159, 160, 161, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 181, 182, 183, 184, 185, 186, 193, 194, 214, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 376, 377, 378, 379, 382, 388, 391, 395, 396, 397, 399, 400, 401, 402, 404, 405, 409, 410, 413, 414, 415, 416, 418, 419, 420, 421, 423, 424, 427, 431, 446, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 468, 469, 470, 475, 491, 493, 494, 495, 496, 497, 502, 503, 504, 505, 506, 508, 510, 512, 523, 524, 525, 526, 533, 535, 536, 538, 539, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 574, 577, 578, 580, 581, 590, 592, 593, 594, 596, 598, 600, 601, 614, 618, 625, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 689, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 725, 726, 731, 736, 739, 740, 741, 742, 744, 747, 750, 751, 752, 754, 758, 759, 760, 762, 764, 765, 767, 768, 769, 774, 775, 777, 778, 783, 785, 793, 795, 796, 807, 808, 812, 831, 832, 835, 839, 842, 843, 847, 851, 856, 865, 866, 867], "makedir": 48, "valid_path": 48, "28x28": 48, "pic": 48, "int8": [48, 55, 67, 77, 78, 90, 135, 162, 167, 169, 170, 174, 630, 631, 740, 777, 778, 831, 846], "new_img": [48, 50], "builder": [48, 816], "batchwis": 48, "goe": [48, 379, 468, 824, 837, 842, 849], "seed_valu": [48, 75, 644, 743], "randomize_dataset": 48, "create_dataset": 48, "num_examples_per_class": 48, "img_arrai": 48, "dir": [48, 854], "img_path": 48, "imread": [48, 50, 854], "imread_grayscal": 48, "generate_batch": 48, "ivyerror": [48, 809, 835], "smaller": [48, 58, 65, 71, 81, 88, 303, 335, 352, 368, 373, 376, 378, 388, 405, 410, 421, 453, 523, 524, 525, 546, 635, 640, 648, 700, 708, 758, 759, 764, 766, 822, 835, 851], "yield": [48, 68, 321, 322, 370, 379, 485, 645, 749, 830], "x_batch_inst": 48, "form": [48, 50, 53, 54, 58, 63, 75, 77, 86, 97, 98, 99, 128, 129, 141, 146, 147, 313, 316, 330, 339, 370, 373, 377, 379, 430, 441, 472, 481, 485, 501, 536, 597, 599, 630, 635, 637, 638, 642, 668, 670, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 692, 720, 731, 777, 792, 815, 820, 821, 839, 846, 849, 855, 856, 862, 872, 873, 878], "intialis": 48, "num_epoch": 48, "inherit": [48, 826, 829, 835, 853, 857, 859], "creation": [48, 58, 75, 81, 104, 828, 831, 832, 838, 840, 843, 844, 846, 847, 851, 865, 872, 874, 878], "inform": [48, 50, 55, 58, 60, 78, 83, 166, 169, 320, 370, 536, 625, 631, 635, 636, 641, 718, 812, 814, 819, 820, 821, 822, 823, 825, 829, 830, 835, 839, 840, 842, 844, 846, 875], "insid": [48, 63, 86, 104, 379, 495, 638, 681, 775, 821, 822, 826, 829, 831, 832, 836, 839, 840, 846, 847, 865, 878], "ivynet": 48, "h_w": 48, "input_channel": [48, 793, 851, 855], "output_channel": [48, 793, 855], "gelu": [48, 49, 52, 74, 627, 789], "image_widht": 48, "start_dim": [48, 58, 81, 379, 475], "end_dim": [48, 58, 81, 379, 475], "gpu_is_avail": [48, 632], "__name__": [48, 49, 51, 602, 635, 835], "heavi": [48, 779, 821, 843, 844, 849, 873], "lift": [48, 844, 873], "num_correct": 48, "y_pred": 48, "epoch_loss": 48, "field": [48, 63, 69, 86, 92, 377, 379, 430, 499, 638, 646, 673, 674, 685, 686, 688, 750, 751, 752, 830, 870, 878], "training_accuraci": 48, "train_loss": 48, "train_correct": 48, "train_loop": 48, "leav": [48, 53, 58, 76, 78, 80, 81, 82, 85, 86, 88, 94, 104, 166, 169, 241, 298, 301, 302, 308, 379, 469, 470, 475, 487, 488, 489, 505, 506, 508, 524, 525, 530, 550, 598, 640, 642, 656, 667, 672, 688, 702, 706, 711, 713, 714, 719, 720, 729, 730, 731, 732, 758, 759, 807, 820, 829, 830, 831, 833, 834, 838, 839, 842, 843, 846, 854, 855], "xbatch": 48, "ybatch": 48, "to_devic": [48, 56, 79, 197, 632, 795], "entropi": [48, 64, 87, 639, 697, 698, 699], "hot": [48, 54, 77, 142, 630], "ybatch_encod": 48, "one_hot": [48, 54, 77, 630, 856], "loss_prob": 48, "ret_grad_idx": [48, 618, 636, 774, 841], "xs_grad_idx": [48, 618, 636, 774, 841], "batch_loss": 48, "set_descript": 48, "set_postfix": 48, "accuracy_percentag": 48, "naverag": 48, "6f": 48, "_train_summari": 48, "writer": 48, "writerow": 48, "157it": 48, "06it": 48, "475401": 48, "11it": 48, "081436": 48, "13it": 48, "0187": 48, "029279": 48, "008382": 48, "07it": 48, "00456": 48, "003816": 48, "82it": 48, "00277": 48, "002179": 48, "05it": 48, "00175": 48, "001569": 48, "00147": 48, "09it": 48, "00128": 48, "001005": 48, "10it": 48, "00112": 48, "000837": 48, "129": [48, 637, 656, 658], "12it": 48, "000989": 48, "000709": 48, "145": 48, "000873": 48, "000606": 48, "08it": 48, "000774": 48, "000524": 48, "000688": 48, "000455": 48, "000613": 48, "000398": 48, "000547": 48, "000350": 48, "000488": 48, "000308": 48, "000437": 48, "000273": 48, "000391": 48, "000243": 48, "238": [48, 248, 633], "98it": 48, "000351": 48, "000216": 48, "260": 48, "plot_summari": 48, "whitegrid": 48, "nrow": 48, "ncol": 48, "fontweight": 48, "bold": 48, "set_xlabel": 48, "set_ylabel": 48, "savefig": 48, "summary_plot": 48, "png": [48, 50, 51, 854], "save_weight": [48, 795], "model_param": 48, "ivynet_weight": 48, "hdf5": [48, 75, 795, 854], "deitimageprocessor": 49, "tfdeitforimageclassif": 49, "tfdeitforimageclassificationwithteach": 49, "distillation_classifi": 49, "cls_classifi": 49, "randomli": [49, 376, 400, 401, 402, 637, 660, 777, 778, 779, 780, 785, 793], "henc": [49, 69, 224, 339, 373, 633, 640, 646, 703, 750, 751, 752, 753, 802, 821, 829, 830, 831, 842, 846], "image_processor": [49, 865, 866], "distil": [49, 873], "patch16": 49, "outputs_from_original_model": 49, "bertforsequenceclassif": 49, "bertforpretrain": 49, "NOT": [49, 269, 633, 807, 820], "probabl": [49, 58, 62, 64, 67, 81, 85, 87, 90, 376, 378, 383, 388, 400, 401, 402, 455, 509, 523, 526, 530, 637, 639, 644, 660, 664, 667, 697, 739, 779, 792, 793, 814, 846, 858, 863], "ptarmigan": 49, "rf": [49, 822], "branch": [49, 229, 241, 244, 246, 274, 286, 287, 288, 291, 633, 821, 822, 825, 830, 837, 857, 865, 872], "moduleconvert": [49, 790, 795], "mc": 49, "from_keras_modul": [49, 790], "compiled_func": 49, "return_graph": [49, 51], "compiled_output": 49, "diverg": [49, 58, 81, 248, 378, 455, 633], "_all_funct": [49, 51], "convert_to_tensor_v2_with_dispatch": 49, "transpose_v2": 49, "convolution_v2": 49, "bias_add": 49, "binary_op_wrapp": 49, "cast": [49, 55, 57, 58, 63, 71, 78, 80, 86, 94, 153, 156, 181, 275, 388, 524, 525, 631, 633, 638, 648, 679, 695, 758, 759, 762, 764, 766, 778, 839, 844, 851, 869], "moments_v2": 49, "batch_norm": [49, 51, 58, 81, 382], "tensordot": [49, 63, 86, 638, 808, 831], "softmax_v2": 49, "_slice_help": 49, "save_to_disk": [49, 51, 795], "12265048989200113": 49, "11038777417100028": 49, "1167045795539998": 49, "ivy_api_kei": 50, "obj": [50, 128, 129, 558, 630, 635, 805, 865, 866, 867], "combo": [50, 854], "permit": [50, 826, 838, 843, 846, 849], "usabl": [50, 838, 847], "neither": [50, 224, 241, 248, 274, 633, 638, 690, 830, 843, 849], "nor": [50, 224, 241, 248, 274, 633, 830, 843, 876], "specifc": 50, "invoc": 50, "externally_link": 50, "logo": 50, "patch": [50, 292, 633, 831, 872], "cv2_imshow": 50, "envrion": 50, "canni": 50, "original_img": 50, "fn_arg": 50, "dilate_edg": 50, "morphologi": 50, "hk_model": 50, "keras_model": 50, "odsc": 50, "talk": [50, 877], "352": [51, 85, 637, 661, 835], "nvidia_ml_py3": 51, "19190": 51, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 51, "b9": 51, "b1": [51, 638, 687], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 51, "cycler": 51, "fonttool": 51, "965": 51, "kiwisolv": 51, "show_graph": [51, 795], "to_ivy_modul": [51, 790, 856], "image_dim": 51, "v0": [51, 855], "urlerror": 51, "dev_str": 51, "comp_network": 51, "time_chronolog": 51, "ret0_nc": 51, "ret1_nc": 51, "ret0_c": 51, "ret1_c": 51, "pytorch_vision_v0": 51, "distribut": [51, 58, 64, 67, 81, 87, 90, 376, 377, 378, 383, 400, 401, 402, 435, 446, 452, 455, 457, 458, 460, 509, 510, 511, 512, 513, 639, 644, 697, 698, 699, 739, 740, 741, 742, 744, 792, 793, 820, 821, 830, 832, 857, 872, 875], "distributed_c10d": 51, "262": 51, "reduce_op": 51, "reduceop": 51, "004645566477999864": 51, "0044566806820000695": 51, "attribut": [51, 75, 166, 167, 168, 169, 200, 201, 209, 551, 552, 631, 632, 635, 775, 827, 828, 829, 834, 835, 839, 840, 842, 843, 849, 852, 853, 854, 855], "definit": [51, 57, 63, 80, 86, 293, 633, 638, 668, 814, 818, 822, 826, 831, 836, 839, 853, 866], "max_pool2d": [51, 58, 81, 376, 396], "__iadd__": 51, "adaptive_avg_pool2d": [51, 58, 81, 376], "_arraywithactiv": [52, 103], "abc": [52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 107, 549, 635, 642, 737, 792, 797, 807, 808, 853], "_abc_impl": [52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 107, 108], "_abc": [52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 107, 108], "_abc_data": [52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 107, 108], "approxim": [52, 57, 58, 63, 74, 80, 81, 86, 98, 101, 111, 222, 223, 226, 227, 228, 229, 238, 239, 244, 246, 248, 262, 263, 264, 265, 279, 286, 287, 291, 292, 293, 350, 360, 373, 378, 457, 458, 627, 633, 638, 681, 684, 789, 834, 843], "complex_mod": [52, 57, 58, 74, 80, 81, 111, 112, 113, 114, 115, 116, 117, 118, 119, 292, 296, 301, 302, 304, 368, 627, 633, 789, 840], "variant": [52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 139, 140, 141, 142, 144, 146, 147, 150, 154, 155, 156, 166, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 376, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 616, 617, 620, 622, 623, 624, 625, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 685, 686, 688, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 826, 833, 834, 849], "docstr": [52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 154, 155, 156, 166, 169, 173, 174, 181, 198, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 323, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 376, 379, 388, 395, 396, 397, 398, 400, 401, 402, 404, 408, 409, 410, 413, 414, 415, 419, 420, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 567, 569, 570, 572, 577, 578, 592, 593, 594, 595, 596, 598, 600, 601, 614, 615, 616, 617, 620, 622, 623, 624, 625, 630, 631, 633, 635, 638, 640, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 819, 820, 824, 828, 837, 838, 839, 840, 843, 845, 847], "liter": [52, 57, 58, 63, 74, 80, 81, 86, 111, 112, 113, 114, 115, 116, 117, 118, 119, 292, 296, 301, 302, 304, 368, 376, 377, 379, 382, 398, 408, 412, 420, 435, 441, 446, 449, 452, 485, 507, 627, 633, 638, 647, 679, 695, 756, 789, 849], "magnitud": [52, 57, 58, 74, 80, 81, 111, 112, 113, 114, 115, 116, 117, 118, 119, 221, 224, 241, 248, 274, 292, 296, 301, 302, 304, 368, 627, 633, 638, 688, 689, 789, 831], "handle_complex_input": [52, 57, 58, 74, 80, 81, 111, 112, 113, 114, 115, 116, 117, 118, 119, 292, 296, 301, 302, 304, 368, 627, 633, 789, 840], "element": [52, 54, 57, 58, 59, 62, 63, 65, 67, 68, 69, 71, 74, 75, 77, 78, 80, 81, 82, 85, 86, 88, 90, 91, 92, 94, 99, 103, 104, 107, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 127, 130, 136, 137, 146, 147, 148, 164, 166, 169, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 306, 307, 308, 310, 311, 312, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 368, 370, 373, 376, 377, 378, 379, 388, 389, 400, 401, 402, 405, 410, 413, 414, 415, 419, 421, 422, 423, 429, 430, 431, 453, 463, 464, 465, 475, 476, 477, 479, 482, 492, 493, 495, 497, 499, 521, 522, 524, 525, 526, 527, 528, 529, 531, 532, 534, 538, 541, 542, 553, 554, 570, 572, 592, 593, 594, 596, 600, 601, 627, 630, 633, 635, 637, 638, 640, 642, 644, 645, 646, 647, 648, 649, 660, 669, 671, 673, 674, 678, 683, 685, 686, 688, 692, 700, 703, 704, 705, 706, 707, 708, 709, 710, 719, 722, 728, 739, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 774, 777, 779, 793, 808, 834, 844, 846, 849, 851, 876], "138": [52, 111, 627], "165": [52, 111, 627, 637, 661], "hardswish": [52, 58, 74, 81, 299, 368, 627, 789], "leaky_relu": [52, 74, 81, 296, 627, 778], "alpha": [52, 57, 58, 74, 80, 81, 108, 113, 224, 290, 296, 297, 305, 309, 315, 368, 370, 377, 382, 383, 431, 507, 510, 511, 512, 627, 633, 789, 838, 843, 844], "slope": [52, 58, 74, 81, 113, 296, 297, 303, 305, 309, 368, 627, 789], "leaki": [52, 74, 113, 627, 789], "log_softmax": [52, 74, 627, 789], "0719": [52, 74, 114], "mish": [52, 74, 627, 789], "30340147": [52, 115, 627], "86509842": [52, 74, 115, 627], "269": [52, 117], "881": [52, 57, 80, 117, 227, 240, 280, 633], "422": [52, 118, 627], "155": [52, 85, 118, 627, 637, 661], "softplu": [52, 74, 627, 789, 849], "beta": [52, 58, 66, 74, 81, 89, 119, 305, 309, 315, 318, 319, 368, 370, 377, 378, 382, 383, 431, 459, 507, 511, 512, 627, 643, 738, 789, 814, 849], "threshold": [52, 57, 58, 74, 80, 81, 119, 272, 273, 312, 338, 368, 373, 378, 379, 454, 459, 492, 627, 633, 789, 849], "union": [52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 370, 373, 374, 376, 377, 378, 379, 382, 383, 384, 386, 388, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 559, 561, 562, 563, 565, 566, 569, 570, 572, 573, 577, 578, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 726, 727, 728, 730, 731, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 777, 792, 797, 798, 826, 829, 831, 832, 833, 835, 838, 839, 842, 847, 849, 851, 856, 865, 866, 867], "3461": [52, 74, 119, 627], "6491": [52, 74, 119, 627], "_array_to_new_backend": 53, "_to_ivi": 53, "_to_n": 53, "to_ignor": [53, 73, 96, 642, 730, 731], "_to_new_backend": 53, "args_to_ivi": 53, "include_deriv": [53, 76, 642, 720, 731, 774], "nest": [53, 75, 76, 104, 107, 244, 568, 598, 615, 618, 633, 635, 636, 641, 716, 717, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 797, 826, 828, 829, 839, 841, 847, 854, 855, 857, 859, 872], "unchang": [53, 57, 376, 379, 421, 475, 637, 660], "deriv": [53, 54, 58, 60, 76, 77, 81, 83, 132, 137, 144, 150, 314, 318, 343, 370, 373, 616, 617, 620, 621, 622, 623, 624, 630, 636, 641, 642, 718, 720, 731, 795, 797, 798, 831, 832, 853, 855], "word": [53, 127, 379, 478, 630, 644, 742, 790, 793, 829, 842, 843, 859], "args_to_n": [53, 842], "cont_inplac": 53, "decid": [53, 75, 642, 730, 731, 820, 821, 831, 849], "args_to_new_backend": 53, "shallow": [53, 642, 726, 727, 731, 736, 737], "nativevari": 53, "mutabl": [53, 642, 720, 726, 727, 731, 736, 737, 827], "to_ivi": [53, 76, 642, 732, 842], "leaf": [53, 75, 82, 94, 104, 549, 642, 729, 730, 732, 759, 829, 839, 854], "travers": [53, 76, 642, 723, 731, 829, 831, 835, 851], "lowest": [53, 58, 67, 76, 81, 90, 388, 526, 642, 644, 731, 740, 808, 839, 857, 859, 869, 873, 877], "search": [53, 58, 76, 81, 745, 746, 785, 819, 821, 829, 833, 836, 846, 847, 861], "to_new_backend": 53, "_arraywithcr": [54, 103], "boolean": [54, 55, 57, 58, 59, 65, 68, 71, 75, 77, 78, 80, 81, 82, 88, 91, 94, 103, 104, 124, 126, 128, 129, 130, 136, 153, 169, 171, 173, 174, 177, 193, 203, 211, 217, 231, 232, 233, 234, 235, 236, 268, 269, 270, 271, 336, 337, 352, 373, 377, 379, 435, 446, 452, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 493, 500, 535, 538, 549, 556, 559, 560, 564, 565, 566, 567, 568, 569, 570, 579, 582, 585, 586, 588, 589, 614, 629, 630, 631, 632, 633, 635, 637, 640, 641, 642, 645, 648, 664, 703, 704, 705, 707, 709, 710, 712, 714, 716, 717, 729, 747, 748, 749, 761, 763, 777, 778, 779, 780, 785, 796, 829, 831, 839, 843, 846, 849], "never": [54, 58, 65, 77, 81, 88, 129, 379, 463, 464, 465, 471, 473, 475, 476, 477, 480, 484, 491, 500, 556, 635, 640, 703, 704, 705, 707, 709, 710, 712, 714, 822, 831, 842, 843, 846], "valueerror": [54, 58, 65, 77, 81, 88, 92, 129, 376, 378, 410, 421, 458, 463, 464, 471, 473, 475, 476, 477, 484, 500, 640, 703, 704, 705, 707, 709, 710, 712, 714, 753, 779, 809, 835], "buffer": [54, 77, 81, 88, 129, 135, 463, 464, 471, 473, 475, 476, 477, 484, 500, 630, 703, 704, 705, 707, 709, 710, 712, 714, 794, 795, 842, 857], "nativedtyp": [54, 55, 58, 62, 63, 67, 68, 71, 77, 81, 86, 90, 91, 94, 127, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171, 175, 177, 179, 183, 193, 313, 314, 315, 316, 317, 318, 319, 334, 341, 357, 370, 373, 383, 388, 509, 510, 511, 512, 513, 523, 524, 525, 526, 529, 532, 630, 631, 637, 638, 644, 645, 647, 648, 660, 679, 695, 740, 741, 742, 745, 746, 756, 758, 759, 762, 764, 766, 792, 831, 832, 838, 847, 851], "datatyp": [54, 58, 75, 77, 81, 129, 137, 141, 158, 179, 183, 376, 424, 630, 631, 772, 847, 865], "nativedevic": [54, 56, 58, 67, 77, 79, 81, 90, 127, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 143, 144, 148, 149, 150, 195, 196, 197, 198, 199, 202, 207, 208, 209, 210, 212, 213, 214, 215, 216, 220, 313, 314, 329, 370, 383, 509, 510, 512, 513, 630, 632, 644, 739, 740, 741, 742, 792, 797, 798, 831, 832, 835, 838, 847], "39999998": [54, 128, 129, 630, 646, 751], "5999999": [54, 58, 81, 85, 128, 129, 298, 368, 377, 426, 630, 637, 660, 667], "0999999": [54, 71, 128, 129, 298, 308, 311, 354, 368, 373, 630, 762], "10000038": [54, 128, 129, 630], "90786433e": [54, 128, 129, 630], "310": [54, 128, 129, 630], "copy_arrai": [54, 77, 630], "to_ivy_arrai": [54, 77, 130, 630], "empty_lik": [54, 58, 77, 81, 265, 377, 429, 630, 633], "uniniti": [54, 131, 132, 630, 837], "from_dlpack": [54, 77, 630], "full_lik": [54, 77, 630, 847], "fill_valu": [54, 58, 68, 77, 81, 91, 136, 137, 253, 261, 379, 383, 493, 513, 630, 633, 645, 748, 831, 844, 847], "scalar": [54, 57, 58, 59, 63, 74, 77, 80, 81, 82, 86, 98, 113, 137, 142, 224, 245, 290, 296, 339, 340, 342, 347, 350, 352, 354, 359, 373, 376, 377, 378, 379, 424, 431, 453, 463, 464, 465, 474, 479, 601, 614, 630, 633, 635, 638, 695, 831, 841, 843, 857, 872], "fill": [54, 57, 58, 67, 68, 75, 77, 80, 81, 90, 91, 131, 136, 137, 139, 142, 143, 144, 149, 150, 275, 314, 370, 377, 379, 383, 435, 441, 446, 452, 474, 493, 494, 510, 512, 513, 630, 633, 644, 645, 740, 748, 792, 820, 844], "000123": [54, 137, 630], "stop": [54, 58, 60, 77, 81, 83, 127, 138, 139, 214, 377, 446, 452, 579, 617, 620, 622, 623, 624, 625, 630, 632, 635, 636, 641, 642, 716, 717, 718, 730, 797, 812, 838, 841, 849, 851, 857, 872], "num": [54, 77, 138, 139, 630, 777, 822, 838, 851], "endpoint": [54, 77, 138, 139, 630, 792, 838], "logspac": [54, 77, 630, 851], "sequenc": [54, 58, 62, 63, 65, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 133, 135, 137, 139, 142, 144, 150, 154, 156, 169, 173, 174, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 317, 324, 325, 326, 327, 328, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 366, 367, 370, 373, 374, 375, 376, 377, 379, 383, 388, 389, 391, 392, 393, 400, 401, 402, 404, 405, 409, 410, 412, 419, 420, 421, 422, 423, 426, 434, 435, 436, 438, 444, 445, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 478, 480, 481, 483, 484, 486, 489, 491, 493, 494, 495, 497, 500, 501, 502, 504, 505, 506, 508, 510, 511, 523, 524, 525, 526, 533, 534, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 573, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 615, 618, 619, 620, 625, 630, 633, 635, 636, 637, 638, 640, 642, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 664, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 695, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 714, 715, 719, 726, 736, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 793, 796, 798, 822, 830, 831, 832, 833, 835, 846, 847, 849, 851, 856, 875], "on_valu": [54, 77, 139, 142, 630], "off_valu": [54, 77, 139, 142, 630], "evenli": [54, 57, 58, 62, 65, 75, 77, 80, 81, 85, 88, 127, 138, 139, 293, 376, 419, 423, 630, 633, 637, 640, 650, 651, 652, 653, 655, 657, 659, 709], "hint": [54, 57, 58, 63, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 330, 336, 337, 339, 342, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 485, 493, 497, 523, 526, 553, 557, 559, 561, 592, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 820, 826, 834, 836, 838, 839, 842, 843, 847], "simplic": [54, 57, 58, 63, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 330, 336, 337, 339, 342, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 485, 493, 497, 523, 526, 553, 557, 559, 561, 592, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 834, 849, 855], "nestabl": [54, 57, 58, 63, 80, 81, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 156, 172, 176, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 314, 329, 330, 336, 337, 339, 342, 370, 373, 376, 377, 379, 388, 395, 396, 397, 398, 400, 401, 402, 408, 413, 414, 415, 420, 422, 431, 485, 493, 497, 523, 526, 530, 539, 547, 548, 553, 557, 559, 561, 563, 577, 592, 596, 601, 625, 630, 631, 633, 635, 636, 637, 638, 640, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 659, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 738, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 820, 824, 833, 834, 842, 846, 859], "464": [54, 57, 90, 139, 228, 229, 633], "15888336": [54, 139], "2154": [54, 139], "43469003": [54, 139], "meshgrid": [54, 77, 630], "spars": [54, 58, 64, 77, 81, 87, 140, 317, 370, 377, 435, 446, 452, 630, 639, 699], "xy": [54, 77, 140, 630], "coordin": [54, 57, 68, 80, 81, 91, 140, 148, 229, 291, 321, 322, 329, 350, 370, 384, 514, 630, 633, 645, 748], "conserv": [54, 140, 630], "cartesian": [54, 140, 630], "matrix": [54, 58, 59, 62, 63, 81, 82, 85, 86, 98, 99, 101, 103, 140, 146, 147, 148, 329, 330, 370, 377, 379, 388, 427, 430, 431, 434, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 483, 523, 535, 541, 630, 635, 637, 638, 661, 668, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 696, 777, 779, 792, 793, 808, 812, 820, 831, 843, 870, 872], "ij": [54, 71, 140, 630, 648, 760, 808], "rank": [54, 58, 63, 65, 72, 81, 86, 88, 95, 98, 99, 100, 101, 102, 107, 140, 324, 325, 326, 327, 328, 370, 377, 379, 388, 435, 436, 446, 449, 452, 485, 493, 497, 533, 630, 638, 640, 645, 649, 669, 671, 679, 681, 685, 687, 692, 694, 695, 702, 703, 711, 714, 715, 748, 768, 769, 815, 880], "ni": [54, 140, 630], "xi": [54, 140, 630], "scatter": [54, 59, 77, 82, 142, 577, 578, 630, 635, 828, 842, 849, 879], "unless": [54, 58, 63, 77, 81, 142, 274, 335, 352, 357, 373, 630, 633, 638, 681, 827, 832, 842, 857, 866, 867], "ones_lik": [54, 77, 630, 827, 856, 869], "tril": [54, 77, 630], "whose": [54, 57, 58, 59, 63, 65, 69, 71, 77, 80, 81, 82, 86, 88, 92, 94, 99, 101, 103, 137, 146, 147, 223, 227, 230, 238, 239, 240, 279, 280, 286, 287, 291, 292, 293, 330, 344, 345, 349, 353, 354, 356, 360, 370, 377, 379, 430, 451, 484, 493, 499, 540, 596, 630, 633, 635, 638, 640, 646, 648, 668, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 704, 708, 750, 751, 752, 759, 760, 779, 817, 834, 846], "innermost": [54, 58, 63, 86, 146, 147, 330, 370, 377, 430, 630, 638, 668, 670, 672, 673, 674, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 692], "mxn": [54, 58, 63, 86, 146, 147, 330, 370, 630, 638, 672, 679, 681, 682, 684, 685, 689, 692], "matric": [54, 58, 63, 81, 86, 98, 99, 103, 140, 146, 147, 330, 370, 377, 379, 430, 435, 436, 438, 444, 445, 450, 474, 630, 637, 638, 661, 668, 670, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 692, 693, 779, 818, 836, 872], "diagon": [54, 58, 63, 81, 86, 99, 133, 146, 147, 148, 314, 329, 330, 370, 377, 379, 428, 431, 441, 447, 474, 630, 638, 671, 692], "triangular": [54, 58, 63, 86, 146, 147, 148, 329, 330, 370, 377, 447, 630, 638, 668, 674, 675, 681, 685], "triu": [54, 77, 630], "upper": [54, 58, 63, 67, 81, 86, 90, 133, 147, 148, 314, 330, 370, 377, 388, 447, 526, 630, 638, 644, 668, 674, 675, 685, 742, 831, 842, 846], "zeros_lik": [54, 58, 77, 153, 270, 379, 493, 616, 617, 620, 622, 623, 624, 630, 631, 633, 636, 638, 640, 685, 700, 843, 849], "data_typ": [55, 58, 78, 81, 183, 631, 828, 831, 846, 847], "_arraywithdatatyp": [55, 103], "irrespect": [55, 63, 78, 86, 153, 631, 638, 688, 829, 842, 853, 879], "promot": [55, 57, 58, 63, 78, 80, 81, 86, 93, 103, 104, 153, 156, 179, 180, 181, 187, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 244, 246, 248, 262, 263, 264, 265, 266, 271, 274, 279, 283, 286, 287, 288, 289, 290, 291, 292, 295, 347, 355, 360, 373, 376, 388, 420, 523, 586, 609, 631, 633, 635, 638, 640, 648, 668, 669, 676, 677, 678, 679, 680, 681, 683, 684, 686, 687, 694, 695, 701, 711, 754, 762, 765, 777, 778, 823, 825, 834, 835, 839, 848], "nan": [55, 57, 58, 59, 69, 71, 78, 80, 81, 82, 153, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 255, 256, 257, 262, 263, 264, 265, 266, 269, 274, 275, 277, 279, 280, 283, 284, 285, 286, 287, 288, 291, 292, 294, 301, 335, 336, 337, 348, 352, 357, 360, 368, 373, 379, 388, 493, 521, 522, 529, 530, 531, 532, 559, 614, 628, 631, 633, 635, 646, 648, 649, 750, 751, 752, 753, 761, 762, 763, 765, 766, 767, 768, 769, 777, 780, 825, 831, 834, 841, 847, 848], "infin": [55, 57, 59, 63, 78, 80, 86, 153, 221, 222, 223, 224, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 255, 256, 262, 263, 264, 265, 266, 269, 274, 275, 277, 279, 283, 284, 286, 287, 288, 291, 292, 294, 336, 337, 360, 373, 559, 628, 631, 633, 635, 638, 648, 649, 686, 695, 761, 763, 768, 769, 825, 834], "desir": [55, 56, 58, 68, 71, 75, 78, 79, 81, 91, 94, 98, 153, 155, 156, 215, 320, 361, 370, 373, 379, 388, 483, 529, 532, 533, 631, 632, 638, 645, 648, 690, 747, 762, 792, 793, 822, 827, 830, 831, 832, 843, 851, 861, 865, 872], "broadcast_arrai": [55, 78, 631], "mix": [55, 57, 78, 80, 81, 82, 87, 90, 103, 104, 154, 167, 168, 181, 200, 201, 231, 234, 235, 236, 241, 242, 248, 252, 260, 261, 271, 274, 277, 283, 378, 388, 459, 530, 549, 551, 552, 553, 554, 563, 598, 601, 631, 632, 633, 635, 637, 638, 639, 640, 643, 648, 651, 653, 656, 658, 659, 661, 667, 668, 690, 697, 699, 700, 738, 760, 762, 765, 778, 780, 820, 824, 831, 832, 833, 842, 849, 851, 859, 872, 876, 878], "broadcast_to": [55, 78, 631, 831], "can_cast": [55, 78, 631, 831, 839, 843], "accord": [55, 58, 59, 65, 71, 78, 88, 94, 156, 166, 224, 235, 241, 248, 274, 285, 320, 370, 376, 379, 421, 485, 553, 556, 577, 578, 631, 633, 635, 638, 640, 648, 694, 702, 715, 765, 767, 772, 779, 799, 807, 820, 821, 825, 831, 837, 839, 843, 846], "finfo": [55, 78, 631, 846], "resolut": [55, 78, 166, 631, 822], "4028235e": [55, 166, 631], "iinfo": [55, 78, 631], "integ": [55, 57, 58, 62, 63, 65, 67, 71, 72, 75, 80, 81, 82, 85, 86, 88, 90, 94, 95, 103, 104, 127, 136, 169, 170, 176, 180, 181, 185, 221, 231, 232, 233, 234, 235, 236, 237, 247, 248, 259, 271, 276, 279, 283, 284, 294, 295, 331, 332, 333, 336, 337, 341, 346, 347, 370, 373, 376, 379, 383, 386, 388, 404, 409, 419, 422, 423, 424, 471, 480, 485, 493, 497, 500, 509, 510, 511, 512, 513, 515, 516, 521, 523, 524, 525, 530, 533, 556, 572, 582, 615, 630, 631, 633, 635, 637, 638, 640, 644, 647, 648, 649, 650, 651, 652, 653, 655, 657, 659, 669, 671, 680, 694, 695, 709, 739, 740, 741, 742, 743, 744, 756, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 777, 778, 779, 780, 785, 793, 808, 822, 829, 831, 841, 844, 846, 851, 853], "119": [55, 169], "1220": [55, 169], "int16": [55, 58, 67, 71, 78, 90, 156, 160, 162, 167, 169, 176, 191, 388, 524, 525, 631, 648, 740, 758, 759, 764, 766, 777, 778, 831, 843, 846, 851], "32768": [55, 78, 169, 594, 635], "32767": [55, 78, 169], "is_bool_dtyp": [55, 78, 631], "is_float_dtyp": [55, 78, 631, 847], "is_int_dtyp": [55, 78, 631, 844, 847], "is_uint_dtyp": [55, 78, 631, 844, 847], "result_typ": [55, 78, 631, 831], "arrays_and_dtyp": [55, 78, 181, 631], "_arraywithdevic": [56, 103], "move": [56, 58, 79, 81, 148, 211, 215, 219, 329, 370, 379, 484, 630, 632, 795, 822, 832, 847], "addit": [56, 58, 59, 66, 79, 81, 82, 89, 124, 126, 215, 224, 284, 378, 382, 388, 453, 507, 522, 527, 546, 547, 548, 615, 629, 632, 633, 635, 637, 641, 643, 664, 718, 738, 793, 808, 820, 821, 822, 827, 831, 833, 834, 837, 839, 841, 842, 843, 846, 847, 849, 853, 854, 856, 865, 872, 873, 874, 878], "__dlpack__": [56, 79, 134, 215, 630, 632], "caveat": [56, 79, 215, 378, 457, 632], "portabl": [56, 79, 215, 632, 814, 870], "_arraywithelementwis": [57, 103], "ab": [57, 63, 73, 80, 96, 103, 104, 279, 335, 352, 373, 379, 492, 633, 638, 642, 679, 689, 695, 727, 730, 774, 807, 808, 818, 826, 831, 836, 840, 843, 846, 869], "absolut": [57, 58, 63, 73, 75, 80, 81, 86, 103, 221, 285, 335, 352, 355, 361, 373, 377, 378, 431, 448, 454, 456, 633, 638, 679, 680, 681, 686, 772, 774, 777, 779, 780, 815, 821], "aco": [57, 80, 633], "invers": [57, 58, 63, 80, 81, 86, 222, 223, 226, 227, 228, 229, 230, 345, 373, 376, 386, 399, 408, 410, 420, 515, 633, 638, 677, 680, 684, 799, 831], "cosin": [57, 80, 222, 223, 238, 239, 313, 316, 370, 376, 398, 408, 633, 793], "acosh": [57, 80, 167, 168, 631, 633, 818, 836], "area": [57, 58, 80, 81, 85, 223, 227, 230, 376, 412, 419, 423, 633, 817, 842, 849, 862, 868], "hyperbol": [57, 80, 223, 227, 230, 239, 287, 291, 292, 305, 309, 368, 633], "sector": [57, 80, 223, 227, 230, 633, 862], "multipli": [57, 58, 62, 71, 80, 81, 85, 98, 224, 290, 353, 376, 377, 412, 443, 444, 524, 525, 633, 637, 648, 660, 758, 764, 822, 826, 827, 829, 833], "angl": [57, 80, 229, 239, 287, 292, 351, 373, 633], "deg": [57, 80, 225, 633], "radian": [57, 58, 80, 81, 222, 225, 226, 228, 229, 238, 240, 280, 286, 291, 360, 373, 633, 834], "degre": [57, 58, 71, 80, 81, 94, 225, 240, 280, 323, 370, 379, 491, 633, 648, 765, 767, 871], "1j": [57, 80, 81, 225, 226, 238, 239, 244, 246, 258, 281, 286, 287, 291, 339, 593, 633, 635], "2j": [57, 58, 80, 81, 225, 254, 339, 376, 404, 409, 594, 633, 635], "3j": [57, 58, 80, 81, 225, 258, 281, 339, 373, 633], "35619449": [57, 225, 633], "78539816": [57, 225, 633], "135": [57, 225, 541, 633, 635], "asin": [57, 80, 633], "sine": [57, 80, 226, 227, 286, 287, 633], "927": [57, 80, 226], "asinh": [57, 80, 226, 633], "atan": [57, 80, 633], "tangent": [57, 80, 228, 229, 230, 291, 292, 305, 309, 366, 368, 375, 633, 834], "785": [57, 80, 228, 229, 633], "atan2": [57, 80, 633], "quotient": [57, 80, 229, 241, 248, 633], "588": [57, 229, 633], "inf": [57, 58, 59, 63, 80, 81, 82, 86, 229, 246, 255, 256, 257, 258, 262, 263, 265, 275, 301, 345, 355, 368, 373, 377, 388, 427, 526, 559, 614, 628, 633, 635, 637, 638, 665, 679, 695, 777, 780, 818, 831, 836, 841], "719": [57, 229, 633], "atanh": [57, 80, 633], "549": [57, 80, 85, 230, 633, 637, 661], "bitwise_and": [57, 80, 633], "bitwise_invert": [57, 80, 633], "bitiwse_invert": [57, 232], "bitwise_left_shift": [57, 80, 633], "bitwise_or": [57, 80, 633], "bitwise_right_shift": [57, 80, 103, 633], "bitwise_xor": [57, 80, 103, 633], "ceil": [57, 58, 80, 81, 98, 101, 127, 376, 395, 396, 397, 413, 414, 415, 418, 630, 633, 793, 842], "416": [57, 238, 633], "540": [57, 238], "990": [57, 238], "cosh": [57, 80, 238, 633], "deg2rad": [57, 80, 633], "180": [57, 80, 240, 280, 633], "270": [57, 80, 240, 280, 633], "360": [57, 80, 240, 280, 633, 830], "dividend": [57, 80, 241, 248, 283, 295, 633], "divisor": [57, 58, 60, 71, 80, 81, 83, 94, 241, 248, 251, 252, 283, 295, 376, 379, 395, 396, 397, 471, 480, 500, 616, 617, 622, 633, 636, 648, 765, 767, 793, 797], "375": [57, 242, 277], "erf": [57, 80, 344, 373, 633], "exponenti": [57, 58, 80, 81, 243, 244, 246, 266, 279, 296, 306, 368, 377, 442, 633], "gauss": [57, 80, 243, 633], "328": [57, 243, 291, 633], "677": [57, 243], "842": [57, 243, 291, 633], "71828198": [57, 80, 244], "38905573": [57, 80, 244], "08553696": [57, 80, 244, 633], "exp2": [57, 80, 633], "expm1": [57, 80, 633, 831], "918": [57, 246], "147": [57, 246, 633], "floor": [57, 58, 80, 81, 98, 101, 235, 248, 376, 395, 396, 397, 399, 413, 414, 415, 418, 633, 793, 842], "floor_divid": [57, 80, 633, 785, 831], "fmin": [57, 80, 633, 831], "gcd": [57, 80, 633, 831], "greater": [57, 58, 62, 65, 67, 80, 81, 85, 90, 103, 104, 135, 222, 223, 226, 227, 229, 230, 233, 235, 241, 247, 248, 262, 264, 279, 283, 285, 287, 288, 292, 293, 294, 338, 373, 376, 399, 404, 409, 420, 630, 633, 637, 638, 640, 644, 667, 669, 680, 710, 742, 779, 793, 822, 823, 844, 869], "greater_equ": [57, 80, 103, 104, 266, 633, 869], "isfinit": [57, 80, 633, 843], "out_i": [57, 80, 255, 256, 257, 258, 281, 633], "self_i": [57, 80, 255, 256, 257, 258, 281], "finit": [57, 80, 221, 222, 223, 224, 227, 229, 230, 239, 241, 242, 244, 246, 248, 255, 256, 262, 264, 274, 275, 277, 279, 283, 287, 288, 292, 633], "isinf": [57, 80, 633], "detect_posit": [57, 80, 256, 633], "detect_neg": [57, 80, 256, 633], "isnan": [57, 80, 633], "isreal": [57, 80, 633], "5j": [57, 80, 81, 258, 281, 339, 373, 633], "6j": [57, 58, 80, 254, 258, 339, 633], "lcm": [57, 80, 633, 831], "less": [57, 58, 63, 67, 71, 80, 81, 86, 90, 103, 104, 222, 223, 226, 229, 230, 237, 241, 248, 262, 263, 264, 265, 279, 283, 285, 288, 359, 373, 376, 377, 388, 398, 399, 408, 420, 446, 452, 523, 526, 633, 638, 644, 648, 679, 680, 681, 684, 695, 742, 765, 767, 793, 821, 822, 829, 831, 833, 835, 838, 843, 846, 849, 850, 851, 862, 869, 872, 874], "less_equ": [57, 80, 103, 104, 633, 835, 869], "log10": [57, 58, 80, 320, 370, 633], "logarithm": [57, 80, 244, 262, 263, 264, 265, 266, 343, 355, 373, 633, 638, 686], "602": [57, 263, 633], "699": [57, 263, 633], "log1p": [57, 80, 633, 841], "693": [57, 80, 118, 227, 264, 627, 633], "0953": [57, 80, 262, 264, 633], "log2": [57, 80, 267, 633], "logaddexp": [57, 80, 633], "logaddexp2": [57, 80, 633, 818, 836], "169925": [57, 80, 267, 633], "logical_and": [57, 80, 633, 843, 849, 879], "logical_not": [57, 80, 633, 831], "logical_or": [57, 80, 633, 879], "conform": [57, 63, 80, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 149, 150, 156, 166, 169, 181, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 252, 253, 254, 255, 256, 257, 261, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 336, 337, 339, 373, 376, 379, 388, 420, 493, 497, 523, 630, 631, 633, 638, 640, 645, 646, 647, 648, 649, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 701, 703, 704, 705, 707, 708, 710, 711, 715, 745, 746, 748, 749, 750, 751, 752, 753, 754, 757, 761, 762, 763, 764, 765, 766, 767, 768, 769, 834, 837], "api_specif": [57, 58, 80, 81, 156, 244, 254, 255, 270, 336, 337, 373, 376, 379, 420, 493, 631, 633, 640, 648, 715, 765, 834], "array_api": [57, 80, 156, 244, 254, 255, 270, 376, 379, 420, 493, 631, 633, 638, 640, 648, 686, 687, 715, 765, 834], "logical_xor": [57, 80, 633], "use_wher": [57, 80, 272, 273, 633], "formula": [57, 58, 80, 241, 263, 265, 272, 273, 274, 320, 354, 370, 373, 382, 502, 504, 633, 812], "exce": [57, 58, 81, 273, 379, 495, 633], "product": [57, 58, 62, 63, 71, 80, 81, 85, 86, 94, 98, 99, 101, 274, 366, 367, 375, 377, 379, 388, 426, 429, 433, 436, 437, 438, 443, 444, 445, 497, 524, 525, 532, 633, 637, 638, 648, 664, 667, 669, 676, 678, 683, 690, 694, 758, 759, 760, 764, 765, 808, 820, 851, 872, 874], "nan_to_num": [57, 80, 633], "posinf": [57, 80, 275, 633], "neginf": [57, 80, 275, 633], "5e": [57, 60, 80, 81, 275, 358, 622, 633, 636], "not_equ": [57, 80, 103, 104, 633, 869], "pow": [57, 80, 103, 104, 633, 825, 869], "expon": [57, 58, 59, 81, 82, 279, 347, 349, 353, 373, 382, 507, 594, 633, 635, 638, 680], "rad2deg": [57, 80, 633], "286": [57, 81, 280], "458": [57, 280], "573": [57, 280, 633], "reciproc": [57, 80, 633], "333": [57, 80, 241, 282, 633], "remaind": [57, 58, 65, 75, 80, 81, 88, 250, 633, 640, 709, 825, 842], "modulu": [57, 80, 283, 633, 842], "x2_i": [57, 80, 224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 252, 253, 260, 261, 266, 268, 270, 271, 274, 277, 279, 283, 290, 633, 825], "678": [57, 284, 285], "np_variant": [57, 80, 285, 633], "841": [57, 74, 80, 111, 286, 627, 633], "909": [57, 80, 82, 286, 633], "141": [57, 80, 153, 286, 631, 633], "sinh": [57, 80, 286, 633], "232": [57, 80, 287, 633], "sqrt": [57, 58, 80, 81, 376, 399, 404, 405, 409, 410, 420, 633, 792, 793, 814], "squar": [57, 58, 63, 80, 81, 86, 288, 377, 378, 382, 388, 430, 442, 454, 507, 523, 618, 619, 621, 626, 633, 636, 638, 642, 668, 670, 671, 673, 674, 675, 677, 680, 686, 687, 688, 693, 725, 814], "tanh": [57, 58, 80, 81, 291, 305, 309, 368, 633, 789, 851], "762": [57, 80, 292, 633], "964": [57, 80, 292, 633], "trapz": [57, 80, 633], "dx": [57, 80, 293, 633], "apart": [57, 80, 293, 633], "trapezoid": [57, 80, 293, 633], "trunc": [57, 80, 633], "025": [57, 294, 378, 459, 633, 641, 718], "trunc_divid": [57, 80, 633], "_arraywithactivationsexperiment": [58, 103], "celu": [58, 81, 368], "formul": [58, 74, 81, 99, 111, 296, 298, 368, 789], "elu": [58, 81, 300, 368, 789], "scaler": [58, 81, 297, 368, 777, 780, 846], "hardshrink": [58, 81, 368], "lambd": [58, 81, 298, 308, 368], "hardsilu": [58, 81, 368], "66666667": [58, 120, 299, 388, 523, 627], "hardtanh": [58, 81, 368], "max_val": [58, 81, 300, 368], "min_val": [58, 81, 300, 368], "region": [58, 81, 300, 308, 368, 821], "19722438": [58, 81, 301, 368], "38629448": [58, 81, 301, 368], "38629436": [58, 81, 301, 368], "logsigmoid": [58, 81, 368, 789], "31326175": [58, 74, 302, 368], "126928": [58, 81, 302], "01814993": [58, 302], "00004578": [58, 302], "57888985": [58, 302], "31326169": [58, 81, 302, 368], "69314718": [58, 63, 74, 81, 86, 302, 355, 368, 373, 638, 686], "01104775": [58, 302], "prelu": [58, 81, 368, 789], "unidirect": [58, 303, 368, 637, 662], "relu6": [58, 81, 368, 789], "rectifi": [58, 74, 81, 113, 115, 116, 304, 307, 312, 368, 627], "scaled_tanh": [58, 81, 309, 368], "7159": [58, 81, 305, 309, 368], "amplitud": [58, 81, 305, 309, 368], "65537548": [58, 81, 305], "49570239": [58, 81, 305], "77637792": [58, 305], "selu": [58, 81, 368, 789], "11133075": [58, 306, 368], "05070102": [58, 81, 306, 368], "10140204": [58, 306, 368], "15210295": [58, 306, 368], "20280409": [58, 306, 368], "25350523": [58, 306, 368], "30420589": [58, 306, 368], "35490704": [58, 306, 368], "silu": [58, 81, 368, 789], "26894143": [58, 307], "73105854": [58, 81, 307], "softshrink": [58, 81, 368], "bound": [58, 81, 308, 320, 368, 370, 379, 468, 493, 494, 777, 831, 835, 843, 846, 851, 878], "tanhshrink": [58, 81, 368], "23840582": [58, 81, 310, 368], "condit": [58, 68, 81, 91, 124, 311, 326, 327, 370, 377, 427, 629, 642, 645, 729, 730, 749, 779, 825, 831, 833, 835, 839, 840, 842, 846, 865], "met": [58, 81, 311, 835], "hreshold": [58, 311], "thresholded_relu": [58, 81, 368], "_arraywithconversionsexperiment": [58, 103], "_arraywithcreationexperiment": [58, 103], "blackman_window": [58, 81, 370], "period": [58, 81, 287, 291, 313, 315, 316, 318, 319, 370, 376, 411, 633, 822], "window": [58, 62, 81, 85, 313, 315, 316, 318, 319, 334, 370, 376, 382, 395, 396, 397, 399, 413, 414, 415, 416, 418, 419, 423, 424, 507, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 793, 816, 822, 828, 836, 877], "symmetr": [58, 63, 81, 86, 98, 99, 313, 315, 316, 318, 319, 370, 377, 379, 430, 485, 638, 668, 673, 674, 675, 696, 829], "38777878e": [58, 81, 313, 370], "40000000e": [58, 313, 370], "00000000e": [58, 63, 81, 82, 313, 344, 345, 370, 376, 398, 404, 408, 409, 638, 685, 818, 836], "30000000e": [58, 81, 313, 370], "eye_lik": [58, 81, 370], "elsewher": [58, 81, 133, 314, 370, 630, 645, 749, 821], "mel_weight_matrix": [58, 81, 370], "num_mel_bin": [58, 81, 320, 370], "dft_length": [58, 81, 320, 370, 376, 399], "sample_r": [58, 81, 320, 370], "lower_edge_hertz": [58, 81, 320, 370], "upper_edge_hertz": [58, 81, 320, 370], "3000": [58, 81, 320, 370], "melweightmatrix": [58, 81, 320, 370], "linearli": [58, 59, 82, 320, 370, 550, 635, 638, 687], "frequenc": [58, 59, 81, 82, 320, 370, 388, 523, 550, 635, 822], "spectra": [58, 320, 370], "dft": [58, 81, 320, 370, 376], "stft": [58, 81, 320, 370, 376], "mel": [58, 81, 320, 370], "hertz": [58, 320, 370], "2595": [58, 320, 370], "700": [58, 82, 320, 370, 554], "band": [58, 59, 81, 82, 320, 370, 550, 635], "spectrum": [58, 81, 320, 370], "n_fft": [58, 81, 320, 370, 376, 399], "8000": [58, 81, 315, 320, 370], "75694758": [58, 320, 370], "trilu": [58, 81, 370], "retain": [58, 148, 329, 330, 370, 618, 630, 636, 841, 845, 859], "unsorted_segment_mean": [58, 81, 370], "segment_id": [58, 81, 331, 332, 333, 370, 799], "num_seg": [58, 81, 331, 332, 333, 370, 799], "identifi": [58, 81, 331, 332, 333, 370, 820, 825, 830, 831, 846, 849], "th": [58, 81, 99, 331, 332, 333, 342, 370, 373, 377, 378, 388, 428, 435, 453, 533], "unsorted_segment_min": [58, 81, 370], "unsorted_segment_sum": [58, 81, 370], "polyv": [58, 81, 370], "coeff": [58, 81, 323, 370], "polynomi": [58, 81, 323, 370], "coeffici": [58, 81, 315, 323, 370, 377, 447, 638, 687, 797], "indetermin": [58, 81, 323, 370], "simplifi": [58, 81, 323, 370, 807, 808, 835, 843, 851, 852, 855, 862, 865, 868, 870, 871, 872, 875, 878, 879], "substitut": [58, 81, 323, 370], "_arraywithdata_typeexperiment": [58, 103], "_arraywithdeviceexperiment": [58, 103], "_arraywithelementwiseexperiment": [58, 103], "equal_nan": [58, 81, 335, 352, 373], "1e10": [58, 335, 352, 373], "00001e10": [58, 335, 352, 373], "00001e": [58, 335, 373], "amax": [58, 81, 373], "keepdim": [58, 63, 65, 68, 71, 72, 75, 81, 86, 88, 91, 94, 95, 336, 337, 341, 357, 364, 373, 374, 379, 388, 490, 528, 529, 530, 531, 532, 533, 638, 640, 645, 648, 649, 679, 695, 714, 745, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 835, 843, 851], "singleton": [58, 63, 68, 71, 72, 81, 86, 91, 94, 95, 336, 337, 373, 638, 640, 645, 648, 649, 695, 703, 710, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 851], "amin": [58, 81, 373], "binar": [58, 81, 373], "conj": [58, 81, 239, 244, 246, 287, 288, 292, 373, 633], "conjug": [58, 63, 81, 86, 339, 373, 376, 377, 383, 399, 425, 431, 443, 445, 447, 511, 638, 678, 682, 690], "copysign": [58, 81, 373], "unsign": [58, 71, 81, 340, 373, 379, 388, 493, 524, 525, 648, 758, 759, 764, 766, 778, 831, 851], "count_nonzero": [58, 81, 373], "diff": [58, 75, 81, 373, 833, 842, 869], "prepend": [58, 81, 342, 373, 638, 640, 678, 703, 821], "differenc": [58, 81, 342, 373], "prior": [58, 81, 342, 373, 383, 511, 638, 690, 835, 847], "expand": [58, 59, 65, 81, 82, 342, 373, 379, 497, 550, 635, 640, 703, 814, 829, 845], "discret": [58, 81, 342, 373, 376, 398, 399, 404, 405, 408, 409, 410, 420, 421, 639, 698, 793], "digamma": [58, 81, 373], "7549271": [58, 343, 373], "92278427": [58, 81, 343, 373], "9988394": [58, 343, 373], "erfc": [58, 81, 373], "complementari": [58, 81, 334, 344, 370, 373, 870, 878], "84270084e": [58, 344, 345], "80259693e": [58, 344, 345], "erfinv": [58, 81, 373], "float_pow": [58, 81, 373], "fmax": [58, 81, 373], "fmod": [58, 81, 633], "divis": [58, 59, 60, 81, 82, 83, 235, 241, 248, 250, 283, 285, 295, 379, 471, 584, 593, 607, 616, 617, 622, 633, 635, 636, 637, 650, 657, 658, 797, 839, 848], "frexp": [58, 81, 373], "edge_ord": [58, 81, 350, 373], "boundari": [58, 67, 81, 90, 101, 326, 327, 350, 370, 373, 376, 412, 644, 742, 872], "33333333": [58, 81, 282, 350, 373, 453, 633], "hypot": [58, 81, 373], "hypotenus": [58, 351, 373], "4031": [58, 351, 373], "8102": [58, 351, 373], "isclos": [58, 81, 373, 825], "ldexp": [58, 81, 373], "lerp": [58, 81, 373], "lgamma": [58, 81, 373], "45373654": [58, 355, 373], "6477685": [58, 355, 373], "modf": [58, 81, 373], "fraction": [58, 81, 356, 373, 388, 533, 637, 660], "nansum": [58, 81, 373], "accumul": [58, 81, 357, 373, 379, 490], "nextaft": [58, 81, 373], "0e": [58, 60, 81, 83, 358, 373, 622, 636], "4013e": [58, 81, 358, 373], "4028e": [58, 81, 358, 373], "signbit": [58, 81, 373], "637": [58, 81, 360, 373], "0909": [58, 81, 360, 373], "sparsify_tensor": [58, 81, 373], "sparsifi": [58, 81, 361, 373], "arang": [58, 63, 71, 81, 86, 138, 361, 373, 376, 377, 395, 396, 397, 404, 409, 413, 414, 415, 418, 427, 444, 477, 573, 615, 630, 635, 638, 641, 648, 679, 695, 717, 718, 760, 814, 831, 842, 879], "xlogi": [58, 81, 373], "0986": [58, 81, 362, 373], "3863": [58, 81, 362, 373], "0000": [58, 81, 315, 316, 319, 345, 362, 370, 373, 377, 379, 442, 479], "zeta": [58, 81, 373], "0369": [58, 81, 363, 373], "_arraywithgeneralexperiment": [58, 103], "init_valu": [58, 81, 85, 364, 374, 376, 419], "reduct": [58, 59, 64, 72, 75, 81, 82, 85, 87, 95, 364, 374, 376, 378, 379, 419, 453, 454, 455, 456, 457, 458, 459, 460, 490, 547, 577, 578, 635, 639, 649, 697, 698, 699, 768, 769, 794, 831, 839, 842, 846, 853], "_arraywithgradientsexperiment": [58, 103], "_arraywithimageexperiment": [58, 103], "_arraywithlayersexperiment": [58, 103], "adaptive_avg_pool1d": [58, 81, 376], "1d": [58, 81, 98, 99, 376, 377, 379, 388, 390, 398, 400, 402, 408, 443, 463, 468, 490, 494, 523, 777, 793], "adapt": [58, 81, 83, 376, 390, 391, 392, 393, 623, 636, 793, 797, 862], "plane": [58, 81, 241, 244, 246, 274, 286, 287, 288, 291, 376, 379, 390, 391, 392, 393, 491, 633], "l_in": [58, 81, 376, 390], "spatial": [58, 62, 81, 85, 376, 382, 390, 391, 392, 393, 412, 419, 423, 502, 503, 504, 507, 637, 650, 651, 652, 653, 655, 657, 659, 796], "Will": [58, 81, 376, 390, 391, 392, 393, 802, 857], "l_out": [58, 81, 376, 390], "nhwc": [58, 62, 81, 85, 376, 382, 391, 396, 401, 414, 418, 507, 637, 650, 653, 654, 657, 658, 659, 793], "3d": [58, 63, 81, 376, 391, 393, 400, 401, 465, 638, 676, 793, 849], "4d": [58, 81, 376, 377, 382, 391, 401, 402, 451, 507], "s_0": [58, 81, 376, 391, 392], "s_1": [58, 81, 376, 391, 392], "adaptive_max_pool2d": [58, 81, 376], "h_in": [58, 81, 376, 392, 393], "w_in": [58, 81, 376, 392, 393], "adaptive_max_pool3d": [58, 81, 376], "avg_pool1d": [58, 81, 376], "kernel": [58, 62, 81, 85, 376, 395, 396, 397, 413, 414, 415, 416, 637, 663, 851, 857, 872, 875, 876], "nwc": [58, 62, 81, 85, 376, 395, 400, 413, 416, 637, 650, 651, 652, 657, 658, 793], "count_include_pad": [58, 81, 376, 395, 396, 397, 793], "d_in": [58, 62, 81, 85, 376, 393, 395, 396, 397, 399, 404, 405, 409, 413, 414, 415, 416, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659], "algorithm": [58, 62, 74, 81, 85, 111, 376, 377, 395, 396, 397, 412, 413, 414, 415, 416, 446, 448, 452, 638, 651, 653, 654, 655, 656, 659, 686, 789, 793, 808, 831, 843, 849, 857, 872, 874, 876], "ncw": [58, 62, 81, 85, 376, 395, 400, 401, 413, 416, 637, 650, 651, 652, 657, 658, 793], "avg_pool2d": [58, 81, 376], "divisor_overrid": [58, 81, 376, 395, 396, 397, 793], "avg_pool3d": [58, 81, 376], "ndhwc": [58, 62, 81, 85, 376, 397, 402, 415, 637, 650, 655, 656, 657, 658, 793], "volum": [58, 62, 81, 85, 376, 397, 399, 404, 405, 409, 415, 637, 655, 656], "ncdhw": [58, 62, 81, 85, 376, 397, 402, 415, 637, 650, 655, 656, 657, 658, 793], "dct": [58, 81, 376, 793, 854], "truncat": [58, 81, 376, 377, 398, 404, 408, 409, 410, 421, 450, 580, 635, 793, 835, 854], "larger": [58, 65, 71, 81, 88, 94, 166, 376, 398, 405, 408, 410, 421, 631, 640, 648, 700, 708, 765, 767, 793, 846, 849, 879], "ortho": [58, 81, 376, 398, 399, 404, 405, 408, 409, 410, 420, 421, 793], "onesid": [58, 81, 376, 399], "fft": [58, 81, 376, 399, 405, 420, 421, 424, 793, 820, 872], "symmetri": [58, 376, 399], "rfft": [58, 81, 376, 399, 421], "invok": [58, 376, 399, 814, 837, 865, 866], "batch_idx": [58, 376, 399], "signal_dim1": [58, 376, 399], "signal_dim2": [58, 376, 399], "signal_dimn": [58, 376, 399], "signal_dim": [58, 376, 399], "embed": [58, 81, 376, 378, 453, 637, 664, 779, 793, 872], "max_norm": [58, 59, 81, 82, 376, 403, 541, 542, 635, 793], "ifft": [58, 81, 376, 404, 410, 793], "pi": [58, 81, 287, 291, 376, 378, 404, 409, 458, 628, 633], "44509285e": [58, 81, 376, 404], "14423775e": [58, 81, 376, 404], "17j": [58, 81, 376, 404, 409], "11483250e": [58, 81, 376, 404], "16j": [58, 81, 376, 404, 409], "33486982e": [58, 81, 376, 404], "22464680e": [58, 81, 376, 404], "95799250e": [58, 81, 376, 404], "66951701e": [58, 81, 376, 404], "fft2": [58, 376], "20477401j": [58, 376, 405], "0614962j": [58, 376, 405], "idct": [58, 81, 376], "49862671": [58, 81, 376, 398, 408], "37691498": [58, 81, 376, 398, 408], "00390816": [58, 81, 376, 398, 408], "58938599": [58, 81, 376, 398, 408], "92713165": [58, 81, 376, 398, 408], "078475": [58, 81, 376, 398, 408], "19664812": [58, 81, 376, 398, 408], "95411837": [58, 81, 376, 398, 408], "30636606e": [58, 81, 376, 409], "43029718e": [58, 81, 376, 409], "18j": [58, 81, 376, 404, 409], "53080850e": [58, 81, 376, 409], "58689626e": [58, 81, 376, 409], "24474906e": [58, 81, 376, 409], "91858728e": [58, 81, 376, 409], "01435406e": [58, 81, 376, 409], "ifftn": [58, 81, 376], "24730653": [58, 81, 376, 410], "90832391j": [58, 81, 376, 410], "49495562": [58, 81, 376, 410], "9039565j": [58, 81, 376, 410], "98193269": [58, 81, 376, 410], "49560517j": [58, 81, 376, 410], "93280757": [58, 81, 376, 410], "48075343j": [58, 81, 376, 410], "28526384": [58, 81, 376, 410], "3351205j": [58, 81, 376, 410], "2343787": [58, 81, 376, 410], "83528011j": [58, 81, 376, 410], "18791352": [58, 81, 376, 410], "30690572j": [58, 81, 376, 410], "82115787": [58, 81, 376, 410], "96195183j": [58, 81, 376, 410], "44719226": [58, 81, 376, 410], "72654048j": [58, 81, 376, 410], "51476765": [58, 376, 410], "66160417j": [58, 376, 410], "04319742": [58, 376, 410], "05411636j": [58, 376, 410], "015561": [58, 376, 410], "04216015j": [58, 376, 410], "06310689": [58, 376, 410], "05347854j": [58, 376, 410], "13392983": [58, 376, 410], "16052352j": [58, 376, 410], "08371392": [58, 376, 410], "17252843j": [58, 376, 410], "0031429": [58, 376, 410], "05421245j": [58, 376, 410], "10446617": [58, 376, 410], "17747098j": [58, 376, 410], "05344324": [58, 376, 410], "07972424j": [58, 376, 410], "8344667": [58, 81, 376, 410], "98222595j": [58, 81, 376, 410], "48472244": [58, 81, 376, 410], "30233797j": [58, 81, 376, 410], "recompute_scale_factor": [58, 81, 376, 412, 849], "antialia": [58, 81, 376, 412, 849], "height": [58, 59, 62, 81, 82, 85, 376, 412, 546, 635, 637, 653, 654, 655, 656, 659, 823, 854], "width": [58, 59, 62, 81, 82, 85, 376, 377, 379, 382, 388, 412, 431, 485, 507, 526, 546, 635, 637, 651, 652, 653, 654, 655, 656, 659, 664], "trilinear": [58, 81, 376, 412, 849], "nearest_exact": [58, 81, 376, 412, 849], "tf_area": [58, 81, 376, 412, 849], "mitchellcub": [58, 81, 376, 412, 849], "lanczos3": [58, 81, 376, 412, 849], "lanczos5": [58, 81, 376, 412, 849], "gaussian": [58, 81, 111, 376, 412, 627, 849], "overwrit": [58, 75, 81, 214, 376, 412, 632, 822, 842, 843, 851], "thu": [58, 81, 235, 248, 283, 291, 292, 376, 377, 412, 430, 633, 638, 673, 674, 820, 830, 835, 840, 843, 847], "antialias": [58, 81, 412], "max_pool1d": [58, 81, 376], "dilaton": [58, 81, 413, 414, 415], "max_pool3d": [58, 81, 376], "max_unpool1d": [58, 81, 376], "unpool": [58, 81, 376, 416], "reduce_window": [58, 85, 376], "window_dimens": [58, 85, 376, 419], "window_strid": [58, 85, 376, 419], "base_dil": [58, 85, 376, 419], "window_dil": [58, 85, 376, 419], "trim": [58, 75, 81, 376, 379, 420, 496], "orthonorm": [58, 63, 81, 86, 376, 420, 638, 685, 688], "8660254j": [58, 81, 376, 420], "rfftn": [58, 81, 376], "sliding_window": [58, 81, 376], "window_s": [58, 81, 376, 423], "frame_length": [58, 81, 376, 424], "frame_step": [58, 81, 376, 424], "fft_length": [58, 81, 376, 424], "window_fn": [58, 81, 376, 424], "pad_end": [58, 81, 376, 424], "smallest": [58, 75, 81, 166, 169, 237, 376, 379, 424, 495, 631, 633, 638, 679, 777, 779, 780], "enclos": [58, 81, 376, 424, 873], "window_length": [58, 81, 313, 315, 318, 319, 334, 370, 376, 424], "li": [58, 81, 376, 377, 388, 424, 431, 533, 861], "past": [58, 81, 376, 424, 822, 825, 844, 846, 858, 872], "fft_unique_bin": [58, 81, 376, 424], "complex64": [58, 78, 81, 159, 173, 182, 188, 254, 281, 376, 420, 424, 631, 633, 638, 686, 688, 689, 778, 831, 836], "complex128": [58, 81, 82, 159, 160, 173, 182, 188, 376, 424, 572, 631, 635, 638, 674, 675, 679, 695, 777, 778, 818, 831, 836], "compon": [58, 81, 143, 144, 222, 223, 224, 227, 230, 239, 241, 242, 244, 246, 274, 276, 277, 284, 287, 288, 291, 292, 324, 328, 339, 370, 373, 376, 377, 382, 424, 435, 446, 507, 630, 633, 645, 748, 845, 851, 862, 868, 873, 875], "linear_algebra": [58, 63, 81, 86, 638, 847], "_arraywithlinearalgebraexperiment": [58, 103], "adjoint": [58, 63, 81, 86, 377, 447, 638, 677, 687, 688, 777], "batched_out": [58, 81, 377], "j1": [58, 81, 377, 426], "jn": [58, 81, 377, 426], "k1": [58, 81, 377, 426], "km": [58, 81, 377, 426], "outer": [58, 63, 81, 86, 98, 377, 426, 638, 641, 716, 717, 718, 808, 820], "30000001": [58, 81, 377, 426, 546, 635, 646, 751], "40000001": [58, 62, 74, 81, 103, 104, 113, 116, 297, 368, 377, 426, 627, 637, 646, 667, 751], "60000002": [58, 81, 94, 104, 377, 382, 426, 506, 508, 542, 635, 762], "80000001": [58, 81, 377, 382, 426, 506, 508], "60000001": [58, 81, 377, 426], "90000004": [58, 81, 377, 426, 648, 762], "20000002": [58, 81, 377, 426, 542, 635], "20000005": [58, 60, 81, 297, 305, 308, 309, 368, 377, 426, 616], "00000012": [58, 81, 377, 426], "49999994": [58, 81, 377, 426], "00000006": [58, 81, 377, 426], "60000014": [58, 81, 377, 426], "19999993": [58, 81, 377, 426], "80000007": [58, 81, 377, 426, 542, 635], "20000017": [58, 81, 377, 426], "89999992": [58, 81, 377, 426], "60000008": [58, 81, 377, 426], "80000019": [58, 81, 354, 373, 377, 426], "4000001": [58, 81, 85, 377, 426, 637, 660, 667], "cond": [58, 81, 124, 377, 629, 857], "933034373659268": [58, 427], "diagflat": [58, 81, 377, 437, 442], "offset": [58, 63, 66, 77, 81, 86, 89, 135, 377, 382, 428, 502, 503, 504, 630, 638, 643, 672, 692, 738, 784], "padding_valu": [58, 81, 377, 428], "right_left": [58, 81, 377, 428], "num_row": [58, 81, 377, 428], "num_col": [58, 81, 377, 428], "dot": [58, 62, 81, 85, 98, 377, 378, 444, 453, 637, 638, 664, 667, 694, 808, 814, 821, 830], "eig": [58, 63, 81, 377, 638, 674, 675], "37228132": [58, 81, 377, 430, 432, 673], "82456484": [58, 430, 673], "41597356": [58, 430, 673], "56576746": [58, 430, 673], "90937671": [58, 430, 673], "eigh_tridiagon": [58, 81, 377], "eigvals_onli": [58, 81, 377, 431], "select_rang": [58, 81, 377, 431], "tol": [58, 81, 102, 377, 431, 446, 452], "eigenvalu": [58, 63, 81, 86, 98, 99, 377, 430, 431, 432, 638, 673, 674, 675, 681], "eigenvector": [58, 81, 377, 430, 431, 638, 673, 674], "interv": [58, 67, 72, 81, 90, 95, 127, 138, 139, 146, 377, 388, 431, 526, 630, 638, 640, 644, 649, 669, 694, 700, 703, 711, 740, 742, 768, 769], "converg": [58, 81, 377, 431, 863], "_2": [58, 81, 377, 431], "eig_val": [58, 81, 377, 431], "decreas": [58, 81, 377, 431, 779], "eig_vector": [58, 81, 377, 431], "38196": [58, 431], "61803": [58, 431], "eigval": [58, 81, 377], "general_inner_product": [58, 86, 377], "n_mode": [58, 86, 377, 433], "tradit": [58, 86, 377, 433], "inner": [58, 63, 77, 86, 107, 142, 377, 430, 433, 630, 638, 641, 673, 674, 678, 716, 717, 718, 808, 820, 842], "higher_order_mo": [58, 81, 377], "n_featur": [58, 81, 377, 434], "d1": [58, 81, 377, 434], "dn": [58, 81, 377, 434], "initialize_tuck": [58, 81, 377], "svd": [58, 63, 81, 86, 101, 377, 435, 441, 446, 448, 449, 450, 452, 638, 689], "truncated_svd": [58, 81, 377, 435, 446, 449, 452], "non_neg": [58, 81, 328, 370, 377, 435], "mask": [58, 62, 81, 85, 98, 376, 377, 379, 422, 435, 436, 446, 452, 492, 556, 635, 637, 660, 664, 667, 849], "svd_mask_repeat": [58, 81, 377, 435, 446, 452], "tuckertensor": [58, 81, 102, 328, 370, 377, 435, 446, 452], "scheme": [58, 81, 377, 435, 446, 825, 855, 872], "tucker": [58, 81, 328, 370, 377, 435, 446], "decomposit": [58, 63, 81, 86, 98, 99, 101, 324, 325, 326, 327, 328, 370, 377, 435, 439, 446, 449, 451, 452, 638, 668, 674, 685, 688, 820, 879], "miss": [58, 81, 377, 379, 435, 446, 452, 492, 797, 820, 821, 826, 829, 830, 833, 843, 846, 849], "everywher": [58, 81, 377, 435, 446, 452], "kron": [58, 81, 377, 442, 879], "make_svd_non_neg": [58, 81, 377, 450], "nntype": [58, 81, 377, 441], "nndsvd": [58, 81, 377, 441], "singular": [58, 63, 81, 86, 377, 435, 441, 448, 450, 638, 679, 681, 684, 688, 689, 777, 779, 831], "nndsvda": [58, 81, 377, 441], "boutsidi": [58, 81, 377, 441], "gallopoulo": [58, 81, 377, 441], "recognit": [58, 81, 377, 441, 817], "1350": [58, 81, 377, 441], "1362": [58, 81, 377, 441], "2008": [58, 81, 377, 441, 872], "matrix_exp": [58, 81, 377], "7183": [58, 81, 377, 442], "3891": [58, 81, 377, 442], "mode_dot": [58, 81, 97, 98, 102, 377], "matrix_or_vector": [58, 81, 98, 102, 377, 443], "i_1": [58, 81, 98, 99, 377, 443], "i_k": [58, 81, 98, 377, 443], "i_n": [58, 81, 98, 377, 443], "i_": [58, 81, 98, 377, 388, 443, 526], "multi_dot": [58, 81, 377], "148": [58, 80, 81, 244, 377, 444], "multi_mode_dot": [58, 81, 377], "mat_or_vec_list": [58, 81, 377, 445], "times_0": [58, 377, 445], "vec": [58, 377, 445], "times_1": [58, 377, 445], "cdot": [58, 274, 377, 445, 633], "times_n": [58, 377, 445], "partial_tuck": [58, 81, 377], "n_iter_max": [58, 81, 377, 446, 452], "verbos": [58, 81, 377, 446, 449, 452, 812, 846, 851], "return_error": [58, 81, 377, 446, 452], "variat": [58, 81, 377, 446, 452, 833, 843, 846], "reconstruct": [58, 63, 69, 81, 92, 101, 377, 379, 446, 452, 499, 638, 646, 688, 750, 752, 844], "return_erro": [58, 377, 446, 452], "svd_flip": [58, 81, 377], "u_based_decis": [58, 81, 377, 448], "basi": [58, 81, 377, 448, 822, 825, 854], "flip": [58, 65, 81, 88, 98, 232, 377, 379, 448, 476, 477, 633, 640, 842, 853, 854, 856], "decis": [58, 81, 377, 448, 814, 825, 831, 849, 851, 853, 872], "u_adjust": [58, 81, 377, 448], "v_adjust": [58, 81, 377, 448], "tensor_train": [58, 81, 377], "tt": [58, 81, 327, 370, 377, 449, 451], "kth": [58, 377, 449], "tttensor": [58, 101, 327, 370, 377, 449], "compute_uv": [58, 63, 81, 86, 377, 450, 638, 688], "n_eigenvec": [58, 81, 377, 450], "returnedv": [58, 450], "vh": [58, 63, 81, 86, 377, 450, 638, 688], "eigen": [58, 81, 377, 450], "namedtupl": [58, 63, 69, 81, 86, 92, 377, 379, 430, 450, 499, 638, 646, 673, 674, 685, 686, 688, 750, 751, 752], "tt_matrix_to_tensor": [58, 81, 377], "rank_k": [58, 81, 377, 451], "left_dim_k": [58, 81, 377, 451], "right_dim_k": [58, 81, 377, 451], "rank_": [58, 81, 377, 451], "49671414": [58, 81, 377, 451, 644, 741], "1382643": [58, 81, 377, 451, 644, 741], "64768857": [58, 81, 377, 451, 644, 741], "5230298": [58, 81, 377, 451, 644, 741], "23415337": [58, 81, 377, 451, 644, 741], "23413695": [58, 81, 377, 451, 644, 741], "57921278": [58, 81, 377, 451], "76743472": [58, 81, 377, 451], "1163073": [58, 81, 377, 451], "11629914": [58, 81, 377, 451], "03237505": [58, 81, 377, 451], "03237278": [58, 81, 377, 451], "78441733": [58, 81, 377, 451], "38119566": [58, 81, 377, 451], "21834874": [58, 81, 377, 451], "10610882": [58, 81, 377, 451], "15165846": [58, 81, 377, 451], "15164782": [58, 81, 377, 451], "35662258": [58, 81, 377, 451], "35659757": [58, 81, 377, 451], "02283812": [58, 81, 377, 451], "49705869": [58, 81, 377, 451], "40518808": [58, 81, 377, 451], "16882598": [58, 81, 377, 451], "fixed_factor": [58, 81, 377, 452], "tl": [58, 81, 377, 452], "kolda": [58, 81, 377, 452], "bader": [58, 81, 377, 452], "siam": [58, 81, 377, 449, 452], "review": [58, 81, 377, 452, 816, 817, 820, 822, 828, 830, 833, 843, 847], "vol": [58, 81, 377, 452], "pp": [58, 81, 377, 452], "455": [58, 81, 377, 452], "2009": [58, 81, 377, 452], "_arraywithlossesexperiment": [58, 103], "hinge_embedding_loss": [58, 81, 378], "margin": [58, 81, 378, 453, 460, 843], "measur": [58, 378, 453, 637, 664, 793], "semi": [58, 378, 453], "l_n": [58, 378, 453], "x_n": [58, 378, 453], "y_n": [58, 378, 453], "ell": [58, 378, 453], "operatornam": [58, 285, 287, 378, 453, 633, 638, 674], "l_1": [58, 378, 453], "hyperparamet": [58, 81, 378, 453], "aggreg": [58, 81, 378, 453, 646, 750, 830], "unreduc": [58, 81, 378, 453], "hing": [58, 81, 378, 453, 460], "target_tensor": [58, 378, 453, 458], "huber_loss": [58, 81, 378], "delta": [58, 60, 81, 83, 378, 454, 616, 636], "transit": [58, 81, 378, 454, 872], "huber": [58, 81, 378, 454], "kl_div": [58, 81, 378], "log_target": [58, 81, 378, 455], "contai": [58, 455], "batchmean": [58, 378, 455], "kullback": [58, 81, 378, 455], "leibler": [58, 81, 378, 455], "0916": [58, 455], "l1_loss": [58, 81, 378, 457], "l1": [58, 63, 81, 86, 378, 382, 454, 456, 457, 459, 505, 638, 695, 829, 854], "targetict": [58, 81, 378, 456, 457, 459, 460], "20000000000000004": [58, 456], "log_poisson_loss": [58, 81, 378], "compute_full_loss": [58, 81, 378, 457, 794], "favor": [58, 81, 378, 457], "likelihood": [58, 81, 378, 457, 458], "28402555": [58, 378, 457], "03402555": [58, 378, 457], "1573164": [58, 378, 457], "poisson_nll_loss": [58, 81, 378], "log_input": [58, 81, 378, 458], "poisson": [58, 81, 378, 383, 457, 458], "assumpt": [58, 378, 457, 458], "minu": [58, 378, 457, 458], "omiss": [58, 378, 458], "stirl": [58, 81, 378, 457, 458], "1977562": [58, 458], "smooth_l1_loss": [58, 81, 378], "smooth": [58, 64, 81, 87, 378, 454, 459, 639, 697, 698, 699, 841], "8125": [58, 459], "soft_margin_loss": [58, 81, 378], "soft": [58, 81, 308, 378, 379, 460, 492, 832], "35667497": [58, 460], "22314353": [58, 460], "60943791": [58, 460], "_arraywithmanipulationexperiment": [58, 103], "as_strid": [58, 81, 379], "nativeshap": [58, 62, 65, 67, 81, 88, 90, 128, 129, 131, 136, 143, 149, 379, 383, 461, 473, 478, 486, 489, 509, 510, 511, 512, 513, 578, 591, 597, 599, 630, 635, 637, 640, 644, 650, 652, 654, 656, 658, 707, 740, 741, 742, 838, 840], "byte": [58, 59, 77, 81, 82, 103, 135, 379, 461, 572, 630, 635, 877, 878], "associative_scan": [58, 81, 379], "revers": [58, 59, 63, 71, 81, 86, 94, 103, 104, 367, 375, 376, 377, 379, 388, 422, 438, 462, 476, 477, 524, 525, 545, 635, 638, 640, 648, 693, 704, 758, 759, 820, 829, 830, 831, 833, 834, 842, 843, 849, 856, 857], "scan": [58, 81, 379, 462, 857], "atleast_1d": [58, 81, 379], "ari": [58, 81, 379, 463, 464, 465, 471, 480, 500], "a1": [58, 82, 379, 463, 464, 465, 469, 538], "a2": [58, 82, 379, 463, 464, 465, 469, 538], "atleast_2d": [58, 81, 379], "atleast_3d": [58, 81, 379], "column_stack": [58, 81, 379], "concat_from_sequ": [58, 81, 379], "input_sequ": [58, 81, 379, 470], "new_axi": [58, 81, 379, 470, 856], "dsplit": [58, 81, 379], "indices_or_sect": [58, 81, 379, 471, 480, 500], "3rd": [58, 81, 379, 471], "dstack": [58, 81, 379], "fill_diagon": [58, 81, 379], "fill_diag": [58, 474], "fortran": [58, 65, 81, 88, 379, 475, 640, 707, 872, 876], "layout": [58, 65, 81, 88, 379, 475, 640, 707, 827, 842, 843, 849], "fliplr": [58, 81, 379, 842], "diag": [58, 63, 81, 86, 99, 379, 476, 477, 638, 674, 851], "flipud": [58, 81, 379, 842], "fold": [58, 81, 379, 486, 487, 830], "unfold": [58, 81, 98, 99, 101, 377, 379, 435, 478, 486, 488], "folded_tensor": [58, 379, 478], "heavisid": [58, 81, 379], "5000": [58, 379, 479, 638, 677, 808], "hsplit": [58, 81, 379], "horizont": [58, 81, 379, 469, 480, 546, 635], "hstack": [58, 81, 379, 469], "i0": [58, 81, 379, 388, 526], "bessel": [58, 71, 81, 94, 318, 370, 379, 482, 648, 765, 767], "kind": [58, 71, 81, 166, 169, 170, 388, 482, 524, 525, 530, 631, 648, 758, 759, 764, 766, 777, 778, 819, 843, 846, 849, 851, 857], "26606588": [58, 81, 379, 482], "2795853": [58, 81, 379, 482], "88079259": [58, 81, 379, 482], "row_mod": [58, 81, 379, 483], "column_mod": [58, 81, 379, 483], "ascend": [58, 70, 81, 93, 379, 386, 483, 516, 647, 754, 756, 823], "prod": [58, 59, 71, 82, 94, 377, 379, 436, 438, 483, 532, 547, 635, 648, 777, 808, 831, 833, 851, 869], "moveaxi": [58, 81, 379], "destin": [58, 81, 379, 484], "unstack": [58, 65, 75, 88, 484, 640, 829, 851, 854, 879], "reorder": [58, 65, 81, 88, 379, 484, 546, 635, 640, 704, 845], "stat_length": [58, 81, 379, 485], "constant_valu": [58, 81, 379, 485], "end_valu": [58, 81, 379, 485], "reflect_typ": [58, 81, 379, 485], "partial_fold": [58, 81, 379], "skip_begin": [58, 81, 379, 486, 487, 488, 489], "untouch": [58, 81, 379, 486, 487, 488, 489], "partial_tensor_to_vec": [58, 81, 379], "skip_end": [58, 81, 379, 487, 488], "vectoris": [58, 81, 98, 379, 487, 489], "partial_unfold": [58, 81, 379], "ravel_tensor": [58, 81, 379, 488], "n_1": [58, 81, 379, 488], "n_2": [58, 81, 379, 488], "n_i": [58, 81, 377, 379, 436, 488], "partial_vec_to_tensor": [58, 81, 379], "put_along_axi": [58, 81, 379], "rot90": [58, 81, 379, 842], "rotat": [58, 81, 379, 491], "soft_threshold": [58, 81, 379], "behav": [58, 81, 336, 337, 373, 377, 379, 430, 493, 638, 673, 825, 835, 840, 842, 843, 844, 853, 873], "invalid": [58, 72, 81, 95, 379, 493, 638, 640, 649, 694, 703, 768, 769, 777, 821, 831], "slice": [58, 71, 75, 81, 82, 94, 99, 148, 329, 370, 379, 468, 490, 493, 494, 553, 554, 556, 582, 630, 635, 642, 648, 728, 763, 846, 872], "inexact": [58, 81, 347, 373, 379, 493], "largest": [58, 75, 81, 166, 169, 377, 379, 448, 493, 495, 631, 638, 679, 688], "take_along_axi": [58, 81, 379], "arr": [58, 59, 78, 81, 174, 379, 468, 490, 494, 578, 631, 831, 832], "top_k": [58, 81, 379], "sort": [58, 69, 75, 81, 92, 104, 200, 293, 377, 379, 388, 430, 495, 516, 530, 632, 633, 638, 646, 673, 674, 688, 689, 750, 754, 755, 756, 779, 819, 830, 845, 847], "trim_zero": [58, 81, 379], "fb": [58, 81, 379, 496], "front": [58, 81, 379, 496, 843, 850, 851, 854, 861, 870, 872], "unflatten": [58, 81, 379], "unfolded_tensor": [58, 379, 498], "unique_consecut": [58, 81, 379], "vsplit": [58, 81, 379], "vertic": [58, 81, 379, 500, 501, 546, 635, 822], "_arraywithnormsexperiment": [58, 103], "varianc": [58, 71, 81, 94, 382, 502, 504, 648, 767, 792, 796], "nsc": [58, 81, 382, 502, 503, 504, 796], "braodcast": [58, 81, 382, 502], "running_mean": [58, 81, 382, 502, 504, 796], "running_var": [58, 81, 382, 502, 504, 796], "nc": [58, 81, 382, 502, 503, 504, 796], "group_norm": [58, 81, 382], "num_group": [58, 81, 382, 503], "instance_norm": [58, 81, 382], "l1_normal": [58, 81, 382], "33333334": [58, 81, 299, 368, 382, 505, 508, 542, 618, 635, 636, 637, 638, 659, 695], "33333337": [58, 138, 382, 505, 618, 630, 636], "28571439": [58, 382, 505], "l2_normal": [58, 81, 382, 508], "l2": [58, 63, 86, 97, 98, 382, 506, 508, 638, 695, 793, 829], "44721359": [58, 81, 382, 506, 508], "89442718": [58, 81, 382, 506, 508, 542, 635], "lp_normal": [58, 81, 382], "lp": [58, 382, 508], "_arraywithrandomexperiment": [58, 103], "bernoulli": [58, 81, 376, 383, 400, 401, 402], "event": [58, 81, 383, 509, 846], "parameter": [58, 67, 81, 90, 383, 509, 510, 512, 513, 644, 739, 741, 742], "odd": [58, 81, 279, 379, 383, 485, 509, 633, 808, 819, 825], "drawn": [58, 67, 81, 90, 383, 509, 510, 511, 512, 513, 644, 739, 740, 741, 742, 777, 778, 779, 792, 846], "dirichlet": [58, 81, 383], "10598304": [58, 383, 511], "21537054": [58, 383, 511], "67864642": [58, 383, 511], "48006698": [58, 383, 511], "07472073": [58, 383, 511], "44521229": [58, 383, 511], "55479872": [58, 383, 511], "05426367": [58, 383, 511], "39093761": [58, 383, 511], "19531053": [58, 383, 511], "51675832": [58, 383, 511], "28793114": [58, 383, 511], "12315625": [58, 383, 511], "29823365": [58, 383, 511], "5786101": [58, 383, 511], "15564976": [58, 383, 511], "50542368": [58, 383, 511], "33892656": [58, 383, 511], "1325352": [58, 383, 511], "44439589": [58, 383, 511], "42306891": [58, 383, 511], "gamma": [58, 66, 81, 89, 343, 355, 373, 383, 388, 527, 643, 738], "lam": [58, 81, 383, 513], "_arraywithsearchingexperiment": [58, 103], "unravel_index": [58, 81, 384], "unravel": [58, 81, 384, 514], "_arraywithsetexperiment": [58, 103], "_arraywithsortingexperiment": [58, 103], "lexsort": [58, 81, 386], "indirectli": [58, 81, 386, 516], "statist": [58, 81, 96, 379, 485, 796, 812, 820, 831, 846, 847, 872], "_arraywithstatisticalexperiment": [58, 103], "bincount": [58, 81, 388], "minlength": [58, 81, 388, 521], "corrcoef": [58, 81, 388], "rowvar": [58, 81, 388, 522, 523], "relationship": [58, 81, 522, 792, 845], "cov": [58, 81, 388], "ddof": [58, 81, 388, 523], "fweight": [58, 81, 388, 523], "aweight": [58, 81, 388, 523], "overridden": [58, 81, 388, 523, 797, 826], "assign": [58, 81, 98, 388, 523, 820, 822, 827, 831, 842, 845, 853], "covari": [58, 81, 388, 523], "cummax": [58, 81, 388], "exclus": [58, 59, 71, 75, 81, 82, 94, 127, 377, 388, 446, 524, 525, 565, 566, 569, 630, 635, 644, 648, 740, 758, 759, 817, 829, 831, 839, 856, 876, 878], "cumul": [58, 71, 81, 94, 388, 524, 525, 648, 758, 759], "uint64": [58, 71, 163, 168, 170, 171, 181, 183, 186, 388, 524, 525, 631, 648, 758, 759, 764, 766, 777, 778, 831, 846, 851], "uint16": [58, 71, 158, 163, 168, 169, 178, 388, 524, 525, 631, 648, 758, 759, 764, 766, 777, 778, 831, 843, 846, 851], "uint32": [58, 71, 163, 168, 169, 170, 192, 388, 524, 525, 631, 648, 758, 759, 764, 766, 777, 778, 831, 846, 851], "cummin": [58, 81, 388], "histogram": [58, 81, 388], "extend_lower_interv": [58, 81, 388, 526], "extend_upper_interv": [58, 81, 388, 526], "densiti": [58, 81, 388, 526], "monoton": [58, 81, 388, 526], "rightmost": [58, 81, 388, 526], "c1": [58, 81, 388, 526, 829], "ff": [58, 81, 388, 526], "c_": [58, 81, 99, 388, 526], "igamma": [58, 81, 388], "incomplet": [58, 81, 388, 527, 822], "3614": [58, 81, 388, 527], "2085": [58, 81, 388, 527], "median": [58, 81, 379, 388, 485, 530], "nanmean": [58, 81, 388], "6666666666666665": [58, 81, 388, 529], "nanmedian": [58, 81, 388], "overwrite_input": [58, 81, 388, 530], "treat": [58, 75, 81, 104, 279, 357, 373, 379, 382, 388, 494, 507, 530, 532, 633, 774, 841, 846, 852, 856], "undefin": [58, 81, 379, 388, 389, 485, 530, 534, 831, 835, 841], "nanmin": [58, 81, 388], "nanprod": [58, 81, 388], "Not": [58, 81, 357, 373, 377, 388, 432, 532, 628, 827, 835, 844, 854, 855, 857], "quantil": [58, 81, 388, 869], "inclus": [58, 81, 127, 388, 533, 630, 644, 740, 815, 827, 842, 849], "midpoint": [58, 81, 388, 533], "surround": [58, 81, 388, 533, 849], "whichev": [58, 81, 388, 533], "_arraywithutilityexperiment": [58, 103], "optional_get_el": [58, 81, 389], "empti": [58, 59, 71, 75, 82, 94, 127, 379, 389, 485, 534, 541, 578, 630, 635, 638, 642, 648, 649, 692, 695, 733, 763, 764, 766, 768, 769, 820, 821, 826, 828, 831, 832, 842], "_arraywithgener": [59, 103], "all_equ": [59, 82, 635], "equality_matrix": [59, 82, 535, 635], "array_equ": [59, 82, 635], "assert_supports_inplac": [59, 82, 635], "ivybackendexcept": [59, 82, 539, 563, 635, 809, 826, 832, 835, 836], "clip_matrix_norm": [59, 82, 635], "894": [59, 82, 541, 542, 635, 643, 738], "clip_vector_norm": [59, 82, 635], "default_v": [59, 545, 635], "catch_except": [59, 545, 635], "rev": [59, 545, 635], "with_cal": [59, 545, 635], "catch": [59, 545, 635, 840, 846], "einops_rearrang": [59, 82, 635], "axes_length": [59, 82, 546, 547, 548, 635], "arrang": [59, 546, 635], "rearrang": [59, 82, 546, 548, 635, 845], "einops_reduc": [59, 82, 635, 831], "einops_repeat": [59, 82, 635], "fourier_encod": [59, 82, 635], "max_freq": [59, 82, 550, 635], "oppos": [59, 82, 550, 635, 831], "geometr": [59, 82, 550, 635, 638, 693], "0000000e": [59, 82, 550, 635], "2246468e": [59, 82, 550, 635], "4492936e": [59, 550, 635], "6739404e": [59, 82, 550, 635], "batch_dim": [59, 82, 553, 554, 635, 799], "gather_nd": [59, 82, 635], "get_num_dim": [59, 82, 635], "as_arrai": [59, 82, 557, 591, 635, 799], "has_nan": [59, 82, 635], "include_inf": [59, 82, 559, 614, 635], "inplace_decr": [59, 82, 635], "decrement": [59, 82, 561, 635], "inplace_incr": [59, 82, 635], "increment": [59, 82, 562, 635, 822, 872], "inplace_upd": [59, 82, 581, 635, 790, 842], "ensure_in_backend": [59, 82, 563, 635, 842], "keep_input_dtyp": [59, 82, 563, 635, 842], "is_arrai": [59, 82, 635, 842, 843], "is_ivy_arrai": [59, 82, 635, 842, 853], "is_ivy_contain": [59, 635], "is_native_arrai": [59, 82, 177, 566, 631, 635, 853], "isin": [59, 82, 635, 869], "test_el": [59, 82, 570, 635], "assume_uniqu": [59, 82, 570, 635], "invert": [59, 82, 232, 570, 633, 635, 638, 680], "scatter_flat": [59, 82, 635], "occupi": [59, 166, 169, 577, 578, 631, 635], "scatter_nd": [59, 82, 635, 849, 853], "stable_divid": [59, 82, 635, 839], "denomin": [59, 66, 82, 89, 584, 593, 607, 635, 643, 738, 796, 839, 848, 857, 869], "min_denomin": [59, 82, 584, 593, 607, 635, 848], "_min_denomin": [59, 593, 635], "stable_pow": [59, 82, 635], "min_bas": [59, 82, 583, 594, 606, 635, 796, 848], "stabl": [59, 70, 82, 93, 148, 329, 336, 337, 370, 373, 386, 516, 583, 584, 593, 594, 606, 607, 630, 635, 647, 754, 757, 779, 821, 827, 831, 843, 848, 851, 857], "00004": [59, 82, 594, 635], "00008": [59, 82, 594, 635], "00004000e": [59, 594], "56002560e": [59, 594], "60001200e": [59, 594], "09602048e": [59, 594], "supports_inplace_upd": [59, 82, 635], "to_fil": 59, "fid": 59, "sep": 59, "format_": 59, "recov": [59, 835, 843], "to_scalar": [59, 82, 635], "value_is_nan": [59, 82, 635], "_arraywithgradi": [60, 103], "adam_step": [60, 83, 636], "mw": [60, 83, 616, 617, 636, 855], "vw": [60, 83, 616, 617, 636, 855], "beta1": [60, 83, 537, 616, 617, 622, 635, 636, 797, 855], "beta2": [60, 83, 537, 616, 617, 622, 635, 636, 797, 855], "epsilon": [60, 63, 64, 83, 86, 87, 537, 616, 617, 622, 635, 636, 638, 639, 681, 684, 697, 698, 699, 789, 794, 796, 797, 829, 839, 842, 855], "dc": [60, 83, 616, 617, 620, 622, 623, 624, 636], "dw": [60, 83, 616, 617, 620, 622, 623, 624, 636], "forget": [60, 83, 616, 617, 622, 636, 797, 814, 831], "dcdw": [60, 83, 616, 617, 620, 622, 623, 636], "adam_step_delta": [60, 83, 616, 636], "2020105": [60, 616, 636], "22187898": [60, 616, 636], "24144873": [60, 616, 636], "10000002": [60, 94, 297, 368, 616, 762], "00300002": [60, 616], "00800002": [60, 616], "adam_upd": [60, 83, 636, 855], "mw_tm1": [60, 83, 617, 622, 636], "vw_tm1": [60, 83, 617, 622, 636], "ws_new": [60, 83, 617, 622, 623, 624, 636], "updated_weight": [60, 83, 617, 636], "92558753": [60, 617], "92558873": [60, 617, 636], "92558718": [60, 617, 636], "00000063e": [60, 83, 617, 636], "00000016e": [60, 83, 617, 636], "00000086e": [60, 83, 617, 636], "gradient_descent_upd": [60, 83, 636, 641, 716, 717, 718], "descent": [60, 83, 620, 636, 797, 855, 872], "new_weight": [60, 83, 620, 622, 623, 636, 854], "lamb_upd": [60, 83, 636], "max_trust_ratio": [60, 83, 622, 636, 797], "decay_lambda": [60, 83, 622, 623, 636, 797], "trust": [60, 83, 622, 636, 797], "ratio": [60, 83, 622, 636, 797], "decai": [60, 83, 622, 623, 636, 797], "lamb": [60, 83, 622, 636, 797, 855], "784": [60, 622, 636], "lars_upd": [60, 83, 636], "lar": [60, 83, 623, 636, 797, 855], "34077978": [60, 623, 636], "78025991": [60, 623, 636], "56051969": [60, 623, 636], "78026009": [60, 623, 636], "56051981": [60, 623, 636], "12103939": [60, 623, 636], "optimizer_upd": [60, 83, 636], "effective_grad": [60, 83, 624, 636], "3e": [60, 83, 624, 636], "preserve_typ": [60, 83, 625, 636], "_arraywithimag": [61, 103], "_arraywithlay": [62, 103], "conv1d": [62, 85, 637, 793, 805], "filter_format": [62, 85, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658], "channel_last": [62, 85, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658, 777], "x_dilat": [62, 85, 637, 650, 651, 653, 654, 655, 657], "d_out": [62, 85, 376, 393, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658], "channel_first": [62, 85, 637, 650, 651, 652, 653, 654, 655, 656, 657, 658], "wio": [62, 637, 650, 651, 652, 657], "conv1d_transpos": [62, 85, 637], "output_shap": [62, 85, 637, 650, 652, 654, 656, 658, 793], "iow": [62, 85, 637, 652], "woi": [62, 85, 637, 652], "fh": [62, 85, 637, 642, 650, 653, 654, 655, 656, 657, 658, 659, 731], "hwio": [62, 637, 650, 651, 653, 657], "conv2d_transpos": [62, 85, 637], "iohw": [62, 85, 637, 654], "hwoi": [62, 85, 637, 654], "conv3d": [62, 85, 637, 656, 793, 805], "fd": [62, 85, 637, 650, 655, 656, 657, 658], "conv3d_transpos": [62, 85, 637, 658], "iodhw": [62, 85, 637, 656, 658], "dhwoi": [62, 85, 637, 656, 658], "depthwise_conv2d": [62, 85, 637], "randint": [62, 67, 69, 85, 90, 644, 646, 659, 663, 750, 831, 865], "noise_shap": [62, 85, 637, 660], "42857146": [62, 637, 660], "85714293": [62, 637, 660], "28571415": [62, 85, 637, 660], "71428585": [62, 85, 637, 660], "14285755": [62, 85, 637, 660], "5714283": [62, 637, 660], "4285717": [62, 85, 637, 660], "8571434": [62, 85, 637, 660], "2857151": [62, 637, 660], "dropout1d": [62, 85, 376, 401], "dropout2d": [62, 85, 376], "dropout3d": [62, 85, 376], "outer_batch_shap": [62, 85, 637, 661], "inner_batch_shap": [62, 85, 637, 661], "lstm_updat": [62, 85, 637, 851], "init_h": [62, 85, 637, 663, 851], "init_c": [62, 85, 637, 663, 851], "recurrent_kernel": [62, 85, 637, 663, 851], "recurrent_bia": [62, 85, 637, 663, 851], "hidden": [62, 85, 637, 662, 663, 793, 828, 835, 851, 855], "recurr": [62, 81, 85, 376, 422, 637, 663, 851, 872, 876], "timestep": [62, 81, 85, 376, 422, 637, 662, 663, 664, 793, 851], "h_i": [62, 85, 663], "c_i": [62, 85, 663], "rc": [62, 85, 663], "multi_head_attent": [62, 85, 637, 842], "num_head": [62, 85, 637, 664, 793], "in_proj_weight": [62, 85, 637, 664], "q_proj_weight": [62, 85, 637, 664], "k_proj_weight": [62, 85, 637, 664], "v_proj_weight": [62, 85, 637, 664], "out_proj_weight": [62, 85, 637, 664], "in_proj_bia": [62, 85, 637, 664], "out_proj_bia": [62, 85, 637, 664], "is_caus": [62, 85, 637, 664, 667], "key_padding_mask": [62, 85, 637, 664], "bias_k": [62, 85, 637, 664], "bias_v": [62, 85, 637, 664], "static_k": [62, 85, 637, 664], "static_v": [62, 85, 637, 664], "add_zero_attn": [62, 85, 637, 664], "return_attention_weight": [62, 85, 637, 664], "average_attention_weight": [62, 85, 637, 664], "scaled_dot_product_attent": [62, 85, 637], "dropout_p": [62, 85, 637, 667], "num_queri": [62, 85, 637, 667], "feat_dim": [62, 85, 637, 667], "num_kei": [62, 85, 637, 667], "causal": [62, 85, 637, 664, 667], "attent": [62, 85, 637, 664, 667, 793, 822, 826, 862], "29999995": [62, 297, 298, 308, 368, 376, 420, 637, 646, 667, 751], "19994521": [62, 637, 667], "09994531": [62, 637, 667], "30000019": [62, 379, 469, 637, 667], "_arraywithlinearalgebra": [63, 103], "choleski": [63, 86, 638, 842], "625": [63, 81, 349, 638, 668], "vif": [63, 86, 669], "det": [63, 86, 638, 686, 830], "axis1": [63, 65, 86, 88, 638, 640, 672, 692, 712], "axis2": [63, 86, 638, 672, 692], "eigh": [63, 86, 377, 430, 638, 673], "uplo": [63, 86, 638, 674, 675], "eigvalsh": [63, 86, 638], "array_lik": [63, 86, 376, 378, 379, 421, 454, 455, 459, 460, 490, 638, 676, 683, 808], "203": [63, 80, 230, 638, 643, 676, 738], "233": [63, 638, 676], "inv": [63, 86, 638], "transpose_a": [63, 86, 638, 678], "transpose_b": [63, 86, 638, 678], "adjoint_a": [63, 86, 638, 678], "adjoint_b": [63, 86, 638, 678], "matrix_norm": [63, 86, 638], "ord": [63, 86, 638, 679, 695], "fro": [63, 86, 378, 454, 638, 679], "nuc": [63, 86, 638, 679], "performingth": [63, 679], "matrix_pow": [63, 86, 638], "matrix_rank": [63, 86, 638], "hermitian": [63, 86, 377, 430, 431, 638, 673, 674, 675, 681, 688], "largest_singular_valu": [63, 86, 638, 681, 684], "defici": [63, 638, 681], "matrix_transpos": [63, 86, 638, 853], "pinv": [63, 86, 638], "pseudo": [63, 86, 638, 684, 841], "99999988": [63, 86, 638, 684], "qr": [63, 86, 638, 844], "12309149": [63, 638, 685], "90453403": [63, 638, 685], "40824829": [63, 638, 685], "49236596": [63, 638, 685], "30151134": [63, 638, 685], "81649658": [63, 638, 685], "86164044": [63, 638, 685], "12403841e": [63, 638, 685], "60113630e": [63, 638, 685], "10782342e": [63, 638, 685], "04534034e": [63, 638, 685], "80906807e": [63, 638, 685], "88178420e": [63, 86, 638, 675, 685], "slogdet": [63, 86, 638], "logabsdet": [63, 86, 638, 686], "natur": [63, 86, 244, 262, 263, 264, 265, 284, 355, 373, 633, 638, 686, 826, 833, 835, 844, 862], "098611": [63, 638, 686], "full_matric": [63, 86, 638, 688], "svf": [63, 688], "reconstructed_x": [63, 638, 688], "svdval": [63, 86, 638], "tensorsolv": [63, 86, 638], "vander": [63, 86, 638], "vandermond": [63, 86, 638, 693], "vecdot": [63, 86, 638], "vector_norm": [63, 86, 638], "mathemat": [63, 86, 224, 229, 241, 246, 248, 264, 274, 628, 633, 638, 679, 695, 831, 843, 849, 872, 878], "manhattan": [63, 86, 638, 695], "euclidean": [63, 86, 98, 99, 638, 695], "7416575": [63, 86, 638, 695], "vector_to_skew_symmetric_matrix": [63, 86, 638], "_arraywithloss": [64, 103], "binary_cross_entropi": [64, 87, 639, 830], "pos_weight": [64, 87, 639, 697], "crossentropi": [64, 87, 639, 697], "26765382": [64, 639, 697], "34657359": [64, 639, 698], "sparse_cross_entropi": [64, 87, 639], "07438118": [64, 87, 699], "11889165": [64, 699], "_arraywithmanipul": [65, 103], "x_min": [65, 88, 640, 700, 856], "x_max": [65, 88, 640, 700, 856], "before_1": [65, 88, 379, 485, 640, 702, 715], "after_1": [65, 88, 379, 485, 640, 702, 715], "before_n": [65, 88, 379, 485, 640, 702, 715], "after_n": [65, 88, 379, 485, 640, 702, 715], "repetit": [65, 88, 640, 706, 713, 849], "flat": [65, 75, 88, 384, 514, 577, 635, 640, 706], "allowzero": [65, 88, 640, 707], "remain": [65, 68, 81, 88, 91, 224, 241, 242, 248, 256, 257, 274, 277, 283, 285, 376, 400, 401, 402, 421, 633, 640, 642, 645, 707, 725, 748, 808, 821, 822, 830, 833, 835, 839, 847, 849, 857], "roll": [65, 88, 640, 838, 869], "shift": [65, 77, 88, 104, 137, 148, 233, 235, 329, 370, 630, 633, 640, 708, 821, 822, 832, 833, 838, 845, 869], "restor": [65, 88, 640, 708, 837], "num_or_size_split": [65, 75, 88, 640, 709, 851], "with_remaind": [65, 75, 88, 640, 709], "squeezabl": [65, 640, 710], "swapax": [65, 88, 640], "axis0": [65, 88, 640, 712], "swap_ax": [65, 712], "swap": [65, 88, 640, 712, 802, 866], "tile": [65, 82, 88, 548, 640], "unpack": [65, 88, 640, 714, 844, 846], "zero_pad": [65, 88, 640], "_arraywithnorm": [66, 103], "layer_norm": [66, 89, 643], "normalized_idx": [66, 89, 643, 738], "new_std": [66, 89, 643, 738, 796], "learnabl": [66, 89, 637, 641, 643, 662, 718, 738, 793, 796, 856], "0976": [66, 643, 738], "3452": [66, 643, 738], "2740": [66, 643, 738], "1047": [66, 643, 738], "5886": [66, 643, 738], "2732": [66, 643, 738], "7696": [66, 643, 738, 777], "7024": [66, 643, 738], "2518": [66, 643, 738], "826": [66, 643, 738], "178": [66, 643, 738], "981": [66, 643, 738], "831": [66, 643, 738], "421": [66, 643, 738], "_arraywithrandom": [67, 103], "multinomi": [67, 90, 383, 511, 644], "population_s": [67, 90, 644, 739], "num_sampl": [67, 90, 644, 739], "unnorm": [67, 90, 644, 739, 846], "popul": [67, 71, 75, 90, 94, 644, 648, 739, 765, 767, 831, 832, 842, 846, 851, 878], "draw": [67, 90, 383, 509, 511, 513, 644, 739, 741, 742, 777, 778, 779, 780, 785, 792, 820, 825, 844, 846], "half": [67, 90, 127, 288, 630, 633, 644, 740, 742, 818, 836, 849], "235": [67, 741], "float16": [67, 78, 90, 135, 158, 160, 161, 166, 168, 347, 373, 630, 631, 638, 695, 741, 742, 777, 778, 818, 831, 836, 843, 846], "807": [67, 741], "_arraywithsearch": [68, 103], "select_last_index": [68, 91, 645, 745, 746], "occurr": [68, 379, 388, 499, 521, 645, 646, 745, 746, 750], "argmin": [68, 91, 645, 869], "output_dtyp": [68, 91, 645, 746], "argwher": [68, 91, 645], "nonzero": [68, 91, 99, 222, 223, 224, 227, 230, 239, 241, 244, 246, 248, 274, 287, 292, 633, 645], "as_tupl": [68, 91, 645, 748], "fewer": [68, 91, 645, 748], "_arraywithset": [69, 103], "unique_al": [69, 92, 646], "by_valu": [69, 92, 646, 750], "inverse_indic": [69, 92, 379, 499, 646, 750, 752], "unique_count": [69, 92, 646], "unique_invers": [69, 92, 646], "unique_valu": [69, 92, 646], "admonit": [69, 753], "dask": [69, 646, 750, 751, 752, 753, 862], "difficult": [69, 646, 750, 751, 752, 753, 822, 825, 831, 846, 857], "omit": [69, 284, 633, 646, 750, 751, 752, 753, 838, 842, 843], "x_i": [69, 71, 80, 99, 221, 222, 223, 226, 227, 228, 230, 232, 237, 238, 239, 244, 246, 247, 254, 255, 256, 257, 258, 262, 263, 264, 265, 269, 276, 281, 284, 285, 286, 287, 288, 289, 291, 292, 294, 336, 337, 339, 360, 373, 633, 646, 648, 750, 751, 752, 753, 761, 762, 763, 765, 766, 767, 792, 834], "x_j": [69, 646, 750, 751, 752, 753], "typeerror": [69, 92, 646, 753, 853], "_arraywithsort": [70, 103], "stabil": [70, 93, 593, 594, 635, 647, 754, 757, 831, 841, 847, 849], "msort": [70, 93, 647], "searchsort": [70, 93, 647, 778], "sorter": [70, 93, 647, 756], "ret_dtyp": [70, 93, 647, 756], "_arraywithstatist": [71, 103], "cumprod": [71, 94, 648, 843, 856, 869], "cumsum": [71, 94, 648, 831, 869], "einsum": [71, 94, 648], "equat": [71, 81, 94, 315, 370, 377, 447, 638, 648, 687, 760, 777, 807, 830, 872], "operand": [71, 81, 85, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 255, 256, 257, 262, 263, 264, 265, 266, 274, 277, 279, 283, 284, 285, 286, 287, 288, 291, 292, 294, 336, 337, 360, 364, 373, 374, 376, 419, 633, 638, 648, 686, 692, 760, 761, 763, 764, 766, 807, 808, 826, 829, 834, 843], "contract": [71, 638, 648, 690, 760, 808], "seq": [71, 648, 760, 777], "ii": [71, 94, 648, 760, 822], "jk": [71, 648, 760, 808], "ik": [71, 648, 760, 808], "126": [71, 111, 280, 627, 633, 638, 648, 680, 760], "510": [71, 648, 760], "special": [71, 86, 98, 99, 103, 104, 221, 222, 223, 224, 226, 227, 228, 229, 230, 237, 238, 239, 241, 242, 244, 246, 247, 248, 255, 256, 257, 262, 263, 264, 265, 266, 269, 274, 277, 279, 283, 284, 285, 286, 287, 288, 291, 292, 294, 336, 337, 360, 373, 633, 638, 648, 686, 692, 761, 762, 763, 764, 765, 766, 767, 777, 778, 779, 780, 785, 792, 820, 823, 825, 826, 828, 830, 833, 834, 835, 838, 842, 844, 845, 846, 847, 849, 872, 873, 874], "arithmet": [71, 94, 235, 241, 274, 633, 648, 762, 843], "propag": [71, 235, 336, 337, 373, 633, 648, 761, 762, 763, 765, 766, 767, 841], "overflow": [71, 94, 224, 241, 248, 633, 638, 648, 686, 762, 766, 819, 831], "04999995": [71, 762], "freedom": [71, 94, 648, 765, 767, 827], "constitut": [71, 94, 648, 765, 767, 839, 851, 873], "commonli": [71, 94, 648, 765, 767, 835, 839, 841], "81649661": [71, 648, 765], "6666665": [71, 767, 854], "667": [71, 82, 241, 542, 593, 633, 635, 767], "_arraywithutil": [72, 103], "logic": [72, 95, 205, 241, 242, 268, 269, 270, 274, 277, 632, 633, 649, 768, 769, 820, 826, 830, 831, 832, 835, 839, 840, 841, 842, 843, 845, 846, 849, 853, 866], "AND": [72, 95, 231, 242, 268, 633, 649, 768], "OR": [72, 95, 234, 270, 277, 633, 649, 769, 821, 822, 841], "_wrap_funct": [73, 96, 828, 839, 840], "function_nam": [73, 96, 820, 847], "new_funct": [73, 96, 828], "add_ivy_array_instance_method": 73, "cl": [73, 96], "moduletyp": [73, 96, 865, 866, 867], "toi": [73, 96], "arrayexampl": 73, "hasattr": [73, 96], "_containerwithactiv": [74, 104], "dict_in": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "queue": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104, 587, 610, 635, 848, 854], "queue_load_s": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "container_combine_method": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "list_join": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "queue_timeout": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104, 587, 610, 635, 848], "print_limit": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "key_length_limit": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "print_ind": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "print_line_spac": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "ivyh": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "default_key_color": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "keyword_color_dict": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "rebuild_child_contain": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "types_to_iteratively_nest": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "alphabetical_kei": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "dynamic_backend": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 794, 795, 827, 848], "build_cal": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 104], "containerbas": [74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 829], "_static_gelu": 74, "key_chain": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 164, 166, 169, 172, 173, 174, 176, 178, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 319, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 361, 362, 363, 364, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 472, 481, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 510, 515, 516, 523, 524, 525, 526, 533, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769], "to_appli": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 164, 166, 169, 172, 173, 174, 176, 178, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 319, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 361, 362, 363, 364, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 472, 481, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 510, 515, 516, 523, 524, 525, 526, 533, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 642, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769], "prune_unappli": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 164, 166, 169, 172, 173, 174, 176, 178, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 319, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 361, 362, 363, 364, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 472, 481, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 510, 515, 516, 523, 524, 525, 526, 533, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 642, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 732, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769], "map_sequ": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 153, 154, 155, 156, 164, 166, 169, 172, 173, 174, 176, 178, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 319, 329, 330, 334, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 361, 362, 363, 364, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 419, 420, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 472, 481, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 510, 515, 516, 523, 524, 525, 526, 533, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769], "prune": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 111, 112, 113, 114, 115, 116, 117, 118, 119, 135, 137, 142, 144, 150, 154, 156, 169, 173, 174, 181, 215, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 310, 311, 312, 314, 335, 336, 337, 338, 339, 341, 343, 351, 352, 358, 360, 362, 363, 364, 400, 401, 402, 420, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 491, 493, 494, 495, 497, 502, 504, 505, 506, 508, 510, 523, 524, 525, 526, 535, 538, 539, 541, 542, 546, 547, 548, 549, 550, 553, 554, 557, 559, 561, 562, 563, 565, 566, 569, 577, 578, 592, 593, 594, 596, 598, 600, 601, 614, 620, 625, 642, 651, 652, 653, 654, 660, 661, 667, 668, 669, 674, 675, 676, 677, 678, 679, 681, 683, 685, 686, 692, 697, 698, 699, 700, 704, 707, 708, 709, 710, 711, 714, 715, 732, 733, 734, 735, 739, 740, 741, 742, 744, 747, 750, 751, 752, 753, 754, 758, 759, 762, 764, 765, 767, 768, 769, 775, 778, 830], "static_gelu": 74, "046": 74, "_static_hardswish": 74, "_static_leaky_relu": 74, "static_leaky_relu": 74, "38999999": [74, 81, 113, 296, 297, 368], "_static_log_softmax": 74, "static_log_softmax": 74, "371": [74, 114], "_static_mish": 74, "static_mish": 74, "30883577": [74, 115, 627], "28903052": [74, 115, 627], "10714479": [74, 115, 627], "_static_relu": 74, "static_relu": 74, "_static_sigmoid": 74, "static_sigmoid": 74, "2689414": [74, 117, 118, 627], "7310586": [74, 117, 118, 627], "88079703": [74, 117, 627], "62245935": [74, 117], "4750208": [74, 117], "_static_softmax": 74, "static_softmax": 74, "72844321": [74, 118], "19852395": [74, 118], "07303288": [74, 118], "_static_softplu": 74, "revert": [74, 119, 627], "static_softplu": 74, "53499615": 74, "42036411": 74, "948": [74, 119, 642, 719], "dictionari": [75, 92, 104, 213, 602, 618, 632, 635, 636, 753, 772, 774, 808, 826, 830, 831, 839, 843, 844, 854, 857], "asynchron": [75, 104, 872], "wait": [75, 104, 587, 635, 820, 822, 830, 843], "arriv": [75, 104, 587, 635, 849], "cont_list_join": [75, 104], "whitespac": [75, 104], "indent": [75, 104, 854], "newlin": [75, 104, 834], "termin": [75, 104, 821, 822, 829, 836, 837, 851, 854], "constructor": [75, 104, 537, 635, 774, 790, 798, 831, 832, 834, 853], "kept": [75, 104, 641, 716, 717, 822, 842, 847], "encount": [75, 104, 793, 818, 820, 831, 835, 836, 846], "node": [75, 82, 104, 539, 549, 596, 642, 729, 730, 792, 801, 805, 828, 829, 843, 862, 865, 866, 873], "alphabet": [75, 104], "__setitem__": [75, 379, 493, 826, 829, 853], "_cont_at_key_chains_input_as_dict": 75, "current_chain": 75, "ignore_key_error": 75, "_cont_at_key_chains_input_as_seq": 75, "_cont_call_static_method_with_flexible_arg": 75, "static_method": 75, "kw": 75, "self_idx": 75, "_cont_concat_unifi": 75, "_cont_get_dev": 75, "_cont_get_dtyp": 75, "_cont_get_shap": 75, "_cont_ivi": 75, "_cont_mean_unifi": 75, "_1": 75, "_cont_prune_key_chains_input_as_dict": 75, "return_cont": 75, "_cont_prune_key_chains_input_as_seq": 75, "_cont_slice_kei": 75, "key_slic": 75, "_cont_sum_unifi": 75, "_get_queue_item": 75, "cont_all_fals": 75, "assert_is_bool": 75, "cont_all_key_chain": 75, "include_empti": 75, "cont_all_tru": [75, 829, 854], "cont_as_bool": 75, "cont_assert_contains_sub_contain": 75, "sub_cont": 75, "screen": [75, 820, 821, 854], "cont_assert_contains_sub_structur": 75, "check_shap": [75, 799], "cont_assert_ident": 75, "check_typ": 75, "same_arrai": [75, 854], "arrays_equ": 75, "cont_assert_identical_structur": 75, "assert_and_assign": 75, "congruent": 75, "cont_at_key_chain": 75, "ignore_non": 75, "cont_at_kei": 75, "substr": 75, "cont_combin": 75, "duplic": [75, 379, 490, 558, 635, 642, 721, 827, 834, 840, 841, 844, 855, 878], "configur": [75, 213, 632, 642, 732, 821, 822, 828, 830, 831, 836, 837], "container_rightmost": 75, "cont_common_key_chain": 75, "cont_config": 75, "cont_contains_sub_contain": 75, "cont_contains_sub_structur": 75, "cont_copi": [75, 854], "cont_create_if_abs": 75, "noth": [75, 849, 878], "cont_cutoff_at_depth": 75, "depth_cutoff": 75, "cont_cutoff_at_height": 75, "height_cutoff": 75, "cont_deep_copi": [75, 854, 865], "cont_dev": 75, "cont_dev_str": 75, "cont_diff": [75, 854], "diff_kei": 75, "detect_key_diff": 75, "detect_value_diff": 75, "detect_shape_diff": 75, "container0": 75, "cont_dtyp": 75, "cont_duplicate_array_keychain": 75, "cont_find_sub_contain": 75, "sub_cont_to_find": 75, "cont_find_sub_structur": 75, "sub_struc_to_find": 75, "cont_flatten_key_chain": [75, 854], "above_height": [75, 854], "below_depth": [75, 854], "cont_format_key_chain": 75, "format_fn": 75, "cont_from_disk_as_hdf5": [75, 854], "h5_obj_or_filepath": 75, "slice_obj": 75, "disk": [75, 795, 854, 871], "h5py": 75, "filepath": [75, 649, 770, 771, 822, 825], "cont_from_disk_as_json": [75, 854], "json_filepath": 75, "cont_from_disk_as_pickl": [75, 854], "pickle_filepath": 75, "cont_from_flat_list": 75, "flat_list": 75, "hierarchi": [75, 812, 820, 845, 854, 868, 878], "cont_handle_inplac": 75, "prime": [75, 831], "overwritten": [75, 826, 827], "cont_has_kei": 75, "query_kei": 75, "somewher": [75, 830], "cont_has_key_chain": 75, "cont_ident": [75, 854], "cont_identical_array_shap": 75, "cont_identical_config": 75, "cont_identical_structur": 75, "cont_if_exist": 75, "cont_inplace_upd": 75, "cont_ivi": 75, "cont_key_chains_contain": 75, "sub_str": 75, "cont_list_stack": [75, 854], "cont_load": 75, "cont_map": [75, 829, 854], "func": [75, 98, 214, 365, 366, 367, 375, 540, 615, 618, 619, 621, 626, 632, 635, 636, 642, 732, 774, 820, 825, 826, 833, 835, 841], "cont_map_sub_cont": 75, "include_self": 75, "possibli": [75, 598, 635, 777, 846, 857], "cont_max_depth": 75, "cont_multi_map": 75, "map_nest": 75, "assert_ident": 75, "leftmost": [75, 642, 732], "cont_multi_map_in_funct": 75, "cont_num_arrai": 75, "cont_overwrite_at_key_chain": 75, "target_dict": 75, "return_dict": 75, "cont_prune_empti": 75, "keep_non": 75, "cont_prune_key_chain": 75, "key1": [75, 814, 855], "key2": [75, 814], "key3": 75, "cont_prune_key_from_key_chain": 75, "certain": [75, 127, 138, 139, 378, 455, 630, 820, 821, 822, 825, 831, 839, 845, 846, 849, 857, 865, 866, 867, 876], "cont_prune_kei": 75, "cont_prune_keys_from_key_chain": 75, "cont_reduc": 75, "cont_remove_key_length_limit": 75, "cont_remove_print_limit": 75, "cont_reshape_lik": 75, "leading_shap": 75, "cont_restructur": 75, "keep_orig": 75, "old": [75, 821, 827, 842], "cont_restructure_key_chain": 75, "keychain_map": 75, "cont_sav": 75, "cont_set_at_key_chain": 75, "cont_set_at_kei": 75, "cont_shap": [75, 637, 655], "cont_show": 75, "cont_show_sub_contain": 75, "sub_cont_or_keychain": 75, "cont_size_ordered_arrai": 75, "keychain": [75, 81, 299, 338, 463, 464, 465, 494], "cont_slice_kei": 75, "all_depth": 75, "cont_slice_via_kei": 75, "slice_kei": 75, "cont_sort_by_kei": 75, "cont_structural_diff": 75, "cont_to_dict": 75, "cont_to_disk_as_hdf5": [75, 854], "starting_index": 75, "max_batch_s": 75, "cont_to_disk_as_json": [75, 854], "cont_to_disk_as_pickl": [75, 854], "cont_to_flat_list": 75, "cont_to_iter": [75, 829], "leaf_keys_onli": 75, "cont_to_iterator_kei": 75, "cont_to_iterator_valu": 75, "cont_to_json": 75, "cont_to_nested_list": 75, "cont_to_raw": 75, "cont_trim_kei": 75, "cont_try_kc": 75, "cont_unifi": 75, "concatten": [75, 214, 632], "cont_unstack_cont": 75, "dim_siz": 75, "cont_update_config": 75, "cont_with_default_key_color": 75, "cont_with_entries_as_list": 75, "cont_with_ivy_backend": 75, "ivy_backend": [75, 844], "cont_with_key_length_limit": [75, 854], "cont_with_print_ind": [75, 854], "cont_with_print_limit": [75, 854], "cont_with_print_line_spac": 75, "h5_file_s": 75, "shuffle_h5_fil": 75, "split_cont": 75, "_is_json": 75, "_repr": 75, "_containerwithconvers": [76, 104], "_static_to_ivi": 76, "_static_to_n": 76, "_containerwithcr": [77, 104], "_static_arang": 77, "_static_asarrai": 77, "_static_copy_arrai": 77, "_static_empti": 77, "_static_empty_lik": 77, "_static_ey": 77, "n_row": [77, 81, 133, 148, 329, 370, 377, 438, 630], "n_col": [77, 81, 133, 148, 329, 370, 630], "_static_from_dlpack": 77, "_static_ful": 77, "_static_full_lik": 77, "static_full_lik": 77, "2324": [77, 137, 630], "234": [77, 80, 137, 160, 243, 294, 630, 631, 633, 637, 661, 777], "_static_linspac": 77, "_static_logspac": 77, "static_logspac": 77, "15443469": [77, 139], "64158883": [77, 139], "_static_meshgrid": 77, "_static_native_arrai": 77, "_static_one_hot": 77, "static_one_hot": 77, "_static_on": 77, "_static_ones_lik": 77, "_static_tril": 77, "_static_triu": 77, "_static_zero": 77, "_static_zeros_lik": 77, "frombuff": [77, 630], "expos": [77, 135, 543, 630, 635, 814, 830, 851, 855, 861], "x00": [77, 135, 630], "xf0": [77, 135, 630], "x01": [77, 135, 630], "x02": [77, 135, 630], "x03": [77, 135, 630], "x04": [77, 135, 630], "x05": [77, 135], "5443469": [77, 139, 630], "static_frombuff": 77, "static_triu_indic": 77, "triu_indic": [77, 630], "_containerwithdatatyp": [78, 104], "_static_astyp": 78, "718": [78, 80, 153, 270, 631], "618": [78, 80, 153, 270, 631], "static_astyp": 78, "_static_broadcast_arrai": 78, "static_broadcast_arrai": 78, "_static_broadcast_to": 78, "static_broadcast_to": 78, "_static_can_cast": 78, "from_": [78, 156, 631], "static_can_cast": 78, "_static_default_complex_dtyp": 78, "complex_dtyp": [78, 159, 182, 631], "_static_default_float_dtyp": 78, "float_dtyp": [78, 161, 184, 631], "_static_dtyp": 78, "_static_finfo": 78, "inquir": [78, 166, 169], "static_finfo": 78, "55040e": [78, 166, 631], "7976931348623157e": [78, 166, 631], "308": [78, 166, 631, 777, 846], "_static_function_supported_dtyp": 78, "_static_function_unsupported_dtyp": 78, "_static_iinfo": 78, "1800": [78, 169, 631], "1084": 78, "40000": 78, "static_iinfo": 78, "2147483648": [78, 81, 169, 379, 493, 631], "2147483647": [78, 169, 631], "_static_is_bool_dtyp": 78, "dtype_in": [78, 151, 152, 165, 171, 172, 173, 174, 175, 176, 177, 178, 193, 631], "_static_is_complex_dtyp": 78, "is_complex_dtyp": [78, 631, 847], "roughli": [78, 821, 825, 875], "static_is_complex_dtyp": 78, "_static_is_float_dtyp": 78, "static_is_float_dtyp": 78, "_static_is_int_dtyp": 78, "_static_is_uint_dtyp": 78, "_static_result_typ": 78, "static_result_typ": 78, "broadcats": [78, 154], "_containerwithdevic": [79, 104], "_static_dev": 79, "static_dev": 79, "_static_to_devic": 79, "static_to_devic": 79, "contaion": [79, 198], "_containerwithelementwis": [80, 104], "_static_ab": 80, "static_ab": 80, "_static_aco": 80, "static_aco": 80, "_static_acosh": 80, "static_acosh": 80, "_static_add": 80, "static_add": [80, 108], "_static_asin": 80, "static_asin": 80, "524": [80, 226, 633], "412": [80, 85, 226, 633, 642, 719], "_static_asinh": 80, "static_asinh": 80, "_static_atan": 80, "static_atan": 80, "_static_atan2": 80, "static_atan2": 80, "915": [80, 229, 633], "983": [80, 229, 633], "978": [80, 229, 633], "696": [80, 90, 229, 633, 741], "993": [80, 229, 633], "_static_atanh": 80, "static_atanh": 80, "_static_bitwise_and": 80, "static_bitwise_and": 80, "_static_bitwise_invert": 80, "static_bitwise_invert": 80, "_static_bitwise_left_shift": 80, "_static_bitwise_or": 80, "static_bitwise_or": 80, "_static_bitwise_right_shift": 80, "static_bitwise_right_shift": 80, "_static_bitwise_xor": 80, "static_bitwise_xor": 80, "_static_ceil": 80, "static_ceil": 80, "_static_co": 80, "static_co": 80, "_static_cosh": 80, "static_cosh": 80, "_static_deg2rad": 80, "static_deg2rad": 80, "0262": [80, 240, 280, 633], "873": [80, 240, 280, 633], "_static_divid": 80, "static_divid": 80, "_static_equ": 80, "static_equ": 80, "_static_erf": 80, "static_erf": 80, "27632612": [80, 243], "934008": [80, 243, 633], "99999928": [80, 243], "91903949": [80, 243], "_static_exp": 80, "static_exp": 80, "59814835": [80, 244, 633], "4131622": [80, 244], "_static_expm1": 80, "thefunct": [80, 243], "areal": 80, "static_expm1": 80, "71828175": [80, 244, 633], "38905621": [80, 244, 633], "59815216": 80, "_static_floor": 80, "static_floor": 80, "_static_floor_divid": 80, "static_floor_divid": 80, "_static_great": 80, "static_great": 80, "_static_greater_equ": 80, "static_greater_equ": 80, "_static_isfinit": 80, "999999999999": [80, 255, 633], "static_isfinit": 80, "_static_isinf": 80, "static_isinf": 80, "_static_isnan": 80, "static_isnan": 80, "_static_isr": 80, "0j": [80, 81, 143, 144, 222, 223, 224, 227, 230, 239, 244, 246, 258, 262, 264, 281, 285, 287, 288, 292, 339, 373, 630, 633, 638, 686], "23j": [80, 81], "9j": [80, 81], "static_isr": 80, "_static_lcm": 80, "1080": [80, 259], "1550": [80, 259], "130": [80, 259], "_static_less": 80, "static_less": 80, "_static_less_equ": 80, "static_less_equ": 80, "_static_log": 80, "static_log": 80, "_static_log10": 80, "static_log10": 80, "898": [80, 263, 633], "0414": [80, 263, 633], "_static_log1p": 80, "static_log1p": 80, "_static_log2": 80, "static_log2": 80, "_static_logaddexp": 80, "static_logaddexp": 80, "_static_logical_and": 80, "static_logical_and": 80, "_static_logical_not": 80, "static_logical_not": 80, "_static_logical_or": 80, "static_logical_or": 80, "_static_logical_xor": 80, "static_logical_xor": 80, "_static_maximum": 80, "static_maximum": 80, "_static_minimum": 80, "static_minimum": 80, "_static_multipli": 80, "static_multipli": 80, "_static_neg": 80, "static_neg": 80, "_static_not_equ": 80, "static_not_equ": 80, "_static_posit": 80, "static_posit": 80, "_static_pow": 80, "static_pow": 80, "_static_rad2deg": 80, "static_rad2deg": 80, "5160": 80, "10300": [80, 280, 633], "15500": 80, "20600": 80, "2860": [80, 280], "_static_reciproc": 80, "recirpoc": [80, 282], "static_reciproc": 80, "_static_remaind": 80, "static_remaind": 80, "_static_round": 80, "thevfunct": 80, "527": [80, 284, 633], "static_round": 80, "301": [80, 284, 633], "_static_sign": 80, "static_sign": 80, "_static_sin": 80, "static_sin": 80, "757": [80, 286, 633], "959": [80, 246, 286, 633], "279": [80, 286, 376, 398, 408, 541, 633, 635], "_static_sinh": 80, "static_sinh": 80, "835": [80, 287], "347": [80, 287], "721": [80, 287], "_static_sqrt": 80, "static_sqrt": 80, "_static_squar": 80, "static_squar": 80, "_static_subtract": 80, "static_subtract": 80, "_static_tan": 80, "static_tan": 80, "_static_tanh": 80, "static_tanh": 80, "995": [80, 292, 633], "9999": 80, "_static_trapz": 80, "static_trapz": 80, "_static_trunc": 80, "static_trunc": 80, "_static_trunc_divid": 80, "75j": [80, 225, 254], "01317055": [80, 225], "05634501": [80, 225], "115": [80, 225, 280, 633], "3461759": [80, 225], "524111": [80, 225], "644": [80, 226, 633, 855], "305": [80, 85, 226, 633], "351": [80, 240, 280], "00613": [80, 240], "0154": [80, 240], "403": [80, 244], "428772": [80, 244], "649": [80, 246], "865": [80, 246], "metho": [80, 253, 265], "imaginari": [80, 103, 113, 116, 119, 143, 144, 222, 223, 224, 239, 241, 242, 244, 246, 254, 274, 276, 277, 284, 287, 288, 292, 339, 373, 376, 377, 420, 431, 627, 630, 633, 645, 748, 833], "4j": [80, 254, 376, 420, 594, 633, 635], "7j": [80, 81, 258, 281, 339, 373, 633], "956": [80, 264], "08746284": [80, 267], "32192809": [80, 267], "nuner": [80, 274], "413": [80, 280], "335": [80, 81, 281, 339], "345j": [80, 81, 281, 339], "static_angl": 80, "static_exp2": 80, "static_fmin": 80, "static_gcd": 80, "static_imag": 80, "static_logaddexp2": 80, "static_nan_to_num": 80, "static_r": 80, "_containerwithactivationexperiment": [81, 104], "_static_celu": 81, "formlat": 81, "static_celu": 81, "_static_elu": 81, "static_elu": 81, "_static_hardshrink": 81, "hard": [81, 298, 822, 853, 872], "shrinkag": [81, 298, 308, 379, 492], "_static_hardsilu": 81, "20833333": [81, 299, 368], "29166666": [81, 299, 368], "66666669": [81, 104, 299, 368, 382, 508, 618, 636], "66666663": [81, 138, 299, 368, 630], "_static_hardtanh": 81, "3899": 81, "_static_scaled_tanh": 81, "931": 81, "71587813": 81, "88367474": 81, "00376701": [81, 305], "2285642": 81, "99999881": 81, "49999905": 81, "_static_silu": 81, "static_silu": 81, "27777028": [81, 307], "23947507": [81, 307], "0900332": [81, 307], "_static_softshrink": 81, "_static_tanhshrink": 81, "36634541": [81, 310], "02005103": [81, 310], "00262468": [81, 310], "_static_threshold": 81, "389999": [81, 300], "19722462": [81, 301], "84729779": [81, 301], "31326163": [81, 302], "46328258": [81, 302], "51301527": [81, 302], "79813886": [81, 302], "simplywrap": [81, 305], "54939651": [81, 305], "09999998": [81, 305, 616, 636], "09999999": [81, 305], "08336546": [81, 305], "0379949": [81, 305], "22856998": [81, 306], "42028043": [81, 306], "31868932": [81, 306], "static_logit": 81, "static_logsigmoid": 81, "34115386": 81, "64439666": 81, "24115384": 81, "55435526": 81, "07888974": 81, "00741899": 81, "26328245": 81, "00012302": 81, "static_prelu": 81, "static_relu6": 81, "static_selu": 81, "static_thresholded_relu": 81, "_containerwithconversionexperiment": [81, 104], "_containerwithcreationexperiment": [81, 104], "_static_trilu": 81, "blackman": [81, 313, 370], "00770143e": [81, 313], "49229857e": [81, 313], "hamming_window": [81, 370], "ham": [81, 315, 370], "4180": [81, 315], "8180": [81, 315], "hann_window": [81, 370], "hann": [81, 316, 370], "7500": [81, 316], "3455": [81, 316], "9045": [81, 316], "kaiser_bessel_derived_window": [81, 370], "suitabl": [81, 318, 319, 370, 647, 756, 779, 821, 822, 829, 847, 872], "spectral": [81, 318, 319, 370], "analysi": [81, 318, 319, 370, 872, 873], "kaiser": [81, 313, 318, 319, 370], "70710677": [81, 318, 506, 508], "18493208": [81, 318, 370], "9827513": [81, 318, 370], "kaiser_window": [81, 370], "static_kaiser_window": [81, 319], "2049": [81, 319], "8712": [81, 319], "0367": [81, 319, 370], "7753": [81, 319], "static_blackman_window": 81, "static_eye_lik": 81, "static_hamming_window": 81, "static_hann_window": 81, "static_hann": 81, "static_kaiser_bessel_derived_window": 81, "static_mel_weight_matrix": 81, "static_polyv": 81, "static_tril_indic": 81, "static_unsorted_segment_mean": 81, "static_unsorted_segment_min": 81, "static_unsorted_segment_sum": 81, "static_vorbis_window": 81, "vorbis_window": [81, 370], "vorbi": [81, 334, 370], "38268343": [81, 334, 638, 674], "92387953": [81, 334], "14943586": [81, 334, 370], "51644717": [81, 334], "85631905": [81, 334], "98877142": [81, 334], "tril_indic": [81, 370], "_containerwithdata_typeexperiment": [81, 104], "_containerwithdeviceexperiment": [81, 104], "_containerwithelementwiseexperiment": [81, 104], "0003": [81, 335, 638, 677, 777, 780], "0006": [81, 335, 363], "2345j": [81, 339], "5772": [81, 343], "9635": [81, 343], "4228": [81, 343], "9228": [81, 343], "57299206e": [81, 344, 345], "67773480e": [81, 344, 345], "20904985e": [81, 344, 345], "84270084": [81, 344, 345, 373], "99532223": [81, 344, 345], "99997795": [81, 344, 345], "mantissa": [81, 349, 373, 831], "frist": [81, 350, 373], "coord": [81, 350], "6055": [81, 351], "160": [81, 353], "10240": [81, 353], "60000038": [81, 354, 373, 638, 694], "0707": [81, 360, 373], "0579": [81, 360, 373], "static_allclos": 81, "static_amax": 81, "static_amin": 81, "static_binar": 81, "static_conj": 81, "static_copysign": 81, "static_count_nonzero": 81, "static_diff": 81, "static_digamma": 81, "57721537": 81, "96351004": 81, "static_erfc": 81, "15729921": 81, "00467773": [81, 344, 373], "static_erfinv": 81, "static_fix": 81, "static_float_pow": 81, "static_fmax": 81, "static_fmod": 81, "static_frexp": 81, "static_gradi": 81, "static_hypot": 81, "static_isclos": 81, "static_ldexp": 81, "static_lerp": 81, "90000057": [81, 354, 373], "70000076": [81, 354, 373], "55000019": [81, 354, 373], "05000019": [81, 354, 373], "static_modf": 81, "static_nansum": 81, "static_nextaft": 81, "static_signbit": 81, "static_sinc": 81, "636": 81, "090": 81, "070": 81, "057": 81, "static_sparsify_tensor": 81, "static_xlogi": 81, "static_zeta": 81, "0244": [81, 363], "_containerwithgeneralexperiment": [81, 104], "_static_reduc": 81, "static_reduc": 81, "_containerwithgradientsexperiment": [81, 104], "_containerwithimageexperiment": [81, 104], "_containerwithlayersexperiment": [81, 104], "_static_fft": 81, "static_fft": 81, "_static_sliding_window": 81, "673": [81, 398], "0507": [81, 398], "79711437": [81, 376, 398, 408], "94867325": [81, 376, 398, 408], "74089146": [81, 376, 398, 408], "25980937": [81, 376, 398, 408], "64958102": [81, 376, 398, 408], "2442648": [81, 376, 398, 408], "247306": [81, 410], "908323j": [81, 410], "494955": [81, 410], "90395j": [81, 410], "static_adaptive_avg_pool1d": 81, "static_adaptive_avg_pool2d": 81, "static_adaptive_max_pool2d": 81, "static_adaptive_max_pool3d": 81, "static_avg_pool1d": 81, "static_avg_pool2d": 81, "static_avg_pool3d": 81, "static_dct": 81, "253": [81, 287, 633], "515": [81, 644, 741], "467": 81, "static_dft": 81, "static_embed": 81, "static_idct": 81, "93732834": [81, 376, 398], "75048852": [81, 376, 398], "29723358": [81, 376, 408], "6950531": 81, "93914509": 81, "88008738": 81, "18951225": 81, "06697273": [81, 376, 408], "57439804": 81, "68861485": [81, 376, 408], "41308832": [81, 376, 408], "0700836": 81, "2449036": 81, "6711426": 81, "514": 81, "501709": 81, "4924011": 81, "static_ifft": 81, "static_ifftn": 81, "static_interpol": 81, "static_max_pool1d": 81, "static_max_pool2d": 81, "max_pool2dd": 81, "static_max_pool3d": 81, "static_max_unpool1d": 81, "static_rfft": 81, "static_rfftn": 81, "static_rnn": 81, "step_funct": [81, 376, 422], "initial_st": [81, 376, 422, 637, 662], "go_backward": [81, 376, 422], "unrol": [81, 376, 422, 637, 663, 851, 854], "input_length": [81, 376, 422], "zero_output_for_mask": [81, 376, 422], "return_all_output": [81, 376, 422], "rnn": [81, 376, 872], "tempor": [81, 376, 422], "state_s": [81, 376, 422], "while_loop": [81, 376, 422, 629], "otput": [81, 376, 422], "funciton": [81, 376, 422], "static_stft": 81, "_containerwithlinearalgebraexperiment": [81, 104], "933034": [81, 377, 427], "eigenvealu": [81, 430, 673], "xx": [81, 430, 432, 673], "37228107": [81, 430, 673], "3722816": [81, 430, 673], "8245648": [81, 430, 673], "41597357": [81, 430, 673], "56576747": [81, 430, 673], "9093767": [81, 430, 673], "56155": [81, 431], "82842": [81, 431], "450": [81, 437], "static_adjoint": 81, "static_batched_out": 81, "static_cond": 81, "static_diagflat": 81, "static_dot": 81, "static_eig": 81, "static_eigh_tridiagon": 81, "static_eigv": 81, "static_higher_order_mo": 81, "static_initialize_tuck": 81, "static_kron": 81, "kroneck": [81, 377, 436, 437], "static_make_svd_non_neg": 81, "static_matrix_exp": 81, "static_mode_dot": 81, "static_multi_dot": 81, "static_multi_mode_dot": 81, "static_partial_tuck": 81, "static_svd_flip": 81, "static_tensor_train": 81, "static_truncated_svd": 81, "static_tt_matrix_to_tensor": 81, "tt_matrix": [81, 377, 451], "output_tensor": [81, 101, 377, 451], "static_tuck": 81, "_containerwithlossesexperiment": [81, 104], "_static_hinge_embedding_loss": 81, "_static_huber_loss": 81, "static_huber_loss": 81, "0575": [81, 454], "_static_kl_div": 81, "_static_l1_loss": 81, "static_l1_loss": 81, "_static_log_poisson_loss": 81, "static_log_poisson_loss": 81, "_static_poisson_nll_loss": 81, "06446016": 81, "55611551": 81, "30244565": [81, 458], "_static_smooth_l1_loss": 81, "static_smooth_l1_loss": 81, "_static_soft_margin_loss": 81, "3890561": [81, 457], "413159": [81, 457], "06429195": [81, 458], "43333333": [81, 459], "10666666": [81, 459], "_containerwithmanipulationexperiment": [81, 104], "_static_fill_diagon": 81, "_static_put_along_axi": 81, "_static_tak": 81, "69999981": [81, 308, 368, 379, 469, 493], "_static_trim_zero": 81, "_static_unflatten": 81, "_static_unique_consecut": 81, "ary1": [81, 379, 463, 464, 465], "ary2": [81, 379, 463, 464, 465], "broadcast_shap": [81, 107, 379, 777, 779], "static_concat_from_sequ": [81, 470], "30192195": [81, 482], "static_as_strid": 81, "static_atleast_1d": 81, "static_atleast_2d": 81, "static_atleast_3d": 81, "static_broadcast_shap": 81, "static_column_stack": 81, "static_dsplit": 81, "static_dstack": 81, "static_expand": 81, "static_flatten": 81, "static_fliplr": 81, "static_flipud": 81, "static_fold": 81, "static_heavisid": 81, "static_hsplit": 81, "static_hstack": 81, "static_i0": 81, "static_matric": 81, "static_moveaxi": 81, "static_pad": 81, "static_partial_fold": 81, "static_partial_tensor_to_vec": 81, "static_partial_unfold": 81, "static_partial_vec_to_tensor": 81, "static_rot90": 81, "static_soft_threshold": 81, "static_take_along_axi": 81, "static_top_k": 81, "static_unfold": 81, "static_vsplit": 81, "static_vstack": 81, "_containerwithnormsexperiment": [81, 104], "16903085": [81, 506, 508], "50709254": [81, 506, 508], "84515423": [81, 506, 508], "44183609": [81, 506, 508], "56807494": [81, 506, 508], "69431382": [81, 506, 508], "static_batch_norm": 81, "static_group_norm": 81, "static_instance_norm": 81, "static_l1_norm": 81, "static_l2_norm": 81, "static_lp_norm": 81, "12500000": 81, "37500000": 81, "62500000": 81, "27500000": 81, "35000000": 81, "42500000": 81, "0000000": 81, "5000000": 81, "2500000": 81, "_containerwithrandomexperiment": [81, 104], "43643127": [81, 511], "32325703": [81, 511], "24031169": [81, 511], "34251311": [81, 511], "31692529": [81, 511], "3405616": [81, 511], "5319725": [81, 511], "22458365": [81, 511], "24344385": [81, 511], "26588406": [81, 511], "61075421": [81, 511], "12336174": [81, 511], "51142915": [81, 511], "25041268": [81, 511], "23815817": [81, 511], "64042903": [81, 511], "25763214": [81, 511], "10193883": [81, 511], "31624692": [81, 511], "46567987": [81, 511], "21807321": [81, 511], "37677699": [81, 511], "39914594": [81, 511], "22407707": [81, 511], "static_bernoulli": 81, "static_beta": 81, "static_dirichlet": 81, "static_gamma": 81, "static_poisson": 81, "_containerwithsearchingexperiment": [81, 104], "static_unravel_index": 81, "_containerwithsetexperiment": [81, 104], "_containerwithsortingexperiment": [81, 104], "invert_permut": [81, 386], "static_invert_permut": 81, "static_lexsort": [81, 93], "_containerwithstatisticalexperiment": [81, 104], "_static_cummax": 81, "static_cummax": 81, "_static_cummin": 81, "static_cummin": 81, "_static_nanmin": 81, "static_nanmin": 81, "func_nam": [81, 526, 820, 833, 834, 839, 843], "static_bincount": 81, "static_corrcoef": 81, "static_cov": [81, 388, 523], "static_histogram": 81, "static_igamma": 81, "static_lgamma": 81, "static_median": 81, "static_nanmean": 81, "static_nanmedian": 81, "static_nanprod": 81, "static_quantil": 81, "_containerwithutilityexperiment": [81, 104], "static_optional_get_el": 81, "_containerwithgener": [82, 104], "_static_all_equ": 82, "static_all_equ": 82, "_static_array_equ": 82, "a0": [82, 379, 469], "static_array_equ": 82, "_static_assert_supports_inplac": 82, "_static_clip_matrix_norm": 82, "static_clip_matrix_norm": 82, "849": [82, 541, 635], "_static_clip_vector_norm": 82, "static_clip_vector_norm": 82, "_static_einops_rearrang": 82, "static_einops_rearrang": 82, "_static_einops_reduc": 82, "static_einops_reduc": 82, "29333329": [82, 547, 635], "53000069": [82, 547, 635], "39666676": [82, 547, 635], "20666695": [82, 547, 635], "_static_einops_repeat": 82, "static_einops_repeat": 82, "_static_exist": 82, "_static_fourier_encod": 82, "static_fourier_encod": 82, "classivi": [82, 646, 751], "89858720e": 82, "79717439e": 82, "_static_gath": 82, "static_gath": 82, "_static_gather_nd": 82, "static_gather_nd": 82, "_static_get_num_dim": 82, "static_get_num_dim": 82, "_static_has_nan": 82, "leafwis": 82, "static_has_nan": 82, "_static_inplace_decr": 82, "_static_inplace_incr": 82, "_static_inplace_upd": 82, "_static_is_arrai": 82, "static_is_arrai": 82, "_static_is_ivy_arrai": 82, "static_is_ivy_arrai": 82, "_static_is_native_arrai": 82, "static_is_native_arrai": 82, "_static_scatter_flat": 82, "_static_scatter_nd": 82, "static_scatter_nd": 82, "_static_s": 82, "static_s": 82, "_static_stable_divid": 82, "22222222": 82, "11111111": 82, "857": [82, 593, 635], "444": 82, "_static_stable_pow": 82, "00012": [82, 594, 635], "00016": [82, 83, 594, 622, 635, 636], "00001": [82, 594, 635, 777], "00032": [82, 594], "00256": [82, 594], "1679638": [82, 594], "395": [82, 594], "16777383": [82, 594], "_static_supports_inplace_upd": 82, "_static_to_list": 82, "static_to_list": 82, "_static_to_numpi": 82, "static_to_numpi": 82, "_static_to_scalar": 82, "static_to_scalar": 82, "_static_value_is_nan": 82, "452": 82, "static_value_is_nan": 82, "833": [82, 542], "items": [82, 103, 635], "static_isin": 82, "static_items": 82, "static_strid": 82, "425": [82, 614], "_containerwithgradi": [83, 104], "_static_stop_gradi": 83, "static_stop_gradi": 83, "976": [83, 292, 616, 633, 636], "49e": [83, 616, 636], "74e": [83, 616, 636], "95e": [83, 616, 636], "024": [83, 616, 636], "096": [83, 616, 636], "626": [83, 616, 636], "en": [83, 616, 617, 636, 830], "wikipedia": [83, 616, 617, 636], "wiki": [83, 616, 617, 636], "stochastic_gradient_desc": [83, 616, 617, 636], "01099": [83, 617], "01003": [83, 617, 636], "01015": [83, 617, 636], "99936122": [83, 617, 636], "99936116": [83, 617, 636], "99936128": [83, 617, 636], "99936104": [83, 617, 636], "w_new": [83, 620, 636], "708": [83, 622, 636], "445": [83, 622, 636], "6e": [83, 622, 636], "00036": [83, 622, 636], "00049": [83, 622, 636], "layerwis": [83, 623, 636], "01132035": [83, 623, 636], "22264051": [83, 623, 636], "2056601": [83, 623, 636], "1324538": [83, 623, 636], "56490755": [83, 623, 636], "96622658": [83, 623, 636], "90848625": [83, 623, 636], "93616199": [83, 623, 636], "77232409": [83, 623, 636], "_containerwithimag": [84, 104], "_containerwithlay": [85, 104], "_static_conv1d": 85, "static_conv1d": 85, "_static_conv1d_transpos": 85, "static_conv1d_transpos": 85, "112": [85, 638, 648, 652, 683, 760], "_static_conv2d": 85, "ey": [85, 630, 637, 653, 659, 849, 856], "static_conv2d": 85, "_static_conv2d_transpos": 85, "static_conv2d_transpos": 85, "_static_conv3d": 85, "fdfh": [85, 655], "static_conv3d": 85, "_static_conv3d_transpos": 85, "static_conv3d_transpos": 85, "_static_depthwise_conv2d": 85, "static_depthwise_conv2d": 85, "_static_dropout": 85, "static_dropout": 85, "_static_dropout1d": 85, "static_dropout1d": 85, "_static_dropout2d": 85, "_static_dropout3d": 85, "_static_linear": 85, "278": [85, 637, 660, 661], "static_linear": 85, "195": 85, "_static_lstm_upd": 85, "_static_multi_head_attent": 85, "_static_reduce_window": 85, "_static_scaled_dot_product_attent": 85, "static_scaled_dot_product_attent": 85, "39999962": [85, 637, 660, 661], "19999695": [85, 661], "11600018": [85, 661], "88399887": [85, 661], "306": [85, 637, 661], "19999981": [85, 298, 311, 368, 376, 420, 637, 660, 667], "59249449": [85, 637, 667], "68226194": [85, 637, 667], "19603825": [85, 637, 667], "9960382": [85, 637, 667], "26894283": [85, 637, 667], "40236187": [85, 637, 667], "39999437": [85, 637, 667], "59999037": [85, 637, 667], "35046196": [85, 637, 667], "54282808": [85, 637, 667], "39989519": [85, 637, 667], "5998764": [85, 637, 667], "_containerwithlinearalgebra": [86, 104], "_static_choleski": 86, "static_choleski": 86, "577": [86, 638, 668], "707": [86, 638, 668], "static_rol": [86, 88], "_static_cross": 86, "static_cross": 86, "_static_det": 86, "_static_diag": 86, "_static_diagon": 86, "static_diagon": 86, "_static_eigh": 86, "_static_eigvalsh": 86, "static_eigvalsh": 86, "51572949": [86, 638, 675], "17091519": [86, 638, 675], "3448143": [86, 638, 675], "35898387e": [86, 638, 675], "46410179e": [86, 638, 675], "_static_inn": 86, "static_inn": 86, "_static_inv": 86, "static_inv": 86, "_static_matmul": 86, "matul": 86, "static_matmul": 86, "_static_matrix_norm": 86, "deimens": 86, "static_matrix_norm": 86, "_static_matrix_pow": 86, "_static_matrix_rank": 86, "static_matrix_rank": 86, "_static_matrix_transpos": 86, "static_matrix_transpos": 86, "_static_out": 86, "n1": [86, 140, 630], "n2": [86, 140, 630], "static_out": [86, 683], "_static_pinv": 86, "static_pinv": 86, "0426": 86, "0964": 86, "0605": 86, "1368": 86, "_static_qr": 86, "static_qr": 86, "31622777": [86, 638, 685], "9486833": [86, 638, 685], "4472136": [86, 638, 685], "89442719": [86, 638, 685], "16227766": [86, 638, 685], "42718872": [86, 638, 685], "63245553": [86, 638, 685], "47213595": [86, 638, 685], "81377674": [86, 638, 685], "_static_slogdet": 86, "static_slogdet": 86, "6931472": 86, "0986123": 86, "_static_solv": 86, "_static_svd": 86, "static_svd": 86, "au": 86, "aS": 86, "avh": 86, "bvh": 86, "_static_svdv": 86, "_static_tensordot": 86, "_static_tensorsolv": 86, "_static_trac": 86, "static_trac": 86, "_static_vand": 86, "static_vand": 86, "343": [86, 284, 633, 693], "729": [86, 693, 855], "_static_vecdot": 86, "_static_vector_norm": 86, "static_vector_norm": 86, "77359247": [86, 695], "_static_vector_to_skew_symmetric_matrix": 86, "09861231": [86, 638, 686], "static_general_inner_product": 86, "3475602": [86, 688], "93765765": [86, 688], "58776021": [86, 688], "10416126": [86, 688], "80644298": [86, 688], "87024701": [86, 688], "48127627": [86, 688], "79101127": [86, 688], "98288572": [86, 688], "68917423": [86, 688], "_containerwithloss": [87, 104], "_static_binary_cross_entropi": 87, "static_binary_cross_entropi": 87, "511": 87, "357": 87, "_static_cross_entropi": 87, "static_cross_entropi": 87, "20397282": 87, "83258148": 87, "60943794": [87, 638, 686], "_static_sparse_cross_entropi": 87, "static_sparse_cross_entropi": 87, "36354783": [87, 639, 697], "14733934": [87, 639, 697], "17027519": [87, 698], "53647931": [87, 698], "53647929": [87, 699], "1702752": [87, 699], "_containerwithmanipul": [88, 104], "_static_clip": 88, "static_clip": 88, "_static_concat": 88, "_static_constant_pad": 88, "static_constant_pad": 88, "_static_expand_dim": 88, "static_expand_dim": 88, "container_axi": [88, 640, 703], "_static_flip": 88, "static_flip": 88, "_static_permute_dim": 88, "static_permute_dim": 88, "_static_repeat": 88, "static_repeat": 88, "_static_reshap": 88, "static_reshap": 88, "_static_rol": 88, "positivclip": 88, "_static_split": 88, "static_split": 88, "_static_squeez": 88, "static_squeez": 88, "_static_stack": 88, "leavv": 88, "static_stack": 88, "_static_swapax": 88, "_static_til": 88, "static_til": 88, "_static_unstack": 88, "static_unstack": 88, "_static_zero_pad": 88, "repreat": [88, 706], "_containerwithnorm": [89, 104], "34198591": [89, 643, 738], "04274819": [89, 643, 738], "29923761": [89, 643, 738], "24053511": [89, 643, 738], "62221265": [89, 738], "20277636": [89, 738], "41943574": [89, 738], "83710337": [89, 738], "_containerwithrandom": [90, 104], "_static_multinomi": 90, "_static_randint": 90, "static_randint": 90, "_static_random_norm": 90, "static_random_norm": 90, "651": 90, "_static_random_uniform": 90, "static_random_uniform": 90, "481": 90, "0999": 90, "_static_shuffl": 90, "static_shuffl": 90, "431": [90, 741], "274": [90, 741], "_containerwithsearch": [91, 104], "_static_argmax": 91, "static_argmax": 91, "_static_argmin": 91, "static_argmin": 91, "_static_argwher": 91, "static_argwher": 91, "_static_nonzero": 91, "_static_wher": 91, "static_wher": 91, "_containerwithset": [92, 104], "_static_unique_al": 92, "static_unique_al": 92, "_static_unique_count": 92, "static_unique_count": 92, "_static_unique_invers": 92, "static_unique_invers": 92, "_static_unique_valu": 92, "_containerwithsort": [93, 104], "_static_argsort": 93, "static_argsort": 93, "_static_searchsort": 93, "_static_sort": 93, "static_sort": 93, "static_msort": 93, "_containerwithstatist": [94, 104], "_static_cumprod": 94, "static_cumprod": 94, "_static_cumsum": 94, "static_cumsum": 94, "_static_min": 94, "_static_prod": 94, "static_prod": 94, "11000001": [94, 764], "23100001": [94, 764], "30800003": [94, 648, 764], "_static_sum": 94, "_static_var": 94, "static_var": 94, "12666667": [94, 648, 767], "11555555": [94, 648, 767], "rtype": [94, 760, 807], "respectv": [94, 765], "81649649": [94, 765], "94280904": [94, 765], "509902": [94, 648, 765], "2472192": [94, 765], "44948983": [94, 765], "41421354": [94, 765], "6666667": [94, 767], "_containerwithutil": [95, 104], "_static_al": 95, "static_al": 95, "_static_ani": 95, "static_ani": 95, "add_ivy_container_instance_method": 96, "containerexampl": 96, "factorized_tensor": [97, 98, 99, 100, 101, 102], "factorizedtensor": [97, 98, 99, 100, 101, 102], "matrix_or_tensor": 97, "to_unfold": [97, 98, 99, 100, 101, 102], "to_vec": [97, 98, 99, 100, 101, 102], "cp_tensor": [98, 99], "cptensor": [98, 99, 324, 370], "cp_copi": 98, "cp_flip_sign": 98, "s_i": [98, 99], "normalisation_weight": [98, 99], "normalised_factor": [98, 99], "cp_lstsq_grad": 98, "return_loss": 98, "nabla": 98, "mathcal": 98, "mathbf": 98, "factor_matric": 98, "cp_gradient": 98, "quantiti": 98, "cp_mode_dot": 98, "keep_dim": [98, 102], "cp_multi_mode_dot": 98, "cp_n_param": 98, "tensor_shap": [98, 100, 101, 102], "n_param": [98, 99, 100, 101, 102], "cp_norm": 98, "cp_to_tensor": 98, "khatria": 98, "rao": [98, 377, 436], "khatri": [98, 377, 436], "cp_normal": 98, "normalis": [98, 99], "u_1": [98, 99], "u_n": [98, 99], "v_1": [98, 99], "v_n": [98, 99], "v_k": [98, 99], "u_k": [98, 99], "absorb": [98, 99], "refold": [98, 379, 478, 489], "cp_to_unfold": 98, "ie": 98, "s_u_i": 98, "exploit": [98, 875], "khatri_rao": [98, 377], "cp_to_vec": 98, "ravel": [98, 849], "unfolding_dot_khatri_rao": 98, "mttkrp": 98, "validate_cp_rank": 98, "percent": [98, 101], "validate_cp_tensor": 98, "parafac2_tensor": 99, "parafac2tensor": [99, 325, 370], "apply_parafac2_project": 99, "evolv": [99, 861, 872], "b_i": 99, "ijk": [99, 808], "sum_r": 99, "a_": 99, "ir": [99, 870, 873, 878], "jr": 99, "kr": 99, "coupl": [99, 821, 826, 853, 855, 872], "factoris": 99, "i1": [99, 388, 526], "classmethod": [99, 106, 107, 782], "from_cptensor": 99, "parafac2_tensor_ok": 99, "parafac2_normalis": 99, "normalised_project": 99, "parafac2_to_slic": 99, "slice_idx": 99, "frontal": 99, "a_i": 99, "j_i": 99, "b_": 99, "reformul": 99, "p_i": 99, "orthogon": [99, 324, 328, 370, 377, 430, 446, 452, 638, 673, 674], "sum_": 99, "ijr": 99, "constraint": [99, 808, 830, 831, 841], "projection_matric": 99, "parafac2_to_tensor": 99, "construct": [99, 640, 713, 793, 796, 797, 798, 845, 851, 855, 856, 870, 872, 879], "uneven": 99, "parafac2_to_unfold": 99, "parafac2_to_vec": 99, "validate_parafac2_tensor": 99, "cp": [99, 324, 370, 822], "tr_tensor": 100, "trtensor": [100, 326, 370], "tr_n_param": 100, "tr_to_tensor": 100, "tr_to_unfold": 100, "tr_to_vec": 100, "validate_tr_rank": 100, "validate_tr_tensor": 100, "tt_tensor": 101, "_tt_n_param": 101, "mp": [101, 327, 370], "index_upd": 101, "pad_tt_rank": 101, "factor_list": 101, "n_pad": 101, "pad_boundari": 101, "ring": 101, "bond": 101, "padded_factor_list": 101, "tt_to_tensor": 101, "assembl": [101, 377, 451], "tt_to_unfold": 101, "reassembl": 101, "tt_to_vec": 101, "validate_tt_rank": 101, "constant_rank": 101, "allow_overparametr": 101, "proport": [101, 792], "realiz": [101, 872], "validate_tt_tensor": 101, "tucker_tensor": 102, "tucker_copi": 102, "tucker_mode_dot": [102, 879], "tucker_n_param": 102, "tucker_norm": 102, "tucker_to_tensor": 102, "skip_factor": 102, "transpose_factor": 102, "tucker_to_unfold": 102, "tucker_to_vec": 102, "validate_tucker_rank": 102, "fixed_mod": 102, "validate_tucker_tensor": 102, "_bisection_root_find": 102, "fun": [102, 367, 375, 615, 635, 642, 730, 830], "max_it": 102, "__abs__": [103, 104], "__add__": [103, 104, 826, 829, 833, 834, 838, 843, 844, 853], "__eq__": [103, 104], "__ge__": [103, 104], "__gt__": [103, 104, 849], "__le__": [103, 104], "__lt__": [103, 104], "__ne__": [103, 104], "__pow__": [103, 104, 853], "69678056": 103, "59876156": 103, "82660675": 103, "__radd__": [103, 104, 833, 834, 843], "__rrshift__": [103, 104], "__rshift__": [103, 104], "__rsub__": [103, 104], "__sub__": [103, 104, 826, 829, 833, 838, 853], "__truediv__": [103, 104, 826, 829, 833], "__xor__": [103, 104], "referenc": [103, 835, 842], "resid": [103, 107, 640, 703, 843, 851, 855], "mt": [103, 853], "hopefulli": [103, 104, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 789, 790, 792, 793, 795, 796, 797, 798, 818, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 852, 853, 854, 855, 856, 861, 862, 863], "eq": 104, "ge": 104, "le": 104, "ne": 104, "75979435": 104, "52153397": 104, "13532257": 104, "rshift": 104, "truediv": 104, "nested_arrai": [106, 107, 108, 828], "nestedarrai": 106, "nested_rank": [106, 107, 108], "inner_shap": [106, 107, 108], "nestedarraybas": [106, 107, 108], "from_row_length": 106, "row_length": 106, "from_row_split": 106, "row_split": 106, "ragged_map": 107, "ragged_multi_map": 107, "ragged_arrai": 107, "ragged_multi_map_in_funct": 107, "replace_ivy_arrai": 107, "unbind": 107, "nestedarrayelementwis": 108, "strictli": [113, 116, 119, 248, 627, 633, 838, 842], "24000001": [113, 627], "703": [114, 627], "683": [114, 627], "408": [114, 627], "313": [114, 627], "437": [114, 627], "40337825": [115, 627], "56114835": [115, 627], "20788449": [115, 627], "0768": [118, 627], "\u03b2": [119, 627], "body_fn": [123, 124, 126, 629], "bodi": [123, 126, 629, 825, 846], "lst": [123, 629], "orelse_fn": [124, 629], "body1": [125, 629], "body2": [125, 629], "test_fn": [126, 629, 775, 814, 866, 867], "repeatedli": [126, 629, 642, 728, 830, 846], "ml_framework": [127, 630], "distanc": [127, 630], "adjac": [127, 630], "nestedsequ": [128, 129, 630], "typevar": [128, 129, 630], "supportsbufferprotocol": [128, 129, 630], "static_copy_arrai": [130, 630], "intdtyp": [133, 144, 150, 162, 173, 178, 185, 191, 630, 631], "pycapsul": [134, 145, 630], "interchang": [134, 145, 630, 640, 712], "plu": [135, 630], "x00b": [135, 630], "x00d": [135, 630], "x00e": [135, 630], "41588834": [139, 630], "7827941": [139, 630], "6227766": [139, 630], "23413252": [139, 630], "n3": [140, 630], "xv": [140, 630], "yv": [140, 630], "x_nativ": [141, 630, 842], "y_nativ": [141, 630], "z_nativ": [141, 630], "d_type": [143, 630], "col": [148, 329, 370, 630], "primari": [148, 167, 168, 200, 201, 329, 370, 386, 516, 551, 552, 630, 631, 632, 635, 778, 780, 820, 824, 827, 831, 840, 842, 843, 845, 846, 849, 857, 859], "upward": [148, 329, 370, 630], "downward": [148, 329, 370, 630], "2xn": [148, 329, 370, 630], "subarrai": [148, 329, 370, 630], "incompat": [155, 631], "closest": [158, 237, 247, 248, 284, 294, 631, 633, 846, 849], "xtype": [158, 631], "ytype": [158, 631], "native_uint16": [158, 631], "complexdtyp": [159, 173, 182, 631], "set_default_complex_dtyp": [159, 188, 631], "4294": [159, 161, 631], "967346": [159, 161, 631], "set_default_dtyp": [160, 189, 631, 831, 839], "floatdtyp": [161, 184, 631], "set_default_float_dtyp": [161, 170, 182, 190, 631, 831], "int_dtyp": [162, 185, 631], "set_default_int_dtyp": [162, 170, 191, 631, 831], "4294967346": [162, 163, 631], "uint_dtyp": [163, 186, 631], "uint": [163, 178, 186, 192, 631, 831, 844], "uintdtyp": [163, 178, 186, 192, 631], "set_default_uint_dtyp": [163, 170, 192, 631], "native_bool": [165, 631], "ieee": [166, 224, 241, 246, 264, 274, 283, 288, 291, 628, 631, 633, 862], "754": [166, 224, 241, 246, 264, 274, 283, 288, 291, 628, 631, 633, 862], "smallest_norm": [166, 631], "bfloat16": [167, 631, 777, 778, 831, 843, 846, 847], "unsupport": [168, 201, 552, 631, 632, 635, 772, 775, 818, 821, 836, 843], "encapsul": [169, 631, 830], "314": [169, 281, 339, 373, 631, 633], "9223372036854775808": [169, 631], "9223372036854775807": [169, 631], "65535": [169, 631], "4294967295": [169, 631], "native_uint8": [171, 631], "hashabl": [175, 631], "type1": [179, 631], "type2": [179, 631], "array_api_promot": [179, 180, 631, 777, 778], "unexpect": [180, 248, 631, 633, 831], "default_complex_dtyp": [182, 631], "default_dtype_stack": [183, 189, 631], "unset_default_dtyp": [183, 631], "native_uint64": [183, 631], "default_float_dtyp": [184, 631, 831], "default_int_dtyp": [185, 191, 631, 831], "default_uint_dtyp": [186, 192, 631], "ret1": [187, 631], "ret2": [187, 631], "default_complex_dtype_stack": [188, 631], "default_float_dtype_stack": [190, 631], "native_float16": [193, 631], "unmodifi": [195, 632, 827, 831], "aliv": [202, 207, 209, 555, 575, 576, 632, 635, 832], "139740789224448": [202, 632], "process_specif": [208, 220, 632], "percentag": [208, 632], "ram": [208, 216, 220, 632], "alon": [208, 220, 632, 837, 846], "036902561555": [208, 632], "7024003467681645": [208, 632], "as_native_dev": [208, 632], "7095597456708771": [208, 632], "attr_onli": [209, 632], "soft_device_mod": [211, 219, 632], "chunk": [212, 213, 214, 632], "split_factor": [212, 632, 835], "max_chunk_s": [214, 632], "chunk_siz": [214, 632], "input_ax": [214, 632], "output_ax": [214, 632], "fed": [214, 632, 855], "fist": [214, 632], "gb": [216, 220, 632, 821, 836], "66700032": [216, 632], "589934592": [216, 632], "219563008": [220, 632], "902400346": [220, 632], "525205504": [220, 632], "na": [221, 633, 846], "noqa": [221, 288, 633, 793, 802, 844], "princip": [222, 226, 228, 360, 373, 633], "codomain": [222, 223, 226, 227, 228, 229, 238, 239, 244, 246, 262, 263, 265, 286, 287, 288, 291, 292, 360, 373, 633, 834], "\u03c0": [222, 226, 228, 229, 628, 633], "3\u03c0": [222, 229, 633], "unspecifi": [222, 223, 227, 230, 239, 244, 246, 248, 283, 287, 288, 292, 377, 430, 633, 638, 640, 673, 674, 711, 842], "\u03c0j": [223, 227, 230, 262, 264, 633], "3\u03c0j": [223, 262, 264, 633], "x1_i": [224, 229, 231, 233, 234, 235, 236, 241, 242, 248, 252, 253, 260, 261, 266, 268, 270, 271, 274, 277, 279, 283, 290, 633, 825], "2019": [224, 241, 246, 264, 274, 633, 872, 875], "commut": [224, 633], "tabl": [224, 241, 274, 586, 609, 633, 635, 777, 778, 793, 843, 848, 872], "dj": [224, 241, 274, 633], "z1": [224, 633], "z2": [224, 633], "yj": [225, 633], "nanj": [227, 633], "809": [227, 633], "569": [227, 633], "733": [227, 633], "notat": [229, 633, 648, 760, 830], "denot": [229, 633, 795], "quadrant": [229, 633], "rai": [229, 633, 862], "bitwis": [231, 234, 236, 271, 633], "170": [235, 633], "243": [235, 633], "xor": [236, 271, 633], "654": [238, 633], "ci": [239, 244, 246, 287, 633, 825, 831, 837, 844, 846, 857], "368": [239, 633], "670": [239, 633], "202": [239, 633, 825], "548": [239, 633], "1490": [239, 633], "57079633": [240, 633], "14159265": [240, 633], "71238898": [240, 633], "28318531": [240, 633], "02617994": [240, 633], "87266463": [240, 633], "01919862": [240, 633], "03839725": [240, 633], "05759586": [240, 633], "07679449": [240, 633], "09599311": [240, 633], "11519173": [240, 633], "35081118": [240, 633], "88139129": [240, 633], "underflow": [241, 248, 633, 638, 686, 831], "textbook": [241, 274, 633], "frac": [241, 263, 265, 285, 287, 291, 376, 382, 404, 405, 409, 410, 502, 504, 633], "ac": [241, 274, 633, 807, 808], "bd": [241, 274, 633], "bc": [241, 274, 633, 807, 808], "versu": [241, 274, 633], "riemann": [241, 274, 633], "sphere": [241, 274, 633], "c99": [241, 274, 633], "infinit": [241, 274, 288, 633], "unlik": [241, 274, 633, 825, 830, 833, 862, 877, 879], "698": [241, 633], "truth": [242, 252, 253, 260, 261, 277, 378, 454, 633, 772, 774, 785, 818, 836, 843, 846], "32862675": [243, 633], "67780113": [243, 633], "11246294": [243, 633], "42839241": [243, 633], "52050018": [243, 633], "16799599": [243, 633], "30787992": [243, 633], "43796915": [243, 633], "98667163": [243, 633], "79690808": [243, 633], "88020504": [243, 633], "91031402": [243, 633], "95228523": [243, 633], "96610528": [243, 633], "cut": [244, 246, 286, 287, 288, 291, 633, 861, 878], "08553692": [244, 633], "567": [244, 633], "00344786": [244, 633], "76297021": [244, 633], "197948": [244, 633], "53253174": [244, 633], "fdlibm": [246, 264, 633], "compliant": [246, 264, 269, 270, 336, 337, 373, 633, 648, 761, 762, 763, 765], "potenti": [246, 264, 633, 814, 820, 821, 830, 831, 843, 850, 875], "632": [246, 633], "20e": [246, 633], "72e": [246, 633, 777], "greatest": [247, 248, 251, 633], "pep": [248, 633, 838], "disambigu": [248, 633, 841], "former": [248, 633, 821, 831, 834, 843], "latter": [248, 633, 821, 825, 827, 831, 834, 843], "overload": [248, 633, 846], "led": [248, 633, 825, 874], "subtl": [248, 633, 831, 878], "bug": [248, 633, 814, 820, 822, 828, 836, 837, 843, 846, 858], "ambigu": [248, 633], "semant": [248, 283, 379, 493, 633, 831, 851, 856, 861, 873], "ill": [248, 633, 779], "surpris": [248, 633, 857], "arrau": [254, 633], "log_": [263, 265, 633], "742": [264, 633], "negat": [276, 339, 373, 633], "52095687": [279, 633], "92457771": [279, 633], "49372482": [279, 633], "22738838": [279, 633], "156": [279, 633, 777], "5877228": [279, 633], "189": [280, 633, 642, 719], "252": [280, 633], "2890": [280, 633], "344": [280, 633], "355j": [281, 339, 373, 633], "55j": [281, 339, 373, 633], "primarili": [283, 633, 820, 829, 872], "counterpart": [284, 633, 829, 840], "deliber": [284, 633, 849], "imprecis": [284, 633], "5654": [284, 633], "034": [284, 633], "433": [284, 619, 621, 633, 636], "signum": [285, 633], "textrm": [285, 633], "932": [286, 633], "746": [286, 633], "657": [286, 633], "indistinguish": [288, 633], "infti": [288, 633], "32455532": [288, 633], "89897949": [288, 633], "169": [288, 633], "analyt": [291, 633, 872, 874, 878], "pole": [291, 633], "546": [291, 633, 637, 661], "916": [291, 633], "996": [291, 633], "histor": [292, 633], "stem": [292, 633, 842], "older": [292, 633], "advis": [292, 633, 843], "462": [292, 633], "604": [292, 633], "997": [292, 633], "0375": [294, 633], "032": [294, 633], "57258511": [297, 368], "69999999": [297, 368, 626, 636], "90928203": [297, 368], "98772264": [297, 368], "99591321": [297, 368], "99863964": [297, 368], "69880581": [297, 368], "18126924": [297, 368], "79999995": [298, 308, 311, 368], "70000005": [298, 311, 368], "1241": [299, 368], "4897": [299, 368], "4090": [299, 368], "31008321": [299, 368], "1147176": [299, 368], "40899992": [299, 368], "20141329": [302, 368], "40318608": [302, 368], "48683619": [302, 368], "46328247": [302, 368], "59813893": [302, 368], "43748799": [302, 368], "parametr": [303, 368, 825, 846, 872], "71589994": [305, 309, 368], "14324772": [305, 309, 368], "70648694": [305, 309, 368], "54488957": [305, 309, 368], "10740992": [305, 309, 368], "19514863": [305, 309, 368], "6705687": [306, 368], "52016652": [306, 368], "40560818": [306, 368], "45630932": [306, 368], "2689": [307, 368], "7310": [307, 368], "7615": [307, 368], "2784": [307, 368], "7168": [307, 368], "8708": [307, 368], "4374": [307, 368], "1379": [307, 368], "0089": [307, 368], "59999991": [308, 368], "03597236": [310, 368], "43827677": [310, 368], "80100036": [310, 368], "12954807": [310, 368], "76459098": [310, 368], "20044947": [310, 368], "60000372": [310, 368], "taper": [313, 316, 370], "summat": [313, 370, 648, 760, 807, 808], "leakag": [313, 370], "wors": [313, 370, 862], "y1": [314, 370], "0800": [315, 370], "3979": [315, 370], "9121": [315, 370], "5400": [315, 370], "han": [316, 370], "ith": [317, 370], "00726415": [318, 370], "9999736": [318, 370], "2773e": [319, 370], "0172e": [319, 370], "9294e": [319, 370], "4149": [319, 370], "9138": [319, 370], "5529": [319, 370], "multidimension": [321, 322, 370, 872], "normalise_factor": [324, 325, 370], "parafac2": [325, 370], "tr": [326, 370], "38268346": [334, 370], "38268352": [334, 370], "8563191": [334, 370], "14943568": [334, 370], "cn": [336, 337, 373], "zh": [336, 337, 373], "amax_cn": [336, 373], "sentinel": [336, 337, 373, 648, 761, 763], "amin_cn": [337, 373], "4769": [345, 373], "position": [347, 373], "triangl": [351, 373], "999999e": [352, 373], "65999985": [354, 373], "52000046": [354, 373], "1500001": [354, 373, 547, 635], "11259177": [355, 373], "3574118": [355, 373], "20097363": [355, 373], "suppli": [359, 373, 379, 485, 807, 826, 828, 846], "217234": [360, 373], "hurwitz": [363, 373], "custom_grad_func": [365, 375], "bind": [365, 375, 820, 841, 871, 872], "upstream": [365, 375, 821, 822, 825, 836, 841], "primal": [366, 367, 375], "jacobian": [366, 367, 375, 621, 636, 857, 872], "cotang": [367, 375], "stanh": 368, "ndenumer": 370, "ndindex": 370, "random_cp": 370, "random_parafac2": 370, "random_tr": 370, "random_tt": 370, "random_tuck": 370, "bind_custom_gradient_funct": [375, 841], "jvp": 375, "vjp": 375, "h_out": [376, 393, 637, 662], "w_out": [376, 393], "area_interpol": 376, "01823380e": [376, 398, 408], "15385818e": [376, 398, 408], "36371466e": [376, 398, 408], "38763905e": [376, 398, 408], "60722279e": [376, 398, 408], "80319249e": [376, 398, 408], "05617893e": [376, 398, 408], "21500000e": [376, 398, 408], "24000015e": [376, 398, 408], "90734863e": [376, 398, 408], "10000420e": [376, 398, 408], "15899994e": [376, 398, 408], "24000053e": [376, 398, 408], "81469727e": [376, 398, 408], "09999847e": [376, 398, 408], "4135742": [376, 398, 408], "6779785": [376, 398, 408], "3770599": [376, 398, 408], "8719864": [376, 398, 408], "72109985": [376, 398, 408], "52869415": [376, 398, 408], "79182434": [376, 398, 408], "72489166": [376, 398, 408], "container_n": [376, 398, 408], "container_typ": [376, 398, 408, 635], "container_norm": [376, 398, 408], "1580677": [376, 398], "89422607": [376, 398], "86190414": [376, 398], "00041008": [376, 398], "75149155": [376, 398], "97056389": [376, 398], "87819386": [376, 398], "89381361": [376, 398], "50000000e": [376, 398, 408, 777], "22044605e": [376, 398, 408], "ed": [376, 400, 401, 402], "rest": [376, 379, 400, 401, 402, 471, 821, 828, 830, 846, 856, 874], "5d": [376, 402, 793], "emb": [376, 403], "51285338": [376, 403], "87183261": [376, 403], "2308116": [376, 403], "02733949e": [376, 404], "00j": [376, 404], "49660576e": [376, 404], "68178638e": [376, 404], "01j": [376, 404, 409], "98912367e": [376, 404], "21802426e": [376, 404, 409], "04549134e": [376, 404, 409], "82842712e": [376, 404, 409], "86902654e": [376, 404, 409], "25501143e": [376, 404, 409], "32978028e": [376, 404, 409], "52068201e": [376, 404, 409], "71158374e": [376, 404, 409], "generate_einsum_equ": 376, "get_interpolate_kernel": 376, "27279224e": [376, 408], "44232273e": [376, 408], "70464332e": [376, 408], "73454881e": [376, 408], "00902849e": [376, 408], "10039906e": [376, 408], "07022366e": [376, 408], "69506073": [376, 408], "93914604": [376, 408], "88008881": [376, 408], "18951607": [376, 408], "57439613": [376, 408], "15318303e": [376, 409], "15148591e": [376, 409], "19j": [376, 409], "25000000e": [376, 409], "35378602e": [376, 409], "02j": [376, 409], "65404249e": [376, 409], "17611649e": [376, 409], "24320230e": [376, 409], "79344813e": [376, 409], "22374531e": [376, 409], "45929364e": [376, 409], "14208718e": [376, 409], "07177031e": [376, 409], "indexerror": [376, 410, 421, 640, 703, 809, 835], "interp": [376, 849], "xp": [376, 411, 825], "fp": [376, 411], "nd": [376, 412], "tf_bicub": [376, 412, 849], "nearest_interpol": 376, "window_shap": [376, 418], "pool_typ": [376, 418], "irfft": [376, 420], "silent": [376, 420], "discard": [376, 420, 830], "1400001": [376, 420], "3999999": [376, 420], "3999996": [376, 420], "99038106j": [376, 421], "33012702": [376, 421], "23205081j": [376, 421], "33012702j": [376, 421], "superdiagon": [377, 428, 638, 671], "subdiagon": [377, 428, 638, 671], "eigendecomposit": [377, 430, 638, 673, 674], "qlq\u1d40": [377, 430, 638, 673, 674], "tridiagon": [377, 431], "38196602": [377, 431], "61803389": [377, 431], "35048741": [377, 431], "56710052": [377, 431], "06693714": [377, 431], "74234426": [377, 431], "56155282": [377, 431], "56155276": [377, 431], "82842714": [377, 431], "82842731": [377, 431, 638, 674], "necessarili": [377, 432, 826, 829], "generalis": [377, 433], "skip_matrix": [377, 436, 438], "khatri_rao_product": [377, 436], "kronecker_product": [377, 438], "n_column": [377, 438], "lu_factor": 377, "pivot": [377, 439], "lu": [377, 439, 440], "lu_solv": 377, "nnmf": [377, 441], "hoi": [377, 446, 452], "solve_triangular": 377, "unit_diagon": [377, 447], "solut": [377, 447, 638, 687, 777, 814, 818, 820, 821, 822, 829, 831, 836, 844, 846, 849, 870, 874], "determinist": [377, 448, 846], "borrow": [377, 448, 824], "extmath": [377, 448], "ivan": [377, 449], "oseledet": [377, 449], "scientif": [377, 449, 872], "2295": [377, 449], "2317": [377, 449], "2011": [377, 449], "convention": [378, 455, 875], "explicit": [378, 379, 455, 493, 821, 829, 831, 841, 842, 843, 851, 857, 872], "555969": [378, 455], "223876": [378, 455], "111938": [378, 455], "42649534": [378, 455], "68651628": [378, 455], "51119184": [378, 455], "59967244": [378, 455], "mae": [378, 456], "666": [378, 456, 637, 638, 661, 679], "91097307": [378, 458], "3467": [378, 459], "0133": [378, 459], "0250": [378, 459], "0056": [378, 459], "0025": [378, 459], "0675": [378, 459], "6987": [378, 460], "1606": [378, 460], "4032": [378, 460], "6931": [378, 460], "whilst": [379, 463, 464, 465, 856, 859, 872], "ary3": [379, 465], "check_scalar": 379, "force_integ": [379, 467], "force_posit": [379, 467], "mod": [379, 468, 825], "tall": [379, 474], "horizot": [379, 481], "shortcut": [379, 485, 821], "linear_ramp": [379, 485], "reflect": [379, 485, 822, 826, 842, 846], "ramp": [379, 485], "mirror": [379, 485, 817, 820, 872], "padding_func": [379, 485], "iaxis_pad_width": [379, 485], "iaxi": [379, 485], "unalt": [379, 485], "put": [379, 490, 820, 846, 857, 878], "mul": [379, 490, 842, 853], "conceptu": [379, 493, 868, 873], "concern": [379, 493, 822, 824, 829, 831, 833, 842, 849, 850, 878], "regard": [379, 493, 819, 829, 843, 844, 849, 862], "mutat": [379, 493], "elimin": [379, 499, 821], "consecut": [379, 499], "batch_mean": [382, 502, 504], "batch_var": [382, 502, 504], "running_vari": [382, 502, 504], "local_response_norm": 382, "neighbour": [382, 507], "42857143": [382, 508], "5714286": [382, 508], "multivari": [383, 511], "bayesian": [383, 511], "supposedli": [386, 515], "indirect": [386, 516], "secondari": [386, 516], "is_ivy_sparse_arrai": 387, "is_native_sparse_arrai": 387, "native_sparse_arrai": 387, "coo_indic": [387, 519], "crow_indic": [387, 519], "col_indic": [387, 519], "ccol_indic": [387, 519], "row_indic": [387, 519], "dense_shap": [387, 519], "native_sparse_array_to_indices_values_and_shap": 387, "nativesparsearrai": 387, "sparsearrai": 387, "linalg": [388, 523, 638, 686, 687, 820, 842, 844], "aw": [388, 523, 862], "48447205": [388, 523], "c0": [388, 526], "ck": [388, 526], "c2": [388, 526], "nearest_jax": [388, 533], "trace_on_next_step": [537, 635, 797, 855], "recalcul": [540, 635], "my_sum": [540, 635], "val1": [540, 635], "val2": [540, 635], "cached_sum": [540, 635], "line_eq": [540, 635], "slp": [540, 635], "itc": [540, 635], "cached_line_eq": [540, 635], "0353": [541, 635], "424": [541, 635], "339": [541, 635], "271": [541, 635], "391": [541, 635], "78885436": [542, 635], "41666666": [542, 635], "58333331": [542, 635], "06666667": [542, 635], "13333334": [542, 635], "40000004": [542, 635], "26666668": [542, 635], "13137734": [542, 635], "26275468": [542, 635], "39413199": [542, 635], "52550936": [542, 635], "6568867": [542, 635], "78826398": [542, 635], "84852815": [542, 635], "1313709": [542, 635], "41421366": [542, 635], "27279221": [542, 635], "69705628": [542, 635], "12132034": [542, 635], "default_str": [545, 635], "46999979": [546, 635], "66000009": [546, 635], "93000001": [546, 635], "29000092": [546, 635], "33999991": [546, 635], "6400001": [546, 635], "96000004": [546, 635], "36000013": [546, 635], "51999998": [546, 635], "67000008": [546, 635], "suppos": [546, 635, 831, 846], "960": [546, 635], "3600": [546, 635], "h1": [546, 635], "w1": [546, 635], "40499985": [547, 635], "61000061": [547, 635], "max_depth": [558, 635], "seen_set": [558, 635], "local_set": [558, 635], "referr": [558, 635], "redund": [558, 635, 814, 831, 835, 843, 865], "example_funct": [558, 635], "repr": [558, 635], "ivyexcept": [563, 596, 635, 809, 832, 835, 840, 842, 843, 847], "allow_dupl": [573, 635], "fork": [574, 635, 815, 825, 830, 836], "forkserv": [574, 635], "mp_default": [574, 635], "defaultcontext": [574, 635], "0x7f4e3193e520": [574, 635], "mp_fork": [574, 635], "forkcontext": [574, 635], "0x7f4e3193e580": [574, 635], "mp_spawn": [574, 635], "spawncontext": [574, 635], "0x7f4e3193e5e0": [574, 635], "mp_forkserv": [574, 635], "forkservercontext": [574, 635], "0x7f4e3193e640": [574, 635], "garbag": [576, 635], "collector": [576, 635], "get_all_arrays_in_memori": [576, 635], "exception_trace_mod": [580, 604, 635, 848], "lenient": [581, 605, 635], "inplace_mod": [581, 605, 635], "break": [581, 635, 827, 831, 838, 847, 857], "infus": [582, 635], "unset": [583, 590, 635, 638, 686, 802, 827, 851], "unset_min_bas": [583, 635], "nestable_mod": [585, 608, 635, 848], "precise_mod": [586, 609, 635, 848], "shape_array_mod": [588, 611, 635, 848], "show_func_wrapper_trace_mod": [589, 612, 635, 848], "tmp_dr": [590, 635], "tmp_dir": [590, 613, 635, 848], "my_tmp": [590, 635], "unset_tmp_dir": [590, 635], "49999999999975": [593, 635], "5015015015010504": [593, 635], "000444502911705e": [593, 635], "9999999999995j": [593, 635], "00000262": [594, 635], "15605032": [594, 635], "01208451j": [594, 635], "00048": [594, 635], "1296": [594, 635], "00864": [594, 635], "isn": [596, 635, 817, 822, 840, 842, 846, 854, 857, 874], "100000023841858": [598, 635], "200000047683716": [598, 635], "299999952316284": [598, 635], "400000095367432": [598, 635], "599999904632568": [598, 635], "hemant": [602, 635], "unset_shape_array_mod": [603, 635], "set_exception_trace_mod": [604, 635, 835], "set_min_bas": [606, 635], "set_min_denomin": [607, 635], "set_nestable_mod": [608, 635], "set_precise_mod": [609, 635], "set_queue_timeout": [610, 635], "set_shape_array_mod": [611, 635], "set_show_func_wrapper_trace_mod": [612, 635, 835], "set_tmp_dir": [613, 635], "my_dir": [613, 635], "451": [614, 635], "in_ax": [615, 635], "out_ax": [615, 635], "thereof": [615, 635], "summaris": [615, 635], "99999998": [616, 636], "19999998": [616, 636], "00000001": [616, 636], "00300001": [616, 636], "00800001": [616, 636], "0125": [616, 636], "17294501": [616, 636], "15770318": [616, 636], "20863818": [616, 636], "90000075": [617, 636], "90000164": [617, 636], "9000032": [617, 636], "50000012e": [617, 636], "92558754": [617, 636], "92558694": [617, 636], "92558682": [617, 636], "92558861": [617, 636], "60000025e": [617, 636], "01024": [617, 636], "retain_grad": [618, 636], "func_ret": [618, 636, 841], "666666": [618, 636], "333332": [618, 636], "66666675": [618, 626, 636], "argnum": [619, 636], "933": [619, 621, 636], "jac_fn": [621, 636], "639": [622, 636], "361": [622, 636], "52565837": [623, 636], "8418861": [623, 636], "68377209": [623, 636], "value_grad": [626, 636], "42333412": [626, 636], "5333333": [626, 636], "93333334": [626, 636], "43333334": [626, 636], "0666666": [626, 636], "softsign": 627, "718281828459045": 628, "euler": 628, "141592653589793": 628, "cmp_i": 629, "cmp_isnot": 629, "for_loop": 629, "if_els": 629, "try_except": 629, "to_dlpack": 630, "as_ivy_dtyp": [631, 843], "as_native_dtyp": 631, "check_float": 631, "closest_valid_dtyp": 631, "default_dtyp": [631, 831, 839], "dtype_bit": 631, "function_supported_dtyp": [631, 831, 846], "function_unsupported_dtyp": [631, 831], "infer_default_dtyp": 631, "invalid_dtyp": [631, 831], "is_hashable_dtyp": 631, "is_native_dtyp": 631, "promote_typ": [631, 831], "promote_types_of_input": [631, 831, 842], "type_promote_arrai": [631, 831], "unset_default_complex_dtyp": 631, "unset_default_float_dtyp": 631, "unset_default_int_dtyp": 631, "unset_default_uint_dtyp": 631, "valid_dtyp": 631, "defaultcomplexdtyp": 631, "defaultdtyp": 631, "defaultfloatdtyp": 631, "defaultintdtyp": 631, "defaultuintdtyp": 631, "as_ivy_dev": [632, 853], "clear_cached_mem_on_dev": 632, "dev_util": [632, 832], "function_supported_devic": 632, "function_unsupported_devic": 632, "get_all_ivy_arrays_on_dev": [632, 832], "handle_soft_device_vari": [632, 832], "num_cpu_cor": [632, 832], "num_gpu": [632, 832, 846], "num_ivy_arrays_on_dev": 632, "percent_used_mem_on_dev": 632, "print_all_ivy_arrays_on_dev": 632, "set_split_factor": [632, 835], "split_func_cal": 632, "total_mem_on_dev": [632, 832], "tpu_is_avail": 632, "unset_default_devic": [632, 832], "unset_soft_device_mod": [632, 832], "used_mem_on_dev": 632, "defaultdevic": [632, 832], "profil": 632, "save_dir": 632, "arg_info": 635, "arg_nam": 635, "cache_fn": [635, 839], "current_backend_str": [635, 846, 851, 853], "function_supported_devices_and_dtyp": 635, "function_unsupported_devices_and_dtyp": 635, "get_item": [635, 842], "get_referrers_recurs": 635, "inplace_arrays_support": 635, "inplace_variables_support": 635, "is_ivy_nested_arrai": 635, "isscalar": 635, "match_kwarg": 635, "num_arrays_in_memori": 635, "print_all_arrays_in_memori": 635, "set_item": [635, 846], "to_ivy_shap": 635, "to_native_shap": 635, "try_else_non": 635, "unset_array_mod": [635, 848], "unset_exception_trace_mod": 635, "unset_inplace_mod": 635, "unset_min_denomin": 635, "unset_nestable_mod": 635, "unset_precise_mod": 635, "unset_queue_timeout": 635, "unset_show_func_wrapper_trace_mod": 635, "vmap": [635, 857, 872], "arraymod": 635, "precisemod": [635, 831], "jac": 636, "value_and_grad": [636, 841], "feature_group_count": [637, 650, 657, 658], "oiw": [637, 650, 651, 657], "oihw": [637, 650, 653, 657], "oidhw": [637, 650, 655, 657], "dhwio": [637, 650, 651, 655, 657], "conv_general_dil": [637, 843], "conv_general_transpos": 637, "depthwis": [637, 659, 779, 793], "1428566": [637, 660], "49000001": [637, 660], "55599999": [637, 660], "21000004": [637, 660], "incom": [637, 661], "4269": [637, 661], "911": [637, 661, 835], "157": [637, 661], "753": [637, 661], "545": [637, 644, 661, 742], "547": [637, 661, 832], "963": [637, 661], "98495483": [637, 661], "0293808": [637, 661], "0159359": [637, 661], "74752808": [637, 661], "20942307": [637, 661], "3205719": [637, 661], "all_weight": [637, 662], "num_lay": [637, 662, 793], "batch_first": [637, 662, 664], "weights_transpos": [637, 662], "has_ih_bia": [637, 662], "has_hh_bia": [637, 662], "multi": [637, 638, 662, 664, 669, 779, 793, 833, 850, 857, 868, 870, 872, 876], "long": [637, 662, 663, 821, 822, 830, 831, 833, 835, 836, 843, 851, 872], "seq_len": [637, 662], "input_s": [637, 662], "h_0": [637, 662], "c_0": [637, 662], "num_direct": [637, 662], "hidden_s": [637, 662], "four": [637, 662, 817, 826, 831, 833, 838, 839, 846, 849, 854], "w_ih": [637, 662], "w_hh": [637, 662], "b_ih": [637, 662], "b_hh": [637, 662], "pack": [637, 662], "c_out": [637, 662], "vaswani": [637, 664], "al": [637, 664], "num_attention_head": [637, 664], "key_dim": [637, 664, 793], "value_dim": [637, 664, 793], "attention_weight": [637, 664], "unbatch": [637, 664], "nm": 637, "box": [637, 665, 666, 821], "iou_threshold": [637, 665], "max_output_s": [637, 665], "score_threshold": [637, 665], "roi_align": 637, "spatial_scal": [637, 666], "sampling_ratio": [637, 666], "23333359": [637, 667], "03946018": [637, 667], "0280633": [637, 667], "29981947": [637, 667], "29981089": [637, 667], "06345534": [637, 667], "9634552": [637, 667], "19336844": [637, 667], "09336829": [637, 667], "axisa": [638, 669], "axisb": [638, 669], "axisc": [638, 669], "293": [638, 670], "46997": [638, 670], "17157288": [638, 674], "9238795": [638, 674], "78930789": [638, 674], "59803128": [638, 674], "19127655": [638, 674], "31213903": [638, 674], "63418275": [638, 674], "84632206": [638, 674], "70548367": [638, 674], "70223427": [638, 674], "09570674": [638, 674], "63116378": [638, 674], "56109613": [638, 674], "53554028": [638, 674], "32237405": [638, 674], "43822157": [638, 674], "83906901": [638, 674], "50766778": [638, 674], "71475857": [638, 674], "48103389": [638, 674], "3676433": [638, 674], "68466955": [638, 674], "62933773": [638, 674], "77917379": [638, 674], "14264561": [638, 674], "61036086": [638, 674], "45033181e": [638, 675], "02829754e": [638, 675], "54220343e": [638, 675], "12647155e": [638, 675], "38447177e": [638, 675], "56155300e": [638, 675], "26794919": [638, 675], "7320509": [638, 675], "0012": [638, 677], "00342": [638, 677], "000565": [638, 677], "0104": [638, 677], "000981": [638, 677], "00282": [638, 677], "000766": [638, 677], "0322": [638, 677], "00237": [638, 677], "000151": [638, 677], "00101": [638, 677], "00019": [638, 677], "0214": [638, 677], "00171": [638, 677], "0107": [638, 677], "0167": [638, 677], "0472": [638, 677], "0536": [638, 677], "0177": [638, 677], "000429": [638, 677], "00762": [638, 677], "frobeniu": [638, 679], "nuclear": [638, 679], "induc": [638, 679], "ranl": [638, 679], "47722558": [638, 679], "776": [638, 679], "6000004": [638, 679], "118": [638, 680], "moor": [638, 684], "penros": [638, 684], "31622776": [638, 685], "94868332": [638, 685], "1622777": [638, 685], "42718887": [638, 685], "deteremin": [638, 686], "logsabsdet": [638, 686], "subject": [638, 686], "unset_backend": [638, 686, 802, 827], "ordin": [638, 687], "b2": [638, 687], "usvh": [638, 688], "cetera": [638, 688], "driver": [638, 689, 857], "gesvd": [638, 689], "gesvdj": [638, 689], "gesvda": [638, 689], "86217213": [638, 689], "31816804": [638, 689], "615": [638, 689], "ss": [638, 689], "25994301": [638, 689], "16403675": [638, 689], "61529762": [638, 689], "51231241": [638, 689], "39777088": [638, 689], "15413129": [638, 689], "1029852": [638, 689], "01383495": [638, 689], "86647356": [638, 689], "7786541": [638, 689], "55970621": [638, 689], "16857576": [638, 689], "86412698": [638, 689], "37566757": [638, 689], "88477993": [638, 689], "95925522": [638, 689], "6444726": [638, 689], "54687881": [638, 689], "16134834": [638, 689], "35037804": [638, 689], "31025076": [638, 689], "35769391": [638, 689], "transposit": [638, 690], "0x": [638, 693], "Such": [638, 693, 839, 846], "alexandr": [638, 693], "theophil": [638, 693], "dot_product": [638, 694], "9000001": [638, 695], "64158917": [638, 695], "skew": [638, 696], "60309976": [639, 697], "6666193": [639, 697], "01348412": [639, 697], "05393649": [639, 697], "49992943": [639, 697], "83330965": [639, 697], "02136981": [639, 697], "32844672": [639, 697], "26561815": [639, 697], "22314337": [639, 697], "08916873": [639, 698, 699], "44832274": [639, 699], "75646281": [639, 699], "13862944": [639, 699], "57564628": [639, 699], "honor": [640, 707], "beyond": [640, 708, 814, 834, 843, 878], "famili": [640, 711], "intxx": [640, 711], "floatxx": [640, 711], "rep": [640, 713], "fomaml_step": 641, "inner_cost_fn": [641, 716, 717, 718], "outer_cost_fn": [641, 716, 717], "inner_grad_step": [641, 716, 717, 718], "inner_learning_r": [641, 716, 717, 718], "inner_optimization_step": [641, 716, 717, 718], "inner_batch_fn": [641, 716, 717], "outer_batch_fn": [641, 716, 717], "average_across_step": [641, 716, 717], "inner_v": [641, 716, 717], "keep_inner_v": [641, 716, 717], "outer_v": [641, 716, 717], "keep_outer_v": [641, 716, 717], "return_inner_v": [641, 716, 717, 718], "num_task": [641, 716, 717, 718], "maml": [641, 716, 717], "0x7f04e264d2d0": [641, 716, 717, 718], "maml_step": 641, "vanilla": [641, 717, 855, 872], "_variabl": [641, 717, 718], "sub_batch": [641, 717], "40069818": [641, 717], "13723135": [641, 717], "reptile_step": 641, "cost_fn": [641, 718], "reptil": [641, 718], "batch_in": [641, 718], "4485182": [641, 718], "139": [641, 718], "9569855": [641, 718], "9880483": [641, 718], "01766968": [641, 718], "02197957": [641, 718], "02197981": [641, 718], "all_nested_indic": 642, "include_nest": [642, 719], "_index": [642, 719, 730], "_base": [642, 719, 729, 730, 842], "themselv": [642, 719, 829, 831, 832, 834, 839, 843, 855, 869, 878], "863": [642, 719, 832], "672": [642, 719], "482": [642, 719], "674": [642, 719], "341": [642, 719], "copy_nest": 642, "to_mut": [642, 720, 731], "deepli": [642, 720, 823, 857, 872], "copied_nest": [642, 720], "1337": [642, 720, 731], "duplicate_array_index_chain": 642, "index_nest": [642, 839], "insert_into_nest_at_index": 642, "insert_into_nest_at_indic": 642, "special_squar": [642, 725], "6666666666666667": [642, 725], "special_pow": [642, 725], "linear_model": [642, 725], "map_nest_at_index": 642, "_result": [642, 726, 736], "hh": [642, 726, 731], "map_nest_at_indic": 642, "ub": [642, 727], "tb": [642, 727], "multi_index_nest": 642, "nested_ani": 642, "check_nest": [642, 729, 730], "nested_argwher": 642, "stop_after_n_found": [642, 730], "nested_indic": [642, 730], "nested_map": [642, 832, 839], "_tuple_check_fn": [642, 731], "_list_check_fn": [642, 731], "_dict_check_fn": [642, 731], "wherebi": [642, 731, 820, 869], "ah": [642, 731], "bh": [642, 731], "ch": [642, 731], "dh": [642, 731, 825], "eh": [642, 731], "gh": [642, 731, 821, 836], "ih": [642, 731], "1338": [642, 731], "nested_multi_map": 642, "index_chain": [642, 732], "nest0": [642, 732], "ivy_arrai": [642, 732, 826, 843], "unappli": [642, 732], "prune_empti": 642, "prune_nest_at_index": 642, "prune_nest_at_indic": 642, "set_nest_at_index": 642, "set_nest_at_indic": 642, "xyz": [642, 737], "pqr": [642, 737], "mini": [643, 738, 793, 796], "uniformli": [644, 740, 742], "22346112": [644, 741], "0922": [644, 741], "9213753": [644, 741], "12818667": [644, 741], "799": [644, 741], "469": [644, 741], "287": [644, 741], "0366": [644, 741], "26431865": [644, 742], "475": [644, 742], "878": [644, 742], "861": [644, 742], "929": [644, 742], "789": [644, 742], "519": [644, 742], "0435": [644, 742], "381": [644, 742], "4608004": [644, 742], "8458502": [644, 742], "67270088": [644, 742], "31128597": [644, 742], "394": [644, 744], "zeroel": [645, 748], "fourth": [646, 750], "1141": [646, 750], "8101": [646, 750], "9298": [646, 750], "8460": [646, 750], "2119": [646, 750], "3519": [646, 750], "6252": [646, 750], "4033": [646, 750], "7443": [646, 750], "2577": [646, 750], "3707": [646, 750], "0545": [646, 750], "3238": [646, 750], "5944": [646, 750], "0775": [646, 750], "4327": [646, 750], "62519997": [646, 750], "40329999": [646, 750], "59439999": [646, 750], "74430001": [646, 750], "81010002": [646, 750], "84600002": [646, 750], "92979997": [646, 750], "einstein": [648, 760, 807], "117": [648, 760], "intend": [648, 766, 775, 792, 825, 838, 841, 870, 872, 876, 877], "07472222": [648, 767], "00666667": [648, 767], "08966666": [648, 767], "simplicit": [649, 768, 769], "ivy_test": [772, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 820, 821, 822, 825, 828, 830, 836, 844], "test_ivi": [772, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 820, 821, 822, 828, 830, 836, 844, 846], "assert_all_clos": [772, 844], "ret_np": [772, 774, 844], "ret_from_gt_np": [772, 844], "ground_truth_backend": [772, 774, 775, 784, 785, 818, 836, 844], "mark": [772, 817, 820, 822, 825, 846, 851], "assert_same_typ": 772, "ret_from_target": 772, "ret_from_gt": 772, "backend_to_test": [772, 774, 818, 836, 844], "gt_backend": 772, "with_backend": [772, 802], "assert_same_type_and_shap": 772, "this_key_chain": 772, "check_unsupported_devic": 772, "input_devic": 772, "all_as_kwargs_np": [772, 774], "check_unsupported_device_and_dtyp": 772, "input_dtyp": [772, 774, 784, 818, 836, 844, 846], "check_unsupported_dtyp": 772, "test_unsupported_funct": 772, "value_test": 772, "ret_np_flat": 772, "ret_np_from_gt_flat": 772, "specific_tolerance_dict": 772, "ret_from_np_gt_flat": 772, "function_test": 774, "args_to_contain": 774, "array_arg": [774, 839], "args_to_frontend": 774, "frontend_array_fn": 774, "arrays_to_frontend": 774, "as_list": 774, "convtru": 774, "nativeclass": 774, "counter": [774, 855], "create_args_kwarg": 774, "args_np": 774, "arg_np_val": 774, "args_idx": 774, "kwargs_np": 774, "kwarg_np_val": 774, "kwargs_idx": 774, "test_flag": [774, 818, 836, 844, 846], "on_devic": [774, 784, 818, 836, 844], "flatten_and_to_np": 774, "flatten_frontend": 774, "flatten_frontend_fw_to_np": 774, "frontend_ret": [774, 844], "isscalar_func": 774, "is_native_array_func": 774, "to_numpy_func": 774, "flatten_frontend_to_np": 774, "get_frontend_ret": 774, "frontend_fn": 774, "frontend_array_funct": 774, "precision_mod": [774, 784, 785, 836], "test_trac": [774, 784, 785, 818, 825, 836], "test_trace_each": [774, 784, 785], "get_ret_and_flattened_np_arrai": 774, "gradient_incompatible_funct": 774, "gradient_test": [774, 846], "rtol_": [774, 818, 836], "atol_": [774, 818, 836, 844], "tolerance_dict": 774, "gradient_unsupported_dtyp": 774, "kwargs_to_args_n_kwarg": 774, "num_positional_arg": [774, 784, 785, 818, 836, 844, 846], "port": [774, 863], "test_frontend_funct": [774, 844], "fn_tree": [774, 775, 785, 818, 836, 843, 844, 846], "gt_fn_tree": [774, 785], "test_valu": [774, 844, 846], "frontend_function_flag": [774, 784], "functiontestflag": [774, 784, 818, 836], "with_out": [774, 784, 818, 836, 844, 846], "instance_method": [774, 784, 818, 836, 846], "as_vari": [774, 784, 818, 836, 844, 846], "namespac": [774, 820, 831, 840, 843, 844, 847, 851, 856], "arg_": 774, "test_frontend_method": [774, 844], "init_input_dtyp": [774, 844], "method_input_dtyp": [774, 844], "init_flag": [774, 844, 846], "method_flag": [774, 784, 844, 846], "init_all_as_kwargs_np": [774, 844], "method_all_as_kwargs_np": [774, 844], "frontend_method_data": [774, 844], "init_as_variable_flag": [774, 785], "dictat": [774, 826, 833, 838, 842], "init_num_positional_arg": [774, 785], "init_native_array_flag": 774, "with_v": 774, "ret_gt": 774, "test_funct": [774, 818, 821, 822, 830, 836, 844, 846], "fn_name": [774, 775, 785, 818, 827, 836, 844, 846], "return_flat_np_arrai": 774, "as_variable_flag": [774, 785, 846], "native_array_flag": [774, 785, 846], "container_flag": [774, 784, 785, 846], "test_function_backend_comput": 774, "test_function_ground_truth_comput": 774, "arg_np_arrai": 774, "arrays_args_indic": 774, "arrays_kwargs_indic": 774, "kwarg_np_arrai": 774, "test_gradient_backend_comput": 774, "test_gradient_ground_truth_comput": 774, "test_method": 774, "method_nam": [774, 783, 785, 844], "init_with_v": 774, "method_with_v": 774, "test_gradi": [774, 784, 785, 818, 836, 846], "method_as_variable_flag": [774, 785], "method_num_positional_arg": [774, 785], "method_native_array_flag": 774, "method_container_flag": [774, 785], "test_method_backend_comput": 774, "test_method_ground_truth_comput": 774, "org_con_data": 774, "args_np_method": 774, "met_arg_np_v": 774, "met_args_idx": 774, "kwargs_np_method": 774, "met_kwarg_np_v": 774, "met_kwargs_idx": 774, "v_np": 774, "traced_if_requir": 774, "wrap_frontend_function_arg": 774, "holder": 775, "current_frontend_config": 775, "0x7f04d6415f70": 775, "interruptedtest": 775, "test_interrupt": 775, "baseexcept": 775, "tri": [775, 831], "testdata": 775, "supported_device_dtyp": 775, "is_method": 775, "setup_api_test": 775, "test_data": 775, "setup_frontend_test": 775, "teardown_api_test": 775, "teardown_frontend_test": 775, "hypothesis_help": [777, 778, 779, 780], "array_help": 777, "array_and_broadcastable_shap": 777, "searchstrategi": [777, 778, 779, 780, 784, 785, 846], "array_bool": [777, 846], "min_valu": [777, 778, 779, 780, 818, 836, 844, 846], "max_valu": [777, 778, 779, 780, 844, 846], "ex": [777, 778, 779, 780, 785, 830, 866], "strategi": [777, 778, 779, 780, 784, 785, 820, 844], "array_helpers_dtype_info_help": 777, "kind_dtyp": [777, 779], "array_indices_axi": 777, "array_dtyp": [777, 778, 846], "indices_dtyp": 777, "get_dtyp": [777, 778, 818, 836, 844, 846], "abs_smallest_v": [777, 779, 780], "large_abs_safety_factor": [777, 779, 780, 818, 836, 844, 846], "small_abs_safety_factor": [777, 779, 780, 818, 836, 844], "safety_factor_scal": [777, 779, 780, 844, 846], "disable_random_axi": 777, "axis_zero": 777, "allow_inf": [777, 780, 844, 846], "min_num_dim": [777, 779, 844, 846], "max_num_dim": [777, 779, 844, 846], "min_dim_s": [777, 779, 844, 846], "max_dim_s": [777, 779, 844], "first_dimension_onli": 777, "indices_same_dim": 777, "valid_bound": 777, "safeti": [777, 779, 780, 872], "0002": [777, 780], "hypothesi": [777, 779, 785, 820, 822, 825, 830, 840], "65536": 777, "44758124e": [777, 846], "array_indices_put_along_axi": 777, "values_dtyp": 777, "array_valu": [777, 846], "allow_nan": [777, 780, 846], "allow_subnorm": [777, 780, 846], "exclude_min": [777, 780, 846], "exclude_max": [777, 780], "subnorm": [777, 780], "get_shap": [777, 779, 844, 846], "1806": 777, "36912": 777, "6955": 777, "59576": 777, "arrays_and_ax": 777, "available_dtyp": [777, 778, 818, 836, 844, 846], "allow_non": [777, 779, 844, 846], "return_dtyp": 777, "force_int_axi": 777, "26e": 777, "10e": 777, "24322108": 777, "26446279e": 777, "96046448e": 777, "008": 777, "17549435e": 777, "038": 777, "06541027e": 777, "13725760e": 777, "07143888": 777, "arrays_for_pool": 777, "min_dim": 777, "max_dim": 777, "min_sid": 777, "max_sid": 777, "explicit_or_str_pad": 777, "only_explicit_pad": 777, "return_dil": 777, "mixed_fn_compo": [777, 778, 779, 780, 846], "return_data_format": 777, "cond_data_gen_help": 777, "create_concatenable_arrays_dtyp": 777, "min_num_arrai": 777, "max_num_arrai": 777, "concat_dim": 777, "common_shap": [777, 846], "stackabl": 777, "given_common_shap": 777, "create_nested_input": 777, "leaf_valu": 777, "dtype_and_valu": [777, 818, 836, 844, 846], "num_arrai": [777, 778, 844, 846], "shared_dtyp": [777, 778, 844], "ret_shap": 777, "array_api_dtyp": [777, 778], "shape_kei": 777, "37915": 777, "6322": 777, "26765": 777, "12413": 777, "26986": 777, "34665": 777, "000e": 777, "711e": 777, "100e": 777, "955e": [777, 846], "40817": 777, "56193": 777, "29200": 777, "5851": 777, "9746": 777, "9604645e": 777, "103": 777, "41795": 777, "1170789994": 777, "44251": 777, "44209": 777, "433075925": 777, "24791": 777, "24691": 777, "24892": 777, "16711": 777, "972": 777, "15357": 777, "72057594037927936": 777, "dtype_array_queri": 777, "allow_mask": 777, "allow_neg_step": 777, "dtype_array_query_v": 777, "dtype_values_axi": [777, 846], "min_axi": 777, "max_axi": 777, "valid_axi": 777, "allow_neg_ax": 777, "min_axes_s": 777, "max_axes_s": 777, "force_tuple_axi": 777, "29788": 777, "62222885e": 777, "68281172e": 777, "257j": 777, "40129846e": 777, "90000000e": 777, "63426649e": 777, "91931887e": 777, "29488e": 777, "14361019e": 777, "12445": 777, "einsum_help": 777, "get_first_solve_batch_matrix": 777, "choose_adjoint": 777, "get_second_solve_batch_matrix": 777, "get_first_solve_matrix": 777, "allow_simplifi": 777, "choose_sid": 777, "xa": 777, "get_second_solve_matrix": 777, "list_of_s": 777, "sampled_from": [777, 844, 846], "min_siz": [777, 779, 785, 846], "max_siz": [777, 779, 785, 846], "size_bound": [777, 846], "999999999999999": 777, "9394938006792373": 777, "mutually_broadcastable_shap": 777, "num_shap": 777, "base_shap": 777, "dtype_help": 778, "univers": [778, 843, 861], "cast_filt": 778, "cast_filter_help": 778, "current_backend": [778, 802, 820, 827, 835, 839, 844, 847, 851], "get_castable_dtyp": 778, "castabl": 778, "prune_funct": 778, "intersect": [778, 830, 846], "signed_integ": 778, "real_and_complex": 778, "float_and_complex": 778, "general_help": 779, "broadcasterror": 779, "apply_safety_factor": 779, "dims_and_offset": 779, "ensure_dim_uniqu": 779, "embedding_help": 779, "general_helpers_dtype_info_help": 779, "get_axi": [779, 846], "allow_neg": 779, "sort_valu": 779, "force_tupl": 779, "force_int": 779, "assertionerror": [779, 818, 825, 835, 836, 844, 846], "get_bound": [779, 846], "get_mean_std": 779, "matrix_is_st": 779, "cond_limit": 779, "instabl": [779, 818, 831, 836], "computation": [779, 821], "prone": [779, 831], "thumb": 779, "gradual": 779, "collinear": 779, "reshape_shap": [779, 846], "sizes_": 779, "two_broadcastable_shap": 779, "x_and_filt": 779, "number_help": 780, "arbitrarili": [780, 854], "safety_factor": 780, "backend_proc": 781, "input_queu": 781, "output_queu": 781, "frontend_proc": 781, "pipeline_help": 782, "backendhandl": 782, "update_backend": [782, 844], "backendhandlermod": 782, "enum": [782, 805], "setbackend": 782, "withbackend": 782, "withbackendcontext": 782, "get_frontend_config": 782, "frontendmethoddata": 783, "ivy_init_modul": 783, "framework_init_modul": 783, "init_nam": 783, "test_parameter_flag": 784, "dynamicflag": [784, 785], "frontendfunctiontestflag": [784, 836], "with_copi": 784, "generate_frontend_arrai": [784, 785, 836], "testflag": 784, "apply_flag": 784, "args_to_iter": 784, "frontendinittestflag": 784, "frontendmethodtestflag": 784, "test_cython_wrapp": [784, 785], "initmethodtestflag": 784, "methodtestflag": 784, "build_flag": 784, "frontend_init_flag": 784, "frontend_method_flag": 784, "function_flag": 784, "init_method_flag": 784, "testing_help": 785, "handle_exampl": [785, 846], "test_exampl": [785, 846], "test_frontend_exampl": [785, 846], "test_method_exampl": [785, 846], "test_frontend_method_exampl": [785, 846], "given_kwarg": 785, "handle_frontend_method": [785, 844, 846], "class_tre": [785, 844], "init_tre": [785, 844], "init_native_arrai": 785, "_as_varaible_strategi": 785, "method_native_arrai": 785, "test_inplac": [785, 846], "_given_kwarg": 785, "test_compil": 785, "handle_frontend_test": [785, 844, 846], "alias": [785, 820, 843, 844], "number_positional_arg": [785, 844], "test_with_out": [785, 844, 846], "test_with_copi": 785, "handle_method": [785, 805, 846], "method_tre": [785, 844, 846], "_gradient_strategi": 785, "handle_test": [785, 818, 836, 846], "test_instance_method": [785, 846], "num_positional_args_help": 785, "num_positional_args_method": 785, "geglu": 789, "leakyrelu": 789, "logsoftmax": 789, "from_flax_modul": 790, "native_modul": 790, "params_fx": 790, "rng_seed": 790, "constructor_arg": 790, "constructor_kwarg": 790, "instance_arg": 790, "instance_kwarg": 790, "flax": [790, 856, 857, 863, 872], "from_haiku_modul": 790, "params_hk": 790, "from_paddle_modul": 790, "from_torch_modul": 790, "to_keras_modul": 790, "native_module_class": 790, "modulehelp": [791, 795], "create_vari": [792, 855], "var_shap": [792, 855], "fan_out": [792, 855], "fan_in": [792, 855], "rectangular": 792, "firstlayersiren": 792, "siren": 792, "glorotuniform": [792, 793, 855], "glorot": 792, "xavier": 792, "neuron": 792, "w_1x_1": 792, "w_2x_2": 792, "w_nx_n": 792, "w_i": 792, "kaimingnorm": 792, "fan_mod": [792, 855], "kaim": 792, "he": 792, "negative_slop": 792, "fan": 792, "propog": 792, "fan_sum": [792, 855], "Ones": 792, "randomnorm": 792, "stddev": 792, "w0": 792, "wlim": 792, "predefin": 792, "fan_avg": 792, "adaptiveavgpool1d": 793, "avgpool1d": 793, "implicit": [793, 829, 834, 843, 846, 851, 872], "avgpool2d": 793, "avgpool3d": 793, "e501": 793, "filter_s": 793, "weight_initi": [793, 855], "bias_initi": [793, 855], "0x7f04e2372c20": 793, "0x7f04e2372890": 793, "conv1dtranspos": 793, "0x7f04e2372530": 793, "0x7f04e2370dc0": 793, "filter_shap": 793, "0x7f04e2370f10": 793, "0x7f04e2371e40": 793, "0x7f04e2372ce0": 793, "0x7f04e2372e90": 793, "0x7f04e239b1f0": 793, "0x7f04e23998d0": 793, "conv3dtranspos": 793, "0x7f04e2398400": 793, "0x7f04e2399870": 793, "depthwiseconv2d": 793, "num_channel": 793, "0x7f04e2371de0": 793, "0x7f04e2372500": 793, "bernoul": 793, "num_embed": 793, "embedding_dim": 793, "padding_idx": 793, "lookup": 793, "num_embeddingss": 793, "renorm": 793, "insensit": 793, "return_st": 793, "0x7f04e239ae00": 793, "get_initial_st": 793, "0x7f04e2372920": 793, "0x7f04e23728c0": 793, "maxpool1d": 793, "maxpool3d": 793, "multiheadattent": 793, "embed_dim": 793, "head_dim": 793, "dropout_r": 793, "use_proj_bia": 793, "attention_ax": 793, "build_mod": [793, 794, 795], "on_init": [793, 795], "parallel": [793, 828, 872, 876, 877], "binarycrossentropyloss": 794, "store_var": [794, 795], "with_partial_v": [794, 795], "logpoissonloss": 794, "modulemeta": 795, "temporarili": [795, 818, 825, 836], "from_cal": 795, "module_dict": 795, "register_buff": 795, "register_paramet": 795, "weights_path": 795, "randomness_factor": 795, "with_edge_label": 795, "with_arg_label": 795, "with_output_label": 795, "output_connected_onli": 795, "highlight_subgraph": 795, "trace_kwarg": 795, "_unified_ivy_graph": 795, "_call": 795, "num_featur": 796, "trail": 796, "layernorm": 796, "normalized_shap": 796, "elementwise_affin": 796, "set_stat": [797, 855], "adamw": 797, "weight_decai": 797, "init_on_first_step": 797, "fallback_to_non_trac": 797, "ignore_miss": 797, "privat": [797, 814, 843, 846], "_step": [797, 855], "stochast": [797, 872], "sub_modul": 798, "check_al": 799, "check_all_or_any_fn": 799, "check_ani": 799, "check_dev_correct_format": 799, "check_dimens": 799, "check_elem_in_list": [799, 839, 842, 843], "elem": 799, "check_equ": [799, 843], "check_exist": 799, "check_fals": 799, "check_gather_input_valid": 799, "check_gather_nd_input_valid": 799, "check_great": 799, "allow_equ": [799, 835], "check_inplace_sizes_valid": [799, 842], "check_isinst": 799, "allowed_typ": 799, "check_kernel_padding_s": 799, "padding_s": 799, "check_less": [799, 835], "check_one_way_broadcast": 799, "check_same_dtyp": 799, "check_shapes_broadcast": 799, "check_tru": 799, "check_unsorted_segment_valid_param": 799, "ast_help": 801, "importtransform": 801, "nodetransform": 801, "impersonate_import": 801, "tree": [801, 831], "local_ivy_id": 801, "visit_import": 801, "visit_importfrom": 801, "ivyload": 801, "loader": [801, 854, 857], "exec_modul": 801, "ivypathfind": 801, "metapathfind": 801, "find_spec": 801, "fullnam": 801, "contextmanag": 802, "choose_random_backend": 802, "global_backend": 802, "dynamic_backend_convert": 802, "backend_stack": [802, 851], "prevent_access_loc": 802, "previous_backend": [802, 827], "Or": [802, 814, 816, 821, 842, 854], "set_backend_to_specific_vers": 802, "set_jax_backend": 802, "set_mxnet_backend": 802, "mx": 802, "set_numpy_backend": 802, "set_paddle_backend": 802, "set_tensorflow_backend": 802, "set_torch_backend": 802, "sub_backend_handl": 803, "clear_sub_backend": 803, "find_available_sub_backend": 803, "sub_backends_loc": 803, "fn_name_from_version_specific_fn_nam": 803, "fn_name_from_version_specific_fn_name_sub_backend": 803, "sub_backend_vers": 803, "backend_vers": [803, 818, 831, 836], "set_sub_backend": 803, "sub_backend_str": 803, "set_sub_backend_to_specific_vers": 803, "sub_backend": 803, "unset_sub_backend": 803, "check_for_binari": 804, "cleanup_and_fetch_binari": [804, 821], "clean": [804, 822, 847, 851, 852, 854], "decorator_util": 805, "callvisitor": 805, "nodevisitor": 805, "visit_cal": 805, "transposetyp": 805, "no_transpos": 805, "apply_transpos": 805, "pt_to_tf": 805, "get_next_func": 805, "handle_get_item": 805, "handle_set_item": 805, "handle_transpose_in_input_and_output": 805, "retrieve_object": 805, "store_config_info": 805, "dynamic_import": 806, "import_modul": [806, 851], "einsum_pars": 807, "convert_interleaved_input": 807, "interleav": 807, "convert_subscript": 807, "old_sub": 807, "symbol_map": 807, "subscript": [807, 808], "oe": 807, "ellipsi": [807, 808], "find_output_shap": 807, "find_output_str": 807, "canon": 807, "gen_unused_symbol": 807, "abd": [807, 808], "get_symbol": 807, "letter": 807, "resort": 807, "unicod": 807, "charact": [807, 843, 862], "chr": 807, "surrog": 807, "\u0155": 807, "20000": 807, "\u4eac": 807, "has_valid_einsum_chars_onli": 807, "einsum_str": 807, "abaz": 807, "\u00f6ver": 807, "is_valid_einsum_char": 807, "\u01f5": 807, "legalise_einsum_expr": 807, "reproduct": [807, 808], "pars": [807, 808, 828, 833, 857], "intak": 807, "contract_path": 807, "parse_einsum_input": [807, 808], "einsum_eqn": 807, "legalis": 807, "legalise_einsum_eqn": 807, "za": [807, 808], "xza": [807, 808], "xz": [807, 808], "possibly_convert_to_numpi": 807, "myshap": 807, "__main__": 807, "0x10f850710": 807, "einsum_path_help": 808, "can_dot": 808, "idx_remov": 808, "bla": 808, "benefici": 808, "movement": 808, "costli": 808, "gemm": 808, "ijj": 808, "ddot": 808, "ikj": 808, "compute_size_by_dict": 808, "idx_dict": 808, "abbc": 808, "find_contract": 808, "input_set": 808, "output_set": 808, "lh": 808, "rh": 808, "new_result": 808, "idx_contract": 808, "iset": 808, "oset": 808, "bdc": 808, "flop_count": 808, "num_term": 808, "size_dictionari": 808, "flop": [808, 812], "greedy_path": 808, "memory_limit": 808, "exhaust": [808, 842, 846, 869, 878], "indices_remov": 808, "priorit": [808, 820, 845, 849], "hadamard": 808, "cubic": 808, "greedi": 808, "idx_siz": 808, "optimal_path": 808, "siev": 808, "input_str": 808, "output_str": 808, "parse_possible_contract": 808, "path_cost": 808, "naive_cost": 808, "propos": [808, 822, 843, 849, 872], "intermediari": [808, 827], "unoptim": 808, "new_input_set": 808, "update_other_result": 808, "provision": 808, "_parse_possible_contract": 808, "mod_result": 808, "inplaceupdateexcept": 809, "include_backend": [809, 835], "ivyattributeerror": [809, 835], "attributeerror": [809, 835, 853], "ivybroadcastshapeerror": [809, 835], "ivydeviceerror": 809, "ivydtypepromotionerror": [809, 835], "ivyindexerror": [809, 835], "ivyinvalidbackendexcept": 809, "ivynotimplementedexcept": [809, 835], "notimplementederror": 809, "ivyvalueerror": [809, 835], "handle_except": [809, 838, 840], "add_array_spec": 810, "fn_array_spec": 810, "set_logging_mod": 811, "debug": [811, 817, 821, 822, 829, 830, 841, 846, 849, 854, 872, 880], "unset_logging_mod": 811, "print_stat": 812, "viz": 812, "snakeviz": 812, "bonu": 812, "cprofil": 812, "tensorflow_profile_start": 812, "logdir": 812, "host_tracer_level": 812, "python_tracer_level": 812, "device_tracer_level": 812, "delay_m": 812, "toggl": [812, 822], "timestamp": 812, "awai": [812, 814, 870, 872], "millisecond": 812, "guess": 812, "tensorflow_profile_stop": 812, "torch_profiler_init": 812, "schedul": [812, 830, 857, 872, 879], "on_trace_readi": 812, "record_shap": 812, "profile_memori": 812, "with_stack": 812, "with_flop": 812, "with_modul": 812, "experimental_config": 812, "profileract": 812, "record_and_sav": 812, "dealloc": 812, "record": [812, 821, 857, 873], "callstack": 812, "aten": 812, "torchscript": [812, 851, 859, 879], "_experimentalconfig": 812, "kineto": 812, "torch_profiler_start": 812, "torch_profiler_stop": 812, "cprint": [813, 851], "frameworkus": 814, "source_to_sourc": 814, "docker": [814, 818, 819, 836], "challeng": [814, 820, 827, 878], "pull": [814, 815, 817, 820, 821, 825, 833, 837, 847, 849, 857, 858, 863], "transpileai": 814, "llc": 814, "faq": [814, 828], "brief": [814, 842, 846], "jax_fn": 814, "jax_x": 814, "torch_x": 814, "torch_fn": 814, "shorter": [814, 853], "ensp": 814, "customiz": [814, 828], "15c235f": 814, "deepmind_perceiver_io": 814, "sm_framework": 814, "segmentation_model": 814, "sm": 814, "torch_sm": 814, "iou_scor": 814, "rax": 814, "torch_rax": 814, "poly1_softmax_loss": 814, "madmom": 814, "madmon": 814, "torch_madmom": 814, "freq": 814, "audio": 814, "hz2midi": 814, "torch_loss": 814, "maxpooling1d": 814, "pool_siz": 814, "tf_kornia": 814, "tf_rax": 814, "tf_madmom": 814, "tf_loss": 814, "_forward_classifi": [814, 866], "forward_classifi": [814, 866], "hk_eff_encod": 814, "dummy_x": 814, "jax_sm": 814, "jax_madmom": 814, "jax_loss": 814, "np_kornia": 814, "np_sm": 814, "np_rax": 814, "np_loss": 814, "migrat": 814, "instantli": [814, 866], "motiv": [814, 853, 862], "contextu": 814, "explos": [814, 860, 862], "adher": [814, 825, 831, 834, 838, 849, 851, 856, 861, 862, 868, 869, 878], "orient": 814, "contributor": [814, 815, 818, 820, 821, 822, 836, 843, 850, 872], "believ": [814, 822, 862], "everyon": [814, 815, 820, 821, 822, 857, 863], "feedback": [814, 820, 830], "appreci": [814, 823], "dashboard": [814, 874], "grow": [814, 817, 823, 872, 880], "mission": [814, 823, 862, 874], "season": 814, "fellow": 814, "credit": 814, "accompani": 814, "lenton2021ivi": 814, "inter": 814, "author": [814, 820, 822, 870, 874], "lenton": 814, "daniel": 814, "pardo": 814, "fabio": 814, "falck": 814, "fabian": 814, "jame": 814, "stephen": 814, "clark": 814, "ronald": 814, "journal": 814, "arxiv": 814, "preprint": 814, "2102": 814, "02886": 814, "year": [814, 825, 857, 861, 863, 872], "strongli": [815, 821, 843, 878, 879], "engag": [815, 822, 823, 862], "skill": [815, 823, 874], "veteran": 815, "journei": [815, 823], "effort": [815, 820, 857, 862, 868, 872, 878], "board": [815, 828], "stage": [815, 822, 824, 825, 828, 846, 862, 872], "excit": [815, 824, 862], "reward": [815, 823], "badg": [815, 823, 830, 880], "program": [815, 842, 869, 870, 872, 875, 876, 879], "climb": [815, 819], "Be": [816, 828], "awar": [816, 828, 835, 837], "linux": [816, 821, 822, 828, 875, 877], "regularli": [816, 828, 830], "internet": [816, 828], "codespac": [816, 828, 836], "make_doc": 816, "sh": [816, 821, 822, 825, 830], "pwd": 816, "ssh": [816, 830], "make_docs_without_dock": [816, 828], "award": 817, "formal": 817, "dynamo": [817, 880], "earn": [817, 823], "thoroughli": [817, 825], "valuabl": [817, 820, 822], "merg": [817, 820, 822, 825, 830, 843, 872, 880], "meet": [817, 823, 843], "wizard": [817, 880], "inspector": [817, 880], "acknowledg": [817, 823], "honour": 817, "dilig": 817, "bronz": [817, 823, 880], "silver": [817, 823, 880], "gold": [817, 823, 857, 880], "expertis": [817, 823, 874], "assist": [818, 836], "runtimeerror": [818, 836], "logaddexp2_cpu": [818, 836], "falsifi": [818, 825, 836, 846], "test_logaddexp2": [818, 836], "backend_fw": [818, 836, 844], "dtype_and_x": [818, 836, 844, 846], "reproduce_failur": [818, 825, 836, 840, 846], "axicy2bkaamobaar2waaaacvaai": [818, 836], "decoartor": [818, 836], "someth": [818, 822, 827, 836, 837, 847, 854, 855, 857, 858, 878], "with_unsupported_dtyp": [818, 831, 836, 843], "25830078125": [818, 836], "258544921875": [818, 836], "test_acosh": [818, 836], "axicy2baabyqwqgiaabdaai": [818, 836], "quit": [818, 822, 826, 833, 834, 836, 839, 840, 846, 849, 872, 878], "41421356": [818, 836], "41421356e": [818, 836], "34078079e": [818, 836], "154": [818, 836], "test_ab": [818, 821, 836, 846], "000j": [818, 836], "154j": [818, 836], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [818, 836], "thread": [818, 820, 821, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 854, 872], "pycharm": [818, 844, 846], "steep": 819, "curv": 819, "realpython": 819, "pyn": 819, "exchang": [819, 862, 868, 870], "pilot": [819, 858], "stuck": [819, 820], "spell": 819, "sound": [819, 830, 850], "peopl": [819, 821, 822, 824, 872, 874], "frequent": [820, 822, 827, 872], "outlin": [820, 821, 822, 824, 829, 831, 834, 839, 842, 843, 846], "broad": [820, 874], "individu": [820, 822, 825, 827, 831, 839, 843, 872, 875, 878, 879], "clearli": [820, 822, 833, 844, 846, 862, 876], "straightforward": [820, 823, 854], "lie": 820, "urgent": 820, "encourag": [820, 823, 837, 857, 862], "tackl": [820, 823, 843], "categoris": [820, 825, 843], "comfort": [820, 821, 835], "linkag": 820, "pr": [820, 822, 823, 825, 837, 843, 844, 846], "confid": 820, "submit": [820, 837], "scipi": [820, 862, 874, 879], "mindspor": 820, "simpler": [820, 822, 837, 865, 873, 879], "member": [820, 822, 843, 858, 862], "comment": [820, 821, 822, 825, 831, 837, 843, 845, 849], "composition": 820, "feasibl": [820, 830, 846, 862, 865], "pend": 820, "helpfulli": [820, 849, 870], "problemat": [820, 821], "unimpl": 820, "issue_link": 820, "alias_nam": 820, "notic": [820, 826, 830, 836, 837, 846, 849, 865], "push": [820, 822, 823, 825, 844, 846, 878], "liner": 820, "meanwhil": [820, 830], "reselect": 820, "faithfulli": 820, "creation_routin": [820, 844], "indexing_routin": 820, "ma": 820, "manipulation_routin": 820, "mathematical_funct": [820, 843], "sorting_searching_count": 820, "ufunc": [820, 843], "matrix_and_vector_product": 820, "matrix_eigenvalu": 820, "norms_and_other_numb": 820, "solving_equations_and_inverting_matric": 820, "gleam": 820, "uncom": 820, "test_numpy_inn": 820, "test_frontend": [820, 830, 836, 844], "unsur": [820, 846], "refrain": 820, "checkbox": [820, 821], "yourself": [820, 822, 837, 846, 849], "aforement": 820, "parent": [820, 830, 853], "arraywithelementwis": [820, 826, 853], "containerwithmanipul": 820, "thorough": [820, 834, 838, 846], "add_reformatting_checklist_": 820, "category_nam": [820, 831, 832, 834, 838, 839], "autom": [820, 830, 837, 846, 859, 874], "bot": [820, 837], "markdown": [820, 828], "patient": [820, 821], "elabor": 820, "struggl": 820, "assigne": 820, "status": 820, "central": [820, 837, 849, 862, 878], "relevant_submodul": 820, "roadmap": [820, 830], "deem": [820, 843], "subtask": 820, "clearer": [820, 835, 844, 854], "backend_nam": [820, 827, 831, 832, 834, 838, 839, 840], "rare": [820, 832, 857, 877], "button": [820, 821, 822, 836], "centr": 820, "predetermin": 820, "superset": [820, 824, 839, 842, 857], "happi": [821, 836, 857, 863], "your_usernam": [821, 836], "your_fold": [821, 836], "enter": [821, 822, 826, 831, 832, 836, 838, 840], "sync": [821, 825, 836], "remot": [821, 825, 836, 837], "nutshel": [821, 838], "hook": [821, 837, 845], "lint": [821, 824], "succe": [821, 865], "whatev": [821, 829, 857], "elig": [821, 823], "student": 821, "licens": [821, 875], "remind": 821, "expir": 821, "won": [821, 822, 829, 831, 856, 858, 862, 863, 865, 866, 867], "profession": 821, "trial": 821, "jetbrain": 821, "month": [821, 861], "bui": [821, 878], "paid": 821, "rapid": [821, 861, 862, 872], "pace": 821, "person": [821, 822], "perhap": [821, 853, 854, 855, 857, 878], "conda": [821, 862, 874], "ivy_dev": [821, 822], "icon": [821, 822, 836], "panel": 821, "vscode": [821, 836], "palett": 821, "ctrl": [821, 822], "mac": [821, 822], "intel": [821, 862, 870, 877], "m1": 821, "optional_apple_silicon_1": 821, "optional_apple_silicon_2": 821, "array_api_test": [821, 822, 825, 836], "test_array_api": [821, 822, 825, 836, 846], "suit": [821, 824, 825, 830, 836, 845, 846, 854, 862, 872, 878], "cmd": 821, "bat": [821, 822], "virtualenv": 821, "tick": [821, 822, 830], "nz2": 821, "openssl": 821, "libssl1": 821, "1_1": 821, "1f": 821, "1ubuntu2": 821, "20_amd64": 821, "deb": 821, "dpkg": 821, "mitig": [821, 878], "desktop": [821, 836], "powershel": 821, "admin": 821, "menu": [821, 836], "introspect": 821, "dialog": 821, "persist": 821, "earlier": [821, 822, 831, 847], "virtualis": 821, "bio": [821, 862], "dropdown": [821, 830], "dockerfil": 821, "ca": 821, "certif": 821, "gnupg": 821, "lsb": 821, "keyr": 821, "fssl": 821, "gpg": 821, "dearmor": 821, "echo": [821, 830, 858], "arch": 821, "lsb_releas": 821, "ce": 821, "cli": 821, "containerd": 821, "systemctl": 821, "softwar": [821, 822, 861, 862, 870, 875, 876, 877], "press": [821, 822, 854], "4a": 821, "socket": 821, "rwx": 821, "sock": 821, "pid": 821, "editor": 821, "pytest": [821, 822, 825, 830, 836, 840, 846], "keyboard": 821, "screenshot": 821, "pop": [821, 836, 862], "test_elementwis": 821, "shell": [821, 822, 825, 830], "setup_test": 821, "run_ivy_core_test": 821, "run_ivy_nn_test": 821, "run_ivy_stateful_test": 821, "run_test": [821, 830], "test_depend": 821, "test_ivy_cor": 821, "test_ivy_nn": 821, "test_ivy_st": 821, "unix": 821, "test_": [821, 844], "test_cor": [821, 822, 844], "offici": [821, 831, 851], "wish": [821, 843], "ivy_nn": 821, "ivy_st": 821, "header": [821, 822, 845], "arrow": 821, "test_stat": 821, "test_submodule_nam": 821, "test_function_nam": 821, "debugg": 821, "studio": [821, 836, 846], "afterward": [821, 854], "background": [821, 828, 836, 872, 874], "overlap": [821, 830, 836, 847, 849, 873], "test_file_path": [821, 836], "test_fn_nam": [821, 836], "engin": [821, 872, 874, 875], "devcontain": 821, "comma": 821, "postcreatecommand": 821, "post_create_command": 821, "poststartcommand": 821, "safe": [821, 843], "containerworkspacefold": 821, "reopen": 821, "test_fle_path": 821, "slash": 821, "isol": [821, 822, 873, 878], "container": 821, "intens": 821, "headach": 821, "arm": [821, 822], "vm": [821, 830], "azur": 821, "cloud": [821, 830, 874], "favourit": 821, "theme": [821, 828], "ipad": 821, "browser": [821, 828], "quota": 821, "requisit": 821, "pane": [821, 822, 830], "dockerfilegpu": 821, "ivv": 821, "multiv": 821, "multivers": [821, 847], "dockerfilemultivers": 821, "dockerhub": 821, "upto": [821, 822], "minut": [821, 830], "launch": 821, "kindli": [821, 845], "guidelin": 821, "colour": 821, "chanc": 821, "troubleshoot": 821, "ever": 821, "flask": [821, 836], "toolbar": [821, 822, 836], "_array_modul": [821, 825, 836], "refresh": [821, 836], "pytestarg": [821, 836], "unittesten": [821, 836], "pytesten": [821, 836], "autotestdiscoveronsaveen": [821, 836], "conftest": 821, "serv": [821, 822, 826, 829, 838, 839, 843, 844, 846, 849, 850, 859, 870], "aren": [821, 831], "available_config": 821, "cp310": 821, "x86": [821, 877], "newer": [821, 846], "_compil": 821, "meantim": 821, "suffici": [821, 833, 843, 846], "bear": [821, 826, 829, 831, 843], "tendenc": 822, "land": 822, "unrel": [822, 862], "fly": [822, 872], "internship": 822, "suspect": 822, "iii": 822, "issue_numb": 822, "12345": 822, "rememb": 822, "respond": 822, "dai": [822, 837], "freed": 822, "situat": [822, 830, 856], "obvious": [822, 830], "hypothet": 822, "frustrat": 822, "delai": [822, 865], "busi": 822, "inact": 822, "unfairli": 822, "investig": 822, "name_of_your_branch": 822, "date": [822, 825], "complic": [822, 844, 851], "merge_with_upstream": 822, "abort": 822, "tediou": [822, 833, 849], "stash": [822, 837], "reinstat": 822, "uncommit": 822, "unstag": [822, 837], "untrack": 822, "atlassian": 822, "wrote": 822, "piec": [822, 826, 839, 840, 851, 865, 868, 870], "blame": 822, "eg": 822, "week": [822, 863], "grep": 822, "commit_id": 822, "handi": 822, "histori": 822, "approv": 822, "someon": [822, 857], "hash": [822, 854], "cancel": 822, "speedup": 822, "unavail": 822, "tickbox": 822, "intent": [822, 842], "discourag": 822, "adopt": [822, 826, 838, 849, 862, 871, 872, 877], "philosophi": 822, "infrequ": 822, "earli": [822, 872], "wast": [822, 830], "spot": [822, 833, 839], "mistak": 822, "mountain": 822, "advoc": [822, 857], "session": [822, 872], "beauti": 822, "care": [822, 832, 843, 849, 856, 862], "undo": 822, "stress": 822, "nifti": 822, "reassur": 822, "local_path_to_ivi": 822, "subfold": [822, 844, 846, 847], "dep": 822, "fresh": 822, "arsen": 822, "exec": 822, "ivy_contain": 822, "test_imag": 822, "test_random_crop": 822, "test_creation_funct": 822, "test_arang": 822, "cursor": 822, "alt": 822, "breakpoint": 822, "gutter": 822, "caret": 822, "f8": 822, "f9": 822, "Into": 822, "f7": 822, "smart": 822, "fragment": [822, 868, 870, 874], "wherein": [822, 839, 846], "failur": [822, 830, 844, 846], "facilit": 823, "embark": 823, "innov": [823, 862], "door": [823, 857], "elev": 823, "opportun": 823, "testament": [823, 845], "stone": 823, "gift": 823, "acquir": 823, "peak": 823, "privileg": [823, 874], "bounti": 823, "cash": 823, "delight": 823, "weed": [824, 850], "tour": 824, "formatt": [824, 837], "conjunct": 825, "establish": [825, 874], "unconnect": 825, "strang": [825, 853], "test_linalg": [825, 844], "test_set_funct": 825, "test_signatur": 825, "excess": [825, 827, 833], "array_modul": 825, "vv": 825, "test_manipulation_funct": 825, "test_concat": [825, 846], "nb": 825, "liber": 825, "______________________": 825, "test_remaind": 825, "_______________________": 825, "test_operators_and_elementwise_funct": 825, "1264": 825, "1277": 825, "binary_param_assert_against_refimpl": 825, "ctx": 825, "620": 825, "binary_assert_against_refimpl": 825, "324": 825, "scalar_o": 825, "17304064": 825, "binaryparamcontext": 825, "axic42baaowcnp": 825, "rumwmabaear0": 825, "make_binary_param": 825, "numeric_dtyp": 825, "left_strat": 825, "left_sym": 825, "right_strat": 825, "right_sym": 825, "right_is_scalar": 825, "binary_param_assert_dtyp": 825, "binary_param_assert_shap": 825, "recreat": 825, "unexpectedli": 825, "discrep": [825, 844], "test_asarray_arrai": 825, "test_floor_divid": 825, "health": 825, "test_iop": 825, "__imod__": 825, "isequ": 825, "test_matrix_norm": 825, "alter": 825, "tweak": 825, "array_api_methods_to_test": 825, "test_special_cas": 825, "__ipow__": 825, "is_integ": 825, "easier": [825, 826, 827, 831, 844, 847, 859, 872, 874], "revisit": [825, 838], "_data": [826, 842, 843, 853], "organiz": [826, 829, 843], "underpin": [826, 829, 851], "programmat": [826, 829, 873], "backup": [826, 828, 829], "accident": [826, 829, 843], "absent": [826, 829], "auto": [826, 828, 829, 837, 854], "__mul__": [826, 829, 833, 838, 849, 853], "throw": [826, 831, 832, 835, 836, 853, 872], "imposs": 826, "inputs_to_native_arrai": [826, 839, 840], "outputs_to_ivy_arrai": [826, 831, 832, 838, 839, 840], "secondli": [826, 831], "__ivy_array_function__": 826, "__torch_function__": 826, "myarrai": 826, "handled_funct": 826, "notimpl": 826, "issubclass": 826, "enough": [826, 830, 831, 832, 846, 853, 854, 855], "ivy_funct": 826, "my_ab": 826, "my_arrai": 826, "implicit_backend": [827, 851], "__dict__": [827, 842, 851], "ivy_original_dict": [827, 851], "fallback": 827, "live": [827, 828, 831, 862, 863, 868, 870], "dlpack": 827, "set_dynamic_backend": 827, "unset_dynamic_backend": 827, "dynamic_backend_a": 827, "set_": 827, "unset_": 827, "backend_handl": 827, "requires_grad": 827, "memory_format": 827, "preserve_format": 827, "weren": 827, "vast": [827, 831, 872], "minor": [827, 849, 857], "fn_name_v_1p12_and_abov": 827, "fn_name_v_1p01_to_1p1": 827, "heavili": [828, 840, 857], "conf": 828, "cleanup": 828, "readm": [828, 857], "maxdepth": 828, "caption": 828, "related_work": 828, "deep_div": 828, "glossari": 828, "autosummari": 828, "top_functional_toc": 828, "restructuredtext": 828, "discov": [828, 831], "ivy_toctree_caption_map": 828, "unfortun": [828, 837], "linker": 828, "foo": 828, "discussion_channel_map": 828, "1000043690254946374": 828, "1000043749088436315": 828, "forum": [828, 858], "seri": [828, 831, 843, 846, 872, 874], "discussion_paragraph": 828, "discord_link": 828, "channel_link": 828, "gg": 828, "zvqdvbznqj": 828, "799879767196958751": 828, "channel_id": 828, "autoskippablemethod": 828, "skippable_method_attribut": 828, "__qualname__": 828, "autodoc": 828, "__doc__": 828, "autoivydata": 828, "mutual": [829, 839], "containerwithelementwis": 829, "__repr__": 829, "__getattr__": [829, 865], "__setattr__": [829, 865], "__contains__": 829, "__getstate__": 829, "__setstate__": 829, "unpickl": 829, "num_dim": [829, 856], "restrict": [829, 830, 843, 851, 865, 869], "enforc": [829, 853], "lefthand": 829, "righthand": 829, "handle_nest": [829, 838, 839, 840, 851], "absenc": [829, 838, 872], "implicitli": [829, 841, 846, 851], "log_pr": [829, 839, 842], "intuit": [829, 846, 854, 855, 868], "chronolog": 829, "concurr": [829, 830, 839, 872], "despit": [829, 831, 832, 844, 851, 862, 869, 872], "__list__": 829, "whatsoev": [829, 839, 859, 878], "children": 829, "shallowest": 829, "deepest": 829, "rollback": 830, "incorpor": [830, 844, 854, 872], "techniqu": 830, "triplet": 830, "test_torch": [830, 844], "test_tensor": [830, 844], "test_torch_instance_arctan_": 830, "12500": 830, "daili": 830, "huge": [830, 854, 860, 862, 872, 878], "shoot": 830, "_reduce_loss": [830, 839, 842], "test_nn": 830, "test_loss": 830, "test_binary_cross_entropy_with_logit": 830, "test_cross_entropi": 830, "test_binary_cross_entropi": 830, "test_sparse_cross_entropi": 830, "test_loss_funct": 830, "test_torch_binary_cross_entropi": 830, "test_torch_cross_entropi": 830, "binary_cross_entropy_with_logit": 830, "torch_binary_cross_entropi": 830, "torch_cross_entropi": 830, "readthedoc": 830, "pedagog": 830, "f_1": 830, "t_1": 830, "t_3": 830, "t_7": 830, "t_": 830, "f_m": 830, "cyclic": 830, "intellig": [830, 846, 874], "tests_fil": 830, "file_nam": [830, 846, 847], "tests_lin": 830, "correspondingli": 830, "tests_to_run": 830, "determine_tests_lin": 830, "mongodb": 830, "databas": [830, 846], "mechan": [830, 857], "secret": 830, "db": 830, "ssh_deploy_kei": 830, "suffic": [830, 840, 846], "massiv": 830, "yml": 830, "felicit": 830, "clone_map": 830, "deploy_kei": 830, "user_email": 830, "user_nam": 830, "target_branch": 830, "github_serv": 830, "deploy_key_fil": 830, "ssh_known_hosts_fil": 830, "known_host": 830, "keyscan": 830, "git_ssh_command": 830, "userknownhostsfil": 830, "email": [830, 862], "methodologi": 830, "master1": 830, "restructur": 830, "_map": 830, "t_2": 830, "t_n": 830, "index_map": 830, "test_map": 830, "snowbal": 830, "recalibr": 830, "workflow_dispatch": 830, "cron": 830, "saturdai": 830, "night": 830, "pm": 830, "gut": 830, "lesser": [830, 835], "lol": 830, "hour": [830, 863], "cater": [830, 845], "master2": 830, "master32": 830, "synchron": 830, "runner2": 830, "corrupt": 830, "decoupl": [830, 855], "150": 830, "cycl": [830, 846], "yellow": 830, "queu": 830, "redirect": 830, "book": 830, "onrend": 830, "jo": 830, "ran": 830, "clickabl": 830, "all_dtyp": 831, "all_numeric_dtyp": 831, "all_int_dtyp": 831, "all_float_dtyp": 831, "replic": [831, 841, 842, 843], "thirdli": 831, "native_float32": 831, "importantli": [831, 853, 856], "arguabl": [831, 832, 843], "jaxarrai": [831, 832, 835, 838, 842, 847, 851], "_handle_0_dim_output": 831, "subtli": [831, 842], "promote_types_frontend_nam": 831, "promote_types_of_frontend_name_input": 831, "frontend_nam": 831, "upcast": 831, "nearli": [831, 838, 840, 872], "downcast": 831, "footprint": 831, "concret": 831, "aris": [831, 837, 857, 862], "utterli": 831, "meant": [831, 833, 842], "twice": 831, "disadvantag": 831, "relax": 831, "f64": 831, "unwant": 831, "primaci": 831, "resembl": 831, "compound": 831, "infer_dtyp": [831, 832, 838, 840], "settabl": [831, 832], "handle_out_argu": [831, 832, 838, 839, 840, 842, 851], "infer_devic": [831, 832, 838, 840], "deleg": [831, 879], "shape_to_tupl": 831, "with_supported_dtyp": 831, "unment": 831, "_cast_for_unary_op": [831, 839, 842], "target_typ": 831, "syntax": [831, 861, 862, 872], "unsupported_dtyp": 831, "supported_dtypes_and_devic": 831, "with_unsupported_device_and_dtyp": 831, "globals_getter_func": 831, "f2": 831, "lack": [831, 842, 872, 879], "mandat": [831, 842, 846, 847, 862], "confus": [831, 835, 842, 849, 859, 863], "inconsist": [831, 835, 841], "is_nan": 831, "supported_dtyp": 831, "anytim": 831, "84530": 831, "unwarr": 831, "risk": [831, 878], "needlessli": 831, "bloat": 831, "undergo": [831, 857], "unsupported_devic": 831, "supported_devic": 831, "downsid": 831, "coverag": [831, 846], "undesir": 831, "accomplish": 831, "upcast_data_typ": 831, "downcast_data_typ": 831, "crosscast_data_typ": 831, "cast_data_typ": 831, "downcast_data_dtyp": 831, "vice": 831, "versa": 831, "till": 831, "crosscast": 831, "exmp1": 831, "watch": [831, 843], "handle_numpy_arrays_in_specific_backend": [831, 838], "cate": 831, "understood": 831, "consumpt": [831, 876], "dual": 832, "categor": [832, 839, 843], "_handle_except": [832, 835], "1013": 832, "_handle_nest": [832, 835], "905": 832, "_handle_out_argu": [832, 835], "441": 832, "_inputs_to_native_arrai": [832, 835], "new_arg": [832, 835], "new_kwarg": [832, 835], "_outputs_to_ivy_arrai": [832, 835], "358": 832, "_handle_array_funct": [832, 835], "_handle_device_shift": 832, "handle_device_shift": [832, 840], "device_shifting_dev": 832, "__enter__": 832, "__exit__": 832, "soft_devic": 832, "eight": [833, 850], "op_nam": 833, "__r": 833, "unsurprisingli": [833, 861], "recap": [833, 855], "combinatori": 833, "okai": [833, 849, 851], "spec": [833, 834], "my_func": [833, 847], "some_flag": 833, "another_flag": 833, "jointli": 833, "5574077": 833, "1850398": 833, "5463025": 833, "8422884": 833, "91601413": 833, "9647598": 833, "3738229": 833, "1597457": 833, "0963247": 833, "9955841": 833, "3278579": 833, "asid": 833, "14254655": 833, "1578213": 833, "380515": 833, "trivial": [833, 842], "failing_fn_nam": 833, "onlin": [833, 834], "minutest": 833, "fault": [833, 872], "contrast": [834, 838, 843, 878], "preview": 834, "incorrectli": [834, 865], "needless": [834, 844], "renam": [834, 843], "judgment": 834, "operator_nam": 834, "succinct": 834, "docst": 834, "native_error": 835, "_combine_messag": 835, "truli": [835, 853], "wrong": [835, 837, 840, 843, 849], "198": 835, "392": 835, "_handle_array_like_without_promot": 835, "805": 835, "432": 835, "349": 835, "other_test": 835, "523": 835, "_handle_numpy_out": 835, "396": [835, 855], "_outputs_to_numpy_arrai": 835, "_inputs_to_ivy_arrays_np": 835, "ivy_arg": 835, "ivy_kwarg": 835, "453": 835, "_from_zero_dim_arrays_to_scalar": 835, "truth_value_test": 835, "visibl": 835, "unwieldi": 835, "squash": 835, "hide": [835, 865], "cleaner": [835, 854], "caught": [835, 837], "rethrow": 835, "_print_traceback_histori": 835, "error_stack": 835, "axiserror": 835, "polici": [835, 840, 846, 848], "moreov": 835, "submoodul": 836, "test_jax_transpos": 836, "manipulaiton": 836, "test_jax": [836, 844], "test_numpi": [836, 844], "test_manipul": [836, 844, 846], "preconditionnotmet": 836, "densetensor": 836, "holder_": 836, "phi": 836, "dense_tensor_impl": 836, "array_and_ax": 836, "aaegbaegaqaaaaaaaaaaaaab": 836, "black": 837, "flake8": 837, "linter": 837, "autoflak": 837, "docformatt": 837, "pydocstyl": 837, "yaml": 837, "patch1687898304": 837, "8072": 837, "3516aed563": 837, "reformat": 837, "akshai": 837, "jain": 837, "gui": 837, "cryptic": 837, "garden": 837, "utc": 837, "didn": 837, "human": 837, "intervent": 837, "typo": 837, "ui": 837, "handle_array_like_without_promot": [838, 840], "to_native_arrays_and_back": [838, 840, 851], "handle_array_funct": [838, 840], "inputs_to_native_shap": [838, 840], "rational": [838, 842, 849], "__div__": [838, 849], "484": 838, "brittl": 838, "freeli": 838, "technic": [838, 842, 857, 872, 874], "original_typ": 838, "cumbersom": 838, "hinder": [838, 861], "venn": 839, "diagram": [839, 878], "light": [839, 847, 857, 859, 873, 878], "maximis": 839, "encompass": 839, "partial_mixed_handl": [839, 840, 849], "handle_partial_mixed_funct": [839, 840, 849], "fn_decor": 839, "mixed_backend_wrapp": [839, 842], "to_add": 839, "to_skip": 839, "inputs_to_ivy_arrai": [839, 840], "modif": [839, 872], "briefli": [839, 846, 854], "get_all_arrays_on_dev": 839, "outputs_to_ivy_shap": 840, "outputs_to_native_arrai": 840, "handle_view_index": [840, 842], "handle_view": [840, 842], "handle_rag": 840, "handle_backend_invalid": 840, "handle_nan": 840, "to_native_shapes_and_back": 840, "modern": [841, 861, 862, 877], "inter_func": 841, "custom_grad_fn": 841, "args1": 841, "speak": 842, "val_n": 842, "base_idx": 842, "_manipulation_stack": 842, "base_flat": 842, "_view_ref": 842, "_update_view": 842, "contigu": 842, "c_contigu": 842, "ascontiguousarrai": 842, "copyto": 842, "_is_vari": 842, "tensor_scatter_nd_upd": 842, "is_vari": 842, "_update_torch_view": 842, "predominantli": [842, 847], "support_native_out": [842, 851], "_scalar_output_to_0d_arrai": 842, "_wrap_fn": 842, "dim0": 842, "dim1": 842, "res_floor": 842, "extent": [842, 843], "to_out_fn": 842, "add_wrapp": 842, "paradigm": [842, 857, 872], "expans": 842, "weak": 842, "_torch_bas": 842, "_torch_view_ref": 842, "_torch_manipul": 842, "weakli": 842, "adequ": 842, "tf_frontend": 843, "lax": [843, 844, 849, 856, 857], "torch_frontend": [843, 844], "numpy_frontend": 843, "jax_frontend": 843, "to_ivy_arrays_and_back": [843, 844], "fidel": 843, "algebra": [843, 870, 871, 872, 875, 879], "dynamic": 843, "mimic": 843, "arithmetic_oper": 843, "handle_numpy_out": 843, "handle_numpy_dtyp": 843, "handle_numpy_cast": 843, "from_zero_dim_arrays_to_scalar": 843, "_add": 843, "same_kind": 843, "subok": [843, 844, 849], "promote_types_of_numpy_input": 843, "underscor": 843, "unhandl": 843, "trigonometric_funct": 843, "_tan": 843, "check_tensorflow_cast": 843, "raw_op": [843, 844], "map_raw_ops_alia": 843, "output_typ": 843, "kwargs_to_upd": 843, "pointwise_op": 843, "sensibl": 843, "ahead": [843, 847, 872], "reduce_logsumexp": 843, "logsumexp": 843, "trick": 843, "max_input_tensor": 843, "preferred_element_typ": 843, "languag": [843, 851, 859, 861, 863, 870, 873, 875, 876, 877, 878], "finer": 843, "logicaland": 843, "np_frontend": 843, "_ivy_arrai": 843, "radd": 843, "_init_data": 843, "_process_str_data": 843, "_dtype": [843, 844, 853], "_shape": [843, 853], "govern": 843, "promote_types_of_": 843, "_input": 843, "promote_types_of_torch_input": [843, 844], "handle_numpy_casting_speci": 843, "new_fn": 843, "equiv": 843, "unsaf": 843, "array_type_test": 843, "_isfinit": 843, "organis": 843, "youtub": 843, "knowledg": 844, "np_frontend_help": 844, "open_task": 844, "test_lax": 844, "test_oper": 844, "test_jax_tan": 844, "test_mathematical_funct": 844, "test_trigonometric_funct": 844, "dtypes_values_cast": 844, "dtypes_values_casting_dtyp": 844, "arr_func": 844, "get_num_positional_args_ufunc": 844, "test_numpy_tan": 844, "handle_where_and_array_bool": 844, "test_tensorflow": 844, "test_math": 844, "test_tensorflow_tan": 844, "test_pointwise_op": 844, "test_torch_tan": 844, "_fill_valu": 844, "test_glob": 844, "test_jax_ful": 844, "test_from_shape_or_valu": 844, "_input_fill_and_dtyp": 844, "dtype_and_input": 844, "dtype_to_cast": 844, "input_fill_dtyp": 844, "test_numpy_ful": 844, "test_raw_op": 844, "test_tensorflow_fil": 844, "test_creation_op": 844, "with_arrai": 844, "test_torch_ful": 844, "add_nois": 844, "all_clos": 844, "_get_dtype_and_matrix": 844, "test_torch_qr": 844, "frontend_q": 844, "frontend_r": 844, "walkthrough": 844, "comparison_op": 844, "test_comparison_op": 844, "test_torch_great": 844, "all_alias": 844, "test_ndarrai": 844, "test_numpy_instance_add__": 844, "test_tensorflow_instance_add": 844, "1e04": 844, "allow_infin": 844, "test_torch_instance_add": 844, "_arrays_idx_n_dtyp": 844, "surprisingli": 844, "closest_relevant_group": 844, "strive": [844, 846, 849, 857, 874], "craft": [845, 846], "tailor": 845, "clariti": [845, 846, 849, 872], "weav": 845, "thrill": 845, "brim": 845, "stand": [845, 846], "landscap": 845, "forese": 845, "refin": 845, "inquiri": 845, "fixtur": 846, "hit": [846, 851, 865], "eleg": [846, 872], "unexplor": 846, "artifact": 846, "bespok": 846, "_array_or_typ": 846, "rigor": [846, 861], "test_default_int_dtyp": 846, "print_hypothesis_exampl": 846, "custom_strategi": 846, "randomis": 846, "simplist": 846, "intricaci": 846, "glanc": 846, "one_of": 846, "datum": 846, "pipe": 846, "array_or_scal": 846, "len_of_arrai": 846, "test_add": 846, "test_gpu_is_avail": 846, "pretest": 846, "snippet": [846, 866], "frontend_test": 846, "frontend_method": 846, "criterion": 846, "valid_ax": 846, "hoc": 846, "11228": 846, "268": 846, "wherev": 846, "9622": 846, "28136": 846, "6375": 846, "12720": 846, "21354": 846, "900e": 846, "57384": 846, "25687": 846, "248": 846, "test_devic": 846, "array_shap": 846, "test_lay": 846, "some_sequ": 846, "arrays_valu": 846, "36418": 846, "21716926": 846, "none_or_list_of_float": 846, "get_prob": 846, "103515625e": 846, "099609375": 846, "probabilist": 846, "number_positional_argu": 846, "unreproduc": 846, "x_and_linear": 846, "is_torch_backend": 846, "x_shape": [846, 851], "weight_shap": 846, "bias_shap": 846, "ivy_np": 846, "valid_float_dtyp": 846, "test_demo": 846, "failing_test": 846, "traceback": 846, "shrink": 846, "prescrib": 846, "test_gelu": 846, "test_fil": 846, "notabl": [846, 872], "max_exampl": 846, "deadlin": 846, "weird": 846, "systemat": 846, "safeguard": 846, "inabl": 846, "test_result_typ": 846, "9090909090909091": 846, "judgement": 847, "some_namespac": 847, "some_backend": 847, "another_backend": 847, "refactor": 847, "ongo": 847, "check_fill_value_and_dtype_are_compat": 847, "_to_devic": 847, "shouldn": [847, 865], "pin": 847, "unpinn": 847, "culmin": 847, "unsett": 848, "array_significant_figur": 848, "array_decimal_valu": 848, "warning_level": 848, "nan_polici": 848, "stablest": 848, "constantli": [849, 861], "answer": [849, 853, 857], "contradict": 849, "entail": 849, "sacrif": 849, "jacfwd": 849, "jacrev": 849, "banner": 849, "expens": 849, "incredibli": [849, 854, 857, 875], "price": 849, "pai": 849, "intrus": 849, "x_beta": 849, "equip": 849, "simplif": 849, "allevi": 849, "ineffici": [849, 857, 872], "fuse": 849, "hybrid": 849, "workaround": 849, "slip": 849, "radar": 849, "stumbl": 849, "gone": [850, 862], "fulfil": 850, "handler": [850, 852, 856, 859], "syntact": [851, 856], "power_seq": 851, "_determine_backend_from_arg": 851, "importlib": 851, "_backend_dict": 851, "x_flat": 851, "wi": 851, "wi_x": 851, "wii_x": 851, "wif_x": 851, "wig_x": 851, "wio_x": 851, "wh": 851, "ht": 851, "ct": 851, "hts_list": 851, "wii_xt": 851, "wif_xt": 851, "wig_xt": 851, "wio_xt": 851, "htm1": 851, "ctm1": 851, "wh_htm1": 851, "whi_htm1": 851, "whf_htm1": 851, "whg_htm1": 851, "who_htm1": 851, "ft": 851, "ot": 851, "reliabl": 851, "sacrific": 851, "hear": 851, "virtu": [851, 869], "pure_ivi": 851, "pure_torch": 851, "unclean": 851, "wx": 851, "temp": 851, "ivy_func": 851, "emphas": 851, "example_input": 851, "static_argnum": [851, 865], "static_argnam": [851, 865], "primit": [852, 857, 870, 872], "hierarch": [852, 854, 855, 872], "arraywithactiv": 853, "arraywithcr": 853, "arraywithdatatyp": 853, "arraywithdevic": 853, "arraywithgener": 853, "arraywithgradi": 853, "arraywithimag": 853, "arraywithlay": 853, "arraywithlinearalgebra": 853, "arraywithloss": 853, "arraywithmanipul": 853, "arraywithnorm": 853, "arraywithrandom": 853, "arraywithsearch": 853, "arraywithset": 853, "arraywithsort": 853, "arraywithstatist": 853, "arraywithutil": 853, "_init": 853, "_size": 853, "_devic": 853, "_dev_str": 853, "_pre_repr": 853, "_post_repr": 853, "framework_str": 853, "pypep8nam": 853, "immut": 853, "claim": 853, "_native_wrapp": 853, "genuin": 853, "some_method": 853, "rewritten": 853, "littl": [853, 861, 874], "compartment": 853, "newshap": 853, "new_shap": 853, "tidi": 853, "crystal": 853, "ton": 854, "ado": [854, 855], "soup": 854, "walk": [854, 855], "cnt": 854, "3333335": 854, "autocomplet": 854, "midwai": 854, "agent": 854, "total_spe": 854, "total_height": 854, "total_width": 854, "ag": 854, "tot": 854, "total_": 854, "total_h": 854, "cnt0": 854, "cnt1": 854, "diff_0": 854, "diff_1": 854, "config0": 854, "config1": 854, "l0": 854, "decoder__l0": 854, "decoder__l1": 854, "encoder__l0": 854, "encoder__l1": 854, "l0__b": 854, "l0__w": 854, "l1__b": 854, "l1__w": 854, "printabl": 854, "foresight": 854, "untidili": 854, "update_ag": 854, "normalize_img": 854, "img_max": 854, "reduce_max": 854, "img_min": 854, "reduce_min": 854, "img_rang": 854, "agent_posit": 854, "agent_veloc": 854, "agent_cam_front_rgb": 854, "agent_cam_front_depth": 854, "agent_cam_rear_rgb": 854, "agent_cam_rear_depth": 854, "agent_cam_lidar": 854, "camera": 854, "front_rgb": 854, "front_depth": 854, "rear_rgb": 854, "rear_depth": 854, "lidar": 854, "rgb": 854, "rear": 854, "veloc": 854, "cam": 854, "cam_max": 854, "cam_min": 854, "cam_rang": 854, "allud": [854, 862], "perman": 854, "_cnt": 854, "img_": 854, "_dataset_s": 854, "_batch_siz": 854, "_count": [854, 855], "__next__": 854, "img_fnam": 854, "loaded_img": 854, "batch_slic": 854, "0145": 854, "addbackward0": 854, "_create_vari": 855, "_input_channel": 855, "_output_channel": 855, "_w_shape": 855, "_b_shape": 855, "_with_bia": 855, "764": 855, "872": 855, "439": 855, "nightmar": 855, "overcom": 855, "key0": 855, "linear3": 855, "preced": [855, 862], "_w_init": 855, "_b_init": 855, "misnom": 855, "saw": 855, "_beta1": 855, "_beta2": 855, "_epsilon": 855, "_mw": 855, "_vw": 855, "_first_pass": 855, "_should_trac": 855, "new_v": 855, "_lr": 855, "_inplac": 855, "_stop_gradi": 855, "sparse_funct": 856, "_linear": 856, "jax_graph": 856, "to_backend": 856, "thinli": 856, "to_haiku_modul": 856, "loss_fn_t": 856, "without_apply_rng": 856, "update_rul": 856, "tree_multimap": 856, "trax": [856, 863], "objax": [856, 863], "matur": [857, 862, 872], "doubt": 857, "grate": [857, 880], "probe": 857, "lock": 857, "dex": 857, "tricki": [857, 859], "tight": 857, "dispatch": [857, 872, 875], "ast": 857, "autodiff": 857, "shine": 857, "merci": 857, "compet": [857, 872], "parallelis": 857, "spmd": 857, "mixtur": 857, "expert": 857, "sophist": 857, "depart": 857, "hundr": 857, "broadli": [857, 878], "supplementari": 857, "reusabl": [857, 870, 872], "fanci": [857, 872], "fusion": [857, 876], "lose": 857, "pmap": 857, "eventu": 857, "supplement": 857, "backdoor": 857, "callback": 857, "somewhat": [857, 872], "outsourc": 857, "ivy_root": 858, "pem": 858, "api_kei": 858, "asap": 858, "nail": 859, "scientist": 859, "correl": 859, "collabor": [860, 861, 862], "consortium": [860, 862], "grown": 861, "rapidli": 861, "shareabl": 861, "outdat": 861, "newest": 861, "prototyp": [861, 872], "obsolet": [861, 863], "invent": 861, "simultan": [861, 863], "runner": 861, "principl": [861, 870, 872, 875], "2006": 861, "cloth": 861, "forgiven": 862, "eyebrow": 862, "somehow": 862, "funni": 862, "comic": 862, "charger": 862, "instant": 862, "contrari": 862, "bumpi": 862, "road": 862, "technologi": [862, 870, 874], "interoper": [862, 869, 870, 872, 875], "motherboard": 862, "raid": 862, "bluetooth": 862, "wireless": 862, "btx": 862, "sata": 862, "tcp": 862, "ip": 862, "smtp": 862, "gmail": 862, "outlook": 862, "growth": [862, 875], "necess": 862, "2015": [862, 872], "aros": 862, "ourselv": [862, 878], "quansight": [862, 878], "compani": [862, 868], "apach": [862, 874, 878], "onnx": [862, 870, 878], "cupi": [862, 872, 879], "modin": 862, "spyder": 862, "octoml": [862, 878], "sponsor": 862, "lg": 862, "electron": 862, "shaw": 862, "pursuit": 862, "complianc": 862, "convinc": 862, "celebr": 862, "streamlin": [863, 875], "awesom": 863, "love": 863, "slew": 863, "inevit": [863, 873], "erron": 863, "poor": 863, "spin": 863, "sake": 863, "wouldn": 863, "frantic": 863, "lucid": 863, "honk": 863, "hasn": 863, "spend": [863, 872], "sonnet": 863, "trainer": [863, 879], "quo": 863, "dopamin": 863, "ignit": 863, "catalyst": 863, "lightn": 863, "fastai": 863, "publicli": [865, 866, 867], "logger": 865, "arg_stateful_idx": 865, "kwarg_stateful_idx": 865, "include_gener": 865, "array_cach": 865, "return_backend_traced_fn": 865, "lazygraph": [865, 866, 867], "sum_j": 865, "traced_fn": 865, "impos": 865, "comp_func": 865, "bake": 865, "cont": 865, "new_attribut": 865, "wip": 865, "resnet50": 865, "breed": 865, "resnetforimageclassif": [865, 866], "traced_graph": 865, "predicted_label": 865, "debug_mod": 866, "rough": 866, "transformed_with_st": 866, "bigger": 866, "hf": 866, "tf_model": 866, "transpile_kwarg": 867, "transpiled_func": 867, "unified_func": 867, "rwork": 868, "vendor": [868, 874], "complimentari": [868, 878], "acycl": [868, 873], "fillna": 869, "pct_chang": 869, "_____________": 869, "__________________________________________________________________": 869, "scaffold": [870, 878], "heart": 870, "toolchain": [870, 875], "assembli": [870, 877, 878], "idl": 870, "middl": 870, "emit": 870, "gnu": [870, 875], "broader": 870, "heterogen": 870, "aid": 870, "coprocessor": 870, "programm": [870, 877], "gate": 870, "onednn": 870, "sit": [870, 873, 878], "tandem": 870, "possess": 870, "khrono": [871, 877], "appl": 871, "coremltool": 871, "albeit": 871, "promin": 872, "abbrevi": 872, "laboratori": 872, "proprietari": [872, 876, 877], "mathwork": 872, "commerci": 872, "1984": 872, "toolbox": 872, "mupad": 872, "simulink": 872, "graphic": [872, 876, 877], "simul": 872, "million": [872, 875], "worldwid": 872, "scienc": [872, 874], "econom": 872, "2001": 872, "od": 872, "solver": 872, "cython": 872, "friendli": 872, "2002": 872, "lua": 872, "luajit": 872, "idiap": 872, "epfl": 872, "2005": 872, "numarrai": 872, "cpython": 872, "partli": 872, "2007": 872, "forest": 872, "boost": 872, "dbscan": 872, "inbuilt": 872, "esqu": 872, "aesara": 872, "2012": 872, "polymorph": 872, "mpi": 872, "openmp": 872, "glue": 872, "jaot": 872, "nasa": 872, "cern": 872, "climat": 872, "allianc": 872, "influenti": 872, "2014": 872, "scala": 872, "ship": 872, "forgiv": 872, "decemb": 872, "announc": 872, "mainten": 872, "meaning": 872, "2016": 872, "imper": 872, "amazon": 872, "traction": 872, "cognit": [872, 879], "grade": 872, "dnn": 872, "backpropag": 872, "succumb": 872, "came": 872, "monitor": 872, "hobbyist": 872, "tremend": 872, "gear": 872, "batteri": 872, "zygot": 872, "jl": 872, "workload": 872, "daggerflux": 872, "frontier": 872, "hessian": 872, "2018": 872, "lightweight": [872, 879], "shortcom": 872, "barrier": 872, "inexperienc": 872, "underdevelop": 872, "fanat": 872, "ounc": 872, "infanc": 872, "nich": 872, "mobil": 872, "lite": 872, "enterpris": 872, "reinvent": [872, 874], "inertia": 872, "creator": [872, 874], "paszk": 872, "hi": 872, "bulk": 872, "haskel": 872, "dataflow": 873, "trace_modul": 873, "scriptfunct": 873, "scriptmodul": 873, "fake": 873, "proxi": 873, "graphmodul": 873, "travi": 874, "oliph": 874, "leader": 874, "cornerston": 874, "numba": 874, "numfocu": 874, "pydata": 874, "confer": 874, "consult": 874, "devop": 874, "mlop": 874, "startup": 874, "mlir": [874, 875, 878], "Their": 874, "held": 874, "presum": 874, "llvm": [874, 877], "founder": 874, "tvm": [874, 878], "sustain": 874, "empow": 874, "har": 874, "burden": 874, "precompil": 875, "executor": 875, "julia": [875, 878], "fsf": 875, "gpl": 875, "biggest": [875, 878], "throughput": 876, "autotun": 876, "gpgpu": 876, "classic": 877, "sycl": 877, "dpc": 877, "maco": 877, "oneapi": 877, "ia": 877, "aka": 877, "xeon": 877, "gen9": 877, "xe": 877, "arria": 877, "gx": 877, "fpga": 877, "lofti": 878, "ambit": 878, "realm": 878, "bedrock": 878, "flux": 878, "bite": 878, "chew": 878, "eagerpi": 878, "tensorli": 878, "thinc": 878, "neuropod": 878, "fx": 878, "retrain": 878, "closer": 878, "greatli": 878, "modular": 878, "anywher": 878, "theano": 879, "plaidml": 879, "partial_svd": 879, "subsystem": 879, "amaz": 880, "bhushan": 880, "srivastava": 880, "he11owther": 880, "og": 880, "edward": 880, "amimo": 880, "moblei": 880, "trent": 880, "ogban": 880, "ugot": 880, "fayad": 880, "alman": 880, "sarvesh": 880, "kesharwani": 880, "krishna": 880, "boppana": 880, "saptarshi": 880, "bandopadhyai": 880, "tugai": 880, "g\u00fcl": 880, "sondertg": 880, "vismai": 880, "suramwar": 880, "leacornelio": 880, "samund": 880, "singh": 880, "samthakur587": 880, "suraj": 880, "zheng": 880, "jai": 880, "choi": 880, "zjay07": 880, "ebenez": 880, "gadri": 880, "akrong": 880, "aibenstunn": 880, "nitesh": 880, "niteshk84": 880, "abdullah": 880, "sabri": 880, "abdullahsabri": 880, "muhammad": 880, "ishaqu": 880, "muhammadnizamani": 880, "moham": 880, "ibrahim": 880, "medo072": 880, "sheroz": 880, "khan": 880, "ksheroz": 880, "suyash": 880, "gupta": 880, "sgalpha01": 880, "alvin": 880, "vinod": 880, "david": 880, "adlai": 880, "nettei": 880, "mwape": 880, "bunda": 880, "teckno": 880, "ramya": 880, "manasa": 880, "amancherla": 880, "ramyamanasa": 880, "rohit": 880, "kumar": 880, "salla": 880, "rohitsalla": 880, "sanjai": 880, "suthar": 880, "sanjay8602": 880, "muzakkir": 880, "hussain": 880, "muzakkirhussain011": 880, "chaitanya": 880, "lakhchaura": 880, "zenithflux": 880, "kacper": 880, "ko\u017cdo\u0144": 880, "kozdon": 880, "zera": 880, "marveen": 880, "lyngkhoi": 880, "fleventi": 880, "jackson": 880, "mcclintock": 880, "jacksondm33": 880, "ayush": 880, "lokar": 880, "ayush111111": 880, "garima": 880, "saroj": 880, "androgari": 880, "lee": 880, "bissessar": 880, "leebissessar5": 880, "mostafa": 880, "gamal": 880, "mr": 880, "array22": 880, "rahul": 880, "prem": 880, "rp097": 880, "vaishnavi": 880, "mudaliar": 880, "vaishnavimudaliar": 880, "waqar": 880, "ahm": 880, "waqaarahm": 880, "aryan": 880, "pandei": 880, "aryan8912": 880, "dhruv": 880, "sharma": 880, "druvdub": 880, "mehmet": 880, "bilgehan": 880, "bezcioglu": 880, "bilgehanmehmet": 880, "omkar": 880, "khade": 880, "omickeye": 880, "puriti": 880, "nyagweth": 880, "stefan": 880, "sanchez": 880, "stefansan26": 880}, "objects": {"ivy.Array": [[221, 0, 1, "", "abs"], [222, 0, 1, "", "acos"], [223, 0, 1, "", "acosh"], [616, 0, 1, "", "adam_step"], [617, 0, 1, "", "adam_update"], [390, 0, 1, "", "adaptive_avg_pool1d"], [391, 0, 1, "", "adaptive_avg_pool2d"], [392, 0, 1, "", "adaptive_max_pool2d"], [393, 0, 1, "", "adaptive_max_pool3d"], [224, 0, 1, "", "add"], [425, 0, 1, "", "adjoint"], [768, 0, 1, "", "all"], [535, 0, 1, "", "all_equal"], [335, 0, 1, "", "allclose"], [336, 0, 1, "", "amax"], [337, 0, 1, "", "amin"], [225, 0, 1, "", "angle"], [769, 0, 1, "", "any"], [745, 0, 1, "", "argmax"], [746, 0, 1, "", "argmin"], [754, 0, 1, "", "argsort"], [747, 0, 1, "", "argwhere"], [538, 0, 1, "", "array_equal"], [461, 0, 1, "", "as_strided"], [129, 0, 1, "", "asarray"], [226, 0, 1, "", "asin"], [227, 0, 1, "", "asinh"], [539, 0, 1, "", "assert_supports_inplace"], [462, 0, 1, "", "associative_scan"], [153, 0, 1, "", "astype"], [228, 0, 1, "", "atan"], [229, 0, 1, "", "atan2"], [230, 0, 1, "", "atanh"], [463, 0, 1, "", "atleast_1d"], [464, 0, 1, "", "atleast_2d"], [465, 0, 1, "", "atleast_3d"], [395, 0, 1, "", "avg_pool1d"], [396, 0, 1, "", "avg_pool2d"], [397, 0, 1, "", "avg_pool3d"], [502, 0, 1, "", "batch_norm"], [426, 0, 1, "", "batched_outer"], [509, 0, 1, "", "bernoulli"], [510, 0, 1, "", "beta"], [338, 0, 1, "", "binarizer"], [697, 0, 1, "", "binary_cross_entropy"], [521, 0, 1, "", "bincount"], [231, 0, 1, "", "bitwise_and"], [232, 0, 1, "", "bitwise_invert"], [233, 0, 1, "", "bitwise_left_shift"], [234, 0, 1, "", "bitwise_or"], [235, 0, 1, "", "bitwise_right_shift"], [236, 0, 1, "", "bitwise_xor"], [313, 0, 1, "", "blackman_window"], [154, 0, 1, "", "broadcast_arrays"], [155, 0, 1, "", "broadcast_to"], [156, 0, 1, "", "can_cast"], [237, 0, 1, "", "ceil"], [296, 0, 1, "", "celu"], [668, 0, 1, "", "cholesky"], [700, 0, 1, "", "clip"], [541, 0, 1, "", "clip_matrix_norm"], [542, 0, 1, "", "clip_vector_norm"], [469, 0, 1, "", "column_stack"], [701, 0, 1, "", "concat"], [470, 0, 1, "", "concat_from_sequence"], [427, 0, 1, "", "cond"], [339, 0, 1, "", "conj"], [702, 0, 1, "", "constant_pad"], [651, 0, 1, "", "conv1d"], [652, 0, 1, "", "conv1d_transpose"], [653, 0, 1, "", "conv2d"], [654, 0, 1, "", "conv2d_transpose"], [655, 0, 1, "", "conv3d"], [656, 0, 1, "", "conv3d_transpose"], [130, 0, 1, "", "copy_array"], [340, 0, 1, "", "copysign"], [522, 0, 1, "", "corrcoef"], [238, 0, 1, "", "cos"], [239, 0, 1, "", "cosh"], [341, 0, 1, "", "count_nonzero"], [523, 0, 1, "", "cov"], [669, 0, 1, "", "cross"], [698, 0, 1, "", "cross_entropy"], [524, 0, 1, "", "cummax"], [525, 0, 1, "", "cummin"], [758, 0, 1, "", "cumprod"], [759, 0, 1, "", "cumsum"], [398, 0, 1, "", "dct"], [545, 0, 1, "", "default"], [240, 0, 1, "", "deg2rad"], [659, 0, 1, "", "depthwise_conv2d"], [670, 0, 1, "", "det"], [198, 0, 1, "", "dev"], [399, 0, 1, "", "dft"], [671, 0, 1, "", "diag"], [428, 0, 1, "", "diagflat"], [672, 0, 1, "", "diagonal"], [342, 0, 1, "", "diff"], [343, 0, 1, "", "digamma"], [511, 0, 1, "", "dirichlet"], [241, 0, 1, "", "divide"], [429, 0, 1, "", "dot"], [660, 0, 1, "", "dropout"], [400, 0, 1, "", "dropout1d"], [401, 0, 1, "", "dropout2d"], [402, 0, 1, "", "dropout3d"], [471, 0, 1, "", "dsplit"], [472, 0, 1, "", "dstack"], [164, 0, 1, "", "dtype"], [430, 0, 1, "", "eig"], [674, 0, 1, "", "eigh"], [431, 0, 1, "", "eigh_tridiagonal"], [432, 0, 1, "", "eigvals"], [675, 0, 1, "", "eigvalsh"], [546, 0, 1, "", "einops_rearrange"], [547, 0, 1, "", "einops_reduce"], [548, 0, 1, "", "einops_repeat"], [760, 0, 1, "", "einsum"], [297, 0, 1, "", "elu"], [403, 0, 1, "", "embedding"], [132, 0, 1, "", "empty_like"], [242, 0, 1, "", "equal"], [243, 0, 1, "", "erf"], [344, 0, 1, "", "erfc"], [345, 0, 1, "", "erfinv"], [549, 0, 1, "", "exists"], [244, 0, 1, "", "exp"], [245, 0, 1, "", "exp2"], [473, 0, 1, "", "expand"], [703, 0, 1, "", "expand_dims"], [246, 0, 1, "", "expm1"], [314, 0, 1, "", "eye_like"], [404, 0, 1, "", "fft"], [405, 0, 1, "", "fft2"], [474, 0, 1, "", "fill_diagonal"], [166, 0, 1, "", "finfo"], [346, 0, 1, "", "fix"], [475, 0, 1, "", "flatten"], [704, 0, 1, "", "flip"], [476, 0, 1, "", "fliplr"], [477, 0, 1, "", "flipud"], [347, 0, 1, "", "float_power"], [247, 0, 1, "", "floor"], [248, 0, 1, "", "floor_divide"], [348, 0, 1, "", "fmax"], [249, 0, 1, "", "fmin"], [250, 0, 1, "", "fmod"], [478, 0, 1, "", "fold"], [550, 0, 1, "", "fourier_encode"], [349, 0, 1, "", "frexp"], [134, 0, 1, "", "from_dlpack"], [137, 0, 1, "", "full_like"], [512, 0, 1, "", "gamma"], [553, 0, 1, "", "gather"], [554, 0, 1, "", "gather_nd"], [251, 0, 1, "", "gcd"], [111, 0, 1, "", "gelu"], [433, 0, 1, "", "general_inner_product"], [557, 0, 1, "", "get_num_dims"], [350, 0, 1, "", "gradient"], [620, 0, 1, "", "gradient_descent_update"], [252, 0, 1, "", "greater"], [253, 0, 1, "", "greater_equal"], [503, 0, 1, "", "group_norm"], [298, 0, 1, "", "hardshrink"], [299, 0, 1, "", "hardsilu"], [112, 0, 1, "", "hardswish"], [300, 0, 1, "", "hardtanh"], [559, 0, 1, "", "has_nans"], [479, 0, 1, "", "heaviside"], [434, 0, 1, "", "higher_order_moment"], [453, 0, 1, "", "hinge_embedding_loss"], [526, 0, 1, "", "histogram"], [480, 0, 1, "", "hsplit"], [481, 0, 1, "", "hstack"], [454, 0, 1, "", "huber_loss"], [351, 0, 1, "", "hypot"], [482, 0, 1, "", "i0"], [408, 0, 1, "", "idct"], [409, 0, 1, "", "ifft"], [410, 0, 1, "", "ifftn"], [527, 0, 1, "", "igamma"], [169, 0, 1, "", "iinfo"], [254, 0, 1, "", "imag"], [435, 0, 1, "", "initialize_tucker"], [676, 0, 1, "", "inner"], [561, 0, 1, "", "inplace_decrement"], [562, 0, 1, "", "inplace_increment"], [563, 0, 1, "", "inplace_update"], [504, 0, 1, "", "instance_norm"], [412, 0, 1, "", "interpolate"], [677, 0, 1, "", "inv"], [565, 0, 1, "", "is_array"], [172, 0, 1, "", "is_bool_dtype"], [174, 0, 1, "", "is_float_dtype"], [176, 0, 1, "", "is_int_dtype"], [566, 0, 1, "", "is_ivy_array"], [567, 0, 1, "", "is_ivy_container"], [569, 0, 1, "", "is_native_array"], [178, 0, 1, "", "is_uint_dtype"], [352, 0, 1, "", "isclose"], [255, 0, 1, "", "isfinite"], [570, 0, 1, "", "isin"], [256, 0, 1, "", "isinf"], [257, 0, 1, "", "isnan"], [258, 0, 1, "", "isreal"], [572, 0, 1, "", "itemsize"], [455, 0, 1, "", "kl_div"], [437, 0, 1, "", "kron"], [456, 0, 1, "", "l1_loss"], [505, 0, 1, "", "l1_normalize"], [506, 0, 1, "", "l2_normalize"], [622, 0, 1, "", "lamb_update"], [623, 0, 1, "", "lars_update"], [738, 0, 1, "", "layer_norm"], [259, 0, 1, "", "lcm"], [353, 0, 1, "", "ldexp"], [113, 0, 1, "", "leaky_relu"], [354, 0, 1, "", "lerp"], [260, 0, 1, "", "less"], [261, 0, 1, "", "less_equal"], [516, 0, 1, "", "lexsort"], [355, 0, 1, "", "lgamma"], [661, 0, 1, "", "linear"], [138, 0, 1, "", "linspace"], [262, 0, 1, "", "log"], [263, 0, 1, "", "log10"], [264, 0, 1, "", "log1p"], [265, 0, 1, "", "log2"], [457, 0, 1, "", "log_poisson_loss"], [114, 0, 1, "", "log_softmax"], [266, 0, 1, "", "logaddexp"], [267, 0, 1, "", "logaddexp2"], [268, 0, 1, "", "logical_and"], [269, 0, 1, "", "logical_not"], [270, 0, 1, "", "logical_or"], [271, 0, 1, "", "logical_xor"], [301, 0, 1, "", "logit"], [302, 0, 1, "", "logsigmoid"], [139, 0, 1, "", "logspace"], [508, 0, 1, "", "lp_normalize"], [663, 0, 1, "", "lstm_update"], [441, 0, 1, "", "make_svd_non_negative"], [678, 0, 1, "", "matmul"], [483, 0, 1, "", "matricize"], [442, 0, 1, "", "matrix_exp"], [679, 0, 1, "", "matrix_norm"], [680, 0, 1, "", "matrix_power"], [681, 0, 1, "", "matrix_rank"], [682, 0, 1, "", "matrix_transpose"], [761, 0, 1, "", "max"], [413, 0, 1, "", "max_pool1d"], [414, 0, 1, "", "max_pool2d"], [415, 0, 1, "", "max_pool3d"], [416, 0, 1, "", "max_unpool1d"], [272, 0, 1, "", "maximum"], [762, 0, 1, "", "mean"], [528, 0, 1, "", "median"], [320, 0, 1, "", "mel_weight_matrix"], [140, 0, 1, "", "meshgrid"], [763, 0, 1, "", "min"], [273, 0, 1, "", "minimum"], [115, 0, 1, "", "mish"], [443, 0, 1, "", "mode_dot"], [356, 0, 1, "", "modf"], [484, 0, 1, "", "moveaxis"], [755, 0, 1, "", "msort"], [444, 0, 1, "", "multi_dot"], [664, 0, 1, "", "multi_head_attention"], [445, 0, 1, "", "multi_mode_dot"], [739, 0, 1, "", "multinomial"], [274, 0, 1, "", "multiply"], [275, 0, 1, "", "nan_to_num"], [529, 0, 1, "", "nanmean"], [530, 0, 1, "", "nanmedian"], [531, 0, 1, "", "nanmin"], [532, 0, 1, "", "nanprod"], [357, 0, 1, "", "nansum"], [141, 0, 1, "", "native_array"], [276, 0, 1, "", "negative"], [358, 0, 1, "", "nextafter"], [748, 0, 1, "", "nonzero"], [277, 0, 1, "", "not_equal"], [142, 0, 1, "", "one_hot"], [144, 0, 1, "", "ones_like"], [624, 0, 1, "", "optimizer_update"], [534, 0, 1, "", "optional_get_element"], [683, 0, 1, "", "outer"], [485, 0, 1, "", "pad"], [486, 0, 1, "", "partial_fold"], [487, 0, 1, "", "partial_tensor_to_vec"], [446, 0, 1, "", "partial_tucker"], [488, 0, 1, "", "partial_unfold"], [489, 0, 1, "", "partial_vec_to_tensor"], [705, 0, 1, "", "permute_dims"], [684, 0, 1, "", "pinv"], [513, 0, 1, "", "poisson"], [458, 0, 1, "", "poisson_nll_loss"], [278, 0, 1, "", "positive"], [279, 0, 1, "", "pow"], [303, 0, 1, "", "prelu"], [764, 0, 1, "", "prod"], [490, 0, 1, "", "put_along_axis"], [685, 0, 1, "", "qr"], [533, 0, 1, "", "quantile"], [280, 0, 1, "", "rad2deg"], [740, 0, 1, "", "randint"], [741, 0, 1, "", "random_normal"], [742, 0, 1, "", "random_uniform"], [281, 0, 1, "", "real"], [282, 0, 1, "", "reciprocal"], [364, 0, 1, "", "reduce"], [419, 0, 1, "", "reduce_window"], [116, 0, 1, "", "relu"], [304, 0, 1, "", "relu6"], [283, 0, 1, "", "remainder"], [706, 0, 1, "", "repeat"], [707, 0, 1, "", "reshape"], [181, 0, 1, "", "result_type"], [420, 0, 1, "", "rfft"], [421, 0, 1, "", "rfftn"], [708, 0, 1, "", "roll"], [491, 0, 1, "", "rot90"], [284, 0, 1, "", "round"], [667, 0, 1, "", "scaled_dot_product_attention"], [305, 0, 1, "", "scaled_tanh"], [577, 0, 1, "", "scatter_flat"], [578, 0, 1, "", "scatter_nd"], [756, 0, 1, "", "searchsorted"], [306, 0, 1, "", "selu"], [591, 0, 1, "", "shape"], [744, 0, 1, "", "shuffle"], [117, 0, 1, "", "sigmoid"], [285, 0, 1, "", "sign"], [359, 0, 1, "", "signbit"], [307, 0, 1, "", "silu"], [286, 0, 1, "", "sin"], [360, 0, 1, "", "sinc"], [287, 0, 1, "", "sinh"], [592, 0, 1, "", "size"], [423, 0, 1, "", "sliding_window"], [686, 0, 1, "", "slogdet"], [459, 0, 1, "", "smooth_l1_loss"], [460, 0, 1, "", "soft_margin_loss"], [492, 0, 1, "", "soft_thresholding"], [118, 0, 1, "", "softmax"], [119, 0, 1, "", "softplus"], [308, 0, 1, "", "softshrink"], [687, 0, 1, "", "solve"], [757, 0, 1, "", "sort"], [699, 0, 1, "", "sparse_cross_entropy"], [361, 0, 1, "", "sparsify_tensor"], [709, 0, 1, "", "split"], [288, 0, 1, "", "sqrt"], [289, 0, 1, "", "square"], [710, 0, 1, "", "squeeze"], [593, 0, 1, "", "stable_divide"], [594, 0, 1, "", "stable_pow"], [711, 0, 1, "", "stack"], [765, 0, 1, "", "std"], [424, 0, 1, "", "stft"], [625, 0, 1, "", "stop_gradient"], [595, 0, 1, "", "strides"], [290, 0, 1, "", "subtract"], [766, 0, 1, "", "sum"], [596, 0, 1, "", "supports_inplace_updates"], [688, 0, 1, "", "svd"], [448, 0, 1, "", "svd_flip"], [689, 0, 1, "", "svdvals"], [712, 0, 1, "", "swapaxes"], [493, 0, 1, "", "take"], [494, 0, 1, "", "take_along_axis"], [291, 0, 1, "", "tan"], [292, 0, 1, "", "tanh"], [310, 0, 1, "", "tanhshrink"], [449, 0, 1, "", "tensor_train"], [690, 0, 1, "", "tensordot"], [691, 0, 1, "", "tensorsolve"], [311, 0, 1, "", "threshold"], [312, 0, 1, "", "thresholded_relu"], [713, 0, 1, "", "tile"], [215, 0, 1, "", "to_device"], [598, 0, 1, "", "to_list"], [600, 0, 1, "", "to_numpy"], [601, 0, 1, "", "to_scalar"], [495, 0, 1, "", "top_k"], [692, 0, 1, "", "trace"], [293, 0, 1, "", "trapz"], [146, 0, 1, "", "tril"], [330, 0, 1, "", "trilu"], [496, 0, 1, "", "trim_zeros"], [147, 0, 1, "", "triu"], [294, 0, 1, "", "trunc"], [295, 0, 1, "", "trunc_divide"], [450, 0, 1, "", "truncated_svd"], [451, 0, 1, "", "tt_matrix_to_tensor"], [452, 0, 1, "", "tucker"], [497, 0, 1, "", "unflatten"], [498, 0, 1, "", "unfold"], [750, 0, 1, "", "unique_all"], [499, 0, 1, "", "unique_consecutive"], [751, 0, 1, "", "unique_counts"], [752, 0, 1, "", "unique_inverse"], [753, 0, 1, "", "unique_values"], [514, 0, 1, "", "unravel_index"], [331, 0, 1, "", "unsorted_segment_mean"], [332, 0, 1, "", "unsorted_segment_min"], [333, 0, 1, "", "unsorted_segment_sum"], [714, 0, 1, "", "unstack"], [614, 0, 1, "", "value_is_nan"], [693, 0, 1, "", "vander"], [767, 0, 1, "", "var"], [694, 0, 1, "", "vecdot"], [695, 0, 1, "", "vector_norm"], [696, 0, 1, "", "vector_to_skew_symmetric_matrix"], [500, 0, 1, "", "vsplit"], [501, 0, 1, "", "vstack"], [749, 0, 1, "", "where"], [362, 0, 1, "", "xlogy"], [715, 0, 1, "", "zero_pad"], [150, 0, 1, "", "zeros_like"], [363, 0, 1, "", "zeta"]], "ivy": [[635, 1, 1, "", "ArrayMode"], [631, 1, 1, "", "DefaultComplexDtype"], [632, 1, 1, "", "DefaultDevice"], [631, 1, 1, "", "DefaultDtype"], [631, 1, 1, "", "DefaultFloatDtype"], [631, 1, 1, "", "DefaultIntDtype"], [631, 1, 1, "", "DefaultUintDtype"], [387, 1, 1, "", "NativeSparseArray"], [630, 1, 1, "", "NestedSequence"], [635, 1, 1, "", "PreciseMode"], [632, 1, 1, "", "Profiler"], [387, 1, 1, "", "SparseArray"], [221, 2, 1, "", "abs"], [222, 2, 1, "", "acos"], [223, 2, 1, "", "acosh"], [636, 2, 1, "", "adam_step"], [636, 2, 1, "", "adam_update"], [390, 2, 1, "", "adaptive_avg_pool1d"], [391, 2, 1, "", "adaptive_avg_pool2d"], [392, 2, 1, "", "adaptive_max_pool2d"], [393, 2, 1, "", "adaptive_max_pool3d"], [224, 2, 1, "", "add"], [377, 2, 1, "", "adjoint"], [649, 2, 1, "", "all"], [635, 2, 1, "", "all_equal"], [642, 2, 1, "", "all_nested_indices"], [373, 2, 1, "", "allclose"], [373, 2, 1, "", "amax"], [373, 2, 1, "", "amin"], [225, 2, 1, "", "angle"], [649, 2, 1, "", "any"], [630, 2, 1, "", "arange"], [394, 2, 1, "", "area_interpolate"], [635, 2, 1, "", "arg_info"], [635, 2, 1, "", "arg_names"], [645, 2, 1, "", "argmax"], [645, 2, 1, "", "argmin"], [647, 2, 1, "", "argsort"], [645, 2, 1, "", "argwhere"], [630, 2, 1, "", "array"], [635, 2, 1, "", "array_equal"], [194, 2, 1, "", "as_ivy_dev"], [631, 2, 1, "", "as_ivy_dtype"], [195, 2, 1, "", "as_native_dev"], [631, 2, 1, "", "as_native_dtype"], [379, 2, 1, "", "as_strided"], [630, 2, 1, "", "asarray"], [226, 2, 1, "", "asin"], [227, 2, 1, "", "asinh"], [635, 2, 1, "", "assert_supports_inplace"], [379, 2, 1, "", "associative_scan"], [631, 2, 1, "", "astype"], [228, 2, 1, "", "atan"], [229, 2, 1, "", "atan2"], [230, 2, 1, "", "atanh"], [379, 2, 1, "", "atleast_1d"], [379, 2, 1, "", "atleast_2d"], [379, 2, 1, "", "atleast_3d"], [395, 2, 1, "", "avg_pool1d"], [396, 2, 1, "", "avg_pool2d"], [397, 2, 1, "", "avg_pool3d"], [382, 2, 1, "", "batch_norm"], [377, 2, 1, "", "batched_outer"], [383, 2, 1, "", "bernoulli"], [383, 2, 1, "", "beta"], [373, 2, 1, "", "binarizer"], [639, 2, 1, "", "binary_cross_entropy"], [388, 2, 1, "", "bincount"], [375, 2, 1, "", "bind_custom_gradient_function"], [231, 2, 1, "", "bitwise_and"], [232, 2, 1, "", "bitwise_invert"], [233, 2, 1, "", "bitwise_left_shift"], [234, 2, 1, "", "bitwise_or"], [235, 2, 1, "", "bitwise_right_shift"], [236, 2, 1, "", "bitwise_xor"], [313, 2, 1, "", "blackman_window"], [631, 2, 1, "", "broadcast_arrays"], [379, 2, 1, "", "broadcast_shapes"], [631, 2, 1, "", "broadcast_to"], [635, 2, 1, "", "cache_fn"], [631, 2, 1, "", "can_cast"], [237, 2, 1, "", "ceil"], [296, 2, 1, "", "celu"], [631, 2, 1, "", "check_float"], [379, 2, 1, "", "check_scalar"], [638, 2, 1, "", "cholesky"], [379, 2, 1, "", "choose"], [196, 2, 1, "", "clear_cached_mem_on_dev"], [640, 2, 1, "", "clip"], [635, 2, 1, "", "clip_matrix_norm"], [635, 2, 1, "", "clip_vector_norm"], [631, 2, 1, "", "closest_valid_dtype"], [629, 2, 1, "", "cmp_is"], [629, 2, 1, "", "cmp_isnot"], [379, 2, 1, "", "column_stack"], [640, 2, 1, "", "concat"], [379, 2, 1, "", "concat_from_sequence"], [377, 2, 1, "", "cond"], [373, 2, 1, "", "conj"], [640, 2, 1, "", "constant_pad"], [635, 2, 1, "", "container_types"], [637, 2, 1, "", "conv"], [637, 2, 1, "", "conv1d"], [637, 2, 1, "", "conv1d_transpose"], [637, 2, 1, "", "conv2d"], [637, 2, 1, "", "conv2d_transpose"], [637, 2, 1, "", "conv3d"], [637, 2, 1, "", "conv3d_transpose"], [637, 2, 1, "", "conv_general_dilated"], [637, 2, 1, "", "conv_general_transpose"], [630, 2, 1, "", "copy_array"], [642, 2, 1, "", "copy_nest"], [373, 2, 1, "", "copysign"], [388, 2, 1, "", "corrcoef"], [238, 2, 1, "", "cos"], [239, 2, 1, "", "cosh"], [373, 2, 1, "", "count_nonzero"], [388, 2, 1, "", "cov"], [638, 2, 1, "", "cross"], [639, 2, 1, "", "cross_entropy"], [388, 2, 1, "", "cummax"], [388, 2, 1, "", "cummin"], [648, 2, 1, "", "cumprod"], [648, 2, 1, "", "cumsum"], [635, 2, 1, "", "current_backend_str"], [398, 2, 1, "", "dct"], [635, 2, 1, "", "default"], [631, 2, 1, "", "default_complex_dtype"], [197, 2, 1, "", "default_device"], [631, 2, 1, "", "default_dtype"], [631, 2, 1, "", "default_float_dtype"], [631, 2, 1, "", "default_int_dtype"], [631, 2, 1, "", "default_uint_dtype"], [240, 2, 1, "", "deg2rad"], [637, 2, 1, "", "depthwise_conv2d"], [638, 2, 1, "", "det"], [198, 2, 1, "", "dev"], [199, 2, 1, "", "dev_util"], [399, 2, 1, "", "dft"], [638, 2, 1, "", "diag"], [377, 2, 1, "", "diagflat"], [638, 2, 1, "", "diagonal"], [373, 2, 1, "", "diff"], [373, 2, 1, "", "digamma"], [383, 2, 1, "", "dirichlet"], [241, 2, 1, "", "divide"], [377, 2, 1, "", "dot"], [637, 2, 1, "", "dropout"], [400, 2, 1, "", "dropout1d"], [401, 2, 1, "", "dropout2d"], [402, 2, 1, "", "dropout3d"], [379, 2, 1, "", "dsplit"], [379, 2, 1, "", "dstack"], [631, 2, 1, "", "dtype"], [631, 2, 1, "", "dtype_bits"], [642, 2, 1, "", "duplicate_array_index_chains"], [628, 6, 1, "", "e"], [377, 2, 1, "", "eig"], [638, 2, 1, "", "eigh"], [377, 2, 1, "", "eigh_tridiagonal"], [377, 2, 1, "", "eigvals"], [638, 2, 1, "", "eigvalsh"], [635, 2, 1, "", "einops_rearrange"], [635, 2, 1, "", "einops_reduce"], [635, 2, 1, "", "einops_repeat"], [648, 2, 1, "", "einsum"], [297, 2, 1, "", "elu"], [403, 2, 1, "", "embedding"], [630, 2, 1, "", "empty"], [630, 2, 1, "", "empty_like"], [242, 2, 1, "", "equal"], [243, 2, 1, "", "erf"], [373, 2, 1, "", "erfc"], [373, 2, 1, "", "erfinv"], [636, 2, 1, "", "execute_with_gradients"], [635, 2, 1, "", "exists"], [244, 2, 1, "", "exp"], [245, 2, 1, "", "exp2"], [379, 2, 1, "", "expand"], [640, 2, 1, "", "expand_dims"], [246, 2, 1, "", "expm1"], [630, 2, 1, "", "eye"], [314, 2, 1, "", "eye_like"], [404, 2, 1, "", "fft"], [405, 2, 1, "", "fft2"], [379, 2, 1, "", "fill_diagonal"], [631, 2, 1, "", "finfo"], [373, 2, 1, "", "fix"], [379, 2, 1, "", "flatten"], [640, 2, 1, "", "flip"], [379, 2, 1, "", "fliplr"], [379, 2, 1, "", "flipud"], [373, 2, 1, "", "float_power"], [247, 2, 1, "", "floor"], [248, 2, 1, "", "floor_divide"], [373, 2, 1, "", "fmax"], [249, 2, 1, "", "fmin"], [250, 2, 1, "", "fmod"], [379, 2, 1, "", "fold"], [641, 2, 1, "", "fomaml_step"], [629, 2, 1, "", "for_loop"], [635, 2, 1, "", "fourier_encode"], [373, 2, 1, "", "frexp"], [630, 2, 1, "", "from_dlpack"], [630, 2, 1, "", "frombuffer"], [630, 2, 1, "", "full"], [630, 2, 1, "", "full_like"], [200, 2, 1, "", "function_supported_devices"], [635, 2, 1, "", "function_supported_devices_and_dtypes"], [631, 2, 1, "", "function_supported_dtypes"], [201, 2, 1, "", "function_unsupported_devices"], [635, 2, 1, "", "function_unsupported_devices_and_dtypes"], [631, 2, 1, "", "function_unsupported_dtypes"], [383, 2, 1, "", "gamma"], [635, 2, 1, "", "gather"], [635, 2, 1, "", "gather_nd"], [251, 2, 1, "", "gcd"], [627, 2, 1, "", "gelu"], [377, 2, 1, "", "general_inner_product"], [406, 2, 1, "", "generate_einsum_equation"], [635, 2, 1, "", "get_all_arrays_in_memory"], [202, 2, 1, "", "get_all_ivy_arrays_on_dev"], [407, 2, 1, "", "get_interpolate_kernel"], [635, 2, 1, "", "get_item"], [635, 2, 1, "", "get_num_dims"], [635, 2, 1, "", "get_referrers_recursive"], [203, 2, 1, "", "gpu_is_available"], [636, 2, 1, "", "grad"], [373, 2, 1, "", "gradient"], [636, 2, 1, "", "gradient_descent_update"], [252, 2, 1, "", "greater"], [253, 2, 1, "", "greater_equal"], [382, 2, 1, "", "group_norm"], [315, 2, 1, "", "hamming_window"], [204, 2, 1, "", "handle_soft_device_variable"], [316, 2, 1, "", "hann_window"], [298, 2, 1, "", "hardshrink"], [299, 2, 1, "", "hardsilu"], [627, 2, 1, "", "hardswish"], [300, 2, 1, "", "hardtanh"], [635, 2, 1, "", "has_nans"], [379, 2, 1, "", "heaviside"], [377, 2, 1, "", "higher_order_moment"], [378, 2, 1, "", "hinge_embedding_loss"], [388, 2, 1, "", "histogram"], [379, 2, 1, "", "hsplit"], [379, 2, 1, "", "hstack"], [378, 2, 1, "", "huber_loss"], [373, 2, 1, "", "hypot"], [379, 2, 1, "", "i0"], [408, 2, 1, "", "idct"], [629, 2, 1, "", "if_else"], [409, 2, 1, "", "ifft"], [410, 2, 1, "", "ifftn"], [388, 2, 1, "", "igamma"], [631, 2, 1, "", "iinfo"], [254, 2, 1, "", "imag"], [642, 2, 1, "", "index_nest"], [317, 2, 1, "", "indices"], [628, 6, 1, "", "inf"], [631, 2, 1, "", "infer_default_dtype"], [377, 2, 1, "", "initialize_tucker"], [638, 2, 1, "", "inner"], [635, 2, 1, "", "inplace_arrays_supported"], [635, 2, 1, "", "inplace_decrement"], [635, 2, 1, "", "inplace_increment"], [635, 2, 1, "", "inplace_update"], [635, 2, 1, "", "inplace_variables_supported"], [642, 2, 1, "", "insert_into_nest_at_index"], [642, 2, 1, "", "insert_into_nest_at_indices"], [382, 2, 1, "", "instance_norm"], [411, 2, 1, "", "interp"], [412, 2, 1, "", "interpolate"], [638, 2, 1, "", "inv"], [631, 2, 1, "", "invalid_dtype"], [386, 2, 1, "", "invert_permutation"], [635, 2, 1, "", "is_array"], [631, 2, 1, "", "is_bool_dtype"], [631, 2, 1, "", "is_complex_dtype"], [631, 2, 1, "", "is_float_dtype"], [631, 2, 1, "", "is_hashable_dtype"], [631, 2, 1, "", "is_int_dtype"], [635, 2, 1, "", "is_ivy_array"], [635, 2, 1, "", "is_ivy_container"], [635, 2, 1, "", "is_ivy_nested_array"], [387, 2, 1, "", "is_ivy_sparse_array"], [635, 2, 1, "", "is_native_array"], [631, 2, 1, "", "is_native_dtype"], [387, 2, 1, "", "is_native_sparse_array"], [631, 2, 1, "", "is_uint_dtype"], [373, 2, 1, "", "isclose"], [255, 2, 1, "", "isfinite"], [635, 2, 1, "", "isin"], [256, 2, 1, "", "isinf"], [257, 2, 1, "", "isnan"], [258, 2, 1, "", "isreal"], [635, 2, 1, "", "isscalar"], [635, 2, 1, "", "itemsize"], [636, 2, 1, "", "jac"], [375, 2, 1, "", "jvp"], [318, 2, 1, "", "kaiser_bessel_derived_window"], [319, 2, 1, "", "kaiser_window"], [377, 2, 1, "", "khatri_rao"], [378, 2, 1, "", "kl_div"], [377, 2, 1, "", "kron"], [377, 2, 1, "", "kronecker"], [378, 2, 1, "", "l1_loss"], [382, 2, 1, "", "l1_normalize"], [382, 2, 1, "", "l2_normalize"], [636, 2, 1, "", "lamb_update"], [636, 2, 1, "", "lars_update"], [643, 2, 1, "", "layer_norm"], [259, 2, 1, "", "lcm"], [373, 2, 1, "", "ldexp"], [627, 2, 1, "", "leaky_relu"], [373, 2, 1, "", "lerp"], [260, 2, 1, "", "less"], [261, 2, 1, "", "less_equal"], [386, 2, 1, "", "lexsort"], [373, 2, 1, "", "lgamma"], [637, 2, 1, "", "linear"], [630, 2, 1, "", "linspace"], [649, 2, 1, "", "load"], [382, 2, 1, "", "local_response_norm"], [262, 2, 1, "", "log"], [263, 2, 1, "", "log10"], [264, 2, 1, "", "log1p"], [265, 2, 1, "", "log2"], [378, 2, 1, "", "log_poisson_loss"], [627, 2, 1, "", "log_softmax"], [266, 2, 1, "", "logaddexp"], [267, 2, 1, "", "logaddexp2"], [268, 2, 1, "", "logical_and"], [269, 2, 1, "", "logical_not"], [270, 2, 1, "", "logical_or"], [271, 2, 1, "", "logical_xor"], [301, 2, 1, "", "logit"], [302, 2, 1, "", "logsigmoid"], [630, 2, 1, "", "logspace"], [382, 2, 1, "", "lp_normalize"], [637, 2, 1, "", "lstm"], [637, 2, 1, "", "lstm_update"], [377, 2, 1, "", "lu_factor"], [377, 2, 1, "", "lu_solve"], [377, 2, 1, "", "make_svd_non_negative"], [641, 2, 1, "", "maml_step"], [642, 2, 1, "", "map"], [642, 2, 1, "", "map_nest_at_index"], [642, 2, 1, "", "map_nest_at_indices"], [635, 2, 1, "", "match_kwargs"], [638, 2, 1, "", "matmul"], [379, 2, 1, "", "matricize"], [377, 2, 1, "", "matrix_exp"], [638, 2, 1, "", "matrix_norm"], [638, 2, 1, "", "matrix_power"], [638, 2, 1, "", "matrix_rank"], [638, 2, 1, "", "matrix_transpose"], [648, 2, 1, "", "max"], [413, 2, 1, "", "max_pool1d"], [376, 2, 1, "", "max_pool2d"], [376, 2, 1, "", "max_pool3d"], [376, 2, 1, "", "max_unpool1d"], [272, 2, 1, "", "maximum"], [648, 2, 1, "", "mean"], [388, 2, 1, "", "median"], [320, 2, 1, "", "mel_weight_matrix"], [630, 2, 1, "", "meshgrid"], [648, 2, 1, "", "min"], [273, 2, 1, "", "minimum"], [627, 2, 1, "", "mish"], [377, 2, 1, "", "mode_dot"], [373, 2, 1, "", "modf"], [379, 2, 1, "", "moveaxis"], [647, 2, 1, "", "msort"], [377, 2, 1, "", "multi_dot"], [637, 2, 1, "", "multi_head_attention"], [642, 2, 1, "", "multi_index_nest"], [377, 2, 1, "", "multi_mode_dot"], [644, 2, 1, "", "multinomial"], [274, 2, 1, "", "multiply"], [635, 2, 1, "", "multiprocessing"], [628, 6, 1, "", "nan"], [275, 2, 1, "", "nan_to_num"], [388, 2, 1, "", "nanmean"], [388, 2, 1, "", "nanmedian"], [388, 2, 1, "", "nanmin"], [388, 2, 1, "", "nanprod"], [373, 2, 1, "", "nansum"], [630, 2, 1, "", "native_array"], [387, 2, 1, "", "native_sparse_array"], [387, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [321, 2, 1, "", "ndenumerate"], [370, 2, 1, "", "ndindex"], [376, 2, 1, "", "nearest_interpolate"], [276, 2, 1, "", "negative"], [642, 2, 1, "", "nested_any"], [642, 2, 1, "", "nested_argwhere"], [642, 2, 1, "", "nested_map"], [642, 2, 1, "", "nested_multi_map"], [628, 6, 1, "", "newaxis"], [373, 2, 1, "", "nextafter"], [637, 2, 1, "", "nms"], [645, 2, 1, "", "nonzero"], [277, 2, 1, "", "not_equal"], [635, 2, 1, "", "num_arrays_in_memory"], [205, 2, 1, "", "num_cpu_cores"], [206, 2, 1, "", "num_gpus"], [207, 2, 1, "", "num_ivy_arrays_on_dev"], [630, 2, 1, "", "one_hot"], [630, 2, 1, "", "ones"], [630, 2, 1, "", "ones_like"], [636, 2, 1, "", "optimizer_update"], [389, 2, 1, "", "optional_get_element"], [638, 2, 1, "", "outer"], [379, 2, 1, "", "pad"], [379, 2, 1, "", "partial_fold"], [379, 2, 1, "", "partial_tensor_to_vec"], [377, 2, 1, "", "partial_tucker"], [379, 2, 1, "", "partial_unfold"], [379, 2, 1, "", "partial_vec_to_tensor"], [208, 2, 1, "", "percent_used_mem_on_dev"], [640, 2, 1, "", "permute_dims"], [628, 6, 1, "", "pi"], [638, 2, 1, "", "pinv"], [383, 2, 1, "", "poisson"], [378, 2, 1, "", "poisson_nll_loss"], [370, 2, 1, "", "polyval"], [376, 2, 1, "", "pool"], [278, 2, 1, "", "positive"], [279, 2, 1, "", "pow"], [303, 2, 1, "", "prelu"], [635, 2, 1, "", "print_all_arrays_in_memory"], [209, 2, 1, "", "print_all_ivy_arrays_on_dev"], [648, 2, 1, "", "prod"], [631, 2, 1, "", "promote_types"], [631, 2, 1, "", "promote_types_of_inputs"], [642, 2, 1, "", "prune_empty"], [642, 2, 1, "", "prune_nest_at_index"], [642, 2, 1, "", "prune_nest_at_indices"], [379, 2, 1, "", "put_along_axis"], [638, 2, 1, "", "qr"], [388, 2, 1, "", "quantile"], [280, 2, 1, "", "rad2deg"], [644, 2, 1, "", "randint"], [370, 2, 1, "", "random_cp"], [644, 2, 1, "", "random_normal"], [370, 2, 1, "", "random_parafac2"], [370, 2, 1, "", "random_tr"], [370, 2, 1, "", "random_tt"], [370, 2, 1, "", "random_tucker"], [644, 2, 1, "", "random_uniform"], [281, 2, 1, "", "real"], [282, 2, 1, "", "reciprocal"], [374, 2, 1, "", "reduce"], [376, 2, 1, "", "reduce_window"], [627, 2, 1, "", "relu"], [304, 2, 1, "", "relu6"], [283, 2, 1, "", "remainder"], [640, 2, 1, "", "repeat"], [641, 2, 1, "", "reptile_step"], [640, 2, 1, "", "reshape"], [631, 2, 1, "", "result_type"], [376, 2, 1, "", "rfft"], [376, 2, 1, "", "rfftn"], [376, 2, 1, "", "rnn"], [637, 2, 1, "", "roi_align"], [640, 2, 1, "", "roll"], [379, 2, 1, "", "rot90"], [284, 2, 1, "", "round"], [649, 2, 1, "", "save"], [637, 2, 1, "", "scaled_dot_product_attention"], [305, 2, 1, "", "scaled_tanh"], [635, 2, 1, "", "scatter_flat"], [635, 2, 1, "", "scatter_nd"], [647, 2, 1, "", "searchsorted"], [644, 2, 1, "", "seed"], [306, 2, 1, "", "selu"], [635, 2, 1, "", "set_array_mode"], [631, 2, 1, "", "set_default_complex_dtype"], [210, 2, 1, "", "set_default_device"], [631, 2, 1, "", "set_default_dtype"], [184, 2, 1, "", "set_default_float_dtype"], [185, 2, 1, "", "set_default_int_dtype"], [186, 2, 1, "", "set_default_uint_dtype"], [635, 2, 1, "", "set_exception_trace_mode"], [635, 2, 1, "", "set_inplace_mode"], [635, 2, 1, "", "set_item"], [635, 2, 1, "", "set_min_base"], [635, 2, 1, "", "set_min_denominator"], [642, 2, 1, "", "set_nest_at_index"], [642, 2, 1, "", "set_nest_at_indices"], [635, 2, 1, "", "set_nestable_mode"], [635, 2, 1, "", "set_precise_mode"], [635, 2, 1, "", "set_queue_timeout"], [635, 2, 1, "", "set_shape_array_mode"], [635, 2, 1, "", "set_show_func_wrapper_trace_mode"], [211, 2, 1, "", "set_soft_device_mode"], [212, 2, 1, "", "set_split_factor"], [635, 2, 1, "", "set_tmp_dir"], [635, 2, 1, "", "shape"], [644, 2, 1, "", "shuffle"], [627, 2, 1, "", "sigmoid"], [285, 2, 1, "", "sign"], [373, 2, 1, "", "signbit"], [307, 2, 1, "", "silu"], [286, 2, 1, "", "sin"], [373, 2, 1, "", "sinc"], [287, 2, 1, "", "sinh"], [635, 2, 1, "", "size"], [376, 2, 1, "", "sliding_window"], [638, 2, 1, "", "slogdet"], [378, 2, 1, "", "smooth_l1_loss"], [378, 2, 1, "", "soft_margin_loss"], [379, 2, 1, "", "soft_thresholding"], [627, 2, 1, "", "softmax"], [627, 2, 1, "", "softplus"], [308, 2, 1, "", "softshrink"], [627, 2, 1, "", "softsign"], [638, 2, 1, "", "solve"], [377, 2, 1, "", "solve_triangular"], [647, 2, 1, "", "sort"], [639, 2, 1, "", "sparse_cross_entropy"], [373, 2, 1, "", "sparsify_tensor"], [640, 2, 1, "", "split"], [213, 2, 1, "", "split_factor"], [214, 2, 1, "", "split_func_call"], [288, 2, 1, "", "sqrt"], [289, 2, 1, "", "square"], [640, 2, 1, "", "squeeze"], [635, 2, 1, "", "stable_divide"], [635, 2, 1, "", "stable_pow"], [640, 2, 1, "", "stack"], [309, 2, 1, "", "stanh"], [648, 2, 1, "", "std"], [376, 2, 1, "", "stft"], [636, 2, 1, "", "stop_gradient"], [635, 2, 1, "", "strides"], [290, 2, 1, "", "subtract"], [648, 2, 1, "", "sum"], [635, 2, 1, "", "supports_inplace_updates"], [638, 2, 1, "", "svd"], [377, 2, 1, "", "svd_flip"], [638, 2, 1, "", "svdvals"], [640, 2, 1, "", "swapaxes"], [379, 2, 1, "", "take"], [379, 2, 1, "", "take_along_axis"], [291, 2, 1, "", "tan"], [292, 2, 1, "", "tanh"], [310, 2, 1, "", "tanhshrink"], [377, 2, 1, "", "tensor_train"], [638, 2, 1, "", "tensordot"], [638, 2, 1, "", "tensorsolve"], [311, 2, 1, "", "threshold"], [312, 2, 1, "", "thresholded_relu"], [640, 2, 1, "", "tile"], [215, 2, 1, "", "to_device"], [630, 2, 1, "", "to_dlpack"], [635, 2, 1, "", "to_ivy_shape"], [635, 2, 1, "", "to_list"], [635, 2, 1, "", "to_native_shape"], [635, 2, 1, "", "to_numpy"], [635, 2, 1, "", "to_scalar"], [379, 2, 1, "", "top_k"], [216, 2, 1, "", "total_mem_on_dev"], [217, 2, 1, "", "tpu_is_available"], [638, 2, 1, "", "trace"], [865, 2, 1, "", "trace_graph"], [866, 2, 1, "", "transpile"], [293, 2, 1, "", "trapz"], [630, 2, 1, "", "tril"], [370, 2, 1, "", "tril_indices"], [370, 2, 1, "", "trilu"], [379, 2, 1, "", "trim_zeros"], [630, 2, 1, "", "triu"], [630, 2, 1, "", "triu_indices"], [294, 2, 1, "", "trunc"], [295, 2, 1, "", "trunc_divide"], [377, 2, 1, "", "truncated_svd"], [635, 2, 1, "", "try_else_none"], [629, 2, 1, "", "try_except"], [377, 2, 1, "", "tt_matrix_to_tensor"], [377, 2, 1, "", "tucker"], [187, 2, 1, "", "type_promote_arrays"], [379, 2, 1, "", "unflatten"], [379, 2, 1, "", "unfold"], [867, 2, 1, "", "unify"], [646, 2, 1, "", "unique_all"], [379, 2, 1, "", "unique_consecutive"], [646, 2, 1, "", "unique_counts"], [646, 2, 1, "", "unique_inverse"], [646, 2, 1, "", "unique_values"], [384, 2, 1, "", "unravel_index"], [635, 2, 1, "", "unset_array_mode"], [188, 2, 1, "", "unset_default_complex_dtype"], [218, 2, 1, "", "unset_default_device"], [189, 2, 1, "", "unset_default_dtype"], [190, 2, 1, "", "unset_default_float_dtype"], [191, 2, 1, "", "unset_default_int_dtype"], [192, 2, 1, "", "unset_default_uint_dtype"], [635, 2, 1, "", "unset_exception_trace_mode"], [635, 2, 1, "", "unset_inplace_mode"], [635, 2, 1, "", "unset_min_base"], [635, 2, 1, "", "unset_min_denominator"], [635, 2, 1, "", "unset_nestable_mode"], [635, 2, 1, "", "unset_precise_mode"], [635, 2, 1, "", "unset_queue_timeout"], [635, 2, 1, "", "unset_shape_array_mode"], [635, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [219, 2, 1, "", "unset_soft_device_mode"], [635, 2, 1, "", "unset_tmp_dir"], [370, 2, 1, "", "unsorted_segment_mean"], [370, 2, 1, "", "unsorted_segment_min"], [370, 2, 1, "", "unsorted_segment_sum"], [640, 2, 1, "", "unstack"], [220, 2, 1, "", "used_mem_on_dev"], [193, 2, 1, "", "valid_dtype"], [636, 2, 1, "", "value_and_grad"], [635, 2, 1, "", "value_is_nan"], [638, 2, 1, "", "vander"], [648, 2, 1, "", "var"], [638, 2, 1, "", "vecdot"], [638, 2, 1, "", "vector_norm"], [638, 2, 1, "", "vector_to_skew_symmetric_matrix"], [375, 2, 1, "", "vjp"], [635, 2, 1, "", "vmap"], [370, 2, 1, "", "vorbis_window"], [379, 2, 1, "", "vsplit"], [379, 2, 1, "", "vstack"], [645, 2, 1, "", "where"], [629, 2, 1, "", "while_loop"], [373, 2, 1, "", "xlogy"], [640, 2, 1, "", "zero_pad"], [630, 2, 1, "", "zeros"], [630, 2, 1, "", "zeros_like"], [373, 2, 1, "", "zeta"]], "ivy.Container": [[221, 0, 1, "", "abs"], [222, 0, 1, "", "acos"], [223, 0, 1, "", "acosh"], [616, 0, 1, "", "adam_step"], [617, 0, 1, "", "adam_update"], [390, 0, 1, "", "adaptive_avg_pool1d"], [391, 0, 1, "", "adaptive_avg_pool2d"], [392, 0, 1, "", "adaptive_max_pool2d"], [393, 0, 1, "", "adaptive_max_pool3d"], [224, 0, 1, "", "add"], [425, 0, 1, "", "adjoint"], [768, 0, 1, "", "all"], [535, 0, 1, "", "all_equal"], [335, 0, 1, "", "allclose"], [336, 0, 1, "", "amax"], [337, 0, 1, "", "amin"], [225, 0, 1, "", "angle"], [769, 0, 1, "", "any"], [745, 0, 1, "", "argmax"], [746, 0, 1, "", "argmin"], [754, 0, 1, "", "argsort"], [747, 0, 1, "", "argwhere"], [538, 0, 1, "", "array_equal"], [461, 0, 1, "", "as_strided"], [129, 0, 1, "", "asarray"], [226, 0, 1, "", "asin"], [227, 0, 1, "", "asinh"], [539, 0, 1, "", "assert_supports_inplace"], [462, 0, 1, "", "associative_scan"], [153, 0, 1, "", "astype"], [228, 0, 1, "", "atan"], [229, 0, 1, "", "atan2"], [230, 0, 1, "", "atanh"], [463, 0, 1, "", "atleast_1d"], [464, 0, 1, "", "atleast_2d"], [465, 0, 1, "", "atleast_3d"], [395, 0, 1, "", "avg_pool1d"], [396, 0, 1, "", "avg_pool2d"], [397, 0, 1, "", "avg_pool3d"], [502, 0, 1, "", "batch_norm"], [426, 0, 1, "", "batched_outer"], [509, 0, 1, "", "bernoulli"], [510, 0, 1, "", "beta"], [338, 0, 1, "", "binarizer"], [697, 0, 1, "", "binary_cross_entropy"], [521, 0, 1, "", "bincount"], [231, 0, 1, "", "bitwise_and"], [232, 0, 1, "", "bitwise_invert"], [233, 0, 1, "", "bitwise_left_shift"], [234, 0, 1, "", "bitwise_or"], [235, 0, 1, "", "bitwise_right_shift"], [236, 0, 1, "", "bitwise_xor"], [313, 0, 1, "", "blackman_window"], [154, 0, 1, "", "broadcast_arrays"], [466, 0, 1, "", "broadcast_shapes"], [155, 0, 1, "", "broadcast_to"], [156, 0, 1, "", "can_cast"], [237, 0, 1, "", "ceil"], [296, 0, 1, "", "celu"], [668, 0, 1, "", "cholesky"], [700, 0, 1, "", "clip"], [541, 0, 1, "", "clip_matrix_norm"], [542, 0, 1, "", "clip_vector_norm"], [469, 0, 1, "", "column_stack"], [701, 0, 1, "", "concat"], [470, 0, 1, "", "concat_from_sequence"], [427, 0, 1, "", "cond"], [339, 0, 1, "", "conj"], [702, 0, 1, "", "constant_pad"], [651, 0, 1, "", "conv1d"], [652, 0, 1, "", "conv1d_transpose"], [653, 0, 1, "", "conv2d"], [654, 0, 1, "", "conv2d_transpose"], [655, 0, 1, "", "conv3d"], [656, 0, 1, "", "conv3d_transpose"], [130, 0, 1, "", "copy_array"], [340, 0, 1, "", "copysign"], [522, 0, 1, "", "corrcoef"], [238, 0, 1, "", "cos"], [239, 0, 1, "", "cosh"], [341, 0, 1, "", "count_nonzero"], [523, 0, 1, "", "cov"], [669, 0, 1, "", "cross"], [698, 0, 1, "", "cross_entropy"], [524, 0, 1, "", "cummax"], [525, 0, 1, "", "cummin"], [758, 0, 1, "", "cumprod"], [759, 0, 1, "", "cumsum"], [398, 0, 1, "", "dct"], [240, 0, 1, "", "deg2rad"], [659, 0, 1, "", "depthwise_conv2d"], [670, 0, 1, "", "det"], [198, 0, 1, "", "dev"], [399, 0, 1, "", "dft"], [671, 0, 1, "", "diag"], [428, 0, 1, "", "diagflat"], [672, 0, 1, "", "diagonal"], [342, 0, 1, "", "diff"], [343, 0, 1, "", "digamma"], [511, 0, 1, "", "dirichlet"], [241, 0, 1, "", "divide"], [429, 0, 1, "", "dot"], [660, 0, 1, "", "dropout"], [400, 0, 1, "", "dropout1d"], [401, 0, 1, "", "dropout2d"], [402, 0, 1, "", "dropout3d"], [471, 0, 1, "", "dsplit"], [472, 0, 1, "", "dstack"], [164, 0, 1, "", "dtype"], [430, 0, 1, "", "eig"], [674, 0, 1, "", "eigh"], [431, 0, 1, "", "eigh_tridiagonal"], [432, 0, 1, "", "eigvals"], [675, 0, 1, "", "eigvalsh"], [546, 0, 1, "", "einops_rearrange"], [547, 0, 1, "", "einops_reduce"], [548, 0, 1, "", "einops_repeat"], [760, 0, 1, "", "einsum"], [297, 0, 1, "", "elu"], [403, 0, 1, "", "embedding"], [132, 0, 1, "", "empty_like"], [242, 0, 1, "", "equal"], [243, 0, 1, "", "erf"], [344, 0, 1, "", "erfc"], [345, 0, 1, "", "erfinv"], [549, 0, 1, "", "exists"], [244, 0, 1, "", "exp"], [245, 0, 1, "", "exp2"], [473, 0, 1, "", "expand"], [703, 0, 1, "", "expand_dims"], [246, 0, 1, "", "expm1"], [314, 0, 1, "", "eye_like"], [404, 0, 1, "", "fft"], [474, 0, 1, "", "fill_diagonal"], [166, 0, 1, "", "finfo"], [346, 0, 1, "", "fix"], [475, 0, 1, "", "flatten"], [704, 0, 1, "", "flip"], [476, 0, 1, "", "fliplr"], [477, 0, 1, "", "flipud"], [347, 0, 1, "", "float_power"], [247, 0, 1, "", "floor"], [248, 0, 1, "", "floor_divide"], [348, 0, 1, "", "fmax"], [249, 0, 1, "", "fmin"], [250, 0, 1, "", "fmod"], [478, 0, 1, "", "fold"], [550, 0, 1, "", "fourier_encode"], [349, 0, 1, "", "frexp"], [134, 0, 1, "", "from_dlpack"], [135, 0, 1, "", "frombuffer"], [137, 0, 1, "", "full_like"], [512, 0, 1, "", "gamma"], [553, 0, 1, "", "gather"], [554, 0, 1, "", "gather_nd"], [251, 0, 1, "", "gcd"], [111, 0, 1, "", "gelu"], [433, 0, 1, "", "general_inner_product"], [557, 0, 1, "", "get_num_dims"], [350, 0, 1, "", "gradient"], [620, 0, 1, "", "gradient_descent_update"], [252, 0, 1, "", "greater"], [253, 0, 1, "", "greater_equal"], [503, 0, 1, "", "group_norm"], [315, 0, 1, "", "hamming_window"], [316, 0, 1, "", "hann_window"], [298, 0, 1, "", "hardshrink"], [299, 0, 1, "", "hardsilu"], [112, 0, 1, "", "hardswish"], [300, 0, 1, "", "hardtanh"], [559, 0, 1, "", "has_nans"], [479, 0, 1, "", "heaviside"], [434, 0, 1, "", "higher_order_moment"], [453, 0, 1, "", "hinge_embedding_loss"], [526, 0, 1, "", "histogram"], [480, 0, 1, "", "hsplit"], [481, 0, 1, "", "hstack"], [454, 0, 1, "", "huber_loss"], [351, 0, 1, "", "hypot"], [482, 0, 1, "", "i0"], [408, 0, 1, "", "idct"], [409, 0, 1, "", "ifft"], [410, 0, 1, "", "ifftn"], [527, 0, 1, "", "igamma"], [169, 0, 1, "", "iinfo"], [254, 0, 1, "", "imag"], [435, 0, 1, "", "initialize_tucker"], [676, 0, 1, "", "inner"], [561, 0, 1, "", "inplace_decrement"], [562, 0, 1, "", "inplace_increment"], [563, 0, 1, "", "inplace_update"], [504, 0, 1, "", "instance_norm"], [412, 0, 1, "", "interpolate"], [677, 0, 1, "", "inv"], [515, 0, 1, "", "invert_permutation"], [565, 0, 1, "", "is_array"], [172, 0, 1, "", "is_bool_dtype"], [173, 0, 1, "", "is_complex_dtype"], [174, 0, 1, "", "is_float_dtype"], [176, 0, 1, "", "is_int_dtype"], [566, 0, 1, "", "is_ivy_array"], [569, 0, 1, "", "is_native_array"], [178, 0, 1, "", "is_uint_dtype"], [352, 0, 1, "", "isclose"], [255, 0, 1, "", "isfinite"], [570, 0, 1, "", "isin"], [256, 0, 1, "", "isinf"], [257, 0, 1, "", "isnan"], [258, 0, 1, "", "isreal"], [572, 0, 1, "", "itemsize"], [318, 0, 1, "", "kaiser_bessel_derived_window"], [319, 0, 1, "", "kaiser_window"], [455, 0, 1, "", "kl_div"], [437, 0, 1, "", "kron"], [456, 0, 1, "", "l1_loss"], [505, 0, 1, "", "l1_normalize"], [506, 0, 1, "", "l2_normalize"], [622, 0, 1, "", "lamb_update"], [623, 0, 1, "", "lars_update"], [738, 0, 1, "", "layer_norm"], [259, 0, 1, "", "lcm"], [353, 0, 1, "", "ldexp"], [113, 0, 1, "", "leaky_relu"], [354, 0, 1, "", "lerp"], [260, 0, 1, "", "less"], [261, 0, 1, "", "less_equal"], [516, 0, 1, "", "lexsort"], [355, 0, 1, "", "lgamma"], [661, 0, 1, "", "linear"], [138, 0, 1, "", "linspace"], [262, 0, 1, "", "log"], [263, 0, 1, "", "log10"], [264, 0, 1, "", "log1p"], [265, 0, 1, "", "log2"], [457, 0, 1, "", "log_poisson_loss"], [114, 0, 1, "", "log_softmax"], [266, 0, 1, "", "logaddexp"], [267, 0, 1, "", "logaddexp2"], [268, 0, 1, "", "logical_and"], [269, 0, 1, "", "logical_not"], [270, 0, 1, "", "logical_or"], [271, 0, 1, "", "logical_xor"], [301, 0, 1, "", "logit"], [302, 0, 1, "", "logsigmoid"], [139, 0, 1, "", "logspace"], [508, 0, 1, "", "lp_normalize"], [663, 0, 1, "", "lstm_update"], [441, 0, 1, "", "make_svd_non_negative"], [678, 0, 1, "", "matmul"], [483, 0, 1, "", "matricize"], [442, 0, 1, "", "matrix_exp"], [679, 0, 1, "", "matrix_norm"], [680, 0, 1, "", "matrix_power"], [681, 0, 1, "", "matrix_rank"], [682, 0, 1, "", "matrix_transpose"], [761, 0, 1, "", "max"], [413, 0, 1, "", "max_pool1d"], [414, 0, 1, "", "max_pool2d"], [415, 0, 1, "", "max_pool3d"], [416, 0, 1, "", "max_unpool1d"], [272, 0, 1, "", "maximum"], [762, 0, 1, "", "mean"], [528, 0, 1, "", "median"], [320, 0, 1, "", "mel_weight_matrix"], [140, 0, 1, "", "meshgrid"], [763, 0, 1, "", "min"], [273, 0, 1, "", "minimum"], [115, 0, 1, "", "mish"], [443, 0, 1, "", "mode_dot"], [356, 0, 1, "", "modf"], [484, 0, 1, "", "moveaxis"], [755, 0, 1, "", "msort"], [444, 0, 1, "", "multi_dot"], [664, 0, 1, "", "multi_head_attention"], [445, 0, 1, "", "multi_mode_dot"], [739, 0, 1, "", "multinomial"], [274, 0, 1, "", "multiply"], [275, 0, 1, "", "nan_to_num"], [529, 0, 1, "", "nanmean"], [530, 0, 1, "", "nanmedian"], [531, 0, 1, "", "nanmin"], [532, 0, 1, "", "nanprod"], [357, 0, 1, "", "nansum"], [141, 0, 1, "", "native_array"], [276, 0, 1, "", "negative"], [358, 0, 1, "", "nextafter"], [748, 0, 1, "", "nonzero"], [277, 0, 1, "", "not_equal"], [142, 0, 1, "", "one_hot"], [144, 0, 1, "", "ones_like"], [624, 0, 1, "", "optimizer_update"], [534, 0, 1, "", "optional_get_element"], [683, 0, 1, "", "outer"], [485, 0, 1, "", "pad"], [486, 0, 1, "", "partial_fold"], [487, 0, 1, "", "partial_tensor_to_vec"], [446, 0, 1, "", "partial_tucker"], [488, 0, 1, "", "partial_unfold"], [489, 0, 1, "", "partial_vec_to_tensor"], [705, 0, 1, "", "permute_dims"], [684, 0, 1, "", "pinv"], [513, 0, 1, "", "poisson"], [458, 0, 1, "", "poisson_nll_loss"], [323, 0, 1, "", "polyval"], [278, 0, 1, "", "positive"], [279, 0, 1, "", "pow"], [303, 0, 1, "", "prelu"], [764, 0, 1, "", "prod"], [490, 0, 1, "", "put_along_axis"], [685, 0, 1, "", "qr"], [533, 0, 1, "", "quantile"], [280, 0, 1, "", "rad2deg"], [740, 0, 1, "", "randint"], [741, 0, 1, "", "random_normal"], [742, 0, 1, "", "random_uniform"], [281, 0, 1, "", "real"], [282, 0, 1, "", "reciprocal"], [364, 0, 1, "", "reduce"], [419, 0, 1, "", "reduce_window"], [116, 0, 1, "", "relu"], [304, 0, 1, "", "relu6"], [283, 0, 1, "", "remainder"], [706, 0, 1, "", "repeat"], [707, 0, 1, "", "reshape"], [181, 0, 1, "", "result_type"], [420, 0, 1, "", "rfft"], [421, 0, 1, "", "rfftn"], [708, 0, 1, "", "roll"], [491, 0, 1, "", "rot90"], [284, 0, 1, "", "round"], [667, 0, 1, "", "scaled_dot_product_attention"], [305, 0, 1, "", "scaled_tanh"], [577, 0, 1, "", "scatter_flat"], [578, 0, 1, "", "scatter_nd"], [756, 0, 1, "", "searchsorted"], [306, 0, 1, "", "selu"], [744, 0, 1, "", "shuffle"], [117, 0, 1, "", "sigmoid"], [285, 0, 1, "", "sign"], [359, 0, 1, "", "signbit"], [307, 0, 1, "", "silu"], [286, 0, 1, "", "sin"], [360, 0, 1, "", "sinc"], [287, 0, 1, "", "sinh"], [592, 0, 1, "", "size"], [423, 0, 1, "", "sliding_window"], [686, 0, 1, "", "slogdet"], [459, 0, 1, "", "smooth_l1_loss"], [460, 0, 1, "", "soft_margin_loss"], [492, 0, 1, "", "soft_thresholding"], [118, 0, 1, "", "softmax"], [119, 0, 1, "", "softplus"], [308, 0, 1, "", "softshrink"], [687, 0, 1, "", "solve"], [757, 0, 1, "", "sort"], [699, 0, 1, "", "sparse_cross_entropy"], [361, 0, 1, "", "sparsify_tensor"], [709, 0, 1, "", "split"], [288, 0, 1, "", "sqrt"], [289, 0, 1, "", "square"], [710, 0, 1, "", "squeeze"], [593, 0, 1, "", "stable_divide"], [594, 0, 1, "", "stable_pow"], [711, 0, 1, "", "stack"], [765, 0, 1, "", "std"], [424, 0, 1, "", "stft"], [625, 0, 1, "", "stop_gradient"], [595, 0, 1, "", "strides"], [290, 0, 1, "", "subtract"], [766, 0, 1, "", "sum"], [596, 0, 1, "", "supports_inplace_updates"], [688, 0, 1, "", "svd"], [448, 0, 1, "", "svd_flip"], [689, 0, 1, "", "svdvals"], [712, 0, 1, "", "swapaxes"], [493, 0, 1, "", "take"], [494, 0, 1, "", "take_along_axis"], [291, 0, 1, "", "tan"], [292, 0, 1, "", "tanh"], [310, 0, 1, "", "tanhshrink"], [449, 0, 1, "", "tensor_train"], [690, 0, 1, "", "tensordot"], [691, 0, 1, "", "tensorsolve"], [311, 0, 1, "", "threshold"], [312, 0, 1, "", "thresholded_relu"], [713, 0, 1, "", "tile"], [215, 0, 1, "", "to_device"], [598, 0, 1, "", "to_list"], [600, 0, 1, "", "to_numpy"], [601, 0, 1, "", "to_scalar"], [495, 0, 1, "", "top_k"], [692, 0, 1, "", "trace"], [293, 0, 1, "", "trapz"], [146, 0, 1, "", "tril"], [329, 0, 1, "", "tril_indices"], [330, 0, 1, "", "trilu"], [496, 0, 1, "", "trim_zeros"], [147, 0, 1, "", "triu"], [148, 0, 1, "", "triu_indices"], [294, 0, 1, "", "trunc"], [295, 0, 1, "", "trunc_divide"], [450, 0, 1, "", "truncated_svd"], [451, 0, 1, "", "tt_matrix_to_tensor"], [452, 0, 1, "", "tucker"], [497, 0, 1, "", "unflatten"], [498, 0, 1, "", "unfold"], [750, 0, 1, "", "unique_all"], [499, 0, 1, "", "unique_consecutive"], [751, 0, 1, "", "unique_counts"], [752, 0, 1, "", "unique_inverse"], [753, 0, 1, "", "unique_values"], [514, 0, 1, "", "unravel_index"], [331, 0, 1, "", "unsorted_segment_mean"], [332, 0, 1, "", "unsorted_segment_min"], [333, 0, 1, "", "unsorted_segment_sum"], [714, 0, 1, "", "unstack"], [614, 0, 1, "", "value_is_nan"], [693, 0, 1, "", "vander"], [767, 0, 1, "", "var"], [694, 0, 1, "", "vecdot"], [695, 0, 1, "", "vector_norm"], [696, 0, 1, "", "vector_to_skew_symmetric_matrix"], [334, 0, 1, "", "vorbis_window"], [500, 0, 1, "", "vsplit"], [501, 0, 1, "", "vstack"], [749, 0, 1, "", "where"], [362, 0, 1, "", "xlogy"], [715, 0, 1, "", "zero_pad"], [150, 0, 1, "", "zeros_like"], [363, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[52, 3, 0, "-", "activations"], [103, 3, 0, "-", "array"], [53, 3, 0, "-", "conversions"], [54, 3, 0, "-", "creation"], [55, 3, 0, "-", "data_type"], [56, 3, 0, "-", "device"], [57, 3, 0, "-", "elementwise"], [58, 3, 0, "-", "experimental"], [59, 3, 0, "-", "general"], [60, 3, 0, "-", "gradients"], [61, 3, 0, "-", "image"], [62, 3, 0, "-", "layers"], [63, 3, 0, "-", "linear_algebra"], [64, 3, 0, "-", "losses"], [65, 3, 0, "-", "manipulation"], [66, 3, 0, "-", "norms"], [67, 3, 0, "-", "random"], [68, 3, 0, "-", "searching"], [69, 3, 0, "-", "set"], [70, 3, 0, "-", "sorting"], [71, 3, 0, "-", "statistical"], [72, 3, 0, "-", "utility"], [73, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[52, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "gelu"], [52, 0, 1, "", "hardswish"], [52, 0, 1, "", "leaky_relu"], [52, 0, 1, "", "log_softmax"], [52, 0, 1, "", "mish"], [52, 0, 1, "", "relu"], [52, 0, 1, "", "sigmoid"], [52, 0, 1, "", "softmax"], [52, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[103, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[103, 5, 1, "", "T"], [103, 0, 1, "", "__abs__"], [103, 0, 1, "", "__add__"], [103, 0, 1, "", "__eq__"], [103, 0, 1, "", "__ge__"], [103, 0, 1, "", "__gt__"], [103, 0, 1, "", "__init__"], [103, 0, 1, "", "__le__"], [103, 0, 1, "", "__lt__"], [103, 0, 1, "", "__ne__"], [103, 0, 1, "", "__pow__"], [103, 0, 1, "", "__radd__"], [103, 0, 1, "", "__rrshift__"], [103, 0, 1, "", "__rshift__"], [103, 0, 1, "", "__rsub__"], [103, 0, 1, "", "__sub__"], [103, 0, 1, "", "__truediv__"], [103, 0, 1, "", "__xor__"], [103, 5, 1, "", "backend"], [103, 5, 1, "", "base"], [103, 5, 1, "", "data"], [103, 5, 1, "", "device"], [103, 5, 1, "", "dtype"], [103, 5, 1, "", "dynamic_backend"], [103, 5, 1, "", "imag"], [103, 5, 1, "", "itemsize"], [103, 5, 1, "", "mT"], [103, 5, 1, "", "ndim"], [103, 5, 1, "", "real"], [103, 5, 1, "", "shape"], [103, 5, 1, "", "size"], [103, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[53, 2, 1, "", "_array_to_new_backend"], [53, 2, 1, "", "_to_ivy"], [53, 2, 1, "", "_to_native"], [53, 2, 1, "", "_to_new_backend"], [53, 2, 1, "", "args_to_ivy"], [53, 2, 1, "", "args_to_native"], [53, 2, 1, "", "args_to_new_backend"], [53, 2, 1, "", "to_ivy"], [53, 2, 1, "", "to_native"], [53, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[54, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "asarray"], [54, 0, 1, "", "copy_array"], [54, 0, 1, "", "empty_like"], [54, 0, 1, "", "from_dlpack"], [54, 0, 1, "", "full_like"], [54, 0, 1, "", "linspace"], [54, 0, 1, "", "logspace"], [54, 0, 1, "", "meshgrid"], [54, 0, 1, "", "native_array"], [54, 0, 1, "", "one_hot"], [54, 0, 1, "", "ones_like"], [54, 0, 1, "", "tril"], [54, 0, 1, "", "triu"], [54, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[55, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "astype"], [55, 0, 1, "", "broadcast_arrays"], [55, 0, 1, "", "broadcast_to"], [55, 0, 1, "", "can_cast"], [55, 0, 1, "", "dtype"], [55, 0, 1, "", "finfo"], [55, 0, 1, "", "iinfo"], [55, 0, 1, "", "is_bool_dtype"], [55, 0, 1, "", "is_float_dtype"], [55, 0, 1, "", "is_int_dtype"], [55, 0, 1, "", "is_uint_dtype"], [55, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[56, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "dev"], [56, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[57, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "abs"], [57, 0, 1, "", "acos"], [57, 0, 1, "", "acosh"], [57, 0, 1, "", "add"], [57, 0, 1, "", "angle"], [57, 0, 1, "", "asin"], [57, 0, 1, "", "asinh"], [57, 0, 1, "", "atan"], [57, 0, 1, "", "atan2"], [57, 0, 1, "", "atanh"], [57, 0, 1, "", "bitwise_and"], [57, 0, 1, "", "bitwise_invert"], [57, 0, 1, "", "bitwise_left_shift"], [57, 0, 1, "", "bitwise_or"], [57, 0, 1, "", "bitwise_right_shift"], [57, 0, 1, "", "bitwise_xor"], [57, 0, 1, "", "ceil"], [57, 0, 1, "", "cos"], [57, 0, 1, "", "cosh"], [57, 0, 1, "", "deg2rad"], [57, 0, 1, "", "divide"], [57, 0, 1, "", "equal"], [57, 0, 1, "", "erf"], [57, 0, 1, "", "exp"], [57, 0, 1, "", "exp2"], [57, 0, 1, "", "expm1"], [57, 0, 1, "", "floor"], [57, 0, 1, "", "floor_divide"], [57, 0, 1, "", "fmin"], [57, 0, 1, "", "gcd"], [57, 0, 1, "", "greater"], [57, 0, 1, "", "greater_equal"], [57, 0, 1, "", "isfinite"], [57, 0, 1, "", "isinf"], [57, 0, 1, "", "isnan"], [57, 0, 1, "", "isreal"], [57, 0, 1, "", "lcm"], [57, 0, 1, "", "less"], [57, 0, 1, "", "less_equal"], [57, 0, 1, "", "log"], [57, 0, 1, "", "log10"], [57, 0, 1, "", "log1p"], [57, 0, 1, "", "log2"], [57, 0, 1, "", "logaddexp"], [57, 0, 1, "", "logaddexp2"], [57, 0, 1, "", "logical_and"], [57, 0, 1, "", "logical_not"], [57, 0, 1, "", "logical_or"], [57, 0, 1, "", "logical_xor"], [57, 0, 1, "", "maximum"], [57, 0, 1, "", "minimum"], [57, 0, 1, "", "multiply"], [57, 0, 1, "", "nan_to_num"], [57, 0, 1, "", "negative"], [57, 0, 1, "", "not_equal"], [57, 0, 1, "", "positive"], [57, 0, 1, "", "pow"], [57, 0, 1, "", "rad2deg"], [57, 0, 1, "", "real"], [57, 0, 1, "", "reciprocal"], [57, 0, 1, "", "remainder"], [57, 0, 1, "", "round"], [57, 0, 1, "", "sign"], [57, 0, 1, "", "sin"], [57, 0, 1, "", "sinh"], [57, 0, 1, "", "sqrt"], [57, 0, 1, "", "square"], [57, 0, 1, "", "subtract"], [57, 0, 1, "", "tan"], [57, 0, 1, "", "tanh"], [57, 0, 1, "", "trapz"], [57, 0, 1, "", "trunc"], [57, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[58, 3, 0, "-", "activations"], [58, 3, 0, "-", "conversions"], [58, 3, 0, "-", "creation"], [58, 3, 0, "-", "data_type"], [58, 3, 0, "-", "device"], [58, 3, 0, "-", "elementwise"], [58, 3, 0, "-", "general"], [58, 3, 0, "-", "gradients"], [58, 3, 0, "-", "image"], [58, 3, 0, "-", "layers"], [58, 3, 0, "-", "linear_algebra"], [58, 3, 0, "-", "losses"], [58, 3, 0, "-", "manipulation"], [58, 3, 0, "-", "norms"], [58, 3, 0, "-", "random"], [58, 3, 0, "-", "searching"], [58, 3, 0, "-", "set"], [58, 3, 0, "-", "sorting"], [58, 3, 0, "-", "statistical"], [58, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[58, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "celu"], [58, 0, 1, "", "elu"], [58, 0, 1, "", "hardshrink"], [58, 0, 1, "", "hardsilu"], [58, 0, 1, "", "hardtanh"], [58, 0, 1, "", "logit"], [58, 0, 1, "", "logsigmoid"], [58, 0, 1, "", "prelu"], [58, 0, 1, "", "relu6"], [58, 0, 1, "", "scaled_tanh"], [58, 0, 1, "", "selu"], [58, 0, 1, "", "silu"], [58, 0, 1, "", "softshrink"], [58, 0, 1, "", "tanhshrink"], [58, 0, 1, "", "threshold"], [58, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[58, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[58, 1, 1, "", "_ArrayWithCreationExperimental"], [58, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "blackman_window"], [58, 0, 1, "", "eye_like"], [58, 0, 1, "", "mel_weight_matrix"], [58, 0, 1, "", "trilu"], [58, 0, 1, "", "unsorted_segment_mean"], [58, 0, 1, "", "unsorted_segment_min"], [58, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[58, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[58, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[58, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "allclose"], [58, 0, 1, "", "amax"], [58, 0, 1, "", "amin"], [58, 0, 1, "", "binarizer"], [58, 0, 1, "", "conj"], [58, 0, 1, "", "copysign"], [58, 0, 1, "", "count_nonzero"], [58, 0, 1, "", "diff"], [58, 0, 1, "", "digamma"], [58, 0, 1, "", "erfc"], [58, 0, 1, "", "erfinv"], [58, 0, 1, "", "fix"], [58, 0, 1, "", "float_power"], [58, 0, 1, "", "fmax"], [58, 0, 1, "", "fmod"], [58, 0, 1, "", "frexp"], [58, 0, 1, "", "gradient"], [58, 0, 1, "", "hypot"], [58, 0, 1, "", "isclose"], [58, 0, 1, "", "ldexp"], [58, 0, 1, "", "lerp"], [58, 0, 1, "", "lgamma"], [58, 0, 1, "", "modf"], [58, 0, 1, "", "nansum"], [58, 0, 1, "", "nextafter"], [58, 0, 1, "", "signbit"], [58, 0, 1, "", "sinc"], [58, 0, 1, "", "sparsify_tensor"], [58, 0, 1, "", "xlogy"], [58, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[58, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[58, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[58, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[58, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "adaptive_avg_pool1d"], [58, 0, 1, "", "adaptive_avg_pool2d"], [58, 0, 1, "", "adaptive_max_pool2d"], [58, 0, 1, "", "adaptive_max_pool3d"], [58, 0, 1, "", "avg_pool1d"], [58, 0, 1, "", "avg_pool2d"], [58, 0, 1, "", "avg_pool3d"], [58, 0, 1, "", "dct"], [58, 0, 1, "", "dft"], [58, 0, 1, "", "embedding"], [58, 0, 1, "", "fft"], [58, 0, 1, "", "fft2"], [58, 0, 1, "", "idct"], [58, 0, 1, "", "ifft"], [58, 0, 1, "", "ifftn"], [58, 0, 1, "", "interpolate"], [58, 0, 1, "", "max_pool1d"], [58, 0, 1, "", "max_pool2d"], [58, 0, 1, "", "max_pool3d"], [58, 0, 1, "", "max_unpool1d"], [58, 0, 1, "", "reduce_window"], [58, 0, 1, "", "rfft"], [58, 0, 1, "", "rfftn"], [58, 0, 1, "", "sliding_window"], [58, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[58, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "adjoint"], [58, 0, 1, "", "batched_outer"], [58, 0, 1, "", "cond"], [58, 0, 1, "", "diagflat"], [58, 0, 1, "", "dot"], [58, 0, 1, "", "eig"], [58, 0, 1, "", "eigh_tridiagonal"], [58, 0, 1, "", "eigvals"], [58, 0, 1, "", "general_inner_product"], [58, 0, 1, "", "higher_order_moment"], [58, 0, 1, "", "initialize_tucker"], [58, 0, 1, "", "kron"], [58, 0, 1, "", "make_svd_non_negative"], [58, 0, 1, "", "matrix_exp"], [58, 0, 1, "", "mode_dot"], [58, 0, 1, "", "multi_dot"], [58, 0, 1, "", "multi_mode_dot"], [58, 0, 1, "", "partial_tucker"], [58, 0, 1, "", "svd_flip"], [58, 0, 1, "", "tensor_train"], [58, 0, 1, "", "truncated_svd"], [58, 0, 1, "", "tt_matrix_to_tensor"], [58, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[58, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "hinge_embedding_loss"], [58, 0, 1, "", "huber_loss"], [58, 0, 1, "", "kl_div"], [58, 0, 1, "", "l1_loss"], [58, 0, 1, "", "log_poisson_loss"], [58, 0, 1, "", "poisson_nll_loss"], [58, 0, 1, "", "smooth_l1_loss"], [58, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[58, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "as_strided"], [58, 0, 1, "", "associative_scan"], [58, 0, 1, "", "atleast_1d"], [58, 0, 1, "", "atleast_2d"], [58, 0, 1, "", "atleast_3d"], [58, 0, 1, "", "column_stack"], [58, 0, 1, "", "concat_from_sequence"], [58, 0, 1, "", "dsplit"], [58, 0, 1, "", "dstack"], [58, 0, 1, "", "expand"], [58, 0, 1, "", "fill_diagonal"], [58, 0, 1, "", "flatten"], [58, 0, 1, "", "fliplr"], [58, 0, 1, "", "flipud"], [58, 0, 1, "", "fold"], [58, 0, 1, "", "heaviside"], [58, 0, 1, "", "hsplit"], [58, 0, 1, "", "hstack"], [58, 0, 1, "", "i0"], [58, 0, 1, "", "matricize"], [58, 0, 1, "", "moveaxis"], [58, 0, 1, "", "pad"], [58, 0, 1, "", "partial_fold"], [58, 0, 1, "", "partial_tensor_to_vec"], [58, 0, 1, "", "partial_unfold"], [58, 0, 1, "", "partial_vec_to_tensor"], [58, 0, 1, "", "put_along_axis"], [58, 0, 1, "", "rot90"], [58, 0, 1, "", "soft_thresholding"], [58, 0, 1, "", "take"], [58, 0, 1, "", "take_along_axis"], [58, 0, 1, "", "top_k"], [58, 0, 1, "", "trim_zeros"], [58, 0, 1, "", "unflatten"], [58, 0, 1, "", "unfold"], [58, 0, 1, "", "unique_consecutive"], [58, 0, 1, "", "vsplit"], [58, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[58, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "batch_norm"], [58, 0, 1, "", "group_norm"], [58, 0, 1, "", "instance_norm"], [58, 0, 1, "", "l1_normalize"], [58, 0, 1, "", "l2_normalize"], [58, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[58, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "bernoulli"], [58, 0, 1, "", "beta"], [58, 0, 1, "", "dirichlet"], [58, 0, 1, "", "gamma"], [58, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[58, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[58, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[58, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[58, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[58, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "bincount"], [58, 0, 1, "", "corrcoef"], [58, 0, 1, "", "cov"], [58, 0, 1, "", "cummax"], [58, 0, 1, "", "cummin"], [58, 0, 1, "", "histogram"], [58, 0, 1, "", "igamma"], [58, 0, 1, "", "median"], [58, 0, 1, "", "nanmean"], [58, 0, 1, "", "nanmedian"], [58, 0, 1, "", "nanmin"], [58, 0, 1, "", "nanprod"], [58, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[58, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[59, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "all_equal"], [59, 0, 1, "", "array_equal"], [59, 0, 1, "", "assert_supports_inplace"], [59, 0, 1, "", "clip_matrix_norm"], [59, 0, 1, "", "clip_vector_norm"], [59, 0, 1, "", "default"], [59, 0, 1, "", "einops_rearrange"], [59, 0, 1, "", "einops_reduce"], [59, 0, 1, "", "einops_repeat"], [59, 0, 1, "", "exists"], [59, 0, 1, "", "fourier_encode"], [59, 0, 1, "", "gather"], [59, 0, 1, "", "gather_nd"], [59, 0, 1, "", "get_num_dims"], [59, 0, 1, "", "has_nans"], [59, 0, 1, "", "inplace_decrement"], [59, 0, 1, "", "inplace_increment"], [59, 0, 1, "", "inplace_update"], [59, 0, 1, "", "is_array"], [59, 0, 1, "", "is_ivy_array"], [59, 0, 1, "", "is_ivy_container"], [59, 0, 1, "", "is_native_array"], [59, 0, 1, "", "isin"], [59, 0, 1, "", "scatter_flat"], [59, 0, 1, "", "scatter_nd"], [59, 0, 1, "", "stable_divide"], [59, 0, 1, "", "stable_pow"], [59, 0, 1, "", "supports_inplace_updates"], [59, 0, 1, "", "to_file"], [59, 0, 1, "", "to_list"], [59, 0, 1, "", "to_numpy"], [59, 0, 1, "", "to_scalar"], [59, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[60, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[60, 4, 1, "", "_abc_impl"], [60, 0, 1, "", "adam_step"], [60, 0, 1, "", "adam_update"], [60, 0, 1, "", "gradient_descent_update"], [60, 0, 1, "", "lamb_update"], [60, 0, 1, "", "lars_update"], [60, 0, 1, "", "optimizer_update"], [60, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[61, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[61, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[62, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "conv1d"], [62, 0, 1, "", "conv1d_transpose"], [62, 0, 1, "", "conv2d"], [62, 0, 1, "", "conv2d_transpose"], [62, 0, 1, "", "conv3d"], [62, 0, 1, "", "conv3d_transpose"], [62, 0, 1, "", "depthwise_conv2d"], [62, 0, 1, "", "dropout"], [62, 0, 1, "", "dropout1d"], [62, 0, 1, "", "dropout2d"], [62, 0, 1, "", "dropout3d"], [62, 0, 1, "", "linear"], [62, 0, 1, "", "lstm_update"], [62, 0, 1, "", "multi_head_attention"], [62, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[63, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "cholesky"], [63, 0, 1, "", "cross"], [63, 0, 1, "", "det"], [63, 0, 1, "", "diag"], [63, 0, 1, "", "diagonal"], [63, 0, 1, "", "eig"], [63, 0, 1, "", "eigh"], [63, 0, 1, "", "eigvalsh"], [63, 0, 1, "", "inner"], [63, 0, 1, "", "inv"], [63, 0, 1, "", "matmul"], [63, 0, 1, "", "matrix_norm"], [63, 0, 1, "", "matrix_power"], [63, 0, 1, "", "matrix_rank"], [63, 0, 1, "", "matrix_transpose"], [63, 0, 1, "", "outer"], [63, 0, 1, "", "pinv"], [63, 0, 1, "", "qr"], [63, 0, 1, "", "slogdet"], [63, 0, 1, "", "solve"], [63, 0, 1, "", "svd"], [63, 0, 1, "", "svdvals"], [63, 0, 1, "", "tensordot"], [63, 0, 1, "", "tensorsolve"], [63, 0, 1, "", "trace"], [63, 0, 1, "", "vander"], [63, 0, 1, "", "vecdot"], [63, 0, 1, "", "vector_norm"], [63, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[64, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "binary_cross_entropy"], [64, 0, 1, "", "cross_entropy"], [64, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[65, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "clip"], [65, 0, 1, "", "concat"], [65, 0, 1, "", "constant_pad"], [65, 0, 1, "", "expand_dims"], [65, 0, 1, "", "flip"], [65, 0, 1, "", "permute_dims"], [65, 0, 1, "", "repeat"], [65, 0, 1, "", "reshape"], [65, 0, 1, "", "roll"], [65, 0, 1, "", "split"], [65, 0, 1, "", "squeeze"], [65, 0, 1, "", "stack"], [65, 0, 1, "", "swapaxes"], [65, 0, 1, "", "tile"], [65, 0, 1, "", "unstack"], [65, 0, 1, "", "view"], [65, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[66, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[67, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "multinomial"], [67, 0, 1, "", "randint"], [67, 0, 1, "", "random_normal"], [67, 0, 1, "", "random_uniform"], [67, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[68, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "argmax"], [68, 0, 1, "", "argmin"], [68, 0, 1, "", "argwhere"], [68, 0, 1, "", "nonzero"], [68, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[69, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "unique_all"], [69, 0, 1, "", "unique_counts"], [69, 0, 1, "", "unique_inverse"], [69, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[70, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "argsort"], [70, 0, 1, "", "msort"], [70, 0, 1, "", "searchsorted"], [70, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[71, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "cumprod"], [71, 0, 1, "", "cumsum"], [71, 0, 1, "", "einsum"], [71, 0, 1, "", "max"], [71, 0, 1, "", "mean"], [71, 0, 1, "", "min"], [71, 0, 1, "", "prod"], [71, 0, 1, "", "std"], [71, 0, 1, "", "sum"], [71, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[72, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "all"], [72, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[73, 2, 1, "", "_wrap_function"], [73, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[74, 3, 0, "-", "activations"], [75, 3, 0, "-", "base"], [104, 3, 0, "-", "container"], [76, 3, 0, "-", "conversions"], [77, 3, 0, "-", "creation"], [78, 3, 0, "-", "data_type"], [79, 3, 0, "-", "device"], [80, 3, 0, "-", "elementwise"], [81, 3, 0, "-", "experimental"], [82, 3, 0, "-", "general"], [83, 3, 0, "-", "gradients"], [84, 3, 0, "-", "image"], [85, 3, 0, "-", "layers"], [86, 3, 0, "-", "linear_algebra"], [87, 3, 0, "-", "losses"], [88, 3, 0, "-", "manipulation"], [89, 3, 0, "-", "norms"], [90, 3, 0, "-", "random"], [91, 3, 0, "-", "searching"], [92, 3, 0, "-", "set"], [93, 3, 0, "-", "sorting"], [94, 3, 0, "-", "statistical"], [95, 3, 0, "-", "utility"], [96, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[74, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_static_gelu"], [74, 0, 1, "", "_static_hardswish"], [74, 0, 1, "", "_static_leaky_relu"], [74, 0, 1, "", "_static_log_softmax"], [74, 0, 1, "", "_static_mish"], [74, 0, 1, "", "_static_relu"], [74, 0, 1, "", "_static_sigmoid"], [74, 0, 1, "", "_static_softmax"], [74, 0, 1, "", "_static_softplus"], [74, 0, 1, "", "gelu"], [74, 0, 1, "", "hardswish"], [74, 0, 1, "", "leaky_relu"], [74, 0, 1, "", "log_softmax"], [74, 0, 1, "", "mish"], [74, 0, 1, "", "relu"], [74, 0, 1, "", "sigmoid"], [74, 0, 1, "", "softmax"], [74, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[75, 1, 1, "", "ContainerBase"], [75, 2, 1, "", "_is_jsonable"], [75, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[75, 0, 1, "", "__getitem__"], [75, 0, 1, "", "__init__"], [75, 0, 1, "", "__setitem__"], [75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [75, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [75, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [75, 0, 1, "", "_cont_concat_unify"], [75, 0, 1, "", "_cont_get_dev"], [75, 0, 1, "", "_cont_get_dtype"], [75, 0, 1, "", "_cont_get_shape"], [75, 0, 1, "", "_cont_get_shapes"], [75, 5, 1, "", "_cont_ivy"], [75, 0, 1, "", "_cont_mean_unify"], [75, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [75, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [75, 0, 1, "", "_cont_slice_keys"], [75, 0, 1, "", "_cont_sum_unify"], [75, 0, 1, "", "_get_queue_item"], [75, 0, 1, "", "cont_all_false"], [75, 0, 1, "", "cont_all_key_chains"], [75, 0, 1, "", "cont_all_true"], [75, 0, 1, "", "cont_as_bools"], [75, 0, 1, "", "cont_assert_contains_sub_container"], [75, 0, 1, "", "cont_assert_contains_sub_structure"], [75, 0, 1, "", "cont_assert_identical"], [75, 0, 1, "", "cont_assert_identical_structure"], [75, 0, 1, "", "cont_at_key_chain"], [75, 0, 1, "", "cont_at_key_chains"], [75, 0, 1, "", "cont_at_keys"], [75, 0, 1, "", "cont_combine"], [75, 0, 1, "", "cont_common_key_chains"], [75, 5, 1, "", "cont_config"], [75, 0, 1, "", "cont_contains_sub_container"], [75, 0, 1, "", "cont_contains_sub_structure"], [75, 0, 1, "", "cont_copy"], [75, 0, 1, "", "cont_create_if_absent"], [75, 0, 1, "", "cont_cutoff_at_depth"], [75, 0, 1, "", "cont_cutoff_at_height"], [75, 0, 1, "", "cont_deep_copy"], [75, 5, 1, "", "cont_dev"], [75, 5, 1, "", "cont_dev_str"], [75, 0, 1, "", "cont_diff"], [75, 5, 1, "", "cont_dtype"], [75, 0, 1, "", "cont_duplicate_array_keychains"], [75, 0, 1, "", "cont_find_sub_container"], [75, 0, 1, "", "cont_find_sub_structure"], [75, 0, 1, "", "cont_flatten_key_chain"], [75, 0, 1, "", "cont_flatten_key_chains"], [75, 0, 1, "", "cont_format_key_chains"], [75, 0, 1, "", "cont_from_disk_as_hdf5"], [75, 0, 1, "", "cont_from_disk_as_json"], [75, 0, 1, "", "cont_from_disk_as_pickled"], [75, 0, 1, "", "cont_from_flat_list"], [75, 0, 1, "", "cont_handle_inplace"], [75, 0, 1, "", "cont_has_key"], [75, 0, 1, "", "cont_has_key_chain"], [75, 0, 1, "", "cont_identical"], [75, 0, 1, "", "cont_identical_array_shapes"], [75, 0, 1, "", "cont_identical_configs"], [75, 0, 1, "", "cont_identical_structure"], [75, 0, 1, "", "cont_if_exists"], [75, 0, 1, "", "cont_inplace_update"], [75, 5, 1, "", "cont_ivy"], [75, 0, 1, "", "cont_key_chains_containing"], [75, 0, 1, "", "cont_list_join"], [75, 0, 1, "", "cont_list_stack"], [75, 0, 1, "", "cont_load"], [75, 0, 1, "", "cont_map"], [75, 0, 1, "", "cont_map_sub_conts"], [75, 5, 1, "", "cont_max_depth"], [75, 0, 1, "", "cont_multi_map"], [75, 0, 1, "", "cont_multi_map_in_function"], [75, 0, 1, "", "cont_num_arrays"], [75, 0, 1, "", "cont_overwrite_at_key_chain"], [75, 0, 1, "", "cont_overwrite_at_key_chains"], [75, 0, 1, "", "cont_prune_empty"], [75, 0, 1, "", "cont_prune_key_chain"], [75, 0, 1, "", "cont_prune_key_chains"], [75, 0, 1, "", "cont_prune_key_from_key_chains"], [75, 0, 1, "", "cont_prune_keys"], [75, 0, 1, "", "cont_prune_keys_from_key_chains"], [75, 0, 1, "", "cont_reduce"], [75, 0, 1, "", "cont_remove_key_length_limit"], [75, 0, 1, "", "cont_remove_print_limit"], [75, 0, 1, "", "cont_reshape_like"], [75, 0, 1, "", "cont_restructure"], [75, 0, 1, "", "cont_restructure_key_chains"], [75, 0, 1, "", "cont_save"], [75, 0, 1, "", "cont_set_at_key_chain"], [75, 0, 1, "", "cont_set_at_key_chains"], [75, 0, 1, "", "cont_set_at_keys"], [75, 5, 1, "", "cont_shape"], [75, 5, 1, "", "cont_shapes"], [75, 0, 1, "", "cont_show"], [75, 0, 1, "", "cont_show_sub_container"], [75, 0, 1, "", "cont_size_ordered_arrays"], [75, 0, 1, "", "cont_slice_keys"], [75, 0, 1, "", "cont_slice_via_key"], [75, 0, 1, "", "cont_sort_by_key"], [75, 0, 1, "", "cont_structural_diff"], [75, 0, 1, "", "cont_to_dict"], [75, 0, 1, "", "cont_to_disk_as_hdf5"], [75, 0, 1, "", "cont_to_disk_as_json"], [75, 0, 1, "", "cont_to_disk_as_pickled"], [75, 0, 1, "", "cont_to_flat_list"], [75, 0, 1, "", "cont_to_iterator"], [75, 0, 1, "", "cont_to_iterator_keys"], [75, 0, 1, "", "cont_to_iterator_values"], [75, 0, 1, "", "cont_to_jsonable"], [75, 0, 1, "", "cont_to_nested_list"], [75, 0, 1, "", "cont_to_raw"], [75, 0, 1, "", "cont_trim_key"], [75, 0, 1, "", "cont_try_kc"], [75, 0, 1, "", "cont_unify"], [75, 0, 1, "", "cont_unstack_conts"], [75, 0, 1, "", "cont_update_config"], [75, 0, 1, "", "cont_with_default_key_color"], [75, 0, 1, "", "cont_with_entries_as_lists"], [75, 0, 1, "", "cont_with_ivy_backend"], [75, 0, 1, "", "cont_with_key_length_limit"], [75, 0, 1, "", "cont_with_print_indent"], [75, 0, 1, "", "cont_with_print_limit"], [75, 0, 1, "", "cont_with_print_line_spacing"], [75, 5, 1, "", "dynamic_backend"], [75, 0, 1, "", "h5_file_size"], [75, 0, 1, "", "shuffle_h5_file"], [75, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[104, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[104, 0, 1, "", "__abs__"], [104, 0, 1, "", "__add__"], [104, 0, 1, "", "__eq__"], [104, 0, 1, "", "__ge__"], [104, 0, 1, "", "__gt__"], [104, 0, 1, "", "__init__"], [104, 0, 1, "", "__le__"], [104, 0, 1, "", "__lt__"], [104, 0, 1, "", "__ne__"], [104, 0, 1, "", "__pow__"], [104, 0, 1, "", "__radd__"], [104, 0, 1, "", "__rrshift__"], [104, 0, 1, "", "__rshift__"], [104, 0, 1, "", "__rsub__"], [104, 0, 1, "", "__sub__"], [104, 0, 1, "", "__truediv__"], [104, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[76, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_to_ivy"], [76, 0, 1, "", "_static_to_native"], [76, 0, 1, "", "to_ivy"], [76, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[77, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_arange"], [77, 0, 1, "", "_static_asarray"], [77, 0, 1, "", "_static_copy_array"], [77, 0, 1, "", "_static_empty"], [77, 0, 1, "", "_static_empty_like"], [77, 0, 1, "", "_static_eye"], [77, 0, 1, "", "_static_from_dlpack"], [77, 0, 1, "", "_static_full"], [77, 0, 1, "", "_static_full_like"], [77, 0, 1, "", "_static_linspace"], [77, 0, 1, "", "_static_logspace"], [77, 0, 1, "", "_static_meshgrid"], [77, 0, 1, "", "_static_native_array"], [77, 0, 1, "", "_static_one_hot"], [77, 0, 1, "", "_static_ones"], [77, 0, 1, "", "_static_ones_like"], [77, 0, 1, "", "_static_tril"], [77, 0, 1, "", "_static_triu"], [77, 0, 1, "", "_static_zeros"], [77, 0, 1, "", "_static_zeros_like"], [77, 0, 1, "", "asarray"], [77, 0, 1, "", "copy_array"], [77, 0, 1, "", "empty_like"], [77, 0, 1, "", "from_dlpack"], [77, 0, 1, "", "frombuffer"], [77, 0, 1, "", "full_like"], [77, 0, 1, "", "linspace"], [77, 0, 1, "", "logspace"], [77, 0, 1, "", "meshgrid"], [77, 0, 1, "", "native_array"], [77, 0, 1, "", "one_hot"], [77, 0, 1, "", "ones_like"], [77, 0, 1, "", "static_frombuffer"], [77, 0, 1, "", "static_triu_indices"], [77, 0, 1, "", "tril"], [77, 0, 1, "", "triu"], [77, 0, 1, "", "triu_indices"], [77, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[78, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_astype"], [78, 0, 1, "", "_static_broadcast_arrays"], [78, 0, 1, "", "_static_broadcast_to"], [78, 0, 1, "", "_static_can_cast"], [78, 0, 1, "", "_static_default_complex_dtype"], [78, 0, 1, "", "_static_default_float_dtype"], [78, 0, 1, "", "_static_dtype"], [78, 0, 1, "", "_static_finfo"], [78, 0, 1, "", "_static_function_supported_dtypes"], [78, 0, 1, "", "_static_function_unsupported_dtypes"], [78, 0, 1, "", "_static_iinfo"], [78, 0, 1, "", "_static_is_bool_dtype"], [78, 0, 1, "", "_static_is_complex_dtype"], [78, 0, 1, "", "_static_is_float_dtype"], [78, 0, 1, "", "_static_is_int_dtype"], [78, 0, 1, "", "_static_is_uint_dtype"], [78, 0, 1, "", "_static_result_type"], [78, 0, 1, "", "astype"], [78, 0, 1, "", "broadcast_arrays"], [78, 0, 1, "", "broadcast_to"], [78, 0, 1, "", "can_cast"], [78, 0, 1, "", "dtype"], [78, 0, 1, "", "finfo"], [78, 0, 1, "", "iinfo"], [78, 0, 1, "", "is_bool_dtype"], [78, 0, 1, "", "is_complex_dtype"], [78, 0, 1, "", "is_float_dtype"], [78, 0, 1, "", "is_int_dtype"], [78, 0, 1, "", "is_uint_dtype"], [78, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[79, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_dev"], [79, 0, 1, "", "_static_to_device"], [79, 0, 1, "", "dev"], [79, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[80, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_abs"], [80, 0, 1, "", "_static_acos"], [80, 0, 1, "", "_static_acosh"], [80, 0, 1, "", "_static_add"], [80, 0, 1, "", "_static_asin"], [80, 0, 1, "", "_static_asinh"], [80, 0, 1, "", "_static_atan"], [80, 0, 1, "", "_static_atan2"], [80, 0, 1, "", "_static_atanh"], [80, 0, 1, "", "_static_bitwise_and"], [80, 0, 1, "", "_static_bitwise_invert"], [80, 0, 1, "", "_static_bitwise_left_shift"], [80, 0, 1, "", "_static_bitwise_or"], [80, 0, 1, "", "_static_bitwise_right_shift"], [80, 0, 1, "", "_static_bitwise_xor"], [80, 0, 1, "", "_static_ceil"], [80, 0, 1, "", "_static_cos"], [80, 0, 1, "", "_static_cosh"], [80, 0, 1, "", "_static_deg2rad"], [80, 0, 1, "", "_static_divide"], [80, 0, 1, "", "_static_equal"], [80, 0, 1, "", "_static_erf"], [80, 0, 1, "", "_static_exp"], [80, 0, 1, "", "_static_expm1"], [80, 0, 1, "", "_static_floor"], [80, 0, 1, "", "_static_floor_divide"], [80, 0, 1, "", "_static_greater"], [80, 0, 1, "", "_static_greater_equal"], [80, 0, 1, "", "_static_isfinite"], [80, 0, 1, "", "_static_isinf"], [80, 0, 1, "", "_static_isnan"], [80, 0, 1, "", "_static_isreal"], [80, 0, 1, "", "_static_lcm"], [80, 0, 1, "", "_static_less"], [80, 0, 1, "", "_static_less_equal"], [80, 0, 1, "", "_static_log"], [80, 0, 1, "", "_static_log10"], [80, 0, 1, "", "_static_log1p"], [80, 0, 1, "", "_static_log2"], [80, 0, 1, "", "_static_logaddexp"], [80, 0, 1, "", "_static_logical_and"], [80, 0, 1, "", "_static_logical_not"], [80, 0, 1, "", "_static_logical_or"], [80, 0, 1, "", "_static_logical_xor"], [80, 0, 1, "", "_static_maximum"], [80, 0, 1, "", "_static_minimum"], [80, 0, 1, "", "_static_multiply"], [80, 0, 1, "", "_static_negative"], [80, 0, 1, "", "_static_not_equal"], [80, 0, 1, "", "_static_positive"], [80, 0, 1, "", "_static_pow"], [80, 0, 1, "", "_static_rad2deg"], [80, 0, 1, "", "_static_reciprocal"], [80, 0, 1, "", "_static_remainder"], [80, 0, 1, "", "_static_round"], [80, 0, 1, "", "_static_sign"], [80, 0, 1, "", "_static_sin"], [80, 0, 1, "", "_static_sinh"], [80, 0, 1, "", "_static_sqrt"], [80, 0, 1, "", "_static_square"], [80, 0, 1, "", "_static_subtract"], [80, 0, 1, "", "_static_tan"], [80, 0, 1, "", "_static_tanh"], [80, 0, 1, "", "_static_trapz"], [80, 0, 1, "", "_static_trunc"], [80, 0, 1, "", "_static_trunc_divide"], [80, 0, 1, "", "abs"], [80, 0, 1, "", "acos"], [80, 0, 1, "", "acosh"], [80, 0, 1, "", "add"], [80, 0, 1, "", "angle"], [80, 0, 1, "", "asin"], [80, 0, 1, "", "asinh"], [80, 0, 1, "", "atan"], [80, 0, 1, "", "atan2"], [80, 0, 1, "", "atanh"], [80, 0, 1, "", "bitwise_and"], [80, 0, 1, "", "bitwise_invert"], [80, 0, 1, "", "bitwise_left_shift"], [80, 0, 1, "", "bitwise_or"], [80, 0, 1, "", "bitwise_right_shift"], [80, 0, 1, "", "bitwise_xor"], [80, 0, 1, "", "ceil"], [80, 0, 1, "", "cos"], [80, 0, 1, "", "cosh"], [80, 0, 1, "", "deg2rad"], [80, 0, 1, "", "divide"], [80, 0, 1, "", "equal"], [80, 0, 1, "", "erf"], [80, 0, 1, "", "exp"], [80, 0, 1, "", "exp2"], [80, 0, 1, "", "expm1"], [80, 0, 1, "", "floor"], [80, 0, 1, "", "floor_divide"], [80, 0, 1, "", "fmin"], [80, 0, 1, "", "gcd"], [80, 0, 1, "", "greater"], [80, 0, 1, "", "greater_equal"], [80, 0, 1, "", "imag"], [80, 0, 1, "", "isfinite"], [80, 0, 1, "", "isinf"], [80, 0, 1, "", "isnan"], [80, 0, 1, "", "isreal"], [80, 0, 1, "", "lcm"], [80, 0, 1, "", "less"], [80, 0, 1, "", "less_equal"], [80, 0, 1, "", "log"], [80, 0, 1, "", "log10"], [80, 0, 1, "", "log1p"], [80, 0, 1, "", "log2"], [80, 0, 1, "", "logaddexp"], [80, 0, 1, "", "logaddexp2"], [80, 0, 1, "", "logical_and"], [80, 0, 1, "", "logical_not"], [80, 0, 1, "", "logical_or"], [80, 0, 1, "", "logical_xor"], [80, 0, 1, "", "maximum"], [80, 0, 1, "", "minimum"], [80, 0, 1, "", "multiply"], [80, 0, 1, "", "nan_to_num"], [80, 0, 1, "", "negative"], [80, 0, 1, "", "not_equal"], [80, 0, 1, "", "positive"], [80, 0, 1, "", "pow"], [80, 0, 1, "", "rad2deg"], [80, 0, 1, "", "real"], [80, 0, 1, "", "reciprocal"], [80, 0, 1, "", "remainder"], [80, 0, 1, "", "round"], [80, 0, 1, "", "sign"], [80, 0, 1, "", "sin"], [80, 0, 1, "", "sinh"], [80, 0, 1, "", "sqrt"], [80, 0, 1, "", "square"], [80, 0, 1, "", "static_angle"], [80, 0, 1, "", "static_exp2"], [80, 0, 1, "", "static_fmin"], [80, 0, 1, "", "static_gcd"], [80, 0, 1, "", "static_imag"], [80, 0, 1, "", "static_logaddexp2"], [80, 0, 1, "", "static_nan_to_num"], [80, 0, 1, "", "static_real"], [80, 0, 1, "", "subtract"], [80, 0, 1, "", "tan"], [80, 0, 1, "", "tanh"], [80, 0, 1, "", "trapz"], [80, 0, 1, "", "trunc"], [80, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[81, 3, 0, "-", "activations"], [81, 3, 0, "-", "conversions"], [81, 3, 0, "-", "creation"], [81, 3, 0, "-", "data_type"], [81, 3, 0, "-", "device"], [81, 3, 0, "-", "elementwise"], [81, 3, 0, "-", "general"], [81, 3, 0, "-", "gradients"], [81, 3, 0, "-", "image"], [81, 3, 0, "-", "layers"], [81, 3, 0, "-", "linear_algebra"], [81, 3, 0, "-", "losses"], [81, 3, 0, "-", "manipulation"], [81, 3, 0, "-", "norms"], [81, 3, 0, "-", "random"], [81, 3, 0, "-", "searching"], [81, 3, 0, "-", "set"], [81, 3, 0, "-", "sorting"], [81, 3, 0, "-", "statistical"], [81, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[81, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_celu"], [81, 0, 1, "", "_static_elu"], [81, 0, 1, "", "_static_hardshrink"], [81, 0, 1, "", "_static_hardsilu"], [81, 0, 1, "", "_static_hardtanh"], [81, 0, 1, "", "_static_scaled_tanh"], [81, 0, 1, "", "_static_silu"], [81, 0, 1, "", "_static_softshrink"], [81, 0, 1, "", "_static_tanhshrink"], [81, 0, 1, "", "_static_threshold"], [81, 0, 1, "", "celu"], [81, 0, 1, "", "elu"], [81, 0, 1, "", "hardshrink"], [81, 0, 1, "", "hardsilu"], [81, 0, 1, "", "hardtanh"], [81, 0, 1, "", "logit"], [81, 0, 1, "", "logsigmoid"], [81, 0, 1, "", "prelu"], [81, 0, 1, "", "relu6"], [81, 0, 1, "", "scaled_tanh"], [81, 0, 1, "", "selu"], [81, 0, 1, "", "silu"], [81, 0, 1, "", "softshrink"], [81, 0, 1, "", "static_logit"], [81, 0, 1, "", "static_logsigmoid"], [81, 0, 1, "", "static_prelu"], [81, 0, 1, "", "static_relu6"], [81, 0, 1, "", "static_selu"], [81, 0, 1, "", "static_thresholded_relu"], [81, 0, 1, "", "tanhshrink"], [81, 0, 1, "", "threshold"], [81, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[81, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[81, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_trilu"], [81, 0, 1, "", "blackman_window"], [81, 0, 1, "", "eye_like"], [81, 0, 1, "", "hamming_window"], [81, 0, 1, "", "hann_window"], [81, 0, 1, "", "kaiser_bessel_derived_window"], [81, 0, 1, "", "kaiser_window"], [81, 0, 1, "", "mel_weight_matrix"], [81, 0, 1, "", "polyval"], [81, 0, 1, "", "static_blackman_window"], [81, 0, 1, "", "static_eye_like"], [81, 0, 1, "", "static_hamming_window"], [81, 0, 1, "", "static_hann_window"], [81, 0, 1, "", "static_kaiser_bessel_derived_window"], [81, 0, 1, "", "static_kaiser_window"], [81, 0, 1, "", "static_mel_weight_matrix"], [81, 0, 1, "", "static_polyval"], [81, 0, 1, "", "static_tril_indices"], [81, 0, 1, "", "static_unsorted_segment_mean"], [81, 0, 1, "", "static_unsorted_segment_min"], [81, 0, 1, "", "static_unsorted_segment_sum"], [81, 0, 1, "", "static_vorbis_window"], [81, 0, 1, "", "tril_indices"], [81, 0, 1, "", "trilu"], [81, 0, 1, "", "unsorted_segment_mean"], [81, 0, 1, "", "unsorted_segment_min"], [81, 0, 1, "", "unsorted_segment_sum"], [81, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[81, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[81, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[81, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "allclose"], [81, 0, 1, "", "amax"], [81, 0, 1, "", "amin"], [81, 0, 1, "", "binarizer"], [81, 0, 1, "", "conj"], [81, 0, 1, "", "copysign"], [81, 0, 1, "", "count_nonzero"], [81, 0, 1, "", "diff"], [81, 0, 1, "", "digamma"], [81, 0, 1, "", "erfc"], [81, 0, 1, "", "erfinv"], [81, 0, 1, "", "fix"], [81, 0, 1, "", "float_power"], [81, 0, 1, "", "fmax"], [81, 0, 1, "", "fmod"], [81, 0, 1, "", "frexp"], [81, 0, 1, "", "gradient"], [81, 0, 1, "", "hypot"], [81, 0, 1, "", "isclose"], [81, 0, 1, "", "ldexp"], [81, 0, 1, "", "lerp"], [81, 0, 1, "", "modf"], [81, 0, 1, "", "nansum"], [81, 0, 1, "", "nextafter"], [81, 0, 1, "", "signbit"], [81, 0, 1, "", "sinc"], [81, 0, 1, "", "sparsify_tensor"], [81, 0, 1, "", "static_allclose"], [81, 0, 1, "", "static_amax"], [81, 0, 1, "", "static_amin"], [81, 0, 1, "", "static_binarizer"], [81, 0, 1, "", "static_conj"], [81, 0, 1, "", "static_copysign"], [81, 0, 1, "", "static_count_nonzero"], [81, 0, 1, "", "static_diff"], [81, 0, 1, "", "static_digamma"], [81, 0, 1, "", "static_erfc"], [81, 0, 1, "", "static_erfinv"], [81, 0, 1, "", "static_fix"], [81, 0, 1, "", "static_float_power"], [81, 0, 1, "", "static_fmax"], [81, 0, 1, "", "static_fmod"], [81, 0, 1, "", "static_frexp"], [81, 0, 1, "", "static_gradient"], [81, 0, 1, "", "static_hypot"], [81, 0, 1, "", "static_isclose"], [81, 0, 1, "", "static_ldexp"], [81, 0, 1, "", "static_lerp"], [81, 0, 1, "", "static_modf"], [81, 0, 1, "", "static_nansum"], [81, 0, 1, "", "static_nextafter"], [81, 0, 1, "", "static_signbit"], [81, 0, 1, "", "static_sinc"], [81, 0, 1, "", "static_sparsify_tensor"], [81, 0, 1, "", "static_xlogy"], [81, 0, 1, "", "static_zeta"], [81, 0, 1, "", "xlogy"], [81, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[81, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_reduce"], [81, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[81, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[81, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[81, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_fft"], [81, 0, 1, "", "_static_sliding_window"], [81, 0, 1, "", "adaptive_avg_pool1d"], [81, 0, 1, "", "adaptive_avg_pool2d"], [81, 0, 1, "", "adaptive_max_pool2d"], [81, 0, 1, "", "adaptive_max_pool3d"], [81, 0, 1, "", "avg_pool1d"], [81, 0, 1, "", "avg_pool2d"], [81, 0, 1, "", "avg_pool3d"], [81, 0, 1, "", "dct"], [81, 0, 1, "", "dft"], [81, 0, 1, "", "embedding"], [81, 0, 1, "", "fft"], [81, 0, 1, "", "idct"], [81, 0, 1, "", "ifft"], [81, 0, 1, "", "ifftn"], [81, 0, 1, "", "interpolate"], [81, 0, 1, "", "max_pool1d"], [81, 0, 1, "", "max_pool2d"], [81, 0, 1, "", "max_pool3d"], [81, 0, 1, "", "max_unpool1d"], [81, 0, 1, "", "rfft"], [81, 0, 1, "", "rfftn"], [81, 0, 1, "", "sliding_window"], [81, 0, 1, "", "static_adaptive_avg_pool1d"], [81, 0, 1, "", "static_adaptive_avg_pool2d"], [81, 0, 1, "", "static_adaptive_max_pool2d"], [81, 0, 1, "", "static_adaptive_max_pool3d"], [81, 0, 1, "", "static_avg_pool1d"], [81, 0, 1, "", "static_avg_pool2d"], [81, 0, 1, "", "static_avg_pool3d"], [81, 0, 1, "", "static_dct"], [81, 0, 1, "", "static_dft"], [81, 0, 1, "", "static_embedding"], [81, 0, 1, "", "static_idct"], [81, 0, 1, "", "static_ifft"], [81, 0, 1, "", "static_ifftn"], [81, 0, 1, "", "static_interpolate"], [81, 0, 1, "", "static_max_pool1d"], [81, 0, 1, "", "static_max_pool2d"], [81, 0, 1, "", "static_max_pool3d"], [81, 0, 1, "", "static_max_unpool1d"], [81, 0, 1, "", "static_rfft"], [81, 0, 1, "", "static_rfftn"], [81, 0, 1, "", "static_rnn"], [81, 0, 1, "", "static_stft"], [81, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[81, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "adjoint"], [81, 0, 1, "", "batched_outer"], [81, 0, 1, "", "cond"], [81, 0, 1, "", "diagflat"], [81, 0, 1, "", "dot"], [81, 0, 1, "", "eig"], [81, 0, 1, "", "eigh_tridiagonal"], [81, 0, 1, "", "eigvals"], [81, 0, 1, "", "higher_order_moment"], [81, 0, 1, "", "initialize_tucker"], [81, 0, 1, "", "kron"], [81, 0, 1, "", "make_svd_non_negative"], [81, 0, 1, "", "matrix_exp"], [81, 0, 1, "", "mode_dot"], [81, 0, 1, "", "multi_dot"], [81, 0, 1, "", "multi_mode_dot"], [81, 0, 1, "", "partial_tucker"], [81, 0, 1, "", "static_adjoint"], [81, 0, 1, "", "static_batched_outer"], [81, 0, 1, "", "static_cond"], [81, 0, 1, "", "static_diagflat"], [81, 0, 1, "", "static_dot"], [81, 0, 1, "", "static_eig"], [81, 0, 1, "", "static_eigh_tridiagonal"], [81, 0, 1, "", "static_eigvals"], [81, 0, 1, "", "static_higher_order_moment"], [81, 0, 1, "", "static_initialize_tucker"], [81, 0, 1, "", "static_kron"], [81, 0, 1, "", "static_make_svd_non_negative"], [81, 0, 1, "", "static_matrix_exp"], [81, 0, 1, "", "static_mode_dot"], [81, 0, 1, "", "static_multi_dot"], [81, 0, 1, "", "static_multi_mode_dot"], [81, 0, 1, "", "static_partial_tucker"], [81, 0, 1, "", "static_svd_flip"], [81, 0, 1, "", "static_tensor_train"], [81, 0, 1, "", "static_truncated_svd"], [81, 0, 1, "", "static_tt_matrix_to_tensor"], [81, 0, 1, "", "static_tucker"], [81, 0, 1, "", "svd_flip"], [81, 0, 1, "", "tensor_train"], [81, 0, 1, "", "truncated_svd"], [81, 0, 1, "", "tt_matrix_to_tensor"], [81, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[81, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_hinge_embedding_loss"], [81, 0, 1, "", "_static_huber_loss"], [81, 0, 1, "", "_static_kl_div"], [81, 0, 1, "", "_static_l1_loss"], [81, 0, 1, "", "_static_log_poisson_loss"], [81, 0, 1, "", "_static_poisson_nll_loss"], [81, 0, 1, "", "_static_smooth_l1_loss"], [81, 0, 1, "", "_static_soft_margin_loss"], [81, 0, 1, "", "hinge_embedding_loss"], [81, 0, 1, "", "huber_loss"], [81, 0, 1, "", "kl_div"], [81, 0, 1, "", "l1_loss"], [81, 0, 1, "", "log_poisson_loss"], [81, 0, 1, "", "poisson_nll_loss"], [81, 0, 1, "", "smooth_l1_loss"], [81, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[81, 1, 1, "", "_ContainerWithManipulationExperimental"], [81, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_fill_diagonal"], [81, 0, 1, "", "_static_put_along_axis"], [81, 0, 1, "", "_static_take"], [81, 0, 1, "", "_static_trim_zeros"], [81, 0, 1, "", "_static_unflatten"], [81, 0, 1, "", "_static_unique_consecutive"], [81, 0, 1, "", "as_strided"], [81, 0, 1, "", "associative_scan"], [81, 0, 1, "", "atleast_1d"], [81, 0, 1, "", "atleast_2d"], [81, 0, 1, "", "atleast_3d"], [81, 0, 1, "", "broadcast_shapes"], [81, 0, 1, "", "column_stack"], [81, 0, 1, "", "concat_from_sequence"], [81, 0, 1, "", "dsplit"], [81, 0, 1, "", "dstack"], [81, 0, 1, "", "expand"], [81, 0, 1, "", "fill_diagonal"], [81, 0, 1, "", "flatten"], [81, 0, 1, "", "fliplr"], [81, 0, 1, "", "flipud"], [81, 0, 1, "", "fold"], [81, 0, 1, "", "heaviside"], [81, 0, 1, "", "hsplit"], [81, 0, 1, "", "hstack"], [81, 0, 1, "", "i0"], [81, 0, 1, "", "matricize"], [81, 0, 1, "", "moveaxis"], [81, 0, 1, "", "pad"], [81, 0, 1, "", "partial_fold"], [81, 0, 1, "", "partial_tensor_to_vec"], [81, 0, 1, "", "partial_unfold"], [81, 0, 1, "", "partial_vec_to_tensor"], [81, 0, 1, "", "put_along_axis"], [81, 0, 1, "", "rot90"], [81, 0, 1, "", "soft_thresholding"], [81, 0, 1, "", "static_as_strided"], [81, 0, 1, "", "static_atleast_1d"], [81, 0, 1, "", "static_atleast_2d"], [81, 0, 1, "", "static_atleast_3d"], [81, 0, 1, "", "static_broadcast_shapes"], [81, 0, 1, "", "static_column_stack"], [81, 0, 1, "", "static_concat_from_sequence"], [81, 0, 1, "", "static_dsplit"], [81, 0, 1, "", "static_dstack"], [81, 0, 1, "", "static_expand"], [81, 0, 1, "", "static_flatten"], [81, 0, 1, "", "static_fliplr"], [81, 0, 1, "", "static_flipud"], [81, 0, 1, "", "static_fold"], [81, 0, 1, "", "static_heaviside"], [81, 0, 1, "", "static_hsplit"], [81, 0, 1, "", "static_hstack"], [81, 0, 1, "", "static_i0"], [81, 0, 1, "", "static_matricize"], [81, 0, 1, "", "static_moveaxis"], [81, 0, 1, "", "static_pad"], [81, 0, 1, "", "static_partial_fold"], [81, 0, 1, "", "static_partial_tensor_to_vec"], [81, 0, 1, "", "static_partial_unfold"], [81, 0, 1, "", "static_partial_vec_to_tensor"], [81, 0, 1, "", "static_rot90"], [81, 0, 1, "", "static_soft_thresholding"], [81, 0, 1, "", "static_take_along_axis"], [81, 0, 1, "", "static_top_k"], [81, 0, 1, "", "static_unfold"], [81, 0, 1, "", "static_vsplit"], [81, 0, 1, "", "static_vstack"], [81, 0, 1, "", "take"], [81, 0, 1, "", "take_along_axis"], [81, 0, 1, "", "top_k"], [81, 0, 1, "", "trim_zeros"], [81, 0, 1, "", "unflatten"], [81, 0, 1, "", "unfold"], [81, 0, 1, "", "unique_consecutive"], [81, 0, 1, "", "vsplit"], [81, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[81, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "batch_norm"], [81, 0, 1, "", "group_norm"], [81, 0, 1, "", "instance_norm"], [81, 0, 1, "", "l1_normalize"], [81, 0, 1, "", "l2_normalize"], [81, 0, 1, "", "lp_normalize"], [81, 0, 1, "", "static_batch_norm"], [81, 0, 1, "", "static_group_norm"], [81, 0, 1, "", "static_instance_norm"], [81, 0, 1, "", "static_l1_normalize"], [81, 0, 1, "", "static_l2_normalize"], [81, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[81, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "bernoulli"], [81, 0, 1, "", "beta"], [81, 0, 1, "", "dirichlet"], [81, 0, 1, "", "gamma"], [81, 0, 1, "", "poisson"], [81, 0, 1, "", "static_bernoulli"], [81, 0, 1, "", "static_beta"], [81, 0, 1, "", "static_dirichlet"], [81, 0, 1, "", "static_gamma"], [81, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[81, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "static_unravel_index"], [81, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[81, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[81, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[81, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "invert_permutation"], [81, 0, 1, "", "lexsort"], [81, 0, 1, "", "static_invert_permutation"], [81, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[81, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_cummax"], [81, 0, 1, "", "_static_cummin"], [81, 0, 1, "", "_static_nanmin"], [81, 0, 1, "", "bincount"], [81, 0, 1, "", "corrcoef"], [81, 0, 1, "", "cov"], [81, 0, 1, "", "cummax"], [81, 0, 1, "", "cummin"], [81, 0, 1, "", "histogram"], [81, 0, 1, "", "igamma"], [81, 0, 1, "", "lgamma"], [81, 0, 1, "", "median"], [81, 0, 1, "", "nanmean"], [81, 0, 1, "", "nanmedian"], [81, 0, 1, "", "nanmin"], [81, 0, 1, "", "nanprod"], [81, 0, 1, "", "quantile"], [81, 0, 1, "", "static_bincount"], [81, 0, 1, "", "static_corrcoef"], [81, 0, 1, "", "static_cov"], [81, 0, 1, "", "static_histogram"], [81, 0, 1, "", "static_igamma"], [81, 0, 1, "", "static_lgamma"], [81, 0, 1, "", "static_median"], [81, 0, 1, "", "static_nanmean"], [81, 0, 1, "", "static_nanmedian"], [81, 0, 1, "", "static_nanprod"], [81, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[81, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "optional_get_element"], [81, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[82, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_all_equal"], [82, 0, 1, "", "_static_array_equal"], [82, 0, 1, "", "_static_assert_supports_inplace"], [82, 0, 1, "", "_static_clip_matrix_norm"], [82, 0, 1, "", "_static_clip_vector_norm"], [82, 0, 1, "", "_static_einops_rearrange"], [82, 0, 1, "", "_static_einops_reduce"], [82, 0, 1, "", "_static_einops_repeat"], [82, 0, 1, "", "_static_exists"], [82, 0, 1, "", "_static_fourier_encode"], [82, 0, 1, "", "_static_gather"], [82, 0, 1, "", "_static_gather_nd"], [82, 0, 1, "", "_static_get_num_dims"], [82, 0, 1, "", "_static_has_nans"], [82, 0, 1, "", "_static_inplace_decrement"], [82, 0, 1, "", "_static_inplace_increment"], [82, 0, 1, "", "_static_inplace_update"], [82, 0, 1, "", "_static_is_array"], [82, 0, 1, "", "_static_is_ivy_array"], [82, 0, 1, "", "_static_is_native_array"], [82, 0, 1, "", "_static_scatter_flat"], [82, 0, 1, "", "_static_scatter_nd"], [82, 0, 1, "", "_static_size"], [82, 0, 1, "", "_static_stable_divide"], [82, 0, 1, "", "_static_stable_pow"], [82, 0, 1, "", "_static_supports_inplace_updates"], [82, 0, 1, "", "_static_to_list"], [82, 0, 1, "", "_static_to_numpy"], [82, 0, 1, "", "_static_to_scalar"], [82, 0, 1, "", "_static_value_is_nan"], [82, 0, 1, "", "all_equal"], [82, 0, 1, "", "array_equal"], [82, 0, 1, "", "assert_supports_inplace"], [82, 0, 1, "", "clip_matrix_norm"], [82, 0, 1, "", "clip_vector_norm"], [82, 0, 1, "", "einops_rearrange"], [82, 0, 1, "", "einops_reduce"], [82, 0, 1, "", "einops_repeat"], [82, 0, 1, "", "exists"], [82, 0, 1, "", "fourier_encode"], [82, 0, 1, "", "gather"], [82, 0, 1, "", "gather_nd"], [82, 0, 1, "", "get_num_dims"], [82, 0, 1, "", "has_nans"], [82, 0, 1, "", "inplace_decrement"], [82, 0, 1, "", "inplace_increment"], [82, 0, 1, "", "inplace_update"], [82, 0, 1, "", "is_array"], [82, 0, 1, "", "is_ivy_array"], [82, 0, 1, "", "is_native_array"], [82, 0, 1, "", "isin"], [82, 0, 1, "", "itemsize"], [82, 0, 1, "", "scatter_flat"], [82, 0, 1, "", "scatter_nd"], [82, 0, 1, "", "size"], [82, 0, 1, "", "stable_divide"], [82, 0, 1, "", "stable_pow"], [82, 0, 1, "", "static_isin"], [82, 0, 1, "", "static_itemsize"], [82, 0, 1, "", "static_strides"], [82, 0, 1, "", "strides"], [82, 0, 1, "", "supports_inplace_updates"], [82, 0, 1, "", "to_list"], [82, 0, 1, "", "to_numpy"], [82, 0, 1, "", "to_scalar"], [82, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[83, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "_static_stop_gradient"], [83, 0, 1, "", "adam_step"], [83, 0, 1, "", "adam_update"], [83, 0, 1, "", "gradient_descent_update"], [83, 0, 1, "", "lamb_update"], [83, 0, 1, "", "lars_update"], [83, 0, 1, "", "optimizer_update"], [83, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[84, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[84, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[85, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_conv1d"], [85, 0, 1, "", "_static_conv1d_transpose"], [85, 0, 1, "", "_static_conv2d"], [85, 0, 1, "", "_static_conv2d_transpose"], [85, 0, 1, "", "_static_conv3d"], [85, 0, 1, "", "_static_conv3d_transpose"], [85, 0, 1, "", "_static_depthwise_conv2d"], [85, 0, 1, "", "_static_dropout"], [85, 0, 1, "", "_static_dropout1d"], [85, 0, 1, "", "_static_dropout2d"], [85, 0, 1, "", "_static_dropout3d"], [85, 0, 1, "", "_static_linear"], [85, 0, 1, "", "_static_lstm_update"], [85, 0, 1, "", "_static_multi_head_attention"], [85, 0, 1, "", "_static_reduce_window"], [85, 0, 1, "", "_static_scaled_dot_product_attention"], [85, 0, 1, "", "conv1d"], [85, 0, 1, "", "conv1d_transpose"], [85, 0, 1, "", "conv2d"], [85, 0, 1, "", "conv2d_transpose"], [85, 0, 1, "", "conv3d"], [85, 0, 1, "", "conv3d_transpose"], [85, 0, 1, "", "depthwise_conv2d"], [85, 0, 1, "", "dropout"], [85, 0, 1, "", "dropout1d"], [85, 0, 1, "", "dropout2d"], [85, 0, 1, "", "dropout3d"], [85, 0, 1, "", "linear"], [85, 0, 1, "", "lstm_update"], [85, 0, 1, "", "multi_head_attention"], [85, 0, 1, "", "reduce_window"], [85, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[86, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_cholesky"], [86, 0, 1, "", "_static_cross"], [86, 0, 1, "", "_static_det"], [86, 0, 1, "", "_static_diag"], [86, 0, 1, "", "_static_diagonal"], [86, 0, 1, "", "_static_eigh"], [86, 0, 1, "", "_static_eigvalsh"], [86, 0, 1, "", "_static_inner"], [86, 0, 1, "", "_static_inv"], [86, 0, 1, "", "_static_matmul"], [86, 0, 1, "", "_static_matrix_norm"], [86, 0, 1, "", "_static_matrix_power"], [86, 0, 1, "", "_static_matrix_rank"], [86, 0, 1, "", "_static_matrix_transpose"], [86, 0, 1, "", "_static_outer"], [86, 0, 1, "", "_static_pinv"], [86, 0, 1, "", "_static_qr"], [86, 0, 1, "", "_static_slogdet"], [86, 0, 1, "", "_static_solve"], [86, 0, 1, "", "_static_svd"], [86, 0, 1, "", "_static_svdvals"], [86, 0, 1, "", "_static_tensordot"], [86, 0, 1, "", "_static_tensorsolve"], [86, 0, 1, "", "_static_trace"], [86, 0, 1, "", "_static_vander"], [86, 0, 1, "", "_static_vecdot"], [86, 0, 1, "", "_static_vector_norm"], [86, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [86, 0, 1, "", "cholesky"], [86, 0, 1, "", "cross"], [86, 0, 1, "", "det"], [86, 0, 1, "", "diag"], [86, 0, 1, "", "diagonal"], [86, 0, 1, "", "eigh"], [86, 0, 1, "", "eigvalsh"], [86, 0, 1, "", "general_inner_product"], [86, 0, 1, "", "inner"], [86, 0, 1, "", "inv"], [86, 0, 1, "", "matmul"], [86, 0, 1, "", "matrix_norm"], [86, 0, 1, "", "matrix_power"], [86, 0, 1, "", "matrix_rank"], [86, 0, 1, "", "matrix_transpose"], [86, 0, 1, "", "outer"], [86, 0, 1, "", "pinv"], [86, 0, 1, "", "qr"], [86, 0, 1, "", "slogdet"], [86, 0, 1, "", "solve"], [86, 0, 1, "", "static_general_inner_product"], [86, 0, 1, "", "svd"], [86, 0, 1, "", "svdvals"], [86, 0, 1, "", "tensordot"], [86, 0, 1, "", "tensorsolve"], [86, 0, 1, "", "trace"], [86, 0, 1, "", "vander"], [86, 0, 1, "", "vecdot"], [86, 0, 1, "", "vector_norm"], [86, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[87, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_binary_cross_entropy"], [87, 0, 1, "", "_static_cross_entropy"], [87, 0, 1, "", "_static_sparse_cross_entropy"], [87, 0, 1, "", "binary_cross_entropy"], [87, 0, 1, "", "cross_entropy"], [87, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[88, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_static_clip"], [88, 0, 1, "", "_static_concat"], [88, 0, 1, "", "_static_constant_pad"], [88, 0, 1, "", "_static_expand_dims"], [88, 0, 1, "", "_static_flip"], [88, 0, 1, "", "_static_permute_dims"], [88, 0, 1, "", "_static_repeat"], [88, 0, 1, "", "_static_reshape"], [88, 0, 1, "", "_static_roll"], [88, 0, 1, "", "_static_split"], [88, 0, 1, "", "_static_squeeze"], [88, 0, 1, "", "_static_stack"], [88, 0, 1, "", "_static_swapaxes"], [88, 0, 1, "", "_static_tile"], [88, 0, 1, "", "_static_unstack"], [88, 0, 1, "", "_static_zero_pad"], [88, 0, 1, "", "clip"], [88, 0, 1, "", "concat"], [88, 0, 1, "", "constant_pad"], [88, 0, 1, "", "expand_dims"], [88, 0, 1, "", "flip"], [88, 0, 1, "", "permute_dims"], [88, 0, 1, "", "repeat"], [88, 0, 1, "", "reshape"], [88, 0, 1, "", "roll"], [88, 0, 1, "", "split"], [88, 0, 1, "", "squeeze"], [88, 0, 1, "", "stack"], [88, 0, 1, "", "swapaxes"], [88, 0, 1, "", "tile"], [88, 0, 1, "", "unstack"], [88, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[89, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[90, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_multinomial"], [90, 0, 1, "", "_static_randint"], [90, 0, 1, "", "_static_random_normal"], [90, 0, 1, "", "_static_random_uniform"], [90, 0, 1, "", "_static_shuffle"], [90, 0, 1, "", "multinomial"], [90, 0, 1, "", "randint"], [90, 0, 1, "", "random_normal"], [90, 0, 1, "", "random_uniform"], [90, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[91, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_argmax"], [91, 0, 1, "", "_static_argmin"], [91, 0, 1, "", "_static_argwhere"], [91, 0, 1, "", "_static_nonzero"], [91, 0, 1, "", "_static_where"], [91, 0, 1, "", "argmax"], [91, 0, 1, "", "argmin"], [91, 0, 1, "", "argwhere"], [91, 0, 1, "", "nonzero"], [91, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[92, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_unique_all"], [92, 0, 1, "", "_static_unique_counts"], [92, 0, 1, "", "_static_unique_inverse"], [92, 0, 1, "", "_static_unique_values"], [92, 0, 1, "", "unique_all"], [92, 0, 1, "", "unique_counts"], [92, 0, 1, "", "unique_inverse"], [92, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[93, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_argsort"], [93, 0, 1, "", "_static_searchsorted"], [93, 0, 1, "", "_static_sort"], [93, 0, 1, "", "argsort"], [93, 0, 1, "", "msort"], [93, 0, 1, "", "searchsorted"], [93, 0, 1, "", "sort"], [93, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[94, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_cumprod"], [94, 0, 1, "", "_static_cumsum"], [94, 0, 1, "", "_static_min"], [94, 0, 1, "", "_static_prod"], [94, 0, 1, "", "_static_sum"], [94, 0, 1, "", "_static_var"], [94, 0, 1, "", "cumprod"], [94, 0, 1, "", "cumsum"], [94, 0, 1, "", "einsum"], [94, 0, 1, "", "max"], [94, 0, 1, "", "mean"], [94, 0, 1, "", "min"], [94, 0, 1, "", "prod"], [94, 0, 1, "", "std"], [94, 0, 1, "", "sum"], [94, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[95, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_all"], [95, 0, 1, "", "_static_any"], [95, 0, 1, "", "all"], [95, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[96, 2, 1, "", "_wrap_function"], [96, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[97, 3, 0, "-", "base"], [98, 3, 0, "-", "cp_tensor"], [99, 3, 0, "-", "parafac2_tensor"], [100, 3, 0, "-", "tr_tensor"], [101, 3, 0, "-", "tt_tensor"], [102, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[97, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "mode_dot"], [97, 0, 1, "", "norm"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolded"], [97, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[98, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[98, 0, 1, "", "__init__"], [98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "cp_copy"], [98, 0, 1, "", "cp_flip_sign"], [98, 0, 1, "", "cp_lstsq_grad"], [98, 0, 1, "", "cp_mode_dot"], [98, 0, 1, "", "cp_n_param"], [98, 0, 1, "", "cp_norm"], [98, 0, 1, "", "cp_normalize"], [98, 0, 1, "", "cp_to_tensor"], [98, 0, 1, "", "cp_to_unfolded"], [98, 0, 1, "", "cp_to_vec"], [98, 0, 1, "", "mode_dot"], [98, 5, 1, "", "n_param"], [98, 0, 1, "", "norm"], [98, 0, 1, "", "normalize"], [98, 0, 1, "", "to_tensor"], [98, 0, 1, "", "to_unfolded"], [98, 0, 1, "", "to_vec"], [98, 0, 1, "", "unfolding_dot_khatri_rao"], [98, 0, 1, "", "validate_cp_rank"], [98, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[99, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[99, 0, 1, "", "__init__"], [99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "apply_parafac2_projections"], [99, 0, 1, "", "from_CPTensor"], [99, 5, 1, "", "n_param"], [99, 0, 1, "", "parafac2_normalise"], [99, 0, 1, "", "parafac2_to_slice"], [99, 0, 1, "", "parafac2_to_slices"], [99, 0, 1, "", "parafac2_to_tensor"], [99, 0, 1, "", "parafac2_to_unfolded"], [99, 0, 1, "", "parafac2_to_vec"], [99, 0, 1, "", "to_tensor"], [99, 0, 1, "", "to_unfolded"], [99, 0, 1, "", "to_vec"], [99, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[100, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 5, 1, "", "n_param"], [100, 0, 1, "", "to_tensor"], [100, 0, 1, "", "to_unfolded"], [100, 0, 1, "", "to_vec"], [100, 0, 1, "", "tr_n_param"], [100, 0, 1, "", "tr_to_tensor"], [100, 0, 1, "", "tr_to_unfolded"], [100, 0, 1, "", "tr_to_vec"], [100, 0, 1, "", "validate_tr_rank"], [100, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[101, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[101, 0, 1, "", "__init__"], [101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "_tt_n_param"], [101, 0, 1, "", "index_update"], [101, 5, 1, "", "n_param"], [101, 0, 1, "", "pad_tt_rank"], [101, 0, 1, "", "to_tensor"], [101, 0, 1, "", "to_unfolding"], [101, 0, 1, "", "to_vec"], [101, 0, 1, "", "tt_to_tensor"], [101, 0, 1, "", "tt_to_unfolded"], [101, 0, 1, "", "tt_to_vec"], [101, 0, 1, "", "validate_tt_rank"], [101, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[102, 1, 1, "", "TuckerTensor"], [102, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[102, 0, 1, "", "__init__"], [102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "mode_dot"], [102, 5, 1, "", "n_param"], [102, 0, 1, "", "to_tensor"], [102, 0, 1, "", "to_unfolded"], [102, 0, 1, "", "to_vec"], [102, 0, 1, "", "tucker_copy"], [102, 0, 1, "", "tucker_mode_dot"], [102, 0, 1, "", "tucker_n_param"], [102, 0, 1, "", "tucker_normalize"], [102, 0, 1, "", "tucker_to_tensor"], [102, 0, 1, "", "tucker_to_unfolded"], [102, 0, 1, "", "tucker_to_vec"], [102, 0, 1, "", "validate_tucker_rank"], [102, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[107, 3, 0, "-", "base"], [108, 3, 0, "-", "elementwise"], [106, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[107, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[107, 0, 1, "", "__init__"], [107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "broadcast_shapes"], [107, 5, 1, "", "data"], [107, 5, 1, "", "device"], [107, 5, 1, "", "dtype"], [107, 5, 1, "", "inner_shape"], [107, 5, 1, "", "ndim"], [107, 0, 1, "", "nested_array"], [107, 5, 1, "", "nested_rank"], [107, 0, 1, "", "ragged_map"], [107, 0, 1, "", "ragged_multi_map"], [107, 0, 1, "", "ragged_multi_map_in_function"], [107, 0, 1, "", "replace_ivy_arrays"], [107, 5, 1, "", "shape"], [107, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[108, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[108, 4, 1, "", "_abc_impl"], [108, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[106, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[106, 0, 1, "", "__init__"], [106, 0, 1, "", "from_row_lengths"], [106, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[627, 3, 0, "-", "activations"], [628, 3, 0, "-", "constants"], [629, 3, 0, "-", "control_flow_ops"], [630, 3, 0, "-", "creation"], [631, 3, 0, "-", "data_type"], [632, 3, 0, "-", "device"], [633, 3, 0, "-", "elementwise"], [634, 3, 0, "-", "experimental"], [635, 3, 0, "-", "general"], [636, 3, 0, "-", "gradients"], [637, 3, 0, "-", "layers"], [638, 3, 0, "-", "linear_algebra"], [639, 3, 0, "-", "losses"], [640, 3, 0, "-", "manipulation"], [641, 3, 0, "-", "meta"], [642, 3, 0, "-", "nest"], [643, 3, 0, "-", "norms"], [644, 3, 0, "-", "random"], [645, 3, 0, "-", "searching"], [646, 3, 0, "-", "set"], [647, 3, 0, "-", "sorting"], [648, 3, 0, "-", "statistical"], [649, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[368, 3, 0, "-", "activations"], [369, 3, 0, "-", "constants"], [370, 3, 0, "-", "creation"], [371, 3, 0, "-", "data_type"], [372, 3, 0, "-", "device"], [373, 3, 0, "-", "elementwise"], [374, 3, 0, "-", "general"], [375, 3, 0, "-", "gradients"], [376, 3, 0, "-", "layers"], [377, 3, 0, "-", "linear_algebra"], [378, 3, 0, "-", "losses"], [379, 3, 0, "-", "manipulation"], [380, 3, 0, "-", "meta"], [381, 3, 0, "-", "nest"], [382, 3, 0, "-", "norms"], [383, 3, 0, "-", "random"], [384, 3, 0, "-", "searching"], [385, 3, 0, "-", "set"], [386, 3, 0, "-", "sorting"], [387, 3, 0, "-", "sparse_array"], [388, 3, 0, "-", "statistical"], [389, 3, 0, "-", "utility"]], "ivy.stateful": [[789, 3, 0, "-", "activations"], [790, 3, 0, "-", "converters"], [791, 3, 0, "-", "helpers"], [792, 3, 0, "-", "initializers"], [793, 3, 0, "-", "layers"], [794, 3, 0, "-", "losses"], [795, 3, 0, "-", "module"], [796, 3, 0, "-", "norms"], [797, 3, 0, "-", "optimizers"], [798, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[789, 1, 1, "", "ELU"], [789, 1, 1, "", "GEGLU"], [789, 1, 1, "", "GELU"], [789, 1, 1, "", "Hardswish"], [789, 1, 1, "", "LeakyReLU"], [789, 1, 1, "", "LogSigmoid"], [789, 1, 1, "", "LogSoftmax"], [789, 1, 1, "", "Logit"], [789, 1, 1, "", "Mish"], [789, 1, 1, "", "PReLU"], [789, 1, 1, "", "ReLU"], [789, 1, 1, "", "ReLU6"], [789, 1, 1, "", "SeLU"], [789, 1, 1, "", "SiLU"], [789, 1, 1, "", "Sigmoid"], [789, 1, 1, "", "Softmax"], [789, 1, 1, "", "Softplus"], [789, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[789, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[789, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[790, 1, 1, "", "ModuleConverters"], [790, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[790, 0, 1, "", "from_flax_module"], [790, 0, 1, "", "from_haiku_module"], [790, 0, 1, "", "from_keras_module"], [790, 0, 1, "", "from_paddle_module"], [790, 0, 1, "", "from_torch_module"], [790, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[791, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[792, 1, 1, "", "Constant"], [792, 1, 1, "", "FirstLayerSiren"], [792, 1, 1, "", "GlorotUniform"], [792, 1, 1, "", "Initializer"], [792, 1, 1, "", "KaimingNormal"], [792, 1, 1, "", "Ones"], [792, 1, 1, "", "RandomNormal"], [792, 1, 1, "", "Siren"], [792, 1, 1, "", "Uniform"], [792, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[792, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[792, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[792, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[792, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[792, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[793, 1, 1, "", "AdaptiveAvgPool1d"], [793, 1, 1, "", "AdaptiveAvgPool2d"], [793, 1, 1, "", "AvgPool1D"], [793, 1, 1, "", "AvgPool2D"], [793, 1, 1, "", "AvgPool3D"], [793, 1, 1, "", "Conv1D"], [793, 1, 1, "", "Conv1DTranspose"], [793, 1, 1, "", "Conv2D"], [793, 1, 1, "", "Conv2DTranspose"], [793, 1, 1, "", "Conv3D"], [793, 1, 1, "", "Conv3DTranspose"], [793, 1, 1, "", "Dct"], [793, 1, 1, "", "DepthwiseConv2D"], [793, 1, 1, "", "Dropout"], [793, 1, 1, "", "Embedding"], [793, 1, 1, "", "FFT"], [793, 1, 1, "", "IFFT"], [793, 1, 1, "", "Identity"], [793, 1, 1, "", "LSTM"], [793, 1, 1, "", "Linear"], [793, 1, 1, "", "MaxPool1D"], [793, 1, 1, "", "MaxPool2D"], [793, 1, 1, "", "MaxPool3D"], [793, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[793, 0, 1, "", "__init__"], [793, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[793, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[793, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[794, 1, 1, "", "BinaryCrossEntropyLoss"], [794, 1, 1, "", "CrossEntropyLoss"], [794, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[794, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[794, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[794, 0, 1, "", "__init__"]], "ivy.stateful.module": [[795, 1, 1, "", "Module"], [795, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[795, 0, 1, "", "__call__"], [795, 0, 1, "", "__init__"], [795, 5, 1, "", "buffers"], [795, 0, 1, "", "build"], [795, 5, 1, "", "build_mode"], [795, 5, 1, "", "built"], [795, 5, 1, "", "device"], [795, 5, 1, "", "dtype"], [795, 0, 1, "", "eval"], [795, 0, 1, "", "load"], [795, 5, 1, "", "module_dict"], [795, 0, 1, "", "register_buffer"], [795, 0, 1, "", "register_parameter"], [795, 0, 1, "", "save"], [795, 0, 1, "", "save_weights"], [795, 0, 1, "", "show_graph"], [795, 5, 1, "", "state_dict"], [795, 0, 1, "", "to_device"], [795, 0, 1, "", "trace_graph"], [795, 0, 1, "", "train"], [795, 5, 1, "", "training"], [795, 5, 1, "", "v"]], "ivy.stateful.norms": [[796, 1, 1, "", "BatchNorm2D"], [796, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[796, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[796, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[797, 1, 1, "", "Adam"], [797, 1, 1, "", "AdamW"], [797, 1, 1, "", "LAMB"], [797, 1, 1, "", "LARS"], [797, 1, 1, "", "Optimizer"], [797, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "set_state"], [797, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[797, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "set_state"], [797, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "set_state"], [797, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "set_state"], [797, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[797, 0, 1, "", "__init__"], [797, 0, 1, "", "set_state"], [797, 5, 1, "", "state"]], "ivy.stateful.sequential": [[798, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[798, 0, 1, "", "__init__"]], "ivy.utils": [[799, 3, 0, "-", "assertions"], [800, 3, 0, "-", "backend"], [804, 3, 0, "-", "binaries"], [805, 3, 0, "-", "decorator_utils"], [806, 3, 0, "-", "dynamic_import"], [807, 3, 0, "-", "einsum_parser"], [808, 3, 0, "-", "einsum_path_helpers"], [809, 3, 0, "-", "exceptions"], [810, 3, 0, "-", "inspection"], [811, 3, 0, "-", "logging"], [812, 3, 0, "-", "profiler"], [813, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[799, 2, 1, "", "check_all"], [799, 2, 1, "", "check_all_or_any_fn"], [799, 2, 1, "", "check_any"], [799, 2, 1, "", "check_dev_correct_formatting"], [799, 2, 1, "", "check_dimensions"], [799, 2, 1, "", "check_elem_in_list"], [799, 2, 1, "", "check_equal"], [799, 2, 1, "", "check_exists"], [799, 2, 1, "", "check_false"], [799, 2, 1, "", "check_gather_input_valid"], [799, 2, 1, "", "check_gather_nd_input_valid"], [799, 2, 1, "", "check_greater"], [799, 2, 1, "", "check_inplace_sizes_valid"], [799, 2, 1, "", "check_isinstance"], [799, 2, 1, "", "check_kernel_padding_size"], [799, 2, 1, "", "check_less"], [799, 2, 1, "", "check_one_way_broadcastable"], [799, 2, 1, "", "check_same_dtype"], [799, 2, 1, "", "check_shape"], [799, 2, 1, "", "check_shapes_broadcastable"], [799, 2, 1, "", "check_true"], [799, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[801, 3, 0, "-", "ast_helpers"], [802, 3, 0, "-", "handler"], [803, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[801, 1, 1, "", "ImportTransformer"], [801, 1, 1, "", "IvyLoader"], [801, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "impersonate_import"], [801, 0, 1, "", "visit_Import"], [801, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[801, 0, 1, "", "__init__"], [801, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[801, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[802, 1, 1, "", "ContextManager"], [802, 2, 1, "", "choose_random_backend"], [802, 2, 1, "", "current_backend"], [802, 2, 1, "", "dynamic_backend_converter"], [802, 2, 1, "", "prevent_access_locally"], [802, 2, 1, "", "previous_backend"], [802, 2, 1, "", "set_backend"], [802, 2, 1, "", "set_backend_to_specific_version"], [802, 2, 1, "", "set_jax_backend"], [802, 2, 1, "", "set_mxnet_backend"], [802, 2, 1, "", "set_numpy_backend"], [802, 2, 1, "", "set_paddle_backend"], [802, 2, 1, "", "set_tensorflow_backend"], [802, 2, 1, "", "set_torch_backend"], [802, 2, 1, "", "unset_backend"], [802, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[802, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[803, 2, 1, "", "clear_sub_backends"], [803, 2, 1, "", "find_available_sub_backends"], [803, 2, 1, "", "fn_name_from_version_specific_fn_name"], [803, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [803, 2, 1, "", "set_sub_backend"], [803, 2, 1, "", "set_sub_backend_to_specific_version"], [803, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[804, 2, 1, "", "check_for_binaries"], [804, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[805, 1, 1, "", "CallVisitor"], [805, 1, 1, "", "TransposeType"], [805, 2, 1, "", "apply_transpose"], [805, 2, 1, "", "get_next_func"], [805, 2, 1, "", "handle_get_item"], [805, 2, 1, "", "handle_methods"], [805, 2, 1, "", "handle_set_item"], [805, 2, 1, "", "handle_transpose_in_input_and_output"], [805, 2, 1, "", "retrieve_object"], [805, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[805, 0, 1, "", "__init__"], [805, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[805, 4, 1, "", "CONV1D"], [805, 4, 1, "", "CONV2D"], [805, 4, 1, "", "CONV3D"], [805, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[806, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[807, 2, 1, "", "convert_interleaved_input"], [807, 2, 1, "", "convert_subscripts"], [807, 2, 1, "", "find_output_shape"], [807, 2, 1, "", "find_output_str"], [807, 2, 1, "", "gen_unused_symbols"], [807, 2, 1, "", "get_symbol"], [807, 2, 1, "", "has_valid_einsum_chars_only"], [807, 2, 1, "", "is_valid_einsum_char"], [807, 2, 1, "", "legalise_einsum_expr"], [807, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[808, 2, 1, "", "can_dot"], [808, 2, 1, "", "compute_size_by_dict"], [808, 2, 1, "", "find_contraction"], [808, 2, 1, "", "flop_count"], [808, 2, 1, "", "greedy_path"], [808, 2, 1, "", "optimal_path"], [808, 2, 1, "", "parse_einsum_input"], [808, 2, 1, "", "parse_possible_contraction"], [808, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[809, 7, 1, "", "InplaceUpdateException"], [809, 7, 1, "", "IvyAttributeError"], [809, 7, 1, "", "IvyBackendException"], [809, 7, 1, "", "IvyBroadcastShapeError"], [809, 7, 1, "", "IvyDeviceError"], [809, 7, 1, "", "IvyDtypePromotionError"], [809, 7, 1, "", "IvyError"], [809, 7, 1, "", "IvyException"], [809, 7, 1, "", "IvyIndexError"], [809, 7, 1, "", "IvyInvalidBackendException"], [809, 7, 1, "", "IvyNotImplementedException"], [809, 7, 1, "", "IvyValueError"], [809, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[809, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[809, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[810, 2, 1, "", "add_array_specs"], [810, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[811, 2, 1, "", "set_logging_mode"], [811, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[812, 1, 1, "", "Profiler"], [812, 2, 1, "", "tensorflow_profile_start"], [812, 2, 1, "", "tensorflow_profile_stop"], [812, 2, 1, "", "torch_profiler_init"], [812, 2, 1, "", "torch_profiler_start"], [812, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[812, 0, 1, "", "__init__"], [812, 4, 1, "", "print_stats"], [812, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[813, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[772, 3, 0, "-", "assertions"], [773, 3, 0, "-", "available_frameworks"], [774, 3, 0, "-", "function_testing"], [775, 3, 0, "-", "globals"], [776, 3, 0, "-", "hypothesis_helpers"], [781, 3, 0, "-", "multiprocessing"], [782, 3, 0, "-", "pipeline_helper"], [783, 3, 0, "-", "structs"], [784, 3, 0, "-", "test_parameter_flags"], [785, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[772, 2, 1, "", "assert_all_close"], [772, 2, 1, "", "assert_same_type"], [772, 2, 1, "", "assert_same_type_and_shape"], [772, 2, 1, "", "check_unsupported_device"], [772, 2, 1, "", "check_unsupported_device_and_dtype"], [772, 2, 1, "", "check_unsupported_dtype"], [772, 2, 1, "", "test_unsupported_function"], [772, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[774, 2, 1, "", "args_to_container"], [774, 2, 1, "", "args_to_frontend"], [774, 2, 1, "", "arrays_to_frontend"], [774, 2, 1, "", "as_lists"], [774, 2, 1, "", "convtrue"], [774, 2, 1, "", "create_args_kwargs"], [774, 2, 1, "", "flatten"], [774, 2, 1, "", "flatten_and_to_np"], [774, 2, 1, "", "flatten_frontend"], [774, 2, 1, "", "flatten_frontend_fw_to_np"], [774, 2, 1, "", "flatten_frontend_to_np"], [774, 2, 1, "", "get_frontend_ret"], [774, 2, 1, "", "get_ret_and_flattened_np_array"], [774, 2, 1, "", "gradient_incompatible_function"], [774, 2, 1, "", "gradient_test"], [774, 2, 1, "", "gradient_unsupported_dtypes"], [774, 2, 1, "", "kwargs_to_args_n_kwargs"], [774, 2, 1, "", "test_frontend_function"], [774, 2, 1, "", "test_frontend_method"], [774, 2, 1, "", "test_function"], [774, 2, 1, "", "test_function_backend_computation"], [774, 2, 1, "", "test_function_ground_truth_computation"], [774, 2, 1, "", "test_gradient_backend_computation"], [774, 2, 1, "", "test_gradient_ground_truth_computation"], [774, 2, 1, "", "test_method"], [774, 2, 1, "", "test_method_backend_computation"], [774, 2, 1, "", "test_method_ground_truth_computation"], [774, 2, 1, "", "traced_if_required"], [774, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[775, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [775, 7, 1, "", "InterruptedTest"], [775, 1, 1, "", "TestData"], [775, 2, 1, "", "setup_api_test"], [775, 2, 1, "", "setup_frontend_test"], [775, 2, 1, "", "teardown_api_test"], [775, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[775, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[775, 0, 1, "", "__init__"], [775, 4, 1, "", "fn_name"], [775, 4, 1, "", "fn_tree"], [775, 4, 1, "", "is_method"], [775, 4, 1, "", "supported_device_dtypes"], [775, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[777, 3, 0, "-", "array_helpers"], [778, 3, 0, "-", "dtype_helpers"], [779, 3, 0, "-", "general_helpers"], [780, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[777, 2, 1, "", "array_and_broadcastable_shape"], [777, 2, 1, "", "array_bools"], [777, 2, 1, "", "array_helpers_dtype_info_helper"], [777, 2, 1, "", "array_indices_axis"], [777, 2, 1, "", "array_indices_put_along_axis"], [777, 2, 1, "", "array_values"], [777, 2, 1, "", "arrays_and_axes"], [777, 2, 1, "", "arrays_for_pooling"], [777, 2, 1, "", "broadcast_shapes"], [777, 2, 1, "", "cond_data_gen_helper"], [777, 2, 1, "", "create_concatenable_arrays_dtypes"], [777, 2, 1, "", "create_nested_input"], [777, 2, 1, "", "dtype_and_values"], [777, 2, 1, "", "dtype_array_query"], [777, 2, 1, "", "dtype_array_query_val"], [777, 2, 1, "", "dtype_values_axis"], [777, 2, 1, "", "einsum_helper"], [777, 2, 1, "", "get_first_solve_batch_matrix"], [777, 2, 1, "", "get_first_solve_matrix"], [777, 2, 1, "", "get_second_solve_batch_matrix"], [777, 2, 1, "", "get_second_solve_matrix"], [777, 2, 1, "", "list_of_size"], [777, 2, 1, "", "lists"], [777, 2, 1, "", "mutually_broadcastable_shapes"], [777, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[778, 2, 1, "", "array_dtypes"], [778, 2, 1, "", "cast_filter"], [778, 2, 1, "", "cast_filter_helper"], [778, 2, 1, "", "get_castable_dtype"], [778, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[779, 7, 1, "", "BroadcastError"], [779, 2, 1, "", "apply_safety_factor"], [779, 2, 1, "", "broadcast_shapes"], [779, 2, 1, "", "dims_and_offset"], [779, 2, 1, "", "embedding_helper"], [779, 2, 1, "", "general_helpers_dtype_info_helper"], [779, 2, 1, "", "get_axis"], [779, 2, 1, "", "get_bounds"], [779, 2, 1, "", "get_mean_std"], [779, 2, 1, "", "get_shape"], [779, 2, 1, "", "matrix_is_stable"], [779, 2, 1, "", "reshape_shapes"], [779, 2, 1, "", "sizes_"], [779, 2, 1, "", "subsets"], [779, 2, 1, "", "two_broadcastable_shapes"], [779, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[780, 2, 1, "", "floats"], [780, 2, 1, "", "ints"], [780, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[781, 2, 1, "", "backend_proc"], [781, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[782, 1, 1, "", "BackendHandler"], [782, 1, 1, "", "BackendHandlerMode"], [782, 1, 1, "", "WithBackendContext"], [782, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[782, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[782, 4, 1, "", "SetBackend"], [782, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[782, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[783, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[783, 0, 1, "", "__init__"], [783, 4, 1, "", "framework_init_module"], [783, 4, 1, "", "init_name"], [783, 4, 1, "", "ivy_init_module"], [783, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[784, 1, 1, "", "DynamicFlag"], [784, 1, 1, "", "FrontendFunctionTestFlags"], [784, 1, 1, "", "FrontendInitTestFlags"], [784, 1, 1, "", "FrontendMethodTestFlags"], [784, 1, 1, "", "FunctionTestFlags"], [784, 1, 1, "", "InitMethodTestFlags"], [784, 1, 1, "", "MethodTestFlags"], [784, 1, 1, "", "TestFlags"], [784, 2, 1, "", "build_flag"], [784, 2, 1, "", "frontend_function_flags"], [784, 2, 1, "", "frontend_init_flags"], [784, 2, 1, "", "frontend_method_flags"], [784, 2, 1, "", "function_flags"], [784, 2, 1, "", "init_method_flags"], [784, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[784, 0, 1, "", "__init__"], [784, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[784, 0, 1, "", "__init__"], [784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[784, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[785, 2, 1, "", "handle_example"], [785, 2, 1, "", "handle_frontend_method"], [785, 2, 1, "", "handle_frontend_test"], [785, 2, 1, "", "handle_method"], [785, 2, 1, "", "handle_test"], [785, 2, 1, "", "num_positional_args"], [785, 2, 1, "", "num_positional_args_helper"], [785, 2, 1, "", "num_positional_args_method"], [785, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 6, 8, 12, 20, 28, 31, 48, 50, 814, 816, 820, 821, 825, 841, 844, 854, 858, 865, 866], "ivi": [0, 4, 5, 8, 12, 20, 23, 31, 32, 33, 44, 45, 47, 48, 50, 814, 820, 822, 826, 828, 830, 833, 835, 841, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 858, 865, 866, 867, 878], "framework": [0, 6, 13, 32, 38, 44, 773, 786, 814, 841, 844, 852, 872, 875, 878, 879], "librari": [0, 29, 32, 33, 48, 50, 866], "instal": [0, 4, 5, 12, 13, 23, 44, 45, 47, 814, 858], "import": [0, 5, 8, 12, 15, 23, 44, 45, 48, 806], "configur": [0, 835, 844, 854], "environ": [0, 821], "load": [0, 8, 12, 13, 15, 770, 854], "dataset": [0, 46, 48], "preview": 0, "inspect": [0, 810], "end": [0, 48], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 844], "transact": 0, "class": [0, 109, 786, 826, 835, 843, 853], "distribut": 0, "separ": 0, "data": [0, 4, 5, 8, 12, 13, 15, 23, 32, 44, 55, 78, 109, 371, 631, 646, 750, 751, 752, 753, 831, 843, 846, 854, 857], "analysi": 0, "statist": [0, 71, 94, 388, 648], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 6, 7, 13, 15], "metric": [0, 15, 48], "under": 0, "sampl": [0, 45], "balanc": [0, 849], "creat": [0, 1, 44, 45, 820], "split": [0, 709], "featur": [0, 846], "target": [0, 44], "train": [0, 13, 15, 44, 46, 48], "test": [0, 15, 46, 774, 784, 785, 788, 820, 821, 822, 825, 830, 836, 844, 846], "set": [0, 6, 12, 13, 40, 44, 45, 69, 92, 385, 646, 821, 827, 836, 848, 858], "convert": [0, 6, 7, 13, 790, 814, 856], "arrai": [0, 103, 106, 128, 387, 777, 825, 826, 830, 838, 853, 862, 865, 869], "displai": [0, 49], "dimens": 0, "prepar": [0, 4, 5, 8, 12], "function": [0, 8, 23, 32, 33, 44, 45, 46, 48, 50, 110, 774, 820, 829, 831, 832, 835, 838, 839, 840, 841, 843, 844, 846, 847, 848, 849, 851, 856, 857, 866], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 56, 79, 372, 632, 832, 838, 843], "mode": [0, 40, 831, 835, 848], "xgboost": [0, 15], "classifi": [0, 12], "benchmark": 0, "model": [0, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 30, 31, 32, 33, 44, 45, 46, 47, 48, 50, 814, 856, 857], "time": [0, 15], "base": [0, 75, 97, 107], "predict": 0, "perform": 0, "implement": [0, 4, 8, 830, 841, 843, 863], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 849, 862, 869, 878], "classif": [0, 5], "report": 0, "evalu": [0, 15], "ivyclassifi": 0, "xgbclassifi": [0, 15], "visual": [0, 13, 49], "comparison": [0, 15, 854], "demo": [1, 3, 4, 5, 21, 32, 46, 47], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 8, 12, 15, 21, 40, 833, 838, 841, 844, 846, 849, 865, 866, 867], "alexnet": 4, "infer": [4, 5, 8, 12, 840], "torch": [4, 5, 8, 12, 40, 47, 872, 873], "tensorflow": [4, 5, 6, 8, 13, 15, 19, 40, 47, 48, 49, 872], "jax": [4, 5, 8, 11, 14, 15, 40, 47, 872], "appendix": [4, 8], "code": [4, 23, 24, 25, 26, 33, 44, 837, 845, 847], "bert": 5, "dependeci": 5, "modul": [5, 795, 831, 832, 855, 866], "sequenc": [5, 838], "your": [6, 8, 12, 13, 822, 846], "pytorch": [6, 7, 13, 14, 15, 17, 46, 872], "project": [6, 13], "incompat": [6, 13], "transpil": [6, 7, 13, 17, 18, 19, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 46, 50, 856, 858, 866], "about": [6, 7, 13, 44], "up": [6, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 46, 821, 836, 845, 858], "sourc": [6, 13, 858], "from": [6, 7, 13, 40, 47, 858], "result": [6, 7, 13, 45], "fine": [6, 7, 13], "tune": [6, 7, 13], "conclus": [6, 7, 13], "how": [7, 28, 814, 820, 828, 836, 845, 846], "To": [7, 50, 822], "paddlepaddl": 7, "imag": [8, 12, 13, 61, 84, 254, 816, 828], "segment": 8, "unet": 8, "custom": [8, 826, 828, 841, 845, 854, 857], "preprocess": 8, "visualis": [8, 12], "initi": [8, 12, 792, 855], "nativ": [8, 12, 826, 849], "pretrain": [8, 12], "weight": [8, 12, 854], "mask": 8, "backend": [8, 15, 23, 32, 44, 45, 47, 48, 800, 803, 820, 827, 831, 841, 847, 851, 857], "acceler": [11, 14, 15], "mmpretrain": 11, "resnet": [12, 13, 51], "label": 12, "resnet34": 12, "resnet50": 12, "few": 13, "pre": [13, 821, 837], "xgb_frontend": 15, "xgb": 15, "more": [15, 821, 849, 863], "exhaust": 15, "v": [15, 27, 37, 40, 837, 857, 862, 865], "number": [15, 780, 838], "boost": 15, "round": [15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 46, 284, 845], "fraction": 15, "guid": [16, 21], "build": [17, 18, 19, 48, 816, 828, 851], "top": [17, 18, 19, 823, 830, 880], "haiku": 18, "develop": 20, "convolut": 20, "network": [20, 45, 48, 854, 856], "tutori": [21, 48], "And": 21, "learn": [21, 22, 872], "basic": [21, 22, 44, 45, 822, 843], "write": [23, 31, 843, 846], "content": [23, 46], "handler": [23, 32, 802, 803, 851], "structur": [23, 32, 828, 841, 857], "api": [23, 32, 33, 820, 825, 829, 830, 841, 847, 851, 853, 855, 856, 858, 862, 865, 866, 867, 869, 876, 878], "state": [23, 32, 33, 855, 857, 865], "unifi": [24, 27, 28, 34, 37, 38, 39, 44, 853, 863, 867, 874, 878], "trace": [25, 27, 28, 33, 692, 835], "lazi": [27, 37, 865], "eager": [27, 37, 865], "decor": [28, 39, 805, 835, 840, 846], "ani": [29, 30, 32, 33, 769], "odsc": 32, "graph": [32, 49, 873, 878], "tracer": [32, 851, 856, 858, 865, 873, 878], "quickstart": 33, "get": [33, 814, 822, 858], "familiar": 33, "0": [34, 35, 36, 37, 41, 42], "1": [35, 37, 38, 39, 40, 43, 50, 872], "compil": [35, 37, 38, 39, 45, 865, 870, 875, 877, 878], "2": [36, 39, 41, 50, 872], "select": 38, "As": 39, "3": [40, 42, 43, 50], "dynam": [40, 48, 806, 827, 857], "static": 40, "todo": [40, 822], "explain": 40, "via": 40, "why": [40, 846, 863], "i": [40, 828, 849], "true": 40, "default": [40, 545], "when": 40, "numpi": [40, 47, 843, 872], "fals": 40, "kornia": 41, "perceiv": 42, "stabl": 43, "diffus": 43, "oper": [44, 838, 848, 853, 857], "ml": [44, 814, 861, 874, 878], "chang": 44, "one": 44, "line": [44, 822], "No": [44, 821, 863], "need": [44, 846], "worri": 44, "type": [44, 55, 78, 371, 631, 831, 839, 843, 857], "differ": 44, "them": 44, "all": [44, 768], "standalon": [44, 839], "defin": [44, 45, 46, 48], "optim": [44, 797, 855], "input": [44, 45, 838], "loss": [44, 64, 87, 378, 639, 794], "loop": [44, 48], "check": [45, 837, 857], "simpl": 45, "neural": 45, "deepmind": [46, 47], "": [46, 48, 820, 828, 845, 858], "perceiverio": [46, 47], "tabl": [46, 828, 831, 869], "construct": [46, 854], "some": 46, "helper": [46, 776, 777, 778, 779, 780, 782, 785, 791, 801, 808, 844, 846, 847], "pipelin": [46, 48, 782, 828, 830, 846, 857], "download": 46, "dataload": 46, "gpu": [47, 857], "introduct": [47, 50, 843, 844], "python3": 47, "8": 47, "setup": [47, 837], "kernel": 47, "clone": [47, 821, 830], "repo": [47, 821], "ivy_model": 47, "run": [47, 822, 825, 828, 836, 846], "let": 48, "we": [48, 846], "ar": 48, "mnist": 48, "thi": 48, "temporari": 48, "loader": 48, "util": [48, 72, 95, 389, 649, 787, 805], "plot": 48, "save": [48, 771, 854], "huggingfac": 49, "deit": 49, "can": 49, "html": 49, "file": 49, "browser": [49, 822], "interfac": 50, "telemetri": 50, "18": 51, "activ": [52, 74, 368, 627, 789], "convers": [53, 76, 840], "creation": [54, 77, 370, 630], "elementwis": [57, 80, 108, 373, 633], "experiment": [58, 81, 634, 820], "gener": [59, 82, 374, 635, 779, 841, 846, 849, 865], "gradient": [60, 83, 350, 375, 636, 841], "layer": [62, 85, 376, 637, 793], "linear": [63, 86, 377, 638, 661], "algebra": [63, 86, 377, 638], "manipul": [65, 88, 379, 640], "norm": [66, 89, 382, 643, 796], "random": [67, 90, 383, 644], "search": [68, 91, 384, 645], "sort": [70, 93, 386, 647, 757], "wrap": [73, 96, 840], "cp": 98, "tensor": [98, 99, 100, 101, 102, 105], "parafac2": 99, "tr": 100, "tt": 101, "tucker": [102, 452], "contain": [104, 822, 829, 854], "factor": 105, "nest": [106, 381, 642], "gelu": 111, "hardswish": 112, "leaky_relu": 113, "log_softmax": 114, "mish": 115, "relu": 116, "sigmoid": 117, "softmax": 118, "softplu": 119, "softsign": 120, "cmp_i": 121, "cmp_isnot": 122, "for_loop": 123, "if_els": 124, "try_except": 125, "while_loop": 126, "arang": 127, "asarrai": 129, "copy_arrai": 130, "empti": 131, "empty_lik": 132, "ey": 133, "from_dlpack": 134, "note": [134, 145, 630], "frombuff": 135, "full": [136, 844], "full_lik": 137, "linspac": 138, "logspac": 139, "meshgrid": 140, "native_arrai": 141, "one_hot": 142, "ones": 143, "ones_lik": 144, "to_dlpack": 145, "tril": 146, "triu": 147, "triu_indic": 148, "zero": 149, "zeros_lik": 150, "as_ivy_dtyp": 151, "as_native_dtyp": 152, "astyp": 153, "broadcast_arrai": 154, "broadcast_to": 155, "can_cast": 156, "check_float": 157, "closest_valid_dtyp": 158, "default_complex_dtyp": 159, "default_dtyp": 160, "default_float_dtyp": 161, "default_int_dtyp": 162, "default_uint_dtyp": 163, "dtype": [164, 778, 838], "dtype_bit": 165, "finfo": 166, "function_supported_dtyp": 167, "function_unsupported_dtyp": 168, "iinfo": 169, "infer_default_dtyp": 170, "invalid_dtyp": 171, "is_bool_dtyp": 172, "is_complex_dtyp": 173, "is_float_dtyp": 174, "is_hashable_dtyp": 175, "is_int_dtyp": 176, "is_native_dtyp": 177, "is_uint_dtyp": 178, "promote_typ": 179, "promote_types_of_input": 180, "result_typ": 181, "set_default_complex_dtyp": 182, "set_default_dtyp": 183, "set_default_float_dtyp": 184, "set_default_int_dtyp": 185, "set_default_uint_dtyp": 186, "type_promote_arrai": 187, "unset_default_complex_dtyp": 188, "unset_default_dtyp": 189, "unset_default_float_dtyp": 190, "unset_default_int_dtyp": 191, "unset_default_uint_dtyp": 192, "valid_dtyp": 193, "as_ivy_dev": 194, "as_native_dev": 195, "clear_cached_mem_on_dev": 196, "default_devic": 197, "dev": 198, "dev_util": 199, "function_supported_devic": 200, "function_unsupported_devic": 201, "get_all_ivy_arrays_on_dev": 202, "gpu_is_avail": 203, "handle_soft_device_vari": 204, "num_cpu_cor": 205, "num_gpu": 206, "num_ivy_arrays_on_dev": 207, "percent_used_mem_on_dev": 208, "print_all_ivy_arrays_on_dev": 209, "set_default_devic": 210, "set_soft_device_mod": 211, "paramet": [211, 579, 580, 585, 586, 588, 589, 632, 635, 784, 789, 848], "set_split_factor": 212, "split_factor": 213, "split_func_cal": 214, "to_devic": 215, "total_mem_on_dev": 216, "tpu_is_avail": 217, "unset_default_devic": 218, "unset_soft_device_mod": 219, "used_mem_on_dev": 220, "ab": 221, "aco": 222, "acosh": 223, "add": [224, 833, 844, 878], "angl": 225, "asin": 226, "asinh": 227, "atan": 228, "atan2": 229, "atanh": 230, "bitwise_and": 231, "bitwise_invert": 232, "bitwise_left_shift": 233, "bitwise_or": 234, "bitwise_right_shift": 235, "bitwise_xor": 236, "ceil": 237, "co": 238, "cosh": 239, "deg2rad": 240, "divid": 241, "equal": 242, "erf": 243, "exp": 244, "exp2": 245, "expm1": 246, "floor": 247, "floor_divid": 248, "fmin": 249, "fmod": 250, "gcd": 251, "greater": 252, "greater_equ": 253, "isfinit": 255, "isinf": 256, "isnan": 257, "isreal": 258, "lcm": 259, "less": 260, "less_equ": 261, "log": [262, 811, 821], "log10": 263, "log1p": 264, "log2": 265, "logaddexp": 266, "logaddexp2": 267, "logical_and": 268, "logical_not": 269, "logical_or": 270, "logical_xor": 271, "maximum": 272, "minimum": 273, "multipli": 274, "nan_to_num": 275, "neg": 276, "not_equ": 277, "posit": [278, 838], "pow": 279, "rad2deg": 280, "real": 281, "reciproc": 282, "remaind": 283, "sign": 285, "sin": 286, "sinh": 287, "sqrt": 288, "squar": 289, "subtract": 290, "tan": [291, 833, 844], "tanh": 292, "trapz": 293, "trunc": 294, "trunc_divid": 295, "celu": 296, "elu": 297, "hardshrink": 298, "hardsilu": 299, "hardtanh": 300, "logit": 301, "logsigmoid": 302, "prelu": 303, "relu6": 304, "scaled_tanh": 305, "selu": 306, "silu": 307, "softshrink": 308, "stanh": 309, "tanhshrink": 310, "threshold": 311, "thresholded_relu": 312, "blackman_window": 313, "eye_lik": 314, "hamming_window": 315, "hann_window": 316, "indic": 317, "kaiser_bessel_derived_window": 318, "kaiser_window": 319, "mel_weight_matrix": 320, "ndenumer": 321, "ndindex": 322, "polyv": 323, "random_cp": 324, "random_parafac2": 325, "random_tr": 326, "random_tt": 327, "random_tuck": 328, "tril_indic": 329, "trilu": 330, "unsorted_segment_mean": 331, "unsorted_segment_min": 332, "unsorted_segment_sum": 333, "vorbis_window": 334, "allclos": 335, "amax": 336, "amin": 337, "binar": 338, "conj": 339, "copysign": 340, "count_nonzero": 341, "diff": 342, "digamma": 343, "erfc": 344, "erfinv": 345, "fix": [346, 820, 836], "float_pow": 347, "fmax": 348, "frexp": 349, "hypot": 351, "isclos": 352, "ldexp": 353, "lerp": 354, "lgamma": 355, "modf": 356, "nansum": 357, "nextaft": 358, "signbit": 359, "sinc": 360, "sparsify_tensor": 361, "xlogi": 362, "zeta": 363, "reduc": 364, "bind_custom_gradient_funct": 365, "jvp": 366, "vjp": 367, "constant": [369, 628], "meta": [380, 641], "spars": 387, "adaptive_avg_pool1d": 390, "adaptive_avg_pool2d": 391, "adaptive_max_pool2d": 392, "adaptive_max_pool3d": 393, "area_interpol": 394, "avg_pool1d": 395, "avg_pool2d": 396, "avg_pool3d": 397, "dct": 398, "dft": 399, "dropout1d": 400, "dropout2d": 401, "dropout3d": 402, "embed": 403, "fft": 404, "fft2": 405, "generate_einsum_equ": 406, "get_interpolate_kernel": 407, "idct": 408, "ifft": 409, "ifftn": 410, "interp": 411, "interpol": 412, "max_pool1d": 413, "max_pool2d": 414, "max_pool3d": 415, "max_unpool1d": 416, "nearest_interpol": 417, "pool": 418, "reduce_window": 419, "rfft": 420, "rfftn": 421, "rnn": 422, "sliding_window": 423, "stft": 424, "adjoint": 425, "batched_out": 426, "cond": 427, "diagflat": 428, "dot": 429, "eig": [430, 673], "eigh_tridiagon": 431, "eigval": 432, "general_inner_product": 433, "higher_order_mo": 434, "initialize_tuck": 435, "khatri_rao": 436, "kron": 437, "kroneck": 438, "lu_factor": 439, "lu_solv": 440, "make_svd_non_neg": 441, "matrix_exp": 442, "mode_dot": 443, "multi_dot": 444, "multi_mode_dot": 445, "partial_tuck": 446, "solve_triangular": 447, "svd_flip": 448, "tensor_train": 449, "truncated_svd": 450, "tt_matrix_to_tensor": 451, "hinge_embedding_loss": 453, "huber_loss": 454, "kl_div": 455, "l1_loss": 456, "log_poisson_loss": 457, "poisson_nll_loss": 458, "smooth_l1_loss": 459, "soft_margin_loss": 460, "as_strid": 461, "associative_scan": 462, "atleast_1d": 463, "atleast_2d": 464, "atleast_3d": 465, "broadcast_shap": 466, "check_scalar": 467, "choos": 468, "column_stack": 469, "concat_from_sequ": 470, "dsplit": 471, "dstack": 472, "expand": 473, "fill_diagon": 474, "flatten": 475, "fliplr": 476, "flipud": 477, "fold": 478, "heavisid": 479, "hsplit": 480, "hstack": 481, "i0": 482, "matric": 483, "moveaxi": 484, "pad": 485, "partial_fold": 486, "partial_tensor_to_vec": 487, "partial_unfold": 488, "partial_vec_to_tensor": 489, "put_along_axi": 490, "rot90": 491, "soft_threshold": 492, "take": 493, "take_along_axi": 494, "top_k": 495, "trim_zero": 496, "unflatten": 497, "unfold": 498, "unique_consecut": 499, "vsplit": 500, "vstack": 501, "batch_norm": 502, "group_norm": 503, "instance_norm": 504, "l1_normal": 505, "l2_normal": 506, "local_response_norm": 507, "lp_normal": 508, "bernoulli": 509, "beta": 510, "dirichlet": 511, "gamma": 512, "poisson": 513, "unravel_index": 514, "invert_permut": 515, "lexsort": 516, "is_ivy_sparse_arrai": 517, "is_native_sparse_arrai": 518, "native_sparse_arrai": 519, "native_sparse_array_to_indices_values_and_shap": 520, "bincount": 521, "corrcoef": 522, "cov": 523, "cummax": 524, "cummin": 525, "histogram": 526, "igamma": 527, "median": 528, "nanmean": 529, "nanmedian": 530, "nanmin": 531, "nanprod": 532, "quantil": 533, "optional_get_el": 534, "all_equ": 535, "arg_info": 536, "arg_nam": 537, "array_equ": 538, "assert_supports_inplac": 539, "cache_fn": 540, "clip_matrix_norm": 541, "clip_vector_norm": 542, "container_typ": 543, "current_backend_str": 544, "einops_rearrang": 546, "einops_reduc": 547, "einops_repeat": 548, "exist": [549, 816, 845], "fourier_encod": 550, "function_supported_devices_and_dtyp": 551, "function_unsupported_devices_and_dtyp": 552, "gather": 553, "gather_nd": 554, "get_all_arrays_in_memori": 555, "get_item": 556, "get_num_dim": 557, "get_referrers_recurs": 558, "has_nan": 559, "inplace_arrays_support": 560, "inplace_decr": 561, "inplace_incr": 562, "inplace_upd": 563, "inplace_variables_support": 564, "is_arrai": 565, "is_ivy_arrai": 566, "is_ivy_contain": 567, "is_ivy_nested_arrai": 568, "is_native_arrai": 569, "isin": 570, "isscalar": 571, "items": 572, "match_kwarg": 573, "multiprocess": [574, 781], "num_arrays_in_memori": 575, "print_all_arrays_in_memori": 576, "scatter_flat": 577, "scatter_nd": 578, "set_array_mod": 579, "set_exception_trace_mod": 580, "set_inplace_mod": 581, "set_item": 582, "set_min_bas": 583, "set_min_denomin": 584, "set_nestable_mod": 585, "set_precise_mod": 586, "set_queue_timeout": 587, "set_shape_array_mod": 588, "set_show_func_wrapper_trace_mod": 589, "set_tmp_dir": 590, "shape": [591, 646, 750, 751, 752, 753, 840, 857], "size": [592, 857], "stable_divid": 593, "stable_pow": 594, "stride": 595, "supports_inplace_upd": 596, "to_ivy_shap": 597, "to_list": 598, "to_native_shap": 599, "to_numpi": 600, "to_scalar": 601, "try_else_non": 602, "unset_array_mod": 603, "unset_exception_trace_mod": 604, "unset_inplace_mod": 605, "unset_min_bas": 606, "unset_min_denomin": 607, "unset_nestable_mod": 608, "unset_precise_mod": 609, "unset_queue_timeout": 610, "unset_shape_array_mod": 611, "unset_show_func_wrapper_trace_mod": 612, "unset_tmp_dir": 613, "value_is_nan": 614, "vmap": 615, "adam_step": 616, "adam_upd": 617, "execute_with_gradi": [618, 841], "grad": 619, "gradient_descent_upd": 620, "jac": 621, "lamb_upd": 622, "lars_upd": 623, "optimizer_upd": 624, "stop_gradi": 625, "value_and_grad": 626, "control": [629, 857], "flow": [629, 857], "op": 629, "depend": [646, 750, 751, 752, 753], "output": [646, 750, 751, 752, 753], "conv": 650, "conv1d": 651, "conv1d_transpos": 652, "conv2d": 653, "conv2d_transpos": 654, "conv3d": 655, "conv3d_transpos": 656, "conv_general_dil": 657, "conv_general_transpos": 658, "depthwise_conv2d": 659, "dropout": 660, "lstm": 662, "lstm_updat": 663, "multi_head_attent": 664, "nm": 665, "roi_align": 666, "scaled_dot_product_attent": 667, "choleski": 668, "cross": 669, "det": 670, "diag": 671, "diagon": 672, "eigh": 674, "eigvalsh": 675, "inner": 676, "inv": 677, "matmul": 678, "matrix_norm": 679, "matrix_pow": 680, "matrix_rank": 681, "matrix_transpos": 682, "outer": 683, "pinv": 684, "qr": 685, "slogdet": 686, "solv": 687, "svd": 688, "svdval": 689, "tensordot": 690, "tensorsolv": 691, "vander": 693, "vecdot": 694, "vector_norm": 695, "vector_to_skew_symmetric_matrix": 696, "binary_cross_entropi": 697, "cross_entropi": 698, "sparse_cross_entropi": 699, "clip": 700, "concat": 701, "constant_pad": 702, "expand_dim": 703, "flip": 704, "permute_dim": 705, "repeat": 706, "reshap": 707, "roll": [708, 833], "squeez": 710, "stack": [711, 835], "swapax": 712, "tile": 713, "unstack": 714, "zero_pad": 715, "fomaml_step": 716, "maml_step": 717, "reptile_step": 718, "all_nested_indic": 719, "copy_nest": 720, "duplicate_array_index_chain": 721, "index_nest": 722, "insert_into_nest_at_index": 723, "insert_into_nest_at_indic": 724, "map": [725, 830], "map_nest_at_index": 726, "map_nest_at_indic": 727, "multi_index_nest": 728, "nested_ani": 729, "nested_argwher": 730, "nested_map": 731, "nested_multi_map": 732, "prune_empti": 733, "prune_nest_at_index": 734, "prune_nest_at_indic": 735, "set_nest_at_index": 736, "set_nest_at_indic": 737, "layer_norm": 738, "multinomi": 739, "randint": 740, "random_norm": 741, "random_uniform": 742, "seed": 743, "shuffl": 744, "argmax": 745, "argmin": 746, "argwher": 747, "nonzero": 748, "where": [749, 820, 836], "unique_al": 750, "unique_count": 751, "unique_invers": 752, "unique_valu": 753, "argsort": 754, "msort": 755, "searchsort": 756, "cumprod": 758, "cumsum": 759, "einsum": [760, 807, 808], "max": 761, "mean": 762, "min": 763, "prod": 764, "std": 765, "sum": 766, "var": 767, "assert": [772, 799, 835], "avail": 773, "global": [775, 848], "hypothesi": [776, 821, 844, 846], "struct": 783, "flag": 784, "sequenti": 798, "ast": 801, "sub": 803, "binari": [804, 821], "parser": 807, "path": 808, "except": [809, 835, 840], "profil": 812, "verbos": 813, "between": 814, "start": [814, 858], "work": [814, 845, 862, 868], "document": 814, "contribut": [814, 815, 820, 845], "commun": 814, "citat": 814, "doc": [816, 828], "docker": [816, 821, 822, 828, 858], "conveni": [816, 828, 839], "script": [816, 828], "hub": 816, "local": [816, 822, 837], "without": [816, 844], "contributor": [817, 823, 880], "reward": 817, "badg": 817, "tier": 817, "error": [818, 835, 836], "handl": [818, 826, 832, 835, 840, 857], "help": [819, 822, 836], "resourc": 819, "open": 820, "task": 820, "fail": [820, 836, 846], "frontend": [820, 827, 843, 844, 856], "place": 820, "checklist": 820, "format": [820, 837, 871, 878], "extend": [820, 846, 849], "an": [820, 841], "issu": [820, 822, 837, 858], "github": [820, 821], "templat": 820, "fork": [821, 822], "commit": [821, 822, 830, 837], "pycharm": [821, 822, 837], "virtual": 821, "miniconda": 821, "venv": 821, "interpret": 821, "window": 821, "maco": 821, "ubuntu": 821, "detail": 821, "free": 821, "wsl": 821, "codespac": 821, "The": [821, 822, 828, 841, 843, 853, 857, 862], "list": 822, "manag": 822, "who": 822, "ask": [822, 836], "With": 822, "command": 822, "pull": [822, 830], "request": [822, 830], "small": 822, "often": 822, "interact": 822, "most": 822, "out": [822, 838, 840, 842], "id": [822, 825], "program": 823, "core": [823, 880], "rise": [823, 880], "deep": 824, "dive": 824, "termin": 825, "regener": 825, "failur": 825, "skip": 825, "integr": [826, 830, 837, 845, 846], "version": [827, 847, 857], "support": [827, 831, 840, 843, 857], "builder": 828, "being": 828, "option": 828, "index": 828, "rst": 828, "partial_conf": 828, "py": 828, "prebuild": 828, "sh": 828, "extens": 828, "custom_autosummari": 828, "hide": 828, "discussion_link": 828, "skippable_funct": 828, "ivy_data": 828, "instanc": [829, 843, 844, 853], "method": [829, 843, 844, 853, 854], "special": [829, 831, 843], "nestabl": [829, 838, 839, 840], "continu": [830, 837], "push": 830, "pr": 830, "trigger": 830, "A": [830, 849], "down": 830, "view": [830, 840, 842], "store": 830, "retriev": 830, "repositori": 830, "nitti": 830, "gritti": 830, "storag": 830, "space": 830, "unifyai": 830, "determin": 830, "coverag": 830, "workflow": 830, "multipl": 830, "runner": 830, "race": 830, "condit": 830, "period": 830, "manual": 830, "dispatch": 830, "ci": 830, "dashboard": 830, "promot": [831, 843], "precis": 831, "non": [831, 849], "argument": [831, 832, 838, 840, 842, 843], "other": [831, 832], "unsupport": 831, "attribut": [831, 848], "case": [831, 854], "bug": 831, "cast": [831, 843], "superset": [831, 849], "docstr": [833, 834], "func_wrapp": 835, "prune": 835, "handle_except": 835, "consist": [835, 846], "prerequir": 836, "common": [836, 837], "lint": [837, 845], "keyword": 838, "integ": 838, "primari": 839, "composit": 839, "mix": [839, 840, 846], "partial": [839, 840, 846], "order": 840, "wrapper": [840, 878, 879], "miscellan": 840, "overview": [841, 845], "usag": [841, 845, 849, 867], "signatur": 841, "design": [841, 847, 850], "our": 841, "polici": [841, 843], "specif": [841, 876, 877, 878], "consider": 841, "inplac": 842, "updat": 842, "copi": 842, "short": 843, "unus": 843, "rule": 843, "duplic": [843, 849], "alia": 844, "formatt": 845, "functionorderingformatt": 845, "own": 846, "strategi": 846, "ad": 846, "explicit": 846, "do": [846, 862], "effect": 846, "bonu": 846, "self": 846, "test_array_funct": 846, "re": [846, 863], "navig": 847, "categor": 847, "submodul": 847, "unpin": 847, "properti": 848, "getter": 848, "setter": 848, "set_": 848, "unset_": 848, "behaviour": 849, "what": [849, 878], "effici": 849, "maxim": 849, "block": 851, "monkei": 853, "patch": 853, "represent": 854, "recurs": 854, "built": 854, "ins": 854, "access": 854, "compartment": 854, "role": 856, "faq": 857, "maintain": 857, "deploy": 857, "auto": 857, "differenti": 857, "replica": 857, "parallel": 857, "altern": 857, "pip": 858, "folder": 858, "kei": 858, "question": 858, "glossari": 859, "motiv": 860, "explos": 861, "skeptic": 862, "complimentari": 862, "competit": 862, "infinit": 863, "shelf": 863, "life": 863, "One": 864, "liner": 864, "trace_graph": 865, "cach": 865, "sharp": [865, 866, 867], "bit": [865, 866, 867], "relat": 868, "infrastructur": [870, 878], "llvm": 870, "mlir": 870, "oneapi": 870, "exchang": [871, 878], "onnx": 871, "nnef": 871, "coreml": 871, "matlab": 872, "scipi": 872, "scikit": 872, "theano": 872, "panda": 872, "julia": 872, "apach": [872, 875], "spark": 872, "mllib": 872, "caff": 872, "chainer": 872, "mxnet": 872, "cntk": 872, "flux": 872, "dex": 872, "languag": 872, "tf": 873, "jaxpr": 873, "jit": 873, "fx": 873, "compani": [874, 878], "quansight": 874, "modular": 874, "octoml": 874, "multi": [875, 878], "vendor": [875, 876, 877, 878], "tvm": 875, "xla": 875, "gcc": 875, "tensorrt": 876, "cuda": 876, "icc": 877, "icx": 877, "nvcc": 877, "doe": 878, "eagerpi": 879, "kera": 879, "thinc": 879, "tensorli": 879, "neuropod": 879, "leaderboard": 880}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"is_native_dtype": [[177, "is-native-dtype"]], "default_dtype": [[160, "default-dtype"]], "promote_types": [[179, "promote-types"]], "iinfo": [[169, "iinfo"]], "is_int_dtype": [[176, "is-int-dtype"]], "dtype": [[164, "dtype"]], "is_bool_dtype": [[172, "is-bool-dtype"]], "linspace": [[138, "linspace"]], "broadcast_to": [[155, "broadcast-to"]], "is_complex_dtype": [[173, "is-complex-dtype"]], "function_supported_dtypes": [[167, "function-supported-dtypes"]], "to_dlpack": [[145, "to-dlpack"]], "Note": [[145, null], [134, null], [630, null], [630, null]], "default_int_dtype": [[162, "default-int-dtype"]], "zeros": [[149, "zeros"]], "meshgrid": [[140, "meshgrid"]], "ones_like": [[144, "ones-like"]], "infer_default_dtype": [[170, "infer-default-dtype"]], "is_uint_dtype": [[178, "is-uint-dtype"]], "astype": [[153, "astype"]], "one_hot": [[142, "one-hot"]], "broadcast_arrays": [[154, "broadcast-arrays"]], "tril": [[146, "tril"]], "can_cast": [[156, "can-cast"]], "triu_indices": [[148, "triu-indices"]], "result_type": [[181, "result-type"]], "is_float_dtype": [[174, "is-float-dtype"]], "set_default_dtype": [[183, "set-default-dtype"]], "native_array": [[141, "native-array"]], "as_native_dtype": [[152, "as-native-dtype"]], "default_complex_dtype": [[159, "default-complex-dtype"]], "finfo": [[166, "finfo"]], "zeros_like": [[150, "zeros-like"]], "check_float": [[157, "check-float"]], "triu": [[147, "triu"]], "logspace": [[139, "logspace"]], "default_uint_dtype": [[163, "default-uint-dtype"]], "promote_types_of_inputs": [[180, "promote-types-of-inputs"]], "closest_valid_dtype": [[158, "closest-valid-dtype"]], "invalid_dtype": [[171, "invalid-dtype"]], "dtype_bits": [[165, "dtype-bits"]], "set_default_complex_dtype": [[182, "set-default-complex-dtype"]], "is_hashable_dtype": [[175, "is-hashable-dtype"]], "default_float_dtype": [[161, "default-float-dtype"]], "as_ivy_dtype": [[151, "as-ivy-dtype"]], "ones": [[143, "ones"]], "function_unsupported_dtypes": [[168, "function-unsupported-dtypes"]], "Wrapper Frameworks": [[879, "wrapper-frameworks"], [878, "wrapper-frameworks"]], "EagerPy eagerpy": [[879, "eagerpy-eagerpy"]], "Keras keras": [[879, "keras-keras"]], "Thinc thinc": [[879, "thinc-thinc"]], "TensorLy tensorly": [[879, "tensorly-tensorly"]], "NeuroPod": [[879, "id1"]], "Vendor-Specific Compilers": [[877, "vendor-specific-compilers"], [878, "vendor-specific-compilers"]], "ICC": [[877, "id1"]], "ICX": [[877, "icx"]], "NVCC": [[877, "nvcc"]], "ML-Unifying Companies": [[874, "ml-unifying-companies"], [878, "ml-unifying-companies"]], "Quansight": [[874, "id1"]], "Modular": [[874, "id2"]], "OctoML": [[874, "id3"]], "Contributor Leaderboard": [[880, "contributor-leaderboard"]], "Top Contributors": [[880, "top-contributors"]], "Rising Contributors": [[880, "rising-contributors"]], "Core Contributors": [[880, "core-contributors"]], "Contributors": [[880, "contributors"]], "Vendor-Specific APIs": [[876, "vendor-specific-apis"], [878, "vendor-specific-apis"]], "TensorRT tensorrt": [[876, "tensorrt-tensorrt"]], "CUDA cuda": [[876, "cuda-cuda"]], "Multi-Vendor Compiler Frameworks": [[875, "multi-vendor-compiler-frameworks"], [878, "multi-vendor-compiler-frameworks"]], "Apache TVM": [[875, "apache-tvm"]], "XLA": [[875, "xla"]], "GCC": [[875, "gcc"]], "What does Ivy Add?": [[878, "what-does-ivy-add"]], "API Standards": [[878, "api-standards"], [869, "api-standards"]], "Frameworks": [[878, "frameworks"], [872, "frameworks"]], "Graph Tracers": [[878, "graph-tracers"], [873, "graph-tracers"]], "Exchange Formats": [[878, "exchange-formats"], [871, "exchange-formats"]], "Compiler Infrastructure": [[878, "compiler-infrastructure"], [870, "compiler-infrastructure"]], "Array API Standard": [[869, "id1"]], "Table:": [[869, "table"]], "One liners": [[864, "one-liners"]], "Operating Modes": [[848, "operating-modes"]], "Global Parameter Properties": [[848, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[848, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[848, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Why Unify?": [[863, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[863, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[863, "infinite-shelf-life"]], "Continuous Integration": [[830, "continuous-integration"], [837, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[830, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[830, "ivy-tests"], [846, "ivy-tests"]], "Implementation": [[830, "implementation"]], "A Top-Down View": [[830, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[830, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[830, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[830, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[830, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[830, "determine-test-coverage-workflow"]], "Multiple Runners": [[830, "multiple-runners"]], "Race Condition": [[830, "race-condition"]], "Array API Tests": [[830, "array-api-tests"], [825, "array-api-tests"]], "Periodic Testing": [[830, "periodic-testing"]], "Manually Dispatched Workflows": [[830, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[830, "ci-pipeline"]], "Push": [[830, "push"]], "Pull Request": [[830, "pull-request"]], "Dashboard": [[830, "dashboard"]], "ONNX onnx": [[871, "onnx-onnx"]], "NNEF nnef": [[871, "nnef-nnef"]], "CoreML coreml": [[871, "coreml-coreml"]], "Data Types": [[831, "data-types"]], "Data Type Module": [[831, "data-type-module"]], "Data Type Promotion": [[831, "data-type-promotion"]], "Precise Mode": [[831, "precise-mode"]], "Precise Promotion Table": [[831, "precise-promotion-table"]], "Non-Precise Promotion Table": [[831, "non-precise-promotion-table"]], "Arguments in other Functions": [[831, "arguments-in-other-functions"], [832, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[831, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[831, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[831, "special-case"]], "Backend Data Type Bugs": [[831, "backend-data-type-bugs"]], "Data Type Casting Modes": [[831, "data-type-casting-modes"]], "Superset Data Type Support": [[831, "superset-data-type-support"]], "Testing Pipeline": [[846, "testing-pipeline"]], "Hypothesis": [[846, "id2"]], "Data Generation": [[846, "id3"]], "Writing your own strategy": [[846, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[846, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[846, "ivy-test-decorators"]], "Writing Ivy Tests": [[846, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[846, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[846, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[846, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[846, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[846, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[846, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[846, "self-consistent-and-explicit-testing"]], "test_array_function": [[846, "id5"]], "Running Ivy Tests": [[846, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[846, "re-running-failed-ivy-tests"]], "Building the Docs Pipeline": [[828, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[828, "how-the-doc-builder-is-being-run"]], "The convenience script": [[828, "the-convenience-script"]], "Options": [[828, "options"]], "The Docker image": [[828, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[828, "how-ivy-s-docs-is-structured"]], "index.rst": [[828, "index-rst"]], "partial_conf.py": [[828, "partial-conf-py"]], "prebuild.sh": [[828, "prebuild-sh"]], "Custom Extensions": [[828, "custom-extensions"]], "custom_autosummary": [[828, "custom-autosummary"]], ":hide-table:": [[828, "hide-table"]], "discussion_linker": [[828, "discussion-linker"]], "skippable_function": [[828, "skippable-function"]], "ivy_data": [[828, "ivy-data"]], "ML Explosion": [[861, "ml-explosion"]], "Inplace Updates": [[842, "inplace-updates"]], "out argument": [[842, "out-argument"]], "copy argument": [[842, "copy-argument"]], "Views": [[842, "views"]], "Navigating the Code": [[847, "navigating-the-code"]], "Categorization": [[847, "categorization"]], "Submodule Design": [[847, "submodule-design"]], "Ivy API": [[847, "ivy-api"]], "Backend API": [[847, "backend-api"]], "Submodule Helper Functions": [[847, "submodule-helper-functions"]], "Version Unpinning": [[847, "version-unpinning"]], "LLVM": [[870, "id1"]], "MLIR": [[870, "id2"]], "OneAPI": [[870, "id3"]], "Formatting": [[837, "formatting"]], "Lint Checks": [[837, "lint-checks"], [837, "id2"]], "Setup Formatting Locally": [[837, "setup-formatting-locally"]], "Pre-commit": [[837, "pre-commit"]], "VS Code": [[837, "vs-code"]], "PyCharm": [[837, "pycharm"], [821, "pycharm"]], "Common Issues with Pre-Commit": [[837, "common-issues-with-pre-commit"]], "Lint Formatting": [[837, "lint-formatting"]], "Motivation": [[860, "motivation"]], "Building Blocks": [[851, "building-blocks"]], "Backend Functional APIs \u2705": [[851, "backend-functional-apis"]], "Ivy Functional API \u2705": [[851, "ivy-functional-api"]], "Backend Handler \u2705": [[851, "backend-handler"]], "Tracer \ud83d\udea7": [[851, "tracer"]], "Fix Failing Tests:": [[836, "fix-failing-tests"]], "Prerequirement:": [[836, "prerequirement"]], "Setting Up": [[836, "setting-up"], [821, "setting-up"]], "How to run tests": [[836, "how-to-run-tests"]], "Common Errors": [[836, "common-errors"]], "Where to ask for Help": [[836, "where-to-ask-for-help"]], "Containers": [[829, "containers"]], "Container Instance Methods": [[829, "container-instance-methods"]], "API Instance Methods": [[829, "api-instance-methods"]], "API Special Methods": [[829, "api-special-methods"]], "Nestable Functions": [[829, "nestable-functions"], [838, "nestable-functions"], [839, "nestable-functions"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[845, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[845, "overview"], [841, "overview"]], "Existing Formatters": [[845, "existing-formatters"]], "FunctionOrderingFormatter": [[845, "functionorderingformatter"]], "How the Formatter Works:": [[845, "how-the-formatter-works"]], "Integration and Usage": [[845, "integration-and-usage"]], "Contribution": [[845, "contribution"]], "Round Up": [[845, "round-up"], [37, "Round-Up"], [24, "Round-Up"], [25, "Round-Up"], [19, "Round-Up"], [28, "Round-Up"], [36, "Round-Up"], [38, "Round-Up"], [26, "Round-Up"], [23, "Round-Up"], [34, "Round-Up"], [29, "Round-Up"], [35, "Round-Up"], [27, "Round-Up"], [17, "Round-Up"], [33, "Round-Up"], [39, "Round-Up"], [46, "Round-Up"]], "tf.Graph": [[873, "tf-graph"]], "Jaxpr": [[873, "jaxpr"]], "torch.jit": [[873, "torch-jit"]], "torch.fx": [[873, "torch-fx"]], "Ivy as a Transpiler": [[856, "ivy-as-a-transpiler"], [32, "Ivy-as-a-Transpiler"], [33, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[856, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[856, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[856, "converting-network-models"]], "Ivy Frontend Tests": [[844, "ivy-frontend-tests"]], "Introduction": [[844, "introduction"], [843, "introduction"], [47, "Introduction"]], "Frontend Test Examples": [[844, "frontend-test-examples"]], "ivy.tan()": [[844, "ivy-tan"]], "ivy.full()": [[844, "ivy-full"]], "Testing Without Using Tests Values": [[844, "testing-without-using-tests-values"]], "Alias functions": [[844, "alias-functions"]], "Frontend Instance Method Tests": [[844, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[844, "frontend-instance-method-test-examples"]], "ivy.add()": [[844, "ivy-add"]], "Hypothesis Helpers": [[844, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[844, "frontend-framework-testing-configuration"]], "Exception Handling": [[835, "exception-handling"], [840, "exception-handling"]], "Ivy Exception Class": [[835, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[835, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[835, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[835, "handle-exceptions-decorator"]], "Consistency in Errors": [[835, "consistency-in-errors"]], "Assertion Function": [[835, "assertion-function"]], "Ivy Stateful API": [[855, "ivy-stateful-api"], [32, "Ivy-Stateful-API"], [23, "Ivy-Stateful-API"]], "Modules": [[855, "modules"]], "Initializers": [[855, "initializers"], [792, "module-ivy.stateful.initializers"]], "Optimizers": [[855, "optimizers"], [797, "module-ivy.stateful.optimizers"]], "Ivy as a Framework": [[852, "ivy-as-a-framework"], [32, "Ivy-as-a-Framework"]], "ivy.trace_graph()": [[865, "ivy-trace-graph"]], "Tracer API": [[865, "tracer-api"]], "Using the tracer": [[865, "using-the-tracer"]], "Eager vs lazy Compilation": [[865, "eager-vs-lazy-compilation"]], "Array caching": [[865, "array-caching"]], "Generators": [[865, "generators"]], "Stateful": [[865, "stateful"]], "Sharp bits": [[865, "sharp-bits"], [866, "sharp-bits"], [867, "sharp-bits"]], "Examples": [[865, "examples"], [838, "examples"], [866, "examples"], [867, "examples"]], "Ivy Frontends": [[843, "ivy-frontends"]], "The Frontend Basics": [[843, "the-frontend-basics"]], "Writing Frontend Functions": [[843, "writing-frontend-functions"]], "Short Frontend Implementations": [[843, "short-frontend-implementations"]], "Unused Arguments": [[843, "unused-arguments"]], "Supported Data Types and Devices": [[843, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[843, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[843, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[843, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[843, "frontends-duplicate-policy"]], "Function Wrapping": [[840, "function-wrapping"]], "Decorator order": [[840, "decorator-order"]], "Conversion Wrappers": [[840, "conversion-wrappers"]], "Inference Wrappers": [[840, "inference-wrappers"]], "Out Argument Support": [[840, "out-argument-support"]], "Nestable Support": [[840, "nestable-support"]], "Partial Mixed Function Support": [[840, "partial-mixed-function-support"]], "Shape Conversion": [[840, "shape-conversion"]], "View Handling": [[840, "view-handling"]], "Miscellaneous Wrappers": [[840, "miscellaneous-wrappers"]], "Function Arguments": [[838, "function-arguments"]], "Positional and Keyword Arguments": [[838, "positional-and-keyword-arguments"]], "Input Arrays": [[838, "input-arrays"]], "out Argument": [[838, "out-argument"]], "dtype and device arguments": [[838, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[838, "numbers-in-operator-functions"]], "Integer Sequences": [[838, "integer-sequences"]], "Get Started": [[858, "get-started"]], "Installing using pip": [[858, "installing-using-pip"]], "Docker": [[858, "docker"]], "Installing from source": [[858, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[858, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[858, "ivy-folder"]], "Setting Up the API key": [[858, "setting-up-the-api-key"]], "Issues and Questions": [[858, "issues-and-questions"]], "MATLAB matlab": [[872, "matlab-matlab"]], "SciPy scipy": [[872, "scipy-scipy"]], "Torch torch": [[872, "torch-torch"]], "NumPy numpy": [[872, "numpy-numpy"]], "SciKit Learn scikit-learn": [[872, "scikit-learn-scikit-learn"]], "Theano theano": [[872, "theano-theano"]], "Pandas pandas": [[872, "pandas-pandas"]], "Julia julia": [[872, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[872, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[872, "caffe-caffe"]], "Chainer chainer": [[872, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[872, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[872, "mxnet-mxnet"]], "CNTK cntk": [[872, "cntk-cntk"]], "PyTorch pytorch": [[872, "pytorch-pytorch"]], "Flux flux": [[872, "flux-flux"]], "JAX jax": [[872, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[872, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[872, "dex-language-dex-language"]], "Ivy Container": [[854, "ivy-container"]], "Construction": [[854, "construction"]], "Representation": [[854, "representation"]], "Recursive Methods": [[854, "recursive-methods"]], "Built-ins": [[854, "built-ins"]], "Access": [[854, "access"]], "Saving and Loading": [[854, "saving-and-loading"]], "Comparisons": [[854, "comparisons"]], "Customized Representations": [[854, "customized-representations"]], "Use Cases": [[854, "use-cases"]], "Compartmentalization": [[854, "compartmentalization"]], "Configuration": [[854, "configuration"]], "Data loading": [[854, "data-loading"]], "Network weights": [[854, "network-weights"]], "Docstrings": [[834, "docstrings"]], "Superset Behaviour": [[849, "superset-behaviour"]], "Extending the Standard": [[849, "extending-the-standard"]], "What is the Superset?": [[849, "what-is-the-superset"]], "A Non-Duplicate Superset": [[849, "a-non-duplicate-superset"]], "What is not the Superset?": [[849, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[849, "balancing-generalization-with-efficiency"]], "More Examples": [[849, "more-examples"]], "Maximizing Usage of Native Functionality": [[849, "maximizing-usage-of-native-functionality"]], "Design": [[850, "design"]], "ivy.transpile()": [[866, "ivy-transpile"]], "Transpiler API": [[866, "transpiler-api"]], "Using the transpiler": [[866, "using-the-transpiler"]], "Transpiling functions": [[866, "transpiling-functions"]], "Transpiling Libraries": [[866, "transpiling-libraries"]], "Transpiling Modules": [[866, "transpiling-modules"]], "ivy.unify()": [[867, "ivy-unify"]], "Unify API": [[867, "unify-api"]], "Usage": [[867, "usage"]], "Ivy Array": [[853, "ivy-array"], [826, "ivy-array"]], "The Array Class": [[853, "the-array-class"]], "Unifying Operators": [[853, "unifying-operators"]], "API Monkey Patching": [[853, "api-monkey-patching"]], "Instance Methods": [[853, "instance-methods"]], "Glossary": [[859, "glossary"]], "Related Work": [[868, "related-work"]], "FAQ": [[857, "faq"]], "Maintaining Backend Versions": [[857, "maintaining-backend-versions"]], "Dynamic Sizes": [[857, "dynamic-sizes"]], "Type and Shape Checking": [[857, "type-and-shape-checking"]], "GPU handling": [[857, "gpu-handling"]], "Model Deployment": [[857, "model-deployment"]], "Dynamic Control Flow": [[857, "dynamic-control-flow"]], "Auto-Differentiation": [[857, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[857, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[857, "support-for-functions"]], "Alternative Data Structures": [[857, "alternative-data-structures"]], "Custom Operations": [[857, "custom-operations"]], "The Pipeline": [[857, "the-pipeline"]], "State": [[857, "state"]], "Docstring Examples": [[833, "docstring-examples"]], "ivy.tan": [[833, "ivy-tan"]], "ivy.roll": [[833, "ivy-roll"]], "ivy.add": [[833, "ivy-add"]], "Function Types": [[839, "function-types"]], "Primary Functions": [[839, "primary-functions"]], "Compositional Functions": [[839, "compositional-functions"]], "Mixed Functions": [[839, "mixed-functions"]], "Partial Mixed Functions": [[839, "partial-mixed-functions"]], "Standalone Functions": [[839, "standalone-functions"]], "Convenience Functions": [[839, "convenience-functions"]], "Devices": [[832, "devices"]], "Device Module": [[832, "device-module"]], "Device handling": [[832, "device-handling"]], "Standardization": [[862, "standardization"]], "Skepticism": [[862, "skepticism"]], "Complimentary vs Competitive": [[862, "complimentary-vs-competitive"]], "Do Standards Work?": [[862, "do-standards-work"]], "The Array API Standard": [[862, "the-array-api-standard"]], "Gradients": [[841, "gradients"], [636, "gradients"], [375, "gradients"], [83, "module-ivy.data_classes.container.gradients"], [60, "module-ivy.data_classes.array.gradients"]], "Example Usage of the Gradient API": [[841, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[841, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[841, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[841, "custom-gradient-functions"]], "Design of the Gradient API": [[841, "design-of-the-gradient-api"]], "Our policy on gradients": [[841, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[841, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[841, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[841, "framework-specific-considerations"]], "Sorting": [[93, "module-ivy.data_classes.container.sorting"], [647, "sorting"], [386, "sorting"], [70, "module-ivy.data_classes.array.sorting"]], "Tucker tensor": [[102, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "leaky_relu": [[113, "leaky-relu"]], "cmp_isnot": [[122, "cmp-isnot"]], "full_like": [[137, "full-like"]], "Base": [[97, "module-ivy.data_classes.factorized_tensor.base"], [107, "module-ivy.data_classes.nested_array.base"], [75, "module-ivy.data_classes.container.base"]], "cmp_is": [[121, "cmp-is"]], "empty": [[131, "empty"]], "Tr tensor": [[100, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "Cp tensor": [[98, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Set": [[92, "module-ivy.data_classes.container.set"], [646, "set"], [385, "module-ivy.functional.ivy.experimental.set"], [69, "module-ivy.data_classes.array.set"]], "log_softmax": [[114, "log-softmax"]], "while_loop": [[126, "while-loop"]], "copy_array": [[130, "copy-array"]], "Utility": [[95, "module-ivy.data_classes.container.utility"], [649, "utility"], [389, "utility"], [72, "module-ivy.data_classes.array.utility"]], "arange": [[127, "arange"]], "array": [[128, "array"]], "from_dlpack": [[134, "from-dlpack"]], "frombuffer": [[135, "frombuffer"]], "full": [[136, "full"]], "hardswish": [[112, "hardswish"]], "gelu": [[111, "gelu"]], "Array": [[103, "array"]], "Parafac2 tensor": [[99, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Tt tensor": [[101, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "Statistical": [[94, "module-ivy.data_classes.container.statistical"], [648, "statistical"], [388, "statistical"], [71, "module-ivy.data_classes.array.statistical"]], "softmax": [[118, "softmax"]], "mish": [[115, "mish"]], "eye": [[133, "eye"]], "Functions": [[110, "functions"]], "relu": [[116, "relu"]], "sigmoid": [[117, "sigmoid"]], "Elementwise": [[108, "module-ivy.data_classes.nested_array.elementwise"], [633, "elementwise"], [373, "elementwise"], [57, "module-ivy.data_classes.array.elementwise"], [80, "module-ivy.data_classes.container.elementwise"]], "Wrapping": [[96, "module-ivy.data_classes.container.wrapping"], [73, "module-ivy.data_classes.array.wrapping"]], "Data classes": [[109, "data-classes"]], "softplus": [[119, "softplus"]], "empty_like": [[132, "empty-like"]], "try_except": [[125, "try-except"]], "Container": [[104, "container"]], "if_else": [[124, "if-else"]], "Factorized tensor": [[105, "factorized-tensor"]], "asarray": [[129, "asarray"]], "softsign": [[120, "softsign"]], "for_loop": [[123, "for-loop"]], "Nested array": [[106, "nested-array"]], "Assertions": [[772, "module-ivy_tests.test_ivy.helpers.assertions"], [799, "module-ivy.utils.assertions"]], "load": [[770, "load"]], "where": [[749, "where"]], "seed": [[743, "seed"]], "argsort": [[754, "argsort"]], "Multiprocessing": [[781, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "msort": [[755, "msort"]], "Array helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "nonzero": [[748, "nonzero"]], "Dtype helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "cumsum": [[759, "cumsum"]], "random_uniform": [[742, "random-uniform"]], "argwhere": [[747, "argwhere"]], "max": [[761, "max"]], "unique_inverse": [[752, "unique-inverse"]], "Data-dependent output shape": [[752, null], [750, null], [751, null], [753, null], [646, null], [646, null], [646, null], [646, null]], "sort": [[757, "sort"]], "Function testing": [[774, "module-ivy_tests.test_ivy.helpers.function_testing"]], "any": [[769, "any"]], "einsum": [[760, "einsum"]], "sum": [[766, "sum"]], "set_nest_at_indices": [[737, "set-nest-at-indices"]], "min": [[763, "min"]], "Number helpers": [[780, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Available frameworks": [[773, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "unique_all": [[750, "unique-all"]], "cumprod": [[758, "cumprod"]], "unique_counts": [[751, "unique-counts"]], "argmin": [[746, "argmin"]], "var": [[767, "var"]], "General helpers": [[779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "searchsorted": [[756, "searchsorted"]], "prod": [[764, "prod"]], "all": [[768, "all"]], "multinomial": [[739, "multinomial"]], "mean": [[762, "mean"]], "argmax": [[745, "argmax"]], "layer_norm": [[738, "layer-norm"]], "Globals": [[775, "module-ivy_tests.test_ivy.helpers.globals"]], "std": [[765, "std"]], "set_nest_at_index": [[736, "set-nest-at-index"]], "randint": [[740, "randint"]], "Hypothesis helpers": [[776, "hypothesis-helpers"]], "save": [[771, "save"]], "unique_values": [[753, "unique-values"]], "random_normal": [[741, "random-normal"]], "shuffle": [[744, "shuffle"]], "Activations": [[789, "module-ivy.stateful.activations"], [627, "activations"], [368, "activations"], [74, "module-ivy.data_classes.container.activations"], [52, "module-ivy.data_classes.array.activations"]], "Parameter": [[789, "parameter"], [789, "id1"], [588, "parameter"], [586, "parameter"], [579, "parameter"], [589, "parameter"], [580, "parameter"], [585, "parameter"], [635, "parameter"], [635, "id1"], [635, "id2"], [635, "id3"], [635, "id4"], [635, "id5"], [632, "parameter"], [211, "parameter"]], "Open Tasks": [[820, "open-tasks"]], "Fixing Failing Tests": [[820, "fixing-failing-tests"]], "How to Contribute": [[820, "how-to-contribute"]], "Frontend APIs": [[820, "frontend-apis"]], "Where to place a frontend function": [[820, "where-to-place-a-frontend-function"]], "Frontend checklist": [[820, "frontend-checklist"]], "Function Formatting": [[820, "function-formatting"]], "Formatting checklist": [[820, "formatting-checklist"]], "Ivy Experimental API": [[820, "ivy-experimental-api"]], "Extending the Ivy API": [[820, "extending-the-ivy-api"]], "Where to place a backend function": [[820, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[820, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Testing": [[788, "testing"], [46, "Testing"]], "Einsum path helpers": [[808, "module-ivy.utils.einsum_path_helpers"]], "Verbosity": [[813, "module-ivy.utils.verbosity"]], "Utils": [[787, "utils"]], "Binaries": [[804, "module-ivy.utils.binaries"]], "Structs": [[783, "module-ivy_tests.test_ivy.helpers.structs"]], "Exceptions": [[809, "module-ivy.utils.exceptions"]], "Backend Setting": [[827, "backend-setting"]], "Dynamic Backend Setting": [[827, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[827, "backend-and-frontend-version-support"]], "Dynamic import": [[806, "module-ivy.utils.dynamic_import"]], "Framework classes": [[786, "framework-classes"]], "Test parameter flags": [[784, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Inspection": [[810, "module-ivy.utils.inspection"]], "Helpers": [[791, "module-ivy.stateful.helpers"]], "Ast helpers": [[801, "module-ivy.utils.backend.ast_helpers"]], "Norms": [[796, "module-ivy.stateful.norms"], [643, "norms"], [382, "norms"], [89, "module-ivy.data_classes.container.norms"], [66, "module-ivy.data_classes.array.norms"]], "Handler": [[802, "module-ivy.utils.backend.handler"]], "Testing helpers": [[785, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Module": [[795, "module-ivy.stateful.module"]], "Helpful Resources": [[819, "helpful-resources"]], "Layers": [[793, "module-ivy.stateful.layers"], [637, "layers"], [376, "layers"], [62, "module-ivy.data_classes.array.layers"], [85, "module-ivy.data_classes.container.layers"]], "Backend": [[800, "backend"]], "Logging": [[811, "module-ivy.utils.logging"]], "Running the Tests": [[825, "running-the-tests"]], "Using Terminal": [[825, "using-terminal"]], "Using the IDE": [[825, "using-the-ide"]], "Regenerating Test Failures": [[825, "regenerating-test-failures"]], "Test Skipping": [[825, "test-skipping"]], "The Basics": [[822, "the-basics"]], "Getting Help": [[822, "getting-help"]], "ToDo List Issues": [[822, "todo-list-issues"]], "Managing Your Fork": [[822, "managing-your-fork"]], "Who To Ask": [[822, "who-to-ask"]], "With Command Line:": [[822, "with-command-line"]], "With Browser:": [[822, "with-browser"]], "Pull Requests": [[822, "pull-requests"]], "Small Commits Often": [[822, "small-commits-often"]], "Interactive Ivy Docker Container": [[822, "interactive-ivy-docker-container"]], "Running Tests Locally": [[822, "running-tests-locally"]], "With Docker": [[822, "with-docker"]], "Getting the most out of IDE": [[822, "getting-the-most-out-of-ide"]], "with PyCharm": [[822, "with-pycharm"]], "Profiler": [[812, "module-ivy.utils.profiler"]], "Contributor Rewards": [[817, "contributor-rewards"]], "Badges": [[817, "badges"]], "Badge Tiers": [[817, "badge-tiers"]], "Arrays": [[826, "arrays"]], "Native Array": [[826, "native-array"]], "Array Handling": [[826, "array-handling"]], "Integrating custom classes with Ivy": [[826, "integrating-custom-classes-with-ivy"]], "Sequential": [[798, "module-ivy.stateful.sequential"]], "Pipeline helper": [[782, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Converters": [[790, "module-ivy.stateful.converters"]], "Losses": [[794, "module-ivy.stateful.losses"], [639, "losses"], [378, "losses"], [64, "module-ivy.data_classes.array.losses"], [87, "module-ivy.data_classes.container.losses"]], "Building the Docs": [[816, "building-the-docs"]], "Building the Docs using Docker": [[816, "building-the-docs-using-docker"]], "Using convenience script": [[816, "using-convenience-script"]], "Using existing image on Docker Hub": [[816, "using-existing-image-on-docker-hub"]], "Building the image locally": [[816, "building-the-image-locally"]], "Building the Docs without Docker": [[816, "building-the-docs-without-docker"]], "Forking and cloning the repo": [[821, "forking-and-cloning-the-repo"]], "Pre-Commit": [[821, "pre-commit"]], "Virtual environments - No Docker": [[821, "virtual-environments-no-docker"]], "Using miniconda": [[821, "using-miniconda"]], "Using venv": [[821, "using-venv"]], "Docker Interpreter with PyCharm": [[821, "docker-interpreter-with-pycharm"]], "Windows": [[821, "windows"], [821, "id6"]], "MacOS": [[821, "macos"]], "Ubuntu": [[821, "ubuntu"], [821, "id8"]], "Setting Up Testing in PyCharm": [[821, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[821, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[821, "setting-up-for-free"]], "WSL": [[821, "wsl"]], "GitHub Codespaces": [[821, "github-codespaces"]], "The Binaries": [[821, "the-binaries"]], "Deep Dive": [[824, "deep-dive"]], "Error Handling": [[818, "error-handling"]], "Convert ML Models Between Frameworks": [[814, "convert-ml-models-between-frameworks"]], "Installing ivy": [[814, "installing-ivy"]], "Getting started": [[814, "getting-started"]], "Using ivy": [[814, "using-ivy"]], "How ivy works?": [[814, "how-ivy-works"]], "Documentation": [[814, "documentation"]], "Contributing": [[814, "contributing"], [815, "contributing"]], "Community": [[814, "community"]], "Citation": [[814, "citation"]], "Sub backend handler": [[803, "module-ivy.utils.backend.sub_backend_handler"]], "Contributor Program": [[823, "contributor-program"]], "Contributor": [[823, "contributor"]], "Core Contributor": [[823, "core-contributor"]], "Rising Contributor": [[823, "rising-contributor"]], "Top Contributor": [[823, "top-contributor"]], "Einsum parser": [[807, "module-ivy.utils.einsum_parser"]], "Decorator utils": [[805, "module-ivy.utils.decorator_utils"]], "binary_cross_entropy": [[697, "binary-cross-entropy"]], "concat": [[701, "concat"]], "nested_map": [[731, "nested-map"]], "all_nested_indices": [[719, "all-nested-indices"]], "cross_entropy": [[698, "cross-entropy"]], "prune_nest_at_indices": [[735, "prune-nest-at-indices"]], "repeat": [[706, "repeat"]], "stack": [[711, "stack"]], "index_nest": [[722, "index-nest"]], "reshape": [[707, "reshape"]], "squeeze": [[710, "squeeze"]], "map": [[725, "map"]], "vector_to_skew_symmetric_matrix": [[696, "vector-to-skew-symmetric-matrix"]], "duplicate_array_index_chains": [[721, "duplicate-array-index-chains"]], "vector_norm": [[695, "vector-norm"]], "prune_nest_at_index": [[734, "prune-nest-at-index"]], "trace": [[692, "trace"]], "zero_pad": [[715, "zero-pad"]], "insert_into_nest_at_indices": [[724, "insert-into-nest-at-indices"]], "map_nest_at_index": [[726, "map-nest-at-index"]], "vander": [[693, "vander"]], "vecdot": [[694, "vecdot"]], "constant_pad": [[702, "constant-pad"]], "unstack": [[714, "unstack"]], "tile": [[713, "tile"]], "clip": [[700, "clip"]], "multi_index_nest": [[728, "multi-index-nest"]], "tensordot": [[690, "tensordot"]], "split": [[709, "split"]], "roll": [[708, "roll"]], "fomaml_step": [[716, "fomaml-step"]], "copy_nest": [[720, "copy-nest"]], "swapaxes": [[712, "swapaxes"]], "sparse_cross_entropy": [[699, "sparse-cross-entropy"]], "expand_dims": [[703, "expand-dims"]], "tensorsolve": [[691, "tensorsolve"]], "insert_into_nest_at_index": [[723, "insert-into-nest-at-index"]], "nested_multi_map": [[732, "nested-multi-map"]], "permute_dims": [[705, "permute-dims"]], "map_nest_at_indices": [[727, "map-nest-at-indices"]], "prune_empty": [[733, "prune-empty"]], "reptile_step": [[718, "reptile-step"]], "flip": [[704, "flip"]], "nested_any": [[729, "nested-any"]], "maml_step": [[717, "maml-step"]], "nested_argwhere": [[730, "nested-argwhere"]], "conv1d_transpose": [[652, "conv1d-transpose"]], "cross": [[669, "cross"]], "solve": [[687, "solve"]], "multi_head_attention": [[664, "multi-head-attention"]], "inner": [[676, "inner"]], "matrix_transpose": [[682, "matrix-transpose"]], "Searching": [[645, "searching"], [384, "searching"], [68, "module-ivy.data_classes.array.searching"], [91, "module-ivy.data_classes.container.searching"]], "conv": [[650, "conv"]], "lstm_update": [[663, "lstm-update"]], "inv": [[677, "inv"]], "conv1d": [[651, "conv1d"]], "svdvals": [[689, "svdvals"]], "matrix_power": [[680, "matrix-power"]], "qr": [[685, "qr"]], "diag": [[671, "diag"]], "matrix_norm": [[679, "matrix-norm"]], "depthwise_conv2d": [[659, "depthwise-conv2d"]], "eigvalsh": [[675, "eigvalsh"]], "diagonal": [[672, "diagonal"]], "conv2d_transpose": [[654, "conv2d-transpose"]], "cholesky": [[668, "cholesky"]], "outer": [[683, "outer"]], "slogdet": [[686, "slogdet"]], "nms": [[665, "nms"]], "Random": [[644, "random"], [383, "random"], [67, "module-ivy.data_classes.array.random"], [90, "module-ivy.data_classes.container.random"]], "det": [[670, "det"]], "linear": [[661, "linear"]], "conv_general_transpose": [[658, "conv-general-transpose"]], "dropout": [[660, "dropout"]], "lstm": [[662, "lstm"]], "roi_align": [[666, "roi-align"]], "conv_general_dilated": [[657, "conv-general-dilated"]], "matrix_rank": [[681, "matrix-rank"]], "eig": [[673, "eig"], [430, "eig"]], "matmul": [[678, "matmul"]], "conv2d": [[653, "conv2d"]], "conv3d_transpose": [[656, "conv3d-transpose"]], "svd": [[688, "svd"]], "conv3d": [[655, "conv3d"]], "pinv": [[684, "pinv"]], "scaled_dot_product_attention": [[667, "scaled-dot-product-attention"]], "eigh": [[674, "eigh"]], "is_ivy_nested_array": [[568, "is-ivy-nested-array"]], "itemsize": [[572, "itemsize"]], "set_tmp_dir": [[590, "set-tmp-dir"]], "get_all_arrays_in_memory": [[555, "get-all-arrays-in-memory"]], "scatter_nd": [[578, "scatter-nd"]], "inplace_decrement": [[561, "inplace-decrement"]], "inplace_update": [[563, "inplace-update"]], "get_item": [[556, "get-item"]], "strides": [[595, "strides"]], "size": [[592, "size"]], "get_referrers_recursive": [[558, "get-referrers-recursive"]], "is_array": [[565, "is-array"]], "match_kwargs": [[573, "match-kwargs"]], "set_shape_array_mode": [[588, "set-shape-array-mode"]], "gather_nd": [[554, "gather-nd"]], "function_unsupported_devices_and_dtypes": [[552, "function-unsupported-devices-and-dtypes"]], "stable_divide": [[593, "stable-divide"]], "multiprocessing": [[574, "multiprocessing"]], "scatter_flat": [[577, "scatter-flat"]], "gather": [[553, "gather"]], "is_native_array": [[569, "is-native-array"]], "set_precise_mode": [[586, "set-precise-mode"]], "stable_pow": [[594, "stable-pow"]], "set_array_mode": [[579, "set-array-mode"]], "set_min_base": [[583, "set-min-base"]], "inplace_arrays_supported": [[560, "inplace-arrays-supported"]], "set_show_func_wrapper_trace_mode": [[589, "set-show-func-wrapper-trace-mode"]], "print_all_arrays_in_memory": [[576, "print-all-arrays-in-memory"]], "is_ivy_container": [[567, "is-ivy-container"]], "is_ivy_array": [[566, "is-ivy-array"]], "inplace_increment": [[562, "inplace-increment"]], "isin": [[570, "isin"]], "set_exception_trace_mode": [[580, "set-exception-trace-mode"]], "set_min_denominator": [[584, "set-min-denominator"]], "set_queue_timeout": [[587, "set-queue-timeout"]], "to_ivy_shape": [[597, "to-ivy-shape"]], "supports_inplace_updates": [[596, "supports-inplace-updates"]], "set_item": [[582, "set-item"]], "inplace_variables_supported": [[564, "inplace-variables-supported"]], "num_arrays_in_memory": [[575, "num-arrays-in-memory"]], "set_inplace_mode": [[581, "set-inplace-mode"]], "isscalar": [[571, "isscalar"]], "set_nestable_mode": [[585, "set-nestable-mode"]], "get_num_dims": [[557, "get-num-dims"]], "has_nans": [[559, "has-nans"]], "shape": [[591, "shape"]], "invert_permutation": [[515, "invert-permutation"]], "bincount": [[521, "bincount"]], "gamma": [[512, "gamma"]], "quantile": [[533, "quantile"]], "beta": [[510, "beta"]], "dirichlet": [[511, "dirichlet"]], "igamma": [[527, "igamma"]], "unravel_index": [[514, "unravel-index"]], "nanmean": [[529, "nanmean"]], "poisson": [[513, "poisson"]], "assert_supports_inplace": [[539, "assert-supports-inplace"]], "container_types": [[543, "container-types"]], "einops_reduce": [[547, "einops-reduce"]], "fourier_encode": [[550, "fourier-encode"]], "native_sparse_array_to_indices_values_and_shape": [[520, "native-sparse-array-to-indices-values-and-shape"]], "optional_get_element": [[534, "optional-get-element"]], "local_response_norm": [[507, "local-response-norm"]], "l2_normalize": [[506, "l2-normalize"]], "einops_rearrange": [[546, "einops-rearrange"]], "native_sparse_array": [[519, "native-sparse-array"]], "histogram": [[526, "histogram"]], "bernoulli": [[509, "bernoulli"]], "nanmin": [[531, "nanmin"]], "nanprod": [[532, "nanprod"]], "cov": [[523, "cov"]], "array_equal": [[538, "array-equal"]], "cummin": [[525, "cummin"]], "corrcoef": [[522, "corrcoef"]], "nanmedian": [[530, "nanmedian"]], "clip_vector_norm": [[542, "clip-vector-norm"]], "arg_names": [[537, "arg-names"]], "einops_repeat": [[548, "einops-repeat"]], "exists": [[549, "exists"]], "median": [[528, "median"]], "current_backend_str": [[544, "current-backend-str"]], "clip_matrix_norm": [[541, "clip-matrix-norm"]], "lexsort": [[516, "lexsort"]], "is_ivy_sparse_array": [[517, "is-ivy-sparse-array"]], "is_native_sparse_array": [[518, "is-native-sparse-array"]], "arg_info": [[536, "arg-info"]], "cache_fn": [[540, "cache-fn"]], "all_equal": [[535, "all-equal"]], "lp_normalize": [[508, "lp-normalize"]], "cummax": [[524, "cummax"]], "default": [[545, "default"]], "function_supported_devices_and_dtypes": [[551, "function-supported-devices-and-dtypes"]], "group_norm": [[503, "group-norm"]], "put_along_axis": [[490, "put-along-axis"]], "soft_thresholding": [[492, "soft-thresholding"]], "trim_zeros": [[496, "trim-zeros"]], "flipud": [[477, "flipud"]], "take": [[493, "take"]], "as_strided": [[461, "as-strided"]], "partial_tensor_to_vec": [[487, "partial-tensor-to-vec"]], "choose": [[468, "choose"]], "pad": [[485, "pad"]], "associative_scan": [[462, "associative-scan"]], "hsplit": [[480, "hsplit"]], "matricize": [[483, "matricize"]], "atleast_1d": [[463, "atleast-1d"]], "unfold": [[498, "unfold"]], "check_scalar": [[467, "check-scalar"]], "vsplit": [[500, "vsplit"]], "i0": [[482, "i0"]], "soft_margin_loss": [[460, "soft-margin-loss"]], "unique_consecutive": [[499, "unique-consecutive"]], "concat_from_sequence": [[470, "concat-from-sequence"]], "l1_normalize": [[505, "l1-normalize"]], "atleast_3d": [[465, "atleast-3d"]], "unflatten": [[497, "unflatten"]], "broadcast_shapes": [[466, "broadcast-shapes"]], "moveaxis": [[484, "moveaxis"]], "expand": [[473, "expand"]], "dsplit": [[471, "dsplit"]], "fold": [[478, "fold"]], "partial_unfold": [[488, "partial-unfold"]], "hstack": [[481, "hstack"]], "top_k": [[495, "top-k"]], "heaviside": [[479, "heaviside"]], "take_along_axis": [[494, "take-along-axis"]], "fill_diagonal": [[474, "fill-diagonal"]], "batch_norm": [[502, "batch-norm"]], "column_stack": [[469, "column-stack"]], "fliplr": [[476, "fliplr"]], "instance_norm": [[504, "instance-norm"]], "partial_fold": [[486, "partial-fold"]], "vstack": [[501, "vstack"]], "partial_vec_to_tensor": [[489, "partial-vec-to-tensor"]], "dstack": [[472, "dstack"]], "flatten": [[475, "flatten"]], "rot90": [[491, "rot90"]], "atleast_2d": [[464, "atleast-2d"]], "Creation": [[630, "creation"], [370, "creation"], [54, "module-ivy.data_classes.array.creation"], [77, "module-ivy.data_classes.container.creation"]], "General": [[635, "general"], [374, "general"], [59, "module-ivy.data_classes.array.general"], [82, "module-ivy.data_classes.container.general"]], "unset_min_denominator": [[607, "unset-min-denominator"]], "unset_show_func_wrapper_trace_mode": [[612, "unset-show-func-wrapper-trace-mode"]], "to_native_shape": [[599, "to-native-shape"]], "Control flow ops": [[629, "control-flow-ops"]], "unset_precise_mode": [[609, "unset-precise-mode"]], "execute_with_gradients": [[618, "execute-with-gradients"]], "Experimental": [[634, "experimental"], [58, "module-ivy.data_classes.array.experimental"], [81, "module-ivy.data_classes.container.experimental"]], "optimizer_update": [[624, "optimizer-update"]], "value_and_grad": [[626, "value-and-grad"]], "value_is_nan": [[614, "value-is-nan"]], "unset_inplace_mode": [[605, "unset-inplace-mode"]], "unset_exception_trace_mode": [[604, "unset-exception-trace-mode"]], "unset_min_base": [[606, "unset-min-base"]], "lars_update": [[623, "lars-update"]], "stop_gradient": [[625, "stop-gradient"]], "adam_update": [[617, "adam-update"]], "unset_queue_timeout": [[610, "unset-queue-timeout"]], "adam_step": [[616, "adam-step"]], "Device": [[632, "device"], [372, "module-ivy.functional.ivy.experimental.device"], [56, "module-ivy.data_classes.array.device"], [79, "module-ivy.data_classes.container.device"]], "Manipulation": [[640, "manipulation"], [379, "manipulation"], [88, "module-ivy.data_classes.container.manipulation"], [65, "module-ivy.data_classes.array.manipulation"]], "to_list": [[598, "to-list"]], "Data type": [[631, "data-type"], [371, "module-ivy.functional.ivy.experimental.data_type"], [55, "module-ivy.data_classes.array.data_type"], [78, "module-ivy.data_classes.container.data_type"]], "Nest": [[642, "nest"], [381, "module-ivy.functional.ivy.experimental.nest"]], "vmap": [[615, "vmap"]], "gradient_descent_update": [[620, "gradient-descent-update"]], "grad": [[619, "grad"]], "to_scalar": [[601, "to-scalar"]], "lamb_update": [[622, "lamb-update"]], "Meta": [[641, "meta"], [380, "module-ivy.functional.ivy.experimental.meta"]], "unset_array_mode": [[603, "unset-array-mode"]], "to_numpy": [[600, "to-numpy"]], "Linear algebra": [[638, "linear-algebra"], [377, "linear-algebra"], [86, "module-ivy.data_classes.container.linear_algebra"], [63, "module-ivy.data_classes.array.linear_algebra"]], "unset_tmp_dir": [[613, "unset-tmp-dir"]], "Constants": [[628, "module-ivy.functional.ivy.constants"], [369, "module-ivy.functional.ivy.experimental.constants"]], "unset_shape_array_mode": [[611, "unset-shape-array-mode"]], "jac": [[621, "jac"]], "unset_nestable_mode": [[608, "unset-nestable-mode"]], "try_else_none": [[602, "try-else-none"]], "l1_loss": [[456, "l1-loss"]], "eigvals": [[432, "eigvals"]], "kron": [[437, "kron"]], "huber_loss": [[454, "huber-loss"]], "adjoint": [[425, "adjoint"]], "dot": [[429, "dot"]], "initialize_tucker": [[435, "initialize-tucker"]], "khatri_rao": [[436, "khatri-rao"]], "max_pool2d": [[414, "max-pool2d"]], "svd_flip": [[448, "svd-flip"]], "cond": [[427, "cond"]], "max_pool3d": [[415, "max-pool3d"]], "kronecker": [[438, "kronecker"]], "partial_tucker": [[446, "partial-tucker"]], "tensor_train": [[449, "tensor-train"]], "rfftn": [[421, "rfftn"]], "nearest_interpolate": [[417, "nearest-interpolate"]], "tucker": [[452, "tucker"]], "kl_div": [[455, "kl-div"]], "hinge_embedding_loss": [[453, "hinge-embedding-loss"]], "multi_dot": [[444, "multi-dot"]], "smooth_l1_loss": [[459, "smooth-l1-loss"]], "mode_dot": [[443, "mode-dot"]], "batched_outer": [[426, "batched-outer"]], "max_unpool1d": [[416, "max-unpool1d"]], "matrix_exp": [[442, "matrix-exp"]], "solve_triangular": [[447, "solve-triangular"]], "general_inner_product": [[433, "general-inner-product"]], "log_poisson_loss": [[457, "log-poisson-loss"]], "pool": [[418, "pool"]], "reduce_window": [[419, "reduce-window"]], "stft": [[424, "stft"]], "sliding_window": [[423, "sliding-window"]], "higher_order_moment": [[434, "higher-order-moment"]], "tt_matrix_to_tensor": [[451, "tt-matrix-to-tensor"]], "poisson_nll_loss": [[458, "poisson-nll-loss"]], "make_svd_non_negative": [[441, "make-svd-non-negative"]], "multi_mode_dot": [[445, "multi-mode-dot"]], "rnn": [[422, "rnn"]], "lu_factor": [[439, "lu-factor"]], "rfft": [[420, "rfft"]], "truncated_svd": [[450, "truncated-svd"]], "lu_solve": [[440, "lu-solve"]], "diagflat": [[428, "diagflat"]], "eigh_tridiagonal": [[431, "eigh-tridiagonal"]], "xlogy": [[362, "xlogy"]], "modf": [[356, "modf"]], "digamma": [[343, "digamma"]], "amin": [[337, "amin"]], "nextafter": [[358, "nextafter"]], "erfinv": [[345, "erfinv"]], "hypot": [[351, "hypot"]], "copysign": [[340, "copysign"]], "jvp": [[366, "jvp"]], "amax": [[336, "amax"]], "conj": [[339, "conj"]], "diff": [[342, "diff"]], "gradient": [[350, "gradient"]], "tril_indices": [[329, "tril-indices"]], "sinc": [[360, "sinc"]], "random_tt": [[327, "random-tt"]], "random_tr": [[326, "random-tr"]], "float_power": [[347, "float-power"]], "lgamma": [[355, "lgamma"]], "random_tucker": [[328, "random-tucker"]], "random_parafac2": [[325, "random-parafac2"]], "trilu": [[330, "trilu"]], "signbit": [[359, "signbit"]], "unsorted_segment_min": [[332, "unsorted-segment-min"]], "erfc": [[344, "erfc"]], "ldexp": [[353, "ldexp"]], "reduce": [[364, "reduce"]], "nansum": [[357, "nansum"]], "zeta": [[363, "zeta"]], "sparsify_tensor": [[361, "sparsify-tensor"]], "fix": [[346, "fix"]], "frexp": [[349, "frexp"]], "lerp": [[354, "lerp"]], "random_cp": [[324, "random-cp"]], "allclose": [[335, "allclose"]], "vorbis_window": [[334, "vorbis-window"]], "count_nonzero": [[341, "count-nonzero"]], "polyval": [[323, "polyval"]], "ndindex": [[322, "ndindex"]], "fmax": [[348, "fmax"]], "bind_custom_gradient_function": [[365, "bind-custom-gradient-function"]], "unsorted_segment_sum": [[333, "unsorted-segment-sum"]], "binarizer": [[338, "binarizer"]], "vjp": [[367, "vjp"]], "isclose": [[352, "isclose"]], "unsorted_segment_mean": [[331, "unsorted-segment-mean"]], "fft2": [[405, "fft2"]], "avg_pool1d": [[395, "avg-pool1d"]], "interp": [[411, "interp"]], "interpolate": [[412, "interpolate"]], "idct": [[408, "idct"]], "dropout1d": [[400, "dropout1d"]], "avg_pool2d": [[396, "avg-pool2d"]], "adaptive_max_pool2d": [[392, "adaptive-max-pool2d"]], "max_pool1d": [[413, "max-pool1d"]], "ifftn": [[410, "ifftn"]], "avg_pool3d": [[397, "avg-pool3d"]], "adaptive_max_pool3d": [[393, "adaptive-max-pool3d"]], "dft": [[399, "dft"]], "dct": [[398, "dct"]], "adaptive_avg_pool2d": [[391, "adaptive-avg-pool2d"]], "dropout3d": [[402, "dropout3d"]], "Sparse array": [[387, "sparse-array"]], "generate_einsum_equation": [[406, "generate-einsum-equation"]], "get_interpolate_kernel": [[407, "get-interpolate-kernel"]], "adaptive_avg_pool1d": [[390, "adaptive-avg-pool1d"]], "dropout2d": [[401, "dropout2d"]], "ifft": [[409, "ifft"]], "area_interpolate": [[394, "area-interpolate"]], "embedding": [[403, "embedding"]], "fft": [[404, "fft"]], "softshrink": [[308, "softshrink"]], "reciprocal": [[282, "reciprocal"]], "tanh": [[292, "tanh"]], "logit": [[301, "logit"]], "elu": [[297, "elu"]], "tanhshrink": [[310, "tanhshrink"]], "trunc_divide": [[295, "trunc-divide"]], "thresholded_relu": [[312, "thresholded-relu"]], "silu": [[307, "silu"]], "hann_window": [[316, "hann-window"]], "real": [[281, "real"]], "kaiser_window": [[319, "kaiser-window"]], "positive": [[278, "positive"]], "hardshrink": [[298, "hardshrink"]], "sqrt": [[288, "sqrt"]], "remainder": [[283, "remainder"]], "hardtanh": [[300, "hardtanh"]], "trunc": [[294, "trunc"]], "round": [[284, "round"]], "tan": [[291, "tan"]], "selu": [[306, "selu"]], "prelu": [[303, "prelu"]], "not_equal": [[277, "not-equal"]], "sign": [[285, "sign"]], "subtract": [[290, "subtract"]], "mel_weight_matrix": [[320, "mel-weight-matrix"]], "sinh": [[287, "sinh"]], "negative": [[276, "negative"]], "hamming_window": [[315, "hamming-window"]], "indices": [[317, "indices"]], "relu6": [[304, "relu6"]], "trapz": [[293, "trapz"]], "rad2deg": [[280, "rad2deg"]], "square": [[289, "square"]], "logsigmoid": [[302, "logsigmoid"]], "scaled_tanh": [[305, "scaled-tanh"]], "blackman_window": [[313, "blackman-window"]], "ndenumerate": [[321, "ndenumerate"]], "hardsilu": [[299, "hardsilu"]], "sin": [[286, "sin"]], "threshold": [[311, "threshold"]], "kaiser_bessel_derived_window": [[318, "kaiser-bessel-derived-window"]], "stanh": [[309, "stanh"]], "celu": [[296, "celu"]], "pow": [[279, "pow"]], "eye_like": [[314, "eye-like"]], "cosh": [[239, "cosh"]], "bitwise_right_shift": [[235, "bitwise-right-shift"]], "exp": [[244, "exp"]], "lcm": [[259, "lcm"]], "log2": [[265, "log2"]], "multiply": [[274, "multiply"]], "fmod": [[250, "fmod"]], "less": [[260, "less"]], "logical_and": [[268, "logical-and"]], "log": [[262, "log"]], "minimum": [[273, "minimum"]], "floor_divide": [[248, "floor-divide"]], "logaddexp": [[266, "logaddexp"]], "cos": [[238, "cos"]], "imag": [[254, "imag"]], "logical_or": [[270, "logical-or"]], "greater_equal": [[253, "greater-equal"]], "greater": [[252, "greater"]], "maximum": [[272, "maximum"]], "isreal": [[258, "isreal"]], "isfinite": [[255, "isfinite"]], "equal": [[242, "equal"]], "exp2": [[245, "exp2"]], "bitwise_left_shift": [[233, "bitwise-left-shift"]], "divide": [[241, "divide"]], "fmin": [[249, "fmin"]], "logical_xor": [[271, "logical-xor"]], "floor": [[247, "floor"]], "bitwise_or": [[234, "bitwise-or"]], "bitwise_invert": [[232, "bitwise-invert"]], "nan_to_num": [[275, "nan-to-num"]], "ceil": [[237, "ceil"]], "expm1": [[246, "expm1"]], "atanh": [[230, "atanh"]], "bitwise_xor": [[236, "bitwise-xor"]], "bitwise_and": [[231, "bitwise-and"]], "isinf": [[256, "isinf"]], "log10": [[263, "log10"]], "isnan": [[257, "isnan"]], "less_equal": [[261, "less-equal"]], "gcd": [[251, "gcd"]], "logical_not": [[269, "logical-not"]], "log1p": [[264, "log1p"]], "erf": [[243, "erf"]], "logaddexp2": [[267, "logaddexp2"]], "deg2rad": [[240, "deg2rad"]], "to_device": [[215, "to-device"]], "atan": [[228, "atan"]], "unset_soft_device_mode": [[219, "unset-soft-device-mode"]], "acos": [[222, "acos"]], "unset_default_complex_dtype": [[188, "unset-default-complex-dtype"]], "handle_soft_device_variable": [[204, "handle-soft-device-variable"]], "percent_used_mem_on_dev": [[208, "percent-used-mem-on-dev"]], "as_native_dev": [[195, "as-native-dev"]], "valid_dtype": [[193, "valid-dtype"]], "unset_default_int_dtype": [[191, "unset-default-int-dtype"]], "unset_default_uint_dtype": [[192, "unset-default-uint-dtype"]], "set_soft_device_mode": [[211, "set-soft-device-mode"]], "tpu_is_available": [[217, "tpu-is-available"]], "abs": [[221, "abs"]], "used_mem_on_dev": [[220, "used-mem-on-dev"]], "type_promote_arrays": [[187, "type-promote-arrays"]], "unset_default_float_dtype": [[190, "unset-default-float-dtype"]], "default_device": [[197, "default-device"]], "unset_default_device": [[218, "unset-default-device"]], "function_unsupported_devices": [[201, "function-unsupported-devices"]], "num_ivy_arrays_on_dev": [[207, "num-ivy-arrays-on-dev"]], "asin": [[226, "asin"]], "as_ivy_dev": [[194, "as-ivy-dev"]], "split_factor": [[213, "split-factor"]], "get_all_ivy_arrays_on_dev": [[202, "get-all-ivy-arrays-on-dev"]], "set_default_int_dtype": [[185, "set-default-int-dtype"]], "asinh": [[227, "asinh"]], "total_mem_on_dev": [[216, "total-mem-on-dev"]], "unset_default_dtype": [[189, "unset-default-dtype"]], "clear_cached_mem_on_dev": [[196, "clear-cached-mem-on-dev"]], "dev_util": [[199, "dev-util"]], "set_split_factor": [[212, "set-split-factor"]], "num_gpus": [[206, "num-gpus"]], "num_cpu_cores": [[205, "num-cpu-cores"]], "function_supported_devices": [[200, "function-supported-devices"]], "angle": [[225, "angle"]], "split_func_call": [[214, "split-func-call"]], "set_default_float_dtype": [[184, "set-default-float-dtype"]], "set_default_device": [[210, "set-default-device"]], "atan2": [[229, "atan2"]], "set_default_uint_dtype": [[186, "set-default-uint-dtype"]], "print_all_ivy_arrays_on_dev": [[209, "print-all-ivy-arrays-on-dev"]], "add": [[224, "add"]], "gpu_is_available": [[203, "gpu-is-available"]], "acosh": [[223, "acosh"]], "dev": [[198, "dev"]], "1.0: Lazy vs Eager": [[37, "1.0:-Lazy-vs-Eager"]], "Unify": [[37, "Unify"], [28, "Unify"], [38, "Unify"], [27, "Unify"], [39, "Unify"]], "Compile": [[37, "Compile"], [38, "Compile"], [39, "Compile"]], "Transpile": [[37, "Transpile"], [28, "Transpile"], [38, "Transpile"], [27, "Transpile"], [39, "Transpile"]], "# Ivy Bert Demo": [[5, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[5, "Install-the-dependecies"]], "Import the modules": [[5, "Import-the-modules"]], "Data Preparation": [[5, "Data-Preparation"], [8, "Data-Preparation"], [4, "Data-Preparation"], [12, "Data-Preparation"]], "Ivy inference with Sequence Classification": [[5, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[5, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[5, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[5, "Ivy-model-inference-with-torch"]], "Training PyTorch ResNet in your TensorFlow Projects": [[13, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Framework Incompatibility": [[13, "Framework-Incompatibility"], [6, "Framework-Incompatibility"]], "Transpiling a PyTorch model to TensorFlow": [[13, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "About the transpiled model": [[13, "About-the-transpiled-model"], [6, "About-the-transpiled-model"]], "Installation": [[13, "Installation"], [4, "Installation"], [12, "Installation"]], "Setting-up the source model": [[13, "Setting-up-the-source-model"], [6, "Setting-up-the-source-model"]], "Load the Data": [[13, "Load-the-Data"]], "Visualize a few images": [[13, "Visualize-a-few-images"]], "Load the pre-trained model": [[13, "Load-the-pre-trained-model"]], "Converting the model from TensorFlow to PyTorch": [[13, "Converting-the-model-from-TensorFlow-to-PyTorch"], [6, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Comparing the results": [[13, "Comparing-the-results"], [6, "Comparing-the-results"], [7, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[13, "Fine-tuning-the-transpiled-model"], [6, "Fine-tuning-the-transpiled-model"], [7, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[13, "Conclusion"], [6, "Conclusion"], [7, "Conclusion"]], "Compilation of a Basic Function": [[45, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[45, "Installs-\ud83d\udcbe"], [44, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[45, "Imports-\ud83d\udec3"], [44, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[45, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[45, "Function-compilation-\ud83d\udee0"]], "Set backend": [[45, "Set-backend"]], "Sample input": [[45, "Sample-input"]], "Define function to compile": [[45, "Define-function-to-compile"]], "Compile the function": [[45, "Compile-the-function"]], "Check results": [[45, "Check-results"], [45, "id1"]], "Compiling simple neural network \ud83e\udde0": [[45, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[45, "Define-Model"], [44, "Define-Model"]], "Create model": [[45, "Create-model"]], "Define input": [[45, "Define-input"]], "Compile network": [[45, "Compile-network"]], "Image Segmentation with Ivy UNet": [[8, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[8, "Imports"], [12, "Imports"], [15, "Imports"]], "Custom Preprocessing": [[8, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [12, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [12, "Visualise-image"]], "Model Inference": [[8, "Model-Inference"]], "Initializing Native Torch UNet": [[8, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[8, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[8, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[8, "TensorFlow-backend"]], "JAX": [[8, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[8, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Unify code": [[24, "Unify-code"]], "2.0: Kornia": [[41, "2.0:-Kornia"]], "Ivy AlexNet demo": [[4, "Ivy-AlexNet-demo"]], "Ivy AlexNet inference in Torch": [[4, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[4, "TensorFlow-inference"]], "JAX inference": [[4, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[4, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Trace code": [[25, "Trace-code"]], "Basic Operations with Ivy": [[44, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[44, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[44, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[44, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[44, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[44, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[44, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[44, "Set-Backend-Framework"]], "Create Model": [[44, "Create-Model"]], "Create Optimizer": [[44, "Create-Optimizer"]], "Input and Target": [[44, "Input-and-Target"]], "Loss Function": [[44, "Loss-Function"]], "Training Loop": [[44, "Training-Loop"]], "Using Ivy ResNet": [[12, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[12, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[12, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[12, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[12, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [12, "id1"]], "Model Inference ResNet50": [[12, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[12, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Using TensorFlow Models in your PyTorch Projects": [[6, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Transpiling a TensorFlow model to PyTorch": [[6, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "Transpiling a Tensorflow model to build on top": [[19, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Examples and Demos": [[3, "examples-and-demos"], [21, "examples-and-demos"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Importing Ivy": [[0, "Importing-Ivy"], [23, "Importing-Ivy"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Tutorials And Examples": [[21, "tutorials-and-examples"]], "Learn the basics": [[21, "learn-the-basics"], [22, "learn-the-basics"]], "Guides": [[21, "guides"], [16, "guides"]], "ODSC Ivy Demo": [[32, "ODSC-Ivy-Demo"]], "Ivy Backend Handler": [[32, "Ivy-Backend-Handler"], [23, "Ivy-Backend-Handler"]], "Data Structures": [[32, "Data-Structures"], [23, "Data-Structures"]], "Ivy Functional API": [[32, "Ivy-Functional-API"], [23, "Ivy-Functional-API"]], "Graph Tracer": [[32, "Graph-Tracer"]], "Any function": [[32, "Any-function"], [33, "Any-function"]], "Any library": [[32, "Any-library"], [33, "Any-library"]], "Any model": [[32, "Any-model"], [33, "Any-model"]], "How to use decorators": [[28, "How-to-use-decorators"]], "Trace": [[28, "Trace"], [27, "Trace"]], "0.2: Transpile": [[36, "0.2:-Transpile"]], "1.1: Framework Selection": [[38, "1.1:-Framework-Selection"]], "Developing a convolutional network using Ivy": [[20, "Developing-a-convolutional-network-using-Ivy"]], "Transpile code": [[26, "Transpile-code"]], "3.0: Perceiver": [[42, "3.0:-Perceiver"]], "Write Ivy code": [[23, "Write-Ivy-code"]], "Contents": [[23, "Contents"]], "Installing Ivy": [[23, "Installing-Ivy"]], "Accelerating PyTorch models with JAX": [[14, "Accelerating-PyTorch-models-with-JAX"]], "Write a model using Ivy": [[31, "Write-a-model-using-Ivy"]], "0.0: Unify": [[34, "0.0:-Unify"]], "Transpile any library": [[29, "Transpile-any-library"]], "0.1: Compile": [[35, "0.1:-Compile"]], "Transpile any model": [[30, "Transpile-any-model"]], "Round up": [[30, "Round-up"]], "Lazy vs Eager": [[27, "Lazy-vs-Eager"]], "3.1: Stable Diffusion": [[43, "3.1:-Stable-Diffusion"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "1.3: Dynamic vs Static": [[40, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[40, "Dynamic"]], "Static": [[40, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[40, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Transpiling a PyTorch model to build on top": [[17, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Accelerating MMPreTrain models with JAX": [[11, "Accelerating-MMPreTrain-models-with-JAX"]], "Quickstart": [[33, "Quickstart"]], "Get familiar with Ivy": [[33, "Get-familiar-with-Ivy"]], "Functional API": [[33, "Functional-API"]], "Stateful API": [[33, "Stateful-API"]], "Tracing code": [[33, "Tracing-code"]], "1.2: As a Decorator": [[39, "1.2:-As-a-Decorator"]], "Accelerating XGBoost with JAX": [[15, "Accelerating-XGBoost-with-JAX"]], "Tests": [[15, "Tests"]], "Loading the Data": [[15, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[15, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[15, "JAX-backend"]], "Tensorflow backend": [[15, "Tensorflow-backend"]], "PyTorch backend": [[15, "PyTorch-backend"]], "More exhaustive example": [[15, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[15, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[15, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[15, "Comparison-of-Metrics"]], "Transpiling a haiku model to build on top": [[18, "Transpiling-a-haiku-model-to-build-on-top"]], "How To Convert Models from PyTorch to PaddlePaddle": [[7, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[7, "About-the-Model"]], "Transpiling the Model": [[7, "Transpiling-the-Model"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[46, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[46, "Table-of-Contents"]], "Defining the model": [[46, "Defining-the-model"]], "Model construction": [[46, "Model-construction"]], "Some helper functions": [[46, "Some-helper-functions"]], "Transpiling the model": [[46, "Transpiling-the-model"]], "PyTorch pipeline": [[46, "PyTorch-pipeline"]], "Dataset download": [[46, "Dataset-download"]], "DataLoader": [[46, "DataLoader"]], "Training": [[46, "Training"]], "HuggingFace Tensorflow DeiT": [[49, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[49, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Image": [[84, "module-ivy.data_classes.container.image"], [61, "module-ivy.data_classes.array.image"]], "Deepmind PerceiverIO on GPU": [[47, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[47, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[47, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[47, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[47, "Run-the-demo..."]], "\u2026with torch backend": [[47, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[47, "....with-tensorflow-backend"]], "\u2026with jax backend": [[47, "...with-jax-backend"]], "\u2026with numpy backend": [[47, "...with-numpy-backend"]], "Conversions": [[76, "module-ivy.data_classes.container.conversions"], [53, "module-ivy.data_classes.array.conversions"]], "Resnet 18": [[51, "Resnet-18"]], "End-to-End Training Pipeline in Ivy": [[48, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[48, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[48, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[48, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[48, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[48, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[48, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[48, "Plotting-the-training-metrics"]], "Save the trained Model": [[48, "Save-the-trained-Model"]], "Ivy as a Transpiler Introduction": [[50, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[50, "To-use-the-transpiler:"]], "Transpiler Interface": [[50, "Transpiler-Interface"]], "Telemetry": [[50, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[50, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[50, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[50, "3.-Transpile-Models-\ud83c\udf10"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[52, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[52, "module-ivy.data_classes.array.activations"], [53, "module-ivy.data_classes.array.conversions"], [54, "module-ivy.data_classes.array.creation"], [55, "module-ivy.data_classes.array.data_type"], [56, "module-ivy.data_classes.array.device"], [57, "module-ivy.data_classes.array.elementwise"], [58, "module-ivy.data_classes.array.experimental"], [58, "module-ivy.data_classes.array.experimental.activations"], [58, "module-ivy.data_classes.array.experimental.conversions"], [58, "module-ivy.data_classes.array.experimental.creation"], [58, "module-ivy.data_classes.array.experimental.data_type"], [58, "module-ivy.data_classes.array.experimental.device"], [58, "module-ivy.data_classes.array.experimental.elementwise"], [58, "module-ivy.data_classes.array.experimental.general"], [58, "module-ivy.data_classes.array.experimental.gradients"], [58, "module-ivy.data_classes.array.experimental.image"], [58, "module-ivy.data_classes.array.experimental.layers"], [58, "module-ivy.data_classes.array.experimental.linear_algebra"], [58, "module-ivy.data_classes.array.experimental.losses"], [58, "module-ivy.data_classes.array.experimental.manipulation"], [58, "module-ivy.data_classes.array.experimental.norms"], [58, "module-ivy.data_classes.array.experimental.random"], [58, "module-ivy.data_classes.array.experimental.searching"], [58, "module-ivy.data_classes.array.experimental.set"], [58, "module-ivy.data_classes.array.experimental.sorting"], [58, "module-ivy.data_classes.array.experimental.statistical"], [58, "module-ivy.data_classes.array.experimental.utility"], [59, "module-ivy.data_classes.array.general"], [60, "module-ivy.data_classes.array.gradients"], [61, "module-ivy.data_classes.array.image"], [62, "module-ivy.data_classes.array.layers"], [63, "module-ivy.data_classes.array.linear_algebra"], [64, "module-ivy.data_classes.array.losses"], [65, "module-ivy.data_classes.array.manipulation"], [66, "module-ivy.data_classes.array.norms"], [67, "module-ivy.data_classes.array.random"], [68, "module-ivy.data_classes.array.searching"], [69, "module-ivy.data_classes.array.set"], [70, "module-ivy.data_classes.array.sorting"], [71, "module-ivy.data_classes.array.statistical"], [72, "module-ivy.data_classes.array.utility"], [73, "module-ivy.data_classes.array.wrapping"], [74, "module-ivy.data_classes.container.activations"], [75, "module-ivy.data_classes.container.base"], [76, "module-ivy.data_classes.container.conversions"], [77, "module-ivy.data_classes.container.creation"], [78, "module-ivy.data_classes.container.data_type"], [79, "module-ivy.data_classes.container.device"], [80, "module-ivy.data_classes.container.elementwise"], [81, "module-ivy.data_classes.container.experimental"], [81, "module-ivy.data_classes.container.experimental.activations"], [81, "module-ivy.data_classes.container.experimental.conversions"], [81, "module-ivy.data_classes.container.experimental.creation"], [81, "module-ivy.data_classes.container.experimental.data_type"], [81, "module-ivy.data_classes.container.experimental.device"], [81, "module-ivy.data_classes.container.experimental.elementwise"], [81, "module-ivy.data_classes.container.experimental.general"], [81, "module-ivy.data_classes.container.experimental.gradients"], [81, "module-ivy.data_classes.container.experimental.image"], [81, "module-ivy.data_classes.container.experimental.layers"], [81, "module-ivy.data_classes.container.experimental.linear_algebra"], [81, "module-ivy.data_classes.container.experimental.losses"], [81, "module-ivy.data_classes.container.experimental.manipulation"], [81, "module-ivy.data_classes.container.experimental.norms"], [81, "module-ivy.data_classes.container.experimental.random"], [81, "module-ivy.data_classes.container.experimental.searching"], [81, "module-ivy.data_classes.container.experimental.set"], [81, "module-ivy.data_classes.container.experimental.sorting"], [81, "module-ivy.data_classes.container.experimental.statistical"], [81, "module-ivy.data_classes.container.experimental.utility"], [82, "module-ivy.data_classes.container.general"], [83, "module-ivy.data_classes.container.gradients"], [84, "module-ivy.data_classes.container.image"], [85, "module-ivy.data_classes.container.layers"], [86, "module-ivy.data_classes.container.linear_algebra"], [87, "module-ivy.data_classes.container.losses"], [88, "module-ivy.data_classes.container.manipulation"], [89, "module-ivy.data_classes.container.norms"], [90, "module-ivy.data_classes.container.random"], [91, "module-ivy.data_classes.container.searching"], [92, "module-ivy.data_classes.container.set"], [93, "module-ivy.data_classes.container.sorting"], [94, "module-ivy.data_classes.container.statistical"], [95, "module-ivy.data_classes.container.utility"], [96, "module-ivy.data_classes.container.wrapping"], [97, "module-ivy.data_classes.factorized_tensor.base"], [98, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [99, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [100, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [101, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [102, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [103, "module-ivy.data_classes.array.array"], [104, "module-ivy.data_classes.container.container"], [106, "module-ivy.data_classes.nested_array.nested_array"], [107, "module-ivy.data_classes.nested_array.base"], [108, "module-ivy.data_classes.nested_array.elementwise"], [368, "module-ivy.functional.ivy.experimental.activations"], [369, "module-ivy.functional.ivy.experimental.constants"], [370, "module-ivy.functional.ivy.experimental.creation"], [371, "module-ivy.functional.ivy.experimental.data_type"], [372, "module-ivy.functional.ivy.experimental.device"], [373, "module-ivy.functional.ivy.experimental.elementwise"], [374, "module-ivy.functional.ivy.experimental.general"], [375, "module-ivy.functional.ivy.experimental.gradients"], [376, "module-ivy.functional.ivy.experimental.layers"], [377, "module-ivy.functional.ivy.experimental.linear_algebra"], [378, "module-ivy.functional.ivy.experimental.losses"], [379, "module-ivy.functional.ivy.experimental.manipulation"], [380, "module-ivy.functional.ivy.experimental.meta"], [381, "module-ivy.functional.ivy.experimental.nest"], [382, "module-ivy.functional.ivy.experimental.norms"], [383, "module-ivy.functional.ivy.experimental.random"], [384, "module-ivy.functional.ivy.experimental.searching"], [385, "module-ivy.functional.ivy.experimental.set"], [386, "module-ivy.functional.ivy.experimental.sorting"], [387, "module-ivy.functional.ivy.experimental.sparse_array"], [388, "module-ivy.functional.ivy.experimental.statistical"], [389, "module-ivy.functional.ivy.experimental.utility"], [627, "module-ivy.functional.ivy.activations"], [628, "module-ivy.functional.ivy.constants"], [629, "module-ivy.functional.ivy.control_flow_ops"], [630, "module-ivy.functional.ivy.creation"], [631, "module-ivy.functional.ivy.data_type"], [632, "module-ivy.functional.ivy.device"], [633, "module-ivy.functional.ivy.elementwise"], [634, "module-ivy.functional.ivy.experimental"], [635, "module-ivy.functional.ivy.general"], [636, "module-ivy.functional.ivy.gradients"], [637, "module-ivy.functional.ivy.layers"], [638, "module-ivy.functional.ivy.linear_algebra"], [639, "module-ivy.functional.ivy.losses"], [640, "module-ivy.functional.ivy.manipulation"], [641, "module-ivy.functional.ivy.meta"], [642, "module-ivy.functional.ivy.nest"], [643, "module-ivy.functional.ivy.norms"], [644, "module-ivy.functional.ivy.random"], [645, "module-ivy.functional.ivy.searching"], [646, "module-ivy.functional.ivy.set"], [647, "module-ivy.functional.ivy.sorting"], [648, "module-ivy.functional.ivy.statistical"], [649, "module-ivy.functional.ivy.utility"], [772, "module-ivy_tests.test_ivy.helpers.assertions"], [773, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [774, "module-ivy_tests.test_ivy.helpers.function_testing"], [775, "module-ivy_tests.test_ivy.helpers.globals"], [776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [780, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [781, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [782, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [783, "module-ivy_tests.test_ivy.helpers.structs"], [784, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [785, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [789, "module-ivy.stateful.activations"], [790, "module-ivy.stateful.converters"], [791, "module-ivy.stateful.helpers"], [792, "module-ivy.stateful.initializers"], [793, "module-ivy.stateful.layers"], [794, "module-ivy.stateful.losses"], [795, "module-ivy.stateful.module"], [796, "module-ivy.stateful.norms"], [797, "module-ivy.stateful.optimizers"], [798, "module-ivy.stateful.sequential"], [799, "module-ivy.utils.assertions"], [800, "module-ivy.utils.backend"], [801, "module-ivy.utils.backend.ast_helpers"], [802, "module-ivy.utils.backend.handler"], [803, "module-ivy.utils.backend.sub_backend_handler"], [804, "module-ivy.utils.binaries"], [805, "module-ivy.utils.decorator_utils"], [806, "module-ivy.utils.dynamic_import"], [807, "module-ivy.utils.einsum_parser"], [808, "module-ivy.utils.einsum_path_helpers"], [809, "module-ivy.utils.exceptions"], [810, "module-ivy.utils.inspection"], [811, "module-ivy.utils.logging"], [812, "module-ivy.utils.profiler"], [813, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[52, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[53, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[53, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[54, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[54, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[55, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[55, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[56, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[56, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[56, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[56, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[56, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[57, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[57, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[58, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[58, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[58, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[58, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[58, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[58, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[58, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[58, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[58, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[58, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[58, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[58, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[58, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[58, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[58, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[58, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[58, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[58, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[58, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[58, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[58, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[58, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[58, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[58, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[58, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[58, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[58, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[58, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[58, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[58, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[58, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[58, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[58, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[58, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[58, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[58, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[58, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[58, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[58, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[58, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[58, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[58, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[58, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[58, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[58, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[58, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[58, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[58, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[58, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[58, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[58, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[58, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[58, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[58, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[58, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[58, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[59, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[59, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[60, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[60, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[61, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[61, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[61, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[62, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[62, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[63, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[63, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[64, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[64, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[64, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[64, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[64, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[64, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[65, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[65, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[66, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[66, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[66, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[66, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[67, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[67, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[67, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[67, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[67, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[67, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[67, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[67, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[68, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[68, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[69, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[69, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[69, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[69, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[69, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[69, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[69, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[70, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[70, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[71, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[71, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[72, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[72, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[72, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[72, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[72, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[73, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[73, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[73, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[74, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[74, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[75, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[75, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[75, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[75, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[75, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[75, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[75, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[75, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[76, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[76, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[77, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[77, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[78, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[78, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[79, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[79, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[79, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[79, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[79, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[79, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[79, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[80, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[80, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[81, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[81, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[81, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[81, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[81, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[81, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[81, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[81, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[81, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[81, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[81, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[81, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[81, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[81, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[81, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[81, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[81, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[81, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[81, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[81, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[81, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[81, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[81, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[81, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[81, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[81, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[81, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[81, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[81, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[81, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[81, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[81, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[81, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[81, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[81, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[81, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[81, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[81, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[81, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[81, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[81, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[81, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[81, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[81, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[81, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[81, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[81, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[81, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[81, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[81, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[81, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[81, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[81, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[81, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[81, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[81, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[81, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[82, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[82, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[83, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[83, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[84, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[84, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[84, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[85, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[85, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[86, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[86, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[87, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[87, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[88, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[88, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[89, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[89, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[89, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[89, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[90, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[90, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[90, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[91, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[91, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[92, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[92, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[92, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[92, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[92, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[92, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[92, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[92, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[92, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[92, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[92, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[93, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[93, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[94, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[94, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[95, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[95, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[96, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[96, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[96, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[97, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[97, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[98, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[98, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[99, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[99, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[100, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[100, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[101, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[101, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[102, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[102, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[103, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[103, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[103, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[103, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[104, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[104, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[104, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[106, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[106, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[106, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[106, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[106, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[107, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[107, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[108, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[108, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[108, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[108, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[111, "ivy.gelu"], [627, "ivy.gelu"]], "gelu() (ivy.array method)": [[111, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[111, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[112, "ivy.hardswish"], [627, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[112, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[112, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[113, "ivy.leaky_relu"], [627, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[113, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[113, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[114, "ivy.log_softmax"], [627, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[114, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[114, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[115, "ivy.mish"], [627, "ivy.mish"]], "mish() (ivy.array method)": [[115, "ivy.Array.mish"]], "mish() (ivy.container method)": [[115, "ivy.Container.mish"]], "relu() (in module ivy)": [[116, "ivy.relu"], [627, "ivy.relu"]], "relu() (ivy.array method)": [[116, "ivy.Array.relu"]], "relu() (ivy.container method)": [[116, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[117, "ivy.sigmoid"], [627, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[117, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[117, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[118, "ivy.softmax"], [627, "ivy.softmax"]], "softmax() (ivy.array method)": [[118, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[118, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[119, "ivy.softplus"], [627, "ivy.softplus"]], "softplus() (ivy.array method)": [[119, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[119, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[120, "ivy.softsign"], [627, "ivy.softsign"]], "cmp_is() (in module ivy)": [[121, "ivy.cmp_is"], [629, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[122, "ivy.cmp_isnot"], [629, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[123, "ivy.for_loop"], [629, "ivy.for_loop"]], "if_else() (in module ivy)": [[124, "ivy.if_else"], [629, "ivy.if_else"]], "try_except() (in module ivy)": [[125, "ivy.try_except"], [629, "ivy.try_except"]], "while_loop() (in module ivy)": [[126, "ivy.while_loop"], [629, "ivy.while_loop"]], "arange() (in module ivy)": [[127, "ivy.arange"], [630, "ivy.arange"]], "array() (in module ivy)": [[128, "ivy.array"], [630, "ivy.array"]], "asarray() (in module ivy)": [[129, "ivy.asarray"], [630, "ivy.asarray"]], "asarray() (ivy.array method)": [[129, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[129, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[130, "ivy.copy_array"], [630, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[130, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[130, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[131, "ivy.empty"], [630, "ivy.empty"]], "empty_like() (in module ivy)": [[132, "ivy.empty_like"], [630, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[132, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[132, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[133, "ivy.eye"], [630, "ivy.eye"]], "from_dlpack() (in module ivy)": [[134, "ivy.from_dlpack"], [630, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[134, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[134, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[135, "ivy.frombuffer"], [630, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[135, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[136, "ivy.full"], [630, "ivy.full"]], "full_like() (in module ivy)": [[137, "ivy.full_like"], [630, "ivy.full_like"]], "full_like() (ivy.array method)": [[137, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[137, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[138, "ivy.linspace"], [630, "ivy.linspace"]], "linspace() (ivy.array method)": [[138, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[138, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[139, "ivy.logspace"], [630, "ivy.logspace"]], "logspace() (ivy.array method)": [[139, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[139, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[140, "ivy.meshgrid"], [630, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[140, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[140, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[141, "ivy.native_array"], [630, "ivy.native_array"]], "native_array() (ivy.array method)": [[141, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[141, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[142, "ivy.one_hot"], [630, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[142, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[142, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[143, "ivy.ones"], [630, "ivy.ones"]], "ones_like() (in module ivy)": [[144, "ivy.ones_like"], [630, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[144, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[144, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[145, "ivy.to_dlpack"], [630, "ivy.to_dlpack"]], "tril() (in module ivy)": [[146, "ivy.tril"], [630, "ivy.tril"]], "tril() (ivy.array method)": [[146, "ivy.Array.tril"]], "tril() (ivy.container method)": [[146, "ivy.Container.tril"]], "triu() (in module ivy)": [[147, "ivy.triu"], [630, "ivy.triu"]], "triu() (ivy.array method)": [[147, "ivy.Array.triu"]], "triu() (ivy.container method)": [[147, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[148, "ivy.triu_indices"], [630, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[148, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[149, "ivy.zeros"], [630, "ivy.zeros"]], "zeros_like() (in module ivy)": [[150, "ivy.zeros_like"], [630, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[150, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[150, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[151, "ivy.as_ivy_dtype"], [631, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[152, "ivy.as_native_dtype"], [631, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[153, "ivy.astype"], [631, "ivy.astype"]], "astype() (ivy.array method)": [[153, "ivy.Array.astype"]], "astype() (ivy.container method)": [[153, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[154, "ivy.broadcast_arrays"], [631, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[154, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[154, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[155, "ivy.broadcast_to"], [631, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[155, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[155, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[156, "ivy.can_cast"], [631, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[156, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[156, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[157, "ivy.check_float"], [631, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[158, "ivy.closest_valid_dtype"], [631, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[159, "ivy.default_complex_dtype"], [631, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[160, "ivy.default_dtype"], [631, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[161, "ivy.default_float_dtype"], [631, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[162, "ivy.default_int_dtype"], [631, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[163, "ivy.default_uint_dtype"], [631, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[164, "ivy.dtype"], [631, "ivy.dtype"]], "dtype() (ivy.array method)": [[164, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[164, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[165, "ivy.dtype_bits"], [631, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[166, "ivy.finfo"], [631, "ivy.finfo"]], "finfo() (ivy.array method)": [[166, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[166, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[167, "ivy.function_supported_dtypes"], [631, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[168, "ivy.function_unsupported_dtypes"], [631, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[169, "ivy.iinfo"], [631, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[169, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[169, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[170, "ivy.infer_default_dtype"], [631, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[171, "ivy.invalid_dtype"], [631, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[172, "ivy.is_bool_dtype"], [631, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[172, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[172, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[173, "ivy.is_complex_dtype"], [631, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[173, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[174, "ivy.is_float_dtype"], [631, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[174, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[174, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[175, "ivy.is_hashable_dtype"], [631, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[176, "ivy.is_int_dtype"], [631, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[176, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[176, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[177, "ivy.is_native_dtype"], [631, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[178, "ivy.is_uint_dtype"], [631, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[178, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[178, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[179, "ivy.promote_types"], [631, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[180, "ivy.promote_types_of_inputs"], [631, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[181, "ivy.result_type"], [631, "ivy.result_type"]], "result_type() (ivy.array method)": [[181, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[181, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[182, "ivy.set_default_complex_dtype"], [631, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[183, "ivy.set_default_dtype"], [631, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[184, "ivy.set_default_float_dtype"], [631, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[185, "ivy.set_default_int_dtype"], [631, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[186, "ivy.set_default_uint_dtype"], [631, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[187, "ivy.type_promote_arrays"], [631, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[188, "ivy.unset_default_complex_dtype"], [631, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[189, "ivy.unset_default_dtype"], [631, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[190, "ivy.unset_default_float_dtype"], [631, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[191, "ivy.unset_default_int_dtype"], [631, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[192, "ivy.unset_default_uint_dtype"], [631, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[193, "ivy.valid_dtype"], [631, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[194, "ivy.as_ivy_dev"], [632, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[195, "ivy.as_native_dev"], [632, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[196, "ivy.clear_cached_mem_on_dev"], [632, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[197, "ivy.default_device"], [632, "ivy.default_device"]], "dev() (in module ivy)": [[198, "ivy.dev"], [632, "ivy.dev"]], "dev() (ivy.array method)": [[198, "ivy.Array.dev"]], "dev() (ivy.container method)": [[198, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[199, "ivy.dev_util"], [632, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[200, "ivy.function_supported_devices"], [632, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[201, "ivy.function_unsupported_devices"], [632, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[202, "ivy.get_all_ivy_arrays_on_dev"], [632, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[203, "ivy.gpu_is_available"], [632, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[204, "ivy.handle_soft_device_variable"], [632, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[205, "ivy.num_cpu_cores"], [632, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[206, "ivy.num_gpus"], [632, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[207, "ivy.num_ivy_arrays_on_dev"], [632, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[208, "ivy.percent_used_mem_on_dev"], [632, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[209, "ivy.print_all_ivy_arrays_on_dev"], [632, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[210, "ivy.set_default_device"], [632, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[211, "ivy.set_soft_device_mode"], [632, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[212, "ivy.set_split_factor"], [632, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[213, "ivy.split_factor"], [632, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[214, "ivy.split_func_call"], [632, "ivy.split_func_call"]], "to_device() (in module ivy)": [[215, "ivy.to_device"], [632, "ivy.to_device"]], "to_device() (ivy.array method)": [[215, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[215, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[216, "ivy.total_mem_on_dev"], [632, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[217, "ivy.tpu_is_available"], [632, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[218, "ivy.unset_default_device"], [632, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[219, "ivy.unset_soft_device_mode"], [632, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[220, "ivy.used_mem_on_dev"], [632, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[221, "ivy.abs"], [633, "ivy.abs"]], "abs() (ivy.array method)": [[221, "ivy.Array.abs"]], "abs() (ivy.container method)": [[221, "ivy.Container.abs"]], "acos() (in module ivy)": [[222, "ivy.acos"], [633, "ivy.acos"]], "acos() (ivy.array method)": [[222, "ivy.Array.acos"]], "acos() (ivy.container method)": [[222, "ivy.Container.acos"]], "acosh() (in module ivy)": [[223, "ivy.acosh"], [633, "ivy.acosh"]], "acosh() (ivy.array method)": [[223, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[223, "ivy.Container.acosh"]], "add() (in module ivy)": [[224, "ivy.add"], [633, "ivy.add"]], "add() (ivy.array method)": [[224, "ivy.Array.add"]], "add() (ivy.container method)": [[224, "ivy.Container.add"]], "angle() (in module ivy)": [[225, "ivy.angle"], [633, "ivy.angle"]], "angle() (ivy.array method)": [[225, "ivy.Array.angle"]], "angle() (ivy.container method)": [[225, "ivy.Container.angle"]], "asin() (in module ivy)": [[226, "ivy.asin"], [633, "ivy.asin"]], "asin() (ivy.array method)": [[226, "ivy.Array.asin"]], "asin() (ivy.container method)": [[226, "ivy.Container.asin"]], "asinh() (in module ivy)": [[227, "ivy.asinh"], [633, "ivy.asinh"]], "asinh() (ivy.array method)": [[227, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[227, "ivy.Container.asinh"]], "atan() (in module ivy)": [[228, "ivy.atan"], [633, "ivy.atan"]], "atan() (ivy.array method)": [[228, "ivy.Array.atan"]], "atan() (ivy.container method)": [[228, "ivy.Container.atan"]], "atan2() (in module ivy)": [[229, "ivy.atan2"], [633, "ivy.atan2"]], "atan2() (ivy.array method)": [[229, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[229, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[230, "ivy.atanh"], [633, "ivy.atanh"]], "atanh() (ivy.array method)": [[230, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[230, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[231, "ivy.bitwise_and"], [633, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[231, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[231, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[232, "ivy.bitwise_invert"], [633, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[232, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[232, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[233, "ivy.bitwise_left_shift"], [633, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[233, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[233, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[234, "ivy.bitwise_or"], [633, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[234, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[234, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[235, "ivy.bitwise_right_shift"], [633, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[235, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[235, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[236, "ivy.bitwise_xor"], [633, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[236, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[236, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[237, "ivy.ceil"], [633, "ivy.ceil"]], "ceil() (ivy.array method)": [[237, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[237, "ivy.Container.ceil"]], "cos() (in module ivy)": [[238, "ivy.cos"], [633, "ivy.cos"]], "cos() (ivy.array method)": [[238, "ivy.Array.cos"]], "cos() (ivy.container method)": [[238, "ivy.Container.cos"]], "cosh() (in module ivy)": [[239, "ivy.cosh"], [633, "ivy.cosh"]], "cosh() (ivy.array method)": [[239, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[239, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[240, "ivy.deg2rad"], [633, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[240, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[240, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[241, "ivy.divide"], [633, "ivy.divide"]], "divide() (ivy.array method)": [[241, "ivy.Array.divide"]], "divide() (ivy.container method)": [[241, "ivy.Container.divide"]], "equal() (in module ivy)": [[242, "ivy.equal"], [633, "ivy.equal"]], "equal() (ivy.array method)": [[242, "ivy.Array.equal"]], "equal() (ivy.container method)": [[242, "ivy.Container.equal"]], "erf() (in module ivy)": [[243, "ivy.erf"], [633, "ivy.erf"]], "erf() (ivy.array method)": [[243, "ivy.Array.erf"]], "erf() (ivy.container method)": [[243, "ivy.Container.erf"]], "exp() (in module ivy)": [[244, "ivy.exp"], [633, "ivy.exp"]], "exp() (ivy.array method)": [[244, "ivy.Array.exp"]], "exp() (ivy.container method)": [[244, "ivy.Container.exp"]], "exp2() (in module ivy)": [[245, "ivy.exp2"], [633, "ivy.exp2"]], "exp2() (ivy.array method)": [[245, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[245, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[246, "ivy.expm1"], [633, "ivy.expm1"]], "expm1() (ivy.array method)": [[246, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[246, "ivy.Container.expm1"]], "floor() (in module ivy)": [[247, "ivy.floor"], [633, "ivy.floor"]], "floor() (ivy.array method)": [[247, "ivy.Array.floor"]], "floor() (ivy.container method)": [[247, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[248, "ivy.floor_divide"], [633, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[248, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[248, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[249, "ivy.fmin"], [633, "ivy.fmin"]], "fmin() (ivy.array method)": [[249, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[249, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[250, "ivy.fmod"], [633, "ivy.fmod"]], "fmod() (ivy.array method)": [[250, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[250, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[251, "ivy.gcd"], [633, "ivy.gcd"]], "gcd() (ivy.array method)": [[251, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[251, "ivy.Container.gcd"]], "greater() (in module ivy)": [[252, "ivy.greater"], [633, "ivy.greater"]], "greater() (ivy.array method)": [[252, "ivy.Array.greater"]], "greater() (ivy.container method)": [[252, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[253, "ivy.greater_equal"], [633, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[253, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[253, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[254, "ivy.imag"], [633, "ivy.imag"]], "imag() (ivy.array method)": [[254, "ivy.Array.imag"]], "imag() (ivy.container method)": [[254, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[255, "ivy.isfinite"], [633, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[255, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[255, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[256, "ivy.isinf"], [633, "ivy.isinf"]], "isinf() (ivy.array method)": [[256, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[256, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[257, "ivy.isnan"], [633, "ivy.isnan"]], "isnan() (ivy.array method)": [[257, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[257, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[258, "ivy.isreal"], [633, "ivy.isreal"]], "isreal() (ivy.array method)": [[258, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[258, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[259, "ivy.lcm"], [633, "ivy.lcm"]], "lcm() (ivy.array method)": [[259, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[259, "ivy.Container.lcm"]], "less() (in module ivy)": [[260, "ivy.less"], [633, "ivy.less"]], "less() (ivy.array method)": [[260, "ivy.Array.less"]], "less() (ivy.container method)": [[260, "ivy.Container.less"]], "less_equal() (in module ivy)": [[261, "ivy.less_equal"], [633, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[261, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[261, "ivy.Container.less_equal"]], "log() (in module ivy)": [[262, "ivy.log"], [633, "ivy.log"]], "log() (ivy.array method)": [[262, "ivy.Array.log"]], "log() (ivy.container method)": [[262, "ivy.Container.log"]], "log10() (in module ivy)": [[263, "ivy.log10"], [633, "ivy.log10"]], "log10() (ivy.array method)": [[263, "ivy.Array.log10"]], "log10() (ivy.container method)": [[263, "ivy.Container.log10"]], "log1p() (in module ivy)": [[264, "ivy.log1p"], [633, "ivy.log1p"]], "log1p() (ivy.array method)": [[264, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[264, "ivy.Container.log1p"]], "log2() (in module ivy)": [[265, "ivy.log2"], [633, "ivy.log2"]], "log2() (ivy.array method)": [[265, "ivy.Array.log2"]], "log2() (ivy.container method)": [[265, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[266, "ivy.logaddexp"], [633, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[266, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[266, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[267, "ivy.logaddexp2"], [633, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[267, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[267, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[268, "ivy.logical_and"], [633, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[268, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[268, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[269, "ivy.logical_not"], [633, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[269, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[269, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[270, "ivy.logical_or"], [633, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[270, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[270, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[271, "ivy.logical_xor"], [633, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[271, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[271, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[272, "ivy.maximum"], [633, "ivy.maximum"]], "maximum() (ivy.array method)": [[272, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[272, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[273, "ivy.minimum"], [633, "ivy.minimum"]], "minimum() (ivy.array method)": [[273, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[273, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[274, "ivy.multiply"], [633, "ivy.multiply"]], "multiply() (ivy.array method)": [[274, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[274, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[275, "ivy.nan_to_num"], [633, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[275, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[275, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[276, "ivy.negative"], [633, "ivy.negative"]], "negative() (ivy.array method)": [[276, "ivy.Array.negative"]], "negative() (ivy.container method)": [[276, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[277, "ivy.not_equal"], [633, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[277, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[277, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[278, "ivy.positive"], [633, "ivy.positive"]], "positive() (ivy.array method)": [[278, "ivy.Array.positive"]], "positive() (ivy.container method)": [[278, "ivy.Container.positive"]], "pow() (in module ivy)": [[279, "ivy.pow"], [633, "ivy.pow"]], "pow() (ivy.array method)": [[279, "ivy.Array.pow"]], "pow() (ivy.container method)": [[279, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[280, "ivy.rad2deg"], [633, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[280, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[280, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[281, "ivy.real"], [633, "ivy.real"]], "real() (ivy.array method)": [[281, "ivy.Array.real"]], "real() (ivy.container method)": [[281, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[282, "ivy.reciprocal"], [633, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[282, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[282, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[283, "ivy.remainder"], [633, "ivy.remainder"]], "remainder() (ivy.array method)": [[283, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[283, "ivy.Container.remainder"]], "round() (in module ivy)": [[284, "ivy.round"], [633, "ivy.round"]], "round() (ivy.array method)": [[284, "ivy.Array.round"]], "round() (ivy.container method)": [[284, "ivy.Container.round"]], "sign() (in module ivy)": [[285, "ivy.sign"], [633, "ivy.sign"]], "sign() (ivy.array method)": [[285, "ivy.Array.sign"]], "sign() (ivy.container method)": [[285, "ivy.Container.sign"]], "sin() (in module ivy)": [[286, "ivy.sin"], [633, "ivy.sin"]], "sin() (ivy.array method)": [[286, "ivy.Array.sin"]], "sin() (ivy.container method)": [[286, "ivy.Container.sin"]], "sinh() (in module ivy)": [[287, "ivy.sinh"], [633, "ivy.sinh"]], "sinh() (ivy.array method)": [[287, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[287, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[288, "ivy.sqrt"], [633, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[288, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[288, "ivy.Container.sqrt"]], "square() (in module ivy)": [[289, "ivy.square"], [633, "ivy.square"]], "square() (ivy.array method)": [[289, "ivy.Array.square"]], "square() (ivy.container method)": [[289, "ivy.Container.square"]], "subtract() (in module ivy)": [[290, "ivy.subtract"], [633, "ivy.subtract"]], "subtract() (ivy.array method)": [[290, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[290, "ivy.Container.subtract"]], "tan() (in module ivy)": [[291, "ivy.tan"], [633, "ivy.tan"]], "tan() (ivy.array method)": [[291, "ivy.Array.tan"]], "tan() (ivy.container method)": [[291, "ivy.Container.tan"]], "tanh() (in module ivy)": [[292, "ivy.tanh"], [633, "ivy.tanh"]], "tanh() (ivy.array method)": [[292, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[292, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[293, "ivy.trapz"], [633, "ivy.trapz"]], "trapz() (ivy.array method)": [[293, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[293, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[294, "ivy.trunc"], [633, "ivy.trunc"]], "trunc() (ivy.array method)": [[294, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[294, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[295, "ivy.trunc_divide"], [633, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[295, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[295, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[296, "ivy.celu"], [368, "ivy.celu"]], "celu() (ivy.array method)": [[296, "ivy.Array.celu"]], "celu() (ivy.container method)": [[296, "ivy.Container.celu"]], "elu() (in module ivy)": [[297, "ivy.elu"], [368, "ivy.elu"]], "elu() (ivy.array method)": [[297, "ivy.Array.elu"]], "elu() (ivy.container method)": [[297, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[298, "ivy.hardshrink"], [368, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[298, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[298, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[299, "ivy.hardsilu"], [368, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[299, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[299, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[300, "ivy.hardtanh"], [368, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[300, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[300, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[301, "ivy.logit"], [368, "ivy.logit"]], "logit() (ivy.array method)": [[301, "ivy.Array.logit"]], "logit() (ivy.container method)": [[301, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[302, "ivy.logsigmoid"], [368, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[302, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[302, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[303, "ivy.prelu"], [368, "ivy.prelu"]], "prelu() (ivy.array method)": [[303, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[303, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[304, "ivy.relu6"], [368, "ivy.relu6"]], "relu6() (ivy.array method)": [[304, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[304, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[305, "ivy.scaled_tanh"], [368, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[305, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[305, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[306, "ivy.selu"], [368, "ivy.selu"]], "selu() (ivy.array method)": [[306, "ivy.Array.selu"]], "selu() (ivy.container method)": [[306, "ivy.Container.selu"]], "silu() (in module ivy)": [[307, "ivy.silu"], [368, "ivy.silu"]], "silu() (ivy.array method)": [[307, "ivy.Array.silu"]], "silu() (ivy.container method)": [[307, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[308, "ivy.softshrink"], [368, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[308, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[308, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[309, "ivy.stanh"], [368, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[310, "ivy.tanhshrink"], [368, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[310, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[310, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[311, "ivy.threshold"], [368, "ivy.threshold"]], "threshold() (ivy.array method)": [[311, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[311, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[312, "ivy.thresholded_relu"], [368, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[312, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[312, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[313, "ivy.blackman_window"], [370, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[313, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[313, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[314, "ivy.eye_like"], [370, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[314, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[314, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[315, "ivy.hamming_window"], [370, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[315, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[316, "ivy.hann_window"], [370, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[316, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[317, "ivy.indices"], [370, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[318, "ivy.kaiser_bessel_derived_window"], [370, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[318, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[319, "ivy.kaiser_window"], [370, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[319, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[320, "ivy.mel_weight_matrix"], [370, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[320, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[320, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[321, "ivy.ndenumerate"], [370, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[322, "ivy.ndindex"], [370, "ivy.ndindex"]], "polyval() (in module ivy)": [[323, "ivy.polyval"], [370, "ivy.polyval"]], "polyval() (ivy.container method)": [[323, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[324, "ivy.random_cp"], [370, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[325, "ivy.random_parafac2"], [370, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[326, "ivy.random_tr"], [370, "ivy.random_tr"]], "random_tt() (in module ivy)": [[327, "ivy.random_tt"], [370, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[328, "ivy.random_tucker"], [370, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[329, "ivy.tril_indices"], [370, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[329, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[330, "ivy.trilu"], [370, "ivy.trilu"]], "trilu() (ivy.array method)": [[330, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[330, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[331, "ivy.unsorted_segment_mean"], [370, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[331, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[331, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[332, "ivy.unsorted_segment_min"], [370, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[332, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[332, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[333, "ivy.unsorted_segment_sum"], [370, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[333, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[333, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[334, "ivy.vorbis_window"], [370, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[334, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[335, "ivy.allclose"], [373, "ivy.allclose"]], "allclose() (ivy.array method)": [[335, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[335, "ivy.Container.allclose"]], "amax() (in module ivy)": [[336, "ivy.amax"], [373, "ivy.amax"]], "amax() (ivy.array method)": [[336, "ivy.Array.amax"]], "amax() (ivy.container method)": [[336, "ivy.Container.amax"]], "amin() (in module ivy)": [[337, "ivy.amin"], [373, "ivy.amin"]], "amin() (ivy.array method)": [[337, "ivy.Array.amin"]], "amin() (ivy.container method)": [[337, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[338, "ivy.binarizer"], [373, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[338, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[338, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[339, "ivy.conj"], [373, "ivy.conj"]], "conj() (ivy.array method)": [[339, "ivy.Array.conj"]], "conj() (ivy.container method)": [[339, "ivy.Container.conj"]], "copysign() (in module ivy)": [[340, "ivy.copysign"], [373, "ivy.copysign"]], "copysign() (ivy.array method)": [[340, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[340, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[341, "ivy.count_nonzero"], [373, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[341, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[341, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[342, "ivy.diff"], [373, "ivy.diff"]], "diff() (ivy.array method)": [[342, "ivy.Array.diff"]], "diff() (ivy.container method)": [[342, "ivy.Container.diff"]], "digamma() (in module ivy)": [[343, "ivy.digamma"], [373, "ivy.digamma"]], "digamma() (ivy.array method)": [[343, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[343, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[344, "ivy.erfc"], [373, "ivy.erfc"]], "erfc() (ivy.array method)": [[344, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[344, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[345, "ivy.erfinv"], [373, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[345, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[345, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[346, "ivy.fix"], [373, "ivy.fix"]], "fix() (ivy.array method)": [[346, "ivy.Array.fix"]], "fix() (ivy.container method)": [[346, "ivy.Container.fix"]], "float_power() (in module ivy)": [[347, "ivy.float_power"], [373, "ivy.float_power"]], "float_power() (ivy.array method)": [[347, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[347, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[348, "ivy.fmax"], [373, "ivy.fmax"]], "fmax() (ivy.array method)": [[348, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[348, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[349, "ivy.frexp"], [373, "ivy.frexp"]], "frexp() (ivy.array method)": [[349, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[349, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[350, "ivy.gradient"], [373, "ivy.gradient"]], "gradient() (ivy.array method)": [[350, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[350, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[351, "ivy.hypot"], [373, "ivy.hypot"]], "hypot() (ivy.array method)": [[351, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[351, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[352, "ivy.isclose"], [373, "ivy.isclose"]], "isclose() (ivy.array method)": [[352, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[352, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[353, "ivy.ldexp"], [373, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[353, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[353, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[354, "ivy.lerp"], [373, "ivy.lerp"]], "lerp() (ivy.array method)": [[354, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[354, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[355, "ivy.lgamma"], [373, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[355, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[355, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[356, "ivy.modf"], [373, "ivy.modf"]], "modf() (ivy.array method)": [[356, "ivy.Array.modf"]], "modf() (ivy.container method)": [[356, "ivy.Container.modf"]], "nansum() (in module ivy)": [[357, "ivy.nansum"], [373, "ivy.nansum"]], "nansum() (ivy.array method)": [[357, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[357, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[358, "ivy.nextafter"], [373, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[358, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[358, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[359, "ivy.signbit"], [373, "ivy.signbit"]], "signbit() (ivy.array method)": [[359, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[359, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[360, "ivy.sinc"], [373, "ivy.sinc"]], "sinc() (ivy.array method)": [[360, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[360, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[361, "ivy.sparsify_tensor"], [373, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[361, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[361, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[362, "ivy.xlogy"], [373, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[362, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[362, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[363, "ivy.zeta"], [373, "ivy.zeta"]], "zeta() (ivy.array method)": [[363, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[363, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[364, "ivy.reduce"], [374, "ivy.reduce"]], "reduce() (ivy.array method)": [[364, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[364, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[365, "ivy.bind_custom_gradient_function"], [375, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[366, "ivy.jvp"], [375, "ivy.jvp"]], "vjp() (in module ivy)": [[367, "ivy.vjp"], [375, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[368, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[369, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[370, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[371, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[372, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[373, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[374, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[375, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[376, "ivy.adaptive_avg_pool1d"], [390, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[376, "ivy.adaptive_avg_pool2d"], [391, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[376, "ivy.adaptive_max_pool2d"], [392, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[376, "ivy.adaptive_max_pool3d"], [393, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[376, "ivy.area_interpolate"], [394, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[376, "ivy.avg_pool1d"], [395, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[376, "ivy.avg_pool2d"], [396, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[376, "ivy.avg_pool3d"], [397, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[376, "ivy.dct"], [398, "ivy.dct"]], "dft() (in module ivy)": [[376, "ivy.dft"], [399, "ivy.dft"]], "dropout1d() (in module ivy)": [[376, "ivy.dropout1d"], [400, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[376, "ivy.dropout2d"], [401, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[376, "ivy.dropout3d"], [402, "ivy.dropout3d"]], "embedding() (in module ivy)": [[376, "ivy.embedding"], [403, "ivy.embedding"]], "fft() (in module ivy)": [[376, "ivy.fft"], [404, "ivy.fft"]], "fft2() (in module ivy)": [[376, "ivy.fft2"], [405, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[376, "ivy.generate_einsum_equation"], [406, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[376, "ivy.get_interpolate_kernel"], [407, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[376, "ivy.idct"], [408, "ivy.idct"]], "ifft() (in module ivy)": [[376, "ivy.ifft"], [409, "ivy.ifft"]], "ifftn() (in module ivy)": [[376, "ivy.ifftn"], [410, "ivy.ifftn"]], "interp() (in module ivy)": [[376, "ivy.interp"], [411, "ivy.interp"]], "interpolate() (in module ivy)": [[376, "ivy.interpolate"], [412, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[376, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[376, "ivy.max_pool1d"], [413, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[376, "ivy.max_pool2d"], [414, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[376, "ivy.max_pool3d"], [415, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[376, "ivy.max_unpool1d"], [416, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[376, "ivy.nearest_interpolate"], [417, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[376, "ivy.pool"], [418, "ivy.pool"]], "reduce_window() (in module ivy)": [[376, "ivy.reduce_window"], [419, "ivy.reduce_window"]], "rfft() (in module ivy)": [[376, "ivy.rfft"], [420, "ivy.rfft"]], "rfftn() (in module ivy)": [[376, "ivy.rfftn"], [421, "ivy.rfftn"]], "rnn() (in module ivy)": [[376, "ivy.rnn"], [422, "ivy.rnn"]], "sliding_window() (in module ivy)": [[376, "ivy.sliding_window"], [423, "ivy.sliding_window"]], "stft() (in module ivy)": [[376, "ivy.stft"], [424, "ivy.stft"]], "adjoint() (in module ivy)": [[377, "ivy.adjoint"], [425, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[377, "ivy.batched_outer"], [426, "ivy.batched_outer"]], "cond() (in module ivy)": [[377, "ivy.cond"], [427, "ivy.cond"]], "diagflat() (in module ivy)": [[377, "ivy.diagflat"], [428, "ivy.diagflat"]], "dot() (in module ivy)": [[377, "ivy.dot"], [429, "ivy.dot"]], "eig() (in module ivy)": [[377, "ivy.eig"], [430, "ivy.eig"], [638, "ivy.eig"], [673, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[377, "ivy.eigh_tridiagonal"], [431, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[377, "ivy.eigvals"], [432, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[377, "ivy.general_inner_product"], [433, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[377, "ivy.higher_order_moment"], [434, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[377, "ivy.initialize_tucker"], [435, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[377, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[377, "ivy.khatri_rao"], [436, "ivy.khatri_rao"]], "kron() (in module ivy)": [[377, "ivy.kron"], [437, "ivy.kron"]], "kronecker() (in module ivy)": [[377, "ivy.kronecker"], [438, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[377, "ivy.lu_factor"], [439, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[377, "ivy.lu_solve"], [440, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[377, "ivy.make_svd_non_negative"], [441, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[377, "ivy.matrix_exp"], [442, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[377, "ivy.mode_dot"], [443, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[377, "ivy.multi_dot"], [444, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[377, "ivy.multi_mode_dot"], [445, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[377, "ivy.partial_tucker"], [446, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[377, "ivy.solve_triangular"], [447, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[377, "ivy.svd_flip"], [448, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[377, "ivy.tensor_train"], [449, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[377, "ivy.truncated_svd"], [450, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[377, "ivy.tt_matrix_to_tensor"], [451, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[377, "ivy.tucker"], [452, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[378, "ivy.hinge_embedding_loss"], [453, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[378, "ivy.huber_loss"], [454, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[378, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[378, "ivy.kl_div"], [455, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[378, "ivy.l1_loss"], [456, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[378, "ivy.log_poisson_loss"], [457, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[378, "ivy.poisson_nll_loss"], [458, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[378, "ivy.smooth_l1_loss"], [459, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[378, "ivy.soft_margin_loss"], [460, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[379, "ivy.as_strided"], [461, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[379, "ivy.associative_scan"], [462, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[379, "ivy.atleast_1d"], [463, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[379, "ivy.atleast_2d"], [464, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[379, "ivy.atleast_3d"], [465, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[379, "ivy.broadcast_shapes"], [466, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[379, "ivy.check_scalar"], [467, "ivy.check_scalar"]], "choose() (in module ivy)": [[379, "ivy.choose"], [468, "ivy.choose"]], "column_stack() (in module ivy)": [[379, "ivy.column_stack"], [469, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[379, "ivy.concat_from_sequence"], [470, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[379, "ivy.dsplit"], [471, "ivy.dsplit"]], "dstack() (in module ivy)": [[379, "ivy.dstack"], [472, "ivy.dstack"]], "expand() (in module ivy)": [[379, "ivy.expand"], [473, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[379, "ivy.fill_diagonal"], [474, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[379, "ivy.flatten"], [475, "ivy.flatten"]], "fliplr() (in module ivy)": [[379, "ivy.fliplr"], [476, "ivy.fliplr"]], "flipud() (in module ivy)": [[379, "ivy.flipud"], [477, "ivy.flipud"]], "fold() (in module ivy)": [[379, "ivy.fold"], [478, "ivy.fold"]], "heaviside() (in module ivy)": [[379, "ivy.heaviside"], [479, "ivy.heaviside"]], "hsplit() (in module ivy)": [[379, "ivy.hsplit"], [480, "ivy.hsplit"]], "hstack() (in module ivy)": [[379, "ivy.hstack"], [481, "ivy.hstack"]], "i0() (in module ivy)": [[379, "ivy.i0"], [482, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[379, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[379, "ivy.matricize"], [483, "ivy.matricize"]], "moveaxis() (in module ivy)": [[379, "ivy.moveaxis"], [484, "ivy.moveaxis"]], "pad() (in module ivy)": [[379, "ivy.pad"], [485, "ivy.pad"]], "partial_fold() (in module ivy)": [[379, "ivy.partial_fold"], [486, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[379, "ivy.partial_tensor_to_vec"], [487, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[379, "ivy.partial_unfold"], [488, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[379, "ivy.partial_vec_to_tensor"], [489, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[379, "ivy.put_along_axis"], [490, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[379, "ivy.rot90"], [491, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[379, "ivy.soft_thresholding"], [492, "ivy.soft_thresholding"]], "take() (in module ivy)": [[379, "ivy.take"], [493, "ivy.take"]], "take_along_axis() (in module ivy)": [[379, "ivy.take_along_axis"], [494, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[379, "ivy.top_k"], [495, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[379, "ivy.trim_zeros"], [496, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[379, "ivy.unflatten"], [497, "ivy.unflatten"]], "unfold() (in module ivy)": [[379, "ivy.unfold"], [498, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[379, "ivy.unique_consecutive"], [499, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[379, "ivy.vsplit"], [500, "ivy.vsplit"]], "vstack() (in module ivy)": [[379, "ivy.vstack"], [501, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[380, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[381, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[382, "ivy.batch_norm"], [502, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[382, "ivy.group_norm"], [503, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[382, "ivy.instance_norm"], [504, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[382, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[382, "ivy.l1_normalize"], [505, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[382, "ivy.l2_normalize"], [506, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[382, "ivy.local_response_norm"], [507, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[382, "ivy.lp_normalize"], [508, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[383, "ivy.bernoulli"], [509, "ivy.bernoulli"]], "beta() (in module ivy)": [[383, "ivy.beta"], [510, "ivy.beta"]], "dirichlet() (in module ivy)": [[383, "ivy.dirichlet"], [511, "ivy.dirichlet"]], "gamma() (in module ivy)": [[383, "ivy.gamma"], [512, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[383, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[383, "ivy.poisson"], [513, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[384, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[384, "ivy.unravel_index"], [514, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[385, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[386, "ivy.invert_permutation"], [515, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[386, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[386, "ivy.lexsort"], [516, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[387, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[387, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[387, "ivy.is_ivy_sparse_array"], [517, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[387, "ivy.is_native_sparse_array"], [518, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[387, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[387, "ivy.native_sparse_array"], [519, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[387, "ivy.native_sparse_array_to_indices_values_and_shape"], [520, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[388, "ivy.bincount"], [521, "ivy.bincount"]], "corrcoef() (in module ivy)": [[388, "ivy.corrcoef"], [522, "ivy.corrcoef"]], "cov() (in module ivy)": [[388, "ivy.cov"], [523, "ivy.cov"]], "cummax() (in module ivy)": [[388, "ivy.cummax"], [524, "ivy.cummax"]], "cummin() (in module ivy)": [[388, "ivy.cummin"], [525, "ivy.cummin"]], "histogram() (in module ivy)": [[388, "ivy.histogram"], [526, "ivy.histogram"]], "igamma() (in module ivy)": [[388, "ivy.igamma"], [527, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[388, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[388, "ivy.median"], [528, "ivy.median"]], "nanmean() (in module ivy)": [[388, "ivy.nanmean"], [529, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[388, "ivy.nanmedian"], [530, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[388, "ivy.nanmin"], [531, "ivy.nanmin"]], "nanprod() (in module ivy)": [[388, "ivy.nanprod"], [532, "ivy.nanprod"]], "quantile() (in module ivy)": [[388, "ivy.quantile"], [533, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[389, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[389, "ivy.optional_get_element"], [534, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[390, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[390, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[391, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[391, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[392, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[392, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[393, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[393, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[395, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[395, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[396, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[396, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[397, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[397, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[398, "ivy.Array.dct"]], "dct() (ivy.container method)": [[398, "ivy.Container.dct"]], "dft() (ivy.array method)": [[399, "ivy.Array.dft"]], "dft() (ivy.container method)": [[399, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[400, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[400, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[401, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[401, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[402, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[402, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[403, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[403, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[404, "ivy.Array.fft"]], "fft() (ivy.container method)": [[404, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[405, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[408, "ivy.Array.idct"]], "idct() (ivy.container method)": [[408, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[409, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[409, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[410, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[410, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[412, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[412, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[413, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[413, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[414, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[414, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[415, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[415, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[416, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[416, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[419, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[419, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[420, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[420, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[421, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[421, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[423, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[423, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[424, "ivy.Array.stft"]], "stft() (ivy.container method)": [[424, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[425, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[425, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[426, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[426, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[427, "ivy.Array.cond"]], "cond() (ivy.container method)": [[427, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[428, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[428, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[429, "ivy.Array.dot"]], "dot() (ivy.container method)": [[429, "ivy.Container.dot"]], "eig() (ivy.array method)": [[430, "ivy.Array.eig"], [673, "ivy.Array.eig"]], "eig() (ivy.container method)": [[430, "ivy.Container.eig"], [673, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[431, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[431, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[432, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[432, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[433, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[433, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[434, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[434, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[435, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[435, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[437, "ivy.Array.kron"]], "kron() (ivy.container method)": [[437, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[441, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[441, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[442, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[442, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[443, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[443, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[444, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[444, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[445, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[445, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[446, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[446, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[448, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[448, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[449, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[449, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[450, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[450, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[451, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[451, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[452, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[452, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[453, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[453, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[454, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[454, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[455, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[455, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[456, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[456, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[457, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[457, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[458, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[458, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[459, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[459, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[460, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[460, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[461, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[461, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[462, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[462, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[463, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[463, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[464, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[464, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[465, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[465, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[466, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[469, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[469, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[470, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[470, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[471, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[471, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[472, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[472, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[473, "ivy.Array.expand"]], "expand() (ivy.container method)": [[473, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[474, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[474, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[475, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[475, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[476, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[476, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[477, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[477, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[478, "ivy.Array.fold"]], "fold() (ivy.container method)": [[478, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[479, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[479, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[480, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[480, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[481, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[481, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[482, "ivy.Array.i0"]], "i0() (ivy.container method)": [[482, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[483, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[483, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[484, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[484, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[485, "ivy.Array.pad"]], "pad() (ivy.container method)": [[485, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[486, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[486, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[487, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[487, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[488, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[488, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[489, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[489, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[490, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[490, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[491, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[491, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[492, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[492, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[493, "ivy.Array.take"]], "take() (ivy.container method)": [[493, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[494, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[494, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[495, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[495, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[496, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[496, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[497, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[497, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[498, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[498, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[499, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[499, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[500, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[500, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[501, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[501, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[502, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[502, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[503, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[503, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[504, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[504, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[505, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[505, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[506, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[506, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[508, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[508, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[509, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[509, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[510, "ivy.Array.beta"]], "beta() (ivy.container method)": [[510, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[511, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[511, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[512, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[512, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[513, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[513, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[514, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[514, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[515, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[516, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[516, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[521, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[521, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[522, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[522, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[523, "ivy.Array.cov"]], "cov() (ivy.container method)": [[523, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[524, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[524, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[525, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[525, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[526, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[526, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[527, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[527, "ivy.Container.igamma"]], "median() (ivy.array method)": [[528, "ivy.Array.median"]], "median() (ivy.container method)": [[528, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[529, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[529, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[530, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[530, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[531, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[531, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[532, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[532, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[533, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[533, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[534, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[534, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[535, "ivy.all_equal"], [635, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[535, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[535, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[536, "ivy.arg_info"], [635, "ivy.arg_info"]], "arg_names() (in module ivy)": [[537, "ivy.arg_names"], [635, "ivy.arg_names"]], "array_equal() (in module ivy)": [[538, "ivy.array_equal"], [635, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[538, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[538, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[539, "ivy.assert_supports_inplace"], [635, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[539, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[539, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[540, "ivy.cache_fn"], [635, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[541, "ivy.clip_matrix_norm"], [635, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[541, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[541, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[542, "ivy.clip_vector_norm"], [635, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[542, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[542, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[543, "ivy.container_types"], [635, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[544, "ivy.current_backend_str"], [635, "ivy.current_backend_str"]], "default() (in module ivy)": [[545, "ivy.default"], [635, "ivy.default"]], "default() (ivy.array method)": [[545, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[546, "ivy.einops_rearrange"], [635, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[546, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[546, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[547, "ivy.einops_reduce"], [635, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[547, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[547, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[548, "ivy.einops_repeat"], [635, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[548, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[548, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[549, "ivy.exists"], [635, "ivy.exists"]], "exists() (ivy.array method)": [[549, "ivy.Array.exists"]], "exists() (ivy.container method)": [[549, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[550, "ivy.fourier_encode"], [635, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[550, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[550, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[551, "ivy.function_supported_devices_and_dtypes"], [635, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[552, "ivy.function_unsupported_devices_and_dtypes"], [635, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[553, "ivy.gather"], [635, "ivy.gather"]], "gather() (ivy.array method)": [[553, "ivy.Array.gather"]], "gather() (ivy.container method)": [[553, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[554, "ivy.gather_nd"], [635, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[554, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[554, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[555, "ivy.get_all_arrays_in_memory"], [635, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[556, "ivy.get_item"], [635, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[557, "ivy.get_num_dims"], [635, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[557, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[557, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[558, "ivy.get_referrers_recursive"], [635, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[559, "ivy.has_nans"], [635, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[559, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[559, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[560, "ivy.inplace_arrays_supported"], [635, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[561, "ivy.inplace_decrement"], [635, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[561, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[561, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[562, "ivy.inplace_increment"], [635, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[562, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[562, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[563, "ivy.inplace_update"], [635, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[563, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[563, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[564, "ivy.inplace_variables_supported"], [635, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[565, "ivy.is_array"], [635, "ivy.is_array"]], "is_array() (ivy.array method)": [[565, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[565, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[566, "ivy.is_ivy_array"], [635, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[566, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[566, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[567, "ivy.is_ivy_container"], [635, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[567, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[568, "ivy.is_ivy_nested_array"], [635, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[569, "ivy.is_native_array"], [635, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[569, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[569, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[570, "ivy.isin"], [635, "ivy.isin"]], "isin() (ivy.array method)": [[570, "ivy.Array.isin"]], "isin() (ivy.container method)": [[570, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[571, "ivy.isscalar"], [635, "ivy.isscalar"]], "itemsize() (in module ivy)": [[572, "ivy.itemsize"], [635, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[572, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[572, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[573, "ivy.match_kwargs"], [635, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[574, "ivy.multiprocessing"], [635, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[575, "ivy.num_arrays_in_memory"], [635, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[576, "ivy.print_all_arrays_in_memory"], [635, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[577, "ivy.scatter_flat"], [635, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[577, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[577, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[578, "ivy.scatter_nd"], [635, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[578, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[578, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[579, "ivy.set_array_mode"], [635, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[580, "ivy.set_exception_trace_mode"], [635, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[581, "ivy.set_inplace_mode"], [635, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[582, "ivy.set_item"], [635, "ivy.set_item"]], "set_min_base() (in module ivy)": [[583, "ivy.set_min_base"], [635, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[584, "ivy.set_min_denominator"], [635, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[585, "ivy.set_nestable_mode"], [635, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[586, "ivy.set_precise_mode"], [635, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[587, "ivy.set_queue_timeout"], [635, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[588, "ivy.set_shape_array_mode"], [635, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[589, "ivy.set_show_func_wrapper_trace_mode"], [635, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[590, "ivy.set_tmp_dir"], [635, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[591, "ivy.shape"], [635, "ivy.shape"]], "shape() (ivy.array method)": [[591, "ivy.Array.shape"]], "size() (in module ivy)": [[592, "ivy.size"], [635, "ivy.size"]], "size() (ivy.array method)": [[592, "ivy.Array.size"]], "size() (ivy.container method)": [[592, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[593, "ivy.stable_divide"], [635, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[593, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[593, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[594, "ivy.stable_pow"], [635, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[594, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[594, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[595, "ivy.strides"], [635, "ivy.strides"]], "strides() (ivy.array method)": [[595, "ivy.Array.strides"]], "strides() (ivy.container method)": [[595, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[596, "ivy.supports_inplace_updates"], [635, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[596, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[596, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[597, "ivy.to_ivy_shape"], [635, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[598, "ivy.to_list"], [635, "ivy.to_list"]], "to_list() (ivy.array method)": [[598, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[598, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[599, "ivy.to_native_shape"], [635, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[600, "ivy.to_numpy"], [635, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[600, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[600, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[601, "ivy.to_scalar"], [635, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[601, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[601, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[602, "ivy.try_else_none"], [635, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[603, "ivy.unset_array_mode"], [635, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[604, "ivy.unset_exception_trace_mode"], [635, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[605, "ivy.unset_inplace_mode"], [635, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[606, "ivy.unset_min_base"], [635, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[607, "ivy.unset_min_denominator"], [635, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[608, "ivy.unset_nestable_mode"], [635, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[609, "ivy.unset_precise_mode"], [635, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[610, "ivy.unset_queue_timeout"], [635, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[611, "ivy.unset_shape_array_mode"], [635, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[612, "ivy.unset_show_func_wrapper_trace_mode"], [635, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[613, "ivy.unset_tmp_dir"], [635, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[614, "ivy.value_is_nan"], [635, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[614, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[614, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[615, "ivy.vmap"], [635, "ivy.vmap"]], "adam_step() (in module ivy)": [[616, "ivy.adam_step"], [636, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[616, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[616, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[617, "ivy.adam_update"], [636, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[617, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[617, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[618, "ivy.execute_with_gradients"], [636, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[619, "ivy.grad"], [636, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[620, "ivy.gradient_descent_update"], [636, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[620, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[620, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[621, "ivy.jac"], [636, "ivy.jac"]], "lamb_update() (in module ivy)": [[622, "ivy.lamb_update"], [636, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[622, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[622, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[623, "ivy.lars_update"], [636, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[623, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[623, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[624, "ivy.optimizer_update"], [636, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[624, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[624, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[625, "ivy.stop_gradient"], [636, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[625, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[625, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[626, "ivy.value_and_grad"], [636, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[627, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[628, "ivy.e"]], "inf (in module ivy)": [[628, "ivy.inf"]], "ivy.functional.ivy.constants": [[628, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[628, "ivy.nan"]], "newaxis (in module ivy)": [[628, "ivy.newaxis"]], "pi (in module ivy)": [[628, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[629, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[630, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[630, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[631, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[631, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[631, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[631, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[631, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[631, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[632, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[632, "ivy.Profiler"]], "ivy.functional.ivy.device": [[632, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[633, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[634, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[635, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[635, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[635, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[636, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[637, "ivy.conv"], [650, "ivy.conv"]], "conv1d() (in module ivy)": [[637, "ivy.conv1d"], [651, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[637, "ivy.conv1d_transpose"], [652, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[637, "ivy.conv2d"], [653, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[637, "ivy.conv2d_transpose"], [654, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[637, "ivy.conv3d"], [655, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[637, "ivy.conv3d_transpose"], [656, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[637, "ivy.conv_general_dilated"], [657, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[637, "ivy.conv_general_transpose"], [658, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[637, "ivy.depthwise_conv2d"], [659, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[637, "ivy.dropout"], [660, "ivy.dropout"]], "ivy.functional.ivy.layers": [[637, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[637, "ivy.linear"], [661, "ivy.linear"]], "lstm() (in module ivy)": [[637, "ivy.lstm"], [662, "ivy.lstm"]], "lstm_update() (in module ivy)": [[637, "ivy.lstm_update"], [663, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[637, "ivy.multi_head_attention"], [664, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[637, "ivy.nms"], [665, "ivy.nms"]], "roi_align() (in module ivy)": [[637, "ivy.roi_align"], [666, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[637, "ivy.scaled_dot_product_attention"], [667, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[638, "ivy.cholesky"], [668, "ivy.cholesky"]], "cross() (in module ivy)": [[638, "ivy.cross"], [669, "ivy.cross"]], "det() (in module ivy)": [[638, "ivy.det"], [670, "ivy.det"]], "diag() (in module ivy)": [[638, "ivy.diag"], [671, "ivy.diag"]], "diagonal() (in module ivy)": [[638, "ivy.diagonal"], [672, "ivy.diagonal"]], "eigh() (in module ivy)": [[638, "ivy.eigh"], [674, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[638, "ivy.eigvalsh"], [675, "ivy.eigvalsh"]], "inner() (in module ivy)": [[638, "ivy.inner"], [676, "ivy.inner"]], "inv() (in module ivy)": [[638, "ivy.inv"], [677, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[638, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[638, "ivy.matmul"], [678, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[638, "ivy.matrix_norm"], [679, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[638, "ivy.matrix_power"], [680, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[638, "ivy.matrix_rank"], [681, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[638, "ivy.matrix_transpose"], [682, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[638, "ivy.outer"], [683, "ivy.outer"]], "pinv() (in module ivy)": [[638, "ivy.pinv"], [684, "ivy.pinv"]], "qr() (in module ivy)": [[638, "ivy.qr"], [685, "ivy.qr"]], "slogdet() (in module ivy)": [[638, "ivy.slogdet"], [686, "ivy.slogdet"]], "solve() (in module ivy)": [[638, "ivy.solve"], [687, "ivy.solve"]], "svd() (in module ivy)": [[638, "ivy.svd"], [688, "ivy.svd"]], "svdvals() (in module ivy)": [[638, "ivy.svdvals"], [689, "ivy.svdvals"]], "tensordot() (in module ivy)": [[638, "ivy.tensordot"], [690, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[638, "ivy.tensorsolve"], [691, "ivy.tensorsolve"]], "trace() (in module ivy)": [[638, "ivy.trace"], [692, "ivy.trace"]], "vander() (in module ivy)": [[638, "ivy.vander"], [693, "ivy.vander"]], "vecdot() (in module ivy)": [[638, "ivy.vecdot"], [694, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[638, "ivy.vector_norm"], [695, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[638, "ivy.vector_to_skew_symmetric_matrix"], [696, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[639, "ivy.binary_cross_entropy"], [697, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[639, "ivy.cross_entropy"], [698, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[639, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[639, "ivy.sparse_cross_entropy"], [699, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[640, "ivy.clip"], [700, "ivy.clip"]], "concat() (in module ivy)": [[640, "ivy.concat"], [701, "ivy.concat"]], "constant_pad() (in module ivy)": [[640, "ivy.constant_pad"], [702, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[640, "ivy.expand_dims"], [703, "ivy.expand_dims"]], "flip() (in module ivy)": [[640, "ivy.flip"], [704, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[640, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[640, "ivy.permute_dims"], [705, "ivy.permute_dims"]], "repeat() (in module ivy)": [[640, "ivy.repeat"], [706, "ivy.repeat"]], "reshape() (in module ivy)": [[640, "ivy.reshape"], [707, "ivy.reshape"]], "roll() (in module ivy)": [[640, "ivy.roll"], [708, "ivy.roll"]], "split() (in module ivy)": [[640, "ivy.split"], [709, "ivy.split"]], "squeeze() (in module ivy)": [[640, "ivy.squeeze"], [710, "ivy.squeeze"]], "stack() (in module ivy)": [[640, "ivy.stack"], [711, "ivy.stack"]], "swapaxes() (in module ivy)": [[640, "ivy.swapaxes"], [712, "ivy.swapaxes"]], "tile() (in module ivy)": [[640, "ivy.tile"], [713, "ivy.tile"]], "unstack() (in module ivy)": [[640, "ivy.unstack"], [714, "ivy.unstack"]], "zero_pad() (in module ivy)": [[640, "ivy.zero_pad"], [715, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[641, "ivy.fomaml_step"], [716, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[641, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[641, "ivy.maml_step"], [717, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[641, "ivy.reptile_step"], [718, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[642, "ivy.all_nested_indices"], [719, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[642, "ivy.copy_nest"], [720, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[642, "ivy.duplicate_array_index_chains"], [721, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[642, "ivy.index_nest"], [722, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[642, "ivy.insert_into_nest_at_index"], [723, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[642, "ivy.insert_into_nest_at_indices"], [724, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[642, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[642, "ivy.map"], [725, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[642, "ivy.map_nest_at_index"], [726, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[642, "ivy.map_nest_at_indices"], [727, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[642, "ivy.multi_index_nest"], [728, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[642, "ivy.nested_any"], [729, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[642, "ivy.nested_argwhere"], [730, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[642, "ivy.nested_map"], [731, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[642, "ivy.nested_multi_map"], [732, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[642, "ivy.prune_empty"], [733, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[642, "ivy.prune_nest_at_index"], [734, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[642, "ivy.prune_nest_at_indices"], [735, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[642, "ivy.set_nest_at_index"], [736, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[642, "ivy.set_nest_at_indices"], [737, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[643, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[643, "ivy.layer_norm"], [738, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[644, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[644, "ivy.multinomial"], [739, "ivy.multinomial"]], "randint() (in module ivy)": [[644, "ivy.randint"], [740, "ivy.randint"]], "random_normal() (in module ivy)": [[644, "ivy.random_normal"], [741, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[644, "ivy.random_uniform"], [742, "ivy.random_uniform"]], "seed() (in module ivy)": [[644, "ivy.seed"], [743, "ivy.seed"]], "shuffle() (in module ivy)": [[644, "ivy.shuffle"], [744, "ivy.shuffle"]], "argmax() (in module ivy)": [[645, "ivy.argmax"], [745, "ivy.argmax"]], "argmin() (in module ivy)": [[645, "ivy.argmin"], [746, "ivy.argmin"]], "argwhere() (in module ivy)": [[645, "ivy.argwhere"], [747, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[645, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[645, "ivy.nonzero"], [748, "ivy.nonzero"]], "where() (in module ivy)": [[645, "ivy.where"], [749, "ivy.where"]], "ivy.functional.ivy.set": [[646, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[646, "ivy.unique_all"], [750, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[646, "ivy.unique_counts"], [751, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[646, "ivy.unique_inverse"], [752, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[646, "ivy.unique_values"], [753, "ivy.unique_values"]], "argsort() (in module ivy)": [[647, "ivy.argsort"], [754, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[647, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[647, "ivy.msort"], [755, "ivy.msort"]], "searchsorted() (in module ivy)": [[647, "ivy.searchsorted"], [756, "ivy.searchsorted"]], "sort() (in module ivy)": [[647, "ivy.sort"], [757, "ivy.sort"]], "cumprod() (in module ivy)": [[648, "ivy.cumprod"], [758, "ivy.cumprod"]], "cumsum() (in module ivy)": [[648, "ivy.cumsum"], [759, "ivy.cumsum"]], "einsum() (in module ivy)": [[648, "ivy.einsum"], [760, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[648, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[648, "ivy.max"], [761, "ivy.max"]], "mean() (in module ivy)": [[648, "ivy.mean"], [762, "ivy.mean"]], "min() (in module ivy)": [[648, "ivy.min"], [763, "ivy.min"]], "prod() (in module ivy)": [[648, "ivy.prod"], [764, "ivy.prod"]], "std() (in module ivy)": [[648, "ivy.std"], [765, "ivy.std"]], "sum() (in module ivy)": [[648, "ivy.sum"], [766, "ivy.sum"]], "var() (in module ivy)": [[648, "ivy.var"], [767, "ivy.var"]], "all() (in module ivy)": [[649, "ivy.all"], [768, "ivy.all"]], "any() (in module ivy)": [[649, "ivy.any"], [769, "ivy.any"]], "ivy.functional.ivy.utility": [[649, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[649, "ivy.load"], [770, "ivy.load"]], "save() (in module ivy)": [[649, "ivy.save"], [771, "ivy.save"]], "conv1d() (ivy.array method)": [[651, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[651, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[652, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[652, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[653, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[653, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[654, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[654, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[655, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[655, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[656, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[656, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[659, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[659, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[660, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[660, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[661, "ivy.Array.linear"]], "linear() (ivy.container method)": [[661, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[663, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[663, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[664, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[664, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[667, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[667, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[668, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[668, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[669, "ivy.Array.cross"]], "cross() (ivy.container method)": [[669, "ivy.Container.cross"]], "det() (ivy.array method)": [[670, "ivy.Array.det"]], "det() (ivy.container method)": [[670, "ivy.Container.det"]], "diag() (ivy.array method)": [[671, "ivy.Array.diag"]], "diag() (ivy.container method)": [[671, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[672, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[672, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[674, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[674, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[675, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[675, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[676, "ivy.Array.inner"]], "inner() (ivy.container method)": [[676, "ivy.Container.inner"]], "inv() (ivy.array method)": [[677, "ivy.Array.inv"]], "inv() (ivy.container method)": [[677, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[678, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[678, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[679, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[679, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[680, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[680, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[681, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[681, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[682, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[682, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[683, "ivy.Array.outer"]], "outer() (ivy.container method)": [[683, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[684, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[684, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[685, "ivy.Array.qr"]], "qr() (ivy.container method)": [[685, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[686, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[686, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[687, "ivy.Array.solve"]], "solve() (ivy.container method)": [[687, "ivy.Container.solve"]], "svd() (ivy.array method)": [[688, "ivy.Array.svd"]], "svd() (ivy.container method)": [[688, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[689, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[689, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[690, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[690, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[691, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[691, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[692, "ivy.Array.trace"]], "trace() (ivy.container method)": [[692, "ivy.Container.trace"]], "vander() (ivy.array method)": [[693, "ivy.Array.vander"]], "vander() (ivy.container method)": [[693, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[694, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[694, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[695, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[695, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[696, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[696, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[697, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[697, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[698, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[698, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[699, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[699, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[700, "ivy.Array.clip"]], "clip() (ivy.container method)": [[700, "ivy.Container.clip"]], "concat() (ivy.array method)": [[701, "ivy.Array.concat"]], "concat() (ivy.container method)": [[701, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[702, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[702, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[703, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[703, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[704, "ivy.Array.flip"]], "flip() (ivy.container method)": [[704, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[705, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[705, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[706, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[706, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[707, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[707, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[708, "ivy.Array.roll"]], "roll() (ivy.container method)": [[708, "ivy.Container.roll"]], "split() (ivy.array method)": [[709, "ivy.Array.split"]], "split() (ivy.container method)": [[709, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[710, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[710, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[711, "ivy.Array.stack"]], "stack() (ivy.container method)": [[711, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[712, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[712, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[713, "ivy.Array.tile"]], "tile() (ivy.container method)": [[713, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[714, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[714, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[715, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[715, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[738, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[738, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[739, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[739, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[740, "ivy.Array.randint"]], "randint() (ivy.container method)": [[740, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[741, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[741, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[742, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[742, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[744, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[744, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[745, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[745, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[746, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[746, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[747, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[747, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[748, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[748, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[749, "ivy.Array.where"]], "where() (ivy.container method)": [[749, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[750, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[750, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[751, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[751, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[752, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[752, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[753, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[753, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[754, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[754, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[755, "ivy.Array.msort"]], "msort() (ivy.container method)": [[755, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[756, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[756, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[757, "ivy.Array.sort"]], "sort() (ivy.container method)": [[757, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[758, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[758, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[759, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[759, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[760, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[760, "ivy.Container.einsum"]], "max() (ivy.array method)": [[761, "ivy.Array.max"]], "max() (ivy.container method)": [[761, "ivy.Container.max"]], "mean() (ivy.array method)": [[762, "ivy.Array.mean"]], "mean() (ivy.container method)": [[762, "ivy.Container.mean"]], "min() (ivy.array method)": [[763, "ivy.Array.min"]], "min() (ivy.container method)": [[763, "ivy.Container.min"]], "prod() (ivy.array method)": [[764, "ivy.Array.prod"]], "prod() (ivy.container method)": [[764, "ivy.Container.prod"]], "std() (ivy.array method)": [[765, "ivy.Array.std"]], "std() (ivy.container method)": [[765, "ivy.Container.std"]], "sum() (ivy.array method)": [[766, "ivy.Array.sum"]], "sum() (ivy.container method)": [[766, "ivy.Container.sum"]], "var() (ivy.array method)": [[767, "ivy.Array.var"]], "var() (ivy.container method)": [[767, "ivy.Container.var"]], "all() (ivy.array method)": [[768, "ivy.Array.all"]], "all() (ivy.container method)": [[768, "ivy.Container.all"]], "any() (ivy.array method)": [[769, "ivy.Array.any"]], "any() (ivy.container method)": [[769, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[772, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[772, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[773, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[774, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[774, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[775, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[775, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[775, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[775, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[775, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[780, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[780, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[780, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[780, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[781, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[781, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[781, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[782, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[782, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[783, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[783, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[784, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[784, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[785, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[785, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[789, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[789, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[789, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[789, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[789, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[789, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[789, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[789, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[789, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[789, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[789, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[789, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[789, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[789, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[789, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[789, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[789, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[789, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[789, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[789, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[790, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[790, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[790, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[790, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[790, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[790, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[790, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[790, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[790, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[791, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[791, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[792, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[792, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[792, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[792, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[792, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[792, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[792, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[792, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[792, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[792, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[792, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[792, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[792, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[792, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[792, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[792, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[793, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[793, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[793, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[793, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[793, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[793, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[793, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[793, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[793, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[793, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[793, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[793, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[793, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[793, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[793, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[793, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[793, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[793, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[793, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[793, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[793, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[793, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[793, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[793, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[793, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[793, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[793, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[794, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[794, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[794, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[794, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[794, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[794, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[794, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[795, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[795, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[795, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[795, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[795, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[795, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[796, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[796, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[796, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[796, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[796, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[797, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[797, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[797, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[797, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[797, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[797, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[797, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[797, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[797, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[797, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[797, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[797, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[797, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[797, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[797, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[797, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[797, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[797, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[798, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[798, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[798, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[799, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[799, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[800, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[801, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[801, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[801, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[801, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[801, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[801, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[801, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[801, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[801, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[801, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[801, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[802, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[802, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[802, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[803, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[803, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[804, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[804, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[804, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[805, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[805, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[805, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[805, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[805, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.apply_transpose"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "ivy.utils.decorator_utils": [[805, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[805, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[805, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[806, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[806, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[807, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[807, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[808, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[808, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[809, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[809, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[809, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[809, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[809, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[809, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[809, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[809, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[809, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[809, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[809, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[809, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[809, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[809, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[809, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[809, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[809, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[809, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[809, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[809, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[809, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[809, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[809, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[809, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[809, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[809, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[810, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[810, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[810, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[811, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[811, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[811, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[812, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[812, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[812, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[812, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[812, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[812, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[812, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[812, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[812, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[812, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[813, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[813, "module-ivy.utils.verbosity"]], "automatic code conversions": [[859, "term-Automatic-Code-Conversions"]], "backend handler": [[859, "term-Backend-Handler"]], "compositional functions": [[859, "term-Compositional-Functions"]], "convenience functions": [[859, "term-Convenience-Functions"]], "framework": [[859, "term-Framework"]], "framework handler": [[859, "term-Framework-Handler"]], "graph compiler": [[859, "term-Graph-Compiler"]], "ivy array": [[859, "term-Ivy-Array"]], "ivy backends": [[859, "term-Ivy-Backends"]], "ivy compiler": [[859, "term-Ivy-Compiler"]], "ivy container": [[859, "term-Ivy-Container"]], "ivy frontends": [[859, "term-Ivy-Frontends"]], "ivy functional api": [[859, "term-Ivy-Functional-API"]], "ivy tracer": [[859, "term-Ivy-Tracer"]], "ivy transpiler": [[859, "term-Ivy-Transpiler"]], "mixed functions": [[859, "term-Mixed-Functions"]], "native array": [[859, "term-Native-Array"]], "nestable functions": [[859, "term-Nestable-Functions"]], "pipeline": [[859, "term-Pipeline"]], "primary functions": [[859, "term-Primary-Functions"]], "standalone functions": [[859, "term-Standalone-Functions"]], "submodule helper functions": [[859, "term-Submodule-Helper-Functions"]], "built-in function": [[865, "ivy.trace_graph"], [866, "ivy.transpile"], [867, "ivy.unify"]], "ivy.trace_graph()": [[865, "ivy.trace_graph"]], "ivy.transpile()": [[866, "ivy.transpile"]], "ivy.unify()": [[867, "ivy.unify"]]}})