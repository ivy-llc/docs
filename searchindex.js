Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/alexnet_demo_cpu", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/bert_demo_cpu", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/convnext_to_torch_cpu", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/dinov2_to_paddle_cpu", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu", "demos/examples_and_demos/kornia_So3", "demos/examples_and_demos/kornia_demo", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/mmpretrain_to_jax_cpu", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/resnet_demo_cpu", "demos/examples_and_demos/resnet_to_tensorflow", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/torch_to_jax_cpu", "demos/examples_and_demos/xgboost_demo", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/learn_the_basics/torch_to_tf_functions", "demos/learn_the_basics/torch_to_tf_models", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/stateful/ivy.stateful.utilities", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.decorator_utils", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/why_transpile", "overview/one_liners", "overview/one_liners/graph_transpile", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ivy_vs_onnx"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/alexnet_demo_cpu.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/bert_demo_cpu.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/convnext_to_torch_cpu.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/dinov2_to_paddle_cpu.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet_cpu.ipynb", "demos/examples_and_demos/kornia_So3.ipynb", "demos/examples_and_demos/kornia_demo.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch_cpu.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow_cpu.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/mmpretrain_to_jax_cpu.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/resnet_demo_cpu.ipynb", "demos/examples_and_demos/resnet_to_tensorflow.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/torch_to_jax_cpu.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/learn_the_basics/torch_to_tf_functions.ipynb", "demos/learn_the_basics/torch_to_tf_models.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.complex.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.requires_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.ssim_loss.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_discriminator.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.wasserstein_loss_generator.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/stateful/ivy.stateful.utilities.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.decorator_utils.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/why_transpile.rst", "overview/one_liners.rst", "overview/one_liners/graph_transpile.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ivy_vs_onnx.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "Ivy AlexNet demo", "# Ivy Bert Demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Using Ivy ResNet", "Training PyTorch ResNet in your TensorFlow Projects", "Accelerating PyTorch models with JAX", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "Transpiling Functions from PyTorch to TensorFlow", "Transpiling Models from PyTorch to TensorFlow", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "complex", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "pad_sequence", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "requires_gradient", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "ssim_loss", "wasserstein_loss_discriminator", "wasserstein_loss_generator", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Utilities", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Decorator utils", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Why Transpile?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.graph_transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "Frameworks", "Graph Tracers", "Comparing Ivy with ONNX"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 180, 183, 186, 187, 188, 190, 194, 195, 209, 212, 222, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 596, 602, 607, 608, 609, 610, 611, 613, 615, 616, 629, 630, 631, 632, 633, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 740, 742, 744, 745, 750, 751, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 876, 877, 879, 880, 882, 883, 884, 885, 886], "notebook": [0, 4, 5, 6, 7, 12, 13, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 60, 814, 833], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 207, 209, 211, 212, 214, 215, 217, 219, 222, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 330, 331, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 400, 402, 403, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 442, 443, 444, 445, 447, 448, 449, 450, 452, 453, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 584, 585, 588, 589, 592, 593, 594, 596, 602, 606, 607, 608, 609, 611, 613, 615, 616, 617, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 796, 797, 798, 799, 804, 808, 809, 811, 812, 813, 814, 815, 816, 818, 819, 822, 823, 827, 828, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 882, 884, 885, 886], "dedic": [0, 809, 842, 857, 868], "task": [0, 1, 8, 9, 62, 657, 735, 736, 737, 833, 834, 836, 840, 841, 842, 862, 863, 876, 884], "util": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 24, 25, 26, 35, 38, 40, 41, 59, 62, 71, 94, 213, 391, 462, 648, 819, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 840, 847, 851, 854, 855, 858, 861, 865, 866, 870, 879], "power": [0, 34, 45, 46, 70, 71, 72, 76, 93, 94, 95, 99, 116, 117, 249, 258, 259, 293, 348, 361, 384, 387, 390, 438, 598, 609, 621, 649, 651, 654, 658, 696, 709, 744, 811, 867, 884], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 62, 63, 64, 71, 76, 77, 78, 86, 94, 99, 100, 109, 111, 112, 132, 379, 389, 393, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 510, 515, 561, 571, 611, 633, 634, 636, 642, 643, 651, 652, 654, 655, 656, 697, 713, 722, 723, 724, 726, 728, 729, 731, 733, 808, 814, 822, 828, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 885], "emploi": [0, 27], "build": [0, 5, 16, 17, 31, 34, 41, 45, 46, 49, 50, 51, 52, 57, 59, 64, 82, 88, 117, 662, 769, 770, 771, 772, 812, 813, 814, 833, 834, 840, 843, 849, 850, 858, 860, 869, 871, 872, 874, 877, 879, 884], "The": [0, 1, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 61, 62, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 143, 148, 149, 151, 153, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 185, 187, 188, 189, 192, 193, 195, 196, 198, 199, 200, 201, 207, 208, 209, 210, 211, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 441, 442, 443, 444, 445, 447, 449, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 486, 488, 489, 490, 491, 495, 498, 499, 500, 505, 506, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 584, 587, 589, 592, 593, 596, 598, 599, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 798, 799, 804, 808, 809, 811, 812, 814, 815, 816, 818, 822, 827, 828, 833, 834, 835, 837, 839, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 863, 865, 866, 868, 869, 870, 871, 873, 874, 876, 877, 879, 880, 881, 882, 884, 885, 886], "goal": [0, 32, 59, 262, 649, 839, 842, 884, 886], "accur": [0, 8, 9, 24, 260, 278, 649, 654, 702, 859], "distinguish": 0, "between": [0, 8, 9, 27, 32, 33, 38, 50, 51, 52, 57, 70, 71, 72, 75, 76, 77, 78, 82, 88, 93, 94, 98, 99, 100, 101, 117, 140, 180, 243, 256, 291, 307, 349, 366, 368, 387, 390, 391, 392, 393, 402, 414, 415, 416, 427, 428, 429, 437, 443, 447, 468, 469, 470, 471, 472, 473, 474, 499, 500, 548, 646, 647, 649, 653, 655, 656, 658, 660, 662, 676, 699, 713, 714, 715, 716, 722, 730, 744, 759, 770, 771, 772, 797, 804, 816, 818, 845, 846, 850, 852, 857, 858, 859, 861, 862, 863, 864, 865, 868, 871, 875, 876, 877, 879, 880, 881, 884, 885, 886], "activ": [0, 8, 9, 24, 28, 41, 45, 46, 71, 72, 75, 86, 94, 98, 109, 124, 125, 126, 127, 128, 129, 130, 131, 132, 310, 311, 312, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 611, 653, 680, 683, 811, 812, 832, 833, 840, 841, 850, 856, 866, 867, 879, 884], "therebi": [0, 8, 9, 24, 865], "enhanc": [0, 40, 45, 46, 833, 864, 879], "secur": 0, "usag": [0, 10, 11, 228, 648, 833, 850, 858, 861, 865, 870, 872], "befor": [0, 4, 5, 6, 7, 8, 9, 12, 13, 35, 36, 37, 38, 47, 48, 49, 50, 51, 52, 59, 71, 75, 76, 78, 82, 84, 88, 94, 98, 99, 107, 225, 228, 233, 390, 393, 402, 418, 423, 433, 437, 483, 490, 491, 492, 499, 539, 540, 648, 653, 654, 656, 657, 658, 662, 664, 666, 667, 668, 669, 671, 673, 675, 679, 680, 683, 694, 695, 711, 720, 735, 736, 750, 769, 770, 771, 772, 777, 778, 781, 783, 785, 793, 812, 822, 827, 839, 840, 841, 844, 845, 847, 850, 851, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 870, 872, 879, 880, 884], "dive": [0, 27, 34, 45, 57, 833, 834, 835, 838, 839, 841, 844, 848, 850, 856, 863, 869, 872], "need": [0, 1, 4, 5, 10, 11, 20, 21, 25, 26, 32, 34, 40, 41, 45, 46, 59, 60, 61, 71, 72, 78, 94, 95, 101, 390, 391, 402, 413, 418, 419, 423, 444, 545, 556, 557, 578, 651, 653, 654, 656, 658, 680, 689, 719, 722, 749, 797, 835, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 868, 870, 872, 876, 879, 880, 884, 885], "up": [0, 4, 5, 10, 11, 12, 13, 20, 21, 25, 26, 27, 43, 45, 71, 72, 94, 95, 390, 393, 413, 426, 483, 491, 573, 585, 651, 653, 676, 678, 833, 834, 837, 839, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 880, 885], "our": [0, 4, 5, 8, 9, 10, 11, 20, 21, 24, 25, 26, 27, 28, 30, 32, 35, 36, 38, 40, 43, 45, 46, 47, 48, 50, 51, 52, 57, 59, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 852, 854, 855, 856, 859, 862, 863, 864, 865, 866, 868, 871, 872, 876, 880], "necessari": [0, 8, 9, 10, 11, 24, 51, 67, 71, 90, 94, 101, 142, 255, 288, 392, 393, 467, 477, 478, 479, 485, 487, 488, 489, 490, 491, 498, 515, 601, 624, 649, 651, 722, 723, 724, 726, 728, 729, 731, 733, 833, 839, 840, 845, 846, 848, 850, 852, 861, 862, 865, 867, 868, 879, 880], "follow": [0, 1, 5, 8, 9, 10, 11, 24, 27, 37, 38, 41, 44, 45, 46, 49, 50, 51, 57, 60, 61, 71, 72, 73, 75, 76, 82, 88, 94, 95, 96, 98, 99, 149, 180, 183, 228, 238, 255, 262, 288, 290, 297, 298, 334, 384, 390, 392, 393, 396, 413, 426, 434, 472, 487, 499, 517, 519, 576, 577, 578, 608, 609, 632, 635, 637, 638, 639, 646, 647, 648, 649, 651, 652, 653, 654, 658, 662, 680, 683, 695, 701, 711, 744, 750, 769, 770, 771, 772, 812, 816, 835, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 880, 884], "command": [0, 5, 59, 61, 835, 840, 844, 847, 849, 855, 856, 873], "which": [0, 1, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 25, 26, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 58, 59, 60, 61, 62, 63, 65, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 114, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 168, 170, 172, 178, 180, 183, 185, 188, 195, 207, 212, 216, 221, 223, 226, 227, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 337, 340, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 365, 366, 367, 368, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 400, 402, 413, 414, 415, 416, 418, 419, 423, 424, 433, 434, 435, 437, 442, 445, 457, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 505, 506, 507, 508, 509, 510, 512, 517, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 584, 585, 590, 591, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 676, 677, 678, 680, 683, 684, 685, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 708, 710, 711, 713, 714, 715, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 733, 734, 743, 744, 745, 746, 751, 753, 754, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 808, 809, 811, 812, 813, 814, 815, 816, 817, 822, 823, 830, 832, 833, 835, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 877, 879, 880, 883, 884, 885, 886], "an": [0, 1, 4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 19, 24, 25, 26, 27, 32, 33, 34, 35, 36, 38, 40, 41, 43, 44, 45, 46, 51, 57, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 180, 183, 186, 190, 194, 195, 225, 229, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 333, 335, 336, 343, 344, 345, 346, 347, 348, 350, 351, 353, 356, 360, 365, 369, 374, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 422, 424, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 445, 446, 471, 472, 476, 477, 478, 479, 483, 484, 485, 487, 494, 498, 499, 506, 508, 512, 514, 515, 517, 518, 519, 522, 524, 525, 527, 530, 531, 536, 537, 538, 539, 540, 541, 542, 545, 546, 549, 554, 556, 557, 565, 568, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 584, 587, 593, 596, 597, 606, 607, 611, 615, 616, 617, 630, 633, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 744, 757, 759, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 882, 884, 885, 886], "machin": [0, 8, 9, 10, 11, 22, 23, 24, 25, 26, 38, 40, 41, 48, 49, 57, 63, 71, 76, 94, 99, 180, 183, 391, 445, 647, 654, 697, 700, 840, 844, 858, 871, 873, 874, 876, 877, 884], "learn": [0, 8, 9, 10, 11, 24, 27, 28, 30, 34, 35, 36, 37, 39, 41, 45, 46, 47, 48, 49, 50, 57, 59, 71, 73, 96, 391, 392, 462, 467, 561, 632, 635, 637, 638, 639, 651, 652, 657, 735, 736, 737, 816, 834, 838, 839, 840, 843, 844, 850, 855, 856, 858, 860, 869, 871, 874, 876, 877, 886], "other": [0, 4, 5, 8, 9, 10, 11, 16, 17, 20, 21, 24, 25, 26, 28, 30, 35, 36, 37, 38, 41, 45, 46, 47, 48, 49, 50, 51, 52, 59, 61, 68, 70, 71, 72, 78, 84, 88, 91, 93, 94, 95, 101, 107, 111, 116, 117, 140, 156, 168, 194, 255, 260, 262, 278, 287, 288, 352, 356, 387, 393, 483, 484, 492, 550, 551, 646, 647, 649, 651, 660, 664, 720, 730, 761, 784, 786, 793, 798, 833, 837, 839, 840, 841, 842, 844, 845, 848, 849, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 865, 866, 868, 871, 872, 873, 874, 879, 880, 883, 884, 886], "essenti": [0, 836, 839, 846, 848, 851, 852, 858, 861, 862, 863], "panda": [0, 27, 59, 61], "matplotlib": [0, 5, 8, 9, 10, 11, 24, 27, 38, 40, 41, 59, 60, 61, 64], "scikit": [0, 27, 391, 462], "torch": [0, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 62, 63, 64, 67, 72, 76, 86, 95, 99, 144, 182, 209, 210, 214, 224, 226, 231, 298, 350, 351, 387, 393, 512, 554, 578, 611, 646, 647, 648, 649, 651, 654, 657, 704, 736, 737, 793, 804, 809, 818, 822, 832, 833, 837, 840, 841, 844, 845, 846, 847, 849, 850, 851, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 879, 880, 881, 882], "cryptographi": [0, 5, 27], "These": [0, 27, 52, 71, 94, 391, 393, 402, 444, 498, 538, 653, 654, 680, 689, 690, 833, 836, 838, 839, 840, 841, 844, 848, 850, 852, 853, 857, 858, 861, 862, 865, 870, 872, 874, 876, 879, 884], "tool": [0, 24, 27, 34, 45, 46, 833, 840, 841, 852, 856, 872, 877, 879, 884, 885, 886], "provid": [0, 8, 9, 16, 17, 24, 32, 34, 38, 41, 45, 46, 50, 51, 57, 63, 67, 71, 72, 76, 78, 81, 84, 85, 88, 90, 94, 95, 99, 101, 104, 107, 108, 136, 154, 156, 173, 174, 175, 176, 177, 185, 195, 207, 211, 224, 307, 390, 391, 393, 396, 402, 426, 434, 438, 443, 447, 460, 461, 465, 466, 483, 485, 494, 515, 517, 519, 548, 560, 592, 593, 645, 646, 647, 648, 649, 651, 653, 654, 656, 658, 661, 664, 665, 680, 696, 699, 710, 722, 723, 730, 742, 764, 784, 786, 787, 788, 797, 812, 816, 822, 823, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 865, 866, 868, 872, 877, 879, 880, 882, 884, 885, 886], "robust": [0, 876], "foundat": [0, 34], "manipul": [0, 71, 94, 861, 862, 866, 868, 870, 884], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 38, 40, 41, 45, 57, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 124, 125, 126, 127, 128, 129, 131, 132, 140, 141, 142, 143, 144, 147, 149, 151, 152, 153, 154, 155, 156, 158, 162, 164, 168, 169, 170, 178, 180, 183, 188, 190, 195, 212, 213, 221, 226, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 335, 336, 343, 345, 350, 351, 353, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 374, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 409, 410, 411, 412, 414, 415, 417, 418, 419, 422, 423, 427, 428, 429, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 455, 461, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 482, 483, 484, 485, 486, 489, 490, 491, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 520, 521, 522, 523, 526, 528, 529, 531, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 571, 574, 576, 577, 578, 585, 592, 593, 608, 609, 610, 611, 613, 617, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 799, 811, 812, 816, 827, 828, 833, 837, 839, 840, 846, 847, 848, 849, 850, 852, 855, 860, 863, 865, 868, 870, 871, 880, 884], "pip": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 63, 64, 833, 837, 840, 847, 856], "q": [0, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 59, 60, 61, 71, 75, 76, 94, 98, 99, 377, 387, 391, 402, 444, 548, 653, 654, 658, 680, 683, 689, 690, 701, 746, 840, 841, 843, 863, 872], "r": [0, 4, 5, 22, 23, 24, 59, 60, 71, 76, 88, 94, 99, 111, 112, 364, 379, 387, 389, 633, 652, 654, 656, 701, 733, 840, 841, 843, 860, 863, 873], "requir": [0, 5, 8, 9, 10, 11, 24, 37, 38, 40, 41, 43, 44, 50, 59, 60, 61, 64, 70, 71, 88, 93, 94, 289, 302, 306, 391, 393, 444, 445, 499, 640, 649, 652, 654, 656, 689, 690, 691, 730, 796, 804, 809, 828, 835, 839, 840, 845, 847, 849, 850, 851, 852, 853, 854, 856, 857, 859, 862, 863, 864, 865, 866, 868, 870, 872, 873, 876, 879, 884], "txt": [0, 4, 5, 8, 9, 22, 23, 60, 72, 840, 844, 847, 873], "16": [0, 4, 5, 10, 11, 12, 13, 16, 17, 18, 24, 27, 38, 40, 41, 57, 59, 61, 70, 71, 72, 75, 76, 80, 84, 91, 93, 94, 95, 98, 99, 101, 103, 116, 117, 183, 249, 278, 298, 305, 361, 364, 368, 387, 390, 393, 402, 409, 410, 412, 418, 422, 423, 427, 428, 433, 437, 472, 489, 539, 545, 562, 565, 587, 608, 609, 642, 647, 649, 651, 652, 653, 654, 656, 658, 660, 661, 664, 675, 677, 684, 688, 691, 692, 699, 701, 705, 733, 746, 759, 760, 761, 768, 778, 779, 796, 799, 841, 850, 852], "mb": [0, 8, 9, 10, 11, 16, 17, 18, 22, 23, 59, 61, 64, 849], "25": [0, 15, 24, 27, 57, 59, 60, 61, 70, 71, 72, 76, 77, 80, 84, 87, 93, 94, 95, 98, 99, 102, 103, 107, 116, 117, 132, 143, 152, 238, 239, 249, 255, 257, 268, 273, 288, 293, 296, 298, 301, 302, 303, 308, 330, 384, 392, 402, 433, 468, 471, 539, 548, 576, 577, 593, 608, 646, 649, 651, 654, 655, 658, 659, 664, 667, 684, 688, 693, 709, 714, 739, 746, 750, 757, 759, 760, 761, 778, 779, 781, 786, 842, 848, 860], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 124, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 170, 174, 178, 179, 180, 183, 188, 190, 195, 211, 212, 216, 220, 221, 223, 224, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 343, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 590, 592, 593, 597, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 799, 801, 804, 808, 811, 812, 813, 814, 815, 816, 817, 822, 827, 828, 832, 833, 836, 837, 840, 841, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 865, 868, 870, 871, 872, 879, 880, 882], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 57, 60, 62, 63, 64, 67, 71, 72, 73, 76, 84, 94, 96, 99, 107, 136, 154, 160, 161, 181, 182, 211, 214, 215, 227, 262, 297, 344, 349, 350, 351, 353, 364, 366, 372, 376, 378, 384, 387, 388, 390, 391, 392, 393, 396, 397, 402, 405, 406, 413, 419, 424, 435, 443, 447, 455, 464, 469, 471, 472, 488, 490, 491, 499, 517, 518, 519, 528, 538, 548, 566, 567, 573, 587, 610, 611, 632, 634, 635, 636, 637, 639, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 658, 664, 668, 670, 672, 674, 680, 687, 695, 697, 704, 705, 711, 750, 784, 786, 797, 811, 812, 813, 814, 815, 816, 817, 818, 822, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 880, 881, 882, 884, 885, 886], "eta": [0, 10, 11, 16, 17, 18, 59, 61, 64], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 35, 36, 37, 38, 39, 40, 41, 45, 46, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 144, 147, 149, 150, 151, 152, 153, 156, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 178, 180, 183, 184, 188, 190, 195, 208, 211, 213, 216, 221, 222, 223, 224, 226, 227, 228, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 400, 402, 409, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 427, 428, 429, 430, 433, 434, 435, 437, 440, 441, 442, 444, 445, 446, 449, 450, 452, 455, 456, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 482, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 555, 556, 557, 560, 561, 562, 564, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 588, 590, 592, 593, 597, 602, 606, 607, 608, 609, 611, 613, 615, 616, 625, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 799, 801, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 827, 828, 832, 833, 837, 840, 841, 844, 846, 848, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 865, 866, 870, 872, 879, 880], "00": [0, 8, 9, 10, 11, 16, 17, 18, 22, 23, 24, 27, 59, 61, 64, 71, 72, 76, 94, 95, 99, 260, 327, 358, 359, 384, 390, 412, 418, 422, 423, 565, 609, 649, 651, 654, 691, 701, 796, 856, 865], "44": [0, 8, 9, 10, 11, 15, 16, 17, 18, 57, 61, 70, 71, 80, 93, 94, 103, 241, 288, 298, 302, 303, 354, 387, 390, 411, 412, 649, 653, 654, 658, 661, 664, 676, 699, 746, 759, 760, 768, 779], "6": [0, 4, 5, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 40, 41, 43, 45, 46, 57, 59, 60, 61, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80, 81, 83, 84, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 116, 117, 124, 126, 131, 136, 141, 142, 150, 151, 154, 155, 158, 164, 168, 169, 170, 178, 180, 188, 234, 235, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 291, 292, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 311, 312, 314, 316, 318, 320, 321, 322, 324, 325, 326, 327, 328, 334, 345, 350, 351, 353, 355, 364, 365, 367, 368, 369, 371, 378, 382, 384, 387, 388, 390, 391, 392, 393, 398, 400, 402, 412, 414, 417, 418, 422, 423, 427, 433, 434, 435, 437, 440, 443, 446, 447, 451, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 483, 485, 489, 490, 494, 495, 498, 499, 500, 505, 506, 508, 509, 512, 515, 516, 526, 528, 529, 531, 536, 538, 539, 540, 541, 543, 545, 547, 548, 554, 556, 557, 560, 561, 562, 568, 569, 576, 577, 578, 593, 607, 608, 609, 610, 611, 613, 617, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 683, 685, 686, 687, 688, 690, 691, 692, 694, 695, 696, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 749, 750, 756, 757, 758, 759, 760, 761, 763, 764, 765, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 796, 811, 837, 840, 844, 846, 848, 849, 850, 852, 855, 860, 865, 868, 870], "kb": [0, 8, 9, 10, 11, 16, 17, 18, 22, 23, 24, 59, 61, 64], "3": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 38, 40, 41, 43, 44, 45, 46, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 80, 81, 82, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 147, 149, 151, 152, 154, 155, 156, 157, 158, 162, 163, 164, 167, 168, 169, 170, 174, 178, 180, 188, 190, 195, 209, 211, 212, 223, 226, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 343, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 407, 409, 410, 411, 412, 414, 417, 418, 419, 422, 423, 427, 428, 429, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 458, 461, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 520, 521, 522, 523, 526, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 592, 593, 606, 607, 608, 609, 613, 616, 617, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 799, 812, 827, 828, 832, 833, 837, 839, 840, 844, 845, 846, 848, 849, 850, 852, 854, 855, 858, 860, 863, 865, 870, 871, 879, 880], "45": [0, 5, 10, 11, 15, 16, 17, 18, 57, 59, 61, 70, 71, 84, 93, 94, 96, 98, 103, 117, 239, 243, 255, 298, 299, 358, 359, 372, 387, 390, 402, 412, 422, 433, 539, 545, 631, 637, 649, 652, 654, 656, 664, 699, 728, 760, 761, 779, 796], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 38, 40, 41, 45, 46, 57, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 111, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 140, 141, 142, 143, 149, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 168, 169, 170, 174, 178, 180, 188, 190, 195, 212, 221, 226, 229, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 345, 348, 350, 351, 353, 355, 357, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 398, 400, 402, 409, 410, 411, 412, 414, 415, 417, 418, 419, 422, 423, 427, 428, 429, 432, 433, 434, 435, 437, 440, 443, 444, 446, 447, 449, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 483, 484, 485, 486, 489, 490, 493, 494, 495, 498, 499, 500, 505, 506, 507, 508, 509, 510, 512, 515, 516, 521, 522, 523, 526, 528, 529, 531, 536, 538, 539, 540, 541, 542, 543, 545, 548, 554, 555, 556, 557, 560, 561, 562, 563, 565, 568, 569, 571, 574, 576, 577, 578, 592, 593, 597, 608, 609, 610, 611, 613, 617, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 679, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 708, 709, 710, 713, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 739, 741, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 812, 818, 827, 828, 833, 836, 839, 840, 841, 844, 846, 848, 849, 850, 852, 854, 855, 857, 860, 863, 865, 879], "143": [0, 10, 11, 16, 17, 18, 76, 93, 117, 305, 649, 654, 692, 852], "8": [0, 4, 5, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 36, 38, 40, 41, 57, 59, 61, 64, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 91, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 116, 117, 124, 139, 150, 151, 155, 158, 164, 173, 175, 176, 177, 180, 188, 213, 230, 238, 240, 241, 245, 246, 249, 250, 251, 253, 259, 262, 266, 267, 273, 274, 275, 279, 280, 283, 284, 286, 287, 288, 293, 294, 297, 298, 299, 302, 303, 306, 307, 308, 312, 318, 320, 321, 322, 324, 325, 327, 328, 345, 349, 361, 364, 366, 367, 368, 371, 378, 382, 384, 387, 390, 391, 392, 393, 402, 409, 410, 411, 412, 417, 418, 422, 423, 427, 428, 432, 433, 437, 440, 443, 451, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 483, 485, 489, 494, 495, 505, 506, 509, 510, 511, 512, 515, 516, 526, 528, 540, 543, 544, 548, 554, 555, 561, 562, 565, 568, 572, 576, 577, 578, 580, 581, 584, 587, 592, 593, 597, 607, 608, 609, 610, 611, 631, 634, 636, 638, 639, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 667, 671, 672, 674, 675, 676, 677, 680, 686, 687, 688, 690, 691, 692, 694, 695, 696, 699, 701, 702, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 719, 723, 730, 731, 733, 739, 746, 750, 758, 759, 760, 761, 763, 768, 769, 771, 773, 774, 776, 778, 779, 781, 783, 785, 786, 796, 799, 812, 840, 848, 849, 852, 865], "7": [0, 4, 5, 8, 9, 10, 11, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 38, 40, 41, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 117, 126, 127, 128, 129, 140, 141, 142, 152, 155, 156, 174, 180, 183, 213, 235, 238, 241, 245, 246, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 261, 262, 265, 266, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 285, 286, 287, 288, 290, 291, 292, 294, 295, 298, 299, 300, 302, 305, 306, 308, 309, 311, 312, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 334, 345, 349, 353, 355, 356, 364, 365, 366, 368, 370, 371, 378, 382, 384, 387, 388, 390, 391, 392, 393, 398, 402, 409, 410, 411, 412, 417, 418, 422, 423, 427, 432, 433, 434, 435, 437, 440, 443, 456, 468, 469, 470, 471, 473, 474, 477, 478, 479, 483, 485, 489, 494, 495, 498, 499, 505, 506, 508, 509, 511, 512, 515, 516, 526, 528, 529, 536, 539, 540, 542, 543, 548, 554, 556, 557, 561, 562, 565, 576, 577, 578, 585, 592, 593, 608, 611, 631, 632, 634, 635, 636, 637, 638, 639, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 672, 674, 675, 676, 677, 683, 685, 686, 687, 688, 690, 691, 692, 694, 696, 699, 701, 702, 704, 705, 706, 708, 709, 710, 713, 714, 715, 719, 722, 723, 728, 730, 731, 733, 738, 739, 746, 750, 757, 758, 759, 760, 761, 763, 768, 769, 771, 773, 774, 776, 777, 778, 779, 781, 783, 785, 786, 796, 840, 841, 846, 848, 849, 852, 858, 861, 865], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 36, 38, 40, 41, 44, 57, 59, 61, 64, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80, 82, 83, 84, 87, 91, 93, 94, 95, 96, 98, 99, 101, 103, 105, 106, 107, 116, 117, 124, 140, 141, 142, 155, 173, 174, 175, 176, 177, 180, 183, 236, 238, 240, 241, 244, 245, 246, 249, 250, 255, 256, 257, 262, 269, 275, 276, 277, 279, 283, 284, 286, 287, 288, 291, 293, 294, 298, 299, 302, 303, 304, 309, 315, 318, 319, 320, 357, 360, 364, 370, 371, 378, 382, 387, 388, 390, 392, 393, 400, 402, 409, 410, 411, 412, 417, 418, 422, 423, 427, 428, 432, 433, 437, 451, 468, 470, 472, 473, 477, 478, 479, 485, 489, 494, 505, 506, 507, 508, 510, 512, 515, 526, 528, 531, 540, 557, 561, 562, 563, 565, 568, 576, 577, 580, 581, 584, 592, 593, 607, 608, 610, 631, 632, 633, 637, 638, 643, 646, 647, 649, 651, 652, 653, 654, 656, 658, 660, 661, 662, 663, 664, 667, 668, 669, 675, 676, 677, 685, 686, 688, 690, 691, 692, 694, 695, 696, 699, 701, 702, 704, 705, 706, 708, 709, 710, 719, 723, 727, 728, 730, 731, 733, 738, 739, 744, 746, 749, 750, 758, 759, 760, 761, 763, 768, 769, 771, 773, 774, 776, 778, 779, 781, 783, 785, 786, 796, 816, 848, 850, 852, 860, 865], "756": [0, 10, 11, 16, 17, 18], "21": [0, 4, 5, 10, 11, 16, 17, 24, 27, 57, 59, 61, 64, 70, 71, 72, 80, 90, 93, 94, 98, 99, 103, 107, 116, 153, 183, 238, 241, 243, 249, 273, 288, 319, 371, 390, 391, 392, 393, 402, 409, 412, 422, 427, 433, 435, 437, 441, 467, 482, 539, 593, 646, 647, 649, 651, 654, 658, 664, 688, 699, 703, 744, 759, 760, 777, 778, 779, 854, 860], "116": [0, 10, 11, 16, 17, 18], "23": [0, 5, 24, 25, 26, 27, 38, 40, 41, 57, 59, 61, 70, 71, 76, 80, 90, 93, 94, 95, 98, 103, 151, 250, 253, 270, 271, 272, 295, 297, 298, 299, 301, 308, 353, 354, 387, 390, 393, 402, 409, 410, 412, 422, 427, 428, 429, 433, 437, 482, 539, 545, 646, 649, 653, 654, 658, 661, 672, 674, 688, 692, 695, 703, 705, 706, 739, 746, 750, 759, 760, 761, 768, 833, 849, 865, 870], "29": [0, 5, 8, 9, 24, 27, 57, 59, 61, 64, 76, 93, 95, 96, 98, 103, 243, 402, 433, 539, 561, 562, 633, 637, 649, 651, 652, 654, 692, 759, 760, 761], "823": 0, "46": [0, 8, 9, 15, 24, 57, 59, 61, 71, 80, 94, 98, 103, 153, 278, 299, 329, 384, 390, 410, 428, 429, 646, 649, 658, 739, 759, 760], "14": [0, 4, 5, 8, 9, 12, 13, 20, 21, 22, 23, 24, 57, 59, 60, 61, 68, 70, 71, 75, 76, 80, 84, 91, 93, 94, 95, 98, 99, 101, 103, 167, 180, 183, 236, 241, 243, 250, 254, 280, 284, 288, 294, 301, 309, 360, 390, 391, 393, 402, 409, 410, 411, 412, 422, 427, 429, 432, 433, 434, 437, 441, 447, 448, 483, 485, 489, 494, 515, 539, 608, 631, 647, 649, 651, 652, 653, 654, 656, 658, 662, 664, 667, 668, 670, 672, 674, 676, 688, 690, 692, 699, 706, 708, 710, 733, 750, 759, 760, 761, 769, 778, 779, 848, 852, 865], "731": [0, 65, 130], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 40, 41, 45, 46, 57, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 117, 124, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 164, 167, 168, 169, 170, 174, 178, 180, 188, 190, 195, 211, 212, 213, 216, 219, 221, 223, 226, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 334, 335, 336, 343, 345, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 400, 402, 406, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 422, 423, 424, 427, 428, 429, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 456, 458, 461, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 520, 521, 523, 526, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 590, 592, 593, 597, 606, 607, 608, 609, 610, 611, 613, 617, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 798, 799, 808, 811, 812, 822, 827, 828, 832, 833, 837, 840, 841, 844, 846, 847, 848, 849, 850, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 870, 871, 872, 879, 880, 882], "121": 0, "56": [0, 22, 23, 27, 57, 59, 70, 71, 75, 80, 93, 94, 98, 153, 288, 302, 305, 308, 390, 412, 422, 631, 646, 649, 652, 653, 654, 658, 664, 668, 670, 672, 674, 677, 699, 738, 760, 779, 852], "124": [0, 653, 677], "196": [0, 98, 653, 677], "166": [0, 87, 124, 643], "99": [0, 24, 27, 57, 70, 71, 73, 91, 93, 103, 150, 237, 252, 375, 387, 608, 635, 646, 649, 651, 652, 658, 664, 742, 750, 760, 779], "11": [0, 4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 34, 36, 38, 40, 41, 57, 59, 60, 61, 64, 70, 71, 72, 75, 76, 80, 84, 93, 94, 95, 98, 99, 101, 103, 107, 117, 238, 242, 245, 250, 260, 297, 298, 304, 368, 387, 390, 391, 393, 409, 410, 422, 427, 428, 432, 433, 437, 446, 482, 483, 485, 489, 494, 496, 515, 539, 540, 555, 561, 562, 568, 577, 593, 649, 651, 653, 654, 655, 656, 658, 660, 661, 662, 664, 667, 668, 676, 677, 688, 691, 692, 693, 694, 695, 699, 703, 704, 705, 706, 708, 710, 713, 723, 728, 729, 731, 733, 744, 746, 756, 759, 760, 761, 768, 769, 777, 778, 779, 786, 848, 849, 850, 852, 860], "71": [0, 57, 70, 93, 98, 254, 294, 433, 649], "To": [0, 1, 8, 9, 22, 23, 24, 25, 26, 27, 28, 30, 34, 38, 40, 41, 45, 46, 57, 60, 61, 62, 112, 262, 392, 471, 602, 649, 651, 811, 839, 840, 844, 845, 846, 847, 850, 852, 854, 855, 856, 858, 859, 862, 863, 864, 865, 866, 879, 880], "ensur": [0, 1, 22, 23, 25, 26, 28, 30, 38, 40, 41, 71, 72, 94, 95, 390, 391, 427, 428, 429, 462, 578, 651, 791, 818, 833, 836, 839, 840, 841, 845, 850, 851, 852, 854, 856, 857, 859, 861, 862, 863, 864, 865, 866, 884, 886], "begin": [0, 10, 11, 71, 94, 299, 392, 393, 467, 483, 499, 501, 502, 503, 504, 649, 658, 738, 749, 796, 840, 844, 849, 863], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 35, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 70, 71, 72, 84, 93, 94, 95, 162, 191, 209, 214, 239, 299, 322, 343, 384, 402, 538, 545, 554, 578, 608, 611, 615, 646, 647, 648, 649, 651, 654, 664, 702, 779, 791, 793, 804, 818, 822, 827, 828, 833, 838, 839, 840, 841, 844, 845, 846, 849, 850, 851, 854, 855, 857, 861, 863, 865, 866, 868, 870, 871, 873, 874, 876, 879, 880, 882], "handl": [0, 4, 5, 12, 13, 57, 59, 65, 69, 70, 71, 87, 88, 92, 93, 94, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 208, 209, 210, 211, 212, 216, 221, 222, 230, 234, 240, 252, 277, 279, 293, 299, 300, 305, 306, 310, 315, 316, 318, 382, 393, 482, 509, 643, 648, 649, 654, 664, 708, 783, 785, 808, 816, 834, 836, 843, 848, 849, 850, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 886], "its": [0, 1, 8, 9, 24, 25, 26, 34, 36, 45, 46, 48, 51, 58, 59, 61, 66, 68, 71, 78, 88, 91, 94, 95, 101, 114, 126, 129, 132, 137, 168, 173, 174, 175, 176, 177, 228, 255, 288, 307, 317, 382, 390, 393, 402, 430, 438, 512, 514, 541, 565, 614, 643, 645, 647, 648, 649, 651, 654, 656, 658, 694, 722, 726, 727, 731, 744, 793, 828, 839, 840, 845, 848, 849, 850, 851, 853, 854, 855, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 872, 874, 876, 877, 880, 884, 886], "backend": [0, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 35, 36, 37, 38, 40, 41, 46, 48, 49, 51, 66, 67, 71, 72, 76, 88, 94, 95, 99, 116, 144, 181, 182, 185, 207, 214, 215, 217, 220, 231, 350, 351, 387, 391, 443, 445, 545, 554, 566, 567, 575, 578, 579, 589, 596, 611, 614, 646, 647, 648, 651, 654, 702, 704, 791, 793, 794, 796, 797, 798, 801, 803, 804, 809, 813, 814, 816, 821, 822, 837, 838, 840, 841, 843, 844, 845, 849, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 867, 868, 871, 874, 879, 880, 882, 884], "jax": [0, 3, 8, 9, 22, 23, 24, 32, 34, 35, 36, 37, 38, 40, 41, 45, 46, 47, 48, 49, 51, 57, 59, 63, 65, 70, 71, 72, 82, 87, 93, 94, 95, 124, 125, 126, 127, 128, 129, 130, 131, 132, 224, 306, 310, 315, 316, 318, 364, 382, 387, 402, 548, 578, 611, 630, 643, 648, 649, 651, 662, 769, 770, 771, 772, 804, 808, 818, 822, 833, 837, 838, 839, 840, 841, 844, 846, 850, 851, 854, 855, 857, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877, 879, 880, 882, 885], "capabl": [0, 8, 9, 32, 40, 46, 865, 868], "optim": [0, 8, 9, 10, 11, 20, 21, 24, 25, 26, 27, 34, 38, 41, 45, 46, 59, 61, 62, 64, 71, 73, 94, 96, 327, 384, 392, 471, 472, 552, 639, 651, 652, 657, 735, 736, 737, 811, 828, 833, 850, 861, 868, 876, 877, 879, 884, 885, 886], "frontend": [0, 27, 595, 651, 793, 794, 797, 801, 804, 838, 841, 843, 849, 850, 854, 855, 860, 864, 865, 868, 871, 874, 879, 884], "xgb_frontend": 0, "access": [0, 1, 40, 45, 46, 88, 833, 839, 840, 841, 849, 850, 856, 861, 862, 879, 884], "compat": [0, 8, 9, 16, 17, 35, 41, 47, 51, 57, 64, 70, 71, 76, 78, 81, 84, 85, 93, 94, 99, 101, 104, 107, 108, 116, 117, 169, 238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 266, 267, 274, 275, 280, 282, 284, 285, 288, 291, 293, 297, 304, 309, 350, 351, 387, 647, 649, 654, 656, 661, 664, 665, 685, 697, 700, 703, 706, 710, 711, 726, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 832, 840, 846, 857, 862, 863, 866, 870, 872], "manner": [0, 36, 46, 48, 58, 66, 89, 658, 750, 840, 850, 851, 853, 858, 862, 866, 872], "sklearn": [0, 27], "model_select": [0, 27], "timeit": [0, 20, 21, 25, 26, 27, 36, 45, 46, 62, 64], "oper": [0, 8, 9, 34, 35, 38, 40, 41, 45, 46, 47, 51, 58, 61, 67, 68, 70, 71, 72, 75, 76, 84, 88, 90, 91, 93, 94, 95, 98, 99, 107, 117, 132, 152, 153, 195, 225, 233, 238, 240, 249, 252, 255, 262, 277, 279, 288, 289, 293, 297, 300, 305, 317, 325, 345, 346, 347, 379, 382, 384, 389, 390, 392, 393, 404, 405, 406, 407, 409, 410, 411, 417, 418, 419, 423, 427, 428, 429, 430, 432, 433, 435, 437, 438, 467, 505, 507, 554, 561, 562, 563, 611, 643, 646, 647, 648, 649, 651, 653, 654, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 680, 695, 706, 708, 781, 783, 785, 796, 799, 812, 828, 832, 839, 840, 843, 844, 845, 848, 850, 851, 852, 853, 854, 858, 861, 862, 865, 868, 870, 874, 880, 884, 885, 886], "xgb": 0, "functool": [0, 27, 59, 854, 862], "higher": [0, 27, 71, 94, 391, 393, 402, 448, 460, 466, 477, 478, 479, 548, 811, 850, 861, 870, 871, 872, 884, 885], "order": [0, 4, 5, 37, 49, 51, 59, 62, 64, 67, 71, 72, 75, 76, 78, 82, 83, 88, 94, 98, 99, 101, 105, 106, 111, 116, 117, 141, 142, 154, 162, 243, 262, 305, 343, 364, 384, 387, 390, 391, 393, 396, 400, 436, 441, 444, 445, 446, 447, 448, 452, 458, 460, 463, 466, 489, 490, 491, 496, 497, 510, 517, 518, 519, 522, 531, 646, 649, 653, 654, 656, 657, 661, 662, 663, 667, 668, 669, 670, 671, 672, 675, 689, 690, 695, 704, 705, 709, 711, 723, 726, 735, 736, 767, 769, 770, 771, 772, 773, 775, 776, 793, 815, 817, 828, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 862, 863, 864, 865, 866, 867, 868, 872, 884, 885, 886], "callabl": [0, 22, 23, 63, 71, 72, 86, 94, 95, 98, 109, 136, 137, 139, 181, 182, 214, 215, 228, 378, 380, 381, 388, 389, 390, 393, 433, 436, 438, 476, 499, 551, 555, 560, 562, 566, 567, 588, 617, 630, 634, 636, 642, 645, 647, 648, 651, 652, 657, 658, 735, 736, 737, 744, 745, 746, 748, 749, 750, 751, 791, 794, 804, 816, 829, 832, 848, 854, 860, 862, 870, 878, 879, 880, 882], "object": [0, 5, 15, 27, 34, 41, 45, 59, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 144, 148, 149, 159, 171, 180, 183, 191, 194, 229, 287, 525, 573, 589, 633, 646, 647, 648, 651, 652, 658, 660, 741, 742, 743, 745, 746, 747, 753, 754, 755, 756, 763, 791, 793, 794, 801, 802, 803, 809, 810, 812, 813, 814, 822, 827, 845, 846, 848, 849, 858, 859, 862, 863, 865, 868, 871, 879, 880, 881, 882, 884], "tqdm_notebook": [0, 27], "tqdm": [0, 5, 8, 9, 10, 11, 27, 38, 40, 41, 59, 61], "progress": [0, 654, 709, 836, 840, 841, 871, 877], "bar": [0, 840, 855], "jupyt": [0, 1, 5], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 5, 22, 23, 27, 45, 46, 59, 62, 880], "step": [0, 1, 2, 8, 9, 10, 11, 24, 29, 30, 31, 42, 45, 46, 57, 59, 60, 61, 71, 73, 90, 94, 96, 140, 152, 390, 393, 436, 438, 493, 631, 632, 635, 637, 638, 639, 646, 652, 657, 735, 736, 737, 816, 832, 833, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 855, 860, 862, 865, 870, 884], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 35, 38, 39, 40, 41, 43, 45, 46, 47, 50, 51, 52, 57, 58, 59, 60, 61, 62, 64, 67, 71, 93, 94, 95, 141, 142, 144, 155, 191, 268, 272, 322, 390, 391, 418, 423, 439, 608, 646, 647, 649, 651, 658, 744, 793, 822, 827, 828, 833, 839, 845, 850, 851, 854, 857, 861, 862, 863, 865, 866, 868, 870, 874, 882], "pd": [0, 27, 61], "set_backend": [0, 4, 5, 6, 7, 12, 13, 22, 23, 27, 34, 35, 36, 37, 38, 39, 45, 46, 48, 49, 50, 51, 52, 58, 60, 61, 62, 70, 72, 86, 93, 95, 182, 191, 209, 210, 214, 224, 226, 231, 239, 554, 578, 647, 648, 651, 654, 657, 702, 736, 737, 822, 833, 844, 846, 850, 851, 858, 859, 860, 870, 879, 880, 882], "config": [0, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 24, 25, 26, 27, 37, 40, 45, 46, 59, 60, 62, 88, 658, 751, 833, 840, 844, 847, 849, 856, 863, 880, 885], "updat": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 35, 37, 38, 40, 41, 45, 46, 59, 61, 66, 72, 73, 88, 95, 96, 111, 393, 505, 578, 592, 593, 596, 597, 620, 631, 632, 635, 637, 638, 639, 651, 652, 653, 657, 658, 676, 679, 735, 736, 737, 745, 746, 750, 755, 756, 804, 809, 815, 816, 822, 828, 833, 839, 840, 841, 843, 844, 845, 848, 849, 850, 852, 857, 859, 860, 862, 863, 865, 868, 870, 872], "jax_enable_x64": [0, 6, 7, 12, 13, 20, 21, 25, 26, 27, 37, 40, 45, 46, 833], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 37, 38, 40, 41, 43, 45, 46, 50, 51, 52, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 171, 178, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 195, 207, 211, 212, 214, 215, 219, 222, 223, 225, 229, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 384, 387, 388, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 485, 486, 487, 489, 490, 491, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 530, 531, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 592, 593, 594, 597, 600, 601, 603, 604, 606, 607, 608, 609, 611, 613, 615, 616, 618, 623, 624, 626, 627, 629, 632, 633, 635, 637, 638, 639, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 744, 745, 746, 748, 749, 750, 751, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 801, 812, 813, 814, 815, 816, 819, 822, 824, 825, 827, 828, 832, 833, 837, 840, 846, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 863, 865, 867, 868, 870, 871, 879, 880], "from": [0, 2, 4, 5, 6, 7, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 51, 52, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80, 81, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 104, 107, 108, 109, 111, 112, 114, 117, 140, 142, 146, 148, 149, 150, 151, 154, 155, 158, 162, 164, 170, 188, 194, 195, 211, 216, 221, 227, 228, 254, 262, 263, 290, 294, 295, 302, 306, 327, 328, 334, 337, 343, 345, 346, 347, 354, 357, 361, 362, 364, 365, 377, 381, 384, 387, 389, 390, 391, 392, 393, 397, 402, 414, 415, 416, 430, 435, 436, 455, 462, 467, 468, 472, 482, 485, 494, 499, 506, 508, 509, 511, 512, 514, 515, 524, 525, 526, 527, 528, 539, 540, 560, 568, 569, 571, 591, 602, 613, 630, 632, 633, 637, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 660, 661, 662, 664, 665, 667, 675, 676, 685, 688, 704, 708, 709, 710, 720, 723, 726, 729, 735, 736, 737, 739, 750, 751, 752, 758, 759, 760, 761, 765, 768, 769, 771, 777, 778, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 804, 809, 811, 812, 813, 814, 816, 818, 822, 828, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886], "classification_report": [0, 27], "train_test_split": [0, 27], "usr": [0, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 59, 60, 61, 64, 840], "local": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 39, 40, 41, 46, 50, 51, 52, 59, 60, 61, 64, 396, 522, 573, 651, 834, 840, 844, 847, 855, 858, 863, 865], "lib": [0, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 24, 27, 38, 40, 41, 59, 60, 61, 64], "python3": [0, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 38, 40, 41, 45, 59, 61, 64, 840, 841], "10": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 57, 59, 61, 63, 64, 67, 70, 71, 72, 73, 75, 76, 80, 82, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 140, 151, 152, 153, 237, 245, 246, 249, 250, 253, 260, 265, 267, 273, 275, 277, 288, 294, 301, 302, 307, 316, 349, 350, 351, 354, 358, 359, 361, 363, 364, 366, 367, 368, 370, 371, 375, 378, 387, 390, 393, 402, 409, 410, 411, 412, 422, 427, 428, 432, 433, 434, 435, 437, 467, 479, 482, 485, 489, 494, 505, 506, 515, 536, 539, 540, 543, 545, 548, 561, 562, 563, 565, 568, 569, 571, 576, 577, 585, 593, 597, 602, 608, 610, 622, 625, 637, 646, 649, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 667, 668, 670, 676, 686, 688, 692, 693, 694, 695, 696, 699, 704, 705, 706, 708, 710, 723, 728, 729, 730, 731, 733, 744, 746, 749, 757, 758, 759, 760, 761, 767, 769, 775, 777, 778, 779, 780, 782, 783, 785, 786, 796, 798, 816, 818, 833, 837, 840, 844, 848, 849, 850, 852, 855, 860, 863, 865, 870, 882], "dist": [0, 10, 11, 12, 13, 16, 17, 18, 19, 24, 59, 60, 61, 64], "packag": [0, 2, 4, 5, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 28, 38, 40, 41, 46, 59, 60, 61, 64, 826, 837, 840, 849, 862, 872, 873, 884], "except": [0, 10, 11, 16, 17, 18, 19, 24, 25, 26, 35, 38, 40, 41, 60, 61, 64, 71, 72, 78, 80, 85, 88, 94, 95, 99, 103, 108, 169, 350, 351, 356, 375, 387, 393, 397, 402, 483, 508, 512, 525, 544, 545, 560, 578, 595, 611, 617, 647, 651, 654, 656, 660, 661, 665, 700, 720, 722, 730, 759, 760, 761, 767, 787, 788, 791, 794, 798, 841, 842, 843, 844, 845, 849, 850, 851, 853, 855, 857, 861, 862, 866, 867, 868, 872], "py": [0, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 25, 26, 35, 38, 40, 41, 59, 61, 64, 107, 391, 462, 779, 822, 827, 833, 839, 840, 841, 844, 846, 849, 850, 851, 853, 854, 855, 856, 857, 858, 862, 863, 865, 866, 870, 871], "383": [0, 10, 11, 16, 17, 18, 19, 35], "userwarn": [0, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 25, 26, 35, 38, 40, 41, 64], "current": [0, 5, 10, 11, 16, 17, 18, 19, 24, 25, 26, 34, 35, 38, 40, 41, 45, 46, 59, 60, 66, 71, 72, 88, 94, 117, 136, 181, 182, 185, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 221, 223, 391, 393, 443, 444, 499, 508, 566, 567, 570, 573, 575, 579, 590, 591, 611, 645, 647, 648, 651, 654, 658, 689, 738, 748, 749, 793, 797, 813, 814, 822, 823, 828, 831, 832, 833, 835, 839, 840, 841, 844, 846, 848, 849, 850, 851, 854, 855, 856, 858, 861, 862, 863, 864, 865, 868, 872, 880, 884], "39": [0, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 38, 40, 41, 57, 59, 60, 61, 62, 64, 65, 70, 71, 76, 80, 87, 93, 94, 96, 99, 103, 126, 241, 276, 278, 280, 310, 311, 314, 382, 390, 402, 410, 412, 429, 432, 539, 631, 643, 649, 652, 654, 664, 692, 699, 760, 779], "doe": [0, 5, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 34, 35, 38, 40, 41, 45, 58, 60, 70, 71, 72, 78, 88, 93, 94, 101, 111, 162, 289, 291, 299, 343, 384, 391, 392, 402, 403, 444, 471, 472, 544, 545, 549, 578, 646, 649, 651, 654, 656, 689, 728, 791, 818, 828, 837, 839, 841, 843, 846, 849, 850, 852, 853, 855, 856, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 874, 880, 884, 885], "support": [0, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 34, 35, 38, 40, 41, 45, 48, 60, 69, 71, 72, 76, 92, 94, 95, 99, 162, 181, 185, 207, 214, 229, 238, 255, 262, 283, 284, 288, 298, 317, 343, 364, 382, 384, 387, 391, 393, 426, 444, 453, 508, 554, 566, 575, 578, 579, 596, 611, 646, 647, 648, 649, 651, 653, 654, 677, 689, 690, 691, 695, 704, 711, 791, 797, 804, 816, 822, 823, 827, 832, 835, 837, 839, 840, 841, 844, 845, 847, 851, 852, 853, 855, 857, 858, 860, 861, 863, 865, 866, 868, 870, 871, 873, 874, 879, 884, 886], "inplac": [0, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 35, 38, 40, 41, 66, 72, 88, 95, 111, 114, 552, 554, 575, 578, 579, 596, 597, 651, 658, 745, 746, 750, 755, 756, 803, 804, 809, 816, 843, 845, 852, 855, 857, 859, 862, 868], "nativ": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 34, 35, 38, 40, 41, 45, 46, 66, 67, 68, 69, 72, 89, 92, 95, 116, 120, 155, 165, 166, 172, 173, 174, 175, 176, 177, 191, 194, 209, 210, 211, 212, 222, 230, 234, 578, 580, 584, 591, 596, 614, 646, 647, 648, 651, 793, 804, 809, 818, 822, 833, 837, 839, 850, 851, 854, 855, 858, 859, 861, 862, 863, 865, 870, 871, 874, 879, 880, 882], "would": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 24, 25, 26, 27, 35, 37, 38, 40, 41, 43, 45, 46, 49, 51, 53, 61, 67, 69, 71, 90, 92, 94, 101, 127, 131, 142, 229, 390, 393, 418, 423, 477, 478, 485, 487, 489, 490, 491, 498, 503, 515, 643, 648, 722, 723, 724, 726, 728, 729, 731, 733, 798, 808, 812, 833, 834, 837, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 852, 853, 855, 857, 859, 861, 862, 863, 865, 866, 868, 869, 870, 872, 877, 880, 884], "quietli": [0, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41], "new": [0, 1, 10, 11, 16, 17, 18, 19, 20, 21, 25, 26, 28, 30, 35, 38, 40, 41, 43, 45, 46, 47, 61, 63, 66, 71, 72, 73, 78, 79, 88, 90, 94, 95, 96, 99, 101, 102, 145, 148, 150, 151, 156, 157, 158, 163, 164, 201, 224, 244, 290, 292, 296, 349, 354, 366, 371, 387, 390, 393, 402, 426, 475, 483, 484, 498, 505, 512, 545, 561, 562, 563, 565, 568, 569, 571, 592, 593, 596, 598, 605, 608, 609, 615, 632, 635, 637, 638, 639, 646, 647, 648, 649, 651, 652, 653, 656, 658, 659, 680, 692, 699, 722, 726, 730, 743, 755, 756, 757, 809, 812, 815, 816, 822, 828, 834, 836, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 852, 853, 855, 856, 859, 861, 862, 863, 864, 865, 866, 868, 874, 876, 878, 880, 881], "when": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 43, 45, 46, 48, 50, 51, 52, 60, 62, 66, 67, 68, 70, 71, 76, 77, 80, 81, 84, 88, 90, 91, 93, 94, 99, 100, 103, 104, 107, 117, 156, 167, 238, 255, 260, 262, 278, 288, 306, 307, 315, 350, 351, 382, 387, 390, 391, 392, 396, 397, 402, 413, 426, 438, 445, 449, 460, 466, 467, 472, 517, 519, 525, 545, 548, 578, 594, 602, 609, 646, 647, 649, 651, 653, 654, 655, 656, 658, 660, 661, 664, 666, 678, 680, 697, 702, 713, 714, 715, 726, 749, 750, 759, 760, 761, 764, 765, 767, 768, 780, 782, 784, 786, 796, 799, 811, 812, 813, 814, 815, 822, 832, 833, 834, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 871, 872, 873, 879, 880, 884], "lead": [0, 10, 11, 12, 13, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 76, 88, 99, 117, 262, 391, 455, 596, 649, 651, 654, 701, 704, 798, 849, 850, 852, 864, 866, 872, 876], "memori": [0, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 67, 71, 78, 90, 94, 101, 142, 154, 210, 222, 228, 230, 234, 393, 402, 477, 478, 485, 487, 489, 490, 491, 498, 515, 545, 591, 596, 620, 646, 648, 651, 653, 656, 678, 679, 722, 723, 724, 726, 728, 729, 731, 733, 828, 832, 849, 850, 851, 861, 862, 868, 870, 872, 880, 884], "overhead": [0, 10, 11, 12, 13, 16, 17, 18, 19, 25, 26, 35, 36, 38, 40, 41, 45, 46, 48, 872, 880], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 35, 36, 38, 40, 41, 43, 45, 48, 50, 52, 57, 58, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80, 82, 83, 84, 88, 90, 91, 93, 94, 95, 96, 98, 99, 101, 103, 105, 107, 111, 112, 113, 114, 115, 116, 130, 140, 143, 146, 151, 153, 154, 156, 158, 160, 161, 162, 164, 167, 168, 169, 180, 183, 228, 235, 236, 237, 238, 240, 242, 246, 248, 251, 255, 261, 262, 268, 288, 290, 292, 295, 297, 298, 299, 308, 316, 328, 342, 343, 344, 345, 346, 347, 350, 351, 353, 361, 377, 382, 384, 387, 390, 391, 392, 393, 396, 398, 400, 402, 409, 410, 411, 427, 428, 429, 430, 432, 433, 434, 435, 437, 444, 449, 450, 460, 461, 462, 463, 464, 466, 467, 469, 472, 482, 484, 499, 500, 508, 509, 512, 517, 519, 529, 531, 536, 537, 538, 539, 540, 541, 542, 548, 585, 641, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 680, 683, 684, 685, 686, 688, 689, 690, 691, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 708, 710, 720, 723, 724, 726, 727, 729, 730, 735, 736, 751, 761, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 793, 796, 797, 798, 804, 812, 827, 833, 840, 841, 845, 846, 848, 849, 850, 851, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 880, 882], "appli": [0, 10, 11, 16, 17, 18, 19, 20, 21, 25, 26, 35, 38, 40, 41, 45, 46, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 387, 388, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 426, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 643, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 704, 708, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 744, 747, 750, 751, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 798, 799, 808, 812, 815, 833, 839, 840, 841, 845, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 865, 866, 868, 872, 879, 880, 885], "view": [0, 5, 10, 11, 12, 13, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 71, 78, 94, 116, 148, 159, 393, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 512, 515, 571, 646, 651, 656, 722, 723, 724, 726, 728, 729, 731, 733, 840, 841, 854, 884], "If": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 39, 40, 41, 45, 46, 51, 60, 63, 64, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 112, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 195, 211, 227, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 344, 346, 349, 350, 351, 352, 353, 355, 356, 357, 361, 365, 366, 371, 372, 374, 376, 377, 378, 384, 387, 388, 390, 391, 392, 393, 396, 397, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 419, 422, 424, 426, 427, 428, 429, 434, 435, 436, 438, 443, 445, 447, 449, 450, 457, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 485, 487, 488, 489, 490, 491, 494, 498, 500, 505, 506, 507, 508, 509, 510, 512, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 584, 585, 592, 593, 597, 607, 608, 609, 611, 613, 615, 616, 629, 630, 633, 635, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 676, 677, 680, 683, 684, 685, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 713, 714, 715, 719, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 750, 751, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 811, 812, 814, 815, 822, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 872, 873, 879, 880, 882], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 487, 545, 568, 569, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 680, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 882, 884], "want": [0, 4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 39, 40, 41, 43, 45, 46, 58, 59, 61, 71, 86, 94, 109, 255, 288, 393, 487, 649, 814, 833, 834, 835, 839, 840, 841, 847, 849, 851, 854, 856, 858, 859, 860, 861, 865, 868, 872, 873, 877, 879], "control": [0, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 53, 71, 94, 162, 311, 343, 382, 384, 390, 393, 414, 415, 416, 482, 509, 596, 646, 651, 654, 687, 848, 850, 851, 860, 861, 862, 863, 868, 874, 880, 884], "your": [0, 1, 3, 4, 5, 6, 7, 10, 11, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 49, 57, 59, 61, 63, 833, 834, 836, 837, 838, 839, 840, 842, 844, 846, 847, 849, 853, 855, 856, 860, 862, 864, 866, 868, 872, 873, 879, 880, 881, 884], "manag": [0, 10, 11, 16, 17, 18, 19, 25, 26, 34, 35, 38, 40, 41, 45, 596, 620, 651, 834, 842, 846, 850, 851, 861, 864, 872], "consid": [0, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 35, 38, 40, 41, 50, 51, 71, 76, 82, 94, 99, 132, 162, 283, 284, 343, 349, 354, 366, 384, 387, 391, 402, 445, 449, 460, 538, 643, 646, 649, 654, 662, 687, 697, 769, 770, 771, 772, 798, 811, 845, 849, 850, 858, 860, 866, 868, 880, 885], "do": [0, 2, 4, 5, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 46, 57, 59, 61, 71, 72, 88, 94, 95, 255, 288, 297, 390, 392, 393, 402, 436, 472, 484, 545, 548, 578, 649, 651, 658, 738, 745, 748, 749, 750, 755, 798, 828, 833, 837, 839, 840, 841, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 868, 870, 872, 874, 885], "set_inplace_mod": [0, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 620, 651], "strict": [0, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 596, 620, 651], "should": [0, 1, 6, 7, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 35, 38, 40, 41, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 127, 131, 139, 154, 156, 160, 161, 169, 194, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 317, 328, 344, 350, 351, 363, 367, 368, 369, 370, 374, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 414, 415, 416, 418, 423, 434, 449, 460, 466, 473, 498, 499, 500, 524, 525, 538, 539, 540, 555, 573, 578, 630, 632, 635, 637, 638, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 706, 708, 710, 711, 726, 742, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 785, 786, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 879, 884], "rais": [0, 5, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 60, 61, 67, 71, 72, 80, 82, 85, 88, 90, 94, 95, 101, 103, 105, 108, 142, 169, 258, 293, 350, 351, 361, 387, 390, 392, 393, 397, 402, 424, 435, 472, 477, 478, 485, 487, 489, 490, 491, 498, 508, 515, 525, 544, 545, 554, 578, 596, 598, 609, 611, 617, 621, 647, 649, 651, 654, 656, 660, 661, 662, 664, 665, 694, 696, 710, 722, 723, 724, 726, 728, 729, 730, 731, 733, 759, 760, 761, 767, 772, 780, 782, 787, 788, 791, 798, 816, 841, 844, 846, 850, 851, 854, 861, 862, 866, 867, 873], "error": [0, 5, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 35, 38, 40, 41, 51, 62, 64, 70, 71, 75, 88, 93, 94, 98, 124, 257, 305, 350, 351, 358, 359, 387, 391, 392, 393, 402, 403, 460, 466, 468, 470, 508, 545, 549, 596, 643, 649, 651, 653, 654, 664, 683, 702, 705, 780, 782, 798, 816, 831, 834, 838, 839, 840, 841, 844, 845, 846, 849, 850, 851, 852, 856, 857, 862, 865, 866, 867, 872, 884], "whenev": [0, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 812, 841, 846, 849, 850, 854, 861, 864, 865, 867], "attempt": [0, 8, 9, 10, 11, 16, 17, 18, 19, 25, 26, 35, 38, 40, 41, 59, 61, 64, 840, 867, 872], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 35, 38, 40, 41, 59, 60, 61, 64, 831, 840, 841, 867, 880, 882], "first": [0, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 22, 23, 24, 28, 34, 36, 37, 38, 40, 43, 44, 45, 46, 48, 49, 50, 59, 62, 63, 64, 67, 70, 71, 76, 78, 80, 81, 82, 84, 90, 93, 94, 95, 99, 101, 103, 105, 107, 111, 112, 116, 117, 136, 137, 152, 153, 162, 193, 201, 211, 238, 243, 245, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 273, 274, 275, 280, 281, 282, 284, 285, 288, 291, 293, 304, 305, 317, 327, 328, 343, 345, 346, 347, 349, 362, 364, 365, 366, 372, 376, 377, 382, 384, 387, 390, 391, 392, 393, 400, 402, 413, 443, 444, 445, 447, 451, 473, 483, 485, 489, 496, 499, 502, 503, 506, 514, 525, 527, 531, 539, 540, 541, 548, 553, 645, 646, 647, 648, 649, 651, 653, 654, 656, 657, 658, 661, 662, 663, 664, 680, 685, 688, 689, 690, 692, 694, 699, 701, 702, 704, 706, 708, 710, 726, 727, 730, 731, 735, 736, 737, 738, 739, 748, 749, 751, 763, 764, 765, 769, 770, 771, 774, 775, 777, 778, 793, 811, 812, 813, 814, 816, 822, 833, 835, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 851, 852, 856, 857, 858, 859, 861, 862, 865, 868, 870, 871, 873, 879, 880, 884, 885], "datafram": [0, 884], "allow": [0, 8, 9, 24, 27, 41, 45, 46, 57, 71, 84, 94, 107, 152, 293, 391, 402, 463, 541, 545, 588, 646, 649, 651, 663, 664, 775, 782, 796, 797, 798, 799, 813, 814, 828, 832, 833, 839, 841, 842, 845, 846, 849, 850, 854, 856, 858, 859, 860, 861, 862, 863, 865, 868, 870, 872, 874, 876, 879, 880, 882, 884, 886], "u": [0, 4, 5, 20, 21, 59, 61, 63, 64, 71, 76, 90, 94, 99, 111, 112, 153, 391, 455, 462, 464, 654, 658, 684, 690, 691, 704, 746, 833, 834, 840, 841, 843, 848, 849, 856, 859, 861, 862, 863, 864, 865, 866, 868, 872], "leverag": [0, 40, 45, 46, 840, 861, 876, 877, 879, 884, 886], "explor": [0, 8, 9, 10, 11, 24, 27, 28, 30, 34, 38, 40, 45, 46, 51, 52, 53, 839, 840, 841, 850, 855, 868, 884], "expect": [0, 4, 5, 12, 13, 20, 21, 25, 26, 36, 40, 45, 46, 48, 61, 62, 64, 71, 76, 77, 94, 100, 194, 262, 306, 390, 392, 413, 435, 472, 552, 647, 649, 651, 653, 655, 678, 699, 713, 811, 812, 833, 840, 841, 844, 850, 851, 854, 856, 859, 861, 863, 865, 868, 872, 879, 880, 882], "contain": [0, 16, 17, 34, 45, 46, 60, 65, 66, 67, 68, 70, 71, 72, 75, 76, 77, 78, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 178, 180, 181, 182, 183, 186, 187, 188, 190, 192, 195, 212, 214, 215, 216, 221, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 384, 387, 389, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 597, 600, 602, 607, 608, 609, 610, 611, 613, 615, 616, 623, 629, 630, 631, 632, 633, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 745, 746, 747, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 803, 804, 812, 813, 814, 816, 817, 822, 827, 828, 832, 833, 835, 837, 839, 840, 843, 844, 845, 846, 847, 849, 850, 852, 853, 855, 857, 858, 859, 860, 861, 863, 865, 867, 868, 870, 872, 873, 874, 880, 884, 885], "variou": [0, 8, 9, 27, 37, 49, 51, 57, 833, 836, 839, 840, 841, 844, 849, 850, 853, 854, 857, 859, 860, 862, 863, 864, 865, 873, 884, 886], "among": [0, 8, 9, 88, 848, 849, 865, 868, 876, 884], "pattern": [0, 71, 72, 94, 95, 391, 455, 561, 562, 563, 651, 850, 853, 864], "signal": [0, 71, 94, 334, 384, 390, 404, 405, 406, 407, 412, 413, 422, 438, 812, 884, 886], "credit_card_data": 0, "read_csv": [0, 27, 61], "creditcard": 0, "csv": [0, 27, 61], "get": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 59, 60, 62, 68, 69, 76, 88, 92, 99, 116, 178, 179, 180, 183, 211, 212, 213, 216, 222, 227, 230, 234, 393, 505, 552, 570, 591, 610, 647, 648, 651, 654, 658, 711, 740, 796, 811, 812, 827, 834, 836, 838, 839, 840, 842, 843, 844, 849, 850, 851, 855, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 874, 879, 882, 884], "sens": [0, 844, 850, 852, 862, 864], "re": [0, 24, 27, 32, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 52, 59, 61, 62, 64, 71, 72, 81, 94, 104, 114, 228, 334, 384, 391, 393, 465, 501, 502, 561, 648, 651, 654, 656, 661, 706, 727, 766, 768, 833, 834, 835, 839, 840, 841, 842, 843, 844, 847, 850, 855, 860, 861, 862, 863, 864, 866, 868, 870, 872, 876, 881, 884], "work": [0, 1, 8, 9, 24, 41, 45, 46, 57, 58, 60, 64, 66, 71, 94, 111, 402, 548, 654, 658, 705, 745, 746, 750, 755, 756, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 861, 862, 863, 865, 866, 869, 870, 871, 873, 877, 879, 880, 882, 884, 886], "help": [0, 1, 32, 61, 63, 68, 551, 596, 651, 664, 785, 811, 833, 834, 835, 839, 840, 842, 845, 846, 847, 848, 849, 850, 852, 856, 858, 859, 861, 862, 865, 866, 874, 877, 884], "few": [0, 8, 9, 10, 11, 833, 838, 839, 841, 848, 850, 851, 857, 858, 860, 861, 863, 865, 868, 871, 876, 884], "entri": [0, 71, 78, 88, 94, 101, 105, 112, 152, 391, 393, 397, 461, 488, 490, 491, 524, 646, 656, 658, 728, 751, 769, 840, 849, 865, 884], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 64, 67, 68, 71, 72, 76, 78, 80, 82, 90, 91, 94, 95, 99, 101, 103, 105, 111, 112, 126, 129, 141, 142, 153, 155, 170, 209, 226, 227, 228, 317, 334, 382, 384, 390, 391, 392, 393, 396, 397, 400, 402, 413, 426, 450, 457, 459, 464, 472, 484, 500, 512, 517, 525, 526, 531, 538, 585, 596, 630, 633, 643, 646, 647, 648, 651, 652, 653, 654, 656, 660, 680, 688, 694, 704, 708, 726, 730, 759, 760, 761, 769, 793, 796, 797, 798, 799, 804, 828, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 882, 884, 885, 886], "give": [0, 12, 13, 35, 47, 57, 71, 75, 94, 98, 194, 380, 389, 390, 433, 437, 647, 653, 656, 666, 667, 668, 669, 671, 673, 675, 726, 811, 833, 840, 841, 843, 846, 849, 850, 852, 853, 855, 856, 857, 865, 884], "insight": 0, "structur": [0, 27, 46, 88, 91, 117, 180, 183, 558, 651, 655, 658, 716, 742, 751, 839, 841, 842, 845, 848, 858, 863, 864, 865, 866, 884, 886], "type": [0, 6, 7, 20, 21, 24, 28, 30, 34, 40, 45, 46, 51, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 793, 796, 797, 798, 799, 803, 804, 808, 811, 812, 813, 814, 819, 822, 825, 827, 828, 829, 832, 839, 840, 841, 843, 844, 845, 848, 851, 852, 853, 854, 857, 859, 861, 863, 865, 866, 868, 870, 879, 880, 881, 882, 884, 885], "present": [0, 60, 71, 84, 88, 94, 107, 353, 387, 396, 517, 518, 519, 664, 782, 839, 840, 841, 848, 850, 851, 857, 861, 876], "initi": [0, 6, 7, 8, 9, 16, 17, 45, 46, 62, 71, 75, 84, 88, 94, 98, 107, 117, 391, 402, 449, 460, 466, 546, 547, 653, 664, 678, 679, 782, 809, 812, 813, 814, 816, 817, 832, 833, 836, 841, 842, 846, 850, 851, 855, 863, 865, 870, 879, 880, 882, 884], "qualiti": [0, 836, 841], "below": [0, 2, 22, 23, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 50, 51, 52, 57, 60, 61, 62, 67, 71, 76, 94, 99, 107, 160, 161, 162, 262, 272, 295, 343, 344, 353, 384, 387, 393, 508, 646, 649, 654, 688, 708, 786, 834, 837, 839, 840, 843, 844, 848, 849, 850, 851, 852, 854, 855, 858, 861, 862, 863, 865, 866, 867, 868, 870, 871, 879, 880, 882], "head": [0, 8, 9, 10, 11, 24, 62, 63, 653, 680, 812, 833, 838, 840, 849, 862], "method": [0, 27, 34, 45, 61, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 167, 168, 169, 170, 180, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 387, 390, 391, 392, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 646, 647, 649, 651, 652, 654, 655, 658, 661, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 708, 709, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 749, 750, 751, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 793, 804, 810, 811, 812, 813, 814, 839, 841, 844, 845, 849, 850, 851, 852, 853, 857, 865, 866, 870, 871, 872, 879, 880, 882, 885], "five": 0, "row": [0, 59, 71, 94, 112, 147, 162, 343, 384, 391, 393, 400, 402, 450, 462, 491, 497, 516, 531, 537, 538, 646, 654, 660, 661, 695, 703, 704, 709, 758, 767, 811], "v1": 0, "v2": 0, "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 884], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 27, 77, 100, 230, 648, 655, 713, 714, 715, 828, 840, 849, 851, 863], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 76, 654, 692], "62": [0, 24, 27, 57, 59, 65, 87, 93, 94, 103, 127, 273, 301, 649, 659, 660, 757, 759, 761], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 24, 36, 57, 64, 70, 96, 103, 236, 278, 390, 412, 422, 635, 649, 652, 654, 695, 696, 760, 865], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 294, 649], "66": [0, 5, 24, 38, 40, 41, 57, 59, 61, 84, 94, 95, 96, 390, 422, 561, 562, 635, 651, 652, 654, 664, 699, 779], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 35, 90, 91, 94, 151, 183, 471, 564, 646, 651, 828, 865], "50": [0, 25, 26, 27, 45, 46, 57, 61, 71, 84, 93, 94, 95, 254, 294, 372, 387, 390, 391, 393, 419, 443, 451, 505, 563, 569, 576, 577, 593, 608, 649, 651, 654, 658, 661, 664, 693, 699, 710, 739, 741, 767, 779, 796, 799, 860, 879, 880], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 5, 27, 38, 40, 41, 57, 59, 60, 64, 65, 70, 71, 93, 94, 95, 98, 103, 127, 132, 153, 249, 280, 288, 390, 393, 402, 411, 412, 482, 539, 556, 643, 646, 649, 651, 760, 761], "column": [0, 27, 61, 71, 76, 94, 99, 111, 112, 147, 162, 343, 384, 391, 393, 400, 402, 444, 450, 462, 483, 488, 490, 491, 495, 497, 531, 537, 538, 646, 654, 689, 690, 695, 701, 703, 704, 709, 796, 811], "It": [0, 1, 4, 5, 10, 11, 25, 26, 27, 35, 38, 40, 41, 45, 46, 47, 48, 57, 58, 59, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 167, 169, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 344, 350, 351, 352, 353, 358, 359, 363, 365, 367, 368, 369, 370, 374, 382, 384, 387, 390, 391, 392, 393, 396, 397, 402, 403, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 432, 434, 439, 441, 442, 450, 451, 456, 457, 458, 459, 467, 468, 469, 470, 471, 473, 474, 484, 487, 492, 501, 502, 503, 504, 506, 508, 512, 513, 517, 520, 521, 523, 524, 525, 527, 528, 538, 539, 540, 541, 549, 556, 557, 561, 562, 563, 568, 569, 578, 592, 593, 594, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 703, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 737, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 772, 773, 776, 777, 778, 781, 783, 784, 786, 787, 788, 811, 812, 833, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 859, 861, 862, 863, 864, 865, 866, 867, 868, 871, 882, 884, 885], "just": [0, 8, 9, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 57, 59, 61, 71, 76, 84, 99, 111, 114, 162, 343, 384, 391, 459, 646, 654, 664, 697, 779, 804, 812, 833, 837, 840, 841, 842, 844, 846, 849, 850, 851, 852, 853, 855, 858, 859, 861, 862, 863, 865, 871, 872, 876, 879, 884, 885], "verifi": [0, 8, 9, 16, 17, 18, 27, 40, 340, 341, 384, 839, 850, 851, 862, 865, 866], "consist": [0, 8, 9, 10, 11, 22, 23, 24, 25, 26, 27, 38, 40, 41, 45, 46, 84, 88, 255, 262, 288, 390, 391, 434, 444, 649, 654, 664, 689, 690, 779, 813, 814, 836, 844, 845, 849, 850, 856, 861, 871, 885, 886], "complet": [0, 76, 88, 99, 654, 701, 797, 833, 839, 840, 841, 842, 844, 845, 848, 849, 852, 854, 858, 862, 863, 865, 868], "By": [0, 35, 57, 64, 71, 77, 78, 84, 85, 94, 100, 101, 107, 108, 302, 348, 350, 351, 364, 371, 384, 387, 390, 392, 393, 400, 402, 413, 471, 472, 508, 512, 531, 538, 541, 596, 649, 651, 654, 655, 656, 664, 665, 685, 710, 713, 725, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 840, 846, 850, 852, 854, 858, 860, 861, 862, 870, 877, 880, 886], "tail": 0, "last": [0, 5, 15, 36, 41, 45, 48, 67, 71, 75, 76, 77, 78, 81, 83, 84, 85, 88, 90, 94, 98, 99, 100, 101, 106, 107, 108, 112, 116, 152, 153, 156, 211, 328, 356, 384, 387, 390, 391, 392, 393, 400, 402, 419, 424, 434, 435, 436, 447, 471, 489, 499, 502, 508, 512, 531, 539, 540, 646, 648, 653, 654, 655, 656, 661, 663, 664, 665, 679, 680, 685, 688, 699, 708, 710, 714, 715, 720, 723, 726, 727, 728, 730, 764, 765, 773, 775, 776, 777, 778, 787, 788, 812, 822, 841, 844, 846, 847, 850, 852, 861, 863, 865, 868, 870, 872, 879, 884], "well": [0, 24, 27, 45, 46, 59, 60, 61, 95, 392, 471, 574, 651, 654, 703, 798, 835, 839, 841, 847, 849, 850, 854, 861, 862, 863, 865, 877, 879, 884, 885, 886], "readi": [0, 28, 30, 35, 36, 37, 47, 48, 49, 50, 51, 52, 59, 61, 839, 840], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 10, 11, 27, 57, 61, 95, 609, 654, 664, 699, 779], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 5, 8, 9, 24, 27, 36, 57, 59, 70, 71, 76, 84, 93, 94, 95, 98, 99, 103, 116, 250, 258, 273, 275, 288, 298, 299, 302, 364, 367, 387, 390, 402, 409, 411, 412, 422, 427, 428, 429, 433, 437, 539, 561, 562, 649, 651, 654, 658, 664, 667, 688, 695, 699, 739, 750, 759, 760, 761, 777, 779, 793, 854], "79": [0, 57, 59, 71, 72, 94, 95, 98, 103, 116, 255, 390, 412, 422, 433, 556, 557, 649, 651, 761], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 27, 57, 70, 71, 72, 76, 93, 94, 95, 98, 103, 116, 253, 258, 298, 299, 301, 308, 319, 323, 382, 402, 433, 539, 561, 562, 608, 634, 636, 649, 651, 652, 654, 692, 761], "88": [0, 5, 27, 57, 96, 103, 126, 402, 539, 635, 643, 652, 654, 660, 664, 699, 761, 779], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 59, 854], "understand": [0, 32, 33, 34, 38, 57, 63, 837, 838, 839, 840, 841, 843, 844, 847, 852, 853, 857, 863, 864, 869], "composit": [0, 34, 45, 181, 182, 214, 215, 307, 391, 451, 566, 567, 647, 648, 649, 651, 797, 799, 839, 843, 845, 846, 848, 850, 851, 859, 861, 862, 863, 865, 868, 870, 871, 872, 874, 880, 885], "crucial": [0, 851, 860, 877], "proce": [0, 27, 839, 840], "ani": [0, 1, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 28, 30, 34, 35, 36, 43, 44, 47, 48, 51, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 170, 171, 186, 190, 194, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 343, 344, 350, 351, 353, 356, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 435, 436, 445, 450, 467, 488, 499, 508, 512, 517, 518, 519, 538, 541, 544, 545, 546, 550, 560, 561, 562, 563, 564, 568, 572, 574, 576, 580, 582, 583, 601, 607, 609, 616, 617, 624, 630, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 745, 747, 748, 755, 757, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886], "info": [0, 5, 24, 59, 831, 832, 833, 847, 853, 856], "concis": 0, "summari": [0, 88, 184, 558, 647, 651, 840, 841, 865], "includ": [0, 1, 8, 9, 24, 27, 36, 48, 53, 67, 70, 71, 72, 76, 81, 84, 85, 88, 90, 93, 94, 95, 99, 104, 107, 108, 140, 141, 142, 152, 153, 155, 162, 235, 259, 263, 264, 265, 268, 270, 273, 281, 289, 302, 307, 329, 332, 333, 334, 337, 343, 346, 348, 350, 351, 355, 356, 357, 360, 361, 362, 363, 365, 367, 368, 370, 371, 372, 373, 376, 377, 384, 387, 390, 393, 402, 409, 410, 411, 441, 444, 446, 490, 491, 493, 496, 498, 501, 504, 526, 528, 529, 537, 541, 543, 544, 546, 547, 548, 574, 629, 646, 649, 651, 653, 654, 658, 660, 661, 664, 665, 678, 689, 709, 711, 738, 761, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 799, 811, 812, 815, 818, 830, 832, 833, 839, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 868, 870, 879, 880, 884, 886], "number": [0, 59, 61, 62, 63, 64, 67, 68, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 84, 85, 88, 90, 91, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 107, 108, 111, 112, 114, 116, 117, 120, 140, 143, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 162, 168, 173, 174, 175, 176, 177, 179, 180, 183, 186, 187, 188, 190, 192, 195, 219, 220, 221, 235, 236, 237, 238, 239, 241, 243, 244, 251, 253, 255, 256, 258, 260, 261, 262, 268, 269, 270, 272, 276, 278, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 299, 301, 302, 306, 308, 334, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 366, 371, 375, 384, 387, 390, 391, 392, 393, 396, 402, 424, 435, 438, 441, 444, 448, 449, 450, 460, 464, 466, 467, 477, 478, 479, 499, 500, 501, 502, 503, 504, 506, 508, 510, 512, 514, 517, 518, 519, 536, 538, 539, 540, 541, 547, 565, 572, 590, 607, 608, 609, 616, 629, 630, 644, 646, 647, 648, 649, 651, 653, 654, 655, 656, 657, 660, 661, 662, 664, 665, 666, 673, 674, 676, 678, 680, 685, 689, 690, 691, 697, 702, 704, 708, 709, 710, 713, 719, 721, 722, 724, 725, 727, 728, 730, 732, 734, 735, 736, 737, 758, 762, 767, 769, 770, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 804, 811, 812, 815, 828, 832, 833, 840, 841, 848, 849, 850, 851, 852, 859, 860, 861, 865, 866, 867, 868, 870, 875, 880], "presenc": [0, 791, 848, 861], "null": [0, 840, 855], "each": [0, 20, 21, 24, 25, 26, 27, 36, 37, 38, 45, 46, 48, 49, 50, 52, 59, 65, 67, 68, 70, 71, 72, 73, 75, 76, 78, 81, 82, 84, 88, 91, 93, 94, 95, 96, 98, 99, 101, 104, 105, 107, 111, 112, 114, 116, 117, 125, 126, 128, 129, 130, 132, 136, 143, 154, 168, 180, 183, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 318, 320, 321, 322, 324, 325, 326, 331, 342, 345, 346, 347, 353, 361, 365, 369, 374, 377, 382, 384, 387, 390, 391, 393, 396, 397, 400, 402, 409, 410, 411, 414, 415, 416, 419, 427, 428, 429, 430, 433, 435, 436, 437, 444, 445, 450, 459, 460, 464, 466, 477, 478, 479, 483, 484, 485, 490, 491, 493, 494, 496, 498, 499, 500, 503, 505, 514, 515, 522, 524, 531, 536, 537, 538, 539, 540, 541, 550, 553, 561, 568, 569, 585, 610, 630, 632, 633, 635, 637, 638, 639, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 684, 685, 686, 689, 690, 691, 694, 696, 697, 698, 700, 702, 703, 704, 709, 721, 725, 727, 728, 730, 732, 734, 744, 751, 758, 767, 769, 770, 772, 778, 779, 786, 793, 796, 798, 804, 812, 815, 816, 817, 828, 832, 836, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 876, 879, 880, 885, 886], "invalu": 0, "plan": [0, 873], "right": [0, 60, 71, 76, 88, 94, 99, 117, 134, 135, 247, 249, 302, 365, 387, 390, 391, 393, 425, 455, 461, 462, 464, 490, 561, 645, 649, 651, 654, 663, 704, 709, 775, 796, 834, 839, 840, 841, 843, 844, 852, 855, 868, 880], "format": [0, 1, 40, 41, 45, 46, 57, 59, 60, 61, 69, 72, 75, 84, 87, 88, 89, 92, 98, 114, 132, 178, 212, 390, 391, 401, 432, 465, 534, 561, 643, 647, 648, 651, 653, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 678, 779, 789, 790, 791, 808, 833, 840, 841, 843, 849, 850, 851, 852, 853, 854, 862, 864, 879, 884, 885, 886], "lt": [0, 4, 5, 8, 9, 10, 11, 22, 23, 24, 28, 30, 34, 38, 39, 40, 41, 57, 59, 61, 117], "core": [0, 5, 8, 9, 38, 41, 59, 60, 61, 63, 64, 71, 94, 111, 114, 219, 391, 449, 460, 465, 466, 648, 840, 851, 855, 865, 884, 885, 886], "frame": [0, 61, 71, 94, 334, 384, 390, 438, 825, 884], "gt": [0, 4, 5, 8, 9, 10, 11, 15, 22, 23, 24, 28, 30, 34, 38, 39, 40, 41, 57, 59, 61, 64, 117, 863, 870], "rangeindex": 0, "284807": 0, "total": [0, 5, 59, 61, 71, 84, 88, 94, 107, 117, 149, 230, 345, 346, 347, 355, 384, 387, 392, 467, 646, 648, 661, 664, 767, 784, 786, 828, 834, 840, 841, 850, 851, 852, 865, 868, 872], "non": [0, 10, 11, 36, 48, 68, 70, 71, 76, 80, 81, 84, 85, 91, 93, 94, 99, 103, 104, 107, 108, 149, 167, 185, 194, 263, 283, 284, 289, 350, 351, 355, 362, 375, 387, 390, 391, 393, 402, 434, 445, 449, 455, 478, 479, 541, 544, 646, 647, 649, 654, 658, 660, 661, 664, 665, 685, 686, 695, 697, 704, 706, 710, 711, 751, 760, 764, 765, 766, 767, 780, 781, 782, 783, 784, 786, 787, 788, 796, 811, 813, 814, 816, 845, 848, 852, 870, 879, 880, 882, 884], "count": [0, 5, 63, 71, 78, 82, 85, 90, 94, 101, 105, 108, 149, 221, 355, 387, 393, 402, 508, 512, 514, 536, 541, 646, 648, 654, 656, 662, 665, 685, 710, 720, 723, 769, 770, 787, 788, 847, 848, 852], "dtype": [0, 4, 5, 12, 13, 22, 23, 27, 30, 36, 38, 39, 40, 41, 57, 60, 67, 68, 71, 72, 75, 76, 80, 81, 84, 88, 90, 91, 93, 94, 95, 98, 99, 103, 104, 107, 116, 119, 120, 121, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 223, 250, 254, 286, 287, 289, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 348, 353, 355, 371, 384, 387, 390, 391, 392, 393, 397, 402, 412, 422, 434, 435, 438, 461, 467, 472, 483, 508, 524, 525, 526, 527, 528, 538, 539, 540, 541, 544, 547, 548, 565, 566, 567, 569, 578, 587, 615, 646, 647, 648, 649, 651, 653, 654, 657, 660, 661, 663, 664, 665, 669, 676, 695, 711, 736, 737, 759, 760, 761, 764, 765, 766, 775, 776, 777, 778, 781, 783, 785, 787, 788, 791, 793, 796, 798, 799, 811, 812, 813, 814, 815, 817, 833, 837, 844, 846, 850, 851, 852, 854, 855, 858, 859, 861, 862, 863, 865, 866, 870, 879], "float64": [0, 38, 39, 68, 71, 80, 84, 90, 91, 93, 94, 95, 103, 107, 140, 149, 150, 167, 170, 174, 175, 180, 181, 184, 185, 190, 191, 195, 197, 198, 204, 207, 289, 361, 387, 392, 402, 467, 472, 538, 587, 646, 647, 651, 654, 660, 690, 691, 695, 711, 760, 761, 778, 793, 796, 797, 850, 863, 865], "v10": 0, "v11": 0, "12": [0, 4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 27, 34, 36, 38, 40, 41, 57, 59, 60, 61, 68, 70, 71, 72, 75, 76, 80, 84, 91, 93, 94, 95, 98, 99, 101, 102, 103, 107, 116, 117, 183, 238, 240, 245, 249, 250, 253, 255, 256, 257, 275, 288, 291, 298, 301, 308, 309, 332, 333, 364, 367, 368, 384, 387, 390, 393, 402, 409, 410, 411, 412, 414, 418, 419, 427, 428, 432, 433, 434, 435, 437, 482, 483, 485, 489, 494, 512, 515, 528, 539, 545, 546, 547, 557, 561, 562, 593, 599, 608, 622, 649, 651, 653, 654, 656, 658, 659, 660, 661, 662, 664, 667, 671, 676, 677, 688, 690, 692, 695, 699, 703, 705, 706, 708, 710, 723, 727, 729, 731, 733, 750, 757, 759, 760, 761, 768, 769, 777, 778, 779, 783, 785, 796, 840, 846, 848, 850, 852, 860], "v12": 0, "13": [0, 4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 34, 38, 40, 41, 57, 59, 61, 65, 70, 71, 75, 76, 80, 84, 93, 94, 95, 96, 98, 101, 103, 107, 116, 132, 183, 213, 238, 253, 262, 273, 293, 302, 364, 371, 378, 387, 390, 393, 411, 412, 422, 433, 437, 482, 483, 485, 489, 494, 515, 528, 539, 540, 556, 561, 562, 577, 599, 608, 631, 643, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 661, 662, 664, 667, 668, 676, 677, 688, 692, 699, 703, 705, 708, 733, 737, 750, 759, 760, 761, 768, 769, 777, 778, 779, 848, 850, 852, 862], "v13": 0, "v14": 0, "15": [0, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 22, 23, 24, 25, 26, 27, 57, 59, 60, 61, 64, 70, 71, 72, 76, 80, 84, 90, 91, 93, 94, 95, 98, 99, 101, 103, 107, 117, 151, 180, 238, 245, 249, 255, 257, 266, 273, 274, 279, 280, 288, 297, 298, 299, 364, 378, 387, 388, 390, 391, 393, 402, 409, 410, 427, 429, 432, 433, 437, 443, 485, 489, 494, 515, 539, 557, 561, 562, 565, 576, 577, 602, 608, 625, 646, 647, 649, 651, 653, 654, 656, 658, 660, 661, 662, 664, 667, 677, 688, 691, 692, 693, 699, 705, 706, 727, 733, 738, 759, 760, 767, 769, 778, 779, 793, 836, 840, 849, 852, 860], "v15": 0, "v16": 0, "17": [0, 5, 8, 9, 12, 13, 16, 17, 18, 24, 25, 26, 27, 38, 40, 41, 57, 59, 61, 64, 65, 71, 76, 87, 93, 94, 95, 96, 98, 99, 103, 117, 126, 127, 153, 238, 255, 280, 288, 319, 327, 378, 384, 390, 393, 409, 410, 418, 419, 422, 423, 427, 428, 433, 437, 489, 562, 577, 631, 633, 643, 646, 649, 651, 652, 653, 654, 658, 660, 667, 676, 677, 688, 692, 746, 759, 760, 761, 763, 848], "v17": 0, "18": [0, 4, 5, 18, 24, 25, 26, 27, 38, 40, 41, 57, 59, 61, 70, 71, 80, 93, 94, 95, 98, 99, 103, 107, 127, 250, 255, 297, 301, 310, 311, 364, 382, 387, 390, 393, 412, 418, 422, 423, 427, 433, 437, 489, 607, 643, 649, 654, 660, 664, 671, 688, 694, 699, 706, 759, 760, 761, 778, 779, 783, 848, 850, 852], "v18": 0, "19": [0, 4, 5, 24, 25, 26, 38, 40, 41, 57, 59, 60, 61, 64, 70, 71, 80, 93, 94, 98, 99, 103, 241, 250, 278, 288, 305, 390, 391, 393, 402, 411, 412, 423, 427, 433, 437, 443, 448, 489, 539, 649, 654, 658, 660, 663, 688, 695, 708, 749, 759, 760, 761, 776, 852], "v19": 0, "20": [0, 4, 16, 17, 18, 19, 24, 27, 30, 57, 59, 60, 61, 64, 70, 71, 72, 75, 80, 84, 93, 94, 95, 98, 99, 103, 107, 250, 254, 258, 294, 298, 302, 319, 364, 366, 368, 387, 390, 393, 409, 411, 427, 433, 437, 482, 505, 561, 568, 569, 571, 593, 597, 608, 649, 651, 654, 660, 661, 664, 667, 668, 679, 688, 693, 695, 699, 706, 759, 767, 768, 777, 778, 779, 783, 785, 833, 849, 868], "v20": 0, "22": [0, 5, 24, 27, 38, 40, 41, 57, 59, 61, 64, 65, 70, 71, 72, 80, 84, 87, 94, 95, 98, 103, 127, 132, 250, 258, 319, 323, 382, 390, 391, 392, 393, 398, 402, 409, 410, 412, 427, 428, 429, 433, 437, 443, 467, 482, 529, 539, 562, 593, 629, 643, 649, 653, 654, 658, 661, 664, 676, 677, 688, 693, 699, 703, 746, 756, 759, 760, 761, 768, 778, 779, 840, 848, 854], "26": [0, 5, 15, 24, 38, 40, 41, 44, 57, 59, 61, 64, 70, 71, 79, 80, 94, 95, 96, 103, 250, 255, 301, 390, 391, 412, 448, 458, 576, 631, 649, 651, 652, 653, 654, 658, 659, 664, 675, 688, 699, 706, 739, 757, 759, 760, 779], "27": [0, 15, 24, 27, 57, 59, 64, 70, 71, 76, 80, 93, 94, 95, 98, 99, 103, 107, 249, 250, 253, 293, 301, 302, 361, 387, 390, 412, 422, 577, 607, 649, 651, 654, 658, 664, 694, 699, 709, 739, 746, 760, 779, 783, 796], "28": [0, 24, 27, 41, 43, 44, 45, 46, 57, 59, 61, 64, 70, 71, 75, 79, 93, 94, 95, 98, 99, 103, 107, 254, 257, 278, 294, 390, 391, 412, 422, 443, 545, 576, 631, 649, 651, 652, 653, 654, 655, 659, 664, 668, 670, 672, 674, 675, 677, 699, 716, 757, 759, 760, 761, 779, 783], "30": [0, 24, 27, 38, 40, 41, 57, 59, 70, 71, 72, 94, 95, 103, 107, 117, 288, 319, 364, 372, 387, 390, 393, 412, 422, 433, 482, 505, 529, 561, 563, 568, 569, 576, 577, 593, 602, 608, 649, 651, 654, 658, 664, 693, 699, 747, 759, 760, 778, 779, 783, 798, 811, 828, 836, 849], "int64": [0, 12, 13, 71, 80, 81, 83, 84, 91, 103, 104, 106, 107, 157, 170, 176, 179, 181, 183, 187, 188, 192, 199, 331, 384, 400, 402, 531, 539, 540, 646, 647, 661, 663, 664, 759, 764, 765, 766, 775, 777, 778, 783, 785, 796, 797, 850, 862, 865, 870], "proceed": [0, 59], "within": [0, 10, 11, 27, 28, 30, 34, 45, 46, 66, 71, 94, 140, 349, 366, 387, 390, 396, 427, 428, 429, 434, 437, 477, 478, 479, 522, 646, 660, 761, 828, 836, 839, 841, 842, 845, 849, 850, 862, 863, 864, 865, 872, 877, 879, 885, 886], "significantli": [0, 16, 17, 20, 21, 25, 26, 45, 71, 76, 94, 99, 391, 464, 654, 704, 849], "impact": [0, 836, 849, 865], "isnul": 0, "sum": [0, 8, 9, 10, 11, 59, 61, 70, 71, 72, 75, 76, 77, 84, 88, 93, 94, 95, 98, 99, 100, 107, 111, 116, 117, 228, 238, 280, 304, 347, 371, 384, 387, 391, 392, 393, 396, 402, 433, 443, 467, 468, 469, 470, 471, 472, 473, 474, 505, 522, 544, 545, 562, 592, 593, 648, 649, 651, 653, 654, 655, 664, 676, 683, 695, 704, 708, 711, 713, 778, 779, 811, 813, 827, 833, 848, 850, 858, 860, 861, 862, 870, 871, 879, 880, 882], "quickli": [0, 8, 9, 840, 841, 849, 884], "appropri": [0, 8, 9, 20, 21, 34, 38, 41, 45, 46, 72, 81, 86, 104, 109, 238, 255, 262, 288, 349, 366, 387, 649, 661, 764, 839, 840, 841, 854, 859, 865], "either": [0, 27, 38, 39, 50, 51, 52, 53, 57, 63, 70, 71, 72, 75, 84, 88, 93, 94, 95, 98, 99, 126, 129, 132, 137, 148, 149, 159, 235, 236, 237, 238, 243, 253, 255, 256, 258, 260, 262, 269, 270, 276, 277, 278, 279, 280, 288, 297, 299, 300, 302, 305, 306, 352, 374, 387, 390, 396, 402, 412, 422, 432, 433, 437, 522, 539, 540, 560, 580, 588, 589, 597, 617, 643, 645, 646, 649, 651, 653, 654, 657, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 694, 699, 702, 706, 735, 736, 737, 777, 778, 783, 785, 798, 812, 813, 814, 818, 822, 835, 839, 840, 841, 846, 847, 848, 850, 851, 852, 853, 854, 856, 858, 861, 862, 863, 864, 865, 868, 870, 872, 879, 884], "imput": [0, 71, 94, 391, 449, 460, 466], "remov": [0, 8, 9, 16, 17, 24, 27, 36, 41, 45, 46, 48, 76, 88, 99, 654, 656, 657, 658, 688, 694, 708, 729, 735, 736, 752, 828, 831, 833, 839, 846, 847, 849, 850, 853, 858, 864, 865, 868, 879, 880, 884], "maintain": [0, 83, 106, 663, 773, 776, 833, 840, 841, 844, 856, 861, 863, 864, 865], "integr": [0, 4, 5, 6, 7, 8, 9, 28, 30, 37, 46, 49, 68, 70, 71, 91, 93, 94, 167, 307, 370, 387, 402, 541, 647, 649, 833, 838, 840, 842, 843, 859, 877, 879, 884], "check": [0, 4, 5, 6, 7, 20, 21, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 57, 62, 64, 66, 68, 72, 76, 88, 91, 95, 99, 132, 171, 172, 181, 182, 185, 187, 188, 189, 192, 207, 214, 215, 222, 234, 554, 564, 566, 567, 574, 580, 581, 582, 583, 584, 600, 611, 623, 629, 640, 643, 647, 648, 651, 652, 654, 658, 690, 691, 697, 738, 748, 749, 750, 791, 798, 827, 828, 833, 834, 835, 838, 839, 840, 841, 842, 844, 848, 849, 851, 852, 854, 859, 861, 862, 863, 864, 865, 866, 867, 870, 873, 880], "A": [0, 8, 9, 45, 46, 60, 67, 68, 71, 72, 78, 80, 84, 85, 88, 91, 93, 94, 95, 98, 99, 101, 103, 105, 108, 111, 112, 117, 136, 137, 139, 143, 147, 155, 162, 168, 209, 228, 290, 292, 296, 328, 339, 343, 345, 346, 347, 349, 363, 366, 370, 371, 384, 387, 390, 391, 392, 393, 396, 397, 402, 405, 419, 433, 436, 438, 445, 453, 458, 461, 469, 473, 484, 487, 500, 506, 510, 511, 517, 518, 519, 520, 524, 525, 526, 527, 528, 536, 545, 548, 553, 555, 564, 573, 576, 577, 608, 609, 610, 613, 640, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 660, 664, 665, 676, 680, 688, 690, 693, 698, 699, 703, 704, 716, 719, 722, 724, 728, 730, 738, 741, 743, 745, 746, 747, 748, 749, 753, 754, 755, 756, 758, 759, 760, 761, 763, 769, 779, 787, 788, 791, 793, 794, 796, 797, 798, 799, 804, 811, 828, 832, 833, 838, 839, 840, 843, 848, 850, 851, 854, 857, 858, 862, 863, 865, 870, 872, 873, 874, 875, 879, 880, 882, 884, 885], "critic": [0, 8, 9, 38, 41, 45, 46, 655, 717, 832, 884], "grasp": [0, 862], "imbal": 0, "common": [0, 24, 34, 37, 45, 49, 70, 71, 88, 93, 194, 265, 273, 354, 361, 387, 647, 649, 834, 837, 839, 840, 847, 850, 851, 852, 858, 859, 862, 866, 868, 872, 884], "scenario": [0, 40, 850, 860], "call": [0, 4, 5, 8, 9, 15, 20, 21, 28, 30, 34, 36, 37, 38, 39, 40, 43, 45, 46, 48, 49, 50, 51, 52, 59, 63, 71, 86, 91, 94, 109, 111, 117, 136, 187, 188, 228, 391, 402, 458, 545, 596, 602, 617, 633, 634, 636, 645, 648, 651, 652, 654, 658, 702, 738, 744, 748, 749, 793, 804, 812, 813, 814, 816, 818, 822, 828, 832, 833, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 877, 879, 880, 882, 884, 885], "value_count": 0, "see": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 24, 25, 26, 27, 35, 36, 41, 45, 46, 47, 48, 52, 57, 58, 64, 65, 68, 70, 71, 76, 81, 82, 84, 85, 87, 93, 94, 99, 104, 107, 108, 111, 112, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 148, 152, 159, 162, 169, 188, 195, 238, 243, 245, 247, 248, 249, 250, 255, 256, 260, 262, 266, 267, 274, 275, 278, 280, 282, 284, 285, 288, 291, 293, 297, 304, 306, 309, 310, 315, 316, 318, 343, 350, 351, 382, 384, 387, 391, 392, 393, 441, 469, 508, 643, 646, 647, 649, 654, 661, 662, 664, 665, 685, 697, 700, 703, 710, 711, 765, 769, 770, 771, 772, 780, 781, 782, 783, 784, 785, 786, 787, 788, 808, 833, 834, 837, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 862, 863, 865, 868, 870, 871, 872], "instanc": [0, 8, 9, 27, 34, 40, 45, 46, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 180, 183, 186, 187, 188, 190, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 387, 390, 391, 392, 393, 396, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 427, 428, 429, 433, 434, 436, 437, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 603, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 646, 647, 649, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 804, 809, 818, 832, 839, 840, 841, 844, 845, 846, 850, 852, 853, 854, 855, 857, 858, 859, 860, 861, 865, 874, 876, 880, 885], "typic": [0, 8, 9, 24, 71, 94, 349, 366, 387, 402, 538, 663, 775, 812, 844, 858, 886], "repres": [0, 67, 70, 71, 75, 76, 93, 94, 98, 99, 114, 139, 143, 154, 156, 179, 237, 238, 241, 244, 253, 255, 262, 288, 301, 305, 306, 331, 345, 346, 347, 364, 381, 384, 387, 389, 390, 391, 392, 393, 396, 397, 400, 433, 437, 451, 465, 467, 472, 499, 511, 517, 518, 519, 524, 530, 537, 573, 645, 646, 647, 649, 651, 653, 654, 676, 677, 678, 692, 699, 702, 703, 798, 811, 815, 828, 840, 845, 850, 868, 885], "ones": [0, 8, 9, 24, 34, 41, 45, 57, 63, 67, 71, 73, 75, 80, 88, 90, 94, 98, 103, 147, 151, 156, 158, 164, 214, 215, 251, 328, 384, 402, 547, 631, 646, 648, 649, 652, 653, 655, 671, 672, 716, 759, 760, 761, 797, 839, 845, 849, 852, 857, 858, 864, 865, 884], "how": [0, 4, 5, 6, 7, 8, 9, 12, 13, 20, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 60, 63, 64, 65, 70, 71, 87, 93, 94, 114, 124, 125, 126, 127, 128, 129, 130, 131, 132, 255, 288, 306, 310, 315, 316, 318, 382, 392, 393, 467, 482, 508, 509, 643, 649, 808, 811, 812, 813, 814, 834, 835, 837, 838, 840, 841, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 859, 860, 861, 862, 863, 866, 867, 868, 869, 870, 871, 872, 876, 877, 883, 884], "approach": [0, 50, 837, 839, 840, 841, 845, 848, 850, 851, 855, 858, 862, 865, 866, 868, 872, 886], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 8, 9, 16, 17, 20, 21, 24, 45, 46, 57, 59, 60, 61, 71, 76, 82, 86, 94, 99, 105, 109, 262, 390, 391, 393, 438, 444, 453, 510, 514, 551, 552, 649, 651, 654, 662, 689, 690, 701, 702, 704, 705, 709, 769, 770, 771, 793, 797, 804, 814, 822, 823, 825, 826, 832, 839, 840, 841, 846, 847, 848, 849, 852, 853, 854, 857, 862, 863, 865, 866, 867, 868, 870, 876, 884], "highli": [0, 60, 839, 884], "imbalanc": 0, "normal": [0, 2, 4, 5, 8, 9, 10, 11, 16, 17, 22, 23, 24, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 71, 79, 80, 94, 102, 103, 111, 112, 374, 387, 390, 396, 402, 412, 413, 418, 419, 422, 423, 424, 434, 435, 517, 518, 519, 520, 521, 522, 523, 538, 541, 656, 659, 660, 720, 730, 757, 758, 760, 811, 812, 815, 818, 833, 839, 861, 862, 868, 880, 882], "unifi": [0, 34, 36, 37, 45, 48, 49, 53, 60, 88, 228, 648, 842, 843, 844, 845, 849, 850, 854, 859, 860, 862, 868, 870, 872, 884], "write": [0, 24, 45, 46, 57, 61, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 167, 169, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 344, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 373, 374, 375, 382, 384, 387, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 432, 434, 435, 438, 439, 441, 442, 450, 451, 453, 456, 457, 458, 459, 465, 468, 469, 470, 471, 473, 474, 483, 484, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 557, 561, 562, 563, 568, 569, 578, 592, 593, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 757, 758, 759, 760, 761, 763, 765, 766, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 794, 833, 838, 839, 841, 843, 844, 846, 847, 849, 850, 852, 853, 854, 858, 861, 863, 866, 870, 884], "code": [0, 1, 6, 7, 8, 9, 20, 21, 22, 23, 24, 25, 26, 32, 33, 40, 41, 45, 47, 48, 49, 50, 51, 52, 59, 60, 69, 70, 92, 93, 229, 275, 402, 545, 554, 562, 563, 578, 592, 596, 611, 648, 651, 653, 654, 656, 675, 696, 697, 698, 730, 832, 836, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 863, 865, 868, 870, 871, 872, 874, 876, 878, 879, 880, 882, 883, 884, 885, 886], "agnost": [0, 34, 35, 45, 46, 47, 51, 57, 845, 850, 857, 870, 872], "underli": [0, 34, 45, 46, 57, 71, 78, 94, 101, 114, 245, 248, 250, 285, 392, 393, 472, 489, 649, 654, 656, 702, 726, 848, 861, 868, 880, 884], "deep": [0, 8, 9, 24, 34, 41, 45, 57, 88, 561, 651, 833, 834, 835, 838, 839, 841, 844, 847, 848, 850, 856, 860, 863, 869, 884, 886], "develop": [0, 8, 9, 10, 11, 24, 28, 42, 45, 46, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 847, 849, 855, 864, 866, 872, 874, 876, 877, 879, 880, 884, 885, 886], "ar": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 62, 63, 66, 67, 70, 71, 72, 75, 76, 78, 80, 81, 82, 88, 90, 93, 94, 95, 98, 99, 101, 103, 104, 105, 111, 112, 116, 117, 140, 151, 153, 156, 162, 216, 221, 223, 228, 252, 254, 255, 258, 262, 283, 284, 288, 293, 294, 298, 300, 305, 306, 307, 343, 345, 346, 347, 349, 352, 354, 355, 356, 360, 361, 366, 371, 374, 378, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 402, 406, 407, 413, 414, 415, 416, 419, 424, 426, 434, 435, 444, 445, 449, 459, 460, 462, 466, 467, 468, 472, 473, 477, 478, 479, 489, 490, 491, 493, 499, 503, 507, 508, 517, 519, 524, 525, 526, 527, 528, 538, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 564, 570, 575, 579, 590, 591, 600, 611, 623, 633, 646, 648, 649, 651, 652, 653, 654, 656, 658, 660, 661, 662, 676, 677, 678, 680, 683, 685, 689, 690, 691, 694, 695, 697, 700, 701, 704, 705, 709, 710, 711, 719, 720, 723, 727, 729, 739, 744, 749, 750, 751, 759, 760, 761, 764, 765, 766, 767, 769, 771, 791, 793, 796, 797, 798, 799, 804, 811, 814, 817, 819, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 877, 879, 880, 882, 884, 885], "tensorflow": [0, 3, 14, 15, 16, 17, 18, 19, 25, 26, 28, 32, 33, 34, 35, 38, 39, 40, 41, 45, 46, 47, 50, 51, 52, 57, 63, 70, 71, 72, 93, 94, 162, 209, 224, 239, 343, 384, 391, 445, 611, 646, 648, 651, 791, 804, 818, 822, 833, 837, 838, 839, 840, 841, 844, 849, 850, 851, 855, 857, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 876, 877, 879, 881, 882, 885], "pytorch": [0, 3, 4, 5, 6, 7, 12, 13, 16, 17, 20, 21, 22, 23, 29, 30, 32, 33, 41, 45, 46, 57, 64, 298, 350, 351, 387, 649, 816, 818, 833, 838, 839, 845, 850, 851, 854, 857, 858, 861, 862, 863, 868, 870, 871, 872, 873, 874, 876, 877, 879, 880, 885], "flexibl": [0, 848, 850, 857, 860, 866, 868, 877, 884, 886], "particularli": [0, 841, 872, 880], "research": [0, 8, 9, 45, 46, 59, 833, 876, 877, 879, 884], "where": [0, 1, 20, 21, 24, 36, 40, 48, 49, 53, 61, 67, 70, 71, 72, 76, 78, 80, 81, 84, 85, 88, 90, 93, 94, 95, 99, 101, 103, 104, 107, 108, 111, 112, 143, 150, 151, 154, 156, 162, 243, 253, 255, 258, 260, 262, 263, 272, 277, 278, 279, 286, 287, 288, 293, 295, 299, 301, 305, 315, 317, 343, 345, 346, 347, 362, 366, 373, 382, 384, 387, 390, 391, 392, 393, 396, 397, 402, 404, 405, 406, 407, 413, 418, 419, 423, 438, 444, 445, 449, 450, 452, 453, 460, 466, 467, 468, 477, 478, 479, 493, 499, 500, 517, 518, 519, 522, 524, 525, 527, 528, 538, 546, 547, 548, 578, 592, 630, 646, 649, 651, 653, 654, 656, 658, 660, 661, 664, 665, 678, 680, 685, 689, 690, 695, 697, 699, 700, 701, 704, 705, 708, 710, 719, 721, 722, 724, 730, 734, 742, 749, 758, 759, 760, 761, 766, 767, 782, 784, 786, 787, 788, 796, 811, 815, 828, 832, 833, 834, 837, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 853, 854, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 873, 880], "abil": [0, 840, 868, 872, 877, 884], "switch": [0, 45, 57, 804, 846, 854, 858, 859, 876], "differ": [0, 4, 5, 6, 7, 8, 9, 16, 17, 20, 21, 24, 25, 26, 27, 28, 32, 33, 37, 38, 39, 45, 46, 49, 50, 51, 52, 70, 71, 72, 76, 84, 88, 94, 95, 107, 116, 117, 126, 129, 180, 238, 255, 262, 263, 288, 304, 349, 356, 361, 362, 366, 387, 390, 391, 393, 402, 424, 435, 460, 466, 483, 490, 491, 506, 539, 540, 548, 568, 569, 643, 647, 649, 651, 653, 654, 656, 664, 676, 677, 692, 702, 720, 730, 777, 778, 783, 785, 786, 791, 796, 804, 813, 814, 833, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 877, 879, 880, 882, 884, 886], "without": [0, 1, 4, 5, 27, 48, 57, 61, 64, 82, 88, 114, 602, 617, 651, 656, 658, 662, 726, 739, 769, 770, 771, 772, 796, 799, 827, 840, 841, 845, 846, 848, 849, 850, 851, 852, 854, 857, 858, 862, 865, 866, 868, 872, 877, 880, 884, 885], "chang": [0, 4, 5, 6, 7, 27, 34, 46, 59, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 387, 390, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 643, 649, 656, 658, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 704, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 750, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 793, 833, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 852, 853, 855, 856, 862, 863, 864, 865, 866, 867, 868, 870, 872, 873, 880], "codebas": [0, 8, 9, 24, 45, 46, 226, 227, 648, 834, 836, 843, 850, 856, 861, 862, 864, 865, 866, 876, 877, 886], "signific": [0, 27, 71, 392, 472, 867, 872, 876, 884], "advantag": [0, 8, 9, 24, 41, 44, 45, 46, 833, 840, 841, 850, 861, 862, 873, 879, 884], "effect": [0, 8, 9, 24, 51, 67, 71, 73, 84, 94, 96, 107, 154, 392, 426, 471, 631, 639, 646, 652, 653, 664, 680, 784, 786, 796, 799, 839, 845, 848, 849, 853, 857, 861, 863, 868, 872], "analyz": [0, 839, 874], "done": [0, 5, 59, 61, 64, 654, 691, 838, 839, 840, 841, 844, 847, 849, 851, 852, 855, 856, 861, 862, 865, 879, 880, 884], "two": [0, 37, 49, 51, 57, 67, 71, 76, 82, 94, 95, 99, 116, 117, 137, 140, 147, 154, 160, 161, 162, 193, 201, 249, 263, 264, 298, 343, 344, 349, 362, 363, 365, 366, 368, 370, 377, 384, 387, 390, 391, 392, 393, 402, 419, 442, 443, 444, 453, 458, 467, 469, 473, 478, 499, 506, 510, 538, 548, 553, 645, 646, 647, 649, 651, 653, 654, 655, 656, 662, 678, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 710, 716, 731, 769, 770, 771, 772, 796, 798, 804, 812, 839, 840, 844, 845, 850, 851, 852, 853, 858, 862, 863, 865, 868, 870], "distinct": [0, 71, 82, 94, 345, 346, 347, 384, 662, 769, 770, 771, 772, 836, 840, 848, 853, 860, 861, 862, 884], "one": [0, 4, 5, 8, 9, 15, 20, 21, 24, 25, 26, 28, 30, 36, 37, 40, 41, 45, 46, 48, 49, 61, 62, 63, 67, 71, 72, 75, 76, 78, 81, 82, 84, 88, 90, 93, 94, 95, 96, 98, 99, 101, 102, 104, 105, 106, 107, 111, 140, 144, 154, 156, 157, 158, 168, 170, 228, 249, 255, 262, 263, 280, 286, 287, 288, 307, 317, 327, 330, 331, 349, 355, 358, 359, 362, 363, 366, 367, 368, 370, 371, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 402, 412, 414, 418, 419, 422, 423, 426, 434, 439, 441, 450, 459, 473, 477, 478, 479, 483, 489, 490, 491, 496, 498, 504, 507, 517, 518, 519, 524, 529, 539, 540, 543, 544, 545, 546, 547, 548, 550, 588, 592, 593, 595, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 646, 647, 648, 649, 651, 652, 653, 654, 656, 659, 661, 662, 664, 667, 668, 669, 670, 671, 672, 675, 692, 694, 695, 699, 701, 710, 711, 722, 723, 724, 727, 729, 733, 757, 764, 767, 769, 770, 771, 772, 777, 779, 796, 798, 815, 819, 822, 828, 831, 833, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 867, 868, 870, 872, 874, 879, 881, 884, 885], "anoth": [0, 4, 5, 15, 34, 36, 37, 40, 41, 45, 46, 48, 49, 61, 62, 148, 168, 170, 646, 647, 833, 839, 840, 841, 846, 848, 850, 851, 854, 856, 858, 861, 862, 865, 870, 871, 874, 878, 879, 880, 881, 884], "characterist": [0, 847], "clear": [0, 27, 210, 648, 839, 841, 846, 850, 851, 852, 862, 868, 870, 876, 884], "print": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 34, 35, 37, 41, 45, 46, 47, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 124, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 167, 168, 169, 170, 172, 178, 179, 180, 181, 182, 185, 187, 188, 190, 195, 207, 208, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 324, 325, 326, 328, 335, 336, 343, 345, 349, 350, 351, 353, 368, 369, 374, 378, 382, 384, 387, 390, 391, 392, 393, 396, 402, 409, 410, 411, 412, 414, 415, 417, 419, 422, 424, 427, 428, 429, 432, 434, 435, 440, 443, 445, 447, 448, 458, 465, 468, 469, 470, 471, 472, 473, 474, 480, 482, 484, 495, 499, 500, 505, 506, 508, 509, 510, 512, 516, 520, 521, 523, 538, 539, 540, 541, 548, 550, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 588, 589, 591, 592, 593, 597, 598, 599, 602, 605, 606, 607, 608, 609, 611, 613, 615, 616, 617, 621, 622, 625, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 713, 714, 715, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 822, 827, 828, 832, 840, 841, 848, 850, 852, 863, 865, 867, 870, 871, 880, 882], "shape": [0, 4, 5, 6, 7, 12, 13, 16, 17, 19, 24, 27, 28, 30, 36, 37, 38, 39, 43, 44, 45, 46, 51, 57, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 115, 116, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 223, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 338, 339, 340, 341, 342, 343, 344, 350, 351, 352, 353, 354, 356, 358, 359, 361, 363, 365, 367, 368, 369, 370, 374, 375, 377, 382, 384, 387, 390, 391, 392, 393, 396, 397, 398, 400, 402, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 432, 434, 435, 436, 439, 440, 441, 442, 444, 445, 446, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 480, 482, 484, 487, 492, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 556, 557, 561, 562, 563, 565, 568, 569, 572, 578, 585, 592, 593, 603, 612, 614, 626, 630, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 773, 774, 776, 777, 778, 779, 781, 783, 784, 786, 787, 788, 793, 796, 798, 811, 812, 815, 827, 832, 833, 841, 842, 848, 850, 851, 852, 853, 854, 855, 857, 861, 862, 863, 865, 866, 867, 870, 879, 880], "gain": [0, 27, 811, 841, 842, 844, 869, 876, 884], "descript": [0, 1, 2, 54, 55, 56, 61, 64, 67, 70, 71, 76, 93, 94, 99, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 344, 350, 351, 353, 356, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 499, 508, 512, 538, 541, 568, 572, 574, 576, 607, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 839, 841, 853, 860, 861], "describ": [0, 10, 11, 71, 84, 94, 112, 238, 255, 256, 288, 291, 293, 392, 397, 400, 472, 528, 531, 649, 653, 664, 680, 779, 783, 785, 835, 836, 839, 840, 841, 847, 849, 861, 862, 865, 870, 884], "obtain": [0, 45, 46, 64, 71, 94, 334, 384, 390, 430, 653, 680, 798, 862, 880], "mean": [0, 4, 5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 71, 72, 75, 77, 78, 80, 84, 86, 88, 90, 94, 95, 98, 100, 101, 103, 107, 109, 111, 149, 228, 345, 355, 384, 387, 390, 391, 392, 393, 396, 397, 402, 419, 424, 442, 455, 467, 468, 469, 470, 471, 472, 473, 474, 484, 489, 499, 517, 519, 525, 544, 545, 562, 633, 634, 636, 642, 646, 648, 651, 652, 653, 654, 655, 656, 657, 658, 660, 664, 668, 670, 671, 672, 674, 675, 676, 687, 713, 714, 715, 726, 735, 736, 737, 744, 759, 760, 796, 798, 799, 811, 812, 815, 833, 840, 841, 843, 844, 846, 848, 850, 851, 852, 858, 860, 861, 862, 865, 866, 868, 870, 871, 872, 874, 876, 879, 882, 884], "deviat": [0, 79, 80, 84, 102, 103, 107, 659, 660, 664, 757, 760, 784, 798, 811, 815, 844], "minimum": [0, 59, 70, 71, 72, 78, 81, 84, 93, 94, 95, 101, 104, 107, 235, 263, 290, 314, 346, 350, 351, 361, 382, 384, 387, 393, 402, 499, 536, 540, 546, 598, 599, 608, 609, 621, 622, 649, 651, 656, 661, 664, 719, 765, 780, 782, 796, 798, 799, 804, 850, 867], "maximum": [0, 70, 71, 72, 73, 78, 81, 84, 88, 93, 94, 95, 96, 101, 104, 107, 117, 228, 314, 350, 351, 362, 375, 382, 387, 390, 391, 393, 402, 406, 407, 417, 460, 463, 466, 499, 500, 539, 541, 546, 556, 557, 565, 573, 637, 648, 649, 651, 652, 654, 656, 661, 664, 695, 719, 764, 765, 780, 782, 796, 798, 799, 804, 828, 841, 850, 852, 861], "quartil": 0, "overview": [0, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 847, 849, 863, 865, 882], "instrument": 0, "unusu": 0, "might": [0, 8, 9, 10, 11, 22, 23, 24, 51, 72, 112, 194, 560, 647, 651, 837, 839, 840, 841, 849, 850, 852, 855, 856, 859, 862, 865, 866, 868, 870, 874], "indic": [0, 4, 5, 22, 23, 67, 71, 72, 75, 76, 78, 79, 81, 82, 83, 88, 90, 91, 94, 95, 98, 99, 101, 102, 104, 105, 106, 111, 114, 141, 142, 156, 160, 162, 183, 187, 188, 299, 343, 344, 345, 364, 384, 387, 390, 391, 392, 393, 398, 400, 409, 410, 411, 413, 417, 418, 419, 423, 424, 427, 428, 429, 430, 434, 435, 445, 466, 469, 477, 478, 479, 482, 485, 487, 489, 490, 491, 494, 498, 505, 506, 508, 509, 510, 512, 514, 515, 529, 530, 531, 553, 568, 569, 571, 592, 593, 597, 630, 633, 634, 640, 646, 649, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 667, 669, 670, 671, 672, 675, 680, 697, 711, 722, 723, 724, 726, 727, 728, 729, 731, 733, 738, 741, 743, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 764, 765, 766, 767, 769, 771, 773, 775, 776, 793, 794, 796, 798, 812, 819, 827, 828, 830, 840, 849, 857, 860, 862, 870, 871, 880], "000000": 0, "291022": 0, "std": [0, 4, 5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 52, 60, 75, 80, 84, 98, 103, 107, 397, 525, 653, 660, 664, 668, 670, 671, 672, 674, 675, 759, 760, 852, 882], "250": 0, "105092": 0, "min": [0, 57, 61, 68, 71, 72, 76, 84, 91, 94, 95, 99, 107, 160, 162, 180, 183, 287, 343, 346, 351, 384, 387, 391, 393, 445, 505, 546, 562, 592, 593, 608, 646, 647, 649, 651, 654, 664, 695, 701, 704, 705, 711], "650000": 0, "75": [0, 4, 5, 10, 11, 12, 13, 24, 57, 70, 71, 93, 94, 95, 98, 103, 133, 143, 152, 241, 243, 255, 257, 268, 330, 363, 364, 384, 387, 433, 548, 563, 576, 608, 643, 646, 649, 651, 654, 658, 660, 667, 693, 699, 746, 761], "050000": 0, "max": [0, 57, 59, 68, 71, 72, 76, 84, 91, 94, 95, 99, 107, 180, 183, 286, 350, 387, 390, 391, 392, 393, 409, 410, 411, 427, 428, 429, 430, 432, 434, 445, 467, 505, 507, 508, 556, 557, 562, 578, 592, 593, 647, 649, 651, 654, 664, 695, 697, 700, 796, 812, 816, 849, 862], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 865], "receiv": [0, 5, 8, 9, 59, 63, 111, 552, 588, 651, 657, 735, 736, 737, 812, 832, 836, 840, 841, 850, 851, 865, 868], "anomali": 0, "financi": 0, "behavior": [0, 4, 5, 12, 13, 71, 82, 255, 262, 288, 297, 403, 549, 596, 620, 649, 651, 662, 769, 770, 771, 772, 839, 847, 848, 849, 850, 861, 862, 863, 865, 868, 870, 872], "associ": [0, 22, 23, 71, 76, 94, 99, 238, 288, 393, 402, 476, 541, 649, 654, 697, 700, 712, 793, 841, 850, 858, 859, 862, 863, 865, 872], "122": [0, 25, 26, 68, 183, 253, 649], "211321": 0, "256": [0, 4, 5, 12, 13, 22, 23, 24, 70, 95, 298, 299, 609, 653, 668, 670, 796], "683288": 0, "250000": 0, "105": [0, 24, 76, 98, 653, 654, 676, 677, 692, 699], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 8, 9, 10, 11, 59, 61, 71, 73, 77, 94, 96, 100, 390, 392, 396, 402, 404, 405, 409, 410, 411, 469, 470, 471, 472, 473, 474, 522, 538, 631, 632, 637, 652, 653, 655, 657, 680, 713, 735, 736, 811, 812], "across": [0, 1, 22, 23, 25, 26, 27, 38, 40, 41, 57, 71, 81, 88, 94, 95, 104, 116, 226, 227, 255, 262, 288, 306, 392, 396, 467, 519, 522, 553, 574, 610, 648, 649, 651, 653, 658, 661, 676, 680, 744, 764, 765, 812, 839, 844, 850, 852, 854, 857, 858, 860, 865, 868, 877, 884, 886], "all": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 38, 40, 41, 42, 45, 46, 47, 48, 50, 51, 52, 53, 58, 59, 61, 62, 64, 66, 67, 71, 72, 75, 76, 78, 80, 85, 86, 88, 89, 90, 93, 94, 95, 98, 99, 101, 103, 108, 109, 111, 112, 140, 149, 156, 160, 161, 162, 216, 223, 255, 259, 287, 288, 343, 344, 356, 375, 384, 387, 390, 391, 392, 393, 402, 424, 433, 435, 436, 437, 445, 450, 460, 461, 463, 466, 467, 488, 499, 500, 508, 514, 544, 550, 553, 570, 590, 591, 608, 615, 616, 630, 633, 646, 648, 649, 651, 652, 653, 654, 656, 657, 658, 660, 661, 665, 676, 679, 680, 685, 697, 702, 703, 706, 711, 723, 727, 729, 735, 736, 737, 738, 739, 740, 749, 750, 751, 752, 758, 761, 766, 791, 793, 796, 797, 798, 799, 811, 812, 818, 819, 822, 828, 830, 832, 833, 834, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 879, 880, 881, 884, 885, 886], "group": [0, 8, 9, 24, 71, 94, 393, 396, 514, 518, 653, 658, 666, 673, 674, 740, 832, 842, 844, 848, 850, 858, 862, 863], "calcul": [0, 4, 5, 27, 59, 70, 71, 72, 77, 84, 88, 93, 94, 95, 99, 100, 107, 117, 235, 236, 237, 238, 239, 240, 241, 242, 243, 252, 253, 255, 258, 259, 260, 276, 277, 278, 279, 280, 281, 286, 287, 288, 293, 300, 301, 302, 304, 305, 306, 312, 322, 350, 351, 364, 374, 387, 390, 391, 392, 393, 396, 402, 409, 410, 411, 445, 467, 472, 499, 517, 519, 545, 585, 649, 651, 654, 655, 664, 691, 699, 702, 713, 714, 715, 716, 780, 781, 782, 783, 784, 785, 786, 796, 798, 811, 812, 815, 839, 853, 870, 880], "pictur": [0, 61, 833, 839, 870, 876], "vital": 0, "select": [0, 34, 45, 50, 63, 71, 84, 94, 107, 391, 393, 402, 445, 458, 508, 509, 512, 539, 540, 664, 777, 778, 839, 840, 841, 849, 855, 861, 865, 870, 871, 872, 877, 884], "guid": [0, 28, 41, 833, 834, 839, 840, 841, 847, 856, 862, 864], "recogn": [0, 61, 836, 842], "both": [0, 8, 9, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 30, 38, 40, 43, 45, 46, 50, 51, 58, 60, 67, 70, 71, 72, 75, 76, 90, 93, 94, 95, 98, 99, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 170, 186, 190, 193, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 344, 350, 351, 353, 354, 356, 361, 366, 384, 387, 390, 391, 393, 397, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 493, 499, 508, 511, 512, 524, 538, 541, 568, 572, 574, 576, 585, 607, 616, 641, 642, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 812, 818, 833, 837, 839, 841, 846, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 861, 862, 865, 868, 870, 872, 879, 880, 884, 886], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 61], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 7, 8, 9, 15, 24, 28, 30, 32, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 64, 69, 71, 72, 78, 92, 94, 95, 101, 111, 112, 222, 229, 230, 234, 238, 255, 256, 262, 270, 271, 288, 291, 297, 299, 390, 393, 396, 414, 415, 416, 436, 477, 478, 479, 485, 487, 489, 490, 491, 492, 494, 498, 505, 506, 515, 517, 519, 551, 571, 578, 596, 648, 649, 651, 654, 656, 660, 702, 722, 723, 724, 726, 728, 729, 731, 733, 761, 839, 840, 841, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 867, 868, 870, 872, 879, 880, 882, 883, 884, 885, 886], "outnumb": 0, "address": [0, 45, 46, 71, 72, 94, 393, 508, 615, 651, 839, 841, 844, 845, 857, 864, 876, 883, 884, 886], "fair": 0, "dure": [0, 20, 21, 24, 25, 26, 36, 38, 45, 48, 50, 51, 69, 73, 84, 88, 92, 96, 107, 229, 390, 414, 415, 416, 596, 617, 631, 632, 637, 648, 651, 652, 653, 654, 657, 664, 676, 694, 735, 736, 737, 784, 786, 804, 815, 816, 832, 840, 848, 850, 851, 854, 858, 859, 861, 862, 863, 864, 865, 868, 872, 880, 884, 885], "similar": [0, 1, 8, 9, 24, 34, 45, 46, 71, 297, 392, 467, 649, 653, 655, 680, 716, 812, 818, 837, 839, 840, 848, 849, 850, 851, 854, 855, 856, 858, 859, 860, 862, 863, 865, 866, 872, 879], "here": [0, 2, 4, 5, 8, 9, 10, 11, 16, 17, 24, 27, 29, 31, 34, 39, 42, 43, 44, 45, 46, 57, 59, 60, 61, 62, 64, 94, 298, 474, 649, 833, 837, 838, 839, 840, 841, 844, 846, 847, 848, 849, 850, 852, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 870, 871, 872, 879, 880, 882, 884, 885], "take": [0, 4, 5, 8, 9, 22, 23, 24, 34, 41, 43, 44, 45, 46, 51, 57, 59, 62, 71, 76, 78, 84, 94, 101, 111, 136, 137, 139, 156, 295, 302, 317, 382, 390, 391, 393, 410, 418, 423, 428, 438, 447, 461, 482, 489, 509, 539, 540, 645, 646, 649, 653, 654, 656, 657, 680, 694, 698, 726, 737, 777, 796, 804, 811, 812, 827, 832, 833, 834, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 865, 868, 870, 871, 872, 873, 879, 880], "random": [0, 8, 9, 16, 17, 20, 21, 24, 25, 26, 28, 30, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 59, 61, 62, 71, 75, 88, 94, 98, 338, 339, 340, 341, 342, 384, 391, 392, 449, 460, 466, 472, 524, 525, 526, 527, 528, 653, 676, 758, 759, 760, 761, 762, 763, 796, 798, 811, 818, 827, 828, 833, 839, 851, 863, 865, 866, 879, 882, 884], "match": [0, 1, 68, 71, 88, 91, 94, 167, 262, 297, 354, 356, 387, 390, 392, 393, 435, 467, 482, 500, 505, 509, 588, 647, 649, 651, 654, 690, 691, 695, 711, 791, 837, 839, 845, 847, 848, 852, 855, 863, 885], "prevent": [0, 71, 73, 84, 94, 96, 107, 392, 472, 573, 631, 632, 637, 651, 652, 653, 664, 676, 781, 785, 811, 816, 839, 841, 849, 850, 854, 861, 862, 866], "being": [0, 8, 9, 10, 11, 16, 17, 24, 45, 46, 57, 71, 88, 94, 109, 116, 120, 140, 391, 393, 455, 483, 499, 602, 646, 651, 653, 654, 678, 691, 793, 799, 811, 840, 841, 844, 845, 846, 848, 850, 851, 852, 855, 857, 859, 861, 862, 863, 865, 866, 868, 870, 872, 875, 877, 884, 885, 886], "bias": [0, 653, 678], "toward": [0, 71, 78, 94, 101, 262, 309, 360, 372, 387, 393, 402, 506, 541, 649, 656, 727, 833, 837, 839, 840, 855, 871, 884], "legit_sampl": 0, "n": [0, 27, 57, 60, 61, 62, 64, 67, 70, 71, 75, 76, 78, 80, 81, 84, 85, 93, 94, 98, 99, 101, 103, 104, 107, 108, 111, 116, 154, 160, 161, 162, 235, 305, 307, 343, 344, 356, 384, 387, 390, 391, 392, 393, 396, 397, 400, 402, 404, 405, 406, 407, 412, 413, 418, 419, 422, 423, 424, 432, 433, 434, 435, 437, 445, 446, 453, 457, 459, 461, 466, 467, 479, 485, 488, 492, 494, 506, 515, 517, 518, 519, 522, 524, 525, 526, 527, 528, 531, 538, 548, 646, 649, 653, 654, 656, 658, 660, 661, 664, 665, 666, 667, 668, 669, 671, 673, 675, 680, 685, 688, 692, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 708, 709, 710, 711, 721, 722, 724, 730, 734, 746, 759, 760, 761, 767, 781, 783, 784, 785, 786, 787, 788, 812, 815, 827, 843, 847, 849, 865, 879], "after": [0, 4, 5, 6, 7, 12, 13, 16, 17, 20, 21, 22, 23, 24, 25, 26, 45, 46, 60, 71, 72, 73, 75, 79, 88, 94, 95, 96, 98, 102, 201, 302, 319, 323, 372, 382, 387, 390, 391, 393, 413, 414, 415, 416, 433, 437, 458, 488, 499, 578, 632, 635, 637, 638, 639, 647, 649, 651, 652, 653, 658, 659, 666, 667, 668, 669, 671, 673, 675, 676, 749, 757, 816, 822, 839, 840, 841, 844, 846, 847, 849, 850, 852, 854, 857, 860, 863, 865, 871, 879, 880, 884], "combin": [0, 27, 51, 71, 88, 94, 117, 143, 390, 402, 424, 435, 538, 566, 567, 646, 651, 654, 685, 694, 841, 845, 848, 849, 850, 852, 854, 858, 865, 870, 877, 884], "them": [0, 3, 4, 5, 20, 21, 25, 26, 28, 30, 32, 45, 46, 51, 391, 461, 555, 591, 651, 796, 812, 818, 835, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 854, 856, 859, 861, 862, 863, 865, 867, 870, 872, 874, 875, 876, 878, 879, 880, 882, 884], "achiev": [0, 20, 21, 25, 26, 27, 45, 834, 836, 842, 849, 850, 858, 859, 865, 868, 870, 874], "concaten": [0, 57, 71, 72, 78, 94, 99, 393, 484, 561, 565, 651, 653, 656, 680, 699, 720, 796, 863, 868, 871], "along": [0, 60, 65, 67, 70, 71, 72, 76, 77, 78, 80, 81, 83, 84, 85, 87, 88, 90, 93, 94, 95, 99, 100, 101, 103, 104, 106, 107, 108, 111, 112, 114, 127, 131, 136, 152, 153, 228, 302, 305, 307, 345, 346, 347, 350, 351, 355, 356, 371, 378, 384, 387, 388, 390, 391, 392, 393, 396, 402, 412, 418, 419, 422, 423, 424, 434, 435, 460, 471, 484, 485, 486, 488, 490, 491, 499, 505, 508, 510, 512, 520, 521, 522, 523, 539, 540, 541, 543, 544, 545, 546, 547, 548, 561, 568, 645, 646, 648, 649, 651, 654, 655, 656, 657, 660, 661, 663, 664, 665, 685, 699, 708, 710, 711, 713, 714, 715, 720, 723, 724, 725, 727, 728, 730, 732, 733, 735, 736, 737, 763, 764, 765, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 812, 839, 842, 843, 852, 861, 864, 866, 868, 870, 884], "axi": [0, 4, 5, 8, 9, 10, 11, 12, 13, 24, 27, 60, 61, 62, 65, 67, 70, 71, 72, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 90, 93, 94, 95, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 127, 131, 152, 153, 156, 228, 302, 307, 350, 351, 355, 356, 364, 371, 387, 390, 392, 393, 396, 400, 402, 412, 413, 419, 422, 424, 434, 435, 471, 476, 484, 485, 486, 489, 490, 491, 494, 499, 505, 506, 508, 509, 510, 512, 514, 515, 520, 521, 523, 531, 536, 539, 540, 541, 543, 544, 545, 546, 547, 548, 561, 568, 630, 643, 646, 648, 649, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 675, 685, 688, 695, 708, 710, 711, 713, 714, 715, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 763, 764, 765, 769, 771, 773, 774, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 798, 808, 812, 813, 819, 848, 850, 852, 854, 857, 858, 861, 862, 865, 868, 870], "result": [0, 1, 4, 5, 12, 13, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 30, 38, 40, 41, 45, 46, 57, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 167, 169, 194, 195, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 447, 448, 450, 451, 455, 456, 457, 458, 459, 461, 465, 468, 469, 470, 471, 473, 474, 476, 483, 484, 487, 489, 490, 491, 492, 493, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 556, 557, 561, 562, 563, 568, 569, 573, 578, 585, 592, 593, 631, 632, 633, 635, 637, 638, 639, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 741, 744, 745, 747, 751, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 798, 804, 819, 828, 832, 837, 839, 841, 844, 845, 847, 848, 849, 850, 852, 853, 855, 857, 858, 860, 861, 862, 863, 865, 866, 870, 871, 872, 879, 880, 882, 885], "new_dataset": 0, "now": [0, 1, 6, 7, 8, 9, 10, 11, 16, 17, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 61, 812, 813, 814, 833, 840, 844, 845, 846, 847, 848, 849, 850, 851, 855, 857, 859, 862, 863, 865, 866, 868, 870, 872, 879, 880, 882, 884], "equal": [0, 6, 7, 67, 68, 70, 71, 72, 76, 77, 78, 80, 82, 83, 84, 88, 91, 93, 94, 95, 99, 100, 101, 103, 106, 112, 116, 117, 147, 149, 150, 151, 157, 158, 167, 247, 249, 253, 258, 260, 269, 270, 291, 293, 298, 301, 302, 306, 345, 346, 347, 349, 366, 384, 387, 390, 391, 393, 396, 402, 413, 434, 461, 485, 494, 508, 512, 515, 520, 521, 523, 541, 550, 553, 630, 646, 647, 649, 651, 654, 655, 656, 660, 661, 662, 663, 664, 688, 696, 697, 700, 702, 708, 713, 719, 721, 726, 728, 734, 761, 767, 769, 770, 771, 772, 773, 776, 781, 783, 784, 785, 786, 804, 811, 812, 847, 848, 850, 852, 854, 863, 865], "unbias": [0, 71, 84, 94, 107, 402, 538, 664, 786], "concat": [0, 12, 13, 57, 62, 72, 78, 88, 101, 228, 565, 648, 651, 656, 734, 863, 868, 870, 880], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 24, 57, 65, 71, 73, 80, 87, 93, 96, 103, 127, 253, 301, 375, 387, 635, 643, 652, 654, 658, 661, 664, 699, 739, 750, 759, 761, 768, 779], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 294, 649], "03": [0, 8, 9, 27, 60, 67, 70, 72, 73, 93, 94, 96, 103, 153, 253, 278, 358, 359, 608, 609, 632, 637, 646, 649, 651, 652, 654, 693, 760], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 796], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 25, 26, 38, 40, 41], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 27, 36, 57, 70, 71, 84, 91, 93, 94, 103, 183, 237, 253, 301, 337, 384, 422, 647, 649, 654, 658, 664, 706, 746, 760, 779], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 6, 7, 27, 57, 70, 80, 91, 93, 94, 103, 117, 183, 250, 647, 654, 664, 706, 760, 761, 785], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 70, 98, 243, 653, 676, 677], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 5, 15, 20, 21, 25, 26, 27, 36, 37, 41, 45, 46, 57, 59, 60, 65, 80, 87, 96, 103, 132, 249, 390, 412, 422, 631, 635, 643, 649, 652, 654, 659, 660, 664, 695, 699, 757, 758, 759, 760, 761, 762, 779, 833, 870, 879], "53": [0, 18, 27, 38, 57, 76, 80, 93, 98, 174, 230, 260, 433, 634, 636, 647, 648, 652, 654, 659, 692, 757, 761], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 16, 17, 20, 21, 25, 26, 28, 30, 40, 43, 45, 46, 51, 57, 58, 67, 71, 72, 94, 95, 111, 139, 152, 153, 337, 384, 390, 435, 565, 645, 646, 651, 653, 678, 679, 680, 828, 839, 841, 842, 844, 845, 847, 849, 850, 852, 853, 858, 860, 861, 862, 864, 868, 879, 880], "predictor": [0, 872], "label": [0, 8, 9, 10, 11, 24, 27, 59, 60, 61, 71, 77, 94, 100, 392, 467, 468, 470, 471, 472, 473, 474, 655, 713, 714, 715, 833, 839, 844, 862, 873, 884], "whether": [0, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 112, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 139, 141, 142, 149, 151, 156, 158, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 195, 207, 211, 212, 214, 215, 217, 219, 222, 223, 225, 228, 229, 231, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 344, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 384, 387, 390, 391, 392, 393, 402, 409, 410, 411, 413, 414, 415, 416, 432, 434, 436, 438, 453, 455, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 484, 485, 487, 489, 490, 491, 494, 498, 506, 508, 509, 510, 512, 515, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 588, 592, 593, 594, 595, 597, 600, 601, 603, 604, 606, 607, 608, 609, 611, 613, 615, 616, 623, 624, 627, 629, 632, 633, 635, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 664, 665, 667, 668, 669, 670, 676, 677, 678, 679, 680, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 703, 708, 713, 714, 715, 719, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 744, 745, 746, 748, 749, 750, 751, 755, 756, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 791, 793, 796, 808, 809, 812, 813, 814, 815, 816, 827, 833, 834, 839, 840, 845, 848, 850, 852, 857, 861, 862, 865, 867, 868, 876, 879, 880, 881], "x": [0, 4, 5, 12, 13, 16, 17, 18, 19, 24, 27, 28, 30, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 187, 188, 190, 195, 211, 212, 214, 216, 221, 222, 223, 227, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 343, 344, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 400, 401, 402, 403, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 441, 442, 444, 446, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 480, 481, 483, 484, 486, 487, 489, 492, 495, 496, 497, 498, 499, 501, 502, 503, 504, 507, 508, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 574, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 597, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 629, 630, 632, 633, 634, 636, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 711, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 741, 744, 745, 746, 747, 748, 749, 750, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 812, 815, 818, 819, 822, 825, 827, 832, 833, 837, 839, 843, 845, 846, 848, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 879, 880, 882], "y": [0, 27, 45, 46, 57, 58, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 164, 167, 168, 169, 178, 180, 183, 195, 208, 212, 216, 221, 222, 223, 227, 229, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 349, 350, 351, 357, 365, 366, 367, 368, 369, 374, 376, 378, 382, 384, 387, 390, 391, 392, 393, 396, 402, 410, 412, 414, 415, 419, 422, 424, 428, 434, 441, 445, 451, 458, 465, 467, 468, 470, 471, 472, 473, 474, 484, 486, 495, 499, 500, 508, 509, 510, 512, 516, 520, 521, 523, 531, 537, 538, 539, 540, 541, 544, 546, 547, 548, 550, 553, 556, 557, 560, 561, 563, 564, 565, 568, 569, 570, 574, 576, 577, 578, 580, 581, 584, 585, 590, 597, 598, 599, 602, 605, 606, 608, 609, 611, 613, 615, 616, 617, 621, 622, 625, 628, 629, 630, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 668, 670, 672, 674, 675, 676, 677, 684, 685, 686, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 708, 710, 711, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 741, 744, 745, 747, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 832, 846, 848, 851, 852, 860, 862, 863, 865, 866, 868, 871, 880], "upcom": 0, "phase": [0, 865, 872, 884], "drop": [0, 27, 61, 71, 94, 346, 384, 392, 393, 471, 509, 811, 812, 840, 872], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 306, 649], "length": [0, 8, 9, 22, 23, 59, 60, 67, 71, 77, 78, 88, 94, 100, 101, 111, 112, 117, 140, 149, 154, 329, 332, 333, 348, 356, 384, 387, 390, 391, 393, 397, 400, 412, 413, 418, 419, 422, 423, 424, 434, 435, 436, 438, 450, 459, 499, 500, 509, 526, 531, 630, 646, 651, 653, 654, 655, 656, 662, 680, 704, 705, 713, 726, 769, 796, 812, 865], "valid": [0, 12, 13, 24, 59, 61, 71, 75, 85, 94, 98, 108, 111, 112, 172, 390, 391, 409, 410, 411, 427, 428, 429, 430, 432, 433, 437, 458, 466, 581, 647, 651, 653, 656, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 722, 730, 787, 788, 796, 797, 812, 827, 840, 846, 850, 852, 856, 860, 863, 865, 880, 885], "gener": [0, 1, 10, 11, 12, 13, 24, 32, 36, 41, 45, 46, 48, 51, 59, 61, 63, 64, 67, 70, 71, 75, 80, 86, 90, 93, 94, 98, 103, 109, 112, 140, 152, 153, 162, 170, 255, 258, 268, 269, 284, 288, 297, 327, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 350, 351, 384, 387, 390, 391, 393, 397, 402, 434, 440, 462, 508, 526, 538, 646, 647, 649, 653, 654, 655, 656, 660, 664, 676, 702, 703, 706, 709, 718, 734, 758, 759, 761, 762, 784, 796, 799, 804, 816, 827, 839, 840, 841, 843, 844, 845, 847, 850, 851, 852, 853, 854, 857, 858, 861, 862, 863, 866, 869, 870, 871, 872, 874, 877, 884, 885, 886], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 49, 57, 59, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 180, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 344, 350, 351, 352, 353, 358, 359, 363, 365, 367, 368, 369, 370, 374, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 432, 434, 435, 439, 441, 442, 444, 445, 450, 451, 456, 457, 458, 459, 464, 468, 469, 470, 471, 472, 473, 474, 478, 479, 484, 485, 487, 492, 500, 501, 502, 503, 504, 506, 508, 510, 512, 513, 520, 521, 523, 524, 525, 527, 528, 529, 531, 538, 539, 540, 541, 545, 549, 556, 557, 561, 562, 563, 568, 569, 578, 592, 593, 596, 631, 632, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 880, 882, 884, 886], "stratifi": 0, "paramet": [0, 8, 9, 10, 11, 27, 30, 41, 45, 46, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 592, 593, 596, 597, 598, 599, 602, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 827, 828, 830, 832, 833, 839, 845, 853, 854, 857, 862, 863, 865, 866, 870, 879, 880, 881, 882, 885], "test_siz": [0, 27, 59], "specifi": [0, 24, 40, 41, 45, 46, 50, 51, 52, 63, 65, 67, 68, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 91, 93, 94, 95, 98, 99, 100, 101, 103, 104, 107, 108, 111, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 145, 150, 152, 157, 160, 161, 163, 167, 169, 216, 221, 223, 227, 228, 229, 297, 306, 310, 315, 316, 318, 344, 349, 366, 371, 382, 384, 387, 390, 391, 392, 393, 397, 402, 409, 410, 411, 413, 419, 424, 434, 435, 436, 437, 445, 457, 459, 464, 467, 471, 472, 473, 475, 489, 492, 502, 503, 505, 506, 508, 512, 525, 536, 538, 539, 540, 543, 544, 548, 551, 568, 569, 571, 573, 574, 587, 589, 597, 630, 643, 646, 647, 648, 649, 651, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 678, 680, 683, 685, 687, 688, 690, 691, 695, 703, 706, 708, 709, 710, 711, 713, 714, 715, 719, 720, 721, 722, 723, 727, 729, 730, 733, 734, 742, 743, 745, 746, 753, 754, 755, 756, 759, 760, 761, 763, 764, 765, 767, 770, 771, 772, 773, 777, 778, 779, 781, 783, 785, 787, 788, 796, 799, 808, 812, 813, 814, 828, 832, 840, 843, 847, 850, 851, 857, 858, 859, 861, 862, 863, 865, 870, 879, 880, 882], "reserv": [0, 839], "x_train": [0, 27], "x_test": [0, 27], "y_train": [0, 27, 61], "y_test": [0, 27], "random_st": [0, 27, 391, 449], "With": [0, 4, 5, 8, 9, 24, 36, 48, 57, 65, 67, 68, 70, 71, 72, 73, 75, 76, 78, 81, 84, 90, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 167, 168, 169, 170, 172, 178, 179, 180, 183, 190, 195, 196, 197, 198, 199, 209, 212, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 350, 351, 353, 355, 358, 359, 363, 366, 367, 368, 370, 371, 374, 382, 384, 387, 390, 391, 392, 393, 402, 412, 414, 415, 422, 434, 441, 442, 443, 445, 446, 447, 458, 461, 473, 489, 490, 491, 493, 496, 498, 499, 500, 506, 508, 510, 512, 514, 529, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 554, 555, 556, 557, 560, 561, 562, 563, 564, 568, 569, 572, 574, 576, 577, 578, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 701, 702, 703, 704, 705, 706, 708, 709, 710, 713, 715, 716, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 840, 850, 852, 862, 865, 868, 880, 884], "next": [0, 1, 8, 9, 10, 11, 12, 13, 24, 35, 36, 37, 38, 40, 41, 44, 47, 48, 49, 50, 51, 52, 59, 61, 71, 94, 180, 363, 367, 372, 376, 387, 647, 811, 816, 839, 840, 841, 846, 850, 852, 853, 855, 856, 859, 884], "convers": [0, 70, 71, 94, 254, 294, 594, 604, 651, 813, 814, 833, 839, 871, 872, 874, 876, 877, 886], "becaus": [0, 38, 48, 50, 60, 71, 390, 413, 791, 840, 841, 844, 845, 846, 847, 848, 850, 851, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 868, 870, 872, 884], "own": [0, 8, 9, 10, 11, 18, 24, 28, 30, 34, 45, 46, 51, 833, 840, 844, 849, 850, 853, 854, 861, 862, 866, 870, 872, 874, 876, 884, 886], "confirm": [0, 4, 5, 60, 836, 839], "been": [0, 8, 9, 10, 11, 24, 25, 26, 28, 30, 38, 40, 45, 46, 71, 72, 80, 94, 95, 103, 211, 298, 393, 507, 561, 562, 563, 648, 649, 651, 660, 758, 827, 828, 839, 841, 844, 846, 848, 849, 850, 851, 853, 854, 857, 858, 861, 865, 870, 871, 872, 880, 884], "correctli": [0, 1, 40, 45, 46, 59, 71, 76, 81, 94, 99, 104, 355, 387, 402, 544, 545, 546, 547, 548, 654, 661, 695, 764, 839, 840, 841, 845, 848, 850, 852, 854, 856, 857, 863, 865, 868, 872, 879, 880], "size": [0, 5, 12, 13, 27, 28, 30, 35, 38, 47, 48, 50, 51, 52, 59, 61, 64, 71, 72, 75, 76, 78, 80, 81, 88, 94, 95, 98, 99, 101, 103, 104, 111, 112, 116, 117, 149, 152, 226, 227, 228, 327, 330, 334, 345, 346, 347, 348, 355, 371, 378, 384, 387, 388, 390, 391, 392, 393, 396, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 426, 427, 428, 430, 431, 437, 438, 445, 448, 460, 466, 467, 469, 483, 485, 497, 508, 510, 512, 518, 519, 522, 526, 531, 543, 544, 545, 546, 547, 548, 587, 592, 646, 648, 651, 653, 654, 656, 660, 661, 665, 678, 680, 683, 685, 688, 692, 695, 699, 701, 704, 710, 722, 727, 728, 729, 758, 764, 767, 787, 788, 796, 798, 799, 812, 828, 861, 863, 865, 868, 880, 882], "correct": [0, 20, 21, 28, 30, 39, 51, 57, 59, 61, 84, 107, 201, 391, 462, 647, 656, 664, 719, 784, 786, 793, 796, 837, 839, 841, 843, 848, 849, 850, 851, 854, 855, 857, 858, 861, 863, 865, 879], "787": 0, "197": [0, 70, 243, 649], "success": [0, 24, 654, 664, 708, 783, 785, 836, 840, 849], "prepare_data": [0, 27], "list": [0, 1, 6, 7, 12, 13, 20, 21, 22, 23, 27, 61, 66, 67, 68, 70, 71, 72, 75, 78, 79, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 149, 151, 154, 155, 156, 158, 164, 168, 170, 183, 187, 188, 195, 211, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 364, 365, 366, 372, 373, 374, 376, 377, 378, 387, 390, 391, 393, 400, 409, 410, 411, 413, 414, 415, 416, 427, 428, 429, 430, 434, 436, 440, 445, 449, 452, 459, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 483, 484, 485, 494, 500, 506, 508, 509, 510, 512, 515, 517, 519, 520, 521, 523, 525, 530, 538, 539, 540, 541, 550, 552, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 570, 572, 574, 576, 577, 578, 580, 581, 584, 588, 592, 593, 607, 608, 609, 611, 613, 614, 615, 616, 617, 629, 630, 635, 641, 646, 647, 648, 649, 651, 653, 654, 656, 658, 659, 662, 663, 667, 668, 669, 670, 671, 672, 675, 676, 677, 680, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 706, 708, 713, 714, 715, 719, 720, 723, 726, 727, 728, 729, 730, 733, 734, 738, 739, 740, 741, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 774, 775, 777, 778, 781, 783, 784, 786, 787, 788, 791, 793, 796, 797, 798, 799, 804, 809, 812, 819, 827, 828, 832, 836, 838, 839, 840, 842, 844, 845, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 870, 872, 880, 884, 885], "tupl": [0, 27, 63, 66, 67, 68, 70, 71, 72, 75, 76, 78, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 114, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 141, 142, 149, 151, 155, 156, 158, 162, 164, 168, 169, 170, 181, 182, 183, 187, 188, 194, 195, 201, 211, 214, 215, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 331, 336, 340, 343, 349, 350, 351, 352, 353, 355, 356, 357, 360, 361, 363, 364, 365, 366, 370, 371, 372, 373, 374, 376, 377, 378, 379, 384, 387, 389, 390, 391, 393, 396, 397, 398, 400, 402, 409, 410, 411, 413, 414, 415, 416, 418, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 444, 445, 449, 453, 455, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 483, 484, 494, 499, 500, 506, 508, 509, 510, 512, 514, 517, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 538, 539, 540, 541, 543, 544, 545, 546, 547, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 597, 607, 608, 609, 610, 611, 613, 614, 615, 616, 629, 630, 631, 632, 633, 635, 637, 641, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 697, 699, 700, 701, 702, 704, 706, 707, 708, 711, 713, 714, 715, 719, 720, 721, 723, 724, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 749, 750, 753, 754, 755, 756, 758, 759, 760, 761, 763, 766, 767, 769, 770, 771, 772, 773, 774, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 811, 812, 814, 827, 828, 845, 850, 857, 858, 861, 863, 865, 870, 872, 879, 880, 882], "thei": [0, 1, 27, 52, 57, 62, 71, 76, 80, 82, 88, 99, 103, 105, 193, 307, 361, 387, 647, 649, 653, 654, 657, 660, 662, 678, 709, 735, 736, 758, 769, 791, 817, 838, 839, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 861, 862, 865, 866, 868, 870, 871, 872, 877, 880, 884], "dimension": [0, 67, 70, 71, 76, 78, 81, 84, 85, 88, 90, 93, 94, 99, 101, 107, 108, 116, 140, 147, 149, 154, 162, 307, 343, 350, 351, 384, 387, 390, 391, 393, 402, 418, 419, 423, 424, 434, 435, 442, 477, 478, 479, 483, 488, 489, 536, 548, 646, 649, 654, 656, 661, 664, 665, 685, 686, 692, 694, 697, 699, 700, 710, 711, 728, 764, 765, 767, 780, 781, 782, 783, 784, 785, 786, 787, 788, 858, 860, 865, 868, 870, 884], "reshap": [0, 4, 5, 45, 46, 61, 62, 71, 75, 76, 78, 88, 94, 98, 99, 101, 375, 387, 390, 391, 393, 409, 410, 411, 414, 427, 428, 429, 432, 441, 458, 483, 489, 630, 651, 653, 654, 656, 669, 671, 675, 695, 711, 861, 862, 865, 868, 870], "float32": [0, 4, 5, 12, 13, 22, 23, 27, 28, 30, 35, 36, 57, 59, 60, 61, 67, 68, 71, 72, 75, 90, 91, 94, 95, 98, 107, 153, 156, 158, 164, 165, 166, 170, 174, 175, 178, 179, 180, 181, 184, 187, 188, 190, 195, 198, 204, 254, 268, 295, 348, 361, 384, 387, 390, 391, 392, 402, 412, 422, 435, 461, 467, 472, 541, 578, 615, 646, 647, 649, 651, 653, 654, 657, 669, 671, 672, 675, 702, 704, 705, 711, 736, 737, 793, 796, 797, 833, 850, 852, 863, 865, 866, 879, 882], "def": [0, 4, 5, 12, 13, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 70, 93, 136, 239, 555, 645, 651, 657, 658, 736, 737, 744, 818, 827, 833, 837, 839, 840, 844, 845, 848, 850, 851, 852, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 870, 871, 879, 880, 882], "isinst": [0, 12, 13, 27, 41, 45, 46, 854, 862, 865, 866, 870], "rang": [0, 4, 5, 8, 9, 10, 11, 16, 17, 18, 24, 27, 45, 46, 57, 58, 59, 61, 67, 71, 84, 90, 94, 140, 152, 153, 302, 314, 322, 334, 382, 384, 391, 393, 402, 445, 457, 492, 501, 503, 508, 513, 539, 540, 541, 561, 630, 646, 649, 651, 662, 664, 769, 777, 778, 783, 785, 796, 798, 799, 811, 833, 836, 839, 850, 854, 858, 865, 870, 884], "len": [0, 8, 9, 10, 11, 12, 13, 24, 27, 59, 61, 67, 71, 76, 94, 99, 154, 331, 340, 341, 384, 390, 391, 402, 424, 435, 447, 450, 460, 466, 548, 646, 654, 690, 709, 848, 849, 854, 861, 862, 865, 870, 880], "expand_dim": [0, 8, 9, 27, 40, 45, 46, 61, 63, 78, 101, 653, 656, 675, 833, 862, 870, 879], "astyp": [0, 27, 28, 30, 35, 59, 60, 61, 68, 75, 91, 98, 647, 653, 669, 671, 672, 675, 833, 850, 861, 862, 868, 882], "els": [0, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 24, 27, 60, 61, 63, 64, 71, 72, 80, 93, 94, 103, 173, 174, 175, 176, 177, 189, 295, 299, 390, 391, 397, 436, 449, 460, 464, 466, 525, 560, 564, 647, 649, 651, 653, 658, 660, 679, 748, 751, 759, 760, 761, 791, 827, 828, 839, 840, 841, 844, 846, 850, 851, 854, 858, 861, 862, 863, 865, 866, 868, 870, 872, 885], "return": [0, 4, 5, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 803, 804, 809, 811, 812, 814, 816, 822, 823, 827, 828, 829, 830, 831, 832, 833, 840, 841, 845, 848, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 879, 880, 881, 882, 885], "defin": [0, 35, 41, 44, 45, 46, 47, 67, 71, 72, 76, 90, 94, 95, 99, 114, 130, 156, 160, 161, 162, 238, 255, 262, 288, 289, 297, 299, 302, 315, 319, 323, 329, 332, 333, 334, 343, 344, 345, 346, 347, 350, 351, 353, 382, 384, 387, 390, 391, 393, 402, 426, 443, 499, 506, 541, 576, 577, 597, 643, 646, 649, 651, 653, 654, 664, 678, 685, 690, 691, 703, 780, 781, 782, 784, 839, 840, 845, 846, 849, 850, 853, 857, 860, 862, 863, 865, 866, 872, 874, 882, 884, 885, 886], "proper": [0, 833, 839, 862, 879], "adjust": [0, 59, 84, 107, 391, 462, 664, 784, 786, 822, 832], "comput": [0, 8, 9, 24, 40, 41, 43, 45, 46, 52, 53, 58, 59, 61, 65, 70, 71, 72, 73, 75, 76, 77, 82, 84, 87, 88, 93, 94, 95, 96, 98, 99, 100, 107, 111, 112, 114, 127, 131, 228, 238, 245, 248, 250, 255, 256, 257, 262, 263, 264, 266, 267, 273, 274, 275, 282, 283, 284, 285, 287, 288, 291, 296, 297, 315, 319, 323, 329, 332, 333, 345, 346, 347, 350, 351, 353, 357, 359, 362, 364, 365, 369, 371, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 400, 402, 409, 410, 411, 412, 413, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 438, 439, 441, 443, 444, 445, 446, 448, 449, 451, 453, 456, 458, 460, 463, 464, 466, 468, 469, 470, 471, 472, 473, 474, 493, 496, 510, 517, 519, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 555, 556, 557, 601, 624, 631, 633, 634, 636, 640, 641, 642, 648, 649, 651, 652, 653, 654, 655, 656, 658, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 684, 685, 689, 690, 691, 694, 695, 697, 699, 701, 703, 704, 706, 708, 710, 711, 713, 714, 715, 717, 718, 722, 744, 769, 770, 771, 772, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 793, 798, 812, 815, 828, 833, 840, 848, 849, 850, 858, 860, 862, 865, 867, 868, 870, 871, 872, 874, 876, 877, 879, 880, 883, 884, 885], "most": [0, 5, 8, 9, 15, 27, 34, 45, 46, 88, 90, 111, 114, 156, 391, 444, 601, 624, 646, 651, 654, 689, 690, 831, 833, 838, 839, 840, 845, 848, 849, 850, 851, 855, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 871, 872, 884, 885], "avail": [0, 2, 4, 5, 8, 9, 12, 13, 22, 23, 24, 38, 41, 45, 46, 61, 72, 95, 211, 217, 219, 220, 231, 562, 648, 651, 654, 705, 797, 832, 833, 840, 841, 848, 849, 850, 851, 853, 854, 862, 865, 868, 871, 872, 873, 877, 879, 880, 882], "cpu": [0, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 38, 40, 41, 45, 59, 60, 61, 63, 64, 67, 69, 71, 80, 90, 92, 94, 103, 140, 147, 150, 152, 153, 156, 157, 158, 164, 208, 209, 211, 212, 213, 214, 219, 222, 224, 226, 229, 230, 232, 234, 391, 397, 453, 524, 525, 527, 528, 646, 648, 660, 758, 759, 760, 761, 793, 811, 812, 813, 814, 815, 816, 817, 832, 837, 840, 841, 847, 850, 851, 855, 862, 865, 872, 884], "gpu": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 59, 61, 63, 64, 211, 213, 214, 217, 220, 222, 224, 226, 227, 230, 232, 234, 648, 832, 840, 841, 849, 851, 873, 884], "tpu": [0, 59, 209, 215, 224, 226, 231, 648, 832, 851, 884], "explicitli": [0, 654, 690, 691, 706, 793, 812, 813, 814, 837, 844, 845, 846, 848, 850, 853, 854, 855, 858, 859, 860, 861, 863, 865, 870, 872, 879, 884], "hardwar": [0, 4, 5, 59, 116, 120, 840, 868, 873, 884, 885, 886], "mai": [0, 1, 8, 9, 69, 70, 71, 76, 82, 83, 92, 93, 99, 106, 116, 117, 140, 148, 159, 229, 255, 256, 262, 267, 275, 283, 284, 288, 289, 291, 306, 350, 351, 387, 419, 560, 596, 646, 648, 649, 651, 654, 662, 663, 664, 702, 711, 769, 770, 771, 772, 773, 776, 780, 781, 782, 784, 796, 828, 838, 839, 840, 841, 844, 848, 849, 850, 854, 855, 858, 859, 860, 862, 863, 865, 868, 886], "vari": [0, 71, 82, 111, 112, 306, 393, 419, 500, 561, 649, 651, 654, 662, 701, 770, 771, 772, 828, 848, 852, 862, 865], "known": [0, 71, 94, 299, 391, 463, 465, 649, 811, 844, 849, 850, 862, 865, 877], "advanc": [0, 32, 57, 840, 842, 877, 886], "set_soft_device_mod": [0, 4, 5, 27, 30, 233, 648, 851], "section": [0, 1, 2, 8, 9, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 65, 71, 82, 94, 126, 390, 393, 424, 435, 485, 494, 515, 662, 769, 770, 771, 772, 833, 834, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 882, 883], "binari": [0, 8, 9, 27, 38, 41, 71, 72, 75, 77, 94, 98, 100, 245, 248, 250, 285, 305, 390, 392, 436, 471, 474, 649, 653, 655, 676, 680, 713], "logist": [0, 27], "gblinear": [0, 27], "booster": [0, 27], "linear": [0, 4, 5, 22, 23, 24, 30, 42, 44, 45, 46, 57, 58, 59, 61, 64, 71, 72, 75, 87, 94, 95, 98, 124, 126, 128, 129, 132, 310, 314, 318, 320, 321, 322, 326, 368, 382, 387, 390, 393, 402, 426, 461, 499, 548, 565, 588, 643, 651, 653, 658, 680, 703, 745, 796, 798, 799, 811, 812, 818, 833, 848, 853, 858, 859, 861, 862, 865, 868, 871, 879, 884, 886], "estim": [0, 71, 94, 364, 387, 402, 538, 832], "rate": [0, 71, 73, 94, 96, 390, 397, 432, 528, 632, 635, 637, 638, 639, 652, 653, 657, 678, 735, 736, 737, 816, 849], "fine": [0, 28, 30, 45, 46, 840, 841, 850, 852, 862], "tune": [0, 28, 30, 45, 46], "regular": [0, 60, 94, 391, 402, 453, 458, 542, 840, 862, 884], "term": [0, 8, 9, 24, 71, 94, 327, 334, 337, 384, 392, 471, 472, 653, 678, 679, 812, 828, 833, 841, 848, 870, 874, 884], "reg_lambda": [0, 27], "reg_alpha": [0, 27], "overfit": [0, 653, 676], "compil": [0, 8, 9, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 38, 41, 45, 46, 49, 62, 64, 306, 649, 804, 840, 862, 866, 871, 872, 874, 876, 879, 884, 885, 886], "param": [0, 20, 21, 25, 26, 27, 45, 59, 60, 61, 63, 88, 94, 95, 117, 551, 568, 569, 651, 818, 819, 833, 879], "n_estim": [0, 27], "100": [0, 5, 8, 9, 10, 11, 16, 17, 20, 21, 22, 23, 25, 26, 27, 57, 59, 61, 67, 70, 71, 90, 93, 94, 95, 98, 115, 153, 162, 249, 289, 302, 343, 366, 375, 384, 387, 390, 391, 393, 414, 415, 460, 466, 505, 569, 577, 593, 646, 649, 651, 654, 658, 693, 744, 849, 850, 865, 872, 880], "learning_r": [0, 10, 11, 24, 27], "base_margin": [0, 27], "none": [0, 4, 5, 8, 9, 12, 13, 20, 21, 24, 25, 26, 27, 45, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 116, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 183, 185, 186, 187, 188, 190, 192, 195, 207, 210, 211, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 584, 589, 592, 593, 594, 595, 596, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 641, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 749, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 799, 804, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 826, 828, 832, 833, 837, 840, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 871, 879, 880, 882], "xgb_cl": [0, 27], "better": [0, 20, 21, 27, 48, 57, 63, 64, 839, 843, 862, 863, 866, 868, 869], "ivy_cl": [0, 27], "effici": [0, 12, 13, 20, 21, 22, 23, 25, 26, 32, 33, 35, 36, 45, 46, 47, 48, 71, 76, 94, 99, 391, 392, 455, 471, 601, 624, 651, 654, 697, 833, 840, 841, 848, 858, 859, 861, 865, 867, 871, 872, 876, 877, 879, 884, 886], "fit": [0, 27, 78, 101, 656, 725, 839, 862, 870, 884], "magic": [0, 849], "durat": 0, "70": [0, 27, 57, 59, 71, 94, 95, 390, 412, 422, 569, 593, 654, 664, 699, 779], "m": [0, 5, 20, 21, 22, 23, 24, 25, 26, 27, 45, 58, 60, 62, 64, 67, 71, 76, 80, 93, 94, 99, 103, 116, 154, 160, 161, 162, 282, 343, 344, 384, 390, 391, 392, 393, 397, 413, 444, 449, 450, 452, 453, 468, 479, 490, 491, 506, 524, 525, 526, 527, 528, 646, 654, 658, 660, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 746, 759, 760, 761, 833, 840, 841, 843, 849, 871], "per": [0, 20, 21, 25, 26, 27, 36, 59, 61, 71, 75, 94, 98, 334, 384, 390, 391, 393, 409, 410, 411, 427, 428, 429, 430, 459, 507, 653, 667, 669, 670, 671, 672, 675, 680, 812, 841, 849, 859, 862], "loop": [0, 8, 9, 10, 11, 20, 21, 24, 25, 26, 27, 36, 53, 86, 94, 109, 136, 139, 390, 436, 645, 657, 735, 736, 737, 846, 872, 880], "dev": [0, 4, 5, 20, 21, 22, 23, 25, 26, 27, 36, 59, 61, 64, 69, 88, 92, 216, 223, 648, 833, 840, 851, 855, 858, 873], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 59, 61, 62, 63, 71, 73, 94, 96, 396, 517, 519, 631, 632, 637, 652, 653, 657, 678, 735, 736, 737, 793, 794, 812, 813, 814, 815, 827, 833, 835, 839, 840, 843, 845, 846, 849, 851, 852, 854, 856, 857, 859, 862, 863, 870, 871, 872, 873, 879, 880, 882, 884, 885], "59": [0, 10, 11, 57, 70, 250, 402, 539], "04": [0, 8, 9, 24, 59, 60, 67, 73, 87, 91, 94, 96, 126, 127, 153, 180, 260, 598, 631, 632, 637, 643, 646, 647, 649, 651, 652, 796, 840, 865], "slowest": [0, 48, 71, 78, 94, 101, 393, 489, 656, 726], "took": [0, 20, 21, 93, 295], "87": [0, 27, 57, 96, 98, 249, 278, 402, 433, 539, 631, 649, 652, 796, 855], "longer": [0, 27, 840, 850, 861, 865, 877, 884], "than": [0, 10, 11, 16, 17, 18, 27, 43, 45, 46, 48, 51, 70, 71, 72, 75, 76, 78, 80, 81, 82, 84, 88, 93, 94, 95, 98, 99, 101, 103, 104, 105, 107, 116, 117, 140, 149, 180, 228, 236, 237, 240, 241, 243, 244, 247, 249, 251, 255, 261, 262, 276, 277, 278, 279, 286, 288, 293, 297, 299, 301, 302, 306, 307, 308, 317, 327, 349, 352, 366, 373, 384, 387, 390, 391, 392, 393, 402, 412, 413, 418, 419, 422, 423, 424, 434, 435, 439, 441, 460, 466, 467, 490, 491, 539, 540, 541, 580, 581, 584, 601, 624, 646, 647, 648, 649, 651, 653, 654, 656, 660, 661, 662, 664, 678, 683, 685, 694, 695, 696, 697, 700, 711, 719, 723, 729, 761, 767, 770, 771, 772, 777, 778, 783, 784, 785, 786, 812, 828, 837, 839, 841, 844, 848, 849, 850, 852, 854, 855, 861, 862, 863, 865, 866, 867, 868, 870, 872, 873, 884, 886], "fastest": [0, 48, 71, 78, 94, 101, 391, 393, 458, 489, 656, 726], "could": [0, 8, 9, 25, 26, 45, 46, 51, 82, 662, 769, 770, 771, 772, 839, 840, 841, 844, 849, 850, 852, 859, 861, 862, 863, 865, 870, 884], "intermedi": [0, 58, 884, 885, 886], "cach": [0, 5, 10, 11, 15, 22, 23, 25, 26, 38, 40, 41, 59, 61, 64, 210, 555, 648, 651, 801, 822, 856, 858, 861, 865], "400": [0, 27, 95, 98, 390, 414, 415, 569, 593, 651, 654, 693], "\u00b5": [0, 20, 21, 25, 26, 27, 36], "487": [0, 294, 649, 653, 677], "make": [0, 1, 4, 5, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 35, 45, 46, 47, 59, 63, 71, 94, 390, 434, 822, 833, 836, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 876, 879, 884, 885], "out": [0, 4, 5, 8, 9, 12, 13, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 57, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 178, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 432, 434, 435, 438, 439, 440, 441, 442, 443, 444, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 465, 468, 469, 470, 471, 473, 474, 480, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 556, 557, 561, 562, 563, 565, 568, 569, 578, 588, 592, 593, 631, 632, 635, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 858, 860, 862, 863, 864, 865, 866, 868, 870, 871, 873, 876, 877, 879, 880, 884], "respect": [0, 67, 70, 71, 73, 76, 93, 94, 96, 99, 111, 154, 235, 238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 266, 267, 274, 275, 280, 282, 284, 285, 288, 291, 297, 301, 304, 305, 315, 364, 379, 382, 387, 389, 391, 393, 396, 447, 464, 476, 517, 519, 573, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 646, 649, 651, 652, 653, 654, 657, 666, 673, 674, 680, 685, 701, 704, 735, 736, 737, 793, 796, 811, 828, 838, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 857, 858, 860, 861, 862, 865, 866, 867], "kei": [0, 8, 9, 10, 11, 15, 20, 21, 24, 36, 37, 45, 46, 61, 63, 66, 71, 75, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 183, 187, 188, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 400, 414, 415, 416, 434, 467, 468, 469, 470, 471, 472, 473, 474, 483, 484, 506, 508, 510, 512, 517, 519, 520, 521, 523, 525, 531, 538, 539, 540, 541, 550, 551, 553, 554, 556, 557, 558, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 651, 653, 657, 658, 667, 668, 669, 670, 676, 677, 680, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 735, 736, 741, 747, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 796, 797, 803, 809, 812, 816, 818, 833, 836, 847, 848, 849, 858, 861, 862, 863, 865, 879, 884], "precis": [0, 27, 71, 76, 94, 99, 180, 268, 288, 295, 302, 361, 387, 391, 402, 445, 538, 601, 624, 647, 649, 651, 654, 690, 691, 695, 702, 704, 705, 711, 804, 849, 862, 867, 868], "recal": [0, 27], "f1": [0, 27, 850], "score": [0, 27, 75, 98, 392, 474, 653, 681, 683, 833], "ivy_pr": [0, 27], "xgb_pred": [0, 27], "nxgbclassifi": [0, 27], "86": [0, 24, 27, 57, 80, 94, 103, 390, 402, 422, 539, 631, 652, 760, 761], "93": [0, 27, 57, 71, 93, 95, 103, 213, 302, 375, 387, 561, 562, 648, 651, 760, 761], "84": [0, 24, 57, 75, 84, 93, 103, 183, 213, 278, 647, 648, 654, 659, 664, 677, 699, 757, 760, 761, 779], "91": [0, 24, 57, 71, 98, 103, 375, 387, 433, 653, 654, 660, 664, 677, 699, 760, 779], "accuraci": [0, 8, 9, 27, 59, 61, 64, 390, 434, 850], "92": [0, 27, 57, 61, 71, 72, 103, 375, 387, 629, 639, 652, 654, 686, 760, 761], "macro": [0, 27], "avg": [0, 27, 390, 409, 411, 432], "weight": [0, 4, 5, 8, 9, 24, 27, 28, 30, 45, 46, 59, 60, 71, 73, 75, 77, 94, 96, 98, 100, 111, 112, 330, 334, 368, 384, 387, 390, 391, 402, 417, 450, 536, 538, 541, 631, 632, 635, 637, 638, 639, 652, 653, 655, 657, 677, 678, 679, 680, 683, 713, 737, 798, 811, 812, 814, 816, 818, 832, 833, 848, 858, 865, 870, 886], "90": [0, 27, 57, 59, 61, 70, 71, 93, 94, 254, 294, 298, 375, 387, 393, 402, 506, 539, 649, 654, 664, 699, 779, 828], "summar": [0, 45, 46, 111, 865], "perfect": [0, 833], "fals": [0, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 34, 35, 45, 48, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 142, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 211, 212, 217, 219, 222, 223, 225, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 384, 387, 388, 390, 391, 392, 393, 396, 402, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 530, 531, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 571, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 588, 592, 593, 594, 597, 600, 601, 603, 604, 606, 607, 608, 609, 611, 613, 615, 616, 618, 623, 624, 626, 627, 629, 632, 633, 635, 639, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 744, 748, 749, 750, 751, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 794, 796, 797, 798, 799, 804, 808, 809, 812, 813, 814, 816, 818, 819, 822, 825, 827, 828, 829, 832, 833, 837, 840, 844, 846, 849, 850, 851, 852, 854, 855, 861, 862, 863, 865, 867, 868, 870, 879, 880, 881], "posit": [0, 61, 63, 66, 70, 71, 72, 76, 77, 78, 93, 94, 95, 99, 100, 101, 111, 147, 149, 162, 180, 235, 236, 237, 241, 244, 255, 262, 269, 270, 276, 278, 288, 289, 296, 297, 301, 302, 306, 328, 343, 349, 354, 366, 384, 387, 391, 393, 442, 462, 473, 498, 508, 555, 565, 630, 644, 646, 647, 649, 651, 654, 655, 656, 660, 661, 665, 684, 687, 708, 713, 722, 727, 762, 767, 787, 788, 793, 796, 804, 809, 813, 814, 828, 839, 841, 844, 848, 862, 865, 866, 880], "excel": [0, 8, 9], "high": [0, 8, 9, 34, 45, 46, 64, 71, 75, 80, 94, 98, 103, 390, 433, 437, 601, 651, 653, 660, 666, 667, 668, 669, 671, 673, 675, 759, 761, 798, 836, 839, 854, 860, 862, 874, 877, 884, 886], "show": [0, 4, 5, 6, 7, 8, 9, 10, 11, 22, 23, 38, 45, 46, 47, 48, 50, 57, 59, 61, 62, 595, 604, 627, 651, 833, 839, 840, 841, 847, 849, 852, 856, 861, 862, 865, 867, 872, 880, 884], "trade": [0, 880], "off": [0, 24, 36, 48, 75, 76, 98, 99, 414, 415, 416, 653, 654, 676, 688, 708, 811, 812, 840, 855, 880], "wa": [0, 16, 17, 24, 45, 46, 51, 60, 71, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 114, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 373, 374, 376, 377, 378, 384, 387, 391, 414, 415, 416, 434, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 506, 508, 509, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 617, 629, 635, 641, 649, 651, 658, 664, 665, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 822, 833, 835, 841, 844, 846, 847, 849, 852, 858, 860, 862, 870, 877, 879, 880, 884], "overal": [0, 653, 676, 828, 848, 850, 851, 853, 880, 884], "slightli": [0, 27, 327, 384, 848, 862, 865, 870, 871], "lower": [0, 27, 61, 67, 70, 71, 76, 80, 93, 94, 99, 103, 147, 160, 286, 322, 328, 334, 343, 344, 382, 384, 402, 541, 542, 548, 646, 649, 654, 660, 684, 690, 691, 697, 761, 798, 811, 841, 850, 852, 862, 865, 870, 871, 872, 874, 884, 885], "good": [0, 34, 45, 46, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 865, 866, 868, 870], "due": [0, 36, 45, 46, 48, 62, 64, 288, 298, 393, 508, 649, 840, 844, 849, 854, 861, 862, 879, 880, 884], "97": [0, 22, 23, 27, 57, 71, 73, 93, 96, 103, 241, 375, 387, 635, 649, 652, 760], "suggest": [0, 1, 8, 9, 24, 839, 840, 841, 847, 850, 856, 860, 862, 865, 866, 867], "slight": [0, 45, 46, 850, 865], "edg": [0, 63, 71, 78, 94, 101, 334, 384, 390, 393, 402, 426, 499, 541, 656, 719, 721, 734, 799, 844, 865, 876, 879, 884], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 8, 9, 20, 21, 24, 45, 46, 49, 50, 51, 52, 391, 451, 833, 841, 848, 850, 854, 858, 865, 869, 872, 874, 879], "design": [0, 1, 8, 9, 27, 34, 45, 94, 262, 327, 332, 333, 384, 649, 833, 836, 843, 847, 849, 850, 861, 862, 863, 864, 868, 872, 884], "heatmap": 0, "seaborn": [0, 61], "aesthet": 0, "appeal": 0, "eas": [0, 860, 877, 884], "plot_classification_report": 0, "argument": [0, 8, 9, 16, 17, 24, 38, 40, 41, 45, 46, 48, 50, 51, 52, 57, 59, 61, 63, 66, 67, 70, 71, 72, 76, 88, 89, 93, 94, 95, 111, 112, 117, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 195, 224, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 343, 344, 350, 351, 353, 356, 358, 359, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 422, 423, 424, 427, 428, 429, 434, 436, 438, 445, 499, 508, 512, 538, 541, 545, 551, 552, 554, 555, 560, 562, 563, 568, 572, 574, 576, 578, 588, 592, 593, 607, 611, 616, 617, 630, 641, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 737, 744, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 804, 809, 812, 813, 814, 822, 827, 830, 833, 839, 843, 844, 845, 846, 847, 848, 852, 853, 856, 858, 863, 865, 866, 868, 870, 871, 874, 879, 880, 882, 884], "plot": [0, 8, 9, 10, 11, 24, 27, 60, 884], "color": [0, 15, 43, 60, 88, 117, 833], "represent": [0, 63, 71, 72, 88, 94, 95, 117, 165, 166, 180, 183, 208, 209, 235, 238, 245, 248, 250, 255, 262, 285, 288, 290, 305, 331, 363, 367, 372, 376, 384, 387, 551, 613, 644, 647, 648, 649, 651, 796, 798, 799, 812, 850, 885, 886], "easi": [0, 1, 45, 46, 59, 840, 841, 845, 846, 848, 858, 860, 863, 865, 868, 884], "assess": [0, 36, 48, 839, 868], "side": [0, 83, 106, 365, 387, 391, 461, 663, 775, 796, 812, 827, 828, 840, 841, 847], "pyplot": [0, 8, 9, 10, 11, 24, 27, 59, 60, 61, 64], "plt": [0, 8, 9, 10, 11, 24, 27, 59, 60, 61, 64], "sn": 0, "model_nam": [0, 8, 9, 61], "ax": [0, 24, 60, 65, 71, 76, 78, 81, 84, 85, 87, 94, 99, 101, 104, 107, 108, 116, 120, 127, 131, 228, 350, 351, 355, 356, 371, 378, 387, 388, 390, 391, 393, 396, 402, 419, 424, 435, 461, 498, 499, 506, 520, 543, 544, 545, 546, 547, 548, 561, 630, 648, 651, 654, 656, 661, 664, 665, 685, 695, 703, 706, 707, 711, 721, 723, 724, 727, 729, 731, 734, 764, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 798, 812, 850, 852, 865, 866, 870], "iloc": 0, "t": [0, 1, 5, 6, 7, 8, 9, 10, 11, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 45, 46, 51, 57, 59, 60, 61, 71, 75, 86, 94, 98, 109, 111, 112, 116, 364, 379, 387, 389, 391, 445, 578, 596, 611, 633, 651, 652, 653, 658, 677, 679, 746, 791, 812, 833, 835, 836, 839, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 855, 856, 858, 859, 860, 861, 865, 866, 868, 870, 872, 873, 880, 882, 884], "annot": [0, 857], "fmt": 0, "2f": [0, 6, 7, 20, 21, 24], "cmap": 0, "blue": 0, "set_titl": [0, 24, 60, 61], "f": [0, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 22, 23, 24, 45, 46, 58, 59, 61, 71, 78, 94, 101, 317, 334, 382, 384, 393, 489, 511, 656, 658, 726, 741, 745, 746, 747, 750, 755, 756, 834, 841, 843, 848, 849, 854, 866, 870, 871], "figur": [0, 24, 60, 867], "fig": [0, 24, 60, 61], "ax1": [0, 61], "ax2": [0, 61], "subplot": [0, 24, 60, 61], "figsiz": [0, 60, 61], "tight_layout": [0, 61], "observ": [0, 27, 71, 94, 402, 537, 538, 841, 850, 854, 871, 880], "exhibit": [0, 48], "strong": [0, 798, 872, 884], "commend": 0, "impli": [0, 82, 662, 769, 770, 771, 772, 865], "neg": [0, 65, 70, 71, 76, 78, 80, 85, 87, 93, 94, 99, 101, 103, 108, 111, 126, 129, 132, 140, 147, 149, 162, 255, 262, 269, 270, 288, 289, 297, 302, 310, 328, 343, 346, 382, 384, 391, 392, 393, 397, 442, 449, 455, 472, 508, 512, 528, 643, 646, 649, 654, 656, 660, 665, 685, 687, 704, 708, 710, 711, 720, 722, 723, 727, 760, 787, 788, 796, 798, 808, 848, 861], "depend": [0, 5, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 47, 50, 67, 68, 71, 72, 76, 82, 83, 91, 94, 99, 106, 107, 137, 144, 167, 235, 236, 237, 240, 241, 242, 243, 252, 253, 255, 258, 260, 276, 277, 278, 279, 288, 290, 293, 300, 301, 305, 306, 374, 387, 390, 391, 436, 444, 462, 611, 645, 646, 647, 649, 651, 653, 654, 661, 663, 678, 689, 690, 701, 702, 703, 704, 768, 773, 776, 786, 835, 837, 839, 840, 841, 847, 850, 851, 853, 855, 859, 861, 862, 863, 864, 865, 868, 870, 871, 872, 873, 880, 884, 885], "applic": [0, 8, 9, 30, 32, 59, 61, 64, 71, 75, 94, 98, 114, 391, 466, 653, 654, 658, 664, 680, 683, 708, 744, 745, 746, 750, 751, 783, 785, 833, 840, 849, 850, 851, 859, 877, 884], "conclus": 0, "appear": [0, 393, 490, 491, 630, 651, 840, 841, 844, 862, 868, 880], "outperform": [0, 27], "especi": [0, 10, 11, 840, 846, 856, 884], "increas": [0, 20, 21, 25, 26, 27, 36, 45, 48, 71, 76, 78, 94, 99, 101, 114, 393, 402, 499, 541, 654, 656, 709, 721, 734, 798, 850, 854, 862, 866, 868, 880, 884], "context": [0, 340, 384, 589, 651, 839, 840, 841, 846, 850, 851, 852], "specif": [0, 8, 9, 10, 11, 24, 34, 35, 40, 41, 44, 45, 46, 47, 49, 51, 59, 69, 71, 72, 92, 94, 95, 195, 226, 229, 262, 283, 284, 293, 337, 350, 351, 384, 387, 393, 397, 508, 528, 561, 562, 563, 589, 647, 648, 649, 651, 654, 656, 657, 660, 663, 664, 690, 691, 706, 730, 735, 736, 737, 758, 775, 780, 781, 782, 784, 791, 793, 813, 814, 822, 823, 830, 832, 833, 836, 837, 839, 840, 841, 844, 845, 846, 847, 848, 850, 851, 854, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 873, 874, 879, 880, 882, 885, 886], "problem": [0, 10, 11, 24, 833, 836, 839, 841, 844, 845, 851, 862, 876], "domain": [0, 236, 237, 240, 241, 242, 243, 252, 253, 258, 260, 276, 277, 279, 300, 301, 302, 305, 306, 374, 387, 649, 853, 884], "repo": [1, 28, 59, 838, 841, 844, 847, 849, 850, 855, 863, 865], "hold": [1, 71, 72, 76, 84, 94, 99, 107, 111, 112, 349, 366, 371, 387, 402, 485, 515, 539, 540, 545, 592, 593, 651, 654, 664, 695, 778, 794, 842, 885], "exampl": [1, 8, 9, 10, 11, 16, 17, 20, 21, 24, 25, 26, 34, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 343, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 409, 410, 411, 412, 414, 415, 417, 418, 419, 422, 423, 424, 427, 428, 429, 432, 433, 434, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 456, 458, 461, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 520, 521, 523, 526, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 744, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 804, 822, 827, 828, 832, 833, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 866, 870, 871, 872, 877, 885], "tab": [1, 839, 840, 849, 855], "ivi": [1, 2, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 51, 52, 53, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 840, 843, 844, 846, 848, 850, 851, 853, 855, 856, 857, 858, 859, 861, 868, 869, 872, 874, 876, 877, 878, 883], "web": 1, "relev": [1, 67, 90, 153, 646, 816, 839, 840, 841, 845, 848, 849, 850, 852, 855, 859, 860, 863, 864, 865, 873], "link": [1, 34, 45, 46, 60, 839, 840, 841, 847, 849, 850, 856, 862, 879], "open": [1, 4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 40, 45, 46, 59, 60, 61, 62, 72, 80, 103, 140, 646, 660, 759, 761, 833, 834, 835, 836, 840, 841, 842, 847, 850, 853, 855, 862, 863, 868, 879, 880, 884, 886], "avil": 1, "discuss": [1, 839, 841, 847, 850, 851, 861, 862, 864, 865, 868, 872, 885], "comprehens": [1, 32, 841, 844, 864, 886], "possibl": [1, 4, 5, 51, 67, 71, 90, 94, 101, 111, 142, 262, 305, 327, 350, 351, 384, 387, 390, 392, 393, 413, 468, 477, 478, 479, 485, 487, 489, 490, 491, 498, 515, 588, 649, 651, 653, 664, 676, 722, 723, 724, 726, 728, 729, 731, 733, 780, 782, 796, 812, 825, 828, 831, 834, 837, 839, 840, 841, 844, 847, 848, 850, 852, 853, 855, 856, 858, 860, 861, 862, 863, 865, 868, 870, 872, 884], "us": [1, 2, 4, 5, 6, 7, 10, 11, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 59, 60, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 80, 81, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 107, 109, 111, 112, 114, 117, 124, 153, 156, 167, 179, 181, 182, 193, 194, 214, 215, 217, 222, 226, 227, 228, 229, 231, 234, 240, 248, 276, 277, 279, 280, 282, 283, 284, 286, 287, 289, 298, 302, 307, 327, 329, 330, 332, 333, 334, 342, 364, 367, 368, 371, 384, 387, 390, 391, 392, 393, 396, 397, 398, 400, 402, 409, 410, 411, 413, 414, 415, 416, 417, 419, 424, 426, 427, 428, 429, 432, 434, 435, 436, 438, 443, 445, 449, 455, 457, 459, 460, 462, 463, 464, 466, 467, 472, 489, 493, 497, 499, 500, 508, 512, 517, 519, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 545, 548, 566, 567, 576, 577, 588, 589, 596, 598, 599, 601, 608, 609, 621, 622, 624, 631, 632, 637, 638, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 664, 677, 678, 680, 683, 688, 690, 697, 701, 705, 708, 711, 713, 725, 726, 727, 731, 735, 736, 737, 738, 740, 741, 747, 748, 749, 751, 758, 759, 760, 761, 763, 764, 765, 766, 769, 771, 779, 781, 794, 796, 797, 798, 799, 804, 808, 809, 811, 812, 813, 814, 815, 816, 822, 827, 828, 832, 834, 836, 838, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 877, 881, 882, 884, 885, 886], "attract": 1, "visual": [1, 8, 9, 10, 11, 27, 63, 832, 840, 855, 862, 865, 872, 884], "graph": [1, 4, 5, 8, 9, 10, 11, 12, 13, 15, 22, 23, 24, 27, 32, 33, 36, 38, 40, 41, 46, 52, 53, 58, 63, 64, 82, 662, 769, 770, 771, 772, 804, 833, 848, 858, 862, 864, 868, 872, 874, 876, 878, 880, 882, 883, 884], "nice": [1, 865, 884], "etc": [1, 48, 53, 60, 67, 71, 80, 82, 86, 90, 94, 103, 109, 144, 152, 153, 156, 390, 397, 419, 424, 435, 524, 525, 527, 528, 646, 660, 662, 758, 759, 760, 761, 769, 770, 771, 772, 796, 799, 811, 812, 813, 814, 815, 816, 817, 833, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 852, 854, 857, 862, 863, 865, 866, 871, 872, 873, 874, 880, 884], "tone": [1, 6, 7], "feel": [1, 8, 9, 10, 11, 24, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 876, 877, 880], "free": [1, 8, 9, 10, 11, 12, 13, 24, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 838, 839, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 876, 877, 880, 885], "emoji": [1, 839], "don": [1, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 45, 46, 59, 61, 86, 109, 833, 839, 840, 841, 849, 850, 851, 856, 860, 865, 868, 872, 880], "keep": [1, 2, 28, 30, 34, 40, 41, 45, 71, 78, 88, 94, 101, 111, 114, 375, 391, 466, 656, 733, 838, 839, 840, 841, 844, 847, 848, 849, 854, 861, 862, 865, 866, 868, 871, 873, 879], "thing": [1, 10, 11, 41, 57, 59, 827, 838, 839, 840, 841, 846, 862, 865, 868, 884], "super": [1, 4, 5, 12, 13, 28, 30, 44, 45, 46, 59, 71, 94, 391, 445, 818, 833, 854, 871, 879], "seriou": 1, "given": [1, 4, 5, 10, 11, 15, 34, 43, 45, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 140, 145, 152, 153, 173, 174, 175, 176, 177, 189, 194, 213, 222, 226, 227, 228, 230, 234, 307, 337, 346, 349, 355, 356, 364, 365, 366, 368, 371, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 409, 410, 411, 412, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 435, 445, 450, 465, 469, 470, 471, 473, 474, 475, 476, 486, 487, 488, 495, 497, 510, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 538, 539, 540, 541, 547, 569, 573, 592, 593, 603, 631, 632, 635, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 712, 713, 714, 715, 719, 722, 723, 724, 725, 727, 728, 732, 733, 745, 746, 755, 756, 759, 760, 761, 763, 775, 776, 777, 778, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 871, 877, 881], "intern": [1, 27, 88, 119, 120, 121, 658, 738, 748, 749, 811, 812, 813, 814, 815, 817, 842, 845, 848, 851, 853, 861, 863, 865, 867], "releas": [1, 8, 9, 60, 839, 840, 850, 866, 868, 872, 884], "tracer": [1, 4, 5, 12, 13, 22, 23, 25, 26, 32, 33, 35, 38, 40, 41, 46, 62, 64, 862, 870, 872, 873, 874, 879, 882, 883], "around": [1, 28, 30, 71, 88, 94, 117, 393, 499, 508, 839, 841, 844, 845, 847, 851, 857, 858, 862, 865, 866, 872, 874, 880, 884], "corner": [1, 71, 94, 390, 426, 840, 841, 855, 862], "anybodi": 1, "abl": [1, 4, 5, 8, 9, 10, 11, 12, 13, 24, 39, 47, 51, 62, 64, 88, 111, 840, 841, 842, 844, 850, 855, 858, 861, 862, 866, 871, 875, 880], "start": [1, 2, 8, 9, 10, 11, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 60, 61, 67, 71, 88, 90, 94, 98, 140, 149, 152, 153, 368, 378, 387, 388, 390, 393, 402, 433, 489, 492, 501, 503, 513, 547, 646, 798, 827, 832, 834, 839, 840, 841, 842, 843, 849, 850, 852, 853, 855, 856, 857, 862, 865, 868, 870, 872, 879, 880, 884], "shortli": 1, "so": [1, 2, 10, 11, 12, 13, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 57, 59, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 387, 390, 393, 400, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 653, 658, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 704, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 749, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 828, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 877, 879, 880, 882, 884, 885], "worri": [1, 45, 46, 839, 840, 856, 877], "about": [1, 32, 33, 34, 37, 39, 41, 43, 44, 45, 46, 49, 60, 61, 68, 91, 180, 183, 647, 832, 833, 835, 838, 839, 840, 841, 842, 843, 844, 847, 849, 850, 851, 856, 857, 861, 863, 864, 865, 866, 867, 868, 869, 872, 877, 882, 885], "transpil": [1, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 32, 33, 35, 36, 48, 803, 804, 839, 840, 854, 855, 862, 869, 873, 874, 875, 876, 878, 880, 882, 884, 886], "style": [1, 27, 59, 61, 393, 499, 661, 767, 841, 856, 884], "stori": 1, "anyon": [1, 834, 841, 849, 872], "ha": [1, 4, 5, 8, 9, 12, 13, 18, 22, 23, 24, 25, 26, 27, 28, 30, 34, 36, 40, 45, 46, 48, 51, 53, 57, 64, 67, 71, 76, 78, 82, 84, 88, 91, 94, 95, 99, 101, 105, 107, 111, 154, 211, 235, 255, 258, 260, 262, 272, 288, 290, 295, 298, 300, 301, 305, 345, 346, 347, 384, 391, 392, 393, 402, 426, 461, 471, 482, 507, 509, 514, 537, 539, 540, 542, 574, 646, 648, 649, 653, 654, 656, 661, 662, 664, 679, 680, 694, 695, 703, 704, 706, 708, 711, 722, 729, 767, 770, 771, 772, 777, 778, 781, 783, 784, 785, 786, 793, 796, 799, 822, 833, 839, 841, 844, 846, 847, 848, 849, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877, 880, 882, 884, 886], "question": [1, 8, 9, 10, 11, 24, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 872, 876, 877], "ping": 1, "me": [1, 841], "guillermo": 1, "commun": [1, 8, 9, 10, 11, 24, 60, 834, 839, 840, 841, 842, 872, 877, 884, 886], "ux": 1, "team": [1, 833, 834, 836, 839, 840, 841, 842, 862, 873], "discord": [1, 8, 9, 10, 11, 24, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 873, 876, 877], "channel": [1, 41, 61, 71, 72, 75, 94, 95, 98, 390, 396, 414, 415, 416, 426, 517, 518, 519, 522, 561, 565, 651, 653, 655, 667, 668, 669, 670, 671, 672, 675, 716, 812, 815, 841, 847, 855, 864], "templat": [1, 833, 847, 853, 865], "locat": [1, 61, 156, 402, 539, 646, 658, 660, 663, 742, 758, 775, 828, 839, 841, 846, 847, 851, 862, 863, 865, 866, 873], "asset": [1, 874], "01_templat": 1, "ipynb": 1, "pleas": [1, 5, 51, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 870, 871, 873], "copi": [1, 61, 64, 67, 68, 69, 70, 71, 72, 78, 88, 90, 91, 92, 93, 94, 95, 101, 111, 115, 141, 142, 144, 148, 159, 167, 229, 289, 393, 475, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 515, 571, 597, 608, 615, 616, 646, 647, 648, 649, 651, 656, 658, 663, 722, 723, 724, 726, 728, 729, 731, 733, 739, 774, 776, 804, 828, 840, 841, 844, 846, 849, 850, 853, 862, 863, 870, 872, 879, 880, 882], "firstli": [1, 35, 36, 47, 48, 52, 57, 845, 850, 852, 853, 854, 858, 859, 861, 868], "file": [1, 5, 8, 9, 10, 11, 15, 24, 59, 60, 61, 72, 88, 605, 628, 651, 814, 832, 835, 839, 840, 841, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 858, 862, 863, 864, 865, 866, 870, 873, 884, 885, 886], "topic": [1, 32, 35, 36, 37, 47, 48, 49, 50, 51, 52, 859, 884], "Then": [1, 64, 653, 680, 835, 839, 840, 841, 846, 847, 849, 855, 856, 859, 861, 865, 866, 872], "place": [1, 10, 11, 22, 23, 25, 26, 38, 40, 41, 59, 66, 67, 70, 71, 72, 76, 78, 88, 90, 92, 93, 94, 95, 99, 101, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 327, 328, 331, 343, 344, 349, 350, 351, 353, 356, 357, 358, 359, 363, 365, 366, 367, 368, 370, 371, 372, 376, 377, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 489, 499, 505, 508, 512, 525, 538, 541, 545, 554, 562, 563, 568, 572, 574, 576, 577, 578, 592, 596, 607, 611, 616, 620, 641, 646, 647, 648, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 816, 833, 837, 838, 841, 843, 844, 847, 848, 849, 851, 852, 853, 855, 857, 858, 862, 863, 865, 866, 868, 874], "folder": [1, 5, 22, 23, 25, 26, 38, 40, 41, 61, 840, 841, 844, 847, 849, 855, 858, 862, 865, 866, 867], "edit": [1, 839, 840, 841, 856, 871], "titl": [1, 24, 27, 29, 31, 42, 60, 63, 833, 839, 841, 847], "accordingli": [1, 71, 76, 81, 82, 84, 85, 94, 99, 104, 107, 108, 154, 255, 260, 262, 278, 288, 302, 350, 351, 387, 646, 649, 654, 661, 662, 664, 665, 711, 765, 769, 770, 771, 772, 780, 781, 782, 783, 784, 785, 786, 787, 788, 862, 870, 873], "render": [1, 847, 853], "webpag": [1, 32], "content": [1, 2, 24, 29, 31, 42, 45, 60, 61, 71, 88, 94, 402, 545, 839, 841, 847, 851, 861, 864, 870], "behind": [1, 34, 45, 833, 843, 857, 865, 869], "exist": [1, 34, 45, 46, 59, 60, 61, 64, 67, 71, 72, 88, 90, 94, 95, 101, 142, 393, 477, 478, 484, 485, 487, 489, 490, 491, 498, 515, 560, 596, 651, 656, 720, 722, 723, 724, 726, 728, 729, 731, 733, 816, 819, 832, 833, 839, 840, 844, 846, 851, 852, 853, 858, 859, 861, 862, 865, 868, 870, 871, 872, 874, 884], "cell": [1, 2, 4, 5, 6, 7, 12, 13, 15, 22, 23, 24, 25, 26, 27, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 60, 75, 98, 653, 678, 679, 812, 849, 870], "h2": [1, 2, 29, 31, 42], "tag": [1, 2, 29, 31, 42, 840, 841], "h3": [1, 2, 29, 31, 42], "subsect": [1, 2, 29, 31, 42, 839, 840, 841, 844, 849], "explan": [1, 2, 29, 31, 42, 839, 840, 841, 848, 853, 857, 862, 866], "go": [1, 6, 7, 8, 9, 10, 11, 24, 28, 30, 34, 41, 43, 44, 46, 51, 66, 71, 94, 98, 390, 433, 437, 658, 749, 750, 833, 834, 837, 839, 840, 841, 843, 846, 847, 850, 852, 855, 856, 862, 863, 865, 866, 869, 872, 884, 885], "default": [1, 4, 5, 8, 9, 12, 13, 45, 46, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 187, 188, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 211, 212, 214, 215, 219, 222, 223, 224, 226, 227, 228, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 405, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 584, 585, 588, 589, 592, 593, 596, 597, 602, 606, 607, 608, 609, 611, 613, 615, 616, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 744, 745, 746, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 797, 798, 799, 804, 808, 809, 811, 812, 813, 814, 815, 816, 817, 827, 828, 832, 839, 840, 841, 846, 847, 850, 851, 852, 853, 854, 857, 858, 862, 865, 868, 870, 874, 880, 884], "text": [1, 6, 7, 8, 9, 22, 23, 27, 59, 71, 72, 391, 392, 459, 467, 839, 841, 847, 852, 853], "paragraph": [1, 2, 29, 31, 42, 847], "p": [1, 2, 29, 31, 42, 57, 71, 72, 76, 94, 95, 99, 112, 154, 259, 391, 396, 441, 454, 523, 556, 557, 646, 649, 651, 654, 658, 695, 711, 746, 812, 833, 840, 841, 843], "path": [1, 22, 23, 24, 25, 26, 27, 38, 40, 41, 60, 61, 793, 804, 821, 840, 847, 861, 862, 863, 873, 884], "correspond": [1, 4, 5, 20, 21, 25, 26, 30, 45, 46, 60, 68, 70, 71, 72, 75, 78, 81, 82, 84, 88, 91, 93, 94, 98, 101, 107, 111, 114, 117, 143, 168, 180, 183, 243, 293, 307, 346, 360, 361, 384, 387, 390, 391, 393, 396, 402, 413, 419, 430, 435, 441, 444, 445, 446, 465, 490, 491, 512, 517, 518, 519, 522, 539, 540, 608, 630, 646, 647, 649, 651, 653, 654, 656, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 680, 685, 689, 690, 695, 702, 703, 726, 727, 758, 764, 765, 769, 770, 771, 772, 777, 778, 783, 784, 785, 786, 793, 796, 798, 827, 832, 833, 839, 841, 845, 846, 848, 849, 850, 852, 853, 854, 857, 858, 860, 862, 865, 868, 870, 879, 880, 882, 884], "toctre": [1, 847], "index": [1, 59, 60, 61, 64, 67, 71, 72, 78, 81, 82, 83, 88, 90, 94, 95, 101, 104, 105, 106, 147, 154, 328, 335, 336, 345, 346, 347, 384, 390, 391, 393, 398, 400, 402, 413, 419, 450, 452, 459, 482, 489, 492, 501, 503, 505, 508, 509, 512, 513, 529, 530, 539, 548, 551, 569, 571, 592, 593, 597, 644, 646, 651, 655, 656, 658, 661, 662, 663, 716, 726, 730, 740, 741, 742, 745, 746, 747, 753, 755, 764, 765, 767, 769, 770, 771, 773, 775, 797, 812, 828, 830, 848, 849, 854, 858, 859, 860, 861, 863, 865, 884], "rst": [1, 858], "left": [1, 36, 48, 59, 60, 71, 76, 81, 83, 94, 99, 104, 106, 134, 135, 247, 262, 355, 371, 378, 387, 388, 390, 391, 393, 402, 425, 444, 449, 455, 462, 464, 490, 501, 543, 544, 545, 546, 547, 548, 561, 645, 649, 651, 654, 661, 663, 689, 690, 695, 704, 709, 764, 775, 796, 840, 841, 844, 847, 849, 850, 852, 855], "add": [1, 36, 48, 61, 63, 70, 71, 79, 86, 88, 93, 94, 102, 109, 116, 117, 378, 388, 390, 392, 433, 472, 588, 617, 649, 651, 653, 654, 659, 664, 680, 708, 757, 785, 793, 804, 812, 815, 832, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 861, 862, 865, 866, 868, 870, 872, 873, 884], "grid": [1, 24, 61, 67, 154, 331, 384, 646, 852, 865], "item": [1, 6, 7, 8, 9, 10, 11, 45, 46, 57, 59, 61, 66, 72, 86, 88, 90, 93, 94, 95, 149, 174, 211, 265, 281, 289, 356, 360, 373, 558, 568, 569, 573, 608, 609, 646, 647, 648, 651, 658, 665, 743, 744, 745, 746, 750, 755, 756, 790, 839, 848, 850, 870, 880], "card": [1, 71, 94, 375, 387], "refer": [1, 12, 13, 71, 78, 84, 85, 94, 96, 101, 107, 108, 147, 162, 260, 278, 328, 343, 373, 384, 387, 390, 391, 393, 419, 424, 435, 442, 466, 489, 631, 632, 646, 649, 652, 654, 656, 664, 665, 685, 687, 710, 726, 784, 786, 787, 788, 812, 833, 838, 839, 840, 841, 844, 845, 847, 849, 850, 857, 858, 859, 860, 861, 862, 863, 864, 865, 872, 874, 884], "also": [1, 4, 5, 6, 7, 8, 9, 10, 11, 18, 20, 21, 24, 25, 26, 27, 28, 30, 34, 36, 38, 41, 44, 45, 46, 48, 50, 51, 52, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 183, 186, 187, 188, 190, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 387, 390, 391, 393, 400, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 646, 647, 649, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 748, 749, 750, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 811, 812, 822, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 876, 879, 880, 883, 884, 885, 886], "look": [1, 8, 9, 10, 11, 12, 13, 24, 34, 45, 46, 59, 61, 64, 833, 837, 839, 840, 841, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 862, 863, 865, 866, 867, 868, 870, 871, 873, 880, 884], "document": [1, 5, 8, 9, 10, 11, 15, 24, 34, 45, 78, 262, 350, 351, 387, 630, 649, 651, 730, 834, 835, 838, 841, 847, 849, 850, 852, 861, 862, 863, 865, 871], "sphinx": [1, 835, 847], "websit": [1, 63, 833, 840, 844], "alreadi": [2, 5, 8, 9, 24, 25, 26, 35, 38, 39, 40, 41, 45, 46, 51, 59, 61, 64, 71, 76, 88, 94, 99, 251, 261, 288, 298, 308, 393, 402, 478, 479, 499, 536, 545, 649, 654, 692, 699, 827, 828, 833, 839, 840, 841, 846, 848, 850, 851, 857, 861, 862, 868, 872, 873, 884], "instal": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 25, 26, 27, 28, 30, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 59, 61, 62, 63, 64, 835, 840, 841, 846, 847, 855, 856], "skip": [2, 6, 7, 24, 61, 71, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 391, 393, 414, 415, 416, 434, 450, 452, 459, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 501, 504, 506, 508, 509, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 658, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 797, 827, 847, 858, 865], "colab": [2, 6, 7, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 46, 59, 61, 63, 64], "manual": [2, 8, 9, 10, 11, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 46, 658, 738, 748, 749, 839, 840, 841, 850, 856, 865, 871], "mind": [2, 28, 30, 34, 40, 45, 49, 839, 840, 845, 848, 865, 873, 879], "click": [2, 4, 5, 61, 839, 840, 841, 849, 853, 855, 856], "runtim": [2, 4, 5, 6, 7, 12, 13, 20, 21, 22, 23, 24, 25, 26, 36, 45, 48, 59, 60, 843, 858, 865, 868, 884], "restart": [2, 4, 5, 6, 7, 12, 13, 22, 23, 24, 59, 60, 840, 855], "git": [2, 4, 5, 6, 7, 12, 13, 22, 23, 45, 59, 60, 61, 62, 833, 835, 838, 840, 841, 844, 847, 849, 855, 856, 865, 873], "clone": [2, 4, 5, 12, 13, 22, 23, 45, 59, 61, 62, 833, 835, 841, 855, 873], "http": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 30, 38, 40, 41, 45, 46, 59, 60, 61, 62, 63, 64, 70, 71, 93, 94, 96, 162, 170, 258, 268, 269, 284, 343, 350, 351, 384, 387, 390, 393, 402, 434, 508, 538, 631, 632, 646, 647, 649, 652, 654, 656, 664, 702, 703, 734, 784, 833, 835, 840, 841, 844, 847, 849, 850, 853, 855, 873, 879], "github": [2, 4, 5, 6, 7, 12, 13, 20, 21, 22, 23, 25, 26, 45, 59, 60, 61, 62, 63, 833, 835, 836, 838, 841, 842, 844, 847, 849, 850, 852, 853, 855, 856, 864, 865, 873], "com": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 25, 26, 30, 45, 59, 60, 61, 62, 63, 833, 835, 840, 841, 844, 847, 849, 850, 855, 873], "llc": [2, 4, 5, 12, 13, 22, 23, 45, 59, 60, 61, 62, 833, 873], "model": [2, 3, 4, 5, 16, 17, 27, 32, 33, 34, 62, 64, 255, 288, 392, 468, 649, 809, 813, 814, 818, 832, 833, 871, 874, 876, 877, 879, 880, 884, 885, 886], "depth": [2, 4, 5, 8, 9, 12, 13, 22, 23, 60, 67, 71, 75, 90, 94, 98, 156, 390, 393, 426, 486, 561, 573, 646, 651, 653, 671, 672, 841, 849, 870, 873], "repositori": [2, 4, 5, 12, 13, 22, 23, 835, 839, 840, 841, 843, 844, 847, 855, 864], "cd": [2, 4, 5, 12, 13, 22, 23, 45, 62, 833, 835, 840, 841, 855, 873], "acceler": [3, 32, 850, 862, 877], "convert": [3, 12, 13, 15, 16, 17, 20, 21, 25, 26, 27, 28, 30, 32, 35, 37, 40, 41, 43, 44, 45, 46, 47, 49, 51, 59, 62, 64, 66, 67, 70, 88, 89, 90, 93, 111, 141, 142, 155, 165, 166, 208, 209, 210, 211, 222, 230, 234, 254, 294, 393, 398, 477, 478, 479, 529, 594, 612, 614, 615, 616, 618, 646, 647, 648, 649, 651, 654, 658, 712, 739, 750, 751, 793, 822, 827, 839, 845, 846, 859, 860, 862, 865, 867, 870, 871, 872, 874, 875, 877, 878, 879, 881, 886], "faster": [3, 4, 5, 16, 17, 20, 21, 25, 26, 27, 32, 45, 46, 62, 64, 71, 76, 94, 99, 391, 464, 654, 704, 835, 838, 847, 874], "infer": [3, 8, 9, 10, 11, 16, 17, 20, 21, 24, 25, 26, 27, 32, 36, 48, 50, 51, 60, 62, 64, 67, 71, 72, 75, 78, 90, 94, 95, 98, 101, 140, 142, 146, 150, 151, 155, 158, 164, 173, 174, 175, 176, 177, 327, 328, 390, 393, 397, 426, 512, 526, 572, 606, 607, 646, 647, 651, 653, 656, 676, 726, 822, 823, 843, 846, 850, 851, 865, 870, 879, 886], "finetun": [3, 32, 59], "project": [3, 22, 23, 25, 26, 32, 37, 38, 40, 41, 45, 46, 49, 112, 653, 680, 812, 833, 835, 836, 839, 840, 841, 842, 845, 846, 847, 865, 872, 877, 879, 884], "resnet": [3, 8, 9, 25, 26, 32, 45, 879, 880], "video": [4, 12, 20, 22, 25, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 46, 833, 834, 839, 840, 841, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 873], "tutori": [4, 8, 9, 10, 11, 12, 20, 22, 24, 25, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 46, 833, 841, 862, 873], "written": [4, 5, 6, 7, 8, 9, 24, 34, 44, 45, 46, 59, 72, 393, 488, 840, 844, 845, 853, 856, 857, 861, 862, 866, 870, 871, 872, 879, 881, 884], "imag": [4, 5, 8, 9, 10, 11, 20, 21, 25, 26, 28, 40, 45, 46, 59, 60, 61, 62, 63, 64, 71, 75, 93, 94, 98, 116, 143, 235, 236, 237, 238, 241, 244, 253, 256, 258, 260, 269, 270, 271, 276, 278, 291, 298, 299, 301, 302, 306, 390, 409, 410, 426, 427, 428, 430, 561, 646, 649, 651, 653, 655, 666, 667, 668, 669, 670, 673, 674, 675, 716, 812, 833, 840, 855, 868, 873, 879, 880, 884], "classif": [4, 5, 22, 23, 27, 59, 884], "three": [4, 5, 6, 7, 32, 38, 50, 51, 61, 71, 154, 327, 384, 393, 479, 646, 840, 841, 848, 849, 850, 852, 862, 865, 868, 871, 885], "major": [4, 5, 6, 7, 661, 767, 850, 851, 863, 865, 872, 884], "ml": [4, 5, 6, 7, 8, 9, 24, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 59, 61, 64, 833, 834, 838, 862, 871, 875, 877, 879, 883, 884, 886], "framework": [4, 5, 6, 7, 10, 11, 15, 16, 17, 28, 30, 34, 35, 36, 37, 38, 40, 41, 46, 47, 48, 49, 50, 52, 59, 61, 63, 66, 72, 185, 207, 217, 220, 231, 559, 575, 579, 611, 614, 647, 648, 651, 658, 740, 791, 793, 797, 804, 809, 816, 822, 823, 836, 837, 839, 840, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 855, 857, 858, 859, 861, 862, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886], "sinc": [4, 5, 12, 13, 22, 23, 24, 40, 41, 45, 46, 59, 61, 71, 94, 112, 387, 835, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 854, 861, 862, 872, 884], "automat": [4, 5, 12, 13, 16, 17, 22, 23, 24, 41, 45, 46, 51, 839, 840, 841, 843, 846, 847, 849, 850, 856, 858, 861, 865, 868, 874, 876, 884], "sure": [4, 5, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 45, 59, 836, 839, 840, 841, 844, 849, 854, 855, 862, 863, 865, 868], "enabl": [4, 5, 6, 7, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 38, 41, 60, 71, 76, 88, 99, 117, 390, 392, 413, 471, 596, 640, 651, 652, 654, 697, 814, 832, 833, 840, 841, 842, 845, 848, 850, 858, 859, 860, 861, 862, 865, 866, 870, 871, 872, 874, 877, 880, 884, 885, 886], "dm": [4, 5, 6, 7, 12, 13, 20, 21, 25, 26, 45, 46, 57, 59], "haiku": [4, 5, 6, 7, 12, 13, 20, 21, 25, 26, 41, 45, 46, 57, 59, 63, 809, 833, 879, 884], "exit": [4, 12, 22, 24, 45, 46, 851], "download": [4, 5, 8, 9, 10, 11, 22, 23, 24, 28, 30, 45, 46, 60, 61, 64, 835, 840, 847, 865, 879, 880], "imagenet": [4, 5, 8, 9, 24, 30, 60, 62, 833], "class": [4, 5, 8, 9, 10, 11, 12, 13, 15, 22, 23, 24, 27, 28, 30, 34, 44, 45, 46, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 149, 158, 164, 180, 183, 196, 198, 199, 258, 295, 353, 375, 387, 401, 402, 410, 411, 444, 544, 545, 552, 561, 565, 578, 588, 611, 646, 647, 648, 649, 651, 653, 654, 655, 658, 659, 674, 679, 683, 689, 699, 703, 704, 706, 713, 732, 739, 750, 757, 772, 779, 783, 784, 793, 794, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 827, 832, 839, 846, 847, 848, 850, 851, 852, 853, 857, 859, 860, 863, 864, 865, 868, 870, 871, 874, 878, 879, 880, 881, 884, 885], "wget": [4, 5, 8, 9, 12, 13, 22, 23, 59, 60, 63, 840], "raw": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 25, 26, 40, 45, 46, 59, 62, 63, 88, 833, 853, 879, 885], "githubusercont": [4, 5, 8, 9, 12, 13, 22, 23, 59, 63], "hub": [4, 5, 8, 9, 12, 13, 22, 23, 59, 62, 64], "master": [4, 5, 12, 13, 22, 23, 35, 36, 37, 47, 48, 49, 50, 51, 52, 59, 61, 62, 63, 836, 849, 884], "imagenet_class": [4, 5, 22, 23], "categori": [4, 5, 8, 9, 22, 23, 839, 844, 845, 848, 850, 854, 862, 866], "strip": [4, 5, 22, 23, 36, 48], "readlin": [4, 5, 22, 23, 60], "cat": [4, 5, 10, 11, 22, 23, 60, 863, 868, 870, 871, 879, 880], "jpg": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 25, 26, 40, 45, 46, 61, 62, 833, 879], "filenam": [4, 5, 12, 13, 22, 23, 24, 45, 46, 59, 61, 64, 72, 814, 821], "import": [4, 5, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 62, 63, 64, 71, 82, 86, 90, 94, 109, 209, 210, 214, 226, 322, 402, 538, 573, 589, 648, 651, 655, 657, 662, 716, 736, 737, 772, 804, 818, 822, 823, 833, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 850, 851, 852, 853, 856, 859, 860, 861, 862, 863, 864, 865, 866, 870, 871, 872, 873, 879, 880, 882, 883, 884], "devic": [4, 5, 8, 9, 10, 11, 12, 16, 17, 20, 21, 22, 23, 24, 25, 26, 60, 61, 64, 67, 71, 80, 88, 90, 94, 103, 116, 119, 120, 121, 140, 141, 142, 145, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 234, 327, 328, 343, 344, 384, 397, 487, 524, 525, 527, 528, 552, 566, 567, 646, 651, 660, 758, 759, 760, 761, 791, 793, 794, 809, 811, 812, 813, 814, 815, 816, 817, 819, 832, 841, 843, 846, 850, 854, 858, 859, 863, 865, 866, 868, 870, 872, 874, 884], "torchvis": [4, 5, 8, 9, 20, 21, 22, 23, 24, 59], "transform": [4, 5, 6, 7, 8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 40, 45, 46, 59, 60, 62, 71, 75, 94, 98, 390, 391, 412, 413, 418, 419, 422, 423, 424, 434, 435, 438, 455, 653, 677, 796, 799, 812, 833, 859, 865, 874, 879, 880, 884, 885], "pil": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 25, 26, 40, 45, 46, 60, 61, 62, 833, 879], "time": [4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 20, 21, 24, 25, 26, 41, 45, 46, 51, 59, 61, 62, 63, 71, 73, 76, 82, 94, 96, 105, 111, 112, 149, 356, 387, 390, 391, 393, 402, 419, 424, 436, 438, 459, 466, 499, 506, 538, 632, 637, 646, 652, 653, 654, 656, 657, 661, 662, 676, 679, 694, 732, 735, 736, 737, 764, 765, 769, 770, 812, 813, 814, 832, 839, 840, 841, 844, 846, 848, 849, 850, 852, 855, 857, 858, 859, 861, 862, 865, 866, 870, 871, 872, 873, 876, 879, 880, 884, 885], "filterwarn": [4, 5, 6, 7, 24], "ignor": [4, 5, 6, 7, 24, 58, 66, 67, 71, 88, 94, 154, 390, 391, 393, 402, 414, 415, 416, 445, 453, 461, 502, 503, 507, 546, 646, 653, 658, 680, 749, 750, 816, 840, 847, 849, 852, 865, 872], "compos": [4, 5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 45, 46, 59, 71, 94, 390, 404, 405, 406, 407, 840, 848, 862, 865, 880, 882, 884], "resiz": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 59, 60, 71, 94, 390, 426, 868], "centercrop": [4, 5, 22, 23, 24], "224": [4, 5, 8, 9, 10, 11, 22, 23, 24, 28, 30, 45, 46, 59, 60, 62, 833, 879], "totensor": [4, 5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 59], "485": [4, 5, 22, 23, 24, 59], "456": [4, 5, 22, 23, 24, 59, 865], "406": [4, 5, 22, 23, 24, 59, 71, 94, 412, 556, 651], "229": [4, 5, 22, 23, 24, 59, 294, 649], "225": [4, 5, 22, 23, 24, 59, 61, 249, 649], "torch_img": [4, 5, 12, 13, 22, 23], "unsqueez": [4, 5, 12, 13, 20, 21, 22, 23], "img": [4, 5, 12, 13, 22, 23, 40, 45, 46, 59, 60, 61, 63, 833, 879], "ipython": [4, 5, 12, 13, 22, 23, 38, 40, 41, 45, 46, 64], "displai": [4, 5, 12, 13, 22, 23, 24, 40, 45, 46, 59, 60, 61, 63, 64, 840, 847, 849, 854, 865], "end": [4, 5, 12, 13, 24, 59, 60, 71, 94, 140, 243, 299, 368, 387, 390, 392, 393, 438, 467, 489, 499, 502, 503, 646, 649, 828, 840, 841, 846, 849, 855, 861, 866, 868, 872, 886], "set_default_devic": [4, 6, 8, 9, 12, 13, 20, 22, 24, 25, 232, 648, 851], "ivy_model": [4, 5, 6, 7, 12, 13, 22, 23, 62], "ivy_alexnet": [4, 5], "quick": [4, 5, 32, 46, 841, 843, 863], "trace_graph": [4, 5, 6, 7, 12, 13, 22, 23, 36, 37, 38, 39, 45, 46, 48, 49, 50, 51, 52, 53, 62, 814, 871, 878], "moment": [4, 5, 71, 73, 94, 96, 391, 448, 631, 632, 637, 652, 816, 832, 839, 846, 872, 879, 880], "cost": [4, 5, 73, 96, 631, 632, 635, 637, 638, 639, 652, 657, 735, 736, 737, 828, 850, 868], "arg": [4, 5, 8, 9, 12, 13, 16, 17, 18, 20, 21, 22, 23, 24, 28, 30, 38, 39, 41, 45, 46, 50, 51, 52, 63, 66, 88, 110, 120, 136, 218, 228, 617, 645, 646, 648, 651, 791, 793, 808, 809, 812, 813, 814, 819, 822, 827, 832, 833, 845, 850, 851, 854, 860, 861, 862, 868, 870, 879, 880, 882], "asarrai": [4, 5, 6, 7, 12, 13, 20, 21, 22, 23, 60, 67, 71, 72, 83, 90, 94, 95, 106, 141, 400, 530, 531, 561, 572, 576, 577, 607, 608, 609, 646, 651, 653, 662, 663, 667, 770, 774, 854, 859, 862, 863], "cuda": [4, 5, 6, 8, 9, 10, 11, 12, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 34, 45, 60, 61, 64, 67, 71, 80, 90, 94, 103, 152, 153, 156, 208, 209, 210, 226, 397, 524, 525, 527, 528, 646, 648, 654, 660, 705, 758, 759, 760, 761, 811, 812, 813, 814, 815, 816, 817, 832, 870, 871, 872, 874], "output": [4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 22, 23, 24, 34, 40, 41, 43, 45, 46, 58, 59, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 167, 169, 194, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 337, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 387, 389, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 432, 434, 435, 436, 438, 439, 441, 442, 443, 445, 447, 450, 451, 453, 456, 457, 458, 459, 461, 462, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 482, 483, 484, 487, 489, 490, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 555, 556, 557, 561, 562, 563, 565, 569, 578, 585, 592, 593, 594, 618, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 751, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 796, 811, 812, 827, 828, 833, 835, 840, 841, 843, 844, 845, 847, 848, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 870, 872, 874, 879, 880, 885], "softmax": [4, 5, 8, 9, 10, 11, 22, 23, 28, 41, 45, 46, 61, 65, 75, 86, 87, 98, 392, 469, 643, 653, 680, 683, 808, 833], "pass": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 41, 43, 45, 46, 52, 58, 59, 61, 63, 64, 70, 71, 86, 88, 93, 94, 109, 117, 136, 137, 139, 172, 194, 209, 228, 243, 289, 390, 392, 393, 396, 397, 402, 436, 469, 489, 517, 519, 524, 544, 545, 578, 645, 647, 648, 649, 651, 657, 735, 736, 791, 793, 797, 804, 809, 813, 814, 816, 817, 822, 827, 832, 833, 837, 839, 841, 844, 845, 846, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 872, 879, 880, 882], "argsort": [4, 5, 22, 23, 83, 106, 663, 775, 862], "descend": [4, 5, 22, 23, 83, 106, 654, 663, 704, 705, 773, 776], "top": [4, 5, 22, 23, 41, 43, 45, 46, 59, 60, 71, 78, 94, 334, 384, 392, 393, 467, 510, 561, 651, 720, 840, 841, 850, 855, 862, 864, 865, 868, 884], "logit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 59, 60, 61, 62, 71, 77, 94, 100, 382, 397, 524, 527, 655, 713, 715, 808, 880], "gather": [4, 5, 22, 23, 59, 71, 72, 94, 95, 345, 346, 347, 384, 569, 571, 651], "to_list": [4, 5, 22, 23, 72, 95, 651], "arrai": [4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 183, 184, 186, 187, 188, 190, 192, 193, 194, 195, 201, 211, 212, 216, 221, 223, 225, 228, 229, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 596, 597, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 744, 745, 746, 747, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 798, 804, 811, 812, 813, 814, 817, 822, 827, 828, 830, 833, 837, 839, 840, 841, 843, 846, 847, 848, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 874, 879, 882, 884, 886], "282": [4, 5, 22, 23], "281": [4, 5, 22, 23, 59, 61], "285": [4, 5, 22, 23, 94], "64773697": [4, 5], "29496649": [4, 5], "04526037": [4, 5], "tiger": [4, 5, 22, 23], "tabbi": [4, 5, 10, 11, 22, 23], "egyptian": [4, 5, 22, 23], "torch_alexnet": [4, 5], "alexnet_weight": [4, 5], "imagenet1k_v1": [4, 5, 22, 23, 24], "dropout": [4, 5, 75, 98, 390, 414, 415, 416, 653, 678, 680, 683, 812], "torch_output": [4, 5, 12, 13, 15, 16, 17, 22, 23], "dim": [4, 5, 22, 23, 61, 71, 88, 90, 94, 156, 328, 384, 390, 393, 408, 418, 419, 420, 423, 431, 489, 512, 646, 653, 666, 673, 674, 679, 798, 812, 850, 862, 863, 868], "torch_class": [4, 5, 22, 23], "torch_logit": [4, 5, 22, 23], "tensor": [4, 5, 6, 7, 8, 9, 16, 17, 20, 21, 22, 23, 24, 25, 26, 28, 30, 34, 35, 38, 39, 41, 43, 45, 46, 47, 51, 57, 59, 67, 70, 71, 72, 75, 76, 77, 78, 80, 84, 88, 90, 93, 94, 95, 98, 99, 100, 101, 103, 107, 110, 144, 152, 153, 156, 162, 178, 194, 286, 287, 317, 334, 338, 339, 340, 341, 342, 343, 352, 375, 382, 384, 387, 390, 391, 392, 393, 402, 403, 409, 410, 413, 417, 426, 427, 428, 429, 436, 438, 440, 447, 448, 449, 450, 453, 455, 457, 459, 460, 463, 465, 466, 467, 469, 472, 473, 489, 492, 497, 500, 501, 502, 503, 504, 507, 512, 513, 544, 549, 592, 593, 646, 647, 649, 651, 653, 654, 655, 656, 660, 664, 676, 679, 680, 695, 706, 713, 726, 728, 758, 781, 812, 822, 828, 832, 833, 845, 846, 850, 851, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 871, 872, 874, 879, 880, 882, 885], "6477": [4, 5], "2950": [4, 5], "0453": [4, 5], "grad_fn": [4, 5, 22, 23, 41, 57, 634, 642, 652], "takebackward0": [4, 5, 22, 23], "great": [4, 5, 10, 11, 12, 13, 841, 865], "simpl": [4, 5, 10, 11, 28, 35, 38, 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 57, 59, 61, 64, 71, 94, 402, 538, 798, 812, 828, 833, 839, 840, 841, 845, 847, 848, 850, 851, 852, 853, 858, 861, 862, 865, 866, 868, 870, 872, 874, 876, 879, 880, 884, 885], "let": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 20, 21, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 40, 41, 43, 44, 45, 46, 47, 48, 50, 51, 52, 57, 59, 60, 62, 64, 72, 84, 95, 235, 236, 237, 238, 241, 244, 253, 256, 258, 260, 269, 270, 271, 276, 278, 291, 299, 301, 302, 306, 568, 569, 649, 651, 654, 664, 708, 781, 783, 784, 785, 786, 833, 839, 842, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 862, 863, 865, 866, 867, 868, 870, 871, 879, 880], "ll": [4, 5, 8, 9, 10, 11, 12, 13, 16, 17, 20, 21, 24, 25, 26, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 833, 834, 836, 837, 839, 840, 841, 842, 847, 852, 855, 856, 860, 861, 879, 880], "try": [4, 5, 8, 9, 10, 11, 24, 35, 47, 57, 60, 64, 88, 617, 651, 811, 822, 833, 839, 840, 841, 844, 845, 848, 849, 850, 854, 856, 861, 863, 870, 872, 882], "tf": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 28, 30, 35, 38, 39, 41, 43, 44, 45, 46, 47, 48, 50, 52, 57, 62, 63, 809, 818, 833, 845, 850, 851, 857, 861, 862, 865, 866, 868, 870, 871, 872, 874, 879, 880, 882, 884], "onc": [4, 5, 8, 9, 12, 13, 45, 46, 57, 59, 76, 80, 99, 103, 228, 391, 444, 648, 654, 660, 689, 690, 691, 704, 758, 839, 840, 841, 848, 849, 850, 851, 852, 855, 856, 861, 862, 865, 868, 870, 872, 880], "set": [4, 5, 10, 11, 16, 17, 28, 30, 36, 45, 46, 48, 51, 59, 60, 61, 62, 63, 66, 71, 72, 75, 76, 81, 83, 84, 88, 94, 95, 98, 99, 104, 106, 107, 129, 132, 139, 160, 162, 196, 197, 198, 199, 200, 211, 224, 225, 226, 227, 228, 243, 343, 355, 371, 373, 378, 384, 387, 388, 390, 391, 392, 393, 402, 413, 434, 438, 442, 446, 449, 467, 472, 473, 489, 499, 503, 510, 538, 543, 544, 545, 546, 547, 548, 550, 554, 561, 573, 578, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 611, 619, 643, 645, 646, 647, 648, 649, 651, 653, 654, 658, 660, 661, 663, 664, 676, 683, 685, 695, 697, 700, 703, 704, 738, 745, 748, 749, 750, 755, 756, 762, 764, 765, 769, 771, 772, 773, 776, 784, 786, 793, 796, 797, 798, 799, 804, 811, 812, 814, 816, 822, 828, 831, 832, 833, 834, 841, 843, 844, 845, 847, 848, 849, 850, 851, 852, 854, 856, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 873, 878, 879, 880, 884, 885], "post": [4, 5, 8, 9, 12, 13, 24, 59, 79, 102, 659, 757, 840, 855, 860], "process": [4, 5, 8, 9, 12, 13, 38, 45, 46, 50, 59, 222, 234, 648, 834, 840, 841, 847, 848, 849, 855, 856, 858, 860, 862, 863, 864, 865, 868, 870, 871, 880, 884, 886], "st": [4, 5, 6, 7, 20, 21, 796, 844, 863, 865], "perf_count": [4, 5, 16, 17, 18, 20, 21], "raw_logit": [4, 5], "latenc": [4, 5, 20, 21], "nn": [4, 5, 8, 9, 10, 11, 12, 13, 18, 19, 30, 41, 44, 45, 46, 59, 63, 154, 646, 818, 833, 858, 863, 868, 870, 871, 879, 885], "direct": [4, 5, 71, 94, 356, 363, 367, 372, 376, 387, 390, 393, 424, 435, 490, 491, 506, 663, 776, 839, 845, 847, 862, 868, 870, 883, 884, 885], "tolist": [4, 5], "652289830999962": [4, 5], "int32": [4, 5, 57, 59, 68, 71, 72, 80, 81, 84, 91, 94, 95, 103, 104, 147, 152, 156, 158, 164, 167, 170, 172, 174, 176, 178, 181, 183, 184, 188, 191, 195, 199, 203, 205, 223, 250, 286, 287, 398, 402, 529, 539, 540, 541, 569, 578, 615, 646, 647, 648, 649, 651, 660, 661, 664, 759, 760, 761, 765, 777, 778, 783, 785, 796, 797, 850, 862, 865, 870], "6477362": [4, 5], "29496726": [4, 5], "04526032": [4, 5], "As": [4, 5, 8, 9, 10, 11, 12, 13, 20, 21, 24, 25, 26, 27, 28, 30, 36, 40, 41, 45, 46, 48, 51, 57, 58, 82, 86, 109, 654, 662, 702, 769, 770, 771, 772, 837, 839, 840, 841, 842, 845, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 868, 872, 879, 880, 882, 884], "ident": [4, 5, 8, 9, 16, 17, 27, 41, 43, 60, 62, 76, 88, 147, 216, 571, 597, 646, 648, 651, 654, 658, 692, 696, 751, 812, 818, 848, 858, 859, 862, 863, 866, 868, 872, 874], "had": [4, 5, 848, 849, 861, 866, 870, 871, 884, 885], "postprocess": [4, 5], "routin": [4, 5, 849, 861, 862, 868, 872, 884], "feed": [4, 5, 228, 648, 880, 884, 885], "carefulli": [4, 5, 293, 649, 811, 862], "rewrit": [4, 5], "easili": [4, 5, 40, 45, 46, 57, 840, 845, 849, 855, 862, 865, 868, 871, 872, 877, 884], "quickest": [4, 5], "particular": [4, 5, 45, 46, 283, 649, 797, 840, 841, 844, 846, 849, 850, 852, 859, 861, 862, 865, 866, 884], "again": [4, 5, 12, 13, 37, 38, 48, 49, 50, 51, 654, 702, 841, 845, 846, 847, 848, 852, 854, 856, 861, 862, 865, 866, 868, 870, 872], "speed": [4, 5, 20, 21, 25, 26, 27, 45, 46, 59, 64, 72, 95, 585, 651, 865], "repeat": [4, 5, 6, 7, 37, 49, 71, 72, 78, 94, 95, 101, 390, 393, 402, 419, 424, 488, 538, 563, 651, 656, 657, 732, 736, 737, 827, 841, 845, 846, 852, 853, 861, 865], "previou": [4, 5, 27, 36, 37, 38, 40, 48, 49, 50, 52, 73, 94, 96, 202, 203, 204, 205, 206, 379, 389, 390, 436, 618, 620, 621, 622, 623, 625, 626, 628, 632, 637, 647, 651, 652, 811, 831, 840, 841, 844, 846, 849, 851, 857, 862, 865, 868, 872], "trace": [4, 5, 6, 7, 8, 9, 12, 13, 20, 21, 22, 23, 24, 25, 26, 32, 33, 37, 40, 45, 48, 50, 51, 63, 72, 76, 88, 95, 99, 580, 581, 584, 595, 604, 619, 627, 651, 654, 793, 804, 814, 816, 832, 833, 844, 848, 850, 862, 867, 868, 871, 872, 878, 879, 880, 885], "026875037000081647": [4, 5], "overrid": [4, 5, 12, 13, 51, 60, 67, 71, 90, 94, 156, 402, 538, 646, 845, 847], "prealloc": [4, 5, 12, 13], "temporari": [4, 5, 12, 13, 605, 628, 651, 828, 850, 867], "fix": [4, 5, 12, 13, 61, 71, 94, 111, 112, 387, 390, 391, 436, 466, 653, 680, 833, 837, 840, 841, 844, 850, 856, 865, 866], "until": [4, 5, 12, 13, 828, 841, 861, 870, 872, 880], "o": [4, 5, 12, 13, 24, 58, 59, 60, 61, 63, 588, 651, 653, 680, 833, 840, 843, 849, 871, 873], "environ": [4, 5, 12, 13, 25, 26, 38, 40, 41, 60, 63, 833, 834, 841, 873, 876, 884, 886], "xla_python_client_alloc": [4, 5, 12, 13], "platform": [4, 5, 8, 9, 12, 13, 24, 27, 38, 41, 835, 838, 840, 847, 886], "jit": [4, 5, 20, 21, 25, 26, 45, 48, 871, 872, 880, 884], "img_jax": [4, 5, 12, 13], "device_put": [4, 5, 20, 21], "warm": [4, 5], "_": [4, 5, 16, 17, 18, 20, 21, 25, 26, 27, 45, 58, 59, 70, 71, 88, 93, 94, 96, 112, 170, 258, 260, 268, 269, 284, 350, 351, 387, 390, 393, 402, 434, 463, 466, 508, 538, 561, 631, 632, 647, 649, 651, 652, 654, 656, 658, 664, 702, 703, 705, 734, 745, 784, 841, 849, 850, 853, 861, 865], "0022192720000475674": [4, 5], "64773613": [4, 5], "29496723": [4, 5], "exact": [4, 5, 71, 87, 88, 124, 390, 392, 426, 431, 471, 472, 662, 769, 771, 798, 808, 840, 841, 844, 852, 871], "note": [4, 5, 8, 9, 12, 13, 24, 27, 45, 46, 51, 60, 61, 62, 71, 72, 76, 78, 82, 94, 99, 101, 111, 149, 162, 194, 262, 297, 298, 305, 343, 344, 364, 384, 387, 390, 391, 393, 413, 444, 449, 459, 460, 466, 489, 508, 647, 649, 653, 654, 656, 662, 664, 680, 689, 690, 701, 702, 704, 726, 730, 770, 772, 781, 812, 828, 832, 837, 839, 840, 841, 845, 850, 852, 853, 856, 861, 862, 863, 865, 866, 868], "were": [4, 5, 12, 13, 62, 88, 91, 183, 187, 188, 262, 649, 653, 680, 839, 840, 841, 850, 854, 856, 860, 861, 863, 865, 866, 868, 870, 880, 884, 885], "function": [4, 5, 8, 9, 10, 11, 15, 16, 17, 18, 24, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 52, 53, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 180, 181, 182, 183, 186, 187, 188, 190, 194, 195, 212, 214, 215, 224, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 588, 591, 592, 593, 596, 597, 600, 602, 604, 607, 608, 609, 610, 611, 613, 615, 616, 617, 623, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 748, 749, 750, 751, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 794, 796, 797, 798, 799, 804, 808, 811, 814, 818, 822, 823, 830, 832, 837, 840, 841, 843, 844, 845, 846, 847, 849, 852, 853, 855, 861, 864, 871, 874, 877, 878, 880, 881, 882, 883, 884, 885, 886], "dog": [4, 5], "006431100999861883": [4, 5], "258": [4, 5, 653, 668, 670], "104": [4, 5, 84, 654, 664, 699, 779], "259": [4, 5], "72447652": [4, 5], "13937832": [4, 5], "05874982": [4, 5], "samoi": [4, 5], "wallabi": [4, 5], "pomeranian": [4, 5], "incorrect": [4, 5, 849], "predict": [4, 5, 8, 9, 10, 11, 12, 13, 22, 23, 24, 27, 59, 60, 61, 62, 71, 77, 94, 100, 392, 468, 471, 474, 655, 713, 714, 715, 833, 850], "down": [4, 5, 36, 48, 62, 71, 94, 390, 393, 426, 491, 833, 840, 865, 874, 884], "itself": [4, 5, 10, 11, 38, 50, 70, 111, 289, 551, 617, 649, 651, 658, 750, 828, 837, 840, 841, 844, 847, 848, 849, 850, 851, 854, 855, 856, 861, 862, 872, 880, 884, 885], "version": [4, 5, 8, 9, 16, 17, 27, 40, 41, 48, 59, 60, 61, 64, 65, 71, 94, 111, 124, 306, 355, 357, 387, 402, 543, 548, 630, 649, 651, 654, 690, 691, 793, 818, 822, 823, 833, 840, 841, 847, 849, 850, 853, 861, 863, 870, 877, 879], "004749261999904775": [4, 5], "7245": [4, 5], "1394": [4, 5], "0587": [4, 5], "promis": [4, 5, 10, 11], "sourc": [4, 5, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 30, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 797, 798, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 839, 840, 841, 844, 845, 847, 848, 849, 862, 864, 876, 878, 879, 881, 882, 884, 885, 886], "modul": [4, 5, 8, 9, 12, 13, 20, 21, 25, 26, 28, 30, 34, 38, 40, 41, 44, 45, 46, 47, 51, 57, 58, 59, 61, 62, 63, 86, 88, 109, 117, 383, 385, 386, 394, 395, 399, 589, 651, 665, 789, 793, 808, 809, 810, 812, 813, 815, 817, 818, 821, 822, 832, 835, 840, 845, 846, 847, 854, 858, 861, 862, 864, 865, 870, 871, 872, 878, 880, 881, 882, 884, 885], "__init__": [4, 5, 12, 13, 28, 30, 44, 45, 46, 57, 58, 59, 61, 88, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 794, 801, 802, 803, 808, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 825, 827, 829, 832, 833, 839, 845, 846, 850, 854, 862, 866, 871, 879], "self": [4, 5, 8, 9, 10, 11, 12, 13, 28, 30, 44, 45, 46, 57, 58, 59, 61, 63, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 178, 180, 183, 186, 187, 188, 190, 192, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 653, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 816, 818, 827, 833, 841, 845, 848, 854, 862, 863, 871, 879], "num_class": [4, 5, 28, 30, 45, 46, 59, 61, 63, 833, 870, 879], "1000": [4, 5, 8, 9, 16, 17, 18, 20, 21, 22, 23, 24, 28, 45, 46, 59, 60, 61, 62, 64, 67, 90, 153, 646, 833, 879], "v": [4, 5, 6, 7, 12, 13, 32, 33, 36, 45, 46, 48, 51, 52, 57, 60, 61, 71, 75, 83, 90, 94, 98, 106, 153, 253, 258, 260, 301, 391, 393, 445, 455, 462, 463, 488, 649, 653, 657, 663, 680, 683, 736, 737, 775, 793, 812, 813, 814, 815, 816, 817, 835, 840, 841, 843, 847, 855, 870, 883], "_build": [4, 5, 12, 13, 813, 814], "kwarg": [4, 5, 6, 7, 10, 11, 12, 13, 25, 26, 27, 45, 59, 63, 66, 71, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 117, 120, 218, 393, 499, 588, 617, 646, 648, 651, 791, 793, 808, 809, 812, 813, 814, 822, 832, 833, 845, 850, 851, 854, 858, 861, 862, 868, 870, 879, 880, 882], "featur": [4, 5, 10, 11, 25, 26, 27, 28, 30, 32, 34, 44, 45, 46, 59, 63, 71, 94, 390, 404, 406, 407, 414, 415, 416, 811, 812, 832, 833, 839, 840, 841, 845, 846, 849, 850, 857, 866, 868, 872, 876, 877, 879, 884, 885, 886], "sequenti": [4, 5, 12, 13, 16, 17, 22, 23, 24, 41, 45, 46, 61, 847, 848, 879], "conv2d": [4, 5, 12, 13, 22, 23, 24, 41, 44, 45, 46, 61, 64, 75, 98, 653, 670, 812, 825], "64": [4, 5, 12, 13, 22, 23, 24, 57, 59, 60, 61, 64, 70, 71, 75, 93, 94, 95, 98, 99, 103, 107, 117, 179, 249, 259, 293, 302, 303, 361, 387, 390, 412, 422, 561, 562, 609, 637, 647, 649, 651, 652, 653, 654, 658, 664, 668, 670, 672, 674, 675, 696, 699, 709, 746, 750, 760, 779, 783, 840, 850], "data_format": [4, 5, 61, 71, 75, 94, 98, 390, 396, 405, 409, 410, 411, 414, 415, 416, 427, 428, 429, 430, 432, 517, 518, 519, 522, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 796, 812, 815], "nchw": [4, 5, 61, 71, 75, 94, 98, 390, 396, 405, 410, 415, 428, 432, 522, 653, 666, 669, 670, 673, 674, 675, 812], "relu": [4, 5, 12, 13, 22, 23, 24, 41, 44, 45, 46, 57, 64, 65, 71, 86, 87, 94, 126, 317, 318, 326, 382, 643, 808, 863], "maxpool2d": [4, 5, 12, 13, 22, 23, 24, 59, 812, 833], "192": [4, 5, 61, 796, 827], "384": [4, 5, 96, 631, 652, 658, 738], "avgpool": [4, 5, 22, 23, 24], "adaptiveavgpool2d": [4, 5, 22, 23, 24, 812], "classifi": [4, 5, 10, 11, 24, 27, 28, 30, 45, 46, 59, 61, 62, 833, 839, 879, 880], "prob": [4, 5, 8, 9, 10, 11, 61, 71, 75, 94, 98, 103, 390, 397, 414, 415, 416, 524, 653, 660, 676, 758, 812], "4096": [4, 5], "_forward": [4, 5, 12, 13, 20, 21, 25, 26, 45, 46, 57, 58, 61, 853, 871], "invalid": [5, 71, 85, 94, 108, 393, 508, 654, 656, 665, 710, 722, 787, 788, 796, 840, 850], "distribut": [5, 64, 71, 77, 80, 94, 100, 103, 390, 391, 392, 397, 414, 415, 416, 449, 460, 466, 469, 471, 472, 474, 524, 525, 526, 527, 528, 655, 660, 713, 714, 715, 758, 759, 760, 761, 763, 811, 812, 839, 840, 849, 851, 872, 884], "ocutil": 5, "opt": [5, 8, 9, 10, 11, 15, 38, 40, 41, 63, 840, 846, 850, 861, 865, 868], "homebrew": [5, 15], "site": [5, 15, 38, 40, 41, 885], "resolv": [5, 8, 9, 22, 23, 59, 61, 71, 84, 262, 402, 539, 540, 649, 656, 664, 722, 777, 778, 783, 785, 841, 847, 850, 856, 870], "account": [5, 51, 61, 63, 71, 78, 94, 101, 302, 393, 489, 649, 656, 726, 811, 827, 840, 849, 853, 862, 866, 880], "behaviour": [5, 25, 26, 38, 40, 41, 126, 129, 289, 643, 649, 838, 841, 843, 844, 845, 848, 850, 851, 853, 854, 857, 858, 859, 861, 862, 865, 866], "conflict": [5, 25, 26, 38, 40, 41, 51, 840, 841, 849, 862], "maco": 5, "incompat": [5, 169, 647], "remot": [5, 840, 844, 855, 856], "enumer": [5, 8, 9, 10, 11, 12, 13, 24, 59, 61, 801], "compress": 5, "156": [5, 293, 649, 796], "delta": [5, 71, 73, 94, 96, 392, 468, 631, 652], "37": [5, 24, 27, 38, 40, 41, 57, 65, 70, 71, 87, 93, 94, 98, 116, 127, 241, 249, 298, 301, 305, 398, 433, 529, 649, 653, 654, 658, 660, 677, 696, 746, 760, 849], "reus": [5, 59, 67, 90, 94, 101, 142, 477, 478, 485, 487, 489, 490, 491, 498, 515, 722, 723, 724, 726, 728, 729, 731, 733, 854, 865], "pack": [5, 653, 678], "83": [5, 22, 23, 24, 27, 57, 76, 98, 103, 302, 390, 402, 412, 422, 433, 539, 649, 653, 654, 677, 692, 760], "mib": 5, "user": [5, 8, 9, 10, 11, 15, 24, 25, 26, 32, 38, 40, 41, 45, 60, 61, 63, 289, 306, 393, 499, 596, 649, 651, 812, 813, 814, 827, 833, 840, 841, 843, 845, 846, 848, 849, 850, 851, 854, 859, 860, 861, 862, 865, 867, 868, 869, 870, 872, 873, 884], "samuelarmstrong": [5, 15], "examples_and_demos_cpu": 5, "metadata": [5, 59, 61, 64, 861], "setup": [5, 59, 61, 64, 840, 841, 847, 849, 855], "satisfi": [5, 24, 38, 40, 41, 59, 61, 64, 71, 390, 391, 413, 445, 850, 852], "scipi": [5, 839], "einop": [5, 38, 40, 41, 59, 61, 64, 72, 95, 561, 562, 563, 651, 850], "psutil": [5, 38, 40, 41, 59, 61, 64], "termcolor": [5, 38, 40, 41, 59, 61, 64], "colorama": [5, 38, 40, 41, 59, 61], "nvidia": [5, 20, 21, 24, 25, 26, 38, 40, 41, 59, 61, 64], "535": [5, 38, 40, 41, 65, 87, 132, 643, 854], "133": [5, 8, 9, 22, 23, 59, 75, 677], "diskcach": [5, 38, 40, 41, 59], "googl": [5, 6, 7, 38, 40, 41, 59, 60, 61, 63, 849], "auth": [5, 38, 40, 41], "urllib3": [5, 38, 40, 41, 59], "request": [5, 8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 38, 40, 41, 45, 46, 59, 62, 71, 219, 397, 528, 648, 832, 833, 834, 836, 839, 852, 856, 866, 868, 879], "pyvi": [5, 38, 40, 41, 45, 46], "dill": [5, 38, 40, 41, 59], "astunpars": [5, 38, 40, 41], "cloudpickl": [5, 38, 40, 41], "gast": [5, 38, 40, 41], "wheel": [5, 38, 40, 41, 59, 61, 64], "43": [5, 6, 7, 27, 57, 59, 61, 71, 94, 103, 117, 249, 390, 391, 402, 411, 443, 539, 649, 660, 661, 760, 761, 768], "six": [5, 38, 40, 41, 59, 64, 840, 868], "cffi": 5, "cachetool": [5, 38, 40, 41], "pyasn1": [5, 38, 40, 41], "rsa": [5, 38, 40, 41], "jinja2": [5, 24, 38, 40, 41], "jsonpickl": [5, 38, 40, 41], "networkx": [5, 24, 38, 40, 41, 64], "charset": [5, 38, 40, 41, 59], "idna": [5, 38, 40, 41, 59], "certifi": [5, 38, 40, 41, 59], "2017": [5, 38, 40, 41, 59, 653, 680], "2024": [5, 8, 9], "pycpars": 5, "decor": [5, 32, 33, 38, 40, 41, 51, 63, 555, 651, 796, 798, 804, 837, 844, 845, 848, 850, 851, 855, 858, 861, 862, 863, 868], "jedi": [5, 38, 40, 41], "inlin": [5, 38, 40, 41, 847], "prompt": [5, 38, 40, 41, 839, 841], "toolkit": [5, 38, 40, 41, 884, 885], "41": [5, 27, 38, 40, 41, 57, 59, 64, 70, 71, 76, 93, 94, 95, 98, 99, 127, 242, 250, 257, 288, 302, 390, 391, 398, 402, 410, 428, 433, 455, 529, 539, 556, 643, 649, 651, 654, 664, 684, 692, 785], "pygment": [5, 38, 40, 41], "stack": [5, 27, 36, 38, 40, 41, 48, 57, 61, 71, 76, 78, 88, 94, 99, 101, 116, 160, 161, 344, 384, 391, 393, 444, 483, 484, 486, 495, 500, 516, 595, 604, 627, 646, 651, 654, 656, 658, 686, 688, 689, 690, 691, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 708, 738, 748, 749, 812, 833, 838, 844, 861, 870, 883], "traitlet": [5, 38, 40, 41], "exceptiongroup": [5, 38, 40, 41], "pexpect": [5, 38, 40, 41], "markupsaf": [5, 24, 38, 40, 41], "parso": [5, 38, 40, 41], "ptyprocess": [5, 38, 40, 41], "wcwidth": [5, 38, 40, 41], "execut": [5, 8, 9, 20, 21, 25, 26, 34, 35, 36, 38, 40, 41, 45, 46, 48, 50, 53, 60, 62, 64, 137, 139, 617, 645, 648, 651, 840, 841, 847, 848, 849, 850, 851, 852, 854, 858, 859, 861, 865, 868, 871, 872, 874, 880, 884, 885], "asttoken": [5, 38, 40, 41], "pure": [5, 38, 40, 41, 51, 61, 853, 857, 862, 868, 870, 872, 884], "eval": [5, 6, 7, 8, 9, 12, 13, 22, 23, 24, 30, 38, 40, 41, 653, 678, 814, 818], "collect": [5, 24, 49, 59, 61, 63, 64, 66, 88, 89, 643, 648, 651, 652, 653, 655, 658, 659, 660, 751, 808, 812, 813, 814, 815, 816, 840, 849, 854, 855, 859, 860, 863, 865, 884], "creat": [5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 25, 26, 34, 35, 36, 38, 40, 41, 45, 46, 47, 48, 50, 51, 52, 59, 60, 61, 63, 64, 67, 70, 71, 80, 88, 90, 93, 94, 99, 103, 112, 140, 141, 142, 145, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 162, 163, 164, 289, 327, 328, 338, 340, 342, 343, 384, 390, 391, 393, 397, 409, 410, 411, 432, 449, 460, 466, 475, 483, 499, 505, 524, 525, 526, 527, 528, 596, 613, 630, 642, 646, 649, 651, 652, 660, 699, 758, 759, 760, 761, 763, 793, 804, 809, 811, 812, 813, 814, 815, 816, 817, 833, 834, 836, 840, 841, 842, 845, 846, 847, 849, 850, 851, 854, 858, 859, 861, 862, 863, 865, 868, 871, 873, 874, 879, 880, 882, 884, 885], "py3": [5, 24, 59, 61, 64], "whl": [5, 24, 59, 60, 61, 64], "76449": 5, "sha256": [5, 59, 61, 64], "4ef86060439480c8cdd692e30d269e68540c3728a30c4a372981b0c5c0cbc214": 5, "store": [5, 59, 61, 64, 68, 71, 72, 76, 78, 88, 91, 94, 95, 99, 101, 169, 390, 391, 435, 443, 447, 461, 465, 565, 651, 654, 656, 708, 728, 793, 794, 812, 813, 814, 835, 841, 845, 846, 848, 853, 859, 861, 862, 863, 871, 874, 880], "directori": [5, 8, 9, 24, 59, 60, 61, 64, 605, 628, 648, 651, 832, 835, 839, 840, 841, 847, 849, 855, 862, 865, 871, 873], "privat": [5, 816, 862, 865], "var": [5, 15, 58, 84, 107, 109, 136, 137, 138, 139, 645, 657, 664, 735, 736, 819, 840, 852, 871], "3x": [5, 20, 21], "7zt1qbl12mn7zq12fzzv6xh80000gn": 5, "ephem": [5, 59, 61], "abb7vdwj": 5, "01": [5, 10, 11, 22, 23, 38, 41, 61, 67, 71, 72, 73, 76, 94, 95, 96, 99, 103, 153, 280, 298, 299, 327, 333, 358, 359, 366, 384, 390, 412, 422, 423, 565, 608, 609, 631, 632, 637, 646, 649, 651, 652, 654, 657, 660, 691, 701, 736, 737, 760, 761, 796, 846], "2d": [5, 45, 46, 61, 71, 94, 111, 328, 384, 390, 391, 393, 402, 405, 406, 414, 415, 457, 464, 478, 488, 538, 812, 832, 862, 868], "adc983ab61e1210a8d2ee2a20d1fc3d7c3e082fcdeabe25595": 5, "successfulli": [5, 8, 9, 10, 11, 24, 59, 61, 64, 814, 836, 840, 845], "built": [5, 43, 45, 46, 51, 59, 61, 64, 140, 646, 812, 813, 814, 840, 841, 847, 848, 865, 873, 880, 884], "zsh": 5, "found": [5, 10, 11, 59, 61, 62, 64, 76, 78, 82, 88, 94, 99, 101, 105, 117, 216, 402, 484, 539, 648, 658, 688, 694, 730, 749, 769, 828, 836, 839, 840, 841, 845, 846, 847, 848, 850, 851, 853, 856, 859, 861, 862], "filenotfounderror": 5, "traceback": [5, 15, 865], "recent": [5, 15, 61, 831, 840, 841, 865], "line": [5, 8, 9, 15, 20, 21, 25, 26, 27, 36, 37, 40, 45, 46, 48, 49, 60, 61, 305, 649, 832, 833, 840, 844, 845, 849, 851, 852, 854, 862, 865, 868, 879], "get_ipython": 5, "system": [5, 25, 26, 38, 40, 41, 61, 391, 461, 654, 703, 796, 833, 840, 841, 842, 846, 849, 850, 872, 879, 884], "34": [5, 15, 22, 23, 27, 57, 59, 93, 94, 95, 103, 183, 253, 280, 301, 390, 402, 433, 545, 561, 562, 647, 649, 651, 653, 654, 660, 677, 696, 760, 761, 851], "interactiveshel": 5, "324": [5, 844], "_modified_open": 5, "317": 5, "318": 5, "valueerror": [5, 67, 71, 78, 90, 94, 101, 105, 142, 390, 392, 424, 435, 472, 477, 478, 485, 487, 489, 490, 491, 498, 515, 656, 722, 723, 724, 726, 728, 729, 731, 733, 772, 798, 829, 854], "319": 5, "won": [5, 840, 841, 848, 850, 873, 880, 882], "fd": [5, 75, 98, 653, 666, 671, 672, 673, 674], "320": 5, "like": [5, 6, 7, 8, 9, 10, 11, 20, 21, 24, 25, 26, 35, 36, 37, 39, 45, 47, 48, 49, 50, 51, 52, 62, 64, 67, 70, 71, 78, 90, 93, 94, 98, 101, 106, 153, 171, 194, 239, 259, 265, 268, 281, 299, 356, 361, 373, 387, 390, 391, 392, 393, 400, 402, 433, 435, 444, 469, 478, 479, 488, 489, 530, 531, 548, 646, 647, 649, 654, 656, 660, 663, 689, 726, 761, 774, 828, 833, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 876, 879, 880, 884, 886], "crash": 5, "know": [5, 38, 50, 51, 52, 82, 662, 769, 770, 771, 772, 833, 835, 839, 841, 851, 859, 863, 865, 868, 882, 885], "what": [5, 8, 9, 20, 21, 25, 26, 32, 37, 45, 46, 49, 50, 53, 58, 59, 390, 424, 435, 798, 828, 839, 841, 843, 848, 849, 852, 853, 856, 857, 859, 860, 861, 862, 863, 865, 869, 872, 877, 885], "321": 5, "builtin": [5, 22, 23, 840], "322": 5, "io_open": 5, "errno": 5, "No": [5, 8, 9, 45, 46, 59, 71, 77, 94, 100, 392, 469, 470, 471, 473, 474, 655, 713, 841, 849, 850, 884], "kernel": [5, 71, 75, 94, 98, 390, 409, 410, 411, 427, 428, 429, 430, 653, 679, 870, 872, 884], "while": [5, 8, 9, 10, 11, 24, 27, 45, 46, 53, 71, 75, 88, 94, 98, 111, 112, 117, 139, 156, 194, 262, 263, 283, 284, 362, 387, 390, 391, 393, 435, 436, 458, 502, 503, 537, 645, 646, 647, 649, 653, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 769, 781, 784, 794, 833, 837, 839, 840, 841, 845, 846, 847, 849, 850, 851, 852, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 870, 872, 873, 880, 884, 886], "review": [5, 71, 94, 391, 466, 835, 836, 839, 841, 847, 849, 852, 862, 866], "identifi": [5, 71, 94, 345, 346, 347, 384, 839, 844, 849, 850, 865, 868], "caus": [5, 27, 392, 469, 840, 841, 844, 846, 848, 849, 850, 852, 861, 863, 865, 872], "failur": [5, 841, 849, 863, 865], "href": 5, "aka": 5, "vscodejupyterkernelcrash": 5, "more": [5, 8, 9, 10, 11, 24, 28, 31, 34, 35, 36, 37, 41, 43, 44, 45, 46, 47, 48, 57, 59, 60, 61, 65, 70, 71, 76, 78, 82, 87, 93, 94, 99, 101, 105, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 168, 260, 262, 278, 293, 306, 310, 315, 316, 318, 378, 382, 388, 391, 392, 393, 439, 441, 453, 455, 458, 471, 477, 478, 479, 484, 506, 596, 643, 646, 647, 649, 651, 654, 656, 662, 688, 694, 697, 700, 702, 704, 711, 723, 730, 769, 770, 771, 772, 798, 808, 828, 833, 835, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 877, 879, 882, 884, 885, 886], "viewoutput": 5, "log": [5, 8, 9, 24, 67, 70, 71, 76, 90, 93, 94, 99, 132, 153, 278, 280, 293, 315, 316, 369, 376, 382, 387, 392, 397, 469, 471, 472, 524, 643, 646, 649, 702, 796, 798, 799, 808, 841, 848, 849, 852, 858, 861, 862, 863, 865, 867, 868], "further": [5, 8, 9, 10, 11, 24, 34, 88, 117, 798, 833, 841, 844, 845, 849, 852, 854, 857, 858, 861, 862, 864, 865, 871], "detail": [5, 8, 9, 10, 11, 24, 36, 48, 61, 65, 70, 71, 76, 78, 82, 87, 93, 94, 95, 99, 101, 105, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 159, 306, 310, 315, 316, 318, 382, 391, 441, 484, 564, 643, 646, 649, 662, 688, 694, 700, 704, 730, 769, 770, 771, 772, 808, 833, 839, 841, 844, 846, 847, 848, 849, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 871], "bidirect": [6, 7, 653, 678], "encod": [6, 7, 28, 30, 45, 46, 59, 61, 72, 77, 95, 100, 565, 651, 655, 713, 833, 879], "mlm": [6, 7], "choos": [6, 7, 59, 61, 69, 81, 82, 92, 229, 255, 262, 283, 284, 288, 350, 351, 387, 393, 648, 649, 661, 662, 664, 768, 769, 770, 771, 772, 780, 781, 782, 784, 796, 839, 840, 841, 859, 865, 880], "librari": [6, 7, 8, 9, 10, 11, 20, 21, 24, 25, 26, 41, 43, 57, 59, 69, 82, 92, 229, 260, 262, 278, 283, 284, 306, 350, 351, 387, 648, 649, 654, 662, 664, 690, 691, 769, 770, 771, 772, 780, 781, 782, 784, 832, 839, 840, 844, 850, 872, 877, 880, 884, 886], "pretrain": [6, 7, 20, 21, 28, 29, 30, 45, 46, 64, 833, 879], "save": [6, 7, 8, 9, 22, 23, 24, 59, 71, 88, 94, 402, 545, 605, 628, 648, 651, 665, 814, 832, 840, 849, 856, 865, 871, 872, 877, 886], "some": [6, 7, 12, 13, 16, 17, 18, 24, 25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 43, 45, 46, 50, 51, 57, 61, 62, 88, 96, 260, 262, 278, 390, 414, 415, 416, 631, 632, 635, 637, 638, 639, 648, 649, 652, 658, 749, 812, 833, 837, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 872, 873, 874, 879, 880, 884, 885, 886], "mohame54": [6, 7], "automodel": [6, 7, 25, 26, 45], "autotoken": [6, 7], "load": [6, 7, 8, 9, 10, 11, 20, 21, 25, 26, 40, 45, 59, 60, 61, 62, 63, 64, 88, 391, 462, 665, 814, 865, 872, 886], "token": [6, 7, 61, 842], "bert_bas": [6, 7], "from_pretrain": [6, 7, 10, 11, 25, 26, 45, 62, 879, 880], "base": [6, 7, 10, 11, 27, 59, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 119, 121, 153, 162, 194, 258, 259, 276, 277, 278, 279, 293, 334, 343, 345, 352, 355, 361, 368, 384, 387, 390, 391, 392, 400, 433, 437, 462, 467, 530, 598, 609, 621, 646, 647, 649, 651, 654, 656, 662, 664, 695, 722, 769, 770, 771, 772, 779, 794, 797, 798, 801, 802, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 825, 828, 829, 832, 833, 840, 841, 842, 844, 848, 849, 850, 854, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 884], "uncas": [6, 7], "evalu": [6, 7, 70, 71, 88, 93, 94, 258, 260, 276, 277, 278, 279, 283, 290, 292, 299, 303, 337, 369, 380, 381, 384, 389, 391, 392, 393, 458, 467, 472, 496, 642, 649, 652, 658, 665, 748, 749, 787, 788, 813, 814, 841, 848, 850, 858, 859, 884], "bert_token": [6, 7], "sampl": [6, 7, 8, 9, 10, 11, 20, 21, 24, 25, 26, 28, 30, 40, 45, 46, 60, 67, 70, 71, 80, 84, 90, 93, 94, 103, 107, 152, 153, 307, 334, 384, 390, 392, 393, 397, 414, 415, 416, 426, 436, 438, 467, 472, 503, 524, 525, 526, 527, 528, 646, 649, 660, 664, 758, 759, 760, 761, 784, 786, 812, 863, 865], "test": [6, 7, 10, 11, 35, 36, 38, 47, 48, 50, 51, 52, 60, 61, 70, 72, 85, 93, 95, 108, 139, 186, 190, 269, 270, 271, 272, 295, 390, 414, 415, 416, 585, 645, 647, 649, 651, 665, 787, 788, 791, 794, 797, 828, 833, 835, 837, 838, 843, 847, 850, 852, 854, 856, 859, 862, 864, 866, 872, 873, 879, 880, 882, 884], "did": [6, 7, 59, 839, 847], "realli": [6, 7, 57, 840, 848, 855, 872, 875, 880], "input": [6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 24, 25, 26, 28, 30, 40, 41, 43, 45, 50, 51, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 209, 211, 212, 225, 228, 229, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 337, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 456, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 571, 572, 574, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 592, 593, 594, 600, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 623, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 744, 745, 746, 747, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 797, 804, 808, 811, 812, 813, 814, 815, 825, 827, 828, 832, 844, 845, 846, 848, 850, 851, 852, 853, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 879, 880, 885], "pad": [6, 7, 22, 23, 24, 59, 61, 71, 75, 78, 94, 98, 101, 112, 114, 390, 393, 409, 410, 411, 412, 413, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 500, 565, 651, 653, 656, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 721, 734, 798, 812], "longest": [6, 7, 393, 500], "return_tensor": [6, 7, 10, 11, 25, 26, 45, 62, 879, 880], "pt": [6, 7, 10, 11, 25, 26, 45, 880], "max_length": [6, 7, 88], "512": [6, 7, 12, 13, 22, 23, 24, 59, 61, 99, 653, 668, 709, 833], "input_id": [6, 7], "101": [6, 7, 27, 60, 653, 654, 658, 677, 693, 744], "1045": [6, 7], "2106": [6, 7], "1005": [6, 7], "1056": [6, 7], "2428": [6, 7], "2066": [6, 7], "2115": [6, 7], "4309": [6, 7], "1012": [6, 7], "102": [6, 7, 27, 71, 94, 103, 412, 759], "token_type_id": [6, 7], "attention_mask": [6, 7, 75, 98, 653, 680], "pooler": [6, 7], "compar": [6, 7, 16, 17, 18, 20, 21, 25, 26, 45, 58, 62, 64, 71, 72, 82, 83, 84, 88, 94, 95, 106, 107, 349, 366, 387, 402, 546, 550, 553, 651, 653, 662, 663, 664, 678, 769, 770, 771, 772, 773, 776, 782, 793, 833, 846, 852, 854, 863, 865, 868, 883, 884], "no_grad": [6, 7, 59, 880], "bert_output": [6, 7], "pooler_output": [6, 7], "ivy_bert": [6, 7], "bert_base_uncas": [6, 7], "ivy_input": [6, 7], "k": [6, 7, 20, 21, 58, 61, 67, 71, 72, 75, 76, 80, 90, 93, 94, 98, 99, 103, 111, 112, 136, 147, 160, 161, 162, 282, 328, 343, 344, 384, 391, 393, 397, 400, 402, 442, 457, 461, 463, 465, 506, 510, 524, 525, 526, 527, 528, 531, 541, 553, 645, 646, 651, 653, 654, 658, 660, 661, 680, 683, 687, 694, 695, 701, 703, 704, 705, 708, 746, 759, 760, 761, 767, 843, 844, 862, 863, 870, 871, 880, 884], "ivy_output": [6, 7, 62], "logits_clos": [6, 7], "allclos": [6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 43, 45, 62, 64, 71, 94, 387], "detach": [6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 45, 860], "rtol": [6, 7, 10, 11, 28, 30, 71, 76, 94, 99, 349, 366, 387, 654, 697, 700, 791, 793, 837, 855, 863], "005": [6, 7, 22, 23, 71, 94, 349, 366, 387, 468], "atol": [6, 7, 10, 11, 15, 16, 17, 18, 20, 21, 24, 25, 26, 43, 45, 71, 76, 94, 99, 349, 366, 387, 654, 697, 791, 793, 837, 855, 863], "768": [6, 7], "fn": [6, 7, 62, 64, 71, 88, 91, 94, 120, 181, 182, 214, 215, 218, 393, 476, 551, 566, 567, 617, 647, 648, 651, 658, 744, 745, 746, 748, 749, 750, 791, 793, 819, 822, 825, 829, 830, 832, 851, 854, 861, 862, 871, 880], "finish": [6, 7, 10, 11, 32, 45, 46, 57, 60, 834, 839, 840, 843], "sec": [6, 7], "procedur": [6, 7, 847, 849, 852, 863], "60": [6, 7, 24, 57, 61, 70, 84, 93, 95, 103, 107, 239, 273, 393, 505, 569, 577, 593, 608, 630, 649, 651, 654, 658, 664, 699, 741, 759, 777, 779, 783, 828, 849], "big": [6, 7, 811, 834, 872, 884], "jnp": [6, 7, 35, 40, 45, 46, 47, 48, 51, 57, 59, 63, 818, 833, 850, 851, 854, 857, 861, 866, 870, 879, 882], "ref": [6, 7, 12, 13, 20, 21, 25, 26, 95, 99, 274, 288, 291, 297, 304, 649, 656, 730, 840, 861], "fast": [6, 7, 38, 50, 71, 390, 413, 884], "valu": [6, 7, 27, 57, 58, 60, 61, 67, 68, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 107, 114, 116, 119, 132, 136, 137, 139, 140, 147, 150, 151, 152, 153, 156, 162, 167, 184, 188, 194, 227, 228, 235, 236, 237, 238, 240, 242, 243, 244, 251, 255, 256, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 317, 322, 325, 326, 328, 335, 337, 343, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 363, 364, 366, 367, 369, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 401, 402, 413, 426, 433, 434, 436, 438, 442, 445, 449, 455, 460, 462, 464, 466, 467, 468, 470, 471, 472, 473, 482, 488, 493, 499, 500, 505, 507, 508, 509, 510, 512, 514, 517, 519, 524, 525, 527, 528, 534, 536, 539, 540, 541, 544, 545, 546, 547, 548, 554, 556, 557, 558, 560, 565, 568, 569, 571, 576, 577, 578, 585, 592, 593, 597, 598, 599, 602, 611, 616, 621, 622, 625, 628, 629, 630, 631, 632, 633, 637, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 683, 687, 690, 691, 695, 696, 697, 700, 701, 702, 703, 704, 705, 708, 711, 719, 720, 721, 725, 726, 734, 735, 736, 740, 742, 743, 744, 745, 746, 751, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 791, 793, 796, 797, 798, 799, 801, 803, 808, 811, 812, 813, 814, 815, 816, 825, 832, 837, 840, 841, 844, 847, 848, 850, 851, 852, 853, 854, 855, 857, 858, 861, 862, 865, 867, 868, 870, 872, 880, 884, 885], "emerg": [8, 9, 876, 884], "popular": [8, 9, 10, 11, 844, 884], "Its": [8, 9, 71, 392, 467, 884], "python": [8, 9, 10, 11, 22, 23, 28, 34, 48, 53, 57, 59, 60, 61, 63, 64, 71, 80, 94, 103, 140, 222, 234, 262, 297, 390, 397, 436, 524, 525, 526, 527, 528, 630, 646, 648, 649, 651, 660, 758, 759, 760, 761, 763, 818, 822, 827, 828, 832, 833, 838, 840, 841, 844, 847, 848, 849, 854, 855, 862, 864, 865, 871, 872, 874, 880, 884, 885], "superior": [8, 9], "eager": [8, 9, 24, 32, 33, 36, 39, 41, 48, 51, 52, 63, 832, 848, 872, 884], "mode": [8, 9, 10, 11, 12, 13, 51, 63, 71, 76, 88, 94, 99, 110, 111, 112, 113, 114, 115, 225, 228, 233, 238, 255, 288, 342, 380, 381, 384, 389, 390, 391, 393, 421, 426, 434, 435, 447, 449, 457, 459, 460, 466, 482, 492, 497, 499, 501, 503, 505, 508, 509, 513, 594, 595, 596, 600, 601, 603, 604, 618, 619, 623, 624, 626, 627, 648, 649, 651, 653, 654, 678, 701, 804, 812, 813, 814, 831, 832, 840, 841, 843, 848, 851, 852, 855, 868, 872, 884], "made": [8, 9, 20, 21, 25, 26, 45, 71, 78, 94, 391, 393, 451, 477, 478, 479, 730, 839, 841, 842, 844, 845, 848, 849, 854, 856, 858, 860, 861, 862, 866, 868, 870, 884], "favorit": [8, 9, 876], "increasingli": [8, 9, 852, 880], "span": [8, 9, 841], "industri": [8, 9, 876, 884], "still": [8, 9, 24, 27, 37, 39, 40, 45, 46, 48, 49, 52, 76, 88, 99, 654, 704, 796, 839, 840, 841, 845, 846, 850, 853, 854, 856, 858, 861, 862, 865, 868, 872, 879, 880, 884], "practition": [8, 9, 10, 11, 24, 884], "larg": [8, 9, 24, 60, 70, 71, 93, 94, 238, 255, 262, 288, 289, 393, 402, 508, 538, 649, 654, 702, 835, 840, 841, 847, 849, 855, 876, 880, 884], "unabl": [8, 9, 15, 24, 25, 26, 841, 868], "rich": [8, 9, 24, 877], "ecosystem": [8, 9, 24, 876, 884], "state": [8, 9, 24, 31, 42, 43, 59, 75, 94, 98, 114, 202, 203, 204, 205, 206, 288, 390, 436, 618, 620, 623, 625, 626, 647, 649, 651, 653, 678, 679, 794, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 837, 840, 847, 850, 851, 853, 854, 855, 856, 857, 862, 865, 870, 877, 879], "art": [8, 9, 24, 43, 877], "sota": [8, 9, 10, 11, 24], "inaccur": [8, 9, 24], "dynam": [8, 9, 16, 17, 24, 52, 656, 726, 814, 822, 843, 849, 850, 851, 861, 862, 867, 871, 876, 880, 884], "connect": [8, 9, 22, 23, 24, 59, 812, 835, 840, 847, 864], "layer": [8, 9, 10, 11, 16, 17, 18, 24, 28, 30, 34, 40, 41, 45, 46, 57, 62, 71, 79, 94, 102, 659, 678, 679, 680, 757, 809, 811, 813, 814, 815, 816, 817, 818, 833, 853, 862, 866, 868, 870, 879, 884], "togeth": [8, 9, 24, 71, 88, 94, 349, 366, 387, 391, 445, 817, 842, 845, 848, 850, 861, 862, 865, 866, 868, 870, 872, 884, 885], "For": [8, 9, 20, 21, 22, 23, 24, 25, 26, 27, 34, 36, 45, 46, 48, 51, 53, 67, 71, 76, 82, 94, 99, 140, 154, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 269, 270, 271, 276, 277, 278, 279, 280, 283, 288, 290, 291, 293, 297, 298, 299, 300, 301, 302, 305, 306, 308, 345, 346, 347, 350, 351, 353, 374, 384, 387, 391, 393, 457, 459, 479, 499, 503, 646, 649, 654, 656, 662, 664, 702, 704, 708, 719, 730, 769, 770, 771, 772, 780, 782, 783, 785, 797, 809, 839, 840, 841, 843, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 870, 871, 872, 877, 880, 885], "seamless": [8, 9, 24, 871, 877, 886], "wai": [8, 9, 24, 27, 32, 33, 34, 37, 39, 45, 49, 51, 57, 111, 114, 833, 835, 838, 839, 840, 844, 845, 846, 847, 849, 850, 851, 861, 862, 863, 865, 868, 872, 873, 882], "introduc": [8, 9, 24, 45, 46, 262, 649, 656, 662, 727, 769, 839, 848, 849, 850, 859, 863, 865, 868], "pipelin": [8, 9, 10, 11, 24, 833, 835, 843, 844, 845, 863, 866, 874, 879, 884, 885], "blog": [8, 9, 10, 11, 24, 841], "through": [8, 9, 10, 11, 24, 43, 44, 46, 51, 59, 71, 94, 114, 243, 402, 544, 545, 649, 658, 741, 747, 814, 818, 827, 834, 837, 838, 839, 841, 842, 843, 846, 847, 848, 849, 851, 852, 854, 855, 856, 858, 859, 861, 862, 863, 865, 867, 868, 870, 880, 884, 885], "train": [8, 9, 10, 11, 28, 30, 41, 45, 46, 62, 71, 73, 75, 94, 96, 98, 114, 390, 391, 396, 414, 415, 416, 463, 517, 519, 631, 632, 637, 652, 653, 676, 678, 680, 683, 811, 812, 813, 814, 815, 833, 848, 851, 858, 872, 879, 886], "illustr": [8, 9, 24, 36, 48, 846, 870], "workflow": [8, 9, 24, 37, 49, 60, 839, 841, 842, 846, 850, 860, 862, 874, 886], "pre": [8, 9, 45, 46, 837, 839, 864, 865, 870, 872, 873, 884], "convnext": [8, 9, 20, 21, 24], "belong": [8, 9, 88, 839, 844], "convolut": [8, 9, 24, 41, 71, 75, 94, 98, 390, 411, 429, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 798, 812, 832, 879, 884], "neural": [8, 9, 653, 808, 812, 833, 879, 884, 886], "network": [8, 9, 34, 41, 45, 46, 57, 59, 64, 653, 677, 808, 811, 812, 833, 848, 858, 871, 879, 884, 886], "cnn": [8, 9, 45, 46, 884], "architectur": [8, 9, 24, 62, 833, 840, 872, 884, 886], "inspir": [8, 9, 845], "vision": [8, 9, 10, 11, 43, 45, 46, 64], "perform": [8, 9, 12, 13, 15, 18, 27, 36, 38, 40, 41, 45, 46, 48, 50, 57, 59, 67, 71, 75, 76, 84, 85, 90, 94, 95, 98, 99, 107, 108, 127, 131, 152, 153, 225, 233, 255, 288, 309, 356, 378, 387, 388, 390, 391, 393, 400, 402, 413, 414, 415, 416, 418, 419, 423, 424, 432, 434, 460, 476, 531, 539, 540, 561, 562, 563, 576, 577, 578, 594, 604, 643, 646, 648, 649, 651, 653, 654, 657, 658, 664, 665, 676, 679, 695, 704, 706, 711, 735, 736, 737, 745, 746, 777, 778, 781, 787, 788, 791, 808, 812, 828, 832, 844, 845, 846, 848, 850, 851, 852, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 872, 876, 877, 879, 880, 881, 884, 885], "strength": [8, 9, 876, 877], "wise": [8, 9, 45, 65, 70, 71, 76, 87, 93, 94, 99, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 143, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 273, 274, 275, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 304, 309, 310, 311, 312, 313, 314, 316, 318, 320, 321, 322, 324, 325, 326, 349, 352, 357, 360, 361, 362, 365, 366, 367, 368, 372, 373, 376, 377, 382, 387, 390, 391, 393, 414, 415, 416, 443, 450, 486, 493, 495, 496, 516, 643, 646, 649, 656, 685, 719, 816, 868], "supervis": [8, 9, 10, 11, 71, 392, 467], "convent": [8, 9, 302, 649, 654, 664, 694, 779, 841, 846, 857, 866], "demonstr": [8, 9, 10, 11, 24, 27, 40, 45, 46, 60, 842, 850, 852, 854], "improv": [8, 9, 20, 21, 25, 26, 27, 45, 48, 836, 841, 850, 857, 858, 868, 870, 874, 880, 884], "scalabl": [8, 9, 870], "sometim": [8, 9, 839, 840, 841, 844, 850, 858, 862, 865, 868], "rival": [8, 9], "even": [8, 9, 20, 21, 24, 40, 45, 46, 71, 94, 111, 255, 288, 293, 298, 393, 402, 499, 538, 649, 833, 840, 841, 842, 844, 846, 849, 850, 851, 853, 857, 858, 861, 862, 863, 868, 872], "downsampl": [8, 9, 22, 23, 24, 71, 94, 426], "detial": [8, 9], "outsid": [8, 9, 24, 656, 719, 730, 850, 851, 858], "scope": [8, 9, 24, 846, 885], "demo": [8, 9, 10, 11, 12, 13, 15, 20, 21, 22, 23, 24, 25, 26, 27, 46, 53, 57, 61, 833], "interest": [8, 9, 10, 11, 24, 41, 45, 57, 255, 288, 649, 839, 841], "reader": [8, 9, 10, 11, 24], "paper": [8, 9, 24, 653, 680, 833], "mostli": [8, 9, 24, 851, 861, 865], "kera": [8, 9, 16, 17, 18, 24, 28, 30, 41, 45, 46, 62, 63, 809, 818, 833, 879], "wrapper": [8, 9, 36, 71, 94, 313, 804, 845, 847, 848, 850, 854, 858, 861, 862, 865, 874, 884], "prepar": [8, 9, 24, 46, 59, 61, 64, 849], "data": [8, 9, 10, 11, 30, 38, 40, 41, 46, 51, 59, 61, 64, 65, 67, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 85, 87, 88, 90, 93, 94, 95, 98, 99, 101, 103, 104, 105, 106, 107, 108, 116, 117, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 170, 172, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 207, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 315, 316, 317, 318, 327, 328, 329, 330, 331, 332, 333, 344, 345, 346, 347, 348, 350, 351, 352, 369, 374, 382, 384, 387, 390, 391, 393, 397, 401, 402, 405, 414, 415, 416, 432, 434, 436, 442, 444, 464, 482, 505, 508, 509, 511, 512, 524, 525, 526, 527, 528, 534, 538, 539, 540, 544, 547, 548, 565, 578, 580, 581, 584, 611, 643, 646, 648, 649, 651, 653, 654, 656, 658, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 720, 723, 724, 726, 727, 729, 730, 734, 742, 759, 760, 761, 763, 764, 765, 767, 768, 773, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 794, 796, 797, 798, 799, 804, 808, 811, 812, 813, 814, 819, 828, 832, 840, 843, 844, 845, 846, 847, 848, 851, 853, 857, 858, 859, 861, 863, 866, 868, 870, 874, 884, 885], "experiment": [8, 18, 24, 832, 837, 841, 850, 862, 866, 870, 884], "set_memory_growth": [8, 24], "list_physical_devic": [8, 9, 24], "manual_se": [8, 9, 10, 11, 24, 41], "set_se": [8, 9, 24], "51": [8, 9, 24, 27, 57, 61, 70, 71, 93, 94, 95, 103, 250, 288, 301, 391, 412, 466, 649, 761, 796], "38": [8, 9, 25, 26, 27, 57, 59, 61, 64, 68, 71, 93, 94, 103, 180, 305, 372, 387, 390, 402, 410, 429, 432, 433, 539, 647, 649, 654, 696, 796, 852], "926817": [8, 9], "e": [8, 9, 25, 26, 45, 62, 63, 67, 71, 76, 80, 82, 83, 84, 86, 93, 94, 99, 103, 106, 107, 109, 111, 112, 116, 144, 153, 154, 157, 158, 162, 166, 195, 208, 235, 236, 237, 241, 243, 244, 247, 249, 251, 255, 256, 258, 261, 262, 268, 269, 276, 277, 278, 279, 286, 287, 288, 289, 291, 295, 297, 298, 301, 302, 306, 316, 343, 350, 351, 384, 387, 390, 391, 392, 393, 397, 402, 403, 409, 410, 413, 427, 428, 429, 430, 434, 447, 450, 458, 472, 508, 512, 524, 525, 526, 527, 528, 539, 540, 549, 644, 646, 647, 648, 649, 653, 654, 656, 658, 660, 662, 663, 664, 680, 685, 690, 691, 694, 695, 697, 700, 703, 704, 705, 708, 711, 722, 730, 741, 745, 746, 747, 750, 755, 756, 759, 760, 761, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 812, 827, 828, 832, 833, 834, 837, 839, 840, 841, 843, 844, 846, 848, 850, 854, 855, 860, 862, 865, 870, 872, 873, 874, 880], "extern": [8, 9, 848, 857, 862, 865, 866], "local_xla": [8, 9], "xla": [8, 9, 25, 26, 862, 872, 874, 884], "stream_executor": [8, 9, 25, 26], "cuda_dnn": [8, 9, 25, 26], "cc": [8, 9, 25, 26, 38, 41, 60, 855], "9261": [8, 9], "regist": [8, 9, 25, 26, 814, 841, 880], "cudnn": [8, 9, 24, 25, 26], "factori": [8, 9, 25, 26, 71, 392, 471, 472, 828], "plugin": [8, 9, 25, 26, 840], "926873": [8, 9], "cuda_fft": [8, 9, 25, 26], "607": [8, 9], "cufft": [8, 9, 24, 25, 26], "928224": [8, 9], "cuda_bla": [8, 9, 25, 26], "1515": [8, 9], "cubla": [8, 9, 24, 25, 26], "936743": [8, 9], "cpu_feature_guard": [8, 9, 38, 41], "182": [8, 9, 38, 41, 94], "instruct": [8, 9, 38, 41, 88, 117, 833, 839, 840, 844, 854, 856, 863, 865, 873, 885], "avx2": [8, 9, 38, 41], "fma": [8, 9, 38, 41], "rebuild": [8, 9, 38, 41, 88, 117], "flag": [8, 9, 24, 38, 41, 88, 211, 392, 402, 469, 538, 648, 653, 680, 793, 804, 815, 841, 850, 851, 861, 862, 863, 865, 879, 880], "40": [8, 9, 15, 16, 17, 24, 27, 57, 59, 61, 71, 72, 93, 94, 95, 103, 107, 117, 249, 253, 273, 302, 364, 387, 390, 393, 410, 412, 422, 428, 505, 561, 563, 568, 569, 593, 608, 630, 633, 649, 651, 652, 654, 658, 664, 693, 699, 747, 760, 779, 783, 849], "071672": [8, 9], "w": [8, 9, 12, 13, 25, 26, 60, 61, 71, 72, 73, 75, 88, 93, 94, 95, 96, 98, 111, 282, 364, 379, 387, 389, 390, 391, 396, 409, 410, 411, 413, 427, 428, 429, 430, 446, 466, 522, 537, 561, 563, 608, 631, 632, 633, 635, 637, 638, 639, 651, 652, 653, 658, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 744, 843, 860, 871, 879], "tf2tensorrt": [8, 9, 25, 26], "py_util": [8, 9, 25, 26], "trt": [8, 9, 25, 26], "find": [8, 9, 15, 25, 26, 32, 37, 43, 44, 60, 61, 64, 76, 82, 88, 99, 654, 658, 662, 697, 740, 769, 770, 771, 772, 827, 828, 833, 834, 835, 836, 838, 839, 840, 841, 844, 847, 849, 855, 860, 865, 868, 870, 873, 874, 880], "tensorrt": [8, 9, 25, 26], "map": [8, 9, 71, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 183, 187, 188, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 387, 390, 414, 415, 416, 434, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 506, 508, 509, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 630, 635, 641, 651, 658, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 745, 746, 750, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 828, 845, 848, 850, 857, 858, 862, 865, 866, 872, 874, 879, 885], "dataset": [8, 9, 10, 11, 24, 27, 45, 88, 879, 880], "gist": [8, 9], "yrevar": [8, 9], "942d3a0ac09ec9e5eb3a": [8, 9], "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": [8, 9], "imagenet1000_clsidx_to_label": [8, 9], "idx2label": [8, 9], "read": [8, 9, 59, 61, 71, 78, 88, 90, 94, 101, 149, 393, 489, 646, 656, 726, 839, 840, 847, 849, 855, 865, 867, 868, 884], "185": [8, 9, 22, 23, 59, 87], "199": [8, 9, 22, 23, 59, 241, 649], "108": [8, 9, 22, 23, 27, 38, 40, 41, 59, 653, 664, 677, 779], "109": [8, 9, 22, 23, 59, 76, 654, 692], "111": [8, 9, 22, 23, 59, 658, 756], "443": [8, 9, 22, 23, 59, 300, 649], "sent": [8, 9, 22, 23, 59], "await": [8, 9, 22, 23, 59], "respons": [8, 9, 22, 23, 24, 59, 396, 522, 841, 849, 850], "200": [8, 9, 22, 23, 24, 27, 59, 95, 98, 249, 390, 414, 415, 569, 593, 649, 651, 827], "ok": [8, 9, 22, 23, 59, 840], "30564": [8, 9], "30k": [8, 9], "plain": [8, 9, 22, 23, 59], "imagenet1000_clsidx": [8, 9], "85k": [8, 9], "003": [8, 9], "is_avail": [8, 9, 24, 27], "url": [8, 9, 10, 11, 20, 21, 24, 25, 26, 40, 45, 46, 59, 62, 833, 879], "cocodataset": [8, 9, 10, 11, 20, 21, 25, 26, 40, 45, 46, 62, 833, 879], "org": [8, 9, 10, 11, 20, 21, 22, 23, 24, 25, 26, 40, 45, 46, 59, 61, 62, 64, 70, 71, 93, 94, 96, 162, 170, 258, 268, 269, 284, 343, 350, 351, 384, 387, 390, 393, 402, 434, 508, 538, 631, 632, 646, 647, 649, 652, 654, 656, 664, 702, 703, 734, 784, 833, 853, 879], "val2017": [8, 9, 10, 11, 20, 21, 25, 26, 45, 62], "000000039769": [8, 9, 10, 11, 20, 21, 25, 26, 45, 62], "stream": [8, 9, 10, 11, 20, 21, 25, 26, 40, 45, 46, 59, 62, 69, 92, 229, 648, 833, 879], "initialis": [8, 9, 24, 844, 862, 865], "api": [8, 9, 10, 11, 15, 24, 31, 36, 41, 42, 48, 61, 63, 70, 71, 76, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 157, 158, 159, 160, 161, 163, 164, 170, 180, 183, 193, 195, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 350, 351, 353, 387, 390, 393, 402, 434, 508, 512, 538, 646, 647, 649, 654, 656, 661, 662, 663, 664, 665, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 720, 722, 723, 724, 726, 727, 729, 730, 734, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 833, 837, 840, 841, 843, 845, 847, 850, 851, 852, 853, 854, 855, 857, 859, 861, 862, 863, 865, 868, 871, 872, 874, 876, 884], "convnextxlarg": [8, 9], "arbitrari": [8, 9, 24, 36, 48, 67, 68, 71, 88, 91, 94, 154, 168, 195, 337, 392, 469, 477, 478, 479, 633, 646, 647, 652, 857, 858, 860, 861, 862, 865, 872, 880, 882, 885], "regardless": [8, 9, 24, 45, 46, 57, 88, 834, 850, 854], "host": [8, 9, 24, 832, 835, 849, 872], "convnext_xlarg": [8, 9], "include_top": [8, 9, 30, 833], "include_preprocess": [8, 9], "input_tensor": [8, 9, 71, 94, 391, 392, 463, 467, 472, 862], "input_shap": [8, 9, 20, 21, 30, 41, 45, 46, 833], "pool": [8, 9, 71, 94, 98, 390, 404, 405, 406, 407, 409, 410, 411, 427, 428, 429, 430, 433, 812, 840], "classifier_activ": [8, 9], "936026": [8, 9], "common_runtim": [8, 9, 60], "gpu_devic": [8, 9], "1929": [8, 9], "job": [8, 9, 45, 46, 833, 847, 849], "localhost": [8, 9], "replica": [8, 9], "14791": [8, 9], "tesla": [8, 9], "v100": [8, 9, 20, 21], "pcie": [8, 9], "16gb": [8, 9], "pci": [8, 9], "bu": [8, 9, 99], "id": [8, 9, 27, 60, 71, 94, 211, 345, 346, 347, 384, 573, 648, 651, 833, 838, 840, 845, 847, 848, 856, 860, 865, 873], "0001": [8, 9, 70, 71, 94, 298, 299, 391, 460, 466, 796, 799, 816], "over": [8, 9, 10, 11, 16, 17, 24, 34, 41, 46, 48, 59, 71, 76, 84, 85, 86, 91, 94, 98, 99, 107, 108, 109, 111, 136, 335, 336, 350, 351, 364, 371, 384, 387, 390, 391, 392, 393, 400, 402, 404, 405, 406, 407, 410, 419, 424, 428, 432, 433, 434, 435, 436, 437, 459, 467, 476, 489, 505, 508, 509, 512, 531, 541, 547, 596, 630, 645, 651, 654, 659, 660, 664, 665, 685, 695, 706, 708, 710, 711, 757, 761, 780, 781, 782, 783, 784, 785, 786, 787, 788, 812, 815, 822, 827, 833, 840, 841, 846, 852, 853, 860, 861, 863, 866, 870, 872, 876, 884], "wonder": [8, 9], "why": [8, 9, 34, 833, 841, 861, 875], "One": [8, 9, 10, 11, 24, 61, 71, 72, 78, 80, 94, 95, 101, 103, 114, 393, 477, 478, 479, 482, 499, 509, 512, 562, 651, 656, 660, 726, 759, 845, 848, 850, 852, 858, 863, 865], "reason": [8, 9, 24, 297, 306, 649, 839, 841, 844, 845, 848, 849, 850, 852, 858, 861, 862, 865, 866, 868], "highlight": [8, 9, 841, 849, 852, 862, 864], "directli": [8, 9, 28, 30, 34, 37, 41, 45, 46, 49, 390, 391, 426, 450, 658, 750, 833, 839, 840, 841, 842, 844, 845, 848, 849, 850, 851, 853, 856, 858, 859, 861, 862, 863, 866, 867, 870, 871, 872, 879, 880, 882], "much": [8, 9, 20, 21, 25, 26, 27, 34, 35, 41, 45, 46, 47, 48, 59, 114, 349, 366, 387, 811, 839, 840, 841, 845, 848, 850, 858, 861, 862, 863, 866, 867, 868, 870, 884], "There": [8, 9, 24, 34, 41, 46, 51, 111, 383, 385, 386, 394, 395, 399, 798, 839, 840, 841, 844, 845, 847, 848, 850, 851, 852, 854, 856, 858, 860, 862, 863, 867, 870, 872, 873, 880, 885], "deeper": [8, 9, 34, 46, 66, 658, 749, 750, 833, 841, 843, 865, 869], "offer": [8, 9, 862, 877, 884, 886], "limit": [8, 9, 88, 117, 180, 183, 556, 557, 573, 647, 651, 656, 719, 796, 798, 799, 811, 819, 828, 840, 841, 847, 849, 852, 854, 862, 865, 868, 872, 884, 885, 886], "soon": [8, 9, 839, 841, 849, 850, 872, 880], "comparison": [8, 9, 18, 22, 23, 71, 94, 256, 291, 352, 387, 392, 471, 472, 649, 654, 705, 791, 854], "separ": [8, 9, 60, 71, 72, 94, 396, 518, 565, 651, 653, 680, 793, 804, 840, 841, 845, 848, 849, 852, 863, 864, 865, 870, 885], "stai": [8, 9, 849], "origin": [8, 9, 10, 11, 16, 17, 18, 20, 21, 24, 25, 26, 27, 41, 43, 45, 46, 47, 48, 49, 51, 58, 59, 60, 64, 71, 76, 78, 84, 88, 94, 99, 101, 107, 111, 114, 116, 117, 243, 268, 295, 334, 384, 390, 391, 393, 402, 434, 460, 492, 498, 501, 504, 539, 540, 544, 545, 546, 547, 548, 649, 654, 656, 664, 695, 726, 727, 778, 793, 798, 822, 823, 833, 835, 839, 840, 841, 846, 847, 849, 850, 855, 859, 861, 862, 863, 870, 871, 879, 880, 884, 885, 886], "convert_to_tensor": [8, 9, 14, 15, 24, 43, 833, 871], "tmp": [8, 9, 59, 61, 605, 628, 651], "ipykernel_65585": [8, 9], "3221769294": [8, 9], "_eagertensorbas": [8, 9], "op": [8, 9, 28, 34, 57, 808, 822, 832, 866, 870, 871, 872], "deprec": [8, 9, 64], "futur": [8, 9, 16, 17, 34, 39, 41, 45, 59, 654, 690, 691, 840, 841, 842, 849, 850, 865, 866, 868, 872], "instead": [8, 9, 24, 25, 26, 28, 30, 34, 38, 40, 41, 45, 52, 59, 64, 70, 71, 76, 93, 94, 99, 112, 209, 297, 331, 384, 390, 402, 427, 428, 429, 538, 541, 648, 649, 654, 697, 796, 839, 840, 841, 844, 847, 849, 850, 852, 853, 854, 857, 858, 859, 861, 862, 863, 865, 868, 870, 872, 879, 880, 882, 884], "logits_np": [8, 9, 10, 11, 24], "class_id": [8, 9], "int": [8, 9, 10, 11, 12, 13, 59, 62, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 120, 127, 131, 132, 141, 142, 147, 149, 150, 151, 152, 153, 156, 160, 161, 162, 169, 176, 179, 180, 183, 190, 205, 219, 220, 221, 228, 229, 238, 245, 246, 247, 248, 249, 250, 262, 265, 289, 293, 298, 304, 307, 315, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 355, 356, 360, 364, 371, 373, 375, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 441, 445, 447, 448, 449, 450, 452, 457, 459, 460, 463, 464, 466, 471, 475, 476, 480, 484, 485, 488, 489, 492, 494, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 514, 515, 518, 520, 521, 523, 524, 525, 526, 527, 528, 529, 531, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 551, 561, 562, 563, 565, 568, 569, 572, 573, 587, 590, 592, 607, 608, 609, 610, 614, 630, 631, 632, 633, 634, 637, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 685, 687, 688, 695, 696, 701, 706, 708, 709, 710, 711, 713, 714, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 744, 745, 747, 749, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 771, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 808, 811, 812, 827, 828, 832, 848, 850, 851, 852, 854, 857, 858, 861, 863, 865, 866, 868, 870, 880], "argmax": [8, 9, 10, 11, 12, 13, 24, 60, 61, 62, 81, 104, 393, 505, 661, 862, 880], "57": [8, 9, 22, 23, 27, 57, 59, 70, 71, 93, 94, 213, 236, 237, 240, 241, 243, 253, 254, 294, 310, 311, 382, 648, 649], "342029": [8, 9], "local_tsl": [8, 9], "tsl": [8, 9], "subprocess": [8, 9], "304": [8, 9], "cannot": [8, 9, 16, 17, 59, 60, 61, 64, 71, 305, 477, 478, 479, 649, 841, 844, 846, 850, 862, 871], "spawn": [8, 9, 589, 651], "child": [8, 9], "906376": [8, 9], "454": [8, 9], "8904": [8, 9], "993553": [8, 9], "58": [8, 9, 10, 11, 18, 57, 279, 556, 649, 651], "578886": [8, 9], "servic": [8, 9], "168": [8, 9, 61, 556, 651, 658, 738], "0x558ecdd86830": [8, 9], "guarante": [8, 9, 662, 769, 771, 832, 845, 850, 861, 872], "578915": [8, 9], "176": [8, 9, 556, 651], "streamexecutor": [8, 9], "messag": [8, 9, 24, 819, 829, 840, 841, 849, 852, 854, 856, 862, 871], "absl": [8, 9, 59], "initializelog": [8, 9], "stderr": [8, 9], "i0000": [8, 9], "1710255118": [8, 9], "868823": [8, 9], "65585": [8, 9], "device_compil": [8, 9], "h": [8, 9, 12, 13, 71, 72, 75, 94, 95, 98, 390, 396, 410, 411, 428, 429, 522, 561, 563, 651, 653, 658, 666, 669, 670, 671, 672, 673, 674, 675, 741, 745, 747, 750, 755, 834, 843, 847, 848, 849, 879], "186": [8, 9], "cluster": [8, 9, 71, 94, 391, 445, 872, 884], "lifetim": [8, 9], "grei": [8, 9], "fox": [8, 9], "grai": [8, 9], "urocyon": [8, 9], "cinereoargenteu": [8, 9], "eagerli": [8, 9, 24, 38, 39, 45, 46, 50, 51, 52, 59, 879, 880, 882], "explain": [8, 9, 10, 11, 24, 51, 71, 94, 390, 424, 435, 833, 839, 840, 841, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 865, 866, 868, 870, 871, 883], "doc": [8, 9, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 60, 61, 94, 162, 343, 350, 351, 384, 387, 540, 646, 833, 834, 838, 839, 843, 852, 853, 856, 857, 865, 870, 880, 882], "involv": [8, 9, 24, 28, 31, 41, 68, 91, 195, 238, 255, 262, 288, 293, 647, 649, 828, 834, 842, 843, 849, 850, 852, 863, 868, 884], "dummi": [8, 9, 24, 38, 50, 51, 52, 58, 841], "transpiled_model": [8, 9, 10, 11, 24], "backend_compil": [8, 9, 45, 46], "root": [8, 9, 10, 11, 16, 17, 22, 23, 24, 25, 26, 38, 40, 41, 59, 60, 61, 64, 70, 93, 302, 649, 835, 839, 840, 841, 847, 855, 862], "placement": [8, 9, 24, 25, 26, 839], "case": [8, 9, 24, 28, 30, 36, 38, 45, 46, 48, 49, 50, 51, 59, 66, 67, 71, 72, 78, 84, 88, 90, 94, 95, 101, 111, 112, 117, 142, 154, 181, 182, 209, 214, 215, 222, 230, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 263, 269, 270, 271, 276, 277, 278, 279, 280, 283, 288, 291, 293, 297, 298, 299, 300, 301, 302, 305, 306, 308, 350, 351, 362, 364, 374, 387, 390, 392, 393, 396, 397, 403, 414, 415, 416, 436, 467, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 505, 506, 512, 515, 517, 519, 526, 549, 566, 567, 571, 578, 592, 593, 594, 646, 647, 648, 649, 651, 654, 656, 658, 664, 702, 708, 722, 723, 724, 726, 728, 729, 731, 733, 741, 747, 780, 781, 782, 783, 784, 785, 786, 796, 797, 816, 828, 833, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 872, 879, 880, 882], "ad": [8, 9, 22, 23, 24, 25, 26, 27, 38, 40, 41, 71, 78, 94, 101, 109, 255, 288, 349, 366, 387, 396, 517, 518, 519, 608, 609, 649, 651, 653, 654, 656, 680, 690, 691, 722, 812, 817, 833, 837, 838, 839, 840, 841, 844, 845, 847, 848, 849, 850, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 866, 868, 872, 880, 884, 886], "logits_transpil": [8, 9, 24], "logits_transpiled_np": [8, 9, 24], "class_id_transpil": [8, 9], "But": [8, 9, 10, 11, 45, 46, 798, 848, 849, 853, 856, 859, 868, 870], "produc": [8, 9, 10, 11, 16, 17, 24, 58, 71, 72, 75, 94, 98, 317, 327, 330, 382, 384, 390, 438, 653, 683, 796, 828, 839, 850, 855, 856, 861, 863, 865, 866, 880, 885], "granular": [8, 9, 10, 11, 24], "level": [8, 9, 10, 11, 24, 34, 45, 46, 48, 71, 94, 95, 391, 463, 553, 828, 832, 833, 834, 839, 840, 841, 842, 848, 850, 854, 858, 860, 861, 862, 864, 867, 868, 870, 871, 872, 874, 884, 885], "close": [8, 9, 10, 11, 24, 61, 76, 260, 278, 298, 327, 384, 649, 654, 656, 704, 722, 836, 837, 839, 840, 841, 842, 850, 853, 855, 862, 868, 884], "inde": [8, 9, 10, 11, 24, 857, 868, 872], "benefit": [8, 9, 10, 11, 24, 46, 840, 845, 848, 861, 868, 872, 877], "trainabl": [8, 9, 10, 11, 24, 28, 30, 34, 40, 41, 45, 46, 63, 809, 813, 814, 817, 833, 853, 879, 882], "cifar": [8, 9, 10, 11], "dataload": [8, 9, 10, 11, 24], "cifar10": [8, 9, 10, 11], "batch_siz": [8, 9, 10, 11, 24, 59, 61, 64, 71, 75, 80, 94, 98, 103, 390, 392, 393, 409, 410, 411, 427, 428, 429, 430, 474, 500, 653, 655, 660, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 716, 758], "shuffl": [8, 9, 10, 11, 24, 61, 71, 80, 88, 94, 103, 526, 660], "drop_last": [8, 9, 10, 11], "num_work": [8, 9, 10, 11, 24], "sgd": [8, 9, 10, 11, 24, 59, 816, 884], "lr": [8, 9, 59, 73, 96, 552, 632, 635, 637, 638, 639, 651, 652, 816], "1e": [8, 9, 10, 11, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 30, 43, 45, 57, 61, 68, 71, 73, 76, 77, 79, 91, 94, 96, 99, 100, 102, 115, 180, 349, 366, 387, 392, 396, 472, 517, 518, 519, 598, 599, 608, 621, 622, 631, 632, 637, 639, 647, 651, 652, 654, 655, 659, 704, 713, 714, 715, 757, 791, 793, 813, 815, 816, 837, 848, 855, 858, 861, 863], "loss_fn": [8, 9, 24, 45, 46, 57, 59, 61], "crossentropyloss": [8, 9, 59, 813], "epoch": [8, 9, 10, 11, 24, 45, 46, 59, 61], "loss_epoch_arr": [8, 9, 10, 11], "loss_arr": [8, 9, 10, 11], "permut": [8, 9, 12, 13, 22, 23, 59, 78, 101, 116, 400, 530, 656, 724, 731, 879], "loss": [8, 9, 10, 11, 24, 45, 46, 59, 61, 71, 94, 111, 467, 468, 469, 470, 471, 472, 473, 474, 601, 624, 651, 713, 714, 715, 716, 717, 718, 833, 849, 850, 858, 862, 866, 867, 884], "backward": [8, 9, 10, 11, 59, 71, 85, 94, 108, 297, 390, 413, 418, 419, 423, 424, 434, 435, 649, 654, 665, 685, 710, 787, 788, 812, 832, 866, 872], "append": [8, 9, 10, 11, 27, 60, 61, 71, 76, 88, 94, 247, 356, 387, 649, 654, 656, 688, 694, 722, 828, 849, 865, 870], "avg_loss": [8, 9, 10, 11, 59], "02": [8, 9, 22, 23, 25, 26, 59, 67, 72, 73, 79, 80, 93, 96, 103, 153, 240, 241, 280, 390, 412, 422, 423, 608, 609, 631, 632, 637, 646, 649, 651, 652, 659, 660, 757, 760, 761, 863], "94": [8, 9, 24, 27, 57, 70, 71, 73, 80, 93, 94, 96, 103, 222, 298, 299, 375, 387, 422, 635, 648, 652, 761], "ve": [8, 9, 10, 11, 12, 13, 16, 17, 24, 27, 32, 41, 45, 80, 103, 660, 758, 839, 840, 841, 842, 855, 865, 868, 874], "And": [8, 9, 10, 11, 20, 21, 24, 25, 26, 27, 28, 30, 35, 38, 45, 46, 47, 60, 91, 380, 381, 389, 844, 847, 856, 858, 865, 876, 880], "plug": [8, 9, 24], "seen": [8, 9, 24, 28, 30, 35, 41, 45, 391, 397, 450, 526, 573, 651, 822, 849, 850, 852, 854, 862, 865, 870], "d": [8, 9, 10, 11, 24, 60, 71, 72, 75, 76, 78, 90, 94, 95, 98, 99, 101, 114, 130, 153, 162, 195, 238, 255, 256, 288, 291, 343, 384, 390, 391, 393, 396, 397, 400, 409, 410, 411, 418, 423, 427, 428, 429, 430, 432, 436, 442, 458, 479, 485, 487, 490, 494, 509, 511, 515, 522, 524, 530, 553, 564, 643, 646, 647, 649, 653, 654, 656, 658, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 687, 688, 692, 695, 699, 708, 709, 728, 741, 745, 746, 747, 750, 755, 756, 797, 828, 833, 834, 840, 843, 846, 847, 848, 855, 860, 865, 868], "sign": [8, 9, 10, 11, 24, 70, 71, 76, 82, 84, 93, 94, 99, 111, 140, 235, 236, 237, 238, 241, 243, 244, 249, 253, 255, 258, 260, 262, 288, 290, 297, 301, 302, 306, 354, 387, 391, 393, 402, 462, 507, 508, 539, 540, 646, 649, 654, 662, 664, 702, 769, 770, 771, 772, 777, 778, 783, 785, 840, 842, 850, 870, 871], "ask": [8, 9, 10, 11, 24, 833, 839, 840, 852, 872], "server": [8, 9, 10, 11, 24, 59, 833, 840, 841, 847, 855, 873, 884], "forward": [8, 9, 10, 11, 12, 13, 22, 23, 24, 30, 44, 45, 46, 59, 61, 71, 94, 380, 389, 390, 413, 418, 419, 423, 424, 434, 435, 809, 811, 812, 814, 816, 818, 832, 833, 840, 846, 853, 860, 865, 866, 868, 871, 872, 880, 884, 885], "come": [10, 11, 34, 59, 836, 839, 840, 841, 845, 849, 862, 867, 868, 874, 884], "onto": [10, 11, 658, 744, 750, 875, 876, 884], "scene": [10, 11, 843, 869, 875, 876, 884], "almost": [10, 11, 59, 838, 848, 863], "alwai": [10, 11, 67, 68, 71, 72, 78, 90, 91, 94, 101, 124, 142, 167, 238, 288, 361, 387, 391, 393, 462, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 515, 571, 578, 643, 647, 649, 651, 656, 722, 723, 724, 726, 728, 729, 731, 733, 798, 839, 840, 841, 845, 846, 848, 850, 853, 856, 857, 858, 861, 862, 863, 864, 865, 866, 868, 871, 872, 880], "huggingfac": [10, 11, 59, 879, 880], "implement": [10, 11, 27, 34, 35, 45, 47, 51, 59, 62, 68, 69, 71, 82, 83, 91, 92, 94, 99, 106, 111, 167, 181, 182, 195, 214, 215, 229, 235, 236, 237, 240, 241, 242, 243, 252, 253, 255, 258, 260, 262, 276, 277, 278, 279, 288, 290, 293, 297, 300, 301, 305, 306, 350, 351, 374, 387, 391, 402, 443, 444, 544, 545, 566, 567, 647, 648, 649, 651, 653, 654, 662, 663, 664, 680, 689, 690, 691, 699, 708, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 797, 799, 822, 833, 837, 839, 843, 844, 845, 846, 848, 850, 851, 853, 854, 855, 857, 858, 859, 861, 863, 865, 866, 868, 870, 872, 874, 884, 886], "conveni": [10, 11, 37, 49, 839, 850, 851, 857, 863, 874], "who": [10, 11, 836, 842, 843, 854, 869, 872, 884], "must": [10, 11, 51, 59, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 340, 341, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 358, 359, 361, 363, 365, 367, 368, 369, 370, 374, 377, 382, 384, 387, 390, 391, 392, 393, 396, 397, 400, 402, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 432, 434, 435, 437, 439, 441, 442, 444, 450, 451, 456, 457, 458, 459, 464, 468, 469, 470, 471, 473, 474, 477, 478, 479, 484, 485, 487, 489, 490, 491, 492, 494, 498, 501, 502, 503, 504, 506, 508, 509, 510, 512, 513, 515, 520, 521, 523, 524, 525, 527, 528, 531, 538, 539, 540, 541, 548, 556, 557, 561, 562, 563, 568, 569, 571, 578, 592, 593, 630, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 811, 812, 816, 818, 819, 838, 839, 840, 841, 844, 845, 849, 850, 851, 852, 853, 854, 857, 858, 859, 861, 862, 865, 866, 867, 868, 870, 879, 882, 885], "reimplement": [10, 11], "choic": [10, 11, 24, 27, 46, 63, 71, 84, 94, 107, 391, 393, 462, 482, 664, 784, 786, 833, 840, 849, 861, 862, 879, 881, 884], "veri": [10, 11, 24, 28, 36, 45, 46, 48, 70, 93, 289, 349, 366, 387, 649, 654, 702, 798, 838, 839, 840, 841, 847, 848, 850, 851, 852, 854, 855, 857, 858, 861, 862, 863, 865, 866, 868, 870, 872, 883, 884, 885], "thousand": [10, 11, 872], "china": [10, 11], "howev": [10, 11, 27, 34, 35, 36, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 76, 99, 262, 305, 306, 393, 396, 508, 517, 519, 596, 649, 651, 654, 702, 704, 822, 839, 840, 844, 845, 846, 848, 850, 851, 852, 853, 854, 856, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 876, 880, 884], "suffer": [10, 11], "abov": [10, 11, 34, 39, 45, 46, 51, 52, 67, 70, 71, 76, 80, 87, 93, 94, 99, 103, 112, 132, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 326, 328, 343, 344, 350, 351, 353, 356, 382, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 424, 427, 428, 429, 434, 435, 436, 444, 445, 499, 508, 512, 538, 541, 568, 572, 574, 576, 578, 607, 616, 641, 643, 646, 647, 649, 651, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 759, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 837, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 860, 861, 862, 863, 865, 868, 870, 871, 884], "dinov2": [10, 11], "second": [10, 11, 16, 17, 70, 71, 73, 76, 78, 82, 93, 94, 95, 96, 99, 101, 105, 112, 116, 117, 137, 162, 193, 201, 238, 243, 245, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 273, 274, 275, 280, 281, 282, 284, 285, 288, 291, 293, 304, 334, 343, 349, 362, 364, 365, 366, 372, 376, 377, 384, 387, 391, 392, 393, 400, 402, 443, 444, 445, 447, 451, 473, 506, 514, 525, 527, 531, 538, 541, 553, 602, 625, 631, 632, 637, 645, 646, 647, 649, 651, 652, 654, 656, 657, 658, 662, 685, 688, 689, 690, 692, 694, 699, 701, 702, 704, 706, 708, 710, 730, 731, 736, 739, 769, 770, 771, 816, 840, 844, 847, 850, 852, 856, 861, 862, 865, 867], "iter": [10, 11, 24, 59, 61, 66, 71, 72, 78, 86, 88, 94, 95, 101, 109, 114, 117, 136, 228, 335, 336, 384, 390, 391, 393, 436, 449, 460, 466, 483, 499, 500, 550, 588, 645, 648, 651, 656, 658, 721, 725, 732, 734, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 753, 754, 756, 818, 827, 828, 832, 844, 846, 848, 870, 880], "dino": [10, 11], "meta": [10, 11, 59, 735, 736, 737, 845, 866, 884], "vit": [10, 11], "purpos": [10, 11, 36, 45, 46, 48, 59, 61, 162, 260, 278, 343, 384, 646, 649, 654, 702, 841, 843, 845, 848, 849, 851, 852, 854, 857, 858, 859, 862, 864, 865, 868, 874, 885, 886], "abund": [10, 11], "literatur": [10, 11], "mainli": [10, 11, 839, 843, 860, 862, 865, 874, 884], "focus": [10, 11, 833, 850, 866, 884, 886], "rather": [10, 11, 43, 51, 72, 88, 95, 140, 228, 580, 581, 584, 646, 648, 651, 653, 678, 837, 841, 844, 848, 850, 853, 855, 862, 863, 865, 866, 872, 884, 886], "65": [10, 11, 24, 27, 57, 59, 61, 64, 93, 96, 103, 249, 288, 576, 631, 649, 651, 652, 654, 664, 699, 760, 761, 779, 849], "749": [10, 11], "env": [10, 11, 15, 38, 40, 41], "flags_fraction_of_gpu_memory_to_us": [10, 11], "auto_growth": [10, 11], "paddl": [10, 11, 38, 40, 41, 224, 350, 351, 387, 648, 809, 822, 839, 840, 850, 855], "autoimageprocessor": [10, 11, 879, 880], "automodelforimageclassif": [10, 11], "device_count": [10, 11], "seed": [10, 11, 35, 38, 61, 62, 71, 75, 80, 82, 88, 94, 98, 103, 338, 339, 340, 341, 342, 384, 391, 397, 449, 460, 466, 524, 525, 526, 527, 528, 653, 660, 662, 676, 758, 759, 760, 761, 763, 769, 804, 809, 811, 828, 859, 863, 865], "libpaddl": [10, 11], "0x7c8738e15470": [10, 11], "processor": [10, 11], "facebook": [10, 11, 62], "imagenet1k": [10, 11], "id2label": [10, 11, 62, 880], "predicted_class_idx": [10, 11, 62], "paddle_input": [10, 11], "pixel_valu": [10, 11], "to_tensor": [10, 11, 110, 111, 112, 113, 114, 115], "stop_gradi": [10, 11, 73, 96, 228, 552, 632, 635, 637, 638, 639, 648, 651, 652, 657, 735, 736, 737, 816], "logits_np_transpil": [10, 11], "4th": [10, 11], "decim": [10, 11, 70, 93, 298, 649, 867], "io": [10, 11, 25, 26, 38, 40, 41, 60, 63, 840, 849], "to_rgb": [10, 11], "cv2": [10, 11, 59, 61, 63], "tar": [10, 11, 59, 60, 61, 64], "gz": [10, 11, 59, 60, 61, 64], "bj": [10, 11, 238, 255, 288, 353, 387, 649], "bcebo": [10, 11], "41626": [10, 11], "2m": [10, 11], "cross_entropi": [10, 11, 61, 77, 100, 655, 715, 848, 858, 861], "33": [10, 11, 27, 57, 59, 60, 70, 80, 84, 93, 94, 95, 96, 98, 241, 242, 249, 298, 390, 391, 393, 402, 410, 432, 433, 463, 482, 539, 557, 608, 635, 649, 651, 652, 653, 654, 658, 664, 676, 677, 699, 756, 759, 779, 786, 796, 799], "bring": [10, 11, 45, 46, 844, 864, 865, 870, 874, 876], "hope": [10, 11, 57, 872], "milesi": [12, 13], "blob": [12, 13, 59, 61, 833], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": [12, 13], "data_load": [12, 13], "l65": [12, 13], "mask_valu": [12, 13], "pil_img": [12, 13], "scale": [12, 13, 20, 21, 59, 71, 75, 79, 94, 96, 98, 102, 126, 226, 227, 319, 320, 323, 334, 364, 382, 384, 387, 390, 391, 396, 408, 414, 415, 416, 424, 426, 431, 435, 451, 517, 518, 519, 638, 643, 648, 652, 653, 659, 676, 680, 683, 757, 796, 798, 799, 811, 812, 816, 828, 876, 877, 884], "is_mask": [12, 13], "neww": [12, 13], "newh": [12, 13], "assert": [12, 13, 15, 19, 27, 60, 62, 64, 88, 554, 651, 804, 837, 843, 844, 855, 858, 861, 862, 863, 865, 866], "too": [12, 13, 71, 94, 238, 255, 262, 288, 393, 508, 649, 811, 839, 840, 841, 844, 850, 854, 866, 872], "small": [12, 13, 24, 27, 61, 70, 71, 76, 79, 93, 94, 99, 102, 255, 262, 288, 289, 349, 366, 387, 391, 392, 396, 455, 472, 517, 518, 519, 649, 654, 659, 697, 700, 702, 757, 811, 815, 833, 840, 849, 852, 858, 863, 868, 870, 872, 879, 880, 885], "pixel": [12, 13, 59, 71, 94, 390, 426], "resampl": [12, 13], "nearest": [12, 13, 71, 94, 238, 255, 288, 298, 360, 387, 390, 402, 426, 548, 649, 868], "bicub": [12, 13, 71, 94, 390, 426, 868], "zero": [12, 13, 59, 67, 68, 70, 71, 72, 73, 75, 76, 78, 81, 82, 84, 85, 90, 91, 93, 94, 96, 98, 99, 103, 104, 107, 108, 112, 126, 128, 129, 130, 132, 144, 145, 147, 149, 154, 156, 157, 158, 160, 161, 164, 167, 168, 236, 237, 238, 240, 241, 242, 243, 244, 247, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 269, 270, 271, 272, 278, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 300, 301, 302, 303, 305, 306, 308, 309, 311, 313, 314, 318, 320, 326, 328, 337, 344, 350, 351, 354, 355, 356, 360, 368, 371, 373, 374, 375, 376, 382, 384, 387, 390, 391, 393, 400, 402, 412, 413, 414, 415, 416, 418, 419, 422, 423, 424, 433, 434, 435, 436, 437, 438, 443, 445, 453, 458, 461, 483, 493, 498, 499, 511, 512, 530, 539, 540, 557, 561, 568, 588, 593, 631, 632, 637, 638, 639, 641, 643, 646, 647, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 680, 683, 684, 686, 690, 691, 693, 694, 695, 696, 697, 698, 700, 702, 708, 710, 711, 716, 721, 722, 723, 724, 726, 727, 734, 757, 759, 760, 761, 764, 765, 766, 767, 769, 770, 771, 772, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 811, 812, 816, 832, 845, 848, 850, 851, 852, 857, 859, 860, 863, 870, 871], "ndim": [12, 13, 71, 76, 81, 94, 99, 104, 116, 120, 391, 393, 459, 460, 466, 477, 478, 479, 492, 501, 503, 513, 630, 651, 654, 661, 701, 704, 767, 848, 858, 865], "newaxi": [12, 13, 644], "transpos": [12, 13, 24, 40, 45, 46, 63, 71, 75, 76, 88, 94, 98, 99, 116, 391, 439, 457, 459, 461, 537, 653, 654, 666, 668, 670, 672, 673, 674, 678, 694, 698, 700, 706, 798, 812, 825, 833, 855, 861, 870, 879], "255": [12, 13, 40, 45, 46, 59, 60, 61, 63, 75, 94, 98, 249, 649, 675, 833, 879], "car": [12, 13], "full_img": [12, 13], "from_numpi": [12, 13, 16, 17], "img_numpi": [12, 13], "torch_unet": [12, 13], "unet_carvana": [12, 13], "ivy_unet": [12, 13], "n_channel": [12, 13], "n_class": [12, 13], "l62": [12, 13], "mask_to_imag": [12, 13], "ndarrai": [12, 13, 67, 71, 72, 90, 94, 112, 141, 142, 155, 390, 391, 393, 402, 435, 460, 505, 544, 545, 615, 646, 651, 822, 827, 839, 845, 850, 851, 854, 857, 861, 862, 863, 866, 868, 870, 874], "uint8": [12, 13, 40, 45, 46, 61, 170, 177, 181, 192, 195, 200, 206, 647, 796, 797, 850, 865], "elif": [12, 13, 20, 21, 849, 854, 861, 862, 863], "bool": [12, 13, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 141, 142, 144, 149, 150, 151, 152, 153, 154, 156, 158, 164, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 203, 207, 211, 212, 214, 215, 217, 219, 222, 223, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 339, 340, 341, 342, 344, 349, 350, 351, 352, 353, 355, 357, 365, 366, 371, 372, 374, 376, 377, 378, 384, 387, 388, 390, 391, 392, 393, 396, 402, 409, 410, 411, 413, 414, 415, 416, 426, 427, 428, 429, 432, 434, 436, 438, 445, 449, 452, 453, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 483, 484, 485, 487, 488, 489, 490, 491, 494, 498, 500, 503, 506, 508, 509, 510, 512, 515, 517, 519, 520, 521, 522, 523, 525, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 592, 593, 597, 606, 607, 608, 609, 611, 613, 615, 616, 629, 632, 633, 635, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 676, 677, 678, 679, 680, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 708, 709, 711, 713, 714, 715, 719, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 744, 745, 746, 748, 749, 750, 755, 756, 758, 759, 760, 761, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 796, 797, 798, 808, 812, 815, 816, 827, 828, 832, 850, 852, 854, 861, 862, 865, 866, 868, 870, 879, 880, 881], "fromarrai": [12, 13, 40, 45, 46, 61], "interpol": [12, 13, 59, 71, 94, 368, 387, 390, 402, 548, 653, 680, 868, 884], "bilinear": [12, 13, 71, 94, 390, 426, 868], "torch_mask": [12, 13], "squeez": [12, 13, 59, 78, 101, 656, 884], "torch_result": [12, 13], "to_numpi": [12, 13, 27, 45, 46, 57, 60, 61, 64, 72, 95, 651, 855, 863], "img_tf": [12, 13], "math": [12, 13, 62, 112, 305, 649, 850, 861, 862, 863, 870], "lot": [12, 13, 849, 850, 859, 865, 872], "far": [12, 13, 24, 45, 46, 658, 738, 749, 828, 851, 852], "space": [12, 13, 67, 70, 71, 72, 90, 93, 94, 95, 140, 152, 153, 307, 364, 387, 392, 469, 561, 565, 646, 649, 651, 868], "del": [12, 13, 849], "empty_cach": 12, "permute_dim": [12, 13, 78, 101, 656, 855], "func_wrapp": [12, 13, 65, 70, 71, 87, 93, 94, 124, 125, 126, 127, 128, 129, 130, 131, 132, 306, 310, 315, 316, 318, 382, 643, 649, 808, 851, 862, 867], "242": [12, 13, 94], "mani": [12, 13, 45, 46, 49, 78, 88, 101, 162, 343, 384, 646, 656, 728, 839, 840, 841, 845, 846, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 862, 863, 865, 868, 870, 872, 876, 883, 884], "factor": [12, 13, 27, 71, 73, 75, 76, 94, 96, 98, 99, 110, 111, 112, 113, 114, 226, 227, 228, 390, 391, 396, 424, 435, 449, 450, 460, 463, 465, 466, 522, 631, 632, 637, 638, 648, 652, 653, 654, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 796, 798, 799, 811, 812, 816, 854], "inc": [12, 13], "unetdoubleconv": [12, 13], "down1": [12, 13], "unetdown": [12, 13], "128": [12, 13, 22, 23, 24, 45, 46, 59, 68, 70, 75, 91, 93, 98, 117, 183, 259, 390, 412, 422, 561, 571, 647, 649, 651, 653, 654, 668, 670, 675, 699], "down2": [12, 13], "down3": [12, 13], "down4": [12, 13], "1024": [12, 13, 22, 23, 59, 60, 833], "up1": [12, 13], "unetup": [12, 13], "up2": [12, 13], "up3": [12, 13], "up4": [12, 13], "outc": [12, 13], "unetoutconv": [12, 13], "x1": [12, 13, 34, 45, 46, 64, 68, 70, 71, 72, 76, 81, 91, 93, 94, 95, 99, 104, 106, 116, 117, 121, 168, 178, 194, 201, 221, 238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 263, 264, 265, 266, 267, 273, 274, 275, 280, 281, 282, 284, 285, 286, 287, 288, 291, 293, 297, 304, 309, 328, 349, 354, 361, 362, 363, 365, 367, 372, 376, 384, 387, 391, 393, 402, 461, 493, 538, 550, 553, 647, 648, 649, 651, 654, 661, 663, 685, 692, 694, 699, 703, 706, 707, 710, 768, 775, 793, 819, 833, 844, 850, 852, 854, 857, 861, 862, 879, 882], "x2": [12, 13, 34, 45, 46, 68, 70, 71, 72, 76, 81, 91, 93, 94, 95, 99, 104, 116, 117, 121, 168, 194, 201, 221, 238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 263, 264, 265, 266, 267, 273, 274, 275, 280, 281, 282, 284, 285, 286, 287, 288, 291, 293, 297, 304, 309, 349, 354, 361, 362, 363, 365, 367, 372, 376, 387, 391, 393, 402, 447, 461, 493, 538, 550, 553, 647, 648, 649, 651, 654, 661, 685, 692, 694, 699, 703, 706, 707, 710, 768, 793, 819, 833, 844, 850, 852, 854, 857, 861, 862], "x3": [12, 13, 68, 72, 168, 550, 647, 651], "x4": [12, 13], "x5": [12, 13], "in_channel": [12, 13], "out_channel": [12, 13], "mid_channel": [12, 13], "double_conv": [12, 13], "with_bia": [12, 13, 812, 833, 879], "batchnorm2d": [12, 13, 22, 23, 24, 815], "downscal": [12, 13, 72, 95, 556, 557, 578, 651], "maxpool": [12, 13, 22, 23, 24], "doubl": [12, 13], "conv": [12, 13, 653, 812, 868], "maxpool_conv": [12, 13], "upscal": [12, 13], "scale_factor": [12, 13, 71, 94, 390, 426, 868], "align_corn": [12, 13, 71, 94, 390, 426, 868], "conv2dtranspos": [12, 13, 812], "bhwc": [12, 13], "diff_h": [12, 13], "diff_w": [12, 13], "pad_width": [12, 13, 71, 78, 94, 101, 393, 499, 656, 721, 734], "constant_pad": [12, 13, 78, 101, 656], "kornia": [14, 15, 32, 33, 40, 43, 45, 46, 59, 63, 833, 879], "transpiledquaternion": 14, "geometri": 14, "quaternion": 14, "target": [14, 15, 19, 27, 28, 30, 36, 38, 39, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 61, 71, 94, 210, 392, 467, 468, 469, 470, 471, 472, 473, 474, 648, 791, 812, 814, 818, 821, 833, 837, 840, 843, 846, 855, 856, 863, 864, 869, 871, 879, 881, 882, 884, 886], "transpiledso3": 14, "liegroup": 14, "so3": 14, "quaternion_data": 14, "transpiled_quaternion": 14, "transpiled_so3": 14, "tf_rgb_to_grayscal": [15, 43], "rgb_to_grayscal": [15, 43, 833], "databas": [15, 849, 865], "examples_and_demo": 15, "sqlite": 15, "tabl": [15, 238, 255, 288, 601, 624, 649, 651, 796, 797, 812, 862, 867, 876, 884], "autotun": 15, "ivyexcept": [15, 578, 611, 651, 829, 851, 854, 859, 861, 862, 866], "source_to_sourc": 15, "profil": [15, 648, 881], "translat": [15, 818], "_compil": [15, 840], "_source_to_sourc": 15, "47": [15, 27, 57, 61, 70, 71, 76, 80, 93, 94, 95, 96, 98, 103, 244, 302, 390, 402, 410, 428, 429, 539, 561, 562, 635, 649, 651, 652, 653, 654, 660, 677, 692, 760, 761], "48": [15, 27, 57, 61, 70, 71, 93, 94, 95, 96, 103, 126, 237, 260, 302, 390, 410, 411, 412, 422, 428, 429, 432, 576, 631, 635, 643, 649, 651, 652, 654, 658, 664, 699, 739, 760, 779], "49": [15, 57, 61, 71, 80, 94, 98, 99, 302, 390, 391, 402, 412, 422, 433, 458, 539, 649, 664, 709, 760, 779], "vll": 15, "pyx": 15, "ivy_kei": 15, "pem": 15, "torch_input": [15, 16, 17], "rand": [15, 16, 17, 18, 19, 41, 43, 45, 46, 61, 827, 828, 833, 880], "tf_input": [15, 16, 17, 879], "tf_output": [15, 16, 17], "via": [16, 17, 43, 44, 48, 51, 262, 391, 393, 460, 463, 466, 508, 649, 658, 748, 749, 841, 844, 848, 850, 851, 861, 866, 868, 870, 871, 884], "alongsid": [16, 17, 34, 35, 47, 653, 680], "basic": [16, 17, 28, 30, 34, 37, 41, 45, 46, 49, 52, 393, 507, 834, 839, 852, 865], "singl": [16, 17, 36, 48, 57, 62, 70, 80, 88, 93, 103, 112, 307, 366, 387, 391, 397, 458, 525, 616, 629, 633, 649, 651, 652, 653, 660, 662, 680, 759, 760, 761, 769, 796, 812, 832, 839, 840, 841, 844, 849, 852, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 872, 876, 877], "lstm": [16, 17, 18, 19, 653, 679, 812, 870, 884], "sample_input": [16, 17], "uniform": [16, 17, 35, 36, 37, 38, 39, 43, 45, 46, 47, 48, 50, 51, 52, 59, 71, 80, 94, 103, 402, 541, 660, 758, 759, 761, 811, 833, 864, 879, 882], "tf_lstm": [16, 17, 18, 19], "torch_lstm": [16, 17, 18, 19], "physicaldevic": [16, 17], "physical_devic": [16, 17], "device_typ": [16, 17], "alloc": [16, 17, 67, 68, 71, 91, 160, 161, 167, 344, 384, 646, 647, 832, 839, 841, 872], "physic": [16, 17, 219, 648], "modifi": [16, 17, 61, 71, 88, 94, 111, 393, 402, 496, 499, 505, 545, 796, 828, 839, 840, 841, 844, 846, 847, 850, 851, 853, 855, 856, 858, 861, 863, 865, 866, 870], "164": [16, 17, 24], "state_upd": [16, 17, 41], "properti": [16, 17, 41, 88, 111, 112, 113, 114, 115, 116, 120, 814, 816, 844, 848, 858, 863, 865], "_transpil": [16, 17, 41], "those": [16, 17, 58, 59, 76, 78, 88, 94, 99, 101, 140, 194, 255, 288, 509, 630, 646, 647, 649, 651, 654, 656, 658, 661, 701, 704, 719, 740, 767, 836, 839, 840, 841, 842, 845, 848, 849, 850, 859, 861, 862, 863, 865, 868], "constant": [16, 17, 18, 19, 28, 30, 35, 38, 47, 50, 52, 57, 71, 78, 79, 94, 101, 102, 111, 112, 337, 384, 390, 392, 393, 436, 471, 472, 499, 656, 658, 659, 721, 744, 757, 811, 815, 833, 858, 863, 866, 872, 880, 882], "toler": [16, 17, 18, 71, 76, 94, 99, 349, 366, 387, 391, 445, 460, 466, 654, 697, 700, 791, 793, 844, 863, 884], "benchmark": [16, 17, 18], "n_run": [16, 17, 18], "tf_time": [16, 17], "round": [16, 17, 70, 71, 93, 94, 111, 113, 114, 115, 238, 251, 255, 261, 262, 288, 302, 308, 309, 360, 387, 649, 837, 839, 840, 841, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876], "torch_tim": [16, 17], "cpu_speedup": [16, 17], "gpu_speedup": 16, "ntranspil": [16, 17], "5017": [16, 17], "1101": [16, 17], "7519": [16, 17], "901": [16, 17], "607x": [16, 17], "944x": [16, 17], "32": [18, 19, 27, 41, 45, 46, 57, 59, 60, 61, 70, 71, 80, 93, 94, 98, 99, 103, 116, 117, 126, 179, 237, 249, 250, 259, 273, 279, 295, 298, 299, 353, 387, 390, 391, 393, 402, 410, 411, 412, 422, 432, 433, 443, 447, 482, 539, 561, 577, 643, 647, 649, 651, 653, 654, 660, 661, 664, 668, 670, 671, 675, 677, 694, 699, 710, 759, 760, 761, 768, 779, 796, 799, 849, 850, 860], "original_output": [18, 19], "transpiled_output": [18, 19], "original_torch_tim": 18, "autograph": 18, "do_not_convert": 18, "compiled_tf_lstm": 18, "transpiled_tf_tim": 18, "original_tf_lstm": 18, "time_major": [18, 94, 390, 436, 653, 679], "return_sequ": [18, 812], "original_tf_tim": 18, "slower": [18, 36, 862], "480074623755541x": 18, "362692848996253x": 18, "openmim": [20, 21], "mim": [20, 21], "0rc8": [20, 21], "get_model": [20, 21], "list_model": [20, 21], "mmengin": [20, 21], "configdict": [20, 21], "saniti": [20, 21, 25, 26, 27, 45, 862], "checkpoint": [20, 21, 22, 23, 62, 872], "against": [20, 21, 68, 71, 72, 76, 81, 91, 93, 94, 95, 99, 104, 168, 287, 306, 349, 352, 355, 366, 387, 402, 544, 545, 546, 547, 548, 585, 647, 649, 651, 654, 661, 694, 695, 697, 700, 764, 865, 871, 872, 884], "zoo": [20, 21], "checkpoint_nam": [20, 21, 25, 26, 45], "tiny_32xb128": [20, 21], "noema_in1k": [20, 21], "openmmlab": [20, 21], "get_scal": [20, 21], "cfg": [20, 21, 856], "_config": [20, 21], "train_pipelin": [20, 21], "tensor_imag": [20, 21], "transpiled_graph": [20, 21, 25, 26, 45], "issu": [20, 21, 25, 26, 392, 469, 811, 834, 835, 836, 837, 838, 840, 842, 844, 846, 847, 849, 850, 851, 852, 854, 855, 862, 865, 866, 868, 872, 880], "107960": [20, 21, 25, 26], "export": [20, 21, 25, 26, 60, 849, 886], "lc_all": [20, 21, 25, 26], "en_u": [20, 21, 25, 26], "utf": [20, 21, 25, 26], "ld_library_path": [20, 21, 25, 26], "lib64": [20, 21, 25, 26], "library_path": [20, 21, 25, 26], "stub": [20, 21, 25, 26, 847], "ldconfig": [20, 21, 25, 26], "_f": [20, 21, 25, 26, 45], "comp_model": [20, 21, 25, 26, 45], "equival": [20, 21, 25, 26, 43, 45, 76, 99, 111, 112, 140, 249, 262, 283, 284, 297, 298, 393, 483, 508, 514, 646, 649, 654, 697, 700, 703, 711, 822, 861, 862, 868, 870, 879], "np_imag": [20, 21, 40, 45, 46], "jax_imag": [20, 21], "hk": [20, 21, 25, 26, 45, 59, 63, 833, 879], "rng_kei": [20, 21, 25, 26, 45, 833, 879], "prngkei": [20, 21, 25, 26, 36, 37, 45, 46, 59, 833, 879], "jax_mlp_forward": [20, 21], "init": [20, 21, 25, 26, 45, 59, 61, 71, 94, 391, 449, 460, 466, 833, 844, 879], "rng": [20, 21, 25, 26, 45, 59, 833, 879], "06": [20, 21, 27, 38, 61, 68, 80, 93, 96, 115, 124, 180, 237, 253, 390, 412, 422, 637, 643, 647, 652, 761, 791, 793, 865], "block_until_readi": [20, 21], "08": [20, 21, 71, 84, 94, 103, 241, 349, 366, 387, 390, 392, 412, 422, 472, 649, 760, 761, 786, 791, 796, 856], "train2017": [20, 21, 25, 26, 40, 45, 46, 833, 879], "000000283921": [20, 21, 25, 26, 45], "out_torch": [20, 21, 25, 26, 45], "et": [20, 21, 653, 654, 680, 704], "out_jax": [20, 21, 25, 26, 45], "66m": [20, 21], "53m": [20, 21], "That": [20, 21, 25, 26, 28, 30, 35, 36, 37, 38, 45, 46, 47, 48, 49, 50, 51, 52, 59, 297, 392, 471, 649, 827, 840, 841, 845, 865, 885], "pretti": [20, 21, 25, 26, 45, 46, 59, 837, 855], "solid": [20, 21, 25, 26, 45], "2023": [22, 23, 24, 25, 26, 38, 40, 41, 59], "52": [22, 23, 27, 57, 70, 93, 95, 96, 103, 243, 253, 255, 402, 539, 561, 562, 577, 631, 649, 651, 652, 653, 654, 664, 677, 699, 761, 779, 827], "110": [22, 23, 59], "10472": [22, 23], "10k": [22, 23], "tx": [22, 23], "23k": [22, 23], "unifyai": [22, 23, 63, 833, 835, 840, 841, 847, 855], "634575": [22, 23], "620k": [22, 23], "jpeg": [22, 23, 60, 61], "619": [22, 23], "70k": [22, 23], "113": [22, 23], "resnet34_weight": [22, 23], "torch_resnet_34": [22, 23], "conv1": [22, 23, 24, 44], "kernel_s": [22, 23, 24, 41, 44, 45, 46, 61, 71, 94, 390, 409, 410, 411, 430, 437, 812, 819], "stride": [22, 23, 24, 71, 75, 94, 95, 98, 116, 390, 393, 409, 410, 411, 427, 428, 429, 430, 432, 433, 437, 475, 651, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 812, 861, 866, 884], "bia": [22, 23, 24, 71, 75, 94, 98, 102, 396, 402, 522, 538, 588, 651, 653, 659, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 757, 812, 818, 858, 865, 870], "bn1": [22, 23, 24], "ep": [22, 23, 24, 71, 76, 79, 94, 99, 102, 180, 315, 382, 391, 392, 396, 445, 472, 517, 518, 519, 647, 654, 659, 697, 700, 757, 808, 815], "05": [22, 23, 24, 27, 61, 67, 70, 71, 73, 79, 93, 94, 96, 102, 153, 280, 333, 349, 358, 359, 366, 384, 387, 396, 517, 518, 519, 576, 598, 621, 631, 632, 637, 646, 649, 651, 652, 654, 659, 695, 757, 791, 796, 811, 815, 863, 865], "momentum": [22, 23, 24, 59, 71, 94, 396, 517, 519, 815], "affin": [22, 23, 24, 815], "track_running_stat": [22, 23, 24, 815], "dilat": [22, 23, 24, 63, 71, 75, 94, 98, 390, 393, 427, 428, 429, 432, 433, 437, 499, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 812], "ceil_mod": [22, 23, 24, 71, 94, 390, 409, 410, 411, 427, 428, 429, 432, 812], "layer1": [22, 23, 24], "basicblock": [22, 23, 24], "conv2": [22, 23, 24], "bn2": [22, 23, 24], "layer2": [22, 23, 24], "layer3": [22, 23, 24], "layer4": [22, 23, 24], "output_s": [22, 23, 24, 71, 94, 390, 404, 405, 406, 407, 653, 682, 812, 833, 879], "fc": [22, 23, 24, 30, 44, 59, 833, 879], "in_featur": [22, 23, 24, 75, 98, 653, 677, 818, 865], "out_featur": [22, 23, 24, 75, 98, 653, 677, 818, 865], "resnet_34": [22, 23], "ivy_resnet_34": [22, 23], "333f7ec4": [22, 23], "pth": [22, 23], "3m": [22, 23], "4mb": [22, 23], "preserv": [22, 23, 25, 26, 38, 40, 41, 71, 72, 73, 88, 94, 95, 96, 117, 390, 391, 393, 402, 426, 460, 477, 478, 479, 490, 491, 511, 545, 578, 641, 651, 652, 656, 723, 796, 864, 865, 872, 879, 881, 886], "multipl": [22, 23, 25, 26, 34, 38, 40, 41, 45, 70, 71, 76, 79, 84, 85, 88, 93, 94, 95, 96, 99, 101, 102, 107, 108, 149, 249, 273, 280, 286, 287, 288, 290, 350, 351, 387, 390, 391, 393, 396, 400, 412, 419, 422, 424, 458, 485, 494, 512, 515, 522, 531, 550, 557, 588, 631, 632, 635, 637, 638, 639, 641, 646, 649, 651, 652, 653, 654, 656, 659, 661, 664, 665, 668, 669, 670, 671, 684, 693, 694, 695, 708, 719, 722, 727, 728, 757, 764, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 812, 828, 832, 839, 841, 845, 846, 848, 852, 854, 856, 858, 861, 862, 863, 865, 868, 870, 872, 880, 884, 886], "rel": [22, 23, 25, 26, 38, 40, 41, 71, 73, 76, 78, 83, 90, 94, 96, 99, 101, 106, 116, 151, 349, 366, 387, 392, 402, 471, 472, 538, 632, 635, 637, 638, 639, 652, 654, 656, 663, 688, 697, 700, 708, 723, 727, 773, 776, 791, 793, 841, 849, 863, 868, 884], "home": [22, 23, 25, 26, 38, 40, 41, 849], "workspac": [22, 23, 25, 26, 35, 38, 40, 41, 840, 855], "95": [22, 23, 24, 27, 57, 71, 73, 76, 80, 87, 96, 98, 103, 124, 375, 387, 433, 631, 635, 639, 643, 652, 654, 660, 692, 760, 761], "track": [22, 23, 34, 45, 46, 58, 59, 832, 840, 841, 844, 860, 861, 880, 884], "properli": [22, 23, 840, 843, 854, 856, 862, 865], "_trace_graph": [22, 23], "shown": [22, 23, 41, 45, 86, 88, 109, 272, 295, 353, 387, 649, 839, 840, 841, 844, 847, 849, 850, 852, 854, 856, 857, 862, 863, 865, 866, 867, 870, 871, 872], "8507": [22, 23], "1351": [22, 23], "0069": [22, 23], "85072625": [22, 23], "13506091": [22, 23], "00688289": [22, 23], "resnet50_weight": [22, 23], "torch_resnet_50": [22, 23], "imagenet1k_v2": [22, 23], "11ad3fa6": [22, 23], "8m": [22, 23], "8mb": [22, 23], "bottleneck": [22, 23], "conv3": [22, 23], "bn3": [22, 23], "2048": [22, 23, 609, 651], "resnet_50": [22, 23], "ivy_resnet_50": [22, 23], "3429": [22, 23], "0408": [22, 23], "0121": [22, 23], "34288204": [22, 23], "04077014": [22, 23], "01212029": [22, 23], "deploy": [24, 840, 876, 877, 879, 886], "ow": 24, "residu": 24, "extrem": 24, "though": [24, 40, 838, 839, 841, 850, 851, 853, 858, 861, 862, 868, 872], "idea": [24, 833, 839, 864, 866, 877, 886], "revolutionari": 24, "reach": [24, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876, 877, 884], "152": 24, "vanish": [24, 811], "explod": [24, 811, 875, 876], "gradient": [24, 45, 46, 59, 61, 71, 94, 111, 228, 379, 387, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 648, 657, 735, 736, 737, 793, 804, 816, 843, 866, 872, 884], "astor": 24, "cu121": 24, "pillow": [24, 64], "filelock": [24, 40, 59], "extens": [24, 40, 59, 70, 76, 93, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 157, 158, 159, 160, 161, 163, 164, 170, 180, 183, 195, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 350, 351, 353, 387, 390, 393, 402, 434, 508, 512, 538, 646, 647, 649, 654, 656, 661, 662, 663, 664, 665, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 720, 722, 723, 724, 726, 727, 729, 730, 734, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 838, 840, 841, 853, 855, 856, 865, 884], "sympi": [24, 40], "fsspec": [24, 40, 59], "nvrtc": 24, "cu12": 24, "cupti": 24, "54": [24, 57, 68, 70, 75, 93, 94, 98, 103, 183, 252, 253, 258, 273, 302, 308, 329, 384, 390, 402, 412, 422, 539, 649, 653, 654, 664, 677, 696, 699, 759, 760, 761, 779, 849, 852], "curand": 24, "106": [24, 61], "cusolv": [24, 654, 705], "107": 24, "cuspars": 24, "nccl": 24, "nvtx": 24, "triton": 24, "nvjitlink": 24, "mpmath": [24, 40], "py2": [24, 59, 61], "filter": [24, 59, 61, 63, 71, 75, 94, 98, 332, 333, 384, 390, 411, 429, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 798, 812, 833, 846, 849], "get_logg": 24, "setlevel": 24, "solv": [24, 76, 99, 391, 455, 654, 796, 833, 840, 844, 855, 862, 886], "todai": 24, "ant": 24, "bee": 24, "120": [24, 61, 84, 107, 117, 654, 699, 777], "usual": [24, 28, 30, 62, 255, 288, 649, 827, 840, 844, 850, 862, 865, 868], "upon": [24, 45, 46, 63, 832, 841, 842, 852, 861, 865, 868, 872, 884], "scratch": [24, 865], "transfer": 24, "subset": [24, 61, 798, 845, 849, 853, 857, 860, 862, 865, 870, 884], "extract": [24, 45, 46, 53, 60, 71, 94, 112, 393, 482, 509, 862, 864, 866, 871, 883, 884, 885], "zipfil": 24, "zip": [24, 61, 870], "hymenoptera_data": 24, "replac": [24, 29, 31, 42, 60, 70, 71, 72, 78, 80, 88, 93, 94, 95, 101, 103, 147, 289, 325, 328, 382, 384, 393, 505, 508, 512, 592, 593, 597, 646, 649, 651, 656, 660, 719, 758, 796, 841, 847, 848, 850, 851, 859, 862, 865, 870, 872, 879], "send": 24, "statu": [24, 839, 842, 849, 856], "status_cod": 24, "basenam": 24, "zip_save_path": 24, "join": [24, 60, 61, 78, 88, 94, 101, 483, 484, 656, 720, 730, 833, 842, 873], "getcwd": 24, "wb": 24, "zip_ref": 24, "extractal": 24, "option": [24, 51, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 183, 185, 195, 207, 211, 223, 226, 227, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 434, 435, 436, 438, 439, 441, 442, 443, 445, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 568, 569, 571, 572, 573, 574, 576, 577, 578, 580, 581, 584, 589, 592, 593, 597, 607, 608, 609, 611, 613, 615, 616, 617, 629, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 744, 745, 749, 750, 755, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 797, 804, 808, 809, 811, 812, 814, 816, 817, 827, 832, 839, 840, 841, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 868, 870, 872, 873, 876, 879, 880, 881, 882, 884], "delet": [24, 60, 841, 849], "fail": [24, 60, 791, 833, 837, 840, 841, 844, 849, 850, 852, 856, 859, 861, 862, 863], "augment": [24, 59], "data_transform": 24, "randomresizedcrop": 24, "randomhorizontalflip": 24, "val": [24, 72, 88, 93, 95, 268, 393, 488, 576, 577, 578, 597, 598, 599, 649, 651, 825, 850, 861], "data_dir": 24, "image_dataset": 24, "imagefold": 24, "dataset_s": [24, 61], "class_nam": [24, 61, 793], "imshow": [24, 59, 60], "inp": [24, 98, 653, 675], "clip": [24, 57, 70, 71, 78, 93, 94, 95, 101, 286, 287, 393, 482, 508, 509, 556, 557, 649, 651, 656, 848, 858, 860, 861, 870], "paus": 24, "001": [24, 59, 70, 71, 79, 91, 94, 96, 180, 278, 295, 353, 366, 387, 632, 647, 649, 652, 659, 757, 796], "bit": [24, 71, 84, 179, 180, 183, 246, 247, 249, 402, 539, 540, 647, 649, 664, 777, 778, 783, 785, 838, 839, 840, 848, 849, 850, 852, 858, 870], "batch": [24, 59, 60, 61, 71, 72, 76, 88, 94, 95, 99, 226, 227, 390, 391, 392, 396, 404, 406, 407, 413, 426, 436, 453, 467, 469, 517, 518, 519, 522, 565, 568, 569, 630, 648, 651, 653, 654, 657, 659, 677, 678, 679, 680, 711, 735, 736, 737, 757, 796, 812, 815, 848, 858, 863], "make_grid": 24, "resnet18": [24, 63, 64], "train_model": 24, "train_dataset": 24, "val_dataset": 24, "metric": [24, 833, 872], "train_acc_metr": 24, "sparsecategoricalaccuraci": 24, "val_acc_metr": 24, "nstart": 24, "start_tim": 24, "x_batch_train": 24, "y_batch_train": 24, "gradienttap": 24, "tape": 24, "loss_valu": 24, "grad": [24, 45, 46, 57, 61, 631, 652, 816, 860], "trainable_weight": 24, "apply_gradi": 24, "update_st": 24, "everi": [24, 40, 45, 46, 51, 59, 67, 71, 72, 94, 95, 150, 151, 316, 350, 351, 364, 382, 387, 390, 393, 427, 428, 429, 436, 514, 550, 646, 651, 839, 841, 844, 846, 847, 849, 850, 852, 856, 857, 858, 859, 861, 862, 863, 865, 870, 879, 880, 882, 884], "4f": 24, "float": [24, 65, 67, 68, 70, 71, 72, 73, 75, 76, 77, 79, 80, 82, 84, 87, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 107, 111, 114, 116, 126, 132, 140, 141, 142, 145, 147, 149, 150, 151, 152, 153, 157, 158, 163, 167, 171, 175, 180, 184, 188, 194, 195, 198, 204, 213, 222, 226, 227, 230, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 266, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 349, 350, 351, 352, 360, 361, 366, 368, 369, 372, 373, 374, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 402, 405, 414, 415, 416, 433, 434, 441, 444, 445, 447, 460, 464, 466, 467, 468, 472, 473, 488, 507, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 538, 539, 540, 541, 546, 547, 548, 555, 556, 557, 565, 574, 598, 599, 602, 608, 609, 629, 631, 632, 635, 637, 638, 639, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 676, 678, 680, 683, 684, 686, 689, 690, 691, 693, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 708, 711, 713, 714, 715, 735, 736, 737, 744, 757, 760, 761, 767, 769, 770, 771, 772, 777, 778, 780, 781, 782, 783, 784, 785, 786, 793, 796, 797, 799, 808, 811, 812, 815, 816, 832, 837, 844, 848, 850, 853, 854, 855, 857, 858, 860, 861, 863, 865, 866, 868, 870], "train_acc": 24, "acc": 24, "reset": [24, 202, 203, 204, 205, 206, 232, 233, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 647, 648, 651, 851], "reset_st": 24, "x_batch_val": 24, "y_batch_val": 24, "val_logit": 24, "val_acc": 24, "taken": [24, 51, 71, 76, 94, 99, 356, 387, 390, 435, 654, 688, 708, 839, 849, 862, 866, 885], "instanti": [24, 45, 46, 804, 818, 853], "sparsecategoricalcrossentropi": 24, "from_logit": [24, 77, 100, 655, 713, 813], "3121": 24, "2126": 24, "4992": 24, "6072": 24, "244": [24, 70, 260, 833], "3852": 24, "1830": 24, "1015": 24, "1364": 24, "3915": 24, "7465": 24, "8033": 24, "3333": 24, "214": 24, "2763": 24, "3526": 24, "4220": 24, "1592": 24, "8525": 24, "3660": 24, "1085": 24, "1366": 24, "4634": 24, "8115": 24, "3987": 24, "36": [24, 27, 57, 61, 70, 71, 75, 84, 94, 95, 99, 243, 298, 299, 364, 387, 390, 391, 402, 412, 422, 448, 539, 561, 562, 609, 649, 651, 654, 658, 664, 677, 696, 699, 709, 749, 779], "3875": 24, "8096": 24, "5836": 24, "4432": 24, "8402": 24, "3529": 24, "218": [24, 61], "0323": 24, "0982": 24, "4332": 24, "0324": [24, 61], "8197": 24, "3464": 24, "228": [24, 64], "1794": 24, "9244": 24, "9429": 24, "7951": 24, "231": [24, 131, 643], "0132": 24, "4156": 24, "2132": 24, "1413": 24, "8279": 24, "4183": 24, "3028": 24, "1461": 24, "3779": 24, "4553": 24, "8607": 24, "4444": 24, "223": [24, 100], "2835": 24, "0436": 24, "7022": 24, "1335": 24, "8648": 24, "4052": 24, "215": 24, "0863": 24, "0237": 24, "0181": 24, "1331": 24, "8975": 24, "4967": 24, "209": 24, "1050": 24, "2271": 24, "3540": 24, "0588": 24, "8689": 24, "4902": 24, "222": 24, "7880": 24, "4800": 24, "4741": 24, "0218": 24, "5033": 24, "220": [24, 93, 260], "61": [24, 57, 59, 70, 71, 76, 93, 94, 96, 100, 103, 241, 276, 278, 303, 412, 631, 649, 652, 653, 654, 675, 692, 761, 855], "2198": 24, "6509": 24, "3352": 24, "0270": 24, "4771": 24, "216": [24, 96, 99, 631, 652, 709], "0385": 24, "1798": 24, "0143": 24, "0309": 24, "5359": 24, "213": [24, 865], "7697": 24, "3405": 24, "6033": 24, "8392": 24, "8770": 24, "205": [24, 61], "0623": 24, "4221": 24, "0138": 24, "4607": 24, "5294": 24, "221": [24, 65, 127], "0349": 24, "6545": 24, "1935": 24, "1512": 24, "8852": 24, "5098": 24, "212": [24, 59, 71, 75, 94, 374, 387, 677], "0821": 24, "1985": 24, "7769": 24, "3897": 24, "204": 24, "1106": 24, "1354": 24, "1801": 24, "0276": 24, "8893": 24, "5621": 24, "1185": 24, "0447": 24, "2817": 24, "1006": 24, "5752": 24, "2220": 24, "0387": 24, "1639": 24, "0080": 24, "9221": 24, "5686": 24, "0287": 24, "0115": 24, "1679": 24, "7920": 24, "208": 24, "0071": 24, "0790": 24, "2657": 24, "0758": 24, "8934": 24, "210": [24, 851], "2406": 24, "9193": 24, "2372": 24, "9555": 24, "9139": 24, "5817": 24, "211": 24, "1150": [24, 294, 649], "0810": 24, "2205": 24, "1616": 24, "9344": 24, "82": [24, 27, 57, 59, 64, 65, 70, 96, 103, 127, 241, 402, 539, 631, 652, 760, 761, 837, 855], "0200": 24, "0117": 24, "2090": 24, "1444": 24, "5948": 24, "63": [24, 25, 26, 27, 57, 61, 70, 87, 93, 98, 99, 132, 294, 301, 302, 390, 402, 412, 422, 433, 539, 649, 654, 658, 664, 684, 699, 739, 750, 779], "0482": 24, "0338": 24, "5971": 24, "0368": 24, "6144": 24, "207": 24, "1593": 24, "4745": 24, "0733": 24, "0434": 24, "6078": 24, "68": [24, 27, 57, 61, 64, 70, 103, 127, 150, 243, 390, 412, 422, 643, 646, 649, 654, 659, 710, 757, 760, 761], "3923": 24, "1614": 24, "3711": [24, 392, 474], "2719": 24, "6275": 24, "visualize_model": 24, "num_imag": 24, "was_train": 24, "learning_phas": 24, "images_so_far": 24, "pred": [24, 45, 46, 60, 61, 71, 77, 94, 100, 392, 468, 471, 655, 713, 714, 715, 716, 848, 858, 861], "j": [24, 67, 70, 71, 72, 76, 84, 90, 93, 94, 99, 111, 139, 143, 156, 236, 237, 238, 239, 241, 244, 253, 255, 258, 260, 268, 276, 278, 282, 288, 299, 301, 302, 305, 306, 353, 387, 390, 391, 402, 418, 419, 423, 434, 435, 439, 444, 446, 457, 463, 548, 553, 645, 646, 649, 651, 654, 664, 689, 708, 779, 828, 841, 843, 847, 880], "continu": [24, 41, 45, 46, 61, 139, 302, 310, 382, 645, 649, 833, 838, 839, 840, 843, 844, 855, 861, 864, 865, 872, 876, 884], "yet": [25, 26, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 46, 61, 383, 385, 386, 394, 395, 399, 839, 840, 855, 872, 880, 882], "broken": [25, 26, 38, 40, 41, 884], "permiss": [25, 26, 38, 40, 41, 840, 849], "recommend": [25, 26, 38, 40, 41, 283, 284, 297, 392, 469, 649, 664, 781, 784, 835, 840, 846, 847, 856, 859, 860, 873, 880], "virtual": [25, 26, 38, 40, 41, 841, 862], "pypa": [25, 26, 38, 40, 41], "venv": [25, 26, 38, 40, 41], "autofeatureextractor": [25, 26, 45], "extractor": [25, 26, 28, 30, 45, 61], "hug": [25, 26, 45, 880], "face": [25, 26, 45, 834, 840, 844, 855, 856, 860, 868, 870, 880, 884], "arch_nam": [25, 26, 45], "microsoft": [25, 26, 45, 879, 880, 884], "feature_extractor": [25, 26, 45], "980130": [25, 26], "9342": [25, 26], "980177": [25, 26], "609": [25, 26], "980207": [25, 26], "1518": [25, 26], "351203": [25, 26], "inputs_jax": [25, 26, 45], "last_hidden_st": [25, 26, 45], "jax_forward": [25, 26, 45], "jit_appli": [25, 26], "134": [25, 26, 75, 654, 677, 696], "2x": [25, 26, 45], "ipytest": 27, "load_breast_canc": 27, "autoconfig": 27, "sole": [27, 57, 857, 866, 884, 885, 886], "test_jax_gpu": 27, "xla_bridg": [27, 59], "get_backend": [27, 858], "test_torch_gpu": 27, "test_xgboost_gpu": 27, "capsi": 27, "load_diabet": 27, "xgb_model": 27, "xgbregressor": 27, "tree_method": 27, "consol": [27, 591, 651, 841, 856, 865], "gpu_hist": 27, "captur": [27, 860, 865, 870, 885], "readouterr": 27, "err": 27, "tabular": 27, "pulsar": 27, "standard": [27, 70, 76, 79, 80, 84, 93, 102, 103, 107, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 157, 158, 159, 160, 161, 163, 164, 170, 180, 183, 195, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 350, 351, 353, 387, 390, 391, 393, 402, 434, 464, 508, 512, 538, 630, 646, 647, 649, 651, 654, 656, 659, 660, 661, 662, 663, 664, 665, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 720, 722, 723, 724, 726, 727, 729, 730, 734, 757, 760, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 798, 811, 815, 827, 828, 833, 836, 843, 844, 845, 848, 850, 853, 857, 861, 864, 865, 866, 872, 876, 879, 886], "extra": [27, 46, 88, 117, 136, 630, 645, 651, 845, 850, 852, 859, 861, 862, 863, 868, 871, 879, 880], "dimens": [27, 67, 71, 72, 75, 76, 77, 78, 80, 81, 82, 84, 85, 88, 90, 94, 95, 98, 99, 100, 101, 103, 104, 105, 107, 108, 114, 116, 117, 120, 127, 131, 156, 160, 161, 331, 342, 344, 345, 346, 347, 350, 351, 355, 356, 364, 371, 378, 384, 387, 388, 390, 391, 392, 393, 396, 397, 400, 402, 404, 406, 407, 409, 410, 411, 413, 418, 419, 423, 427, 428, 429, 430, 433, 434, 436, 437, 439, 441, 444, 453, 462, 467, 471, 477, 478, 479, 483, 489, 501, 502, 503, 504, 506, 508, 512, 517, 518, 519, 522, 526, 528, 531, 541, 543, 544, 545, 546, 547, 548, 561, 562, 563, 565, 572, 606, 610, 630, 643, 646, 651, 653, 654, 655, 656, 657, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 684, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 710, 711, 714, 715, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 735, 736, 737, 763, 764, 765, 767, 769, 770, 771, 772, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 798, 808, 812, 815, 852, 854, 860, 862, 863, 865, 868, 870], "load_data": 27, "standardscal": 27, "df": [27, 61], "delimit": 27, "sc": 27, "fit_transform": 27, "117564": 27, "navig": [27, 837, 840, 841, 843, 855], "rerun": [27, 59], "436": 27, "t4": 27, "tier": [27, 842], "reduc": [27, 71, 72, 76, 81, 84, 85, 88, 94, 95, 99, 104, 107, 108, 228, 350, 351, 371, 387, 388, 402, 543, 544, 545, 546, 547, 548, 562, 648, 651, 654, 661, 664, 665, 701, 764, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 827, 828, 849, 854, 862, 868, 870, 880], "although": [27, 654, 702, 835, 845, 847, 848, 862, 868, 884], "experi": [27, 32, 61, 840, 854, 865, 872], "substanti": [27, 836, 841, 845, 850, 865, 884], "stuff": 27, "201": [27, 93, 94, 240, 412, 649], "20x": 27, "ivyclassifi": 27, "106597": 27, "10967": 27, "96": [27, 57, 71, 73, 93, 94, 95, 103, 252, 273, 305, 375, 387, 390, 412, 561, 562, 635, 649, 651, 652, 654, 664, 699, 761, 779], "73": [27, 57, 70, 99, 302, 402, 539, 654, 660, 684, 760, 865], "852": [27, 653, 677], "449": 27, "nevertheless": 27, "fall": [27, 59, 816, 839, 850], "short": [27, 57, 71, 94, 438, 653, 678, 679, 839, 841, 850, 870], "blaze": 27, "35": [27, 57, 65, 75, 76, 87, 93, 94, 98, 99, 103, 127, 243, 302, 390, 412, 422, 649, 653, 654, 661, 664, 677, 685, 692, 760, 768, 779], "surpass": 27, "remark": [27, 872], "artifici": 27, "simpli": [27, 34, 45, 46, 48, 57, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 390, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 649, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 704, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 833, 839, 840, 841, 845, 846, 847, 849, 850, 851, 852, 853, 855, 857, 858, 861, 862, 863, 865, 868, 870, 871, 872, 874, 885], "x_doubl": 27, "vstack": [27, 71, 94, 393, 495], "y_doubl": 27, "235128": 27, "315": [27, 294, 649], "879": 27, "380": 27, "seem": [27, 839, 840, 868, 870, 872, 884], "examin": 27, "600": [27, 61, 95, 98, 390, 414, 415, 569, 849], "conduct": [27, 877], "num_boosting_round": 27, "300": [27, 93, 95, 98, 298, 390, 414, 415, 569, 593, 649, 651, 654, 693, 865], "500": [27, 71, 94, 95, 98, 390, 391, 414, 415, 466, 569, 651], "ivy_elapsed_tim": 27, "xgb_elapsed_tim": 27, "ivy_tim": 27, "partial": [27, 71, 88, 94, 181, 182, 214, 215, 364, 387, 390, 391, 393, 402, 438, 453, 460, 501, 502, 503, 504, 545, 566, 567, 636, 647, 648, 651, 652, 797, 799, 813, 814, 841, 847, 868], "xgb_time": 27, "fivethirtyeight": 27, "legend": [27, 61, 839], "loc": 27, "best": [27, 59, 588, 651, 828, 832, 833, 834, 837, 838, 839, 840, 841, 843, 849, 850, 854, 855, 864, 865, 866, 873, 877], "xlabel": 27, "ylabel": 27, "obviou": [27, 884], "trend": 27, "gap": 27, "train_siz": [27, 59], "widen": 27, "impress": 27, "outcom": [27, 71, 94, 352, 364, 387, 828], "tend": 27, "95933": 27, "9874": 27, "105807": 27, "wrap": [27, 34, 36, 45, 46, 48, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 390, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 604, 607, 608, 609, 610, 611, 613, 615, 616, 627, 629, 631, 632, 635, 637, 638, 639, 641, 651, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 704, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 793, 833, 843, 844, 845, 846, 848, 849, 850, 851, 853, 854, 857, 858, 861, 862, 865, 870, 871, 872, 874, 879, 880, 884, 885], "balanc": 27, "breast": 27, "cancer": 27, "return_x_i": 27, "171": [27, 76, 654, 692, 796], "perfectli": [27, 798], "align": [27, 71, 88, 94, 390, 391, 426, 442, 653, 682, 828, 836, 840, 849, 862, 864, 870, 874], "timm": [28, 45, 46, 833, 879], "focu": [28, 41, 839, 860, 886], "mlp": 28, "mixer": 28, "onli": [28, 30, 45, 46, 51, 57, 59, 61, 63, 66, 67, 70, 71, 76, 78, 80, 88, 90, 93, 94, 99, 101, 103, 111, 114, 116, 132, 153, 193, 194, 223, 283, 284, 289, 295, 327, 357, 364, 384, 387, 390, 391, 393, 397, 402, 413, 426, 436, 445, 450, 464, 466, 477, 478, 479, 489, 524, 525, 541, 555, 643, 646, 647, 648, 649, 651, 653, 654, 656, 658, 660, 661, 663, 664, 680, 694, 701, 704, 705, 723, 726, 738, 739, 745, 746, 748, 749, 750, 755, 756, 759, 760, 761, 764, 765, 775, 781, 784, 794, 796, 797, 799, 812, 816, 827, 832, 833, 834, 835, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 860, 861, 862, 863, 865, 866, 867, 868, 870, 871, 872, 879, 880, 884, 885, 886], "retriev": [28, 30, 34, 551, 573, 598, 651, 841, 862], "mlp_encod": [28, 45, 46, 833, 879], "create_model": [28, 45, 46, 833, 879], "mixer_b16_224": [28, 45, 46, 833, 879], "nois": [28, 30, 45, 46, 833, 879, 880], "randn": [28, 30, 45, 46, 393, 512, 833, 879], "tf_mlp_encod": [28, 45, 46], "output_torch": [28, 30], "output_tf": [28, 30], "output_dens": [28, 45, 46, 833], "dens": [28, 41, 45, 46, 331, 384, 812, 833], "unit": [28, 45, 46, 71, 87, 94, 111, 112, 124, 126, 127, 128, 129, 130, 131, 132, 310, 311, 314, 318, 320, 321, 324, 325, 326, 382, 520, 521, 643, 833, 840, 844, 850, 862, 863, 865, 872, 885], "mention": [28, 30, 45, 46, 51, 839, 840, 841, 845, 852, 857, 858, 861, 862, 865, 868, 882, 884], "fulli": [28, 30, 32, 33, 36, 41, 45, 46, 59, 71, 94, 402, 545, 812, 833, 845, 850, 857, 860, 868, 870, 872, 882, 884, 886], "ground": [28, 30, 392, 468, 791, 793, 804, 837, 855, 862, 865], "ret": [28, 30, 45, 46, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 402, 403, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 451, 453, 456, 458, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 597, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 744, 745, 746, 747, 748, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 797, 798, 799, 809, 814, 816, 822, 828, 830, 833, 850, 851, 853, 854, 860, 861, 862, 863, 866, 870, 871, 879], "eagertensor": [28, 34, 57, 822, 863], "deepmind": 29, "perceiverio": 29, "backbon": [29, 59, 833, 871], "TO": [29, 31, 42], "efficientnet": 30, "eff_encod": [30, 833], "efficientnet_v2": [30, 833], "efficientnetv2b0": [30, 833], "storag": [30, 59, 60], "googleapi": [30, 59, 60], "efficientnetv2": 30, "b0_notop": 30, "h5": [30, 88], "24274472": 30, "0u": 30, "torch_eff_encod": [30, 833], "modes_to_trac": 30, "1280": [30, 561, 651, 833], "welcom": [32, 60, 833, 834, 840, 841, 842, 864], "varieti": [32, 844, 849, 850, 851, 865, 867], "organ": [32, 845, 848, 858, 862, 864, 866, 874, 876, 877], "main": [32, 46, 67, 71, 76, 94, 99, 147, 160, 161, 162, 328, 343, 344, 384, 391, 393, 442, 488, 646, 654, 687, 688, 708, 833, 836, 839, 840, 841, 842, 844, 847, 848, 855, 859, 861, 884, 885], "exactli": [32, 36, 43, 48, 57, 58, 62, 305, 649, 839, 848, 849, 850, 851, 852, 854, 865, 868], "rush": 32, "jump": [32, 863], "straight": [32, 833, 849, 862, 865], "quickstart": [32, 833], "introduct": [32, 34, 41, 45, 46, 884], "point": [32, 41, 68, 70, 71, 76, 80, 82, 84, 91, 93, 94, 99, 103, 107, 140, 141, 142, 145, 147, 150, 157, 158, 163, 167, 180, 184, 188, 195, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 268, 269, 270, 271, 276, 277, 278, 279, 280, 288, 290, 291, 293, 295, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 327, 328, 330, 350, 351, 368, 369, 372, 374, 384, 387, 390, 391, 392, 397, 402, 405, 414, 415, 416, 434, 444, 464, 468, 524, 525, 526, 527, 528, 538, 539, 540, 548, 644, 646, 647, 649, 654, 660, 661, 662, 663, 664, 684, 686, 689, 690, 691, 693, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 708, 711, 760, 761, 767, 769, 770, 771, 772, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 822, 823, 832, 837, 839, 840, 841, 844, 845, 847, 849, 850, 852, 853, 855, 857, 861, 862, 865, 866, 868, 870, 880], "showcas": [32, 833], "real": [32, 40, 70, 71, 84, 93, 94, 107, 116, 126, 129, 132, 143, 157, 158, 235, 236, 237, 238, 240, 241, 242, 243, 244, 253, 255, 256, 258, 260, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 285, 288, 290, 291, 293, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 350, 351, 357, 358, 359, 369, 387, 390, 391, 413, 434, 435, 444, 445, 643, 646, 649, 654, 661, 664, 689, 690, 691, 695, 702, 704, 705, 708, 711, 767, 780, 782, 783, 784, 785, 848], "world": [32, 40, 841], "beginn": [32, 834, 884], "got": [32, 57, 854], "cover": [32, 45, 71, 94, 390, 427, 428, 429, 839, 844, 845, 847, 850, 852, 853, 858, 859, 865, 868], "lazi": [32, 33, 36, 39, 48, 51, 52, 63], "familiar": [34, 839, 840], "concept": 34, "roundup": [34, 877], "indep": [34, 45], "proof": [34, 45], "delv": [34, 46, 833], "theori": [34, 835, 847], "esenti": [34, 45], "abstract": [34, 45, 46, 811, 816, 833, 848, 850, 861, 862, 865, 868, 884], "quirk": [34, 45], "perk": [34, 45, 833, 845, 848], "under": [34, 45, 46, 71, 392, 471, 472, 827, 839, 840, 843, 844, 851, 852, 853, 856, 862, 863, 865, 868, 869, 871, 872, 879, 880, 884], "hood": [34, 45, 46, 843, 851, 852, 856, 862, 865, 868, 869, 871, 879, 880], "appropi": 34, "string": [34, 45, 46, 61, 71, 72, 75, 88, 94, 98, 165, 166, 178, 185, 207, 208, 209, 210, 211, 213, 222, 229, 230, 234, 390, 391, 393, 433, 437, 445, 499, 511, 540, 559, 647, 648, 651, 653, 654, 666, 667, 668, 669, 671, 673, 675, 691, 791, 793, 797, 827, 828, 846, 847, 849, 850, 851, 854, 862, 870], "simplest": [34, 840, 852, 865, 868], "interact": [34, 45, 60, 63, 839, 884], "submodul": [34, 45, 59, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 839, 840, 841, 844, 847, 849, 851, 855, 858, 859, 865, 870, 874], "likewis": [34, 39, 45, 52, 841, 848, 850, 853, 857, 858, 862, 868, 879, 880], "nativearrai": [34, 45, 46, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 84, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 141, 142, 143, 144, 146, 151, 152, 153, 154, 155, 156, 158, 160, 161, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 183, 186, 187, 188, 190, 192, 194, 195, 201, 211, 212, 228, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 332, 333, 337, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 538, 539, 540, 541, 542, 550, 553, 554, 556, 557, 561, 562, 563, 565, 568, 569, 570, 571, 572, 574, 576, 577, 578, 581, 584, 585, 587, 592, 593, 594, 597, 606, 607, 608, 609, 610, 611, 613, 615, 616, 618, 629, 631, 632, 633, 635, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 739, 740, 741, 745, 746, 747, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 817, 845, 848, 852, 854, 857, 858, 859, 861, 862, 866, 867, 870, 874], "alia": [34, 45, 350, 351, 387, 644, 839, 862, 882], "lastli": [34, 45, 845], "subclass": [34, 45, 46, 818, 859, 862, 868, 879], "dict": [34, 45, 46, 59, 63, 66, 72, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 149, 151, 156, 158, 164, 168, 170, 181, 182, 183, 187, 188, 195, 211, 214, 215, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 340, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 384, 393, 413, 414, 415, 416, 434, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 499, 506, 508, 509, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 551, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 588, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 641, 645, 647, 648, 651, 658, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 738, 739, 741, 744, 745, 746, 747, 749, 750, 751, 755, 756, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 793, 794, 809, 812, 814, 822, 828, 845, 848, 874, 879, 880, 882], "recurs": [34, 45, 46, 59, 61, 66, 88, 89, 181, 182, 214, 215, 391, 463, 566, 567, 573, 647, 648, 651, 658, 738, 739, 742, 748, 749, 750, 791, 840, 844, 847, 848, 855, 858, 861, 872], "fashion": [34, 798, 865, 879], "native_arrai": [34, 45, 46, 67, 68, 70, 90, 92, 93, 94, 95, 99, 106, 124, 127, 151, 154, 156, 158, 164, 167, 168, 169, 170, 178, 183, 190, 212, 221, 229, 245, 249, 254, 255, 256, 258, 262, 266, 274, 275, 283, 288, 291, 294, 297, 302, 350, 351, 378, 387, 392, 393, 473, 499, 500, 506, 510, 550, 553, 580, 581, 584, 615, 643, 646, 647, 648, 649, 651, 653, 654, 655, 656, 660, 661, 664, 665, 667, 668, 675, 683, 686, 690, 691, 696, 697, 701, 705, 706, 708, 711, 713, 715, 719, 726, 758, 767, 776, 782, 785, 787, 793, 803, 822, 837, 855, 863, 865], "data_class": [34, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 410, 411, 561, 565, 704, 732], "low": [34, 45, 48, 64, 71, 75, 80, 94, 98, 103, 390, 433, 437, 653, 660, 666, 667, 668, 669, 671, 673, 675, 759, 761, 798, 848, 854, 861, 862, 868, 871, 884, 885], "c": [34, 45, 51, 60, 61, 67, 71, 72, 73, 75, 78, 84, 90, 91, 93, 94, 95, 96, 98, 99, 101, 105, 107, 111, 112, 130, 141, 142, 153, 156, 180, 183, 238, 249, 255, 256, 276, 277, 279, 288, 291, 299, 306, 390, 391, 393, 396, 402, 404, 405, 406, 407, 418, 423, 439, 441, 443, 444, 446, 458, 477, 478, 479, 489, 508, 512, 517, 518, 519, 522, 540, 553, 561, 562, 563, 564, 572, 576, 577, 607, 616, 631, 632, 635, 637, 638, 639, 643, 646, 647, 649, 651, 652, 653, 654, 656, 658, 661, 662, 664, 667, 668, 669, 670, 671, 672, 674, 689, 691, 693, 726, 730, 738, 741, 745, 746, 747, 749, 750, 755, 756, 767, 772, 778, 779, 784, 786, 815, 827, 828, 834, 840, 843, 846, 847, 848, 852, 858, 860, 870, 871, 872, 874, 879, 883, 884], "fundament": [34, 45, 849, 862, 868, 870, 884], "signatur": [34, 45, 393, 402, 499, 538, 850, 851, 852, 853, 857, 861, 865, 866, 868], "matmul": [34, 45, 46, 62, 76, 99, 391, 461, 630, 651, 654, 704, 818, 846, 865, 866, 870, 871], "to_n": [34, 45, 46, 57, 66, 89, 870], "jaxlib": [34, 37, 40, 60, 822, 840, 845, 850, 851, 857, 866, 870], "xla_extens": [34, 40, 822, 845, 850, 851, 857, 866, 870], "arrayimpl": [34, 40, 822], "disabl": [34, 45, 71, 94, 393, 508, 814, 832, 847], "array_mod": [34, 45, 594, 618, 651, 867], "set_array_mod": [34, 45, 618, 651, 867], "ultim": [34, 45, 876, 880], "sigmoid": [34, 45, 46, 57, 65, 71, 87, 94, 316, 382, 397, 524, 643, 808, 870], "z": [34, 45, 46, 58, 59, 67, 70, 71, 72, 76, 77, 80, 82, 84, 90, 93, 94, 95, 99, 100, 101, 103, 107, 116, 117, 152, 153, 155, 156, 216, 238, 239, 243, 245, 248, 250, 255, 266, 267, 270, 271, 272, 274, 275, 280, 282, 284, 285, 286, 287, 295, 304, 315, 316, 350, 351, 353, 382, 387, 392, 402, 468, 470, 471, 472, 473, 474, 480, 484, 495, 537, 538, 541, 548, 553, 565, 568, 569, 576, 577, 593, 606, 608, 609, 617, 630, 646, 648, 649, 651, 654, 655, 656, 658, 660, 661, 662, 664, 685, 694, 699, 700, 704, 711, 713, 714, 715, 719, 741, 745, 747, 755, 759, 760, 761, 764, 769, 779, 780, 782, 783, 784, 811, 846, 848, 851, 852, 870, 871, 880], "divid": [34, 39, 45, 46, 62, 70, 71, 72, 78, 88, 93, 94, 101, 116, 117, 262, 396, 469, 517, 518, 519, 522, 608, 649, 651, 656, 728, 845, 848, 852, 856, 865], "exp": [34, 45, 46, 70, 71, 93, 94, 130, 132, 260, 280, 293, 316, 382, 390, 392, 418, 423, 472, 643, 649, 654, 702, 860, 862], "entir": [34, 45, 46, 48, 61, 71, 84, 85, 88, 94, 95, 107, 108, 228, 258, 260, 300, 301, 350, 351, 387, 390, 393, 402, 414, 415, 416, 499, 541, 574, 648, 649, 664, 665, 780, 781, 782, 783, 784, 785, 786, 787, 788, 812, 828, 839, 840, 841, 844, 845, 848, 850, 852, 854, 861, 862, 863, 865, 868, 870, 872, 876, 879, 884, 886], "congratul": [34, 40], "independ": [34, 46, 71, 80, 94, 103, 238, 255, 288, 298, 396, 397, 522, 524, 649, 654, 660, 685, 703, 758, 833, 844, 850, 852, 859, 870, 879], "div": [35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 52, 882], "sub": [35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 50, 51, 52, 71, 76, 78, 88, 89, 93, 94, 95, 99, 101, 117, 287, 391, 393, 402, 445, 485, 494, 515, 544, 545, 573, 651, 654, 656, 657, 688, 708, 728, 735, 736, 737, 839, 841, 843, 848, 854, 862, 863, 865, 876, 882], "with_numpi": 35, "reproduc": [35, 62, 75, 98, 653, 676, 796, 797, 798, 799, 804, 837, 844, 855, 877], "x_": [35, 47, 112, 299, 649, 882], "66391283": 35, "12516928": 35, "38367081": 35, "03102401": 35, "76419425": 35, "52797794": 35, "90346956": 35, "61316347": 35, "27585283": 35, "66309303": 35, "ivy_repo": 35, "sever": [35, 36, 47, 48, 50, 51, 52, 71, 94, 111, 390, 391, 404, 405, 406, 407, 459, 796, 840, 841, 866, 872], "pro": [35, 36, 37, 47, 48, 49, 50, 51, 52, 876], "turn": [36, 48, 75, 98, 111, 112, 414, 415, 416, 653, 676, 812, 840, 847, 848, 851, 852, 862, 865], "unus": [36, 852, 861], "part": [36, 67, 70, 71, 93, 94, 99, 116, 126, 129, 132, 143, 160, 161, 162, 268, 272, 295, 343, 344, 370, 384, 387, 390, 391, 393, 402, 434, 445, 499, 548, 643, 646, 649, 654, 690, 691, 793, 839, 840, 841, 842, 844, 847, 850, 856, 858, 861, 862, 865, 866, 868, 872, 879, 880, 882, 883, 884], "pick": [36, 48, 811], "trigger": [36, 48, 814, 839, 856], "unif": [36, 38, 48, 50, 834], "55563945": 36, "65538704": 36, "14150524": 36, "46951997": 36, "30220294": 36, "14739668": 36, "57017946": 36, "91962677": 36, "51029003": 36, "59644395": 36, "constitu": [36, 48, 88], "5556394": 36, "655387": 36, "1415051": 36, "4695197": 36, "3022028": 36, "1473966": 36, "5701794": 36, "91962665": 36, "51028997": 36, "5964439": 36, "985": 36, "000": [36, 93, 289, 796, 837, 849, 855], "On": [36, 45, 46, 840, 850, 851, 856, 862, 865, 868], "hand": [36, 70, 391, 461, 796, 844, 850, 851, 856, 858, 865, 872], "learnt": [37, 49], "ivy_norm": 37, "jax_norm": [37, 45, 46], "wider": [37, 49, 601, 624, 651, 850, 867], "avoid": [37, 49, 51, 71, 78, 94, 255, 260, 262, 278, 288, 392, 393, 396, 469, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 515, 517, 518, 519, 555, 571, 573, 596, 601, 624, 649, 651, 656, 722, 723, 724, 726, 728, 729, 731, 733, 798, 799, 840, 841, 846, 847, 848, 849, 850, 854, 859, 862, 865, 866, 867, 868, 884], "act": [37, 49, 71, 94, 313, 378, 388, 841, 852, 867, 872], "shorthand": [37, 49, 51, 865], "pair": [37, 49, 59, 71, 75, 94, 98, 243, 262, 335, 377, 384, 387, 390, 424, 433, 435, 437, 649, 653, 654, 666, 667, 668, 669, 671, 673, 675, 683, 685, 828], "93968587": 37, "26075466": 37, "22723222": 37, "06276492": 37, "47426987": 37, "72835908": 37, "71737559": 37, "50411096": 37, "65419174": 37, "15576624": 37, "implic": [37, 49, 50, 53, 848], "fw": [38, 40, 41, 75, 98, 402, 538, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 793, 840, 865], "mxnet": [38, 40, 41, 224, 648, 822, 839, 840], "miniconda": [38, 40, 41], "multienv": [38, 40, 41], "lazili": [38, 39, 40, 45, 46, 50, 52, 63, 879, 880, 882], "actual": [38, 50, 837, 841, 843, 849, 855, 858, 859, 861, 862, 863, 865, 868, 869, 872, 885], "occur": [38, 45, 46, 50, 63, 68, 70, 82, 91, 93, 105, 170, 289, 305, 647, 649, 661, 662, 764, 765, 769, 770, 771, 772, 833, 844, 849, 851, 854, 867], "altern": [38, 50, 60, 71, 94, 99, 111, 112, 349, 357, 358, 359, 363, 365, 366, 367, 368, 370, 371, 372, 376, 377, 387, 839, 840, 847, 861], "assum": [38, 50, 51, 52, 67, 70, 71, 72, 75, 76, 77, 93, 94, 95, 98, 99, 100, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 328, 344, 350, 351, 353, 356, 374, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 459, 461, 499, 508, 512, 538, 541, 568, 572, 574, 576, 585, 607, 616, 641, 646, 647, 649, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 713, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 812, 827, 840, 844, 846, 849, 850, 853, 863, 865, 868, 872], "201733": 38, "slowli": [38, 50], "norm": [38, 50, 51, 71, 72, 76, 94, 95, 99, 110, 111, 390, 391, 412, 413, 417, 418, 419, 422, 423, 424, 434, 435, 441, 445, 520, 521, 523, 556, 557, 578, 651, 654, 695, 711, 757, 812, 816, 866], "slow": [38, 50, 835, 840, 847], "34431235": [38, 39], "51129461": [38, 39], "06686894": [38, 39], "36452447": [38, 39], "98795534": [38, 39], "15493582": [38, 39], "91630631": [38, 39], "41939619": [38, 39], "78909753": [38, 39], "19475674": [38, 39], "norm_trac": 38, "norm_tran": [38, 50], "subtract": [39, 45, 46, 70, 93, 116, 117, 149, 393, 499, 646, 649, 845, 848, 852], "happen": [39, 45, 46, 307, 649, 833, 840, 841, 842, 851, 861, 865, 879, 880], "wherea": [39, 52, 94, 390, 436, 841, 845, 848, 850, 851, 852, 857, 858, 865, 886], "graph_transpil": [39, 878], "often": [40, 71, 392, 467, 838, 844, 854, 857, 858, 862, 865, 872, 876, 885], "fortun": [40, 41, 844], "everyth": [40, 60, 827, 833, 839, 840, 841, 842, 843, 849, 852, 861, 862, 863, 865, 872], "practic": [40, 841, 846, 849, 862, 864], "jax_kornia": [40, 45, 46, 833, 879], "000000000034": [40, 45, 46, 833, 879], "raw_img": [40, 45, 46, 833, 879], "sharp": [40, 45, 46, 833], "prefer": [40, 45, 46, 262, 649, 840, 848, 854, 855, 859, 862, 873, 876, 877, 884], "whole": [41, 71, 94, 393, 396, 507, 520, 521, 523, 841, 847, 856], "full": [41, 71, 76, 94, 98, 99, 111, 112, 114, 180, 267, 275, 338, 339, 340, 341, 342, 384, 391, 392, 393, 464, 465, 471, 472, 501, 504, 595, 604, 619, 627, 646, 647, 649, 651, 653, 654, 668, 670, 671, 672, 674, 697, 701, 703, 704, 797, 804, 833, 840, 841, 847, 850, 853, 854, 857, 858, 862, 865, 868, 870, 872, 884, 886], "complex": [41, 45, 46, 59, 65, 70, 71, 76, 84, 87, 91, 93, 94, 99, 107, 124, 125, 126, 127, 128, 129, 130, 131, 132, 157, 158, 173, 187, 196, 202, 235, 236, 237, 238, 239, 240, 241, 244, 252, 253, 255, 256, 258, 260, 268, 269, 270, 271, 272, 276, 277, 278, 279, 288, 290, 291, 293, 295, 298, 299, 300, 301, 302, 305, 306, 310, 315, 316, 318, 353, 358, 359, 382, 387, 390, 391, 402, 413, 424, 434, 435, 439, 444, 445, 446, 457, 459, 546, 547, 608, 609, 643, 646, 647, 649, 651, 654, 661, 664, 689, 690, 691, 695, 702, 704, 706, 708, 711, 767, 782, 783, 785, 797, 808, 828, 836, 839, 842, 847, 850, 852, 859, 862, 865, 866, 868, 870, 872, 874, 877, 879, 884], "neccessari": 41, "set_random_se": [41, 62], "301436": 41, "_c": 41, "0x7f252c392390": 41, "flatten": [41, 44, 45, 46, 59, 61, 64, 71, 72, 76, 78, 81, 82, 94, 95, 99, 101, 104, 105, 355, 371, 387, 391, 393, 402, 442, 488, 498, 503, 508, 509, 512, 514, 536, 543, 544, 545, 546, 547, 548, 561, 565, 651, 654, 656, 661, 662, 692, 699, 711, 720, 725, 727, 764, 765, 769, 770, 771, 772, 791, 793, 833, 861, 868], "keyword": [41, 45, 46, 61, 63, 66, 67, 71, 88, 94, 117, 154, 289, 390, 393, 402, 438, 499, 538, 552, 555, 588, 617, 646, 649, 651, 654, 658, 664, 705, 744, 785, 791, 793, 797, 813, 814, 827, 839, 845, 848, 850, 851, 859, 861, 862, 863, 865, 866, 868, 879, 880, 882], "input_arrai": [41, 45, 46, 861], "torch_model": [41, 45, 46, 63], "159": [41, 87, 124, 643, 653, 677], "thank": 41, "fledg": [41, 840], "output_arrai": [41, 45, 46, 71, 469], "0893": 41, "1504": 41, "1372": 41, "0991": 41, "0867": 41, "0851": 41, "0911": 41, "0804": 41, "0926": 41, "0881": 41, "softmaxbackward0": 41, "furthermor": 41, "relat": [41, 262, 649, 833, 835, 838, 839, 840, 841, 847, 854, 862, 865, 866, 867, 868, 879], "regress": [42, 884], "boiler": 43, "plate": 43, "mathemat": [43, 76, 99, 238, 243, 255, 260, 262, 278, 288, 644, 649, 654, 695, 711, 850, 862, 868, 884], "minut": [43, 840, 849], "tensorshap": [43, 44], "torch_x": [43, 833], "tf_x": [43, 833], "torch_out": 43, "tf_out": 43, "example_model": 44, "simplemodel": 44, "tfsimplemodel": 44, "tf_model": [44, 879], "compiled_model": 44, "checkout": [45, 60, 841, 844, 865], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 45, "theoret": 45, "aspect": [45, 46, 834, 860, 884, 886], "easiest": [45, 833, 835, 840, 873], "defer": [45, 46, 839, 845, 850, 851, 858, 861, 862, 865], "similarli": [45, 58, 154, 162, 238, 343, 350, 351, 384, 387, 646, 649, 846, 850, 862, 868, 877], "essenc": [45, 885], "becom": [45, 71, 94, 111, 361, 387, 393, 479, 656, 719, 822, 841, 842, 848, 850, 852, 854, 861, 872, 880], "slide": [45, 71, 75, 94, 98, 390, 409, 410, 411, 427, 428, 429, 430, 433, 437, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 812], "regressor": [45, 46], "input_dim": [45, 46, 60], "output_dim": [45, 46, 60], "linear0": [45, 46, 57], "linear1": [45, 46, 57], "adam": [45, 46, 57, 61, 73, 96, 552, 631, 632, 637, 651, 652, 816, 884], "n_training_exampl": [45, 46], "2000": [45, 46, 94, 329, 384], "random_norm": [45, 46, 75, 76, 80, 98, 99, 103, 561, 651, 653, 654, 660, 668, 670, 671, 672, 674, 675, 679, 704], "linspac": [45, 46, 67, 90, 140, 646, 857, 868, 870], "execute_with_gradi": [45, 46, 57, 61, 652, 872], "lambda": [45, 46, 62, 64, 94, 137, 139, 312, 322, 560, 573, 633, 634, 636, 642, 645, 651, 652, 654, 658, 690, 745, 746, 750, 839, 858, 859, 860, 863, 868, 871], "5f": [45, 46], "nonetheless": [45, 46], "gc": [45, 46, 573, 651], "decompos": [45, 46, 71, 94, 111, 114, 338, 339, 340, 341, 342, 363, 370, 384, 387, 391, 455, 460, 463, 466, 862], "said": [45, 46, 798, 866, 880], "otherwis": [45, 46, 63, 66, 67, 68, 70, 71, 72, 75, 76, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 140, 142, 144, 149, 151, 152, 153, 156, 158, 164, 167, 168, 170, 171, 173, 174, 175, 176, 177, 186, 190, 194, 195, 211, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 328, 338, 339, 340, 341, 342, 349, 350, 351, 352, 353, 355, 356, 357, 365, 366, 372, 374, 376, 377, 378, 382, 384, 387, 390, 391, 393, 396, 409, 410, 411, 414, 415, 416, 434, 447, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 485, 487, 489, 490, 491, 498, 506, 508, 509, 510, 512, 515, 517, 519, 520, 521, 523, 525, 537, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 585, 592, 593, 607, 608, 609, 611, 613, 615, 616, 617, 629, 633, 635, 641, 645, 646, 647, 648, 649, 651, 652, 653, 654, 657, 658, 661, 662, 663, 664, 665, 667, 668, 669, 670, 676, 677, 678, 680, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 704, 708, 710, 711, 713, 714, 715, 719, 722, 723, 724, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 751, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 796, 797, 812, 814, 815, 822, 833, 841, 845, 848, 850, 851, 852, 858, 859, 861, 865, 870, 879, 880], "x0": [45, 46, 64, 95, 553, 651, 852], "normalize_trac": [45, 46], "html": [45, 46, 60, 70, 71, 93, 94, 162, 170, 258, 268, 269, 284, 343, 350, 351, 384, 387, 390, 393, 402, 434, 508, 538, 646, 647, 649, 654, 656, 664, 702, 703, 734, 784, 853], "fname": [45, 46, 62, 64, 814], "anticip": [45, 46], "addition": [45, 46, 848, 861, 862], "normalize_native_comp": [45, 46], "return_backend_compiled_fn": 45, "immedi": [45, 46, 832, 833, 839, 840, 871], "eager_graph": [45, 46, 833, 879, 880], "lazy_graph": [45, 46, 833, 879, 880], "thought": [45, 46, 840, 841, 857], "matter": [45, 46, 51, 852], "haven": [45, 46, 51, 884], "jax_out": [45, 46], "ideal": [45, 46, 849, 850, 862, 868], "worth": [45, 46], "differenti": [45, 46, 310, 380, 381, 382, 389, 876, 884], "chosen": [45, 46, 64, 114, 140, 243, 646, 649, 661, 768, 839, 849, 862], "plai": [45, 46, 392, 471, 833, 836, 840, 842, 845, 851, 855, 862, 865, 871, 884], "role": [45, 46, 833, 836, 841, 842, 851, 862, 871, 885], "dl": [45, 46], "effortlessli": [45, 46], "previous": [45, 46, 619, 651, 822, 839, 840, 846, 858, 860, 865, 870], "default_devic": [45, 46, 221, 224, 225, 226, 232, 233, 648, 851, 854, 855], "as_n": [45, 46, 68, 69, 88, 91, 92, 173, 174, 175, 176, 177, 178, 184, 211, 212, 647, 648, 850], "certainli": [45, 46], "unnecessari": [45, 46, 862], "extend": [45, 46, 71, 94, 393, 402, 499, 541, 846, 847, 850, 853, 854, 857, 862, 866, 872, 884], "infrastructur": [45, 46], "least": [45, 70, 71, 76, 93, 94, 255, 273, 288, 390, 393, 402, 418, 423, 477, 478, 479, 488, 490, 538, 649, 654, 661, 694, 767, 841, 845, 849, 850, 851, 852, 858, 861, 865, 879], "coco": 45, "seamlessli": [46, 865], "therefor": [46, 51, 67, 70, 71, 76, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 194, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 343, 344, 350, 351, 353, 356, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 492, 499, 501, 503, 508, 512, 513, 538, 541, 545, 554, 562, 563, 568, 572, 574, 576, 578, 592, 607, 611, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 839, 841, 844, 845, 848, 849, 850, 851, 852, 853, 854, 857, 858, 859, 861, 862, 863, 865, 866, 868, 870, 871, 872, 884], "wide": [46, 833, 841, 865, 884], "plenti": 46, "resourc": [46, 834, 839, 840, 849], "visit": [46, 839, 840, 841, 849], "page": [46, 833, 839, 840, 841, 847, 849, 855, 873, 882], "newli": [47, 48, 60, 62, 68, 91, 167, 555, 647, 651, 841, 849, 861, 865], "randon": [47, 48, 50, 51, 52], "mean_": 47, "std_": 47, "detect": [47, 51, 70, 88, 93, 270, 649, 658, 738, 749, 839, 840, 846, 848, 849, 856, 865], "inspect": [47, 51, 551, 651], "__": [47, 48, 49, 50, 51, 52, 88, 852], "script": [48, 833, 840, 841, 844, 849, 852, 871, 872, 884], "comp": 48, "low_level": 48, "chain": [48, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 183, 187, 188, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 414, 415, 416, 434, 467, 468, 469, 470, 471, 472, 473, 474, 483, 484, 506, 508, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 657, 658, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 735, 736, 740, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 817, 845, 848, 860, 862, 870, 872, 884], "un": [48, 185, 647, 850, 870], "partial_comp": 48, "time_funct": 48, "express": [48, 70, 71, 93, 94, 112, 236, 240, 242, 243, 252, 254, 294, 300, 305, 374, 387, 649, 819, 828, 853, 862, 870, 871, 884, 885], "maxim": [48, 858, 861, 871], "conclud": [49, 866], "norm_comp": [50, 51], "global": [50, 51, 61, 72, 88, 95, 117, 173, 174, 175, 176, 177, 226, 227, 228, 598, 599, 602, 608, 609, 621, 622, 625, 647, 648, 651, 804, 815, 822, 840, 845, 846, 849, 850, 851, 854, 858, 862, 870, 884], "b": [51, 65, 70, 71, 72, 75, 76, 84, 87, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 141, 142, 144, 149, 150, 151, 153, 156, 158, 164, 167, 168, 169, 170, 178, 188, 190, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 382, 384, 387, 390, 391, 392, 393, 397, 400, 402, 409, 410, 411, 412, 414, 415, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 440, 443, 445, 447, 451, 454, 458, 461, 466, 467, 468, 470, 471, 472, 473, 477, 478, 479, 480, 483, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 498, 499, 506, 508, 509, 510, 511, 512, 515, 516, 521, 523, 525, 526, 528, 529, 531, 538, 539, 540, 541, 543, 545, 548, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 585, 592, 593, 607, 608, 609, 611, 615, 616, 629, 631, 632, 633, 635, 637, 638, 639, 641, 643, 646, 647, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 738, 741, 744, 745, 746, 747, 749, 750, 755, 756, 757, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 827, 828, 832, 833, 834, 837, 841, 843, 844, 846, 848, 849, 852, 855, 858, 860, 863, 869, 870, 871, 875, 880, 883], "prioriti": [51, 88, 822, 836, 839, 841, 842, 851, 861], "normalize_via_oper": 51, "determin": [51, 70, 71, 76, 78, 82, 85, 88, 93, 94, 95, 99, 106, 108, 111, 114, 116, 117, 147, 170, 172, 179, 185, 186, 187, 188, 190, 191, 192, 207, 217, 219, 220, 231, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 258, 260, 262, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 285, 288, 293, 297, 300, 301, 302, 303, 304, 305, 306, 309, 319, 323, 369, 374, 382, 387, 390, 391, 392, 393, 402, 426, 434, 445, 467, 468, 500, 508, 512, 538, 550, 553, 574, 575, 579, 580, 581, 582, 583, 584, 611, 629, 646, 647, 648, 649, 651, 654, 656, 657, 662, 665, 684, 685, 686, 688, 692, 693, 694, 696, 697, 699, 700, 702, 703, 708, 710, 711, 720, 735, 736, 737, 769, 770, 771, 772, 773, 787, 788, 798, 804, 811, 815, 848, 850, 851, 853, 858, 862, 865, 867, 868], "think": [51, 839, 841, 849, 852, 868, 885], "uniqu": [51, 61, 71, 72, 82, 94, 95, 105, 390, 391, 393, 438, 461, 498, 499, 514, 585, 651, 657, 658, 662, 735, 736, 737, 740, 744, 769, 770, 771, 772, 798, 833, 844, 848, 858, 862, 863, 864, 868, 872, 876], "rule": [51, 68, 70, 71, 76, 91, 93, 94, 99, 167, 170, 193, 194, 195, 244, 255, 288, 290, 297, 299, 307, 309, 390, 393, 402, 434, 487, 538, 647, 649, 654, 656, 684, 685, 692, 696, 699, 703, 720, 798, 827, 844, 845, 848, 849, 850, 852, 856, 857, 858, 860, 865, 868, 885], "broadcast": [51, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 344, 350, 351, 352, 353, 354, 355, 358, 359, 361, 363, 365, 367, 368, 369, 370, 374, 382, 384, 387, 390, 391, 392, 393, 396, 397, 402, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 432, 434, 439, 441, 442, 450, 451, 456, 457, 459, 468, 469, 470, 471, 473, 474, 480, 484, 487, 492, 500, 501, 502, 503, 504, 506, 508, 510, 512, 513, 517, 520, 521, 523, 524, 525, 527, 528, 538, 539, 540, 541, 544, 545, 546, 547, 548, 556, 557, 561, 562, 563, 568, 569, 578, 592, 593, 631, 632, 635, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 705, 706, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 772, 773, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 798, 827, 848, 850, 852, 853, 854, 865, 866, 870], "elementwis": [51, 71, 79, 94, 102, 315, 317, 377, 382, 654, 659, 709, 757, 858, 866, 870], "fact": [51, 111, 841, 844, 849, 862, 865, 871], "consum": [51, 793, 848, 849, 857, 863, 865], "thrown": [51, 578, 651, 840, 845, 851, 854, 856, 872], "doesn": [51, 578, 596, 651, 791, 812, 839, 840, 846, 848, 849, 850, 851, 852, 855, 856, 858, 860, 865, 868, 870, 872, 880], "consider": [51, 839, 852, 857, 868], "standalon": [52, 839, 845, 865, 874, 883, 885], "static": [52, 71, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 120, 121, 144, 334, 390, 411, 424, 429, 438, 460, 466, 506, 518, 611, 646, 653, 680, 699, 809, 814, 862, 867, 872, 876, 884, 885, 886], "flow": [53, 848, 880, 884, 885], "statement": [53, 58, 849, 861, 865, 868, 872, 879, 880], "opposit": 53, "exclud": [53, 84, 94, 107, 140, 162, 343, 384, 539, 540, 646, 660, 761, 777, 796, 799, 822, 852, 871, 880], "todo": [54, 55, 56, 61, 64, 94, 540, 839, 850, 862], "aim": [57, 837, 841, 844, 855, 859, 862, 865, 869, 884, 886], "interfac": [57, 90, 149, 646, 818, 872, 874, 876, 884], "set_framework": [57, 64], "underneath": [57, 849], "sai": [57, 839, 840, 855, 859], "a_min": 57, "a_max": 57, "tensforflow": 57, "clip_by_valu": [57, 870], "clip_value_min": 57, "clip_value_max": 57, "clamp": [57, 71, 94, 315, 382, 870], "devicearrai": [57, 845, 862, 870], "accept": [57, 66, 67, 70, 71, 76, 89, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 343, 344, 350, 351, 353, 356, 357, 379, 384, 387, 389, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 499, 508, 512, 538, 541, 545, 554, 562, 563, 568, 572, 574, 576, 578, 592, 607, 611, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 839, 840, 841, 845, 848, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 874], "jax_concat": 57, "tf_concat": 57, "np_concat": 57, "torch_concat": 57, "85": [57, 65, 71, 80, 87, 93, 94, 96, 98, 103, 117, 126, 240, 249, 250, 294, 310, 311, 314, 382, 402, 539, 608, 635, 643, 649, 651, 652, 653, 660, 677, 759, 760, 761], "mymodel": 57, "x_in": 57, "reduce_mean": [57, 833], "49040043354034424": 57, "48975786566734314": 57, "4892795979976654": 57, "48886892199516296": 57, "4884953498840332": 57, "4881443977355957": 57, "4878086447715759": 57, "48748287558555603": 57, "48716384172439575": 57, "48684927821159363": 57, "48653748631477356": 57, "48622724413871765": 57, "4859171509742737": 57, "48560672998428345": 57, "48529526591300964": 57, "4849821627140045": 57, "48466697335243225": 57, "4843493402004242": 57, "4840289056301117": 57, "4837053418159485": 57, "4833785891532898": 57, "4830484390258789": 57, "48271444439888": 57, "48237672448158264": 57, "48203518986701965": 57, "48168954253196716": 57, "4813397228717804": 57, "4809857904911041": 57, "48062753677368164": 57, "48026490211486816": 57, "479898065328598": 57, "47952669858932495": 57, "4791509211063385": 57, "4787706732749939": 57, "47838595509529114": 57, "4779967665672302": 57, "47760307788848877": 57, "4772048890590668": 57, "47680220007896423": 57, "47639501094818115": 57, "47598329186439514": 57, "4755673110485077": 57, "4751465618610382": 57, "4747215211391449": 57, "4742920398712158": 57, "47385817766189575": 57, "47341999411582947": 57, "47297725081443787": 57, "4725303053855896": 57, "47207894921302795": 57, "47162333130836487": 57, "47116345167160034": 57, "470699280500412": 57, "47023090720176697": 57, "4697583019733429": 57, "55": [57, 65, 94, 103, 132, 249, 308, 402, 539, 576, 649, 651, 654, 660, 664, 693, 699, 760, 761, 779, 844], "46928152441978455": 57, "46880054473876953": 57, "4683155119419098": 57, "4678264260292053": 57, "46733325719833374": 57, "46683603525161743": 57, "4663347601890564": 57, "4658295214176178": 57, "465320348739624": 57, "4648073613643646": 57, "46429020166397095": 57, "4637692868709564": 57, "46324464678764343": 57, "4627160429954529": 57, "4621836841106415": 57, "4616474211215973": 57, "46110764145851135": 57, "72": [57, 71, 80, 94, 96, 260, 364, 387, 390, 412, 422, 635, 649, 652, 654, 664, 699, 760, 779], "460563987493515": 57, "4600166976451874": 57, "74": [57, 59, 70, 103, 250, 280, 649, 654, 696], "45946577191352844": 57, "45891112089157104": 57, "45835286378860474": 57, "4577910006046295": 57, "78": [57, 73, 299, 637, 649, 652, 654, 660, 664, 699, 760, 779], "45722562074661255": 57, "45665669441223145": 57, "80": [57, 71, 94, 364, 387, 391, 402, 458, 539, 654, 658, 664, 699, 749, 779], "4560841917991638": 57, "81": [57, 61, 70, 76, 91, 93, 99, 103, 183, 253, 278, 279, 303, 402, 539, 647, 649, 654, 658, 660, 664, 692, 696, 709, 746, 761, 779, 865], "4555082619190216": 57, "45492875576019287": 57, "45434585213661194": 57, "45375964045524597": 57, "4531698524951935": 57, "4525766670703888": 57, "45198020339012146": 57, "4513803720474243": 57, "4507772624492645": 57, "4501707851886749": 57, "4495610296726227": 57, "4489481747150421": 57, "44833192229270935": 57, "4477125108242035": 57, "44708991050720215": 57, "44646409153938293": 57, "44583529233932495": 57, "4452032148838043": 57, "44456806778907776": 57, "4439": 57, "selectbackward0": 57, "ivy_compil": 58, "ic": 58, "numer": [58, 67, 68, 70, 71, 72, 76, 80, 81, 84, 91, 93, 94, 95, 99, 103, 104, 106, 116, 117, 154, 167, 235, 238, 251, 255, 260, 261, 262, 269, 270, 271, 274, 283, 284, 288, 290, 291, 292, 293, 297, 298, 299, 303, 304, 308, 309, 390, 392, 397, 402, 434, 469, 525, 538, 598, 599, 608, 609, 621, 622, 646, 647, 649, 651, 654, 660, 661, 664, 685, 692, 694, 699, 702, 704, 706, 708, 710, 759, 760, 761, 763, 764, 765, 767, 768, 773, 780, 783, 785, 796, 797, 798, 799, 811, 837, 850, 855, 860, 862, 863, 865, 866, 867, 868, 870, 884], "anyth": [58, 71, 94, 402, 544, 545, 841, 854, 865, 866, 884, 885], "affect": [58, 64, 71, 392, 472, 849, 862], "variabl": [58, 60, 61, 63, 71, 72, 73, 79, 88, 94, 95, 96, 102, 136, 137, 139, 337, 384, 390, 391, 393, 397, 402, 436, 462, 500, 526, 537, 538, 554, 578, 579, 580, 581, 584, 611, 632, 633, 635, 637, 638, 639, 645, 651, 652, 654, 657, 659, 703, 735, 736, 737, 757, 793, 804, 809, 811, 812, 813, 814, 815, 816, 817, 818, 841, 846, 850, 853, 857, 860, 861, 865, 866, 870, 872, 873, 880, 885], "original_fn": 58, "100000": 58, "co": [58, 59, 70, 72, 93, 253, 258, 260, 301, 565, 649, 651, 838, 850, 871], "sin": [58, 70, 72, 93, 253, 258, 260, 301, 565, 649, 651, 845, 871], "tan": [58, 70, 93, 552, 649, 651, 853, 857, 858, 861, 862, 871], "comp_fn": 58, "compile_graph": [58, 64], "expected_result": 58, "compiled_result": 58, "irrelev": [58, 849, 850, 852], "opeat": 58, "_layer": [58, 871], "net": [58, 63, 64, 871], "compiled_net": 58, "latest": [59, 61, 70, 71, 93, 94, 170, 258, 268, 269, 284, 350, 351, 387, 390, 393, 402, 434, 436, 508, 538, 647, 649, 654, 656, 664, 702, 703, 734, 784, 812, 833, 839, 840, 841, 844, 846, 849, 853, 855, 866, 872, 873, 879], "pypi": [59, 61, 64, 839, 840, 866, 872], "pkg": [59, 61, 64], "public": [59, 61, 64, 558, 651, 849, 860], "revis": [59, 61, 841], "req": [59, 61], "tabqrujw": 59, "quiet": [59, 61], "commit": [59, 61, 836, 837, 839, 842, 844, 852, 864, 865], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 59, "cp39": [59, 61], "manylinux_2_12_x86_64": [59, 61], "manylinux2010_x86_64": [59, 61], "manylinux_2_17_x86_64": [59, 61, 840], "manylinux2014_x86_64": [59, 60, 61], "495": [59, 61], "nvidia_ml_pi": [59, 61], "pypars": [59, 61, 64], "ivy_cor": [59, 61, 64, 840], "1338326": 59, "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 59, "njrc_e6b": 59, "07": [59, 61, 73, 77, 93, 96, 100, 103, 243, 276, 279, 280, 299, 390, 422, 621, 631, 632, 634, 635, 636, 637, 649, 651, 652, 655, 714, 715, 760, 813, 816], "2e": [59, 61], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [59, 61], "4845": [59, 61], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 59, "b6": [59, 61], "0d": [59, 61], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [59, 61], "uninstal": [59, 61, 64], "vnd": [59, 61, 64], "json": [59, 61, 64, 88, 840, 855], "psst": 59, "pickl": [59, 60, 88, 814, 848], "imageio": 59, "urllib": [59, 64], "_src": 59, "back": [59, 71, 78, 94, 101, 393, 489, 511, 594, 618, 651, 653, 656, 680, 726, 811, 816, 828, 840, 845, 850, 851, 854, 859, 860, 867, 872, 873], "tf_cpp_min_log_level": 59, "mkdir": [59, 60, 61, 840, 849], "perceiv": [59, 60], "touch": 59, "io_processor": 59, "position_encod": 59, "jmp": 59, "tabul": 59, "29359": 59, "29k": 59, "67k": 59, "002": 59, "30179": 59, "47k": 59, "8107": 59, "9k": 59, "92k": 59, "itertool": 59, "preprocessor": 59, "vector": [59, 67, 71, 72, 75, 76, 94, 95, 98, 99, 111, 112, 114, 154, 380, 381, 389, 390, 391, 393, 396, 397, 402, 413, 444, 449, 457, 459, 464, 499, 502, 504, 522, 526, 538, 557, 561, 578, 630, 646, 651, 653, 654, 677, 680, 685, 689, 690, 692, 694, 699, 704, 705, 709, 710, 711, 712, 796, 812, 884], "perceiverbackbon": 59, "input_preprocessor": 59, "_input_preprocessor": 59, "_encod": 59, "__call__": [59, 793, 812, 813, 814, 833, 879], "is_train": 59, "po": [59, 828], "input_mask": 59, "network_input_is_1d": 59, "_input_is_1d": 59, "queri": [59, 60, 75, 88, 98, 213, 227, 571, 597, 648, 651, 653, 680, 683, 812, 848, 850, 855, 884], "decod": 59, "cross": [59, 61, 76, 77, 99, 100, 112, 654, 655, 713, 714, 715, 849, 850], "attend": [59, 653, 680], "encoder_queri": 59, "latent": [59, 657, 736, 737], "imagepreprocessor": 59, "deal": [59, 814, 837, 851, 858, 860, 862, 865, 872], "image_s": 59, "fourier_pos_config": 59, "position_encoding_typ": 59, "fourier": [59, 71, 94, 390, 413, 418, 419, 423, 424, 434, 435, 438, 565, 651], "fourier_position_encoding_kwarg": 59, "concat_po": 59, "max_resolut": 59, "num_band": [59, 72, 95, 565, 651], "sine_onli": 59, "prep_typ": 59, "spatial_downsampl": 59, "cross_attend_widening_factor": 59, "cross_attention_shape_for_attn": 59, "kv": 59, "dropout_prob": 59, "num_block": 59, "num_cross_attend_head": 59, "num_self_attend_head": 59, "num_self_attends_per_block": 59, "num_z_channel": 59, "self_attend_widening_factor": 59, "use_query_residu": 59, "z_index_dim": 59, "z_pos_enc_init_scal": 59, "perceiver_backbon": [59, 833], "perceiverencod": 59, "At": [59, 839, 840, 841, 844, 855, 865, 866, 884], "publish": [59, 833, 872, 879], "thankfulli": [59, 865], "perceiver_io": [59, 60], "imagenet_fourier_position_encod": 59, "pystat": 59, "imagenet_checkpoint": 59, "rb": 59, "ckpt": 59, "09": [59, 65, 70, 96, 103, 132, 293, 303, 631, 643, 649, 652, 760], "173": [59, 76, 654, 692], "194": 59, "125": [59, 71, 76, 99, 249, 361, 387, 392, 468, 649, 654, 709], "177": [59, 61], "193776248": 59, "185m": 59, "octet": 59, "184": 59, "80m": 59, "144mb": 59, "144": 59, "mean_rgb": 59, "stddev_rgb": 59, "im": 59, "denorm": 59, "resize_and_center_crop": 59, "crop": [59, 71, 94, 390, 419, 424, 435], "center": [59, 811], "image_height": [59, 61], "image_width": 59, "padded_center_crop_s": 59, "offset_height": 59, "offset_width": 59, "crop_window": 59, "inter_cub": 59, "ye": [59, 872], "dummy_input": [59, 833], "transpili": 59, "torch_perceiver_backbon": 59, "quicker": 59, "params_v": [59, 833, 879], "perceiverioclassifi": [59, 833], "max_pool": [59, 833], "Of": [59, 845, 861, 862], "cours": [59, 840, 841, 844, 845, 852, 861, 862, 868, 872], "468": 59, "huggingface_hub": 59, "multiprocess": [59, 88, 117, 651, 872], "py39": 59, "132": [59, 94], "pyarrow": 59, "xxhash": 59, "pyyaml": 59, "2021": [59, 71, 94, 377, 387, 833], "aiohttp": 59, "async": 59, "timeout": [59, 88, 117, 602, 625, 651, 867], "0a3": 59, "async_timeout": 59, "frozenlist": 59, "manylinux_2_5_x86_64": [59, 64], "manylinux1_x86_64": [59, 64], "158": 59, "attr": [59, 850], "aiosign": 59, "multidict": 59, "114": [59, 390, 412, 422], "yarl": 59, "264": [59, 658, 738], "2022": [59, 60], "pytz": 59, "2020": [59, 844, 884], "dateutil": [59, 64], "wikiart": 59, "paint": [59, 833, 870, 876], "load_dataset": [59, 879, 880], "n_sampl": [59, 71, 94, 391, 393, 440, 448, 503], "10000": [59, 61, 67, 90, 153, 646], "huggan": 59, "split": [59, 60, 61, 65, 70, 71, 78, 87, 88, 93, 94, 101, 124, 125, 126, 127, 128, 129, 130, 131, 132, 226, 227, 228, 306, 310, 315, 316, 318, 363, 370, 382, 393, 485, 494, 515, 561, 588, 643, 648, 649, 651, 653, 656, 666, 673, 674, 731, 793, 808, 812, 833, 834, 841, 849, 870, 872], "wiki_art": 59, "gib": 59, "unknown": [59, 796], "huggan___parquet": 59, "36ee951979f9b56c": 59, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 59, "parquet": 59, "subsequ": [59, 822, 840, 845, 849, 850, 852, 857, 858, 861, 865, 885], "curl": [59, 840], "2fwikiart": 59, "xferd": 59, "dload": 59, "upload": [59, 865], "spent": 59, "25936": 59, "278k": 59, "abstract_expression": 59, "action_paint": 59, "analytical_cub": 59, "art_nouveau": 59, "baroqu": 59, "color_field_paint": 59, "contemporary_r": 59, "cubism": 59, "early_renaiss": 59, "expression": 59, "fauvism": 59, "high_renaiss": 59, "impression": 59, "mannerism_late_renaiss": 59, "minim": [59, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 384, 390, 392, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 702, 704, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 828, 853, 861, 863, 868, 870, 880], "naive_art_primitiv": 59, "new_real": 59, "northern_renaiss": 59, "pointil": 59, "pop_art": 59, "post_impression": 59, "realism": 59, "rococo": 59, "romantic": 59, "symbol": [59, 827, 839, 840, 884, 885], "synthetic_cub": 59, "ukiyo_": 59, "custom": [59, 71, 94, 314, 326, 379, 382, 389, 796, 818, 827, 835, 843, 849, 854, 859, 863, 865, 868, 884], "hugginfac": 59, "customdataset": 59, "__len__": [59, 848], "__getitem__": [59, 88, 848], "idx": [59, 60, 61, 551, 651, 851], "random_split": 59, "224x224": 59, "val_siz": 59, "dataset_train": 59, "dataset_v": 59, "dataset_test": 59, "dataloader_train": 59, "dataloader_v": 59, "dataloader_test": 59, "train_featur": 59, "train_label": 59, "train_step": 59, "running_loss": [59, 61], "last_loss": 59, "training_load": 59, "intra": 59, "report": [59, 836, 839, 865], "zero_grad": 59, "999": [59, 73, 93, 96, 306, 631, 632, 637, 639, 649, 652, 816], "epoch_numb": 59, "best_vloss": 59, "1_000_000": 59, "running_vloss": 59, "vdata": 59, "vinput": 59, "vlabel": 59, "voutput": 59, "vloss": 59, "avg_vloss": 59, "model_path": 59, "model_": 59, "state_dict": [59, 813, 814], "highest": [59, 71, 80, 94, 103, 334, 337, 384, 660, 759, 850], "energi": 59, "mayb": [59, 60, 66, 833, 840, 849, 870], "deploi": [59, 833, 849, 874, 879, 884, 886], "percieverio": 60, "ai": [60, 849], "contribut": [60, 71, 94, 402, 541, 836, 838, 840, 841, 842, 847, 855, 856, 862, 863, 871, 873, 880], "invit": [60, 839, 842, 862, 868], "g4ar9q7dtn": 60, "step1": 60, "printf": 60, "8packag": 60, "share": [60, 88, 201, 647, 796, 797, 833, 846, 848, 852, 858, 860, 862, 863, 865, 868, 870, 877], "googledr": 60, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 60, "file_id": 60, "drive": [60, 61], "uc": 60, "tee": [60, 840], "file_id_wget_cmd": 60, "perl": 60, "pe": 60, "g": [60, 62, 63, 71, 80, 82, 84, 86, 94, 103, 109, 111, 166, 195, 208, 255, 268, 288, 295, 298, 350, 351, 387, 390, 391, 393, 397, 402, 427, 429, 466, 508, 524, 525, 526, 527, 528, 539, 540, 647, 648, 649, 654, 658, 660, 662, 664, 690, 691, 695, 702, 704, 705, 711, 741, 745, 747, 750, 755, 759, 760, 761, 769, 770, 771, 772, 777, 778, 780, 782, 783, 785, 811, 832, 834, 839, 840, 843, 844, 846, 847, 848, 860, 862, 865, 870, 872, 874], "uuid": 60, "anywai": [60, 845, 859, 862], "bin": [60, 71, 94, 402, 536, 541, 840, 841, 844, 848], "bash": [60, 840, 841, 844], "step2": 60, "interpret": [60, 67, 71, 90, 94, 141, 142, 149, 155, 392, 402, 469, 538, 646, 849, 885], "sudo": [60, 840], "apt": [60, 840], "yf": 60, "step3": 60, "xvzf": 60, "rm": [60, 62, 835, 841], "step4": 60, "symlink": 60, "unzip": [60, 61], "fr": 60, "l": [60, 71, 76, 93, 99, 282, 391, 392, 444, 467, 653, 654, 680, 684, 689, 690, 691, 694, 708, 841, 843], "ln": 60, "sf": 60, "la": 60, "step5": 60, "step6": 60, "ipkykernel": 60, "step7": 60, "engbjapanpython3": 60, "ipykernel": 60, "reconnect": 60, "sy": 60, "oct": 60, "gcc": 60, "lf": 60, "upgrad": 60, "cuda11": 60, "cudnn805": 60, "cp38": [60, 64, 840], "helper": [60, 791, 793, 794, 800, 802, 803, 837, 847, 850, 854, 855, 864, 874], "feedforward": 60, "prenorm": 60, "perceiveriospec": 60, "fetch": [60, 573, 651, 840, 841, 844, 849], "ogbanugot": 60, "xmartlab": 60, "caffeflow": 60, "fetch_class": 60, "class_label": 60, "ground_truth": 60, "127": [60, 68, 71, 76, 91, 94, 183, 374, 387, 647, 654, 692], "path_to_imag": 60, "get_imag": 60, "spine": 60, "set_vis": 60, "bottom": [60, 561, 651, 839, 840, 849, 855], "tick_param": 60, "set_xticklabel": 60, "set_yticklabel": 60, "show_result": 60, "listdir": [60, 61], "endswith": 60, "this_dir": 60, "dirnam": 60, "add_subplot": 60, "xtick": 60, "ytick": 60, "green": [60, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 839, 840, 841], "red": 60, "perceiver_io_img_classif": 60, "normalize_imag": 60, "batch_shap": [60, 75, 80, 90, 98, 103, 147, 156, 646, 653, 654, 660, 679, 683, 712, 758, 812, 868, 870], "img_dim": 60, "queries_dim": 60, "learn_queri": 60, "load_weight": 60, "num_input_ax": 60, "network_depth": 60, "num_lat_att_per_lay": 60, "query_shap": 60, "num_fourier_freq_band": 60, "weight_fpath": 60, "pretrained_weight": 60, "isfil": 60, "noinspect": 60, "pybroadexcept": 60, "from_disk_as_pickl": 60, "action": [60, 832, 838, 849, 852, 856, 865], "placehold": [60, 658, 745, 750, 755, 812, 841, 845, 857, 874], "pyunboundlocalvari": 60, "max_fourier_freq": 60, "random_uniform": [60, 64, 80, 103, 660, 851, 854, 865, 871], "817437": 60, "gpu_bfc_alloc": 60, "orig_valu": 60, "tf_force_gpu_allow_growth": 60, "autograd": [60, 872], "declar": [60, 841, 864], "_3r2_73j": 61, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 61, "1297564": 61, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 61, "le3bu3_v": 61, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 61, "third": [61, 111, 112, 393, 486, 514, 654, 662, 704, 769, 847, 850, 861, 872, 884, 886], "parti": [61, 847, 850, 872, 884, 886], "mount": [61, 835, 841], "mydriv": 61, "chdir": 61, "kaggl": 61, "medium": 61, "articl": [61, 833, 856], "insert": [61, 71, 81, 94, 104, 393, 474, 484, 656, 658, 661, 663, 722, 742, 743, 764, 775, 849, 856], "www": [61, 350, 351, 387], "your_kaggle_usernam": 61, "competit": 61, "digit": 61, "readabl": [61, 845, 848, 854, 856, 857, 865, 866], "chmod": [61, 840, 849], "forc": [61, 847, 849, 851], "archiv": [61, 840], "inflat": [61, 850], "sample_submiss": 61, "later": [61, 88, 555, 651, 839, 856, 861, 865, 866, 884], "my": [61, 849], "label_df": 61, "mod_train": 61, "data_valu": 61, "test_data_valu": 61, "correct_label": 61, "train_path": 61, "str": [61, 63, 66, 67, 71, 72, 75, 76, 77, 78, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 139, 149, 151, 154, 156, 158, 164, 165, 168, 170, 172, 173, 174, 175, 179, 180, 183, 184, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 207, 208, 228, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 390, 391, 392, 393, 396, 402, 405, 409, 410, 411, 413, 414, 415, 416, 418, 419, 423, 424, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 441, 445, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 482, 483, 484, 489, 506, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 523, 525, 527, 538, 539, 540, 541, 548, 550, 551, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 589, 592, 593, 595, 596, 605, 607, 608, 609, 611, 613, 615, 616, 629, 633, 641, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 705, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 744, 745, 750, 755, 758, 759, 760, 761, 763, 766, 769, 770, 771, 773, 777, 778, 779, 781, 783, 784, 786, 787, 788, 793, 794, 796, 797, 802, 804, 812, 814, 815, 827, 828, 832, 850, 851, 854, 858, 861, 862, 866, 870, 879, 880, 881, 882], "makedir": 61, "valid_path": 61, "28x28": 61, "pic": 61, "int8": [61, 68, 80, 90, 91, 103, 149, 176, 181, 183, 184, 188, 646, 647, 759, 796, 797, 850, 865], "new_img": [61, 63], "builder": [61, 835], "batchwis": 61, "goe": [61, 393, 482, 843, 856, 861, 868], "seed_valu": [61, 88, 660, 762], "randomize_dataset": 61, "create_dataset": 61, "num_examples_per_class": 61, "img_arrai": 61, "dir": 61, "img_path": 61, "imread": [61, 63], "imread_grayscal": 61, "generate_batch": 61, "ivyerror": [61, 829, 854], "smaller": [61, 71, 78, 84, 94, 101, 317, 349, 366, 382, 387, 390, 392, 402, 419, 424, 435, 467, 538, 539, 540, 561, 651, 656, 664, 719, 727, 777, 778, 783, 785, 841, 854, 870], "yield": [61, 81, 335, 336, 384, 393, 499, 661, 768, 849], "x_batch_inst": 61, "form": [61, 63, 66, 67, 71, 76, 88, 90, 99, 110, 111, 112, 141, 142, 143, 155, 160, 161, 327, 330, 344, 353, 384, 387, 391, 393, 444, 455, 486, 495, 499, 516, 551, 612, 614, 646, 651, 653, 654, 658, 684, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 708, 739, 750, 796, 811, 834, 839, 840, 858, 865, 868, 884, 885], "intialis": 61, "num_epoch": 61, "inherit": [61, 818, 845, 848, 854, 872, 874], "creation": [61, 71, 88, 94, 117, 847, 850, 851, 857, 859, 862, 863, 865, 866, 870, 880, 884], "inform": [61, 63, 68, 71, 73, 91, 96, 180, 183, 334, 384, 551, 641, 647, 651, 652, 657, 737, 832, 833, 838, 839, 840, 841, 842, 844, 848, 849, 854, 858, 859, 861, 863, 865], "insid": [61, 76, 99, 117, 393, 510, 654, 697, 794, 840, 841, 845, 848, 850, 851, 855, 858, 859, 865, 866, 880], "ivynet": 61, "h_w": 61, "input_channel": [61, 812, 870], "output_channel": [61, 812], "gelu": [61, 62, 65, 87, 643, 808], "image_widht": 61, "start_dim": [61, 71, 94, 393, 489], "end_dim": [61, 71, 94, 393, 489], "gpu_is_avail": [61, 648], "__name__": [61, 62, 64, 617, 651, 854], "heavi": [61, 798, 840, 862, 863, 868, 885], "lift": [61, 863, 885], "num_correct": 61, "y_pred": 61, "epoch_loss": 61, "field": [61, 76, 82, 99, 105, 391, 393, 444, 514, 654, 662, 689, 690, 701, 702, 704, 769, 770, 771, 849], "training_accuraci": 61, "train_loss": 61, "train_correct": 61, "train_loop": 61, "leav": [61, 66, 71, 89, 91, 93, 94, 95, 98, 99, 101, 107, 117, 180, 183, 255, 312, 315, 316, 322, 393, 483, 484, 489, 502, 503, 504, 520, 521, 523, 539, 540, 545, 565, 613, 656, 658, 672, 683, 688, 704, 721, 725, 730, 732, 733, 738, 739, 748, 749, 750, 751, 777, 778, 827, 839, 848, 849, 850, 852, 853, 857, 858, 861, 862, 865], "xbatch": 61, "ybatch": 61, "to_devic": [61, 69, 92, 211, 648, 814], "entropi": [61, 77, 100, 655, 713, 714, 715], "hot": [61, 67, 90, 156, 646], "ybatch_encod": 61, "one_hot": [61, 67, 90, 646, 870], "loss_prob": 61, "ret_grad_idx": [61, 633, 652, 793, 860], "xs_grad_idx": [61, 633, 652, 793, 860], "batch_loss": 61, "set_descript": 61, "set_postfix": 61, "accuracy_percentag": 61, "naverag": 61, "6f": 61, "_train_summari": 61, "writer": 61, "writerow": 61, "157it": 61, "06it": 61, "475401": 61, "11it": 61, "081436": 61, "13it": 61, "0187": 61, "029279": 61, "008382": 61, "07it": 61, "00456": 61, "003816": 61, "82it": 61, "00277": 61, "002179": 61, "05it": 61, "00175": 61, "001569": 61, "00147": 61, "09it": 61, "00128": 61, "001005": 61, "10it": 61, "00112": 61, "000837": 61, "129": [61, 653, 672, 674], "12it": 61, "000989": 61, "000709": 61, "145": 61, "000873": 61, "000606": 61, "08it": 61, "000774": 61, "000524": 61, "000688": 61, "000455": 61, "000613": 61, "000398": 61, "000547": 61, "000350": 61, "000488": 61, "000308": 61, "000437": 61, "000273": 61, "000391": 61, "000243": 61, "238": [61, 262, 649], "98it": 61, "000351": 61, "000216": 61, "260": 61, "plot_summari": 61, "whitegrid": 61, "nrow": 61, "ncol": 61, "fontweight": 61, "bold": 61, "set_xlabel": 61, "set_ylabel": 61, "savefig": 61, "summary_plot": 61, "png": [61, 63, 64], "save_weight": [61, 814], "model_param": 61, "ivynet_weight": 61, "hdf5": [61, 88, 814], "deitimageprocessor": 62, "tfdeitforimageclassif": 62, "tfdeitforimageclassificationwithteach": 62, "distillation_classifi": 62, "cls_classifi": 62, "randomli": [62, 390, 414, 415, 416, 653, 676, 796, 797, 798, 799, 804, 812], "henc": [62, 82, 238, 353, 387, 649, 656, 662, 722, 769, 770, 771, 772, 822, 840, 848, 849, 850, 861, 865], "image_processor": [62, 879, 880], "distil": [62, 885], "patch16": 62, "outputs_from_original_model": 62, "bertforsequenceclassif": 62, "bertforpretrain": 62, "NOT": [62, 283, 649, 818, 827, 839], "probabl": [62, 71, 75, 77, 80, 94, 98, 100, 103, 390, 392, 397, 402, 414, 415, 416, 469, 524, 538, 541, 545, 653, 655, 660, 676, 680, 683, 713, 758, 798, 811, 812, 833, 865, 873], "ptarmigan": 62, "rf": [62, 841], "branch": [62, 243, 255, 258, 260, 288, 300, 301, 302, 305, 649, 840, 841, 844, 849, 856, 872, 880, 884], "moduleconvert": [62, 809, 814], "mc": 62, "from_keras_modul": [62, 809], "compiled_func": 62, "return_graph": [62, 64], "compiled_output": 62, "diverg": [62, 71, 94, 262, 392, 469, 649], "_all_funct": [62, 64], "convert_to_tensor_v2_with_dispatch": 62, "transpose_v2": 62, "convolution_v2": 62, "bias_add": 62, "binary_op_wrapp": 62, "cast": [62, 68, 70, 71, 76, 84, 91, 93, 99, 107, 167, 170, 195, 289, 402, 539, 540, 647, 649, 654, 664, 695, 711, 777, 778, 781, 783, 785, 797, 858, 863, 870], "moments_v2": 62, "batch_norm": [62, 64, 71, 94, 396], "tensordot": [62, 76, 99, 654, 828, 850], "softmax_v2": 62, "_slice_help": 62, "save_to_disk": [62, 64, 814], "12265048989200113": 62, "11038777417100028": 62, "1167045795539998": 62, "ivy_api_kei": 63, "obj": [63, 141, 142, 573, 646, 651, 825, 879, 880, 882], "combo": 63, "permit": [63, 845, 857, 862, 865, 868], "usabl": [63, 857, 866], "neither": [63, 238, 255, 262, 288, 649, 654, 706, 849, 862, 868], "nor": [63, 238, 255, 262, 288, 649, 849, 862], "specifc": 63, "invoc": 63, "externally_link": 63, "logo": 63, "patch": [63, 306, 649, 850, 884], "cv2_imshow": 63, "envrion": 63, "canni": 63, "original_img": 63, "fn_arg": 63, "dilate_edg": 63, "morphologi": 63, "hk_model": 63, "keras_model": 63, "odsc": 63, "talk": 63, "352": [64, 98, 653, 677, 854], "nvidia_ml_py3": 64, "19190": 64, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 64, "b9": 64, "b1": [64, 654, 703], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 64, "cycler": 64, "fonttool": 64, "965": 64, "kiwisolv": 64, "show_graph": [64, 814], "to_ivy_modul": [64, 809], "image_dim": 64, "v0": 64, "urlerror": 64, "dev_str": 64, "comp_network": 64, "time_chronolog": 64, "ret0_nc": 64, "ret1_nc": 64, "ret0_c": 64, "ret1_c": 64, "pytorch_vision_v0": 64, "distributed_c10d": 64, "262": 64, "reduce_op": 64, "reduceop": 64, "004645566477999864": 64, "0044566806820000695": 64, "attribut": [64, 88, 180, 181, 182, 183, 214, 215, 223, 566, 567, 647, 648, 651, 794, 846, 847, 848, 853, 854, 858, 859, 861, 862, 868], "definit": [64, 70, 76, 93, 99, 307, 649, 654, 684, 833, 837, 841, 845, 850, 855, 858], "max_pool2d": [64, 71, 94, 390, 410], "__iadd__": 64, "adaptive_avg_pool2d": [64, 71, 94, 390], "_arraywithactiv": [65, 116], "abc": [65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 120, 564, 651, 658, 756, 811, 816, 827, 828], "_abc_impl": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121], "_abc": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121], "_abc_data": [65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121], "approxim": [65, 70, 71, 76, 87, 93, 94, 99, 111, 114, 124, 236, 237, 240, 241, 242, 243, 252, 253, 258, 260, 262, 276, 277, 278, 279, 293, 300, 301, 305, 306, 307, 364, 374, 387, 392, 471, 472, 643, 649, 654, 697, 700, 808, 853, 862], "complex_mod": [65, 70, 71, 87, 93, 94, 124, 125, 126, 127, 128, 129, 130, 131, 132, 306, 310, 315, 316, 318, 382, 643, 649, 808, 859], "variant": [65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 153, 154, 155, 156, 158, 160, 161, 164, 168, 169, 170, 180, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 390, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 631, 632, 635, 637, 638, 639, 641, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 700, 701, 702, 704, 708, 709, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 845, 852, 853, 868], "docstr": [65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 168, 169, 170, 180, 183, 187, 188, 195, 212, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 387, 390, 393, 402, 409, 410, 411, 412, 414, 415, 416, 418, 422, 423, 424, 427, 428, 429, 433, 434, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 556, 557, 560, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 582, 584, 585, 587, 592, 593, 607, 608, 609, 610, 611, 613, 615, 616, 629, 630, 631, 632, 635, 637, 638, 639, 641, 646, 647, 649, 651, 654, 656, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 838, 839, 843, 847, 856, 857, 858, 859, 862, 864, 866], "liter": [65, 70, 71, 76, 87, 93, 94, 99, 124, 125, 126, 127, 128, 129, 130, 131, 132, 306, 310, 315, 316, 318, 382, 390, 391, 393, 396, 412, 422, 426, 434, 449, 455, 460, 463, 466, 499, 522, 643, 649, 654, 663, 695, 711, 775, 808, 868], "magnitud": [65, 70, 71, 87, 93, 94, 124, 125, 126, 127, 128, 129, 130, 131, 132, 235, 238, 255, 262, 288, 306, 310, 315, 316, 318, 382, 643, 649, 654, 704, 705, 808, 850], "handle_complex_input": [65, 70, 71, 87, 93, 94, 124, 125, 126, 127, 128, 129, 130, 131, 132, 306, 310, 315, 316, 318, 382, 643, 649, 808, 859], "element": [65, 67, 70, 71, 72, 75, 76, 78, 80, 81, 82, 84, 87, 88, 90, 91, 93, 94, 95, 98, 99, 101, 103, 104, 105, 107, 112, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 143, 144, 150, 151, 160, 161, 162, 178, 180, 183, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 320, 321, 322, 324, 325, 326, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 357, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 382, 384, 387, 390, 391, 392, 393, 402, 403, 414, 415, 416, 419, 424, 427, 428, 429, 433, 435, 436, 437, 443, 444, 445, 467, 477, 478, 479, 489, 490, 491, 493, 496, 507, 508, 510, 512, 514, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 549, 553, 556, 557, 568, 569, 585, 587, 607, 608, 609, 611, 615, 616, 643, 646, 649, 651, 653, 654, 656, 658, 660, 661, 662, 663, 664, 665, 676, 685, 687, 689, 690, 694, 699, 701, 702, 704, 708, 719, 722, 723, 724, 725, 726, 727, 728, 729, 738, 741, 747, 758, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 791, 793, 796, 798, 812, 828, 853, 863, 865, 868, 870], "138": [65, 124, 643], "165": [65, 124, 643, 653, 677], "hardswish": [65, 71, 87, 94, 313, 382, 643, 808], "leaky_relu": [65, 87, 94, 310, 643, 797], "alpha": [65, 70, 71, 87, 93, 94, 121, 126, 238, 304, 310, 311, 319, 323, 329, 382, 384, 391, 396, 397, 445, 522, 525, 526, 527, 643, 649, 808, 857, 862, 863], "slope": [65, 71, 87, 94, 126, 310, 311, 317, 319, 323, 382, 643, 808], "leaki": [65, 87, 126, 643, 808], "log_softmax": [65, 87, 643, 808], "0719": [65, 87, 127], "mish": [65, 87, 643, 808], "30340147": [65, 128, 643], "86509842": [65, 87, 128, 643], "269": [65, 130], "881": [65, 70, 93, 130, 241, 254, 294, 649], "422": [65, 131, 643], "155": [65, 98, 131, 643, 653, 677], "softplu": [65, 87, 643, 808, 868], "beta": [65, 71, 79, 87, 94, 102, 132, 319, 323, 329, 332, 333, 382, 384, 391, 392, 396, 397, 445, 473, 522, 526, 527, 643, 659, 757, 808, 868], "threshold": [65, 70, 71, 87, 93, 94, 132, 286, 287, 326, 352, 382, 387, 392, 393, 468, 473, 507, 643, 649, 808, 868], "union": [65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 384, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 574, 576, 577, 578, 580, 581, 584, 585, 587, 588, 592, 593, 597, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 749, 750, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 796, 811, 816, 817, 845, 848, 850, 851, 852, 854, 857, 858, 861, 866, 868, 870, 879, 880, 881, 882], "3461": [65, 87, 132, 643], "6491": [65, 87, 132, 643], "hopefulli": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 837, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 868, 870, 871, 876, 877], "_array_to_new_backend": 66, "_data_to_new_backend": 66, "native_x": 66, "native_x_backend": 66, "_to_ivi": 66, "_to_n": 66, "to_ignor": [66, 86, 109, 658, 749, 750], "_to_new_backend": 66, "args_to_ivi": 66, "include_deriv": [66, 89, 658, 739, 750, 793], "nest": [66, 88, 89, 117, 120, 258, 583, 613, 630, 633, 649, 651, 652, 657, 735, 736, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 816, 845, 847, 848, 858, 860, 866, 872, 874, 884], "unchang": [66, 70, 390, 393, 435, 489, 653, 676], "deriv": [66, 67, 71, 73, 89, 90, 94, 96, 146, 151, 158, 164, 328, 332, 357, 384, 387, 631, 632, 635, 636, 637, 638, 639, 646, 652, 657, 658, 737, 739, 750, 814, 816, 817, 850, 851], "word": [66, 140, 393, 492, 646, 660, 761, 809, 812, 848, 861, 862, 874], "args_to_n": [66, 861], "cont_inplac": 66, "decid": [66, 88, 658, 749, 750, 839, 840, 850, 868], "args_to_new_backend": 66, "shallow": [66, 658, 745, 746, 750, 755, 756], "nativevari": 66, "mutabl": [66, 658, 739, 745, 746, 750, 755, 756, 846], "to_ivi": [66, 89, 658, 751, 861], "leaf": [66, 88, 95, 107, 117, 564, 658, 748, 749, 751, 778, 848, 858], "travers": [66, 89, 658, 742, 750, 848, 850, 854, 871], "lowest": [66, 71, 80, 89, 94, 103, 402, 541, 658, 660, 750, 759, 828, 858, 872, 874, 885], "search": [66, 71, 89, 94, 764, 765, 804, 838, 840, 848, 852, 855, 865, 866], "to_new_backend": 66, "_arraywithcr": [67, 116], "boolean": [67, 68, 70, 71, 72, 78, 81, 84, 88, 90, 91, 93, 94, 95, 101, 104, 107, 116, 117, 137, 139, 141, 142, 144, 150, 167, 183, 185, 187, 188, 191, 207, 217, 225, 231, 245, 246, 247, 248, 249, 250, 282, 283, 284, 285, 350, 351, 366, 387, 391, 393, 449, 460, 466, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 508, 515, 550, 553, 564, 571, 574, 575, 579, 580, 581, 582, 583, 584, 585, 594, 597, 600, 601, 603, 604, 629, 640, 645, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 661, 664, 680, 722, 723, 724, 726, 728, 729, 731, 733, 735, 736, 748, 766, 767, 768, 780, 782, 796, 797, 798, 799, 804, 815, 848, 850, 858, 862, 865, 868], "never": [67, 71, 78, 90, 94, 101, 142, 393, 477, 478, 479, 485, 487, 489, 490, 491, 494, 498, 506, 515, 571, 651, 656, 722, 723, 724, 726, 728, 729, 731, 733, 841, 850, 861, 862, 865], "buffer": [67, 90, 94, 101, 142, 149, 477, 478, 485, 487, 489, 490, 491, 498, 515, 646, 722, 723, 724, 726, 728, 729, 731, 733, 813, 814, 818, 861, 872], "nativedtyp": [67, 68, 71, 75, 76, 80, 81, 84, 90, 94, 99, 103, 104, 107, 140, 141, 142, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 163, 164, 166, 167, 172, 173, 174, 175, 176, 177, 178, 179, 184, 185, 189, 191, 193, 197, 207, 327, 328, 329, 330, 331, 332, 333, 348, 355, 371, 384, 387, 397, 402, 524, 525, 526, 527, 528, 538, 539, 540, 541, 544, 547, 646, 647, 653, 654, 660, 661, 663, 664, 676, 695, 711, 759, 760, 761, 764, 765, 775, 777, 778, 781, 783, 785, 811, 850, 851, 857, 866, 870], "datatyp": [67, 71, 88, 90, 94, 142, 151, 155, 172, 193, 197, 390, 438, 646, 647, 791, 866, 880], "nativedevic": [67, 69, 71, 80, 90, 92, 94, 103, 140, 141, 142, 145, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 162, 163, 164, 209, 210, 211, 212, 213, 216, 221, 222, 223, 224, 226, 227, 228, 229, 230, 234, 327, 328, 343, 384, 397, 524, 525, 527, 528, 646, 648, 660, 758, 759, 760, 761, 811, 816, 817, 850, 851, 854, 857, 866], "39999998": [67, 141, 142, 646, 662, 770], "5999999": [67, 71, 94, 98, 141, 142, 312, 382, 391, 440, 646, 653, 676, 683], "0999999": [67, 84, 141, 142, 312, 322, 325, 368, 382, 387, 646, 781], "10000038": [67, 141, 142, 646], "90786433e": [67, 141, 142, 646], "310": [67, 141, 142, 646], "copy_arrai": [67, 90, 646], "to_ivy_arrai": [67, 90, 144, 646], "empty_lik": [67, 71, 90, 94, 279, 391, 443, 646, 649], "uniniti": [67, 145, 146, 646, 856], "from_dlpack": [67, 90, 646], "full_lik": [67, 90, 646, 866], "fill_valu": [67, 71, 81, 90, 94, 104, 150, 151, 267, 275, 393, 397, 508, 528, 646, 649, 661, 767, 850, 863, 866], "scalar": [67, 70, 71, 72, 76, 87, 90, 93, 94, 95, 99, 111, 126, 151, 156, 238, 259, 304, 310, 353, 354, 356, 361, 364, 366, 368, 373, 387, 390, 391, 392, 393, 438, 445, 467, 477, 478, 479, 488, 493, 616, 629, 646, 649, 651, 654, 711, 850, 860, 862, 872, 884], "fill": [67, 70, 71, 80, 81, 88, 90, 93, 94, 103, 104, 145, 150, 151, 153, 156, 157, 158, 163, 164, 289, 328, 384, 391, 393, 397, 449, 455, 460, 466, 488, 508, 509, 525, 527, 528, 646, 649, 660, 661, 759, 767, 811, 839, 863], "000123": [67, 151, 646], "stop": [67, 71, 73, 90, 94, 96, 140, 152, 153, 228, 391, 460, 466, 594, 632, 635, 637, 638, 639, 641, 646, 648, 651, 652, 657, 658, 735, 736, 737, 749, 816, 832, 857, 860, 868, 870, 872, 884], "num": [67, 90, 152, 153, 646, 796, 841, 857, 870], "endpoint": [67, 90, 152, 153, 646, 811, 857], "logspac": [67, 90, 646, 870], "sequenc": [67, 71, 75, 76, 78, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 147, 149, 151, 153, 156, 158, 164, 168, 170, 183, 187, 188, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 331, 338, 339, 340, 341, 342, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 380, 381, 384, 387, 388, 389, 390, 391, 393, 397, 402, 403, 405, 406, 407, 414, 415, 416, 418, 419, 423, 424, 426, 433, 434, 435, 436, 437, 440, 448, 449, 450, 452, 458, 459, 460, 463, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 483, 484, 485, 486, 492, 494, 495, 497, 498, 500, 501, 504, 506, 508, 509, 510, 512, 515, 516, 517, 519, 520, 521, 523, 525, 526, 538, 539, 540, 541, 548, 549, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 588, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 630, 633, 634, 635, 641, 646, 649, 651, 652, 653, 654, 656, 658, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 680, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 711, 713, 714, 715, 719, 720, 722, 723, 725, 726, 727, 728, 729, 730, 733, 734, 738, 745, 755, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 812, 815, 817, 841, 849, 850, 851, 852, 854, 865, 866, 868, 870], "on_valu": [67, 90, 153, 156, 646], "off_valu": [67, 90, 153, 156, 646], "evenli": [67, 70, 71, 75, 78, 88, 90, 93, 94, 98, 101, 140, 152, 153, 307, 390, 433, 437, 646, 649, 653, 656, 666, 667, 668, 669, 671, 673, 675, 728], "hint": [67, 70, 71, 76, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 344, 350, 351, 353, 356, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 499, 508, 512, 538, 541, 568, 572, 574, 576, 607, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 839, 845, 853, 855, 857, 858, 861, 862, 866], "simplic": [67, 70, 71, 76, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 344, 350, 351, 353, 356, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 499, 508, 512, 538, 541, 568, 572, 574, 576, 607, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 853, 868], "nestabl": [67, 70, 71, 76, 93, 94, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 170, 186, 190, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 328, 343, 344, 350, 351, 353, 356, 384, 387, 390, 391, 393, 402, 409, 410, 411, 412, 414, 415, 416, 422, 427, 428, 429, 434, 436, 445, 499, 508, 512, 538, 541, 545, 554, 562, 563, 568, 572, 574, 576, 578, 592, 607, 611, 616, 641, 646, 647, 649, 651, 652, 653, 654, 656, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 712, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 757, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 839, 843, 852, 853, 861, 865, 874], "464": [67, 70, 103, 153, 242, 243, 649], "15888336": [67, 153], "2154": [67, 153], "43469003": [67, 153], "meshgrid": [67, 90, 646], "spars": [67, 71, 77, 90, 94, 100, 154, 331, 384, 391, 449, 460, 466, 646, 655, 715], "xy": [67, 90, 154, 646], "coordin": [67, 70, 81, 93, 94, 104, 154, 162, 243, 305, 335, 336, 343, 364, 384, 398, 529, 646, 649, 661, 767], "conserv": [67, 154, 646], "cartesian": [67, 154, 646], "matrix": [67, 71, 72, 75, 76, 94, 95, 98, 99, 111, 112, 114, 116, 154, 160, 161, 162, 343, 344, 384, 391, 393, 402, 441, 444, 445, 448, 449, 450, 452, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 497, 538, 550, 556, 646, 651, 653, 654, 677, 684, 686, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 708, 709, 712, 796, 798, 811, 812, 828, 832, 839, 850, 862, 884], "ij": [67, 84, 154, 646, 664, 779, 828], "rank": [67, 71, 76, 78, 85, 94, 99, 101, 108, 111, 112, 113, 114, 115, 120, 154, 338, 339, 340, 341, 342, 384, 391, 393, 402, 449, 450, 460, 463, 466, 499, 508, 512, 548, 646, 654, 656, 661, 665, 685, 687, 695, 697, 701, 703, 708, 710, 711, 721, 722, 730, 733, 734, 767, 787, 788, 834], "ni": [67, 154, 646], "xi": [67, 154, 646], "scatter": [67, 72, 90, 95, 156, 592, 593, 646, 651, 847, 861, 868], "unless": [67, 71, 76, 90, 94, 156, 288, 349, 366, 371, 387, 646, 649, 654, 697, 846, 851, 861, 872, 879, 882], "ones_lik": [67, 90, 646, 846, 870], "tril": [67, 90, 646], "whose": [67, 70, 71, 72, 76, 78, 82, 84, 90, 93, 94, 95, 99, 101, 105, 107, 112, 114, 116, 151, 160, 161, 237, 241, 244, 252, 253, 254, 293, 294, 300, 301, 305, 306, 307, 344, 358, 359, 363, 367, 368, 370, 374, 384, 391, 393, 444, 465, 498, 508, 514, 555, 611, 646, 649, 651, 654, 656, 662, 664, 684, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 711, 723, 727, 769, 770, 771, 778, 779, 798, 836, 853, 865], "innermost": [67, 71, 76, 99, 160, 161, 344, 384, 391, 444, 646, 654, 684, 686, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 708], "mxn": [67, 71, 76, 99, 160, 161, 344, 384, 646, 654, 688, 695, 697, 698, 700, 701, 705, 708], "matric": [67, 71, 76, 94, 99, 111, 112, 116, 154, 160, 161, 344, 384, 391, 393, 444, 449, 450, 452, 458, 459, 464, 488, 646, 653, 654, 677, 684, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 708, 709, 798, 837, 855, 884], "diagon": [67, 71, 76, 94, 99, 112, 147, 160, 161, 162, 328, 343, 344, 384, 391, 393, 442, 445, 455, 461, 488, 646, 654, 687, 708], "triangular": [67, 71, 76, 99, 160, 161, 162, 343, 344, 384, 391, 461, 646, 654, 684, 690, 691, 697, 701], "triu": [67, 90, 646], "upper": [67, 71, 76, 80, 94, 99, 103, 147, 161, 162, 328, 344, 384, 391, 402, 461, 541, 646, 654, 660, 684, 690, 691, 701, 761, 850, 861, 865], "zeros_lik": [67, 71, 90, 167, 284, 393, 508, 631, 632, 635, 637, 638, 639, 646, 647, 649, 652, 654, 656, 701, 719, 862, 868], "data_typ": [68, 71, 91, 94, 197, 385, 647, 847, 850, 865, 866], "_arraywithdatatyp": [68, 116], "irrespect": [68, 76, 91, 99, 167, 647, 654, 704, 848, 861], "promot": [68, 70, 71, 76, 91, 93, 94, 99, 106, 116, 117, 167, 170, 193, 194, 195, 201, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 258, 260, 262, 276, 277, 278, 279, 280, 285, 288, 293, 297, 300, 301, 302, 303, 304, 305, 306, 309, 361, 369, 374, 387, 390, 402, 434, 538, 601, 624, 647, 649, 651, 654, 656, 664, 684, 685, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 710, 711, 720, 730, 773, 781, 784, 796, 797, 842, 844, 853, 854, 858, 867, 877], "nan": [68, 70, 71, 72, 82, 84, 91, 93, 94, 95, 167, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 269, 270, 271, 276, 277, 278, 279, 280, 283, 288, 289, 291, 293, 294, 297, 298, 299, 300, 301, 302, 305, 306, 308, 315, 349, 350, 351, 362, 366, 371, 374, 382, 387, 393, 402, 508, 536, 537, 544, 545, 546, 547, 574, 629, 644, 647, 649, 651, 662, 664, 665, 769, 770, 771, 772, 780, 781, 782, 784, 785, 786, 787, 788, 796, 799, 844, 850, 853, 860, 866, 867], "infin": [68, 70, 72, 76, 91, 93, 99, 167, 235, 236, 237, 238, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 269, 270, 276, 277, 278, 279, 280, 283, 288, 289, 291, 293, 297, 298, 300, 301, 302, 305, 306, 308, 350, 351, 374, 387, 574, 644, 647, 649, 651, 654, 664, 665, 702, 711, 780, 782, 787, 788, 844, 853], "desir": [68, 69, 71, 81, 84, 88, 91, 92, 94, 104, 107, 111, 167, 169, 170, 229, 334, 375, 384, 387, 393, 402, 497, 544, 547, 548, 647, 648, 654, 661, 664, 706, 766, 781, 811, 812, 841, 846, 849, 850, 851, 862, 871, 880, 884], "broadcast_arrai": [68, 91, 647], "mix": [68, 70, 91, 93, 94, 95, 100, 103, 116, 117, 168, 181, 182, 195, 214, 215, 245, 248, 249, 250, 255, 256, 262, 266, 274, 275, 285, 288, 291, 297, 392, 402, 473, 545, 564, 566, 567, 568, 569, 578, 613, 616, 647, 648, 649, 651, 653, 654, 655, 656, 659, 664, 667, 669, 672, 674, 675, 677, 683, 684, 706, 713, 715, 719, 757, 779, 781, 784, 797, 799, 839, 843, 850, 851, 852, 861, 868, 871, 874, 884], "broadcast_to": [68, 91, 647, 850], "can_cast": [68, 91, 647, 850, 858, 862], "accord": [68, 71, 72, 78, 84, 91, 101, 107, 170, 180, 238, 249, 255, 262, 288, 299, 334, 384, 390, 393, 435, 499, 568, 571, 592, 593, 647, 649, 651, 654, 656, 664, 710, 721, 734, 784, 786, 791, 798, 819, 827, 839, 840, 844, 850, 856, 858, 862, 865], "finfo": [68, 91, 647, 865], "resolut": [68, 91, 180, 647, 841], "4028235e": [68, 180, 647], "iinfo": [68, 91, 647], "integ": [68, 70, 71, 75, 76, 78, 80, 84, 85, 88, 93, 94, 95, 98, 99, 101, 103, 107, 108, 116, 117, 140, 150, 183, 184, 190, 194, 195, 199, 235, 245, 246, 247, 248, 249, 250, 251, 261, 262, 273, 285, 290, 293, 297, 298, 308, 309, 345, 346, 347, 350, 351, 355, 360, 361, 384, 387, 390, 393, 397, 400, 402, 418, 423, 433, 436, 437, 438, 485, 494, 499, 508, 512, 515, 524, 525, 526, 527, 528, 530, 531, 536, 538, 539, 540, 545, 548, 571, 587, 597, 630, 646, 647, 649, 651, 653, 654, 656, 660, 663, 664, 665, 666, 667, 668, 669, 671, 673, 675, 685, 687, 696, 710, 711, 728, 758, 759, 760, 761, 762, 763, 775, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 796, 797, 798, 799, 804, 812, 828, 841, 848, 850, 860, 863, 865, 870], "119": [68, 183], "1220": [68, 183], "int16": [68, 71, 80, 84, 91, 103, 170, 174, 176, 181, 183, 190, 205, 402, 539, 540, 647, 664, 759, 777, 778, 783, 785, 796, 797, 850, 862, 865, 870], "32768": [68, 91, 183, 609, 651], "32767": [68, 91, 183], "is_bool_dtyp": [68, 91, 647], "is_float_dtyp": [68, 91, 647, 866], "is_int_dtyp": [68, 91, 647, 863, 866], "is_uint_dtyp": [68, 91, 647, 863, 866], "result_typ": [68, 91, 647, 850], "arrays_and_dtyp": [68, 91, 195, 647], "_arraywithdevic": [69, 116], "move": [69, 71, 92, 94, 162, 225, 229, 233, 343, 384, 393, 498, 646, 648, 814, 841, 851, 866], "addit": [69, 71, 72, 79, 92, 94, 95, 102, 137, 139, 229, 238, 298, 392, 396, 402, 467, 522, 537, 542, 561, 562, 563, 630, 645, 648, 649, 651, 653, 657, 659, 680, 737, 757, 812, 828, 839, 840, 841, 846, 850, 852, 853, 856, 858, 860, 861, 862, 865, 866, 868, 871, 880, 884, 885], "__dlpack__": [69, 92, 148, 229, 646, 648], "caveat": [69, 92, 229, 392, 471, 648], "portabl": [69, 92, 229, 648, 833], "_arraywithelementwis": [70, 116], "ab": [70, 76, 86, 93, 109, 116, 117, 293, 349, 366, 387, 393, 507, 649, 654, 658, 695, 705, 711, 746, 749, 793, 827, 828, 833, 837, 845, 850, 855, 859, 862, 865], "absolut": [70, 71, 76, 86, 88, 93, 94, 99, 116, 235, 299, 349, 366, 369, 375, 387, 391, 392, 445, 462, 468, 470, 649, 654, 695, 696, 697, 702, 791, 793, 796, 798, 799, 834, 840], "aco": [70, 93, 649], "invers": [70, 71, 76, 93, 94, 99, 236, 237, 240, 241, 242, 243, 244, 359, 387, 390, 400, 413, 422, 424, 434, 530, 649, 654, 693, 696, 700, 819, 850], "cosin": [70, 93, 236, 237, 252, 253, 327, 330, 384, 390, 412, 422, 649, 812], "acosh": [70, 93, 181, 182, 647, 649, 837, 855], "area": [70, 71, 93, 94, 98, 237, 241, 244, 390, 393, 426, 433, 437, 500, 649, 836, 861, 868], "hyperbol": [70, 93, 237, 241, 244, 253, 301, 305, 306, 319, 323, 382, 649], "sector": [70, 93, 237, 241, 244, 649], "multipli": [70, 71, 75, 84, 93, 94, 98, 111, 238, 304, 367, 390, 391, 426, 457, 458, 539, 540, 649, 653, 664, 676, 777, 783, 841, 845, 846, 848, 852], "angl": [70, 93, 243, 253, 301, 306, 365, 387, 649], "deg": [70, 93, 239, 649], "radian": [70, 71, 93, 94, 236, 239, 240, 242, 243, 252, 254, 294, 300, 305, 374, 387, 649, 853], "degre": [70, 71, 84, 93, 94, 107, 239, 254, 294, 337, 384, 393, 506, 649, 664, 784, 786, 886], "1j": [70, 93, 94, 239, 240, 252, 253, 258, 260, 272, 295, 300, 301, 305, 353, 608, 649, 651], "2j": [70, 71, 93, 94, 239, 268, 353, 390, 418, 423, 609, 649, 651], "3j": [70, 71, 93, 94, 239, 272, 295, 353, 387, 649], "35619449": [70, 239, 649], "78539816": [70, 239, 649], "135": [70, 239, 556, 649, 651], "asin": [70, 93, 649], "sine": [70, 93, 240, 241, 300, 301, 649], "927": [70, 93, 240], "asinh": [70, 93, 240, 649], "atan": [70, 93, 649], "tangent": [70, 93, 242, 243, 244, 305, 306, 319, 323, 380, 382, 389, 649, 853], "785": [70, 93, 242, 243, 649], "atan2": [70, 93, 649], "quotient": [70, 93, 243, 255, 262, 649], "588": [70, 243, 649], "inf": [70, 71, 72, 76, 93, 94, 95, 99, 243, 260, 269, 270, 271, 272, 276, 277, 279, 289, 315, 359, 369, 382, 387, 391, 402, 441, 541, 574, 629, 644, 649, 651, 653, 654, 681, 695, 711, 796, 799, 837, 850, 855, 860], "719": [70, 243, 649], "atanh": [70, 93, 649], "549": [70, 93, 98, 244, 649, 653, 677], "bitwise_and": [70, 93, 649], "bitwise_invert": [70, 93, 649], "bitiwse_invert": [70, 246], "bitwise_left_shift": [70, 93, 649], "bitwise_or": [70, 93, 649], "bitwise_right_shift": [70, 93, 116, 649], "bitwise_xor": [70, 93, 116, 649], "ceil": [70, 71, 93, 94, 111, 114, 140, 390, 409, 410, 411, 427, 428, 429, 432, 646, 649, 812, 861], "416": [70, 252, 649], "540": [70, 252], "990": [70, 252], "cosh": [70, 93, 252, 649], "deg2rad": [70, 93, 649], "180": [70, 93, 254, 294, 649], "270": [70, 93, 254, 294, 649], "360": [70, 93, 254, 294, 649, 849], "dividend": [70, 93, 255, 262, 297, 309, 649], "divisor": [70, 71, 73, 84, 93, 94, 96, 107, 255, 262, 265, 266, 297, 309, 390, 393, 409, 410, 411, 485, 494, 515, 631, 632, 637, 649, 652, 664, 784, 786, 812, 816], "375": [70, 256, 291], "erf": [70, 93, 358, 387, 649], "exponenti": [70, 71, 93, 94, 257, 258, 260, 280, 293, 310, 320, 382, 391, 456, 649], "gauss": [70, 93, 257, 649], "328": [70, 257, 305, 649], "677": [70, 257], "842": [70, 257, 305, 649], "71828198": [70, 93, 258], "38905573": [70, 93, 258], "08553696": [70, 93, 258, 649], "exp2": [70, 93, 649], "expm1": [70, 93, 649, 850], "918": [70, 260], "147": [70, 260, 649], "floor": [70, 71, 93, 94, 111, 114, 249, 262, 390, 409, 410, 411, 413, 427, 428, 429, 432, 649, 812, 861], "floor_divid": [70, 93, 649, 804, 850], "fmin": [70, 93, 649, 850], "gcd": [70, 93, 649, 850], "greater": [70, 71, 75, 78, 80, 93, 94, 98, 103, 116, 117, 149, 236, 237, 240, 241, 243, 244, 247, 249, 255, 261, 262, 276, 278, 293, 297, 299, 301, 302, 306, 307, 308, 352, 387, 390, 413, 418, 423, 434, 646, 649, 653, 654, 656, 660, 683, 685, 696, 729, 761, 798, 812, 841, 842, 863, 876], "greater_equ": [70, 93, 116, 117, 280, 649], "isfinit": [70, 93, 649, 862], "out_i": [70, 93, 269, 270, 271, 272, 295, 649], "self_i": [70, 93, 269, 270, 271, 272, 295], "finit": [70, 93, 235, 236, 237, 238, 241, 243, 244, 253, 255, 256, 258, 260, 262, 269, 270, 276, 278, 288, 289, 291, 293, 297, 301, 302, 306, 649], "isinf": [70, 93, 649], "detect_posit": [70, 93, 270, 649], "detect_neg": [70, 93, 270, 649], "isnan": [70, 93, 649], "isreal": [70, 93, 649], "5j": [70, 93, 94, 272, 295, 353, 387, 649], "6j": [70, 71, 93, 268, 272, 353, 649], "lcm": [70, 93, 649, 850], "less": [70, 71, 76, 80, 84, 93, 94, 99, 103, 116, 117, 236, 237, 240, 243, 244, 251, 255, 262, 276, 277, 278, 279, 293, 297, 299, 302, 373, 387, 390, 391, 402, 412, 413, 422, 434, 460, 466, 538, 541, 649, 654, 660, 664, 695, 696, 697, 700, 711, 761, 784, 786, 812, 840, 841, 848, 850, 852, 854, 857, 862, 865, 868, 869, 870, 884], "less_equ": [70, 93, 116, 117, 649, 854], "log10": [70, 71, 93, 334, 384, 649], "logarithm": [70, 93, 258, 276, 277, 278, 279, 280, 357, 369, 387, 649, 654, 702], "602": [70, 277, 649], "699": [70, 277, 649], "log1p": [70, 93, 649, 860], "693": [70, 93, 131, 241, 278, 643, 649], "0953": [70, 93, 276, 278, 649], "log2": [70, 93, 281, 649], "logaddexp": [70, 93, 649], "logaddexp2": [70, 93, 649, 837, 855], "169925": [70, 93, 281, 649], "logical_and": [70, 93, 649, 862, 868], "logical_not": [70, 93, 649, 850], "logical_or": [70, 93, 649], "conform": [70, 76, 93, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 154, 157, 158, 159, 160, 161, 163, 164, 170, 180, 183, 195, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 258, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 350, 351, 353, 387, 390, 393, 402, 434, 508, 512, 538, 646, 647, 649, 654, 656, 661, 662, 663, 664, 665, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 711, 720, 722, 723, 724, 726, 727, 729, 730, 734, 764, 765, 767, 768, 769, 770, 771, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 853, 856], "api_specif": [70, 71, 93, 94, 170, 258, 268, 269, 284, 350, 351, 387, 390, 393, 434, 508, 647, 649, 656, 664, 734, 784, 853], "array_api": [70, 93, 170, 258, 268, 269, 284, 390, 393, 434, 508, 647, 649, 654, 656, 664, 702, 703, 734, 784, 853], "logical_xor": [70, 93, 649], "use_wher": [70, 93, 286, 287, 649], "formula": [70, 71, 93, 255, 277, 279, 286, 287, 288, 334, 368, 384, 387, 396, 517, 519, 649, 832], "exce": [70, 71, 94, 287, 393, 510, 649], "product": [70, 71, 75, 76, 84, 93, 94, 98, 99, 107, 111, 112, 114, 288, 380, 381, 389, 391, 393, 402, 440, 443, 447, 450, 451, 452, 457, 458, 459, 512, 539, 540, 547, 649, 653, 654, 664, 680, 683, 685, 692, 694, 699, 706, 710, 777, 778, 779, 783, 784, 828, 839, 870, 876, 877, 884], "nan_to_num": [70, 93, 649], "posinf": [70, 93, 289, 649], "neginf": [70, 93, 289, 649], "5e": [70, 73, 93, 94, 289, 372, 637, 649, 652], "not_equ": [70, 93, 116, 117, 649], "pow": [70, 93, 116, 117, 649, 844], "expon": [70, 71, 72, 94, 95, 293, 361, 363, 367, 387, 396, 522, 609, 649, 651, 654, 696], "rad2deg": [70, 93, 649], "286": [70, 94, 294], "458": [70, 294], "573": [70, 294, 649], "reciproc": [70, 93, 649], "333": [70, 93, 255, 296, 649], "remaind": [70, 71, 78, 88, 93, 94, 101, 264, 649, 656, 728, 844, 861], "modulu": [70, 93, 297, 649, 861], "x2_i": [70, 93, 238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 266, 267, 274, 275, 280, 282, 284, 285, 288, 291, 293, 297, 304, 649, 844], "678": [70, 298, 299], "np_variant": [70, 93, 299, 649], "841": [70, 87, 93, 124, 300, 643, 649], "909": [70, 93, 95, 300, 649], "141": [70, 93, 167, 300, 647, 649], "sinh": [70, 93, 300, 649], "232": [70, 93, 301, 649], "sqrt": [70, 71, 93, 94, 390, 413, 418, 419, 423, 424, 434, 649, 811, 812, 833], "squar": [70, 71, 76, 93, 94, 99, 302, 391, 392, 396, 402, 444, 456, 468, 522, 538, 633, 634, 636, 642, 649, 652, 654, 658, 684, 686, 687, 689, 690, 691, 693, 696, 702, 703, 704, 709, 744, 833], "tanh": [70, 71, 93, 94, 305, 319, 323, 382, 649, 808, 870], "762": [70, 93, 306, 649], "964": [70, 93, 306, 649], "trapz": [70, 93, 649], "dx": [70, 93, 307, 649], "apart": [70, 93, 307, 649], "trapezoid": [70, 93, 307, 649], "trunc": [70, 93, 649], "025": [70, 308, 392, 473, 649, 657, 737], "trunc_divid": [70, 93, 649], "_arraywithactivationsexperiment": [71, 116], "celu": [71, 94, 382], "formul": [71, 87, 94, 112, 124, 310, 312, 382, 808], "elu": [71, 94, 314, 382, 808], "scaler": [71, 94, 311, 382, 796, 799, 865], "hardshrink": [71, 94, 382], "lambd": [71, 94, 312, 322, 382], "hardsilu": [71, 94, 382], "66666667": [71, 133, 313, 402, 538, 643], "hardtanh": [71, 94, 382], "max_val": [71, 94, 314, 382], "min_val": [71, 94, 314, 382], "region": [71, 94, 314, 322, 382, 840], "19722438": [71, 94, 315, 382], "38629448": [71, 94, 315, 382], "38629436": [71, 94, 315, 382], "logsigmoid": [71, 94, 382, 808], "31326175": [71, 87, 316, 382], "126928": [71, 94, 316], "01814993": [71, 316], "00004578": [71, 316], "57888985": [71, 316], "31326169": [71, 94, 316, 382], "69314718": [71, 76, 87, 94, 99, 316, 369, 382, 387, 654, 702], "01104775": [71, 316], "prelu": [71, 94, 382, 808], "unidirect": [71, 317, 382, 653, 678], "relu6": [71, 94, 382, 808], "rectifi": [71, 87, 94, 126, 128, 129, 318, 321, 326, 382, 643], "scaled_tanh": [71, 94, 323, 382], "7159": [71, 94, 319, 323, 382], "amplitud": [71, 94, 319, 323, 382], "65537548": [71, 94, 319], "49570239": [71, 94, 319], "77637792": [71, 319], "selu": [71, 94, 382, 808], "11133075": [71, 320, 382], "05070102": [71, 94, 320, 382], "10140204": [71, 320, 382], "15210295": [71, 320, 382], "20280409": [71, 320, 382], "25350523": [71, 320, 382], "30420589": [71, 320, 382], "35490704": [71, 320, 382], "silu": [71, 94, 382, 808], "26894143": [71, 321], "73105854": [71, 94, 321], "softshrink": [71, 94, 382], "bound": [71, 94, 322, 334, 382, 384, 393, 482, 508, 509, 796, 850, 854, 862, 865, 870], "tanhshrink": [71, 94, 382], "23840582": [71, 94, 324, 382], "condit": [71, 81, 94, 104, 137, 325, 340, 341, 384, 391, 441, 645, 658, 661, 748, 749, 768, 798, 844, 850, 852, 854, 858, 859, 861, 865, 880], "met": [71, 94, 325, 854], "hreshold": [71, 325], "thresholded_relu": [71, 94, 382], "_arraywithconversionsexperiment": [71, 116], "_arraywithcreationexperiment": [71, 116], "blackman_window": [71, 94, 384], "period": [71, 94, 301, 305, 327, 329, 330, 332, 333, 384, 390, 425, 649, 841], "window": [71, 75, 94, 98, 327, 329, 330, 332, 333, 348, 384, 390, 396, 409, 410, 411, 413, 427, 428, 429, 430, 432, 433, 437, 438, 522, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 812, 835, 841, 847, 855], "symmetr": [71, 76, 94, 99, 111, 112, 327, 329, 330, 332, 333, 384, 391, 393, 444, 499, 654, 684, 689, 690, 691, 712, 848], "38777878e": [71, 94, 327, 384], "40000000e": [71, 327, 384], "00000000e": [71, 76, 94, 95, 327, 358, 359, 384, 390, 412, 418, 422, 423, 654, 701, 837, 855], "30000000e": [71, 94, 327, 384], "eye_lik": [71, 94, 384], "elsewher": [71, 94, 147, 328, 384, 646, 661, 768, 840], "mel_weight_matrix": [71, 94, 384], "num_mel_bin": [71, 94, 334, 384], "dft_length": [71, 94, 334, 384, 390, 413], "sample_r": [71, 94, 334, 384], "lower_edge_hertz": [71, 94, 334, 384], "upper_edge_hertz": [71, 94, 334, 384], "3000": [71, 94, 334, 384], "melweightmatrix": [71, 94, 334, 384], "linearli": [71, 72, 95, 334, 384, 565, 651, 654, 703], "frequenc": [71, 72, 94, 95, 334, 384, 402, 538, 565, 651, 841], "spectra": [71, 334, 384], "dft": [71, 94, 334, 384, 390], "stft": [71, 94, 334, 384, 390], "mel": [71, 94, 334, 384], "hertz": [71, 334, 384], "2595": [71, 334, 384], "700": [71, 95, 334, 384, 569], "band": [71, 72, 94, 95, 334, 384, 565, 651], "spectrum": [71, 94, 334, 384], "n_fft": [71, 94, 334, 384, 390, 413], "8000": [71, 94, 329, 334, 384], "75694758": [71, 334, 384], "trilu": [71, 94, 384], "retain": [71, 162, 343, 344, 384, 633, 646, 652, 860, 864, 874], "unsorted_segment_mean": [71, 94, 384], "segment_id": [71, 94, 345, 346, 347, 384, 819], "num_seg": [71, 94, 345, 346, 347, 384, 819], "segment": [71, 94, 345, 346, 347, 384, 847, 852], "th": [71, 94, 112, 345, 346, 347, 356, 384, 387, 391, 392, 402, 442, 449, 467, 548], "unsorted_segment_min": [71, 94, 384], "unsorted_segment_sum": [71, 94, 384], "polyv": [71, 94, 384], "coeff": [71, 94, 337, 384], "polynomi": [71, 94, 337, 384], "coeffici": [71, 94, 329, 337, 384, 391, 461, 654, 703, 816], "indetermin": [71, 94, 337, 384], "simplifi": [71, 94, 337, 384, 827, 828, 854, 862, 870, 880, 884, 886], "substitut": [71, 94, 337, 384], "_arraywithdata_typeexperiment": [71, 116], "_arraywithdeviceexperiment": [71, 116], "_arraywithelementwiseexperiment": [71, 116], "equal_nan": [71, 94, 349, 366, 387], "1e10": [71, 349, 366, 387], "00001e10": [71, 349, 366, 387], "00001e": [71, 349, 387], "amax": [71, 94, 387], "keepdim": [71, 76, 78, 81, 84, 85, 88, 94, 99, 101, 104, 107, 108, 350, 351, 355, 371, 378, 387, 388, 393, 402, 505, 543, 544, 545, 546, 547, 548, 654, 656, 661, 664, 665, 695, 711, 733, 764, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 854, 862, 870], "singleton": [71, 76, 81, 84, 85, 94, 99, 104, 107, 108, 350, 351, 387, 654, 656, 661, 664, 665, 711, 722, 729, 765, 780, 781, 782, 783, 784, 785, 786, 787, 788, 870], "amin": [71, 94, 387], "binar": [71, 94, 387], "conj": [71, 94, 253, 258, 260, 301, 302, 306, 387, 649], "conjug": [71, 76, 94, 99, 353, 387, 390, 391, 397, 413, 439, 445, 457, 459, 461, 526, 654, 694, 698, 706], "copysign": [71, 94, 387], "unsign": [71, 84, 94, 354, 387, 393, 402, 508, 539, 540, 664, 777, 778, 783, 785, 797, 850, 870], "count_nonzero": [71, 94, 387], "diff": [71, 88, 94, 387, 852, 861], "prepend": [71, 94, 356, 387, 654, 656, 694, 722, 840], "differenc": [71, 94, 356, 387], "prior": [71, 94, 356, 387, 397, 526, 654, 706, 854, 866], "expand": [71, 72, 78, 94, 95, 356, 387, 393, 512, 565, 651, 656, 722, 848, 864], "discret": [71, 94, 356, 387, 390, 412, 413, 418, 419, 422, 423, 424, 434, 435, 655, 714, 812], "digamma": [71, 94, 387], "7549271": [71, 357, 387], "92278427": [71, 94, 357, 387], "9988394": [71, 357, 387], "erfc": [71, 94, 387], "complementari": [71, 94, 348, 358, 384, 387], "84270084e": [71, 358, 359], "80259693e": [71, 358, 359], "erfinv": [71, 94, 387], "float_pow": [71, 94, 387], "fmax": [71, 94, 387], "fmod": [71, 94, 649], "divis": [71, 72, 73, 94, 95, 96, 249, 255, 262, 264, 297, 299, 309, 393, 485, 599, 608, 622, 631, 632, 637, 649, 651, 652, 653, 666, 673, 674, 816, 858, 867, 876], "frexp": [71, 94, 387], "edge_ord": [71, 94, 364, 387], "boundari": [71, 80, 94, 103, 114, 340, 341, 364, 384, 387, 390, 426, 660, 761, 884], "33333333": [71, 94, 296, 364, 387, 467, 649], "hypot": [71, 94, 387], "hypotenus": [71, 365, 387], "4031": [71, 365, 387], "8102": [71, 365, 387], "isclos": [71, 94, 387, 844], "ldexp": [71, 94, 387], "lerp": [71, 94, 387], "lgamma": [71, 94, 387], "45373654": [71, 369, 387], "6477685": [71, 369, 387], "modf": [71, 94, 387], "fraction": [71, 94, 370, 387, 402, 548, 653, 676], "nansum": [71, 94, 387], "accumul": [71, 94, 371, 387, 393, 505], "nextaft": [71, 94, 387], "0e": [71, 73, 94, 96, 372, 387, 637, 652], "4013e": [71, 94, 372, 387], "4028e": [71, 94, 372, 387], "signbit": [71, 94, 387], "637": [71, 94, 374, 387], "0909": [71, 94, 374, 387], "sparsify_tensor": [71, 94, 387], "sparsifi": [71, 94, 375, 387], "arang": [71, 76, 84, 94, 99, 152, 375, 387, 390, 391, 409, 410, 411, 418, 423, 427, 428, 429, 432, 441, 458, 491, 588, 630, 646, 651, 654, 657, 664, 695, 711, 736, 737, 779, 833, 850, 861], "xlogi": [71, 94, 387], "0986": [71, 94, 376, 387], "3863": [71, 94, 376, 387], "0000": [71, 94, 329, 330, 333, 359, 376, 384, 387, 391, 393, 456, 493], "zeta": [71, 94, 387], "0369": [71, 94, 377, 387], "_arraywithgeneralexperiment": [71, 116], "init_valu": [71, 94, 98, 378, 388, 390, 433], "reduct": [71, 72, 77, 85, 88, 94, 95, 98, 100, 108, 378, 388, 390, 392, 393, 433, 467, 468, 469, 470, 471, 472, 473, 474, 505, 562, 592, 593, 651, 655, 665, 713, 714, 715, 787, 788, 813, 850, 858, 861, 865], "_arraywithgradientsexperiment": [71, 116], "_arraywithimageexperiment": [71, 116], "_arraywithlayersexperiment": [71, 116], "adaptive_avg_pool1d": [71, 94, 390], "1d": [71, 94, 111, 112, 390, 391, 393, 402, 404, 412, 414, 416, 422, 457, 477, 482, 505, 509, 538, 796, 812], "adapt": [71, 94, 96, 390, 404, 405, 406, 407, 638, 652, 812, 816], "plane": [71, 94, 255, 258, 260, 288, 300, 301, 302, 305, 390, 393, 404, 405, 406, 407, 506, 649], "l_in": [71, 94, 390, 404], "spatial": [71, 75, 94, 98, 390, 396, 404, 405, 406, 407, 426, 433, 437, 517, 518, 519, 522, 653, 666, 667, 668, 669, 671, 673, 675, 815], "Will": [71, 94, 390, 404, 405, 406, 407, 822, 872], "l_out": [71, 94, 390, 404], "nhwc": [71, 75, 94, 98, 390, 396, 405, 410, 415, 428, 432, 522, 653, 666, 669, 670, 673, 674, 675, 812], "3d": [71, 76, 94, 390, 405, 407, 414, 415, 479, 654, 692, 812, 868], "4d": [71, 94, 390, 391, 396, 405, 415, 416, 465, 522, 655, 716], "s_0": [71, 94, 390, 405, 406], "s_1": [71, 94, 390, 405, 406], "adaptive_max_pool2d": [71, 94, 390], "h_in": [71, 94, 390, 406, 407], "w_in": [71, 94, 390, 406, 407], "adaptive_max_pool3d": [71, 94, 390], "avg_pool1d": [71, 94, 390], "nwc": [71, 75, 94, 98, 390, 409, 414, 427, 430, 653, 666, 667, 668, 673, 674, 812], "count_include_pad": [71, 94, 390, 409, 410, 411, 812], "d_in": [71, 75, 94, 98, 390, 407, 409, 410, 411, 413, 418, 419, 423, 427, 428, 429, 430, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675], "algorithm": [71, 75, 87, 94, 98, 124, 390, 391, 409, 410, 411, 426, 427, 428, 429, 430, 460, 462, 466, 654, 667, 669, 670, 671, 672, 675, 702, 808, 812, 828, 850, 862, 868, 872, 884], "ncw": [71, 75, 94, 98, 390, 409, 414, 415, 427, 430, 653, 666, 667, 668, 673, 674, 812], "avg_pool2d": [71, 94, 390], "divisor_overrid": [71, 94, 390, 409, 410, 411, 812], "avg_pool3d": [71, 94, 390], "ndhwc": [71, 75, 94, 98, 390, 411, 416, 429, 653, 666, 671, 672, 673, 674, 812], "volum": [71, 75, 94, 98, 390, 411, 413, 418, 419, 423, 429, 653, 671, 672], "ncdhw": [71, 75, 94, 98, 390, 411, 416, 429, 653, 666, 671, 672, 673, 674, 812], "dct": [71, 94, 390, 812], "truncat": [71, 94, 390, 391, 412, 418, 422, 423, 424, 435, 464, 595, 651, 812, 854], "larger": [71, 78, 84, 94, 101, 107, 180, 390, 412, 419, 422, 424, 435, 647, 656, 664, 719, 727, 784, 786, 812, 865, 868], "ortho": [71, 94, 390, 412, 413, 418, 419, 422, 423, 424, 434, 435, 812], "onesid": [71, 94, 390, 413], "fft": [71, 94, 390, 413, 419, 434, 435, 438, 812, 839, 884], "symmetri": [71, 390, 413], "rfft": [71, 94, 390, 413, 435], "invok": [71, 390, 413, 833, 856, 879, 880], "batch_idx": [71, 390, 413], "signal_dim1": [71, 390, 413], "signal_dim2": [71, 390, 413], "signal_dimn": [71, 390, 413], "signal_dim": [71, 390, 413], "embed": [71, 94, 390, 392, 467, 653, 680, 798, 812, 884], "max_norm": [71, 72, 94, 95, 390, 417, 556, 557, 651, 812], "ifft": [71, 94, 390, 418, 424, 812], "pi": [71, 94, 301, 305, 390, 392, 418, 423, 472, 644, 649], "44509285e": [71, 94, 390, 418], "14423775e": [71, 94, 390, 418], "17j": [71, 94, 390, 418, 423], "11483250e": [71, 94, 390, 418], "16j": [71, 94, 390, 418, 423], "33486982e": [71, 94, 390, 418], "22464680e": [71, 94, 390, 418], "95799250e": [71, 94, 390, 418], "66951701e": [71, 94, 390, 418], "fft2": [71, 390], "20477401j": [71, 390, 419], "0614962j": [71, 390, 419], "idct": [71, 94, 390, 812], "49862671": [71, 94, 390, 412, 422], "37691498": [71, 94, 390, 412, 422], "00390816": [71, 94, 390, 412, 422], "58938599": [71, 94, 390, 412, 422], "92713165": [71, 94, 390, 412, 422], "078475": [71, 94, 390, 412, 422], "19664812": [71, 94, 390, 412, 422], "95411837": [71, 94, 390, 412, 422], "30636606e": [71, 94, 390, 423], "43029718e": [71, 94, 390, 423], "18j": [71, 94, 390, 418, 423], "53080850e": [71, 94, 390, 423], "58689626e": [71, 94, 390, 423], "24474906e": [71, 94, 390, 423], "91858728e": [71, 94, 390, 423], "01435406e": [71, 94, 390, 423], "ifftn": [71, 94, 390], "24730653": [71, 94, 390, 424], "90832391j": [71, 94, 390, 424], "49495562": [71, 94, 390, 424], "9039565j": [71, 94, 390, 424], "98193269": [71, 94, 390, 424], "49560517j": [71, 94, 390, 424], "93280757": [71, 94, 390, 424], "48075343j": [71, 94, 390, 424], "28526384": [71, 94, 390, 424], "3351205j": [71, 94, 390, 424], "2343787": [71, 94, 390, 424], "83528011j": [71, 94, 390, 424], "18791352": [71, 94, 390, 424], "30690572j": [71, 94, 390, 424], "82115787": [71, 94, 390, 424], "96195183j": [71, 94, 390, 424], "44719226": [71, 94, 390, 424], "72654048j": [71, 94, 390, 424], "51476765": [71, 390, 424], "66160417j": [71, 390, 424], "04319742": [71, 390, 424], "05411636j": [71, 390, 424], "015561": [71, 390, 424], "04216015j": [71, 390, 424], "06310689": [71, 390, 424], "05347854j": [71, 390, 424], "13392983": [71, 390, 424], "16052352j": [71, 390, 424], "08371392": [71, 390, 424], "17252843j": [71, 390, 424], "0031429": [71, 390, 424], "05421245j": [71, 390, 424], "10446617": [71, 390, 424], "17747098j": [71, 390, 424], "05344324": [71, 390, 424], "07972424j": [71, 390, 424], "8344667": [71, 94, 390, 424], "98222595j": [71, 94, 390, 424], "48472244": [71, 94, 390, 424], "30233797j": [71, 94, 390, 424], "recompute_scale_factor": [71, 94, 390, 426, 868], "antialia": [71, 94, 390, 426, 868], "height": [71, 72, 75, 94, 95, 98, 390, 426, 561, 651, 653, 655, 669, 670, 671, 672, 675, 716, 842], "width": [71, 72, 75, 94, 95, 98, 390, 391, 393, 396, 402, 426, 445, 499, 522, 541, 561, 651, 653, 655, 667, 668, 669, 670, 671, 672, 675, 680, 716], "trilinear": [71, 94, 390, 426, 868], "nearest_exact": [71, 94, 390, 426, 868], "tf_area": [71, 94, 390, 426, 868], "mitchellcub": [71, 94, 390, 426, 868], "lanczos3": [71, 94, 390, 426, 868], "lanczos5": [71, 94, 390, 426, 868], "gaussian": [71, 94, 124, 390, 426, 643, 868], "overwrit": [71, 88, 94, 228, 390, 426, 648, 841, 861, 862, 870], "thu": [71, 94, 249, 262, 297, 305, 306, 390, 391, 426, 444, 649, 654, 689, 690, 839, 849, 854, 859, 862, 866, 886], "antialias": [71, 94, 426], "max_pool1d": [71, 94, 390], "dilaton": [71, 94, 427, 428, 429], "max_pool3d": [71, 94, 390], "max_unpool1d": [71, 94, 390], "unpool": [71, 94, 390, 430], "reduce_window": [71, 98, 390], "window_dimens": [71, 98, 390, 433], "window_strid": [71, 98, 390, 433], "base_dil": [71, 98, 390, 433], "window_dil": [71, 98, 390, 433], "trim": [71, 88, 94, 390, 393, 434, 511], "orthonorm": [71, 76, 94, 99, 390, 434, 654, 701, 704], "8660254j": [71, 94, 390, 434], "rfftn": [71, 94, 390], "sliding_window": [71, 94, 390], "window_s": [71, 94, 390, 437], "frame_length": [71, 94, 390, 438], "frame_step": [71, 94, 390, 438], "fft_length": [71, 94, 390, 438], "window_fn": [71, 94, 390, 438], "pad_end": [71, 94, 390, 438], "smallest": [71, 88, 94, 180, 183, 251, 390, 393, 438, 510, 647, 649, 654, 695, 796, 798, 799], "enclos": [71, 94, 390, 438, 885], "window_length": [71, 94, 327, 329, 332, 333, 348, 384, 390, 438], "li": [71, 94, 390, 391, 402, 438, 445, 548], "past": [71, 94, 390, 438, 841, 844, 863, 865, 884], "fft_unique_bin": [71, 94, 390, 438], "complex64": [71, 91, 94, 173, 187, 196, 202, 268, 295, 390, 434, 438, 647, 649, 654, 702, 704, 705, 797, 850, 855], "complex128": [71, 94, 95, 173, 174, 187, 196, 202, 390, 438, 587, 647, 651, 654, 690, 691, 695, 711, 796, 797, 837, 850, 855], "compon": [71, 94, 143, 157, 158, 236, 237, 238, 241, 244, 253, 255, 256, 258, 260, 288, 290, 291, 298, 301, 302, 305, 306, 338, 342, 353, 384, 387, 390, 391, 396, 438, 449, 460, 522, 646, 649, 661, 767, 864, 870, 877, 885], "linear_algebra": [71, 76, 94, 99, 391, 654, 866], "_arraywithlinearalgebraexperiment": [71, 116], "adjoint": [71, 76, 94, 99, 391, 461, 654, 693, 703, 704, 796], "batched_out": [71, 94, 391], "j1": [71, 94, 391, 440], "jn": [71, 94, 391, 440], "k1": [71, 94, 391, 440], "km": [71, 94, 391, 440], "outer": [71, 76, 94, 99, 111, 391, 440, 654, 657, 735, 736, 737, 828, 839], "30000001": [71, 94, 391, 440, 561, 651, 662, 770], "40000001": [71, 75, 87, 94, 116, 117, 126, 129, 311, 382, 391, 440, 643, 653, 662, 683, 770], "60000002": [71, 94, 107, 117, 391, 396, 440, 521, 523, 557, 651, 781], "80000001": [71, 94, 391, 396, 440, 521, 523], "60000001": [71, 94, 391, 440], "90000004": [71, 94, 391, 440, 664, 781], "20000002": [71, 94, 391, 440, 557, 651], "20000005": [71, 73, 94, 311, 319, 322, 323, 382, 391, 440, 631], "00000012": [71, 94, 391, 440], "49999994": [71, 94, 391, 440], "00000006": [71, 94, 391, 440], "60000014": [71, 94, 391, 440], "19999993": [71, 94, 391, 440], "80000007": [71, 94, 391, 440, 557, 651], "20000017": [71, 94, 391, 440], "89999992": [71, 94, 391, 440], "60000008": [71, 94, 391, 440], "80000019": [71, 94, 368, 387, 391, 440], "4000001": [71, 94, 98, 391, 440, 653, 676, 683], "cond": [71, 94, 137, 391, 645, 872], "933034373659268": [71, 441], "diagflat": [71, 94, 391, 451, 456], "offset": [71, 76, 79, 90, 94, 99, 102, 149, 391, 396, 442, 517, 518, 519, 646, 654, 659, 688, 708, 757, 803], "padding_valu": [71, 94, 391, 393, 442, 500], "right_left": [71, 94, 391, 442], "num_row": [71, 94, 391, 442], "num_col": [71, 94, 391, 442], "dot": [71, 75, 94, 98, 111, 391, 392, 458, 467, 653, 654, 680, 683, 710, 828, 840, 849], "eig": [71, 76, 94, 391, 654, 690, 691], "37228132": [71, 94, 391, 444, 446, 689], "82456484": [71, 444, 689], "41597356": [71, 444, 689], "56576746": [71, 444, 689], "90937671": [71, 444, 689], "eigh_tridiagon": [71, 94, 391], "eigvals_onli": [71, 94, 391, 445], "select_rang": [71, 94, 391, 445], "tol": [71, 94, 115, 391, 445, 460, 466], "eigenvalu": [71, 76, 94, 99, 111, 112, 391, 444, 445, 446, 654, 689, 690, 691, 697], "eigenvector": [71, 94, 391, 444, 445, 654, 689, 690], "interv": [71, 80, 85, 94, 103, 108, 140, 152, 153, 160, 391, 402, 445, 541, 646, 654, 656, 660, 665, 685, 710, 719, 722, 730, 759, 761, 787, 788], "converg": [71, 94, 391, 445], "_2": [71, 94, 391, 445], "eig_val": [71, 94, 391, 445], "decreas": [71, 94, 391, 445, 798], "eig_vector": [71, 94, 391, 445], "38196": [71, 445], "61803": [71, 445], "eigval": [71, 94, 391], "general_inner_product": [71, 99, 391], "n_mode": [71, 99, 391, 447], "tradit": [71, 99, 391, 447], "inner": [71, 76, 90, 99, 120, 156, 391, 444, 447, 646, 654, 657, 689, 690, 694, 735, 736, 737, 828, 839, 861], "higher_order_mo": [71, 94, 391], "n_featur": [71, 94, 391, 448], "d1": [71, 94, 391, 448], "dn": [71, 94, 391, 448], "initialize_tuck": [71, 94, 391], "svd": [71, 76, 94, 99, 114, 391, 449, 455, 460, 462, 463, 464, 466, 654, 705], "truncated_svd": [71, 94, 391, 449, 460, 463, 466], "non_neg": [71, 94, 342, 384, 391, 449], "mask": [71, 75, 94, 98, 111, 390, 391, 393, 436, 449, 450, 460, 466, 507, 571, 651, 653, 676, 680, 683, 868], "svd_mask_repeat": [71, 94, 391, 449, 460, 466], "tuckertensor": [71, 94, 115, 342, 384, 391, 449, 460, 466], "scheme": [71, 94, 391, 449, 460, 844, 884], "tucker": [71, 94, 342, 384, 391, 449, 460], "decomposit": [71, 76, 94, 99, 111, 112, 114, 338, 339, 340, 341, 342, 384, 391, 449, 453, 460, 463, 465, 466, 654, 684, 690, 701, 704, 839], "miss": [71, 94, 391, 393, 449, 460, 466, 507, 816, 839, 840, 845, 848, 849, 852, 862, 865, 868], "everywher": [71, 94, 391, 449, 460, 466], "kron": [71, 94, 391, 456], "make_svd_non_neg": [71, 94, 391, 464], "nntype": [71, 94, 391, 455], "nndsvd": [71, 94, 391, 455], "singular": [71, 76, 94, 99, 391, 449, 455, 462, 464, 654, 695, 697, 700, 704, 705, 796, 798, 850], "nndsvda": [71, 94, 391, 455], "boutsidi": [71, 94, 391, 455], "gallopoulo": [71, 94, 391, 455], "recognit": [71, 94, 391, 455, 836], "1350": [71, 94, 391, 455], "1362": [71, 94, 391, 455], "2008": [71, 94, 391, 455, 884], "matrix_exp": [71, 94, 391], "7183": [71, 94, 391, 456], "3891": [71, 94, 391, 456], "mode_dot": [71, 94, 110, 111, 115, 391], "matrix_or_vector": [71, 94, 111, 115, 391, 457], "i_1": [71, 94, 111, 112, 391, 457], "i_k": [71, 94, 111, 391, 457], "i_n": [71, 94, 111, 391, 457], "i_": [71, 94, 111, 391, 402, 457, 541], "multi_dot": [71, 94, 391], "148": [71, 93, 94, 258, 391, 458], "multi_mode_dot": [71, 94, 391], "mat_or_vec_list": [71, 94, 391, 459], "times_0": [71, 391, 459], "vec": [71, 391, 459], "times_1": [71, 391, 459], "cdot": [71, 288, 391, 459, 649], "times_n": [71, 391, 459], "partial_tuck": [71, 94, 391], "n_iter_max": [71, 94, 391, 460, 466], "verbos": [71, 94, 391, 460, 463, 466, 832, 865], "return_error": [71, 94, 391, 460, 466], "variat": [71, 94, 391, 460, 466, 852, 862, 865], "reconstruct": [71, 76, 82, 94, 105, 114, 391, 393, 460, 466, 514, 654, 662, 704, 769, 771, 863], "return_erro": [71, 391, 460, 466], "svd_flip": [71, 94, 391], "u_based_decis": [71, 94, 391, 462], "basi": [71, 94, 391, 462, 841, 844], "flip": [71, 78, 94, 101, 111, 246, 391, 393, 462, 490, 491, 649, 656, 861, 870], "decis": [71, 94, 391, 462, 833, 844, 850, 868, 870, 884], "u_adjust": [71, 94, 391, 462], "v_adjust": [71, 94, 391, 462], "tensor_train": [71, 94, 391], "tt": [71, 94, 341, 384, 391, 463, 465], "kth": [71, 391, 463], "tttensor": [71, 114, 341, 384, 391, 463], "compute_uv": [71, 76, 94, 99, 391, 464, 654, 704], "n_eigenvec": [71, 94, 391, 464], "returnedv": [71, 464], "vh": [71, 76, 94, 99, 391, 464, 654, 704], "eigen": [71, 94, 391, 464], "namedtupl": [71, 76, 82, 94, 99, 105, 391, 393, 444, 464, 514, 654, 662, 689, 690, 701, 702, 704, 769, 770, 771], "tt_matrix_to_tensor": [71, 94, 391], "rank_k": [71, 94, 391, 465], "left_dim_k": [71, 94, 391, 465], "right_dim_k": [71, 94, 391, 465], "rank_": [71, 94, 391, 465], "49671414": [71, 94, 391, 465, 660, 760], "1382643": [71, 94, 391, 465, 660, 760], "64768857": [71, 94, 391, 465, 660, 760], "5230298": [71, 94, 391, 465, 660, 760], "23415337": [71, 94, 391, 465, 660, 760], "23413695": [71, 94, 391, 465, 660, 760], "57921278": [71, 94, 391, 465], "76743472": [71, 94, 391, 465], "1163073": [71, 94, 391, 465], "11629914": [71, 94, 391, 465], "03237505": [71, 94, 391, 465], "03237278": [71, 94, 391, 465], "78441733": [71, 94, 391, 465], "38119566": [71, 94, 391, 465], "21834874": [71, 94, 391, 465], "10610882": [71, 94, 391, 465], "15165846": [71, 94, 391, 465], "15164782": [71, 94, 391, 465], "35662258": [71, 94, 391, 465], "35659757": [71, 94, 391, 465], "02283812": [71, 94, 391, 465], "49705869": [71, 94, 391, 465], "40518808": [71, 94, 391, 465], "16882598": [71, 94, 391, 465], "fixed_factor": [71, 94, 391, 466], "tl": [71, 94, 391, 466], "kolda": [71, 94, 391, 466], "bader": [71, 94, 391, 466], "siam": [71, 94, 391, 463, 466], "vol": [71, 94, 391, 466], "pp": [71, 94, 391, 466], "455": [71, 94, 391, 466], "2009": [71, 94, 391, 466], "_arraywithlossesexperiment": [71, 116], "hinge_embedding_loss": [71, 94, 392], "margin": [71, 94, 392, 467, 474, 862], "measur": [71, 392, 467, 653, 655, 680, 716, 812], "semi": [71, 392, 467], "l_n": [71, 392, 467], "x_n": [71, 392, 467], "y_n": [71, 392, 467], "ell": [71, 392, 467], "operatornam": [71, 299, 301, 392, 467, 649, 654, 690], "l_1": [71, 392, 467], "hyperparamet": [71, 94, 392, 467], "aggreg": [71, 94, 392, 467, 662, 769, 849], "unreduc": [71, 94, 392, 467], "hing": [71, 94, 392, 467, 474], "target_tensor": [71, 392, 467, 472], "huber_loss": [71, 94, 392], "transit": [71, 94, 392, 468, 884], "huber": [71, 94, 392, 468], "kl_div": [71, 94, 392], "log_target": [71, 94, 392, 469], "contai": [71, 469], "batchmean": [71, 392, 469], "kullback": [71, 94, 392, 469], "leibler": [71, 94, 392, 469], "0916": [71, 469], "l1_loss": [71, 94, 392, 471], "l1": [71, 76, 94, 99, 392, 396, 468, 470, 471, 473, 520, 654, 711, 848], "targetict": [71, 94, 392, 470, 471, 473, 474], "20000000000000004": [71, 470], "log_poisson_loss": [71, 94, 392], "compute_full_loss": [71, 94, 392, 471, 813], "favor": [71, 94, 392, 471], "likelihood": [71, 94, 392, 471, 472], "28402555": [71, 392, 471], "03402555": [71, 392, 471], "1573164": [71, 392, 471], "poisson_nll_loss": [71, 94, 392], "log_input": [71, 94, 392, 472], "poisson": [71, 94, 392, 397, 471, 472], "assumpt": [71, 392, 471, 472], "minu": [71, 392, 471, 472], "omiss": [71, 392, 472], "stirl": [71, 94, 392, 471, 472], "1977562": [71, 472], "smooth_l1_loss": [71, 94, 392], "smooth": [71, 77, 94, 100, 392, 468, 473, 655, 713, 714, 715, 860], "8125": [71, 473], "soft_margin_loss": [71, 94, 392], "soft": [71, 94, 322, 392, 393, 474, 507, 851], "35667497": [71, 474], "22314353": [71, 474], "60943791": [71, 474], "_arraywithmanipulationexperiment": [71, 116], "as_strid": [71, 94, 393], "nativeshap": [71, 75, 78, 80, 94, 101, 103, 141, 142, 145, 150, 157, 163, 393, 397, 475, 487, 492, 501, 504, 524, 525, 526, 527, 528, 593, 606, 612, 614, 646, 651, 653, 656, 660, 666, 668, 670, 672, 674, 726, 759, 760, 761, 857, 859], "byte": [71, 72, 90, 94, 95, 116, 149, 393, 475, 587, 646, 651], "associative_scan": [71, 94, 393], "revers": [71, 72, 76, 84, 94, 99, 107, 116, 117, 381, 389, 390, 391, 393, 402, 436, 452, 476, 490, 491, 539, 540, 560, 651, 654, 656, 664, 709, 723, 777, 778, 839, 848, 849, 850, 852, 853, 861, 862, 868, 870, 872], "scan": [71, 94, 393, 476, 872], "atleast_1d": [71, 94, 393], "ari": [71, 94, 393, 477, 478, 479, 485, 494, 515], "a1": [71, 95, 393, 477, 478, 479, 483, 553], "a2": [71, 95, 393, 477, 478, 479, 483, 553], "atleast_2d": [71, 94, 393], "atleast_3d": [71, 94, 393], "column_stack": [71, 94, 393], "concat_from_sequ": [71, 94, 393], "input_sequ": [71, 94, 393, 484], "new_axi": [71, 94, 393, 484, 870], "dsplit": [71, 94, 393], "indices_or_sect": [71, 94, 393, 485, 494, 515], "3rd": [71, 94, 393, 485], "dstack": [71, 94, 393], "fill_diagon": [71, 94, 393], "fill_diag": [71, 488], "fortran": [71, 78, 94, 101, 393, 489, 656, 726, 884], "layout": [71, 78, 94, 101, 393, 489, 656, 726, 846, 861, 862, 868], "fliplr": [71, 94, 393, 861], "diag": [71, 76, 94, 99, 112, 393, 490, 491, 654, 690, 871], "flipud": [71, 94, 393, 861], "fold": [71, 94, 393, 501, 502, 849], "unfold": [71, 94, 111, 112, 114, 391, 393, 449, 492, 501, 503], "folded_tensor": [71, 393, 492], "heavisid": [71, 94, 393], "5000": [71, 393, 493, 654, 693, 828], "hsplit": [71, 94, 393], "horizont": [71, 94, 393, 483, 494, 561, 651], "hstack": [71, 94, 393, 483], "i0": [71, 94, 393, 402, 541], "bessel": [71, 84, 94, 107, 332, 384, 393, 496, 664, 784, 786], "kind": [71, 84, 94, 180, 183, 184, 402, 496, 539, 540, 545, 647, 664, 777, 778, 783, 785, 796, 797, 838, 862, 865, 868, 870, 872], "26606588": [71, 94, 393, 496], "2795853": [71, 94, 393, 496], "88079259": [71, 94, 393, 496], "row_mod": [71, 94, 393, 497], "column_mod": [71, 94, 393, 497], "ascend": [71, 83, 94, 106, 393, 400, 497, 531, 663, 773, 775, 842], "prod": [71, 72, 84, 95, 107, 391, 393, 450, 452, 497, 547, 562, 651, 664, 796, 828, 850, 852, 870], "moveaxi": [71, 94, 393], "destin": [71, 94, 393, 498], "unstack": [71, 78, 88, 101, 498, 656, 848, 870], "reorder": [71, 78, 94, 101, 393, 498, 561, 651, 656, 723, 864], "stat_length": [71, 94, 393, 499], "constant_valu": [71, 94, 393, 499], "end_valu": [71, 94, 393, 499], "reflect_typ": [71, 94, 393, 499], "partial_fold": [71, 94, 393], "skip_begin": [71, 94, 393, 501, 502, 503, 504], "untouch": [71, 94, 393, 501, 502, 503, 504], "partial_tensor_to_vec": [71, 94, 393], "skip_end": [71, 94, 393, 502, 503], "vectoris": [71, 94, 111, 393, 502, 504], "partial_unfold": [71, 94, 393], "ravel_tensor": [71, 94, 393, 503], "n_1": [71, 94, 393, 503], "n_2": [71, 94, 393, 503], "n_i": [71, 94, 391, 393, 450, 503], "partial_vec_to_tensor": [71, 94, 393], "put_along_axi": [71, 94, 393], "rot90": [71, 94, 393, 861], "rotat": [71, 94, 393, 506], "soft_threshold": [71, 94, 393], "behav": [71, 94, 350, 351, 387, 391, 393, 444, 508, 654, 689, 844, 854, 859, 861, 862, 863, 885], "slice": [71, 84, 88, 94, 95, 107, 112, 162, 343, 384, 393, 482, 505, 508, 509, 568, 569, 571, 597, 646, 651, 658, 664, 747, 782, 865, 884], "inexact": [71, 94, 361, 387, 393, 508], "largest": [71, 88, 94, 180, 183, 391, 393, 462, 508, 510, 647, 654, 695, 704], "take_along_axi": [71, 94, 393], "arr": [71, 72, 91, 94, 188, 393, 482, 505, 509, 593, 647, 850, 851], "top_k": [71, 94, 393], "sort": [71, 82, 88, 94, 105, 117, 214, 307, 391, 393, 402, 444, 510, 531, 545, 648, 649, 654, 662, 689, 690, 704, 705, 769, 773, 774, 775, 798, 838, 849, 864, 866], "trim_zero": [71, 94, 393], "fb": [71, 94, 393, 511], "front": [71, 94, 393, 511, 862, 870, 884], "unflatten": [71, 94, 393], "unfolded_tensor": [71, 393, 513], "unique_consecut": [71, 94, 393], "vsplit": [71, 94, 393], "vertic": [71, 94, 393, 515, 516, 561, 651, 841], "_arraywithnormsexperiment": [71, 116], "varianc": [71, 84, 94, 107, 396, 517, 519, 664, 786, 811, 815], "nsc": [71, 94, 396, 517, 518, 519, 815], "braodcast": [71, 94, 396, 517], "running_mean": [71, 94, 396, 517, 519, 815], "running_var": [71, 94, 396, 517, 519, 815], "nc": [71, 94, 396, 517, 518, 519, 815], "group_norm": [71, 94, 396], "num_group": [71, 94, 396, 518], "instance_norm": [71, 94, 396], "l1_normal": [71, 94, 396], "33333334": [71, 94, 313, 382, 396, 520, 523, 557, 633, 651, 652, 653, 654, 675, 711], "33333337": [71, 152, 396, 520, 633, 646, 652], "28571439": [71, 396, 520], "l2_normal": [71, 94, 396, 523], "l2": [71, 76, 99, 110, 111, 396, 521, 523, 654, 711, 812, 848], "44721359": [71, 94, 396, 521, 523], "89442718": [71, 94, 396, 521, 523, 557, 651], "lp_normal": [71, 94, 396], "lp": [71, 396, 523], "_arraywithrandomexperiment": [71, 116], "bernoulli": [71, 94, 390, 397, 414, 415, 416], "event": [71, 94, 397, 524, 865], "parameter": [71, 80, 94, 103, 397, 524, 525, 527, 528, 660, 758, 760, 761], "odd": [71, 94, 293, 393, 397, 499, 524, 649, 828, 838, 844], "drawn": [71, 80, 94, 103, 397, 524, 525, 526, 527, 528, 660, 758, 759, 760, 761, 796, 797, 798, 811, 865], "dirichlet": [71, 94, 397], "10598304": [71, 397, 526], "21537054": [71, 397, 526], "67864642": [71, 397, 526], "48006698": [71, 397, 526], "07472073": [71, 397, 526], "44521229": [71, 397, 526], "55479872": [71, 397, 526], "05426367": [71, 397, 526], "39093761": [71, 397, 526], "19531053": [71, 397, 526], "51675832": [71, 397, 526], "28793114": [71, 397, 526], "12315625": [71, 397, 526], "29823365": [71, 397, 526], "5786101": [71, 397, 526], "15564976": [71, 397, 526], "50542368": [71, 397, 526], "33892656": [71, 397, 526], "1325352": [71, 397, 526], "44439589": [71, 397, 526], "42306891": [71, 397, 526], "gamma": [71, 79, 94, 102, 357, 369, 387, 397, 402, 542, 659, 757], "lam": [71, 94, 397, 528], "_arraywithsearchingexperiment": [71, 116], "unravel_index": [71, 94, 398], "unravel": [71, 94, 398, 529], "_arraywithsetexperiment": [71, 116], "_arraywithsortingexperiment": [71, 116], "lexsort": [71, 94, 400], "indirectli": [71, 94, 400, 531], "statist": [71, 94, 109, 393, 499, 815, 832, 839, 850, 865, 866, 884], "_arraywithstatisticalexperiment": [71, 116], "bincount": [71, 94, 402], "minlength": [71, 94, 402, 536], "corrcoef": [71, 94, 402], "rowvar": [71, 94, 402, 537, 538], "relationship": [71, 94, 537, 811, 864], "cov": [71, 94, 402], "ddof": [71, 94, 402, 538], "fweight": [71, 94, 402, 538], "aweight": [71, 94, 402, 538], "overridden": [71, 94, 402, 538, 816, 845], "assign": [71, 94, 111, 402, 538, 839, 841, 846, 850, 861, 864], "covari": [71, 94, 402, 538], "cummax": [71, 94, 402], "exclus": [71, 72, 84, 88, 94, 95, 107, 140, 391, 402, 460, 539, 540, 580, 581, 584, 646, 651, 660, 664, 759, 777, 778, 836, 848, 850, 858, 870], "cumul": [71, 84, 94, 107, 402, 539, 540, 664, 777, 778], "uint64": [71, 84, 177, 182, 184, 185, 195, 197, 200, 402, 539, 540, 647, 664, 777, 778, 783, 785, 796, 797, 850, 865, 870], "uint16": [71, 84, 172, 177, 182, 183, 192, 402, 539, 540, 647, 664, 777, 778, 783, 785, 796, 797, 850, 862, 865, 870], "uint32": [71, 84, 177, 182, 183, 184, 206, 402, 539, 540, 647, 664, 777, 778, 783, 785, 796, 797, 850, 865, 870], "cummin": [71, 94, 402], "histogram": [71, 94, 402], "extend_lower_interv": [71, 94, 402, 541], "extend_upper_interv": [71, 94, 402, 541], "densiti": [71, 94, 402, 541], "monoton": [71, 94, 402, 541], "rightmost": [71, 94, 402, 541], "c1": [71, 94, 402, 541, 848], "ff": [71, 94, 402, 541], "c_": [71, 94, 112, 402, 541], "igamma": [71, 94, 402], "incomplet": [71, 94, 402, 542, 841], "3614": [71, 94, 402, 542], "2085": [71, 94, 402, 542], "median": [71, 94, 393, 402, 499, 545], "nanmean": [71, 94, 402], "6666666666666665": [71, 94, 402, 544], "nanmedian": [71, 94, 402], "overwrite_input": [71, 94, 402, 545], "treat": [71, 88, 94, 117, 293, 371, 387, 393, 396, 402, 509, 522, 545, 547, 649, 793, 860, 865], "undefin": [71, 94, 393, 402, 403, 499, 545, 549, 850, 854, 860], "nanmin": [71, 94, 402], "nanprod": [71, 94, 402], "Not": [71, 94, 371, 387, 391, 402, 446, 547, 644, 846, 854, 863, 872], "quantil": [71, 94, 402], "inclus": [71, 94, 140, 402, 548, 646, 660, 759, 834, 846, 861, 868], "midpoint": [71, 94, 402, 548], "surround": [71, 94, 402, 548, 868], "whichev": [71, 94, 402, 548], "_arraywithutilityexperiment": [71, 116], "optional_get_el": [71, 94, 403], "empti": [71, 72, 84, 88, 95, 107, 140, 393, 403, 499, 549, 556, 593, 646, 651, 654, 658, 664, 665, 708, 711, 752, 782, 783, 785, 787, 788, 839, 840, 845, 847, 850, 851, 861], "_arraywithgener": [72, 116], "all_equ": [72, 95, 651], "equality_matrix": [72, 95, 550, 651], "array_equ": [72, 95, 651], "assert_supports_inplac": [72, 95, 651], "ivybackendexcept": [72, 95, 554, 578, 651, 829, 845, 851, 854, 855], "clip_matrix_norm": [72, 95, 651], "894": [72, 95, 556, 557, 651, 659, 757], "clip_vector_norm": [72, 95, 651], "default_v": [72, 560, 651], "catch_except": [72, 560, 651], "rev": [72, 560, 651], "with_cal": [72, 560, 651], "catch": [72, 560, 651, 859, 865], "einops_rearrang": [72, 95, 651], "axes_length": [72, 95, 561, 562, 563, 651], "arrang": [72, 561, 651], "rearrang": [72, 95, 561, 563, 651, 864], "einops_reduc": [72, 95, 651, 850], "einops_repeat": [72, 95, 651], "fourier_encod": [72, 95, 651], "max_freq": [72, 95, 565, 651], "oppos": [72, 95, 565, 651, 850], "geometr": [72, 95, 565, 651, 654, 709], "0000000e": [72, 95, 565, 651], "2246468e": [72, 95, 565, 651], "4492936e": [72, 565, 651], "6739404e": [72, 95, 565, 651], "batch_dim": [72, 95, 568, 569, 651, 819], "gather_nd": [72, 95, 651], "get_num_dim": [72, 95, 651], "as_arrai": [72, 95, 572, 606, 651, 819], "has_nan": [72, 95, 651], "include_inf": [72, 95, 574, 629, 651], "inplace_decr": [72, 95, 651], "decrement": [72, 95, 576, 651], "inplace_incr": [72, 95, 651], "increment": [72, 95, 577, 651, 841, 884], "inplace_upd": [72, 95, 596, 651, 809, 861], "ensure_in_backend": [72, 95, 578, 651, 825, 861], "keep_input_dtyp": [72, 95, 578, 651, 825, 861], "is_arrai": [72, 95, 651, 861, 862], "is_ivy_arrai": [72, 95, 651, 861], "is_ivy_contain": [72, 651], "is_native_arrai": [72, 95, 191, 581, 647, 651], "isin": [72, 95, 651], "test_el": [72, 95, 585, 651], "assume_uniqu": [72, 95, 585, 651], "invert": [72, 95, 246, 585, 649, 651, 654, 696], "scatter_flat": [72, 95, 651], "occupi": [72, 180, 183, 592, 593, 647, 651], "scatter_nd": [72, 95, 651, 868], "stable_divid": [72, 95, 651, 858], "denomin": [72, 79, 95, 102, 599, 608, 622, 651, 659, 757, 815, 858, 867, 872], "min_denomin": [72, 95, 599, 608, 622, 651, 867], "_min_denomin": [72, 608, 651], "stable_pow": [72, 95, 651], "min_bas": [72, 95, 598, 609, 621, 651, 815, 867], "stabl": [72, 83, 95, 106, 162, 343, 350, 351, 384, 387, 400, 531, 598, 599, 608, 609, 621, 622, 646, 651, 663, 773, 776, 798, 840, 846, 850, 862, 867, 870, 872], "00004": [72, 95, 609, 651], "00008": [72, 95, 609, 651], "00004000e": [72, 609], "56002560e": [72, 609], "60001200e": [72, 609], "09602048e": [72, 609], "supports_inplace_upd": [72, 95, 651], "to_fil": 72, "fid": 72, "sep": 72, "format_": 72, "recov": [72, 854, 862], "to_scalar": [72, 95, 651], "value_is_nan": [72, 95, 651], "_arraywithgradi": [73, 116], "adam_step": [73, 96, 652], "mw": [73, 96, 631, 632, 652], "vw": [73, 96, 631, 632, 652], "beta1": [73, 96, 552, 631, 632, 637, 651, 652, 816], "beta2": [73, 96, 552, 631, 632, 637, 651, 652, 816], "epsilon": [73, 76, 77, 96, 99, 100, 552, 631, 632, 637, 651, 652, 654, 655, 697, 700, 713, 714, 715, 808, 813, 815, 816, 848, 858, 861], "dc": [73, 96, 631, 632, 635, 637, 638, 639, 652], "dw": [73, 96, 631, 632, 635, 637, 638, 639, 652], "forget": [73, 96, 631, 632, 637, 652, 816, 833, 850], "dcdw": [73, 96, 631, 632, 635, 637, 638, 652], "adam_step_delta": [73, 96, 631, 652], "2020105": [73, 631, 652], "22187898": [73, 631, 652], "24144873": [73, 631, 652], "10000002": [73, 107, 311, 382, 631, 781], "00300002": [73, 631], "00800002": [73, 631], "adam_upd": [73, 96, 652], "mw_tm1": [73, 96, 632, 637, 652], "vw_tm1": [73, 96, 632, 637, 652], "ws_new": [73, 96, 632, 637, 638, 639, 652], "updated_weight": [73, 96, 632, 652], "92558753": [73, 632], "92558873": [73, 632, 652], "92558718": [73, 632, 652], "00000063e": [73, 96, 632, 652], "00000016e": [73, 96, 632, 652], "00000086e": [73, 96, 632, 652], "gradient_descent_upd": [73, 96, 652, 657, 735, 736, 737], "descent": [73, 96, 635, 652, 816, 884], "new_weight": [73, 96, 635, 637, 638, 652], "lamb_upd": [73, 96, 652], "max_trust_ratio": [73, 96, 637, 652, 816], "decay_lambda": [73, 96, 637, 638, 652, 816], "trust": [73, 96, 637, 652, 816], "ratio": [73, 96, 637, 652, 816], "decai": [73, 96, 637, 638, 652, 816], "lamb": [73, 96, 637, 652, 816], "784": [73, 637, 652], "lars_upd": [73, 96, 652], "lar": [73, 96, 638, 652, 816], "34077978": [73, 638, 652], "78025991": [73, 638, 652], "56051969": [73, 638, 652], "78026009": [73, 638, 652], "56051981": [73, 638, 652], "12103939": [73, 638, 652], "optimizer_upd": [73, 96, 652], "effective_grad": [73, 96, 639, 652], "3e": [73, 96, 639, 652], "preserve_typ": [73, 96, 641, 652], "_arraywithimag": [74, 116], "_arraywithlay": [75, 116], "conv1d": [75, 98, 653, 812, 825], "filter_format": [75, 98, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674], "channel_last": [75, 98, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674, 796], "x_dilat": [75, 98, 653, 666, 667, 669, 670, 671, 673], "d_out": [75, 98, 390, 407, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674], "channel_first": [75, 98, 653, 666, 667, 668, 669, 670, 671, 672, 673, 674], "wio": [75, 653, 666, 667, 668, 673], "conv1d_transpos": [75, 98, 653], "output_shap": [75, 98, 653, 666, 668, 670, 672, 674, 812], "iow": [75, 98, 653, 668], "woi": [75, 98, 653, 668], "fh": [75, 98, 653, 658, 666, 669, 670, 671, 672, 673, 674, 675, 750], "hwio": [75, 653, 666, 667, 669, 673], "conv2d_transpos": [75, 98, 653], "iohw": [75, 98, 653, 670], "hwoi": [75, 98, 653, 670], "conv3d": [75, 98, 653, 672, 812, 825], "conv3d_transpos": [75, 98, 653, 674], "iodhw": [75, 98, 653, 672, 674], "dhwoi": [75, 98, 653, 672, 674], "depthwise_conv2d": [75, 98, 653], "randint": [75, 80, 82, 98, 103, 660, 662, 675, 679, 769, 850, 880], "noise_shap": [75, 98, 653, 676], "42857146": [75, 653, 676], "85714293": [75, 653, 676], "28571415": [75, 98, 653, 676], "71428585": [75, 98, 653, 676], "14285755": [75, 98, 653, 676], "5714283": [75, 653, 676], "4285717": [75, 98, 653, 676], "8571434": [75, 98, 653, 676], "2857151": [75, 653, 676], "dropout1d": [75, 98, 390, 415], "dropout2d": [75, 98, 390], "dropout3d": [75, 98, 390], "outer_batch_shap": [75, 98, 653, 677], "inner_batch_shap": [75, 98, 653, 677], "lstm_updat": [75, 98, 653, 870], "init_h": [75, 98, 653, 679, 870], "init_c": [75, 98, 653, 679, 870], "recurrent_kernel": [75, 98, 653, 679, 870], "recurrent_bia": [75, 98, 653, 679, 870], "hidden": [75, 98, 653, 678, 679, 812, 847, 854, 870], "recurr": [75, 94, 98, 390, 436, 653, 679, 870, 884], "timestep": [75, 94, 98, 390, 436, 653, 678, 679, 680, 812, 870], "h_i": [75, 98, 679], "c_i": [75, 98, 679], "rc": [75, 98, 679], "multi_head_attent": [75, 98, 653, 861], "num_head": [75, 98, 653, 680, 812], "in_proj_weight": [75, 98, 653, 680], "q_proj_weight": [75, 98, 653, 680], "k_proj_weight": [75, 98, 653, 680], "v_proj_weight": [75, 98, 653, 680], "out_proj_weight": [75, 98, 653, 680], "in_proj_bia": [75, 98, 653, 680], "out_proj_bia": [75, 98, 653, 680], "is_caus": [75, 98, 653, 680, 683], "key_padding_mask": [75, 98, 653, 680], "bias_k": [75, 98, 653, 680], "bias_v": [75, 98, 653, 680], "static_k": [75, 98, 653, 680], "static_v": [75, 98, 653, 680], "add_zero_attn": [75, 98, 653, 680], "return_attention_weight": [75, 98, 653, 680], "average_attention_weight": [75, 98, 653, 680], "scaled_dot_product_attent": [75, 98, 653], "dropout_p": [75, 98, 653, 683], "num_queri": [75, 98, 653, 683], "feat_dim": [75, 98, 653, 683], "num_kei": [75, 98, 653, 683], "causal": [75, 98, 653, 680, 683], "attent": [75, 98, 653, 680, 683, 812, 841, 845], "29999995": [75, 311, 312, 322, 382, 390, 434, 653, 662, 683, 770], "19994521": [75, 653, 683], "09994531": [75, 653, 683], "30000019": [75, 393, 483, 653, 683], "_arraywithlinearalgebra": [76, 116], "choleski": [76, 99, 654, 861], "625": [76, 94, 363, 654, 684], "vif": [76, 99, 685], "det": [76, 99, 654, 702, 849], "axis1": [76, 78, 99, 101, 654, 656, 688, 708, 731], "axis2": [76, 99, 654, 688, 708], "eigh": [76, 99, 391, 444, 654, 689], "uplo": [76, 99, 654, 690, 691], "eigvalsh": [76, 99, 654], "array_lik": [76, 99, 390, 392, 393, 435, 468, 469, 473, 474, 505, 654, 692, 699, 828], "203": [76, 93, 244, 654, 659, 692, 757], "233": [76, 654, 692], "inv": [76, 99, 654], "transpose_a": [76, 99, 654, 694], "transpose_b": [76, 99, 654, 694], "adjoint_a": [76, 99, 654, 694], "adjoint_b": [76, 99, 654, 694], "matrix_norm": [76, 99, 654], "ord": [76, 99, 654, 695, 711], "fro": [76, 99, 392, 468, 654, 695], "nuc": [76, 99, 654, 695], "performingth": [76, 695], "matrix_pow": [76, 99, 654], "matrix_rank": [76, 99, 654], "hermitian": [76, 99, 391, 444, 445, 654, 689, 690, 691, 697, 704], "largest_singular_valu": [76, 99, 654, 697, 700], "defici": [76, 654, 697], "matrix_transpos": [76, 99, 654], "pinv": [76, 99, 654], "pseudo": [76, 99, 654, 700, 860], "99999988": [76, 99, 654, 700], "qr": [76, 99, 654, 863], "12309149": [76, 654, 701], "90453403": [76, 654, 701], "40824829": [76, 654, 701], "49236596": [76, 654, 701], "30151134": [76, 654, 701], "81649658": [76, 654, 701], "86164044": [76, 654, 701], "12403841e": [76, 654, 701], "60113630e": [76, 654, 701], "10782342e": [76, 654, 701], "04534034e": [76, 654, 701], "80906807e": [76, 654, 701], "88178420e": [76, 99, 654, 691, 701], "slogdet": [76, 99, 654], "logabsdet": [76, 99, 654, 702], "natur": [76, 99, 258, 276, 277, 278, 279, 298, 369, 387, 649, 654, 702, 845, 852, 854, 863], "098611": [76, 654, 702], "full_matric": [76, 99, 654, 704], "svf": [76, 704], "reconstructed_x": [76, 654, 704], "svdval": [76, 99, 654], "tensorsolv": [76, 99, 654], "vander": [76, 99, 654], "vandermond": [76, 99, 654, 709], "vecdot": [76, 99, 654], "vector_norm": [76, 99, 654], "manhattan": [76, 99, 654, 711], "euclidean": [76, 99, 111, 112, 654, 711], "7416575": [76, 99, 654, 711], "vector_to_skew_symmetric_matrix": [76, 99, 654], "_arraywithloss": [77, 116], "binary_cross_entropi": [77, 100, 655, 849], "pos_weight": [77, 100, 655, 713], "crossentropi": [77, 100, 655, 713], "26765382": [77, 655, 713], "34657359": [77, 655, 714], "sparse_cross_entropi": [77, 100, 655], "07438118": [77, 100, 715], "11889165": [77, 715], "_arraywithmanipul": [78, 116], "x_min": [78, 101, 656, 719, 870], "x_max": [78, 101, 656, 719, 870], "before_1": [78, 101, 393, 499, 656, 721, 734], "after_1": [78, 101, 393, 499, 656, 721, 734], "before_n": [78, 101, 393, 499, 656, 721, 734], "after_n": [78, 101, 393, 499, 656, 721, 734], "repetit": [78, 101, 656, 725, 732, 868], "flat": [78, 88, 101, 398, 529, 592, 651, 656, 725], "allowzero": [78, 101, 656, 726], "remain": [78, 81, 94, 101, 104, 238, 255, 256, 262, 270, 271, 288, 291, 297, 299, 390, 414, 415, 416, 435, 649, 656, 658, 661, 726, 744, 767, 828, 840, 841, 849, 852, 854, 858, 866, 868, 872], "roll": [78, 101, 656, 857], "shift": [78, 90, 101, 117, 151, 162, 247, 249, 343, 384, 646, 649, 656, 727, 840, 841, 851, 852, 857, 864], "restor": [78, 101, 656, 727, 856], "num_or_size_split": [78, 88, 101, 656, 728, 870], "with_remaind": [78, 88, 101, 656, 728], "squeezabl": [78, 656, 729], "swapax": [78, 101, 656], "axis0": [78, 101, 656, 731], "swap_ax": [78, 731], "swap": [78, 101, 656, 731, 822, 879], "tile": [78, 95, 101, 563, 656], "unpack": [78, 101, 656, 733, 863, 865], "zero_pad": [78, 101, 656], "_arraywithnorm": [79, 116], "layer_norm": [79, 102, 659], "normalized_idx": [79, 102, 659, 757], "new_std": [79, 102, 659, 757, 815], "learnabl": [79, 102, 653, 657, 659, 678, 737, 757, 812, 815], "0976": [79, 659, 757], "3452": [79, 659, 757], "2740": [79, 659, 757], "1047": [79, 659, 757], "5886": [79, 659, 757], "2732": [79, 659, 757], "7696": [79, 659, 757, 796], "7024": [79, 659, 757], "2518": [79, 659, 757], "826": [79, 659, 757], "178": [79, 659, 757], "981": [79, 659, 757], "831": [79, 659, 757], "421": [79, 659, 757], "_arraywithrandom": [80, 116], "multinomi": [80, 103, 397, 526, 660], "population_s": [80, 103, 660, 758], "num_sampl": [80, 103, 660, 758], "unnorm": [80, 103, 660, 758, 865], "popul": [80, 84, 88, 103, 107, 660, 664, 758, 784, 786, 850, 851, 861, 865, 870], "draw": [80, 103, 397, 524, 526, 528, 660, 758, 760, 761, 796, 797, 798, 799, 804, 811, 839, 844, 863, 865], "half": [80, 103, 140, 302, 646, 649, 660, 759, 761, 837, 855, 868], "235": [80, 760], "float16": [80, 91, 103, 149, 172, 174, 175, 180, 182, 361, 387, 646, 647, 654, 711, 760, 761, 796, 797, 837, 850, 855, 862, 865], "807": [80, 760], "_arraywithsearch": [81, 116], "select_last_index": [81, 104, 661, 764, 765], "occurr": [81, 393, 402, 514, 536, 661, 662, 764, 765, 769], "argmin": [81, 104, 661], "output_dtyp": [81, 104, 661, 765], "argwher": [81, 104, 661], "nonzero": [81, 104, 112, 236, 237, 238, 241, 244, 253, 255, 258, 260, 262, 288, 301, 306, 649, 661], "as_tupl": [81, 104, 661, 767], "fewer": [81, 104, 661, 767], "_arraywithset": [82, 116], "unique_al": [82, 105, 662], "by_valu": [82, 105, 662, 769], "inverse_indic": [82, 105, 393, 514, 662, 769, 771], "unique_count": [82, 105, 662], "unique_invers": [82, 105, 662], "unique_valu": [82, 105, 662], "admonit": [82, 772], "dask": [82, 662, 769, 770, 771, 772], "difficult": [82, 662, 769, 770, 771, 772, 841, 844, 850, 865, 872], "omit": [82, 298, 649, 662, 769, 770, 771, 772, 857, 861, 862], "x_i": [82, 84, 93, 112, 235, 236, 237, 240, 241, 242, 244, 246, 251, 252, 253, 258, 260, 261, 268, 269, 270, 271, 272, 276, 277, 278, 279, 283, 290, 295, 298, 299, 300, 301, 302, 303, 305, 306, 308, 350, 351, 353, 374, 387, 649, 662, 664, 769, 770, 771, 772, 780, 781, 782, 784, 785, 786, 811, 853], "x_j": [82, 662, 769, 770, 771, 772], "typeerror": [82, 105, 662, 772], "_arraywithsort": [83, 116], "stabil": [83, 106, 608, 609, 651, 663, 773, 776, 850, 860, 866, 868], "msort": [83, 106, 663], "searchsort": [83, 106, 663, 797], "sorter": [83, 106, 663, 775], "ret_dtyp": [83, 106, 663, 775], "_arraywithstatist": [84, 116], "cumprod": [84, 107, 664, 862, 870], "cumsum": [84, 107, 664, 850], "einsum": [84, 107, 664], "equat": [84, 94, 107, 329, 384, 391, 461, 654, 664, 703, 779, 796, 827, 849, 884], "operand": [84, 94, 98, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 269, 270, 271, 276, 277, 278, 279, 280, 288, 291, 293, 297, 298, 299, 300, 301, 302, 305, 306, 308, 350, 351, 374, 378, 387, 388, 390, 433, 649, 654, 664, 702, 708, 779, 780, 782, 783, 785, 827, 828, 845, 848, 853, 862], "contract": [84, 654, 664, 706, 779, 828], "seq": [84, 664, 779, 796], "ii": [84, 107, 664, 779, 841], "jk": [84, 664, 779, 828], "ik": [84, 664, 779, 828], "126": [84, 124, 294, 643, 649, 654, 664, 696, 779], "510": [84, 664, 779], "special": [84, 99, 111, 112, 116, 117, 235, 236, 237, 238, 240, 241, 242, 243, 244, 251, 252, 253, 255, 256, 258, 260, 261, 262, 269, 270, 271, 276, 277, 278, 279, 280, 283, 288, 291, 293, 297, 298, 299, 300, 301, 302, 305, 306, 308, 350, 351, 374, 387, 649, 654, 664, 702, 708, 780, 781, 782, 783, 784, 785, 786, 796, 797, 798, 799, 804, 811, 839, 842, 844, 845, 847, 849, 852, 853, 854, 857, 861, 863, 864, 865, 866, 868, 884, 885], "arithmet": [84, 107, 249, 255, 288, 649, 664, 781, 862], "propag": [84, 249, 350, 351, 387, 649, 664, 780, 781, 782, 784, 785, 786, 860], "overflow": [84, 107, 238, 255, 262, 649, 654, 664, 702, 781, 785, 838, 850], "04999995": [84, 781], "freedom": [84, 107, 664, 784, 786, 846], "constitut": [84, 107, 664, 784, 786, 858, 870, 885], "commonli": [84, 107, 664, 784, 786, 854, 858, 860], "81649661": [84, 664, 784], "6666665": [84, 786], "667": [84, 95, 255, 557, 608, 649, 651, 786], "_arraywithutil": [85, 116], "logic": [85, 108, 219, 255, 256, 282, 283, 284, 288, 291, 648, 649, 665, 787, 788, 839, 845, 849, 850, 851, 854, 858, 859, 860, 861, 862, 864, 865, 868, 879, 881], "AND": [85, 108, 245, 256, 282, 649, 665, 787], "OR": [85, 108, 248, 284, 291, 649, 665, 788, 840, 841, 860], "_wrap_funct": [86, 109, 847, 858, 859], "function_nam": [86, 109, 839, 866], "new_funct": [86, 109, 847], "add_ivy_array_instance_method": 86, "cl": [86, 109], "moduletyp": [86, 109, 879, 880, 882], "toi": [86, 109], "arrayexampl": 86, "hasattr": [86, 109], "_containerwithactiv": [87, 117], "dict_in": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "queue": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 602, 625, 651, 867], "queue_load_s": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "container_combine_method": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "list_join": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "queue_timeout": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117, 602, 625, 651, 867], "print_limit": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "key_length_limit": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "print_ind": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "print_line_spac": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "ivyh": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "default_key_color": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "keyword_color_dict": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "rebuild_child_contain": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "types_to_iteratively_nest": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "alphabetical_kei": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "dynamic_backend": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 117, 813, 814, 846, 867], "build_cal": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 117], "containerbas": [87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 848], "_static_gelu": 87, "key_chain": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 178, 180, 183, 186, 187, 188, 190, 192, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 332, 333, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 375, 376, 377, 378, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 486, 495, 497, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 519, 520, 521, 523, 525, 530, 531, 538, 539, 540, 541, 548, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788], "to_appli": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 178, 180, 183, 186, 187, 188, 190, 192, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 332, 333, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 375, 376, 377, 378, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 433, 434, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 486, 495, 497, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 519, 520, 521, 523, 525, 530, 531, 538, 539, 540, 541, 548, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 658, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788], "prune_unappli": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 178, 180, 183, 186, 187, 188, 190, 192, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 332, 333, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 375, 376, 377, 378, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 433, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 486, 495, 497, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 519, 520, 521, 523, 525, 530, 531, 538, 539, 540, 541, 548, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 658, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 751, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788], "map_sequ": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 142, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 164, 167, 168, 169, 170, 178, 180, 183, 186, 187, 188, 190, 192, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 328, 329, 332, 333, 343, 344, 348, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 375, 376, 377, 378, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 426, 427, 428, 429, 433, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 455, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 486, 495, 497, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 516, 517, 518, 519, 520, 521, 523, 525, 530, 531, 538, 539, 540, 541, 548, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 667, 668, 669, 670, 671, 672, 675, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788], "prune": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 124, 125, 126, 127, 128, 129, 130, 131, 132, 149, 151, 156, 158, 164, 168, 170, 183, 187, 188, 195, 229, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 324, 325, 326, 328, 349, 350, 351, 352, 353, 355, 357, 365, 366, 372, 374, 376, 377, 378, 414, 415, 416, 434, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 483, 484, 506, 508, 509, 510, 512, 517, 519, 520, 521, 523, 525, 538, 539, 540, 541, 550, 553, 554, 556, 557, 561, 562, 563, 564, 565, 568, 569, 572, 574, 576, 577, 578, 580, 581, 584, 592, 593, 607, 608, 609, 611, 613, 615, 616, 629, 635, 641, 658, 667, 668, 669, 670, 676, 677, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 699, 701, 702, 708, 713, 714, 715, 719, 723, 726, 727, 728, 729, 730, 733, 734, 751, 752, 753, 754, 758, 759, 760, 761, 763, 766, 769, 770, 771, 772, 773, 777, 778, 781, 783, 784, 786, 787, 788, 794, 797, 849], "static_gelu": 87, "046": 87, "_static_hardswish": 87, "_static_leaky_relu": 87, "static_leaky_relu": 87, "38999999": [87, 94, 126, 310, 311, 382], "_static_log_softmax": 87, "static_log_softmax": 87, "371": [87, 127], "_static_mish": 87, "static_mish": 87, "30883577": [87, 128, 643], "28903052": [87, 128, 643], "10714479": [87, 128, 643], "_static_relu": 87, "static_relu": 87, "_static_sigmoid": 87, "static_sigmoid": 87, "2689414": [87, 130, 131, 643], "7310586": [87, 130, 131, 643], "88079703": [87, 130, 643], "62245935": [87, 130], "4750208": [87, 130], "_static_softmax": 87, "static_softmax": 87, "72844321": [87, 131], "19852395": [87, 131], "07303288": [87, 131], "_static_softplu": 87, "revert": [87, 132, 643], "static_softplu": 87, "53499615": 87, "42036411": 87, "948": [87, 132, 658, 738], "dictionari": [88, 105, 117, 227, 617, 633, 648, 651, 652, 772, 791, 793, 828, 845, 849, 850, 858, 862, 863, 872], "asynchron": [88, 117, 884], "wait": [88, 117, 602, 651, 839, 841, 849, 862], "arriv": [88, 117, 602, 651, 868], "cont_list_join": [88, 117], "whitespac": [88, 117], "indent": [88, 117], "newlin": [88, 117, 853], "termin": [88, 117, 840, 841, 848, 855, 856], "constructor": [88, 117, 552, 651, 793, 809, 817, 850, 851, 853], "kept": [88, 117, 657, 735, 736, 841, 861, 866], "encount": [88, 117, 812, 837, 839, 850, 854, 855, 865], "node": [88, 95, 117, 554, 564, 611, 658, 748, 749, 811, 821, 825, 847, 848, 862, 879, 880, 885], "alphabet": [88, 117], "__setitem__": [88, 393, 508, 845, 848], "_cont_at_key_chains_input_as_dict": 88, "current_chain": 88, "ignore_key_error": 88, "_cont_at_key_chains_input_as_seq": 88, "_cont_call_static_method_with_flexible_arg": 88, "static_method": 88, "kw": 88, "self_idx": 88, "_cont_concat_unifi": 88, "_cont_get_dev": 88, "_cont_get_dtyp": 88, "_cont_get_shap": 88, "_cont_ivi": 88, "_cont_mean_unifi": 88, "_1": 88, "_cont_prune_key_chains_input_as_dict": 88, "return_cont": 88, "_cont_prune_key_chains_input_as_seq": 88, "_cont_slice_kei": 88, "key_slic": 88, "_cont_sum_unifi": 88, "_get_queue_item": 88, "cont_all_fals": 88, "assert_is_bool": 88, "cont_all_key_chain": 88, "include_empti": 88, "cont_all_tru": [88, 848], "cont_as_bool": 88, "cont_assert_contains_sub_contain": 88, "sub_cont": 88, "screen": [88, 839, 840], "cont_assert_contains_sub_structur": 88, "check_shap": [88, 819], "cont_assert_ident": 88, "check_typ": 88, "same_arrai": 88, "arrays_equ": 88, "cont_assert_identical_structur": 88, "assert_and_assign": 88, "congruent": 88, "cont_at_key_chain": 88, "ignore_non": 88, "cont_at_kei": 88, "substr": 88, "cont_combin": 88, "duplic": [88, 393, 505, 573, 651, 658, 740, 846, 853, 859, 860, 863], "configur": [88, 227, 648, 658, 751, 840, 841, 847, 849, 850, 855, 856], "container_rightmost": 88, "cont_common_key_chain": 88, "cont_config": 88, "cont_contains_sub_contain": 88, "cont_contains_sub_structur": 88, "cont_copi": 88, "cont_create_if_abs": 88, "noth": [88, 868], "cont_cutoff_at_depth": 88, "depth_cutoff": 88, "cont_cutoff_at_height": 88, "height_cutoff": 88, "cont_deep_copi": [88, 880], "cont_dev": 88, "cont_dev_str": 88, "cont_diff": 88, "diff_kei": 88, "detect_key_diff": 88, "detect_value_diff": 88, "detect_shape_diff": 88, "container0": 88, "cont_dtyp": 88, "cont_duplicate_array_keychain": 88, "cont_find_sub_contain": 88, "sub_cont_to_find": 88, "cont_find_sub_structur": 88, "sub_struc_to_find": 88, "cont_flatten_key_chain": 88, "above_height": 88, "below_depth": 88, "cont_format_key_chain": 88, "format_fn": 88, "cont_from_disk_as_hdf5": 88, "h5_obj_or_filepath": 88, "slice_obj": 88, "disk": [88, 814, 886], "h5py": 88, "filepath": [88, 665, 789, 790, 841, 844], "cont_from_disk_as_json": 88, "json_filepath": 88, "cont_from_disk_as_pickl": 88, "pickle_filepath": 88, "cont_from_flat_list": 88, "flat_list": 88, "hierarchi": [88, 832, 839, 864], "cont_handle_inplac": 88, "prime": [88, 850], "overwritten": [88, 845, 846], "cont_has_kei": 88, "query_kei": 88, "somewher": [88, 849], "cont_has_key_chain": 88, "cont_ident": 88, "cont_identical_array_shap": 88, "cont_identical_config": 88, "cont_identical_structur": 88, "cont_if_exist": 88, "cont_inplace_upd": 88, "cont_ivi": 88, "cont_key_chains_contain": 88, "sub_str": 88, "cont_list_stack": 88, "cont_load": 88, "cont_map": [88, 848], "func": [88, 111, 228, 379, 380, 381, 389, 555, 630, 633, 634, 636, 642, 648, 651, 652, 658, 751, 793, 839, 844, 845, 852, 854, 860], "cont_map_sub_cont": 88, "include_self": 88, "possibli": [88, 613, 651, 796, 865, 872], "cont_max_depth": 88, "cont_multi_map": 88, "map_nest": 88, "assert_ident": 88, "leftmost": [88, 658, 751], "cont_multi_map_in_funct": 88, "cont_num_arrai": 88, "cont_overwrite_at_key_chain": 88, "target_dict": 88, "return_dict": 88, "cont_prune_empti": 88, "keep_non": 88, "cont_prune_key_chain": 88, "key1": [88, 833], "key2": [88, 833], "key3": 88, "cont_prune_key_from_key_chain": 88, "certain": [88, 140, 152, 153, 392, 469, 646, 839, 840, 841, 844, 850, 858, 864, 865, 868, 872, 880, 882], "cont_prune_kei": 88, "cont_prune_keys_from_key_chain": 88, "cont_reduc": 88, "cont_remove_key_length_limit": 88, "cont_remove_print_limit": 88, "cont_reshape_lik": 88, "leading_shap": 88, "cont_restructur": 88, "keep_orig": 88, "old": [88, 840, 846, 861], "cont_restructure_key_chain": 88, "keychain_map": 88, "cont_sav": 88, "cont_set_at_key_chain": 88, "cont_set_at_kei": 88, "cont_shap": [88, 653, 671], "cont_show": 88, "cont_show_sub_contain": 88, "sub_cont_or_keychain": 88, "cont_size_ordered_arrai": 88, "keychain": [88, 94, 313, 352, 477, 478, 479, 509], "cont_slice_kei": 88, "all_depth": 88, "cont_slice_via_kei": 88, "slice_kei": 88, "cont_sort_by_kei": 88, "cont_structural_diff": 88, "cont_to_dict": 88, "cont_to_disk_as_hdf5": 88, "starting_index": 88, "max_batch_s": 88, "cont_to_disk_as_json": 88, "cont_to_disk_as_pickl": 88, "cont_to_flat_list": 88, "cont_to_iter": [88, 848], "leaf_keys_onli": 88, "cont_to_iterator_kei": 88, "cont_to_iterator_valu": 88, "cont_to_json": 88, "cont_to_nested_list": 88, "cont_to_raw": 88, "cont_trim_kei": 88, "cont_try_kc": 88, "cont_unifi": 88, "concatten": [88, 228, 648], "cont_unstack_cont": 88, "dim_siz": 88, "cont_update_config": 88, "cont_with_default_key_color": 88, "cont_with_entries_as_list": 88, "cont_with_ivy_backend": 88, "ivy_backend": [88, 863], "cont_with_key_length_limit": 88, "cont_with_print_ind": 88, "cont_with_print_limit": 88, "cont_with_print_line_spac": 88, "h5_file_s": 88, "shuffle_h5_fil": 88, "split_cont": 88, "_is_json": 88, "_repr": 88, "_containerwithconvers": [89, 117], "_static_to_ivi": 89, "_static_to_n": 89, "_containerwithcr": [90, 117], "_static_arang": 90, "_static_asarrai": 90, "_static_copy_arrai": 90, "_static_empti": 90, "_static_empty_lik": 90, "_static_ey": 90, "n_row": [90, 94, 147, 162, 343, 384, 391, 452, 646], "n_col": [90, 94, 147, 162, 343, 384, 646], "_static_from_dlpack": 90, "_static_ful": 90, "_static_full_lik": 90, "static_full_lik": 90, "2324": [90, 151, 646], "234": [90, 93, 151, 174, 257, 308, 646, 647, 649, 653, 677, 796], "_static_linspac": 90, "_static_logspac": 90, "static_logspac": 90, "15443469": [90, 153], "64158883": [90, 153], "_static_meshgrid": 90, "_static_native_arrai": 90, "_static_one_hot": 90, "static_one_hot": 90, "_static_on": 90, "_static_ones_lik": 90, "_static_tril": 90, "_static_triu": 90, "_static_zero": 90, "_static_zeros_lik": 90, "frombuff": [90, 646], "expos": [90, 149, 558, 646, 651, 818, 833, 849, 870], "x00": [90, 149, 646], "xf0": [90, 149, 646], "x01": [90, 149, 646], "x02": [90, 149, 646], "x03": [90, 149, 646], "x04": [90, 149, 646], "x05": [90, 149], "5443469": [90, 153, 646], "static_frombuff": 90, "static_triu_indic": 90, "triu_indic": [90, 646], "_containerwithdatatyp": [91, 117], "_static_astyp": 91, "718": [91, 93, 167, 284, 647], "618": [91, 93, 167, 284, 647], "static_astyp": 91, "_static_broadcast_arrai": 91, "static_broadcast_arrai": 91, "_static_broadcast_to": 91, "static_broadcast_to": 91, "_static_can_cast": 91, "from_": [91, 170, 647], "static_can_cast": 91, "_static_default_complex_dtyp": 91, "complex_dtyp": [91, 173, 196, 647], "_static_default_float_dtyp": 91, "float_dtyp": [91, 175, 198, 647], "_static_dtyp": 91, "_static_finfo": 91, "inquir": [91, 180, 183], "static_finfo": 91, "55040e": [91, 180, 647], "7976931348623157e": [91, 180, 647], "308": [91, 180, 647, 796, 865], "_static_function_supported_dtyp": 91, "_static_function_unsupported_dtyp": 91, "_static_iinfo": 91, "1800": [91, 183, 647], "1084": 91, "40000": 91, "static_iinfo": 91, "2147483648": [91, 94, 183, 393, 508, 647], "2147483647": [91, 183, 647], "_static_is_bool_dtyp": 91, "dtype_in": [91, 165, 166, 179, 185, 186, 187, 188, 189, 190, 191, 192, 207, 647], "_static_is_complex_dtyp": 91, "is_complex_dtyp": [91, 647, 866], "roughli": [91, 840, 844], "static_is_complex_dtyp": 91, "_static_is_float_dtyp": 91, "static_is_float_dtyp": 91, "_static_is_int_dtyp": 91, "_static_is_uint_dtyp": 91, "_static_result_typ": 91, "static_result_typ": 91, "broadcats": [91, 168], "_containerwithdevic": [92, 117], "_static_dev": 92, "static_dev": 92, "_static_to_devic": 92, "static_to_devic": 92, "contaion": [92, 212], "_containerwithelementwis": [93, 117], "_static_ab": 93, "static_ab": 93, "_static_aco": 93, "static_aco": 93, "_static_acosh": 93, "static_acosh": 93, "_static_add": 93, "static_add": [93, 121], "_static_asin": 93, "static_asin": 93, "524": [93, 240, 649], "412": [93, 98, 240, 649, 658, 738], "_static_asinh": 93, "static_asinh": 93, "_static_atan": 93, "static_atan": 93, "_static_atan2": 93, "static_atan2": 93, "915": [93, 243, 649], "983": [93, 243, 649], "978": [93, 243, 649], "696": [93, 103, 243, 649, 760], "993": [93, 243, 649], "_static_atanh": 93, "static_atanh": 93, "_static_bitwise_and": 93, "static_bitwise_and": 93, "_static_bitwise_invert": 93, "static_bitwise_invert": 93, "_static_bitwise_left_shift": 93, "_static_bitwise_or": 93, "static_bitwise_or": 93, "_static_bitwise_right_shift": 93, "static_bitwise_right_shift": 93, "_static_bitwise_xor": 93, "static_bitwise_xor": 93, "_static_ceil": 93, "static_ceil": 93, "_static_co": 93, "static_co": 93, "_static_cosh": 93, "static_cosh": 93, "_static_deg2rad": 93, "static_deg2rad": 93, "0262": [93, 254, 294, 649], "873": [93, 254, 294, 649], "_static_divid": 93, "static_divid": 93, "_static_equ": 93, "static_equ": 93, "_static_erf": 93, "static_erf": 93, "27632612": [93, 257], "934008": [93, 257, 649], "99999928": [93, 257], "91903949": [93, 257], "_static_exp": 93, "static_exp": 93, "59814835": [93, 258, 649], "4131622": [93, 258], "_static_expm1": 93, "thefunct": [93, 257], "areal": 93, "static_expm1": 93, "71828175": [93, 258, 649], "38905621": [93, 258, 649], "59815216": 93, "_static_floor": 93, "static_floor": 93, "_static_floor_divid": 93, "static_floor_divid": 93, "_static_great": 93, "static_great": 93, "_static_greater_equ": 93, "static_greater_equ": 93, "_static_isfinit": 93, "999999999999": [93, 269, 649], "static_isfinit": 93, "_static_isinf": 93, "static_isinf": 93, "_static_isnan": 93, "static_isnan": 93, "_static_isr": 93, "0j": [93, 94, 157, 158, 236, 237, 238, 241, 244, 253, 258, 260, 272, 276, 278, 295, 299, 301, 302, 306, 353, 387, 646, 649, 654, 702], "23j": [93, 94], "9j": [93, 94], "static_isr": 93, "_static_lcm": 93, "1080": [93, 273], "1550": [93, 273], "130": [93, 273], "_static_less": 93, "static_less": 93, "_static_less_equ": 93, "static_less_equ": 93, "_static_log": 93, "static_log": 93, "_static_log10": 93, "static_log10": 93, "898": [93, 277, 649], "0414": [93, 277, 649], "_static_log1p": 93, "static_log1p": 93, "_static_log2": 93, "static_log2": 93, "_static_logaddexp": 93, "static_logaddexp": 93, "_static_logical_and": 93, "static_logical_and": 93, "_static_logical_not": 93, "static_logical_not": 93, "_static_logical_or": 93, "static_logical_or": 93, "_static_logical_xor": 93, "static_logical_xor": 93, "_static_maximum": 93, "static_maximum": 93, "_static_minimum": 93, "static_minimum": 93, "_static_multipli": 93, "static_multipli": 93, "_static_neg": 93, "static_neg": 93, "_static_not_equ": 93, "static_not_equ": 93, "_static_posit": 93, "static_posit": 93, "_static_pow": 93, "static_pow": 93, "_static_rad2deg": 93, "static_rad2deg": 93, "5160": 93, "10300": [93, 294, 649], "15500": 93, "20600": 93, "2860": [93, 294], "_static_reciproc": 93, "recirpoc": [93, 296], "static_reciproc": 93, "_static_remaind": 93, "static_remaind": 93, "_static_round": 93, "thevfunct": 93, "527": [93, 298, 649], "static_round": 93, "301": [93, 298, 649], "_static_sign": 93, "static_sign": 93, "_static_sin": 93, "static_sin": 93, "757": [93, 300, 649], "959": [93, 260, 300, 649], "279": [93, 300, 390, 412, 422, 556, 649, 651], "_static_sinh": 93, "static_sinh": 93, "835": [93, 301], "347": [93, 301], "721": [93, 301], "_static_sqrt": 93, "static_sqrt": 93, "_static_squar": 93, "static_squar": 93, "_static_subtract": 93, "static_subtract": 93, "_static_tan": 93, "static_tan": 93, "_static_tanh": 93, "static_tanh": 93, "995": [93, 306, 649], "9999": 93, "_static_trapz": 93, "static_trapz": 93, "_static_trunc": 93, "static_trunc": 93, "_static_trunc_divid": 93, "75j": [93, 143, 239, 268, 646], "01317055": [93, 239], "05634501": [93, 239], "115": [93, 239, 294, 649], "3461759": [93, 239], "524111": [93, 239], "644": [93, 240, 649], "305": [93, 98, 240, 649], "351": [93, 254, 294], "00613": [93, 254], "0154": [93, 254], "403": [93, 258], "428772": [93, 258], "649": [93, 260], "865": [93, 260], "metho": [93, 267, 279], "imaginari": [93, 116, 126, 129, 132, 143, 157, 158, 236, 237, 238, 253, 255, 256, 258, 260, 268, 288, 290, 291, 298, 301, 302, 306, 353, 387, 390, 391, 434, 445, 643, 646, 649, 661, 767, 852], "4j": [93, 268, 390, 434, 609, 649, 651], "7j": [93, 94, 272, 295, 353, 387, 649], "956": [93, 278], "08746284": [93, 281], "32192809": [93, 281], "nuner": [93, 288], "413": [93, 294], "335": [93, 94, 295, 353], "345j": [93, 94, 295, 353], "static_angl": 93, "static_exp2": 93, "static_fmin": 93, "static_gcd": 93, "static_imag": 93, "static_logaddexp2": 93, "static_nan_to_num": 93, "static_r": 93, "_containerwithactivationexperiment": [94, 117], "_static_celu": 94, "formlat": 94, "static_celu": 94, "_static_elu": 94, "static_elu": 94, "_static_hardshrink": 94, "hard": [94, 312, 833, 841, 884], "shrinkag": [94, 312, 322, 393, 507], "_static_hardsilu": 94, "20833333": [94, 313, 382], "29166666": [94, 313, 382], "66666669": [94, 117, 313, 382, 396, 523, 633, 652], "66666663": [94, 152, 313, 382, 646], "_static_hardtanh": 94, "3899": 94, "_static_scaled_tanh": 94, "931": 94, "71587813": 94, "88367474": 94, "00376701": [94, 319], "2285642": 94, "99999881": 94, "49999905": 94, "_static_silu": 94, "static_silu": 94, "27777028": [94, 321], "23947507": [94, 321], "0900332": [94, 321], "_static_softshrink": 94, "_static_tanhshrink": 94, "36634541": [94, 324], "02005103": [94, 324], "00262468": [94, 324], "_static_threshold": 94, "389999": [94, 314], "19722462": [94, 315], "84729779": [94, 315], "31326163": [94, 316], "46328258": [94, 316], "51301527": [94, 316], "79813886": [94, 316], "simplywrap": [94, 319], "54939651": [94, 319], "09999998": [94, 319, 631, 652], "09999999": [94, 319], "08336546": [94, 319], "0379949": [94, 319], "22856998": [94, 320], "42028043": [94, 320], "31868932": [94, 320], "static_logit": 94, "static_logsigmoid": 94, "34115386": 94, "64439666": 94, "24115384": 94, "55435526": 94, "07888974": 94, "00741899": 94, "26328245": 94, "00012302": 94, "static_prelu": 94, "static_relu6": 94, "static_selu": 94, "static_thresholded_relu": 94, "_containerwithconversionexperiment": [94, 117], "_containerwithcreationexperiment": [94, 117], "_static_trilu": 94, "blackman": [94, 327, 384], "00770143e": [94, 327], "49229857e": [94, 327], "hamming_window": [94, 384], "ham": [94, 329, 384], "4180": [94, 329], "8180": [94, 329], "hann_window": [94, 384], "hann": [94, 330, 384], "7500": [94, 330], "3455": [94, 330], "9045": [94, 330], "kaiser_bessel_derived_window": [94, 384], "suitabl": [94, 332, 333, 384, 663, 775, 798, 840, 841, 848, 866, 884], "spectral": [94, 332, 333, 384], "analysi": [94, 332, 333, 384, 884, 885], "kaiser": [94, 327, 332, 333, 384], "70710677": [94, 332, 521, 523], "18493208": [94, 332, 384], "9827513": [94, 332, 384], "kaiser_window": [94, 384], "static_kaiser_window": [94, 333], "2049": [94, 333], "8712": [94, 333], "0367": [94, 333, 384], "7753": [94, 333], "static_blackman_window": 94, "static_eye_lik": 94, "static_hamming_window": 94, "static_hann_window": 94, "static_hann": 94, "static_kaiser_bessel_derived_window": 94, "static_mel_weight_matrix": 94, "static_polyv": 94, "static_tril_indic": 94, "static_unsorted_segment_mean": 94, "static_unsorted_segment_min": 94, "static_unsorted_segment_sum": 94, "static_vorbis_window": 94, "vorbis_window": [94, 384], "vorbi": [94, 348, 384], "38268343": [94, 348, 654, 690], "92387953": [94, 348], "14943586": [94, 348, 384], "51644717": [94, 348], "85631905": [94, 348], "98877142": [94, 348], "tril_indic": [94, 384], "_containerwithdata_typeexperiment": [94, 117], "_containerwithdeviceexperiment": [94, 117], "_containerwithelementwiseexperiment": [94, 117], "0003": [94, 349, 654, 693, 796, 799], "0006": [94, 349, 377], "2345j": [94, 353], "5772": [94, 357], "9635": [94, 357], "4228": [94, 357], "9228": [94, 357], "57299206e": [94, 358, 359], "67773480e": [94, 358, 359], "20904985e": [94, 358, 359], "84270084": [94, 358, 359, 387], "99532223": [94, 358, 359], "99997795": [94, 358, 359], "mantissa": [94, 363, 387, 850], "frist": [94, 364, 387], "coord": [94, 364], "6055": [94, 365], "160": [94, 367], "10240": [94, 367], "60000038": [94, 368, 387, 654, 710], "0707": [94, 374, 387], "0579": [94, 374, 387], "static_allclos": 94, "static_amax": 94, "static_amin": 94, "static_binar": 94, "static_conj": 94, "static_copysign": 94, "static_count_nonzero": 94, "static_diff": 94, "static_digamma": 94, "57721537": 94, "96351004": 94, "static_erfc": 94, "15729921": 94, "00467773": [94, 358, 387], "static_erfinv": 94, "static_fix": 94, "static_float_pow": 94, "static_fmax": 94, "static_fmod": 94, "static_frexp": 94, "static_gradi": 94, "static_hypot": 94, "static_isclos": 94, "static_ldexp": 94, "static_lerp": 94, "90000057": [94, 368, 387], "70000076": [94, 368, 387], "55000019": [94, 368, 387], "05000019": [94, 368, 387], "static_modf": 94, "static_nansum": 94, "static_nextaft": 94, "static_signbit": 94, "static_sinc": 94, "636": 94, "090": 94, "070": 94, "057": 94, "static_sparsify_tensor": 94, "static_xlogi": 94, "static_zeta": 94, "0244": [94, 377], "_containerwithgeneralexperiment": [94, 117], "_static_reduc": 94, "static_reduc": 94, "_containerwithgradientsexperiment": [94, 117], "_containerwithimageexperiment": [94, 117], "_containerwithlayersexperiment": [94, 117], "_static_fft": 94, "static_fft": 94, "_static_sliding_window": 94, "673": [94, 412], "0507": [94, 412], "79711437": [94, 390, 412, 422], "94867325": [94, 390, 412, 422], "74089146": [94, 390, 412, 422], "25980937": [94, 390, 412, 422], "64958102": [94, 390, 412, 422], "2442648": [94, 390, 412, 422], "247306": [94, 424], "908323j": [94, 424], "494955": [94, 424], "90395j": [94, 424], "static_adaptive_avg_pool1d": 94, "static_adaptive_avg_pool2d": 94, "static_adaptive_max_pool2d": 94, "static_adaptive_max_pool3d": 94, "static_avg_pool1d": 94, "static_avg_pool2d": 94, "static_avg_pool3d": 94, "static_dct": 94, "253": [94, 301, 649], "515": [94, 660, 760], "467": 94, "static_dft": 94, "static_embed": 94, "static_idct": 94, "93732834": [94, 390, 412], "75048852": [94, 390, 412], "29723358": [94, 390, 422], "6950531": 94, "93914509": 94, "88008738": 94, "18951225": 94, "06697273": [94, 390, 422], "57439804": 94, "68861485": [94, 390, 422], "41308832": [94, 390, 422], "0700836": 94, "2449036": 94, "6711426": 94, "514": 94, "501709": 94, "4924011": 94, "static_ifft": 94, "static_ifftn": 94, "static_interpol": 94, "static_max_pool1d": 94, "static_max_pool2d": 94, "max_pool2dd": 94, "static_max_pool3d": 94, "static_max_unpool1d": 94, "static_rfft": 94, "static_rfftn": 94, "static_rnn": 94, "step_funct": [94, 390, 436], "initial_st": [94, 390, 436, 653, 678], "go_backward": [94, 390, 436], "unrol": [94, 390, 436, 653, 679, 870], "input_length": [94, 390, 436], "zero_output_for_mask": [94, 390, 436], "return_all_output": [94, 390, 436], "rnn": [94, 390, 884], "tempor": [94, 390, 436], "state_s": [94, 390, 436], "while_loop": [94, 390, 436, 645], "otput": [94, 390, 436], "funciton": [94, 390, 436], "static_stft": 94, "_containerwithlinearalgebraexperiment": [94, 117], "933034": [94, 391, 441], "eigenvealu": [94, 444, 689], "xx": [94, 444, 446, 689], "37228107": [94, 444, 689], "3722816": [94, 444, 689], "8245648": [94, 444, 689], "41597357": [94, 444, 689], "56576747": [94, 444, 689], "9093767": [94, 444, 689], "56155": [94, 445], "82842": [94, 445], "450": [94, 451], "static_adjoint": 94, "static_batched_out": 94, "static_cond": 94, "static_diagflat": 94, "static_dot": 94, "static_eig": 94, "static_eigh_tridiagon": 94, "static_eigv": 94, "static_higher_order_mo": 94, "static_initialize_tuck": 94, "static_kron": 94, "kroneck": [94, 391, 450, 451], "static_make_svd_non_neg": 94, "static_matrix_exp": 94, "static_mode_dot": 94, "static_multi_dot": 94, "static_multi_mode_dot": 94, "static_partial_tuck": 94, "static_svd_flip": 94, "static_tensor_train": 94, "static_truncated_svd": 94, "static_tt_matrix_to_tensor": 94, "tt_matrix": [94, 391, 465], "output_tensor": [94, 114, 391, 465], "static_tuck": 94, "_containerwithlossesexperiment": [94, 117], "_static_hinge_embedding_loss": 94, "_static_huber_loss": 94, "static_huber_loss": 94, "0575": [94, 468], "_static_kl_div": 94, "_static_l1_loss": 94, "static_l1_loss": 94, "_static_log_poisson_loss": 94, "static_log_poisson_loss": 94, "_static_poisson_nll_loss": 94, "06446016": 94, "55611551": 94, "30244565": [94, 472], "_static_smooth_l1_loss": 94, "static_smooth_l1_loss": 94, "_static_soft_margin_loss": 94, "3890561": [94, 471], "413159": [94, 471], "06429195": [94, 472], "43333333": [94, 473], "10666666": [94, 473], "_containerwithmanipulationexperiment": [94, 117], "_static_fill_diagon": 94, "_static_put_along_axi": 94, "_static_tak": 94, "69999981": [94, 322, 382, 393, 483, 508], "_static_trim_zero": 94, "_static_unflatten": 94, "_static_unique_consecut": 94, "ary1": [94, 393, 477, 478, 479], "ary2": [94, 393, 477, 478, 479], "broadcast_shap": [94, 120, 393, 796, 798], "static_concat_from_sequ": [94, 484], "30192195": [94, 496], "static_as_strid": 94, "static_atleast_1d": 94, "static_atleast_2d": 94, "static_atleast_3d": 94, "static_broadcast_shap": 94, "static_column_stack": 94, "static_dsplit": 94, "static_dstack": 94, "static_expand": 94, "static_flatten": 94, "static_fliplr": 94, "static_flipud": 94, "static_fold": 94, "static_heavisid": 94, "static_hsplit": 94, "static_hstack": 94, "static_i0": 94, "static_matric": 94, "static_moveaxi": 94, "static_pad": 94, "static_partial_fold": 94, "static_partial_tensor_to_vec": 94, "static_partial_unfold": 94, "static_partial_vec_to_tensor": 94, "static_rot90": 94, "static_soft_threshold": 94, "static_take_along_axi": 94, "static_top_k": 94, "static_unfold": 94, "static_vsplit": 94, "static_vstack": 94, "_containerwithnormsexperiment": [94, 117], "16903085": [94, 521, 523], "50709254": [94, 521, 523], "84515423": [94, 521, 523], "44183609": [94, 521, 523], "56807494": [94, 521, 523], "69431382": [94, 521, 523], "static_batch_norm": 94, "static_group_norm": 94, "static_instance_norm": 94, "static_l1_norm": 94, "static_l2_norm": 94, "static_lp_norm": 94, "12500000": 94, "37500000": 94, "62500000": 94, "27500000": 94, "35000000": 94, "42500000": 94, "0000000": 94, "5000000": 94, "2500000": 94, "_containerwithrandomexperiment": [94, 117], "43643127": [94, 526], "32325703": [94, 526], "24031169": [94, 526], "34251311": [94, 526], "31692529": [94, 526], "3405616": [94, 526], "5319725": [94, 526], "22458365": [94, 526], "24344385": [94, 526], "26588406": [94, 526], "61075421": [94, 526], "12336174": [94, 526], "51142915": [94, 526], "25041268": [94, 526], "23815817": [94, 526], "64042903": [94, 526], "25763214": [94, 526], "10193883": [94, 526], "31624692": [94, 526], "46567987": [94, 526], "21807321": [94, 526], "37677699": [94, 526], "39914594": [94, 526], "22407707": [94, 526], "static_bernoulli": 94, "static_beta": 94, "static_dirichlet": 94, "static_gamma": 94, "static_poisson": 94, "_containerwithsearchingexperiment": [94, 117], "static_unravel_index": 94, "_containerwithsetexperiment": [94, 117], "_containerwithsortingexperiment": [94, 117], "invert_permut": [94, 400], "static_invert_permut": 94, "static_lexsort": [94, 106], "_containerwithstatisticalexperiment": [94, 117], "_static_cummax": 94, "static_cummax": 94, "_static_cummin": 94, "static_cummin": 94, "_static_nanmin": 94, "static_nanmin": 94, "func_nam": [94, 541, 839, 852, 853, 858, 862], "static_bincount": 94, "static_corrcoef": 94, "static_cov": [94, 402, 538], "static_histogram": 94, "static_igamma": 94, "static_lgamma": 94, "static_median": 94, "static_nanmean": 94, "static_nanmedian": 94, "static_nanprod": 94, "static_quantil": 94, "_containerwithutilityexperiment": [94, 117], "static_optional_get_el": 94, "_containerwithgener": [95, 117], "_static_all_equ": 95, "static_all_equ": 95, "_static_array_equ": 95, "a0": [95, 393, 483], "static_array_equ": 95, "_static_assert_supports_inplac": 95, "_static_clip_matrix_norm": 95, "static_clip_matrix_norm": 95, "849": [95, 556, 651], "_static_clip_vector_norm": 95, "static_clip_vector_norm": 95, "_static_einops_rearrang": 95, "static_einops_rearrang": 95, "_static_einops_reduc": 95, "static_einops_reduc": 95, "29333329": [95, 562, 651], "53000069": [95, 562, 651], "39666676": [95, 562, 651], "20666695": [95, 562, 651], "_static_einops_repeat": 95, "static_einops_repeat": 95, "_static_exist": 95, "_static_fourier_encod": 95, "static_fourier_encod": 95, "classivi": [95, 662, 770], "89858720e": 95, "79717439e": 95, "_static_gath": 95, "static_gath": 95, "_static_gather_nd": 95, "static_gather_nd": 95, "_static_get_num_dim": 95, "static_get_num_dim": 95, "_static_has_nan": 95, "leafwis": 95, "static_has_nan": 95, "_static_inplace_decr": 95, "_static_inplace_incr": 95, "_static_inplace_upd": 95, "_static_is_arrai": 95, "static_is_arrai": 95, "_static_is_ivy_arrai": 95, "static_is_ivy_arrai": 95, "_static_is_native_arrai": 95, "static_is_native_arrai": 95, "_static_scatter_flat": 95, "_static_scatter_nd": 95, "static_scatter_nd": 95, "_static_s": 95, "static_s": 95, "_static_stable_divid": 95, "22222222": 95, "11111111": 95, "857": [95, 608, 651], "444": 95, "_static_stable_pow": 95, "00012": [95, 609, 651], "00016": [95, 96, 609, 637, 651, 652], "00001": [95, 609, 651, 796], "00032": [95, 609], "00256": [95, 609], "1679638": [95, 609], "395": [95, 609], "16777383": [95, 609], "_static_supports_inplace_upd": 95, "_static_to_list": 95, "static_to_list": 95, "_static_to_numpi": 95, "static_to_numpi": 95, "_static_to_scalar": 95, "static_to_scalar": 95, "_static_value_is_nan": 95, "452": 95, "static_value_is_nan": 95, "833": [95, 557], "items": [95, 116, 651], "static_isin": 95, "static_items": 95, "static_strid": 95, "425": [95, 629], "_containerwithgradi": [96, 117], "_static_stop_gradi": 96, "static_stop_gradi": 96, "976": [96, 306, 631, 649, 652], "49e": [96, 631, 652], "74e": [96, 631, 652], "95e": [96, 631, 652], "024": [96, 631, 652], "096": [96, 631, 652], "626": [96, 631, 652], "en": [96, 631, 632, 652, 849], "wikipedia": [96, 631, 632, 652], "wiki": [96, 631, 632, 652], "stochastic_gradient_desc": [96, 631, 632, 652], "01099": [96, 632], "01003": [96, 632, 652], "01015": [96, 632, 652], "99936122": [96, 632, 652], "99936116": [96, 632, 652], "99936128": [96, 632, 652], "99936104": [96, 632, 652], "w_new": [96, 635, 652], "708": [96, 637, 652], "445": [96, 637, 652], "6e": [96, 637, 652], "00036": [96, 637, 652], "00049": [96, 637, 652], "layerwis": [96, 638, 652], "01132035": [96, 638, 652], "22264051": [96, 638, 652], "2056601": [96, 638, 652], "1324538": [96, 638, 652], "56490755": [96, 638, 652], "96622658": [96, 638, 652], "90848625": [96, 638, 652], "93616199": [96, 638, 652], "77232409": [96, 638, 652], "_containerwithimag": [97, 117], "_containerwithlay": [98, 117], "_static_conv1d": 98, "static_conv1d": 98, "_static_conv1d_transpos": 98, "static_conv1d_transpos": 98, "112": [98, 654, 664, 668, 699, 779], "_static_conv2d": 98, "ey": [98, 646, 653, 669, 675, 868, 870], "static_conv2d": 98, "_static_conv2d_transpos": 98, "static_conv2d_transpos": 98, "_static_conv3d": 98, "fdfh": [98, 671], "static_conv3d": 98, "_static_conv3d_transpos": 98, "static_conv3d_transpos": 98, "_static_depthwise_conv2d": 98, "static_depthwise_conv2d": 98, "_static_dropout": 98, "static_dropout": 98, "_static_dropout1d": 98, "static_dropout1d": 98, "_static_dropout2d": 98, "_static_dropout3d": 98, "_static_linear": 98, "278": [98, 653, 676, 677], "static_linear": 98, "195": 98, "_static_lstm_upd": 98, "_static_multi_head_attent": 98, "_static_reduce_window": 98, "_static_scaled_dot_product_attent": 98, "static_scaled_dot_product_attent": 98, "39999962": [98, 653, 676, 677], "19999695": [98, 677], "11600018": [98, 677], "88399887": [98, 677], "306": [98, 653, 677], "19999981": [98, 312, 325, 382, 390, 434, 653, 676, 683], "59249449": [98, 653, 683], "68226194": [98, 653, 683], "19603825": [98, 653, 683], "9960382": [98, 653, 683], "26894283": [98, 653, 683], "40236187": [98, 653, 683], "39999437": [98, 653, 683], "59999037": [98, 653, 683], "35046196": [98, 653, 683], "54282808": [98, 653, 683], "39989519": [98, 653, 683], "5998764": [98, 653, 683], "_containerwithlinearalgebra": [99, 117], "_static_choleski": 99, "static_choleski": 99, "577": [99, 654, 684], "707": [99, 654, 684], "static_rol": [99, 101], "_static_cross": 99, "static_cross": 99, "_static_det": 99, "_static_diag": 99, "_static_diagon": 99, "static_diagon": 99, "_static_eigh": 99, "_static_eigvalsh": 99, "static_eigvalsh": 99, "51572949": [99, 654, 691], "17091519": [99, 654, 691], "3448143": [99, 654, 691], "35898387e": [99, 654, 691], "46410179e": [99, 654, 691], "_static_inn": 99, "static_inn": 99, "_static_inv": 99, "static_inv": 99, "_static_matmul": 99, "matul": 99, "static_matmul": 99, "_static_matrix_norm": 99, "deimens": 99, "static_matrix_norm": 99, "_static_matrix_pow": 99, "_static_matrix_rank": 99, "static_matrix_rank": 99, "_static_matrix_transpos": 99, "static_matrix_transpos": 99, "_static_out": 99, "n1": [99, 154, 646], "n2": [99, 154, 646], "static_out": [99, 699], "_static_pinv": 99, "static_pinv": 99, "0426": 99, "0964": 99, "0605": 99, "1368": 99, "_static_qr": 99, "static_qr": 99, "31622777": [99, 654, 701], "9486833": [99, 654, 701], "4472136": [99, 654, 701], "89442719": [99, 654, 701], "16227766": [99, 654, 701], "42718872": [99, 654, 701], "63245553": [99, 654, 701], "47213595": [99, 654, 701], "81377674": [99, 654, 701], "_static_slogdet": 99, "static_slogdet": 99, "6931472": 99, "0986123": 99, "_static_solv": 99, "_static_svd": 99, "static_svd": 99, "au": 99, "aS": 99, "avh": 99, "bvh": 99, "_static_svdv": 99, "_static_tensordot": 99, "_static_tensorsolv": 99, "_static_trac": 99, "static_trac": 99, "_static_vand": 99, "static_vand": 99, "343": [99, 298, 649, 709], "729": [99, 709], "_static_vecdot": 99, "_static_vector_norm": 99, "static_vector_norm": 99, "77359247": [99, 711], "_static_vector_to_skew_symmetric_matrix": 99, "09861231": [99, 654, 702], "static_general_inner_product": 99, "3475602": [99, 704], "93765765": [99, 704], "58776021": [99, 704], "10416126": [99, 704], "80644298": [99, 704], "87024701": [99, 704], "48127627": [99, 704], "79101127": [99, 704], "98288572": [99, 704], "68917423": [99, 704], "_containerwithloss": [100, 117], "_static_binary_cross_entropi": 100, "static_binary_cross_entropi": 100, "511": 100, "357": 100, "_static_cross_entropi": 100, "static_cross_entropi": 100, "20397282": 100, "83258148": 100, "60943794": [100, 654, 702], "_static_sparse_cross_entropi": 100, "static_sparse_cross_entropi": 100, "36354783": [100, 655, 713], "14733934": [100, 655, 713], "17027519": [100, 714], "53647931": [100, 714], "53647929": [100, 715], "1702752": [100, 715], "_containerwithmanipul": [101, 117], "_static_clip": 101, "static_clip": 101, "_static_concat": 101, "_static_constant_pad": 101, "static_constant_pad": 101, "_static_expand_dim": 101, "static_expand_dim": 101, "container_axi": [101, 656, 722], "_static_flip": 101, "static_flip": 101, "_static_permute_dim": 101, "static_permute_dim": 101, "_static_repeat": 101, "static_repeat": 101, "_static_reshap": 101, "static_reshap": 101, "_static_rol": 101, "positivclip": 101, "_static_split": 101, "static_split": 101, "_static_squeez": 101, "static_squeez": 101, "_static_stack": 101, "leavv": 101, "static_stack": 101, "_static_swapax": 101, "_static_til": 101, "static_til": 101, "_static_unstack": 101, "static_unstack": 101, "_static_zero_pad": 101, "repreat": [101, 725], "_containerwithnorm": [102, 117], "34198591": [102, 659, 757], "04274819": [102, 659, 757], "29923761": [102, 659, 757], "24053511": [102, 659, 757], "62221265": [102, 757], "20277636": [102, 757], "41943574": [102, 757], "83710337": [102, 757], "_containerwithrandom": [103, 117], "_static_multinomi": 103, "_static_randint": 103, "static_randint": 103, "_static_random_norm": 103, "static_random_norm": 103, "651": 103, "_static_random_uniform": 103, "static_random_uniform": 103, "481": 103, "0999": 103, "_static_shuffl": 103, "static_shuffl": 103, "431": [103, 760], "274": [103, 760], "_containerwithsearch": [104, 117], "_static_argmax": 104, "static_argmax": 104, "_static_argmin": 104, "static_argmin": 104, "_static_argwher": 104, "static_argwher": 104, "_static_nonzero": 104, "_static_wher": 104, "static_wher": 104, "_containerwithset": [105, 117], "_static_unique_al": 105, "static_unique_al": 105, "_static_unique_count": 105, "static_unique_count": 105, "_static_unique_invers": 105, "static_unique_invers": 105, "_static_unique_valu": 105, "_containerwithsort": [106, 117], "_static_argsort": 106, "static_argsort": 106, "_static_searchsort": 106, "_static_sort": 106, "static_sort": 106, "static_msort": 106, "_containerwithstatist": [107, 117], "_static_cumprod": 107, "static_cumprod": 107, "_static_cumsum": 107, "static_cumsum": 107, "_static_min": 107, "_static_prod": 107, "static_prod": 107, "11000001": [107, 783], "23100001": [107, 783], "30800003": [107, 664, 783], "_static_sum": 107, "_static_var": 107, "static_var": 107, "12666667": [107, 664, 786], "11555555": [107, 664, 786], "rtype": [107, 779, 827], "respectv": [107, 784], "81649649": [107, 784], "94280904": [107, 784], "509902": [107, 664, 784], "2472192": [107, 784], "44948983": [107, 784], "41421354": [107, 784], "6666667": [107, 786], "_containerwithutil": [108, 117], "_static_al": 108, "static_al": 108, "_static_ani": 108, "static_ani": 108, "add_ivy_container_instance_method": 109, "containerexampl": 109, "factorized_tensor": [110, 111, 112, 113, 114, 115, 118], "factorizedtensor": [110, 111, 112, 113, 114, 115], "matrix_or_tensor": 110, "to_unfold": [110, 111, 112, 113, 114, 115], "to_vec": [110, 111, 112, 113, 114, 115], "cp_tensor": [111, 112], "cptensor": [111, 112, 338, 384], "cp_copi": 111, "cp_flip_sign": 111, "s_i": [111, 112], "normalisation_weight": [111, 112], "normalised_factor": [111, 112], "cp_lstsq_grad": 111, "return_loss": 111, "nabla": 111, "mathcal": 111, "mathbf": 111, "factor_matric": 111, "cp_gradient": 111, "quantiti": 111, "cp_mode_dot": 111, "keep_dim": [111, 115], "cp_multi_mode_dot": 111, "cp_n_param": 111, "tensor_shap": [111, 113, 114, 115], "n_param": [111, 112, 113, 114, 115], "cp_norm": 111, "cp_to_tensor": 111, "khatria": 111, "rao": [111, 391, 450], "khatri": [111, 391, 450], "cp_normal": 111, "normalis": [111, 112], "u_1": [111, 112], "u_n": [111, 112], "v_1": [111, 112], "v_n": [111, 112], "v_k": [111, 112], "u_k": [111, 112], "absorb": [111, 112], "refold": [111, 393, 492, 504], "cp_to_unfold": 111, "ie": 111, "s_u_i": 111, "exploit": 111, "khatri_rao": [111, 391], "cp_to_vec": 111, "ravel": [111, 868], "unfolding_dot_khatri_rao": 111, "mttkrp": 111, "validate_cp_rank": 111, "percent": [111, 114], "validate_cp_tensor": 111, "parafac2_tensor": 112, "parafac2tensor": [112, 339, 384], "apply_parafac2_project": 112, "evolv": [112, 884], "b_i": 112, "ijk": [112, 828], "sum_r": 112, "a_": 112, "ir": [112, 885], "jr": 112, "kr": 112, "coupl": [112, 840, 845, 884], "factoris": 112, "i1": [112, 402, 541], "classmethod": [112, 119, 120, 801], "from_cptensor": 112, "parafac2_tensor_ok": 112, "parafac2_normalis": 112, "normalised_project": 112, "parafac2_to_slic": 112, "slice_idx": 112, "frontal": 112, "a_i": 112, "j_i": 112, "b_": 112, "reformul": 112, "p_i": 112, "orthogon": [112, 338, 342, 384, 391, 444, 460, 466, 654, 689, 690], "sum_": 112, "ijr": 112, "constraint": [112, 828, 849, 850, 860], "projection_matric": 112, "parafac2_to_tensor": 112, "construct": [112, 656, 732, 812, 815, 816, 817, 864, 870, 871, 884], "uneven": 112, "parafac2_to_unfold": 112, "parafac2_to_vec": 112, "validate_parafac2_tensor": 112, "cp": [112, 338, 384, 841], "tr_tensor": 113, "trtensor": [113, 340, 384], "tr_n_param": 113, "tr_to_tensor": 113, "tr_to_unfold": 113, "tr_to_vec": 113, "validate_tr_rank": 113, "validate_tr_tensor": 113, "tt_tensor": 114, "_tt_n_param": 114, "mp": [114, 341, 384], "index_upd": 114, "pad_tt_rank": 114, "factor_list": 114, "n_pad": 114, "pad_boundari": 114, "ring": 114, "bond": 114, "padded_factor_list": 114, "tt_to_tensor": 114, "assembl": [114, 391, 465], "tt_to_unfold": 114, "reassembl": 114, "tt_to_vec": 114, "validate_tt_rank": 114, "constant_rank": 114, "allow_overparametr": 114, "proport": [114, 811], "realiz": [114, 884], "validate_tt_tensor": 114, "tucker_tensor": 115, "tucker_copi": 115, "tucker_mode_dot": 115, "tucker_n_param": 115, "tucker_norm": 115, "tucker_to_tensor": 115, "skip_factor": 115, "transpose_factor": 115, "tucker_to_unfold": 115, "tucker_to_vec": 115, "validate_tucker_rank": 115, "fixed_mod": 115, "validate_tucker_tensor": 115, "_bisection_root_find": 115, "fun": [115, 381, 389, 630, 651, 658, 749, 849], "max_it": 115, "__abs__": [116, 117], "__add__": [116, 117, 845, 848, 852, 853, 857, 862, 863], "__eq__": [116, 117], "__ge__": [116, 117], "__gt__": [116, 117, 868], "__le__": [116, 117], "__lt__": [116, 117], "__ne__": [116, 117], "__pow__": [116, 117], "69678056": 116, "59876156": 116, "82660675": 116, "__radd__": [116, 117, 852, 853, 862], "__rrshift__": [116, 117], "__rshift__": [116, 117], "__rsub__": [116, 117], "__sub__": [116, 117, 845, 848, 852, 857], "__truediv__": [116, 117, 845, 848, 852], "__xor__": [116, 117], "referenc": [116, 854, 861], "resid": [116, 120, 656, 722, 862, 870], "mt": 116, "eq": 117, "ge": 117, "le": 117, "ne": 117, "75979435": 117, "52153397": 117, "13532257": 117, "rshift": 117, "truediv": 117, "nested_arrai": [119, 120, 121, 847], "nestedarrai": 119, "nested_rank": [119, 120, 121], "inner_shap": [119, 120, 121], "nestedarraybas": [119, 120, 121], "from_row_length": 119, "row_length": 119, "from_row_split": 119, "row_split": 119, "ragged_map": 120, "ragged_multi_map": 120, "ragged_arrai": 120, "ragged_multi_map_in_funct": 120, "replace_ivy_arrai": 120, "unbind": 120, "nestedarrayelementwis": 121, "strictli": [126, 129, 132, 262, 643, 649, 857, 861], "24000001": [126, 643], "703": [127, 643], "683": [127, 643], "408": [127, 643], "313": [127, 643], "437": [127, 643], "40337825": [128, 643], "56114835": [128, 643], "20788449": [128, 643], "0768": [131, 643], "\u03b2": [132, 643], "body_fn": [136, 137, 139, 645], "bodi": [136, 139, 645, 844, 865], "lst": [136, 645], "orelse_fn": [137, 645], "body1": [138, 645], "body2": [138, 645], "test_fn": [139, 645, 794, 833, 879, 882], "repeatedli": [139, 645, 658, 747, 849, 865], "ml_framework": [140, 646], "distanc": [140, 646], "adjac": [140, 646], "nestedsequ": [141, 142, 646], "typevar": [141, 142, 646], "supportsbufferprotocol": [141, 142, 646], "static_copy_arrai": [144, 646], "intdtyp": [147, 158, 164, 176, 187, 192, 199, 205, 646, 647], "pycapsul": [148, 159, 646], "interchang": [148, 159, 646, 656, 731], "plu": [149, 646], "x00b": [149, 646], "x00d": [149, 646], "x00e": [149, 646], "41588834": [153, 646], "7827941": [153, 646], "6227766": [153, 646], "23413252": [153, 646], "n3": [154, 646], "xv": [154, 646], "yv": [154, 646], "x_nativ": [155, 646, 861], "y_nativ": [155, 646], "z_nativ": [155, 646], "d_type": [157, 646], "col": [162, 343, 384, 646], "primari": [162, 181, 182, 214, 215, 343, 384, 400, 531, 566, 567, 646, 647, 648, 651, 797, 799, 839, 843, 846, 850, 859, 861, 862, 864, 865, 868, 872, 874], "upward": [162, 343, 384, 646], "downward": [162, 343, 384, 646], "2xn": [162, 343, 384, 646], "subarrai": [162, 343, 384, 646], "closest": [172, 251, 261, 262, 298, 308, 647, 649, 865, 868], "xtype": [172, 647], "ytype": [172, 647], "native_uint16": [172, 647], "complexdtyp": [173, 187, 196, 647], "set_default_complex_dtyp": [173, 202, 647], "4294": [173, 175, 647], "967346": [173, 175, 647], "set_default_dtyp": [174, 203, 647, 850, 858], "floatdtyp": [175, 198, 647], "set_default_float_dtyp": [175, 184, 196, 204, 647, 850], "int_dtyp": [176, 199, 647], "set_default_int_dtyp": [176, 184, 205, 647, 850], "4294967346": [176, 177, 647], "uint_dtyp": [177, 200, 647], "uint": [177, 192, 200, 206, 647, 850, 863], "uintdtyp": [177, 192, 200, 206, 647], "set_default_uint_dtyp": [177, 184, 206, 647], "native_bool": [179, 647], "ieee": [180, 238, 255, 260, 278, 288, 297, 302, 305, 644, 647, 649], "754": [180, 238, 255, 260, 278, 288, 297, 302, 305, 644, 647, 649], "smallest_norm": [180, 647], "bfloat16": [181, 647, 796, 797, 850, 862, 865, 866], "unsupport": [182, 215, 567, 647, 648, 651, 791, 794, 837, 840, 855, 862], "encapsul": [183, 647, 849], "314": [183, 295, 353, 387, 647, 649], "9223372036854775808": [183, 647], "9223372036854775807": [183, 647], "65535": [183, 647], "4294967295": [183, 647], "native_uint8": [185, 647], "hashabl": [189, 647], "type1": [193, 647], "type2": [193, 647], "array_api_promot": [193, 194, 647, 796, 797], "unexpect": [194, 262, 647, 649, 850], "default_complex_dtyp": [196, 647], "default_dtype_stack": [197, 203, 647], "unset_default_dtyp": [197, 647], "native_uint64": [197, 647], "default_float_dtyp": [198, 647, 850], "default_int_dtyp": [199, 205, 647, 850], "default_uint_dtyp": [200, 206, 647], "ret1": [201, 647], "ret2": [201, 647], "default_complex_dtype_stack": [202, 647], "default_float_dtype_stack": [204, 647], "native_float16": [207, 647], "unmodifi": [209, 648, 846, 850], "aliv": [216, 221, 223, 570, 590, 591, 648, 651, 851], "139740789224448": [216, 648], "process_specif": [222, 234, 648], "percentag": [222, 648], "ram": [222, 230, 234, 648], "alon": [222, 234, 648, 856, 865], "036902561555": [222, 648], "7024003467681645": [222, 648], "as_native_dev": [222, 648], "7095597456708771": [222, 648], "attr_onli": [223, 648], "soft_device_mod": [225, 233, 648], "chunk": [226, 227, 228, 648], "split_factor": [226, 648, 854], "max_chunk_s": [228, 648], "chunk_siz": [228, 648], "input_ax": [228, 648], "output_ax": [228, 648], "fed": [228, 648], "fist": [228, 648], "gb": [230, 234, 648, 840, 855], "66700032": [230, 648], "589934592": [230, 648], "219563008": [234, 648], "902400346": [234, 648], "525205504": [234, 648], "na": [235, 649, 865], "noqa": [235, 302, 649, 812, 822, 863], "princip": [236, 240, 242, 374, 387, 649], "codomain": [236, 237, 240, 241, 242, 243, 252, 253, 258, 260, 276, 277, 279, 300, 301, 302, 305, 306, 374, 387, 649, 853], "\u03c0": [236, 240, 242, 243, 644, 649], "3\u03c0": [236, 243, 649], "unspecifi": [236, 237, 241, 244, 253, 258, 260, 262, 297, 301, 302, 306, 391, 444, 649, 654, 656, 689, 690, 730, 861], "\u03c0j": [237, 241, 244, 276, 278, 649], "3\u03c0j": [237, 276, 278, 649], "x1_i": [238, 243, 245, 247, 248, 249, 250, 255, 256, 262, 266, 267, 274, 275, 280, 282, 284, 285, 288, 291, 293, 297, 304, 649, 844], "2019": [238, 255, 260, 278, 288, 649, 884], "commut": [238, 649], "dj": [238, 255, 288, 649], "z1": [238, 649], "z2": [238, 649], "yj": [239, 649], "nanj": [241, 649], "809": [241, 649], "569": [241, 649], "733": [241, 649], "notat": [243, 649, 664, 779, 849], "denot": [243, 649, 814], "quadrant": [243, 649], "rai": [243, 649], "bitwis": [245, 248, 250, 285, 649], "170": [249, 649], "243": [249, 649], "xor": [250, 285, 649], "654": [252, 649], "ci": [253, 258, 260, 301, 649, 844, 850, 856, 863, 865, 872], "368": [253, 649], "670": [253, 649], "202": [253, 649, 844], "548": [253, 649], "1490": [253, 649], "57079633": [254, 649], "14159265": [254, 649], "71238898": [254, 649], "28318531": [254, 649], "02617994": [254, 649], "87266463": [254, 649], "01919862": [254, 649], "03839725": [254, 649], "05759586": [254, 649], "07679449": [254, 649], "09599311": [254, 649], "11519173": [254, 649], "35081118": [254, 649], "88139129": [254, 649], "underflow": [255, 262, 649, 654, 702, 850], "textbook": [255, 288, 649], "frac": [255, 277, 279, 299, 301, 305, 390, 396, 418, 419, 423, 424, 517, 519, 649], "ac": [255, 288, 649, 827, 828], "bd": [255, 288, 649], "bc": [255, 288, 649, 827, 828], "versu": [255, 288, 649], "riemann": [255, 288, 649], "sphere": [255, 288, 649], "c99": [255, 288, 649], "infinit": [255, 288, 302, 649], "unlik": [255, 288, 649, 844, 849, 852], "698": [255, 649], "truth": [256, 266, 267, 274, 275, 291, 392, 468, 649, 791, 793, 804, 837, 855, 862, 865], "32862675": [257, 649], "67780113": [257, 649], "11246294": [257, 649], "42839241": [257, 649], "52050018": [257, 649], "16799599": [257, 649], "30787992": [257, 649], "43796915": [257, 649], "98667163": [257, 649], "79690808": [257, 649], "88020504": [257, 649], "91031402": [257, 649], "95228523": [257, 649], "96610528": [257, 649], "cut": [258, 260, 300, 301, 302, 305, 649, 876], "08553692": [258, 649], "567": [258, 649], "00344786": [258, 649], "76297021": [258, 649], "197948": [258, 649], "53253174": [258, 649], "fdlibm": [260, 278, 649], "compliant": [260, 278, 283, 284, 350, 351, 387, 649, 664, 780, 781, 782, 784], "potenti": [260, 278, 649, 833, 839, 840, 849, 850, 862, 869], "632": [260, 649], "20e": [260, 649], "72e": [260, 649, 796], "greatest": [261, 262, 265, 649], "pep": [262, 649, 857], "disambigu": [262, 649, 860], "former": [262, 649, 840, 850, 853, 862], "latter": [262, 649, 840, 844, 846, 850, 853, 862], "overload": [262, 649, 865], "led": [262, 649, 844], "subtl": [262, 649, 850], "bug": [262, 649, 833, 839, 841, 847, 855, 856, 862, 865, 873], "ambigu": [262, 649], "semant": [262, 297, 393, 508, 649, 850, 870, 885], "ill": [262, 649, 798], "surpris": [262, 649, 872], "arrau": [268, 649], "log_": [277, 279, 649], "742": [278, 649], "negat": [290, 353, 387, 649], "52095687": [293, 649], "92457771": [293, 649], "49372482": [293, 649], "22738838": [293, 649], "5877228": [293, 649], "189": [294, 649, 658, 738], "252": [294, 649], "2890": [294, 649], "344": [294, 649], "355j": [295, 353, 387, 649], "55j": [295, 353, 387, 649], "primarili": [297, 649, 839, 848, 884, 886], "counterpart": [298, 649, 848, 859], "deliber": [298, 649, 868], "imprecis": [298, 649], "5654": [298, 649], "034": [298, 649], "433": [298, 634, 636, 649, 652], "signum": [299, 649], "textrm": [299, 649], "932": [300, 649], "746": [300, 649], "657": [300, 649], "indistinguish": [302, 649], "infti": [302, 649], "32455532": [302, 649], "89897949": [302, 649], "169": [302, 649], "analyt": [305, 649, 884], "pole": [305, 649], "546": [305, 649, 653, 677], "916": [305, 649], "996": [305, 649], "histor": [306, 649], "stem": [306, 649, 861], "older": [306, 649], "advis": [306, 649, 862], "462": [306, 649], "604": [306, 649], "997": [306, 649], "0375": [308, 649], "032": [308, 649], "57258511": [311, 382], "69999999": [311, 382, 642, 652], "90928203": [311, 382], "98772264": [311, 382], "99591321": [311, 382], "99863964": [311, 382], "69880581": [311, 382], "18126924": [311, 382], "79999995": [312, 322, 325, 382], "70000005": [312, 325, 382], "1241": [313, 382], "4897": [313, 382], "4090": [313, 382], "31008321": [313, 382], "1147176": [313, 382], "40899992": [313, 382], "20141329": [316, 382], "40318608": [316, 382], "48683619": [316, 382], "46328247": [316, 382], "59813893": [316, 382], "43748799": [316, 382], "parametr": [317, 382, 844, 865, 884], "71589994": [319, 323, 382], "14324772": [319, 323, 382], "70648694": [319, 323, 382], "54488957": [319, 323, 382], "10740992": [319, 323, 382], "19514863": [319, 323, 382], "6705687": [320, 382], "52016652": [320, 382], "40560818": [320, 382], "45630932": [320, 382], "2689": [321, 382], "7310": [321, 382], "7615": [321, 382], "2784": [321, 382], "7168": [321, 382], "8708": [321, 382], "4374": [321, 382], "1379": [321, 382], "0089": [321, 382], "59999991": [322, 382], "03597236": [324, 382], "43827677": [324, 382], "80100036": [324, 382], "12954807": [324, 382], "76459098": [324, 382], "20044947": [324, 382], "60000372": [324, 382], "taper": [327, 330, 384], "summat": [327, 384, 664, 779, 827, 828], "leakag": [327, 384], "wors": [327, 384], "y1": [328, 384], "0800": [329, 384], "3979": [329, 384], "9121": [329, 384], "5400": [329, 384], "han": [330, 384], "ith": [331, 384], "00726415": [332, 384], "9999736": [332, 384], "2773e": [333, 384], "0172e": [333, 384], "9294e": [333, 384], "4149": [333, 384], "9138": [333, 384], "5529": [333, 384], "multidimension": [335, 336, 384, 884], "normalise_factor": [338, 339, 384], "parafac2": [339, 384], "tr": [340, 384], "38268346": [348, 384], "38268352": [348, 384], "8563191": [348, 384], "14943568": [348, 384], "paddlepaddl": [350, 351, 387, 840], "cn": [350, 351, 387], "zh": [350, 351, 387], "amax_cn": [350, 387], "sentinel": [350, 351, 387, 664, 780, 782], "amin_cn": [351, 387], "4769": [359, 387], "position": [361, 387], "triangl": [365, 387], "999999e": [366, 387], "65999985": [368, 387], "52000046": [368, 387], "1500001": [368, 387, 562, 651], "11259177": [369, 387], "3574118": [369, 387], "20097363": [369, 387], "suppli": [373, 387, 393, 499, 827, 845, 847, 865], "217234": [374, 387], "hurwitz": [377, 387], "custom_grad_func": [379, 389], "bind": [379, 389, 839, 860, 884, 886], "upstream": [379, 389, 840, 841, 844, 855, 860], "primal": [380, 381, 389], "jacobian": [380, 381, 389, 636, 652, 872, 884], "cotang": [381, 389], "stanh": 382, "ndenumer": 384, "ndindex": 384, "random_cp": 384, "random_parafac2": 384, "random_tr": 384, "random_tt": 384, "random_tuck": 384, "bind_custom_gradient_funct": [389, 860], "jvp": 389, "vjp": 389, "h_out": [390, 407, 653, 678], "w_out": [390, 407], "area_interpol": 390, "01823380e": [390, 412, 422], "15385818e": [390, 412, 422], "36371466e": [390, 412, 422], "38763905e": [390, 412, 422], "60722279e": [390, 412, 422], "80319249e": [390, 412, 422], "05617893e": [390, 412, 422], "21500000e": [390, 412, 422], "24000015e": [390, 412, 422], "90734863e": [390, 412, 422], "10000420e": [390, 412, 422], "15899994e": [390, 412, 422], "24000053e": [390, 412, 422], "81469727e": [390, 412, 422], "09999847e": [390, 412, 422], "4135742": [390, 412, 422], "6779785": [390, 412, 422], "3770599": [390, 412, 422], "8719864": [390, 412, 422], "72109985": [390, 412, 422], "52869415": [390, 412, 422], "79182434": [390, 412, 422], "72489166": [390, 412, 422], "container_n": [390, 412, 422], "container_typ": [390, 412, 422, 651], "container_norm": [390, 412, 422], "1580677": [390, 412], "89422607": [390, 412], "86190414": [390, 412], "00041008": [390, 412], "75149155": [390, 412], "97056389": [390, 412], "87819386": [390, 412], "89381361": [390, 412], "50000000e": [390, 412, 422, 796], "22044605e": [390, 412, 422], "ed": [390, 414, 415, 416], "rest": [390, 393, 414, 415, 416, 485, 840, 847, 849, 865, 871], "5d": [390, 416, 812], "emb": [390, 417], "51285338": [390, 417], "87183261": [390, 417], "2308116": [390, 417], "02733949e": [390, 418], "00j": [390, 418], "49660576e": [390, 418], "68178638e": [390, 418], "01j": [390, 418, 423], "98912367e": [390, 418], "21802426e": [390, 418, 423], "04549134e": [390, 418, 423], "82842712e": [390, 418, 423], "86902654e": [390, 418, 423], "25501143e": [390, 418, 423], "32978028e": [390, 418, 423], "52068201e": [390, 418, 423], "71158374e": [390, 418, 423], "generate_einsum_equ": 390, "get_interpolate_kernel": 390, "27279224e": [390, 422], "44232273e": [390, 422], "70464332e": [390, 422], "73454881e": [390, 422], "00902849e": [390, 422], "10039906e": [390, 422], "07022366e": [390, 422], "69506073": [390, 422], "93914604": [390, 422], "88008881": [390, 422], "18951607": [390, 422], "57439613": [390, 422], "15318303e": [390, 423], "15148591e": [390, 423], "19j": [390, 423], "25000000e": [390, 423], "35378602e": [390, 423], "02j": [390, 423], "65404249e": [390, 423], "17611649e": [390, 423], "24320230e": [390, 423], "79344813e": [390, 423], "22374531e": [390, 423], "45929364e": [390, 423], "14208718e": [390, 423], "07177031e": [390, 423], "indexerror": [390, 424, 435, 656, 722, 829, 854], "interp": [390, 868], "xp": [390, 425, 844], "fp": [390, 425], "nd": [390, 426], "tf_bicub": [390, 426, 868], "nearest_interpol": 390, "window_shap": [390, 432], "pool_typ": [390, 432], "irfft": [390, 434], "silent": [390, 434], "discard": [390, 434, 849], "1400001": [390, 434], "3999999": [390, 434], "3999996": [390, 434], "99038106j": [390, 435], "33012702": [390, 435], "23205081j": [390, 435], "33012702j": [390, 435], "superdiagon": [391, 442, 654, 687], "subdiagon": [391, 442, 654, 687], "eigendecomposit": [391, 444, 654, 689, 690], "qlq\u1d40": [391, 444, 654, 689, 690], "tridiagon": [391, 445], "38196602": [391, 445], "61803389": [391, 445], "35048741": [391, 445], "56710052": [391, 445], "06693714": [391, 445], "74234426": [391, 445], "56155282": [391, 445], "56155276": [391, 445], "82842714": [391, 445], "82842731": [391, 445, 654, 690], "necessarili": [391, 446, 845, 848], "generalis": [391, 447], "skip_matrix": [391, 450, 452], "khatri_rao_product": [391, 450], "kronecker_product": [391, 452], "n_column": [391, 452], "lu_factor": 391, "pivot": [391, 453], "lu": [391, 453, 454], "lu_solv": 391, "nnmf": [391, 455], "hoi": [391, 460, 466], "solve_triangular": 391, "unit_diagon": [391, 461], "solut": [391, 461, 654, 703, 796, 833, 837, 839, 840, 841, 848, 850, 855, 863, 865, 868, 886], "determinist": [391, 462, 865], "borrow": [391, 462, 843], "extmath": [391, 462], "ivan": [391, 463], "oseledet": [391, 463], "scientif": [391, 463, 884], "2295": [391, 463], "2317": [391, 463], "2011": [391, 463], "convention": [392, 469], "explicit": [392, 393, 469, 508, 840, 848, 850, 860, 861, 862, 870, 872, 884], "555969": [392, 469], "223876": [392, 469], "111938": [392, 469], "42649534": [392, 469], "68651628": [392, 469], "51119184": [392, 469], "59967244": [392, 469], "mae": [392, 470], "666": [392, 470, 653, 654, 677, 695], "91097307": [392, 472], "3467": [392, 473], "0133": [392, 473], "0250": [392, 473], "0056": [392, 473], "0025": [392, 473], "0675": [392, 473], "6987": [392, 474], "1606": [392, 474], "4032": [392, 474], "6931": [392, 474], "whilst": [393, 477, 478, 479, 874, 884], "ary3": [393, 479], "check_scalar": 393, "force_integ": [393, 481], "force_posit": [393, 481], "mod": [393, 482, 844], "tall": [393, 488], "horizot": [393, 495], "shortcut": [393, 499, 840], "linear_ramp": [393, 499], "reflect": [393, 499, 841, 845, 861, 865], "ramp": [393, 499], "mirror": [393, 499, 836, 839, 884], "padding_func": [393, 499], "iaxis_pad_width": [393, 499], "iaxi": [393, 499], "unalt": [393, 499], "pad_sequ": 393, "batch_first": [393, 500, 653, 678, 680], "seq_len": [393, 500, 653, 678], "feature_s": [393, 500], "max_len": [393, 500], "shorter": [393, 500], "seq1": [393, 500], "seq2": [393, 500], "put": [393, 505, 839, 865, 872], "mul": [393, 505, 833, 861], "conceptu": [393, 508, 885], "concern": [393, 508, 841, 843, 848, 850, 852, 861, 868, 869], "regard": [393, 508, 838, 848, 862, 863, 868], "mutat": [393, 508], "elimin": [393, 514, 840], "consecut": [393, 514], "batch_mean": [396, 517, 519], "batch_var": [396, 517, 519], "running_vari": [396, 517, 519], "local_response_norm": 396, "neighbour": [396, 522], "42857143": [396, 523], "5714286": [396, 523], "multivari": [397, 526], "bayesian": [397, 526], "supposedli": [400, 530], "indirect": [400, 531], "secondari": [400, 531], "is_ivy_sparse_arrai": 401, "is_native_sparse_arrai": 401, "native_sparse_arrai": 401, "coo_indic": [401, 534], "crow_indic": [401, 534], "col_indic": [401, 534], "ccol_indic": [401, 534], "row_indic": [401, 534], "dense_shap": [401, 534], "native_sparse_array_to_indices_values_and_shap": 401, "nativesparsearrai": 401, "sparsearrai": 401, "sparse_arrai": 401, "linalg": [402, 538, 654, 702, 703, 839, 861, 863], "aw": [402, 538], "48447205": [402, 538], "c0": [402, 541], "ck": [402, 541], "c2": [402, 541], "nearest_jax": [402, 548], "trace_on_next_step": [552, 651, 816], "recalcul": [555, 651], "my_sum": [555, 651], "val1": [555, 651], "val2": [555, 651], "cached_sum": [555, 651], "line_eq": [555, 651], "slp": [555, 651], "itc": [555, 651], "cached_line_eq": [555, 651], "0353": [556, 651], "424": [556, 651], "339": [556, 651], "271": [556, 651], "391": [556, 651], "78885436": [557, 651], "41666666": [557, 651], "58333331": [557, 651], "06666667": [557, 651], "13333334": [557, 651], "40000004": [557, 651], "26666668": [557, 651], "13137734": [557, 651], "26275468": [557, 651], "39413199": [557, 651], "52550936": [557, 651], "6568867": [557, 651], "78826398": [557, 651], "84852815": [557, 651], "1313709": [557, 651], "41421366": [557, 651], "27279221": [557, 651], "69705628": [557, 651], "12132034": [557, 651], "default_str": [560, 651], "46999979": [561, 651], "66000009": [561, 651], "93000001": [561, 651], "29000092": [561, 651], "33999991": [561, 651], "6400001": [561, 651], "96000004": [561, 651], "36000013": [561, 651], "51999998": [561, 651], "67000008": [561, 651], "suppos": [561, 651, 850, 865], "960": [561, 651], "3600": [561, 651], "h1": [561, 651], "w1": [561, 651], "40499985": [562, 651], "61000061": [562, 651], "max_depth": [573, 651], "seen_set": [573, 651], "local_set": [573, 651], "referr": [573, 651], "redund": [573, 651, 833, 850, 854, 862, 880], "example_funct": [573, 651], "repr": [573, 651], "allow_dupl": [588, 651], "fork": [589, 651, 834, 844, 849, 855], "forkserv": [589, 651], "mp_default": [589, 651], "defaultcontext": [589, 651], "0x7f4e3193e520": [589, 651], "mp_fork": [589, 651], "forkcontext": [589, 651], "0x7f4e3193e580": [589, 651], "mp_spawn": [589, 651], "spawncontext": [589, 651], "0x7f4e3193e5e0": [589, 651], "mp_forkserv": [589, 651], "forkservercontext": [589, 651], "0x7f4e3193e640": [589, 651], "garbag": [591, 651], "collector": [591, 651], "get_all_arrays_in_memori": [591, 651], "exception_trace_mod": [595, 619, 651, 867], "lenient": [596, 620, 651], "inplace_mod": [596, 620, 651], "break": [596, 651, 846, 850, 857, 866, 872], "infus": [597, 651], "unset": [598, 605, 651, 654, 702, 822, 846, 870], "unset_min_bas": [598, 651], "nestable_mod": [600, 623, 651, 867], "precise_mod": [601, 624, 651, 867], "shape_array_mod": [603, 626, 651, 867], "show_func_wrapper_trace_mod": [604, 627, 651, 867], "tmp_dr": [605, 651], "tmp_dir": [605, 628, 651, 867], "my_tmp": [605, 651], "unset_tmp_dir": [605, 651], "49999999999975": [608, 651], "5015015015010504": [608, 651], "000444502911705e": [608, 651], "9999999999995j": [608, 651], "00000262": [609, 651], "15605032": [609, 651], "01208451j": [609, 651], "00048": [609, 651], "1296": [609, 651], "00864": [609, 651], "isn": [611, 651, 836, 841, 859, 861, 865, 872], "100000023841858": [613, 651], "200000047683716": [613, 651], "299999952316284": [613, 651], "400000095367432": [613, 651], "599999904632568": [613, 651], "hemant": [617, 651], "unset_shape_array_mod": [618, 651], "set_exception_trace_mod": [619, 651, 854], "set_min_bas": [621, 651], "set_min_denomin": [622, 651], "set_nestable_mod": [623, 651], "set_precise_mod": [624, 651], "set_queue_timeout": [625, 651], "set_shape_array_mod": [626, 651], "set_show_func_wrapper_trace_mod": [627, 651, 854], "set_tmp_dir": [628, 651], "my_dir": [628, 651], "451": [629, 651], "in_ax": [630, 651], "out_ax": [630, 651], "thereof": [630, 651], "summaris": [630, 651], "99999998": [631, 652], "19999998": [631, 652], "00000001": [631, 652], "00300001": [631, 652], "00800001": [631, 652], "0125": [631, 652], "17294501": [631, 652], "15770318": [631, 652], "20863818": [631, 652], "90000075": [632, 652], "90000164": [632, 652], "9000032": [632, 652], "50000012e": [632, 652], "92558754": [632, 652], "92558694": [632, 652], "92558682": [632, 652], "92558861": [632, 652], "60000025e": [632, 652], "01024": [632, 652], "retain_grad": [633, 652], "func_ret": [633, 652, 860], "666666": [633, 652], "333332": [633, 652], "66666675": [633, 642, 652], "argnum": [634, 652], "933": [634, 636, 652], "jac_fn": [636, 652], "639": [637, 652], "361": [637, 652], "52565837": [638, 652], "8418861": [638, 652], "68377209": [638, 652], "value_grad": [642, 652], "42333412": [642, 652], "5333333": [642, 652], "93333334": [642, 652], "43333334": [642, 652], "0666666": [642, 652], "softsign": 643, "718281828459045": 644, "euler": 644, "141592653589793": 644, "cmp_i": 645, "cmp_isnot": 645, "for_loop": 645, "if_els": 645, "try_except": 645, "control_flow_op": 645, "to_dlpack": 646, "as_ivy_dtyp": [647, 862], "as_native_dtyp": 647, "check_float": 647, "closest_valid_dtyp": 647, "default_dtyp": [647, 850, 858], "dtype_bit": 647, "function_supported_dtyp": [647, 850, 865], "function_unsupported_dtyp": [647, 850], "infer_default_dtyp": 647, "invalid_dtyp": [647, 850], "is_hashable_dtyp": 647, "is_native_dtyp": 647, "promote_typ": [647, 850], "promote_types_of_input": [647, 850, 861], "type_promote_arrai": [647, 850], "unset_default_complex_dtyp": 647, "unset_default_float_dtyp": 647, "unset_default_int_dtyp": 647, "unset_default_uint_dtyp": 647, "valid_dtyp": 647, "defaultcomplexdtyp": 647, "defaultdtyp": 647, "defaultfloatdtyp": 647, "defaultintdtyp": 647, "defaultuintdtyp": 647, "as_ivy_dev": 648, "clear_cached_mem_on_dev": 648, "dev_util": [648, 851], "function_supported_devic": 648, "function_unsupported_devic": 648, "get_all_ivy_arrays_on_dev": [648, 851], "handle_soft_device_vari": [648, 851], "num_cpu_cor": [648, 851], "num_gpu": [648, 851, 865], "num_ivy_arrays_on_dev": 648, "percent_used_mem_on_dev": 648, "print_all_ivy_arrays_on_dev": 648, "set_split_factor": [648, 854], "split_func_cal": 648, "total_mem_on_dev": [648, 851], "tpu_is_avail": 648, "unset_default_devic": [648, 851], "unset_soft_device_mod": [648, 851], "used_mem_on_dev": 648, "defaultdevic": [648, 851], "save_dir": 648, "arg_info": 651, "arg_nam": 651, "cache_fn": [651, 858], "current_backend_str": [651, 865, 870], "function_supported_devices_and_dtyp": 651, "function_unsupported_devices_and_dtyp": 651, "get_item": [651, 861], "get_referrers_recurs": 651, "inplace_arrays_support": 651, "inplace_variables_support": 651, "is_ivy_nested_arrai": 651, "isscalar": 651, "match_kwarg": 651, "num_arrays_in_memori": 651, "print_all_arrays_in_memori": 651, "set_item": [651, 865], "to_ivy_shap": 651, "to_native_shap": 651, "try_else_non": 651, "unset_array_mod": [651, 867], "unset_exception_trace_mod": 651, "unset_inplace_mod": 651, "unset_min_denomin": 651, "unset_nestable_mod": 651, "unset_precise_mod": 651, "unset_queue_timeout": 651, "unset_show_func_wrapper_trace_mod": 651, "vmap": [651, 872, 884], "arraymod": 651, "precisemod": [651, 850], "jac": 652, "requires_gradi": 652, "value_and_grad": [652, 860], "feature_group_count": [653, 666, 673, 674], "oiw": [653, 666, 667, 673], "oihw": [653, 666, 669, 673], "oidhw": [653, 666, 671, 673], "dhwio": [653, 666, 667, 671, 673], "conv_general_dil": [653, 862], "conv_general_transpos": 653, "depthwis": [653, 675, 798, 812], "1428566": [653, 676], "49000001": [653, 676], "55599999": [653, 676], "21000004": [653, 676], "incom": [653, 677], "4269": [653, 677], "911": [653, 677, 854], "157": [653, 677], "753": [653, 677], "545": [653, 660, 677, 761], "547": [653, 677, 851], "963": [653, 677], "98495483": [653, 677], "0293808": [653, 677], "0159359": [653, 677], "74752808": [653, 677], "20942307": [653, 677], "3205719": [653, 677], "all_weight": [653, 678], "num_lay": [653, 678, 812], "weights_transpos": [653, 678], "has_ih_bia": [653, 678], "has_hh_bia": [653, 678], "multi": [653, 654, 678, 680, 685, 798, 812, 852, 872, 884], "long": [653, 678, 679, 840, 841, 849, 850, 852, 854, 855, 862, 870, 884], "input_s": [653, 678], "h_0": [653, 678], "c_0": [653, 678], "num_direct": [653, 678], "hidden_s": [653, 678], "four": [653, 678, 836, 845, 850, 852, 857, 858, 865, 868], "w_ih": [653, 678], "w_hh": [653, 678], "b_ih": [653, 678], "b_hh": [653, 678], "c_out": [653, 678], "vaswani": [653, 680], "al": [653, 680], "num_attention_head": [653, 680], "key_dim": [653, 680, 812], "value_dim": [653, 680, 812], "attention_weight": [653, 680], "unbatch": [653, 680], "nm": 653, "box": [653, 681, 682, 840], "iou_threshold": [653, 681], "max_output_s": [653, 681], "score_threshold": [653, 681], "roi_align": 653, "spatial_scal": [653, 682], "sampling_ratio": [653, 682], "23333359": [653, 683], "03946018": [653, 683], "0280633": [653, 683], "29981947": [653, 683], "29981089": [653, 683], "06345534": [653, 683], "9634552": [653, 683], "19336844": [653, 683], "09336829": [653, 683], "axisa": [654, 685], "axisb": [654, 685], "axisc": [654, 685], "293": [654, 686], "46997": [654, 686], "17157288": [654, 690], "9238795": [654, 690], "78930789": [654, 690], "59803128": [654, 690], "19127655": [654, 690], "31213903": [654, 690], "63418275": [654, 690], "84632206": [654, 690], "70548367": [654, 690], "70223427": [654, 690], "09570674": [654, 690], "63116378": [654, 690], "56109613": [654, 690], "53554028": [654, 690], "32237405": [654, 690], "43822157": [654, 690], "83906901": [654, 690], "50766778": [654, 690], "71475857": [654, 690], "48103389": [654, 690], "3676433": [654, 690], "68466955": [654, 690], "62933773": [654, 690], "77917379": [654, 690], "14264561": [654, 690], "61036086": [654, 690], "45033181e": [654, 691], "02829754e": [654, 691], "54220343e": [654, 691], "12647155e": [654, 691], "38447177e": [654, 691], "56155300e": [654, 691], "26794919": [654, 691], "7320509": [654, 691], "0012": [654, 693], "00342": [654, 693], "000565": [654, 693], "0104": [654, 693], "000981": [654, 693], "00282": [654, 693], "000766": [654, 693], "0322": [654, 693], "00237": [654, 693], "000151": [654, 693], "00101": [654, 693], "00019": [654, 693], "0214": [654, 693], "00171": [654, 693], "0107": [654, 693], "0167": [654, 693], "0472": [654, 693], "0536": [654, 693], "0177": [654, 693], "000429": [654, 693], "00762": [654, 693], "frobeniu": [654, 695], "nuclear": [654, 695], "induc": [654, 695], "ranl": [654, 695], "47722558": [654, 695], "776": [654, 695], "6000004": [654, 695], "118": [654, 696], "moor": [654, 700], "penros": [654, 700], "31622776": [654, 701], "94868332": [654, 701], "1622777": [654, 701], "42718887": [654, 701], "deteremin": [654, 702], "logsabsdet": [654, 702], "subject": [654, 702], "unset_backend": [654, 702, 822, 846], "ordin": [654, 703], "b2": [654, 703], "usvh": [654, 704], "cetera": [654, 704], "driver": [654, 705, 872], "gesvd": [654, 705], "gesvdj": [654, 705], "gesvda": [654, 705], "86217213": [654, 705], "31816804": [654, 705], "615": [654, 705], "ss": [654, 705], "25994301": [654, 705], "16403675": [654, 705], "61529762": [654, 705], "51231241": [654, 705], "39777088": [654, 705], "15413129": [654, 705], "1029852": [654, 705], "01383495": [654, 705], "86647356": [654, 705], "7786541": [654, 705], "55970621": [654, 705], "16857576": [654, 705], "86412698": [654, 705], "37566757": [654, 705], "88477993": [654, 705], "95925522": [654, 705], "6444726": [654, 705], "54687881": [654, 705], "16134834": [654, 705], "35037804": [654, 705], "31025076": [654, 705], "35769391": [654, 705], "transposit": [654, 706], "0x": [654, 709], "Such": [654, 709, 858, 865], "alexandr": [654, 709], "theophil": [654, 709], "dot_product": [654, 710], "9000001": [654, 711], "64158917": [654, 711], "skew": [654, 712], "60309976": [655, 713], "6666193": [655, 713], "01348412": [655, 713], "05393649": [655, 713], "49992943": [655, 713], "83330965": [655, 713], "02136981": [655, 713], "32844672": [655, 713], "26561815": [655, 713], "22314337": [655, 713], "08916873": [655, 714, 715], "44832274": [655, 715], "75646281": [655, 715], "13862944": [655, 715], "57564628": [655, 715], "ssim_loss": 655, "ssim": [655, 716], "99989986": [655, 716], "wasserstein_loss_discrimin": 655, "p_real": [655, 717], "p_fake": [655, 717], "wasserstein": [655, 717, 718], "discrimin": [655, 717], "wasserstein_loss_gener": 655, "pred_fak": [655, 718], "honor": [656, 726], "beyond": [656, 727, 833, 853, 862], "famili": [656, 730], "intxx": [656, 730], "floatxx": [656, 730], "rep": [656, 732], "fomaml_step": 657, "inner_cost_fn": [657, 735, 736, 737], "outer_cost_fn": [657, 735, 736], "inner_grad_step": [657, 735, 736, 737], "inner_learning_r": [657, 735, 736, 737], "inner_optimization_step": [657, 735, 736, 737], "inner_batch_fn": [657, 735, 736], "outer_batch_fn": [657, 735, 736], "average_across_step": [657, 735, 736], "inner_v": [657, 735, 736], "keep_inner_v": [657, 735, 736], "outer_v": [657, 735, 736], "keep_outer_v": [657, 735, 736], "return_inner_v": [657, 735, 736, 737], "num_task": [657, 735, 736, 737], "maml": [657, 735, 736], "0x7f71837e08b0": [657, 735, 736, 737], "maml_step": 657, "vanilla": [657, 736, 884], "_variabl": [657, 736, 737], "sub_batch": [657, 736], "40069818": [657, 736], "13723135": [657, 736], "reptile_step": 657, "cost_fn": [657, 737], "reptil": [657, 737], "batch_in": [657, 737], "4485182": [657, 737], "139": [657, 737], "9569855": [657, 737], "9880483": [657, 737], "01766968": [657, 737], "02197957": [657, 737], "02197981": [657, 737], "all_nested_indic": 658, "include_nest": [658, 738], "_index": [658, 738, 749], "_base": [658, 738, 748, 749, 861], "themselv": [658, 738, 848, 850, 851, 853, 858, 862], "863": [658, 738, 851], "672": [658, 738], "482": [658, 738], "674": [658, 738], "341": [658, 738], "copy_nest": 658, "to_mut": [658, 739, 750], "deepli": [658, 739, 842, 872, 884], "copied_nest": [658, 739], "1337": [658, 739, 750], "duplicate_array_index_chain": 658, "index_nest": [658, 858], "insert_into_nest_at_index": 658, "insert_into_nest_at_indic": 658, "special_squar": [658, 744], "6666666666666667": [658, 744], "special_pow": [658, 744], "linear_model": [658, 744], "map_nest_at_index": 658, "_result": [658, 745, 755], "hh": [658, 745, 750], "map_nest_at_indic": 658, "ub": [658, 746], "tb": [658, 746], "multi_index_nest": 658, "nested_ani": 658, "check_nest": [658, 748, 749], "nested_argwher": 658, "stop_after_n_found": [658, 749], "nested_indic": [658, 749], "nested_map": [658, 851, 858], "_tuple_check_fn": [658, 750], "_list_check_fn": [658, 750], "_dict_check_fn": [658, 750], "wherebi": [658, 750, 839], "ah": [658, 750], "bh": [658, 750], "ch": [658, 750], "dh": [658, 750, 844], "eh": [658, 750], "gh": [658, 750, 840, 855], "ih": [658, 750], "1338": [658, 750], "nested_multi_map": 658, "index_chain": [658, 751], "nest0": [658, 751], "ivy_arrai": [658, 751, 845, 862], "unappli": [658, 751], "prune_empti": 658, "prune_nest_at_index": 658, "prune_nest_at_indic": 658, "set_nest_at_index": 658, "set_nest_at_indic": 658, "xyz": [658, 756], "pqr": [658, 756], "mini": [659, 757, 812, 815], "uniformli": [660, 759, 761], "22346112": [660, 760], "0922": [660, 760], "9213753": [660, 760], "12818667": [660, 760], "799": [660, 760], "469": [660, 760], "287": [660, 760], "0366": [660, 760], "26431865": [660, 761], "475": [660, 761], "878": [660, 761], "861": [660, 761], "929": [660, 761], "789": [660, 761], "519": [660, 761], "0435": [660, 761], "381": [660, 761], "4608004": [660, 761], "8458502": [660, 761], "67270088": [660, 761], "31128597": [660, 761], "394": [660, 763], "zeroel": [661, 767], "fourth": [662, 769], "1141": [662, 769], "8101": [662, 769], "9298": [662, 769], "8460": [662, 769], "2119": [662, 769], "3519": [662, 769], "6252": [662, 769], "4033": [662, 769], "7443": [662, 769], "2577": [662, 769], "3707": [662, 769], "0545": [662, 769], "3238": [662, 769], "5944": [662, 769], "0775": [662, 769], "4327": [662, 769], "62519997": [662, 769], "40329999": [662, 769], "59439999": [662, 769], "74430001": [662, 769], "81010002": [662, 769], "84600002": [662, 769], "92979997": [662, 769], "einstein": [664, 779, 827], "117": [664, 779], "intend": [664, 785, 794, 811, 844, 857, 860, 884], "07472222": [664, 786], "00666667": [664, 786], "08966666": [664, 786], "simplicit": [665, 787, 788], "ivy_test": [791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 839, 840, 841, 844, 847, 849, 855, 863], "test_ivi": [791, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 839, 840, 841, 847, 849, 855, 863, 865], "assert_all_clos": [791, 863], "ret_np": [791, 793, 863], "ret_from_gt_np": [791, 863], "ground_truth_backend": [791, 793, 794, 803, 804, 837, 855, 863], "mark": [791, 836, 839, 841, 844, 865, 870], "assert_same_typ": 791, "ret_from_target": 791, "ret_from_gt": 791, "backend_to_test": [791, 793, 837, 855, 863], "gt_backend": 791, "with_backend": [791, 822], "assert_same_type_and_shap": 791, "this_key_chain": 791, "check_unsupported_devic": 791, "input_devic": 791, "all_as_kwargs_np": [791, 793], "check_unsupported_device_and_dtyp": 791, "input_dtyp": [791, 793, 803, 837, 855, 863, 865], "check_unsupported_dtyp": 791, "test_unsupported_funct": 791, "value_test": 791, "ret_np_flat": 791, "ret_np_from_gt_flat": 791, "specific_tolerance_dict": 791, "ret_from_np_gt_flat": 791, "available_framework": 792, "function_test": 793, "args_to_contain": 793, "array_arg": [793, 858], "args_to_frontend": 793, "frontend_array_fn": 793, "arrays_to_frontend": 793, "as_list": 793, "convtru": 793, "nativeclass": 793, "counter": 793, "create_args_kwarg": 793, "args_np": 793, "arg_np_val": 793, "args_idx": 793, "kwargs_np": 793, "kwarg_np_val": 793, "kwargs_idx": 793, "test_flag": [793, 837, 855, 863, 865], "on_devic": [793, 803, 837, 855, 863], "flatten_and_to_np": 793, "flatten_frontend": 793, "flatten_frontend_fw_to_np": 793, "frontend_ret": [793, 863], "isscalar_func": 793, "is_native_array_func": 793, "to_numpy_func": 793, "flatten_frontend_to_np": 793, "get_frontend_ret": 793, "frontend_fn": 793, "frontend_array_funct": 793, "precision_mod": [793, 803, 804, 855], "test_trac": [793, 803, 804, 837, 844, 855], "test_trace_each": [793, 803, 804], "get_ret_and_flattened_np_arrai": 793, "gradient_incompatible_funct": 793, "gradient_test": [793, 865], "rtol_": [793, 837, 855], "atol_": [793, 837, 855, 863], "tolerance_dict": 793, "gradient_unsupported_dtyp": 793, "kwargs_to_args_n_kwarg": 793, "num_positional_arg": [793, 803, 804, 837, 855, 863, 865], "port": 793, "test_frontend_funct": [793, 863], "fn_tree": [793, 794, 804, 837, 855, 862, 863, 865], "gt_fn_tree": [793, 804], "test_valu": [793, 863, 865], "frontend_function_flag": [793, 803], "functiontestflag": [793, 803, 837, 855], "with_out": [793, 803, 837, 855, 863, 865], "instance_method": [793, 803, 837, 855, 865], "as_vari": [793, 803, 837, 855, 863, 865], "namespac": [793, 839, 850, 859, 862, 863, 866, 870], "arg_": 793, "test_frontend_method": [793, 863], "init_input_dtyp": [793, 863], "method_input_dtyp": [793, 863], "init_flag": [793, 863, 865], "method_flag": [793, 803, 863, 865], "init_all_as_kwargs_np": [793, 863], "method_all_as_kwargs_np": [793, 863], "frontend_method_data": [793, 863], "init_as_variable_flag": [793, 804], "dictat": [793, 845, 852, 857, 861], "init_num_positional_arg": [793, 804], "init_native_array_flag": 793, "with_v": 793, "ret_gt": 793, "test_funct": [793, 837, 840, 841, 849, 855, 863, 865], "fn_name": [793, 794, 804, 837, 846, 855, 863, 865], "return_flat_np_arrai": 793, "as_variable_flag": [793, 804, 865], "native_array_flag": [793, 804, 865], "container_flag": [793, 803, 804, 865], "test_function_backend_comput": 793, "test_function_ground_truth_comput": 793, "arg_np_arrai": 793, "arrays_args_indic": 793, "arrays_kwargs_indic": 793, "kwarg_np_arrai": 793, "test_gradient_backend_comput": 793, "test_gradient_ground_truth_comput": 793, "test_method": 793, "method_nam": [793, 802, 804, 863], "init_with_v": 793, "method_with_v": 793, "test_gradi": [793, 803, 804, 837, 855, 865], "method_as_variable_flag": [793, 804], "method_num_positional_arg": [793, 804], "method_native_array_flag": 793, "method_container_flag": [793, 804], "test_method_backend_comput": 793, "test_method_ground_truth_comput": 793, "org_con_data": 793, "args_np_method": 793, "met_arg_np_v": 793, "met_args_idx": 793, "kwargs_np_method": 793, "met_kwarg_np_v": 793, "met_kwargs_idx": 793, "v_np": 793, "traced_if_requir": 793, "wrap_frontend_function_arg": 793, "holder": 794, "current_frontend_config": 794, "0x7f7176761dd0": 794, "interruptedtest": 794, "test_interrupt": 794, "baseexcept": 794, "tri": [794, 850], "testdata": 794, "supported_device_dtyp": 794, "is_method": 794, "setup_api_test": 794, "test_data": 794, "setup_frontend_test": 794, "teardown_api_test": 794, "teardown_frontend_test": 794, "hypothesis_help": [795, 796, 797, 798, 799], "array_help": 796, "array_and_broadcastable_shap": 796, "searchstrategi": [796, 797, 798, 799, 803, 804, 865], "array_bool": [796, 865], "min_valu": [796, 797, 798, 799, 837, 855, 863, 865], "max_valu": [796, 797, 798, 799, 863, 865], "ex": [796, 797, 798, 799, 804, 849, 879], "strategi": [796, 797, 798, 799, 803, 804, 839, 863], "array_helpers_dtype_info_help": 796, "kind_dtyp": [796, 798], "array_indices_axi": 796, "array_dtyp": [796, 797, 865], "indices_dtyp": 796, "get_dtyp": [796, 797, 837, 855, 863, 865], "abs_smallest_v": [796, 798, 799], "large_abs_safety_factor": [796, 798, 799, 837, 855, 863, 865], "small_abs_safety_factor": [796, 798, 799, 837, 855, 863], "safety_factor_scal": [796, 798, 799, 863, 865], "disable_random_axi": 796, "axis_zero": 796, "allow_inf": [796, 799, 863, 865], "min_num_dim": [796, 798, 863, 865], "max_num_dim": [796, 798, 863, 865], "min_dim_s": [796, 798, 863, 865], "max_dim_s": [796, 798, 863], "first_dimension_onli": 796, "indices_same_dim": 796, "valid_bound": 796, "safeti": [796, 798, 799, 884], "0002": [796, 799], "hypothesi": [796, 798, 804, 839, 841, 844, 849, 859], "65536": 796, "44758124e": [796, 865], "array_indices_put_along_axi": 796, "values_dtyp": 796, "array_valu": [796, 865], "allow_nan": [796, 799, 865], "allow_subnorm": [796, 799, 865], "exclude_min": [796, 799, 865], "exclude_max": [796, 799], "subnorm": [796, 799], "get_shap": [796, 798, 863, 865], "1806": 796, "36912": 796, "6955": 796, "59576": 796, "arrays_and_ax": 796, "available_dtyp": [796, 797, 837, 855, 863, 865], "allow_non": [796, 798, 863, 865], "return_dtyp": 796, "force_int_axi": 796, "26e": 796, "10e": 796, "24322108": 796, "26446279e": 796, "96046448e": 796, "008": 796, "17549435e": 796, "038": 796, "06541027e": 796, "13725760e": 796, "07143888": 796, "arrays_for_pool": 796, "min_dim": 796, "max_dim": 796, "min_sid": 796, "max_sid": 796, "explicit_or_str_pad": 796, "only_explicit_pad": 796, "return_dil": 796, "mixed_fn_compo": [796, 797, 798, 799, 865], "return_data_format": 796, "cond_data_gen_help": 796, "create_concatenable_arrays_dtyp": 796, "min_num_arrai": 796, "max_num_arrai": 796, "concat_dim": 796, "common_shap": [796, 865], "stackabl": 796, "given_common_shap": 796, "create_nested_input": 796, "leaf_valu": 796, "dtype_and_valu": [796, 837, 855, 863, 865], "num_arrai": [796, 797, 863, 865], "shared_dtyp": [796, 797, 863], "ret_shap": 796, "array_api_dtyp": [796, 797], "shape_kei": 796, "37915": 796, "6322": 796, "26765": 796, "12413": 796, "26986": 796, "34665": 796, "000e": 796, "711e": 796, "100e": 796, "955e": [796, 865], "40817": 796, "56193": 796, "29200": 796, "5851": 796, "9746": 796, "9604645e": 796, "103": 796, "41795": 796, "1170789994": 796, "44251": 796, "44209": 796, "433075925": 796, "24791": 796, "24691": 796, "24892": 796, "16711": 796, "972": 796, "15357": 796, "72057594037927936": 796, "dtype_array_queri": 796, "allow_mask": 796, "allow_neg_step": 796, "dtype_array_query_v": 796, "dtype_values_axi": [796, 865], "min_axi": 796, "max_axi": 796, "valid_axi": 796, "allow_neg_ax": 796, "min_axes_s": 796, "max_axes_s": 796, "force_tuple_axi": 796, "29788": 796, "62222885e": 796, "68281172e": 796, "257j": 796, "40129846e": 796, "90000000e": 796, "63426649e": 796, "91931887e": 796, "29488e": 796, "14361019e": 796, "12445": 796, "einsum_help": 796, "get_first_solve_batch_matrix": 796, "choose_adjoint": 796, "get_second_solve_batch_matrix": 796, "get_first_solve_matrix": 796, "allow_simplifi": 796, "choose_sid": 796, "xa": 796, "get_second_solve_matrix": 796, "list_of_s": 796, "sampled_from": [796, 863, 865], "min_siz": [796, 798, 804, 865], "max_siz": [796, 798, 804, 865], "size_bound": [796, 865], "999999999999999": 796, "9394938006792373": 796, "mutually_broadcastable_shap": 796, "num_shap": 796, "base_shap": 796, "dtype_help": 797, "univers": [797, 862], "cast_filt": 797, "cast_filter_help": 797, "current_backend": [797, 822, 839, 846, 854, 858, 863, 866, 870], "get_castable_dtyp": 797, "castabl": 797, "prune_funct": 797, "intersect": [797, 849, 865], "signed_integ": 797, "real_and_complex": 797, "float_and_complex": 797, "general_help": 798, "broadcasterror": 798, "apply_safety_factor": 798, "dims_and_offset": 798, "ensure_dim_uniqu": 798, "embedding_help": 798, "general_helpers_dtype_info_help": 798, "get_axi": [798, 865], "allow_neg": 798, "sort_valu": 798, "force_tupl": 798, "force_int": 798, "assertionerror": [798, 837, 844, 854, 855, 863, 865], "get_bound": [798, 865], "get_mean_std": 798, "matrix_is_st": 798, "cond_limit": 798, "instabl": [798, 837, 850, 855], "computation": [798, 840], "prone": [798, 850], "thumb": 798, "gradual": 798, "collinear": 798, "reshape_shap": [798, 865], "sizes_": 798, "two_broadcastable_shap": 798, "x_and_filt": 798, "number_help": 799, "arbitrarili": 799, "safety_factor": 799, "backend_proc": 800, "input_queu": 800, "output_queu": 800, "frontend_proc": 800, "pipeline_help": 801, "backendhandl": 801, "update_backend": [801, 863], "backendhandlermod": 801, "enum": [801, 825], "setbackend": 801, "withbackend": 801, "withbackendcontext": 801, "get_frontend_config": 801, "frontendmethoddata": 802, "ivy_init_modul": 802, "framework_init_modul": 802, "init_nam": 802, "test_parameter_flag": 803, "dynamicflag": [803, 804], "frontendfunctiontestflag": [803, 855], "with_copi": 803, "generate_frontend_arrai": [803, 804, 855], "testflag": 803, "apply_flag": 803, "args_to_iter": 803, "frontendinittestflag": 803, "frontendmethodtestflag": 803, "test_cython_wrapp": [803, 804], "initmethodtestflag": 803, "methodtestflag": 803, "build_flag": 803, "frontend_init_flag": 803, "frontend_method_flag": 803, "function_flag": 803, "init_method_flag": 803, "testing_help": 804, "handle_exampl": [804, 865], "test_exampl": [804, 865], "test_frontend_exampl": [804, 865], "test_method_exampl": [804, 865], "test_frontend_method_exampl": [804, 865], "given_kwarg": 804, "handle_frontend_method": [804, 863, 865], "class_tre": [804, 863], "init_tre": [804, 863], "init_native_arrai": 804, "_as_varaible_strategi": 804, "method_native_arrai": 804, "test_inplac": [804, 865], "_given_kwarg": 804, "test_compil": 804, "handle_frontend_test": [804, 863, 865], "alias": [804, 839, 862, 863], "number_positional_arg": [804, 863], "test_with_out": [804, 863, 865], "test_with_copi": 804, "handle_method": [804, 825, 865], "method_tre": [804, 863, 865], "_gradient_strategi": 804, "handle_test": [804, 837, 855, 865], "test_instance_method": [804, 865], "num_positional_args_help": 804, "num_positional_args_method": 804, "geglu": 808, "leakyrelu": 808, "logsoftmax": 808, "from_flax_modul": 809, "native_modul": 809, "params_fx": 809, "rng_seed": 809, "constructor_arg": 809, "constructor_kwarg": 809, "instance_arg": 809, "instance_kwarg": 809, "flax": [809, 818, 872, 884], "from_haiku_modul": 809, "params_hk": 809, "from_paddle_modul": 809, "from_torch_modul": 809, "to_keras_modul": 809, "native_module_class": 809, "modulehelp": [810, 814], "create_vari": 811, "var_shap": 811, "fan_out": 811, "fan_in": 811, "rectangular": 811, "firstlayersiren": 811, "siren": 811, "glorotuniform": [811, 812], "glorot": 811, "xavier": 811, "neuron": 811, "w_1x_1": 811, "w_2x_2": 811, "w_nx_n": 811, "w_i": 811, "kaimingnorm": 811, "fan_mod": 811, "kaim": 811, "he": 811, "negative_slop": 811, "fan": 811, "propog": 811, "fan_sum": 811, "Ones": 811, "randomnorm": 811, "stddev": 811, "w0": 811, "wlim": 811, "predefin": 811, "fan_avg": 811, "adaptiveavgpool1d": 812, "avgpool1d": 812, "implicit": [812, 848, 853, 862, 865, 870, 884], "avgpool2d": 812, "avgpool3d": 812, "e501": 812, "filter_s": 812, "weight_initi": 812, "bias_initi": 812, "0x7f71832cace0": 812, "0x7f71832cac80": 812, "conv1dtranspos": 812, "0x7f71832cac20": 812, "0x7f71832cabc0": 812, "filter_shap": 812, "0x7f71832cab60": 812, "0x7f71832cab00": 812, "0x7f71832caaa0": 812, "0x7f71832caa40": 812, "0x7f71832ca920": 812, "0x7f71832ca8c0": 812, "conv3dtranspos": 812, "0x7f71832ca860": 812, "0x7f71832ca800": 812, "depthwiseconv2d": 812, "num_channel": 812, "0x7f71832ca9e0": 812, "0x7f71832ca980": 812, "bernoul": 812, "num_embed": 812, "embedding_dim": 812, "padding_idx": 812, "lookup": 812, "num_embeddingss": 812, "renorm": 812, "extra_repr": 812, "insensit": 812, "return_st": 812, "0x7f71832ca7a0": 812, "get_initial_st": 812, "0x7f71832cada0": 812, "0x7f71832cad40": 812, "maxpool1d": 812, "maxpool3d": 812, "multiheadattent": 812, "embed_dim": 812, "head_dim": 812, "dropout_r": 812, "use_proj_bia": 812, "attention_ax": 812, "build_mod": [812, 813, 814], "on_init": [812, 814], "parallel": [812, 847, 884], "binarycrossentropyloss": 813, "store_var": [813, 814], "with_partial_v": [813, 814], "logpoissonloss": 813, "modulemeta": 814, "temporarili": [814, 837, 844, 855], "from_cal": 814, "module_dict": 814, "register_buff": 814, "register_paramet": 814, "weights_path": 814, "randomness_factor": 814, "with_edge_label": 814, "with_arg_label": 814, "with_output_label": 814, "output_connected_onli": 814, "highlight_subgraph": 814, "trace_kwarg": 814, "_unified_ivy_graph": 814, "_call": 814, "num_featur": 815, "trail": 815, "layernorm": 815, "normalized_shap": 815, "elementwise_affin": 815, "set_stat": 816, "adamw": 816, "weight_decai": 816, "init_on_first_step": 816, "fallback_to_non_trac": 816, "ignore_miss": 816, "_step": 816, "stochast": [816, 884], "sub_modul": 817, "sync_model": 818, "original_model": 818, "translated_model": 818, "synchron": [818, 849], "nnx": 818, "sync_models_torch_and_jax": 818, "model_pt": 818, "model_jax": 818, "flaxmodel": 818, "named_paramet": 818, "named_buff": 818, "model_flax": 818, "customflaxlinear": 818, "nativeflaxmodel": 818, "pytorchmodel": 818, "sync": [818, 840, 844, 855], "sync_models_torch_and_tf": 818, "model_tf": 818, "kerasmodel": 818, "keraslay": 818, "customkeraslinear": 818, "nativekerasmodel": 818, "check_al": 819, "check_all_or_any_fn": 819, "check_ani": 819, "check_dev_correct_format": 819, "check_dimens": 819, "check_elem_in_list": [819, 858, 861, 862], "elem": 819, "check_equ": [819, 862], "check_exist": 819, "check_fals": 819, "check_gather_input_valid": 819, "check_gather_nd_input_valid": 819, "check_great": 819, "allow_equ": [819, 854], "check_inplace_sizes_valid": [819, 861], "check_isinst": 819, "allowed_typ": 819, "check_kernel_padding_s": 819, "padding_s": 819, "check_less": [819, 854], "check_one_way_broadcast": 819, "check_same_dtyp": 819, "check_shapes_broadcast": 819, "check_tru": 819, "check_unsorted_segment_valid_param": 819, "ast_help": 821, "importtransform": 821, "nodetransform": 821, "impersonate_import": 821, "tree": [821, 850], "local_ivy_id": 821, "visit_import": 821, "visit_importfrom": 821, "ivyload": 821, "loader": [821, 872], "exec_modul": 821, "ivypathfind": 821, "metapathfind": 821, "find_spec": 821, "fullnam": 821, "contextmanag": 822, "choose_random_backend": 822, "global_backend": 822, "dynamic_backend_convert": 822, "backend_stack": [822, 870], "prevent_access_loc": 822, "previous_backend": [822, 846], "Or": [822, 833, 835, 840, 861, 877], "set_backend_to_specific_vers": 822, "set_jax_backend": 822, "set_mxnet_backend": 822, "mx": 822, "set_numpy_backend": 822, "set_paddle_backend": 822, "set_tensorflow_backend": 822, "set_torch_backend": 822, "sub_backend_handl": 823, "clear_sub_backend": 823, "find_available_sub_backend": 823, "sub_backends_loc": 823, "fn_name_from_version_specific_fn_nam": 823, "fn_name_from_version_specific_fn_name_sub_backend": 823, "sub_backend_vers": 823, "backend_vers": [823, 837, 850, 855], "set_sub_backend": 823, "sub_backend_str": 823, "set_sub_backend_to_specific_vers": 823, "sub_backend": 823, "unset_sub_backend": 823, "check_for_binari": 824, "cleanup_and_fetch_binari": [824, 840], "clean": [824, 841, 866, 871], "decorator_util": 825, "callvisitor": 825, "nodevisitor": 825, "visit_cal": 825, "transposetyp": 825, "no_transpos": 825, "apply_transpos": 825, "pt_to_tf": 825, "dummy_inplace_upd": 825, "get_next_func": 825, "handle_get_item": 825, "handle_set_item": 825, "handle_transpose_in_input_and_output": 825, "handle_transpose_in_input_and_output_for_funct": 825, "handle_transpose_in_pad": 825, "retrieve_object": 825, "store_config_info": 825, "dynamic_import": 826, "import_modul": [826, 870], "einsum_pars": 827, "convert_interleaved_input": 827, "interleav": 827, "convert_subscript": 827, "old_sub": 827, "symbol_map": 827, "subscript": [827, 828], "oe": 827, "ellipsi": [827, 828], "find_output_shap": 827, "find_output_str": 827, "canon": 827, "gen_unused_symbol": 827, "abd": [827, 828], "get_symbol": 827, "letter": 827, "resort": 827, "unicod": 827, "charact": [827, 862], "chr": 827, "surrog": 827, "\u0155": 827, "20000": 827, "\u4eac": 827, "has_valid_einsum_chars_onli": 827, "einsum_str": 827, "abaz": 827, "\u00f6ver": 827, "is_valid_einsum_char": 827, "\u01f5": 827, "legalise_einsum_expr": 827, "reproduct": [827, 828], "pars": [827, 828, 847, 852, 872], "intak": 827, "contract_path": 827, "parse_einsum_input": [827, 828], "einsum_eqn": 827, "legalis": 827, "legalise_einsum_eqn": 827, "za": [827, 828], "xza": [827, 828], "xz": [827, 828], "possibly_convert_to_numpi": 827, "myshap": 827, "__main__": 827, "0x10f850710": 827, "einsum_path_help": 828, "can_dot": 828, "idx_remov": 828, "bla": 828, "benefici": 828, "movement": 828, "costli": 828, "gemm": 828, "ijj": 828, "ddot": 828, "ikj": 828, "compute_size_by_dict": 828, "idx_dict": 828, "abbc": 828, "find_contract": 828, "input_set": 828, "output_set": 828, "lh": 828, "rh": 828, "new_result": 828, "idx_contract": 828, "iset": 828, "oset": 828, "bdc": 828, "flop_count": 828, "num_term": 828, "size_dictionari": 828, "flop": [828, 832], "greedy_path": 828, "memory_limit": 828, "exhaust": [828, 861, 865], "indices_remov": 828, "priorit": [828, 839, 864, 868], "hadamard": 828, "cubic": 828, "greedi": 828, "idx_siz": 828, "optimal_path": 828, "siev": 828, "input_str": 828, "output_str": 828, "parse_possible_contract": 828, "path_cost": 828, "naive_cost": 828, "propos": [828, 841, 862, 868, 884], "intermediari": [828, 846], "unoptim": 828, "new_input_set": 828, "update_other_result": 828, "provision": 828, "_parse_possible_contract": 828, "mod_result": 828, "inplaceupdateexcept": 829, "include_backend": [829, 854], "ivyattributeerror": [829, 854], "attributeerror": [829, 854], "ivybroadcastshapeerror": [829, 854], "ivydeviceerror": 829, "ivydtypepromotionerror": [829, 854], "ivyindexerror": [829, 854], "ivyinvalidbackendexcept": 829, "ivynotimplementedexcept": [829, 854], "notimplementederror": 829, "ivyvalueerror": [829, 854], "handle_except": [829, 857, 859], "add_array_spec": 830, "fn_array_spec": 830, "set_logging_mod": 831, "debug": [831, 836, 840, 841, 848, 849, 860, 865, 868, 884], "unset_logging_mod": 831, "print_stat": 832, "viz": 832, "snakeviz": 832, "bonu": 832, "cprofil": 832, "tensorflow_profile_start": 832, "logdir": 832, "host_tracer_level": 832, "python_tracer_level": 832, "device_tracer_level": 832, "delay_m": 832, "toggl": [832, 841], "timestamp": 832, "awai": [832, 884], "millisecond": 832, "guess": 832, "tensorflow_profile_stop": 832, "torch_profiler_init": 832, "schedul": [832, 849, 872, 884], "on_trace_readi": 832, "record_shap": 832, "profile_memori": 832, "with_stack": 832, "with_flop": 832, "with_modul": 832, "experimental_config": 832, "profileract": 832, "record_and_sav": 832, "dealloc": 832, "record": [832, 840, 872, 885], "callstack": 832, "aten": 832, "torchscript": [832, 871, 874], "_experimentalconfig": 832, "kineto": 832, "torch_profiler_start": 832, "torch_profiler_stop": 832, "faq": [833, 847], "docker": [833, 837, 838, 855], "pull": [833, 834, 836, 839, 840, 844, 852, 856, 866, 868, 872, 873], "ivyllc": [833, 840, 873], "brief": [833, 861, 865, 871], "torch_fn": 833, "tf_fn": 833, "jax_fn": 833, "ensp": 833, "customiz": [833, 847], "15c235f": 833, "deepmind_perceiver_io": 833, "sm_framework": 833, "segmentation_model": 833, "sm": 833, "torch_sm": 833, "iou_scor": 833, "rax": 833, "torch_rax": 833, "poly1_softmax_loss": 833, "madmom": 833, "madmon": 833, "torch_madmom": 833, "freq": 833, "audio": 833, "hz2midi": 833, "torch_loss": 833, "maxpooling1d": 833, "pool_siz": 833, "tf_kornia": 833, "tf_rax": 833, "tf_madmom": 833, "tf_loss": 833, "_forward_classifi": [833, 879], "forward_classifi": [833, 879], "hk_eff_encod": 833, "dummy_x": 833, "jax_sm": 833, "jax_madmom": 833, "jax_loss": 833, "np_kornia": 833, "np_sm": 833, "np_rax": 833, "np_loss": 833, "migrat": [833, 877], "instantli": [833, 879], "tensorflwo": 833, "happend": 833, "motiv": 833, "contextu": 833, "explos": [833, 875], "orient": [833, 877], "contributor": [833, 834, 837, 839, 840, 841, 855, 862, 869, 884], "believ": [833, 841], "everyon": [833, 834, 839, 840, 841, 872], "feedback": [833, 839, 849], "appreci": [833, 842], "dashboard": 833, "grow": [833, 836, 842, 884], "mission": [833, 842], "season": 833, "fellow": 833, "credit": 833, "accompani": 833, "lenton2021ivi": 833, "inter": 833, "author": [833, 839, 841], "lenton": 833, "daniel": 833, "pardo": 833, "fabio": 833, "falck": 833, "fabian": 833, "jame": 833, "stephen": 833, "clark": 833, "ronald": 833, "journal": 833, "arxiv": 833, "preprint": 833, "2102": 833, "02886": 833, "year": [833, 844, 872, 884], "strongli": [834, 840, 862], "engag": [834, 841, 842], "skill": [834, 842], "veteran": 834, "journei": [834, 842], "effort": [834, 839, 872, 876, 884], "board": [834, 847], "stage": [834, 841, 843, 844, 847, 865, 884], "excit": [834, 843], "reward": [834, 842], "badg": [834, 842, 849], "program": [834, 861, 884], "climb": [834, 838], "Be": [835, 847], "awar": [835, 847, 854, 856], "linux": [835, 840, 841, 847], "regularli": [835, 847, 849], "internet": [835, 847], "codespac": [835, 847, 855], "make_doc": 835, "sh": [835, 840, 841, 844, 849], "pwd": 835, "ssh": [835, 849], "make_docs_without_dock": [835, 847], "award": 836, "formal": 836, "dynamo": 836, "earn": [836, 842], "thoroughli": [836, 844], "valuabl": [836, 839, 841], "merg": [836, 839, 841, 844, 849, 862, 884], "meet": [836, 842, 862], "wizard": 836, "inspector": 836, "acknowledg": [836, 842], "honour": 836, "dilig": 836, "bronz": [836, 842], "silver": [836, 842], "gold": [836, 842, 872], "expertis": [836, 842], "assist": [837, 855], "runtimeerror": [837, 855], "logaddexp2_cpu": [837, 855], "falsifi": [837, 844, 855, 865], "test_logaddexp2": [837, 855], "backend_fw": [837, 855, 863], "dtype_and_x": [837, 855, 863, 865], "reproduce_failur": [837, 844, 855, 859, 865], "axicy2bkaamobaar2waaaacvaai": [837, 855], "decoartor": [837, 855], "someth": [837, 841, 846, 855, 856, 866, 872], "with_unsupported_dtyp": [837, 850, 855, 862], "25830078125": [837, 855], "258544921875": [837, 855], "test_acosh": [837, 855], "axicy2baabyqwqgiaabdaai": [837, 855], "quit": [837, 841, 845, 852, 853, 855, 858, 859, 865, 868, 884], "41421356": [837, 855], "41421356e": [837, 855], "34078079e": [837, 855], "154": [837, 855], "test_ab": [837, 840, 855, 865], "000j": [837, 855], "154j": [837, 855], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [837, 855], "thread": [837, 839, 840, 841, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 884], "pycharm": [837, 863, 865], "steep": 838, "curv": 838, "realpython": 838, "pyn": 838, "exchang": [838, 886], "pilot": 838, "stuck": [838, 839], "spell": 838, "sound": [838, 849], "peopl": [838, 840, 841, 843, 884], "frequent": [839, 841, 846, 884], "outlin": [839, 840, 841, 843, 848, 850, 853, 858, 861, 862, 865], "broad": 839, "individu": [839, 841, 844, 846, 850, 858, 862, 884], "clearli": [839, 841, 852, 863, 865], "straightforward": [839, 842], "lie": 839, "urgent": 839, "encourag": [839, 842, 856, 872], "tackl": [839, 842, 862], "challeng": [839, 846, 876, 886], "categoris": [839, 844, 862], "comfort": [839, 840, 854], "linkag": 839, "pr": [839, 841, 842, 844, 856, 862, 863, 865], "confid": 839, "submit": [839, 856], "mindspor": 839, "simpler": [839, 841, 856, 880, 885], "member": [839, 841, 862, 873], "comment": [839, 840, 841, 844, 850, 856, 862, 864, 868], "composition": 839, "feasibl": [839, 849, 865, 880], "pend": 839, "helpfulli": [839, 868], "problemat": [839, 840], "unimpl": 839, "issue_link": 839, "alias_nam": 839, "notic": [839, 845, 849, 855, 856, 865, 868, 880], "push": [839, 841, 842, 844, 863, 865], "liner": 839, "meanwhil": [839, 849], "reselect": 839, "faithfulli": 839, "creation_routin": [839, 863], "indexing_routin": 839, "ma": 839, "manipulation_routin": 839, "mathematical_funct": [839, 862], "sorting_searching_count": 839, "ufunc": [839, 862], "matrix_and_vector_product": 839, "matrix_eigenvalu": 839, "norms_and_other_numb": 839, "solving_equations_and_inverting_matric": 839, "gleam": 839, "uncom": 839, "test_numpy_inn": 839, "test_frontend": [839, 849, 855, 863], "unsur": [839, 865], "refrain": 839, "checkbox": [839, 840], "yourself": [839, 841, 856, 865, 868], "aforement": 839, "parent": [839, 849], "arraywithelementwis": [839, 845], "containerwithmanipul": 839, "thorough": [839, 853, 857, 865], "add_reformatting_checklist_": 839, "category_nam": [839, 850, 851, 853, 857, 858], "autom": [839, 849, 856, 865, 874], "bot": [839, 856], "markdown": [839, 847], "patient": [839, 840], "elabor": 839, "struggl": 839, "assigne": 839, "status": 839, "central": [839, 856, 868], "relevant_submodul": 839, "roadmap": [839, 849], "deem": [839, 862], "subtask": 839, "clearer": [839, 854, 863], "backend_nam": [839, 846, 850, 851, 853, 857, 858, 859], "rare": [839, 851, 872], "button": [839, 840, 841, 855], "centr": 839, "predetermin": 839, "superset": [839, 843, 858, 861, 872], "happi": [840, 855, 872], "your_usernam": [840, 855], "your_fold": [840, 855], "enter": [840, 841, 845, 850, 851, 855, 857, 859], "nutshel": [840, 857], "hook": [840, 856, 864], "lint": [840, 843], "succe": [840, 880], "whatev": [840, 848, 872], "elig": [840, 842], "student": 840, "licens": 840, "remind": 840, "expir": 840, "profession": 840, "trial": 840, "jetbrain": 840, "month": [840, 877], "bui": 840, "paid": 840, "rapid": [840, 884], "pace": 840, "person": [840, 841], "perhap": [840, 872], "conda": 840, "ivy_dev": [840, 841], "icon": [840, 841, 855], "panel": 840, "vscode": [840, 855], "palett": 840, "ctrl": [840, 841], "mac": [840, 841], "intel": 840, "m1": 840, "optional_apple_silicon_1": 840, "optional_apple_silicon_2": 840, "array_api_test": [840, 841, 844, 855], "test_array_api": [840, 841, 844, 855, 865], "suit": [840, 843, 844, 849, 855, 864, 865, 884], "cmd": 840, "bat": [840, 841], "virtualenv": 840, "tick": [840, 841, 849], "nz2": 840, "openssl": 840, "libssl1": 840, "1_1": 840, "1f": 840, "1ubuntu2": 840, "20_amd64": 840, "deb": 840, "dpkg": 840, "mitig": 840, "desktop": [840, 855], "powershel": 840, "admin": 840, "menu": [840, 855], "introspect": 840, "dialog": 840, "persist": 840, "earlier": [840, 841, 850, 866], "virtualis": 840, "bio": 840, "dropdown": [840, 849], "dockerfil": 840, "ca": 840, "certif": 840, "gnupg": 840, "lsb": 840, "keyr": 840, "fssl": 840, "gpg": 840, "dearmor": 840, "echo": [840, 849], "arch": 840, "lsb_releas": 840, "ce": 840, "cli": 840, "containerd": 840, "systemctl": 840, "softwar": [840, 841], "press": [840, 841], "4a": 840, "socket": 840, "rwx": 840, "sock": 840, "pid": 840, "editor": 840, "pytest": [840, 841, 844, 849, 855, 859, 865], "keyboard": 840, "screenshot": 840, "pop": [840, 855], "test_elementwis": 840, "shell": [840, 841, 844, 849], "setup_test": 840, "run_ivy_core_test": 840, "run_ivy_nn_test": 840, "run_ivy_stateful_test": 840, "run_test": [840, 849], "test_depend": 840, "test_ivy_cor": 840, "test_ivy_nn": 840, "test_ivy_st": 840, "unix": 840, "test_": [840, 863], "test_cor": [840, 841, 863], "offici": [840, 850, 870], "wish": [840, 862], "ivy_nn": 840, "ivy_st": 840, "header": [840, 841, 864], "arrow": 840, "test_stat": 840, "test_submodule_nam": 840, "test_function_nam": 840, "debugg": 840, "studio": [840, 855, 865], "afterward": 840, "background": [840, 847, 855, 884], "overlap": [840, 849, 855, 866, 868, 885], "test_file_path": [840, 855], "test_fn_nam": [840, 855], "engin": [840, 877, 884], "devcontain": 840, "comma": 840, "postcreatecommand": 840, "post_create_command": 840, "poststartcommand": 840, "safe": [840, 862], "containerworkspacefold": 840, "reopen": 840, "test_fle_path": 840, "slash": 840, "isol": [840, 841, 885], "container": 840, "intens": 840, "headach": 840, "arm": [840, 841], "vm": [840, 849], "azur": 840, "cloud": [840, 849], "favourit": 840, "theme": [840, 847], "ipad": 840, "browser": [840, 847], "quota": 840, "requisit": 840, "pane": [840, 841, 849], "dockerfilegpu": 840, "ivv": 840, "multiv": 840, "multivers": [840, 866], "dockerfilemultivers": 840, "dockerhub": 840, "upto": [840, 841], "launch": 840, "kindli": [840, 864], "guidelin": 840, "colour": 840, "chanc": 840, "troubleshoot": 840, "ever": 840, "flask": [840, 855], "toolbar": [840, 841, 855], "_array_modul": [840, 844, 855], "refresh": [840, 855], "pytestarg": [840, 855], "unittesten": [840, 855], "pytesten": [840, 855], "autotestdiscoveronsaveen": [840, 855], "conftest": 840, "serv": [840, 841, 845, 848, 857, 858, 862, 863, 865, 868, 874, 877], "aren": [840, 850], "available_config": 840, "cp310": 840, "x86": 840, "newer": [840, 865], "meantim": 840, "suffici": [840, 852, 862, 865], "bear": [840, 845, 848, 850, 862], "tendenc": 841, "land": 841, "unrel": 841, "fly": [841, 884], "internship": 841, "suspect": 841, "iii": 841, "issue_numb": 841, "12345": 841, "rememb": 841, "respond": 841, "dai": [841, 856], "freed": 841, "situat": [841, 849, 870], "obvious": [841, 849], "hypothet": 841, "frustrat": 841, "delai": [841, 880], "busi": 841, "inact": 841, "unfairli": 841, "investig": 841, "name_of_your_branch": 841, "date": [841, 844], "complic": [841, 863, 870], "merge_with_upstream": 841, "abort": 841, "tediou": [841, 852, 868], "stash": [841, 856], "reinstat": 841, "uncommit": 841, "unstag": [841, 856], "untrack": 841, "atlassian": 841, "wrote": 841, "piec": [841, 845, 858, 859, 871, 880, 883], "blame": 841, "eg": 841, "week": 841, "grep": 841, "commit_id": 841, "handi": 841, "histori": 841, "approv": 841, "someon": [841, 872], "hash": 841, "cancel": 841, "speedup": 841, "unavail": 841, "tickbox": 841, "intent": [841, 861], "discourag": 841, "adopt": [841, 845, 857, 868, 884], "philosophi": 841, "infrequ": 841, "earli": [841, 884], "wast": [841, 849], "spot": [841, 852, 858], "mistak": 841, "mountain": 841, "advoc": [841, 872], "session": [841, 884], "beauti": 841, "care": [841, 851, 862, 868], "undo": 841, "stress": 841, "nifti": 841, "reassur": 841, "local_path_to_ivi": 841, "subfold": [841, 863, 865, 866], "dep": 841, "fresh": 841, "arsen": 841, "exec": 841, "ivy_contain": 841, "test_imag": 841, "test_random_crop": 841, "test_creation_funct": 841, "test_arang": 841, "cursor": 841, "alt": 841, "breakpoint": 841, "gutter": 841, "caret": 841, "f8": 841, "f9": 841, "Into": 841, "f7": 841, "smart": 841, "fragment": [841, 876, 877, 883], "wherein": [841, 858, 865], "facilit": [842, 877], "embark": 842, "innov": 842, "door": [842, 872], "elev": 842, "opportun": 842, "testament": [842, 864], "stone": 842, "gift": 842, "acquir": 842, "peak": 842, "privileg": 842, "bounti": 842, "cash": 842, "delight": 842, "weed": [843, 869], "tour": 843, "formatt": [843, 856], "conjunct": 844, "establish": 844, "unconnect": 844, "strang": 844, "adher": [844, 850, 853, 857, 868, 870], "test_linalg": [844, 863], "test_set_funct": 844, "test_signatur": 844, "excess": [844, 846, 852], "array_modul": 844, "vv": 844, "test_manipulation_funct": 844, "test_concat": [844, 865], "nb": 844, "liber": 844, "______________________": 844, "test_remaind": 844, "_______________________": 844, "test_operators_and_elementwise_funct": 844, "1264": 844, "1277": 844, "binary_param_assert_against_refimpl": 844, "ctx": 844, "620": 844, "binary_assert_against_refimpl": 844, "scalar_o": 844, "17304064": 844, "binaryparamcontext": 844, "axic42baaowcnp": 844, "rumwmabaear0": 844, "make_binary_param": 844, "numeric_dtyp": 844, "left_strat": 844, "left_sym": 844, "right_strat": 844, "right_sym": 844, "right_is_scalar": 844, "binary_param_assert_dtyp": 844, "binary_param_assert_shap": 844, "recreat": 844, "unexpectedli": 844, "discrep": [844, 863], "test_asarray_arrai": 844, "test_floor_divid": 844, "health": 844, "test_iop": 844, "__imod__": 844, "isequ": 844, "test_matrix_norm": 844, "alter": 844, "tweak": 844, "array_api_methods_to_test": 844, "test_special_cas": 844, "__ipow__": 844, "is_integ": 844, "easier": [844, 845, 846, 850, 863, 866, 874, 877, 884], "revisit": [844, 857], "_data": [845, 861, 862], "organiz": [845, 848, 862], "underpin": [845, 848, 870, 871], "programmat": [845, 848, 885], "backup": [845, 847, 848], "accident": [845, 848, 862], "absent": [845, 848], "auto": [845, 847, 848, 856], "__mul__": [845, 848, 852, 857, 868], "throw": [845, 850, 851, 854, 855, 884], "imposs": 845, "inputs_to_native_arrai": [845, 858, 859], "outputs_to_ivy_arrai": [845, 850, 851, 857, 858, 859], "secondli": [845, 850], "__ivy_array_function__": 845, "__torch_function__": 845, "myarrai": 845, "handled_funct": 845, "notimpl": 845, "issubclass": 845, "enough": [845, 849, 850, 851, 865], "ivy_funct": 845, "my_ab": 845, "my_arrai": 845, "implicit_backend": [846, 870], "__dict__": [846, 861, 870], "ivy_original_dict": [846, 870], "fallback": 846, "live": [846, 847, 850], "dlpack": 846, "set_dynamic_backend": 846, "unset_dynamic_backend": 846, "dynamic_backend_a": 846, "set_": 846, "unset_": 846, "backend_handl": 846, "requires_grad": 846, "memory_format": 846, "preserve_format": 846, "weren": 846, "vast": [846, 850, 884], "minor": [846, 868, 872], "fn_name_v_1p12_and_abov": 846, "fn_name_v_1p01_to_1p1": 846, "heavili": [847, 859, 872], "conf": 847, "cleanup": 847, "readm": [847, 872], "maxdepth": 847, "caption": 847, "related_work": 847, "deep_div": 847, "glossari": 847, "autosummari": 847, "top_functional_toc": 847, "restructuredtext": 847, "discov": [847, 850], "ivy_toctree_caption_map": 847, "unfortun": [847, 856], "linker": 847, "foo": 847, "discussion_channel_map": 847, "1000043690254946374": 847, "1000043749088436315": 847, "forum": 847, "seri": [847, 850, 862, 865, 884], "discussion_paragraph": 847, "discord_link": 847, "channel_link": 847, "gg": 847, "uyrmypxmqq": 847, "799879767196958751": 847, "channel_id": 847, "autoskippablemethod": 847, "skippable_method_attribut": 847, "__qualname__": 847, "autodoc": 847, "__doc__": 847, "autoivydata": 847, "mutual": [848, 858], "containerwithelementwis": 848, "__repr__": 848, "__getattr__": [848, 880], "__setattr__": [848, 880], "__contains__": 848, "__getstate__": 848, "__setstate__": 848, "unpickl": 848, "num_dim": [848, 870], "restrict": [848, 849, 862, 871, 880], "enforc": 848, "lefthand": 848, "righthand": 848, "handle_nest": [848, 857, 858, 859, 870], "absenc": [848, 857, 884], "implicitli": [848, 860, 865, 870], "log_pr": [848, 858, 861], "intuit": [848, 865, 876], "chronolog": 848, "concurr": [848, 849, 858, 884], "despit": [848, 850, 851, 863, 871, 884], "__list__": 848, "whatsoev": [848, 858, 874], "children": 848, "shallowest": 848, "deepest": 848, "rollback": 849, "incorpor": [849, 863, 884], "techniqu": 849, "triplet": 849, "test_torch": [849, 863], "test_tensor": [849, 863], "test_torch_instance_arctan_": 849, "12500": 849, "daili": 849, "huge": [849, 875, 884], "shoot": 849, "_reduce_loss": [849, 858, 861], "test_nn": 849, "test_loss": 849, "test_binary_cross_entropy_with_logit": 849, "test_cross_entropi": 849, "test_binary_cross_entropi": 849, "test_sparse_cross_entropi": 849, "test_loss_funct": 849, "test_torch_binary_cross_entropi": 849, "test_torch_cross_entropi": 849, "binary_cross_entropy_with_logit": 849, "torch_binary_cross_entropi": 849, "torch_cross_entropi": 849, "readthedoc": 849, "pedagog": 849, "f_1": 849, "t_1": 849, "t_3": 849, "t_7": 849, "t_": 849, "f_m": 849, "cyclic": 849, "intellig": [849, 865], "tests_fil": 849, "file_nam": [849, 865, 866], "tests_lin": 849, "correspondingli": 849, "tests_to_run": 849, "determine_tests_lin": 849, "mongodb": 849, "mechan": [849, 872], "secret": 849, "db": 849, "ssh_deploy_kei": 849, "suffic": [849, 859, 865], "massiv": 849, "yml": 849, "felicit": 849, "clone_map": 849, "deploy_kei": 849, "user_email": 849, "user_nam": 849, "target_branch": 849, "github_serv": 849, "deploy_key_fil": 849, "ssh_known_hosts_fil": 849, "known_host": 849, "keyscan": 849, "git_ssh_command": 849, "userknownhostsfil": 849, "email": 849, "methodologi": 849, "master1": 849, "restructur": 849, "_map": 849, "t_2": 849, "t_n": 849, "index_map": 849, "test_map": 849, "snowbal": 849, "recalibr": 849, "workflow_dispatch": 849, "cron": 849, "saturdai": 849, "night": 849, "pm": 849, "gut": 849, "lesser": [849, 854], "lol": 849, "hour": 849, "cater": [849, 864, 876], "master2": 849, "master32": 849, "runner2": 849, "corrupt": 849, "decoupl": 849, "150": 849, "cycl": [849, 865], "yellow": 849, "queu": 849, "redirect": 849, "book": 849, "onrend": 849, "jo": 849, "ran": 849, "clickabl": 849, "all_dtyp": 850, "all_numeric_dtyp": 850, "all_int_dtyp": 850, "all_float_dtyp": 850, "replic": [850, 860, 861, 862], "thirdli": 850, "native_float32": 850, "importantli": [850, 870], "arguabl": [850, 851, 862], "jaxarrai": [850, 851, 854, 857, 861, 866, 870], "_handle_0_dim_output": 850, "subtli": [850, 861], "promote_types_frontend_nam": 850, "promote_types_of_frontend_name_input": 850, "frontend_nam": 850, "upcast": 850, "nearli": [850, 857, 859, 884], "downcast": 850, "footprint": 850, "concret": 850, "aris": [850, 856, 872], "utterli": 850, "meant": [850, 852, 861], "twice": 850, "disadvantag": 850, "relax": 850, "f64": 850, "unwant": 850, "primaci": 850, "resembl": 850, "compound": 850, "infer_dtyp": [850, 851, 857, 859], "settabl": [850, 851], "handle_out_argu": [850, 851, 857, 858, 859, 861, 870], "infer_devic": [850, 851, 857, 859], "deleg": 850, "shape_to_tupl": 850, "with_supported_dtyp": 850, "unment": 850, "_cast_for_unary_op": [850, 858, 861], "target_typ": 850, "syntax": [850, 876, 884], "unsupported_dtyp": 850, "supported_dtypes_and_devic": 850, "with_unsupported_device_and_dtyp": 850, "globals_getter_func": 850, "f2": 850, "lack": [850, 861, 876, 884], "mandat": [850, 861, 865, 866], "confus": [850, 854, 861, 868, 874], "inconsist": [850, 854, 860], "is_nan": 850, "supported_dtyp": 850, "anytim": 850, "84530": 850, "unwarr": 850, "risk": 850, "needlessli": 850, "bloat": 850, "undergo": [850, 872], "unsupported_devic": 850, "supported_devic": 850, "downsid": 850, "coverag": [850, 865], "undesir": 850, "accomplish": 850, "upcast_data_typ": 850, "downcast_data_typ": 850, "crosscast_data_typ": 850, "cast_data_typ": 850, "downcast_data_dtyp": 850, "vice": 850, "versa": 850, "till": 850, "crosscast": 850, "exmp1": 850, "watch": [850, 862], "handle_numpy_arrays_in_specific_backend": [850, 857], "cate": 850, "understood": 850, "consumpt": 850, "dual": 851, "categor": [851, 858, 862], "_handle_except": [851, 854], "1013": 851, "_handle_nest": [851, 854], "905": 851, "_handle_out_argu": [851, 854], "441": 851, "_inputs_to_native_arrai": [851, 854], "new_arg": [851, 854], "new_kwarg": [851, 854], "_outputs_to_ivy_arrai": [851, 854], "358": 851, "_handle_array_funct": [851, 854], "_handle_device_shift": 851, "handle_device_shift": [851, 859], "device_shifting_dev": 851, "__enter__": 851, "__exit__": 851, "soft_devic": 851, "eight": 852, "op_nam": 852, "__r": 852, "unsurprisingli": 852, "recap": 852, "combinatori": 852, "okai": [852, 868, 870], "spec": [852, 853], "my_func": [852, 866], "some_flag": 852, "another_flag": 852, "jointli": 852, "5574077": 852, "1850398": 852, "5463025": 852, "8422884": 852, "91601413": 852, "9647598": 852, "3738229": 852, "1597457": 852, "0963247": 852, "9955841": 852, "3278579": 852, "asid": 852, "14254655": 852, "1578213": 852, "380515": 852, "trivial": [852, 861], "failing_fn_nam": 852, "onlin": [852, 853], "minutest": 852, "fault": [852, 884], "contrast": [853, 857, 862, 886], "preview": 853, "incorrectli": [853, 880], "needless": [853, 863], "renam": [853, 862], "judgment": 853, "operator_nam": 853, "succinct": 853, "docst": 853, "native_error": 854, "_combine_messag": 854, "truli": 854, "wrong": [854, 856, 859, 862, 868], "198": 854, "392": 854, "_handle_array_like_without_promot": 854, "805": 854, "432": 854, "349": 854, "other_test": 854, "523": 854, "_handle_numpy_out": 854, "396": 854, "_outputs_to_numpy_arrai": 854, "_inputs_to_ivy_arrays_np": 854, "ivy_arg": 854, "ivy_kwarg": 854, "453": 854, "_from_zero_dim_arrays_to_scalar": 854, "truth_value_test": 854, "visibl": 854, "unwieldi": 854, "squash": 854, "hide": [854, 880], "cleaner": 854, "caught": [854, 856], "rethrow": 854, "_print_traceback_histori": 854, "error_stack": 854, "axiserror": 854, "polici": [854, 859, 865, 867], "moreov": 854, "submoodul": 855, "test_jax_transpos": 855, "manipulaiton": 855, "test_jax": [855, 863], "test_numpi": [855, 863], "test_manipul": [855, 863, 865], "preconditionnotmet": 855, "densetensor": 855, "holder_": 855, "phi": 855, "dense_tensor_impl": 855, "array_and_ax": 855, "aaegbaegaqaaaaaaaaaaaaab": 855, "black": 856, "flake8": 856, "linter": 856, "autoflak": 856, "docformatt": 856, "pydocstyl": 856, "yaml": 856, "patch1687898304": 856, "8072": 856, "3516aed563": 856, "reformat": 856, "akshai": 856, "jain": 856, "gui": 856, "cryptic": 856, "garden": 856, "utc": 856, "didn": 856, "human": 856, "intervent": 856, "typo": 856, "ui": 856, "handle_array_like_without_promot": [857, 859], "to_native_arrays_and_back": [857, 859, 870], "handle_array_funct": [857, 859], "inputs_to_native_shap": [857, 859], "rational": [857, 861, 868], "__div__": [857, 868], "484": 857, "brittl": 857, "freeli": 857, "technic": [857, 861, 872, 884], "original_typ": 857, "cumbersom": 857, "hinder": [857, 876], "venn": 858, "diagram": 858, "light": [858, 866, 872, 874, 885], "maximis": 858, "encompass": 858, "partial_mixed_handl": [858, 859, 868], "handle_partial_mixed_funct": [858, 859, 868], "fn_decor": 858, "mixed_backend_wrapp": [858, 861], "to_add": 858, "to_skip": 858, "inputs_to_ivy_arrai": [858, 859], "modif": [858, 884], "briefli": [858, 865], "get_all_arrays_on_dev": 858, "outputs_to_ivy_shap": 859, "outputs_to_native_arrai": 859, "handle_view_index": [859, 861], "handle_view": [859, 861], "handle_rag": 859, "handle_backend_invalid": 859, "handle_nan": 859, "to_native_shapes_and_back": 859, "modern": 860, "inter_func": 860, "custom_grad_fn": 860, "args1": 860, "speak": 861, "val_n": 861, "base_idx": 861, "_manipulation_stack": 861, "base_flat": 861, "_view_ref": 861, "_update_view": 861, "contigu": 861, "c_contigu": 861, "ascontiguousarrai": 861, "copyto": 861, "_is_vari": 861, "tensor_scatter_nd_upd": 861, "is_vari": 861, "_update_torch_view": 861, "predominantli": [861, 866], "support_native_out": [861, 870], "_scalar_output_to_0d_arrai": 861, "_wrap_fn": 861, "dim0": 861, "dim1": 861, "res_floor": 861, "extent": [861, 862], "to_out_fn": 861, "add_wrapp": 861, "paradigm": [861, 872, 876, 884], "expans": [861, 876], "weak": 861, "_torch_bas": 861, "_torch_view_ref": 861, "_torch_manipul": 861, "weakli": 861, "adequ": 861, "tf_frontend": 862, "lax": [862, 863, 868, 870, 872], "torch_frontend": [862, 863], "numpy_frontend": 862, "jax_frontend": 862, "to_ivy_arrays_and_back": [862, 863], "fidel": 862, "algebra": [862, 884, 886], "dynamic": 862, "mimic": 862, "arithmetic_oper": 862, "handle_numpy_out": 862, "handle_numpy_dtyp": 862, "handle_numpy_cast": 862, "from_zero_dim_arrays_to_scalar": 862, "_add": 862, "same_kind": 862, "subok": [862, 863, 868], "promote_types_of_numpy_input": 862, "underscor": 862, "unhandl": 862, "trigonometric_funct": 862, "_tan": 862, "check_tensorflow_cast": 862, "raw_op": [862, 863], "map_raw_ops_alia": 862, "output_typ": 862, "kwargs_to_upd": 862, "pointwise_op": 862, "sensibl": 862, "ahead": [862, 866, 884], "reduce_logsumexp": 862, "logsumexp": 862, "trick": 862, "max_input_tensor": 862, "preferred_element_typ": 862, "languag": [862, 871, 874, 885], "finer": 862, "logicaland": 862, "np_frontend": 862, "_ivy_arrai": 862, "radd": 862, "_init_data": 862, "_process_str_data": 862, "_dtype": [862, 863], "_shape": 862, "govern": 862, "promote_types_of_": 862, "_input": 862, "promote_types_of_torch_input": [862, 863], "handle_numpy_casting_speci": 862, "new_fn": 862, "equiv": 862, "unsaf": 862, "array_type_test": 862, "_isfinit": 862, "organis": 862, "youtub": 862, "knowledg": [863, 877], "np_frontend_help": 863, "open_task": 863, "test_lax": 863, "test_oper": 863, "test_jax_tan": 863, "test_mathematical_funct": 863, "test_trigonometric_funct": 863, "dtypes_values_cast": 863, "dtypes_values_casting_dtyp": 863, "arr_func": 863, "get_num_positional_args_ufunc": 863, "test_numpy_tan": 863, "handle_where_and_array_bool": 863, "test_tensorflow": 863, "test_math": 863, "test_tensorflow_tan": 863, "test_pointwise_op": 863, "test_torch_tan": 863, "_fill_valu": 863, "test_glob": 863, "test_jax_ful": 863, "test_from_shape_or_valu": 863, "_input_fill_and_dtyp": 863, "dtype_and_input": 863, "dtype_to_cast": 863, "input_fill_dtyp": 863, "test_numpy_ful": 863, "test_raw_op": 863, "test_tensorflow_fil": 863, "test_creation_op": 863, "with_arrai": 863, "test_torch_ful": 863, "add_nois": 863, "all_clos": 863, "_get_dtype_and_matrix": 863, "test_torch_qr": 863, "frontend_q": 863, "frontend_r": 863, "walkthrough": 863, "comparison_op": 863, "test_comparison_op": 863, "test_torch_great": 863, "all_alias": 863, "test_ndarrai": 863, "test_numpy_instance_add__": 863, "test_tensorflow_instance_add": 863, "1e04": 863, "allow_infin": 863, "test_torch_instance_add": 863, "_arrays_idx_n_dtyp": 863, "surprisingli": 863, "closest_relevant_group": 863, "strive": [863, 865, 868, 872], "craft": [864, 865], "tailor": 864, "clariti": [864, 865, 868, 884], "weav": 864, "thrill": 864, "brim": 864, "stand": [864, 865], "landscap": [864, 877], "forese": 864, "refin": 864, "inquiri": 864, "fixtur": 865, "hit": [865, 880], "eleg": [865, 884], "unexplor": 865, "artifact": 865, "bespok": 865, "_array_or_typ": 865, "rigor": 865, "test_default_int_dtyp": 865, "print_hypothesis_exampl": 865, "custom_strategi": 865, "randomis": 865, "simplist": 865, "intricaci": 865, "glanc": 865, "one_of": 865, "datum": 865, "pipe": 865, "array_or_scal": 865, "len_of_arrai": 865, "test_add": 865, "test_gpu_is_avail": 865, "pretest": 865, "snippet": [865, 879], "frontend_test": 865, "frontend_method": 865, "criterion": 865, "valid_ax": 865, "hoc": 865, "11228": 865, "268": 865, "wherev": 865, "9622": 865, "28136": 865, "6375": 865, "12720": 865, "21354": 865, "900e": 865, "57384": 865, "25687": 865, "248": 865, "test_devic": 865, "array_shap": 865, "test_lay": 865, "some_sequ": 865, "arrays_valu": 865, "36418": 865, "21716926": 865, "none_or_list_of_float": 865, "get_prob": 865, "103515625e": 865, "099609375": 865, "probabilist": 865, "number_positional_argu": 865, "unreproduc": 865, "x_and_linear": 865, "is_torch_backend": 865, "x_shape": [865, 870], "weight_shap": 865, "bias_shap": 865, "ivy_np": 865, "valid_float_dtyp": 865, "test_demo": 865, "failing_test": 865, "shrink": 865, "prescrib": 865, "test_gelu": 865, "test_fil": 865, "notabl": [865, 884], "max_exampl": 865, "deadlin": 865, "weird": 865, "systemat": 865, "safeguard": 865, "inabl": 865, "test_result_typ": 865, "9090909090909091": 865, "judgement": 866, "some_namespac": 866, "some_backend": 866, "another_backend": 866, "refactor": 866, "ongo": 866, "check_fill_value_and_dtype_are_compat": 866, "_to_devic": 866, "shouldn": [866, 880], "pin": 866, "unpinn": 866, "culmin": 866, "unsett": 867, "array_significant_figur": 867, "array_decimal_valu": 867, "warning_level": 867, "nan_polici": 867, "stablest": 867, "constantli": 868, "answer": [868, 872], "contradict": 868, "entail": 868, "sacrif": 868, "jacfwd": 868, "jacrev": 868, "banner": 868, "expens": 868, "incredibli": [868, 872, 876], "price": 868, "pai": 868, "intrus": 868, "x_beta": 868, "equip": 868, "simplif": 868, "allevi": 868, "ineffici": [868, 872, 884], "fuse": 868, "hybrid": 868, "workaround": 868, "slip": 868, "radar": 868, "stumbl": 868, "syntact": 870, "power_seq": 870, "sparse_funct": 870, "_determine_backend_from_arg": 870, "importlib": 870, "_backend_dict": 870, "x_flat": 870, "wi": 870, "wi_x": 870, "wii_x": 870, "wif_x": 870, "wig_x": 870, "wio_x": 870, "wh": 870, "ht": 870, "ct": 870, "hts_list": 870, "wii_xt": 870, "wif_xt": 870, "wig_xt": 870, "wio_xt": 870, "htm1": 870, "ctm1": 870, "wh_htm1": 870, "whi_htm1": 870, "whf_htm1": 870, "whg_htm1": 870, "who_htm1": 870, "ft": 870, "ot": 870, "reliabl": 870, "sacrific": 870, "_linear": 871, "tfnetwork": 871, "translated_output": 871, "pure_ivi": 871, "pure_torch": 871, "unclean": 871, "wx": 871, "temp": 871, "ivy_func": 871, "emphas": 871, "example_input": 871, "static_argnum": [871, 880], "static_argnam": [871, 880], "matur": [872, 884], "doubt": 872, "grate": 872, "probe": 872, "lock": 872, "dex": 872, "primit": [872, 884], "tricki": [872, 874], "tight": 872, "dispatch": [872, 884], "ast": 872, "autodiff": 872, "shine": 872, "merci": 872, "compet": [872, 884], "parallelis": 872, "spmd": 872, "mixtur": 872, "expert": 872, "sophist": 872, "depart": 872, "hundr": 872, "broadli": 872, "supplementari": 872, "reusabl": [872, 884], "fanci": [872, 884], "fusion": 872, "lose": 872, "pmap": 872, "eventu": 872, "supplement": 872, "backdoor": 872, "callback": 872, "somewhat": [872, 884], "outsourc": 872, "appl": 873, "silicon": 873, "ivy_root": 873, "asap": 873, "nail": 874, "scientist": 874, "handler": 874, "correl": 874, "con": 876, "renown": 876, "traction": [876, 884], "invest": 876, "worsen": 876, "mlx": 876, "exemplifi": 876, "diversif": 876, "painless": 876, "interoper": [877, 884, 886], "divers": [877, 886], "downstream": 877, "consequ": 877, "colleagu": 877, "collabor": 877, "constrain": 877, "prototyp": [877, 884], "legaci": 877, "painstak": 877, "debug_mod": 879, "lazygraph": [879, 880, 882], "rough": 879, "transformed_with_st": 879, "bigger": 879, "hf": 879, "resnetforimageclassif": [879, 880], "publicli": [880, 882], "logger": 880, "arg_stateful_idx": 880, "kwarg_stateful_idx": 880, "include_gener": 880, "array_cach": 880, "return_backend_traced_fn": 880, "sum_j": 880, "traced_fn": 880, "impos": 880, "comp_func": 880, "bake": 880, "cont": 880, "new_attribut": 880, "wip": 880, "resnet50": 880, "breed": 880, "traced_graph": 880, "predicted_label": 880, "methodtyp": 881, "functiontyp": 881, "transpile_kwarg": 882, "transpiled_func": 882, "unified_func": 882, "one_lin": 882, "onnx": 883, "acycl": [883, 885], "promin": 884, "abbrevi": 884, "laboratori": 884, "proprietari": 884, "mathwork": 884, "commerci": 884, "1984": 884, "toolbox": 884, "mupad": 884, "simulink": 884, "graphic": 884, "simul": 884, "million": 884, "worldwid": 884, "scienc": 884, "econom": 884, "2001": 884, "od": 884, "solver": 884, "cython": 884, "friendli": 884, "2002": 884, "lua": 884, "luajit": 884, "idiap": 884, "epfl": 884, "2005": 884, "numarrai": 884, "cpython": 884, "partli": 884, "2007": 884, "forest": 884, "boost": 884, "dbscan": 884, "inbuilt": 884, "esqu": 884, "aesara": 884, "2012": 884, "polymorph": 884, "mpi": 884, "openmp": 884, "glue": 884, "jaot": 884, "nasa": 884, "cern": 884, "climat": 884, "allianc": 884, "influenti": 884, "2014": 884, "scala": 884, "ship": 884, "forgiv": 884, "2015": 884, "cupi": 884, "decemb": 884, "announc": 884, "mainten": 884, "meaning": 884, "hierarch": 884, "2016": 884, "imper": 884, "amazon": 884, "cognit": 884, "grade": 884, "dnn": 884, "backpropag": 884, "succumb": 884, "came": 884, "monitor": 884, "hobbyist": 884, "tremend": 884, "gear": 884, "batteri": 884, "principl": 884, "zygot": 884, "jl": 884, "workload": 884, "daggerflux": 884, "frontier": 884, "hessian": 884, "2018": 884, "lightweight": 884, "shortcom": 884, "barrier": 884, "inexperienc": 884, "underdevelop": 884, "fanat": 884, "ounc": 884, "infanc": 884, "nich": 884, "mobil": 884, "lite": 884, "enterpris": 884, "reinvent": 884, "inertia": 884, "creator": 884, "paszk": 884, "spend": 884, "hi": 884, "bulk": 884, "haskel": 884, "inevit": 885, "sit": 885, "dataflow": 885, "trace_modul": 885, "scriptfunct": 885, "scriptmodul": 885, "fake": 885, "proxi": 885, "graphmodul": 885, "holist": 886, "ultmat": 886, "broader": 886}, "objects": {"ivy.Array": [[235, 0, 1, "", "abs"], [236, 0, 1, "", "acos"], [237, 0, 1, "", "acosh"], [631, 0, 1, "", "adam_step"], [632, 0, 1, "", "adam_update"], [404, 0, 1, "", "adaptive_avg_pool1d"], [405, 0, 1, "", "adaptive_avg_pool2d"], [406, 0, 1, "", "adaptive_max_pool2d"], [407, 0, 1, "", "adaptive_max_pool3d"], [238, 0, 1, "", "add"], [439, 0, 1, "", "adjoint"], [787, 0, 1, "", "all"], [550, 0, 1, "", "all_equal"], [349, 0, 1, "", "allclose"], [350, 0, 1, "", "amax"], [351, 0, 1, "", "amin"], [239, 0, 1, "", "angle"], [788, 0, 1, "", "any"], [764, 0, 1, "", "argmax"], [765, 0, 1, "", "argmin"], [773, 0, 1, "", "argsort"], [766, 0, 1, "", "argwhere"], [553, 0, 1, "", "array_equal"], [475, 0, 1, "", "as_strided"], [142, 0, 1, "", "asarray"], [240, 0, 1, "", "asin"], [241, 0, 1, "", "asinh"], [554, 0, 1, "", "assert_supports_inplace"], [476, 0, 1, "", "associative_scan"], [167, 0, 1, "", "astype"], [242, 0, 1, "", "atan"], [243, 0, 1, "", "atan2"], [244, 0, 1, "", "atanh"], [477, 0, 1, "", "atleast_1d"], [478, 0, 1, "", "atleast_2d"], [479, 0, 1, "", "atleast_3d"], [409, 0, 1, "", "avg_pool1d"], [410, 0, 1, "", "avg_pool2d"], [411, 0, 1, "", "avg_pool3d"], [517, 0, 1, "", "batch_norm"], [440, 0, 1, "", "batched_outer"], [524, 0, 1, "", "bernoulli"], [525, 0, 1, "", "beta"], [352, 0, 1, "", "binarizer"], [713, 0, 1, "", "binary_cross_entropy"], [536, 0, 1, "", "bincount"], [245, 0, 1, "", "bitwise_and"], [246, 0, 1, "", "bitwise_invert"], [247, 0, 1, "", "bitwise_left_shift"], [248, 0, 1, "", "bitwise_or"], [249, 0, 1, "", "bitwise_right_shift"], [250, 0, 1, "", "bitwise_xor"], [327, 0, 1, "", "blackman_window"], [168, 0, 1, "", "broadcast_arrays"], [169, 0, 1, "", "broadcast_to"], [170, 0, 1, "", "can_cast"], [251, 0, 1, "", "ceil"], [310, 0, 1, "", "celu"], [684, 0, 1, "", "cholesky"], [719, 0, 1, "", "clip"], [556, 0, 1, "", "clip_matrix_norm"], [557, 0, 1, "", "clip_vector_norm"], [483, 0, 1, "", "column_stack"], [720, 0, 1, "", "concat"], [484, 0, 1, "", "concat_from_sequence"], [441, 0, 1, "", "cond"], [353, 0, 1, "", "conj"], [721, 0, 1, "", "constant_pad"], [667, 0, 1, "", "conv1d"], [668, 0, 1, "", "conv1d_transpose"], [669, 0, 1, "", "conv2d"], [670, 0, 1, "", "conv2d_transpose"], [671, 0, 1, "", "conv3d"], [672, 0, 1, "", "conv3d_transpose"], [144, 0, 1, "", "copy_array"], [354, 0, 1, "", "copysign"], [537, 0, 1, "", "corrcoef"], [252, 0, 1, "", "cos"], [253, 0, 1, "", "cosh"], [355, 0, 1, "", "count_nonzero"], [538, 0, 1, "", "cov"], [685, 0, 1, "", "cross"], [714, 0, 1, "", "cross_entropy"], [539, 0, 1, "", "cummax"], [540, 0, 1, "", "cummin"], [777, 0, 1, "", "cumprod"], [778, 0, 1, "", "cumsum"], [412, 0, 1, "", "dct"], [560, 0, 1, "", "default"], [254, 0, 1, "", "deg2rad"], [675, 0, 1, "", "depthwise_conv2d"], [686, 0, 1, "", "det"], [212, 0, 1, "", "dev"], [413, 0, 1, "", "dft"], [687, 0, 1, "", "diag"], [442, 0, 1, "", "diagflat"], [688, 0, 1, "", "diagonal"], [356, 0, 1, "", "diff"], [357, 0, 1, "", "digamma"], [526, 0, 1, "", "dirichlet"], [255, 0, 1, "", "divide"], [443, 0, 1, "", "dot"], [676, 0, 1, "", "dropout"], [414, 0, 1, "", "dropout1d"], [415, 0, 1, "", "dropout2d"], [416, 0, 1, "", "dropout3d"], [485, 0, 1, "", "dsplit"], [486, 0, 1, "", "dstack"], [178, 0, 1, "", "dtype"], [444, 0, 1, "", "eig"], [690, 0, 1, "", "eigh"], [445, 0, 1, "", "eigh_tridiagonal"], [446, 0, 1, "", "eigvals"], [691, 0, 1, "", "eigvalsh"], [561, 0, 1, "", "einops_rearrange"], [562, 0, 1, "", "einops_reduce"], [563, 0, 1, "", "einops_repeat"], [779, 0, 1, "", "einsum"], [311, 0, 1, "", "elu"], [417, 0, 1, "", "embedding"], [146, 0, 1, "", "empty_like"], [256, 0, 1, "", "equal"], [257, 0, 1, "", "erf"], [358, 0, 1, "", "erfc"], [359, 0, 1, "", "erfinv"], [564, 0, 1, "", "exists"], [258, 0, 1, "", "exp"], [259, 0, 1, "", "exp2"], [487, 0, 1, "", "expand"], [722, 0, 1, "", "expand_dims"], [260, 0, 1, "", "expm1"], [328, 0, 1, "", "eye_like"], [418, 0, 1, "", "fft"], [419, 0, 1, "", "fft2"], [488, 0, 1, "", "fill_diagonal"], [180, 0, 1, "", "finfo"], [360, 0, 1, "", "fix"], [489, 0, 1, "", "flatten"], [723, 0, 1, "", "flip"], [490, 0, 1, "", "fliplr"], [491, 0, 1, "", "flipud"], [361, 0, 1, "", "float_power"], [261, 0, 1, "", "floor"], [262, 0, 1, "", "floor_divide"], [362, 0, 1, "", "fmax"], [263, 0, 1, "", "fmin"], [264, 0, 1, "", "fmod"], [492, 0, 1, "", "fold"], [565, 0, 1, "", "fourier_encode"], [363, 0, 1, "", "frexp"], [148, 0, 1, "", "from_dlpack"], [151, 0, 1, "", "full_like"], [527, 0, 1, "", "gamma"], [568, 0, 1, "", "gather"], [569, 0, 1, "", "gather_nd"], [265, 0, 1, "", "gcd"], [124, 0, 1, "", "gelu"], [447, 0, 1, "", "general_inner_product"], [572, 0, 1, "", "get_num_dims"], [364, 0, 1, "", "gradient"], [635, 0, 1, "", "gradient_descent_update"], [266, 0, 1, "", "greater"], [267, 0, 1, "", "greater_equal"], [518, 0, 1, "", "group_norm"], [312, 0, 1, "", "hardshrink"], [313, 0, 1, "", "hardsilu"], [125, 0, 1, "", "hardswish"], [314, 0, 1, "", "hardtanh"], [574, 0, 1, "", "has_nans"], [493, 0, 1, "", "heaviside"], [448, 0, 1, "", "higher_order_moment"], [467, 0, 1, "", "hinge_embedding_loss"], [541, 0, 1, "", "histogram"], [494, 0, 1, "", "hsplit"], [495, 0, 1, "", "hstack"], [468, 0, 1, "", "huber_loss"], [365, 0, 1, "", "hypot"], [496, 0, 1, "", "i0"], [422, 0, 1, "", "idct"], [423, 0, 1, "", "ifft"], [424, 0, 1, "", "ifftn"], [542, 0, 1, "", "igamma"], [183, 0, 1, "", "iinfo"], [268, 0, 1, "", "imag"], [449, 0, 1, "", "initialize_tucker"], [692, 0, 1, "", "inner"], [576, 0, 1, "", "inplace_decrement"], [577, 0, 1, "", "inplace_increment"], [578, 0, 1, "", "inplace_update"], [519, 0, 1, "", "instance_norm"], [426, 0, 1, "", "interpolate"], [693, 0, 1, "", "inv"], [580, 0, 1, "", "is_array"], [186, 0, 1, "", "is_bool_dtype"], [188, 0, 1, "", "is_float_dtype"], [190, 0, 1, "", "is_int_dtype"], [581, 0, 1, "", "is_ivy_array"], [582, 0, 1, "", "is_ivy_container"], [584, 0, 1, "", "is_native_array"], [192, 0, 1, "", "is_uint_dtype"], [366, 0, 1, "", "isclose"], [269, 0, 1, "", "isfinite"], [585, 0, 1, "", "isin"], [270, 0, 1, "", "isinf"], [271, 0, 1, "", "isnan"], [272, 0, 1, "", "isreal"], [587, 0, 1, "", "itemsize"], [469, 0, 1, "", "kl_div"], [451, 0, 1, "", "kron"], [470, 0, 1, "", "l1_loss"], [520, 0, 1, "", "l1_normalize"], [521, 0, 1, "", "l2_normalize"], [637, 0, 1, "", "lamb_update"], [638, 0, 1, "", "lars_update"], [757, 0, 1, "", "layer_norm"], [273, 0, 1, "", "lcm"], [367, 0, 1, "", "ldexp"], [126, 0, 1, "", "leaky_relu"], [368, 0, 1, "", "lerp"], [274, 0, 1, "", "less"], [275, 0, 1, "", "less_equal"], [531, 0, 1, "", "lexsort"], [369, 0, 1, "", "lgamma"], [677, 0, 1, "", "linear"], [152, 0, 1, "", "linspace"], [276, 0, 1, "", "log"], [277, 0, 1, "", "log10"], [278, 0, 1, "", "log1p"], [279, 0, 1, "", "log2"], [471, 0, 1, "", "log_poisson_loss"], [127, 0, 1, "", "log_softmax"], [280, 0, 1, "", "logaddexp"], [281, 0, 1, "", "logaddexp2"], [282, 0, 1, "", "logical_and"], [283, 0, 1, "", "logical_not"], [284, 0, 1, "", "logical_or"], [285, 0, 1, "", "logical_xor"], [315, 0, 1, "", "logit"], [316, 0, 1, "", "logsigmoid"], [153, 0, 1, "", "logspace"], [523, 0, 1, "", "lp_normalize"], [679, 0, 1, "", "lstm_update"], [455, 0, 1, "", "make_svd_non_negative"], [694, 0, 1, "", "matmul"], [497, 0, 1, "", "matricize"], [456, 0, 1, "", "matrix_exp"], [695, 0, 1, "", "matrix_norm"], [696, 0, 1, "", "matrix_power"], [697, 0, 1, "", "matrix_rank"], [698, 0, 1, "", "matrix_transpose"], [780, 0, 1, "", "max"], [427, 0, 1, "", "max_pool1d"], [428, 0, 1, "", "max_pool2d"], [429, 0, 1, "", "max_pool3d"], [430, 0, 1, "", "max_unpool1d"], [286, 0, 1, "", "maximum"], [781, 0, 1, "", "mean"], [543, 0, 1, "", "median"], [334, 0, 1, "", "mel_weight_matrix"], [154, 0, 1, "", "meshgrid"], [782, 0, 1, "", "min"], [287, 0, 1, "", "minimum"], [128, 0, 1, "", "mish"], [457, 0, 1, "", "mode_dot"], [370, 0, 1, "", "modf"], [498, 0, 1, "", "moveaxis"], [774, 0, 1, "", "msort"], [458, 0, 1, "", "multi_dot"], [680, 0, 1, "", "multi_head_attention"], [459, 0, 1, "", "multi_mode_dot"], [758, 0, 1, "", "multinomial"], [288, 0, 1, "", "multiply"], [289, 0, 1, "", "nan_to_num"], [544, 0, 1, "", "nanmean"], [545, 0, 1, "", "nanmedian"], [546, 0, 1, "", "nanmin"], [547, 0, 1, "", "nanprod"], [371, 0, 1, "", "nansum"], [155, 0, 1, "", "native_array"], [290, 0, 1, "", "negative"], [372, 0, 1, "", "nextafter"], [767, 0, 1, "", "nonzero"], [291, 0, 1, "", "not_equal"], [156, 0, 1, "", "one_hot"], [158, 0, 1, "", "ones_like"], [639, 0, 1, "", "optimizer_update"], [549, 0, 1, "", "optional_get_element"], [699, 0, 1, "", "outer"], [499, 0, 1, "", "pad"], [501, 0, 1, "", "partial_fold"], [502, 0, 1, "", "partial_tensor_to_vec"], [460, 0, 1, "", "partial_tucker"], [503, 0, 1, "", "partial_unfold"], [504, 0, 1, "", "partial_vec_to_tensor"], [724, 0, 1, "", "permute_dims"], [700, 0, 1, "", "pinv"], [528, 0, 1, "", "poisson"], [472, 0, 1, "", "poisson_nll_loss"], [292, 0, 1, "", "positive"], [293, 0, 1, "", "pow"], [317, 0, 1, "", "prelu"], [783, 0, 1, "", "prod"], [505, 0, 1, "", "put_along_axis"], [701, 0, 1, "", "qr"], [548, 0, 1, "", "quantile"], [294, 0, 1, "", "rad2deg"], [759, 0, 1, "", "randint"], [760, 0, 1, "", "random_normal"], [761, 0, 1, "", "random_uniform"], [295, 0, 1, "", "real"], [296, 0, 1, "", "reciprocal"], [378, 0, 1, "", "reduce"], [433, 0, 1, "", "reduce_window"], [129, 0, 1, "", "relu"], [318, 0, 1, "", "relu6"], [297, 0, 1, "", "remainder"], [725, 0, 1, "", "repeat"], [726, 0, 1, "", "reshape"], [195, 0, 1, "", "result_type"], [434, 0, 1, "", "rfft"], [435, 0, 1, "", "rfftn"], [727, 0, 1, "", "roll"], [506, 0, 1, "", "rot90"], [298, 0, 1, "", "round"], [683, 0, 1, "", "scaled_dot_product_attention"], [319, 0, 1, "", "scaled_tanh"], [592, 0, 1, "", "scatter_flat"], [593, 0, 1, "", "scatter_nd"], [775, 0, 1, "", "searchsorted"], [320, 0, 1, "", "selu"], [606, 0, 1, "", "shape"], [763, 0, 1, "", "shuffle"], [130, 0, 1, "", "sigmoid"], [299, 0, 1, "", "sign"], [373, 0, 1, "", "signbit"], [321, 0, 1, "", "silu"], [300, 0, 1, "", "sin"], [374, 0, 1, "", "sinc"], [301, 0, 1, "", "sinh"], [607, 0, 1, "", "size"], [437, 0, 1, "", "sliding_window"], [702, 0, 1, "", "slogdet"], [473, 0, 1, "", "smooth_l1_loss"], [474, 0, 1, "", "soft_margin_loss"], [507, 0, 1, "", "soft_thresholding"], [131, 0, 1, "", "softmax"], [132, 0, 1, "", "softplus"], [322, 0, 1, "", "softshrink"], [703, 0, 1, "", "solve"], [776, 0, 1, "", "sort"], [715, 0, 1, "", "sparse_cross_entropy"], [375, 0, 1, "", "sparsify_tensor"], [728, 0, 1, "", "split"], [302, 0, 1, "", "sqrt"], [303, 0, 1, "", "square"], [729, 0, 1, "", "squeeze"], [608, 0, 1, "", "stable_divide"], [609, 0, 1, "", "stable_pow"], [730, 0, 1, "", "stack"], [784, 0, 1, "", "std"], [438, 0, 1, "", "stft"], [641, 0, 1, "", "stop_gradient"], [610, 0, 1, "", "strides"], [304, 0, 1, "", "subtract"], [785, 0, 1, "", "sum"], [611, 0, 1, "", "supports_inplace_updates"], [704, 0, 1, "", "svd"], [462, 0, 1, "", "svd_flip"], [705, 0, 1, "", "svdvals"], [731, 0, 1, "", "swapaxes"], [508, 0, 1, "", "take"], [509, 0, 1, "", "take_along_axis"], [305, 0, 1, "", "tan"], [306, 0, 1, "", "tanh"], [324, 0, 1, "", "tanhshrink"], [463, 0, 1, "", "tensor_train"], [706, 0, 1, "", "tensordot"], [707, 0, 1, "", "tensorsolve"], [325, 0, 1, "", "threshold"], [326, 0, 1, "", "thresholded_relu"], [732, 0, 1, "", "tile"], [229, 0, 1, "", "to_device"], [613, 0, 1, "", "to_list"], [615, 0, 1, "", "to_numpy"], [616, 0, 1, "", "to_scalar"], [510, 0, 1, "", "top_k"], [708, 0, 1, "", "trace"], [307, 0, 1, "", "trapz"], [160, 0, 1, "", "tril"], [344, 0, 1, "", "trilu"], [511, 0, 1, "", "trim_zeros"], [161, 0, 1, "", "triu"], [308, 0, 1, "", "trunc"], [309, 0, 1, "", "trunc_divide"], [464, 0, 1, "", "truncated_svd"], [465, 0, 1, "", "tt_matrix_to_tensor"], [466, 0, 1, "", "tucker"], [512, 0, 1, "", "unflatten"], [513, 0, 1, "", "unfold"], [769, 0, 1, "", "unique_all"], [514, 0, 1, "", "unique_consecutive"], [770, 0, 1, "", "unique_counts"], [771, 0, 1, "", "unique_inverse"], [772, 0, 1, "", "unique_values"], [529, 0, 1, "", "unravel_index"], [345, 0, 1, "", "unsorted_segment_mean"], [346, 0, 1, "", "unsorted_segment_min"], [347, 0, 1, "", "unsorted_segment_sum"], [733, 0, 1, "", "unstack"], [629, 0, 1, "", "value_is_nan"], [709, 0, 1, "", "vander"], [786, 0, 1, "", "var"], [710, 0, 1, "", "vecdot"], [711, 0, 1, "", "vector_norm"], [712, 0, 1, "", "vector_to_skew_symmetric_matrix"], [515, 0, 1, "", "vsplit"], [516, 0, 1, "", "vstack"], [768, 0, 1, "", "where"], [376, 0, 1, "", "xlogy"], [734, 0, 1, "", "zero_pad"], [164, 0, 1, "", "zeros_like"], [377, 0, 1, "", "zeta"]], "ivy": [[651, 1, 1, "", "ArrayMode"], [647, 1, 1, "", "DefaultComplexDtype"], [648, 1, 1, "", "DefaultDevice"], [647, 1, 1, "", "DefaultDtype"], [647, 1, 1, "", "DefaultFloatDtype"], [647, 1, 1, "", "DefaultIntDtype"], [647, 1, 1, "", "DefaultUintDtype"], [401, 1, 1, "", "NativeSparseArray"], [646, 1, 1, "", "NestedSequence"], [651, 1, 1, "", "PreciseMode"], [648, 1, 1, "", "Profiler"], [401, 1, 1, "", "SparseArray"], [235, 2, 1, "", "abs"], [236, 2, 1, "", "acos"], [237, 2, 1, "", "acosh"], [652, 2, 1, "", "adam_step"], [652, 2, 1, "", "adam_update"], [404, 2, 1, "", "adaptive_avg_pool1d"], [405, 2, 1, "", "adaptive_avg_pool2d"], [406, 2, 1, "", "adaptive_max_pool2d"], [407, 2, 1, "", "adaptive_max_pool3d"], [238, 2, 1, "", "add"], [391, 2, 1, "", "adjoint"], [665, 2, 1, "", "all"], [651, 2, 1, "", "all_equal"], [658, 2, 1, "", "all_nested_indices"], [387, 2, 1, "", "allclose"], [387, 2, 1, "", "amax"], [387, 2, 1, "", "amin"], [239, 2, 1, "", "angle"], [665, 2, 1, "", "any"], [646, 2, 1, "", "arange"], [408, 2, 1, "", "area_interpolate"], [651, 2, 1, "", "arg_info"], [651, 2, 1, "", "arg_names"], [661, 2, 1, "", "argmax"], [661, 2, 1, "", "argmin"], [663, 2, 1, "", "argsort"], [661, 2, 1, "", "argwhere"], [646, 2, 1, "", "array"], [651, 2, 1, "", "array_equal"], [208, 2, 1, "", "as_ivy_dev"], [647, 2, 1, "", "as_ivy_dtype"], [209, 2, 1, "", "as_native_dev"], [647, 2, 1, "", "as_native_dtype"], [393, 2, 1, "", "as_strided"], [646, 2, 1, "", "asarray"], [240, 2, 1, "", "asin"], [241, 2, 1, "", "asinh"], [651, 2, 1, "", "assert_supports_inplace"], [393, 2, 1, "", "associative_scan"], [647, 2, 1, "", "astype"], [242, 2, 1, "", "atan"], [243, 2, 1, "", "atan2"], [244, 2, 1, "", "atanh"], [393, 2, 1, "", "atleast_1d"], [393, 2, 1, "", "atleast_2d"], [393, 2, 1, "", "atleast_3d"], [409, 2, 1, "", "avg_pool1d"], [410, 2, 1, "", "avg_pool2d"], [411, 2, 1, "", "avg_pool3d"], [396, 2, 1, "", "batch_norm"], [391, 2, 1, "", "batched_outer"], [397, 2, 1, "", "bernoulli"], [397, 2, 1, "", "beta"], [387, 2, 1, "", "binarizer"], [655, 2, 1, "", "binary_cross_entropy"], [402, 2, 1, "", "bincount"], [389, 2, 1, "", "bind_custom_gradient_function"], [245, 2, 1, "", "bitwise_and"], [246, 2, 1, "", "bitwise_invert"], [247, 2, 1, "", "bitwise_left_shift"], [248, 2, 1, "", "bitwise_or"], [249, 2, 1, "", "bitwise_right_shift"], [250, 2, 1, "", "bitwise_xor"], [384, 2, 1, "", "blackman_window"], [647, 2, 1, "", "broadcast_arrays"], [393, 2, 1, "", "broadcast_shapes"], [647, 2, 1, "", "broadcast_to"], [651, 2, 1, "", "cache_fn"], [647, 2, 1, "", "can_cast"], [251, 2, 1, "", "ceil"], [382, 2, 1, "", "celu"], [647, 2, 1, "", "check_float"], [393, 2, 1, "", "check_scalar"], [654, 2, 1, "", "cholesky"], [393, 2, 1, "", "choose"], [210, 2, 1, "", "clear_cached_mem_on_dev"], [656, 2, 1, "", "clip"], [651, 2, 1, "", "clip_matrix_norm"], [651, 2, 1, "", "clip_vector_norm"], [647, 2, 1, "", "closest_valid_dtype"], [645, 2, 1, "", "cmp_is"], [645, 2, 1, "", "cmp_isnot"], [393, 2, 1, "", "column_stack"], [646, 2, 1, "", "complex"], [656, 2, 1, "", "concat"], [393, 2, 1, "", "concat_from_sequence"], [391, 2, 1, "", "cond"], [387, 2, 1, "", "conj"], [656, 2, 1, "", "constant_pad"], [651, 2, 1, "", "container_types"], [653, 2, 1, "", "conv"], [653, 2, 1, "", "conv1d"], [653, 2, 1, "", "conv1d_transpose"], [653, 2, 1, "", "conv2d"], [653, 2, 1, "", "conv2d_transpose"], [653, 2, 1, "", "conv3d"], [653, 2, 1, "", "conv3d_transpose"], [653, 2, 1, "", "conv_general_dilated"], [653, 2, 1, "", "conv_general_transpose"], [646, 2, 1, "", "copy_array"], [658, 2, 1, "", "copy_nest"], [387, 2, 1, "", "copysign"], [402, 2, 1, "", "corrcoef"], [252, 2, 1, "", "cos"], [253, 2, 1, "", "cosh"], [387, 2, 1, "", "count_nonzero"], [402, 2, 1, "", "cov"], [654, 2, 1, "", "cross"], [655, 2, 1, "", "cross_entropy"], [402, 2, 1, "", "cummax"], [402, 2, 1, "", "cummin"], [664, 2, 1, "", "cumprod"], [664, 2, 1, "", "cumsum"], [651, 2, 1, "", "current_backend_str"], [412, 2, 1, "", "dct"], [651, 2, 1, "", "default"], [647, 2, 1, "", "default_complex_dtype"], [211, 2, 1, "", "default_device"], [647, 2, 1, "", "default_dtype"], [647, 2, 1, "", "default_float_dtype"], [647, 2, 1, "", "default_int_dtype"], [647, 2, 1, "", "default_uint_dtype"], [254, 2, 1, "", "deg2rad"], [653, 2, 1, "", "depthwise_conv2d"], [654, 2, 1, "", "det"], [212, 2, 1, "", "dev"], [213, 2, 1, "", "dev_util"], [413, 2, 1, "", "dft"], [654, 2, 1, "", "diag"], [391, 2, 1, "", "diagflat"], [654, 2, 1, "", "diagonal"], [387, 2, 1, "", "diff"], [387, 2, 1, "", "digamma"], [397, 2, 1, "", "dirichlet"], [255, 2, 1, "", "divide"], [391, 2, 1, "", "dot"], [653, 2, 1, "", "dropout"], [414, 2, 1, "", "dropout1d"], [415, 2, 1, "", "dropout2d"], [416, 2, 1, "", "dropout3d"], [393, 2, 1, "", "dsplit"], [393, 2, 1, "", "dstack"], [647, 2, 1, "", "dtype"], [647, 2, 1, "", "dtype_bits"], [658, 2, 1, "", "duplicate_array_index_chains"], [644, 6, 1, "", "e"], [391, 2, 1, "", "eig"], [654, 2, 1, "", "eigh"], [391, 2, 1, "", "eigh_tridiagonal"], [391, 2, 1, "", "eigvals"], [654, 2, 1, "", "eigvalsh"], [651, 2, 1, "", "einops_rearrange"], [651, 2, 1, "", "einops_reduce"], [651, 2, 1, "", "einops_repeat"], [664, 2, 1, "", "einsum"], [382, 2, 1, "", "elu"], [417, 2, 1, "", "embedding"], [646, 2, 1, "", "empty"], [646, 2, 1, "", "empty_like"], [256, 2, 1, "", "equal"], [257, 2, 1, "", "erf"], [387, 2, 1, "", "erfc"], [387, 2, 1, "", "erfinv"], [652, 2, 1, "", "execute_with_gradients"], [651, 2, 1, "", "exists"], [258, 2, 1, "", "exp"], [259, 2, 1, "", "exp2"], [393, 2, 1, "", "expand"], [656, 2, 1, "", "expand_dims"], [260, 2, 1, "", "expm1"], [646, 2, 1, "", "eye"], [384, 2, 1, "", "eye_like"], [418, 2, 1, "", "fft"], [419, 2, 1, "", "fft2"], [393, 2, 1, "", "fill_diagonal"], [647, 2, 1, "", "finfo"], [387, 2, 1, "", "fix"], [393, 2, 1, "", "flatten"], [656, 2, 1, "", "flip"], [393, 2, 1, "", "fliplr"], [393, 2, 1, "", "flipud"], [387, 2, 1, "", "float_power"], [261, 2, 1, "", "floor"], [262, 2, 1, "", "floor_divide"], [387, 2, 1, "", "fmax"], [263, 2, 1, "", "fmin"], [264, 2, 1, "", "fmod"], [393, 2, 1, "", "fold"], [657, 2, 1, "", "fomaml_step"], [645, 2, 1, "", "for_loop"], [651, 2, 1, "", "fourier_encode"], [387, 2, 1, "", "frexp"], [646, 2, 1, "", "from_dlpack"], [646, 2, 1, "", "frombuffer"], [646, 2, 1, "", "full"], [646, 2, 1, "", "full_like"], [214, 2, 1, "", "function_supported_devices"], [651, 2, 1, "", "function_supported_devices_and_dtypes"], [647, 2, 1, "", "function_supported_dtypes"], [215, 2, 1, "", "function_unsupported_devices"], [651, 2, 1, "", "function_unsupported_devices_and_dtypes"], [647, 2, 1, "", "function_unsupported_dtypes"], [397, 2, 1, "", "gamma"], [651, 2, 1, "", "gather"], [651, 2, 1, "", "gather_nd"], [265, 2, 1, "", "gcd"], [643, 2, 1, "", "gelu"], [391, 2, 1, "", "general_inner_product"], [420, 2, 1, "", "generate_einsum_equation"], [651, 2, 1, "", "get_all_arrays_in_memory"], [216, 2, 1, "", "get_all_ivy_arrays_on_dev"], [421, 2, 1, "", "get_interpolate_kernel"], [651, 2, 1, "", "get_item"], [651, 2, 1, "", "get_num_dims"], [651, 2, 1, "", "get_referrers_recursive"], [217, 2, 1, "", "gpu_is_available"], [652, 2, 1, "", "grad"], [387, 2, 1, "", "gradient"], [652, 2, 1, "", "gradient_descent_update"], [879, 2, 1, "", "graph_transpile"], [266, 2, 1, "", "greater"], [267, 2, 1, "", "greater_equal"], [396, 2, 1, "", "group_norm"], [384, 2, 1, "", "hamming_window"], [218, 2, 1, "", "handle_soft_device_variable"], [384, 2, 1, "", "hann_window"], [382, 2, 1, "", "hardshrink"], [382, 2, 1, "", "hardsilu"], [643, 2, 1, "", "hardswish"], [382, 2, 1, "", "hardtanh"], [651, 2, 1, "", "has_nans"], [393, 2, 1, "", "heaviside"], [391, 2, 1, "", "higher_order_moment"], [392, 2, 1, "", "hinge_embedding_loss"], [402, 2, 1, "", "histogram"], [393, 2, 1, "", "hsplit"], [393, 2, 1, "", "hstack"], [392, 2, 1, "", "huber_loss"], [387, 2, 1, "", "hypot"], [393, 2, 1, "", "i0"], [422, 2, 1, "", "idct"], [645, 2, 1, "", "if_else"], [390, 2, 1, "", "ifft"], [390, 2, 1, "", "ifftn"], [402, 2, 1, "", "igamma"], [647, 2, 1, "", "iinfo"], [268, 2, 1, "", "imag"], [658, 2, 1, "", "index_nest"], [384, 2, 1, "", "indices"], [644, 6, 1, "", "inf"], [647, 2, 1, "", "infer_default_dtype"], [391, 2, 1, "", "initialize_tucker"], [654, 2, 1, "", "inner"], [651, 2, 1, "", "inplace_arrays_supported"], [651, 2, 1, "", "inplace_decrement"], [651, 2, 1, "", "inplace_increment"], [651, 2, 1, "", "inplace_update"], [651, 2, 1, "", "inplace_variables_supported"], [658, 2, 1, "", "insert_into_nest_at_index"], [658, 2, 1, "", "insert_into_nest_at_indices"], [396, 2, 1, "", "instance_norm"], [390, 2, 1, "", "interp"], [390, 2, 1, "", "interpolate"], [654, 2, 1, "", "inv"], [647, 2, 1, "", "invalid_dtype"], [400, 2, 1, "", "invert_permutation"], [651, 2, 1, "", "is_array"], [647, 2, 1, "", "is_bool_dtype"], [647, 2, 1, "", "is_complex_dtype"], [188, 2, 1, "", "is_float_dtype"], [189, 2, 1, "", "is_hashable_dtype"], [190, 2, 1, "", "is_int_dtype"], [651, 2, 1, "", "is_ivy_array"], [651, 2, 1, "", "is_ivy_container"], [651, 2, 1, "", "is_ivy_nested_array"], [401, 2, 1, "", "is_ivy_sparse_array"], [651, 2, 1, "", "is_native_array"], [191, 2, 1, "", "is_native_dtype"], [401, 2, 1, "", "is_native_sparse_array"], [192, 2, 1, "", "is_uint_dtype"], [387, 2, 1, "", "isclose"], [269, 2, 1, "", "isfinite"], [651, 2, 1, "", "isin"], [270, 2, 1, "", "isinf"], [271, 2, 1, "", "isnan"], [272, 2, 1, "", "isreal"], [651, 2, 1, "", "isscalar"], [651, 2, 1, "", "itemsize"], [652, 2, 1, "", "jac"], [389, 2, 1, "", "jvp"], [384, 2, 1, "", "kaiser_bessel_derived_window"], [384, 2, 1, "", "kaiser_window"], [391, 2, 1, "", "khatri_rao"], [392, 2, 1, "", "kl_div"], [391, 2, 1, "", "kron"], [391, 2, 1, "", "kronecker"], [392, 2, 1, "", "l1_loss"], [396, 2, 1, "", "l1_normalize"], [396, 2, 1, "", "l2_normalize"], [652, 2, 1, "", "lamb_update"], [652, 2, 1, "", "lars_update"], [659, 2, 1, "", "layer_norm"], [273, 2, 1, "", "lcm"], [387, 2, 1, "", "ldexp"], [643, 2, 1, "", "leaky_relu"], [387, 2, 1, "", "lerp"], [274, 2, 1, "", "less"], [275, 2, 1, "", "less_equal"], [400, 2, 1, "", "lexsort"], [387, 2, 1, "", "lgamma"], [653, 2, 1, "", "linear"], [646, 2, 1, "", "linspace"], [665, 2, 1, "", "load"], [396, 2, 1, "", "local_response_norm"], [276, 2, 1, "", "log"], [277, 2, 1, "", "log10"], [278, 2, 1, "", "log1p"], [279, 2, 1, "", "log2"], [392, 2, 1, "", "log_poisson_loss"], [643, 2, 1, "", "log_softmax"], [280, 2, 1, "", "logaddexp"], [281, 2, 1, "", "logaddexp2"], [282, 2, 1, "", "logical_and"], [283, 2, 1, "", "logical_not"], [284, 2, 1, "", "logical_or"], [285, 2, 1, "", "logical_xor"], [382, 2, 1, "", "logit"], [382, 2, 1, "", "logsigmoid"], [646, 2, 1, "", "logspace"], [396, 2, 1, "", "lp_normalize"], [653, 2, 1, "", "lstm"], [653, 2, 1, "", "lstm_update"], [391, 2, 1, "", "lu_factor"], [391, 2, 1, "", "lu_solve"], [391, 2, 1, "", "make_svd_non_negative"], [657, 2, 1, "", "maml_step"], [658, 2, 1, "", "map"], [658, 2, 1, "", "map_nest_at_index"], [658, 2, 1, "", "map_nest_at_indices"], [651, 2, 1, "", "match_kwargs"], [654, 2, 1, "", "matmul"], [393, 2, 1, "", "matricize"], [391, 2, 1, "", "matrix_exp"], [654, 2, 1, "", "matrix_norm"], [654, 2, 1, "", "matrix_power"], [654, 2, 1, "", "matrix_rank"], [654, 2, 1, "", "matrix_transpose"], [664, 2, 1, "", "max"], [390, 2, 1, "", "max_pool1d"], [390, 2, 1, "", "max_pool2d"], [390, 2, 1, "", "max_pool3d"], [390, 2, 1, "", "max_unpool1d"], [286, 2, 1, "", "maximum"], [664, 2, 1, "", "mean"], [402, 2, 1, "", "median"], [384, 2, 1, "", "mel_weight_matrix"], [646, 2, 1, "", "meshgrid"], [664, 2, 1, "", "min"], [287, 2, 1, "", "minimum"], [643, 2, 1, "", "mish"], [391, 2, 1, "", "mode_dot"], [387, 2, 1, "", "modf"], [393, 2, 1, "", "moveaxis"], [663, 2, 1, "", "msort"], [391, 2, 1, "", "multi_dot"], [653, 2, 1, "", "multi_head_attention"], [658, 2, 1, "", "multi_index_nest"], [391, 2, 1, "", "multi_mode_dot"], [660, 2, 1, "", "multinomial"], [288, 2, 1, "", "multiply"], [651, 2, 1, "", "multiprocessing"], [644, 6, 1, "", "nan"], [289, 2, 1, "", "nan_to_num"], [402, 2, 1, "", "nanmean"], [402, 2, 1, "", "nanmedian"], [402, 2, 1, "", "nanmin"], [402, 2, 1, "", "nanprod"], [387, 2, 1, "", "nansum"], [646, 2, 1, "", "native_array"], [401, 2, 1, "", "native_sparse_array"], [401, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [384, 2, 1, "", "ndenumerate"], [384, 2, 1, "", "ndindex"], [390, 2, 1, "", "nearest_interpolate"], [290, 2, 1, "", "negative"], [658, 2, 1, "", "nested_any"], [658, 2, 1, "", "nested_argwhere"], [658, 2, 1, "", "nested_map"], [658, 2, 1, "", "nested_multi_map"], [644, 6, 1, "", "newaxis"], [387, 2, 1, "", "nextafter"], [653, 2, 1, "", "nms"], [661, 2, 1, "", "nonzero"], [291, 2, 1, "", "not_equal"], [651, 2, 1, "", "num_arrays_in_memory"], [219, 2, 1, "", "num_cpu_cores"], [220, 2, 1, "", "num_gpus"], [221, 2, 1, "", "num_ivy_arrays_on_dev"], [646, 2, 1, "", "one_hot"], [646, 2, 1, "", "ones"], [646, 2, 1, "", "ones_like"], [652, 2, 1, "", "optimizer_update"], [403, 2, 1, "", "optional_get_element"], [654, 2, 1, "", "outer"], [393, 2, 1, "", "pad"], [393, 2, 1, "", "pad_sequence"], [393, 2, 1, "", "partial_fold"], [393, 2, 1, "", "partial_tensor_to_vec"], [391, 2, 1, "", "partial_tucker"], [393, 2, 1, "", "partial_unfold"], [393, 2, 1, "", "partial_vec_to_tensor"], [222, 2, 1, "", "percent_used_mem_on_dev"], [656, 2, 1, "", "permute_dims"], [644, 6, 1, "", "pi"], [654, 2, 1, "", "pinv"], [397, 2, 1, "", "poisson"], [392, 2, 1, "", "poisson_nll_loss"], [384, 2, 1, "", "polyval"], [390, 2, 1, "", "pool"], [292, 2, 1, "", "positive"], [293, 2, 1, "", "pow"], [382, 2, 1, "", "prelu"], [651, 2, 1, "", "print_all_arrays_in_memory"], [223, 2, 1, "", "print_all_ivy_arrays_on_dev"], [664, 2, 1, "", "prod"], [193, 2, 1, "", "promote_types"], [194, 2, 1, "", "promote_types_of_inputs"], [658, 2, 1, "", "prune_empty"], [658, 2, 1, "", "prune_nest_at_index"], [658, 2, 1, "", "prune_nest_at_indices"], [393, 2, 1, "", "put_along_axis"], [654, 2, 1, "", "qr"], [402, 2, 1, "", "quantile"], [294, 2, 1, "", "rad2deg"], [660, 2, 1, "", "randint"], [384, 2, 1, "", "random_cp"], [660, 2, 1, "", "random_normal"], [384, 2, 1, "", "random_parafac2"], [384, 2, 1, "", "random_tr"], [384, 2, 1, "", "random_tt"], [384, 2, 1, "", "random_tucker"], [660, 2, 1, "", "random_uniform"], [295, 2, 1, "", "real"], [296, 2, 1, "", "reciprocal"], [388, 2, 1, "", "reduce"], [390, 2, 1, "", "reduce_window"], [643, 2, 1, "", "relu"], [382, 2, 1, "", "relu6"], [297, 2, 1, "", "remainder"], [656, 2, 1, "", "repeat"], [657, 2, 1, "", "reptile_step"], [652, 2, 1, "", "requires_gradient"], [656, 2, 1, "", "reshape"], [195, 2, 1, "", "result_type"], [390, 2, 1, "", "rfft"], [390, 2, 1, "", "rfftn"], [390, 2, 1, "", "rnn"], [653, 2, 1, "", "roi_align"], [656, 2, 1, "", "roll"], [393, 2, 1, "", "rot90"], [298, 2, 1, "", "round"], [665, 2, 1, "", "save"], [653, 2, 1, "", "scaled_dot_product_attention"], [382, 2, 1, "", "scaled_tanh"], [651, 2, 1, "", "scatter_flat"], [651, 2, 1, "", "scatter_nd"], [663, 2, 1, "", "searchsorted"], [660, 2, 1, "", "seed"], [382, 2, 1, "", "selu"], [651, 2, 1, "", "set_array_mode"], [196, 2, 1, "", "set_default_complex_dtype"], [224, 2, 1, "", "set_default_device"], [197, 2, 1, "", "set_default_dtype"], [198, 2, 1, "", "set_default_float_dtype"], [199, 2, 1, "", "set_default_int_dtype"], [200, 2, 1, "", "set_default_uint_dtype"], [651, 2, 1, "", "set_exception_trace_mode"], [651, 2, 1, "", "set_inplace_mode"], [651, 2, 1, "", "set_item"], [651, 2, 1, "", "set_min_base"], [651, 2, 1, "", "set_min_denominator"], [658, 2, 1, "", "set_nest_at_index"], [658, 2, 1, "", "set_nest_at_indices"], [651, 2, 1, "", "set_nestable_mode"], [651, 2, 1, "", "set_precise_mode"], [651, 2, 1, "", "set_queue_timeout"], [651, 2, 1, "", "set_shape_array_mode"], [651, 2, 1, "", "set_show_func_wrapper_trace_mode"], [225, 2, 1, "", "set_soft_device_mode"], [226, 2, 1, "", "set_split_factor"], [651, 2, 1, "", "set_tmp_dir"], [651, 2, 1, "", "shape"], [660, 2, 1, "", "shuffle"], [643, 2, 1, "", "sigmoid"], [299, 2, 1, "", "sign"], [387, 2, 1, "", "signbit"], [382, 2, 1, "", "silu"], [300, 2, 1, "", "sin"], [387, 2, 1, "", "sinc"], [301, 2, 1, "", "sinh"], [651, 2, 1, "", "size"], [390, 2, 1, "", "sliding_window"], [654, 2, 1, "", "slogdet"], [392, 2, 1, "", "smooth_l1_loss"], [392, 2, 1, "", "soft_margin_loss"], [393, 2, 1, "", "soft_thresholding"], [643, 2, 1, "", "softmax"], [643, 2, 1, "", "softplus"], [382, 2, 1, "", "softshrink"], [643, 2, 1, "", "softsign"], [654, 2, 1, "", "solve"], [391, 2, 1, "", "solve_triangular"], [663, 2, 1, "", "sort"], [655, 2, 1, "", "sparse_cross_entropy"], [387, 2, 1, "", "sparsify_tensor"], [656, 2, 1, "", "split"], [227, 2, 1, "", "split_factor"], [228, 2, 1, "", "split_func_call"], [302, 2, 1, "", "sqrt"], [303, 2, 1, "", "square"], [656, 2, 1, "", "squeeze"], [655, 2, 1, "", "ssim_loss"], [651, 2, 1, "", "stable_divide"], [651, 2, 1, "", "stable_pow"], [656, 2, 1, "", "stack"], [382, 2, 1, "", "stanh"], [664, 2, 1, "", "std"], [390, 2, 1, "", "stft"], [652, 2, 1, "", "stop_gradient"], [651, 2, 1, "", "strides"], [304, 2, 1, "", "subtract"], [664, 2, 1, "", "sum"], [651, 2, 1, "", "supports_inplace_updates"], [654, 2, 1, "", "svd"], [391, 2, 1, "", "svd_flip"], [654, 2, 1, "", "svdvals"], [656, 2, 1, "", "swapaxes"], [393, 2, 1, "", "take"], [393, 2, 1, "", "take_along_axis"], [305, 2, 1, "", "tan"], [306, 2, 1, "", "tanh"], [382, 2, 1, "", "tanhshrink"], [391, 2, 1, "", "tensor_train"], [654, 2, 1, "", "tensordot"], [654, 2, 1, "", "tensorsolve"], [382, 2, 1, "", "threshold"], [382, 2, 1, "", "thresholded_relu"], [656, 2, 1, "", "tile"], [229, 2, 1, "", "to_device"], [646, 2, 1, "", "to_dlpack"], [651, 2, 1, "", "to_ivy_shape"], [651, 2, 1, "", "to_list"], [651, 2, 1, "", "to_native_shape"], [651, 2, 1, "", "to_numpy"], [651, 2, 1, "", "to_scalar"], [393, 2, 1, "", "top_k"], [230, 2, 1, "", "total_mem_on_dev"], [231, 2, 1, "", "tpu_is_available"], [654, 2, 1, "", "trace"], [880, 2, 1, "", "trace_graph"], [881, 2, 1, "", "transpile"], [307, 2, 1, "", "trapz"], [646, 2, 1, "", "tril"], [384, 2, 1, "", "tril_indices"], [384, 2, 1, "", "trilu"], [393, 2, 1, "", "trim_zeros"], [646, 2, 1, "", "triu"], [646, 2, 1, "", "triu_indices"], [308, 2, 1, "", "trunc"], [309, 2, 1, "", "trunc_divide"], [391, 2, 1, "", "truncated_svd"], [651, 2, 1, "", "try_else_none"], [645, 2, 1, "", "try_except"], [391, 2, 1, "", "tt_matrix_to_tensor"], [391, 2, 1, "", "tucker"], [201, 2, 1, "", "type_promote_arrays"], [393, 2, 1, "", "unflatten"], [393, 2, 1, "", "unfold"], [882, 2, 1, "", "unify"], [662, 2, 1, "", "unique_all"], [393, 2, 1, "", "unique_consecutive"], [662, 2, 1, "", "unique_counts"], [662, 2, 1, "", "unique_inverse"], [662, 2, 1, "", "unique_values"], [398, 2, 1, "", "unravel_index"], [651, 2, 1, "", "unset_array_mode"], [202, 2, 1, "", "unset_default_complex_dtype"], [232, 2, 1, "", "unset_default_device"], [203, 2, 1, "", "unset_default_dtype"], [204, 2, 1, "", "unset_default_float_dtype"], [205, 2, 1, "", "unset_default_int_dtype"], [206, 2, 1, "", "unset_default_uint_dtype"], [651, 2, 1, "", "unset_exception_trace_mode"], [651, 2, 1, "", "unset_inplace_mode"], [651, 2, 1, "", "unset_min_base"], [651, 2, 1, "", "unset_min_denominator"], [651, 2, 1, "", "unset_nestable_mode"], [651, 2, 1, "", "unset_precise_mode"], [651, 2, 1, "", "unset_queue_timeout"], [651, 2, 1, "", "unset_shape_array_mode"], [651, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [233, 2, 1, "", "unset_soft_device_mode"], [651, 2, 1, "", "unset_tmp_dir"], [384, 2, 1, "", "unsorted_segment_mean"], [384, 2, 1, "", "unsorted_segment_min"], [384, 2, 1, "", "unsorted_segment_sum"], [656, 2, 1, "", "unstack"], [234, 2, 1, "", "used_mem_on_dev"], [207, 2, 1, "", "valid_dtype"], [652, 2, 1, "", "value_and_grad"], [651, 2, 1, "", "value_is_nan"], [654, 2, 1, "", "vander"], [664, 2, 1, "", "var"], [654, 2, 1, "", "vecdot"], [654, 2, 1, "", "vector_norm"], [654, 2, 1, "", "vector_to_skew_symmetric_matrix"], [389, 2, 1, "", "vjp"], [651, 2, 1, "", "vmap"], [384, 2, 1, "", "vorbis_window"], [393, 2, 1, "", "vsplit"], [393, 2, 1, "", "vstack"], [655, 2, 1, "", "wasserstein_loss_discriminator"], [655, 2, 1, "", "wasserstein_loss_generator"], [661, 2, 1, "", "where"], [645, 2, 1, "", "while_loop"], [387, 2, 1, "", "xlogy"], [656, 2, 1, "", "zero_pad"], [646, 2, 1, "", "zeros"], [646, 2, 1, "", "zeros_like"], [387, 2, 1, "", "zeta"]], "ivy.Container": [[235, 0, 1, "", "abs"], [236, 0, 1, "", "acos"], [237, 0, 1, "", "acosh"], [631, 0, 1, "", "adam_step"], [632, 0, 1, "", "adam_update"], [404, 0, 1, "", "adaptive_avg_pool1d"], [405, 0, 1, "", "adaptive_avg_pool2d"], [406, 0, 1, "", "adaptive_max_pool2d"], [407, 0, 1, "", "adaptive_max_pool3d"], [238, 0, 1, "", "add"], [439, 0, 1, "", "adjoint"], [787, 0, 1, "", "all"], [550, 0, 1, "", "all_equal"], [349, 0, 1, "", "allclose"], [350, 0, 1, "", "amax"], [351, 0, 1, "", "amin"], [239, 0, 1, "", "angle"], [788, 0, 1, "", "any"], [764, 0, 1, "", "argmax"], [765, 0, 1, "", "argmin"], [773, 0, 1, "", "argsort"], [766, 0, 1, "", "argwhere"], [553, 0, 1, "", "array_equal"], [475, 0, 1, "", "as_strided"], [142, 0, 1, "", "asarray"], [240, 0, 1, "", "asin"], [241, 0, 1, "", "asinh"], [554, 0, 1, "", "assert_supports_inplace"], [476, 0, 1, "", "associative_scan"], [167, 0, 1, "", "astype"], [242, 0, 1, "", "atan"], [243, 0, 1, "", "atan2"], [244, 0, 1, "", "atanh"], [477, 0, 1, "", "atleast_1d"], [478, 0, 1, "", "atleast_2d"], [479, 0, 1, "", "atleast_3d"], [409, 0, 1, "", "avg_pool1d"], [410, 0, 1, "", "avg_pool2d"], [411, 0, 1, "", "avg_pool3d"], [517, 0, 1, "", "batch_norm"], [440, 0, 1, "", "batched_outer"], [524, 0, 1, "", "bernoulli"], [525, 0, 1, "", "beta"], [352, 0, 1, "", "binarizer"], [713, 0, 1, "", "binary_cross_entropy"], [536, 0, 1, "", "bincount"], [245, 0, 1, "", "bitwise_and"], [246, 0, 1, "", "bitwise_invert"], [247, 0, 1, "", "bitwise_left_shift"], [248, 0, 1, "", "bitwise_or"], [249, 0, 1, "", "bitwise_right_shift"], [250, 0, 1, "", "bitwise_xor"], [327, 0, 1, "", "blackman_window"], [168, 0, 1, "", "broadcast_arrays"], [480, 0, 1, "", "broadcast_shapes"], [169, 0, 1, "", "broadcast_to"], [170, 0, 1, "", "can_cast"], [251, 0, 1, "", "ceil"], [310, 0, 1, "", "celu"], [684, 0, 1, "", "cholesky"], [719, 0, 1, "", "clip"], [556, 0, 1, "", "clip_matrix_norm"], [557, 0, 1, "", "clip_vector_norm"], [483, 0, 1, "", "column_stack"], [720, 0, 1, "", "concat"], [484, 0, 1, "", "concat_from_sequence"], [441, 0, 1, "", "cond"], [353, 0, 1, "", "conj"], [721, 0, 1, "", "constant_pad"], [667, 0, 1, "", "conv1d"], [668, 0, 1, "", "conv1d_transpose"], [669, 0, 1, "", "conv2d"], [670, 0, 1, "", "conv2d_transpose"], [671, 0, 1, "", "conv3d"], [672, 0, 1, "", "conv3d_transpose"], [144, 0, 1, "", "copy_array"], [354, 0, 1, "", "copysign"], [537, 0, 1, "", "corrcoef"], [252, 0, 1, "", "cos"], [253, 0, 1, "", "cosh"], [355, 0, 1, "", "count_nonzero"], [538, 0, 1, "", "cov"], [685, 0, 1, "", "cross"], [714, 0, 1, "", "cross_entropy"], [539, 0, 1, "", "cummax"], [540, 0, 1, "", "cummin"], [777, 0, 1, "", "cumprod"], [778, 0, 1, "", "cumsum"], [412, 0, 1, "", "dct"], [254, 0, 1, "", "deg2rad"], [675, 0, 1, "", "depthwise_conv2d"], [686, 0, 1, "", "det"], [212, 0, 1, "", "dev"], [413, 0, 1, "", "dft"], [687, 0, 1, "", "diag"], [442, 0, 1, "", "diagflat"], [688, 0, 1, "", "diagonal"], [356, 0, 1, "", "diff"], [357, 0, 1, "", "digamma"], [526, 0, 1, "", "dirichlet"], [255, 0, 1, "", "divide"], [443, 0, 1, "", "dot"], [676, 0, 1, "", "dropout"], [414, 0, 1, "", "dropout1d"], [415, 0, 1, "", "dropout2d"], [416, 0, 1, "", "dropout3d"], [485, 0, 1, "", "dsplit"], [486, 0, 1, "", "dstack"], [178, 0, 1, "", "dtype"], [444, 0, 1, "", "eig"], [690, 0, 1, "", "eigh"], [445, 0, 1, "", "eigh_tridiagonal"], [446, 0, 1, "", "eigvals"], [691, 0, 1, "", "eigvalsh"], [561, 0, 1, "", "einops_rearrange"], [562, 0, 1, "", "einops_reduce"], [563, 0, 1, "", "einops_repeat"], [779, 0, 1, "", "einsum"], [311, 0, 1, "", "elu"], [417, 0, 1, "", "embedding"], [146, 0, 1, "", "empty_like"], [256, 0, 1, "", "equal"], [257, 0, 1, "", "erf"], [358, 0, 1, "", "erfc"], [359, 0, 1, "", "erfinv"], [564, 0, 1, "", "exists"], [258, 0, 1, "", "exp"], [259, 0, 1, "", "exp2"], [487, 0, 1, "", "expand"], [722, 0, 1, "", "expand_dims"], [260, 0, 1, "", "expm1"], [328, 0, 1, "", "eye_like"], [418, 0, 1, "", "fft"], [488, 0, 1, "", "fill_diagonal"], [180, 0, 1, "", "finfo"], [360, 0, 1, "", "fix"], [489, 0, 1, "", "flatten"], [723, 0, 1, "", "flip"], [490, 0, 1, "", "fliplr"], [491, 0, 1, "", "flipud"], [361, 0, 1, "", "float_power"], [261, 0, 1, "", "floor"], [262, 0, 1, "", "floor_divide"], [362, 0, 1, "", "fmax"], [263, 0, 1, "", "fmin"], [264, 0, 1, "", "fmod"], [492, 0, 1, "", "fold"], [565, 0, 1, "", "fourier_encode"], [363, 0, 1, "", "frexp"], [148, 0, 1, "", "from_dlpack"], [149, 0, 1, "", "frombuffer"], [151, 0, 1, "", "full_like"], [527, 0, 1, "", "gamma"], [568, 0, 1, "", "gather"], [569, 0, 1, "", "gather_nd"], [265, 0, 1, "", "gcd"], [124, 0, 1, "", "gelu"], [447, 0, 1, "", "general_inner_product"], [572, 0, 1, "", "get_num_dims"], [364, 0, 1, "", "gradient"], [635, 0, 1, "", "gradient_descent_update"], [266, 0, 1, "", "greater"], [267, 0, 1, "", "greater_equal"], [518, 0, 1, "", "group_norm"], [329, 0, 1, "", "hamming_window"], [330, 0, 1, "", "hann_window"], [312, 0, 1, "", "hardshrink"], [313, 0, 1, "", "hardsilu"], [125, 0, 1, "", "hardswish"], [314, 0, 1, "", "hardtanh"], [574, 0, 1, "", "has_nans"], [493, 0, 1, "", "heaviside"], [448, 0, 1, "", "higher_order_moment"], [467, 0, 1, "", "hinge_embedding_loss"], [541, 0, 1, "", "histogram"], [494, 0, 1, "", "hsplit"], [495, 0, 1, "", "hstack"], [468, 0, 1, "", "huber_loss"], [365, 0, 1, "", "hypot"], [496, 0, 1, "", "i0"], [422, 0, 1, "", "idct"], [423, 0, 1, "", "ifft"], [424, 0, 1, "", "ifftn"], [542, 0, 1, "", "igamma"], [183, 0, 1, "", "iinfo"], [268, 0, 1, "", "imag"], [449, 0, 1, "", "initialize_tucker"], [692, 0, 1, "", "inner"], [576, 0, 1, "", "inplace_decrement"], [577, 0, 1, "", "inplace_increment"], [578, 0, 1, "", "inplace_update"], [519, 0, 1, "", "instance_norm"], [426, 0, 1, "", "interpolate"], [693, 0, 1, "", "inv"], [530, 0, 1, "", "invert_permutation"], [580, 0, 1, "", "is_array"], [186, 0, 1, "", "is_bool_dtype"], [187, 0, 1, "", "is_complex_dtype"], [188, 0, 1, "", "is_float_dtype"], [190, 0, 1, "", "is_int_dtype"], [581, 0, 1, "", "is_ivy_array"], [584, 0, 1, "", "is_native_array"], [192, 0, 1, "", "is_uint_dtype"], [366, 0, 1, "", "isclose"], [269, 0, 1, "", "isfinite"], [585, 0, 1, "", "isin"], [270, 0, 1, "", "isinf"], [271, 0, 1, "", "isnan"], [272, 0, 1, "", "isreal"], [587, 0, 1, "", "itemsize"], [332, 0, 1, "", "kaiser_bessel_derived_window"], [333, 0, 1, "", "kaiser_window"], [469, 0, 1, "", "kl_div"], [451, 0, 1, "", "kron"], [470, 0, 1, "", "l1_loss"], [520, 0, 1, "", "l1_normalize"], [521, 0, 1, "", "l2_normalize"], [637, 0, 1, "", "lamb_update"], [638, 0, 1, "", "lars_update"], [757, 0, 1, "", "layer_norm"], [273, 0, 1, "", "lcm"], [367, 0, 1, "", "ldexp"], [126, 0, 1, "", "leaky_relu"], [368, 0, 1, "", "lerp"], [274, 0, 1, "", "less"], [275, 0, 1, "", "less_equal"], [531, 0, 1, "", "lexsort"], [369, 0, 1, "", "lgamma"], [677, 0, 1, "", "linear"], [152, 0, 1, "", "linspace"], [276, 0, 1, "", "log"], [277, 0, 1, "", "log10"], [278, 0, 1, "", "log1p"], [279, 0, 1, "", "log2"], [471, 0, 1, "", "log_poisson_loss"], [127, 0, 1, "", "log_softmax"], [280, 0, 1, "", "logaddexp"], [281, 0, 1, "", "logaddexp2"], [282, 0, 1, "", "logical_and"], [283, 0, 1, "", "logical_not"], [284, 0, 1, "", "logical_or"], [285, 0, 1, "", "logical_xor"], [315, 0, 1, "", "logit"], [316, 0, 1, "", "logsigmoid"], [153, 0, 1, "", "logspace"], [523, 0, 1, "", "lp_normalize"], [679, 0, 1, "", "lstm_update"], [455, 0, 1, "", "make_svd_non_negative"], [694, 0, 1, "", "matmul"], [497, 0, 1, "", "matricize"], [456, 0, 1, "", "matrix_exp"], [695, 0, 1, "", "matrix_norm"], [696, 0, 1, "", "matrix_power"], [697, 0, 1, "", "matrix_rank"], [698, 0, 1, "", "matrix_transpose"], [780, 0, 1, "", "max"], [427, 0, 1, "", "max_pool1d"], [428, 0, 1, "", "max_pool2d"], [429, 0, 1, "", "max_pool3d"], [430, 0, 1, "", "max_unpool1d"], [286, 0, 1, "", "maximum"], [781, 0, 1, "", "mean"], [543, 0, 1, "", "median"], [334, 0, 1, "", "mel_weight_matrix"], [154, 0, 1, "", "meshgrid"], [782, 0, 1, "", "min"], [287, 0, 1, "", "minimum"], [128, 0, 1, "", "mish"], [457, 0, 1, "", "mode_dot"], [370, 0, 1, "", "modf"], [498, 0, 1, "", "moveaxis"], [774, 0, 1, "", "msort"], [458, 0, 1, "", "multi_dot"], [680, 0, 1, "", "multi_head_attention"], [459, 0, 1, "", "multi_mode_dot"], [758, 0, 1, "", "multinomial"], [288, 0, 1, "", "multiply"], [289, 0, 1, "", "nan_to_num"], [544, 0, 1, "", "nanmean"], [545, 0, 1, "", "nanmedian"], [546, 0, 1, "", "nanmin"], [547, 0, 1, "", "nanprod"], [371, 0, 1, "", "nansum"], [155, 0, 1, "", "native_array"], [290, 0, 1, "", "negative"], [372, 0, 1, "", "nextafter"], [767, 0, 1, "", "nonzero"], [291, 0, 1, "", "not_equal"], [156, 0, 1, "", "one_hot"], [158, 0, 1, "", "ones_like"], [639, 0, 1, "", "optimizer_update"], [549, 0, 1, "", "optional_get_element"], [699, 0, 1, "", "outer"], [499, 0, 1, "", "pad"], [501, 0, 1, "", "partial_fold"], [502, 0, 1, "", "partial_tensor_to_vec"], [460, 0, 1, "", "partial_tucker"], [503, 0, 1, "", "partial_unfold"], [504, 0, 1, "", "partial_vec_to_tensor"], [724, 0, 1, "", "permute_dims"], [700, 0, 1, "", "pinv"], [528, 0, 1, "", "poisson"], [472, 0, 1, "", "poisson_nll_loss"], [337, 0, 1, "", "polyval"], [292, 0, 1, "", "positive"], [293, 0, 1, "", "pow"], [317, 0, 1, "", "prelu"], [783, 0, 1, "", "prod"], [505, 0, 1, "", "put_along_axis"], [701, 0, 1, "", "qr"], [548, 0, 1, "", "quantile"], [294, 0, 1, "", "rad2deg"], [759, 0, 1, "", "randint"], [760, 0, 1, "", "random_normal"], [761, 0, 1, "", "random_uniform"], [295, 0, 1, "", "real"], [296, 0, 1, "", "reciprocal"], [378, 0, 1, "", "reduce"], [433, 0, 1, "", "reduce_window"], [129, 0, 1, "", "relu"], [318, 0, 1, "", "relu6"], [297, 0, 1, "", "remainder"], [725, 0, 1, "", "repeat"], [726, 0, 1, "", "reshape"], [195, 0, 1, "", "result_type"], [434, 0, 1, "", "rfft"], [435, 0, 1, "", "rfftn"], [727, 0, 1, "", "roll"], [506, 0, 1, "", "rot90"], [298, 0, 1, "", "round"], [683, 0, 1, "", "scaled_dot_product_attention"], [319, 0, 1, "", "scaled_tanh"], [592, 0, 1, "", "scatter_flat"], [593, 0, 1, "", "scatter_nd"], [775, 0, 1, "", "searchsorted"], [320, 0, 1, "", "selu"], [763, 0, 1, "", "shuffle"], [130, 0, 1, "", "sigmoid"], [299, 0, 1, "", "sign"], [373, 0, 1, "", "signbit"], [321, 0, 1, "", "silu"], [300, 0, 1, "", "sin"], [374, 0, 1, "", "sinc"], [301, 0, 1, "", "sinh"], [607, 0, 1, "", "size"], [437, 0, 1, "", "sliding_window"], [702, 0, 1, "", "slogdet"], [473, 0, 1, "", "smooth_l1_loss"], [474, 0, 1, "", "soft_margin_loss"], [507, 0, 1, "", "soft_thresholding"], [131, 0, 1, "", "softmax"], [132, 0, 1, "", "softplus"], [322, 0, 1, "", "softshrink"], [703, 0, 1, "", "solve"], [776, 0, 1, "", "sort"], [715, 0, 1, "", "sparse_cross_entropy"], [375, 0, 1, "", "sparsify_tensor"], [728, 0, 1, "", "split"], [302, 0, 1, "", "sqrt"], [303, 0, 1, "", "square"], [729, 0, 1, "", "squeeze"], [608, 0, 1, "", "stable_divide"], [609, 0, 1, "", "stable_pow"], [730, 0, 1, "", "stack"], [784, 0, 1, "", "std"], [438, 0, 1, "", "stft"], [641, 0, 1, "", "stop_gradient"], [610, 0, 1, "", "strides"], [304, 0, 1, "", "subtract"], [785, 0, 1, "", "sum"], [611, 0, 1, "", "supports_inplace_updates"], [704, 0, 1, "", "svd"], [462, 0, 1, "", "svd_flip"], [705, 0, 1, "", "svdvals"], [731, 0, 1, "", "swapaxes"], [508, 0, 1, "", "take"], [509, 0, 1, "", "take_along_axis"], [305, 0, 1, "", "tan"], [306, 0, 1, "", "tanh"], [324, 0, 1, "", "tanhshrink"], [463, 0, 1, "", "tensor_train"], [706, 0, 1, "", "tensordot"], [707, 0, 1, "", "tensorsolve"], [325, 0, 1, "", "threshold"], [326, 0, 1, "", "thresholded_relu"], [732, 0, 1, "", "tile"], [229, 0, 1, "", "to_device"], [613, 0, 1, "", "to_list"], [615, 0, 1, "", "to_numpy"], [616, 0, 1, "", "to_scalar"], [510, 0, 1, "", "top_k"], [708, 0, 1, "", "trace"], [307, 0, 1, "", "trapz"], [160, 0, 1, "", "tril"], [343, 0, 1, "", "tril_indices"], [344, 0, 1, "", "trilu"], [511, 0, 1, "", "trim_zeros"], [161, 0, 1, "", "triu"], [162, 0, 1, "", "triu_indices"], [308, 0, 1, "", "trunc"], [309, 0, 1, "", "trunc_divide"], [464, 0, 1, "", "truncated_svd"], [465, 0, 1, "", "tt_matrix_to_tensor"], [466, 0, 1, "", "tucker"], [512, 0, 1, "", "unflatten"], [513, 0, 1, "", "unfold"], [769, 0, 1, "", "unique_all"], [514, 0, 1, "", "unique_consecutive"], [770, 0, 1, "", "unique_counts"], [771, 0, 1, "", "unique_inverse"], [772, 0, 1, "", "unique_values"], [529, 0, 1, "", "unravel_index"], [345, 0, 1, "", "unsorted_segment_mean"], [346, 0, 1, "", "unsorted_segment_min"], [347, 0, 1, "", "unsorted_segment_sum"], [733, 0, 1, "", "unstack"], [629, 0, 1, "", "value_is_nan"], [709, 0, 1, "", "vander"], [786, 0, 1, "", "var"], [710, 0, 1, "", "vecdot"], [711, 0, 1, "", "vector_norm"], [712, 0, 1, "", "vector_to_skew_symmetric_matrix"], [348, 0, 1, "", "vorbis_window"], [515, 0, 1, "", "vsplit"], [516, 0, 1, "", "vstack"], [768, 0, 1, "", "where"], [376, 0, 1, "", "xlogy"], [734, 0, 1, "", "zero_pad"], [164, 0, 1, "", "zeros_like"], [377, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[65, 3, 0, "-", "activations"], [116, 3, 0, "-", "array"], [66, 3, 0, "-", "conversions"], [67, 3, 0, "-", "creation"], [68, 3, 0, "-", "data_type"], [69, 3, 0, "-", "device"], [70, 3, 0, "-", "elementwise"], [71, 3, 0, "-", "experimental"], [72, 3, 0, "-", "general"], [73, 3, 0, "-", "gradients"], [74, 3, 0, "-", "image"], [75, 3, 0, "-", "layers"], [76, 3, 0, "-", "linear_algebra"], [77, 3, 0, "-", "losses"], [78, 3, 0, "-", "manipulation"], [79, 3, 0, "-", "norms"], [80, 3, 0, "-", "random"], [81, 3, 0, "-", "searching"], [82, 3, 0, "-", "set"], [83, 3, 0, "-", "sorting"], [84, 3, 0, "-", "statistical"], [85, 3, 0, "-", "utility"], [86, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[65, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "gelu"], [65, 0, 1, "", "hardswish"], [65, 0, 1, "", "leaky_relu"], [65, 0, 1, "", "log_softmax"], [65, 0, 1, "", "mish"], [65, 0, 1, "", "relu"], [65, 0, 1, "", "sigmoid"], [65, 0, 1, "", "softmax"], [65, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[116, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[116, 5, 1, "", "T"], [116, 0, 1, "", "__abs__"], [116, 0, 1, "", "__add__"], [116, 0, 1, "", "__eq__"], [116, 0, 1, "", "__ge__"], [116, 0, 1, "", "__gt__"], [116, 0, 1, "", "__init__"], [116, 0, 1, "", "__le__"], [116, 0, 1, "", "__lt__"], [116, 0, 1, "", "__ne__"], [116, 0, 1, "", "__pow__"], [116, 0, 1, "", "__radd__"], [116, 0, 1, "", "__rrshift__"], [116, 0, 1, "", "__rshift__"], [116, 0, 1, "", "__rsub__"], [116, 0, 1, "", "__sub__"], [116, 0, 1, "", "__truediv__"], [116, 0, 1, "", "__xor__"], [116, 5, 1, "", "backend"], [116, 5, 1, "", "base"], [116, 5, 1, "", "data"], [116, 5, 1, "", "device"], [116, 5, 1, "", "dtype"], [116, 5, 1, "", "dynamic_backend"], [116, 5, 1, "", "imag"], [116, 5, 1, "", "itemsize"], [116, 5, 1, "", "mT"], [116, 5, 1, "", "ndim"], [116, 5, 1, "", "real"], [116, 5, 1, "", "shape"], [116, 5, 1, "", "size"], [116, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[66, 2, 1, "", "_array_to_new_backend"], [66, 2, 1, "", "_data_to_new_backend"], [66, 2, 1, "", "_to_ivy"], [66, 2, 1, "", "_to_native"], [66, 2, 1, "", "_to_new_backend"], [66, 2, 1, "", "args_to_ivy"], [66, 2, 1, "", "args_to_native"], [66, 2, 1, "", "args_to_new_backend"], [66, 2, 1, "", "to_ivy"], [66, 2, 1, "", "to_native"], [66, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[67, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "asarray"], [67, 0, 1, "", "copy_array"], [67, 0, 1, "", "empty_like"], [67, 0, 1, "", "from_dlpack"], [67, 0, 1, "", "full_like"], [67, 0, 1, "", "linspace"], [67, 0, 1, "", "logspace"], [67, 0, 1, "", "meshgrid"], [67, 0, 1, "", "native_array"], [67, 0, 1, "", "one_hot"], [67, 0, 1, "", "ones_like"], [67, 0, 1, "", "tril"], [67, 0, 1, "", "triu"], [67, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[68, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "astype"], [68, 0, 1, "", "broadcast_arrays"], [68, 0, 1, "", "broadcast_to"], [68, 0, 1, "", "can_cast"], [68, 0, 1, "", "dtype"], [68, 0, 1, "", "finfo"], [68, 0, 1, "", "iinfo"], [68, 0, 1, "", "is_bool_dtype"], [68, 0, 1, "", "is_float_dtype"], [68, 0, 1, "", "is_int_dtype"], [68, 0, 1, "", "is_uint_dtype"], [68, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[69, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "dev"], [69, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[70, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "abs"], [70, 0, 1, "", "acos"], [70, 0, 1, "", "acosh"], [70, 0, 1, "", "add"], [70, 0, 1, "", "angle"], [70, 0, 1, "", "asin"], [70, 0, 1, "", "asinh"], [70, 0, 1, "", "atan"], [70, 0, 1, "", "atan2"], [70, 0, 1, "", "atanh"], [70, 0, 1, "", "bitwise_and"], [70, 0, 1, "", "bitwise_invert"], [70, 0, 1, "", "bitwise_left_shift"], [70, 0, 1, "", "bitwise_or"], [70, 0, 1, "", "bitwise_right_shift"], [70, 0, 1, "", "bitwise_xor"], [70, 0, 1, "", "ceil"], [70, 0, 1, "", "cos"], [70, 0, 1, "", "cosh"], [70, 0, 1, "", "deg2rad"], [70, 0, 1, "", "divide"], [70, 0, 1, "", "equal"], [70, 0, 1, "", "erf"], [70, 0, 1, "", "exp"], [70, 0, 1, "", "exp2"], [70, 0, 1, "", "expm1"], [70, 0, 1, "", "floor"], [70, 0, 1, "", "floor_divide"], [70, 0, 1, "", "fmin"], [70, 0, 1, "", "gcd"], [70, 0, 1, "", "greater"], [70, 0, 1, "", "greater_equal"], [70, 0, 1, "", "isfinite"], [70, 0, 1, "", "isinf"], [70, 0, 1, "", "isnan"], [70, 0, 1, "", "isreal"], [70, 0, 1, "", "lcm"], [70, 0, 1, "", "less"], [70, 0, 1, "", "less_equal"], [70, 0, 1, "", "log"], [70, 0, 1, "", "log10"], [70, 0, 1, "", "log1p"], [70, 0, 1, "", "log2"], [70, 0, 1, "", "logaddexp"], [70, 0, 1, "", "logaddexp2"], [70, 0, 1, "", "logical_and"], [70, 0, 1, "", "logical_not"], [70, 0, 1, "", "logical_or"], [70, 0, 1, "", "logical_xor"], [70, 0, 1, "", "maximum"], [70, 0, 1, "", "minimum"], [70, 0, 1, "", "multiply"], [70, 0, 1, "", "nan_to_num"], [70, 0, 1, "", "negative"], [70, 0, 1, "", "not_equal"], [70, 0, 1, "", "positive"], [70, 0, 1, "", "pow"], [70, 0, 1, "", "rad2deg"], [70, 0, 1, "", "real"], [70, 0, 1, "", "reciprocal"], [70, 0, 1, "", "remainder"], [70, 0, 1, "", "round"], [70, 0, 1, "", "sign"], [70, 0, 1, "", "sin"], [70, 0, 1, "", "sinh"], [70, 0, 1, "", "sqrt"], [70, 0, 1, "", "square"], [70, 0, 1, "", "subtract"], [70, 0, 1, "", "tan"], [70, 0, 1, "", "tanh"], [70, 0, 1, "", "trapz"], [70, 0, 1, "", "trunc"], [70, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[71, 3, 0, "-", "activations"], [71, 3, 0, "-", "conversions"], [71, 3, 0, "-", "creation"], [71, 3, 0, "-", "data_type"], [71, 3, 0, "-", "device"], [71, 3, 0, "-", "elementwise"], [71, 3, 0, "-", "general"], [71, 3, 0, "-", "gradients"], [71, 3, 0, "-", "image"], [71, 3, 0, "-", "layers"], [71, 3, 0, "-", "linear_algebra"], [71, 3, 0, "-", "losses"], [71, 3, 0, "-", "manipulation"], [71, 3, 0, "-", "norms"], [71, 3, 0, "-", "random"], [71, 3, 0, "-", "searching"], [71, 3, 0, "-", "set"], [71, 3, 0, "-", "sorting"], [71, 3, 0, "-", "statistical"], [71, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[71, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "celu"], [71, 0, 1, "", "elu"], [71, 0, 1, "", "hardshrink"], [71, 0, 1, "", "hardsilu"], [71, 0, 1, "", "hardtanh"], [71, 0, 1, "", "logit"], [71, 0, 1, "", "logsigmoid"], [71, 0, 1, "", "prelu"], [71, 0, 1, "", "relu6"], [71, 0, 1, "", "scaled_tanh"], [71, 0, 1, "", "selu"], [71, 0, 1, "", "silu"], [71, 0, 1, "", "softshrink"], [71, 0, 1, "", "tanhshrink"], [71, 0, 1, "", "threshold"], [71, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[71, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[71, 1, 1, "", "_ArrayWithCreationExperimental"], [71, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "blackman_window"], [71, 0, 1, "", "eye_like"], [71, 0, 1, "", "mel_weight_matrix"], [71, 0, 1, "", "trilu"], [71, 0, 1, "", "unsorted_segment_mean"], [71, 0, 1, "", "unsorted_segment_min"], [71, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[71, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[71, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[71, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "allclose"], [71, 0, 1, "", "amax"], [71, 0, 1, "", "amin"], [71, 0, 1, "", "binarizer"], [71, 0, 1, "", "conj"], [71, 0, 1, "", "copysign"], [71, 0, 1, "", "count_nonzero"], [71, 0, 1, "", "diff"], [71, 0, 1, "", "digamma"], [71, 0, 1, "", "erfc"], [71, 0, 1, "", "erfinv"], [71, 0, 1, "", "fix"], [71, 0, 1, "", "float_power"], [71, 0, 1, "", "fmax"], [71, 0, 1, "", "fmod"], [71, 0, 1, "", "frexp"], [71, 0, 1, "", "gradient"], [71, 0, 1, "", "hypot"], [71, 0, 1, "", "isclose"], [71, 0, 1, "", "ldexp"], [71, 0, 1, "", "lerp"], [71, 0, 1, "", "lgamma"], [71, 0, 1, "", "modf"], [71, 0, 1, "", "nansum"], [71, 0, 1, "", "nextafter"], [71, 0, 1, "", "signbit"], [71, 0, 1, "", "sinc"], [71, 0, 1, "", "sparsify_tensor"], [71, 0, 1, "", "xlogy"], [71, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[71, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[71, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[71, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[71, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "adaptive_avg_pool1d"], [71, 0, 1, "", "adaptive_avg_pool2d"], [71, 0, 1, "", "adaptive_max_pool2d"], [71, 0, 1, "", "adaptive_max_pool3d"], [71, 0, 1, "", "avg_pool1d"], [71, 0, 1, "", "avg_pool2d"], [71, 0, 1, "", "avg_pool3d"], [71, 0, 1, "", "dct"], [71, 0, 1, "", "dft"], [71, 0, 1, "", "embedding"], [71, 0, 1, "", "fft"], [71, 0, 1, "", "fft2"], [71, 0, 1, "", "idct"], [71, 0, 1, "", "ifft"], [71, 0, 1, "", "ifftn"], [71, 0, 1, "", "interpolate"], [71, 0, 1, "", "max_pool1d"], [71, 0, 1, "", "max_pool2d"], [71, 0, 1, "", "max_pool3d"], [71, 0, 1, "", "max_unpool1d"], [71, 0, 1, "", "reduce_window"], [71, 0, 1, "", "rfft"], [71, 0, 1, "", "rfftn"], [71, 0, 1, "", "sliding_window"], [71, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[71, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "adjoint"], [71, 0, 1, "", "batched_outer"], [71, 0, 1, "", "cond"], [71, 0, 1, "", "diagflat"], [71, 0, 1, "", "dot"], [71, 0, 1, "", "eig"], [71, 0, 1, "", "eigh_tridiagonal"], [71, 0, 1, "", "eigvals"], [71, 0, 1, "", "general_inner_product"], [71, 0, 1, "", "higher_order_moment"], [71, 0, 1, "", "initialize_tucker"], [71, 0, 1, "", "kron"], [71, 0, 1, "", "make_svd_non_negative"], [71, 0, 1, "", "matrix_exp"], [71, 0, 1, "", "mode_dot"], [71, 0, 1, "", "multi_dot"], [71, 0, 1, "", "multi_mode_dot"], [71, 0, 1, "", "partial_tucker"], [71, 0, 1, "", "svd_flip"], [71, 0, 1, "", "tensor_train"], [71, 0, 1, "", "truncated_svd"], [71, 0, 1, "", "tt_matrix_to_tensor"], [71, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[71, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "hinge_embedding_loss"], [71, 0, 1, "", "huber_loss"], [71, 0, 1, "", "kl_div"], [71, 0, 1, "", "l1_loss"], [71, 0, 1, "", "log_poisson_loss"], [71, 0, 1, "", "poisson_nll_loss"], [71, 0, 1, "", "smooth_l1_loss"], [71, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[71, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "as_strided"], [71, 0, 1, "", "associative_scan"], [71, 0, 1, "", "atleast_1d"], [71, 0, 1, "", "atleast_2d"], [71, 0, 1, "", "atleast_3d"], [71, 0, 1, "", "column_stack"], [71, 0, 1, "", "concat_from_sequence"], [71, 0, 1, "", "dsplit"], [71, 0, 1, "", "dstack"], [71, 0, 1, "", "expand"], [71, 0, 1, "", "fill_diagonal"], [71, 0, 1, "", "flatten"], [71, 0, 1, "", "fliplr"], [71, 0, 1, "", "flipud"], [71, 0, 1, "", "fold"], [71, 0, 1, "", "heaviside"], [71, 0, 1, "", "hsplit"], [71, 0, 1, "", "hstack"], [71, 0, 1, "", "i0"], [71, 0, 1, "", "matricize"], [71, 0, 1, "", "moveaxis"], [71, 0, 1, "", "pad"], [71, 0, 1, "", "partial_fold"], [71, 0, 1, "", "partial_tensor_to_vec"], [71, 0, 1, "", "partial_unfold"], [71, 0, 1, "", "partial_vec_to_tensor"], [71, 0, 1, "", "put_along_axis"], [71, 0, 1, "", "rot90"], [71, 0, 1, "", "soft_thresholding"], [71, 0, 1, "", "take"], [71, 0, 1, "", "take_along_axis"], [71, 0, 1, "", "top_k"], [71, 0, 1, "", "trim_zeros"], [71, 0, 1, "", "unflatten"], [71, 0, 1, "", "unfold"], [71, 0, 1, "", "unique_consecutive"], [71, 0, 1, "", "vsplit"], [71, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[71, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "batch_norm"], [71, 0, 1, "", "group_norm"], [71, 0, 1, "", "instance_norm"], [71, 0, 1, "", "l1_normalize"], [71, 0, 1, "", "l2_normalize"], [71, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[71, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "bernoulli"], [71, 0, 1, "", "beta"], [71, 0, 1, "", "dirichlet"], [71, 0, 1, "", "gamma"], [71, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[71, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[71, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[71, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[71, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[71, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "bincount"], [71, 0, 1, "", "corrcoef"], [71, 0, 1, "", "cov"], [71, 0, 1, "", "cummax"], [71, 0, 1, "", "cummin"], [71, 0, 1, "", "histogram"], [71, 0, 1, "", "igamma"], [71, 0, 1, "", "median"], [71, 0, 1, "", "nanmean"], [71, 0, 1, "", "nanmedian"], [71, 0, 1, "", "nanmin"], [71, 0, 1, "", "nanprod"], [71, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[71, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[72, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[72, 4, 1, "", "_abc_impl"], [72, 0, 1, "", "all_equal"], [72, 0, 1, "", "array_equal"], [72, 0, 1, "", "assert_supports_inplace"], [72, 0, 1, "", "clip_matrix_norm"], [72, 0, 1, "", "clip_vector_norm"], [72, 0, 1, "", "default"], [72, 0, 1, "", "einops_rearrange"], [72, 0, 1, "", "einops_reduce"], [72, 0, 1, "", "einops_repeat"], [72, 0, 1, "", "exists"], [72, 0, 1, "", "fourier_encode"], [72, 0, 1, "", "gather"], [72, 0, 1, "", "gather_nd"], [72, 0, 1, "", "get_num_dims"], [72, 0, 1, "", "has_nans"], [72, 0, 1, "", "inplace_decrement"], [72, 0, 1, "", "inplace_increment"], [72, 0, 1, "", "inplace_update"], [72, 0, 1, "", "is_array"], [72, 0, 1, "", "is_ivy_array"], [72, 0, 1, "", "is_ivy_container"], [72, 0, 1, "", "is_native_array"], [72, 0, 1, "", "isin"], [72, 0, 1, "", "scatter_flat"], [72, 0, 1, "", "scatter_nd"], [72, 0, 1, "", "stable_divide"], [72, 0, 1, "", "stable_pow"], [72, 0, 1, "", "supports_inplace_updates"], [72, 0, 1, "", "to_file"], [72, 0, 1, "", "to_list"], [72, 0, 1, "", "to_numpy"], [72, 0, 1, "", "to_scalar"], [72, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[73, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "adam_step"], [73, 0, 1, "", "adam_update"], [73, 0, 1, "", "gradient_descent_update"], [73, 0, 1, "", "lamb_update"], [73, 0, 1, "", "lars_update"], [73, 0, 1, "", "optimizer_update"], [73, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[74, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[74, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[75, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "conv1d"], [75, 0, 1, "", "conv1d_transpose"], [75, 0, 1, "", "conv2d"], [75, 0, 1, "", "conv2d_transpose"], [75, 0, 1, "", "conv3d"], [75, 0, 1, "", "conv3d_transpose"], [75, 0, 1, "", "depthwise_conv2d"], [75, 0, 1, "", "dropout"], [75, 0, 1, "", "dropout1d"], [75, 0, 1, "", "dropout2d"], [75, 0, 1, "", "dropout3d"], [75, 0, 1, "", "linear"], [75, 0, 1, "", "lstm_update"], [75, 0, 1, "", "multi_head_attention"], [75, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[76, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "cholesky"], [76, 0, 1, "", "cross"], [76, 0, 1, "", "det"], [76, 0, 1, "", "diag"], [76, 0, 1, "", "diagonal"], [76, 0, 1, "", "eig"], [76, 0, 1, "", "eigh"], [76, 0, 1, "", "eigvalsh"], [76, 0, 1, "", "inner"], [76, 0, 1, "", "inv"], [76, 0, 1, "", "matmul"], [76, 0, 1, "", "matrix_norm"], [76, 0, 1, "", "matrix_power"], [76, 0, 1, "", "matrix_rank"], [76, 0, 1, "", "matrix_transpose"], [76, 0, 1, "", "outer"], [76, 0, 1, "", "pinv"], [76, 0, 1, "", "qr"], [76, 0, 1, "", "slogdet"], [76, 0, 1, "", "solve"], [76, 0, 1, "", "svd"], [76, 0, 1, "", "svdvals"], [76, 0, 1, "", "tensordot"], [76, 0, 1, "", "tensorsolve"], [76, 0, 1, "", "trace"], [76, 0, 1, "", "vander"], [76, 0, 1, "", "vecdot"], [76, 0, 1, "", "vector_norm"], [76, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[77, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "binary_cross_entropy"], [77, 0, 1, "", "cross_entropy"], [77, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[78, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "clip"], [78, 0, 1, "", "concat"], [78, 0, 1, "", "constant_pad"], [78, 0, 1, "", "expand_dims"], [78, 0, 1, "", "flip"], [78, 0, 1, "", "permute_dims"], [78, 0, 1, "", "repeat"], [78, 0, 1, "", "reshape"], [78, 0, 1, "", "roll"], [78, 0, 1, "", "split"], [78, 0, 1, "", "squeeze"], [78, 0, 1, "", "stack"], [78, 0, 1, "", "swapaxes"], [78, 0, 1, "", "tile"], [78, 0, 1, "", "unstack"], [78, 0, 1, "", "view"], [78, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[79, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[80, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "multinomial"], [80, 0, 1, "", "randint"], [80, 0, 1, "", "random_normal"], [80, 0, 1, "", "random_uniform"], [80, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[81, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "argmax"], [81, 0, 1, "", "argmin"], [81, 0, 1, "", "argwhere"], [81, 0, 1, "", "nonzero"], [81, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[82, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "unique_all"], [82, 0, 1, "", "unique_counts"], [82, 0, 1, "", "unique_inverse"], [82, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[83, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[83, 4, 1, "", "_abc_impl"], [83, 0, 1, "", "argsort"], [83, 0, 1, "", "msort"], [83, 0, 1, "", "searchsorted"], [83, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[84, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "cumprod"], [84, 0, 1, "", "cumsum"], [84, 0, 1, "", "einsum"], [84, 0, 1, "", "max"], [84, 0, 1, "", "mean"], [84, 0, 1, "", "min"], [84, 0, 1, "", "prod"], [84, 0, 1, "", "std"], [84, 0, 1, "", "sum"], [84, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[85, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "all"], [85, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[86, 2, 1, "", "_wrap_function"], [86, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[87, 3, 0, "-", "activations"], [88, 3, 0, "-", "base"], [117, 3, 0, "-", "container"], [89, 3, 0, "-", "conversions"], [90, 3, 0, "-", "creation"], [91, 3, 0, "-", "data_type"], [92, 3, 0, "-", "device"], [93, 3, 0, "-", "elementwise"], [94, 3, 0, "-", "experimental"], [95, 3, 0, "-", "general"], [96, 3, 0, "-", "gradients"], [97, 3, 0, "-", "image"], [98, 3, 0, "-", "layers"], [99, 3, 0, "-", "linear_algebra"], [100, 3, 0, "-", "losses"], [101, 3, 0, "-", "manipulation"], [102, 3, 0, "-", "norms"], [103, 3, 0, "-", "random"], [104, 3, 0, "-", "searching"], [105, 3, 0, "-", "set"], [106, 3, 0, "-", "sorting"], [107, 3, 0, "-", "statistical"], [108, 3, 0, "-", "utility"], [109, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[87, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_gelu"], [87, 0, 1, "", "_static_hardswish"], [87, 0, 1, "", "_static_leaky_relu"], [87, 0, 1, "", "_static_log_softmax"], [87, 0, 1, "", "_static_mish"], [87, 0, 1, "", "_static_relu"], [87, 0, 1, "", "_static_sigmoid"], [87, 0, 1, "", "_static_softmax"], [87, 0, 1, "", "_static_softplus"], [87, 0, 1, "", "gelu"], [87, 0, 1, "", "hardswish"], [87, 0, 1, "", "leaky_relu"], [87, 0, 1, "", "log_softmax"], [87, 0, 1, "", "mish"], [87, 0, 1, "", "relu"], [87, 0, 1, "", "sigmoid"], [87, 0, 1, "", "softmax"], [87, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[88, 1, 1, "", "ContainerBase"], [88, 2, 1, "", "_is_jsonable"], [88, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[88, 0, 1, "", "__getitem__"], [88, 0, 1, "", "__init__"], [88, 0, 1, "", "__setitem__"], [88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [88, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [88, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [88, 0, 1, "", "_cont_concat_unify"], [88, 0, 1, "", "_cont_get_dev"], [88, 0, 1, "", "_cont_get_dtype"], [88, 0, 1, "", "_cont_get_shape"], [88, 0, 1, "", "_cont_get_shapes"], [88, 5, 1, "", "_cont_ivy"], [88, 0, 1, "", "_cont_mean_unify"], [88, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [88, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [88, 0, 1, "", "_cont_slice_keys"], [88, 0, 1, "", "_cont_sum_unify"], [88, 0, 1, "", "_get_queue_item"], [88, 0, 1, "", "cont_all_false"], [88, 0, 1, "", "cont_all_key_chains"], [88, 0, 1, "", "cont_all_true"], [88, 0, 1, "", "cont_as_bools"], [88, 0, 1, "", "cont_assert_contains_sub_container"], [88, 0, 1, "", "cont_assert_contains_sub_structure"], [88, 0, 1, "", "cont_assert_identical"], [88, 0, 1, "", "cont_assert_identical_structure"], [88, 0, 1, "", "cont_at_key_chain"], [88, 0, 1, "", "cont_at_key_chains"], [88, 0, 1, "", "cont_at_keys"], [88, 0, 1, "", "cont_combine"], [88, 0, 1, "", "cont_common_key_chains"], [88, 5, 1, "", "cont_config"], [88, 0, 1, "", "cont_contains_sub_container"], [88, 0, 1, "", "cont_contains_sub_structure"], [88, 0, 1, "", "cont_copy"], [88, 0, 1, "", "cont_create_if_absent"], [88, 0, 1, "", "cont_cutoff_at_depth"], [88, 0, 1, "", "cont_cutoff_at_height"], [88, 0, 1, "", "cont_deep_copy"], [88, 5, 1, "", "cont_dev"], [88, 5, 1, "", "cont_dev_str"], [88, 0, 1, "", "cont_diff"], [88, 5, 1, "", "cont_dtype"], [88, 0, 1, "", "cont_duplicate_array_keychains"], [88, 0, 1, "", "cont_find_sub_container"], [88, 0, 1, "", "cont_find_sub_structure"], [88, 0, 1, "", "cont_flatten_key_chain"], [88, 0, 1, "", "cont_flatten_key_chains"], [88, 0, 1, "", "cont_format_key_chains"], [88, 0, 1, "", "cont_from_disk_as_hdf5"], [88, 0, 1, "", "cont_from_disk_as_json"], [88, 0, 1, "", "cont_from_disk_as_pickled"], [88, 0, 1, "", "cont_from_flat_list"], [88, 0, 1, "", "cont_handle_inplace"], [88, 0, 1, "", "cont_has_key"], [88, 0, 1, "", "cont_has_key_chain"], [88, 0, 1, "", "cont_identical"], [88, 0, 1, "", "cont_identical_array_shapes"], [88, 0, 1, "", "cont_identical_configs"], [88, 0, 1, "", "cont_identical_structure"], [88, 0, 1, "", "cont_if_exists"], [88, 0, 1, "", "cont_inplace_update"], [88, 5, 1, "", "cont_ivy"], [88, 0, 1, "", "cont_key_chains_containing"], [88, 0, 1, "", "cont_list_join"], [88, 0, 1, "", "cont_list_stack"], [88, 0, 1, "", "cont_load"], [88, 0, 1, "", "cont_map"], [88, 0, 1, "", "cont_map_sub_conts"], [88, 5, 1, "", "cont_max_depth"], [88, 0, 1, "", "cont_multi_map"], [88, 0, 1, "", "cont_multi_map_in_function"], [88, 0, 1, "", "cont_num_arrays"], [88, 0, 1, "", "cont_overwrite_at_key_chain"], [88, 0, 1, "", "cont_overwrite_at_key_chains"], [88, 0, 1, "", "cont_prune_empty"], [88, 0, 1, "", "cont_prune_key_chain"], [88, 0, 1, "", "cont_prune_key_chains"], [88, 0, 1, "", "cont_prune_key_from_key_chains"], [88, 0, 1, "", "cont_prune_keys"], [88, 0, 1, "", "cont_prune_keys_from_key_chains"], [88, 0, 1, "", "cont_reduce"], [88, 0, 1, "", "cont_remove_key_length_limit"], [88, 0, 1, "", "cont_remove_print_limit"], [88, 0, 1, "", "cont_reshape_like"], [88, 0, 1, "", "cont_restructure"], [88, 0, 1, "", "cont_restructure_key_chains"], [88, 0, 1, "", "cont_save"], [88, 0, 1, "", "cont_set_at_key_chain"], [88, 0, 1, "", "cont_set_at_key_chains"], [88, 0, 1, "", "cont_set_at_keys"], [88, 5, 1, "", "cont_shape"], [88, 5, 1, "", "cont_shapes"], [88, 0, 1, "", "cont_show"], [88, 0, 1, "", "cont_show_sub_container"], [88, 0, 1, "", "cont_size_ordered_arrays"], [88, 0, 1, "", "cont_slice_keys"], [88, 0, 1, "", "cont_slice_via_key"], [88, 0, 1, "", "cont_sort_by_key"], [88, 0, 1, "", "cont_structural_diff"], [88, 0, 1, "", "cont_to_dict"], [88, 0, 1, "", "cont_to_disk_as_hdf5"], [88, 0, 1, "", "cont_to_disk_as_json"], [88, 0, 1, "", "cont_to_disk_as_pickled"], [88, 0, 1, "", "cont_to_flat_list"], [88, 0, 1, "", "cont_to_iterator"], [88, 0, 1, "", "cont_to_iterator_keys"], [88, 0, 1, "", "cont_to_iterator_values"], [88, 0, 1, "", "cont_to_jsonable"], [88, 0, 1, "", "cont_to_nested_list"], [88, 0, 1, "", "cont_to_raw"], [88, 0, 1, "", "cont_trim_key"], [88, 0, 1, "", "cont_try_kc"], [88, 0, 1, "", "cont_unify"], [88, 0, 1, "", "cont_unstack_conts"], [88, 0, 1, "", "cont_update_config"], [88, 0, 1, "", "cont_with_default_key_color"], [88, 0, 1, "", "cont_with_entries_as_lists"], [88, 0, 1, "", "cont_with_ivy_backend"], [88, 0, 1, "", "cont_with_key_length_limit"], [88, 0, 1, "", "cont_with_print_indent"], [88, 0, 1, "", "cont_with_print_limit"], [88, 0, 1, "", "cont_with_print_line_spacing"], [88, 5, 1, "", "dynamic_backend"], [88, 0, 1, "", "h5_file_size"], [88, 0, 1, "", "shuffle_h5_file"], [88, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[117, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[117, 0, 1, "", "__abs__"], [117, 0, 1, "", "__add__"], [117, 0, 1, "", "__eq__"], [117, 0, 1, "", "__ge__"], [117, 0, 1, "", "__gt__"], [117, 0, 1, "", "__init__"], [117, 0, 1, "", "__le__"], [117, 0, 1, "", "__lt__"], [117, 0, 1, "", "__ne__"], [117, 0, 1, "", "__pow__"], [117, 0, 1, "", "__radd__"], [117, 0, 1, "", "__rrshift__"], [117, 0, 1, "", "__rshift__"], [117, 0, 1, "", "__rsub__"], [117, 0, 1, "", "__sub__"], [117, 0, 1, "", "__truediv__"], [117, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[89, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_to_ivy"], [89, 0, 1, "", "_static_to_native"], [89, 0, 1, "", "to_ivy"], [89, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[90, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_arange"], [90, 0, 1, "", "_static_asarray"], [90, 0, 1, "", "_static_copy_array"], [90, 0, 1, "", "_static_empty"], [90, 0, 1, "", "_static_empty_like"], [90, 0, 1, "", "_static_eye"], [90, 0, 1, "", "_static_from_dlpack"], [90, 0, 1, "", "_static_full"], [90, 0, 1, "", "_static_full_like"], [90, 0, 1, "", "_static_linspace"], [90, 0, 1, "", "_static_logspace"], [90, 0, 1, "", "_static_meshgrid"], [90, 0, 1, "", "_static_native_array"], [90, 0, 1, "", "_static_one_hot"], [90, 0, 1, "", "_static_ones"], [90, 0, 1, "", "_static_ones_like"], [90, 0, 1, "", "_static_tril"], [90, 0, 1, "", "_static_triu"], [90, 0, 1, "", "_static_zeros"], [90, 0, 1, "", "_static_zeros_like"], [90, 0, 1, "", "asarray"], [90, 0, 1, "", "copy_array"], [90, 0, 1, "", "empty_like"], [90, 0, 1, "", "from_dlpack"], [90, 0, 1, "", "frombuffer"], [90, 0, 1, "", "full_like"], [90, 0, 1, "", "linspace"], [90, 0, 1, "", "logspace"], [90, 0, 1, "", "meshgrid"], [90, 0, 1, "", "native_array"], [90, 0, 1, "", "one_hot"], [90, 0, 1, "", "ones_like"], [90, 0, 1, "", "static_frombuffer"], [90, 0, 1, "", "static_triu_indices"], [90, 0, 1, "", "tril"], [90, 0, 1, "", "triu"], [90, 0, 1, "", "triu_indices"], [90, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[91, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_astype"], [91, 0, 1, "", "_static_broadcast_arrays"], [91, 0, 1, "", "_static_broadcast_to"], [91, 0, 1, "", "_static_can_cast"], [91, 0, 1, "", "_static_default_complex_dtype"], [91, 0, 1, "", "_static_default_float_dtype"], [91, 0, 1, "", "_static_dtype"], [91, 0, 1, "", "_static_finfo"], [91, 0, 1, "", "_static_function_supported_dtypes"], [91, 0, 1, "", "_static_function_unsupported_dtypes"], [91, 0, 1, "", "_static_iinfo"], [91, 0, 1, "", "_static_is_bool_dtype"], [91, 0, 1, "", "_static_is_complex_dtype"], [91, 0, 1, "", "_static_is_float_dtype"], [91, 0, 1, "", "_static_is_int_dtype"], [91, 0, 1, "", "_static_is_uint_dtype"], [91, 0, 1, "", "_static_result_type"], [91, 0, 1, "", "astype"], [91, 0, 1, "", "broadcast_arrays"], [91, 0, 1, "", "broadcast_to"], [91, 0, 1, "", "can_cast"], [91, 0, 1, "", "dtype"], [91, 0, 1, "", "finfo"], [91, 0, 1, "", "iinfo"], [91, 0, 1, "", "is_bool_dtype"], [91, 0, 1, "", "is_complex_dtype"], [91, 0, 1, "", "is_float_dtype"], [91, 0, 1, "", "is_int_dtype"], [91, 0, 1, "", "is_uint_dtype"], [91, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[92, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_dev"], [92, 0, 1, "", "_static_to_device"], [92, 0, 1, "", "dev"], [92, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[93, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_abs"], [93, 0, 1, "", "_static_acos"], [93, 0, 1, "", "_static_acosh"], [93, 0, 1, "", "_static_add"], [93, 0, 1, "", "_static_asin"], [93, 0, 1, "", "_static_asinh"], [93, 0, 1, "", "_static_atan"], [93, 0, 1, "", "_static_atan2"], [93, 0, 1, "", "_static_atanh"], [93, 0, 1, "", "_static_bitwise_and"], [93, 0, 1, "", "_static_bitwise_invert"], [93, 0, 1, "", "_static_bitwise_left_shift"], [93, 0, 1, "", "_static_bitwise_or"], [93, 0, 1, "", "_static_bitwise_right_shift"], [93, 0, 1, "", "_static_bitwise_xor"], [93, 0, 1, "", "_static_ceil"], [93, 0, 1, "", "_static_cos"], [93, 0, 1, "", "_static_cosh"], [93, 0, 1, "", "_static_deg2rad"], [93, 0, 1, "", "_static_divide"], [93, 0, 1, "", "_static_equal"], [93, 0, 1, "", "_static_erf"], [93, 0, 1, "", "_static_exp"], [93, 0, 1, "", "_static_expm1"], [93, 0, 1, "", "_static_floor"], [93, 0, 1, "", "_static_floor_divide"], [93, 0, 1, "", "_static_greater"], [93, 0, 1, "", "_static_greater_equal"], [93, 0, 1, "", "_static_isfinite"], [93, 0, 1, "", "_static_isinf"], [93, 0, 1, "", "_static_isnan"], [93, 0, 1, "", "_static_isreal"], [93, 0, 1, "", "_static_lcm"], [93, 0, 1, "", "_static_less"], [93, 0, 1, "", "_static_less_equal"], [93, 0, 1, "", "_static_log"], [93, 0, 1, "", "_static_log10"], [93, 0, 1, "", "_static_log1p"], [93, 0, 1, "", "_static_log2"], [93, 0, 1, "", "_static_logaddexp"], [93, 0, 1, "", "_static_logical_and"], [93, 0, 1, "", "_static_logical_not"], [93, 0, 1, "", "_static_logical_or"], [93, 0, 1, "", "_static_logical_xor"], [93, 0, 1, "", "_static_maximum"], [93, 0, 1, "", "_static_minimum"], [93, 0, 1, "", "_static_multiply"], [93, 0, 1, "", "_static_negative"], [93, 0, 1, "", "_static_not_equal"], [93, 0, 1, "", "_static_positive"], [93, 0, 1, "", "_static_pow"], [93, 0, 1, "", "_static_rad2deg"], [93, 0, 1, "", "_static_reciprocal"], [93, 0, 1, "", "_static_remainder"], [93, 0, 1, "", "_static_round"], [93, 0, 1, "", "_static_sign"], [93, 0, 1, "", "_static_sin"], [93, 0, 1, "", "_static_sinh"], [93, 0, 1, "", "_static_sqrt"], [93, 0, 1, "", "_static_square"], [93, 0, 1, "", "_static_subtract"], [93, 0, 1, "", "_static_tan"], [93, 0, 1, "", "_static_tanh"], [93, 0, 1, "", "_static_trapz"], [93, 0, 1, "", "_static_trunc"], [93, 0, 1, "", "_static_trunc_divide"], [93, 0, 1, "", "abs"], [93, 0, 1, "", "acos"], [93, 0, 1, "", "acosh"], [93, 0, 1, "", "add"], [93, 0, 1, "", "angle"], [93, 0, 1, "", "asin"], [93, 0, 1, "", "asinh"], [93, 0, 1, "", "atan"], [93, 0, 1, "", "atan2"], [93, 0, 1, "", "atanh"], [93, 0, 1, "", "bitwise_and"], [93, 0, 1, "", "bitwise_invert"], [93, 0, 1, "", "bitwise_left_shift"], [93, 0, 1, "", "bitwise_or"], [93, 0, 1, "", "bitwise_right_shift"], [93, 0, 1, "", "bitwise_xor"], [93, 0, 1, "", "ceil"], [93, 0, 1, "", "cos"], [93, 0, 1, "", "cosh"], [93, 0, 1, "", "deg2rad"], [93, 0, 1, "", "divide"], [93, 0, 1, "", "equal"], [93, 0, 1, "", "erf"], [93, 0, 1, "", "exp"], [93, 0, 1, "", "exp2"], [93, 0, 1, "", "expm1"], [93, 0, 1, "", "floor"], [93, 0, 1, "", "floor_divide"], [93, 0, 1, "", "fmin"], [93, 0, 1, "", "gcd"], [93, 0, 1, "", "greater"], [93, 0, 1, "", "greater_equal"], [93, 0, 1, "", "imag"], [93, 0, 1, "", "isfinite"], [93, 0, 1, "", "isinf"], [93, 0, 1, "", "isnan"], [93, 0, 1, "", "isreal"], [93, 0, 1, "", "lcm"], [93, 0, 1, "", "less"], [93, 0, 1, "", "less_equal"], [93, 0, 1, "", "log"], [93, 0, 1, "", "log10"], [93, 0, 1, "", "log1p"], [93, 0, 1, "", "log2"], [93, 0, 1, "", "logaddexp"], [93, 0, 1, "", "logaddexp2"], [93, 0, 1, "", "logical_and"], [93, 0, 1, "", "logical_not"], [93, 0, 1, "", "logical_or"], [93, 0, 1, "", "logical_xor"], [93, 0, 1, "", "maximum"], [93, 0, 1, "", "minimum"], [93, 0, 1, "", "multiply"], [93, 0, 1, "", "nan_to_num"], [93, 0, 1, "", "negative"], [93, 0, 1, "", "not_equal"], [93, 0, 1, "", "positive"], [93, 0, 1, "", "pow"], [93, 0, 1, "", "rad2deg"], [93, 0, 1, "", "real"], [93, 0, 1, "", "reciprocal"], [93, 0, 1, "", "remainder"], [93, 0, 1, "", "round"], [93, 0, 1, "", "sign"], [93, 0, 1, "", "sin"], [93, 0, 1, "", "sinh"], [93, 0, 1, "", "sqrt"], [93, 0, 1, "", "square"], [93, 0, 1, "", "static_angle"], [93, 0, 1, "", "static_exp2"], [93, 0, 1, "", "static_fmin"], [93, 0, 1, "", "static_gcd"], [93, 0, 1, "", "static_imag"], [93, 0, 1, "", "static_logaddexp2"], [93, 0, 1, "", "static_nan_to_num"], [93, 0, 1, "", "static_real"], [93, 0, 1, "", "subtract"], [93, 0, 1, "", "tan"], [93, 0, 1, "", "tanh"], [93, 0, 1, "", "trapz"], [93, 0, 1, "", "trunc"], [93, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[94, 3, 0, "-", "activations"], [94, 3, 0, "-", "conversions"], [94, 3, 0, "-", "creation"], [94, 3, 0, "-", "data_type"], [94, 3, 0, "-", "device"], [94, 3, 0, "-", "elementwise"], [94, 3, 0, "-", "general"], [94, 3, 0, "-", "gradients"], [94, 3, 0, "-", "image"], [94, 3, 0, "-", "layers"], [94, 3, 0, "-", "linear_algebra"], [94, 3, 0, "-", "losses"], [94, 3, 0, "-", "manipulation"], [94, 3, 0, "-", "norms"], [94, 3, 0, "-", "random"], [94, 3, 0, "-", "searching"], [94, 3, 0, "-", "set"], [94, 3, 0, "-", "sorting"], [94, 3, 0, "-", "statistical"], [94, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[94, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_celu"], [94, 0, 1, "", "_static_elu"], [94, 0, 1, "", "_static_hardshrink"], [94, 0, 1, "", "_static_hardsilu"], [94, 0, 1, "", "_static_hardtanh"], [94, 0, 1, "", "_static_scaled_tanh"], [94, 0, 1, "", "_static_silu"], [94, 0, 1, "", "_static_softshrink"], [94, 0, 1, "", "_static_tanhshrink"], [94, 0, 1, "", "_static_threshold"], [94, 0, 1, "", "celu"], [94, 0, 1, "", "elu"], [94, 0, 1, "", "hardshrink"], [94, 0, 1, "", "hardsilu"], [94, 0, 1, "", "hardtanh"], [94, 0, 1, "", "logit"], [94, 0, 1, "", "logsigmoid"], [94, 0, 1, "", "prelu"], [94, 0, 1, "", "relu6"], [94, 0, 1, "", "scaled_tanh"], [94, 0, 1, "", "selu"], [94, 0, 1, "", "silu"], [94, 0, 1, "", "softshrink"], [94, 0, 1, "", "static_logit"], [94, 0, 1, "", "static_logsigmoid"], [94, 0, 1, "", "static_prelu"], [94, 0, 1, "", "static_relu6"], [94, 0, 1, "", "static_selu"], [94, 0, 1, "", "static_thresholded_relu"], [94, 0, 1, "", "tanhshrink"], [94, 0, 1, "", "threshold"], [94, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[94, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[94, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_trilu"], [94, 0, 1, "", "blackman_window"], [94, 0, 1, "", "eye_like"], [94, 0, 1, "", "hamming_window"], [94, 0, 1, "", "hann_window"], [94, 0, 1, "", "kaiser_bessel_derived_window"], [94, 0, 1, "", "kaiser_window"], [94, 0, 1, "", "mel_weight_matrix"], [94, 0, 1, "", "polyval"], [94, 0, 1, "", "static_blackman_window"], [94, 0, 1, "", "static_eye_like"], [94, 0, 1, "", "static_hamming_window"], [94, 0, 1, "", "static_hann_window"], [94, 0, 1, "", "static_kaiser_bessel_derived_window"], [94, 0, 1, "", "static_kaiser_window"], [94, 0, 1, "", "static_mel_weight_matrix"], [94, 0, 1, "", "static_polyval"], [94, 0, 1, "", "static_tril_indices"], [94, 0, 1, "", "static_unsorted_segment_mean"], [94, 0, 1, "", "static_unsorted_segment_min"], [94, 0, 1, "", "static_unsorted_segment_sum"], [94, 0, 1, "", "static_vorbis_window"], [94, 0, 1, "", "tril_indices"], [94, 0, 1, "", "trilu"], [94, 0, 1, "", "unsorted_segment_mean"], [94, 0, 1, "", "unsorted_segment_min"], [94, 0, 1, "", "unsorted_segment_sum"], [94, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[94, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[94, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[94, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "allclose"], [94, 0, 1, "", "amax"], [94, 0, 1, "", "amin"], [94, 0, 1, "", "binarizer"], [94, 0, 1, "", "conj"], [94, 0, 1, "", "copysign"], [94, 0, 1, "", "count_nonzero"], [94, 0, 1, "", "diff"], [94, 0, 1, "", "digamma"], [94, 0, 1, "", "erfc"], [94, 0, 1, "", "erfinv"], [94, 0, 1, "", "fix"], [94, 0, 1, "", "float_power"], [94, 0, 1, "", "fmax"], [94, 0, 1, "", "fmod"], [94, 0, 1, "", "frexp"], [94, 0, 1, "", "gradient"], [94, 0, 1, "", "hypot"], [94, 0, 1, "", "isclose"], [94, 0, 1, "", "ldexp"], [94, 0, 1, "", "lerp"], [94, 0, 1, "", "modf"], [94, 0, 1, "", "nansum"], [94, 0, 1, "", "nextafter"], [94, 0, 1, "", "signbit"], [94, 0, 1, "", "sinc"], [94, 0, 1, "", "sparsify_tensor"], [94, 0, 1, "", "static_allclose"], [94, 0, 1, "", "static_amax"], [94, 0, 1, "", "static_amin"], [94, 0, 1, "", "static_binarizer"], [94, 0, 1, "", "static_conj"], [94, 0, 1, "", "static_copysign"], [94, 0, 1, "", "static_count_nonzero"], [94, 0, 1, "", "static_diff"], [94, 0, 1, "", "static_digamma"], [94, 0, 1, "", "static_erfc"], [94, 0, 1, "", "static_erfinv"], [94, 0, 1, "", "static_fix"], [94, 0, 1, "", "static_float_power"], [94, 0, 1, "", "static_fmax"], [94, 0, 1, "", "static_fmod"], [94, 0, 1, "", "static_frexp"], [94, 0, 1, "", "static_gradient"], [94, 0, 1, "", "static_hypot"], [94, 0, 1, "", "static_isclose"], [94, 0, 1, "", "static_ldexp"], [94, 0, 1, "", "static_lerp"], [94, 0, 1, "", "static_modf"], [94, 0, 1, "", "static_nansum"], [94, 0, 1, "", "static_nextafter"], [94, 0, 1, "", "static_signbit"], [94, 0, 1, "", "static_sinc"], [94, 0, 1, "", "static_sparsify_tensor"], [94, 0, 1, "", "static_xlogy"], [94, 0, 1, "", "static_zeta"], [94, 0, 1, "", "xlogy"], [94, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[94, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_reduce"], [94, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[94, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[94, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[94, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_fft"], [94, 0, 1, "", "_static_sliding_window"], [94, 0, 1, "", "adaptive_avg_pool1d"], [94, 0, 1, "", "adaptive_avg_pool2d"], [94, 0, 1, "", "adaptive_max_pool2d"], [94, 0, 1, "", "adaptive_max_pool3d"], [94, 0, 1, "", "avg_pool1d"], [94, 0, 1, "", "avg_pool2d"], [94, 0, 1, "", "avg_pool3d"], [94, 0, 1, "", "dct"], [94, 0, 1, "", "dft"], [94, 0, 1, "", "embedding"], [94, 0, 1, "", "fft"], [94, 0, 1, "", "idct"], [94, 0, 1, "", "ifft"], [94, 0, 1, "", "ifftn"], [94, 0, 1, "", "interpolate"], [94, 0, 1, "", "max_pool1d"], [94, 0, 1, "", "max_pool2d"], [94, 0, 1, "", "max_pool3d"], [94, 0, 1, "", "max_unpool1d"], [94, 0, 1, "", "rfft"], [94, 0, 1, "", "rfftn"], [94, 0, 1, "", "sliding_window"], [94, 0, 1, "", "static_adaptive_avg_pool1d"], [94, 0, 1, "", "static_adaptive_avg_pool2d"], [94, 0, 1, "", "static_adaptive_max_pool2d"], [94, 0, 1, "", "static_adaptive_max_pool3d"], [94, 0, 1, "", "static_avg_pool1d"], [94, 0, 1, "", "static_avg_pool2d"], [94, 0, 1, "", "static_avg_pool3d"], [94, 0, 1, "", "static_dct"], [94, 0, 1, "", "static_dft"], [94, 0, 1, "", "static_embedding"], [94, 0, 1, "", "static_idct"], [94, 0, 1, "", "static_ifft"], [94, 0, 1, "", "static_ifftn"], [94, 0, 1, "", "static_interpolate"], [94, 0, 1, "", "static_max_pool1d"], [94, 0, 1, "", "static_max_pool2d"], [94, 0, 1, "", "static_max_pool3d"], [94, 0, 1, "", "static_max_unpool1d"], [94, 0, 1, "", "static_rfft"], [94, 0, 1, "", "static_rfftn"], [94, 0, 1, "", "static_rnn"], [94, 0, 1, "", "static_stft"], [94, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[94, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "adjoint"], [94, 0, 1, "", "batched_outer"], [94, 0, 1, "", "cond"], [94, 0, 1, "", "diagflat"], [94, 0, 1, "", "dot"], [94, 0, 1, "", "eig"], [94, 0, 1, "", "eigh_tridiagonal"], [94, 0, 1, "", "eigvals"], [94, 0, 1, "", "higher_order_moment"], [94, 0, 1, "", "initialize_tucker"], [94, 0, 1, "", "kron"], [94, 0, 1, "", "make_svd_non_negative"], [94, 0, 1, "", "matrix_exp"], [94, 0, 1, "", "mode_dot"], [94, 0, 1, "", "multi_dot"], [94, 0, 1, "", "multi_mode_dot"], [94, 0, 1, "", "partial_tucker"], [94, 0, 1, "", "static_adjoint"], [94, 0, 1, "", "static_batched_outer"], [94, 0, 1, "", "static_cond"], [94, 0, 1, "", "static_diagflat"], [94, 0, 1, "", "static_dot"], [94, 0, 1, "", "static_eig"], [94, 0, 1, "", "static_eigh_tridiagonal"], [94, 0, 1, "", "static_eigvals"], [94, 0, 1, "", "static_higher_order_moment"], [94, 0, 1, "", "static_initialize_tucker"], [94, 0, 1, "", "static_kron"], [94, 0, 1, "", "static_make_svd_non_negative"], [94, 0, 1, "", "static_matrix_exp"], [94, 0, 1, "", "static_mode_dot"], [94, 0, 1, "", "static_multi_dot"], [94, 0, 1, "", "static_multi_mode_dot"], [94, 0, 1, "", "static_partial_tucker"], [94, 0, 1, "", "static_svd_flip"], [94, 0, 1, "", "static_tensor_train"], [94, 0, 1, "", "static_truncated_svd"], [94, 0, 1, "", "static_tt_matrix_to_tensor"], [94, 0, 1, "", "static_tucker"], [94, 0, 1, "", "svd_flip"], [94, 0, 1, "", "tensor_train"], [94, 0, 1, "", "truncated_svd"], [94, 0, 1, "", "tt_matrix_to_tensor"], [94, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[94, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_hinge_embedding_loss"], [94, 0, 1, "", "_static_huber_loss"], [94, 0, 1, "", "_static_kl_div"], [94, 0, 1, "", "_static_l1_loss"], [94, 0, 1, "", "_static_log_poisson_loss"], [94, 0, 1, "", "_static_poisson_nll_loss"], [94, 0, 1, "", "_static_smooth_l1_loss"], [94, 0, 1, "", "_static_soft_margin_loss"], [94, 0, 1, "", "hinge_embedding_loss"], [94, 0, 1, "", "huber_loss"], [94, 0, 1, "", "kl_div"], [94, 0, 1, "", "l1_loss"], [94, 0, 1, "", "log_poisson_loss"], [94, 0, 1, "", "poisson_nll_loss"], [94, 0, 1, "", "smooth_l1_loss"], [94, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[94, 1, 1, "", "_ContainerWithManipulationExperimental"], [94, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_fill_diagonal"], [94, 0, 1, "", "_static_put_along_axis"], [94, 0, 1, "", "_static_take"], [94, 0, 1, "", "_static_trim_zeros"], [94, 0, 1, "", "_static_unflatten"], [94, 0, 1, "", "_static_unique_consecutive"], [94, 0, 1, "", "as_strided"], [94, 0, 1, "", "associative_scan"], [94, 0, 1, "", "atleast_1d"], [94, 0, 1, "", "atleast_2d"], [94, 0, 1, "", "atleast_3d"], [94, 0, 1, "", "broadcast_shapes"], [94, 0, 1, "", "column_stack"], [94, 0, 1, "", "concat_from_sequence"], [94, 0, 1, "", "dsplit"], [94, 0, 1, "", "dstack"], [94, 0, 1, "", "expand"], [94, 0, 1, "", "fill_diagonal"], [94, 0, 1, "", "flatten"], [94, 0, 1, "", "fliplr"], [94, 0, 1, "", "flipud"], [94, 0, 1, "", "fold"], [94, 0, 1, "", "heaviside"], [94, 0, 1, "", "hsplit"], [94, 0, 1, "", "hstack"], [94, 0, 1, "", "i0"], [94, 0, 1, "", "matricize"], [94, 0, 1, "", "moveaxis"], [94, 0, 1, "", "pad"], [94, 0, 1, "", "partial_fold"], [94, 0, 1, "", "partial_tensor_to_vec"], [94, 0, 1, "", "partial_unfold"], [94, 0, 1, "", "partial_vec_to_tensor"], [94, 0, 1, "", "put_along_axis"], [94, 0, 1, "", "rot90"], [94, 0, 1, "", "soft_thresholding"], [94, 0, 1, "", "static_as_strided"], [94, 0, 1, "", "static_atleast_1d"], [94, 0, 1, "", "static_atleast_2d"], [94, 0, 1, "", "static_atleast_3d"], [94, 0, 1, "", "static_broadcast_shapes"], [94, 0, 1, "", "static_column_stack"], [94, 0, 1, "", "static_concat_from_sequence"], [94, 0, 1, "", "static_dsplit"], [94, 0, 1, "", "static_dstack"], [94, 0, 1, "", "static_expand"], [94, 0, 1, "", "static_flatten"], [94, 0, 1, "", "static_fliplr"], [94, 0, 1, "", "static_flipud"], [94, 0, 1, "", "static_fold"], [94, 0, 1, "", "static_heaviside"], [94, 0, 1, "", "static_hsplit"], [94, 0, 1, "", "static_hstack"], [94, 0, 1, "", "static_i0"], [94, 0, 1, "", "static_matricize"], [94, 0, 1, "", "static_moveaxis"], [94, 0, 1, "", "static_pad"], [94, 0, 1, "", "static_partial_fold"], [94, 0, 1, "", "static_partial_tensor_to_vec"], [94, 0, 1, "", "static_partial_unfold"], [94, 0, 1, "", "static_partial_vec_to_tensor"], [94, 0, 1, "", "static_rot90"], [94, 0, 1, "", "static_soft_thresholding"], [94, 0, 1, "", "static_take_along_axis"], [94, 0, 1, "", "static_top_k"], [94, 0, 1, "", "static_unfold"], [94, 0, 1, "", "static_vsplit"], [94, 0, 1, "", "static_vstack"], [94, 0, 1, "", "take"], [94, 0, 1, "", "take_along_axis"], [94, 0, 1, "", "top_k"], [94, 0, 1, "", "trim_zeros"], [94, 0, 1, "", "unflatten"], [94, 0, 1, "", "unfold"], [94, 0, 1, "", "unique_consecutive"], [94, 0, 1, "", "vsplit"], [94, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[94, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "batch_norm"], [94, 0, 1, "", "group_norm"], [94, 0, 1, "", "instance_norm"], [94, 0, 1, "", "l1_normalize"], [94, 0, 1, "", "l2_normalize"], [94, 0, 1, "", "lp_normalize"], [94, 0, 1, "", "static_batch_norm"], [94, 0, 1, "", "static_group_norm"], [94, 0, 1, "", "static_instance_norm"], [94, 0, 1, "", "static_l1_normalize"], [94, 0, 1, "", "static_l2_normalize"], [94, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[94, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "bernoulli"], [94, 0, 1, "", "beta"], [94, 0, 1, "", "dirichlet"], [94, 0, 1, "", "gamma"], [94, 0, 1, "", "poisson"], [94, 0, 1, "", "static_bernoulli"], [94, 0, 1, "", "static_beta"], [94, 0, 1, "", "static_dirichlet"], [94, 0, 1, "", "static_gamma"], [94, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[94, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "static_unravel_index"], [94, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[94, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[94, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[94, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "invert_permutation"], [94, 0, 1, "", "lexsort"], [94, 0, 1, "", "static_invert_permutation"], [94, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[94, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_cummax"], [94, 0, 1, "", "_static_cummin"], [94, 0, 1, "", "_static_nanmin"], [94, 0, 1, "", "bincount"], [94, 0, 1, "", "corrcoef"], [94, 0, 1, "", "cov"], [94, 0, 1, "", "cummax"], [94, 0, 1, "", "cummin"], [94, 0, 1, "", "histogram"], [94, 0, 1, "", "igamma"], [94, 0, 1, "", "lgamma"], [94, 0, 1, "", "median"], [94, 0, 1, "", "nanmean"], [94, 0, 1, "", "nanmedian"], [94, 0, 1, "", "nanmin"], [94, 0, 1, "", "nanprod"], [94, 0, 1, "", "quantile"], [94, 0, 1, "", "static_bincount"], [94, 0, 1, "", "static_corrcoef"], [94, 0, 1, "", "static_cov"], [94, 0, 1, "", "static_histogram"], [94, 0, 1, "", "static_igamma"], [94, 0, 1, "", "static_lgamma"], [94, 0, 1, "", "static_median"], [94, 0, 1, "", "static_nanmean"], [94, 0, 1, "", "static_nanmedian"], [94, 0, 1, "", "static_nanprod"], [94, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[94, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "optional_get_element"], [94, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[95, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[95, 4, 1, "", "_abc_impl"], [95, 0, 1, "", "_static_all_equal"], [95, 0, 1, "", "_static_array_equal"], [95, 0, 1, "", "_static_assert_supports_inplace"], [95, 0, 1, "", "_static_clip_matrix_norm"], [95, 0, 1, "", "_static_clip_vector_norm"], [95, 0, 1, "", "_static_einops_rearrange"], [95, 0, 1, "", "_static_einops_reduce"], [95, 0, 1, "", "_static_einops_repeat"], [95, 0, 1, "", "_static_exists"], [95, 0, 1, "", "_static_fourier_encode"], [95, 0, 1, "", "_static_gather"], [95, 0, 1, "", "_static_gather_nd"], [95, 0, 1, "", "_static_get_num_dims"], [95, 0, 1, "", "_static_has_nans"], [95, 0, 1, "", "_static_inplace_decrement"], [95, 0, 1, "", "_static_inplace_increment"], [95, 0, 1, "", "_static_inplace_update"], [95, 0, 1, "", "_static_is_array"], [95, 0, 1, "", "_static_is_ivy_array"], [95, 0, 1, "", "_static_is_native_array"], [95, 0, 1, "", "_static_scatter_flat"], [95, 0, 1, "", "_static_scatter_nd"], [95, 0, 1, "", "_static_size"], [95, 0, 1, "", "_static_stable_divide"], [95, 0, 1, "", "_static_stable_pow"], [95, 0, 1, "", "_static_supports_inplace_updates"], [95, 0, 1, "", "_static_to_list"], [95, 0, 1, "", "_static_to_numpy"], [95, 0, 1, "", "_static_to_scalar"], [95, 0, 1, "", "_static_value_is_nan"], [95, 0, 1, "", "all_equal"], [95, 0, 1, "", "array_equal"], [95, 0, 1, "", "assert_supports_inplace"], [95, 0, 1, "", "clip_matrix_norm"], [95, 0, 1, "", "clip_vector_norm"], [95, 0, 1, "", "einops_rearrange"], [95, 0, 1, "", "einops_reduce"], [95, 0, 1, "", "einops_repeat"], [95, 0, 1, "", "exists"], [95, 0, 1, "", "fourier_encode"], [95, 0, 1, "", "gather"], [95, 0, 1, "", "gather_nd"], [95, 0, 1, "", "get_num_dims"], [95, 0, 1, "", "has_nans"], [95, 0, 1, "", "inplace_decrement"], [95, 0, 1, "", "inplace_increment"], [95, 0, 1, "", "inplace_update"], [95, 0, 1, "", "is_array"], [95, 0, 1, "", "is_ivy_array"], [95, 0, 1, "", "is_native_array"], [95, 0, 1, "", "isin"], [95, 0, 1, "", "itemsize"], [95, 0, 1, "", "scatter_flat"], [95, 0, 1, "", "scatter_nd"], [95, 0, 1, "", "size"], [95, 0, 1, "", "stable_divide"], [95, 0, 1, "", "stable_pow"], [95, 0, 1, "", "static_isin"], [95, 0, 1, "", "static_itemsize"], [95, 0, 1, "", "static_strides"], [95, 0, 1, "", "strides"], [95, 0, 1, "", "supports_inplace_updates"], [95, 0, 1, "", "to_list"], [95, 0, 1, "", "to_numpy"], [95, 0, 1, "", "to_scalar"], [95, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[96, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "_static_stop_gradient"], [96, 0, 1, "", "adam_step"], [96, 0, 1, "", "adam_update"], [96, 0, 1, "", "gradient_descent_update"], [96, 0, 1, "", "lamb_update"], [96, 0, 1, "", "lars_update"], [96, 0, 1, "", "optimizer_update"], [96, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[97, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[97, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[98, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "_static_conv1d"], [98, 0, 1, "", "_static_conv1d_transpose"], [98, 0, 1, "", "_static_conv2d"], [98, 0, 1, "", "_static_conv2d_transpose"], [98, 0, 1, "", "_static_conv3d"], [98, 0, 1, "", "_static_conv3d_transpose"], [98, 0, 1, "", "_static_depthwise_conv2d"], [98, 0, 1, "", "_static_dropout"], [98, 0, 1, "", "_static_dropout1d"], [98, 0, 1, "", "_static_dropout2d"], [98, 0, 1, "", "_static_dropout3d"], [98, 0, 1, "", "_static_linear"], [98, 0, 1, "", "_static_lstm_update"], [98, 0, 1, "", "_static_multi_head_attention"], [98, 0, 1, "", "_static_reduce_window"], [98, 0, 1, "", "_static_scaled_dot_product_attention"], [98, 0, 1, "", "conv1d"], [98, 0, 1, "", "conv1d_transpose"], [98, 0, 1, "", "conv2d"], [98, 0, 1, "", "conv2d_transpose"], [98, 0, 1, "", "conv3d"], [98, 0, 1, "", "conv3d_transpose"], [98, 0, 1, "", "depthwise_conv2d"], [98, 0, 1, "", "dropout"], [98, 0, 1, "", "dropout1d"], [98, 0, 1, "", "dropout2d"], [98, 0, 1, "", "dropout3d"], [98, 0, 1, "", "linear"], [98, 0, 1, "", "lstm_update"], [98, 0, 1, "", "multi_head_attention"], [98, 0, 1, "", "reduce_window"], [98, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[99, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[99, 4, 1, "", "_abc_impl"], [99, 0, 1, "", "_static_cholesky"], [99, 0, 1, "", "_static_cross"], [99, 0, 1, "", "_static_det"], [99, 0, 1, "", "_static_diag"], [99, 0, 1, "", "_static_diagonal"], [99, 0, 1, "", "_static_eigh"], [99, 0, 1, "", "_static_eigvalsh"], [99, 0, 1, "", "_static_inner"], [99, 0, 1, "", "_static_inv"], [99, 0, 1, "", "_static_matmul"], [99, 0, 1, "", "_static_matrix_norm"], [99, 0, 1, "", "_static_matrix_power"], [99, 0, 1, "", "_static_matrix_rank"], [99, 0, 1, "", "_static_matrix_transpose"], [99, 0, 1, "", "_static_outer"], [99, 0, 1, "", "_static_pinv"], [99, 0, 1, "", "_static_qr"], [99, 0, 1, "", "_static_slogdet"], [99, 0, 1, "", "_static_solve"], [99, 0, 1, "", "_static_svd"], [99, 0, 1, "", "_static_svdvals"], [99, 0, 1, "", "_static_tensordot"], [99, 0, 1, "", "_static_tensorsolve"], [99, 0, 1, "", "_static_trace"], [99, 0, 1, "", "_static_vander"], [99, 0, 1, "", "_static_vecdot"], [99, 0, 1, "", "_static_vector_norm"], [99, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [99, 0, 1, "", "cholesky"], [99, 0, 1, "", "cross"], [99, 0, 1, "", "det"], [99, 0, 1, "", "diag"], [99, 0, 1, "", "diagonal"], [99, 0, 1, "", "eigh"], [99, 0, 1, "", "eigvalsh"], [99, 0, 1, "", "general_inner_product"], [99, 0, 1, "", "inner"], [99, 0, 1, "", "inv"], [99, 0, 1, "", "matmul"], [99, 0, 1, "", "matrix_norm"], [99, 0, 1, "", "matrix_power"], [99, 0, 1, "", "matrix_rank"], [99, 0, 1, "", "matrix_transpose"], [99, 0, 1, "", "outer"], [99, 0, 1, "", "pinv"], [99, 0, 1, "", "qr"], [99, 0, 1, "", "slogdet"], [99, 0, 1, "", "solve"], [99, 0, 1, "", "static_general_inner_product"], [99, 0, 1, "", "svd"], [99, 0, 1, "", "svdvals"], [99, 0, 1, "", "tensordot"], [99, 0, 1, "", "tensorsolve"], [99, 0, 1, "", "trace"], [99, 0, 1, "", "vander"], [99, 0, 1, "", "vecdot"], [99, 0, 1, "", "vector_norm"], [99, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[100, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_static_binary_cross_entropy"], [100, 0, 1, "", "_static_cross_entropy"], [100, 0, 1, "", "_static_sparse_cross_entropy"], [100, 0, 1, "", "binary_cross_entropy"], [100, 0, 1, "", "cross_entropy"], [100, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[101, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "_static_clip"], [101, 0, 1, "", "_static_concat"], [101, 0, 1, "", "_static_constant_pad"], [101, 0, 1, "", "_static_expand_dims"], [101, 0, 1, "", "_static_flip"], [101, 0, 1, "", "_static_permute_dims"], [101, 0, 1, "", "_static_repeat"], [101, 0, 1, "", "_static_reshape"], [101, 0, 1, "", "_static_roll"], [101, 0, 1, "", "_static_split"], [101, 0, 1, "", "_static_squeeze"], [101, 0, 1, "", "_static_stack"], [101, 0, 1, "", "_static_swapaxes"], [101, 0, 1, "", "_static_tile"], [101, 0, 1, "", "_static_unstack"], [101, 0, 1, "", "_static_zero_pad"], [101, 0, 1, "", "clip"], [101, 0, 1, "", "concat"], [101, 0, 1, "", "constant_pad"], [101, 0, 1, "", "expand_dims"], [101, 0, 1, "", "flip"], [101, 0, 1, "", "permute_dims"], [101, 0, 1, "", "repeat"], [101, 0, 1, "", "reshape"], [101, 0, 1, "", "roll"], [101, 0, 1, "", "split"], [101, 0, 1, "", "squeeze"], [101, 0, 1, "", "stack"], [101, 0, 1, "", "swapaxes"], [101, 0, 1, "", "tile"], [101, 0, 1, "", "unstack"], [101, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[102, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[102, 4, 1, "", "_abc_impl"], [102, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[103, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[103, 4, 1, "", "_abc_impl"], [103, 0, 1, "", "_static_multinomial"], [103, 0, 1, "", "_static_randint"], [103, 0, 1, "", "_static_random_normal"], [103, 0, 1, "", "_static_random_uniform"], [103, 0, 1, "", "_static_shuffle"], [103, 0, 1, "", "multinomial"], [103, 0, 1, "", "randint"], [103, 0, 1, "", "random_normal"], [103, 0, 1, "", "random_uniform"], [103, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[104, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[104, 4, 1, "", "_abc_impl"], [104, 0, 1, "", "_static_argmax"], [104, 0, 1, "", "_static_argmin"], [104, 0, 1, "", "_static_argwhere"], [104, 0, 1, "", "_static_nonzero"], [104, 0, 1, "", "_static_where"], [104, 0, 1, "", "argmax"], [104, 0, 1, "", "argmin"], [104, 0, 1, "", "argwhere"], [104, 0, 1, "", "nonzero"], [104, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[105, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[105, 4, 1, "", "_abc_impl"], [105, 0, 1, "", "_static_unique_all"], [105, 0, 1, "", "_static_unique_counts"], [105, 0, 1, "", "_static_unique_inverse"], [105, 0, 1, "", "_static_unique_values"], [105, 0, 1, "", "unique_all"], [105, 0, 1, "", "unique_counts"], [105, 0, 1, "", "unique_inverse"], [105, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[106, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "_static_argsort"], [106, 0, 1, "", "_static_searchsorted"], [106, 0, 1, "", "_static_sort"], [106, 0, 1, "", "argsort"], [106, 0, 1, "", "msort"], [106, 0, 1, "", "searchsorted"], [106, 0, 1, "", "sort"], [106, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[107, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "_static_cumprod"], [107, 0, 1, "", "_static_cumsum"], [107, 0, 1, "", "_static_min"], [107, 0, 1, "", "_static_prod"], [107, 0, 1, "", "_static_sum"], [107, 0, 1, "", "_static_var"], [107, 0, 1, "", "cumprod"], [107, 0, 1, "", "cumsum"], [107, 0, 1, "", "einsum"], [107, 0, 1, "", "max"], [107, 0, 1, "", "mean"], [107, 0, 1, "", "min"], [107, 0, 1, "", "prod"], [107, 0, 1, "", "std"], [107, 0, 1, "", "sum"], [107, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[108, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[108, 4, 1, "", "_abc_impl"], [108, 0, 1, "", "_static_all"], [108, 0, 1, "", "_static_any"], [108, 0, 1, "", "all"], [108, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[109, 2, 1, "", "_wrap_function"], [109, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[110, 3, 0, "-", "base"], [111, 3, 0, "-", "cp_tensor"], [112, 3, 0, "-", "parafac2_tensor"], [113, 3, 0, "-", "tr_tensor"], [114, 3, 0, "-", "tt_tensor"], [115, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[110, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[110, 0, 1, "", "__init__"], [110, 4, 1, "", "_abc_impl"], [110, 0, 1, "", "mode_dot"], [110, 0, 1, "", "norm"], [110, 0, 1, "", "to_tensor"], [110, 0, 1, "", "to_unfolded"], [110, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[111, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[111, 0, 1, "", "__init__"], [111, 4, 1, "", "_abc_impl"], [111, 0, 1, "", "cp_copy"], [111, 0, 1, "", "cp_flip_sign"], [111, 0, 1, "", "cp_lstsq_grad"], [111, 0, 1, "", "cp_mode_dot"], [111, 0, 1, "", "cp_n_param"], [111, 0, 1, "", "cp_norm"], [111, 0, 1, "", "cp_normalize"], [111, 0, 1, "", "cp_to_tensor"], [111, 0, 1, "", "cp_to_unfolded"], [111, 0, 1, "", "cp_to_vec"], [111, 0, 1, "", "mode_dot"], [111, 5, 1, "", "n_param"], [111, 0, 1, "", "norm"], [111, 0, 1, "", "normalize"], [111, 0, 1, "", "to_tensor"], [111, 0, 1, "", "to_unfolded"], [111, 0, 1, "", "to_vec"], [111, 0, 1, "", "unfolding_dot_khatri_rao"], [111, 0, 1, "", "validate_cp_rank"], [111, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[112, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[112, 0, 1, "", "__init__"], [112, 4, 1, "", "_abc_impl"], [112, 0, 1, "", "apply_parafac2_projections"], [112, 0, 1, "", "from_CPTensor"], [112, 5, 1, "", "n_param"], [112, 0, 1, "", "parafac2_normalise"], [112, 0, 1, "", "parafac2_to_slice"], [112, 0, 1, "", "parafac2_to_slices"], [112, 0, 1, "", "parafac2_to_tensor"], [112, 0, 1, "", "parafac2_to_unfolded"], [112, 0, 1, "", "parafac2_to_vec"], [112, 0, 1, "", "to_tensor"], [112, 0, 1, "", "to_unfolded"], [112, 0, 1, "", "to_vec"], [112, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[113, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[113, 0, 1, "", "__init__"], [113, 4, 1, "", "_abc_impl"], [113, 5, 1, "", "n_param"], [113, 0, 1, "", "to_tensor"], [113, 0, 1, "", "to_unfolded"], [113, 0, 1, "", "to_vec"], [113, 0, 1, "", "tr_n_param"], [113, 0, 1, "", "tr_to_tensor"], [113, 0, 1, "", "tr_to_unfolded"], [113, 0, 1, "", "tr_to_vec"], [113, 0, 1, "", "validate_tr_rank"], [113, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[114, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[114, 0, 1, "", "__init__"], [114, 4, 1, "", "_abc_impl"], [114, 0, 1, "", "_tt_n_param"], [114, 0, 1, "", "index_update"], [114, 5, 1, "", "n_param"], [114, 0, 1, "", "pad_tt_rank"], [114, 0, 1, "", "to_tensor"], [114, 0, 1, "", "to_unfolding"], [114, 0, 1, "", "to_vec"], [114, 0, 1, "", "tt_to_tensor"], [114, 0, 1, "", "tt_to_unfolded"], [114, 0, 1, "", "tt_to_vec"], [114, 0, 1, "", "validate_tt_rank"], [114, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[115, 1, 1, "", "TuckerTensor"], [115, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[115, 0, 1, "", "__init__"], [115, 4, 1, "", "_abc_impl"], [115, 0, 1, "", "mode_dot"], [115, 5, 1, "", "n_param"], [115, 0, 1, "", "to_tensor"], [115, 0, 1, "", "to_unfolded"], [115, 0, 1, "", "to_vec"], [115, 0, 1, "", "tucker_copy"], [115, 0, 1, "", "tucker_mode_dot"], [115, 0, 1, "", "tucker_n_param"], [115, 0, 1, "", "tucker_normalize"], [115, 0, 1, "", "tucker_to_tensor"], [115, 0, 1, "", "tucker_to_unfolded"], [115, 0, 1, "", "tucker_to_vec"], [115, 0, 1, "", "validate_tucker_rank"], [115, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[120, 3, 0, "-", "base"], [121, 3, 0, "-", "elementwise"], [119, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[120, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[120, 0, 1, "", "__init__"], [120, 4, 1, "", "_abc_impl"], [120, 0, 1, "", "broadcast_shapes"], [120, 5, 1, "", "data"], [120, 5, 1, "", "device"], [120, 5, 1, "", "dtype"], [120, 5, 1, "", "inner_shape"], [120, 5, 1, "", "ndim"], [120, 0, 1, "", "nested_array"], [120, 5, 1, "", "nested_rank"], [120, 0, 1, "", "ragged_map"], [120, 0, 1, "", "ragged_multi_map"], [120, 0, 1, "", "ragged_multi_map_in_function"], [120, 0, 1, "", "replace_ivy_arrays"], [120, 5, 1, "", "shape"], [120, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[121, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[121, 4, 1, "", "_abc_impl"], [121, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[119, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[119, 0, 1, "", "__init__"], [119, 0, 1, "", "from_row_lengths"], [119, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[643, 3, 0, "-", "activations"], [644, 3, 0, "-", "constants"], [645, 3, 0, "-", "control_flow_ops"], [646, 3, 0, "-", "creation"], [647, 3, 0, "-", "data_type"], [648, 3, 0, "-", "device"], [649, 3, 0, "-", "elementwise"], [650, 3, 0, "-", "experimental"], [651, 3, 0, "-", "general"], [652, 3, 0, "-", "gradients"], [653, 3, 0, "-", "layers"], [654, 3, 0, "-", "linear_algebra"], [655, 3, 0, "-", "losses"], [656, 3, 0, "-", "manipulation"], [657, 3, 0, "-", "meta"], [658, 3, 0, "-", "nest"], [659, 3, 0, "-", "norms"], [660, 3, 0, "-", "random"], [661, 3, 0, "-", "searching"], [662, 3, 0, "-", "set"], [663, 3, 0, "-", "sorting"], [664, 3, 0, "-", "statistical"], [665, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[382, 3, 0, "-", "activations"], [383, 3, 0, "-", "constants"], [384, 3, 0, "-", "creation"], [385, 3, 0, "-", "data_type"], [386, 3, 0, "-", "device"], [387, 3, 0, "-", "elementwise"], [388, 3, 0, "-", "general"], [389, 3, 0, "-", "gradients"], [390, 3, 0, "-", "layers"], [391, 3, 0, "-", "linear_algebra"], [392, 3, 0, "-", "losses"], [393, 3, 0, "-", "manipulation"], [394, 3, 0, "-", "meta"], [395, 3, 0, "-", "nest"], [396, 3, 0, "-", "norms"], [397, 3, 0, "-", "random"], [398, 3, 0, "-", "searching"], [399, 3, 0, "-", "set"], [400, 3, 0, "-", "sorting"], [401, 3, 0, "-", "sparse_array"], [402, 3, 0, "-", "statistical"], [403, 3, 0, "-", "utility"]], "ivy.stateful": [[808, 3, 0, "-", "activations"], [809, 3, 0, "-", "converters"], [810, 3, 0, "-", "helpers"], [811, 3, 0, "-", "initializers"], [812, 3, 0, "-", "layers"], [813, 3, 0, "-", "losses"], [814, 3, 0, "-", "module"], [815, 3, 0, "-", "norms"], [816, 3, 0, "-", "optimizers"], [817, 3, 0, "-", "sequential"], [818, 3, 0, "-", "utilities"]], "ivy.stateful.activations": [[808, 1, 1, "", "ELU"], [808, 1, 1, "", "GEGLU"], [808, 1, 1, "", "GELU"], [808, 1, 1, "", "Hardswish"], [808, 1, 1, "", "LeakyReLU"], [808, 1, 1, "", "LogSigmoid"], [808, 1, 1, "", "LogSoftmax"], [808, 1, 1, "", "Logit"], [808, 1, 1, "", "Mish"], [808, 1, 1, "", "PReLU"], [808, 1, 1, "", "ReLU"], [808, 1, 1, "", "ReLU6"], [808, 1, 1, "", "SeLU"], [808, 1, 1, "", "SiLU"], [808, 1, 1, "", "Sigmoid"], [808, 1, 1, "", "Softmax"], [808, 1, 1, "", "Softplus"], [808, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[808, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[808, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[809, 1, 1, "", "ModuleConverters"], [809, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[809, 0, 1, "", "from_flax_module"], [809, 0, 1, "", "from_haiku_module"], [809, 0, 1, "", "from_keras_module"], [809, 0, 1, "", "from_paddle_module"], [809, 0, 1, "", "from_torch_module"], [809, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[810, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[811, 1, 1, "", "Constant"], [811, 1, 1, "", "FirstLayerSiren"], [811, 1, 1, "", "GlorotUniform"], [811, 1, 1, "", "Initializer"], [811, 1, 1, "", "KaimingNormal"], [811, 1, 1, "", "Ones"], [811, 1, 1, "", "RandomNormal"], [811, 1, 1, "", "Siren"], [811, 1, 1, "", "Uniform"], [811, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[811, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[811, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[811, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[811, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[811, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[811, 0, 1, "", "__init__"], [811, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[811, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[812, 1, 1, "", "AdaptiveAvgPool1d"], [812, 1, 1, "", "AdaptiveAvgPool2d"], [812, 1, 1, "", "AvgPool1D"], [812, 1, 1, "", "AvgPool2D"], [812, 1, 1, "", "AvgPool3D"], [812, 1, 1, "", "Conv1D"], [812, 1, 1, "", "Conv1DTranspose"], [812, 1, 1, "", "Conv2D"], [812, 1, 1, "", "Conv2DTranspose"], [812, 1, 1, "", "Conv3D"], [812, 1, 1, "", "Conv3DTranspose"], [812, 1, 1, "", "Dct"], [812, 1, 1, "", "DepthwiseConv2D"], [812, 1, 1, "", "Dropout"], [812, 1, 1, "", "Embedding"], [812, 1, 1, "", "FFT"], [812, 1, 1, "", "IDct"], [812, 1, 1, "", "IFFT"], [812, 1, 1, "", "Identity"], [812, 1, 1, "", "LSTM"], [812, 1, 1, "", "Linear"], [812, 1, 1, "", "MaxPool1D"], [812, 1, 1, "", "MaxPool2D"], [812, 1, 1, "", "MaxPool3D"], [812, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.IDct": [[812, 0, 1, "", "__init__"], [812, 0, 1, "", "extra_repr"]], "ivy.stateful.layers.IFFT": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[812, 0, 1, "", "__init__"], [812, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[812, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[812, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[813, 1, 1, "", "BinaryCrossEntropyLoss"], [813, 1, 1, "", "CrossEntropyLoss"], [813, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[813, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[813, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[813, 0, 1, "", "__init__"]], "ivy.stateful.module": [[814, 1, 1, "", "Module"], [814, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[814, 0, 1, "", "__call__"], [814, 0, 1, "", "__init__"], [814, 5, 1, "", "buffers"], [814, 0, 1, "", "build"], [814, 5, 1, "", "build_mode"], [814, 5, 1, "", "built"], [814, 5, 1, "", "device"], [814, 5, 1, "", "dtype"], [814, 0, 1, "", "eval"], [814, 0, 1, "", "load"], [814, 5, 1, "", "module_dict"], [814, 0, 1, "", "register_buffer"], [814, 0, 1, "", "register_parameter"], [814, 0, 1, "", "save"], [814, 0, 1, "", "save_weights"], [814, 0, 1, "", "show_graph"], [814, 5, 1, "", "state_dict"], [814, 0, 1, "", "to_device"], [814, 0, 1, "", "trace_graph"], [814, 0, 1, "", "train"], [814, 5, 1, "", "training"], [814, 5, 1, "", "v"]], "ivy.stateful.norms": [[815, 1, 1, "", "BatchNorm2D"], [815, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[815, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[815, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[816, 1, 1, "", "Adam"], [816, 1, 1, "", "AdamW"], [816, 1, 1, "", "LAMB"], [816, 1, 1, "", "LARS"], [816, 1, 1, "", "Optimizer"], [816, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[816, 0, 1, "", "__init__"], [816, 0, 1, "", "set_state"], [816, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[816, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[816, 0, 1, "", "__init__"], [816, 0, 1, "", "set_state"], [816, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[816, 0, 1, "", "__init__"], [816, 0, 1, "", "set_state"], [816, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[816, 0, 1, "", "__init__"], [816, 0, 1, "", "set_state"], [816, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[816, 0, 1, "", "__init__"], [816, 0, 1, "", "set_state"], [816, 5, 1, "", "state"]], "ivy.stateful.sequential": [[817, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[817, 0, 1, "", "__init__"]], "ivy.stateful.utilities": [[818, 2, 1, "", "sync_models"], [818, 2, 1, "", "sync_models_torch_and_jax"], [818, 2, 1, "", "sync_models_torch_and_tf"]], "ivy.utils": [[819, 3, 0, "-", "assertions"], [820, 3, 0, "-", "backend"], [824, 3, 0, "-", "binaries"], [825, 3, 0, "-", "decorator_utils"], [826, 3, 0, "-", "dynamic_import"], [827, 3, 0, "-", "einsum_parser"], [828, 3, 0, "-", "einsum_path_helpers"], [829, 3, 0, "-", "exceptions"], [830, 3, 0, "-", "inspection"], [831, 3, 0, "-", "logging"], [832, 3, 0, "-", "profiler"]], "ivy.utils.assertions": [[819, 2, 1, "", "check_all"], [819, 2, 1, "", "check_all_or_any_fn"], [819, 2, 1, "", "check_any"], [819, 2, 1, "", "check_dev_correct_formatting"], [819, 2, 1, "", "check_dimensions"], [819, 2, 1, "", "check_elem_in_list"], [819, 2, 1, "", "check_equal"], [819, 2, 1, "", "check_exists"], [819, 2, 1, "", "check_false"], [819, 2, 1, "", "check_gather_input_valid"], [819, 2, 1, "", "check_gather_nd_input_valid"], [819, 2, 1, "", "check_greater"], [819, 2, 1, "", "check_inplace_sizes_valid"], [819, 2, 1, "", "check_isinstance"], [819, 2, 1, "", "check_kernel_padding_size"], [819, 2, 1, "", "check_less"], [819, 2, 1, "", "check_one_way_broadcastable"], [819, 2, 1, "", "check_same_dtype"], [819, 2, 1, "", "check_shape"], [819, 2, 1, "", "check_shapes_broadcastable"], [819, 2, 1, "", "check_true"], [819, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[821, 3, 0, "-", "ast_helpers"], [822, 3, 0, "-", "handler"], [823, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[821, 1, 1, "", "ImportTransformer"], [821, 1, 1, "", "IvyLoader"], [821, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[821, 0, 1, "", "__init__"], [821, 0, 1, "", "impersonate_import"], [821, 0, 1, "", "visit_Import"], [821, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[821, 0, 1, "", "__init__"], [821, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[821, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[822, 1, 1, "", "ContextManager"], [822, 2, 1, "", "choose_random_backend"], [822, 2, 1, "", "current_backend"], [822, 2, 1, "", "dynamic_backend_converter"], [822, 2, 1, "", "prevent_access_locally"], [822, 2, 1, "", "previous_backend"], [822, 2, 1, "", "set_backend"], [822, 2, 1, "", "set_backend_to_specific_version"], [822, 2, 1, "", "set_jax_backend"], [822, 2, 1, "", "set_mxnet_backend"], [822, 2, 1, "", "set_numpy_backend"], [822, 2, 1, "", "set_paddle_backend"], [822, 2, 1, "", "set_tensorflow_backend"], [822, 2, 1, "", "set_torch_backend"], [822, 2, 1, "", "unset_backend"], [822, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[822, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[823, 2, 1, "", "clear_sub_backends"], [823, 2, 1, "", "find_available_sub_backends"], [823, 2, 1, "", "fn_name_from_version_specific_fn_name"], [823, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [823, 2, 1, "", "set_sub_backend"], [823, 2, 1, "", "set_sub_backend_to_specific_version"], [823, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[824, 2, 1, "", "check_for_binaries"], [824, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.decorator_utils": [[825, 1, 1, "", "CallVisitor"], [825, 1, 1, "", "TransposeType"], [825, 2, 1, "", "apply_transpose"], [825, 2, 1, "", "dummy_inplace_update"], [825, 2, 1, "", "get_next_func"], [825, 2, 1, "", "handle_get_item"], [825, 2, 1, "", "handle_methods"], [825, 2, 1, "", "handle_set_item"], [825, 2, 1, "", "handle_transpose_in_input_and_output"], [825, 2, 1, "", "handle_transpose_in_input_and_output_for_functions"], [825, 2, 1, "", "handle_transpose_in_pad"], [825, 2, 1, "", "retrieve_object"], [825, 2, 1, "", "store_config_info"]], "ivy.utils.decorator_utils.CallVisitor": [[825, 0, 1, "", "__init__"], [825, 0, 1, "", "visit_Call"]], "ivy.utils.decorator_utils.TransposeType": [[825, 4, 1, "", "CONV1D"], [825, 4, 1, "", "CONV2D"], [825, 4, 1, "", "CONV3D"], [825, 4, 1, "", "NO_TRANSPOSE"]], "ivy.utils.dynamic_import": [[826, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[827, 2, 1, "", "convert_interleaved_input"], [827, 2, 1, "", "convert_subscripts"], [827, 2, 1, "", "find_output_shape"], [827, 2, 1, "", "find_output_str"], [827, 2, 1, "", "gen_unused_symbols"], [827, 2, 1, "", "get_symbol"], [827, 2, 1, "", "has_valid_einsum_chars_only"], [827, 2, 1, "", "is_valid_einsum_char"], [827, 2, 1, "", "legalise_einsum_expr"], [827, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[828, 2, 1, "", "can_dot"], [828, 2, 1, "", "compute_size_by_dict"], [828, 2, 1, "", "find_contraction"], [828, 2, 1, "", "flop_count"], [828, 2, 1, "", "greedy_path"], [828, 2, 1, "", "optimal_path"], [828, 2, 1, "", "parse_einsum_input"], [828, 2, 1, "", "parse_possible_contraction"], [828, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[829, 7, 1, "", "InplaceUpdateException"], [829, 7, 1, "", "IvyAttributeError"], [829, 7, 1, "", "IvyBackendException"], [829, 7, 1, "", "IvyBroadcastShapeError"], [829, 7, 1, "", "IvyDeviceError"], [829, 7, 1, "", "IvyDtypePromotionError"], [829, 7, 1, "", "IvyError"], [829, 7, 1, "", "IvyException"], [829, 7, 1, "", "IvyIndexError"], [829, 7, 1, "", "IvyInvalidBackendException"], [829, 7, 1, "", "IvyNotImplementedException"], [829, 7, 1, "", "IvyValueError"], [829, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[829, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[829, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[830, 2, 1, "", "add_array_specs"], [830, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[831, 2, 1, "", "set_logging_mode"], [831, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[832, 1, 1, "", "Profiler"], [832, 2, 1, "", "tensorflow_profile_start"], [832, 2, 1, "", "tensorflow_profile_stop"], [832, 2, 1, "", "torch_profiler_init"], [832, 2, 1, "", "torch_profiler_start"], [832, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[832, 0, 1, "", "__init__"], [832, 4, 1, "", "print_stats"], [832, 4, 1, "", "viz"]], "ivy_tests.test_ivy.helpers": [[791, 3, 0, "-", "assertions"], [792, 3, 0, "-", "available_frameworks"], [793, 3, 0, "-", "function_testing"], [794, 3, 0, "-", "globals"], [795, 3, 0, "-", "hypothesis_helpers"], [800, 3, 0, "-", "multiprocessing"], [801, 3, 0, "-", "pipeline_helper"], [802, 3, 0, "-", "structs"], [803, 3, 0, "-", "test_parameter_flags"], [804, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[791, 2, 1, "", "assert_all_close"], [791, 2, 1, "", "assert_same_type"], [791, 2, 1, "", "assert_same_type_and_shape"], [791, 2, 1, "", "check_unsupported_device"], [791, 2, 1, "", "check_unsupported_device_and_dtype"], [791, 2, 1, "", "check_unsupported_dtype"], [791, 2, 1, "", "test_unsupported_function"], [791, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[793, 2, 1, "", "args_to_container"], [793, 2, 1, "", "args_to_frontend"], [793, 2, 1, "", "arrays_to_frontend"], [793, 2, 1, "", "as_lists"], [793, 2, 1, "", "convtrue"], [793, 2, 1, "", "create_args_kwargs"], [793, 2, 1, "", "flatten"], [793, 2, 1, "", "flatten_and_to_np"], [793, 2, 1, "", "flatten_frontend"], [793, 2, 1, "", "flatten_frontend_fw_to_np"], [793, 2, 1, "", "flatten_frontend_to_np"], [793, 2, 1, "", "get_frontend_ret"], [793, 2, 1, "", "get_ret_and_flattened_np_array"], [793, 2, 1, "", "gradient_incompatible_function"], [793, 2, 1, "", "gradient_test"], [793, 2, 1, "", "gradient_unsupported_dtypes"], [793, 2, 1, "", "kwargs_to_args_n_kwargs"], [793, 2, 1, "", "test_frontend_function"], [793, 2, 1, "", "test_frontend_method"], [793, 2, 1, "", "test_function"], [793, 2, 1, "", "test_function_backend_computation"], [793, 2, 1, "", "test_function_ground_truth_computation"], [793, 2, 1, "", "test_gradient_backend_computation"], [793, 2, 1, "", "test_gradient_ground_truth_computation"], [793, 2, 1, "", "test_method"], [793, 2, 1, "", "test_method_backend_computation"], [793, 2, 1, "", "test_method_ground_truth_computation"], [793, 2, 1, "", "traced_if_required"], [793, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[794, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [794, 7, 1, "", "InterruptedTest"], [794, 1, 1, "", "TestData"], [794, 2, 1, "", "setup_api_test"], [794, 2, 1, "", "setup_frontend_test"], [794, 2, 1, "", "teardown_api_test"], [794, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[794, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[794, 0, 1, "", "__init__"], [794, 4, 1, "", "fn_name"], [794, 4, 1, "", "fn_tree"], [794, 4, 1, "", "is_method"], [794, 4, 1, "", "supported_device_dtypes"], [794, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[796, 3, 0, "-", "array_helpers"], [797, 3, 0, "-", "dtype_helpers"], [798, 3, 0, "-", "general_helpers"], [799, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[796, 2, 1, "", "array_and_broadcastable_shape"], [796, 2, 1, "", "array_bools"], [796, 2, 1, "", "array_helpers_dtype_info_helper"], [796, 2, 1, "", "array_indices_axis"], [796, 2, 1, "", "array_indices_put_along_axis"], [796, 2, 1, "", "array_values"], [796, 2, 1, "", "arrays_and_axes"], [796, 2, 1, "", "arrays_for_pooling"], [796, 2, 1, "", "broadcast_shapes"], [796, 2, 1, "", "cond_data_gen_helper"], [796, 2, 1, "", "create_concatenable_arrays_dtypes"], [796, 2, 1, "", "create_nested_input"], [796, 2, 1, "", "dtype_and_values"], [796, 2, 1, "", "dtype_array_query"], [796, 2, 1, "", "dtype_array_query_val"], [796, 2, 1, "", "dtype_values_axis"], [796, 2, 1, "", "einsum_helper"], [796, 2, 1, "", "get_first_solve_batch_matrix"], [796, 2, 1, "", "get_first_solve_matrix"], [796, 2, 1, "", "get_second_solve_batch_matrix"], [796, 2, 1, "", "get_second_solve_matrix"], [796, 2, 1, "", "list_of_size"], [796, 2, 1, "", "lists"], [796, 2, 1, "", "mutually_broadcastable_shapes"], [796, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[797, 2, 1, "", "array_dtypes"], [797, 2, 1, "", "cast_filter"], [797, 2, 1, "", "cast_filter_helper"], [797, 2, 1, "", "get_castable_dtype"], [797, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[798, 7, 1, "", "BroadcastError"], [798, 2, 1, "", "apply_safety_factor"], [798, 2, 1, "", "broadcast_shapes"], [798, 2, 1, "", "dims_and_offset"], [798, 2, 1, "", "embedding_helper"], [798, 2, 1, "", "general_helpers_dtype_info_helper"], [798, 2, 1, "", "get_axis"], [798, 2, 1, "", "get_bounds"], [798, 2, 1, "", "get_mean_std"], [798, 2, 1, "", "get_shape"], [798, 2, 1, "", "matrix_is_stable"], [798, 2, 1, "", "reshape_shapes"], [798, 2, 1, "", "sizes_"], [798, 2, 1, "", "subsets"], [798, 2, 1, "", "two_broadcastable_shapes"], [798, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[799, 2, 1, "", "floats"], [799, 2, 1, "", "ints"], [799, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[800, 2, 1, "", "backend_proc"], [800, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[801, 1, 1, "", "BackendHandler"], [801, 1, 1, "", "BackendHandlerMode"], [801, 1, 1, "", "WithBackendContext"], [801, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[801, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[801, 4, 1, "", "SetBackend"], [801, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[801, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[802, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[802, 0, 1, "", "__init__"], [802, 4, 1, "", "framework_init_module"], [802, 4, 1, "", "init_name"], [802, 4, 1, "", "ivy_init_module"], [802, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[803, 1, 1, "", "DynamicFlag"], [803, 1, 1, "", "FrontendFunctionTestFlags"], [803, 1, 1, "", "FrontendInitTestFlags"], [803, 1, 1, "", "FrontendMethodTestFlags"], [803, 1, 1, "", "FunctionTestFlags"], [803, 1, 1, "", "InitMethodTestFlags"], [803, 1, 1, "", "MethodTestFlags"], [803, 1, 1, "", "TestFlags"], [803, 2, 1, "", "build_flag"], [803, 2, 1, "", "frontend_function_flags"], [803, 2, 1, "", "frontend_init_flags"], [803, 2, 1, "", "frontend_method_flags"], [803, 2, 1, "", "function_flags"], [803, 2, 1, "", "init_method_flags"], [803, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[803, 0, 1, "", "__init__"], [803, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[803, 0, 1, "", "__init__"], [803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[803, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[804, 2, 1, "", "handle_example"], [804, 2, 1, "", "handle_frontend_method"], [804, 2, 1, "", "handle_frontend_test"], [804, 2, 1, "", "handle_method"], [804, 2, 1, "", "handle_test"], [804, 2, 1, "", "num_positional_args"], [804, 2, 1, "", "num_positional_args_helper"], [804, 2, 1, "", "num_positional_args_method"], [804, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 8, 9, 12, 13, 22, 23, 31, 39, 42, 61, 63, 833, 835, 839, 840, 844, 860, 863, 873, 879, 880], "ivi": [0, 4, 5, 6, 7, 12, 13, 22, 23, 31, 34, 42, 45, 46, 57, 58, 60, 61, 63, 833, 839, 841, 845, 847, 849, 852, 854, 860, 862, 863, 864, 865, 866, 867, 870, 871, 873, 879, 880, 881, 882, 886], "framework": [0, 8, 9, 24, 45, 51, 57, 792, 805, 833, 860, 863, 884], "librari": [0, 40, 45, 46, 61, 63, 833, 879], "instal": [0, 4, 5, 6, 7, 22, 23, 24, 34, 57, 58, 60, 833, 873], "import": [0, 6, 7, 12, 13, 22, 23, 27, 34, 57, 58, 61, 826], "configur": [0, 854, 863], "environ": [0, 840], "load": [0, 12, 13, 22, 23, 24, 27, 789], "dataset": [0, 59, 61], "preview": 0, "inspect": [0, 830], "end": [0, 61], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 863], "transact": 0, "class": [0, 122, 805, 833, 845, 854, 862], "distribut": 0, "separ": 0, "data": [0, 4, 5, 6, 7, 12, 13, 22, 23, 24, 27, 34, 45, 57, 68, 91, 122, 385, 647, 662, 769, 770, 771, 772, 850, 862, 865, 872], "analysi": 0, "statist": [0, 84, 107, 402, 664], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 8, 9, 10, 11, 24, 27, 886], "metric": [0, 27, 61], "under": 0, "sampl": [0, 58], "balanc": [0, 868], "creat": [0, 1, 57, 58, 839], "split": [0, 728], "featur": [0, 865], "target": [0, 57], "train": [0, 24, 27, 57, 59, 61], "test": [0, 27, 59, 793, 803, 804, 807, 839, 840, 841, 844, 849, 855, 863, 865], "set": [0, 8, 9, 22, 23, 24, 53, 57, 58, 82, 105, 399, 662, 840, 846, 855, 867], "convert": [0, 8, 9, 10, 11, 24, 809, 833], "arrai": [0, 116, 119, 141, 401, 796, 844, 845, 849, 857, 880], "displai": [0, 62], "dimens": 0, "prepar": [0, 4, 5, 6, 7, 12, 13, 22, 23], "function": [0, 12, 13, 34, 43, 45, 46, 57, 58, 59, 61, 63, 123, 793, 833, 839, 848, 850, 851, 854, 857, 858, 859, 860, 862, 863, 865, 866, 867, 868, 870, 872, 879], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 69, 92, 386, 648, 851, 857, 862], "mode": [0, 53, 850, 854, 867], "xgboost": [0, 27], "classifi": [0, 22, 23], "benchmark": 0, "model": [0, 6, 7, 8, 9, 10, 11, 12, 13, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 41, 42, 44, 45, 46, 57, 58, 59, 60, 61, 63, 872], "time": [0, 27], "base": [0, 88, 110, 120], "predict": 0, "perform": 0, "implement": [0, 4, 5, 12, 13, 849, 860, 862], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 868], "classif": [0, 6, 7], "report": 0, "evalu": [0, 27], "ivyclassifi": 0, "xgbclassifi": [0, 27], "visual": [0, 24, 62], "comparison": [0, 27], "demo": [1, 3, 4, 5, 6, 7, 32, 45, 59, 60], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 12, 13, 22, 23, 27, 32, 53, 818, 852, 857, 860, 863, 865, 868, 879, 880, 882], "alexnet": [4, 5], "infer": [4, 5, 6, 7, 12, 13, 22, 23, 859], "torch": [4, 5, 6, 7, 12, 13, 22, 23, 53, 60, 884, 885], "tensorflow": [4, 5, 6, 7, 8, 9, 12, 13, 24, 27, 30, 43, 44, 53, 60, 61, 62, 884], "jax": [4, 5, 6, 7, 12, 13, 20, 21, 25, 26, 27, 53, 60, 884], "appendix": [4, 5, 12, 13], "code": [4, 5, 34, 35, 36, 37, 46, 57, 833, 856, 864, 866], "bert": [6, 7], "dependeci": [6, 7], "modul": [6, 7, 814, 833, 850, 851, 879], "sequenc": [6, 7, 857], "your": [8, 9, 12, 13, 22, 23, 24, 841, 865], "pytorch": [8, 9, 10, 11, 24, 25, 26, 27, 28, 43, 44, 59, 884], "project": [8, 9, 24], "incompat": [8, 9, 24], "transpil": [8, 9, 10, 11, 24, 28, 29, 30, 37, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 59, 63, 833, 870, 871, 877, 879, 881], "about": [8, 9, 10, 11, 24, 57], "up": [8, 9, 24, 28, 30, 34, 35, 36, 37, 38, 40, 41, 46, 47, 48, 49, 50, 51, 52, 59, 840, 855, 864], "sourc": [8, 9, 24, 870, 871, 873], "from": [8, 9, 10, 11, 24, 43, 44, 53, 60, 873], "result": [8, 9, 10, 11, 24, 58], "fine": [8, 9, 10, 11, 24], "tune": [8, 9, 10, 11, 24], "conclus": [8, 9, 10, 11, 24], "how": [10, 11, 39, 833, 839, 847, 855, 864, 865], "To": [10, 11, 63, 841], "paddlepaddl": [10, 11], "imag": [12, 13, 22, 23, 24, 74, 97, 268, 835, 847], "segment": [12, 13], "unet": [12, 13], "custom": [12, 13, 845, 847, 860, 864, 872], "preprocess": [12, 13], "visualis": [12, 13, 22, 23], "initi": [12, 13, 22, 23, 811], "nativ": [12, 13, 22, 23, 845, 868], "pretrain": [12, 13, 22, 23], "weight": [12, 13, 22, 23], "mask": [12, 13], "backend": [12, 13, 27, 34, 45, 57, 58, 60, 61, 820, 823, 839, 846, 850, 860, 866, 870, 872], "acceler": [20, 21, 25, 26, 27], "mmpretrain": [20, 21], "resnet": [22, 23, 24, 64], "label": [22, 23], "resnet34": [22, 23], "resnet50": [22, 23], "few": 24, "pre": [24, 840, 856], "xgb_frontend": 27, "xgb": 27, "more": [27, 840, 868], "exhaust": 27, "v": [27, 38, 50, 53, 856, 872, 880], "number": [27, 799, 857], "boost": 27, "round": [27, 28, 30, 34, 35, 36, 37, 38, 40, 41, 46, 47, 48, 49, 50, 51, 52, 59, 298, 864], "fraction": 27, "build": [28, 29, 30, 61, 835, 847, 870], "top": [28, 29, 30, 842, 849], "haiku": 29, "develop": 31, "convolut": 31, "network": [31, 58, 61], "tutori": [32, 61], "And": 32, "learn": [32, 33, 833, 884], "basic": [32, 33, 57, 58, 841, 862], "write": [34, 42, 862, 865], "content": [34, 59], "handler": [34, 45, 822, 823, 870], "structur": [34, 45, 847, 860, 872], "api": [34, 45, 46, 839, 844, 848, 849, 860, 866, 870, 879, 880, 881, 882], "state": [34, 45, 46, 872, 880], "unifi": [35, 38, 47, 50, 51, 52, 57, 882], "trace": [36, 38, 39, 46, 708, 854], "lazi": [38, 50, 880], "eager": [38, 50, 880], "decor": [39, 52, 825, 854, 859, 865], "graph": [39, 45, 62, 871, 879, 885], "ani": [40, 41, 45, 46, 788], "odsc": 45, "tracer": [45, 871, 880, 885], "quickstart": 46, "get": [46, 833, 841, 873], "familiar": 46, "0": [47, 48, 49, 50, 54, 55], "1": [48, 50, 51, 52, 53, 56, 63, 884], "compil": [48, 50, 51, 52, 58, 880], "2": [49, 52, 54, 63, 884], "select": 51, "As": 52, "3": [53, 55, 56, 63], "dynam": [53, 61, 826, 846, 872], "static": 53, "todo": [53, 841], "explain": 53, "via": 53, "why": [53, 865, 877], "i": [53, 833, 847, 868], "true": 53, "default": [53, 560], "when": 53, "numpi": [53, 60, 862, 884], "fals": 53, "kornia": 54, "perceiv": 55, "stabl": 56, "diffus": 56, "oper": [57, 857, 867, 872], "ml": [57, 876], "chang": 57, "one": 57, "line": [57, 841], "No": [57, 840], "need": [57, 865], "worri": 57, "type": [57, 68, 91, 385, 647, 850, 858, 862, 872], "differ": 57, "them": 57, "all": [57, 787], "standalon": [57, 858], "defin": [57, 58, 59, 61], "optim": [57, 816], "input": [57, 58, 857], "loss": [57, 77, 100, 392, 655, 813], "loop": [57, 61], "check": [58, 856, 872], "simpl": 58, "neural": 58, "deepmind": [59, 60], "": [59, 61, 839, 847, 864], "perceiverio": [59, 60], "tabl": [59, 847, 850], "construct": 59, "some": 59, "helper": [59, 795, 796, 797, 798, 799, 801, 804, 810, 821, 828, 863, 865, 866], "pipelin": [59, 61, 801, 847, 849, 865, 872], "download": 59, "dataload": 59, "gpu": [60, 872], "introduct": [60, 63, 862, 863], "python3": 60, "8": 60, "setup": [60, 856], "kernel": 60, "clone": [60, 840, 849], "repo": [60, 840], "ivy_model": 60, "run": [60, 841, 844, 847, 855, 865], "let": 61, "we": [61, 865], "ar": 61, "mnist": 61, "thi": 61, "temporari": 61, "loader": 61, "util": [61, 85, 108, 403, 665, 806, 818, 825], "plot": 61, "save": [61, 790], "huggingfac": 62, "deit": 62, "can": [62, 833], "html": 62, "file": 62, "browser": [62, 841], "interfac": 63, "telemetri": 63, "18": 64, "activ": [65, 87, 382, 643, 808], "convers": [66, 89, 859], "creation": [67, 90, 384, 646], "elementwis": [70, 93, 121, 387, 649], "experiment": [71, 94, 650, 839], "gener": [72, 95, 388, 651, 798, 860, 865, 868, 880], "gradient": [73, 96, 364, 389, 652, 860], "layer": [75, 98, 390, 653, 812], "linear": [76, 99, 391, 654, 677], "algebra": [76, 99, 391, 654], "manipul": [78, 101, 393, 656], "norm": [79, 102, 396, 659, 815], "random": [80, 103, 397, 660], "search": [81, 104, 398, 661], "sort": [83, 106, 400, 663, 776], "wrap": [86, 109, 859], "cp": 111, "tensor": [111, 112, 113, 114, 115, 118], "parafac2": 112, "tr": 113, "tt": 114, "tucker": [115, 466], "contain": [117, 841, 848], "factor": 118, "nest": [119, 395, 658], "gelu": 124, "hardswish": 125, "leaky_relu": 126, "log_softmax": 127, "mish": 128, "relu": 129, "sigmoid": 130, "softmax": 131, "softplu": 132, "softsign": 133, "cmp_i": 134, "cmp_isnot": 135, "for_loop": 136, "if_els": 137, "try_except": 138, "while_loop": 139, "arang": 140, "asarrai": 142, "complex": 143, "copy_arrai": 144, "empti": 145, "empty_lik": 146, "ey": 147, "from_dlpack": 148, "note": [148, 159, 646], "frombuff": 149, "full": [150, 863], "full_lik": 151, "linspac": 152, "logspac": 153, "meshgrid": 154, "native_arrai": 155, "one_hot": 156, "ones": 157, "ones_lik": 158, "to_dlpack": 159, "tril": 160, "triu": 161, "triu_indic": 162, "zero": 163, "zeros_lik": 164, "as_ivy_dtyp": 165, "as_native_dtyp": 166, "astyp": 167, "broadcast_arrai": 168, "broadcast_to": 169, "can_cast": 170, "check_float": 171, "closest_valid_dtyp": 172, "default_complex_dtyp": 173, "default_dtyp": 174, "default_float_dtyp": 175, "default_int_dtyp": 176, "default_uint_dtyp": 177, "dtype": [178, 797, 857], "dtype_bit": 179, "finfo": 180, "function_supported_dtyp": 181, "function_unsupported_dtyp": 182, "iinfo": 183, "infer_default_dtyp": 184, "invalid_dtyp": 185, "is_bool_dtyp": 186, "is_complex_dtyp": 187, "is_float_dtyp": 188, "is_hashable_dtyp": 189, "is_int_dtyp": 190, "is_native_dtyp": 191, "is_uint_dtyp": 192, "promote_typ": 193, "promote_types_of_input": 194, "result_typ": 195, "set_default_complex_dtyp": 196, "set_default_dtyp": 197, "set_default_float_dtyp": 198, "set_default_int_dtyp": 199, "set_default_uint_dtyp": 200, "type_promote_arrai": 201, "unset_default_complex_dtyp": 202, "unset_default_dtyp": 203, "unset_default_float_dtyp": 204, "unset_default_int_dtyp": 205, "unset_default_uint_dtyp": 206, "valid_dtyp": 207, "as_ivy_dev": 208, "as_native_dev": 209, "clear_cached_mem_on_dev": 210, "default_devic": 211, "dev": 212, "dev_util": 213, "function_supported_devic": 214, "function_unsupported_devic": 215, "get_all_ivy_arrays_on_dev": 216, "gpu_is_avail": 217, "handle_soft_device_vari": 218, "num_cpu_cor": 219, "num_gpu": 220, "num_ivy_arrays_on_dev": 221, "percent_used_mem_on_dev": 222, "print_all_ivy_arrays_on_dev": 223, "set_default_devic": 224, "set_soft_device_mod": 225, "paramet": [225, 594, 595, 600, 601, 603, 604, 648, 651, 803, 808, 867], "set_split_factor": 226, "split_factor": 227, "split_func_cal": 228, "to_devic": 229, "total_mem_on_dev": 230, "tpu_is_avail": 231, "unset_default_devic": 232, "unset_soft_device_mod": 233, "used_mem_on_dev": 234, "ab": 235, "aco": 236, "acosh": 237, "add": [238, 852, 863], "angl": 239, "asin": 240, "asinh": 241, "atan": 242, "atan2": 243, "atanh": 244, "bitwise_and": 245, "bitwise_invert": 246, "bitwise_left_shift": 247, "bitwise_or": 248, "bitwise_right_shift": 249, "bitwise_xor": 250, "ceil": 251, "co": 252, "cosh": 253, "deg2rad": 254, "divid": 255, "equal": 256, "erf": 257, "exp": 258, "exp2": 259, "expm1": 260, "floor": 261, "floor_divid": 262, "fmin": 263, "fmod": 264, "gcd": 265, "greater": 266, "greater_equ": 267, "isfinit": 269, "isinf": 270, "isnan": 271, "isreal": 272, "lcm": 273, "less": 274, "less_equ": 275, "log": [276, 831, 840], "log10": 277, "log1p": 278, "log2": 279, "logaddexp": 280, "logaddexp2": 281, "logical_and": 282, "logical_not": 283, "logical_or": 284, "logical_xor": 285, "maximum": 286, "minimum": 287, "multipli": 288, "nan_to_num": 289, "neg": 290, "not_equ": 291, "posit": [292, 857], "pow": 293, "rad2deg": 294, "real": 295, "reciproc": 296, "remaind": 297, "sign": 299, "sin": 300, "sinh": 301, "sqrt": 302, "squar": 303, "subtract": 304, "tan": [305, 852, 863], "tanh": 306, "trapz": 307, "trunc": 308, "trunc_divid": 309, "celu": 310, "elu": 311, "hardshrink": 312, "hardsilu": 313, "hardtanh": 314, "logit": 315, "logsigmoid": 316, "prelu": 317, "relu6": 318, "scaled_tanh": 319, "selu": 320, "silu": 321, "softshrink": 322, "stanh": 323, "tanhshrink": 324, "threshold": 325, "thresholded_relu": 326, "blackman_window": 327, "eye_lik": 328, "hamming_window": 329, "hann_window": 330, "indic": 331, "kaiser_bessel_derived_window": 332, "kaiser_window": 333, "mel_weight_matrix": 334, "ndenumer": 335, "ndindex": 336, "polyv": 337, "random_cp": 338, "random_parafac2": 339, "random_tr": 340, "random_tt": 341, "random_tuck": 342, "tril_indic": 343, "trilu": 344, "unsorted_segment_mean": 345, "unsorted_segment_min": 346, "unsorted_segment_sum": 347, "vorbis_window": 348, "allclos": 349, "amax": 350, "amin": 351, "binar": 352, "conj": 353, "copysign": 354, "count_nonzero": 355, "diff": 356, "digamma": 357, "erfc": 358, "erfinv": 359, "fix": [360, 839, 855], "float_pow": 361, "fmax": 362, "frexp": 363, "hypot": 365, "isclos": 366, "ldexp": 367, "lerp": 368, "lgamma": 369, "modf": 370, "nansum": 371, "nextaft": 372, "signbit": 373, "sinc": 374, "sparsify_tensor": 375, "xlogi": 376, "zeta": 377, "reduc": 378, "bind_custom_gradient_funct": 379, "jvp": 380, "vjp": 381, "constant": [383, 644], "meta": [394, 657], "spars": 401, "adaptive_avg_pool1d": 404, "adaptive_avg_pool2d": 405, "adaptive_max_pool2d": 406, "adaptive_max_pool3d": 407, "area_interpol": 408, "avg_pool1d": 409, "avg_pool2d": 410, "avg_pool3d": 411, "dct": 412, "dft": 413, "dropout1d": 414, "dropout2d": 415, "dropout3d": 416, "embed": 417, "fft": 418, "fft2": 419, "generate_einsum_equ": 420, "get_interpolate_kernel": 421, "idct": 422, "ifft": 423, "ifftn": 424, "interp": 425, "interpol": 426, "max_pool1d": 427, "max_pool2d": 428, "max_pool3d": 429, "max_unpool1d": 430, "nearest_interpol": 431, "pool": 432, "reduce_window": 433, "rfft": 434, "rfftn": 435, "rnn": 436, "sliding_window": 437, "stft": 438, "adjoint": 439, "batched_out": 440, "cond": 441, "diagflat": 442, "dot": 443, "eig": [444, 689], "eigh_tridiagon": 445, "eigval": 446, "general_inner_product": 447, "higher_order_mo": 448, "initialize_tuck": 449, "khatri_rao": 450, "kron": 451, "kroneck": 452, "lu_factor": 453, "lu_solv": 454, "make_svd_non_neg": 455, "matrix_exp": 456, "mode_dot": 457, "multi_dot": 458, "multi_mode_dot": 459, "partial_tuck": 460, "solve_triangular": 461, "svd_flip": 462, "tensor_train": 463, "truncated_svd": 464, "tt_matrix_to_tensor": 465, "hinge_embedding_loss": 467, "huber_loss": 468, "kl_div": 469, "l1_loss": 470, "log_poisson_loss": 471, "poisson_nll_loss": 472, "smooth_l1_loss": 473, "soft_margin_loss": 474, "as_strid": 475, "associative_scan": 476, "atleast_1d": 477, "atleast_2d": 478, "atleast_3d": 479, "broadcast_shap": 480, "check_scalar": 481, "choos": 482, "column_stack": 483, "concat_from_sequ": 484, "dsplit": 485, "dstack": 486, "expand": 487, "fill_diagon": 488, "flatten": 489, "fliplr": 490, "flipud": 491, "fold": 492, "heavisid": 493, "hsplit": 494, "hstack": 495, "i0": 496, "matric": 497, "moveaxi": 498, "pad": 499, "pad_sequ": 500, "partial_fold": 501, "partial_tensor_to_vec": 502, "partial_unfold": 503, "partial_vec_to_tensor": 504, "put_along_axi": 505, "rot90": 506, "soft_threshold": 507, "take": 508, "take_along_axi": 509, "top_k": 510, "trim_zero": 511, "unflatten": 512, "unfold": 513, "unique_consecut": 514, "vsplit": 515, "vstack": 516, "batch_norm": 517, "group_norm": 518, "instance_norm": 519, "l1_normal": 520, "l2_normal": 521, "local_response_norm": 522, "lp_normal": 523, "bernoulli": 524, "beta": 525, "dirichlet": 526, "gamma": 527, "poisson": 528, "unravel_index": 529, "invert_permut": 530, "lexsort": 531, "is_ivy_sparse_arrai": 532, "is_native_sparse_arrai": 533, "native_sparse_arrai": 534, "native_sparse_array_to_indices_values_and_shap": 535, "bincount": 536, "corrcoef": 537, "cov": 538, "cummax": 539, "cummin": 540, "histogram": 541, "igamma": 542, "median": 543, "nanmean": 544, "nanmedian": 545, "nanmin": 546, "nanprod": 547, "quantil": 548, "optional_get_el": 549, "all_equ": 550, "arg_info": 551, "arg_nam": 552, "array_equ": 553, "assert_supports_inplac": 554, "cache_fn": 555, "clip_matrix_norm": 556, "clip_vector_norm": 557, "container_typ": 558, "current_backend_str": 559, "einops_rearrang": 561, "einops_reduc": 562, "einops_repeat": 563, "exist": [564, 835, 864], "fourier_encod": 565, "function_supported_devices_and_dtyp": 566, "function_unsupported_devices_and_dtyp": 567, "gather": 568, "gather_nd": 569, "get_all_arrays_in_memori": 570, "get_item": 571, "get_num_dim": 572, "get_referrers_recurs": 573, "has_nan": 574, "inplace_arrays_support": 575, "inplace_decr": 576, "inplace_incr": 577, "inplace_upd": 578, "inplace_variables_support": 579, "is_arrai": 580, "is_ivy_arrai": 581, "is_ivy_contain": 582, "is_ivy_nested_arrai": 583, "is_native_arrai": 584, "isin": 585, "isscalar": 586, "items": 587, "match_kwarg": 588, "multiprocess": [589, 800], "num_arrays_in_memori": 590, "print_all_arrays_in_memori": 591, "scatter_flat": 592, "scatter_nd": 593, "set_array_mod": 594, "set_exception_trace_mod": 595, "set_inplace_mod": 596, "set_item": 597, "set_min_bas": 598, "set_min_denomin": 599, "set_nestable_mod": 600, "set_precise_mod": 601, "set_queue_timeout": 602, "set_shape_array_mod": 603, "set_show_func_wrapper_trace_mod": 604, "set_tmp_dir": 605, "shape": [606, 662, 769, 770, 771, 772, 859, 872], "size": [607, 872], "stable_divid": 608, "stable_pow": 609, "stride": 610, "supports_inplace_upd": 611, "to_ivy_shap": 612, "to_list": 613, "to_native_shap": 614, "to_numpi": 615, "to_scalar": 616, "try_else_non": 617, "unset_array_mod": 618, "unset_exception_trace_mod": 619, "unset_inplace_mod": 620, "unset_min_bas": 621, "unset_min_denomin": 622, "unset_nestable_mod": 623, "unset_precise_mod": 624, "unset_queue_timeout": 625, "unset_shape_array_mod": 626, "unset_show_func_wrapper_trace_mod": 627, "unset_tmp_dir": 628, "value_is_nan": 629, "vmap": 630, "adam_step": 631, "adam_upd": 632, "execute_with_gradi": [633, 860], "grad": 634, "gradient_descent_upd": 635, "jac": 636, "lamb_upd": 637, "lars_upd": 638, "optimizer_upd": 639, "requires_gradi": 640, "stop_gradi": 641, "value_and_grad": 642, "control": [645, 872], "flow": [645, 872], "op": 645, "depend": [662, 769, 770, 771, 772], "output": [662, 769, 770, 771, 772], "conv": 666, "conv1d": 667, "conv1d_transpos": 668, "conv2d": 669, "conv2d_transpos": 670, "conv3d": 671, "conv3d_transpos": 672, "conv_general_dil": 673, "conv_general_transpos": 674, "depthwise_conv2d": 675, "dropout": 676, "lstm": 678, "lstm_updat": 679, "multi_head_attent": 680, "nm": 681, "roi_align": 682, "scaled_dot_product_attent": 683, "choleski": 684, "cross": 685, "det": 686, "diag": 687, "diagon": 688, "eigh": 690, "eigvalsh": 691, "inner": 692, "inv": 693, "matmul": 694, "matrix_norm": 695, "matrix_pow": 696, "matrix_rank": 697, "matrix_transpos": 698, "outer": 699, "pinv": 700, "qr": 701, "slogdet": 702, "solv": 703, "svd": 704, "svdval": 705, "tensordot": 706, "tensorsolv": 707, "vander": 709, "vecdot": 710, "vector_norm": 711, "vector_to_skew_symmetric_matrix": 712, "binary_cross_entropi": 713, "cross_entropi": 714, "sparse_cross_entropi": 715, "ssim_loss": 716, "wasserstein_loss_discrimin": 717, "wasserstein_loss_gener": 718, "clip": 719, "concat": 720, "constant_pad": 721, "expand_dim": 722, "flip": 723, "permute_dim": 724, "repeat": 725, "reshap": 726, "roll": [727, 852], "squeez": 729, "stack": [730, 854], "swapax": 731, "tile": 732, "unstack": 733, "zero_pad": 734, "fomaml_step": 735, "maml_step": 736, "reptile_step": 737, "all_nested_indic": 738, "copy_nest": 739, "duplicate_array_index_chain": 740, "index_nest": 741, "insert_into_nest_at_index": 742, "insert_into_nest_at_indic": 743, "map": [744, 849], "map_nest_at_index": 745, "map_nest_at_indic": 746, "multi_index_nest": 747, "nested_ani": 748, "nested_argwher": 749, "nested_map": 750, "nested_multi_map": 751, "prune_empti": 752, "prune_nest_at_index": 753, "prune_nest_at_indic": 754, "set_nest_at_index": 755, "set_nest_at_indic": 756, "layer_norm": 757, "multinomi": 758, "randint": 759, "random_norm": 760, "random_uniform": 761, "seed": 762, "shuffl": 763, "argmax": 764, "argmin": 765, "argwher": 766, "nonzero": 767, "where": [768, 839, 855], "unique_al": 769, "unique_count": 770, "unique_invers": 771, "unique_valu": 772, "argsort": 773, "msort": 774, "searchsort": 775, "cumprod": 777, "cumsum": 778, "einsum": [779, 827, 828], "max": 780, "mean": 781, "min": 782, "prod": 783, "std": 784, "sum": 785, "var": 786, "assert": [791, 819, 854], "avail": 792, "global": [794, 867], "hypothesi": [795, 840, 863, 865], "struct": 802, "flag": 803, "sequenti": 817, "arg": 818, "return": 818, "ast": 821, "sub": 823, "binari": [824, 840], "parser": 827, "path": 828, "except": [829, 854, 859], "profil": 832, "machin": 833, "between": 833, "support": [833, 846, 850, 859, 862, 872], "start": [833, 873], "work": [833, 864, 883], "eagerli": 833, "provid": 833, "lazili": 833, "trace_graph": [833, 880], "document": 833, "contribut": [833, 834, 839, 864], "commun": 833, "citat": 833, "doc": [835, 847], "docker": [835, 840, 841, 847, 873], "conveni": [835, 847, 858], "script": [835, 847], "hub": 835, "local": [835, 841, 856], "without": [835, 863], "contributor": [836, 842], "reward": 836, "badg": 836, "tier": 836, "error": [837, 854, 855], "handl": [837, 845, 851, 854, 859, 872], "help": [838, 841, 855], "resourc": 838, "open": 839, "task": 839, "fail": [839, 855, 865], "frontend": [839, 846, 862, 863, 870], "place": 839, "checklist": 839, "format": [839, 856], "extend": [839, 865, 868], "an": [839, 860], "issu": [839, 841, 856, 873], "github": [839, 840], "templat": 839, "fork": [840, 841], "commit": [840, 841, 849, 856], "pycharm": [840, 841, 856], "virtual": 840, "miniconda": 840, "venv": 840, "interpret": 840, "window": 840, "maco": 840, "ubuntu": 840, "detail": 840, "free": 840, "wsl": 840, "codespac": 840, "The": [840, 841, 847, 860, 862, 872], "list": 841, "manag": 841, "who": 841, "ask": [841, 855], "With": 841, "command": 841, "pull": [841, 849], "request": [841, 849], "small": 841, "often": 841, "interact": 841, "most": 841, "out": [841, 857, 859, 861], "id": [841, 844], "program": 842, "core": 842, "rise": 842, "deep": 843, "dive": 843, "termin": 844, "regener": 844, "failur": 844, "skip": 844, "integr": [845, 849, 856, 864, 865], "version": [846, 866, 872], "builder": 847, "being": 847, "option": 847, "index": 847, "rst": 847, "partial_conf": 847, "py": 847, "prebuild": 847, "sh": 847, "extens": 847, "custom_autosummari": 847, "hide": 847, "discussion_link": 847, "skippable_funct": 847, "ivy_data": 847, "instanc": [848, 862, 863], "method": [848, 862, 863], "special": [848, 850, 862], "nestabl": [848, 857, 858, 859], "continu": [849, 856], "push": 849, "pr": 849, "trigger": 849, "A": [849, 868], "down": 849, "view": [849, 859, 861], "store": 849, "retriev": 849, "repositori": 849, "nitti": 849, "gritti": 849, "storag": 849, "space": 849, "unifyai": 849, "determin": 849, "coverag": 849, "workflow": 849, "multipl": 849, "runner": 849, "race": 849, "condit": 849, "period": 849, "manual": 849, "dispatch": 849, "ci": 849, "dashboard": 849, "promot": [850, 862], "precis": 850, "non": [850, 868], "argument": [850, 851, 857, 859, 861, 862], "other": [850, 851], "unsupport": 850, "attribut": [850, 867], "case": 850, "bug": 850, "cast": [850, 862], "superset": [850, 868], "docstr": [852, 853], "func_wrapp": 854, "prune": 854, "handle_except": 854, "consist": [854, 865], "prerequir": 855, "common": [855, 856], "lint": [856, 864], "keyword": 857, "integ": 857, "primari": 858, "composit": 858, "mix": [858, 859, 865], "partial": [858, 859, 865], "order": 859, "wrapper": 859, "miscellan": 859, "overview": [860, 864], "usag": [860, 864, 868, 882], "signatur": 860, "design": [860, 866, 869], "our": 860, "polici": [860, 862], "specif": 860, "consider": 860, "inplac": 861, "updat": 861, "copi": 861, "short": 862, "unus": 862, "rule": 862, "duplic": [862, 868], "alia": 863, "formatt": 864, "functionorderingformatt": 864, "own": 865, "strategi": 865, "ad": 865, "explicit": 865, "do": 865, "effect": 865, "bonu": 865, "self": 865, "test_array_funct": 865, "re": 865, "navig": 866, "categor": 866, "submodul": 866, "unpin": 866, "properti": 867, "getter": 867, "setter": 867, "set_": 867, "unset_": 867, "behaviour": 868, "what": 868, "effici": 868, "maxim": 868, "block": 870, "faq": 872, "maintain": 872, "deploy": 872, "auto": 872, "differenti": 872, "replica": 872, "parallel": 872, "altern": 872, "pip": 873, "folder": 873, "question": 873, "glossari": 874, "motiv": 875, "explos": 876, "One": 878, "liner": 878, "graph_transpil": 879, "sharp": [879, 880, 882], "bit": [879, 880, 882], "cach": 880, "relat": 883, "matlab": 884, "scipi": 884, "scikit": 884, "theano": 884, "panda": 884, "julia": 884, "apach": 884, "spark": 884, "mllib": 884, "caff": 884, "chainer": 884, "mxnet": 884, "cntk": 884, "flux": 884, "dex": 884, "languag": 884, "tf": 885, "jaxpr": 885, "jit": 885, "fx": 885, "onnx": 886}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"check_float": [[171, "check-float"]], "closest_valid_dtype": [[172, "closest-valid-dtype"]], "iinfo": [[183, "iinfo"]], "as_native_dtype": [[166, "as-native-dtype"]], "as_ivy_dtype": [[165, "as-ivy-dtype"]], "to_dlpack": [[159, "to-dlpack"]], "Note": [[159, null], [148, null], [646, null], [646, null]], "linspace": [[152, "linspace"]], "astype": [[167, "astype"]], "triu_indices": [[162, "triu-indices"]], "is_complex_dtype": [[187, "is-complex-dtype"]], "asarray": [[142, "asarray"]], "native_array": [[155, "native-array"]], "from_dlpack": [[148, "from-dlpack"]], "function_supported_dtypes": [[181, "function-supported-dtypes"]], "empty_like": [[146, "empty-like"]], "triu": [[161, "triu"]], "dtype": [[178, "dtype"]], "empty": [[145, "empty"]], "ones_like": [[158, "ones-like"]], "finfo": [[180, "finfo"]], "meshgrid": [[154, "meshgrid"]], "default_float_dtype": [[175, "default-float-dtype"]], "eye": [[147, "eye"]], "complex": [[143, "complex"]], "is_bool_dtype": [[186, "is-bool-dtype"]], "infer_default_dtype": [[184, "infer-default-dtype"]], "frombuffer": [[149, "frombuffer"]], "default_int_dtype": [[176, "default-int-dtype"]], "function_unsupported_dtypes": [[182, "function-unsupported-dtypes"]], "full_like": [[151, "full-like"]], "broadcast_to": [[169, "broadcast-to"]], "invalid_dtype": [[185, "invalid-dtype"]], "full": [[150, "full"]], "one_hot": [[156, "one-hot"]], "ones": [[157, "ones"]], "copy_array": [[144, "copy-array"]], "default_uint_dtype": [[177, "default-uint-dtype"]], "zeros_like": [[164, "zeros-like"]], "broadcast_arrays": [[168, "broadcast-arrays"]], "array": [[141, "array"]], "tril": [[160, "tril"]], "logspace": [[153, "logspace"]], "zeros": [[163, "zeros"]], "dtype_bits": [[179, "dtype-bits"]], "default_dtype": [[174, "default-dtype"]], "default_complex_dtype": [[173, "default-complex-dtype"]], "can_cast": [[170, "can-cast"]], "Motivation": [[875, "motivation"]], "Frameworks": [[884, "frameworks"]], "MATLAB matlab": [[884, "matlab-matlab"]], "SciPy scipy": [[884, "scipy-scipy"]], "Torch torch": [[884, "torch-torch"]], "NumPy numpy": [[884, "numpy-numpy"]], "SciKit Learn scikit-learn": [[884, "scikit-learn-scikit-learn"]], "Theano theano": [[884, "theano-theano"]], "Pandas pandas": [[884, "pandas-pandas"]], "Julia julia": [[884, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[884, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[884, "caffe-caffe"]], "Chainer chainer": [[884, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[884, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[884, "mxnet-mxnet"]], "CNTK cntk": [[884, "cntk-cntk"]], "PyTorch pytorch": [[884, "pytorch-pytorch"]], "Flux flux": [[884, "flux-flux"]], "JAX jax": [[884, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[884, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[884, "dex-language-dex-language"]], "Function Types": [[858, "function-types"]], "Primary Functions": [[858, "primary-functions"]], "Compositional Functions": [[858, "compositional-functions"]], "Mixed Functions": [[858, "mixed-functions"]], "Partial Mixed Functions": [[858, "partial-mixed-functions"]], "Standalone Functions": [[858, "standalone-functions"]], "Nestable Functions": [[858, "nestable-functions"], [857, "nestable-functions"], [848, "nestable-functions"]], "Convenience Functions": [[858, "convenience-functions"]], "Comparing Ivy with ONNX": [[886, "comparing-ivy-with-onnx"]], "ONNX onnx": [[886, "onnx-onnx"]], "ivy": [[886, "ivy"]], "Building the Docs Pipeline": [[847, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[847, "how-the-doc-builder-is-being-run"]], "The convenience script": [[847, "the-convenience-script"]], "Options": [[847, "options"]], "The Docker image": [[847, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[847, "how-ivy-s-docs-is-structured"]], "index.rst": [[847, "index-rst"]], "partial_conf.py": [[847, "partial-conf-py"]], "prebuild.sh": [[847, "prebuild-sh"]], "Custom Extensions": [[847, "custom-extensions"]], "custom_autosummary": [[847, "custom-autosummary"]], ":hide-table:": [[847, "hide-table"]], "discussion_linker": [[847, "discussion-linker"]], "skippable_function": [[847, "skippable-function"]], "ivy_data": [[847, "ivy-data"]], "Docstring Examples": [[852, "docstring-examples"]], "ivy.tan": [[852, "ivy-tan"]], "ivy.roll": [[852, "ivy-roll"]], "ivy.add": [[852, "ivy-add"]], "Related Work": [[883, "related-work"]], "Formatting": [[856, "formatting"]], "Lint Checks": [[856, "lint-checks"], [856, "id2"]], "Setup Formatting Locally": [[856, "setup-formatting-locally"]], "Pre-commit": [[856, "pre-commit"]], "VS Code": [[856, "vs-code"]], "PyCharm": [[856, "pycharm"], [840, "pycharm"]], "Common Issues with Pre-Commit": [[856, "common-issues-with-pre-commit"]], "Continuous Integration": [[856, "continuous-integration"], [849, "continuous-integration"]], "Lint Formatting": [[856, "lint-formatting"]], "Design": [[869, "design"]], "Ivy Tests": [[865, "ivy-tests"], [849, "ivy-tests"]], "Testing Pipeline": [[865, "testing-pipeline"]], "Hypothesis": [[865, "id2"]], "Data Generation": [[865, "id3"]], "Writing your own strategy": [[865, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[865, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[865, "ivy-test-decorators"]], "Writing Ivy Tests": [[865, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[865, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[865, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[865, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[865, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[865, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[865, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[865, "self-consistent-and-explicit-testing"]], "test_array_function": [[865, "id5"]], "Running Ivy Tests": [[865, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[865, "re-running-failed-ivy-tests"]], "Commit (Push/PR) Triggered Testing": [[849, "commit-push-pr-triggered-testing"]], "Implementation": [[849, "implementation"]], "A Top-Down View": [[849, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[849, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[849, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[849, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[849, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[849, "determine-test-coverage-workflow"]], "Multiple Runners": [[849, "multiple-runners"]], "Race Condition": [[849, "race-condition"]], "Array API Tests": [[849, "array-api-tests"], [844, "array-api-tests"]], "Periodic Testing": [[849, "periodic-testing"]], "Manually Dispatched Workflows": [[849, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[849, "ci-pipeline"]], "Push": [[849, "push"]], "Pull Request": [[849, "pull-request"]], "Dashboard": [[849, "dashboard"]], "ivy.graph_transpile()": [[879, "ivy-graph-transpile"]], "Graph Transpiler API": [[879, "graph-transpiler-api"]], "Using the transpiler": [[879, "using-the-transpiler"]], "Transpiling functions": [[879, "transpiling-functions"]], "Transpiling Libraries": [[879, "transpiling-libraries"]], "Transpiling Modules": [[879, "transpiling-modules"]], "Sharp bits": [[879, "sharp-bits"], [880, "sharp-bits"], [882, "sharp-bits"]], "Examples": [[879, "examples"], [880, "examples"], [857, "examples"], [882, "examples"]], "Fix Failing Tests:": [[855, "fix-failing-tests"]], "Prerequirement:": [[855, "prerequirement"]], "Setting Up": [[855, "setting-up"], [840, "setting-up"]], "How to run tests": [[855, "how-to-run-tests"]], "Common Errors": [[855, "common-errors"]], "Where to ask for Help": [[855, "where-to-ask-for-help"]], "Inplace Updates": [[861, "inplace-updates"]], "out argument": [[861, "out-argument"]], "copy argument": [[861, "copy-argument"]], "Views": [[861, "views"]], "Superset Behaviour": [[868, "superset-behaviour"]], "Extending the Standard": [[868, "extending-the-standard"]], "What is the Superset?": [[868, "what-is-the-superset"]], "A Non-Duplicate Superset": [[868, "a-non-duplicate-superset"]], "What is not the Superset?": [[868, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[868, "balancing-generalization-with-efficiency"]], "More Examples": [[868, "more-examples"]], "Maximizing Usage of Native Functionality": [[868, "maximizing-usage-of-native-functionality"]], "Ivy Frontends": [[862, "ivy-frontends"]], "Introduction": [[862, "introduction"], [863, "introduction"], [60, "Introduction"]], "The Frontend Basics": [[862, "the-frontend-basics"]], "Writing Frontend Functions": [[862, "writing-frontend-functions"]], "Short Frontend Implementations": [[862, "short-frontend-implementations"]], "Unused Arguments": [[862, "unused-arguments"]], "Supported Data Types and Devices": [[862, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[862, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[862, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[862, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[862, "frontends-duplicate-policy"]], "Exception Handling": [[854, "exception-handling"], [859, "exception-handling"]], "Ivy Exception Class": [[854, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[854, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[854, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[854, "handle-exceptions-decorator"]], "Consistency in Errors": [[854, "consistency-in-errors"]], "Assertion Function": [[854, "assertion-function"]], "Ivy as a Transpiler": [[871, "ivy-as-a-transpiler"], [46, "Ivy-as-a-Transpiler"], [45, "Ivy-as-a-Transpiler"]], "Source-to-Source Transpiler \u2705": [[871, "source-to-source-transpiler"], [870, "source-to-source-transpiler"]], "Graph Tracer \u2705": [[871, "graph-tracer"]], "Ivy Frontend Tests": [[863, "ivy-frontend-tests"]], "Frontend Test Examples": [[863, "frontend-test-examples"]], "ivy.tan()": [[863, "ivy-tan"]], "ivy.full()": [[863, "ivy-full"]], "Testing Without Using Tests Values": [[863, "testing-without-using-tests-values"]], "Alias functions": [[863, "alias-functions"]], "Frontend Instance Method Tests": [[863, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[863, "frontend-instance-method-test-examples"]], "ivy.add()": [[863, "ivy-add"]], "Hypothesis Helpers": [[863, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[863, "frontend-framework-testing-configuration"]], "ML Explosion": [[876, "ml-explosion"]], "ivy.trace_graph()": [[880, "ivy-trace-graph"]], "Tracer API": [[880, "tracer-api"]], "Using the tracer": [[880, "using-the-tracer"]], "Eager vs lazy Compilation": [[880, "eager-vs-lazy-compilation"]], "Array caching": [[880, "array-caching"]], "Generators": [[880, "generators"]], "Stateful": [[880, "stateful"]], "Glossary": [[874, "glossary"]], "Function Arguments": [[857, "function-arguments"]], "Positional and Keyword Arguments": [[857, "positional-and-keyword-arguments"]], "Input Arrays": [[857, "input-arrays"]], "out Argument": [[857, "out-argument"]], "dtype and device arguments": [[857, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[857, "numbers-in-operator-functions"]], "Integer Sequences": [[857, "integer-sequences"]], "Docstrings": [[853, "docstrings"]], "ivy.unify()": [[882, "ivy-unify"]], "Unify API": [[882, "unify-api"]], "Usage": [[882, "usage"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[864, "ivy-lint-ivy-s-custom-code-formatters"]], "Overview": [[864, "overview"], [860, "overview"]], "Existing Formatters": [[864, "existing-formatters"]], "FunctionOrderingFormatter": [[864, "functionorderingformatter"]], "How the Formatter Works:": [[864, "how-the-formatter-works"]], "Integration and Usage": [[864, "integration-and-usage"]], "Contribution": [[864, "contribution"]], "Round Up": [[864, "round-up"], [51, "Round-Up"], [48, "Round-Up"], [49, "Round-Up"], [47, "Round-Up"], [59, "Round-Up"], [52, "Round-Up"], [50, "Round-Up"], [30, "Round-Up"], [38, "Round-Up"], [34, "Round-Up"], [36, "Round-Up"], [28, "Round-Up"], [40, "Round-Up"], [35, "Round-Up"], [46, "Round-Up"], [37, "Round-Up"]], "Graph Tracers": [[885, "graph-tracers"]], "tf.Graph": [[885, "tf-graph"]], "Jaxpr": [[885, "jaxpr"]], "torch.jit": [[885, "torch-jit"]], "torch.fx": [[885, "torch-fx"]], "Why Transpile?": [[877, "why-transpile"]], "Data Types": [[850, "data-types"]], "Data Type Module": [[850, "data-type-module"]], "Data Type Promotion": [[850, "data-type-promotion"]], "Precise Mode": [[850, "precise-mode"]], "Precise Promotion Table": [[850, "precise-promotion-table"]], "Non-Precise Promotion Table": [[850, "non-precise-promotion-table"]], "Arguments in other Functions": [[850, "arguments-in-other-functions"], [851, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[850, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[850, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[850, "special-case"]], "Backend Data Type Bugs": [[850, "backend-data-type-bugs"]], "Data Type Casting Modes": [[850, "data-type-casting-modes"]], "Superset Data Type Support": [[850, "superset-data-type-support"]], "Containers": [[848, "containers"]], "Container Instance Methods": [[848, "container-instance-methods"]], "API Instance Methods": [[848, "api-instance-methods"]], "API Special Methods": [[848, "api-special-methods"]], "One liners": [[878, "one-liners"]], "Function Wrapping": [[859, "function-wrapping"]], "Decorator order": [[859, "decorator-order"]], "Conversion Wrappers": [[859, "conversion-wrappers"]], "Inference Wrappers": [[859, "inference-wrappers"]], "Out Argument Support": [[859, "out-argument-support"]], "Nestable Support": [[859, "nestable-support"]], "Partial Mixed Function Support": [[859, "partial-mixed-function-support"]], "Shape Conversion": [[859, "shape-conversion"]], "View Handling": [[859, "view-handling"]], "Miscellaneous Wrappers": [[859, "miscellaneous-wrappers"]], "ivy.transpile()": [[881, "ivy-transpile"]], "Transpiler API": [[881, "transpiler-api"]], "Devices": [[851, "devices"]], "Device Module": [[851, "device-module"]], "Device handling": [[851, "device-handling"]], "Backend Setting": [[846, "backend-setting"]], "Dynamic Backend Setting": [[846, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[846, "backend-and-frontend-version-support"]], "Operating Modes": [[867, "operating-modes"]], "Global Parameter Properties": [[867, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[867, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[867, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "FAQ": [[872, "faq"]], "Maintaining Backend Versions": [[872, "maintaining-backend-versions"]], "Dynamic Sizes": [[872, "dynamic-sizes"]], "Type and Shape Checking": [[872, "type-and-shape-checking"]], "GPU handling": [[872, "gpu-handling"]], "Model Deployment": [[872, "model-deployment"]], "Dynamic Control Flow": [[872, "dynamic-control-flow"]], "Auto-Differentiation": [[872, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[872, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[872, "support-for-functions"]], "Alternative Data Structures": [[872, "alternative-data-structures"]], "Custom Operations": [[872, "custom-operations"]], "The Pipeline": [[872, "the-pipeline"]], "State": [[872, "state"]], "Navigating the Code": [[866, "navigating-the-code"]], "Categorization": [[866, "categorization"]], "Submodule Design": [[866, "submodule-design"]], "Ivy API": [[866, "ivy-api"]], "Backend API": [[866, "backend-api"]], "Submodule Helper Functions": [[866, "submodule-helper-functions"]], "Version Unpinning": [[866, "version-unpinning"]], "Gradients": [[860, "gradients"], [96, "module-ivy.data_classes.container.gradients"], [73, "module-ivy.data_classes.array.gradients"], [652, "gradients"], [389, "gradients"]], "Example Usage of the Gradient API": [[860, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[860, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[860, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[860, "custom-gradient-functions"]], "Design of the Gradient API": [[860, "design-of-the-gradient-api"]], "Our policy on gradients": [[860, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[860, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[860, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[860, "framework-specific-considerations"]], "Get Started": [[873, "get-started"]], "Installing using pip": [[873, "installing-using-pip"]], "Installing from source": [[873, "installing-from-source"]], "Docker": [[873, "docker"]], "Ivy Folder": [[873, "ivy-folder"]], "Issues and Questions": [[873, "issues-and-questions"]], "Building Blocks": [[870, "building-blocks"]], "Backend Functional APIs \u2705": [[870, "backend-functional-apis"]], "Ivy Functional API \u2705": [[870, "ivy-functional-api"]], "Frontend Functional APIs \u2705": [[870, "frontend-functional-apis"]], "Backend Handler \u2705": [[870, "backend-handler"]], "Module": [[814, "module-ivy.stateful.module"]], "Exceptions": [[829, "module-ivy.utils.exceptions"]], "Structs": [[802, "module-ivy_tests.test_ivy.helpers.structs"]], "Deep Dive": [[843, "deep-dive"]], "Utilities": [[818, "module-ivy.stateful.utilities"]], "Args:": [[818, "args"], [818, "id1"], [818, "id10"]], "Returns:": [[818, "returns"], [818, "id11"]], "Example:": [[818, "example"], [818, "id12"]], "Open Tasks": [[839, "open-tasks"]], "Fixing Failing Tests": [[839, "fixing-failing-tests"]], "How to Contribute": [[839, "how-to-contribute"]], "Frontend APIs": [[839, "frontend-apis"]], "Where to place a frontend function": [[839, "where-to-place-a-frontend-function"]], "Frontend checklist": [[839, "frontend-checklist"]], "Function Formatting": [[839, "function-formatting"]], "Formatting checklist": [[839, "formatting-checklist"]], "Ivy Experimental API": [[839, "ivy-experimental-api"]], "Extending the Ivy API": [[839, "extending-the-ivy-api"]], "Where to place a backend function": [[839, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[839, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Activations": [[808, "module-ivy.stateful.activations"], [65, "module-ivy.data_classes.array.activations"], [87, "module-ivy.data_classes.container.activations"], [643, "activations"], [382, "activations"]], "Parameter": [[808, "parameter"], [808, "id1"], [601, "parameter"], [594, "parameter"], [603, "parameter"], [600, "parameter"], [595, "parameter"], [604, "parameter"], [648, "parameter"], [651, "parameter"], [651, "id1"], [651, "id2"], [651, "id3"], [651, "id4"], [651, "id5"], [225, "parameter"]], "Logging": [[831, "module-ivy.utils.logging"]], "Contributor Program": [[842, "contributor-program"]], "Contributor": [[842, "contributor"]], "Core Contributor": [[842, "core-contributor"]], "Rising Contributor": [[842, "rising-contributor"]], "Top Contributor": [[842, "top-contributor"]], "Testing helpers": [[804, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Binaries": [[824, "module-ivy.utils.binaries"]], "Einsum path helpers": [[828, "module-ivy.utils.einsum_path_helpers"]], "Handler": [[822, "module-ivy.utils.backend.handler"]], "Helpers": [[810, "module-ivy.stateful.helpers"]], "Losses": [[813, "module-ivy.stateful.losses"], [100, "module-ivy.data_classes.container.losses"], [77, "module-ivy.data_classes.array.losses"], [655, "losses"], [392, "losses"]], "Profiler": [[832, "module-ivy.utils.profiler"]], "Optimizers": [[816, "module-ivy.stateful.optimizers"]], "Backend": [[820, "backend"]], "Building the Docs": [[835, "building-the-docs"]], "Building the Docs using Docker": [[835, "building-the-docs-using-docker"]], "Using convenience script": [[835, "using-convenience-script"]], "Using existing image on Docker Hub": [[835, "using-existing-image-on-docker-hub"]], "Building the image locally": [[835, "building-the-image-locally"]], "Building the Docs without Docker": [[835, "building-the-docs-without-docker"]], "Running the Tests": [[844, "running-the-tests"]], "Using Terminal": [[844, "using-terminal"]], "Using the IDE": [[844, "using-the-ide"]], "Regenerating Test Failures": [[844, "regenerating-test-failures"]], "Test Skipping": [[844, "test-skipping"]], "Dynamic import": [[826, "module-ivy.utils.dynamic_import"]], "Sequential": [[817, "module-ivy.stateful.sequential"]], "Layers": [[812, "module-ivy.stateful.layers"], [98, "module-ivy.data_classes.container.layers"], [75, "module-ivy.data_classes.array.layers"], [653, "layers"], [390, "layers"]], "Inspection": [[830, "module-ivy.utils.inspection"]], "Converters": [[809, "module-ivy.stateful.converters"]], "Assertions": [[819, "module-ivy.utils.assertions"], [791, "module-ivy_tests.test_ivy.helpers.assertions"]], "Contributing": [[834, "contributing"], [833, "contributing"]], "Pipeline helper": [[801, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Multiprocessing": [[800, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "Test parameter flags": [[803, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Forking and cloning the repo": [[840, "forking-and-cloning-the-repo"]], "Pre-Commit": [[840, "pre-commit"]], "Virtual environments - No Docker": [[840, "virtual-environments-no-docker"]], "Using miniconda": [[840, "using-miniconda"]], "Using venv": [[840, "using-venv"]], "Docker Interpreter with PyCharm": [[840, "docker-interpreter-with-pycharm"]], "Windows": [[840, "windows"], [840, "id6"]], "MacOS": [[840, "macos"]], "Ubuntu": [[840, "ubuntu"], [840, "id8"]], "Setting Up Testing in PyCharm": [[840, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[840, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[840, "setting-up-for-free"]], "WSL": [[840, "wsl"]], "GitHub Codespaces": [[840, "github-codespaces"]], "The Binaries": [[840, "the-binaries"]], "Einsum parser": [[827, "module-ivy.utils.einsum_parser"]], "Testing": [[807, "testing"], [59, "Testing"]], "Initializers": [[811, "module-ivy.stateful.initializers"]], "Number helpers": [[799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "Contributor Rewards": [[836, "contributor-rewards"]], "Badges": [[836, "badges"]], "Badge Tiers": [[836, "badge-tiers"]], "Convert Machine Learning Code Between Frameworks": [[833, "convert-machine-learning-code-between-frameworks"]], "Installing ivy": [[833, "installing-ivy"]], "Supported Frameworks": [[833, "supported-frameworks"]], "Getting started": [[833, "getting-started"]], "Using ivy": [[833, "using-ivy"]], "How ivy works?": [[833, "how-ivy-works"]], "ivy.transpile will eagerly transpile if a class or function is provided": [[833, "ivy-transpile-will-eagerly-transpile-if-a-class-or-function-is-provided"]], "ivy.transpile will lazily transpile if a module (library) is provided": [[833, "ivy-transpile-will-lazily-transpile-if-a-module-library-is-provided"]], "ivy.trace_graph can be used eagerly or lazily": [[833, "ivy-trace-graph-can-be-used-eagerly-or-lazily"]], "Documentation": [[833, "documentation"]], "Community": [[833, "community"]], "Citation": [[833, "citation"]], "Norms": [[815, "module-ivy.stateful.norms"], [102, "module-ivy.data_classes.container.norms"], [659, "norms"], [79, "module-ivy.data_classes.array.norms"], [396, "norms"]], "Sub backend handler": [[823, "module-ivy.utils.backend.sub_backend_handler"]], "Helpful Resources": [[838, "helpful-resources"]], "The Basics": [[841, "the-basics"]], "Getting Help": [[841, "getting-help"]], "ToDo List Issues": [[841, "todo-list-issues"]], "Managing Your Fork": [[841, "managing-your-fork"]], "Who To Ask": [[841, "who-to-ask"]], "With Command Line:": [[841, "with-command-line"]], "With Browser:": [[841, "with-browser"]], "Pull Requests": [[841, "pull-requests"]], "Small Commits Often": [[841, "small-commits-often"]], "Interactive Ivy Docker Container": [[841, "interactive-ivy-docker-container"]], "Running Tests Locally": [[841, "running-tests-locally"]], "With Docker": [[841, "with-docker"]], "Getting the most out of IDE": [[841, "getting-the-most-out-of-ide"]], "with PyCharm": [[841, "with-pycharm"]], "Error Handling": [[837, "error-handling"]], "Utils": [[806, "utils"]], "Ast helpers": [[821, "module-ivy.utils.backend.ast_helpers"]], "Arrays": [[845, "arrays"]], "Native Array": [[845, "native-array"]], "Ivy Array": [[845, "ivy-array"]], "Array Handling": [[845, "array-handling"]], "Integrating custom classes with Ivy": [[845, "integrating-custom-classes-with-ivy"]], "Framework classes": [[805, "framework-classes"]], "Decorator utils": [[825, "module-ivy.utils.decorator_utils"]], "sort": [[776, "sort"]], "save": [[790, "save"]], "randint": [[759, "randint"]], "nonzero": [[767, "nonzero"]], "argwhere": [[766, "argwhere"]], "std": [[784, "std"]], "shuffle": [[763, "shuffle"]], "Hypothesis helpers": [[795, "hypothesis-helpers"]], "unique_values": [[772, "unique-values"]], "Data-dependent output shape": [[772, null], [771, null], [769, null], [770, null], [662, null], [662, null], [662, null], [662, null]], "unique_inverse": [[771, "unique-inverse"]], "multinomial": [[758, "multinomial"]], "prune_nest_at_indices": [[754, "prune-nest-at-indices"]], "any": [[788, "any"]], "General helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "prune_nest_at_index": [[753, "prune-nest-at-index"]], "where": [[768, "where"]], "load": [[789, "load"]], "Array helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "Dtype helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "seed": [[762, "seed"]], "prod": [[783, "prod"]], "random_uniform": [[761, "random-uniform"]], "mean": [[781, "mean"]], "min": [[782, "min"]], "prune_empty": [[752, "prune-empty"]], "searchsorted": [[775, "searchsorted"]], "einsum": [[779, "einsum"]], "msort": [[774, "msort"]], "unique_all": [[769, "unique-all"]], "all": [[787, "all"]], "argsort": [[773, "argsort"]], "Available frameworks": [[792, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Globals": [[794, "module-ivy_tests.test_ivy.helpers.globals"]], "random_normal": [[760, "random-normal"]], "max": [[780, "max"]], "cumprod": [[777, "cumprod"]], "set_nest_at_index": [[755, "set-nest-at-index"]], "argmin": [[765, "argmin"]], "Function testing": [[793, "module-ivy_tests.test_ivy.helpers.function_testing"]], "set_nest_at_indices": [[756, "set-nest-at-indices"]], "var": [[786, "var"]], "layer_norm": [[757, "layer-norm"]], "unique_counts": [[770, "unique-counts"]], "sum": [[785, "sum"]], "argmax": [[764, "argmax"]], "cumsum": [[778, "cumsum"]], "vander": [[709, "vander"]], "copy_nest": [[739, "copy-nest"]], "map": [[744, "map"]], "flip": [[723, "flip"]], "zero_pad": [[734, "zero-pad"]], "clip": [[719, "clip"]], "split": [[728, "split"]], "repeat": [[725, "repeat"]], "permute_dims": [[724, "permute-dims"]], "concat": [[720, "concat"]], "nested_any": [[748, "nested-any"]], "all_nested_indices": [[738, "all-nested-indices"]], "wasserstein_loss_discriminator": [[717, "wasserstein-loss-discriminator"]], "expand_dims": [[722, "expand-dims"]], "map_nest_at_indices": [[746, "map-nest-at-indices"]], "vector_norm": [[711, "vector-norm"]], "insert_into_nest_at_index": [[742, "insert-into-nest-at-index"]], "multi_index_nest": [[747, "multi-index-nest"]], "reptile_step": [[737, "reptile-step"]], "trace": [[708, "trace"]], "squeeze": [[729, "squeeze"]], "maml_step": [[736, "maml-step"]], "svdvals": [[705, "svdvals"]], "index_nest": [[741, "index-nest"]], "insert_into_nest_at_indices": [[743, "insert-into-nest-at-indices"]], "stack": [[730, "stack"]], "tensordot": [[706, "tensordot"]], "binary_cross_entropy": [[713, "binary-cross-entropy"]], "map_nest_at_index": [[745, "map-nest-at-index"]], "nested_map": [[750, "nested-map"]], "nested_multi_map": [[751, "nested-multi-map"]], "nested_argwhere": [[749, "nested-argwhere"]], "swapaxes": [[731, "swapaxes"]], "vecdot": [[710, "vecdot"]], "constant_pad": [[721, "constant-pad"]], "fomaml_step": [[735, "fomaml-step"]], "reshape": [[726, "reshape"]], "tile": [[732, "tile"]], "vector_to_skew_symmetric_matrix": [[712, "vector-to-skew-symmetric-matrix"]], "cross_entropy": [[714, "cross-entropy"]], "wasserstein_loss_generator": [[718, "wasserstein-loss-generator"]], "duplicate_array_index_chains": [[740, "duplicate-array-index-chains"]], "unstack": [[733, "unstack"]], "tensorsolve": [[707, "tensorsolve"]], "roll": [[727, "roll"]], "sparse_cross_entropy": [[715, "sparse-cross-entropy"]], "ssim_loss": [[716, "ssim-loss"]], "Parafac2 tensor": [[112, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "Container": [[117, "container"]], "Searching": [[104, "module-ivy.data_classes.container.searching"], [661, "searching"], [81, "module-ivy.data_classes.array.searching"], [398, "searching"]], "Base": [[120, "module-ivy.data_classes.nested_array.base"], [110, "module-ivy.data_classes.factorized_tensor.base"], [88, "module-ivy.data_classes.container.base"]], "try_except": [[138, "try-except"]], "Sorting": [[106, "module-ivy.data_classes.container.sorting"], [663, "sorting"], [83, "module-ivy.data_classes.array.sorting"], [400, "sorting"]], "Nested array": [[119, "nested-array"]], "for_loop": [[136, "for-loop"]], "Statistical": [[107, "module-ivy.data_classes.container.statistical"], [664, "statistical"], [84, "module-ivy.data_classes.array.statistical"], [402, "statistical"]], "Tucker tensor": [[115, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "hardswish": [[125, "hardswish"]], "Tr tensor": [[113, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "softmax": [[131, "softmax"]], "Data classes": [[122, "data-classes"]], "Set": [[105, "module-ivy.data_classes.container.set"], [662, "set"], [82, "module-ivy.data_classes.array.set"], [399, "module-ivy.functional.ivy.experimental.set"]], "Elementwise": [[121, "module-ivy.data_classes.nested_array.elementwise"], [70, "module-ivy.data_classes.array.elementwise"], [93, "module-ivy.data_classes.container.elementwise"], [649, "elementwise"], [387, "elementwise"]], "log_softmax": [[127, "log-softmax"]], "Cp tensor": [[111, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Utility": [[108, "module-ivy.data_classes.container.utility"], [665, "utility"], [85, "module-ivy.data_classes.array.utility"], [403, "utility"]], "Functions": [[123, "functions"]], "leaky_relu": [[126, "leaky-relu"]], "cmp_is": [[134, "cmp-is"]], "cmp_isnot": [[135, "cmp-isnot"]], "softsign": [[133, "softsign"]], "mish": [[128, "mish"]], "Experimental": [[94, "module-ivy.data_classes.container.experimental"], [71, "module-ivy.data_classes.array.experimental"], [650, "experimental"]], "Image": [[97, "module-ivy.data_classes.container.image"], [74, "module-ivy.data_classes.array.image"]], "Random": [[103, "module-ivy.data_classes.container.random"], [660, "random"], [80, "module-ivy.data_classes.array.random"], [397, "random"]], "softplus": [[132, "softplus"]], "if_else": [[137, "if-else"]], "gelu": [[124, "gelu"]], "sigmoid": [[130, "sigmoid"]], "while_loop": [[139, "while-loop"]], "Manipulation": [[101, "module-ivy.data_classes.container.manipulation"], [78, "module-ivy.data_classes.array.manipulation"], [656, "manipulation"], [393, "manipulation"]], "Array": [[116, "array"]], "arange": [[140, "arange"]], "Linear algebra": [[99, "module-ivy.data_classes.container.linear_algebra"], [76, "module-ivy.data_classes.array.linear_algebra"], [654, "linear-algebra"], [391, "linear-algebra"]], "Tt tensor": [[114, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "General": [[95, "module-ivy.data_classes.container.general"], [72, "module-ivy.data_classes.array.general"], [651, "general"], [388, "general"]], "Wrapping": [[109, "module-ivy.data_classes.container.wrapping"], [86, "module-ivy.data_classes.array.wrapping"]], "relu": [[129, "relu"]], "Factorized tensor": [[118, "factorized-tensor"]], "inv": [[693, "inv"]], "slogdet": [[702, "slogdet"]], "conv2d_transpose": [[670, "conv2d-transpose"]], "conv3d_transpose": [[672, "conv3d-transpose"]], "cross": [[685, "cross"]], "svd": [[704, "svd"]], "diag": [[687, "diag"]], "qr": [[701, "qr"]], "lstm": [[678, "lstm"]], "roi_align": [[682, "roi-align"]], "conv2d": [[669, "conv2d"]], "eigvalsh": [[691, "eigvalsh"]], "matmul": [[694, "matmul"]], "matrix_power": [[696, "matrix-power"]], "Nest": [[658, "nest"], [395, "module-ivy.functional.ivy.experimental.nest"]], "eig": [[689, "eig"], [444, "eig"]], "conv_general_dilated": [[673, "conv-general-dilated"]], "nms": [[681, "nms"]], "depthwise_conv2d": [[675, "depthwise-conv2d"]], "cholesky": [[684, "cholesky"]], "conv3d": [[671, "conv3d"]], "outer": [[699, "outer"]], "conv1d_transpose": [[668, "conv1d-transpose"]], "matrix_rank": [[697, "matrix-rank"]], "conv_general_transpose": [[674, "conv-general-transpose"]], "solve": [[703, "solve"]], "lstm_update": [[679, "lstm-update"]], "diagonal": [[688, "diagonal"]], "dropout": [[676, "dropout"]], "pinv": [[700, "pinv"]], "conv": [[666, "conv"]], "linear": [[677, "linear"]], "det": [[686, "det"]], "inner": [[692, "inner"]], "eigh": [[690, "eigh"]], "multi_head_attention": [[680, "multi-head-attention"]], "matrix_transpose": [[698, "matrix-transpose"]], "conv1d": [[667, "conv1d"]], "scaled_dot_product_attention": [[683, "scaled-dot-product-attention"]], "matrix_norm": [[695, "matrix-norm"]], "scatter_nd": [[593, "scatter-nd"]], "get_item": [[571, "get-item"]], "set_precise_mode": [[601, "set-precise-mode"]], "inplace_variables_supported": [[579, "inplace-variables-supported"]], "set_min_denominator": [[599, "set-min-denominator"]], "is_ivy_array": [[581, "is-ivy-array"]], "itemsize": [[587, "itemsize"]], "shape": [[606, "shape"]], "is_array": [[580, "is-array"]], "isscalar": [[586, "isscalar"]], "is_ivy_container": [[582, "is-ivy-container"]], "set_inplace_mode": [[596, "set-inplace-mode"]], "set_tmp_dir": [[605, "set-tmp-dir"]], "print_all_arrays_in_memory": [[591, "print-all-arrays-in-memory"]], "get_referrers_recursive": [[573, "get-referrers-recursive"]], "inplace_increment": [[577, "inplace-increment"]], "isin": [[585, "isin"]], "stable_divide": [[608, "stable-divide"]], "set_queue_timeout": [[602, "set-queue-timeout"]], "is_ivy_nested_array": [[583, "is-ivy-nested-array"]], "set_array_mode": [[594, "set-array-mode"]], "fourier_encode": [[565, "fourier-encode"]], "set_shape_array_mode": [[603, "set-shape-array-mode"]], "strides": [[610, "strides"]], "set_min_base": [[598, "set-min-base"]], "match_kwargs": [[588, "match-kwargs"]], "gather": [[568, "gather"]], "is_native_array": [[584, "is-native-array"]], "has_nans": [[574, "has-nans"]], "num_arrays_in_memory": [[590, "num-arrays-in-memory"]], "set_item": [[597, "set-item"]], "scatter_flat": [[592, "scatter-flat"]], "multiprocessing": [[589, "multiprocessing"]], "get_all_arrays_in_memory": [[570, "get-all-arrays-in-memory"]], "function_supported_devices_and_dtypes": [[566, "function-supported-devices-and-dtypes"]], "set_nestable_mode": [[600, "set-nestable-mode"]], "set_exception_trace_mode": [[595, "set-exception-trace-mode"]], "get_num_dims": [[572, "get-num-dims"]], "set_show_func_wrapper_trace_mode": [[604, "set-show-func-wrapper-trace-mode"]], "function_unsupported_devices_and_dtypes": [[567, "function-unsupported-devices-and-dtypes"]], "gather_nd": [[569, "gather-nd"]], "inplace_decrement": [[576, "inplace-decrement"]], "stable_pow": [[609, "stable-pow"]], "inplace_arrays_supported": [[575, "inplace-arrays-supported"]], "size": [[607, "size"]], "exists": [[564, "exists"]], "inplace_update": [[578, "inplace-update"]], "nanprod": [[547, "nanprod"]], "quantile": [[548, "quantile"]], "is_native_sparse_array": [[533, "is-native-sparse-array"]], "native_sparse_array_to_indices_values_and_shape": [[535, "native-sparse-array-to-indices-values-and-shape"]], "l2_normalize": [[521, "l2-normalize"]], "instance_norm": [[519, "instance-norm"]], "clip_vector_norm": [[557, "clip-vector-norm"]], "dirichlet": [[526, "dirichlet"]], "einops_rearrange": [[561, "einops-rearrange"]], "default": [[560, "default"]], "corrcoef": [[537, "corrcoef"]], "nanmin": [[546, "nanmin"]], "lp_normalize": [[523, "lp-normalize"]], "lexsort": [[531, "lexsort"]], "nanmean": [[544, "nanmean"]], "local_response_norm": [[522, "local-response-norm"]], "array_equal": [[553, "array-equal"]], "all_equal": [[550, "all-equal"]], "bincount": [[536, "bincount"]], "invert_permutation": [[530, "invert-permutation"]], "clip_matrix_norm": [[556, "clip-matrix-norm"]], "arg_names": [[552, "arg-names"]], "arg_info": [[551, "arg-info"]], "median": [[543, "median"]], "group_norm": [[518, "group-norm"]], "gamma": [[527, "gamma"]], "cov": [[538, "cov"]], "batch_norm": [[517, "batch-norm"]], "einops_repeat": [[563, "einops-repeat"]], "nanmedian": [[545, "nanmedian"]], "assert_supports_inplace": [[554, "assert-supports-inplace"]], "bernoulli": [[524, "bernoulli"]], "is_ivy_sparse_array": [[532, "is-ivy-sparse-array"]], "cummin": [[540, "cummin"]], "current_backend_str": [[559, "current-backend-str"]], "igamma": [[542, "igamma"]], "einops_reduce": [[562, "einops-reduce"]], "cummax": [[539, "cummax"]], "l1_normalize": [[520, "l1-normalize"]], "beta": [[525, "beta"]], "optional_get_element": [[549, "optional-get-element"]], "unravel_index": [[529, "unravel-index"]], "cache_fn": [[555, "cache-fn"]], "native_sparse_array": [[534, "native-sparse-array"]], "histogram": [[541, "histogram"]], "poisson": [[528, "poisson"]], "container_types": [[558, "container-types"]], "2.0: Kornia": [[54, "2.0:-Kornia"]], "HuggingFace Tensorflow DeiT": [[62, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[62, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "1.1: Framework Selection": [[51, "1.1:-Framework-Selection"]], "Unify": [[51, "Unify"], [52, "Unify"], [50, "Unify"], [38, "Unify"]], "Compile": [[51, "Compile"], [52, "Compile"], [50, "Compile"]], "Transpile": [[51, "Transpile"], [52, "Transpile"], [50, "Transpile"], [38, "Transpile"]], "0.1: Compile": [[48, "0.1:-Compile"]], "Ivy as a Transpiler Introduction": [[63, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[63, "To-use-the-transpiler:"]], "Transpiler Interface": [[63, "Transpiler-Interface"]], "Telemetry": [[63, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[63, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[63, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[63, "3.-Transpile-Models-\ud83c\udf10"]], "Device": [[92, "module-ivy.data_classes.container.device"], [69, "module-ivy.data_classes.array.device"], [648, "device"], [386, "module-ivy.functional.ivy.experimental.device"]], "0.2: Transpile": [[49, "0.2:-Transpile"]], "Deepmind PerceiverIO on GPU": [[60, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[60, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[60, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[60, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[60, "Run-the-demo..."]], "\u2026with torch backend": [[60, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[60, "....with-tensorflow-backend"]], "\u2026with jax backend": [[60, "...with-jax-backend"]], "\u2026with numpy backend": [[60, "...with-numpy-backend"]], "3.0: Perceiver": [[55, "3.0:-Perceiver"]], "Compilation of a Basic Function": [[58, "Compilation-of-a-Basic-Function"]], "Installs \ud83d\udcbe": [[58, "Installs-\ud83d\udcbe"], [57, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[58, "Imports-\ud83d\udec3"], [57, "Imports-\ud83d\udec3"]], "Import Ivy compiler": [[58, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[58, "Function-compilation-\ud83d\udee0"]], "Set backend": [[58, "Set-backend"]], "Sample input": [[58, "Sample-input"]], "Define function to compile": [[58, "Define-function-to-compile"]], "Compile the function": [[58, "Compile-the-function"]], "Check results": [[58, "Check-results"], [58, "id1"]], "Compiling simple neural network \ud83e\udde0": [[58, "Compiling-simple-neural-network-\ud83e\udde0"]], "Define Model": [[58, "Define-Model"], [57, "Define-Model"]], "Create model": [[58, "Create-model"]], "Define input": [[58, "Define-input"]], "Compile network": [[58, "Compile-network"]], "0.0: Unify": [[47, "0.0:-Unify"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[59, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[59, "Table-of-Contents"]], "Defining the model": [[59, "Defining-the-model"]], "Model construction": [[59, "Model-construction"]], "Some helper functions": [[59, "Some-helper-functions"]], "Transpiling the model": [[59, "Transpiling-the-model"]], "PyTorch pipeline": [[59, "PyTorch-pipeline"]], "Dataset download": [[59, "Dataset-download"]], "DataLoader": [[59, "DataLoader"]], "Training": [[59, "Training"]], "Basic Operations with Ivy": [[57, "Basic-Operations-with-Ivy"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[57, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[57, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[57, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[57, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[57, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[57, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[57, "Set-Backend-Framework"]], "Create Model": [[57, "Create-Model"]], "Create Optimizer": [[57, "Create-Optimizer"]], "Input and Target": [[57, "Input-and-Target"]], "Loss Function": [[57, "Loss-Function"]], "Training Loop": [[57, "Training-Loop"]], "1.3: Dynamic vs Static": [[53, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[53, "Dynamic"]], "Static": [[53, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[53, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Data type": [[68, "module-ivy.data_classes.array.data_type"], [91, "module-ivy.data_classes.container.data_type"], [647, "data-type"], [385, "module-ivy.functional.ivy.experimental.data_type"]], "End-to-End Training Pipeline in Ivy": [[61, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[61, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[61, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[61, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[61, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[61, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[61, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[61, "Plotting-the-training-metrics"]], "Save the trained Model": [[61, "Save-the-trained-Model"]], "Resnet 18": [[64, "Resnet-18"]], "Conversions": [[66, "module-ivy.data_classes.array.conversions"], [89, "module-ivy.data_classes.container.conversions"]], "3.1: Stable Diffusion": [[56, "3.1:-Stable-Diffusion"]], "1.2: As a Decorator": [[52, "1.2:-As-a-Decorator"]], "1.0: Lazy vs Eager": [[50, "1.0:-Lazy-vs-Eager"]], "Creation": [[67, "module-ivy.data_classes.array.creation"], [90, "module-ivy.data_classes.container.creation"], [646, "creation"], [384, "creation"]], "Control flow ops": [[645, "control-flow-ops"]], "unset_inplace_mode": [[620, "unset-inplace-mode"]], "value_is_nan": [[629, "value-is-nan"]], "unset_array_mode": [[618, "unset-array-mode"]], "unset_exception_trace_mode": [[619, "unset-exception-trace-mode"]], "grad": [[634, "grad"]], "Constants": [[644, "module-ivy.functional.ivy.constants"], [383, "module-ivy.functional.ivy.experimental.constants"]], "adam_update": [[632, "adam-update"]], "unset_show_func_wrapper_trace_mode": [[627, "unset-show-func-wrapper-trace-mode"]], "lars_update": [[638, "lars-update"]], "to_native_shape": [[614, "to-native-shape"]], "unset_queue_timeout": [[625, "unset-queue-timeout"]], "vmap": [[630, "vmap"]], "to_scalar": [[616, "to-scalar"]], "unset_shape_array_mode": [[626, "unset-shape-array-mode"]], "lamb_update": [[637, "lamb-update"]], "stop_gradient": [[641, "stop-gradient"]], "to_numpy": [[615, "to-numpy"]], "gradient_descent_update": [[635, "gradient-descent-update"]], "supports_inplace_updates": [[611, "supports-inplace-updates"]], "unset_min_denominator": [[622, "unset-min-denominator"]], "unset_tmp_dir": [[628, "unset-tmp-dir"]], "value_and_grad": [[642, "value-and-grad"]], "unset_precise_mode": [[624, "unset-precise-mode"]], "jac": [[636, "jac"]], "unset_nestable_mode": [[623, "unset-nestable-mode"]], "execute_with_gradients": [[633, "execute-with-gradients"]], "to_ivy_shape": [[612, "to-ivy-shape"]], "requires_gradient": [[640, "requires-gradient"]], "Meta": [[657, "meta"], [394, "module-ivy.functional.ivy.experimental.meta"]], "optimizer_update": [[639, "optimizer-update"]], "to_list": [[613, "to-list"]], "try_else_none": [[617, "try-else-none"]], "adam_step": [[631, "adam-step"]], "unset_min_base": [[621, "unset-min-base"]], "take": [[508, "take"]], "i0": [[496, "i0"]], "atleast_2d": [[478, "atleast-2d"]], "fliplr": [[490, "fliplr"]], "l1_loss": [[470, "l1-loss"]], "partial_fold": [[501, "partial-fold"]], "concat_from_sequence": [[484, "concat-from-sequence"]], "dsplit": [[485, "dsplit"]], "unflatten": [[512, "unflatten"]], "as_strided": [[475, "as-strided"]], "trim_zeros": [[511, "trim-zeros"]], "vsplit": [[515, "vsplit"]], "partial_vec_to_tensor": [[504, "partial-vec-to-tensor"]], "soft_margin_loss": [[474, "soft-margin-loss"]], "associative_scan": [[476, "associative-scan"]], "atleast_1d": [[477, "atleast-1d"]], "atleast_3d": [[479, "atleast-3d"]], "flipud": [[491, "flipud"]], "pad_sequence": [[500, "pad-sequence"]], "soft_thresholding": [[507, "soft-thresholding"]], "unfold": [[513, "unfold"]], "put_along_axis": [[505, "put-along-axis"]], "top_k": [[510, "top-k"]], "expand": [[487, "expand"]], "unique_consecutive": [[514, "unique-consecutive"]], "poisson_nll_loss": [[472, "poisson-nll-loss"]], "take_along_axis": [[509, "take-along-axis"]], "rot90": [[506, "rot90"]], "smooth_l1_loss": [[473, "smooth-l1-loss"]], "dstack": [[486, "dstack"]], "matricize": [[497, "matricize"]], "hsplit": [[494, "hsplit"]], "vstack": [[516, "vstack"]], "moveaxis": [[498, "moveaxis"]], "partial_tensor_to_vec": [[502, "partial-tensor-to-vec"]], "hstack": [[495, "hstack"]], "column_stack": [[483, "column-stack"]], "check_scalar": [[481, "check-scalar"]], "log_poisson_loss": [[471, "log-poisson-loss"]], "heaviside": [[493, "heaviside"]], "choose": [[482, "choose"]], "broadcast_shapes": [[480, "broadcast-shapes"]], "pad": [[499, "pad"]], "partial_unfold": [[503, "partial-unfold"]], "fill_diagonal": [[488, "fill-diagonal"]], "fold": [[492, "fold"]], "flatten": [[489, "flatten"]], "batched_outer": [[440, "batched-outer"]], "initialize_tucker": [[449, "initialize-tucker"]], "kronecker": [[452, "kronecker"]], "interp": [[425, "interp"]], "kron": [[451, "kron"]], "adjoint": [[439, "adjoint"]], "lu_solve": [[454, "lu-solve"]], "higher_order_moment": [[448, "higher-order-moment"]], "pool": [[432, "pool"]], "make_svd_non_negative": [[455, "make-svd-non-negative"]], "partial_tucker": [[460, "partial-tucker"]], "tt_matrix_to_tensor": [[465, "tt-matrix-to-tensor"]], "kl_div": [[469, "kl-div"]], "solve_triangular": [[461, "solve-triangular"]], "max_pool1d": [[427, "max-pool1d"]], "multi_mode_dot": [[459, "multi-mode-dot"]], "dot": [[443, "dot"]], "multi_dot": [[458, "multi-dot"]], "interpolate": [[426, "interpolate"]], "sliding_window": [[437, "sliding-window"]], "rnn": [[436, "rnn"]], "general_inner_product": [[447, "general-inner-product"]], "tensor_train": [[463, "tensor-train"]], "eigh_tridiagonal": [[445, "eigh-tridiagonal"]], "huber_loss": [[468, "huber-loss"]], "ifftn": [[424, "ifftn"]], "reduce_window": [[433, "reduce-window"]], "cond": [[441, "cond"]], "rfft": [[434, "rfft"]], "lu_factor": [[453, "lu-factor"]], "hinge_embedding_loss": [[467, "hinge-embedding-loss"]], "stft": [[438, "stft"]], "matrix_exp": [[456, "matrix-exp"]], "mode_dot": [[457, "mode-dot"]], "rfftn": [[435, "rfftn"]], "max_unpool1d": [[430, "max-unpool1d"]], "max_pool3d": [[429, "max-pool3d"]], "tucker": [[466, "tucker"]], "truncated_svd": [[464, "truncated-svd"]], "max_pool2d": [[428, "max-pool2d"]], "khatri_rao": [[450, "khatri-rao"]], "diagflat": [[442, "diagflat"]], "eigvals": [[446, "eigvals"]], "svd_flip": [[462, "svd-flip"]], "ifft": [[423, "ifft"]], "nearest_interpolate": [[431, "nearest-interpolate"]], "vorbis_window": [[348, "vorbis-window"]], "frexp": [[363, "frexp"]], "unsorted_segment_mean": [[345, "unsorted-segment-mean"]], "unsorted_segment_min": [[346, "unsorted-segment-min"]], "count_nonzero": [[355, "count-nonzero"]], "tril_indices": [[343, "tril-indices"]], "diff": [[356, "diff"]], "sinc": [[374, "sinc"]], "random_parafac2": [[339, "random-parafac2"]], "digamma": [[357, "digamma"]], "erfc": [[358, "erfc"]], "random_tt": [[341, "random-tt"]], "trilu": [[344, "trilu"]], "amax": [[350, "amax"]], "fmax": [[362, "fmax"]], "nansum": [[371, "nansum"]], "amin": [[351, "amin"]], "hypot": [[365, "hypot"]], "fix": [[360, "fix"]], "ndindex": [[336, "ndindex"]], "allclose": [[349, "allclose"]], "random_cp": [[338, "random-cp"]], "random_tucker": [[342, "random-tucker"]], "random_tr": [[340, "random-tr"]], "ndenumerate": [[335, "ndenumerate"]], "lerp": [[368, "lerp"]], "gradient": [[364, "gradient"]], "float_power": [[361, "float-power"]], "ldexp": [[367, "ldexp"]], "binarizer": [[352, "binarizer"]], "isclose": [[366, "isclose"]], "conj": [[353, "conj"]], "copysign": [[354, "copysign"]], "kaiser_bessel_derived_window": [[332, "kaiser-bessel-derived-window"]], "mel_weight_matrix": [[334, "mel-weight-matrix"]], "modf": [[370, "modf"]], "sparsify_tensor": [[375, "sparsify-tensor"]], "nextafter": [[372, "nextafter"]], "signbit": [[373, "signbit"]], "indices": [[331, "indices"]], "hamming_window": [[329, "hamming-window"]], "hann_window": [[330, "hann-window"]], "lgamma": [[369, "lgamma"]], "polyval": [[337, "polyval"]], "erfinv": [[359, "erfinv"]], "kaiser_window": [[333, "kaiser-window"]], "unsorted_segment_sum": [[347, "unsorted-segment-sum"]], "Transpiling a haiku model to build on top": [[29, "Transpiling-a-haiku-model-to-build-on-top"]], "Transpiling a Tensorflow model to build on top": [[30, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "Learn the basics": [[33, "learn-the-basics"], [32, "learn-the-basics"]], "Lazy vs Eager": [[38, "Lazy-vs-Eager"]], "Trace": [[38, "Trace"], [39, "Trace"]], "Training PyTorch ResNet in your TensorFlow Projects": [[24, "Training-PyTorch-ResNet-in-your-TensorFlow-Projects"]], "Framework Incompatibility": [[24, "Framework-Incompatibility"], [9, "Framework-Incompatibility"], [8, "Framework-Incompatibility"]], "Transpiling a PyTorch model to TensorFlow": [[24, "Transpiling-a-PyTorch-model-to-TensorFlow"]], "About the transpiled model": [[24, "About-the-transpiled-model"], [9, "About-the-transpiled-model"], [8, "About-the-transpiled-model"]], "Installation": [[24, "Installation"], [5, "Installation"], [22, "Installation"], [4, "Installation"], [23, "Installation"]], "Setting-up the source model": [[24, "Setting-up-the-source-model"], [9, "Setting-up-the-source-model"], [8, "Setting-up-the-source-model"]], "Load the Data": [[24, "Load-the-Data"]], "Visualize a few images": [[24, "Visualize-a-few-images"]], "Load the pre-trained model": [[24, "Load-the-pre-trained-model"]], "Converting the model from TensorFlow to PyTorch": [[24, "Converting-the-model-from-TensorFlow-to-PyTorch"], [9, "Converting-the-model-from-TensorFlow-to-PyTorch"], [8, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Comparing the results": [[24, "Comparing-the-results"], [10, "Comparing-the-results"], [11, "Comparing-the-results"], [9, "Comparing-the-results"], [8, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[24, "Fine-tuning-the-transpiled-model"], [10, "Fine-tuning-the-transpiled-model"], [11, "Fine-tuning-the-transpiled-model"], [9, "Fine-tuning-the-transpiled-model"], [8, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[24, "Conclusion"], [10, "Conclusion"], [11, "Conclusion"], [9, "Conclusion"], [8, "Conclusion"]], "Accelerating PyTorch models with JAX": [[26, "Accelerating-PyTorch-models-with-JAX"], [25, "Accelerating-PyTorch-models-with-JAX"]], "Write Ivy code": [[34, "Write-Ivy-code"]], "Contents": [[34, "Contents"]], "Installing Ivy": [[34, "Installing-Ivy"]], "Importing Ivy": [[34, "Importing-Ivy"], [0, "Importing-Ivy"]], "Ivy Backend Handler": [[34, "Ivy-Backend-Handler"], [45, "Ivy-Backend-Handler"]], "Data Structures": [[34, "Data-Structures"], [45, "Data-Structures"]], "Ivy Functional API": [[34, "Ivy-Functional-API"], [45, "Ivy-Functional-API"]], "Ivy Stateful API": [[34, "Ivy-Stateful-API"], [45, "Ivy-Stateful-API"]], "Tutorials And Examples": [[32, "tutorials-and-examples"]], "Examples and Demos": [[32, "examples-and-demos"], [3, "examples-and-demos"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Transpile any model": [[41, "Transpile-any-model"]], "Round up": [[41, "Round-up"]], "Trace code": [[36, "Trace-code"]], "Accelerating MMPreTrain models with JAX": [[21, "Accelerating-MMPreTrain-models-with-JAX"], [20, "Accelerating-MMPreTrain-models-with-JAX"]], "Ivy AlexNet demo": [[5, "Ivy-AlexNet-demo"], [4, "Ivy-AlexNet-demo"]], "Data Preparation": [[5, "Data-Preparation"], [6, "Data-Preparation"], [12, "Data-Preparation"], [22, "Data-Preparation"], [7, "Data-Preparation"], [13, "Data-Preparation"], [4, "Data-Preparation"], [23, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[5, "Ivy-AlexNet-inference-in-Torch"], [4, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[5, "TensorFlow-inference"], [4, "TensorFlow-inference"]], "JAX inference": [[5, "JAX-inference"], [4, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[5, "Appendix-(Ivy-code-for-AlexNet-implementation)"], [4, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Transpiling a PyTorch model to build on top": [[28, "Transpiling-a-PyTorch-model-to-build-on-top"]], "Transpile any library": [[40, "Transpile-any-library"]], "How To Convert Models from PyTorch to PaddlePaddle": [[10, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"], [11, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[10, "About-the-Model"], [11, "About-the-Model"]], "Transpiling the Model": [[10, "Transpiling-the-Model"], [11, "Transpiling-the-Model"]], "# Ivy Bert Demo": [[6, "#-Ivy-Bert-Demo"], [7, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[6, "Install-the-dependecies"], [7, "Install-the-dependecies"]], "Import the modules": [[6, "Import-the-modules"], [7, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[6, "Ivy-inference-with-Sequence-Classification"], [7, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[6, "Ivy-model-inference-with-tensorflow"], [7, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[6, "Ivy-model-inference-with-Jax"], [7, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[6, "Ivy-model-inference-with-torch"], [7, "Ivy-model-inference-with-torch"]], "Unify code": [[35, "Unify-code"]], "Quickstart": [[46, "Quickstart"]], "Get familiar with Ivy": [[46, "Get-familiar-with-Ivy"]], "Functional API": [[46, "Functional-API"]], "Stateful API": [[46, "Stateful-API"]], "Tracing code": [[46, "Tracing-code"]], "Any function": [[46, "Any-function"], [45, "Any-function"]], "Any library": [[46, "Any-library"], [45, "Any-library"]], "Any model": [[46, "Any-model"], [45, "Any-model"]], "Transpile code": [[37, "Transpile-code"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Image Segmentation with Ivy UNet": [[12, "Image-Segmentation-with-Ivy-UNet"], [13, "Image-Segmentation-with-Ivy-UNet"]], "Imports": [[12, "Imports"], [22, "Imports"], [13, "Imports"], [23, "Imports"], [27, "Imports"]], "Custom Preprocessing": [[12, "Custom-Preprocessing"], [13, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[12, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [22, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [13, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [23, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[12, "Visualise-image"], [22, "Visualise-image"], [13, "Visualise-image"], [23, "Visualise-image"]], "Model Inference": [[12, "Model-Inference"], [13, "Model-Inference"]], "Initializing Native Torch UNet": [[12, "Initializing-Native-Torch-UNet"], [13, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"], [13, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[12, "Custom-masking-function"], [13, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[12, "Use-the-model-to-segment-your-images-\ud83d\ude80"], [13, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[12, "TensorFlow-backend"], [13, "TensorFlow-backend"]], "JAX": [[12, "JAX"], [13, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[12, "Appendix:-the-Ivy-native-implementation-of-UNet"], [13, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Using Ivy ResNet": [[22, "Using-Ivy-ResNet"], [23, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[22, "Prepare-the-set-of-labels"], [23, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[22, "Model-Inference-ResNet34"], [23, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[22, "Initializing-Native-Torch-ResNet34"], [23, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"], [23, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[22, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [22, "id1"], [23, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [23, "id1"]], "Model Inference ResNet50": [[22, "Model-Inference-ResNet50"], [23, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[22, "Initializing-Native-Torch-ResNet50"], [23, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[22, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"], [23, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "Transpiling Models from PyTorch to TensorFlow": [[44, "Transpiling-Models-from-PyTorch-to-TensorFlow"]], "Write a model using Ivy": [[42, "Write-a-model-using-Ivy"]], "How to use decorators": [[39, "How-to-use-decorators"]], "Graph Transpile": [[39, "Graph-Transpile"]], "Transpile \ud83d\udea7": [[39, "Transpile-\ud83d\udea7"]], "Developing a convolutional network using Ivy": [[31, "Developing-a-convolutional-network-using-Ivy"]], "Transpiling Functions from PyTorch to TensorFlow": [[43, "Transpiling-Functions-from-PyTorch-to-TensorFlow"]], "ODSC Ivy Demo": [[45, "ODSC-Ivy-Demo"]], "Ivy as a Framework": [[45, "Ivy-as-a-Framework"]], "Graph Tracer": [[45, "Graph-Tracer"]], "Accelerating XGBoost with JAX": [[27, "Accelerating-XGBoost-with-JAX"]], "Tests": [[27, "Tests"]], "Loading the Data": [[27, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[27, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[27, "JAX-backend"]], "Tensorflow backend": [[27, "Tensorflow-backend"]], "PyTorch backend": [[27, "PyTorch-backend"]], "More exhaustive example": [[27, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[27, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[27, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[27, "Comparison-of-Metrics"]], "Using TensorFlow Models in your PyTorch Projects": [[9, "Using-TensorFlow-Models-in-your-PyTorch-Projects"], [8, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Transpiling a TensorFlow model to PyTorch": [[9, "Transpiling-a-TensorFlow-model-to-PyTorch"], [8, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "blackman_window": [[327, "blackman-window"]], "remainder": [[297, "remainder"]], "trapz": [[307, "trapz"]], "subtract": [[304, "subtract"]], "square": [[303, "square"]], "sin": [[300, "sin"]], "reciprocal": [[296, "reciprocal"]], "logical_or": [[284, "logical-or"]], "minimum": [[287, "minimum"]], "multiply": [[288, "multiply"]], "silu": [[321, "silu"]], "celu": [[310, "celu"]], "tanh": [[306, "tanh"]], "sqrt": [[302, "sqrt"]], "trunc": [[308, "trunc"]], "rad2deg": [[294, "rad2deg"]], "threshold": [[325, "threshold"]], "tan": [[305, "tan"]], "elu": [[311, "elu"]], "sinh": [[301, "sinh"]], "thresholded_relu": [[326, "thresholded-relu"]], "real": [[295, "real"]], "softshrink": [[322, "softshrink"]], "logical_and": [[282, "logical-and"]], "hardshrink": [[312, "hardshrink"]], "nan_to_num": [[289, "nan-to-num"]], "not_equal": [[291, "not-equal"]], "eye_like": [[328, "eye-like"]], "tanhshrink": [[324, "tanhshrink"]], "negative": [[290, "negative"]], "logical_not": [[283, "logical-not"]], "logical_xor": [[285, "logical-xor"]], "selu": [[320, "selu"]], "pow": [[293, "pow"]], "round": [[298, "round"]], "maximum": [[286, "maximum"]], "stanh": [[323, "stanh"]], "hardtanh": [[314, "hardtanh"]], "hardsilu": [[313, "hardsilu"]], "scaled_tanh": [[319, "scaled-tanh"]], "logit": [[315, "logit"]], "logsigmoid": [[316, "logsigmoid"]], "relu6": [[318, "relu6"]], "positive": [[292, "positive"]], "prelu": [[317, "prelu"]], "sign": [[299, "sign"]], "trunc_divide": [[309, "trunc-divide"]], "set_default_uint_dtype": [[200, "set-default-uint-dtype"]], "set_split_factor": [[226, "set-split-factor"]], "function_supported_devices": [[214, "function-supported-devices"]], "as_native_dev": [[209, "as-native-dev"]], "dev_util": [[213, "dev-util"]], "unset_default_float_dtype": [[204, "unset-default-float-dtype"]], "promote_types": [[193, "promote-types"]], "unset_default_uint_dtype": [[206, "unset-default-uint-dtype"]], "dev": [[212, "dev"]], "set_default_complex_dtype": [[196, "set-default-complex-dtype"]], "as_ivy_dev": [[208, "as-ivy-dev"]], "unset_default_complex_dtype": [[202, "unset-default-complex-dtype"]], "split_factor": [[227, "split-factor"]], "is_hashable_dtype": [[189, "is-hashable-dtype"]], "result_type": [[195, "result-type"]], "clear_cached_mem_on_dev": [[210, "clear-cached-mem-on-dev"]], "is_uint_dtype": [[192, "is-uint-dtype"]], "tpu_is_available": [[231, "tpu-is-available"]], "set_default_device": [[224, "set-default-device"]], "unset_default_dtype": [[203, "unset-default-dtype"]], "valid_dtype": [[207, "valid-dtype"]], "set_default_dtype": [[197, "set-default-dtype"]], "print_all_ivy_arrays_on_dev": [[223, "print-all-ivy-arrays-on-dev"]], "unset_default_int_dtype": [[205, "unset-default-int-dtype"]], "default_device": [[211, "default-device"]], "handle_soft_device_variable": [[218, "handle-soft-device-variable"]], "num_gpus": [[220, "num-gpus"]], "is_float_dtype": [[188, "is-float-dtype"]], "set_default_int_dtype": [[199, "set-default-int-dtype"]], "split_func_call": [[228, "split-func-call"]], "to_device": [[229, "to-device"]], "set_default_float_dtype": [[198, "set-default-float-dtype"]], "num_cpu_cores": [[219, "num-cpu-cores"]], "is_int_dtype": [[190, "is-int-dtype"]], "promote_types_of_inputs": [[194, "promote-types-of-inputs"]], "gpu_is_available": [[217, "gpu-is-available"]], "set_soft_device_mode": [[225, "set-soft-device-mode"]], "unset_soft_device_mode": [[233, "unset-soft-device-mode"]], "type_promote_arrays": [[201, "type-promote-arrays"]], "unset_default_device": [[232, "unset-default-device"]], "percent_used_mem_on_dev": [[222, "percent-used-mem-on-dev"]], "function_unsupported_devices": [[215, "function-unsupported-devices"]], "get_all_ivy_arrays_on_dev": [[216, "get-all-ivy-arrays-on-dev"]], "total_mem_on_dev": [[230, "total-mem-on-dev"]], "used_mem_on_dev": [[234, "used-mem-on-dev"]], "num_ivy_arrays_on_dev": [[221, "num-ivy-arrays-on-dev"]], "is_native_dtype": [[191, "is-native-dtype"]], "dct": [[412, "dct"]], "area_interpolate": [[408, "area-interpolate"]], "reduce": [[378, "reduce"]], "xlogy": [[376, "xlogy"]], "vjp": [[381, "vjp"]], "fft": [[418, "fft"]], "embedding": [[417, "embedding"]], "get_interpolate_kernel": [[421, "get-interpolate-kernel"]], "adaptive_avg_pool2d": [[405, "adaptive-avg-pool2d"]], "fft2": [[419, "fft2"]], "dropout2d": [[415, "dropout2d"]], "dropout3d": [[416, "dropout3d"]], "zeta": [[377, "zeta"]], "adaptive_max_pool2d": [[406, "adaptive-max-pool2d"]], "idct": [[422, "idct"]], "avg_pool2d": [[410, "avg-pool2d"]], "dropout1d": [[414, "dropout1d"]], "dft": [[413, "dft"]], "adaptive_avg_pool1d": [[404, "adaptive-avg-pool1d"]], "avg_pool3d": [[411, "avg-pool3d"]], "adaptive_max_pool3d": [[407, "adaptive-max-pool3d"]], "bind_custom_gradient_function": [[379, "bind-custom-gradient-function"]], "Sparse array": [[401, "sparse-array"]], "avg_pool1d": [[409, "avg-pool1d"]], "generate_einsum_equation": [[420, "generate-einsum-equation"]], "jvp": [[380, "jvp"]], "bitwise_invert": [[246, "bitwise-invert"]], "equal": [[256, "equal"]], "atan2": [[243, "atan2"]], "floor_divide": [[262, "floor-divide"]], "less_equal": [[275, "less-equal"]], "less": [[274, "less"]], "ceil": [[251, "ceil"]], "erf": [[257, "erf"]], "acos": [[236, "acos"]], "bitwise_and": [[245, "bitwise-and"]], "acosh": [[237, "acosh"]], "deg2rad": [[254, "deg2rad"]], "cosh": [[253, "cosh"]], "isreal": [[272, "isreal"]], "divide": [[255, "divide"]], "log2": [[279, "log2"]], "greater_equal": [[267, "greater-equal"]], "bitwise_or": [[248, "bitwise-or"]], "fmin": [[263, "fmin"]], "atan": [[242, "atan"]], "atanh": [[244, "atanh"]], "add": [[238, "add"]], "lcm": [[273, "lcm"]], "bitwise_right_shift": [[249, "bitwise-right-shift"]], "cos": [[252, "cos"]], "gcd": [[265, "gcd"]], "exp2": [[259, "exp2"]], "log10": [[277, "log10"]], "bitwise_xor": [[250, "bitwise-xor"]], "abs": [[235, "abs"]], "isfinite": [[269, "isfinite"]], "isnan": [[271, "isnan"]], "log": [[276, "log"]], "angle": [[239, "angle"]], "imag": [[268, "imag"]], "exp": [[258, "exp"]], "isinf": [[270, "isinf"]], "fmod": [[264, "fmod"]], "bitwise_left_shift": [[247, "bitwise-left-shift"]], "expm1": [[260, "expm1"]], "asin": [[240, "asin"]], "floor": [[261, "floor"]], "logaddexp": [[280, "logaddexp"]], "log1p": [[278, "log1p"]], "logaddexp2": [[281, "logaddexp2"]], "asinh": [[241, "asinh"]], "greater": [[266, "greater"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[65, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[65, "module-ivy.data_classes.array.activations"], [66, "module-ivy.data_classes.array.conversions"], [67, "module-ivy.data_classes.array.creation"], [68, "module-ivy.data_classes.array.data_type"], [69, "module-ivy.data_classes.array.device"], [70, "module-ivy.data_classes.array.elementwise"], [71, "module-ivy.data_classes.array.experimental"], [71, "module-ivy.data_classes.array.experimental.activations"], [71, "module-ivy.data_classes.array.experimental.conversions"], [71, "module-ivy.data_classes.array.experimental.creation"], [71, "module-ivy.data_classes.array.experimental.data_type"], [71, "module-ivy.data_classes.array.experimental.device"], [71, "module-ivy.data_classes.array.experimental.elementwise"], [71, "module-ivy.data_classes.array.experimental.general"], [71, "module-ivy.data_classes.array.experimental.gradients"], [71, "module-ivy.data_classes.array.experimental.image"], [71, "module-ivy.data_classes.array.experimental.layers"], [71, "module-ivy.data_classes.array.experimental.linear_algebra"], [71, "module-ivy.data_classes.array.experimental.losses"], [71, "module-ivy.data_classes.array.experimental.manipulation"], [71, "module-ivy.data_classes.array.experimental.norms"], [71, "module-ivy.data_classes.array.experimental.random"], [71, "module-ivy.data_classes.array.experimental.searching"], [71, "module-ivy.data_classes.array.experimental.set"], [71, "module-ivy.data_classes.array.experimental.sorting"], [71, "module-ivy.data_classes.array.experimental.statistical"], [71, "module-ivy.data_classes.array.experimental.utility"], [72, "module-ivy.data_classes.array.general"], [73, "module-ivy.data_classes.array.gradients"], [74, "module-ivy.data_classes.array.image"], [75, "module-ivy.data_classes.array.layers"], [76, "module-ivy.data_classes.array.linear_algebra"], [77, "module-ivy.data_classes.array.losses"], [78, "module-ivy.data_classes.array.manipulation"], [79, "module-ivy.data_classes.array.norms"], [80, "module-ivy.data_classes.array.random"], [81, "module-ivy.data_classes.array.searching"], [82, "module-ivy.data_classes.array.set"], [83, "module-ivy.data_classes.array.sorting"], [84, "module-ivy.data_classes.array.statistical"], [85, "module-ivy.data_classes.array.utility"], [86, "module-ivy.data_classes.array.wrapping"], [87, "module-ivy.data_classes.container.activations"], [88, "module-ivy.data_classes.container.base"], [89, "module-ivy.data_classes.container.conversions"], [90, "module-ivy.data_classes.container.creation"], [91, "module-ivy.data_classes.container.data_type"], [92, "module-ivy.data_classes.container.device"], [93, "module-ivy.data_classes.container.elementwise"], [94, "module-ivy.data_classes.container.experimental"], [94, "module-ivy.data_classes.container.experimental.activations"], [94, "module-ivy.data_classes.container.experimental.conversions"], [94, "module-ivy.data_classes.container.experimental.creation"], [94, "module-ivy.data_classes.container.experimental.data_type"], [94, "module-ivy.data_classes.container.experimental.device"], [94, "module-ivy.data_classes.container.experimental.elementwise"], [94, "module-ivy.data_classes.container.experimental.general"], [94, "module-ivy.data_classes.container.experimental.gradients"], [94, "module-ivy.data_classes.container.experimental.image"], [94, "module-ivy.data_classes.container.experimental.layers"], [94, "module-ivy.data_classes.container.experimental.linear_algebra"], [94, "module-ivy.data_classes.container.experimental.losses"], [94, "module-ivy.data_classes.container.experimental.manipulation"], [94, "module-ivy.data_classes.container.experimental.norms"], [94, "module-ivy.data_classes.container.experimental.random"], [94, "module-ivy.data_classes.container.experimental.searching"], [94, "module-ivy.data_classes.container.experimental.set"], [94, "module-ivy.data_classes.container.experimental.sorting"], [94, "module-ivy.data_classes.container.experimental.statistical"], [94, "module-ivy.data_classes.container.experimental.utility"], [95, "module-ivy.data_classes.container.general"], [96, "module-ivy.data_classes.container.gradients"], [97, "module-ivy.data_classes.container.image"], [98, "module-ivy.data_classes.container.layers"], [99, "module-ivy.data_classes.container.linear_algebra"], [100, "module-ivy.data_classes.container.losses"], [101, "module-ivy.data_classes.container.manipulation"], [102, "module-ivy.data_classes.container.norms"], [103, "module-ivy.data_classes.container.random"], [104, "module-ivy.data_classes.container.searching"], [105, "module-ivy.data_classes.container.set"], [106, "module-ivy.data_classes.container.sorting"], [107, "module-ivy.data_classes.container.statistical"], [108, "module-ivy.data_classes.container.utility"], [109, "module-ivy.data_classes.container.wrapping"], [110, "module-ivy.data_classes.factorized_tensor.base"], [111, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [112, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [113, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [114, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [115, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [116, "module-ivy.data_classes.array.array"], [117, "module-ivy.data_classes.container.container"], [119, "module-ivy.data_classes.nested_array.nested_array"], [120, "module-ivy.data_classes.nested_array.base"], [121, "module-ivy.data_classes.nested_array.elementwise"], [382, "module-ivy.functional.ivy.experimental.activations"], [383, "module-ivy.functional.ivy.experimental.constants"], [384, "module-ivy.functional.ivy.experimental.creation"], [385, "module-ivy.functional.ivy.experimental.data_type"], [386, "module-ivy.functional.ivy.experimental.device"], [387, "module-ivy.functional.ivy.experimental.elementwise"], [388, "module-ivy.functional.ivy.experimental.general"], [389, "module-ivy.functional.ivy.experimental.gradients"], [390, "module-ivy.functional.ivy.experimental.layers"], [391, "module-ivy.functional.ivy.experimental.linear_algebra"], [392, "module-ivy.functional.ivy.experimental.losses"], [393, "module-ivy.functional.ivy.experimental.manipulation"], [394, "module-ivy.functional.ivy.experimental.meta"], [395, "module-ivy.functional.ivy.experimental.nest"], [396, "module-ivy.functional.ivy.experimental.norms"], [397, "module-ivy.functional.ivy.experimental.random"], [398, "module-ivy.functional.ivy.experimental.searching"], [399, "module-ivy.functional.ivy.experimental.set"], [400, "module-ivy.functional.ivy.experimental.sorting"], [401, "module-ivy.functional.ivy.experimental.sparse_array"], [402, "module-ivy.functional.ivy.experimental.statistical"], [403, "module-ivy.functional.ivy.experimental.utility"], [643, "module-ivy.functional.ivy.activations"], [644, "module-ivy.functional.ivy.constants"], [645, "module-ivy.functional.ivy.control_flow_ops"], [646, "module-ivy.functional.ivy.creation"], [647, "module-ivy.functional.ivy.data_type"], [648, "module-ivy.functional.ivy.device"], [649, "module-ivy.functional.ivy.elementwise"], [650, "module-ivy.functional.ivy.experimental"], [651, "module-ivy.functional.ivy.general"], [652, "module-ivy.functional.ivy.gradients"], [653, "module-ivy.functional.ivy.layers"], [654, "module-ivy.functional.ivy.linear_algebra"], [655, "module-ivy.functional.ivy.losses"], [656, "module-ivy.functional.ivy.manipulation"], [657, "module-ivy.functional.ivy.meta"], [658, "module-ivy.functional.ivy.nest"], [659, "module-ivy.functional.ivy.norms"], [660, "module-ivy.functional.ivy.random"], [661, "module-ivy.functional.ivy.searching"], [662, "module-ivy.functional.ivy.set"], [663, "module-ivy.functional.ivy.sorting"], [664, "module-ivy.functional.ivy.statistical"], [665, "module-ivy.functional.ivy.utility"], [791, "module-ivy_tests.test_ivy.helpers.assertions"], [792, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [793, "module-ivy_tests.test_ivy.helpers.function_testing"], [794, "module-ivy_tests.test_ivy.helpers.globals"], [795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [800, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [801, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [802, "module-ivy_tests.test_ivy.helpers.structs"], [803, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [804, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [808, "module-ivy.stateful.activations"], [809, "module-ivy.stateful.converters"], [810, "module-ivy.stateful.helpers"], [811, "module-ivy.stateful.initializers"], [812, "module-ivy.stateful.layers"], [813, "module-ivy.stateful.losses"], [814, "module-ivy.stateful.module"], [815, "module-ivy.stateful.norms"], [816, "module-ivy.stateful.optimizers"], [817, "module-ivy.stateful.sequential"], [818, "module-ivy.stateful.utilities"], [819, "module-ivy.utils.assertions"], [820, "module-ivy.utils.backend"], [821, "module-ivy.utils.backend.ast_helpers"], [822, "module-ivy.utils.backend.handler"], [823, "module-ivy.utils.backend.sub_backend_handler"], [824, "module-ivy.utils.binaries"], [825, "module-ivy.utils.decorator_utils"], [826, "module-ivy.utils.dynamic_import"], [827, "module-ivy.utils.einsum_parser"], [828, "module-ivy.utils.einsum_path_helpers"], [829, "module-ivy.utils.exceptions"], [830, "module-ivy.utils.inspection"], [831, "module-ivy.utils.logging"], [832, "module-ivy.utils.profiler"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[65, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_data_to_new_backend() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions._data_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[66, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[66, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[67, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[67, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[68, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[68, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[69, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[69, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[69, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[69, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[69, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[70, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[70, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[71, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[71, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[71, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[71, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[71, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[71, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[71, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[71, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[71, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[71, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[71, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[71, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[71, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[71, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[71, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[71, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[71, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[71, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[71, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[71, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[71, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[71, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[71, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[71, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[71, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[71, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[71, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[71, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[71, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[71, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[71, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[71, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[71, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[71, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[71, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[71, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[71, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[71, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[71, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[71, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[71, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[71, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[71, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[71, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[71, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[71, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[71, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[71, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[71, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[71, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[71, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[71, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[71, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[71, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[71, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[71, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[72, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[72, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[73, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[73, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[74, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[74, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[74, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[75, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[75, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[76, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[76, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[77, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[77, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[77, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[77, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[77, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[77, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[78, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[78, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[79, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[79, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[79, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[79, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[80, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[80, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[80, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[80, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[80, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[80, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[80, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[80, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[81, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[81, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[82, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[82, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[82, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[82, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[82, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[82, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[82, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[83, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[83, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[84, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[84, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[85, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[85, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[85, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[85, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[85, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[86, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[86, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[86, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[87, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[87, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[88, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[88, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[88, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[88, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[88, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[88, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[88, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[88, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[89, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[89, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[90, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[90, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[91, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[91, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[92, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[92, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[92, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[92, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[92, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[92, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[92, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[93, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[93, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[94, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[94, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[94, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[94, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[94, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[94, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[94, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[94, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[94, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[94, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[94, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[94, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[94, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[94, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[94, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[94, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[94, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[94, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[94, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[94, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[94, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[94, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[94, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[94, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[94, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[94, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[94, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[94, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[94, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[94, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[94, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[94, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[94, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[94, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[94, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[94, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[94, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[94, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[94, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[94, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[94, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[94, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[94, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[94, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[94, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[94, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[94, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[94, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[94, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[94, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[94, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[94, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[94, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[94, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[94, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[94, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[94, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[95, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[95, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[96, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[96, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[97, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[97, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[97, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[98, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[98, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[99, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[99, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[100, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[100, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[101, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[101, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[102, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[102, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[102, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[102, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[103, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[103, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[103, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[104, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[104, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[105, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[105, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[105, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[105, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[105, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[105, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[105, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[105, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[105, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[105, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[105, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[106, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[106, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[107, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[107, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[108, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[108, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[109, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[109, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[109, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[110, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[110, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[111, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[111, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[112, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[112, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[113, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[113, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[114, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[114, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[115, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[115, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[116, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[116, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[116, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[116, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[117, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[117, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[117, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[119, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[119, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[119, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[119, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[119, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[120, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[120, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[121, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[121, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[121, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[121, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[124, "ivy.gelu"], [643, "ivy.gelu"]], "gelu() (ivy.array method)": [[124, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[124, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[125, "ivy.hardswish"], [643, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[125, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[125, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[126, "ivy.leaky_relu"], [643, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[126, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[126, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[127, "ivy.log_softmax"], [643, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[127, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[127, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[128, "ivy.mish"], [643, "ivy.mish"]], "mish() (ivy.array method)": [[128, "ivy.Array.mish"]], "mish() (ivy.container method)": [[128, "ivy.Container.mish"]], "relu() (in module ivy)": [[129, "ivy.relu"], [643, "ivy.relu"]], "relu() (ivy.array method)": [[129, "ivy.Array.relu"]], "relu() (ivy.container method)": [[129, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[130, "ivy.sigmoid"], [643, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[130, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[130, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[131, "ivy.softmax"], [643, "ivy.softmax"]], "softmax() (ivy.array method)": [[131, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[131, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[132, "ivy.softplus"], [643, "ivy.softplus"]], "softplus() (ivy.array method)": [[132, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[132, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[133, "ivy.softsign"], [643, "ivy.softsign"]], "cmp_is() (in module ivy)": [[134, "ivy.cmp_is"], [645, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[135, "ivy.cmp_isnot"], [645, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[136, "ivy.for_loop"], [645, "ivy.for_loop"]], "if_else() (in module ivy)": [[137, "ivy.if_else"], [645, "ivy.if_else"]], "try_except() (in module ivy)": [[138, "ivy.try_except"], [645, "ivy.try_except"]], "while_loop() (in module ivy)": [[139, "ivy.while_loop"], [645, "ivy.while_loop"]], "arange() (in module ivy)": [[140, "ivy.arange"], [646, "ivy.arange"]], "array() (in module ivy)": [[141, "ivy.array"], [646, "ivy.array"]], "asarray() (in module ivy)": [[142, "ivy.asarray"], [646, "ivy.asarray"]], "asarray() (ivy.array method)": [[142, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[142, "ivy.Container.asarray"]], "complex() (in module ivy)": [[143, "ivy.complex"], [646, "ivy.complex"]], "copy_array() (in module ivy)": [[144, "ivy.copy_array"], [646, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[144, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[144, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[145, "ivy.empty"], [646, "ivy.empty"]], "empty_like() (in module ivy)": [[146, "ivy.empty_like"], [646, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[146, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[146, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[147, "ivy.eye"], [646, "ivy.eye"]], "from_dlpack() (in module ivy)": [[148, "ivy.from_dlpack"], [646, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[148, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[148, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[149, "ivy.frombuffer"], [646, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[149, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[150, "ivy.full"], [646, "ivy.full"]], "full_like() (in module ivy)": [[151, "ivy.full_like"], [646, "ivy.full_like"]], "full_like() (ivy.array method)": [[151, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[151, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[152, "ivy.linspace"], [646, "ivy.linspace"]], "linspace() (ivy.array method)": [[152, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[152, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[153, "ivy.logspace"], [646, "ivy.logspace"]], "logspace() (ivy.array method)": [[153, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[153, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[154, "ivy.meshgrid"], [646, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[154, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[154, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[155, "ivy.native_array"], [646, "ivy.native_array"]], "native_array() (ivy.array method)": [[155, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[155, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[156, "ivy.one_hot"], [646, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[156, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[156, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[157, "ivy.ones"], [646, "ivy.ones"]], "ones_like() (in module ivy)": [[158, "ivy.ones_like"], [646, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[158, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[158, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[159, "ivy.to_dlpack"], [646, "ivy.to_dlpack"]], "tril() (in module ivy)": [[160, "ivy.tril"], [646, "ivy.tril"]], "tril() (ivy.array method)": [[160, "ivy.Array.tril"]], "tril() (ivy.container method)": [[160, "ivy.Container.tril"]], "triu() (in module ivy)": [[161, "ivy.triu"], [646, "ivy.triu"]], "triu() (ivy.array method)": [[161, "ivy.Array.triu"]], "triu() (ivy.container method)": [[161, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[162, "ivy.triu_indices"], [646, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[162, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[163, "ivy.zeros"], [646, "ivy.zeros"]], "zeros_like() (in module ivy)": [[164, "ivy.zeros_like"], [646, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[164, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[164, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[165, "ivy.as_ivy_dtype"], [647, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[166, "ivy.as_native_dtype"], [647, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[167, "ivy.astype"], [647, "ivy.astype"]], "astype() (ivy.array method)": [[167, "ivy.Array.astype"]], "astype() (ivy.container method)": [[167, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[168, "ivy.broadcast_arrays"], [647, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[168, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[168, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[169, "ivy.broadcast_to"], [647, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[169, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[169, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[170, "ivy.can_cast"], [647, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[170, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[170, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[171, "ivy.check_float"], [647, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[172, "ivy.closest_valid_dtype"], [647, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[173, "ivy.default_complex_dtype"], [647, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[174, "ivy.default_dtype"], [647, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[175, "ivy.default_float_dtype"], [647, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[176, "ivy.default_int_dtype"], [647, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[177, "ivy.default_uint_dtype"], [647, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[178, "ivy.dtype"], [647, "ivy.dtype"]], "dtype() (ivy.array method)": [[178, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[178, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[179, "ivy.dtype_bits"], [647, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[180, "ivy.finfo"], [647, "ivy.finfo"]], "finfo() (ivy.array method)": [[180, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[180, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[181, "ivy.function_supported_dtypes"], [647, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[182, "ivy.function_unsupported_dtypes"], [647, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[183, "ivy.iinfo"], [647, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[183, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[183, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[184, "ivy.infer_default_dtype"], [647, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[185, "ivy.invalid_dtype"], [647, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[186, "ivy.is_bool_dtype"], [647, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[186, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[186, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[187, "ivy.is_complex_dtype"], [647, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[187, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[188, "ivy.is_float_dtype"], [647, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[188, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[188, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[189, "ivy.is_hashable_dtype"], [647, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[190, "ivy.is_int_dtype"], [647, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[190, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[190, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[191, "ivy.is_native_dtype"], [647, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[192, "ivy.is_uint_dtype"], [647, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[192, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[192, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[193, "ivy.promote_types"], [647, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[194, "ivy.promote_types_of_inputs"], [647, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[195, "ivy.result_type"], [647, "ivy.result_type"]], "result_type() (ivy.array method)": [[195, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[195, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[196, "ivy.set_default_complex_dtype"], [647, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[197, "ivy.set_default_dtype"], [647, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[198, "ivy.set_default_float_dtype"], [647, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[199, "ivy.set_default_int_dtype"], [647, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[200, "ivy.set_default_uint_dtype"], [647, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[201, "ivy.type_promote_arrays"], [647, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[202, "ivy.unset_default_complex_dtype"], [647, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[203, "ivy.unset_default_dtype"], [647, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[204, "ivy.unset_default_float_dtype"], [647, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[205, "ivy.unset_default_int_dtype"], [647, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[206, "ivy.unset_default_uint_dtype"], [647, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[207, "ivy.valid_dtype"], [647, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[208, "ivy.as_ivy_dev"], [648, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[209, "ivy.as_native_dev"], [648, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[210, "ivy.clear_cached_mem_on_dev"], [648, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[211, "ivy.default_device"], [648, "ivy.default_device"]], "dev() (in module ivy)": [[212, "ivy.dev"], [648, "ivy.dev"]], "dev() (ivy.array method)": [[212, "ivy.Array.dev"]], "dev() (ivy.container method)": [[212, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[213, "ivy.dev_util"], [648, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[214, "ivy.function_supported_devices"], [648, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[215, "ivy.function_unsupported_devices"], [648, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[216, "ivy.get_all_ivy_arrays_on_dev"], [648, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[217, "ivy.gpu_is_available"], [648, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[218, "ivy.handle_soft_device_variable"], [648, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[219, "ivy.num_cpu_cores"], [648, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[220, "ivy.num_gpus"], [648, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[221, "ivy.num_ivy_arrays_on_dev"], [648, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[222, "ivy.percent_used_mem_on_dev"], [648, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[223, "ivy.print_all_ivy_arrays_on_dev"], [648, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[224, "ivy.set_default_device"], [648, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[225, "ivy.set_soft_device_mode"], [648, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[226, "ivy.set_split_factor"], [648, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[227, "ivy.split_factor"], [648, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[228, "ivy.split_func_call"], [648, "ivy.split_func_call"]], "to_device() (in module ivy)": [[229, "ivy.to_device"], [648, "ivy.to_device"]], "to_device() (ivy.array method)": [[229, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[229, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[230, "ivy.total_mem_on_dev"], [648, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[231, "ivy.tpu_is_available"], [648, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[232, "ivy.unset_default_device"], [648, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[233, "ivy.unset_soft_device_mode"], [648, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[234, "ivy.used_mem_on_dev"], [648, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[235, "ivy.abs"], [649, "ivy.abs"]], "abs() (ivy.array method)": [[235, "ivy.Array.abs"]], "abs() (ivy.container method)": [[235, "ivy.Container.abs"]], "acos() (in module ivy)": [[236, "ivy.acos"], [649, "ivy.acos"]], "acos() (ivy.array method)": [[236, "ivy.Array.acos"]], "acos() (ivy.container method)": [[236, "ivy.Container.acos"]], "acosh() (in module ivy)": [[237, "ivy.acosh"], [649, "ivy.acosh"]], "acosh() (ivy.array method)": [[237, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[237, "ivy.Container.acosh"]], "add() (in module ivy)": [[238, "ivy.add"], [649, "ivy.add"]], "add() (ivy.array method)": [[238, "ivy.Array.add"]], "add() (ivy.container method)": [[238, "ivy.Container.add"]], "angle() (in module ivy)": [[239, "ivy.angle"], [649, "ivy.angle"]], "angle() (ivy.array method)": [[239, "ivy.Array.angle"]], "angle() (ivy.container method)": [[239, "ivy.Container.angle"]], "asin() (in module ivy)": [[240, "ivy.asin"], [649, "ivy.asin"]], "asin() (ivy.array method)": [[240, "ivy.Array.asin"]], "asin() (ivy.container method)": [[240, "ivy.Container.asin"]], "asinh() (in module ivy)": [[241, "ivy.asinh"], [649, "ivy.asinh"]], "asinh() (ivy.array method)": [[241, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[241, "ivy.Container.asinh"]], "atan() (in module ivy)": [[242, "ivy.atan"], [649, "ivy.atan"]], "atan() (ivy.array method)": [[242, "ivy.Array.atan"]], "atan() (ivy.container method)": [[242, "ivy.Container.atan"]], "atan2() (in module ivy)": [[243, "ivy.atan2"], [649, "ivy.atan2"]], "atan2() (ivy.array method)": [[243, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[243, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[244, "ivy.atanh"], [649, "ivy.atanh"]], "atanh() (ivy.array method)": [[244, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[244, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[245, "ivy.bitwise_and"], [649, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[245, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[245, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[246, "ivy.bitwise_invert"], [649, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[246, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[246, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[247, "ivy.bitwise_left_shift"], [649, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[247, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[247, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[248, "ivy.bitwise_or"], [649, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[248, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[248, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[249, "ivy.bitwise_right_shift"], [649, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[249, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[249, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[250, "ivy.bitwise_xor"], [649, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[250, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[250, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[251, "ivy.ceil"], [649, "ivy.ceil"]], "ceil() (ivy.array method)": [[251, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[251, "ivy.Container.ceil"]], "cos() (in module ivy)": [[252, "ivy.cos"], [649, "ivy.cos"]], "cos() (ivy.array method)": [[252, "ivy.Array.cos"]], "cos() (ivy.container method)": [[252, "ivy.Container.cos"]], "cosh() (in module ivy)": [[253, "ivy.cosh"], [649, "ivy.cosh"]], "cosh() (ivy.array method)": [[253, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[253, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[254, "ivy.deg2rad"], [649, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[254, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[254, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[255, "ivy.divide"], [649, "ivy.divide"]], "divide() (ivy.array method)": [[255, "ivy.Array.divide"]], "divide() (ivy.container method)": [[255, "ivy.Container.divide"]], "equal() (in module ivy)": [[256, "ivy.equal"], [649, "ivy.equal"]], "equal() (ivy.array method)": [[256, "ivy.Array.equal"]], "equal() (ivy.container method)": [[256, "ivy.Container.equal"]], "erf() (in module ivy)": [[257, "ivy.erf"], [649, "ivy.erf"]], "erf() (ivy.array method)": [[257, "ivy.Array.erf"]], "erf() (ivy.container method)": [[257, "ivy.Container.erf"]], "exp() (in module ivy)": [[258, "ivy.exp"], [649, "ivy.exp"]], "exp() (ivy.array method)": [[258, "ivy.Array.exp"]], "exp() (ivy.container method)": [[258, "ivy.Container.exp"]], "exp2() (in module ivy)": [[259, "ivy.exp2"], [649, "ivy.exp2"]], "exp2() (ivy.array method)": [[259, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[259, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[260, "ivy.expm1"], [649, "ivy.expm1"]], "expm1() (ivy.array method)": [[260, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[260, "ivy.Container.expm1"]], "floor() (in module ivy)": [[261, "ivy.floor"], [649, "ivy.floor"]], "floor() (ivy.array method)": [[261, "ivy.Array.floor"]], "floor() (ivy.container method)": [[261, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[262, "ivy.floor_divide"], [649, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[262, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[262, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[263, "ivy.fmin"], [649, "ivy.fmin"]], "fmin() (ivy.array method)": [[263, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[263, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[264, "ivy.fmod"], [649, "ivy.fmod"]], "fmod() (ivy.array method)": [[264, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[264, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[265, "ivy.gcd"], [649, "ivy.gcd"]], "gcd() (ivy.array method)": [[265, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[265, "ivy.Container.gcd"]], "greater() (in module ivy)": [[266, "ivy.greater"], [649, "ivy.greater"]], "greater() (ivy.array method)": [[266, "ivy.Array.greater"]], "greater() (ivy.container method)": [[266, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[267, "ivy.greater_equal"], [649, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[267, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[267, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[268, "ivy.imag"], [649, "ivy.imag"]], "imag() (ivy.array method)": [[268, "ivy.Array.imag"]], "imag() (ivy.container method)": [[268, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[269, "ivy.isfinite"], [649, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[269, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[269, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[270, "ivy.isinf"], [649, "ivy.isinf"]], "isinf() (ivy.array method)": [[270, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[270, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[271, "ivy.isnan"], [649, "ivy.isnan"]], "isnan() (ivy.array method)": [[271, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[271, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[272, "ivy.isreal"], [649, "ivy.isreal"]], "isreal() (ivy.array method)": [[272, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[272, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[273, "ivy.lcm"], [649, "ivy.lcm"]], "lcm() (ivy.array method)": [[273, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[273, "ivy.Container.lcm"]], "less() (in module ivy)": [[274, "ivy.less"], [649, "ivy.less"]], "less() (ivy.array method)": [[274, "ivy.Array.less"]], "less() (ivy.container method)": [[274, "ivy.Container.less"]], "less_equal() (in module ivy)": [[275, "ivy.less_equal"], [649, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[275, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[275, "ivy.Container.less_equal"]], "log() (in module ivy)": [[276, "ivy.log"], [649, "ivy.log"]], "log() (ivy.array method)": [[276, "ivy.Array.log"]], "log() (ivy.container method)": [[276, "ivy.Container.log"]], "log10() (in module ivy)": [[277, "ivy.log10"], [649, "ivy.log10"]], "log10() (ivy.array method)": [[277, "ivy.Array.log10"]], "log10() (ivy.container method)": [[277, "ivy.Container.log10"]], "log1p() (in module ivy)": [[278, "ivy.log1p"], [649, "ivy.log1p"]], "log1p() (ivy.array method)": [[278, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[278, "ivy.Container.log1p"]], "log2() (in module ivy)": [[279, "ivy.log2"], [649, "ivy.log2"]], "log2() (ivy.array method)": [[279, "ivy.Array.log2"]], "log2() (ivy.container method)": [[279, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[280, "ivy.logaddexp"], [649, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[280, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[280, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[281, "ivy.logaddexp2"], [649, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[281, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[281, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[282, "ivy.logical_and"], [649, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[282, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[282, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[283, "ivy.logical_not"], [649, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[283, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[283, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[284, "ivy.logical_or"], [649, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[284, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[284, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[285, "ivy.logical_xor"], [649, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[285, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[285, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[286, "ivy.maximum"], [649, "ivy.maximum"]], "maximum() (ivy.array method)": [[286, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[286, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[287, "ivy.minimum"], [649, "ivy.minimum"]], "minimum() (ivy.array method)": [[287, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[287, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[288, "ivy.multiply"], [649, "ivy.multiply"]], "multiply() (ivy.array method)": [[288, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[288, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[289, "ivy.nan_to_num"], [649, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[289, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[289, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[290, "ivy.negative"], [649, "ivy.negative"]], "negative() (ivy.array method)": [[290, "ivy.Array.negative"]], "negative() (ivy.container method)": [[290, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[291, "ivy.not_equal"], [649, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[291, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[291, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[292, "ivy.positive"], [649, "ivy.positive"]], "positive() (ivy.array method)": [[292, "ivy.Array.positive"]], "positive() (ivy.container method)": [[292, "ivy.Container.positive"]], "pow() (in module ivy)": [[293, "ivy.pow"], [649, "ivy.pow"]], "pow() (ivy.array method)": [[293, "ivy.Array.pow"]], "pow() (ivy.container method)": [[293, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[294, "ivy.rad2deg"], [649, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[294, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[294, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[295, "ivy.real"], [649, "ivy.real"]], "real() (ivy.array method)": [[295, "ivy.Array.real"]], "real() (ivy.container method)": [[295, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[296, "ivy.reciprocal"], [649, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[296, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[296, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[297, "ivy.remainder"], [649, "ivy.remainder"]], "remainder() (ivy.array method)": [[297, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[297, "ivy.Container.remainder"]], "round() (in module ivy)": [[298, "ivy.round"], [649, "ivy.round"]], "round() (ivy.array method)": [[298, "ivy.Array.round"]], "round() (ivy.container method)": [[298, "ivy.Container.round"]], "sign() (in module ivy)": [[299, "ivy.sign"], [649, "ivy.sign"]], "sign() (ivy.array method)": [[299, "ivy.Array.sign"]], "sign() (ivy.container method)": [[299, "ivy.Container.sign"]], "sin() (in module ivy)": [[300, "ivy.sin"], [649, "ivy.sin"]], "sin() (ivy.array method)": [[300, "ivy.Array.sin"]], "sin() (ivy.container method)": [[300, "ivy.Container.sin"]], "sinh() (in module ivy)": [[301, "ivy.sinh"], [649, "ivy.sinh"]], "sinh() (ivy.array method)": [[301, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[301, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[302, "ivy.sqrt"], [649, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[302, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[302, "ivy.Container.sqrt"]], "square() (in module ivy)": [[303, "ivy.square"], [649, "ivy.square"]], "square() (ivy.array method)": [[303, "ivy.Array.square"]], "square() (ivy.container method)": [[303, "ivy.Container.square"]], "subtract() (in module ivy)": [[304, "ivy.subtract"], [649, "ivy.subtract"]], "subtract() (ivy.array method)": [[304, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[304, "ivy.Container.subtract"]], "tan() (in module ivy)": [[305, "ivy.tan"], [649, "ivy.tan"]], "tan() (ivy.array method)": [[305, "ivy.Array.tan"]], "tan() (ivy.container method)": [[305, "ivy.Container.tan"]], "tanh() (in module ivy)": [[306, "ivy.tanh"], [649, "ivy.tanh"]], "tanh() (ivy.array method)": [[306, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[306, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[307, "ivy.trapz"], [649, "ivy.trapz"]], "trapz() (ivy.array method)": [[307, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[307, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[308, "ivy.trunc"], [649, "ivy.trunc"]], "trunc() (ivy.array method)": [[308, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[308, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[309, "ivy.trunc_divide"], [649, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[309, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[309, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[310, "ivy.celu"], [382, "ivy.celu"]], "celu() (ivy.array method)": [[310, "ivy.Array.celu"]], "celu() (ivy.container method)": [[310, "ivy.Container.celu"]], "elu() (in module ivy)": [[311, "ivy.elu"], [382, "ivy.elu"]], "elu() (ivy.array method)": [[311, "ivy.Array.elu"]], "elu() (ivy.container method)": [[311, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[312, "ivy.hardshrink"], [382, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[312, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[312, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[313, "ivy.hardsilu"], [382, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[313, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[313, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[314, "ivy.hardtanh"], [382, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[314, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[314, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[315, "ivy.logit"], [382, "ivy.logit"]], "logit() (ivy.array method)": [[315, "ivy.Array.logit"]], "logit() (ivy.container method)": [[315, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[316, "ivy.logsigmoid"], [382, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[316, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[316, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[317, "ivy.prelu"], [382, "ivy.prelu"]], "prelu() (ivy.array method)": [[317, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[317, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[318, "ivy.relu6"], [382, "ivy.relu6"]], "relu6() (ivy.array method)": [[318, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[318, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[319, "ivy.scaled_tanh"], [382, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[319, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[319, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[320, "ivy.selu"], [382, "ivy.selu"]], "selu() (ivy.array method)": [[320, "ivy.Array.selu"]], "selu() (ivy.container method)": [[320, "ivy.Container.selu"]], "silu() (in module ivy)": [[321, "ivy.silu"], [382, "ivy.silu"]], "silu() (ivy.array method)": [[321, "ivy.Array.silu"]], "silu() (ivy.container method)": [[321, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[322, "ivy.softshrink"], [382, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[322, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[322, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[323, "ivy.stanh"], [382, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[324, "ivy.tanhshrink"], [382, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[324, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[324, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[325, "ivy.threshold"], [382, "ivy.threshold"]], "threshold() (ivy.array method)": [[325, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[325, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[326, "ivy.thresholded_relu"], [382, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[326, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[326, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[327, "ivy.blackman_window"], [384, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[327, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[327, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[328, "ivy.eye_like"], [384, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[328, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[328, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[329, "ivy.hamming_window"], [384, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[329, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[330, "ivy.hann_window"], [384, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[330, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[331, "ivy.indices"], [384, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[332, "ivy.kaiser_bessel_derived_window"], [384, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[332, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[333, "ivy.kaiser_window"], [384, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[333, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[334, "ivy.mel_weight_matrix"], [384, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[334, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[334, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[335, "ivy.ndenumerate"], [384, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[336, "ivy.ndindex"], [384, "ivy.ndindex"]], "polyval() (in module ivy)": [[337, "ivy.polyval"], [384, "ivy.polyval"]], "polyval() (ivy.container method)": [[337, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[338, "ivy.random_cp"], [384, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[339, "ivy.random_parafac2"], [384, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[340, "ivy.random_tr"], [384, "ivy.random_tr"]], "random_tt() (in module ivy)": [[341, "ivy.random_tt"], [384, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[342, "ivy.random_tucker"], [384, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[343, "ivy.tril_indices"], [384, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[343, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[344, "ivy.trilu"], [384, "ivy.trilu"]], "trilu() (ivy.array method)": [[344, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[344, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[345, "ivy.unsorted_segment_mean"], [384, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[345, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[345, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[346, "ivy.unsorted_segment_min"], [384, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[346, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[346, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[347, "ivy.unsorted_segment_sum"], [384, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[347, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[347, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[348, "ivy.vorbis_window"], [384, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[348, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[349, "ivy.allclose"], [387, "ivy.allclose"]], "allclose() (ivy.array method)": [[349, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[349, "ivy.Container.allclose"]], "amax() (in module ivy)": [[350, "ivy.amax"], [387, "ivy.amax"]], "amax() (ivy.array method)": [[350, "ivy.Array.amax"]], "amax() (ivy.container method)": [[350, "ivy.Container.amax"]], "amin() (in module ivy)": [[351, "ivy.amin"], [387, "ivy.amin"]], "amin() (ivy.array method)": [[351, "ivy.Array.amin"]], "amin() (ivy.container method)": [[351, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[352, "ivy.binarizer"], [387, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[352, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[352, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[353, "ivy.conj"], [387, "ivy.conj"]], "conj() (ivy.array method)": [[353, "ivy.Array.conj"]], "conj() (ivy.container method)": [[353, "ivy.Container.conj"]], "copysign() (in module ivy)": [[354, "ivy.copysign"], [387, "ivy.copysign"]], "copysign() (ivy.array method)": [[354, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[354, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[355, "ivy.count_nonzero"], [387, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[355, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[355, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[356, "ivy.diff"], [387, "ivy.diff"]], "diff() (ivy.array method)": [[356, "ivy.Array.diff"]], "diff() (ivy.container method)": [[356, "ivy.Container.diff"]], "digamma() (in module ivy)": [[357, "ivy.digamma"], [387, "ivy.digamma"]], "digamma() (ivy.array method)": [[357, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[357, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[358, "ivy.erfc"], [387, "ivy.erfc"]], "erfc() (ivy.array method)": [[358, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[358, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[359, "ivy.erfinv"], [387, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[359, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[359, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[360, "ivy.fix"], [387, "ivy.fix"]], "fix() (ivy.array method)": [[360, "ivy.Array.fix"]], "fix() (ivy.container method)": [[360, "ivy.Container.fix"]], "float_power() (in module ivy)": [[361, "ivy.float_power"], [387, "ivy.float_power"]], "float_power() (ivy.array method)": [[361, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[361, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[362, "ivy.fmax"], [387, "ivy.fmax"]], "fmax() (ivy.array method)": [[362, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[362, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[363, "ivy.frexp"], [387, "ivy.frexp"]], "frexp() (ivy.array method)": [[363, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[363, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[364, "ivy.gradient"], [387, "ivy.gradient"]], "gradient() (ivy.array method)": [[364, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[364, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[365, "ivy.hypot"], [387, "ivy.hypot"]], "hypot() (ivy.array method)": [[365, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[365, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[366, "ivy.isclose"], [387, "ivy.isclose"]], "isclose() (ivy.array method)": [[366, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[366, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[367, "ivy.ldexp"], [387, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[367, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[367, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[368, "ivy.lerp"], [387, "ivy.lerp"]], "lerp() (ivy.array method)": [[368, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[368, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[369, "ivy.lgamma"], [387, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[369, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[369, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[370, "ivy.modf"], [387, "ivy.modf"]], "modf() (ivy.array method)": [[370, "ivy.Array.modf"]], "modf() (ivy.container method)": [[370, "ivy.Container.modf"]], "nansum() (in module ivy)": [[371, "ivy.nansum"], [387, "ivy.nansum"]], "nansum() (ivy.array method)": [[371, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[371, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[372, "ivy.nextafter"], [387, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[372, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[372, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[373, "ivy.signbit"], [387, "ivy.signbit"]], "signbit() (ivy.array method)": [[373, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[373, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[374, "ivy.sinc"], [387, "ivy.sinc"]], "sinc() (ivy.array method)": [[374, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[374, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[375, "ivy.sparsify_tensor"], [387, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[375, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[375, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[376, "ivy.xlogy"], [387, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[376, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[376, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[377, "ivy.zeta"], [387, "ivy.zeta"]], "zeta() (ivy.array method)": [[377, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[377, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[378, "ivy.reduce"], [388, "ivy.reduce"]], "reduce() (ivy.array method)": [[378, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[378, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[379, "ivy.bind_custom_gradient_function"], [389, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[380, "ivy.jvp"], [389, "ivy.jvp"]], "vjp() (in module ivy)": [[381, "ivy.vjp"], [389, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[382, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[383, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[384, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[385, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[386, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[387, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[388, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[389, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[390, "ivy.adaptive_avg_pool1d"], [404, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[390, "ivy.adaptive_avg_pool2d"], [405, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[390, "ivy.adaptive_max_pool2d"], [406, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[390, "ivy.adaptive_max_pool3d"], [407, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[390, "ivy.area_interpolate"], [408, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[390, "ivy.avg_pool1d"], [409, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[390, "ivy.avg_pool2d"], [410, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[390, "ivy.avg_pool3d"], [411, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[390, "ivy.dct"], [412, "ivy.dct"]], "dft() (in module ivy)": [[390, "ivy.dft"], [413, "ivy.dft"]], "dropout1d() (in module ivy)": [[390, "ivy.dropout1d"], [414, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[390, "ivy.dropout2d"], [415, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[390, "ivy.dropout3d"], [416, "ivy.dropout3d"]], "embedding() (in module ivy)": [[390, "ivy.embedding"], [417, "ivy.embedding"]], "fft() (in module ivy)": [[390, "ivy.fft"], [418, "ivy.fft"]], "fft2() (in module ivy)": [[390, "ivy.fft2"], [419, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[390, "ivy.generate_einsum_equation"], [420, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[390, "ivy.get_interpolate_kernel"], [421, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[390, "ivy.idct"], [422, "ivy.idct"]], "ifft() (in module ivy)": [[390, "ivy.ifft"], [423, "ivy.ifft"]], "ifftn() (in module ivy)": [[390, "ivy.ifftn"], [424, "ivy.ifftn"]], "interp() (in module ivy)": [[390, "ivy.interp"], [425, "ivy.interp"]], "interpolate() (in module ivy)": [[390, "ivy.interpolate"], [426, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[390, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[390, "ivy.max_pool1d"], [427, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[390, "ivy.max_pool2d"], [428, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[390, "ivy.max_pool3d"], [429, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[390, "ivy.max_unpool1d"], [430, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[390, "ivy.nearest_interpolate"], [431, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[390, "ivy.pool"], [432, "ivy.pool"]], "reduce_window() (in module ivy)": [[390, "ivy.reduce_window"], [433, "ivy.reduce_window"]], "rfft() (in module ivy)": [[390, "ivy.rfft"], [434, "ivy.rfft"]], "rfftn() (in module ivy)": [[390, "ivy.rfftn"], [435, "ivy.rfftn"]], "rnn() (in module ivy)": [[390, "ivy.rnn"], [436, "ivy.rnn"]], "sliding_window() (in module ivy)": [[390, "ivy.sliding_window"], [437, "ivy.sliding_window"]], "stft() (in module ivy)": [[390, "ivy.stft"], [438, "ivy.stft"]], "adjoint() (in module ivy)": [[391, "ivy.adjoint"], [439, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[391, "ivy.batched_outer"], [440, "ivy.batched_outer"]], "cond() (in module ivy)": [[391, "ivy.cond"], [441, "ivy.cond"]], "diagflat() (in module ivy)": [[391, "ivy.diagflat"], [442, "ivy.diagflat"]], "dot() (in module ivy)": [[391, "ivy.dot"], [443, "ivy.dot"]], "eig() (in module ivy)": [[391, "ivy.eig"], [444, "ivy.eig"], [654, "ivy.eig"], [689, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[391, "ivy.eigh_tridiagonal"], [445, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[391, "ivy.eigvals"], [446, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[391, "ivy.general_inner_product"], [447, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[391, "ivy.higher_order_moment"], [448, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[391, "ivy.initialize_tucker"], [449, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[391, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[391, "ivy.khatri_rao"], [450, "ivy.khatri_rao"]], "kron() (in module ivy)": [[391, "ivy.kron"], [451, "ivy.kron"]], "kronecker() (in module ivy)": [[391, "ivy.kronecker"], [452, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[391, "ivy.lu_factor"], [453, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[391, "ivy.lu_solve"], [454, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[391, "ivy.make_svd_non_negative"], [455, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[391, "ivy.matrix_exp"], [456, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[391, "ivy.mode_dot"], [457, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[391, "ivy.multi_dot"], [458, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[391, "ivy.multi_mode_dot"], [459, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[391, "ivy.partial_tucker"], [460, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[391, "ivy.solve_triangular"], [461, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[391, "ivy.svd_flip"], [462, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[391, "ivy.tensor_train"], [463, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[391, "ivy.truncated_svd"], [464, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[391, "ivy.tt_matrix_to_tensor"], [465, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[391, "ivy.tucker"], [466, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[392, "ivy.hinge_embedding_loss"], [467, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[392, "ivy.huber_loss"], [468, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[392, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[392, "ivy.kl_div"], [469, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[392, "ivy.l1_loss"], [470, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[392, "ivy.log_poisson_loss"], [471, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[392, "ivy.poisson_nll_loss"], [472, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[392, "ivy.smooth_l1_loss"], [473, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[392, "ivy.soft_margin_loss"], [474, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[393, "ivy.as_strided"], [475, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[393, "ivy.associative_scan"], [476, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[393, "ivy.atleast_1d"], [477, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[393, "ivy.atleast_2d"], [478, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[393, "ivy.atleast_3d"], [479, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[393, "ivy.broadcast_shapes"], [480, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[393, "ivy.check_scalar"], [481, "ivy.check_scalar"]], "choose() (in module ivy)": [[393, "ivy.choose"], [482, "ivy.choose"]], "column_stack() (in module ivy)": [[393, "ivy.column_stack"], [483, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[393, "ivy.concat_from_sequence"], [484, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[393, "ivy.dsplit"], [485, "ivy.dsplit"]], "dstack() (in module ivy)": [[393, "ivy.dstack"], [486, "ivy.dstack"]], "expand() (in module ivy)": [[393, "ivy.expand"], [487, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[393, "ivy.fill_diagonal"], [488, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[393, "ivy.flatten"], [489, "ivy.flatten"]], "fliplr() (in module ivy)": [[393, "ivy.fliplr"], [490, "ivy.fliplr"]], "flipud() (in module ivy)": [[393, "ivy.flipud"], [491, "ivy.flipud"]], "fold() (in module ivy)": [[393, "ivy.fold"], [492, "ivy.fold"]], "heaviside() (in module ivy)": [[393, "ivy.heaviside"], [493, "ivy.heaviside"]], "hsplit() (in module ivy)": [[393, "ivy.hsplit"], [494, "ivy.hsplit"]], "hstack() (in module ivy)": [[393, "ivy.hstack"], [495, "ivy.hstack"]], "i0() (in module ivy)": [[393, "ivy.i0"], [496, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[393, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[393, "ivy.matricize"], [497, "ivy.matricize"]], "moveaxis() (in module ivy)": [[393, "ivy.moveaxis"], [498, "ivy.moveaxis"]], "pad() (in module ivy)": [[393, "ivy.pad"], [499, "ivy.pad"]], "pad_sequence() (in module ivy)": [[393, "ivy.pad_sequence"], [500, "ivy.pad_sequence"]], "partial_fold() (in module ivy)": [[393, "ivy.partial_fold"], [501, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[393, "ivy.partial_tensor_to_vec"], [502, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[393, "ivy.partial_unfold"], [503, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[393, "ivy.partial_vec_to_tensor"], [504, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[393, "ivy.put_along_axis"], [505, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[393, "ivy.rot90"], [506, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[393, "ivy.soft_thresholding"], [507, "ivy.soft_thresholding"]], "take() (in module ivy)": [[393, "ivy.take"], [508, "ivy.take"]], "take_along_axis() (in module ivy)": [[393, "ivy.take_along_axis"], [509, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[393, "ivy.top_k"], [510, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[393, "ivy.trim_zeros"], [511, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[393, "ivy.unflatten"], [512, "ivy.unflatten"]], "unfold() (in module ivy)": [[393, "ivy.unfold"], [513, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[393, "ivy.unique_consecutive"], [514, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[393, "ivy.vsplit"], [515, "ivy.vsplit"]], "vstack() (in module ivy)": [[393, "ivy.vstack"], [516, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[394, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[395, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[396, "ivy.batch_norm"], [517, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[396, "ivy.group_norm"], [518, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[396, "ivy.instance_norm"], [519, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[396, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[396, "ivy.l1_normalize"], [520, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[396, "ivy.l2_normalize"], [521, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[396, "ivy.local_response_norm"], [522, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[396, "ivy.lp_normalize"], [523, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[397, "ivy.bernoulli"], [524, "ivy.bernoulli"]], "beta() (in module ivy)": [[397, "ivy.beta"], [525, "ivy.beta"]], "dirichlet() (in module ivy)": [[397, "ivy.dirichlet"], [526, "ivy.dirichlet"]], "gamma() (in module ivy)": [[397, "ivy.gamma"], [527, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[397, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[397, "ivy.poisson"], [528, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[398, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[398, "ivy.unravel_index"], [529, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[399, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[400, "ivy.invert_permutation"], [530, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[400, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[400, "ivy.lexsort"], [531, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[401, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[401, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[401, "ivy.is_ivy_sparse_array"], [532, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[401, "ivy.is_native_sparse_array"], [533, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[401, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[401, "ivy.native_sparse_array"], [534, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[401, "ivy.native_sparse_array_to_indices_values_and_shape"], [535, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[402, "ivy.bincount"], [536, "ivy.bincount"]], "corrcoef() (in module ivy)": [[402, "ivy.corrcoef"], [537, "ivy.corrcoef"]], "cov() (in module ivy)": [[402, "ivy.cov"], [538, "ivy.cov"]], "cummax() (in module ivy)": [[402, "ivy.cummax"], [539, "ivy.cummax"]], "cummin() (in module ivy)": [[402, "ivy.cummin"], [540, "ivy.cummin"]], "histogram() (in module ivy)": [[402, "ivy.histogram"], [541, "ivy.histogram"]], "igamma() (in module ivy)": [[402, "ivy.igamma"], [542, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[402, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[402, "ivy.median"], [543, "ivy.median"]], "nanmean() (in module ivy)": [[402, "ivy.nanmean"], [544, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[402, "ivy.nanmedian"], [545, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[402, "ivy.nanmin"], [546, "ivy.nanmin"]], "nanprod() (in module ivy)": [[402, "ivy.nanprod"], [547, "ivy.nanprod"]], "quantile() (in module ivy)": [[402, "ivy.quantile"], [548, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[403, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[403, "ivy.optional_get_element"], [549, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[404, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[404, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[405, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[405, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[406, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[406, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[407, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[407, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[409, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[409, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[410, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[410, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[411, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[411, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[412, "ivy.Array.dct"]], "dct() (ivy.container method)": [[412, "ivy.Container.dct"]], "dft() (ivy.array method)": [[413, "ivy.Array.dft"]], "dft() (ivy.container method)": [[413, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[414, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[414, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[415, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[415, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[416, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[416, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[417, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[417, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[418, "ivy.Array.fft"]], "fft() (ivy.container method)": [[418, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[419, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[422, "ivy.Array.idct"]], "idct() (ivy.container method)": [[422, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[423, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[423, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[424, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[424, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[426, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[426, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[427, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[427, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[428, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[428, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[429, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[429, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[430, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[430, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[433, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[433, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[434, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[434, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[435, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[435, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[437, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[437, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[438, "ivy.Array.stft"]], "stft() (ivy.container method)": [[438, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[439, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[439, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[440, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[440, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[441, "ivy.Array.cond"]], "cond() (ivy.container method)": [[441, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[442, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[442, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[443, "ivy.Array.dot"]], "dot() (ivy.container method)": [[443, "ivy.Container.dot"]], "eig() (ivy.array method)": [[444, "ivy.Array.eig"], [689, "ivy.Array.eig"]], "eig() (ivy.container method)": [[444, "ivy.Container.eig"], [689, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[445, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[445, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[446, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[446, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[447, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[447, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[448, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[448, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[449, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[449, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[451, "ivy.Array.kron"]], "kron() (ivy.container method)": [[451, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[455, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[455, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[456, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[456, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[457, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[457, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[458, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[458, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[459, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[459, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[460, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[460, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[462, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[462, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[463, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[463, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[464, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[464, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[465, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[465, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[466, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[466, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[467, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[467, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[468, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[468, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[469, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[469, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[470, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[470, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[471, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[471, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[472, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[472, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[473, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[473, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[474, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[474, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[475, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[475, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[476, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[476, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[477, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[477, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[478, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[478, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[479, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[479, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[480, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[483, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[483, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[484, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[484, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[485, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[485, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[486, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[486, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[487, "ivy.Array.expand"]], "expand() (ivy.container method)": [[487, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[488, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[488, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[489, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[489, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[490, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[490, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[491, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[491, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[492, "ivy.Array.fold"]], "fold() (ivy.container method)": [[492, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[493, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[493, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[494, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[494, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[495, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[495, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[496, "ivy.Array.i0"]], "i0() (ivy.container method)": [[496, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[497, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[497, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[498, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[498, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[499, "ivy.Array.pad"]], "pad() (ivy.container method)": [[499, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[501, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[501, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[502, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[502, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[503, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[503, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[504, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[504, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[505, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[505, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[506, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[506, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[507, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[507, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[508, "ivy.Array.take"]], "take() (ivy.container method)": [[508, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[509, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[509, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[510, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[510, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[511, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[511, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[512, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[512, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[513, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[513, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[514, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[514, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[515, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[515, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[516, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[516, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[517, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[517, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[518, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[518, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[519, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[519, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[520, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[520, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[521, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[521, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[523, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[523, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[524, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[524, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[525, "ivy.Array.beta"]], "beta() (ivy.container method)": [[525, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[526, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[526, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[527, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[527, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[528, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[528, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[529, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[529, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[530, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[531, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[531, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[536, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[536, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[537, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[537, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[538, "ivy.Array.cov"]], "cov() (ivy.container method)": [[538, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[539, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[539, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[540, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[540, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[541, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[541, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[542, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[542, "ivy.Container.igamma"]], "median() (ivy.array method)": [[543, "ivy.Array.median"]], "median() (ivy.container method)": [[543, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[544, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[544, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[545, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[545, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[546, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[546, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[547, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[547, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[548, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[548, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[549, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[549, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[550, "ivy.all_equal"], [651, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[550, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[550, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[551, "ivy.arg_info"], [651, "ivy.arg_info"]], "arg_names() (in module ivy)": [[552, "ivy.arg_names"], [651, "ivy.arg_names"]], "array_equal() (in module ivy)": [[553, "ivy.array_equal"], [651, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[553, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[553, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[554, "ivy.assert_supports_inplace"], [651, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[554, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[554, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[555, "ivy.cache_fn"], [651, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[556, "ivy.clip_matrix_norm"], [651, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[556, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[556, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[557, "ivy.clip_vector_norm"], [651, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[557, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[557, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[558, "ivy.container_types"], [651, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[559, "ivy.current_backend_str"], [651, "ivy.current_backend_str"]], "default() (in module ivy)": [[560, "ivy.default"], [651, "ivy.default"]], "default() (ivy.array method)": [[560, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[561, "ivy.einops_rearrange"], [651, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[561, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[561, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[562, "ivy.einops_reduce"], [651, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[562, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[562, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[563, "ivy.einops_repeat"], [651, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[563, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[563, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[564, "ivy.exists"], [651, "ivy.exists"]], "exists() (ivy.array method)": [[564, "ivy.Array.exists"]], "exists() (ivy.container method)": [[564, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[565, "ivy.fourier_encode"], [651, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[565, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[565, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[566, "ivy.function_supported_devices_and_dtypes"], [651, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[567, "ivy.function_unsupported_devices_and_dtypes"], [651, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[568, "ivy.gather"], [651, "ivy.gather"]], "gather() (ivy.array method)": [[568, "ivy.Array.gather"]], "gather() (ivy.container method)": [[568, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[569, "ivy.gather_nd"], [651, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[569, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[569, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[570, "ivy.get_all_arrays_in_memory"], [651, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[571, "ivy.get_item"], [651, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[572, "ivy.get_num_dims"], [651, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[572, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[572, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[573, "ivy.get_referrers_recursive"], [651, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[574, "ivy.has_nans"], [651, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[574, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[574, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[575, "ivy.inplace_arrays_supported"], [651, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[576, "ivy.inplace_decrement"], [651, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[576, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[576, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[577, "ivy.inplace_increment"], [651, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[577, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[577, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[578, "ivy.inplace_update"], [651, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[578, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[578, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[579, "ivy.inplace_variables_supported"], [651, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[580, "ivy.is_array"], [651, "ivy.is_array"]], "is_array() (ivy.array method)": [[580, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[580, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[581, "ivy.is_ivy_array"], [651, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[581, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[581, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[582, "ivy.is_ivy_container"], [651, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[582, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[583, "ivy.is_ivy_nested_array"], [651, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[584, "ivy.is_native_array"], [651, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[584, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[584, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[585, "ivy.isin"], [651, "ivy.isin"]], "isin() (ivy.array method)": [[585, "ivy.Array.isin"]], "isin() (ivy.container method)": [[585, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[586, "ivy.isscalar"], [651, "ivy.isscalar"]], "itemsize() (in module ivy)": [[587, "ivy.itemsize"], [651, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[587, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[587, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[588, "ivy.match_kwargs"], [651, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[589, "ivy.multiprocessing"], [651, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[590, "ivy.num_arrays_in_memory"], [651, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[591, "ivy.print_all_arrays_in_memory"], [651, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[592, "ivy.scatter_flat"], [651, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[592, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[592, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[593, "ivy.scatter_nd"], [651, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[593, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[593, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[594, "ivy.set_array_mode"], [651, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[595, "ivy.set_exception_trace_mode"], [651, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[596, "ivy.set_inplace_mode"], [651, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[597, "ivy.set_item"], [651, "ivy.set_item"]], "set_min_base() (in module ivy)": [[598, "ivy.set_min_base"], [651, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[599, "ivy.set_min_denominator"], [651, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[600, "ivy.set_nestable_mode"], [651, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[601, "ivy.set_precise_mode"], [651, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[602, "ivy.set_queue_timeout"], [651, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[603, "ivy.set_shape_array_mode"], [651, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[604, "ivy.set_show_func_wrapper_trace_mode"], [651, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[605, "ivy.set_tmp_dir"], [651, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[606, "ivy.shape"], [651, "ivy.shape"]], "shape() (ivy.array method)": [[606, "ivy.Array.shape"]], "size() (in module ivy)": [[607, "ivy.size"], [651, "ivy.size"]], "size() (ivy.array method)": [[607, "ivy.Array.size"]], "size() (ivy.container method)": [[607, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[608, "ivy.stable_divide"], [651, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[608, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[608, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[609, "ivy.stable_pow"], [651, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[609, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[609, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[610, "ivy.strides"], [651, "ivy.strides"]], "strides() (ivy.array method)": [[610, "ivy.Array.strides"]], "strides() (ivy.container method)": [[610, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[611, "ivy.supports_inplace_updates"], [651, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[611, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[611, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[612, "ivy.to_ivy_shape"], [651, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[613, "ivy.to_list"], [651, "ivy.to_list"]], "to_list() (ivy.array method)": [[613, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[613, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[614, "ivy.to_native_shape"], [651, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[615, "ivy.to_numpy"], [651, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[615, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[615, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[616, "ivy.to_scalar"], [651, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[616, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[616, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[617, "ivy.try_else_none"], [651, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[618, "ivy.unset_array_mode"], [651, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[619, "ivy.unset_exception_trace_mode"], [651, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[620, "ivy.unset_inplace_mode"], [651, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[621, "ivy.unset_min_base"], [651, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[622, "ivy.unset_min_denominator"], [651, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[623, "ivy.unset_nestable_mode"], [651, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[624, "ivy.unset_precise_mode"], [651, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[625, "ivy.unset_queue_timeout"], [651, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[626, "ivy.unset_shape_array_mode"], [651, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[627, "ivy.unset_show_func_wrapper_trace_mode"], [651, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[628, "ivy.unset_tmp_dir"], [651, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[629, "ivy.value_is_nan"], [651, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[629, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[629, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[630, "ivy.vmap"], [651, "ivy.vmap"]], "adam_step() (in module ivy)": [[631, "ivy.adam_step"], [652, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[631, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[631, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[632, "ivy.adam_update"], [652, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[632, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[632, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[633, "ivy.execute_with_gradients"], [652, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[634, "ivy.grad"], [652, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[635, "ivy.gradient_descent_update"], [652, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[635, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[635, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[636, "ivy.jac"], [652, "ivy.jac"]], "lamb_update() (in module ivy)": [[637, "ivy.lamb_update"], [652, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[637, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[637, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[638, "ivy.lars_update"], [652, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[638, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[638, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[639, "ivy.optimizer_update"], [652, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[639, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[639, "ivy.Container.optimizer_update"]], "requires_gradient() (in module ivy)": [[640, "ivy.requires_gradient"], [652, "ivy.requires_gradient"]], "stop_gradient() (in module ivy)": [[641, "ivy.stop_gradient"], [652, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[641, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[641, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[642, "ivy.value_and_grad"], [652, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[643, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[644, "ivy.e"]], "inf (in module ivy)": [[644, "ivy.inf"]], "ivy.functional.ivy.constants": [[644, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[644, "ivy.nan"]], "newaxis (in module ivy)": [[644, "ivy.newaxis"]], "pi (in module ivy)": [[644, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[645, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[646, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[646, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[647, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[647, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[647, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[647, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[647, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[647, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[648, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[648, "ivy.Profiler"]], "ivy.functional.ivy.device": [[648, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[649, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[650, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[651, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[651, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[651, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[652, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[653, "ivy.conv"], [666, "ivy.conv"]], "conv1d() (in module ivy)": [[653, "ivy.conv1d"], [667, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[653, "ivy.conv1d_transpose"], [668, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[653, "ivy.conv2d"], [669, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[653, "ivy.conv2d_transpose"], [670, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[653, "ivy.conv3d"], [671, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[653, "ivy.conv3d_transpose"], [672, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[653, "ivy.conv_general_dilated"], [673, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[653, "ivy.conv_general_transpose"], [674, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[653, "ivy.depthwise_conv2d"], [675, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[653, "ivy.dropout"], [676, "ivy.dropout"]], "ivy.functional.ivy.layers": [[653, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[653, "ivy.linear"], [677, "ivy.linear"]], "lstm() (in module ivy)": [[653, "ivy.lstm"], [678, "ivy.lstm"]], "lstm_update() (in module ivy)": [[653, "ivy.lstm_update"], [679, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[653, "ivy.multi_head_attention"], [680, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[653, "ivy.nms"], [681, "ivy.nms"]], "roi_align() (in module ivy)": [[653, "ivy.roi_align"], [682, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[653, "ivy.scaled_dot_product_attention"], [683, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[654, "ivy.cholesky"], [684, "ivy.cholesky"]], "cross() (in module ivy)": [[654, "ivy.cross"], [685, "ivy.cross"]], "det() (in module ivy)": [[654, "ivy.det"], [686, "ivy.det"]], "diag() (in module ivy)": [[654, "ivy.diag"], [687, "ivy.diag"]], "diagonal() (in module ivy)": [[654, "ivy.diagonal"], [688, "ivy.diagonal"]], "eigh() (in module ivy)": [[654, "ivy.eigh"], [690, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[654, "ivy.eigvalsh"], [691, "ivy.eigvalsh"]], "inner() (in module ivy)": [[654, "ivy.inner"], [692, "ivy.inner"]], "inv() (in module ivy)": [[654, "ivy.inv"], [693, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[654, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[654, "ivy.matmul"], [694, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[654, "ivy.matrix_norm"], [695, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[654, "ivy.matrix_power"], [696, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[654, "ivy.matrix_rank"], [697, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[654, "ivy.matrix_transpose"], [698, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[654, "ivy.outer"], [699, "ivy.outer"]], "pinv() (in module ivy)": [[654, "ivy.pinv"], [700, "ivy.pinv"]], "qr() (in module ivy)": [[654, "ivy.qr"], [701, "ivy.qr"]], "slogdet() (in module ivy)": [[654, "ivy.slogdet"], [702, "ivy.slogdet"]], "solve() (in module ivy)": [[654, "ivy.solve"], [703, "ivy.solve"]], "svd() (in module ivy)": [[654, "ivy.svd"], [704, "ivy.svd"]], "svdvals() (in module ivy)": [[654, "ivy.svdvals"], [705, "ivy.svdvals"]], "tensordot() (in module ivy)": [[654, "ivy.tensordot"], [706, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[654, "ivy.tensorsolve"], [707, "ivy.tensorsolve"]], "trace() (in module ivy)": [[654, "ivy.trace"], [708, "ivy.trace"]], "vander() (in module ivy)": [[654, "ivy.vander"], [709, "ivy.vander"]], "vecdot() (in module ivy)": [[654, "ivy.vecdot"], [710, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[654, "ivy.vector_norm"], [711, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[654, "ivy.vector_to_skew_symmetric_matrix"], [712, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[655, "ivy.binary_cross_entropy"], [713, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[655, "ivy.cross_entropy"], [714, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[655, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[655, "ivy.sparse_cross_entropy"], [715, "ivy.sparse_cross_entropy"]], "ssim_loss() (in module ivy)": [[655, "ivy.ssim_loss"], [716, "ivy.ssim_loss"]], "wasserstein_loss_discriminator() (in module ivy)": [[655, "ivy.wasserstein_loss_discriminator"], [717, "ivy.wasserstein_loss_discriminator"]], "wasserstein_loss_generator() (in module ivy)": [[655, "ivy.wasserstein_loss_generator"], [718, "ivy.wasserstein_loss_generator"]], "clip() (in module ivy)": [[656, "ivy.clip"], [719, "ivy.clip"]], "concat() (in module ivy)": [[656, "ivy.concat"], [720, "ivy.concat"]], "constant_pad() (in module ivy)": [[656, "ivy.constant_pad"], [721, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[656, "ivy.expand_dims"], [722, "ivy.expand_dims"]], "flip() (in module ivy)": [[656, "ivy.flip"], [723, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[656, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[656, "ivy.permute_dims"], [724, "ivy.permute_dims"]], "repeat() (in module ivy)": [[656, "ivy.repeat"], [725, "ivy.repeat"]], "reshape() (in module ivy)": [[656, "ivy.reshape"], [726, "ivy.reshape"]], "roll() (in module ivy)": [[656, "ivy.roll"], [727, "ivy.roll"]], "split() (in module ivy)": [[656, "ivy.split"], [728, "ivy.split"]], "squeeze() (in module ivy)": [[656, "ivy.squeeze"], [729, "ivy.squeeze"]], "stack() (in module ivy)": [[656, "ivy.stack"], [730, "ivy.stack"]], "swapaxes() (in module ivy)": [[656, "ivy.swapaxes"], [731, "ivy.swapaxes"]], "tile() (in module ivy)": [[656, "ivy.tile"], [732, "ivy.tile"]], "unstack() (in module ivy)": [[656, "ivy.unstack"], [733, "ivy.unstack"]], "zero_pad() (in module ivy)": [[656, "ivy.zero_pad"], [734, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[657, "ivy.fomaml_step"], [735, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[657, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[657, "ivy.maml_step"], [736, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[657, "ivy.reptile_step"], [737, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[658, "ivy.all_nested_indices"], [738, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[658, "ivy.copy_nest"], [739, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[658, "ivy.duplicate_array_index_chains"], [740, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[658, "ivy.index_nest"], [741, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[658, "ivy.insert_into_nest_at_index"], [742, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[658, "ivy.insert_into_nest_at_indices"], [743, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[658, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[658, "ivy.map"], [744, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[658, "ivy.map_nest_at_index"], [745, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[658, "ivy.map_nest_at_indices"], [746, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[658, "ivy.multi_index_nest"], [747, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[658, "ivy.nested_any"], [748, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[658, "ivy.nested_argwhere"], [749, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[658, "ivy.nested_map"], [750, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[658, "ivy.nested_multi_map"], [751, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[658, "ivy.prune_empty"], [752, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[658, "ivy.prune_nest_at_index"], [753, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[658, "ivy.prune_nest_at_indices"], [754, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[658, "ivy.set_nest_at_index"], [755, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[658, "ivy.set_nest_at_indices"], [756, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[659, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[659, "ivy.layer_norm"], [757, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[660, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[660, "ivy.multinomial"], [758, "ivy.multinomial"]], "randint() (in module ivy)": [[660, "ivy.randint"], [759, "ivy.randint"]], "random_normal() (in module ivy)": [[660, "ivy.random_normal"], [760, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[660, "ivy.random_uniform"], [761, "ivy.random_uniform"]], "seed() (in module ivy)": [[660, "ivy.seed"], [762, "ivy.seed"]], "shuffle() (in module ivy)": [[660, "ivy.shuffle"], [763, "ivy.shuffle"]], "argmax() (in module ivy)": [[661, "ivy.argmax"], [764, "ivy.argmax"]], "argmin() (in module ivy)": [[661, "ivy.argmin"], [765, "ivy.argmin"]], "argwhere() (in module ivy)": [[661, "ivy.argwhere"], [766, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[661, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[661, "ivy.nonzero"], [767, "ivy.nonzero"]], "where() (in module ivy)": [[661, "ivy.where"], [768, "ivy.where"]], "ivy.functional.ivy.set": [[662, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[662, "ivy.unique_all"], [769, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[662, "ivy.unique_counts"], [770, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[662, "ivy.unique_inverse"], [771, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[662, "ivy.unique_values"], [772, "ivy.unique_values"]], "argsort() (in module ivy)": [[663, "ivy.argsort"], [773, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[663, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[663, "ivy.msort"], [774, "ivy.msort"]], "searchsorted() (in module ivy)": [[663, "ivy.searchsorted"], [775, "ivy.searchsorted"]], "sort() (in module ivy)": [[663, "ivy.sort"], [776, "ivy.sort"]], "cumprod() (in module ivy)": [[664, "ivy.cumprod"], [777, "ivy.cumprod"]], "cumsum() (in module ivy)": [[664, "ivy.cumsum"], [778, "ivy.cumsum"]], "einsum() (in module ivy)": [[664, "ivy.einsum"], [779, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[664, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[664, "ivy.max"], [780, "ivy.max"]], "mean() (in module ivy)": [[664, "ivy.mean"], [781, "ivy.mean"]], "min() (in module ivy)": [[664, "ivy.min"], [782, "ivy.min"]], "prod() (in module ivy)": [[664, "ivy.prod"], [783, "ivy.prod"]], "std() (in module ivy)": [[664, "ivy.std"], [784, "ivy.std"]], "sum() (in module ivy)": [[664, "ivy.sum"], [785, "ivy.sum"]], "var() (in module ivy)": [[664, "ivy.var"], [786, "ivy.var"]], "all() (in module ivy)": [[665, "ivy.all"], [787, "ivy.all"]], "any() (in module ivy)": [[665, "ivy.any"], [788, "ivy.any"]], "ivy.functional.ivy.utility": [[665, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[665, "ivy.load"], [789, "ivy.load"]], "save() (in module ivy)": [[665, "ivy.save"], [790, "ivy.save"]], "conv1d() (ivy.array method)": [[667, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[667, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[668, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[668, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[669, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[669, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[670, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[670, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[671, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[671, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[672, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[672, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[675, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[675, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[676, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[676, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[677, "ivy.Array.linear"]], "linear() (ivy.container method)": [[677, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[679, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[679, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[680, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[680, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[683, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[683, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[684, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[684, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[685, "ivy.Array.cross"]], "cross() (ivy.container method)": [[685, "ivy.Container.cross"]], "det() (ivy.array method)": [[686, "ivy.Array.det"]], "det() (ivy.container method)": [[686, "ivy.Container.det"]], "diag() (ivy.array method)": [[687, "ivy.Array.diag"]], "diag() (ivy.container method)": [[687, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[688, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[688, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[690, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[690, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[691, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[691, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[692, "ivy.Array.inner"]], "inner() (ivy.container method)": [[692, "ivy.Container.inner"]], "inv() (ivy.array method)": [[693, "ivy.Array.inv"]], "inv() (ivy.container method)": [[693, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[694, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[694, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[695, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[695, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[696, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[696, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[697, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[697, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[698, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[698, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[699, "ivy.Array.outer"]], "outer() (ivy.container method)": [[699, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[700, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[700, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[701, "ivy.Array.qr"]], "qr() (ivy.container method)": [[701, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[702, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[702, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[703, "ivy.Array.solve"]], "solve() (ivy.container method)": [[703, "ivy.Container.solve"]], "svd() (ivy.array method)": [[704, "ivy.Array.svd"]], "svd() (ivy.container method)": [[704, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[705, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[705, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[706, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[706, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[707, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[707, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[708, "ivy.Array.trace"]], "trace() (ivy.container method)": [[708, "ivy.Container.trace"]], "vander() (ivy.array method)": [[709, "ivy.Array.vander"]], "vander() (ivy.container method)": [[709, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[710, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[710, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[711, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[711, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[712, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[712, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[713, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[713, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[714, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[714, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[715, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[715, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[719, "ivy.Array.clip"]], "clip() (ivy.container method)": [[719, "ivy.Container.clip"]], "concat() (ivy.array method)": [[720, "ivy.Array.concat"]], "concat() (ivy.container method)": [[720, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[721, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[721, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[722, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[722, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[723, "ivy.Array.flip"]], "flip() (ivy.container method)": [[723, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[724, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[724, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[725, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[725, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[726, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[726, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[727, "ivy.Array.roll"]], "roll() (ivy.container method)": [[727, "ivy.Container.roll"]], "split() (ivy.array method)": [[728, "ivy.Array.split"]], "split() (ivy.container method)": [[728, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[729, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[729, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[730, "ivy.Array.stack"]], "stack() (ivy.container method)": [[730, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[731, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[731, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[732, "ivy.Array.tile"]], "tile() (ivy.container method)": [[732, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[733, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[733, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[734, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[734, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[757, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[757, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[758, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[758, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[759, "ivy.Array.randint"]], "randint() (ivy.container method)": [[759, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[760, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[760, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[761, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[761, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[763, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[763, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[764, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[764, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[765, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[765, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[766, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[766, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[767, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[767, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[768, "ivy.Array.where"]], "where() (ivy.container method)": [[768, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[769, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[769, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[770, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[770, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[771, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[771, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[772, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[772, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[773, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[773, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[774, "ivy.Array.msort"]], "msort() (ivy.container method)": [[774, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[775, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[775, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[776, "ivy.Array.sort"]], "sort() (ivy.container method)": [[776, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[777, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[777, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[778, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[778, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[779, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[779, "ivy.Container.einsum"]], "max() (ivy.array method)": [[780, "ivy.Array.max"]], "max() (ivy.container method)": [[780, "ivy.Container.max"]], "mean() (ivy.array method)": [[781, "ivy.Array.mean"]], "mean() (ivy.container method)": [[781, "ivy.Container.mean"]], "min() (ivy.array method)": [[782, "ivy.Array.min"]], "min() (ivy.container method)": [[782, "ivy.Container.min"]], "prod() (ivy.array method)": [[783, "ivy.Array.prod"]], "prod() (ivy.container method)": [[783, "ivy.Container.prod"]], "std() (ivy.array method)": [[784, "ivy.Array.std"]], "std() (ivy.container method)": [[784, "ivy.Container.std"]], "sum() (ivy.array method)": [[785, "ivy.Array.sum"]], "sum() (ivy.container method)": [[785, "ivy.Container.sum"]], "var() (ivy.array method)": [[786, "ivy.Array.var"]], "var() (ivy.container method)": [[786, "ivy.Container.var"]], "all() (ivy.array method)": [[787, "ivy.Array.all"]], "all() (ivy.container method)": [[787, "ivy.Container.all"]], "any() (ivy.array method)": [[788, "ivy.Array.any"]], "any() (ivy.container method)": [[788, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[791, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[791, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[792, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[793, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[793, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[794, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[794, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[794, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[794, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[794, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[795, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[796, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[796, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[797, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[797, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[798, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[798, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[799, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[799, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[800, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[800, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[800, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[801, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[801, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[802, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[802, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[803, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[803, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[804, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[804, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[808, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[808, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[808, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[808, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[808, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[808, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[808, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[808, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[808, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[808, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[808, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[808, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[808, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[808, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[808, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[808, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[808, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[808, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[808, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[808, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[809, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[809, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[809, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[809, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[809, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[809, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[809, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[809, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[809, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[810, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[810, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[811, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[811, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[811, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[811, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[811, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[811, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[811, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[811, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[811, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[811, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[811, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[811, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[811, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[811, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[811, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[811, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.FFT"]], "idct (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.IDct"]], "ifft (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[812, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[812, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[812, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[812, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[812, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[812, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[812, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[812, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[812, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[812, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[812, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[812, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[812, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[812, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[812, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[812, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[812, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.idct method)": [[812, "ivy.stateful.layers.IDct.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[812, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[812, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[812, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[812, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[812, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[812, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[812, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[812, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "extra_repr() (ivy.stateful.layers.idct method)": [[812, "ivy.stateful.layers.IDct.extra_repr"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[812, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[812, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[813, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[813, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[813, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[813, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[813, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[813, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[813, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[814, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[814, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[814, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[814, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[814, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[814, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[815, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[815, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[815, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[815, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[815, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[816, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[816, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[816, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[816, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[816, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[816, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[816, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[816, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[816, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[816, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[816, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[816, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[816, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[816, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[816, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[816, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[816, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[816, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[817, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[817, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[817, "module-ivy.stateful.sequential"]], "ivy.stateful.utilities": [[818, "module-ivy.stateful.utilities"]], "sync_models() (in module ivy.stateful.utilities)": [[818, "ivy.stateful.utilities.sync_models"]], "sync_models_torch_and_jax() (in module ivy.stateful.utilities)": [[818, "ivy.stateful.utilities.sync_models_torch_and_jax"]], "sync_models_torch_and_tf() (in module ivy.stateful.utilities)": [[818, "ivy.stateful.utilities.sync_models_torch_and_tf"]], "check_all() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[819, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[819, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[820, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[821, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[821, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[821, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[821, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[821, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[821, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[821, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[821, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[821, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[821, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[821, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[822, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[822, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[822, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[823, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[823, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[824, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[824, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[824, "module-ivy.utils.binaries"]], "conv1d (ivy.utils.decorator_utils.transposetype attribute)": [[825, "ivy.utils.decorator_utils.TransposeType.CONV1D"]], "conv2d (ivy.utils.decorator_utils.transposetype attribute)": [[825, "ivy.utils.decorator_utils.TransposeType.CONV2D"]], "conv3d (ivy.utils.decorator_utils.transposetype attribute)": [[825, "ivy.utils.decorator_utils.TransposeType.CONV3D"]], "callvisitor (class in ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.CallVisitor"]], "no_transpose (ivy.utils.decorator_utils.transposetype attribute)": [[825, "ivy.utils.decorator_utils.TransposeType.NO_TRANSPOSE"]], "transposetype (class in ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.TransposeType"]], "__init__() (ivy.utils.decorator_utils.callvisitor method)": [[825, "ivy.utils.decorator_utils.CallVisitor.__init__"]], "apply_transpose() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.apply_transpose"]], "dummy_inplace_update() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.dummy_inplace_update"]], "get_next_func() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.get_next_func"]], "handle_get_item() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_get_item"]], "handle_methods() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_methods"]], "handle_set_item() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_set_item"]], "handle_transpose_in_input_and_output() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output"]], "handle_transpose_in_input_and_output_for_functions() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_transpose_in_input_and_output_for_functions"]], "handle_transpose_in_pad() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.handle_transpose_in_pad"]], "ivy.utils.decorator_utils": [[825, "module-ivy.utils.decorator_utils"]], "retrieve_object() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.retrieve_object"]], "store_config_info() (in module ivy.utils.decorator_utils)": [[825, "ivy.utils.decorator_utils.store_config_info"]], "visit_call() (ivy.utils.decorator_utils.callvisitor method)": [[825, "ivy.utils.decorator_utils.CallVisitor.visit_Call"]], "import_module() (in module ivy.utils.dynamic_import)": [[826, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[826, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[827, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[827, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[828, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[828, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[829, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[829, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[829, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[829, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[829, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[829, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[829, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[829, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[829, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[829, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[829, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[829, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[829, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[829, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[829, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[829, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[829, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[829, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[829, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[829, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[829, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[829, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[829, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[829, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[829, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[829, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[830, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[830, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[830, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[831, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[831, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[831, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[832, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[832, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[832, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[832, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[832, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[832, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[832, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[832, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[832, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[832, "ivy.utils.profiler.Profiler.viz"]], "automatic code conversions": [[874, "term-Automatic-Code-Conversions"]], "backend handler": [[874, "term-Backend-Handler"]], "compositional functions": [[874, "term-Compositional-Functions"]], "convenience functions": [[874, "term-Convenience-Functions"]], "framework": [[874, "term-Framework"]], "framework handler": [[874, "term-Framework-Handler"]], "graph compiler": [[874, "term-Graph-Compiler"]], "ivy array": [[874, "term-Ivy-Array"]], "ivy backends": [[874, "term-Ivy-Backends"]], "ivy compiler": [[874, "term-Ivy-Compiler"]], "ivy container": [[874, "term-Ivy-Container"]], "ivy frontends": [[874, "term-Ivy-Frontends"]], "ivy functional api": [[874, "term-Ivy-Functional-API"]], "ivy tracer": [[874, "term-Ivy-Tracer"]], "ivy transpiler": [[874, "term-Ivy-Transpiler"]], "mixed functions": [[874, "term-Mixed-Functions"]], "native array": [[874, "term-Native-Array"]], "nestable functions": [[874, "term-Nestable-Functions"]], "pipeline": [[874, "term-Pipeline"]], "primary functions": [[874, "term-Primary-Functions"]], "standalone functions": [[874, "term-Standalone-Functions"]], "submodule helper functions": [[874, "term-Submodule-Helper-Functions"]], "built-in function": [[879, "ivy.graph_transpile"], [880, "ivy.trace_graph"], [881, "ivy.transpile"], [882, "ivy.unify"]], "ivy.graph_transpile()": [[879, "ivy.graph_transpile"]], "ivy.trace_graph()": [[880, "ivy.trace_graph"]], "ivy.transpile()": [[881, "ivy.transpile"]], "ivy.unify()": [[882, "ivy.unify"]]}})